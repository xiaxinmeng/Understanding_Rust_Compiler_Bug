{"sha": "9fa580b1175018b0a276b0bc68f9827a106f7260", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYTU4MGIxMTc1MDE4YjBhMjc2YjBiYzY4Zjk4MjdhMTA2ZjcyNjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-27T02:18:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-27T02:18:11Z"}, "message": "Auto merge of #82577 - Dylan-DPC:rollup-c3si8ju, r=Dylan-DPC\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #81794 (update tracking issue for `relaxed_struct_unsize`)\n - #82057 (Replace const_cstr with cstr crate)\n - #82370 (Improve anonymous lifetime note to indicate the target span)\n - #82394 (:arrow_up: rust-analyzer)\n - #82396 (Add Future trait for doc_spotlight feature doc)\n - #82404 (Test hexagon-enum only when llvm target is present)\n - #82419 (expand: Preserve order of inert attributes during expansion)\n - #82420 (Enable API documentation for `std::os::wasi`.)\n - #82421 (Add a `size()` function to WASI's `MetadataExt`.)\n - #82442 (Skip emitting closure diagnostic when closure_kind_origins has no entry)\n - #82473 (Use libc::accept4 on Android instead of raw syscall.)\n - #82482 (Use small hash set in `mir_inliner_callees`)\n - #82490 (Update cargo)\n - #82494 (Substitute erased lifetimes on bad placeholder type)\n\nFailed merges:\n\n - #82448 (Combine HasAttrs and HasTokens into AstLike)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "59c6d8c32cb9915f5ef2e461cda52c68ad4d87ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59c6d8c32cb9915f5ef2e461cda52c68ad4d87ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fa580b1175018b0a276b0bc68f9827a106f7260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa580b1175018b0a276b0bc68f9827a106f7260", "html_url": "https://github.com/rust-lang/rust/commit/9fa580b1175018b0a276b0bc68f9827a106f7260", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fa580b1175018b0a276b0bc68f9827a106f7260/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3da2dd3eae7b7cbf16960ab993de666470e43991", "url": "https://api.github.com/repos/rust-lang/rust/commits/3da2dd3eae7b7cbf16960ab993de666470e43991", "html_url": "https://github.com/rust-lang/rust/commit/3da2dd3eae7b7cbf16960ab993de666470e43991"}, {"sha": "95b31cf94964dcd082c32b41de112541873c2d8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/95b31cf94964dcd082c32b41de112541873c2d8b", "html_url": "https://github.com/rust-lang/rust/commit/95b31cf94964dcd082c32b41de112541873c2d8b"}], "stats": {"total": 904, "additions": 549, "deletions": 355}, "files": [{"sha": "b3b4284a56459c8a964a03226cdc5d0f27a98742", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -904,6 +904,16 @@ dependencies = [\n  \"winapi 0.3.9\",\n ]\n \n+[[package]]\n+name = \"cstr\"\n+version = \"0.2.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c11a39d776a3b35896711da8a04dc1835169dcd36f710878187637314e47941b\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+]\n+\n [[package]]\n name = \"ctor\"\n version = \"0.1.15\"\n@@ -3698,6 +3708,7 @@ name = \"rustc_codegen_llvm\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n+ \"cstr\",\n  \"libc\",\n  \"measureme\",\n  \"rustc-demangle\","}, {"sha": "260edd9570b2b169cf480450b6832dd1759a1c33", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -10,6 +10,7 @@ doctest = false\n \n [dependencies]\n bitflags = \"1.0\"\n+cstr = \"0.2\"\n libc = \"0.2\"\n measureme = \"9.0.0\"\n snap = \"1\""}, {"sha": "d714ff1fe9b4aa4c3f9c9a58a6f59c07a63f5db5", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -554,7 +554,7 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n                 llvm::AddCallSiteAttrString(\n                     callsite,\n                     llvm::AttributePlace::Function,\n-                    rustc_data_structures::const_cstr!(\"cmse_nonsecure_call\"),\n+                    cstr::cstr!(\"cmse_nonsecure_call\"),\n                 );\n             }\n         }"}, {"sha": "09ece6164ebd1a1b2421179685debb983def9190", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -2,8 +2,8 @@\n \n use std::ffi::CString;\n \n+use cstr::cstr;\n use rustc_codegen_ssa::traits::*;\n-use rustc_data_structures::const_cstr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n@@ -75,8 +75,8 @@ pub fn set_frame_pointer_elimination(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value)\n         llvm::AddFunctionAttrStringValue(\n             llfn,\n             llvm::AttributePlace::Function,\n-            const_cstr!(\"frame-pointer\"),\n-            const_cstr!(\"all\"),\n+            cstr!(\"frame-pointer\"),\n+            cstr!(\"all\"),\n         );\n     }\n }\n@@ -95,7 +95,7 @@ fn set_instrument_function(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n         llvm::AddFunctionAttrStringValue(\n             llfn,\n             llvm::AttributePlace::Function,\n-            const_cstr!(\"instrument-function-entry-inlined\"),\n+            cstr!(\"instrument-function-entry-inlined\"),\n             &mcount_name,\n         );\n     }\n@@ -129,24 +129,24 @@ fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n         StackProbeType::None => None,\n         // Request LLVM to generate the probes inline. If the given LLVM version does not support\n         // this, no probe is generated at all (even if the attribute is specified).\n-        StackProbeType::Inline => Some(const_cstr!(\"inline-asm\")),\n+        StackProbeType::Inline => Some(cstr!(\"inline-asm\")),\n         // Flag our internal `__rust_probestack` function as the stack probe symbol.\n         // This is defined in the `compiler-builtins` crate for each architecture.\n-        StackProbeType::Call => Some(const_cstr!(\"__rust_probestack\")),\n+        StackProbeType::Call => Some(cstr!(\"__rust_probestack\")),\n         // Pick from the two above based on the LLVM version.\n         StackProbeType::InlineOrCall { min_llvm_version_for_inline } => {\n             if llvm_util::get_version() < min_llvm_version_for_inline {\n-                Some(const_cstr!(\"__rust_probestack\"))\n+                Some(cstr!(\"__rust_probestack\"))\n             } else {\n-                Some(const_cstr!(\"inline-asm\"))\n+                Some(cstr!(\"inline-asm\"))\n             }\n         }\n     };\n     if let Some(attr_value) = attr_value {\n         llvm::AddFunctionAttrStringValue(\n             llfn,\n             llvm::AttributePlace::Function,\n-            const_cstr!(\"probe-stack\"),\n+            cstr!(\"probe-stack\"),\n             attr_value,\n         );\n     }\n@@ -169,7 +169,7 @@ pub fn apply_target_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     llvm::AddFunctionAttrStringValue(\n         llfn,\n         llvm::AttributePlace::Function,\n-        const_cstr!(\"target-cpu\"),\n+        cstr!(\"target-cpu\"),\n         target_cpu.as_c_str(),\n     );\n }\n@@ -180,7 +180,7 @@ pub fn apply_tune_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n         llvm::AddFunctionAttrStringValue(\n             llfn,\n             llvm::AttributePlace::Function,\n-            const_cstr!(\"tune-cpu\"),\n+            cstr!(\"tune-cpu\"),\n             tune_cpu.as_c_str(),\n         );\n     }\n@@ -289,7 +289,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n         Attribute::NoAlias.apply_llfn(llvm::AttributePlace::ReturnValue, llfn);\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::CMSE_NONSECURE_ENTRY) {\n-        llvm::AddFunctionAttrString(llfn, Function, const_cstr!(\"cmse_nonsecure_entry\"));\n+        llvm::AddFunctionAttrString(llfn, Function, cstr!(\"cmse_nonsecure_entry\"));\n     }\n     sanitize(cx, codegen_fn_attrs.no_sanitize, llfn);\n \n@@ -319,7 +319,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n         llvm::AddFunctionAttrStringValue(\n             llfn,\n             llvm::AttributePlace::Function,\n-            const_cstr!(\"target-features\"),\n+            cstr!(\"target-features\"),\n             &val,\n         );\n     }\n@@ -332,7 +332,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n             llvm::AddFunctionAttrStringValue(\n                 llfn,\n                 llvm::AttributePlace::Function,\n-                const_cstr!(\"wasm-import-module\"),\n+                cstr!(\"wasm-import-module\"),\n                 &module,\n             );\n \n@@ -342,7 +342,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n             llvm::AddFunctionAttrStringValue(\n                 llfn,\n                 llvm::AttributePlace::Function,\n-                const_cstr!(\"wasm-import-name\"),\n+                cstr!(\"wasm-import-name\"),\n                 &name,\n             );\n         }"}, {"sha": "f4852c91e53d5a67fd1b06ba85814f7fb4808cec", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -5,13 +5,13 @@ use crate::llvm::{AtomicOrdering, AtomicRmwBinOp, SynchronizationScope};\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n+use cstr::cstr;\n use libc::{c_char, c_uint};\n use rustc_codegen_ssa::common::{IntPredicate, RealPredicate, TypeKind};\n use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::MemFlags;\n-use rustc_data_structures::const_cstr;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::layout::TyAndLayout;\n@@ -979,7 +979,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn cleanup_pad(&mut self, parent: Option<&'ll Value>, args: &[&'ll Value]) -> Funclet<'ll> {\n-        let name = const_cstr!(\"cleanuppad\");\n+        let name = cstr!(\"cleanuppad\");\n         let ret = unsafe {\n             llvm::LLVMRustBuildCleanupPad(\n                 self.llbuilder,\n@@ -1003,7 +1003,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn catch_pad(&mut self, parent: &'ll Value, args: &[&'ll Value]) -> Funclet<'ll> {\n-        let name = const_cstr!(\"catchpad\");\n+        let name = cstr!(\"catchpad\");\n         let ret = unsafe {\n             llvm::LLVMRustBuildCatchPad(\n                 self.llbuilder,\n@@ -1022,7 +1022,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         unwind: Option<&'ll BasicBlock>,\n         num_handlers: usize,\n     ) -> &'ll Value {\n-        let name = const_cstr!(\"catchswitch\");\n+        let name = cstr!(\"catchswitch\");\n         let ret = unsafe {\n             llvm::LLVMRustBuildCatchSwitch(\n                 self.llbuilder,"}, {"sha": "99046839973d5c64ba968a1ecc06792944d01669", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -5,9 +5,9 @@ use crate::llvm::{self, True};\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n+use cstr::cstr;\n use libc::c_uint;\n use rustc_codegen_ssa::traits::*;\n-use rustc_data_structures::const_cstr;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::interpret::{\n@@ -419,9 +419,9 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n                             .all(|&byte| byte == 0);\n \n                     let sect_name = if all_bytes_are_zero {\n-                        const_cstr!(\"__DATA,__thread_bss\")\n+                        cstr!(\"__DATA,__thread_bss\")\n                     } else {\n-                        const_cstr!(\"__DATA,__thread_data\")\n+                        cstr!(\"__DATA,__thread_data\")\n                     };\n                     llvm::LLVMSetSection(g, sect_name.as_ptr());\n                 }"}, {"sha": "3ddc742420202908879624f5b29b5ea10d45b84b", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -7,10 +7,10 @@ use crate::llvm_util;\n use crate::type_::Type;\n use crate::value::Value;\n \n+use cstr::cstr;\n use rustc_codegen_ssa::base::wants_msvc_seh;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::base_n;\n-use rustc_data_structures::const_cstr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_middle::bug;\n@@ -414,8 +414,8 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn create_used_variable(&self) {\n-        let name = const_cstr!(\"llvm.used\");\n-        let section = const_cstr!(\"llvm.metadata\");\n+        let name = cstr!(\"llvm.used\");\n+        let section = cstr!(\"llvm.metadata\");\n         let array =\n             self.const_array(&self.type_ptr_to(self.type_i8()), &*self.used_statics.borrow());\n "}, {"sha": "85d1b70239925aa136d232117256b153b12afeeb", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -18,8 +18,8 @@ use crate::llvm::debuginfo::{\n };\n use crate::value::Value;\n \n+use cstr::cstr;\n use rustc_codegen_ssa::traits::*;\n-use rustc_data_structures::const_cstr;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -1075,7 +1075,7 @@ pub fn compile_unit_metadata(\n                 gcov_cu_info.len() as c_uint,\n             );\n \n-            let llvm_gcov_ident = const_cstr!(\"llvm.gcov\");\n+            let llvm_gcov_ident = cstr!(\"llvm.gcov\");\n             llvm::LLVMAddNamedMetadataOperand(\n                 debug_context.llmod,\n                 llvm_gcov_ident.as_ptr(),\n@@ -1093,7 +1093,7 @@ pub fn compile_unit_metadata(\n             );\n             llvm::LLVMAddNamedMetadataOperand(\n                 debug_context.llmod,\n-                const_cstr!(\"llvm.ident\").as_ptr(),\n+                cstr!(\"llvm.ident\").as_ptr(),\n                 llvm::LLVMMDNodeInContext(debug_context.llcontext, &name_metadata, 1),\n             );\n         }"}, {"sha": "1ebcb87818ecf3b53b0e4911caaccda2cac30575", "filename": "compiler/rustc_data_structures/src/const_cstr.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3da2dd3eae7b7cbf16960ab993de666470e43991/compiler%2Frustc_data_structures%2Fsrc%2Fconst_cstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da2dd3eae7b7cbf16960ab993de666470e43991/compiler%2Frustc_data_structures%2Fsrc%2Fconst_cstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fconst_cstr.rs?ref=3da2dd3eae7b7cbf16960ab993de666470e43991", "patch": "@@ -1,30 +0,0 @@\n-/// This macro creates a zero-overhead &CStr by adding a NUL terminator to\n-/// the string literal passed into it at compile-time. Use it like:\n-///\n-/// ```\n-///     let some_const_cstr = const_cstr!(\"abc\");\n-/// ```\n-///\n-/// The above is roughly equivalent to:\n-///\n-/// ```\n-///     let some_const_cstr = CStr::from_bytes_with_nul(b\"abc\\0\").unwrap()\n-/// ```\n-///\n-/// Note that macro only checks the string literal for internal NULs if\n-/// debug-assertions are enabled in order to avoid runtime overhead in release\n-/// builds.\n-#[macro_export]\n-macro_rules! const_cstr {\n-    ($s:expr) => {{\n-        use std::ffi::CStr;\n-\n-        let str_plus_nul = concat!($s, \"\\0\");\n-\n-        if cfg!(debug_assertions) {\n-            CStr::from_bytes_with_nul(str_plus_nul.as_bytes()).unwrap()\n-        } else {\n-            unsafe { CStr::from_bytes_with_nul_unchecked(str_plus_nul.as_bytes()) }\n-        }\n-    }};\n-}"}, {"sha": "fcb2bca7b4cc195005315711ae01356760475abf", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -69,7 +69,6 @@ pub mod base_n;\n pub mod binary_search_util;\n pub mod box_region;\n pub mod captures;\n-pub mod const_cstr;\n pub mod flock;\n pub mod functor;\n pub mod fx;"}, {"sha": "10c19ea105e4a2b2280d44244d7d4e3d56ae334e", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -301,6 +301,8 @@ pub enum InvocationKind {\n     },\n     Attr {\n         attr: ast::Attribute,\n+        // Re-insertion position for inert attributes.\n+        pos: usize,\n         item: Annotatable,\n         // Required for resolving derive helper attributes.\n         derives: Vec<Path>,\n@@ -690,7 +692,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 }\n                 _ => unreachable!(),\n             },\n-            InvocationKind::Attr { attr, mut item, derives } => match ext {\n+            InvocationKind::Attr { attr, pos, mut item, derives } => match ext {\n                 SyntaxExtensionKind::Attr(expander) => {\n                     self.gate_proc_macro_input(&item);\n                     self.gate_proc_macro_attr_item(span, &item);\n@@ -721,7 +723,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                 ExpandResult::Retry(item) => {\n                                     // Reassemble the original invocation for retrying.\n                                     return ExpandResult::Retry(Invocation {\n-                                        kind: InvocationKind::Attr { attr, item, derives },\n+                                        kind: InvocationKind::Attr { attr, pos, item, derives },\n                                         ..invoc\n                                     });\n                                 }\n@@ -739,7 +741,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     if *mark_used {\n                         self.cx.sess.mark_attr_used(&attr);\n                     }\n-                    item.visit_attrs(|attrs| attrs.push(attr));\n+                    item.visit_attrs(|attrs| attrs.insert(pos, attr));\n                     fragment_kind.expect_from_annotatables(iter::once(item))\n                 }\n                 _ => unreachable!(),\n@@ -1000,17 +1002,20 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n \n     fn collect_attr(\n         &mut self,\n-        (attr, derives): (ast::Attribute, Vec<Path>),\n+        (attr, pos, derives): (ast::Attribute, usize, Vec<Path>),\n         item: Annotatable,\n         kind: AstFragmentKind,\n     ) -> AstFragment {\n-        self.collect(kind, InvocationKind::Attr { attr, item, derives })\n+        self.collect(kind, InvocationKind::Attr { attr, pos, item, derives })\n     }\n \n     /// If `item` is an attribute invocation, remove the attribute and return it together with\n-    /// derives following it. We have to collect the derives in order to resolve legacy derive\n-    /// helpers (helpers written before derives that introduce them).\n-    fn take_first_attr(&mut self, item: &mut impl HasAttrs) -> Option<(ast::Attribute, Vec<Path>)> {\n+    /// its position and derives following it. We have to collect the derives in order to resolve\n+    /// legacy derive helpers (helpers written before derives that introduce them).\n+    fn take_first_attr(\n+        &mut self,\n+        item: &mut impl HasAttrs,\n+    ) -> Option<(ast::Attribute, usize, Vec<Path>)> {\n         let mut attr = None;\n \n         item.visit_attrs(|attrs| {\n@@ -1033,7 +1038,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                         })\n                         .collect();\n \n-                    (attr, following_derives)\n+                    (attr, attr_pos, following_derives)\n                 })\n         });\n "}, {"sha": "6960b735f332491331bbf7ccb2a5685a802a8b66", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -633,7 +633,7 @@ declare_features! (\n     (active, abi_c_cmse_nonsecure_call, \"1.51.0\", Some(81391), None),\n \n     /// Lessens the requirements for structs to implement `Unsize`.\n-    (active, relaxed_struct_unsize, \"1.51.0\", Some(1), None),\n+    (active, relaxed_struct_unsize, \"1.51.0\", Some(81793), None),\n \n     /// Allows macro attributes to observe output of `#[derive]`.\n     (active, macro_attributes_in_derive_output, \"1.51.0\", Some(81119), None),"}, {"sha": "eeff48a63950e03f58e3a244abf363879e065759", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -50,6 +50,7 @@ use super::region_constraints::GenericKind;\n use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n \n use crate::infer;\n+use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::traits::error_reporting::report_object_safety_error;\n use crate::traits::{\n     IfExpressionCause, MatchExpressionArmCause, ObligationCause, ObligationCauseCode,\n@@ -179,7 +180,14 @@ fn msg_span_from_early_bound_and_free_regions(\n         }\n         ty::ReFree(ref fr) => match fr.bound_region {\n             ty::BrAnon(idx) => {\n-                (format!(\"the anonymous lifetime #{} defined on\", idx + 1), tcx.hir().span(node))\n+                if let Some((ty, _)) = find_anon_type(tcx, region, &fr.bound_region) {\n+                    (\"the anonymous lifetime defined on\".to_string(), ty.span)\n+                } else {\n+                    (\n+                        format!(\"the anonymous lifetime #{} defined on\", idx + 1),\n+                        tcx.hir().span(node),\n+                    )\n+                }\n             }\n             _ => (\n                 format!(\"the lifetime `{}` as defined on\", region),"}, {"sha": "1b35c4032f44c5d14e3fe30e935deb79a7dc4a64", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -1,6 +1,7 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where both the regions are anonymous.\n \n+use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::infer::error_reporting::nice_region_error::util::AnonymousParamInfo;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n@@ -66,9 +67,9 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let scope_def_id_sub = anon_reg_sub.def_id;\n         let bregion_sub = anon_reg_sub.boundregion;\n \n-        let ty_sup = self.find_anon_type(sup, &bregion_sup)?;\n+        let ty_sup = find_anon_type(self.tcx(), sup, &bregion_sup)?;\n \n-        let ty_sub = self.find_anon_type(sub, &bregion_sub)?;\n+        let ty_sub = find_anon_type(self.tcx(), sub, &bregion_sub)?;\n \n         debug!(\n             \"try_report_anon_anon_conflict: found_param1={:?} sup={:?} br1={:?}\","}, {"sha": "ffdaedf8666c3f32ef541c7a9a19a619ca97f45f", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 55, "deletions": 59, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -1,72 +1,68 @@\n-use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::Node;\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::{self, Region, TyCtxt};\n \n-impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n-    /// This function calls the `visit_ty` method for the parameters\n-    /// corresponding to the anonymous regions. The `nested_visitor.found_type`\n-    /// contains the anonymous type.\n-    ///\n-    /// # Arguments\n-    /// region - the anonymous region corresponding to the anon_anon conflict\n-    /// br - the bound region corresponding to the above region which is of type `BrAnon(_)`\n-    ///\n-    /// # Example\n-    /// ```\n-    /// fn foo(x: &mut Vec<&u8>, y: &u8)\n-    ///    { x.push(y); }\n-    /// ```\n-    /// The function returns the nested type corresponding to the anonymous region\n-    /// for e.g., `&u8` and Vec<`&u8`.\n-    pub(super) fn find_anon_type(\n-        &self,\n-        region: Region<'tcx>,\n-        br: &ty::BoundRegionKind,\n-    ) -> Option<(&hir::Ty<'tcx>, &hir::FnDecl<'tcx>)> {\n-        if let Some(anon_reg) = self.tcx().is_suitable_region(region) {\n-            let hir_id = self.tcx().hir().local_def_id_to_hir_id(anon_reg.def_id);\n-            let fndecl = match self.tcx().hir().get(hir_id) {\n-                Node::Item(&hir::Item { kind: hir::ItemKind::Fn(ref m, ..), .. })\n-                | Node::TraitItem(&hir::TraitItem {\n-                    kind: hir::TraitItemKind::Fn(ref m, ..),\n-                    ..\n-                })\n-                | Node::ImplItem(&hir::ImplItem {\n-                    kind: hir::ImplItemKind::Fn(ref m, ..), ..\n-                }) => &m.decl,\n-                _ => return None,\n-            };\n+/// This function calls the `visit_ty` method for the parameters\n+/// corresponding to the anonymous regions. The `nested_visitor.found_type`\n+/// contains the anonymous type.\n+///\n+/// # Arguments\n+/// region - the anonymous region corresponding to the anon_anon conflict\n+/// br - the bound region corresponding to the above region which is of type `BrAnon(_)`\n+///\n+/// # Example\n+/// ```\n+/// fn foo(x: &mut Vec<&u8>, y: &u8)\n+///    { x.push(y); }\n+/// ```\n+/// The function returns the nested type corresponding to the anonymous region\n+/// for e.g., `&u8` and Vec<`&u8`.\n+pub(crate) fn find_anon_type(\n+    tcx: TyCtxt<'tcx>,\n+    region: Region<'tcx>,\n+    br: &ty::BoundRegionKind,\n+) -> Option<(&'tcx hir::Ty<'tcx>, &'tcx hir::FnDecl<'tcx>)> {\n+    if let Some(anon_reg) = tcx.is_suitable_region(region) {\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(anon_reg.def_id);\n+        let fndecl = match tcx.hir().get(hir_id) {\n+            Node::Item(&hir::Item { kind: hir::ItemKind::Fn(ref m, ..), .. })\n+            | Node::TraitItem(&hir::TraitItem {\n+                kind: hir::TraitItemKind::Fn(ref m, ..), ..\n+            })\n+            | Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(ref m, ..), .. }) => {\n+                &m.decl\n+            }\n+            _ => return None,\n+        };\n \n-            fndecl\n-                .inputs\n-                .iter()\n-                .find_map(|arg| self.find_component_for_bound_region(arg, br))\n-                .map(|ty| (ty, &**fndecl))\n-        } else {\n-            None\n-        }\n+        fndecl\n+            .inputs\n+            .iter()\n+            .find_map(|arg| find_component_for_bound_region(tcx, arg, br))\n+            .map(|ty| (ty, &**fndecl))\n+    } else {\n+        None\n     }\n+}\n \n-    // This method creates a FindNestedTypeVisitor which returns the type corresponding\n-    // to the anonymous region.\n-    fn find_component_for_bound_region(\n-        &self,\n-        arg: &'tcx hir::Ty<'tcx>,\n-        br: &ty::BoundRegionKind,\n-    ) -> Option<&'tcx hir::Ty<'tcx>> {\n-        let mut nested_visitor = FindNestedTypeVisitor {\n-            tcx: self.tcx(),\n-            bound_region: *br,\n-            found_type: None,\n-            current_index: ty::INNERMOST,\n-        };\n-        nested_visitor.visit_ty(arg);\n-        nested_visitor.found_type\n-    }\n+// This method creates a FindNestedTypeVisitor which returns the type corresponding\n+// to the anonymous region.\n+fn find_component_for_bound_region(\n+    tcx: TyCtxt<'tcx>,\n+    arg: &'tcx hir::Ty<'tcx>,\n+    br: &ty::BoundRegionKind,\n+) -> Option<&'tcx hir::Ty<'tcx>> {\n+    let mut nested_visitor = FindNestedTypeVisitor {\n+        tcx,\n+        bound_region: *br,\n+        found_type: None,\n+        current_index: ty::INNERMOST,\n+    };\n+    nested_visitor.visit_ty(arg);\n+    nested_visitor.found_type\n }\n \n // The FindNestedTypeVisitor captures the corresponding `hir::Ty` of the"}, {"sha": "e20436690b3aa1d42309ea097afa3fa5bc216218", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::source_map::Span;\n \n mod different_lifetimes;\n-mod find_anon_type;\n+pub mod find_anon_type;\n mod named_anon_conflict;\n mod placeholder_error;\n mod static_impl_trait;"}, {"sha": "2f3c0d6957a613f12ff33bd428369aab78cc83e1", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -1,5 +1,6 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where one region is named and the other is anonymous.\n+use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir::intravisit::Visitor;\n@@ -74,7 +75,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             return None;\n         }\n \n-        if let Some((_, fndecl)) = self.find_anon_type(anon, &br) {\n+        if let Some((_, fndecl)) = find_anon_type(self.tcx(), anon, &br) {\n             if self.is_self_anon(is_first, scope_def_id) {\n                 return None;\n             }"}, {"sha": "2f40a90fb5516f8099d8168273efad29e0e2c102", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -513,32 +513,33 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let id = id.expect_local();\n         let tables = tcx.typeck(id);\n         let hir_id = tcx.hir().local_def_id_to_hir_id(id);\n-        let (span, place) = &tables.closure_kind_origins()[hir_id];\n-        let reason = if let PlaceBase::Upvar(upvar_id) = place.base {\n-            let upvar = ty::place_to_string_for_capture(tcx, place);\n-            match tables.upvar_capture(upvar_id) {\n-                ty::UpvarCapture::ByRef(ty::UpvarBorrow {\n-                    kind: ty::BorrowKind::MutBorrow | ty::BorrowKind::UniqueImmBorrow,\n-                    ..\n-                }) => {\n-                    format!(\"mutable borrow of `{}`\", upvar)\n-                }\n-                ty::UpvarCapture::ByValue(_) => {\n-                    format!(\"possible mutation of `{}`\", upvar)\n+        if let Some((span, place)) = tables.closure_kind_origins().get(hir_id) {\n+            let reason = if let PlaceBase::Upvar(upvar_id) = place.base {\n+                let upvar = ty::place_to_string_for_capture(tcx, place);\n+                match tables.upvar_capture(upvar_id) {\n+                    ty::UpvarCapture::ByRef(ty::UpvarBorrow {\n+                        kind: ty::BorrowKind::MutBorrow | ty::BorrowKind::UniqueImmBorrow,\n+                        ..\n+                    }) => {\n+                        format!(\"mutable borrow of `{}`\", upvar)\n+                    }\n+                    ty::UpvarCapture::ByValue(_) => {\n+                        format!(\"possible mutation of `{}`\", upvar)\n+                    }\n+                    val => bug!(\"upvar `{}` borrowed, but not mutably: {:?}\", upvar, val),\n                 }\n-                val => bug!(\"upvar `{}` borrowed, but not mutably: {:?}\", upvar, val),\n-            }\n-        } else {\n-            bug!(\"not an upvar\")\n-        };\n-        err.span_label(\n-            *span,\n-            format!(\n-                \"calling `{}` requires mutable binding due to {}\",\n-                self.describe_place(the_place_err).unwrap(),\n-                reason\n-            ),\n-        );\n+            } else {\n+                bug!(\"not an upvar\")\n+            };\n+            err.span_label(\n+                *span,\n+                format!(\n+                    \"calling `{}` requires mutable binding due to {}\",\n+                    self.describe_place(the_place_err).unwrap(),\n+                    reason\n+                ),\n+            );\n+        }\n     }\n \n     // Attempt to search similar mutable associated items for suggestion."}, {"sha": "295f3ec70dc7837ec008c85f9778d3941cba574d", "filename": "compiler/rustc_mir/src/transform/inline/cycle.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline%2Fcycle.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -1,4 +1,5 @@\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::sso::SsoHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::mir::TerminatorKind;\n@@ -140,7 +141,7 @@ crate fn mir_inliner_callees<'tcx>(\n         // Functions from other crates and MIR shims\n         _ => tcx.instance_mir(instance),\n     };\n-    let mut calls = Vec::new();\n+    let mut calls = SsoHashSet::new();\n     for bb_data in body.basic_blocks() {\n         let terminator = bb_data.terminator();\n         if let TerminatorKind::Call { func, .. } = &terminator.kind {\n@@ -149,12 +150,8 @@ crate fn mir_inliner_callees<'tcx>(\n                 ty::FnDef(def_id, substs) => (*def_id, *substs),\n                 _ => continue,\n             };\n-            // We've seen this before\n-            if calls.contains(&call) {\n-                continue;\n-            }\n-            calls.push(call);\n+            calls.insert(call);\n         }\n     }\n-    tcx.arena.alloc_slice(&calls)\n+    tcx.arena.alloc_from_iter(calls.iter().copied())\n }"}, {"sha": "3881d55ef916930f4f49db5efc23b82889dd6e55", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -371,6 +371,11 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         span: Span,\n     ) -> &'tcx Const<'tcx> {\n         bad_placeholder_type(self.tcx(), vec![span]).emit();\n+        // Typeck doesn't expect erased regions to be returned from `type_of`.\n+        let ty = self.tcx.fold_regions(ty, &mut false, |r, _| match r {\n+            ty::ReErased => self.tcx.lifetimes.re_static,\n+            _ => r,\n+        });\n         self.tcx().const_error(ty)\n     }\n \n@@ -1647,6 +1652,12 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             match get_infer_ret_ty(&sig.decl.output) {\n                 Some(ty) => {\n                     let fn_sig = tcx.typeck(def_id).liberated_fn_sigs()[hir_id];\n+                    // Typeck doesn't expect erased regions to be returned from `type_of`.\n+                    let fn_sig = tcx.fold_regions(fn_sig, &mut false, |r, _| match r {\n+                        ty::ReErased => tcx.lifetimes.re_static,\n+                        _ => r,\n+                    });\n+\n                     let mut visitor = PlaceholderHirTyCollector::default();\n                     visitor.visit_ty(ty);\n                     let mut diag = bad_placeholder_type(tcx, visitor.0);\n@@ -1675,6 +1686,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                         }\n                     }\n                     diag.emit();\n+\n                     ty::Binder::bind(fn_sig)\n                 }\n                 None => AstConv::ty_of_fn("}, {"sha": "275fcc4c29299aea2c072c5ed98c86f95b8abb60", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -16,7 +16,7 @@ cfg-if = { version = \"0.1.8\", features = ['rustc-dep-of-std'] }\n panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n-libc = { version = \"0.2.79\", default-features = false, features = ['rustc-dep-of-std'] }\n+libc = { version = \"0.2.85\", default-features = false, features = ['rustc-dep-of-std'] }\n compiler_builtins = { version = \"0.1.39\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }"}, {"sha": "500e8267cf821d6e84c62beb7cfd38e1b134d6c5", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -3,7 +3,7 @@\n #![stable(feature = \"os\", since = \"1.0.0\")]\n #![allow(missing_docs, nonstandard_style, missing_debug_implementations)]\n \n-// When documenting libstd we want to show unix/windows/linux modules as these are the \"main\n+// When documenting libstd we want to show unix/windows/linux/wasi modules as these are the \"main\n // modules\" that are used across platforms, so all modules are enabled when `cfg(doc)` is set.\n // This should help show platform-specific functionality in a hopefully cross-platform way in the\n // documentation.\n@@ -22,6 +22,9 @@ pub use crate::sys::windows_ext as windows;\n #[doc(cfg(target_os = \"linux\"))]\n pub mod linux;\n \n+#[cfg(doc)]\n+pub use crate::sys::wasi_ext as wasi;\n+\n // If we're not documenting libstd then we just expose the main modules as we otherwise would.\n \n #[cfg(not(doc))]\n@@ -38,6 +41,10 @@ pub use crate::sys::ext as windows;\n #[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n pub mod linux;\n \n+#[cfg(not(doc))]\n+#[cfg(target_os = \"wasi\")]\n+pub mod wasi;\n+\n #[cfg(target_os = \"android\")]\n pub mod android;\n #[cfg(target_os = \"dragonfly\")]\n@@ -68,7 +75,5 @@ pub mod redox;\n pub mod solaris;\n #[cfg(target_os = \"vxworks\")]\n pub mod vxworks;\n-#[cfg(target_os = \"wasi\")]\n-pub mod wasi;\n \n pub mod raw;"}, {"sha": "d3f53801d2d0fc0b42902b438b3d9c6bea6869c4", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -61,9 +61,9 @@ cfg_if::cfg_if! {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub use self::ext as unix_ext;\n     } else if #[cfg(any(target_os = \"hermit\",\n-                        target_arch = \"wasm32\",\n+                        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n                         all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n-        // On wasm right now the module below doesn't compile\n+        // On non-WASI wasm right now the module below doesn't compile\n         // (missing things in `libc` which is empty) so just omit everything\n         // with an empty module\n         #[unstable(issue = \"none\", feature = \"std_internals\")]\n@@ -85,9 +85,9 @@ cfg_if::cfg_if! {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub use self::ext as windows_ext;\n     } else if #[cfg(any(target_os = \"hermit\",\n-                        target_arch = \"wasm32\",\n+                        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n                         all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n-        // On wasm right now the shim below doesn't compile, so\n+        // On non-WASI wasm right now the shim below doesn't compile, so\n         // just omit it\n         #[unstable(issue = \"none\", feature = \"std_internals\")]\n         #[allow(missing_docs)]\n@@ -106,3 +106,25 @@ cfg_if::cfg_if! {\n         pub mod windows_ext;\n     }\n }\n+\n+#[cfg(doc)]\n+cfg_if::cfg_if! {\n+    if #[cfg(target_os = \"wasi\")] {\n+        // On WASI we'll document what's already available\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub use self::ext as wasi_ext;\n+    } else if #[cfg(any(target_os = \"hermit\",\n+                        target_arch = \"wasm32\",\n+                        all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n+        // On non-WASI wasm right now the module below doesn't compile\n+        // (missing things in `libc` which is empty) so just omit everything\n+        // with an empty module\n+        #[unstable(issue = \"none\", feature = \"std_internals\")]\n+        #[allow(missing_docs)]\n+        pub mod wasi_ext {}\n+    } else {\n+        // On other platforms like Windows document the bare bones of WASI\n+        #[path = \"wasi/ext/mod.rs\"]\n+        pub mod wasi_ext;\n+    }\n+}"}, {"sha": "587ffe15981d52177ce0a814dba2d01fb79d3d8c", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -195,6 +195,7 @@ impl Socket {\n         // glibc 2.10 and musl 0.9.5.\n         cfg_if::cfg_if! {\n             if #[cfg(any(\n+                target_os = \"android\",\n                 target_os = \"dragonfly\",\n                 target_os = \"freebsd\",\n                 target_os = \"illumos\",\n@@ -206,13 +207,6 @@ impl Socket {\n                     libc::accept4(self.0.raw(), storage, len, libc::SOCK_CLOEXEC)\n                 })?;\n                 Ok(Socket(FileDesc::new(fd)))\n-            // While the Android kernel supports the syscall,\n-            // it is not included in all versions of Android's libc.\n-            } else if #[cfg(target_os = \"android\")] {\n-                let fd = cvt_r(|| unsafe {\n-                    libc::syscall(libc::SYS_accept4, self.0.raw(), storage, len, libc::SOCK_CLOEXEC)\n-                })?;\n-                Ok(Socket(FileDesc::new(fd as c_int)))\n             } else {\n                 let fd = cvt_r(|| unsafe { libc::accept(self.0.raw(), storage, len) })?;\n                 let fd = FileDesc::new(fd);"}, {"sha": "6472642f034990e4d0058830ff27bc8a1b403fa2", "filename": "library/std/src/sys/wasi/ext/fs.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Ffs.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -3,11 +3,14 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n #![unstable(feature = \"wasi_ext\", issue = \"none\")]\n \n+use crate::ffi::OsStr;\n use crate::fs::{self, File, Metadata, OpenOptions};\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::path::{Path, PathBuf};\n-use crate::sys::fs::osstr2str;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n+// Used for `File::read` on intra-doc links\n+#[allow(unused_imports)]\n+use io::{Read, Write};\n \n /// WASI-specific extensions to [`File`].\n pub trait FileExt {\n@@ -54,11 +57,11 @@ pub trait FileExt {\n     /// # Errors\n     ///\n     /// If this function encounters an error of the kind\n-    /// [`ErrorKind::Interrupted`] then the error is ignored and the operation\n+    /// [`io::ErrorKind::Interrupted`] then the error is ignored and the operation\n     /// will continue.\n     ///\n     /// If this function encounters an \"end of file\" before completely filling\n-    /// the buffer, it returns an error of the kind [`ErrorKind::UnexpectedEof`].\n+    /// the buffer, it returns an error of the kind [`io::ErrorKind::UnexpectedEof`].\n     /// The contents of `buf` are unspecified in this case.\n     ///\n     /// If any other read error is encountered then this function immediately\n@@ -131,16 +134,16 @@ pub trait FileExt {\n     /// The current file cursor is not affected by this function.\n     ///\n     /// This method will continuously call [`write_at`] until there is no more data\n-    /// to be written or an error of non-[`ErrorKind::Interrupted`] kind is\n+    /// to be written or an error of non-[`io::ErrorKind::Interrupted`] kind is\n     /// returned. This method will not return until the entire buffer has been\n     /// successfully written or such an error occurs. The first error that is\n-    /// not of [`ErrorKind::Interrupted`] kind generated from this method will be\n+    /// not of [`io::ErrorKind::Interrupted`] kind generated from this method will be\n     /// returned.\n     ///\n     /// # Errors\n     ///\n     /// This function will return the first error of\n-    /// non-[`ErrorKind::Interrupted`] kind that [`write_at`] returns.\n+    /// non-[`io::ErrorKind::Interrupted`] kind that [`write_at`] returns.\n     ///\n     /// [`write_at`]: FileExt::write_at\n     #[stable(feature = \"rw_exact_all_at\", since = \"1.33.0\")]\n@@ -397,6 +400,8 @@ pub trait MetadataExt {\n     fn ino(&self) -> u64;\n     /// Returns the `st_nlink` field of the internal `filestat_t`\n     fn nlink(&self) -> u64;\n+    /// Returns the `st_size` field of the internal `filestat_t`\n+    fn size(&self) -> u64;\n     /// Returns the `st_atim` field of the internal `filestat_t`\n     fn atim(&self) -> u64;\n     /// Returns the `st_mtim` field of the internal `filestat_t`\n@@ -415,6 +420,9 @@ impl MetadataExt for fs::Metadata {\n     fn nlink(&self) -> u64 {\n         self.as_inner().as_wasi().nlink\n     }\n+    fn size(&self) -> u64 {\n+        self.as_inner().as_wasi().size\n+    }\n     fn atim(&self) -> u64 {\n         self.as_inner().as_wasi().atim\n     }\n@@ -426,7 +434,7 @@ impl MetadataExt for fs::Metadata {\n     }\n }\n \n-/// WASI-specific extensions for [`FileType`].\n+/// WASI-specific extensions for [`fs::FileType`].\n ///\n /// Adds support for special WASI file types such as block/character devices,\n /// pipes, and sockets.\n@@ -517,8 +525,12 @@ pub fn symlink<P: AsRef<Path>, U: AsRef<Path>>(\n \n /// Create a symbolic link.\n ///\n-/// This is a convenience API similar to [`std::os::unix::fs::symlink`] and\n-/// [`std::os::windows::fs::symlink_file`] and [`symlink_dir`](std::os::windows::fs::symlink_dir).\n+/// This is a convenience API similar to `std::os::unix::fs::symlink` and\n+/// `std::os::windows::fs::symlink_file` and `std::os::windows::fs::symlink_dir`.\n pub fn symlink_path<P: AsRef<Path>, U: AsRef<Path>>(old_path: P, new_path: U) -> io::Result<()> {\n     crate::sys::fs::symlink(old_path.as_ref(), new_path.as_ref())\n }\n+\n+fn osstr2str(f: &OsStr) -> io::Result<&str> {\n+    f.to_str().ok_or_else(|| io::Error::new(io::ErrorKind::Other, \"input must be utf-8\"))\n+}"}, {"sha": "3c480aa8e19bf5f43194a840d1e3fcc27a12f8c3", "filename": "library/std/src/sys/wasi/ext/io.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -145,36 +145,36 @@ impl IntoRawFd for fs::File {\n \n impl AsRawFd for io::Stdin {\n     fn as_raw_fd(&self) -> RawFd {\n-        sys::stdio::Stdin.as_raw_fd()\n+        libc::STDIN_FILENO as RawFd\n     }\n }\n \n impl AsRawFd for io::Stdout {\n     fn as_raw_fd(&self) -> RawFd {\n-        sys::stdio::Stdout.as_raw_fd()\n+        libc::STDOUT_FILENO as RawFd\n     }\n }\n \n impl AsRawFd for io::Stderr {\n     fn as_raw_fd(&self) -> RawFd {\n-        sys::stdio::Stderr.as_raw_fd()\n+        libc::STDERR_FILENO as RawFd\n     }\n }\n \n impl<'a> AsRawFd for io::StdinLock<'a> {\n     fn as_raw_fd(&self) -> RawFd {\n-        sys::stdio::Stdin.as_raw_fd()\n+        libc::STDIN_FILENO as RawFd\n     }\n }\n \n impl<'a> AsRawFd for io::StdoutLock<'a> {\n     fn as_raw_fd(&self) -> RawFd {\n-        sys::stdio::Stdout.as_raw_fd()\n+        libc::STDOUT_FILENO as RawFd\n     }\n }\n \n impl<'a> AsRawFd for io::StderrLock<'a> {\n     fn as_raw_fd(&self) -> RawFd {\n-        sys::stdio::Stderr.as_raw_fd()\n+        libc::STDERR_FILENO as RawFd\n     }\n }"}, {"sha": "b08402f077652b60ce5400f8a2a9dc75cf34cf47", "filename": "library/std/src/sys/wasi/ext/mod.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fmod.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -1,4 +1,32 @@\n+//! Platform-specific extensions to `std` for WASI.\n+//!\n+//! Provides access to platform-level information on WASI, and exposes\n+//! WASI-specific functions that would otherwise be inappropriate as\n+//! part of the core `std` library.\n+//!\n+//! It exposes more ways to deal with platform-specific strings (`OsStr`,\n+//! `OsString`), allows to set permissions more granularly, extract low-level\n+//! file descriptors from files and sockets, and has platform-specific helpers\n+//! for spawning processes.\n+//!\n+//! # Examples\n+//!\n+//! ```no_run\n+//! use std::fs::File;\n+//! use std::os::wasi::prelude::*;\n+//!\n+//! fn main() -> std::io::Result<()> {\n+//!     let f = File::create(\"foo.txt\")?;\n+//!     let fd = f.as_raw_fd();\n+//!\n+//!     // use fd with native WASI bindings\n+//!\n+//!     Ok(())\n+//! }\n+//! ```\n+\n #![deny(unsafe_op_in_unsafe_fn)]\n+#![doc(cfg(target_os = \"wasi\"))]\n \n pub mod ffi;\n pub mod fs;\n@@ -11,14 +39,14 @@ pub mod io;\n pub mod prelude {\n     #[doc(no_inline)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub use crate::sys::ext::ffi::{OsStrExt, OsStringExt};\n+    pub use super::ffi::{OsStrExt, OsStringExt};\n     #[doc(no_inline)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub use crate::sys::ext::fs::FileTypeExt;\n+    pub use super::fs::FileTypeExt;\n     #[doc(no_inline)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub use crate::sys::ext::fs::{DirEntryExt, FileExt, MetadataExt, OpenOptionsExt};\n+    pub use super::fs::{DirEntryExt, FileExt, MetadataExt, OpenOptionsExt};\n     #[doc(no_inline)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub use crate::sys::ext::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n+    pub use super::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n }"}, {"sha": "bcf7da46b4b077e5abf424ceca9db2e83b8d5b82", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -1,5 +1,6 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n \n+use super::fd::WasiFd;\n use crate::ffi::{CStr, CString, OsStr, OsString};\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n@@ -9,7 +10,6 @@ use crate::os::wasi::ffi::{OsStrExt, OsStringExt};\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n use crate::sync::Arc;\n-use crate::sys::fd::WasiFd;\n use crate::sys::time::SystemTime;\n use crate::sys::unsupported;\n use crate::sys_common::FromInner;"}, {"sha": "3f294e7df418ee8ae91be66b15d534a3a360822e", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -1,10 +1,10 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n \n+use super::fd::WasiFd;\n use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n-use crate::sys::fd::WasiFd;\n use crate::sys::{unsupported, Void};\n use crate::sys_common::FromInner;\n use crate::time::Duration;"}, {"sha": "209d5b996e5b462b761f860ebce8b0a003b2d78e", "filename": "library/std/src/sys/wasi/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -1,8 +1,8 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n \n+use super::fd::WasiFd;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem::ManuallyDrop;\n-use crate::sys::fd::WasiFd;\n \n pub struct Stdin;\n pub struct Stdout;"}, {"sha": "75eff163318988ace11975a4afc13fb9f181f1e9", "filename": "src/doc/unstable-book/src/language-features/doc-spotlight.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -5,8 +5,8 @@ The tracking issue for this feature is: [#45040]\n The `doc_spotlight` feature allows the use of the `spotlight` parameter to the `#[doc]` attribute,\n to \"spotlight\" a specific trait on the return values of functions. Adding a `#[doc(spotlight)]`\n attribute to a trait definition will make rustdoc print extra information for functions which return\n-a type that implements that trait. This attribute is applied to the `Iterator`, `io::Read`, and\n-`io::Write` traits in the standard library.\n+a type that implements that trait. For example, this attribute is applied to the `Iterator`,\n+`io::Read`, `io::Write`, and `Future` traits in the standard library.\n \n You can do this on your own traits, like this:\n "}, {"sha": "5d88e1e77d4509c341e3fb97469e44668835d0b0", "filename": "src/test/ui/closures/issue-82438-mut-without-upvar.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -0,0 +1,28 @@\n+use std::error::Error;\n+struct A {\n+}\n+\n+impl A {\n+    pub fn new() -> A {\n+        A {\n+        }\n+    }\n+\n+    pub fn f<'a>(\n+        &'a self,\n+        team_name: &'a str,\n+        c: &'a mut dyn FnMut(String, String, u64, u64)\n+    ) -> Result<(), Box<dyn Error>> {\n+        Ok(())\n+    }\n+}\n+\n+\n+fn main() {\n+    let A = A::new();\n+    let participant_name = \"A\";\n+\n+    let c = |a, b, c, d| {};\n+\n+    A.f(participant_name, &mut c); //~ ERROR cannot borrow\n+}"}, {"sha": "06e2b5d0c1bce97fde162a4cebaa85dd3a849828", "filename": "src/test/ui/closures/issue-82438-mut-without-upvar.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -0,0 +1,12 @@\n+error[E0596]: cannot borrow `c` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-82438-mut-without-upvar.rs:27:27\n+   |\n+LL |     let c = |a, b, c, d| {};\n+   |         - help: consider changing this to be mutable: `mut c`\n+LL | \n+LL |     A.f(participant_name, &mut c);\n+   |                           ^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "35bcf286c440fadbfec629278321c341725afff7", "filename": "src/test/ui/issues/issue-16683.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime for autoref due to conflictin\n LL |         self.a();\n    |              ^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 3:5...\n-  --> $DIR/issue-16683.rs:3:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 3:10...\n+  --> $DIR/issue-16683.rs:3:10\n    |\n LL |     fn b(&self) {\n-   |     ^^^^^^^^^^^\n+   |          ^^^^^\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/issue-16683.rs:4:9\n    |"}, {"sha": "995f5f1fc3de3bfb7f89300aac330673085bc626", "filename": "src/test/ui/issues/issue-17740.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -6,11 +6,11 @@ LL |     fn bar(self: &mut Foo) {\n    |\n    = note: expected struct `Foo<'a>`\n               found struct `Foo<'_>`\n-note: the anonymous lifetime #2 defined on the method body at 6:5...\n-  --> $DIR/issue-17740.rs:6:5\n+note: the anonymous lifetime defined on the method body at 6:23...\n+  --> $DIR/issue-17740.rs:6:23\n    |\n LL |     fn bar(self: &mut Foo) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 5:7\n   --> $DIR/issue-17740.rs:5:7\n    |\n@@ -30,11 +30,11 @@ note: the lifetime `'a` as defined on the impl at 5:7...\n    |\n LL | impl <'a> Foo<'a>{\n    |       ^^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the method body at 6:5\n-  --> $DIR/issue-17740.rs:6:5\n+note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 6:23\n+  --> $DIR/issue-17740.rs:6:23\n    |\n LL |     fn bar(self: &mut Foo) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "846e8939b53b80473833e0ab4ce55e1d00f88b7e", "filename": "src/test/ui/issues/issue-17758.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime for autoref due to conflictin\n LL |         self.foo();\n    |              ^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 6:5...\n-  --> $DIR/issue-17758.rs:6:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 6:12...\n+  --> $DIR/issue-17758.rs:6:12\n    |\n LL |     fn bar(&self) {\n-   |     ^^^^^^^^^^^^^\n+   |            ^^^^^\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/issue-17758.rs:7:9\n    |"}, {"sha": "3c27f7058591c5618defc3b0786d9d6f08bf5aa6", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -6,11 +6,11 @@ LL |     fn say(self: &Pair<&str, isize>) {\n    |\n    = note: expected struct `Pair<&str, _>`\n               found struct `Pair<&str, _>`\n-note: the anonymous lifetime #2 defined on the method body at 8:5...\n-  --> $DIR/issue-17905-2.rs:8:5\n+note: the anonymous lifetime defined on the method body at 8:24...\n+  --> $DIR/issue-17905-2.rs:8:24\n    |\n LL |     fn say(self: &Pair<&str, isize>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^\n note: ...does not necessarily outlive the lifetime `'_` as defined on the impl at 5:5\n   --> $DIR/issue-17905-2.rs:5:5\n    |\n@@ -30,11 +30,11 @@ note: the lifetime `'_` as defined on the impl at 5:5...\n    |\n LL |     &str,\n    |     ^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the method body at 8:5\n-  --> $DIR/issue-17905-2.rs:8:5\n+note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 8:24\n+  --> $DIR/issue-17905-2.rs:8:24\n    |\n LL |     fn say(self: &Pair<&str, isize>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e68482d1caf696db159003465d951dac2fddcc84", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 28:5...\n-  --> $DIR/issue-20831-debruijn.rs:28:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 28:58...\n+  --> $DIR/issue-20831-debruijn.rs:28:58\n    |\n LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the impl at 26:6...\n   --> $DIR/issue-20831-debruijn.rs:26:6\n    |"}, {"sha": "80eecb42d1cef7fc988f10059d6915fc360f3ae7", "filename": "src/test/ui/issues/issue-27942.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -6,11 +6,11 @@ LL |     fn select(&self) -> BufferViewHandle<R>;\n    |\n    = note: expected type `Resources<'_>`\n               found type `Resources<'a>`\n-note: the anonymous lifetime #1 defined on the method body at 5:5...\n-  --> $DIR/issue-27942.rs:5:5\n+note: the anonymous lifetime defined on the method body at 5:15...\n+  --> $DIR/issue-27942.rs:5:15\n    |\n LL |     fn select(&self) -> BufferViewHandle<R>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               ^^^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the trait at 3:18\n   --> $DIR/issue-27942.rs:3:18\n    |\n@@ -30,11 +30,11 @@ note: the lifetime `'a` as defined on the trait at 3:18...\n    |\n LL | pub trait Buffer<'a, R: Resources<'a>> {\n    |                  ^^\n-note: ...does not necessarily outlive the anonymous lifetime #1 defined on the method body at 5:5\n-  --> $DIR/issue-27942.rs:5:5\n+note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 5:15\n+  --> $DIR/issue-27942.rs:5:15\n    |\n LL |     fn select(&self) -> BufferViewHandle<R>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               ^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8c6c97206649c6153cf323ef9cb7f23154e51fd3", "filename": "src/test/ui/layout/hexagon-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: --target hexagon-unknown-linux-musl\n+// needs-llvm-components: hexagon\n //\n // Verify that the hexagon targets implement the repr(C) for enums correctly.\n //"}, {"sha": "d4676a5afb25e227f19eb6a3867692e635ddda8c", "filename": "src/test/ui/layout/hexagon-enum.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -81,7 +81,7 @@ error: layout_of(A) = Layout {\n         raw: 1,\n     },\n }\n-  --> $DIR/hexagon-enum.rs:15:1\n+  --> $DIR/hexagon-enum.rs:16:1\n    |\n LL | enum A { Apple }\n    | ^^^^^^^^^^^^^^^^\n@@ -169,7 +169,7 @@ error: layout_of(B) = Layout {\n         raw: 1,\n     },\n }\n-  --> $DIR/hexagon-enum.rs:19:1\n+  --> $DIR/hexagon-enum.rs:20:1\n    |\n LL | enum B { Banana = 255, }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -257,7 +257,7 @@ error: layout_of(C) = Layout {\n         raw: 2,\n     },\n }\n-  --> $DIR/hexagon-enum.rs:23:1\n+  --> $DIR/hexagon-enum.rs:24:1\n    |\n LL | enum C { Chaenomeles = 256, }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -345,7 +345,7 @@ error: layout_of(P) = Layout {\n         raw: 4,\n     },\n }\n-  --> $DIR/hexagon-enum.rs:27:1\n+  --> $DIR/hexagon-enum.rs:28:1\n    |\n LL | enum P { Peach = 0x1000_0000isize, }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -433,7 +433,7 @@ error: layout_of(T) = Layout {\n         raw: 4,\n     },\n }\n-  --> $DIR/hexagon-enum.rs:33:1\n+  --> $DIR/hexagon-enum.rs:34:1\n    |\n LL | enum T { Tangerine = TANGERINE as isize }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "23bb12f942075fab0a3e05f56437039b4f54ceb8", "filename": "src/test/ui/nll/issue-52742.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -9,11 +9,11 @@ note: ...the reference is valid for the lifetime `'_` as defined on the impl at\n    |\n LL | impl Foo<'_, '_> {\n    |          ^^\n-note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined on the method body at 13:5\n-  --> $DIR/issue-52742.rs:13:5\n+note: ...but the borrowed content is only valid for the anonymous lifetime defined on the method body at 13:31\n+  --> $DIR/issue-52742.rs:13:31\n    |\n LL |     fn take_bar(&mut self, b: Bar<'_>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "36721f923f7da7846172b8cc7f4fac579465c949", "filename": "src/test/ui/nll/issue-55394.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` d\n LL |         Foo { bar }\n    |         ^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 8:5...\n-  --> $DIR/issue-55394.rs:8:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 8:17...\n+  --> $DIR/issue-55394.rs:8:17\n    |\n LL |     fn new(bar: &mut Bar) -> Self {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/issue-55394.rs:9:15\n    |"}, {"sha": "6498ecfbe6f9b555d5a1d15e2a1a71b12313811a", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL |         C { f: b }\n    |         ^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 16:5...\n-  --> $DIR/type-alias-free-regions.rs:16:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 16:24...\n+  --> $DIR/type-alias-free-regions.rs:16:24\n    |\n LL |     fn from_box(b: Box<B>) -> Self {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^\n note: ...so that the expression is assignable\n   --> $DIR/type-alias-free-regions.rs:17:16\n    |\n@@ -35,11 +35,11 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |         C { f: Box::new(b.0) }\n    |                ^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 26:5...\n-  --> $DIR/type-alias-free-regions.rs:26:5\n+note: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 26:23...\n+  --> $DIR/type-alias-free-regions.rs:26:23\n    |\n LL |     fn from_tuple(b: (B,)) -> Self {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^\n note: ...so that the expression is assignable\n   --> $DIR/type-alias-free-regions.rs:27:25\n    |"}, {"sha": "a7ed4bc88250d96ca5af94a3fb862f4e0d6591b6", "filename": "src/test/ui/proc-macro/auxiliary/test-macros.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -7,7 +7,7 @@\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;\n-use proc_macro::TokenStream;\n+use proc_macro::{TokenStream, TokenTree};\n \n // Macro that return empty token stream.\n \n@@ -80,6 +80,10 @@ pub fn recollect_derive(input: TokenStream) -> TokenStream {\n // Macros that print their input in the original and re-collected forms (if they differ).\n \n fn print_helper(input: TokenStream, kind: &str) -> TokenStream {\n+    print_helper_ext(input, kind, true)\n+}\n+\n+fn print_helper_ext(input: TokenStream, kind: &str, debug: bool) -> TokenStream {\n     let input_display = format!(\"{}\", input);\n     let input_debug = format!(\"{:#?}\", input);\n     let recollected = input.into_iter().collect();\n@@ -89,9 +93,11 @@ fn print_helper(input: TokenStream, kind: &str) -> TokenStream {\n     if recollected_display != input_display {\n         println!(\"PRINT-{} RE-COLLECTED (DISPLAY): {}\", kind, recollected_display);\n     }\n-    println!(\"PRINT-{} INPUT (DEBUG): {}\", kind, input_debug);\n-    if recollected_debug != input_debug {\n-        println!(\"PRINT-{} RE-COLLECTED (DEBUG): {}\", kind, recollected_debug);\n+    if debug {\n+        println!(\"PRINT-{} INPUT (DEBUG): {}\", kind, input_debug);\n+        if recollected_debug != input_debug {\n+            println!(\"PRINT-{} RE-COLLECTED (DEBUG): {}\", kind, recollected_debug);\n+        }\n     }\n     recollected\n }\n@@ -108,8 +114,12 @@ pub fn print_bang_consume(input: TokenStream) -> TokenStream {\n }\n \n #[proc_macro_attribute]\n-pub fn print_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n-    print_helper(input, \"ATTR\")\n+pub fn print_attr(args: TokenStream, input: TokenStream) -> TokenStream {\n+    let debug = match &args.into_iter().collect::<Vec<_>>()[..] {\n+        [TokenTree::Ident(ident)] if ident.to_string() == \"nodebug\" => false,\n+        _ => true,\n+    };\n+    print_helper_ext(input, \"ATTR\", debug)\n }\n \n #[proc_macro_attribute]"}, {"sha": "4a7e48eed46c3130e9e9f8ed470094e70fdc3dee", "filename": "src/test/ui/proc-macro/derive-helper-legacy-spurious.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-legacy-spurious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-legacy-spurious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-legacy-spurious.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -0,0 +1,12 @@\n+// aux-build:test-macros.rs\n+\n+#![dummy] //~ ERROR cannot find attribute `dummy` in this scope\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+#[derive(Empty)] //~ ERROR cannot determine resolution for the attribute macro `derive`\n+#[empty_helper] //~ ERROR cannot find attribute `empty_helper` in this scope\n+struct Foo {}\n+\n+fn main() {}"}, {"sha": "fd1ed8a3d0ff3e4e520c1269974641ca73694f0f", "filename": "src/test/ui/proc-macro/derive-helper-legacy-spurious.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-legacy-spurious.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-legacy-spurious.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-legacy-spurious.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -0,0 +1,22 @@\n+error: cannot find attribute `dummy` in this scope\n+  --> $DIR/derive-helper-legacy-spurious.rs:3:4\n+   |\n+LL | #![dummy]\n+   |    ^^^^^\n+\n+error: cannot determine resolution for the attribute macro `derive`\n+  --> $DIR/derive-helper-legacy-spurious.rs:8:3\n+   |\n+LL | #[derive(Empty)]\n+   |   ^^^^^^\n+   |\n+   = note: import resolution is stuck, try simplifying macro imports\n+\n+error: cannot find attribute `empty_helper` in this scope\n+  --> $DIR/derive-helper-legacy-spurious.rs:9:3\n+   |\n+LL | #[empty_helper]\n+   |   ^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "f8079675641169c2303f8894e8757aab3fb576cc", "filename": "src/test/ui/proc-macro/inert-attribute-order.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fproc-macro%2Finert-attribute-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fproc-macro%2Finert-attribute-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finert-attribute-order.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -0,0 +1,23 @@\n+// Order of inert attributes, both built-in and custom is preserved during expansion.\n+\n+// check-pass\n+// compile-flags: -Z span-debug\n+// aux-build:test-macros.rs\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+/// 1\n+#[rustfmt::attr2]\n+#[doc = \"3\"]\n+#[print_attr(nodebug)]\n+#[doc = \"4\"]\n+#[rustfmt::attr5]\n+/// 6\n+#[print_attr(nodebug)]\n+struct S;\n+\n+fn main() {}"}, {"sha": "cc215545952df3c43107e999346b30aff3009702", "filename": "src/test/ui/proc-macro/inert-attribute-order.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fproc-macro%2Finert-attribute-order.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fproc-macro%2Finert-attribute-order.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finert-attribute-order.stdout?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -0,0 +1,7 @@\n+PRINT-ATTR INPUT (DISPLAY): /// 1\n+#[rustfmt :: attr2] #[doc = \"3\"] #[doc = \"4\"] #[rustfmt :: attr5] /// 6\n+#[print_attr(nodebug)] struct S ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): #[doc = \" 1\"] #[rustfmt :: attr2] #[doc = \"3\"] #[doc = \"4\"]\n+#[rustfmt :: attr5] #[doc = \" 6\"] #[print_attr(nodebug)] struct S ;\n+PRINT-ATTR INPUT (DISPLAY): #[doc = \" 1\"] #[rustfmt :: attr2] #[doc = \"3\"] #[doc = \"4\"]\n+#[rustfmt :: attr5] #[doc = \" 6\"] struct S ;"}, {"sha": "15e63c20eb9bc581790abf52c7e6e78a77f87a6d", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.stdout", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -1,4 +1,4 @@\n-PRINT-ATTR INPUT (DISPLAY): #[allow(dead_code)] #[derive(Print)] #[print_helper(b)] #[print_helper(a)]\n+PRINT-ATTR INPUT (DISPLAY): #[print_helper(a)] #[allow(dead_code)] #[derive(Print)] #[print_helper(b)]\n struct Foo < #[cfg(FALSE)] A, B >\n {\n     #[cfg(FALSE)] first : String, #[cfg_attr(FALSE, deny(warnings))] second :\n@@ -23,6 +23,31 @@ struct Foo < #[cfg(FALSE)] A, B >\n      }], #[print_helper(d)] fourth : B\n }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/issue-75930-derive-cfg.rs:16:1: 16:2 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"print_helper\",\n+                span: $DIR/issue-75930-derive-cfg.rs:16:3: 16:15 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"a\",\n+                        span: $DIR/issue-75930-derive-cfg.rs:16:16: 16:17 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75930-derive-cfg.rs:16:15: 16:18 (#0),\n+            },\n+        ],\n+        span: $DIR/issue-75930-derive-cfg.rs:16:2: 16:19 (#0),\n+    },\n     Punct {\n         ch: '#',\n         spacing: Alone,\n@@ -98,31 +123,6 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         ],\n         span: $DIR/issue-75930-derive-cfg.rs:21:2: 21:19 (#0),\n     },\n-    Punct {\n-        ch: '#',\n-        spacing: Alone,\n-        span: $DIR/issue-75930-derive-cfg.rs:16:1: 16:2 (#0),\n-    },\n-    Group {\n-        delimiter: Bracket,\n-        stream: TokenStream [\n-            Ident {\n-                ident: \"print_helper\",\n-                span: $DIR/issue-75930-derive-cfg.rs:16:3: 16:15 (#0),\n-            },\n-            Group {\n-                delimiter: Parenthesis,\n-                stream: TokenStream [\n-                    Ident {\n-                        ident: \"a\",\n-                        span: $DIR/issue-75930-derive-cfg.rs:16:16: 16:17 (#0),\n-                    },\n-                ],\n-                span: $DIR/issue-75930-derive-cfg.rs:16:15: 16:18 (#0),\n-            },\n-        ],\n-        span: $DIR/issue-75930-derive-cfg.rs:16:2: 16:19 (#0),\n-    },\n     Ident {\n         ident: \"struct\",\n         span: $DIR/issue-75930-derive-cfg.rs:22:1: 22:7 (#0),\n@@ -1194,7 +1194,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: $DIR/issue-75930-derive-cfg.rs:22:32: 65:2 (#0),\n     },\n ]\n-PRINT-DERIVE INPUT (DISPLAY): #[allow(dead_code)] #[print_helper(b)] #[print_helper(a)] struct Foo < B >\n+PRINT-DERIVE INPUT (DISPLAY): #[print_helper(a)] #[allow(dead_code)] #[print_helper(b)] struct Foo < B >\n {\n     second : bool, third :\n     [u8 ;\n@@ -1217,14 +1217,14 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n-                ident: \"allow\",\n+                ident: \"print_helper\",\n                 span: $DIR/issue-75930-derive-cfg.rs:22:1: 65:2 (#0),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n-                        ident: \"dead_code\",\n+                        ident: \"a\",\n                         span: $DIR/issue-75930-derive-cfg.rs:22:1: 65:2 (#0),\n                     },\n                 ],\n@@ -1242,14 +1242,14 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n-                ident: \"print_helper\",\n+                ident: \"allow\",\n                 span: $DIR/issue-75930-derive-cfg.rs:22:1: 65:2 (#0),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n-                        ident: \"b\",\n+                        ident: \"dead_code\",\n                         span: $DIR/issue-75930-derive-cfg.rs:22:1: 65:2 (#0),\n                     },\n                 ],\n@@ -1274,7 +1274,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n-                        ident: \"a\",\n+                        ident: \"b\",\n                         span: $DIR/issue-75930-derive-cfg.rs:22:1: 65:2 (#0),\n                     },\n                 ],"}, {"sha": "95eb4d1f75b72ee8de7d2091b73a9e5f69cc5151", "filename": "src/test/ui/regions/regions-infer-paramd-indirect.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -6,11 +6,11 @@ LL |         self.f = b;\n    |\n    = note: expected struct `Box<Box<&'a isize>>`\n               found struct `Box<Box<&isize>>`\n-note: the anonymous lifetime #2 defined on the method body at 21:5...\n-  --> $DIR/regions-infer-paramd-indirect.rs:21:5\n+note: the anonymous lifetime defined on the method body at 21:36...\n+  --> $DIR/regions-infer-paramd-indirect.rs:21:36\n    |\n LL |     fn set_f_bad(&mut self, b: Box<B>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                    ^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 16:6\n   --> $DIR/regions-infer-paramd-indirect.rs:16:6\n    |"}, {"sha": "7e07a5775bb12f444d805f380d2ad5ee0cf1ecde", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -7,11 +7,11 @@ LL | |         t.test();\n LL | |     });\n    | |______^\n    |\n-note: the parameter type `T` must be valid for the anonymous lifetime #2 defined on the function body at 19:1...\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:19:1\n+note: the parameter type `T` must be valid for the anonymous lifetime defined on the function body at 19:24...\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:19:24\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^\n \n error: aborting due to previous error\n "}, {"sha": "4e7d52978400f710952d347a2700cd472d8ce949", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -6,11 +6,11 @@ LL | fn func<T: Test>(foo: &Foo, t: T) {\n LL |     foo.bar(move |_| {\n    |         ^^^\n    |\n-note: the parameter type `T` must be valid for the anonymous lifetime #2 defined on the function body at 19:1...\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:19:1\n+note: the parameter type `T` must be valid for the anonymous lifetime defined on the function body at 19:24...\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:19:24\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^\n note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature-2.rs:20:13: 23:6]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature-2.rs:20:9\n    |"}, {"sha": "b509610b89e2699f1626053e30bf78944803e041", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.nll.stderr", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -25,56 +25,47 @@ error[E0311]: the parameter type `G` may not live long enough\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                     ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 25:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:25:1\n-   |\n-LL | / fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-LL | |\n-LL | | where\n-LL | |     G: Get<T>\n-   | |_____________^\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the function body at 25:26...\n+  --> $DIR/missing-lifetimes-in-signature.rs:25:26\n+   |\n+LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                          ^^^^^^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:47:45\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                             ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 47:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:47:1\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the function body at 47:34...\n+  --> $DIR/missing-lifetimes-in-signature.rs:47:34\n    |\n-LL | / fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-LL | |\n-LL | | where\n-LL | |     G: Get<T>\n-   | |_____________^\n+LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                                  ^^^^^^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:59:58\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                                          ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the method body at 59:5...\n-  --> $DIR/missing-lifetimes-in-signature.rs:59:5\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the method body at 59:47...\n+  --> $DIR/missing-lifetimes-in-signature.rs:59:47\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:68:45\n    |\n LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 68:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:68:1\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the function body at 68:34...\n+  --> $DIR/missing-lifetimes-in-signature.rs:68:34\n    |\n-LL | / fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n-LL | |\n-LL | | where\n-LL | |     G: Get<T>\n-   | |_____________^\n+LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n+   |                                  ^^^^^^\n \n error[E0621]: explicit lifetime required in the type of `dest`\n   --> $DIR/missing-lifetimes-in-signature.rs:73:5"}, {"sha": "789fff7acc29bfca9d9bab28a35aff24c9d62a14", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -33,14 +33,11 @@ error[E0311]: the parameter type `G` may not live long enough\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                     ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 25:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:25:1\n-   |\n-LL | / fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-LL | |\n-LL | | where\n-LL | |     G: Get<T>\n-   | |_____________^\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the function body at 25:26...\n+  --> $DIR/missing-lifetimes-in-signature.rs:25:26\n+   |\n+LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                          ^^^^^^\n note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:30:5: 32:6]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:25:37\n    |\n@@ -57,14 +54,11 @@ error[E0311]: the parameter type `G` may not live long enough\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                             ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 47:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:47:1\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the function body at 47:34...\n+  --> $DIR/missing-lifetimes-in-signature.rs:47:34\n    |\n-LL | / fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-LL | |\n-LL | | where\n-LL | |     G: Get<T>\n-   | |_____________^\n+LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                                  ^^^^^^\n note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:52:5: 54:6]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:47:45\n    |\n@@ -81,11 +75,11 @@ error[E0311]: the parameter type `G` may not live long enough\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                                          ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the method body at 59:5...\n-  --> $DIR/missing-lifetimes-in-signature.rs:59:5\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the method body at 59:47...\n+  --> $DIR/missing-lifetimes-in-signature.rs:59:47\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^\n note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:61:9: 63:10]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:59:58\n    |"}, {"sha": "2523362fdc4b6637127f22ce983977642eab32f7", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -208,3 +208,15 @@ impl Qux for Struct {\n     const D: _ = 42;\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n }\n+\n+fn map<T>(_: fn() -> Option<&'static T>) -> Option<T> {\n+    None\n+}\n+\n+fn value() -> Option<&'static _> {\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    Option::<&'static u8>::None\n+}\n+\n+const _: Option<_> = map(value);\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures"}, {"sha": "1034402bfb08d00ee67ecf490cfb5b13358ab07c", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -158,7 +158,7 @@ LL | fn test11(x: &usize) -> &_ {\n    |                         -^\n    |                         ||\n    |                         |not allowed in type signatures\n-   |                         help: replace with the correct return type: `&&usize`\n+   |                         help: replace with the correct return type: `&'static &'static usize`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:52:52\n@@ -410,6 +410,24 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n LL | type Y = impl Trait<_>;\n    |                     ^ not allowed in type signatures\n \n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:216:31\n+   |\n+LL | fn value() -> Option<&'static _> {\n+   |               ----------------^-\n+   |               |               |\n+   |               |               not allowed in type signatures\n+   |               help: replace with the correct return type: `Option<&'static u8>`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:221:10\n+   |\n+LL | const _: Option<_> = map(value);\n+   |          ^^^^^^^^^\n+   |          |\n+   |          not allowed in type signatures\n+   |          help: replace `_` with the correct type: `Option<u8>`\n+\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:140:31\n    |\n@@ -614,7 +632,7 @@ LL |     const D: _ = 42;\n    |              not allowed in type signatures\n    |              help: replace `_` with the correct type: `i32`\n \n-error: aborting due to 67 previous errors\n+error: aborting due to 69 previous errors\n \n Some errors have detailed explanations: E0121, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}, {"sha": "133ecab2296b747e0d9aba2f5e518f8bbfac7a65", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -33,11 +33,11 @@ LL |     fn dummy2(self: &Bar<T>) {}\n    |\n    = note: expected reference `&'a Bar<T>`\n               found reference `&Bar<T>`\n-note: the anonymous lifetime #1 defined on the method body at 37:5...\n-  --> $DIR/ufcs-explicit-self-bad.rs:37:5\n+note: the anonymous lifetime defined on the method body at 37:21...\n+  --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 35:6\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n@@ -57,11 +57,11 @@ note: the lifetime `'a` as defined on the impl at 35:6...\n    |\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n-note: ...does not necessarily outlive the anonymous lifetime #1 defined on the method body at 37:5\n-  --> $DIR/ufcs-explicit-self-bad.rs:37:5\n+note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 37:21\n+  --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^\n \n error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:39:21\n@@ -71,11 +71,11 @@ LL |     fn dummy3(self: &&Bar<T>) {}\n    |\n    = note: expected reference `&'a Bar<T>`\n               found reference `&Bar<T>`\n-note: the anonymous lifetime #2 defined on the method body at 39:5...\n-  --> $DIR/ufcs-explicit-self-bad.rs:39:5\n+note: the anonymous lifetime defined on the method body at 39:22...\n+  --> $DIR/ufcs-explicit-self-bad.rs:39:22\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                      ^^^^^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 35:6\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n@@ -95,11 +95,11 @@ note: the lifetime `'a` as defined on the impl at 35:6...\n    |\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the method body at 39:5\n-  --> $DIR/ufcs-explicit-self-bad.rs:39:5\n+note: ...does not necessarily outlive the anonymous lifetime defined on the method body at 39:22\n+  --> $DIR/ufcs-explicit-self-bad.rs:39:22\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                      ^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "572e201536dc2e4920346e28037b63c0f4d88b3c", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -1 +1 @@\n-Subproject commit bf5a5d5e5d3ae842a63bfce6d070dfd438cf6070\n+Subproject commit 572e201536dc2e4920346e28037b63c0f4d88b3c"}, {"sha": "14de9e54a6d9ef070399b34a11634294a8cc3ca5", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -1 +1 @@\n-Subproject commit 7435b9e98c9280043605748c11a1f450669e04d6\n+Subproject commit 14de9e54a6d9ef070399b34a11634294a8cc3ca5"}, {"sha": "f8e0bcc357d91a17c56b123ea74a60b26b290937", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa580b1175018b0a276b0bc68f9827a106f7260/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=9fa580b1175018b0a276b0bc68f9827a106f7260", "patch": "@@ -85,6 +85,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"crossbeam-epoch\",\n     \"crossbeam-queue\",\n     \"crossbeam-utils\",\n+    \"cstr\",\n     \"datafrog\",\n     \"difference\",\n     \"digest\","}]}