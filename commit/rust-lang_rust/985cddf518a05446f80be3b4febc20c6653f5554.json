{"sha": "985cddf518a05446f80be3b4febc20c6653f5554", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NWNkZGY1MThhMDU0NDZmODBiZTNiNGZlYmMyMGM2NjUzZjU1NTQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-03-14T14:28:38Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-03-18T23:04:29Z"}, "message": "Use enum for message kind in compiletest harness.", "tree": {"sha": "b1536306c02eee7eaee55f01090902c83de7acb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1536306c02eee7eaee55f01090902c83de7acb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/985cddf518a05446f80be3b4febc20c6653f5554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/985cddf518a05446f80be3b4febc20c6653f5554", "html_url": "https://github.com/rust-lang/rust/commit/985cddf518a05446f80be3b4febc20c6653f5554", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/985cddf518a05446f80be3b4febc20c6653f5554/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2de6ddd75e202acdedfcd05b51a863dcc10459ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/2de6ddd75e202acdedfcd05b51a863dcc10459ca", "html_url": "https://github.com/rust-lang/rust/commit/2de6ddd75e202acdedfcd05b51a863dcc10459ca"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "0a7784ccc007f7005ea091db605d5ee3826df614", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/985cddf518a05446f80be3b4febc20c6653f5554/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985cddf518a05446f80be3b4febc20c6653f5554/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=985cddf518a05446f80be3b4febc20c6653f5554", "patch": "@@ -9,14 +9,54 @@\n // except according to those terms.\n use self::WhichLine::*;\n \n+use std::fmt;\n use std::fs::File;\n use std::io::BufReader;\n use std::io::prelude::*;\n use std::path::Path;\n+use std::str::FromStr;\n+\n+#[derive(Clone, Debug, PartialEq)]\n+pub enum ErrorKind {\n+    Help,\n+    Error,\n+    Note,\n+    Suggestion,\n+    Warning,\n+}\n+\n+impl FromStr for ErrorKind {\n+    type Err = ();\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match &s.trim_right_matches(':') as &str {\n+            \"HELP\" => Ok(ErrorKind::Help),\n+            \"ERROR\" => Ok(ErrorKind::Error),\n+            \"NOTE\" => Ok(ErrorKind::Note),\n+            \"SUGGESTION\" => Ok(ErrorKind::Suggestion),\n+            \"WARN\" => Ok(ErrorKind::Warning),\n+            \"WARNING\" => Ok(ErrorKind::Warning),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl fmt::Display for ErrorKind {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            ErrorKind::Help => write!(f, \"help\"),\n+            ErrorKind::Error => write!(f, \"error\"),\n+            ErrorKind::Note => write!(f, \"note\"),\n+            ErrorKind::Suggestion => write!(f, \"suggestion\"),\n+            ErrorKind::Warning => write!(f, \"warning\"),\n+        }\n+    }\n+}\n \n pub struct ExpectedError {\n     pub line_num: usize,\n-    pub kind: String,\n+    /// What kind of message we expect (e.g. warning, error, suggestion).\n+    /// `None` if not specified or unknown message kind.\n+    pub kind: Option<ErrorKind>,\n     pub msg: String,\n }\n \n@@ -84,8 +124,9 @@ fn parse_expected(last_nonfollow_error: Option<usize>,\n     let letters = line[kind_start..].chars();\n     let kind = letters.skip_while(|c| c.is_whitespace())\n                       .take_while(|c| !c.is_whitespace())\n-                      .flat_map(|c| c.to_lowercase())\n-                      .collect::<String>();\n+                      .collect::<String>()\n+                      .parse::<ErrorKind>()\n+                      .ok();\n     let letters = line[kind_start..].chars();\n     let msg = letters.skip_while(|c| c.is_whitespace())\n                      .skip_while(|c| !c.is_whitespace())"}, {"sha": "82e624e055a9cad051572cdbed4be0fd1b3e1353", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/985cddf518a05446f80be3b4febc20c6653f5554/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985cddf518a05446f80be3b4febc20c6653f5554/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=985cddf518a05446f80be3b4febc20c6653f5554", "patch": "@@ -11,7 +11,7 @@\n use common::Config;\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Codegen, DebugInfoLldb, DebugInfoGdb, Rustdoc, CodegenUnits};\n-use errors;\n+use errors::{self, ErrorKind};\n use header::TestProps;\n use header;\n use procsrv;\n@@ -1013,8 +1013,8 @@ fn check_expected_errors(revision: Option<&str>,\n         expected_errors.iter()\n                         .fold((false, false),\n                               |(acc_help, acc_note), ee|\n-                                  (acc_help || ee.kind == \"help:\" || ee.kind == \"help\",\n-                                   acc_note || ee.kind == \"note:\" || ee.kind == \"note\"));\n+                                  (acc_help || ee.kind == Some(ErrorKind::Help),\n+                                   acc_note || ee.kind == Some(ErrorKind::Note)));\n \n     // Scan and extract our error/warning messages,\n     // which look like:\n@@ -1032,15 +1032,15 @@ fn check_expected_errors(revision: Option<&str>,\n         let mut prev = 0;\n         for (i, ee) in expected_errors.iter().enumerate() {\n             if !found_flags[i] {\n-                debug!(\"prefix={} ee.kind={} ee.msg={} line={}\",\n+                debug!(\"prefix={} ee.kind={:?} ee.msg={} line={}\",\n                        prefixes[i],\n                        ee.kind,\n                        ee.msg,\n                        line);\n                 // Suggestions have no line number in their output, so take on the line number of\n                 // the previous expected error\n-                if ee.kind == \"suggestion\" {\n-                    assert!(expected_errors[prev].kind == \"help\",\n+                if ee.kind == Some(ErrorKind::Suggestion) {\n+                    assert!(expected_errors[prev].kind == Some(ErrorKind::Help),\n                             \"SUGGESTIONs must be preceded by a HELP\");\n                     if line.contains(&ee.msg) {\n                         found_flags[i] = true;\n@@ -1050,7 +1050,7 @@ fn check_expected_errors(revision: Option<&str>,\n                 }\n                 if\n                     (prefix_matches(line, &prefixes[i]) || continuation(line)) &&\n-                    line.contains(&ee.kind) &&\n+                    (ee.kind.is_none() || line.contains(&ee.kind.as_ref().unwrap().to_string())) &&\n                     line.contains(&ee.msg)\n                 {\n                     found_flags[i] = true;\n@@ -1076,7 +1076,10 @@ fn check_expected_errors(revision: Option<&str>,\n         if !flag {\n             let ee = &expected_errors[i];\n             error(revision, &format!(\"expected {} on line {} not found: {}\",\n-                                     ee.kind, ee.line_num, ee.msg));\n+                                     ee.kind.as_ref()\n+                                            .map_or(\"message\".into(),\n+                                                    |k| k.to_string()),\n+                                     ee.line_num, ee.msg));\n             not_found += 1;\n         }\n     }"}]}