{"sha": "cdf7d63bfce33d2390e3a0a27e01a07f262834e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZjdkNjNiZmNlMzNkMjM5MGUzYTBhMjdlMDFhMDdmMjYyODM0ZTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-11T18:08:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-11T18:08:03Z"}, "message": "Optimize creation of buffered readers/writers\n\nI was benchmarking rust-http recently, and I saw that 50% of its time was spent\ncreating buffered readers/writers. Albeit rust-http wasn't using\nstd::rt::io::buffered, but the same idea applies here. It's much cheaper to\nmalloc a large region and not initialize it than to set it all to 0. Buffered\nreaders/writers never use uninitialized data, and their internal buffers are\nencapsulated, so any usage of uninitialized slots are an implementation bug in\nthe readers/writers.", "tree": {"sha": "beb67163fe1f02431c45b8d676d86ce6cd3bc18f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beb67163fe1f02431c45b8d676d86ce6cd3bc18f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdf7d63bfce33d2390e3a0a27e01a07f262834e7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdf7d63bfce33d2390e3a0a27e01a07f262834e7", "html_url": "https://github.com/rust-lang/rust/commit/cdf7d63bfce33d2390e3a0a27e01a07f262834e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdf7d63bfce33d2390e3a0a27e01a07f262834e7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4059b5c4b3b8a57a645982b0770d25f0283dfb06", "url": "https://api.github.com/repos/rust-lang/rust/commits/4059b5c4b3b8a57a645982b0770d25f0283dfb06", "html_url": "https://github.com/rust-lang/rust/commit/4059b5c4b3b8a57a645982b0770d25f0283dfb06"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "8afb7183d77b05d515e90c428d476f6f861c9272", "filename": "src/libstd/rt/io/buffered.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cdf7d63bfce33d2390e3a0a27e01a07f262834e7/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdf7d63bfce33d2390e3a0a27e01a07f262834e7/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs?ref=cdf7d63bfce33d2390e3a0a27e01a07f262834e7", "patch": "@@ -73,9 +73,17 @@ pub struct BufferedReader<R> {\n impl<R: Reader> BufferedReader<R> {\n     /// Creates a new `BufferedReader` with with the specified buffer capacity\n     pub fn with_capacity(cap: uint, inner: R) -> BufferedReader<R> {\n+        // It's *much* faster to create an uninitialized buffer than it is to\n+        // fill everything in with 0. This buffer is entirely an implementation\n+        // detail and is never exposed, so we're safe to not initialize\n+        // everything up-front. This allows creation of BufferedReader instances\n+        // to be very cheap (large mallocs are not nearly as expensive as large\n+        // callocs).\n+        let mut buf = vec::with_capacity(cap);\n+        unsafe { vec::raw::set_len(&mut buf, cap); }\n         BufferedReader {\n             inner: inner,\n-            buf: vec::from_elem(cap, 0u8),\n+            buf: buf,\n             pos: 0,\n             cap: 0\n         }\n@@ -183,9 +191,12 @@ pub struct BufferedWriter<W> {\n impl<W: Writer> BufferedWriter<W> {\n     /// Creates a new `BufferedWriter` with with the specified buffer capacity\n     pub fn with_capacity(cap: uint, inner: W) -> BufferedWriter<W> {\n+        // See comments in BufferedReader for why this uses unsafe code.\n+        let mut buf = vec::with_capacity(cap);\n+        unsafe { vec::raw::set_len(&mut buf, cap); }\n         BufferedWriter {\n             inner: inner,\n-            buf: vec::from_elem(cap, 0u8),\n+            buf: buf,\n             pos: 0\n         }\n     }"}]}