{"sha": "972d798881cb470aa7a75b9ed7fa6c37117492e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MmQ3OTg4ODFjYjQ3MGFhN2E3NWI5ZWQ3ZmE2YzM3MTE3NDkyZTA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-16T15:25:15Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-24T10:36:32Z"}, "message": "Document `Allocation`", "tree": {"sha": "039dcc4292f508dec0e02156b0fd0dc34f06418c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/039dcc4292f508dec0e02156b0fd0dc34f06418c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/972d798881cb470aa7a75b9ed7fa6c37117492e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/972d798881cb470aa7a75b9ed7fa6c37117492e0", "html_url": "https://github.com/rust-lang/rust/commit/972d798881cb470aa7a75b9ed7fa6c37117492e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/972d798881cb470aa7a75b9ed7fa6c37117492e0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb8fa335721285809c5930cd0fded35899a05064", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb8fa335721285809c5930cd0fded35899a05064", "html_url": "https://github.com/rust-lang/rust/commit/cb8fa335721285809c5930cd0fded35899a05064"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "296c2e2dd6b3d4801cc872d8f8de6cbca66c91b0", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/972d798881cb470aa7a75b9ed7fa6c37117492e0/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972d798881cb470aa7a75b9ed7fa6c37117492e0/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=972d798881cb470aa7a75b9ed7fa6c37117492e0", "patch": "@@ -170,6 +170,8 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n \n /// Reading and writing\n impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n+    /// Reads bytes until a `0` is encountered. Will error if the end of the allocation is reached\n+    /// before a `0` is found.\n     pub fn read_c_str(\n         &self,\n         cx: &impl HasDataLayout,\n@@ -188,14 +190,17 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         }\n     }\n \n+    /// Validates that `ptr.offset` and `ptr.offset + size` do not point to the middle of a\n+    /// relocation. If `allow_ptr_and_undef` is `false`, also enforces that the memory in the\n+    /// given range contains neither relocations nor undef bytes.\n     pub fn check_bytes(\n         &self,\n         cx: &impl HasDataLayout,\n         ptr: Pointer<Tag>,\n         size: Size,\n         allow_ptr_and_undef: bool,\n     ) -> EvalResult<'tcx> {\n-        // Check bounds, align and relocations on the edges\n+        // Check bounds and relocations on the edges\n         self.get_bytes_with_undef_and_ptr(cx, ptr, size)?;\n         // Check undef and ptr\n         if !allow_ptr_and_undef {\n@@ -205,6 +210,9 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         Ok(())\n     }\n \n+    /// Writes `src` to the memory starting at `ptr.offset`.\n+    ///\n+    /// Will do bounds checks on the allocation.\n     pub fn write_bytes(\n         &mut self,\n         cx: &impl HasDataLayout,\n@@ -216,6 +224,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         Ok(())\n     }\n \n+    /// Sets `count` bytes starting at `ptr.offset` with `val`. Basically `memset`.\n     pub fn write_repeat(\n         &mut self,\n         cx: &impl HasDataLayout,\n@@ -236,6 +245,8 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// * byteorder cannot work with zero element buffers\n     /// * in oder to obtain a `Pointer` we need to check for ZSTness anyway due to integer pointers\n     ///   being valid for ZSTs\n+    ///\n+    /// Note: This function does not do *any* alignment checks, you need to do these before calling\n     pub fn read_scalar(\n         &self,\n         cx: &impl HasDataLayout,\n@@ -270,6 +281,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         Ok(ScalarMaybeUndef::Scalar(Scalar::from_uint(bits, size)))\n     }\n \n+    /// Note: This function does not do *any* alignment checks, you need to do these before calling\n     pub fn read_ptr_sized(\n         &self,\n         cx: &impl HasDataLayout,\n@@ -284,6 +296,8 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// * byteorder cannot work with zero element buffers\n     /// * in oder to obtain a `Pointer` we need to check for ZSTness anyway due to integer pointers\n     ///   being valid for ZSTs\n+    ///\n+    /// Note: This function does not do *any* alignment checks, you need to do these before calling\n     pub fn write_scalar(\n         &mut self,\n         cx: &impl HasDataLayout,\n@@ -330,6 +344,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         Ok(())\n     }\n \n+    /// Note: This function does not do *any* alignment checks, you need to do these before calling\n     pub fn write_ptr_sized(\n         &mut self,\n         cx: &impl HasDataLayout,\n@@ -357,7 +372,7 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n         self.relocations.range(Size::from_bytes(start)..end)\n     }\n \n-    /// Check that there ar eno relocations overlapping with the given range.\n+    /// Check that there are no relocations overlapping with the given range.\n     #[inline(always)]\n     fn check_relocations(\n         &self,"}]}