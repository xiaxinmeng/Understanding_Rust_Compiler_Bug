{"sha": "ee065595767a7e024f1933e175dd52936f0f1b10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMDY1NTk1NzY3YTdlMDI0ZjE5MzNlMTc1ZGQ1MjkzNmYwZjFiMTA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-27T00:38:07Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-27T00:38:07Z"}, "message": "Tweak presentation on lifetime trait mismatch", "tree": {"sha": "d96ec94047a1a8364ce68c4ca0c4463c977539d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d96ec94047a1a8364ce68c4ca0c4463c977539d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee065595767a7e024f1933e175dd52936f0f1b10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee065595767a7e024f1933e175dd52936f0f1b10", "html_url": "https://github.com/rust-lang/rust/commit/ee065595767a7e024f1933e175dd52936f0f1b10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee065595767a7e024f1933e175dd52936f0f1b10/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bacb5c58dfdde7c35e99b2b0d8171238cc33cf6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bacb5c58dfdde7c35e99b2b0d8171238cc33cf6c", "html_url": "https://github.com/rust-lang/rust/commit/bacb5c58dfdde7c35e99b2b0d8171238cc33cf6c"}], "stats": {"total": 30, "additions": 10, "deletions": 20}, "files": [{"sha": "02ec9fe74c1fe693bf5c24e60da393c93c170266", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee065595767a7e024f1933e175dd52936f0f1b10/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee065595767a7e024f1933e175dd52936f0f1b10/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=ee065595767a7e024f1933e175dd52936f0f1b10", "patch": "@@ -23,12 +23,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 if let Some((expected, found)) = self.values_str(&trace.values) {\n                     let expected = expected.content();\n                     let found = found.content();\n-                    // FIXME: do we want a \"the\" here?\n-                    err.span_note(trace.cause.span,\n-                                  &format!(\"...so that {} (expected {}, found {})\",\n-                                           trace.cause.as_requirement_str(),\n-                                           expected,\n-                                           found));\n+                    err.note(&format!(\"...so that the {}:\\nexpected {}\\n   found {}\",\n+                                      trace.cause.as_requirement_str(),\n+                                      expected,\n+                                      found));\n                 } else {\n                     // FIXME: this really should be handled at some earlier stage. Our\n                     // handling of region checking when type errors are present is"}, {"sha": "e559405dbd8b1304fa25230588fe725ca48db06b", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ee065595767a7e024f1933e175dd52936f0f1b10/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee065595767a7e024f1933e175dd52936f0f1b10/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=ee065595767a7e024f1933e175dd52936f0f1b10", "patch": "@@ -13,27 +13,19 @@ note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on th\n 20 | |         x\n 21 | |     }\n    | |_____^\n-note: ...so that method type is compatible with trait (expected fn(&i32, &'a u32, &u32) -> &'a u32, found fn(&i32, &u32, &u32) -> &u32)\n-  --> $DIR/mismatched_trait_impl.rs:19:5\n-   |\n-19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n-20 | |         x\n-21 | |     }\n-   | |_____^\n+   = note: ...so that the method type is compatible with trait:\n+           expected fn(&i32, &'a u32, &u32) -> &'a u32\n+              found fn(&i32, &u32, &u32) -> &u32\n note: but, the lifetime must be valid for the lifetime 'a as defined on the method body at 19:5...\n   --> $DIR/mismatched_trait_impl.rs:19:5\n    |\n 19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n 20 | |         x\n 21 | |     }\n    | |_____^\n-note: ...so that method type is compatible with trait (expected fn(&i32, &'a u32, &u32) -> &'a u32, found fn(&i32, &u32, &u32) -> &u32)\n-  --> $DIR/mismatched_trait_impl.rs:19:5\n-   |\n-19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n-20 | |         x\n-21 | |     }\n-   | |_____^\n+   = note: ...so that the method type is compatible with trait:\n+           expected fn(&i32, &'a u32, &u32) -> &'a u32\n+              found fn(&i32, &u32, &u32) -> &u32\n \n error: aborting due to previous error\n "}]}