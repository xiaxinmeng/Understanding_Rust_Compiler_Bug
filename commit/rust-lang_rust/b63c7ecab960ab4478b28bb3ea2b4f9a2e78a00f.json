{"sha": "b63c7ecab960ab4478b28bb3ea2b4f9a2e78a00f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2M2M3ZWNhYjk2MGFiNDQ3OGIyOGJiM2VhMmI0ZjlhMmU3OGEwMGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-18T16:44:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-18T16:44:35Z"}, "message": "Merge #2311\n\n2311: See through Macros for SignatureHelp r=matklad a=kjeremy\n\nNote: we meed to skip the trivia filter to make sure that\r\n`covers!(call_info_bad_offset)` succeeds otherwise we exit call_info\r\ntoo early.\r\n\r\nAlso the test doesn't pass: `FnCallNode::with_node` always detects\r\na MacroCall which is obviously wrong.\r\n\r\nFixes #2310 \n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>", "tree": {"sha": "9c1b5996fa17d279e049b80f65bd23e6c24c3c8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c1b5996fa17d279e049b80f65bd23e6c24c3c8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b63c7ecab960ab4478b28bb3ea2b4f9a2e78a00f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd+ldzCRBK7hj4Ov3rIwAAdHIIABfjDdXTgwQbhiMtts7XSHVb\nEr0n/BWR2pejBpTKE4JyH7jMwCHYE6XI3pKiCTMDMIidJL6YdqnF3LevRklafy6y\nhiONQWaD0zZmgjixXMlJqBIlX6ThP3cQ5CKPZIepEUFTKAt2UIohKs+efvWVkt3t\nhYjHsfdmMt+r9LCzXfjP9aRpMvlComl/97K2dC3vYOJI4E9YRR8txyYteskqp6cD\nkysxNsKwXPExsa5ngy+U+QR0zrD+Y/O7lPdSE7cnHJGyvMKgyYMSU0p3rQfSKygd\nQSaA5lP5ZGl6CJVddFbJDG+9KzC7TYE8T42/opqnB4b8K99Mk+uV72QXxQ8TmwI=\n=0TlB\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c1b5996fa17d279e049b80f65bd23e6c24c3c8b\nparent 7ea578086712d0a6a81dc2d77a15d868f496deb0\nparent 83dc5e79497bdded6143c812c97e009ddc783f1a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576687475 +0000\ncommitter GitHub <noreply@github.com> 1576687475 +0000\n\nMerge #2311\n\n2311: See through Macros for SignatureHelp r=matklad a=kjeremy\n\nNote: we meed to skip the trivia filter to make sure that\r\n`covers!(call_info_bad_offset)` succeeds otherwise we exit call_info\r\ntoo early.\r\n\r\nAlso the test doesn't pass: `FnCallNode::with_node` always detects\r\na MacroCall which is obviously wrong.\r\n\r\nFixes #2310 \n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b63c7ecab960ab4478b28bb3ea2b4f9a2e78a00f", "html_url": "https://github.com/rust-lang/rust/commit/b63c7ecab960ab4478b28bb3ea2b4f9a2e78a00f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b63c7ecab960ab4478b28bb3ea2b4f9a2e78a00f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ea578086712d0a6a81dc2d77a15d868f496deb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea578086712d0a6a81dc2d77a15d868f496deb0", "html_url": "https://github.com/rust-lang/rust/commit/7ea578086712d0a6a81dc2d77a15d868f496deb0"}, {"sha": "83dc5e79497bdded6143c812c97e009ddc783f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/83dc5e79497bdded6143c812c97e009ddc783f1a", "html_url": "https://github.com/rust-lang/rust/commit/83dc5e79497bdded6143c812c97e009ddc783f1a"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "2c2b6fa48910463731657630cc619d1c7caf9605", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b63c7ecab960ab4478b28bb3ea2b4f9a2e78a00f/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b63c7ecab960ab4478b28bb3ea2b4f9a2e78a00f/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=b63c7ecab960ab4478b28bb3ea2b4f9a2e78a00f", "patch": "@@ -1,24 +1,26 @@\n //! FIXME: write short doc here\n \n-use ra_db::SourceDatabase;\n+use hir::db::AstDatabase;\n use ra_syntax::{\n-    algo::ancestors_at_offset,\n     ast::{self, ArgListOwner},\n-    match_ast, AstNode, SyntaxNode, TextUnit,\n+    match_ast, AstNode, SyntaxNode,\n };\n use test_utils::tested_by;\n \n-use crate::{db::RootDatabase, CallInfo, FilePosition, FunctionSignature};\n+use crate::{\n+    db::RootDatabase, expand::descend_into_macros, CallInfo, FilePosition, FunctionSignature,\n+};\n \n /// Computes parameter information for the given call expression.\n pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<CallInfo> {\n-    let parse = db.parse(position.file_id);\n-    let syntax = parse.tree().syntax().clone();\n+    let file = db.parse_or_expand(position.file_id.into())?;\n+    let token = file.token_at_offset(position.offset).next()?;\n+    let token = descend_into_macros(db, position.file_id, token);\n \n     // Find the calling expression and it's NameRef\n-    let calling_node = FnCallNode::with_node(&syntax, position.offset)?;\n+    let calling_node = FnCallNode::with_node(&token.value.parent())?;\n     let name_ref = calling_node.name_ref()?;\n-    let name_ref = hir::InFile::new(position.file_id.into(), name_ref.syntax());\n+    let name_ref = token.with_value(name_ref.syntax());\n \n     let analyzer = hir::SourceAnalyzer::new(db, name_ref, None);\n     let (mut call_info, has_self) = match &calling_node {\n@@ -93,8 +95,8 @@ enum FnCallNode {\n }\n \n impl FnCallNode {\n-    fn with_node(syntax: &SyntaxNode, offset: TextUnit) -> Option<FnCallNode> {\n-        ancestors_at_offset(syntax, offset).find_map(|node| {\n+    fn with_node(syntax: &SyntaxNode) -> Option<FnCallNode> {\n+        syntax.ancestors().find_map(|node| {\n             match_ast! {\n                 match node {\n                     ast::CallExpr(it) => { Some(FnCallNode::CallExpr(it)) },\n@@ -589,4 +591,25 @@ fn f() {\n         assert_eq!(info.label(), \"foo!()\");\n         assert_eq!(info.doc().map(|it| it.into()), Some(\"empty macro\".to_string()));\n     }\n+\n+    #[test]\n+    fn fn_signature_for_call_in_macro() {\n+        let info = call_info(\n+            r#\"\n+            macro_rules! id {\n+                ($($tt:tt)*) => { $($tt)* }\n+            }\n+            fn foo() {\n+\n+            }\n+            id! {\n+                fn bar() {\n+                    foo(<|>);\n+                }\n+            }\n+            \"#,\n+        );\n+\n+        assert_eq!(info.label(), \"fn foo()\");\n+    }\n }"}]}