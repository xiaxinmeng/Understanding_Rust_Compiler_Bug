{"sha": "d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOTkwOThmZDgyZTBiZjNlZDYxYmJiYmNkYmIwYjZhZGZhNGM4MDg=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-10-12T02:50:12Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-10-12T02:50:12Z"}, "message": "Remove the push_unsafe! and pop_unsafe! macros.\n\nThis is a [breaking change].", "tree": {"sha": "67a2d3f272930c0a466e59bcaf262e28eb9bfdcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67a2d3f272930c0a466e59bcaf262e28eb9bfdcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808", "html_url": "https://github.com/rust-lang/rust/commit/d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81b3b27cf533e50424f749d1c1db23e5d8db952f", "url": "https://api.github.com/repos/rust-lang/rust/commits/81b3b27cf533e50424f749d1c1db23e5d8db952f", "html_url": "https://github.com/rust-lang/rust/commit/81b3b27cf533e50424f749d1c1db23e5d8db952f"}], "stats": {"total": 253, "additions": 2, "deletions": 251}, "files": [{"sha": "71f8a119aa1b81785ada65ecb6c5e6441b8d0f17", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808", "patch": "@@ -1489,8 +1489,6 @@ pub fn lower_block_check_mode(_lctx: &LoweringContext, b: &BlockCheckMode) -> hi\n     match *b {\n         DefaultBlock => hir::DefaultBlock,\n         UnsafeBlock(u) => hir::UnsafeBlock(lower_unsafe_source(_lctx, u)),\n-        PushUnsafeBlock(u) => hir::PushUnsafeBlock(lower_unsafe_source(_lctx, u)),\n-        PopUnsafeBlock(u) => hir::PopUnsafeBlock(lower_unsafe_source(_lctx, u)),\n     }\n }\n "}, {"sha": "3bd571bd95eb286318decb02e0e093231015bee1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808", "patch": "@@ -765,8 +765,6 @@ pub type SpannedIdent = Spanned<Ident>;\n pub enum BlockCheckMode {\n     DefaultBlock,\n     UnsafeBlock(UnsafeSource),\n-    PushUnsafeBlock(UnsafeSource),\n-    PopUnsafeBlock(UnsafeSource),\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]"}, {"sha": "ef26c1deae7c9e7be5420235691b30ca66822550", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808", "patch": "@@ -544,12 +544,6 @@ fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n     syntax_expanders.insert(intern(\"cfg\"),\n                             builtin_normal_expander(\n                                     ext::cfg::expand_cfg));\n-    syntax_expanders.insert(intern(\"push_unsafe\"),\n-                            builtin_normal_expander(\n-                                ext::pushpop_safe::expand_push_unsafe));\n-    syntax_expanders.insert(intern(\"pop_unsafe\"),\n-                            builtin_normal_expander(\n-                                ext::pushpop_safe::expand_pop_unsafe));\n     syntax_expanders.insert(intern(\"trace_macros\"),\n                             builtin_normal_expander(\n                                     ext::trace_macros::expand_trace_macros));"}, {"sha": "a67d550d3cd213d193e26f708a5a69c12a164304", "filename": "src/libsyntax/ext/pushpop_safe.rs", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/81b3b27cf533e50424f749d1c1db23e5d8db952f/src%2Flibsyntax%2Fext%2Fpushpop_safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b3b27cf533e50424f749d1c1db23e5d8db952f/src%2Flibsyntax%2Fext%2Fpushpop_safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpushpop_safe.rs?ref=81b3b27cf533e50424f749d1c1db23e5d8db952f", "patch": "@@ -1,94 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*\n- * The compiler code necessary to support the `push_unsafe!` and\n- * `pop_unsafe!` macros.\n- *\n- * This is a hack to allow a kind of \"safety hygiene\", where a macro\n- * can generate code with an interior expression that inherits the\n- * safety of some outer context.\n- *\n- * For example, in:\n- *\n- * ```rust\n- * fn foo() { push_unsafe!( { EXPR_1; pop_unsafe!( EXPR_2 ) } ) }\n- * ```\n- *\n- * the `EXPR_1` is considered to be in an `unsafe` context,\n- * but `EXPR_2` is considered to be in a \"safe\" (i.e. checked) context.\n- *\n- * For comparison, in:\n- *\n- * ```rust\n- * fn foo() { unsafe { push_unsafe!( { EXPR_1; pop_unsafe!( EXPR_2 ) } ) } }\n- * ```\n- *\n- * both `EXPR_1` and `EXPR_2` are considered to be in `unsafe`\n- * contexts.\n- *\n- */\n-\n-use ast;\n-use codemap::Span;\n-use ext::base::*;\n-use ext::base;\n-use ext::build::AstBuilder;\n-use feature_gate;\n-use ptr::P;\n-\n-enum PushPop { Push, Pop }\n-\n-pub fn expand_push_unsafe<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n-                               -> Box<base::MacResult+'cx> {\n-    expand_pushpop_unsafe(cx, sp, tts, PushPop::Push)\n-}\n-\n-pub fn expand_pop_unsafe<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n-                               -> Box<base::MacResult+'cx> {\n-    expand_pushpop_unsafe(cx, sp, tts, PushPop::Pop)\n-}\n-\n-fn expand_pushpop_unsafe<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree],\n-                                  pp: PushPop) -> Box<base::MacResult+'cx> {\n-    feature_gate::check_for_pushpop_syntax(\n-        cx.ecfg.features, &cx.parse_sess.span_diagnostic, sp);\n-\n-    let mut exprs = match get_exprs_from_tts(cx, sp, tts) {\n-        Some(exprs) => exprs.into_iter(),\n-        None => return DummyResult::expr(sp),\n-    };\n-\n-    let expr = match (exprs.next(), exprs.next()) {\n-        (Some(expr), None) => expr,\n-        _ => {\n-            let msg = match pp {\n-                PushPop::Push => \"push_unsafe! takes 1 arguments\",\n-                PushPop::Pop => \"pop_unsafe! takes 1 arguments\",\n-            };\n-            cx.span_err(sp, msg);\n-            return DummyResult::expr(sp);\n-        }\n-    };\n-\n-    let source = ast::UnsafeSource::CompilerGenerated;\n-    let check_mode = match pp {\n-        PushPop::Push => ast::BlockCheckMode::PushUnsafeBlock(source),\n-        PushPop::Pop => ast::BlockCheckMode::PopUnsafeBlock(source),\n-    };\n-\n-    MacEager::expr(cx.expr_block(P(ast::Block {\n-        stmts: vec![],\n-        expr: Some(expr),\n-        id: ast::DUMMY_NODE_ID,\n-        rules: check_mode,\n-        span: sp\n-    })))\n-}"}, {"sha": "f3b2c79a7dd0485400871348efd914f41ae55c39", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808", "patch": "@@ -121,7 +121,6 @@ pub mod ext {\n     pub mod log_syntax;\n     pub mod mtwt;\n     pub mod quote;\n-    pub mod pushpop_safe;\n     pub mod source_util;\n     pub mod trace_macros;\n "}, {"sha": "d1eb5e4ff61780788599f2d6fa17c2ece8ba0d56", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d399098fd82e0bf3ed61bbbbcdbb0b6adfa4c808", "patch": "@@ -1671,8 +1671,8 @@ impl<'a> State<'a> {\n                                       attrs: &[ast::Attribute],\n                                       close_box: bool) -> io::Result<()> {\n         match blk.rules {\n-            ast::UnsafeBlock(..) | ast::PushUnsafeBlock(..) => try!(self.word_space(\"unsafe\")),\n-            ast::DefaultBlock    | ast::PopUnsafeBlock(..) => ()\n+            ast::UnsafeBlock(..) => try!(self.word_space(\"unsafe\")),\n+            ast::DefaultBlock => ()\n         }\n         try!(self.maybe_print_comment(blk.span.lo));\n         try!(self.ann.pre(self, NodeBlock(blk)));"}, {"sha": "e317b4c7d4d2aa3f86368ac7c0da2feacc4c68c2", "filename": "src/test/compile-fail/feature-gate-pushpop-unsafe.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/81b3b27cf533e50424f749d1c1db23e5d8db952f/src%2Ftest%2Fcompile-fail%2Ffeature-gate-pushpop-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b3b27cf533e50424f749d1c1db23e5d8db952f/src%2Ftest%2Fcompile-fail%2Ffeature-gate-pushpop-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-pushpop-unsafe.rs?ref=81b3b27cf533e50424f749d1c1db23e5d8db952f", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let c = push_unsafe!('c'); //~ ERROR push/pop_unsafe macros are experimental\n-    let c = pop_unsafe!('c'); //~ ERROR push/pop_unsafe macros are experimental\n-}"}, {"sha": "72c065ae714173e769051ea1751c7668a0322140", "filename": "src/test/compile-fail/pushpop-unsafe-rejects.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/81b3b27cf533e50424f749d1c1db23e5d8db952f/src%2Ftest%2Fcompile-fail%2Fpushpop-unsafe-rejects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b3b27cf533e50424f749d1c1db23e5d8db952f/src%2Ftest%2Fcompile-fail%2Fpushpop-unsafe-rejects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpushpop-unsafe-rejects.rs?ref=81b3b27cf533e50424f749d1c1db23e5d8db952f", "patch": "@@ -1,74 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Basic sanity check for `push_unsafe!(EXPR)` and\n-// `pop_unsafe!(EXPR)`: we can call unsafe code when there are a\n-// positive number of pushes in the stack, or if we are within a\n-// normal `unsafe` block, but otherwise cannot.\n-\n-#![feature(pushpop_unsafe)]\n-\n-static mut X: i32 = 0;\n-\n-unsafe fn f() { X += 1; return; }\n-fn g() { unsafe { X += 1_000; } return; }\n-\n-fn main() {\n-    push_unsafe!( {\n-        f(); pop_unsafe!({\n-            f() //~ ERROR: call to unsafe function\n-        })\n-    } );\n-\n-    push_unsafe!({\n-        f();\n-        pop_unsafe!({\n-            g();\n-            f(); //~ ERROR: call to unsafe function\n-        })\n-    } );\n-\n-    push_unsafe!({\n-        g(); pop_unsafe!({\n-            unsafe {\n-                f();\n-            }\n-            f(); //~ ERROR: call to unsafe function\n-        })\n-    });\n-\n-\n-    // Note: For implementation simplicity the compiler just\n-    // ICE's if you underflow the push_unsafe stack.\n-    //\n-    // Thus all of the following cases cause an ICE.\n-    //\n-    // (The \"ERROR\" notes are from an earlier version\n-    //  that used saturated arithmetic rather than checked\n-    //  arithmetic.)\n-\n-    //    pop_unsafe!{ g() };\n-    //\n-    //    push_unsafe!({\n-    //        pop_unsafe!(pop_unsafe!{ g() })\n-    //    });\n-    //\n-    //    push_unsafe!({\n-    //        g();\n-    //        pop_unsafe!(pop_unsafe!({\n-    //            f() // ERROR: call to unsafe function\n-    //        }))\n-    //    });\n-    //\n-    //    pop_unsafe!({\n-    //        f(); // ERROR: call to unsafe function\n-    //    })\n-\n-}"}, {"sha": "fc402d4136888489b92643ede0448396cf74a0e6", "filename": "src/test/run-pass/pushpop-unsafe-okay.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/81b3b27cf533e50424f749d1c1db23e5d8db952f/src%2Ftest%2Frun-pass%2Fpushpop-unsafe-okay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b3b27cf533e50424f749d1c1db23e5d8db952f/src%2Ftest%2Frun-pass%2Fpushpop-unsafe-okay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpushpop-unsafe-okay.rs?ref=81b3b27cf533e50424f749d1c1db23e5d8db952f", "patch": "@@ -1,56 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Basic sanity check for `push_unsafe!(EXPR)` and\n-// `pop_unsafe!(EXPR)`: we can call unsafe code when there are a\n-// positive number of pushes in the stack, or if we are within a\n-// normal `unsafe` block, but otherwise cannot.\n-\n-// ignore-pretty because the `push_unsafe!` and `pop_unsafe!` macros\n-// are not integrated with the pretty-printer.\n-\n-#![feature(pushpop_unsafe)]\n-\n-static mut X: i32 = 0;\n-\n-unsafe fn f() { X += 1; return; }\n-fn g() { unsafe { X += 1_000; } return; }\n-\n-fn check_reset_x(x: i32) -> bool {\n-    #![allow(unused_parens)] // dont you judge my style choices!\n-    unsafe {\n-        let ret = (x == X);\n-        X = 0;\n-        ret\n-    }\n-}\n-\n-fn main() {\n-    // double-check test infrastructure\n-    assert!(check_reset_x(0));\n-    unsafe { f(); }\n-    assert!(check_reset_x(1));\n-    assert!(check_reset_x(0));\n-    { g(); }\n-    assert!(check_reset_x(1000));\n-    assert!(check_reset_x(0));\n-    unsafe { f(); g(); g(); }\n-    assert!(check_reset_x(2001));\n-\n-    push_unsafe!( { f(); pop_unsafe!( g() ) } );\n-    assert!(check_reset_x(1_001));\n-    push_unsafe!( { g(); pop_unsafe!( unsafe { f(); f(); } ) } );\n-    assert!(check_reset_x(1_002));\n-\n-    unsafe { push_unsafe!( { f(); pop_unsafe!( { f(); f(); } ) } ); }\n-    assert!(check_reset_x(3));\n-    push_unsafe!( { f(); push_unsafe!( { pop_unsafe!( { f(); f(); f(); } ) } ); } );\n-    assert!(check_reset_x(4));\n-}"}]}