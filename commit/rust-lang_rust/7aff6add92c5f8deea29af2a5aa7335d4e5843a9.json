{"sha": "7aff6add92c5f8deea29af2a5aa7335d4e5843a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZmY2YWRkOTJjNWY4ZGVlYTI5YWYyYTVhYTczMzVkNGU1ODQzYTk=", "commit": {"author": {"name": "Cengiz Can", "email": "cengizc@gmail.com", "date": "2017-01-25T06:26:39Z"}, "committer": {"name": "Cengiz Can", "email": "cengizc@gmail.com", "date": "2017-02-04T21:25:56Z"}, "message": "Remove extra note and revert name in message", "tree": {"sha": "2286cf0925f8fc19a822ea4d6faffba2ad47fb66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2286cf0925f8fc19a822ea4d6faffba2ad47fb66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7aff6add92c5f8deea29af2a5aa7335d4e5843a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7aff6add92c5f8deea29af2a5aa7335d4e5843a9", "html_url": "https://github.com/rust-lang/rust/commit/7aff6add92c5f8deea29af2a5aa7335d4e5843a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7aff6add92c5f8deea29af2a5aa7335d4e5843a9/comments", "author": {"login": "cengiz-io", "id": 123910, "node_id": "MDQ6VXNlcjEyMzkxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/123910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cengiz-io", "html_url": "https://github.com/cengiz-io", "followers_url": "https://api.github.com/users/cengiz-io/followers", "following_url": "https://api.github.com/users/cengiz-io/following{/other_user}", "gists_url": "https://api.github.com/users/cengiz-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/cengiz-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cengiz-io/subscriptions", "organizations_url": "https://api.github.com/users/cengiz-io/orgs", "repos_url": "https://api.github.com/users/cengiz-io/repos", "events_url": "https://api.github.com/users/cengiz-io/events{/privacy}", "received_events_url": "https://api.github.com/users/cengiz-io/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cengiz-io", "id": 123910, "node_id": "MDQ6VXNlcjEyMzkxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/123910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cengiz-io", "html_url": "https://github.com/cengiz-io", "followers_url": "https://api.github.com/users/cengiz-io/followers", "following_url": "https://api.github.com/users/cengiz-io/following{/other_user}", "gists_url": "https://api.github.com/users/cengiz-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/cengiz-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cengiz-io/subscriptions", "organizations_url": "https://api.github.com/users/cengiz-io/orgs", "repos_url": "https://api.github.com/users/cengiz-io/repos", "events_url": "https://api.github.com/users/cengiz-io/events{/privacy}", "received_events_url": "https://api.github.com/users/cengiz-io/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89ae2caf56577d272be0169aaec68e75dd5bc6af", "url": "https://api.github.com/repos/rust-lang/rust/commits/89ae2caf56577d272be0169aaec68e75dd5bc6af", "html_url": "https://github.com/rust-lang/rust/commit/89ae2caf56577d272be0169aaec68e75dd5bc6af"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "024c14ce9d922b1e1cce6acf464b21078a0bbc15", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7aff6add92c5f8deea29af2a5aa7335d4e5843a9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aff6add92c5f8deea29af2a5aa7335d4e5843a9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=7aff6add92c5f8deea29af2a5aa7335d4e5843a9", "patch": "@@ -883,40 +883,50 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n+    fn extract_type_name(&self, ty: &'a Ty<'tcx>) -> String {\n+        if let ty::TyInfer(ty::TyVar(ty_vid)) = (*ty).sty {\n+            let ty_vars = self.type_variables.borrow();\n+            if let TypeVariableOrigin::TypeParameterDefinition(_, name) =\n+                *ty_vars.var_origin(ty_vid) {\n+                name.to_string()\n+            } else {\n+                ty.to_string()\n+            }\n+        } else {\n+            ty.to_string()\n+        }\n+    }\n \n-    fn need_type_info(&self,\n-                      obligation: &PredicateObligation<'tcx>,\n-                      ty: Ty<'tcx>) {\n-\n+    fn need_type_info(&self, obligation: &PredicateObligation<'tcx>, ty: Ty<'tcx>) {\n         let ty = self.resolve_type_vars_if_possible(&ty);\n+        let name = self.extract_type_name(&ty);\n         let ref cause = obligation.cause;\n \n         let mut err = struct_span_err!(self.tcx.sess,\n                                        cause.span,\n                                        E0282,\n-                                       \"unable to fully infer type(s)\");\n+                                       \"type annotations needed\");\n \n-        err.note(\"type annotations or generic parameter binding required\");\n-        err.span_label(cause.span, &format!(\"cannot infer type\"));\n+        err.span_label(cause.span, &format!(\"cannot infer type for `{}`\", name));\n \n         let expr = self.tcx.hir.expect_expr(cause.body_id);\n \n         let mut local_visitor = FindLocalByTypeVisitor {\n             infcx: &self,\n             target_ty: &ty,\n-            found_pattern: None\n+            found_pattern: None,\n         };\n \n         local_visitor.visit_expr(expr);\n \n         if let Some(pattern) = local_visitor.found_pattern {\n             let pattern_span = pattern.span;\n-            if let Some(n) = pattern.simple_name() {\n+            if let Some(simple_name) = pattern.simple_name() {\n                 err.span_label(pattern_span,\n-                    &format!(\"annotating the type for the variable `{}` would help\", n));\n+                               &format!(\"consider giving `{}` a type\",\n+                                        simple_name));\n             } else {\n-                err.span_label(pattern_span,\n-                    &format!(\"annotating the type of pattern would help\"));\n+                err.span_label(pattern_span, &format!(\"consider giving a type to pattern\"));\n             }\n         }\n "}]}