{"sha": "bf642323d621dcefeef1d8ab4711aae36e357615", "node_id": "C_kwDOAAsO6NoAKGJmNjQyMzIzZDYyMWRjZWZlZWYxZDhhYjQ3MTFhYWUzNmUzNTc2MTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-23T15:44:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-23T15:44:53Z"}, "message": "Auto merge of #89016 - lcnr:non_blanket_impls, r=nikomatsakis,michaelwoerister\n\nfix non_blanket_impls iteration order\n\nWe sometimes iterate over all `non_blanket_impls`, not sure if this is observable outside\nof error messages (i.e. as incremental bugs). This should fix the underlying issue of #86986.\n\nsecond attempt of #88718\n\nr? `@nikomatsakis`", "tree": {"sha": "540a336917f2d0d3c8bab835b98ed240df9b159a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/540a336917f2d0d3c8bab835b98ed240df9b159a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf642323d621dcefeef1d8ab4711aae36e357615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf642323d621dcefeef1d8ab4711aae36e357615", "html_url": "https://github.com/rust-lang/rust/commit/bf642323d621dcefeef1d8ab4711aae36e357615", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf642323d621dcefeef1d8ab4711aae36e357615/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0132f8258ae0fbc4f2b461b28d510222d22aa979", "url": "https://api.github.com/repos/rust-lang/rust/commits/0132f8258ae0fbc4f2b461b28d510222d22aa979", "html_url": "https://github.com/rust-lang/rust/commit/0132f8258ae0fbc4f2b461b28d510222d22aa979"}, {"sha": "01bcddbdc4b52e98807639d4c00129cd7ff36ce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/01bcddbdc4b52e98807639d4c00129cd7ff36ce4", "html_url": "https://github.com/rust-lang/rust/commit/01bcddbdc4b52e98807639d4c00129cd7ff36ce4"}], "stats": {"total": 161, "additions": 43, "deletions": 118}, "files": [{"sha": "6637dbd19013f91d16ab25b7896070c00af47101", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=bf642323d621dcefeef1d8ab4711aae36e357615", "patch": "@@ -277,7 +277,7 @@ fn attempt_static(tcx: TyCtxt<'_>) -> Option<DependencyList> {\n     let all_crates_available_as_rlib = tcx\n         .crates(())\n         .iter()\n-        .cloned()\n+        .copied()\n         .filter_map(|cnum| {\n             if tcx.dep_kind(cnum).macros_only() {\n                 return None;\n@@ -291,10 +291,11 @@ fn attempt_static(tcx: TyCtxt<'_>) -> Option<DependencyList> {\n \n     // All crates are available in an rlib format, so we're just going to link\n     // everything in explicitly so long as it's actually required.\n-    let last_crate = tcx.crates(()).len();\n-    let mut ret = (1..last_crate + 1)\n-        .map(|cnum| {\n-            if tcx.dep_kind(CrateNum::new(cnum)) == CrateDepKind::Explicit {\n+    let mut ret = tcx\n+        .crates(())\n+        .iter()\n+        .map(|&cnum| {\n+            if tcx.dep_kind(cnum) == CrateDepKind::Explicit {\n                 Linkage::Static\n             } else {\n                 Linkage::NotLinked"}, {"sha": "7be0e32ef38dca3c9753defe7730ee817123e067", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 20, "deletions": 34, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=bf642323d621dcefeef1d8ab4711aae36e357615", "patch": "@@ -304,17 +304,7 @@ pub fn provide(providers: &mut Providers) {\n             // traversal, but not globally minimal across all crates.\n             let bfs_queue = &mut VecDeque::new();\n \n-            // Preferring shortest paths alone does not guarantee a\n-            // deterministic result; so sort by crate num to avoid\n-            // hashtable iteration non-determinism. This only makes\n-            // things as deterministic as crate-nums assignment is,\n-            // which is to say, its not deterministic in general. But\n-            // we believe that libstd is consistently assigned crate\n-            // num 1, so it should be enough to resolve #46112.\n-            let mut crates: Vec<CrateNum> = (*tcx.crates(())).to_owned();\n-            crates.sort();\n-\n-            for &cnum in crates.iter() {\n+            for &cnum in tcx.crates(()) {\n                 // Ignore crates without a corresponding local `extern crate` item.\n                 if tcx.missing_extern_crate_item(cnum) {\n                     continue;\n@@ -323,35 +313,31 @@ pub fn provide(providers: &mut Providers) {\n                 bfs_queue.push_back(DefId { krate: cnum, index: CRATE_DEF_INDEX });\n             }\n \n-            // (restrict scope of mutable-borrow of `visible_parent_map`)\n-            {\n-                let visible_parent_map = &mut visible_parent_map;\n-                let mut add_child = |bfs_queue: &mut VecDeque<_>, child: &Export, parent: DefId| {\n-                    if child.vis != ty::Visibility::Public {\n-                        return;\n-                    }\n+            let mut add_child = |bfs_queue: &mut VecDeque<_>, child: &Export, parent: DefId| {\n+                if child.vis != ty::Visibility::Public {\n+                    return;\n+                }\n \n-                    if let Some(child) = child.res.opt_def_id() {\n-                        match visible_parent_map.entry(child) {\n-                            Entry::Occupied(mut entry) => {\n-                                // If `child` is defined in crate `cnum`, ensure\n-                                // that it is mapped to a parent in `cnum`.\n-                                if child.is_local() && entry.get().is_local() {\n-                                    entry.insert(parent);\n-                                }\n-                            }\n-                            Entry::Vacant(entry) => {\n+                if let Some(child) = child.res.opt_def_id() {\n+                    match visible_parent_map.entry(child) {\n+                        Entry::Occupied(mut entry) => {\n+                            // If `child` is defined in crate `cnum`, ensure\n+                            // that it is mapped to a parent in `cnum`.\n+                            if child.is_local() && entry.get().is_local() {\n                                 entry.insert(parent);\n-                                bfs_queue.push_back(child);\n                             }\n                         }\n+                        Entry::Vacant(entry) => {\n+                            entry.insert(parent);\n+                            bfs_queue.push_back(child);\n+                        }\n                     }\n-                };\n+                }\n+            };\n \n-                while let Some(def) = bfs_queue.pop_front() {\n-                    for child in tcx.item_children(def).iter() {\n-                        add_child(bfs_queue, child, def);\n-                    }\n+            while let Some(def) = bfs_queue.pop_front() {\n+                for child in tcx.item_children(def).iter() {\n+                    add_child(bfs_queue, child, def);\n                 }\n             }\n "}, {"sha": "8509aa00bc0225de605385211c021cf16ab8f98e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=bf642323d621dcefeef1d8ab4711aae36e357615", "patch": "@@ -1708,9 +1708,10 @@ impl EncodeContext<'a, 'tcx> {\n \n     fn encode_crate_deps(&mut self) -> Lazy<[CrateDep]> {\n         empty_proc_macro!(self);\n-        let crates = self.tcx.crates(());\n \n-        let mut deps = crates\n+        let deps = self\n+            .tcx\n+            .crates(())\n             .iter()\n             .map(|&cnum| {\n                 let dep = CrateDep {\n@@ -1724,8 +1725,6 @@ impl EncodeContext<'a, 'tcx> {\n             })\n             .collect::<Vec<_>>();\n \n-        deps.sort_by_key(|&(cnum, _)| cnum);\n-\n         {\n             // Sanity-check the crate numbers\n             let mut expected_cnum = 1;"}, {"sha": "4b4f65a062f6329d1a23b0b565062cec88382ef9", "filename": "compiler/rustc_middle/src/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 41, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs?ref=bf642323d621dcefeef1d8ab4711aae36e357615", "patch": "@@ -1,9 +1,9 @@\n use crate::ich;\n use crate::middle::cstore::CrateStore;\n-use crate::ty::{fast_reject, TyCtxt};\n+use crate::ty::TyCtxt;\n \n use rustc_ast as ast;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n@@ -14,9 +14,6 @@ use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::Symbol;\n use rustc_span::{BytePos, CachingSourceMapView, SourceFile, Span, SpanData};\n \n-use smallvec::SmallVec;\n-use std::cmp::Ord;\n-\n fn compute_ignored_attr_names() -> FxHashSet<Symbol> {\n     debug_assert!(!ich::IGNORED_ATTRIBUTES.is_empty());\n     ich::IGNORED_ATTRIBUTES.iter().copied().collect()\n@@ -241,39 +238,3 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n }\n \n impl rustc_session::HashStableContext for StableHashingContext<'a> {}\n-\n-pub fn hash_stable_trait_impls<'a>(\n-    hcx: &mut StableHashingContext<'a>,\n-    hasher: &mut StableHasher,\n-    blanket_impls: &[DefId],\n-    non_blanket_impls: &FxHashMap<fast_reject::SimplifiedType, Vec<DefId>>,\n-) {\n-    {\n-        let mut blanket_impls: SmallVec<[_; 8]> =\n-            blanket_impls.iter().map(|&def_id| hcx.def_path_hash(def_id)).collect();\n-\n-        if blanket_impls.len() > 1 {\n-            blanket_impls.sort_unstable();\n-        }\n-\n-        blanket_impls.hash_stable(hcx, hasher);\n-    }\n-\n-    {\n-        let mut keys: SmallVec<[_; 8]> =\n-            non_blanket_impls.keys().map(|k| (k, k.map_def(|d| hcx.def_path_hash(d)))).collect();\n-        keys.sort_unstable_by(|&(_, ref k1), &(_, ref k2)| k1.cmp(k2));\n-        keys.len().hash_stable(hcx, hasher);\n-        for (key, ref stable_key) in keys {\n-            stable_key.hash_stable(hcx, hasher);\n-            let mut impls: SmallVec<[_; 8]> =\n-                non_blanket_impls[key].iter().map(|&impl_id| hcx.def_path_hash(impl_id)).collect();\n-\n-            if impls.len() > 1 {\n-                impls.sort_unstable();\n-            }\n-\n-            impls.hash_stable(hcx, hasher);\n-        }\n-    }\n-}"}, {"sha": "e8e5c4a2669906d31805c081b0d543616505f050", "filename": "compiler/rustc_middle/src/ich/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_middle%2Fsrc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_middle%2Fsrc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fmod.rs?ref=bf642323d621dcefeef1d8ab4711aae36e357615", "patch": "@@ -1,8 +1,6 @@\n //! ICH - Incremental Compilation Hash\n \n-pub use self::hcx::{\n-    hash_stable_trait_impls, NodeIdHashingMode, StableHashingContext, StableHashingContextProvider,\n-};\n+pub use self::hcx::{NodeIdHashingMode, StableHashingContext, StableHashingContextProvider};\n use rustc_span::symbol::{sym, Symbol};\n \n mod hcx;"}, {"sha": "ab47c2a7636f95224adc7270b3588f928b3c5ee9", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=bf642323d621dcefeef1d8ab4711aae36e357615", "patch": "@@ -1,9 +1,7 @@\n-use crate::ich::{self, StableHashingContext};\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{self, TyCtxt};\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::{DefId, DefIdMap};\n use rustc_span::symbol::Ident;\n@@ -50,19 +48,19 @@ impl Graph {\n \n /// Children of a given impl, grouped into blanket/non-blanket varieties as is\n /// done in `TraitDef`.\n-#[derive(Default, TyEncodable, TyDecodable, Debug)]\n+#[derive(Default, TyEncodable, TyDecodable, Debug, HashStable)]\n pub struct Children {\n     // Impls of a trait (or specializations of a given impl). To allow for\n     // quicker lookup, the impls are indexed by a simplified version of their\n     // `Self` type: impls with a simplifiable `Self` are stored in\n-    // `nonblanket_impls` keyed by it, while all other impls are stored in\n+    // `non_blanket_impls` keyed by it, while all other impls are stored in\n     // `blanket_impls`.\n     //\n     // A similar division is used within `TraitDef`, but the lists there collect\n     // together *all* the impls for a trait, and are populated prior to building\n     // the specialization graph.\n     /// Impls of the trait.\n-    pub nonblanket_impls: FxHashMap<SimplifiedType, Vec<DefId>>,\n+    pub non_blanket_impls: FxIndexMap<SimplifiedType, Vec<DefId>>,\n \n     /// Blanket impls associated with the trait.\n     pub blanket_impls: Vec<DefId>,\n@@ -235,11 +233,3 @@ pub fn ancestors(\n         })\n     }\n }\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for Children {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let Children { ref nonblanket_impls, ref blanket_impls } = *self;\n-\n-        ich::hash_stable_trait_impls(hcx, hasher, blanket_impls, nonblanket_impls);\n-    }\n-}"}, {"sha": "25a310b12db58ea34d512e12d7037544272f6f33", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=bf642323d621dcefeef1d8ab4711aae36e357615", "patch": "@@ -1,4 +1,3 @@\n-use crate::ich::{self, StableHashingContext};\n use crate::traits::specialization_graph;\n use crate::ty::fast_reject;\n use crate::ty::fold::TypeFoldable;\n@@ -7,8 +6,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::DefPathHash;\n \n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::ErrorReported;\n use rustc_macros::HashStable;\n \n@@ -66,11 +64,11 @@ pub enum TraitSpecializationKind {\n     AlwaysApplicable,\n }\n \n-#[derive(Default, Debug)]\n+#[derive(Default, Debug, HashStable)]\n pub struct TraitImpls {\n     blanket_impls: Vec<DefId>,\n     /// Impls indexed by their simplified self type, for fast lookup.\n-    non_blanket_impls: FxHashMap<fast_reject::SimplifiedType, Vec<DefId>>,\n+    non_blanket_impls: FxIndexMap<fast_reject::SimplifiedType, Vec<DefId>>,\n }\n \n impl TraitImpls {\n@@ -249,11 +247,3 @@ pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> Trait\n \n     impls\n }\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for TraitImpls {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let TraitImpls { ref blanket_impls, ref non_blanket_impls } = *self;\n-\n-        ich::hash_stable_trait_impls(hcx, hasher, blanket_impls, non_blanket_impls);\n-    }\n-}"}, {"sha": "ec7dcd4a419beb4e354fcc8e0d71ca95806c3e6f", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf642323d621dcefeef1d8ab4711aae36e357615/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=bf642323d621dcefeef1d8ab4711aae36e357615", "patch": "@@ -50,7 +50,7 @@ impl ChildrenExt for Children {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), false) {\n             debug!(\"insert_blindly: impl_def_id={:?} st={:?}\", impl_def_id, st);\n-            self.nonblanket_impls.entry(st).or_default().push(impl_def_id)\n+            self.non_blanket_impls.entry(st).or_default().push(impl_def_id)\n         } else {\n             debug!(\"insert_blindly: impl_def_id={:?} st=None\", impl_def_id);\n             self.blanket_impls.push(impl_def_id)\n@@ -65,7 +65,7 @@ impl ChildrenExt for Children {\n         let vec: &mut Vec<DefId>;\n         if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), false) {\n             debug!(\"remove_existing: impl_def_id={:?} st={:?}\", impl_def_id, st);\n-            vec = self.nonblanket_impls.get_mut(&st).unwrap();\n+            vec = self.non_blanket_impls.get_mut(&st).unwrap();\n         } else {\n             debug!(\"remove_existing: impl_def_id={:?} st=None\", impl_def_id);\n             vec = &mut self.blanket_impls;\n@@ -218,15 +218,15 @@ impl ChildrenExt for Children {\n }\n \n fn iter_children(children: &mut Children) -> impl Iterator<Item = DefId> + '_ {\n-    let nonblanket = children.nonblanket_impls.iter_mut().flat_map(|(_, v)| v.iter());\n+    let nonblanket = children.non_blanket_impls.iter().flat_map(|(_, v)| v.iter());\n     children.blanket_impls.iter().chain(nonblanket).cloned()\n }\n \n fn filtered_children(\n     children: &mut Children,\n     st: SimplifiedType,\n ) -> impl Iterator<Item = DefId> + '_ {\n-    let nonblanket = children.nonblanket_impls.entry(st).or_default().iter();\n+    let nonblanket = children.non_blanket_impls.entry(st).or_default().iter();\n     children.blanket_impls.iter().chain(nonblanket).cloned()\n }\n "}]}