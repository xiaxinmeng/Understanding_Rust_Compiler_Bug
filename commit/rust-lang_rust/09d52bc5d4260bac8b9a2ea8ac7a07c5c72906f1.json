{"sha": "09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "node_id": "C_kwDOAAsO6NoAKDA5ZDUyYmM1ZDQyNjBiYWM4YjlhMmVhOGFjN2EwN2M1YzcyOTA2ZjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-08T13:20:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-08T13:20:45Z"}, "message": "Auto merge of #97873 - Dylan-DPC:rollup-g6ptsdq, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97276 (Stabilize `const_intrinsic_copy`)\n - #97763 (Allow ptr_from_addr_cast to fail)\n - #97846 (Specify DWARF alignment in bits, not bytes.)\n - #97848 (Impl Traits lowering minor refactors)\n - #97865 (remove `BorrowckMode`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "94ea59007c6081c8fdd79f76d400735f6bd45a1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94ea59007c6081c8fdd79f76d400735f6bd45a1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "html_url": "https://github.com/rust-lang/rust/commit/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a97162cb245b5e2c7458c28859e3df779908c02", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a97162cb245b5e2c7458c28859e3df779908c02", "html_url": "https://github.com/rust-lang/rust/commit/1a97162cb245b5e2c7458c28859e3df779908c02"}, {"sha": "5d1a3669ee3e18fe7bcac455dc880861a73ff84b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d1a3669ee3e18fe7bcac455dc880861a73ff84b", "html_url": "https://github.com/rust-lang/rust/commit/5d1a3669ee3e18fe7bcac455dc880861a73ff84b"}], "stats": {"total": 239, "additions": 130, "deletions": 109}, "files": [{"sha": "d5ed9aa380f458e2ff6e9a8ea92f9093275b8b50", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -19,7 +19,6 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n use smallvec::{smallvec, SmallVec};\n-use tracing::debug;\n \n use std::iter;\n \n@@ -117,6 +116,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n         self.owners[def_id]\n     }\n \n+    #[instrument(level = \"debug\", skip(self, c))]\n     fn lower_crate(&mut self, c: &Crate) {\n         debug_assert_eq!(self.resolver.local_def_id(CRATE_NODE_ID), CRATE_DEF_ID);\n \n@@ -127,6 +127,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n         })\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_item(&mut self, item: &Item) {\n         self.with_lctx(item.id, |lctx| hir::OwnerNode::Item(lctx.lower_item(item)))\n     }\n@@ -485,6 +486,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         (ty, self.lower_const_body(span, body))\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_use_tree(\n         &mut self,\n         tree: &UseTree,\n@@ -494,8 +496,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         ident: &mut Ident,\n         attrs: Option<&'hir [Attribute]>,\n     ) -> hir::ItemKind<'hir> {\n-        debug!(\"lower_use_tree(tree={:?})\", tree);\n-\n         let path = &tree.prefix;\n         let segments = prefix.segments.iter().chain(path.segments.iter()).cloned().collect();\n \n@@ -1298,6 +1298,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     /// Return the pair of the lowered `generics` as `hir::Generics` and the evaluation of `f` with\n     /// the carried impl trait definitions and bounds.\n+    #[instrument(level = \"debug\", skip(self, f))]\n     fn lower_generics<T>(\n         &mut self,\n         generics: &Generics,"}, {"sha": "6d780b8448cc09e42272c5b2912618ff0586bdac", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 79, "deletions": 46, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -37,6 +37,9 @@\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n \n+#[macro_use]\n+extern crate tracing;\n+\n use rustc_ast::visit;\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n@@ -63,7 +66,6 @@ use rustc_span::{Span, DUMMY_SP};\n \n use smallvec::SmallVec;\n use std::collections::hash_map::Entry;\n-use tracing::{debug, trace};\n \n macro_rules! arena_vec {\n     ($this:expr; $($x:expr),*) => (\n@@ -439,7 +441,7 @@ pub fn lower_crate<'a, 'hir>(\n     arena.alloc(krate)\n }\n \n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n enum ParamMode {\n     /// Any path in a type context.\n     Explicit,\n@@ -455,6 +457,7 @@ enum ParenthesizedGenericArgs {\n }\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n+    #[instrument(level = \"debug\", skip(self, f))]\n     fn with_hir_id_owner(\n         &mut self,\n         owner: NodeId,\n@@ -599,12 +602,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.lower_node_id(node_id)\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n     fn lower_res(&mut self, res: Res<NodeId>) -> Res {\n         let res: Result<Res, ()> = res.apply_id(|id| {\n             let owner = self.current_hir_id_owner;\n             let local_id = self.node_id_to_local_id.get(&id).copied().ok_or(())?;\n             Ok(hir::HirId { owner, local_id })\n         });\n+        trace!(?res);\n+\n         // We may fail to find a HirId when the Res points to a Local from an enclosing HIR owner.\n         // This can happen when trying to lower the return type `x` in erroneous code like\n         //   async fn foo(x: u8) -> x {}\n@@ -851,6 +857,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// ```\n     ///\n     /// returns a `hir::TypeBinding` representing `Item`.\n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_assoc_ty_constraint(\n         &mut self,\n         constraint: &AssocConstraint,\n@@ -1011,6 +1018,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         err.emit();\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_generic_arg(\n         &mut self,\n         arg: &ast::GenericArg,\n@@ -1081,6 +1089,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn lower_ty(&mut self, t: &Ty, itctx: ImplTraitContext) -> &'hir hir::Ty<'hir> {\n         self.arena.alloc(self.lower_ty_direct(t, itctx))\n     }\n@@ -1212,41 +1221,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         )\n                     }\n                     ImplTraitContext::Universal => {\n-                        // Add a definition for the in-band `Param`.\n-                        let def_id = self.resolver.local_def_id(def_node_id);\n-\n-                        let hir_bounds =\n-                            self.lower_param_bounds(bounds, ImplTraitContext::Universal);\n-                        // Set the name to `impl Bound1 + Bound2`.\n+                        let span = t.span;\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n-                        let param = hir::GenericParam {\n-                            hir_id: self.lower_node_id(def_node_id),\n-                            name: ParamName::Plain(self.lower_ident(ident)),\n-                            pure_wrt_drop: false,\n-                            span: self.lower_span(span),\n-                            kind: hir::GenericParamKind::Type { default: None, synthetic: true },\n-                            colon_span: None,\n-                        };\n+                        let (param, bounds, path) =\n+                            self.lower_generic_and_bounds(def_node_id, span, ident, bounds);\n                         self.impl_trait_defs.push(param);\n-\n-                        if let Some(preds) = self.lower_generic_bound_predicate(\n-                            ident,\n-                            def_node_id,\n-                            &GenericParamKind::Type { default: None },\n-                            hir_bounds,\n-                            hir::PredicateOrigin::ImplTrait,\n-                        ) {\n-                            self.impl_trait_bounds.push(preds)\n+                        if let Some(bounds) = bounds {\n+                            self.impl_trait_bounds.push(bounds);\n                         }\n-\n-                        hir::TyKind::Path(hir::QPath::Resolved(\n-                            None,\n-                            self.arena.alloc(hir::Path {\n-                                span: self.lower_span(span),\n-                                res: Res::Def(DefKind::TyParam, def_id.to_def_id()),\n-                                segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident))],\n-                            }),\n-                        ))\n+                        path\n                     }\n                     ImplTraitContext::Disallowed(position) => {\n                         let mut err = struct_span_err!(\n@@ -1737,6 +1720,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         )\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n     fn lower_param_bound(\n         &mut self,\n         tpb: &GenericBound,\n@@ -1862,8 +1846,27 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.arena.alloc_from_iter(self.lower_generic_params_mut(params))\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n     fn lower_generic_param(&mut self, param: &GenericParam) -> hir::GenericParam<'hir> {\n-        let (name, kind) = match param.kind {\n+        let (name, kind) = self.lower_generic_param_kind(param);\n+\n+        let hir_id = self.lower_node_id(param.id);\n+        self.lower_attrs(hir_id, &param.attrs);\n+        hir::GenericParam {\n+            hir_id,\n+            name,\n+            span: self.lower_span(param.span()),\n+            pure_wrt_drop: self.sess.contains_name(&param.attrs, sym::may_dangle),\n+            kind,\n+            colon_span: param.colon_span.map(|s| self.lower_span(s)),\n+        }\n+    }\n+\n+    fn lower_generic_param_kind(\n+        &mut self,\n+        param: &GenericParam,\n+    ) -> (hir::ParamName, hir::GenericParamKind<'hir>) {\n+        match param.kind {\n             GenericParamKind::Lifetime => {\n                 // AST resolution emitted an error on those parameters, so we lower them using\n                 // `ParamName::Error`.\n@@ -1897,17 +1900,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     hir::GenericParamKind::Const { ty, default },\n                 )\n             }\n-        };\n-\n-        let hir_id = self.lower_node_id(param.id);\n-        self.lower_attrs(hir_id, &param.attrs);\n-        hir::GenericParam {\n-            hir_id,\n-            name,\n-            span: self.lower_span(param.span()),\n-            pure_wrt_drop: self.sess.contains_name(&param.attrs, sym::may_dangle),\n-            kind,\n-            colon_span: param.colon_span.map(|s| self.lower_span(s)),\n         }\n     }\n \n@@ -1954,6 +1946,47 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         bounds.iter().map(move |bound| self.lower_param_bound(bound, itctx))\n     }\n \n+    fn lower_generic_and_bounds(\n+        &mut self,\n+        node_id: NodeId,\n+        span: Span,\n+        ident: Ident,\n+        bounds: &[GenericBound],\n+    ) -> (hir::GenericParam<'hir>, Option<hir::WherePredicate<'hir>>, hir::TyKind<'hir>) {\n+        // Add a definition for the in-band `Param`.\n+        let def_id = self.resolver.local_def_id(node_id);\n+\n+        let hir_bounds = self.lower_param_bounds(bounds, ImplTraitContext::Universal);\n+        // Set the name to `impl Bound1 + Bound2`.\n+        let param = hir::GenericParam {\n+            hir_id: self.lower_node_id(node_id),\n+            name: ParamName::Plain(self.lower_ident(ident)),\n+            pure_wrt_drop: false,\n+            span: self.lower_span(span),\n+            kind: hir::GenericParamKind::Type { default: None, synthetic: true },\n+            colon_span: None,\n+        };\n+\n+        let preds = self.lower_generic_bound_predicate(\n+            ident,\n+            node_id,\n+            &GenericParamKind::Type { default: None },\n+            hir_bounds,\n+            hir::PredicateOrigin::ImplTrait,\n+        );\n+\n+        let ty = hir::TyKind::Path(hir::QPath::Resolved(\n+            None,\n+            self.arena.alloc(hir::Path {\n+                span: self.lower_span(span),\n+                res: Res::Def(DefKind::TyParam, def_id.to_def_id()),\n+                segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident))],\n+            }),\n+        ));\n+\n+        (param, preds, ty)\n+    }\n+\n     /// Lowers a block directly to an expression, presuming that it\n     /// has no attributes and is not targeted by a `break`.\n     fn lower_block_expr(&mut self, b: &Block) -> hir::Expr<'hir> {"}, {"sha": "ac63a075ac65fe22d466dba3359a8634cec4aa2f", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -15,6 +15,7 @@ use smallvec::smallvec;\n use tracing::debug;\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n+    #[instrument(level = \"trace\", skip(self))]\n     pub(crate) fn lower_qpath(\n         &mut self,\n         id: NodeId,\n@@ -23,7 +24,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         param_mode: ParamMode,\n         itctx: ImplTraitContext,\n     ) -> hir::QPath<'hir> {\n-        debug!(\"lower_qpath(id: {:?}, qself: {:?}, p: {:?})\", id, qself, p);\n         let qself_position = qself.as_ref().map(|q| q.position);\n         let qself = qself.as_ref().map(|q| self.lower_ty(&q.ty, itctx));\n "}, {"sha": "f5cbbc7ca919872c8bf160df1c25592eda96d742", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -1365,7 +1365,7 @@ pub fn build_global_var_di_node<'ll>(cx: &CodegenCx<'ll, '_>, def_id: DefId, glo\n             is_local_to_unit,\n             global,\n             None,\n-            global_align.bytes() as u32,\n+            global_align.bits() as u32,\n         );\n     }\n }"}, {"sha": "fb484fba9fd066e77ed8f5edffe2210b0221dfd5", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -221,7 +221,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let addr = addr.to_machine_usize(self)?;\n \n         // Then turn address into pointer.\n-        let ptr = M::ptr_from_addr_cast(&self, addr);\n+        let ptr = M::ptr_from_addr_cast(&self, addr)?;\n         Ok(Scalar::from_maybe_pointer(ptr, self).into())\n     }\n "}, {"sha": "5377535b9fa0877b25666ee9114fd6976b679773", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -294,11 +294,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     fn ptr_from_addr_cast(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         addr: u64,\n-    ) -> Pointer<Option<Self::PointerTag>>;\n+    ) -> InterpResult<'tcx, Pointer<Option<Self::PointerTag>>>;\n \n-    // FIXME: Transmuting an integer to a pointer should just always return a `None`\n-    // provenance, but that causes problems with function pointers in Miri.\n     /// Hook for returning a pointer from a transmute-like operation on an addr.\n+    /// This is only needed to support Miri's (unsound) \"allow-ptr-int-transmute\" flag.\n     fn ptr_from_addr_transmute(\n         ecx: &InterpCx<'mir, 'tcx, Self>,\n         addr: u64,\n@@ -519,8 +518,10 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     fn ptr_from_addr_cast(\n         _ecx: &InterpCx<$mir, $tcx, Self>,\n         addr: u64,\n-    ) -> Pointer<Option<AllocId>> {\n-        Pointer::new(None, Size::from_bytes(addr))\n+    ) -> InterpResult<$tcx, Pointer<Option<AllocId>>> {\n+        // Allow these casts, but make the pointer not dereferenceable.\n+        // (I.e., they behave like transmutation.)\n+        Ok(Pointer::new(None, Size::from_bytes(addr)))\n     }\n \n     #[inline(always)]"}, {"sha": "cabaf321f80c302194b3209d200de650a2be5bcb", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -547,23 +547,6 @@ pub enum PrintRequest {\n     LinkArgs,\n }\n \n-#[derive(Copy, Clone)]\n-pub enum BorrowckMode {\n-    Mir,\n-    Migrate,\n-}\n-\n-impl BorrowckMode {\n-    /// Returns whether we should run the MIR-based borrow check, but also fall back\n-    /// on the AST borrow check if the MIR-based one errors.\n-    pub fn migrate(self) -> bool {\n-        match self {\n-            BorrowckMode::Mir => false,\n-            BorrowckMode::Migrate => true,\n-        }\n-    }\n-}\n-\n pub enum Input {\n     /// Load source code from a file.\n     File(PathBuf),"}, {"sha": "26e954b0026aa3b9cc06a7cc969d46c960dbdfc8", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -23,7 +23,7 @@ use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{walk_generics, Visitor as _};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{GenericArg, GenericArgs};\n+use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n@@ -2627,16 +2627,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let def_id = item_id.def_id.to_def_id();\n \n                 match opaque_ty.kind {\n-                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => self\n-                        .impl_trait_ty_to_ty(\n-                            def_id,\n-                            lifetimes,\n-                            matches!(\n-                                origin,\n-                                hir::OpaqueTyOrigin::FnReturn(..)\n-                                    | hir::OpaqueTyOrigin::AsyncFn(..)\n-                            ),\n-                        ),\n+                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => {\n+                        self.impl_trait_ty_to_ty(def_id, lifetimes, origin)\n+                    }\n                     ref i => bug!(\"`impl Trait` pointed to non-opaque type?? {:#?}\", i),\n                 }\n             }\n@@ -2705,7 +2698,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         def_id: DefId,\n         lifetimes: &[hir::GenericArg<'_>],\n-        replace_parent_lifetimes: bool,\n+        origin: OpaqueTyOrigin,\n     ) -> Ty<'tcx> {\n         debug!(\"impl_trait_ty_to_ty(def_id={:?}, lifetimes={:?})\", def_id, lifetimes);\n         let tcx = self.tcx();\n@@ -2735,7 +2728,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     // For `impl Trait` in the types of statics, constants,\n                     // locals and type aliases. These capture all parent\n                     // lifetimes, so they can use their identity subst.\n-                    GenericParamDefKind::Lifetime if replace_parent_lifetimes => {\n+                    GenericParamDefKind::Lifetime\n+                        if matches!(\n+                            origin,\n+                            hir::OpaqueTyOrigin::FnReturn(..) | hir::OpaqueTyOrigin::AsyncFn(..)\n+                        ) =>\n+                    {\n                         tcx.lifetimes.re_static.into()\n                     }\n                     _ => tcx.mk_param_from_def(param),"}, {"sha": "367cdcdcc061c41eb2a809d705a44e8d23708243", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -7,7 +7,6 @@\n #![feature(const_convert)]\n #![feature(const_cow_is_borrowed)]\n #![feature(const_heap)]\n-#![feature(const_intrinsic_copy)]\n #![feature(const_mut_refs)]\n #![feature(const_nonnull_slice_from_raw_parts)]\n #![feature(const_ptr_write)]"}, {"sha": "7c10ed65c4c4c2c32f373d999f03acf07851c523", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -2118,11 +2118,11 @@ pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -\n /// [`Vec::append`]: ../../std/vec/struct.Vec.html#method.append\n #[doc(alias = \"memcpy\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+#[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n #[inline]\n pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n     extern \"rust-intrinsic\" {\n-        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+        #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n         pub fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n     }\n \n@@ -2200,11 +2200,11 @@ pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: us\n /// ```\n #[doc(alias = \"memmove\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+#[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n #[inline]\n pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n     extern \"rust-intrinsic\" {\n-        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+        #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n         fn copy<T>(src: *const T, dst: *mut T, count: usize);\n     }\n "}, {"sha": "093c7d298734acb2719fb2a5dbaf68ad2e50a2f2", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -114,7 +114,6 @@\n #![feature(const_convert)]\n #![feature(const_inherent_unchecked_arith)]\n #![feature(const_int_unchecked_arith)]\n-#![feature(const_intrinsic_copy)]\n #![feature(const_intrinsic_forget)]\n #![feature(const_likely)]\n #![feature(const_maybe_uninit_uninit_array)]"}, {"sha": "74aa0d9c7bcb25740cd717d8c5abe45cf13efa1d", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -1199,7 +1199,7 @@ impl<T: ?Sized> *const T {\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy`]: crate::ptr::copy()\n-    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+    #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub const unsafe fn copy_to(self, dest: *mut T, count: usize)\n@@ -1218,7 +1218,7 @@ impl<T: ?Sized> *const T {\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n-    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+    #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub const unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)"}, {"sha": "8fb0bfbe2e31b59bf8964da0a3d1284d8d485493", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -1136,7 +1136,7 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n     // We are calling the intrinsics directly to avoid function calls in the generated code\n     // as `intrinsics::copy_nonoverlapping` is a wrapper function.\n     extern \"rust-intrinsic\" {\n-        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+        #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n         fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n     }\n \n@@ -1331,7 +1331,7 @@ pub const unsafe fn write<T>(dst: *mut T, src: T) {\n     // We are calling the intrinsics directly to avoid function calls in the generated code\n     // as `intrinsics::copy_nonoverlapping` is a wrapper function.\n     extern \"rust-intrinsic\" {\n-        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+        #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n         fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n     }\n "}, {"sha": "b988090f4bc4cecfe7bfd8dc867e97837700e18c", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -1311,7 +1311,7 @@ impl<T: ?Sized> *mut T {\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy`]: crate::ptr::copy()\n-    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+    #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline(always)]\n     pub const unsafe fn copy_to(self, dest: *mut T, count: usize)\n@@ -1330,7 +1330,7 @@ impl<T: ?Sized> *mut T {\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n-    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+    #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline(always)]\n     pub const unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n@@ -1349,7 +1349,7 @@ impl<T: ?Sized> *mut T {\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy`]: crate::ptr::copy()\n-    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+    #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline(always)]\n     pub const unsafe fn copy_from(self, src: *const T, count: usize)\n@@ -1368,7 +1368,7 @@ impl<T: ?Sized> *mut T {\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n-    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+    #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline(always)]\n     pub const unsafe fn copy_from_nonoverlapping(self, src: *const T, count: usize)"}, {"sha": "7e9d7d27101802b66e40d1ba1a8e9f10019aa7fc", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -84,7 +84,6 @@\n #![feature(const_option)]\n #![feature(const_option_ext)]\n #![feature(const_result)]\n-#![feature(const_intrinsic_copy)]\n #![feature(integer_atomics)]\n #![feature(int_roundings)]\n #![feature(slice_group_by)]"}, {"sha": "f6c1062e0fc6cee420a54df67690129bf5efb884", "filename": "src/test/codegen/debug-alignment.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/src%2Ftest%2Fcodegen%2Fdebug-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/src%2Ftest%2Fcodegen%2Fdebug-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebug-alignment.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -0,0 +1,8 @@\n+// Verifies that DWARF alignment is specified properly.\n+//\n+// compile-flags: -C debuginfo=2\n+#![crate_type = \"lib\"]\n+\n+// CHECK: !DIGlobalVariable\n+// CHECK: align: 32\n+pub static A: u32 = 1;"}, {"sha": "249bbb5991cc98dc6da6f19feff3bdb06b4bff36", "filename": "src/test/ui/consts/copy-intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -2,14 +2,14 @@\n \n // ignore-tidy-linelength\n #![feature(intrinsics, staged_api)]\n-#![feature(const_mut_refs, const_intrinsic_copy)]\n+#![feature(const_mut_refs)]\n use std::mem;\n \n extern \"rust-intrinsic\" {\n-    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+    #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n     fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n \n-    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+    #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n     fn copy<T>(src: *const T, dst: *mut T, count: usize);\n }\n "}, {"sha": "40ec65d51beecc8b988f0aad150d2354c1eb7c8a", "filename": "src/test/ui/consts/intrinsic_without_const_stab.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -1,8 +1,8 @@\n-#![feature(intrinsics, staged_api, const_intrinsic_copy)]\n+#![feature(intrinsics, staged_api)]\n #![stable(feature = \"core\", since = \"1.6.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+#[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n #[inline]\n pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n     // Const stability attributes are not inherited from parent items."}, {"sha": "2b0745b3c110ce216ce277904a96d2172d3e3563", "filename": "src/test/ui/consts/intrinsic_without_const_stab_fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab_fail.rs?ref=09d52bc5d4260bac8b9a2ea8ac7a07c5c72906f1", "patch": "@@ -1,12 +1,12 @@\n-#![feature(intrinsics, staged_api, const_intrinsic_copy)]\n+#![feature(intrinsics, staged_api)]\n #![stable(feature = \"core\", since = \"1.6.0\")]\n \n extern \"rust-intrinsic\" {\n     fn copy<T>(src: *const T, dst: *mut T, count: usize);\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+#[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n #[inline]\n pub const unsafe fn stuff<T>(src: *const T, dst: *mut T, count: usize) {\n     unsafe { copy(src, dst, count) } //~ ERROR cannot call non-const fn"}]}