{"sha": "16acc10bf9f0318d1d6e310a1fd23dd242811d10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YWNjMTBiZjlmMDMxOGQxZDZlMzEwYTFmZDIzZGQyNDI4MTFkMTA=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-28T03:51:28Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-28T03:51:28Z"}, "message": "Implement PartialOrd for TrieMap and TrieSet", "tree": {"sha": "7b1421ab1c78a64dd0e3c78f38909970ad428019", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b1421ab1c78a64dd0e3c78f38909970ad428019"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16acc10bf9f0318d1d6e310a1fd23dd242811d10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16acc10bf9f0318d1d6e310a1fd23dd242811d10", "html_url": "https://github.com/rust-lang/rust/commit/16acc10bf9f0318d1d6e310a1fd23dd242811d10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16acc10bf9f0318d1d6e310a1fd23dd242811d10/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79e9f14abf50eecb7d3c53f10ad900615bb2d397", "url": "https://api.github.com/repos/rust-lang/rust/commits/79e9f14abf50eecb7d3c53f10ad900615bb2d397", "html_url": "https://github.com/rust-lang/rust/commit/79e9f14abf50eecb7d3c53f10ad900615bb2d397"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "5d6a9080374e764f70e42da1b968d490d84c1e6b", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/16acc10bf9f0318d1d6e310a1fd23dd242811d10/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16acc10bf9f0318d1d6e310a1fd23dd242811d10/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=16acc10bf9f0318d1d6e310a1fd23dd242811d10", "patch": "@@ -93,6 +93,13 @@ impl<T: PartialEq> PartialEq for TrieMap<T> {\n \n impl<T: Eq> Eq for TrieMap<T> {}\n \n+impl<T: PartialOrd> PartialOrd for TrieMap<T> {\n+    #[inline]\n+    fn partial_cmp(&self, other: &TrieMap<T>) -> Option<Ordering> {\n+        iter::order::partial_cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl<T: Show> Show for TrieMap<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));\n@@ -517,7 +524,7 @@ impl<S: Writer, T: Hash<S>> Hash<S> for TrieMap<T> {\n /// set.clear();\n /// assert!(set.is_empty());\n /// ```\n-#[deriving(Clone, Hash, PartialEq, Eq)]\n+#[deriving(Clone, Hash, PartialEq, Eq, PartialOrd)]\n pub struct TrieSet {\n     map: TrieMap<()>\n }\n@@ -1309,6 +1316,38 @@ mod test_map {\n         assert!(a == b);\n     }\n \n+    #[test]\n+    fn test_lt() {\n+        let mut a = TrieMap::new();\n+        let mut b = TrieMap::new();\n+\n+        assert!(!(a < b) && !(b < a));\n+        assert!(b.insert(2u, 5i));\n+        assert!(a < b);\n+        assert!(a.insert(2, 7));\n+        assert!(!(a < b) && b < a);\n+        assert!(b.insert(1, 0));\n+        assert!(b < a);\n+        assert!(a.insert(0, 6));\n+        assert!(a < b);\n+        assert!(a.insert(6, 2));\n+        assert!(a < b && !(b < a));\n+    }\n+\n+    #[test]\n+    fn test_ord() {\n+        let mut a = TrieMap::new();\n+        let mut b = TrieMap::new();\n+\n+        assert!(a <= b && a >= b);\n+        assert!(a.insert(1u, 1i));\n+        assert!(a > b && a >= b);\n+        assert!(b < a && b <= a);\n+        assert!(b.insert(2, 2));\n+        assert!(b > a && b >= a);\n+        assert!(a < b && a <= b);\n+    }\n+\n     #[test]\n     fn test_hash() {\n       let mut x = TrieMap::new();\n@@ -1513,4 +1552,36 @@ mod test_set {\n \n         assert!(a.clone() == a);\n     }\n+\n+    #[test]\n+    fn test_lt() {\n+        let mut a = TrieSet::new();\n+        let mut b = TrieSet::new();\n+\n+        assert!(!(a < b) && !(b < a));\n+        assert!(b.insert(2u));\n+        assert!(a < b);\n+        assert!(a.insert(3u));\n+        assert!(!(a < b) && b < a);\n+        assert!(b.insert(1));\n+        assert!(b < a);\n+        assert!(a.insert(0));\n+        assert!(a < b);\n+        assert!(a.insert(6));\n+        assert!(a < b && !(b < a));\n+    }\n+\n+    #[test]\n+    fn test_ord() {\n+        let mut a = TrieSet::new();\n+        let mut b = TrieSet::new();\n+\n+        assert!(a <= b && a >= b);\n+        assert!(a.insert(1u));\n+        assert!(a > b && a >= b);\n+        assert!(b < a && b <= a);\n+        assert!(b.insert(2u));\n+        assert!(b > a && b >= a);\n+        assert!(a < b && a <= b);\n+    }\n }"}]}