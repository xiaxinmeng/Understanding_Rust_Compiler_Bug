{"sha": "97ed871fc15acee89a1d8606763b5ed5d885546a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZWQ4NzFmYzE1YWNlZTg5YTFkODYwNjc2M2I1ZWQ1ZDg4NTU0NmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-01-19T23:56:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-01-19T23:56:54Z"}, "message": "libcore: \"tag\" -> \"enum\"", "tree": {"sha": "8f3694f7b4cb8a6f39490db5a5f8a994c44e52cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f3694f7b4cb8a6f39490db5a5f8a994c44e52cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97ed871fc15acee89a1d8606763b5ed5d885546a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97ed871fc15acee89a1d8606763b5ed5d885546a", "html_url": "https://github.com/rust-lang/rust/commit/97ed871fc15acee89a1d8606763b5ed5d885546a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97ed871fc15acee89a1d8606763b5ed5d885546a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5a407b11bf01aa2a348010dffbbce2cf202d503", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a407b11bf01aa2a348010dffbbce2cf202d503", "html_url": "https://github.com/rust-lang/rust/commit/c5a407b11bf01aa2a348010dffbbce2cf202d503"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "95a62be3dcbaec976cfb6a9908332daf0be71595", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=97ed871fc15acee89a1d8606763b5ed5d885546a", "patch": "@@ -64,7 +64,7 @@ type port_id = int;\n           Channels may be duplicated and themselves transmitted \\\n           over other channels.\"\n )]\n-tag chan<T: send> {\n+enum chan<T: send> {\n     chan_t(task::task, port_id);\n }\n \n@@ -89,7 +89,7 @@ resource port_ptr<T: send>(po: *rustrt::rust_port) {\n           copied, both copies refer to the same port. \\\n           Ports may be associated with multiple <chan>s.\"\n )]\n-tag port<T: send> { port_t(@port_ptr<T>); }\n+enum port<T: send> { port_t(@port_ptr<T>); }\n \n #[doc(\n   brief = \"Sends data over a channel. The sent data is moved \\"}, {"sha": "1e48890cfff381ba527a5931f54ea2962ee7d4f7", "filename": "src/libcore/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=97ed871fc15acee89a1d8606763b5ed5d885546a", "patch": "@@ -1,7 +1,7 @@\n // Top-level, visible-everywhere definitions.\n \n // Export type option as a synonym for option::t and export the some and none\n-// tag constructors.\n+// enum constructors.\n \n import option::{some,  none};\n import option = option::t;"}, {"sha": "f928f5d18632486dc097a1cf52b50e5dde6a7925", "filename": "src/libcore/ctypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Fctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Fctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fctypes.rs?ref=97ed871fc15acee89a1d8606763b5ed5d885546a", "patch": "@@ -72,7 +72,7 @@ type uint32_t = u32;\n          but using pointers to this type when interoperating \\\n          with C void pointers can help in documentation.\"\n )]\n-tag void {\n+enum void {\n     // Making the only variant reference itself makes it impossible to\n     // construct. Not exporting it makes it impossible to destructure.\n     void_private(@void);"}, {"sha": "578f21cbe5c40f1773941306251ac20f01e906f8", "filename": "src/libcore/either.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=97ed871fc15acee89a1d8606763b5ed5d885546a", "patch": "@@ -10,7 +10,7 @@ Tag: t\n \n The either type\n */\n-tag t<T, U> {\n+enum t<T, U> {\n     /* Variant: left */\n     left(T);\n     /* Variant: right */"}, {"sha": "8a69a3c80704f7fb6a74d4e0bd5c0bfc533496c3", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=97ed871fc15acee89a1d8606763b5ed5d885546a", "patch": "@@ -39,9 +39,9 @@ import option::{some, none};\n \n // Functions used by the fmt extension at compile time\n mod ct {\n-    tag signedness { signed; unsigned; }\n-    tag caseness { case_upper; case_lower; }\n-    tag ty {\n+    enum signedness { signed; unsigned; }\n+    enum caseness { case_upper; case_lower; }\n+    enum ty {\n         ty_bool;\n         ty_str;\n         ty_char;\n@@ -53,14 +53,14 @@ mod ct {\n         ty_poly;\n         // FIXME: More types\n     }\n-    tag flag {\n+    enum flag {\n         flag_left_justify;\n         flag_left_zero_pad;\n         flag_space_for_sign;\n         flag_sign_always;\n         flag_alternate;\n     }\n-    tag count {\n+    enum count {\n         count_is(int);\n         count_is_param(int);\n         count_is_next_param;\n@@ -77,7 +77,7 @@ mod ct {\n \n \n     // A fragment of the output sequence\n-    tag piece { piece_string(str); piece_conv(conv); }\n+    enum piece { piece_string(str); piece_conv(conv); }\n     type error_fn = fn@(str) -> ! ;\n \n     fn parse_fmt_string(s: str, error: error_fn) -> [piece] {\n@@ -263,7 +263,7 @@ mod ct {\n // conditions can be evaluated at compile-time. For now though it's cleaner to\n // implement it this way, I think.\n mod rt {\n-    tag flag {\n+    enum flag {\n         flag_left_justify;\n         flag_left_zero_pad;\n         flag_space_for_sign;\n@@ -276,8 +276,8 @@ mod rt {\n         // comments in front::extfmt::make_flags\n         flag_none;\n     }\n-    tag count { count_is(int); count_implied; }\n-    tag ty { ty_default; ty_bits; ty_hex_upper; ty_hex_lower; ty_octal; }\n+    enum count { count_is(int); count_implied; }\n+    enum ty { ty_default; ty_bits; ty_hex_upper; ty_hex_lower; ty_octal; }\n \n     // FIXME: May not want to use a vector here for flags;\n     // instead just use a bool per flag\n@@ -391,7 +391,7 @@ mod rt {\n \n         ret str::unsafe_from_bytes(svec);\n     }\n-    tag pad_mode { pad_signed; pad_unsigned; pad_nozero; }\n+    enum pad_mode { pad_signed; pad_unsigned; pad_nozero; }\n     fn pad(cv: conv, s: str, mode: pad_mode) -> str {\n         let uwidth;\n         alt cv.width {"}, {"sha": "d45bda93dbba882348f0f1f055c1f6e63fd49e5d", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=97ed871fc15acee89a1d8606763b5ed5d885546a", "patch": "@@ -12,7 +12,7 @@ Tag: t\n \n The option type\n */\n-tag t<T> {\n+enum t<T> {\n     /* Variant: none */\n     none;\n     /* Variant: some */"}, {"sha": "cbfe7b1b4658a5b76bee31c0cdff9b8839a28a5f", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=97ed871fc15acee89a1d8606763b5ed5d885546a", "patch": "@@ -11,7 +11,7 @@ Tag: t\n \n The result type\n */\n-tag t<T, U> {\n+enum t<T, U> {\n     /*\n     Variant: ok\n "}, {"sha": "a099644985507dc24c55c2e38c5aab7dc428f01a", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=97ed871fc15acee89a1d8606763b5ed5d885546a", "patch": "@@ -3,7 +3,7 @@ Module: sys\n \n Misc low level stuff\n */\n-tag type_desc = {\n+enum type_desc = {\n     first_param: **ctypes::c_int,\n     size: ctypes::size_t,\n     align: ctypes::size_t"}, {"sha": "a1ed59d3e436ead1541285d9baa357080e85afeb", "filename": "src/libcore/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ed871fc15acee89a1d8606763b5ed5d885546a/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=97ed871fc15acee89a1d8606763b5ed5d885546a", "patch": "@@ -179,7 +179,7 @@ Tag: task_result\n \n Indicates the manner in which a task exited\n */\n-tag task_result {\n+enum task_result {\n     /* Variant: tr_success */\n     tr_success;\n     /* Variant: tr_failure */\n@@ -191,7 +191,7 @@ Tag: task_notification\n \n Message sent upon task exit to indicate normal or abnormal termination\n */\n-tag task_notification {\n+enum task_notification {\n     /* Variant: exit */\n     exit(task, task_result);\n }"}]}