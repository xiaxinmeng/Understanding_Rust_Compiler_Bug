{"sha": "a51006b8d2a1d61a1f1e52e0eb0e1e5ac8aaa183", "node_id": "C_kwDOAAsO6NoAKGE1MTAwNmI4ZDJhMWQ2MWExZjFlNTJlMGViMGUxZTVhYzhhYWExODM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-01T00:20:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-01T00:20:26Z"}, "message": "Rollup merge of #108555 - Zoxc:par-fix, r=cjgillot\n\nFix a race in the query system\n\nThis fixes an issue where in between the `job` removal and `complete` call the query neither has a job nor a result, allowing another thread to start executing it again.\n\nr? ``@cjgillot``", "tree": {"sha": "6ebf5d4cb44e7d452eaa6c4f2ac844065431483f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ebf5d4cb44e7d452eaa6c4f2ac844065431483f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a51006b8d2a1d61a1f1e52e0eb0e1e5ac8aaa183", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj/ppKCRBK7hj4Ov3rIwAATFkIAGrrcTpAP//ETntkguPjGwD1\nsbexCJrT2jUHJzz8LNQPwkybG/EDWDAPxLFooEx5NqvgZqwcgpksEOkI/6VHmDTb\nQTJvW+nIQJnFV+1mExgPgiHtNec0UNkjeY5gmgOATAxvC9JIRECyIwDa9tsMu+Nh\nj0hVuT2XW9Nqmkqu5fPdKkFbE9lpIjwGTR4xdLPWDjYs0SUIEjsziUQvEUT/zP8M\n7Ex0lLkoyaY1z0FjczTmlZjoLff3jrcwmNtXhwu7QOetod+7DeTzkwHyfj5ug84I\nB9/kMrwGDcWr7l0iiZv5NqCEHM5LwWG8ZzcfPflFdCp5pvmMkk3hkxxiYnQFt2w=\n=EWS2\n-----END PGP SIGNATURE-----\n", "payload": "tree 6ebf5d4cb44e7d452eaa6c4f2ac844065431483f\nparent 19604c2362c0b7687b32bf9ca442078564de1dab\nparent 10b08e3c9c935da0295fc57ac7dbad99778068e7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677630026 +0100\ncommitter GitHub <noreply@github.com> 1677630026 +0100\n\nRollup merge of #108555 - Zoxc:par-fix, r=cjgillot\n\nFix a race in the query system\n\nThis fixes an issue where in between the `job` removal and `complete` call the query neither has a job nor a result, allowing another thread to start executing it again.\n\nr? ``@cjgillot``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a51006b8d2a1d61a1f1e52e0eb0e1e5ac8aaa183", "html_url": "https://github.com/rust-lang/rust/commit/a51006b8d2a1d61a1f1e52e0eb0e1e5ac8aaa183", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a51006b8d2a1d61a1f1e52e0eb0e1e5ac8aaa183/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19604c2362c0b7687b32bf9ca442078564de1dab", "url": "https://api.github.com/repos/rust-lang/rust/commits/19604c2362c0b7687b32bf9ca442078564de1dab", "html_url": "https://github.com/rust-lang/rust/commit/19604c2362c0b7687b32bf9ca442078564de1dab"}, {"sha": "10b08e3c9c935da0295fc57ac7dbad99778068e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/10b08e3c9c935da0295fc57ac7dbad99778068e7", "html_url": "https://github.com/rust-lang/rust/commit/10b08e3c9c935da0295fc57ac7dbad99778068e7"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "5f003fa70e133b241911ac8b088cd33e4e6c7d3a", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a51006b8d2a1d61a1f1e52e0eb0e1e5ac8aaa183/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a51006b8d2a1d61a1f1e52e0eb0e1e5ac8aaa183/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=a51006b8d2a1d61a1f1e52e0eb0e1e5ac8aaa183", "patch": "@@ -25,7 +25,6 @@ use std::collections::hash_map::Entry;\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::mem;\n-use std::ptr;\n use thin_vec::ThinVec;\n \n use super::QueryConfig;\n@@ -250,13 +249,16 @@ where\n     where\n         C: QueryCache<Key = K>,\n     {\n-        // We can move out of `self` here because we `mem::forget` it below\n-        let key = unsafe { ptr::read(&self.key) };\n+        let key = self.key;\n         let state = self.state;\n \n         // Forget ourself so our destructor won't poison the query\n         mem::forget(self);\n \n+        // Mark as complete before we remove the job from the active state\n+        // so no other thread can re-execute this query.\n+        cache.complete(key, result, dep_node_index);\n+\n         let job = {\n             #[cfg(parallel_compiler)]\n             let mut lock = state.active.get_shard_by_value(&key).lock();\n@@ -267,7 +269,6 @@ where\n                 QueryResult::Poisoned => panic!(),\n             }\n         };\n-        cache.complete(key, result, dep_node_index);\n \n         job.signal_complete();\n     }"}]}