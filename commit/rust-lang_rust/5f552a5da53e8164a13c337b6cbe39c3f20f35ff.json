{"sha": "5f552a5da53e8164a13c337b6cbe39c3f20f35ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNTUyYTVkYTUzZTgxNjRhMTNjMzM3YjZjYmUzOWMzZjIwZjM1ZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-13T07:03:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-13T07:03:01Z"}, "message": "Auto merge of #26981 - wthrowe:div_docs, r=Gankro\n\nThis resolves #26845.\r\n\r\nI'm not entirely satisfied with the placement of the rounding discussion in the docs for the `Div` and `Rem` traits, but I couldn't come up with anywhere better to put it.  Suggestions are welcome.\r\n\r\nI didn't add any discussion of rounding to the `checked_div` (or rem) or `wrapping_div` documentation because those seem to make it pretty clear that they do the same thing as `Div`.", "tree": {"sha": "af54c4702de2ecf271b0f6f8cf89f1c91b591758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af54c4702de2ecf271b0f6f8cf89f1c91b591758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f552a5da53e8164a13c337b6cbe39c3f20f35ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f552a5da53e8164a13c337b6cbe39c3f20f35ff", "html_url": "https://github.com/rust-lang/rust/commit/5f552a5da53e8164a13c337b6cbe39c3f20f35ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f552a5da53e8164a13c337b6cbe39c3f20f35ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c044791d80ea0dc5c4b57b6030a67b69f8510239", "url": "https://api.github.com/repos/rust-lang/rust/commits/c044791d80ea0dc5c4b57b6030a67b69f8510239", "html_url": "https://github.com/rust-lang/rust/commit/c044791d80ea0dc5c4b57b6030a67b69f8510239"}, {"sha": "7824956effbfaccea5f6ce0b973c26cb58d241f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7824956effbfaccea5f6ce0b973c26cb58d241f9", "html_url": "https://github.com/rust-lang/rust/commit/7824956effbfaccea5f6ce0b973c26cb58d241f9"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "6413cc36d269bca158cdbce5acc25d7f44553252", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f552a5da53e8164a13c337b6cbe39c3f20f35ff/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f552a5da53e8164a13c337b6cbe39c3f20f35ff/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=5f552a5da53e8164a13c337b6cbe39c3f20f35ff", "patch": "@@ -459,15 +459,15 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Wrapping (modular) division. Computes `floor(self / other)`,\n+        /// Wrapping (modular) division. Computes `self / other`,\n         /// wrapping around at the boundary of the type.\n         ///\n         /// The only case where such wrapping can occur is when one\n         /// divides `MIN / -1` on a signed type (where `MIN` is the\n         /// negative minimal value for the type); this is equivalent\n         /// to `-MIN`, a positive value that is too large to represent\n         /// in the type. In such a case, this function returns `MIN`\n-        /// itself..\n+        /// itself.\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n         pub fn wrapping_div(self, rhs: Self) -> Self {\n@@ -1031,15 +1031,15 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Wrapping (modular) division. Computes `floor(self / other)`,\n+        /// Wrapping (modular) division. Computes `self / other`,\n         /// wrapping around at the boundary of the type.\n         ///\n         /// The only case where such wrapping can occur is when one\n         /// divides `MIN / -1` on a signed type (where `MIN` is the\n         /// negative minimal value for the type); this is equivalent\n         /// to `-MIN`, a positive value that is too large to represent\n         /// in the type. In such a case, this function returns `MIN`\n-        /// itself..\n+        /// itself.\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n         pub fn wrapping_div(self, rhs: Self) -> Self {"}, {"sha": "76d3c1df15998b8ddbdd996f4914689ca6c3e613", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5f552a5da53e8164a13c337b6cbe39c3f20f35ff/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f552a5da53e8164a13c337b6cbe39c3f20f35ff/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=5f552a5da53e8164a13c337b6cbe39c3f20f35ff", "patch": "@@ -351,8 +351,10 @@ pub trait Div<RHS=Self> {\n     fn div(self, rhs: RHS) -> Self::Output;\n }\n \n-macro_rules! div_impl {\n+macro_rules! div_impl_integer {\n     ($($t:ty)*) => ($(\n+        /// This operation rounds towards zero, truncating any\n+        /// fractional part of the exact result.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Div for $t {\n             type Output = $t;\n@@ -365,7 +367,23 @@ macro_rules! div_impl {\n     )*)\n }\n \n-div_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n+div_impl_integer! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n+\n+macro_rules! div_impl_float {\n+    ($($t:ty)*) => ($(\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl Div for $t {\n+            type Output = $t;\n+\n+            #[inline]\n+            fn div(self, other: $t) -> $t { self / other }\n+        }\n+\n+        forward_ref_binop! { impl Div, div for $t, $t }\n+    )*)\n+}\n+\n+div_impl_float! { f32 f64 }\n \n /// The `Rem` trait is used to specify the functionality of `%`.\n ///\n@@ -407,6 +425,8 @@ pub trait Rem<RHS=Self> {\n \n macro_rules! rem_impl {\n     ($($t:ty)*) => ($(\n+        /// This operation satisfies `n % d == n - (n / d) * d`.  The\n+        /// result has the same sign as the left operand.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Rem for $t {\n             type Output = $t;"}]}