{"sha": "d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZDcxMWRkOGY3YWQ1ODg1Mjk0YjhlMWYwMDA5YTIzZGMxZjhiMWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-10T16:55:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-10T16:55:39Z"}, "message": "Auto merge of #45169 - kennytm:rollup, r=kennytm\n\nRollup of 9 pull requests\n\n- Successful merges: #44775, #45089, #45095, #45099, #45101, #45108, #45116, #45135, #45146\n- Failed merges:", "tree": {"sha": "ef6ce1bea6c6353f996646a0ec57259e224c70de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef6ce1bea6c6353f996646a0ec57259e224c70de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "html_url": "https://github.com/rust-lang/rust/commit/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec016f80cf725a9c8a613cdcd2ac97588d5f9af2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec016f80cf725a9c8a613cdcd2ac97588d5f9af2", "html_url": "https://github.com/rust-lang/rust/commit/ec016f80cf725a9c8a613cdcd2ac97588d5f9af2"}, {"sha": "ce0a1cfa30a1b6480081204dd96dc6e8be5ae720", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0a1cfa30a1b6480081204dd96dc6e8be5ae720", "html_url": "https://github.com/rust-lang/rust/commit/ce0a1cfa30a1b6480081204dd96dc6e8be5ae720"}], "stats": {"total": 219, "additions": 142, "deletions": 77}, "files": [{"sha": "ebacc62b0fdda6d76c01fe999646ddca6b533496", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -39,7 +39,7 @@ The script accepts commands, flags, and arguments to determine what to do:\n   ```\n \n   If files are dirty that would normally be rebuilt from stage 0, that can be\n-  overidden using `--keep-stage 0`. Using `--keep-stage n` will skip all steps\n+  overridden using `--keep-stage 0`. Using `--keep-stage n` will skip all steps\n   that belong to stage n or earlier:\n \n   ```"}, {"sha": "8e3ee90207fb8a49b077f6b2f37cafa8623234d5", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -346,7 +346,7 @@ def set(key, value):\n     targets[target][0] = targets[target][0].replace(\"x86_64-unknown-linux-gnu\", target)\n \n # Here we walk through the constructed configuration we have from the parsed\n-# command line arguemnts. We then apply each piece of configuration by\n+# command line arguments. We then apply each piece of configuration by\n # basically just doing a `sed` to change the various configuration line to what\n # we've got configure.\n def to_toml(value):"}, {"sha": "680a0f5b2c03febe0f73663c7b7f476e469e1fb4", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -836,7 +836,7 @@ pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n ///\n /// See the `discriminant` function in this module for more information.\n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n-pub struct Discriminant<T>(u64, PhantomData<*const T>);\n+pub struct Discriminant<T>(u64, PhantomData<fn() -> T>);\n \n // N.B. These trait implementations cannot be derived because we don't want any bounds on T.\n "}, {"sha": "f55a1c81463f77ab0a8a6dd7c1946ae3c0c33a4a", "filename": "src/libcore/tests/mem.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fmem.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -121,3 +121,19 @@ fn test_transmute() {\n     }\n }\n \n+#[test]\n+#[allow(dead_code)]\n+fn test_discriminant_send_sync() {\n+    enum Regular {\n+        A,\n+        B(i32)\n+    }\n+    enum NotSendSync {\n+        A(*const i32)\n+    }\n+\n+    fn is_send_sync<T: Send + Sync>() { }\n+\n+    is_send_sync::<Discriminant<Regular>>();\n+    is_send_sync::<Discriminant<NotSendSync>>();\n+}"}, {"sha": "cf30966fa89715c2ff695069b5ca9f00321df21f", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -488,7 +488,7 @@ impl Literal {\n     pub fn string(string: &str) -> Literal {\n         let mut escaped = String::new();\n         for ch in string.chars() {\n-            escaped.extend(ch.escape_unicode());\n+            escaped.extend(ch.escape_debug());\n         }\n         Literal(token::Literal(token::Lit::Str_(Symbol::intern(&escaped)), None))\n     }"}, {"sha": "56d5f5ffa3f6c6abe2756878357433892b529e70", "filename": "src/librustc_data_structures/graph/mod.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -31,7 +31,7 @@\n //! be indexed by the direction (see the type `Direction`).\n \n use bitvec::BitVector;\n-use std::fmt::{Formatter, Error, Debug};\n+use std::fmt::Debug;\n use std::usize;\n use snapshot_vec::{SnapshotVec, SnapshotVecDelegate};\n \n@@ -48,6 +48,7 @@ pub struct Node<N> {\n     pub data: N,\n }\n \n+#[derive(Debug)]\n pub struct Edge<E> {\n     next_edge: [EdgeIndex; 2], // see module comment\n     source: NodeIndex,\n@@ -69,18 +70,6 @@ impl<N> SnapshotVecDelegate for Edge<N> {\n     fn reverse(_: &mut Vec<Edge<N>>, _: ()) {}\n }\n \n-impl<E: Debug> Debug for Edge<E> {\n-    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {\n-        write!(f,\n-               \"Edge {{ next_edge: [{:?}, {:?}], source: {:?}, target: {:?}, data: {:?} }}\",\n-               self.next_edge[0],\n-               self.next_edge[1],\n-               self.source,\n-               self.target,\n-               self.data)\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]\n pub struct NodeIndex(pub usize);\n "}, {"sha": "6b7a5b3af9669935ee6e27d9b029f0e842941d9c", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -1464,7 +1464,7 @@ impl<'tcx> ExplicitSelf<'tcx> {\n     /// declaration like `self: SomeType` into either `self`,\n     /// `&self`, `&mut self`, or `Box<self>`. We do this here\n     /// by some simple pattern matching. A more precise check\n-    /// is done later in `check_method_self_type()`.\n+    /// is done later in `check_method_receiver()`.\n     ///\n     /// Examples:\n     ///\n@@ -1475,7 +1475,7 @@ impl<'tcx> ExplicitSelf<'tcx> {\n     ///     fn method2(self: &T); // ExplicitSelf::ByValue\n     ///     fn method3(self: Box<&T>); // ExplicitSelf::ByBox\n     ///\n-    ///     // Invalid cases will be caught later by `check_method_self_type`:\n+    ///     // Invalid cases will be caught later by `check_method_receiver`:\n     ///     fn method_err1(self: &mut T); // ExplicitSelf::ByReference\n     /// }\n     /// ```"}, {"sha": "ce1a07b31b2ed0b01acdf897f6d68af2a34c45d3", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -919,7 +919,7 @@ impl<T> Drop for Sender<T> {\n #[stable(feature = \"mpsc_debug\", since = \"1.8.0\")]\n impl<T> fmt::Debug for Sender<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Sender {{ .. }}\")\n+        f.debug_struct(\"Sender\").finish()\n     }\n }\n \n@@ -1049,7 +1049,7 @@ impl<T> Drop for SyncSender<T> {\n #[stable(feature = \"mpsc_debug\", since = \"1.8.0\")]\n impl<T> fmt::Debug for SyncSender<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"SyncSender {{ .. }}\")\n+        f.debug_struct(\"SyncSender\").finish()\n     }\n }\n \n@@ -1551,7 +1551,7 @@ impl<T> Drop for Receiver<T> {\n #[stable(feature = \"mpsc_debug\", since = \"1.8.0\")]\n impl<T> fmt::Debug for Receiver<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Receiver {{ .. }}\")\n+        f.debug_struct(\"Receiver\").finish()\n     }\n }\n \n@@ -3009,22 +3009,4 @@ mod sync_tests {\n             repro()\n         }\n     }\n-\n-    #[test]\n-    fn fmt_debug_sender() {\n-        let (tx, _) = channel::<i32>();\n-        assert_eq!(format!(\"{:?}\", tx), \"Sender { .. }\");\n-    }\n-\n-    #[test]\n-    fn fmt_debug_recv() {\n-        let (_, rx) = channel::<i32>();\n-        assert_eq!(format!(\"{:?}\", rx), \"Receiver { .. }\");\n-    }\n-\n-    #[test]\n-    fn fmt_debug_sync_sender() {\n-        let (tx, _) = sync_channel::<i32>(1);\n-        assert_eq!(format!(\"{:?}\", tx), \"SyncSender { .. }\");\n-    }\n }"}, {"sha": "a9f3cea243f366c61e0abf759c474c95a00581ae", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -354,13 +354,13 @@ impl Iterator for Packets {\n \n impl fmt::Debug for Select {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Select {{ .. }}\")\n+        f.debug_struct(\"Select\").finish()\n     }\n }\n \n impl<'rx, T:Send+'rx> fmt::Debug for Handle<'rx, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Handle {{ .. }}\")\n+        f.debug_struct(\"Handle\").finish()\n     }\n }\n \n@@ -774,18 +774,4 @@ mod tests {\n             }\n         }\n     }\n-\n-    #[test]\n-    fn fmt_debug_select() {\n-        let sel = Select::new();\n-        assert_eq!(format!(\"{:?}\", sel), \"Select { .. }\");\n-    }\n-\n-    #[test]\n-    fn fmt_debug_handle() {\n-        let (_, rx) = channel::<i32>();\n-        let sel = Select::new();\n-        let handle = sel.handle(&rx);\n-        assert_eq!(format!(\"{:?}\", handle), \"Handle { .. }\");\n-    }\n }"}, {"sha": "eb507858b92b23f5bd8dd76f88add49e76a4650d", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -394,11 +394,18 @@ impl<T: ?Sized + Default> Default for Mutex<T> {\n impl<T: ?Sized + fmt::Debug> fmt::Debug for Mutex<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.try_lock() {\n-            Ok(guard) => write!(f, \"Mutex {{ data: {:?} }}\", &*guard),\n+            Ok(guard) => f.debug_struct(\"Mutex\").field(\"data\", &&*guard).finish(),\n             Err(TryLockError::Poisoned(err)) => {\n-                write!(f, \"Mutex {{ data: Poisoned({:?}) }}\", &**err.get_ref())\n+                f.debug_struct(\"Mutex\").field(\"data\", &&**err.get_ref()).finish()\n             },\n-            Err(TryLockError::WouldBlock) => write!(f, \"Mutex {{ <locked> }}\")\n+            Err(TryLockError::WouldBlock) => {\n+                struct LockedPlaceholder;\n+                impl fmt::Debug for LockedPlaceholder {\n+                    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { f.write_str(\"<locked>\") }\n+                }\n+\n+                f.debug_struct(\"Mutex\").field(\"data\", &LockedPlaceholder).finish()\n+            }\n         }\n     }\n }"}, {"sha": "5c49d6b58459ccb76988a2680372ee7ae826602a", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -428,11 +428,18 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for RwLock<T> {\n impl<T: ?Sized + fmt::Debug> fmt::Debug for RwLock<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.try_read() {\n-            Ok(guard) => write!(f, \"RwLock {{ data: {:?} }}\", &*guard),\n+            Ok(guard) => f.debug_struct(\"RwLock\").field(\"data\", &&*guard).finish(),\n             Err(TryLockError::Poisoned(err)) => {\n-                write!(f, \"RwLock {{ data: Poisoned({:?}) }}\", &**err.get_ref())\n+                f.debug_struct(\"RwLock\").field(\"data\", &&**err.get_ref()).finish()\n             },\n-            Err(TryLockError::WouldBlock) => write!(f, \"RwLock {{ <locked> }}\")\n+            Err(TryLockError::WouldBlock) => {\n+                struct LockedPlaceholder;\n+                impl fmt::Debug for LockedPlaceholder {\n+                    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { f.write_str(\"<locked>\") }\n+                }\n+\n+                f.debug_struct(\"RwLock\").field(\"data\", &LockedPlaceholder).finish()\n+            }\n         }\n     }\n }"}, {"sha": "ce43ec6d9abf585f70b910403824a59555e70762", "filename": "src/libstd/sys_common/remutex.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibstd%2Fsys_common%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibstd%2Fsys_common%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fremutex.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -116,11 +116,18 @@ impl<T> Drop for ReentrantMutex<T> {\n impl<T: fmt::Debug + 'static> fmt::Debug for ReentrantMutex<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.try_lock() {\n-            Ok(guard) => write!(f, \"ReentrantMutex {{ data: {:?} }}\", &*guard),\n+            Ok(guard) => f.debug_struct(\"ReentrantMutex\").field(\"data\", &*guard).finish(),\n             Err(TryLockError::Poisoned(err)) => {\n-                write!(f, \"ReentrantMutex {{ data: Poisoned({:?}) }}\", &**err.get_ref())\n+                f.debug_struct(\"ReentrantMutex\").field(\"data\", &**err.get_ref()).finish()\n             },\n-            Err(TryLockError::WouldBlock) => write!(f, \"ReentrantMutex {{ <locked> }}\")\n+            Err(TryLockError::WouldBlock) => {\n+                struct LockedPlaceholder;\n+                impl fmt::Debug for LockedPlaceholder {\n+                    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { f.write_str(\"<locked>\") }\n+                }\n+\n+                f.debug_struct(\"ReentrantMutex\").field(\"data\", &LockedPlaceholder).finish()\n+            }\n         }\n     }\n }"}, {"sha": "ff020445715d4511263fe8f70b95915c2a289bd5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -2890,17 +2890,30 @@ impl<'a> Parser<'a> {\n \n                 match self.parse_path(PathStyle::Expr) {\n                     Ok(path) => {\n+                        let (op_noun, op_verb) = match self.token {\n+                            token::Lt => (\"comparison\", \"comparing\"),\n+                            token::BinOp(token::Shl) => (\"shift\", \"shifting\"),\n+                            _ => {\n+                                // We can end up here even without `<` being the next token, for\n+                                // example because `parse_ty_no_plus` returns `Err` on keywords,\n+                                // but `parse_path` returns `Ok` on them due to error recovery.\n+                                // Return original error and parser state.\n+                                mem::replace(self, parser_snapshot_after_type);\n+                                return Err(type_err);\n+                            }\n+                        };\n+\n                         // Successfully parsed the type path leaving a `<` yet to parse.\n                         type_err.cancel();\n \n                         // Report non-fatal diagnostics, keep `x as usize` as an expression\n                         // in AST and continue parsing.\n                         let msg = format!(\"`<` is interpreted as a start of generic \\\n-                                           arguments for `{}`, not a comparison\", path);\n+                                           arguments for `{}`, not a {}\", path, op_noun);\n                         let mut err = self.sess.span_diagnostic.struct_span_err(self.span, &msg);\n                         err.span_label(self.look_ahead_span(1).to(parser_snapshot_after_type.span),\n                                        \"interpreted as generic arguments\");\n-                        err.span_label(self.span, \"not interpreted as comparison\");\n+                        err.span_label(self.span, format!(\"not interpreted as {}\", op_noun));\n \n                         let expr = mk_expr(self, P(Ty {\n                             span: path.span,\n@@ -2911,7 +2924,7 @@ impl<'a> Parser<'a> {\n                         let expr_str = self.sess.codemap().span_to_snippet(expr.span)\n                                                 .unwrap_or(pprust::expr_to_string(&expr));\n                         err.span_suggestion(expr.span,\n-                                            \"try comparing the casted value\",\n+                                            &format!(\"try {} the casted value\", op_verb),\n                                             format!(\"({})\", expr_str));\n                         err.emit();\n "}, {"sha": "d30d79ece15c73cf62d566b10cc74dff87d18e11", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -339,8 +339,11 @@ impl serialize::UseSpecializedDecodable for Span {\n }\n \n fn default_span_debug(span: Span, f: &mut fmt::Formatter) -> fmt::Result {\n-    write!(f, \"Span {{ lo: {:?}, hi: {:?}, ctxt: {:?} }}\",\n-           span.lo(), span.hi(), span.ctxt())\n+    f.debug_struct(\"Span\")\n+        .field(\"lo\", &span.lo())\n+        .field(\"hi\", &span.hi())\n+        .field(\"ctxt\", &span.ctxt())\n+        .finish()\n }\n \n impl fmt::Debug for Span {"}, {"sha": "6a6d6f90b2e69acab3553106cd1959620dcd7118", "filename": "src/test/codegen/float_math.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Fcodegen%2Ffloat_math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Fcodegen%2Ffloat_math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffloat_math.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -19,7 +19,7 @@ use std::intrinsics::{fadd_fast, fsub_fast, fmul_fast, fdiv_fast, frem_fast};\n #[no_mangle]\n pub fn add(x: f32, y: f32) -> f32 {\n // CHECK: fadd float\n-// CHECK-NOT fast\n+// CHECK-NOT: fast\n     x + y\n }\n "}, {"sha": "914632e96ba316569dbb52f5e733b03bbdd4bbfe", "filename": "src/test/incremental/macro_export.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Fincremental%2Fmacro_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Fincremental%2Fmacro_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fmacro_export.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Zincremental=tmp/cfail-tests/incr_comp_with_macro_export\n+// revisions: cfail1 cfail2 cfail3\n // must-compile-successfully\n \n-\n // This test case makes sure that we can compile with incremental compilation\n // enabled when there are macros exported from this crate. (See #37756)\n ", "previous_filename": "src/test/compile-fail/incr_comp_with_macro_export.rs"}, {"sha": "5ea96daa3ef85c90cc5dfce536f1e9f444cbf166", "filename": "src/test/run-make/target-specs/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -5,5 +5,5 @@ all:\n \t$(RUSTC) foo.rs --target=my-invalid-platform.json 2>&1 | grep -q \"Error loading target specification\"\n \t$(RUSTC) foo.rs --target=my-incomplete-platform.json 2>&1 | grep 'Field llvm-target'\n \tRUST_TARGET_PATH=. $(RUSTC) foo.rs --target=my-awesome-platform --crate-type=lib --emit=asm\n-\tRUST_TARGET_PATH=. $(RUSTC) foo.rs --target=x86_64-unknown-linux-gnu --crate-type=lib --emit=asm\n+\tRUST_TARGET_PATH=. $(RUSTC) foo.rs --target=my-x86_64-unknown-linux-gnu-platform --crate-type=lib --emit=asm\n \t$(RUSTC) -Z unstable-options --target=my-awesome-platform.json --print target-spec-json > $(TMPDIR)/test-platform.json && $(RUSTC) -Z unstable-options --target=$(TMPDIR)/test-platform.json --print target-spec-json | diff -q $(TMPDIR)/test-platform.json -"}, {"sha": "3ae01d72fcc18c4e0f617ef535ec99b81b4f38f8", "filename": "src/test/run-make/target-specs/my-x86_64-unknown-linux-gnu-platform.json", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Frun-make%2Ftarget-specs%2Fmy-x86_64-unknown-linux-gnu-platform.json", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Frun-make%2Ftarget-specs%2Fmy-x86_64-unknown-linux-gnu-platform.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2Fmy-x86_64-unknown-linux-gnu-platform.json?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -1,6 +1,6 @@\n {\n     \"pre-link-args\": [\"-m64\"],\n-    \"data-layout\": \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128\",\n+    \"data-layout\": \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\",\n     \"linker-flavor\": \"gcc\",\n     \"llvm-target\": \"x86_64-unknown-linux-gnu\",\n     \"target-endian\": \"little\",", "previous_filename": "src/test/run-make/target-specs/x86_64-unknown-linux-gnu.json"}, {"sha": "c8e0cd1763ffa14acd62c441eb3d56ac850f9524", "filename": "src/test/ui/issue-22644.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Fui%2Fissue-22644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Fui%2Fissue-22644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -35,5 +35,7 @@ fn main() {\n                    <\n                    5);\n \n+    println!(\"{}\", a as usize << long_name);\n+\n     println!(\"{}\", a: &mut 4);\n }"}, {"sha": "f4967c4803bee28b8a01fc5bd1fa1f111deb913b", "filename": "src/test/ui/issue-22644.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Fui%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Fui%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.stderr?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -76,9 +76,18 @@ help: try comparing the casted value\n 33 | \n  ...\n \n+error: `<` is interpreted as a start of generic arguments for `usize`, not a shift\n+  --> $DIR/issue-22644.rs:38:31\n+   |\n+38 |     println!(\"{}\", a as usize << long_name);\n+   |                    ---------- ^^ --------- interpreted as generic arguments\n+   |                    |          |\n+   |                    |          not interpreted as shift\n+   |                    help: try shifting the casted value: `(a as usize)`\n+\n error: expected type, found `4`\n-  --> $DIR/issue-22644.rs:38:28\n+  --> $DIR/issue-22644.rs:40:28\n    |\n-38 |     println!(\"{}\", a: &mut 4);\n+40 |     println!(\"{}\", a: &mut 4);\n    |                            ^ expecting a type here because of type ascription\n "}, {"sha": "abf572118fc68ce3fca4cab7d7d81bc8e89d70e8", "filename": "src/test/ui/issue-44406.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Fui%2Fissue-44406.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Fui%2Fissue-44406.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44406.rs?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! foo {\n+    ($rest: tt) => {\n+        bar(baz: $rest)\n+    }\n+}\n+\n+fn main() {\n+    foo!(true);\n+}"}, {"sha": "e07face24bab7b0c4acfd1dfd4e8693e64e5a208", "filename": "src/test/ui/issue-44406.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Fui%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f/src%2Ftest%2Fui%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44406.stderr?ref=d6d711dd8f7ad5885294b8e1f0009a23dc1f8b1f", "patch": "@@ -0,0 +1,26 @@\n+error: expected identifier, found keyword `true`\n+  --> $DIR/issue-44406.rs:18:10\n+   |\n+18 |     foo!(true);\n+   |          ^^^^\n+\n+error: expected type, found keyword `true`\n+  --> $DIR/issue-44406.rs:18:10\n+   |\n+13 |         bar(baz: $rest)\n+   |                - help: did you mean to use `;` here?\n+...\n+18 |     foo!(true);\n+   |          ^^^^ expecting a type here because of type ascription\n+\n+error: expected one of `!`, `&&`, `&`, `(`, `*`, `.`, `;`, `<`, `?`, `[`, `_`, `extern`, `fn`, `for`, `impl`, `unsafe`, `}`, an operator, or lifetime, found `true`\n+  --> $DIR/issue-44406.rs:18:10\n+   |\n+13 |         bar(baz: $rest)\n+   |                 - expected one of 19 possible tokens here\n+...\n+18 |     foo!(true);\n+   |          ^^^^ unexpected token\n+\n+error: aborting due to 3 previous errors\n+"}]}