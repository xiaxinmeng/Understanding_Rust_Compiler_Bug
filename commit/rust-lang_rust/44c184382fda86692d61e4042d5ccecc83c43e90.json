{"sha": "44c184382fda86692d61e4042d5ccecc83c43e90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YzE4NDM4MmZkYTg2NjkyZDYxZTQwNDJkNWNjZWNjODNjNDNlOTA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-09-16T15:27:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-09-23T10:59:46Z"}, "message": "Add TransCrate trait", "tree": {"sha": "619f7c6765a8602d1cdc6e18861bf8d7a4192948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/619f7c6765a8602d1cdc6e18861bf8d7a4192948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44c184382fda86692d61e4042d5ccecc83c43e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44c184382fda86692d61e4042d5ccecc83c43e90", "html_url": "https://github.com/rust-lang/rust/commit/44c184382fda86692d61e4042d5ccecc83c43e90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44c184382fda86692d61e4042d5ccecc83c43e90/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89af6d5c8bafeb30971a2525d3973ef4f6124099", "url": "https://api.github.com/repos/rust-lang/rust/commits/89af6d5c8bafeb30971a2525d3973ef4f6124099", "html_url": "https://github.com/rust-lang/rust/commit/89af6d5c8bafeb30971a2525d3973ef4f6124099"}], "stats": {"total": 387, "additions": 337, "deletions": 50}, "files": [{"sha": "693bf5b2619fffde28747a3490c1f6b012d06872", "filename": "src/Cargo.lock", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44c184382fda86692d61e4042d5ccecc83c43e90/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/44c184382fda86692d61e4042d5ccecc83c43e90/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=44c184382fda86692d61e4042d5ccecc83c43e90", "patch": "@@ -1575,6 +1575,7 @@ dependencies = [\n  \"rustc_resolve 0.0.0\",\n  \"rustc_save_analysis 0.0.0\",\n  \"rustc_trans 0.0.0\",\n+ \"rustc_trans_traits 0.0.0\",\n  \"rustc_trans_utils 0.0.0\",\n  \"rustc_typeck 0.0.0\",\n  \"serialize 0.0.0\",\n@@ -1769,12 +1770,23 @@ dependencies = [\n  \"rustc_incremental 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n  \"rustc_platform_intrinsics 0.0.0\",\n+ \"rustc_trans_traits 0.0.0\",\n  \"rustc_trans_utils 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_trans_traits\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc 0.0.0\",\n+ \"rustc_back 0.0.0\",\n+ \"rustc_incremental 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_trans_utils\"\n version = \"0.0.0\""}, {"sha": "6399f3ad2687e87c762b993851cb19065345ac07", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=44c184382fda86692d61e4042d5ccecc83c43e90", "patch": "@@ -33,6 +33,7 @@ rustc_resolve = { path = \"../librustc_resolve\" }\n rustc_save_analysis = { path = \"../librustc_save_analysis\" }\n rustc_trans = { path = \"../librustc_trans\", optional = true }\n rustc_trans_utils = { path = \"../librustc_trans_utils\" }\n+rustc_trans_traits = { path = \"../librustc_trans_traits\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "9aab169023c95370a4e014547e68a7fb2d857d24", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=44c184382fda86692d61e4042d5ccecc83c43e90", "patch": "@@ -34,15 +34,16 @@ use rustc_incremental;\n use rustc_resolve::{MakeGlobMap, Resolver};\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::{self, CStore};\n-use rustc_trans::back::write;\n use rustc_trans as trans;\n+use rustc_trans_traits::TransCrate;\n use rustc_typeck as typeck;\n use rustc_privacy;\n use rustc_plugin::registry::Registry;\n use rustc_plugin as plugin;\n use rustc_passes::{ast_validation, no_asm, loops, consts, static_recursion, hir_stats};\n use rustc_const_eval::{self, check_match};\n use super::Compilation;\n+use ::DefaultTransCrate;\n \n use serialize::json;\n \n@@ -76,7 +77,6 @@ pub fn compile_input(sess: &Session,\n                      output: &Option<PathBuf>,\n                      addl_plugins: Option<Vec<String>>,\n                      control: &CompileController) -> CompileResult {\n-    use rustc_trans::back::write::OngoingCrateTranslation;\n     use rustc::session::config::CrateType;\n \n     macro_rules! controller_entry_point {\n@@ -122,7 +122,7 @@ pub fn compile_input(sess: &Session,\n     // We need nested scopes here, because the intermediate results can keep\n     // large chunks of memory alive and we want to free them as soon as\n     // possible to keep the peak memory usage low\n-    let (outputs, trans, dep_graph): (OutputFilenames, OngoingCrateTranslation, DepGraph) = {\n+    let (outputs, trans, dep_graph) = {\n         let krate = match phase_1_parse_input(control, sess, input) {\n             Ok(krate) => krate,\n             Err(mut parse_error) => {\n@@ -251,7 +251,7 @@ pub fn compile_input(sess: &Session,\n                 tcx.print_debug_stats();\n             }\n \n-            let trans = phase_4_translate_to_llvm(tcx, rx);\n+            let trans = phase_4_translate_to_llvm::<DefaultTransCrate>(tcx, rx);\n \n             if log_enabled!(::log::LogLevel::Info) {\n                 println!(\"Post-trans\");\n@@ -285,15 +285,15 @@ pub fn compile_input(sess: &Session,\n             sess.code_stats.borrow().print_type_sizes();\n         }\n \n-        let (phase5_result, trans) = phase_5_run_llvm_passes(sess, &dep_graph, trans);\n+        let (phase5_result, trans) = phase_5_run_llvm_passes::<DefaultTransCrate>(sess, &dep_graph, trans);\n \n         controller_entry_point!(after_llvm,\n                                 sess,\n                                 CompileState::state_after_llvm(input, sess, outdir, output, &trans),\n                                 phase5_result);\n         phase5_result?;\n \n-        phase_6_link_output(sess, &trans, &outputs);\n+        phase_6_link_output::<DefaultTransCrate>(sess, &trans, &outputs);\n \n         // Now that we won't touch anything in the incremental compilation directory\n         // any more, we can finalize it (which involves renaming it)\n@@ -972,7 +972,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     mir::provide(&mut local_providers);\n     reachable::provide(&mut local_providers);\n     rustc_privacy::provide(&mut local_providers);\n-    trans::provide_local(&mut local_providers);\n+    DefaultTransCrate::provide_local(&mut local_providers);\n     typeck::provide(&mut local_providers);\n     ty::provide(&mut local_providers);\n     traits::provide(&mut local_providers);\n@@ -984,7 +984,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     let mut extern_providers = ty::maps::Providers::default();\n     cstore::provide(&mut extern_providers);\n-    trans::provide_extern(&mut extern_providers);\n+    DefaultTransCrate::provide_extern(&mut extern_providers);\n     ty::provide_extern(&mut extern_providers);\n     traits::provide_extern(&mut extern_providers);\n     // FIXME(eddyb) get rid of this once we replace const_eval with miri.\n@@ -1130,9 +1130,9 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n /// Run the translation phase to LLVM, after which the AST and analysis can\n /// be discarded.\n-pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+pub fn phase_4_translate_to_llvm<'a, 'tcx, T: TransCrate>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            rx: mpsc::Receiver<Box<Any + Send>>)\n-                                           -> write::OngoingCrateTranslation {\n+                                           -> <T as TransCrate>::OngoingCrateTranslation {\n     let time_passes = tcx.sess.time_passes();\n \n     time(time_passes,\n@@ -1141,9 +1141,8 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let translation =\n         time(time_passes, \"translation\", move || {\n-            trans::trans_crate(tcx, rx)\n+            T::trans_crate(tcx, rx)\n         });\n-\n     if tcx.sess.profile_queries() {\n         profile::dump(\"profile_queries\".to_string())\n     }\n@@ -1153,15 +1152,14 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n /// Run LLVM itself, producing a bitcode file, assembly file or object file\n /// as a side effect.\n-#[cfg(feature=\"llvm\")]\n-pub fn phase_5_run_llvm_passes(sess: &Session,\n+pub fn phase_5_run_llvm_passes<T: TransCrate>(sess: &Session,\n                                dep_graph: &DepGraph,\n-                               trans: write::OngoingCrateTranslation)\n-                               -> (CompileResult, trans::CrateTranslation) {\n-    let trans = trans.join(sess, dep_graph);\n+                               trans: <T as TransCrate>::OngoingCrateTranslation)\n+                               -> (CompileResult, <T as TransCrate>::TranslatedCrate) {\n+    let trans = T::join_trans(trans, sess, dep_graph);\n \n     if sess.opts.debugging_opts.incremental_info {\n-        write::dump_incremental_data(&trans);\n+        T::dump_incremental_data(&trans);\n     }\n \n     time(sess.time_passes(),\n@@ -1174,14 +1172,11 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n /// Run the linker on any artifacts that resulted from the LLVM run.\n /// This should produce either a finished executable or library.\n #[cfg(feature=\"llvm\")]\n-pub fn phase_6_link_output(sess: &Session,\n-                           trans: &trans::CrateTranslation,\n+pub fn phase_6_link_output<T: TransCrate>(sess: &Session,\n+                           trans: &<T as TransCrate>::TranslatedCrate,\n                            outputs: &OutputFilenames) {\n     time(sess.time_passes(), \"linking\", || {\n-        ::rustc_trans::back::link::link_binary(sess,\n-                                               trans,\n-                                               outputs,\n-                                               &trans.crate_name.as_str())\n+        T::link_binary(sess, trans, outputs)\n     });\n }\n "}, {"sha": "fda738db85fd81d42995ff2a3ae4da3b40c1bc8b", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 115, "deletions": 25, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=44c184382fda86692d61e4042d5ccecc83c43e90", "patch": "@@ -25,9 +25,7 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(set_stdio)]\n \n-#[cfg(not(feature=\"llvm\"))]\n extern crate ar;\n-#[cfg(not(feature=\"llvm\"))]\n extern crate flate2;\n extern crate arena;\n extern crate getopts;\n@@ -54,6 +52,7 @@ extern crate rustc_save_analysis;\n #[cfg(feature=\"llvm\")]\n extern crate rustc_trans;\n extern crate rustc_trans_utils;\n+extern crate rustc_trans_traits;\n extern crate rustc_typeck;\n extern crate serialize;\n #[macro_use]\n@@ -79,6 +78,7 @@ use rustc::middle::cstore::CrateStore;\n use rustc_metadata::locator;\n use rustc_metadata::cstore::CStore;\n use rustc::util::common::{time, ErrorReported};\n+use rustc_trans_traits::TransCrate;\n \n use serialize::json::ToJson;\n \n@@ -155,11 +155,10 @@ pub fn run<F>(run_compiler: F) -> isize\n }\n \n #[cfg(not(feature=\"llvm\"))]\n-pub use no_llvm_metadata_loader::NoLLvmMetadataLoader as MetadataLoader;\n+pub use trans_metadata_only::MetadataOnlyTransCrate as DefaultTransCrate;\n #[cfg(feature=\"llvm\")]\n-pub use rustc_trans::LlvmMetadataLoader as MetadataLoader;\n+pub use rustc_trans::LlvmTransCrate as DefaultTransCrate;\n \n-#[cfg(not(feature=\"llvm\"))]\n mod no_llvm_metadata_loader {\n     extern crate owning_ref;\n \n@@ -172,9 +171,9 @@ mod no_llvm_metadata_loader {\n     use ar::Archive;\n     use self::owning_ref::{OwningRef, ErasedBoxRef};\n \n-    pub struct NoLLvmMetadataLoader;\n+    pub struct NoLlvmMetadataLoader;\n \n-    impl MetadataLoaderTrait for NoLLvmMetadataLoader {\n+    impl MetadataLoaderTrait for NoLlvmMetadataLoader {\n         fn get_rlib_metadata(\n             &self,\n             _: &Target,\n@@ -210,40 +209,131 @@ mod no_llvm_metadata_loader {\n     }\n }\n \n-#[cfg(not(feature=\"llvm\"))]\n-mod rustc_trans {\n-    use syntax_pos::symbol::Symbol;\n+mod trans_metadata_only {\n+    use std::io::prelude::*;\n+    use std::io::Cursor;\n+    use std::fs::File;\n+\n+    use ar::{Builder, Header};\n+    use flate2::Compression;\n+    use flate2::write::DeflateEncoder;\n+\n+    use syntax::symbol::Symbol;\n+    use rustc::hir::def_id::LOCAL_CRATE;\n     use rustc::session::Session;\n-    use rustc::session::config::{PrintRequest, OutputFilenames};\n+    use rustc::session::config::{OutputFilenames, CrateType};\n     use rustc::ty::{TyCtxt, CrateAnalysis};\n     use rustc::ty::maps::Providers;\n+    use rustc::middle::cstore::{MetadataLoader, EncodedMetadata};\n+    use rustc::dep_graph::DepGraph;\n     use rustc_incremental::IncrementalHashesMap;\n+    use rustc_trans_utils::find_exported_symbols;\n+    use rustc_trans_utils::link::{out_filename, build_link_meta};\n+    use rustc_trans_traits::TransCrate;\n+\n+    #[allow(dead_code)]\n+    pub struct MetadataOnlyTransCrate;\n+    pub struct OngoingCrateTranslation {\n+        metadata: EncodedMetadata,\n+        metadata_version: Vec<u8>,\n+        crate_name: Symbol,\n+    }\n+    pub struct TranslatedCrate(OngoingCrateTranslation);\n+\n+    impl MetadataOnlyTransCrate {\n+        #[allow(dead_code)]\n+        pub fn new(/*_sess: &Session*/) -> Self {\n+            MetadataOnlyTransCrate\n+        }\n+    }\n+\n+    impl TransCrate for MetadataOnlyTransCrate {\n+        type MetadataLoader = ::no_llvm_metadata_loader::NoLlvmMetadataLoader;\n+        type OngoingCrateTranslation = OngoingCrateTranslation;\n+        type TranslatedCrate = TranslatedCrate;\n+\n+        fn metadata_loader() -> Box<MetadataLoader> {\n+            box ::no_llvm_metadata_loader::NoLlvmMetadataLoader\n+        }\n+\n+        fn provide(_providers: &mut Providers) {}\n+\n+        fn trans_crate<'a, 'tcx>(\n+            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+            analysis: CrateAnalysis,\n+            incr_hashes_map: IncrementalHashesMap,\n+            _output_filenames: &OutputFilenames\n+        ) -> Self::OngoingCrateTranslation {\n+            let link_meta = build_link_meta(&incr_hashes_map);\n+            let exported_symbols = find_exported_symbols(tcx, &analysis.reachable);\n+            let (metadata, _hashes) = tcx.encode_metadata(&link_meta, &exported_symbols);\n+\n+            OngoingCrateTranslation {\n+                metadata: metadata,\n+                metadata_version: tcx.metadata_encoding_version().to_vec(),\n+                crate_name: tcx.crate_name(LOCAL_CRATE),\n+            }\n+        }\n \n-    use self::back::write::OngoingCrateTranslation;\n+        fn join_trans(\n+            trans: Self::OngoingCrateTranslation,\n+            _sess: &Session,\n+            _dep_graph: &DepGraph,\n+        ) -> Self::TranslatedCrate {\n+            TranslatedCrate(trans)\n+        }\n+\n+        fn link_binary(sess: &Session,\n+                       trans: &Self::TranslatedCrate,\n+                       outputs: &OutputFilenames) {\n+            for &crate_type in sess.opts.crate_types.iter() {\n+                if crate_type != CrateType::CrateTypeRlib &&\n+                   crate_type != CrateType::CrateTypeDylib {\n+                    continue;\n+                }\n+                let output_name =\n+                    out_filename(sess, crate_type, &outputs, &trans.0.crate_name.as_str());\n+                let mut compressed = trans.0.metadata_version.clone();\n+                let metadata = if crate_type == CrateType::CrateTypeDylib {\n+                    DeflateEncoder::new(&mut compressed, Compression::Fast)\n+                        .write_all(&trans.0.metadata.raw_data).unwrap();\n+                    &compressed\n+                } else {\n+                    &trans.0.metadata.raw_data\n+                };\n+                let mut builder = Builder::new(File::create(&output_name).unwrap());\n+                let header = Header::new(\n+                    \"rust.metadata.bin\".to_string(),\n+                    metadata.len() as u64\n+                );\n+                builder\n+                    .append(&header, Cursor::new(metadata))\n+                    .unwrap();\n+            }\n+        }\n+\n+        fn dump_incremental_data(_trans: &Self::TranslatedCrate) {}\n+    }\n+}\n+\n+#[cfg(not(feature=\"llvm\"))]\n+mod rustc_trans {\n+    use syntax_pos::symbol::Symbol;\n+    use rustc::session::Session;\n+    use rustc::session::config::PrintRequest;\n+    pub use trans_metadata_only::MetadataOnlyTransCrate as LlvmTransCrate;\n \n     pub fn init(_sess: &Session) {}\n     pub fn enable_llvm_debug() {}\n-    pub fn provide(_providers: &mut Providers) {}\n     pub fn print_version() {}\n     pub fn print_passes() {}\n     pub fn print(_req: PrintRequest, _sess: &Session) {}\n     pub fn target_features(_sess: &Session) -> Vec<Symbol> { vec![] }\n \n-    pub fn trans_crate<'a, 'tcx>(\n-        _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        _analysis: CrateAnalysis,\n-        _incr_hashes_map: IncrementalHashesMap,\n-        _output_filenames: &OutputFilenames\n-    ) -> OngoingCrateTranslation {\n-        OngoingCrateTranslation(())\n-    }\n-\n     pub struct CrateTranslation(());\n \n     pub mod back {\n         pub mod write {\n-            pub struct OngoingCrateTranslation(pub (in ::rustc_trans) ());\n-\n             pub const RELOC_MODEL_ARGS: [(&'static str, ()); 0] = [];\n             pub const CODE_GEN_MODEL_ARGS: [(&'static str, ()); 0] = [];\n         }\n@@ -297,7 +387,7 @@ pub fn run_compiler<'a>(args: &[String],\n         },\n     };\n \n-    let cstore = Rc::new(CStore::new(box ::MetadataLoader));\n+    let cstore = Rc::new(CStore::new(DefaultTransCrate::metadata_loader()));\n \n     let loader = file_loader.unwrap_or(box RealFileLoader);\n     let codemap = Rc::new(CodeMap::with_file_loader(loader, sopts.file_path_mapping()));"}, {"sha": "cadd63f31f5b45323e0eb56c13ad47ab49bf0dbc", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=44c184382fda86692d61e4042d5ccecc83c43e90", "patch": "@@ -105,7 +105,7 @@ fn test_env<F>(source_string: &str,\n     options.unstable_features = UnstableFeatures::Allow;\n     let diagnostic_handler = errors::Handler::with_emitter(true, false, emitter);\n \n-    let cstore = Rc::new(CStore::new(box ::MetadataLoader));\n+    let cstore = Rc::new(CStore::new(DefaultTransCrate::metadata_loader()));\n     let sess = session::build_session_(options,\n                                        None,\n                                        diagnostic_handler,"}, {"sha": "479d12b7440d2cd364db3dd0c9f12969a283fcfe", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=44c184382fda86692d61e4042d5ccecc83c43e90", "patch": "@@ -27,6 +27,7 @@ rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }\n rustc_trans_utils = { path = \"../librustc_trans_utils\" }\n+rustc_trans_traits = { path = \"../librustc_trans_traits\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "9023f5c3e61698f2f98c264e688d299bd883860d", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=44c184382fda86692d61e4042d5ccecc83c43e90", "patch": "@@ -50,6 +50,7 @@ extern crate rustc_incremental;\n extern crate rustc_llvm as llvm;\n extern crate rustc_platform_intrinsics as intrinsics;\n extern crate rustc_const_math;\n+extern crate rustc_trans_traits;\n extern crate rustc_trans_utils;\n extern crate rustc_demangle;\n extern crate jobserver;\n@@ -138,6 +139,60 @@ mod type_;\n mod type_of;\n mod value;\n \n+use rustc::ty::{self, TyCtxt, CrateAnalysis};\n+use rustc::session::Session;\n+use rustc::session::config::OutputFilenames;\n+use rustc::middle::cstore::MetadataLoader;\n+use rustc::dep_graph::DepGraph;\n+use rustc_incremental::IncrementalHashesMap;\n+\n+pub struct LlvmTransCrate(());\n+\n+impl LlvmTransCrate {\n+    pub fn new() -> Self {\n+        LlvmTransCrate(())\n+    }\n+}\n+\n+impl rustc_trans_traits::TransCrate for LlvmTransCrate {\n+    type MetadataLoader = metadata::LlvmMetadataLoader;\n+    type OngoingCrateTranslation = back::write::OngoingCrateTranslation;\n+    type TranslatedCrate = CrateTranslation;\n+\n+    fn metadata_loader() -> Box<MetadataLoader> {\n+        box metadata::LlvmMetadataLoader\n+    }\n+\n+    fn provide(providers: &mut ty::maps::Providers) {\n+        back::symbol_names::provide(providers);\n+    }\n+\n+    fn trans_crate<'a, 'tcx>(\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        analysis: CrateAnalysis,\n+        incr_hashes_map: IncrementalHashesMap,\n+        output_filenames: &OutputFilenames\n+    ) -> Self::OngoingCrateTranslation {\n+        base::trans_crate(tcx, analysis, incr_hashes_map, output_filenames)\n+    }\n+\n+    fn join_trans(\n+        trans: Self::OngoingCrateTranslation,\n+        sess: &Session,\n+        dep_graph: &DepGraph\n+    ) -> Self::TranslatedCrate {\n+        trans.join(sess, dep_graph)\n+    }\n+\n+    fn link_binary(sess: &Session, trans: &Self::TranslatedCrate, outputs: &OutputFilenames) {\n+        back::link::link_binary(sess, trans, outputs, &trans.crate_name.as_str());\n+    }\n+\n+    fn dump_incremental_data(trans: &Self::TranslatedCrate) {\n+        back::write::dump_incremental_data(trans);\n+    }\n+}\n+\n pub struct ModuleTranslation {\n     /// The name of the module. When the crate may be saved between\n     /// compilations, incremental compilation requires that name be"}, {"sha": "418de173fd14a1c7983e3345611ea891b927bcfb", "filename": "src/librustc_trans_traits/Cargo.toml", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_trans_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_trans_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_traits%2FCargo.toml?ref=44c184382fda86692d61e4042d5ccecc83c43e90", "patch": "@@ -0,0 +1,17 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_trans_traits\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_trans_traits\"\n+path = \"lib.rs\"\n+crate-type = [\"dylib\"]\n+test = false\n+\n+[dependencies]\n+owning_ref = \"0.3.3\"\n+\n+rustc = { path = \"../librustc\" }\n+rustc_back = { path = \"../librustc_back\" }\n+rustc_incremental = { path = \"../librustc_incremental\" }"}, {"sha": "340d54c1029fc3fe739a0798640acfe1b057a1e2", "filename": "src/librustc_trans_traits/lib.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_trans_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c184382fda86692d61e4042d5ccecc83c43e90/src%2Flibrustc_trans_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_traits%2Flib.rs?ref=44c184382fda86692d61e4042d5ccecc83c43e90", "patch": "@@ -0,0 +1,116 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The Rust compiler.\n+//!\n+//! # Note\n+//!\n+//! This API is completely unstable and subject to change.\n+\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![deny(warnings)]\n+\n+#![feature(box_syntax)]\n+\n+extern crate owning_ref;\n+\n+#[macro_use]\n+extern crate rustc;\n+extern crate rustc_back;\n+extern crate rustc_incremental;\n+\n+use std::path::Path;\n+use owning_ref::ErasedBoxRef;\n+\n+use rustc::session::Session;\n+use rustc::session::config::OutputFilenames;\n+use rustc::ty::{TyCtxt, CrateAnalysis};\n+use rustc::ty::maps::Providers;\n+use rustc::middle::cstore::MetadataLoader as MetadataLoaderTrait;\n+use rustc::dep_graph::DepGraph;\n+use rustc_back::target::Target;\n+use rustc_incremental::IncrementalHashesMap;\n+\n+pub trait TransCrate {\n+    type MetadataLoader: MetadataLoaderTrait;\n+    type OngoingCrateTranslation;\n+    type TranslatedCrate;\n+\n+    fn metadata_loader() -> Box<MetadataLoaderTrait>;\n+    fn provide(_providers: &mut Providers);\n+    fn trans_crate<'a, 'tcx>(\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        analysis: CrateAnalysis,\n+        incr_hashes_map: IncrementalHashesMap,\n+        output_filenames: &OutputFilenames\n+    ) -> Self::OngoingCrateTranslation;\n+    fn join_trans(\n+        trans: Self::OngoingCrateTranslation,\n+        sess: &Session,\n+        dep_graph: &DepGraph\n+    ) -> Self::TranslatedCrate;\n+    fn link_binary(sess: &Session, trans: &Self::TranslatedCrate, outputs: &OutputFilenames);\n+    fn dump_incremental_data(trans: &Self::TranslatedCrate);\n+}\n+\n+pub struct DummyTransCrate;\n+\n+impl TransCrate for DummyTransCrate {\n+    type MetadataLoader = DummyMetadataLoader;\n+    type OngoingCrateTranslation = ();\n+    type TranslatedCrate = ();\n+\n+    fn metadata_loader() -> Box<MetadataLoaderTrait> {\n+        box DummyMetadataLoader(())\n+    }\n+\n+    fn provide(_providers: &mut Providers) {\n+        bug!(\"DummyTransCrate::provide\");\n+    }\n+\n+    fn trans_crate<'a, 'tcx>(\n+        _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        _analysis: CrateAnalysis,\n+        _incr_hashes_map: IncrementalHashesMap,\n+        _output_filenames: &OutputFilenames\n+    ) -> Self::OngoingCrateTranslation {\n+        bug!(\"DummyTransCrate::trans_crate\");\n+    }\n+\n+    fn join_trans(\n+        _trans: Self::OngoingCrateTranslation,\n+        _sess: &Session,\n+        _dep_graph: &DepGraph\n+    ) -> Self::TranslatedCrate {\n+        bug!(\"DummyTransCrate::join_trans\");\n+    }\n+\n+    fn link_binary(_sess: &Session, _trans: &Self::TranslatedCrate, _outputs: &OutputFilenames) {\n+        bug!(\"DummyTransCrate::link_binary\");\n+    }\n+\n+    fn dump_incremental_data(_trans: &Self::TranslatedCrate) {\n+        bug!(\"DummyTransCrate::dump_incremental_data\");\n+    }\n+}\n+\n+pub struct DummyMetadataLoader(());\n+\n+impl MetadataLoaderTrait for DummyMetadataLoader {\n+    fn get_rlib_metadata(&self, _target: &Target, _filename: &Path) -> Result<ErasedBoxRef<[u8]>, String> {\n+        bug!(\"DummyMetadataLoader::get_rlib_metadata\");\n+    }\n+\n+    fn get_dylib_metadata(&self, _target: &Target, _filename: &Path) -> Result<ErasedBoxRef<[u8]>, String> {\n+        bug!(\"DummyMetadataLoader::get_dylib_metadata\");\n+    }\n+}"}]}