{"sha": "bf87d9b79ffccf9dc3f5f0ec102568097def2127", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmODdkOWI3OWZmY2NmOWRjM2Y1ZjBlYzEwMjU2ODA5N2RlZjIxMjc=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-27T09:57:46Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-27T09:57:46Z"}, "message": "Rename WorkspaceHitlist to CargoFmtStrategy", "tree": {"sha": "1f93833ef1573eb081b03ea717045ab9216b95c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f93833ef1573eb081b03ea717045ab9216b95c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf87d9b79ffccf9dc3f5f0ec102568097def2127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf87d9b79ffccf9dc3f5f0ec102568097def2127", "html_url": "https://github.com/rust-lang/rust/commit/bf87d9b79ffccf9dc3f5f0ec102568097def2127", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf87d9b79ffccf9dc3f5f0ec102568097def2127/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbe06c6f77c2b02903141cdffdcd52e0e3258f2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe06c6f77c2b02903141cdffdcd52e0e3258f2d", "html_url": "https://github.com/rust-lang/rust/commit/fbe06c6f77c2b02903141cdffdcd52e0e3258f2d"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "fb1a13d07f7c9850edc3e883a43eac8625ec6649", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bf87d9b79ffccf9dc3f5f0ec102568097def2127/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf87d9b79ffccf9dc3f5f0ec102568097def2127/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=bf87d9b79ffccf9dc3f5f0ec102568097def2127", "patch": "@@ -84,9 +84,9 @@ fn execute() -> i32 {\n         return success;\n     }\n \n-    let workspace_hitlist = WorkspaceHitlist::from_matches(&matches);\n+    let strategy = CargoFmtStrategy::from_matches(&matches);\n \n-    match format_crate(verbosity, &workspace_hitlist) {\n+    match format_crate(verbosity, &strategy) {\n         Err(e) => {\n             print_usage_to_stderr(&opts, &e.to_string());\n             failure\n@@ -127,9 +127,9 @@ pub enum Verbosity {\n \n fn format_crate(\n     verbosity: Verbosity,\n-    workspace_hitlist: &WorkspaceHitlist,\n+    strategy: &CargoFmtStrategy,\n ) -> Result<ExitStatus, io::Error> {\n-    let targets = get_targets(workspace_hitlist)?;\n+    let targets = get_targets(strategy)?;\n \n     // Currently only bin and lib files get formatted\n     let files: Vec<_> = targets\n@@ -227,37 +227,33 @@ impl Hash for Target {\n }\n \n #[derive(Debug, PartialEq, Eq)]\n-pub enum WorkspaceHitlist {\n+pub enum CargoFmtStrategy {\n+    /// Format every packages and dependencies.\n     All,\n+    /// Format pacakges that are specified by the command line argument.\n     Some(Vec<String>),\n-    None,\n+    /// Format the root packages only.\n+    Root,\n }\n \n-impl WorkspaceHitlist {\n-    pub fn get_some(&self) -> Option<&[String]> {\n-        if let WorkspaceHitlist::Some(ref hitlist) = *self {\n-            Some(hitlist)\n-        } else {\n-            None\n-        }\n-    }\n-\n-    pub fn from_matches(matches: &Matches) -> WorkspaceHitlist {\n+impl CargoFmtStrategy {\n+    pub fn from_matches(matches: &Matches) -> CargoFmtStrategy {\n         match (matches.opt_present(\"all\"), matches.opt_present(\"p\")) {\n-            (false, false) => WorkspaceHitlist::None,\n-            (true, _) => WorkspaceHitlist::All,\n-            (false, true) => WorkspaceHitlist::Some(matches.opt_strs(\"p\")),\n+            (false, false) => CargoFmtStrategy::Root,\n+            (true, _) => CargoFmtStrategy::All,\n+            (false, true) => CargoFmtStrategy::Some(matches.opt_strs(\"p\")),\n         }\n     }\n }\n \n-fn get_targets(workspace_hitlist: &WorkspaceHitlist) -> Result<HashSet<Target>, io::Error> {\n+/// Based on the specified CargoFmtStrategy, returns a set of main source files.\n+fn get_targets(strategy: &CargoFmtStrategy) -> Result<HashSet<Target>, io::Error> {\n     let mut targets = HashSet::new();\n \n-    match *workspace_hitlist {\n-        WorkspaceHitlist::None => get_targets_root_only(&mut targets)?,\n-        WorkspaceHitlist::All => get_targets_recursive(None, &mut targets, &mut HashSet::new())?,\n-        WorkspaceHitlist::Some(ref hitlist) => get_targets_with_hitlist(hitlist, &mut targets)?,\n+    match *strategy {\n+        CargoFmtStrategy::Root => get_targets_root_only(&mut targets)?,\n+        CargoFmtStrategy::All => get_targets_recursive(None, &mut targets, &mut HashSet::new())?,\n+        CargoFmtStrategy::Some(ref hitlist) => get_targets_with_hitlist(hitlist, &mut targets)?,\n     }\n \n     if targets.is_empty() {\n@@ -317,25 +313,25 @@ fn get_targets_recursive(\n }\n \n fn get_targets_with_hitlist(\n-    target_names: &[String],\n+    hitlist: &[String],\n     targets: &mut HashSet<Target>,\n ) -> Result<(), io::Error> {\n     let metadata = get_cargo_metadata(None)?;\n \n-    let mut hitlist: HashSet<&String> = HashSet::from_iter(target_names);\n+    let mut workspace_hitlist: HashSet<&String> = HashSet::from_iter(hitlist);\n \n     for package in metadata.packages {\n         for target in package.targets {\n-            if hitlist.remove(&target.name) {\n+            if workspace_hitlist.remove(&target.name) {\n                 targets.insert(Target::from_target(&target));\n             }\n         }\n     }\n \n-    if hitlist.is_empty() {\n+    if workspace_hitlist.is_empty() {\n         Ok(())\n     } else {\n-        let package = hitlist.iter().next().unwrap();\n+        let package = workspace_hitlist.iter().next().unwrap();\n         Err(io::Error::new(\n             io::ErrorKind::InvalidInput,\n             format!(\"package `{}` is not a member of the workspace\", package),"}]}