{"sha": "828e7b685ade9d53a8f72f3509a98f2255787136", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOGU3YjY4NWFkZTlkNTNhOGY3MmYzNTA5YTk4ZjIyNTU3ODcxMzY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-28T10:58:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-28T10:58:39Z"}, "message": "miri: add get and get_mut to AllocMap; use that in get_size_and_align and avoid rightwards drift", "tree": {"sha": "613c86883ada296383dfe006222168f532b30c41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/613c86883ada296383dfe006222168f532b30c41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/828e7b685ade9d53a8f72f3509a98f2255787136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/828e7b685ade9d53a8f72f3509a98f2255787136", "html_url": "https://github.com/rust-lang/rust/commit/828e7b685ade9d53a8f72f3509a98f2255787136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/828e7b685ade9d53a8f72f3509a98f2255787136/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a239ef4ded03d155c72b68b5a2dd7aff013e141", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a239ef4ded03d155c72b68b5a2dd7aff013e141", "html_url": "https://github.com/rust-lang/rust/commit/9a239ef4ded03d155c72b68b5a2dd7aff013e141"}], "stats": {"total": 90, "additions": 52, "deletions": 38}, "files": [{"sha": "5808b0b7748f4d5f2a5c64ffc2f455cddbea4082", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/828e7b685ade9d53a8f72f3509a98f2255787136/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828e7b685ade9d53a8f72f3509a98f2255787136/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=828e7b685ade9d53a8f72f3509a98f2255787136", "patch": "@@ -54,6 +54,22 @@ pub trait AllocMap<K: Hash + Eq, V> {\n         k: K,\n         vacant: impl FnOnce() -> Result<V, E>\n     ) -> Result<&mut V, E>;\n+\n+    /// Read-only lookup.\n+    fn get(&self, k: K) -> Option<&V> {\n+        match self.get_or(k, || Err(())) {\n+            Ok(v) => Some(v),\n+            Err(()) => None,\n+        }\n+    }\n+\n+    /// Mutable lookup.\n+    fn get_mut(&mut self, k: K) -> Option<&mut V> {\n+        match self.get_mut_or(k, || Err(())) {\n+            Ok(v) => Some(v),\n+            Err(()) => None,\n+        }\n+    }\n }\n \n /// Methods of this trait signifies a point where CTFE evaluation would fail"}, {"sha": "12be9baec132f0d05dfd6592d42b2c2c9739f907", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 36, "deletions": 38, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/828e7b685ade9d53a8f72f3509a98f2255787136/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828e7b685ade9d53a8f72f3509a98f2255787136/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=828e7b685ade9d53a8f72f3509a98f2255787136", "patch": "@@ -538,45 +538,43 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // Don't use `self.get` here as that will\n         // a) cause cycles in case `id` refers to a static\n         // b) duplicate a static's allocation in miri\n-        match self.alloc_map.get_or(id, || Err(())) {\n-            Ok((_, alloc)) => Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n-            Err(()) => {\n-                // Not a local allocation, check the global `tcx.alloc_map`.\n-\n-                // Can't do this in the match argument, we may get cycle errors since the lock would\n-                // be held throughout the match.\n-                let alloc = self.tcx.alloc_map.lock().get(id);\n-                match alloc {\n-                    Some(GlobalAlloc::Static(did)) => {\n-                        // Use size and align of the type.\n-                        let ty = self.tcx.type_of(did);\n-                        let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n-                        Ok((layout.size, layout.align.abi))\n-                    },\n-                    Some(GlobalAlloc::Memory(alloc)) =>\n-                        // Need to duplicate the logic here, because the global allocations have\n-                        // different associated types than the interpreter-local ones.\n-                        Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n-                    Some(GlobalAlloc::Function(_)) => {\n-                        if let AllocCheck::Dereferencable = liveness {\n-                            // The caller requested no function pointers.\n-                            err!(DerefFunctionPointer)\n-                        } else {\n-                            Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n-                        }\n-                    },\n-                    // The rest must be dead.\n-                    None => if let AllocCheck::MaybeDead = liveness {\n-                        // Deallocated pointers are allowed, we should be able to find\n-                        // them in the map.\n-                        Ok(*self.dead_alloc_map.get(&id)\n-                            .expect(\"deallocated pointers should all be recorded in \\\n-                                    `dead_alloc_map`\"))\n-                    } else {\n-                        err!(DanglingPointerDeref)\n-                    },\n+        if let Some((_, alloc)) = self.alloc_map.get(id) {\n+            return Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align));\n+        }\n+        // Not a local allocation, check the global `tcx.alloc_map`.\n+\n+        // Can't do this in the match argument, we may get cycle errors since the lock would\n+        // be held throughout the match.\n+        let alloc = self.tcx.alloc_map.lock().get(id);\n+        match alloc {\n+            Some(GlobalAlloc::Static(did)) => {\n+                // Use size and align of the type.\n+                let ty = self.tcx.type_of(did);\n+                let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n+                Ok((layout.size, layout.align.abi))\n+            },\n+            Some(GlobalAlloc::Memory(alloc)) =>\n+                // Need to duplicate the logic here, because the global allocations have\n+                // different associated types than the interpreter-local ones.\n+                Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n+            Some(GlobalAlloc::Function(_)) => {\n+                if let AllocCheck::Dereferencable = liveness {\n+                    // The caller requested no function pointers.\n+                    err!(DerefFunctionPointer)\n+                } else {\n+                    Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n                 }\n-            }\n+            },\n+            // The rest must be dead.\n+            None => if let AllocCheck::MaybeDead = liveness {\n+                // Deallocated pointers are allowed, we should be able to find\n+                // them in the map.\n+                Ok(*self.dead_alloc_map.get(&id)\n+                    .expect(\"deallocated pointers should all be recorded in \\\n+                            `dead_alloc_map`\"))\n+            } else {\n+                err!(DanglingPointerDeref)\n+            },\n         }\n     }\n "}]}