{"sha": "5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjM2QwZTZkZTNlZDBkMzUwNmNiNzA3MzdiMzQ4ZWEyMTEzYzcwZDg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-06-08T21:20:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-06-20T19:43:12Z"}, "message": "Switch to the crates.io `getopts` crate\n\nThis commit deletes the in-tree `getopts` crate in favor of the crates.io-based\n`getopts` crate. The main difference here is with a new builder-style API, but\notherwise everything else remains relatively standard.", "tree": {"sha": "d965617bf101d94892ba4bb4753c04c00951ed31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d965617bf101d94892ba4bb4753c04c00951ed31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "html_url": "https://github.com/rust-lang/rust/commit/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4024c58e1e5c92cfe3ed39ed9f5b96f3f38122e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4024c58e1e5c92cfe3ed39ed9f5b96f3f38122e", "html_url": "https://github.com/rust-lang/rust/commit/a4024c58e1e5c92cfe3ed39ed9f5b96f3f38122e"}], "stats": {"total": 594, "additions": 317, "deletions": 277}, "files": [{"sha": "6d7fcb71efa009cc19bb0db0392e54e2396901ef", "filename": "src/Cargo.lock", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "patch": "@@ -285,6 +285,7 @@ dependencies = [\n  \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -422,14 +423,6 @@ dependencies = [\n  \"libc 0.2.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"flate\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"build_helper 0.1.0\",\n- \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"flate2\"\n version = \"0.2.19\"\n@@ -463,10 +456,6 @@ name = \"gcc\"\n version = \"0.3.51\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"getopts\"\n-version = \"0.0.0\"\n-\n [[package]]\n name = \"getopts\"\n version = \"0.2.14\"\n@@ -1107,6 +1096,7 @@ name = \"rustc\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n+ \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1296,7 +1286,7 @@ dependencies = [\n name = \"rustc_metadata\"\n version = \"0.0.0\"\n dependencies = [\n- \"flate 0.0.0\",\n+ \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n@@ -1404,7 +1394,7 @@ dependencies = [\n name = \"rustc_trans\"\n version = \"0.0.0\"\n dependencies = [\n- \"flate 0.0.0\",\n+ \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1790,7 +1780,7 @@ dependencies = [\n name = \"test\"\n version = \"0.0.0\"\n dependencies = [\n- \"getopts 0.0.0\",\n+ \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.0.0\",\n ]\n "}, {"sha": "753bd1df0d83f37213015eb7808301971ae67852", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "patch": "@@ -567,7 +567,6 @@ pub fn rust_src(build: &Build) {\n         \"src/rustc/libc_shim\",\n         \"src/libtest\",\n         \"src/libterm\",\n-        \"src/libgetopts\",\n         \"src/compiler-rt\",\n         \"src/jemalloc\",\n         \"src/libprofiler_builtins\","}, {"sha": "99e3b892858884705877012ae485117c67459d1d", "filename": "src/libgetopts/Cargo.toml", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a4024c58e1e5c92cfe3ed39ed9f5b96f3f38122e/src%2Flibgetopts%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a4024c58e1e5c92cfe3ed39ed9f5b96f3f38122e/src%2Flibgetopts%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2FCargo.toml?ref=a4024c58e1e5c92cfe3ed39ed9f5b96f3f38122e", "patch": "@@ -1,9 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-name = \"getopts\"\n-version = \"0.0.0\"\n-\n-[lib]\n-name = \"getopts\"\n-path = \"lib.rs\"\n-crate-type = [\"dylib\", \"rlib\"]"}, {"sha": "77a43c5319c5cd4fa97f51e3e4e724db497d1f24", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "patch": "@@ -41,6 +41,7 @@\n #![feature(discriminant_value)]\n #![feature(sort_unstable)]\n #![feature(trace_macros)]\n+#![feature(test)]\n \n #![recursion_limit=\"256\"]\n \n@@ -63,7 +64,10 @@ extern crate syntax_pos;\n \n extern crate serialize as rustc_serialize; // used by deriving\n \n+// Note that librustc doesn't actually depend on these crates, see the note in\n+// `Cargo.toml` for this crate about why these are here.\n extern crate flate2;\n+extern crate test;\n \n #[macro_use]\n mod macros;"}, {"sha": "4f7ad5ea939f1ca4e662a2348df3242e6fddc27f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 72, "deletions": 52, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "patch": "@@ -1135,9 +1135,9 @@ pub enum OptionStability {\n     Unstable,\n }\n \n-#[derive(Clone, PartialEq, Eq)]\n pub struct RustcOptGroup {\n-    pub opt_group: getopts::OptGroup,\n+    pub apply: Box<Fn(&mut getopts::Options) -> &mut getopts::Options>,\n+    pub name: &'static str,\n     pub stability: OptionStability,\n }\n \n@@ -1146,12 +1146,24 @@ impl RustcOptGroup {\n         self.stability == OptionStability::Stable\n     }\n \n-    pub fn stable(g: getopts::OptGroup) -> RustcOptGroup {\n-        RustcOptGroup { opt_group: g, stability: OptionStability::Stable }\n+    pub fn stable<F>(name: &'static str, f: F) -> RustcOptGroup\n+        where F: Fn(&mut getopts::Options) -> &mut getopts::Options + 'static,\n+    {\n+        RustcOptGroup {\n+            name: name,\n+            apply: Box::new(f),\n+            stability: OptionStability::Stable,\n+        }\n     }\n \n-    pub fn unstable(g: getopts::OptGroup) -> RustcOptGroup {\n-        RustcOptGroup { opt_group: g, stability: OptionStability::Unstable }\n+    pub fn unstable<F>(name: &'static str, f: F) -> RustcOptGroup\n+        where F: Fn(&mut getopts::Options) -> &mut getopts::Options + 'static,\n+    {\n+        RustcOptGroup {\n+            name: name,\n+            apply: Box::new(f),\n+            stability: OptionStability::Unstable,\n+        }\n     }\n }\n \n@@ -1170,55 +1182,65 @@ mod opt {\n     use super::RustcOptGroup;\n \n     pub type R = RustcOptGroup;\n-    pub type S<'a> = &'a str;\n+    pub type S = &'static str;\n+\n+    fn stable<F>(name: S, f: F) -> R\n+        where F: Fn(&mut getopts::Options) -> &mut getopts::Options + 'static\n+    {\n+        RustcOptGroup::stable(name, f)\n+    }\n \n-    fn stable(g: getopts::OptGroup) -> R { RustcOptGroup::stable(g) }\n-    fn unstable(g: getopts::OptGroup) -> R { RustcOptGroup::unstable(g) }\n+    fn unstable<F>(name: S, f: F) -> R\n+        where F: Fn(&mut getopts::Options) -> &mut getopts::Options + 'static\n+    {\n+        RustcOptGroup::unstable(name, f)\n+    }\n+\n+    fn longer(a: S, b: S) -> S {\n+        if a.len() > b.len() {\n+            a\n+        } else {\n+            b\n+        }\n+    }\n \n     pub fn opt_s(a: S, b: S, c: S, d: S) -> R {\n-        stable(getopts::optopt(a, b, c, d))\n+        stable(longer(a, b), move |opts| opts.optopt(a, b, c, d))\n     }\n     pub fn multi_s(a: S, b: S, c: S, d: S) -> R {\n-        stable(getopts::optmulti(a, b, c, d))\n+        stable(longer(a, b), move |opts| opts.optmulti(a, b, c, d))\n     }\n     pub fn flag_s(a: S, b: S, c: S) -> R {\n-        stable(getopts::optflag(a, b, c))\n+        stable(longer(a, b), move |opts| opts.optflag(a, b, c))\n     }\n     pub fn flagopt_s(a: S, b: S, c: S, d: S) -> R {\n-        stable(getopts::optflagopt(a, b, c, d))\n+        stable(longer(a, b), move |opts| opts.optflagopt(a, b, c, d))\n     }\n     pub fn flagmulti_s(a: S, b: S, c: S) -> R {\n-        stable(getopts::optflagmulti(a, b, c))\n+        stable(longer(a, b), move |opts| opts.optflagmulti(a, b, c))\n     }\n \n     pub fn opt(a: S, b: S, c: S, d: S) -> R {\n-        unstable(getopts::optopt(a, b, c, d))\n+        unstable(longer(a, b), move |opts| opts.optopt(a, b, c, d))\n     }\n     pub fn multi(a: S, b: S, c: S, d: S) -> R {\n-        unstable(getopts::optmulti(a, b, c, d))\n+        unstable(longer(a, b), move |opts| opts.optmulti(a, b, c, d))\n     }\n     pub fn flag(a: S, b: S, c: S) -> R {\n-        unstable(getopts::optflag(a, b, c))\n+        unstable(longer(a, b), move |opts| opts.optflag(a, b, c))\n     }\n     pub fn flagopt(a: S, b: S, c: S, d: S) -> R {\n-        unstable(getopts::optflagopt(a, b, c, d))\n+        unstable(longer(a, b), move |opts| opts.optflagopt(a, b, c, d))\n     }\n     pub fn flagmulti(a: S, b: S, c: S) -> R {\n-        unstable(getopts::optflagmulti(a, b, c))\n+        unstable(longer(a, b), move |opts| opts.optflagmulti(a, b, c))\n     }\n }\n \n /// Returns the \"short\" subset of the rustc command line options,\n /// including metadata for each option, such as whether the option is\n /// part of the stable long-term interface for rustc.\n pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n-    let mut print_opts = vec![\"crate-name\", \"file-names\", \"sysroot\", \"cfg\",\n-                              \"target-list\", \"target-cpus\", \"target-features\",\n-                              \"relocation-models\", \"code-models\"];\n-    if nightly_options::is_nightly_build() {\n-        print_opts.push(\"target-spec-json\");\n-    }\n-\n     vec![\n         opt::flag_s(\"h\", \"help\", \"Display this message\"),\n         opt::multi_s(\"\", \"cfg\", \"Configure the compilation environment\", \"SPEC\"),\n@@ -1238,8 +1260,10 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n                               the compiler to emit\",\n                  \"[asm|llvm-bc|llvm-ir|obj|metadata|link|dep-info|mir]\"),\n         opt::multi_s(\"\", \"print\", \"Comma separated list of compiler information to \\\n-                               print on stdout\", &format!(\"[{}]\",\n-                               &print_opts.join(\"|\"))),\n+                               print on stdout\",\n+                     \"[crate-name|file-names|sysroot|cfg|target-list|\\\n+                       target-cpus|target-features|relocation-models|\\\n+                       code-models|target-spec-json]\"),\n         opt::flagmulti_s(\"g\",  \"\",  \"Equivalent to -C debuginfo=2\"),\n         opt::flagmulti_s(\"O\", \"\", \"Equivalent to -C opt-level=2\"),\n         opt::opt_s(\"o\", \"\", \"Write output to <filename>\", \"FILENAME\"),\n@@ -1267,7 +1291,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n /// long-term interface for rustc.\n pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n     let mut opts = rustc_short_optgroups();\n-    opts.extend_from_slice(&[\n+    opts.extend(vec![\n         opt::multi_s(\"\", \"extern\", \"Specify where an external rust library is located\",\n                      \"NAME=PATH\"),\n         opt::opt_s(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n@@ -1680,27 +1704,22 @@ pub mod nightly_options {\n             if opt.stability == OptionStability::Stable {\n                 continue\n             }\n-            let opt_name = if opt.opt_group.long_name.is_empty() {\n-                &opt.opt_group.short_name\n-            } else {\n-                &opt.opt_group.long_name\n-            };\n-            if !matches.opt_present(opt_name) {\n+            if !matches.opt_present(opt.name) {\n                 continue\n             }\n-            if opt_name != \"Z\" && !has_z_unstable_option {\n+            if opt.name != \"Z\" && !has_z_unstable_option {\n                 early_error(ErrorOutputType::default(),\n                             &format!(\"the `-Z unstable-options` flag must also be passed to enable \\\n                                       the flag `{}`\",\n-                                     opt_name));\n+                                     opt.name));\n             }\n             if really_allows_unstable_options {\n                 continue\n             }\n             match opt.stability {\n                 OptionStability::Unstable => {\n                     let msg = format!(\"the option `{}` is only accepted on the \\\n-                                       nightly compiler\", opt_name);\n+                                       nightly compiler\", opt.name);\n                     early_error(ErrorOutputType::default(), &msg);\n                 }\n                 OptionStability::Stable => {}\n@@ -1869,7 +1888,7 @@ mod dep_tracking {\n mod tests {\n     use dep_graph::DepGraph;\n     use errors;\n-    use getopts::{getopts, OptGroup};\n+    use getopts;\n     use lint;\n     use middle::cstore::{self, DummyCrateStore};\n     use session::config::{build_configuration, build_session_options_and_crate_config};\n@@ -1882,10 +1901,12 @@ mod tests {\n     use rustc_back::PanicStrategy;\n     use syntax::symbol::Symbol;\n \n-    fn optgroups() -> Vec<OptGroup> {\n-        super::rustc_optgroups().into_iter()\n-                                .map(|a| a.opt_group)\n-                                .collect()\n+    fn optgroups() -> getopts::Options {\n+        let mut opts = getopts::Options::new();\n+        for group in super::rustc_optgroups() {\n+            (group.apply)(&mut opts);\n+        }\n+        return opts\n     }\n \n     fn mk_map<K: Ord, V>(entries: Vec<(K, V)>) -> BTreeMap<K, V> {\n@@ -1901,7 +1922,7 @@ mod tests {\n     fn test_switch_implies_cfg_test() {\n         let dep_graph = DepGraph::new(false);\n         let matches =\n-            &match getopts(&[\"--test\".to_string()], &optgroups()) {\n+            &match optgroups().parse(&[\"--test\".to_string()]) {\n               Ok(m) => m,\n               Err(f) => panic!(\"test_switch_implies_cfg_test: {}\", f)\n             };\n@@ -1918,8 +1939,7 @@ mod tests {\n     fn test_switch_implies_cfg_test_unless_cfg_test() {\n         let dep_graph = DepGraph::new(false);\n         let matches =\n-            &match getopts(&[\"--test\".to_string(), \"--cfg=test\".to_string()],\n-                           &optgroups()) {\n+            &match optgroups().parse(&[\"--test\".to_string(), \"--cfg=test\".to_string()]) {\n               Ok(m) => m,\n               Err(f) => {\n                 panic!(\"test_switch_implies_cfg_test_unless_cfg_test: {}\", f)\n@@ -1939,9 +1959,9 @@ mod tests {\n     fn test_can_print_warnings() {\n         let dep_graph = DepGraph::new(false);\n         {\n-            let matches = getopts(&[\n+            let matches = optgroups().parse(&[\n                 \"-Awarnings\".to_string()\n-            ], &optgroups()).unwrap();\n+            ]).unwrap();\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n             let sess = build_session(sessopts, &dep_graph, None, registry,\n@@ -1950,10 +1970,10 @@ mod tests {\n         }\n \n         {\n-            let matches = getopts(&[\n+            let matches = optgroups().parse(&[\n                 \"-Awarnings\".to_string(),\n                 \"-Dwarnings\".to_string()\n-            ], &optgroups()).unwrap();\n+            ]).unwrap();\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n             let sess = build_session(sessopts, &dep_graph, None, registry,\n@@ -1962,9 +1982,9 @@ mod tests {\n         }\n \n         {\n-            let matches = getopts(&[\n+            let matches = optgroups().parse(&[\n                 \"-Adead_code\".to_string()\n-            ], &optgroups()).unwrap();\n+            ]).unwrap();\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n             let sess = build_session(sessopts, &dep_graph, None, registry,"}, {"sha": "b4a4aaaaf5c81ba5da9949d85615022519ca8c93", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "patch": "@@ -725,10 +725,10 @@ fn usage(verbose: bool, include_unstable_options: bool) {\n     } else {\n         config::rustc_short_optgroups()\n     };\n-    let groups: Vec<_> = groups.into_iter()\n-                               .filter(|x| include_unstable_options || x.is_stable())\n-                               .map(|x| x.opt_group)\n-                               .collect();\n+    let mut options = getopts::Options::new();\n+    for option in groups.iter().filter(|x| include_unstable_options || x.is_stable()) {\n+        (option.apply)(&mut options);\n+    }\n     let message = format!(\"Usage: rustc [OPTIONS] INPUT\");\n     let extra_help = if verbose {\n         \"\"\n@@ -741,7 +741,7 @@ fn usage(verbose: bool, include_unstable_options: bool) {\n               Print 'lint' options and default settings\n     -Z help             Print internal \\\n               options for debugging rustc{}\\n\",\n-             getopts::usage(&message, &groups),\n+             options.usage(&message),\n              extra_help);\n }\n \n@@ -955,11 +955,11 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n \n     // Parse with *all* options defined in the compiler, we don't worry about\n     // option stability here we just want to parse as much as possible.\n-    let all_groups: Vec<getopts::OptGroup> = config::rustc_optgroups()\n-                                                 .into_iter()\n-                                                 .map(|x| x.opt_group)\n-                                                 .collect();\n-    let matches = match getopts::getopts(&args, &all_groups) {\n+    let mut options = getopts::Options::new();\n+    for option in config::rustc_optgroups() {\n+        (option.apply)(&mut options);\n+    }\n+    let matches = match options.parse(args) {\n         Ok(m) => m,\n         Err(f) => early_error(ErrorOutputType::default(), &f.to_string()),\n     };"}, {"sha": "496662f442c41a01ef4c459f97ca0ada4eb800fe", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 133, "deletions": 78, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "patch": "@@ -116,94 +116,149 @@ fn get_args() -> Option<Vec<String>> {\n         .collect()\n }\n \n-fn stable(g: getopts::OptGroup) -> RustcOptGroup { RustcOptGroup::stable(g) }\n-fn unstable(g: getopts::OptGroup) -> RustcOptGroup { RustcOptGroup::unstable(g) }\n+fn stable<F>(name: &'static str, f: F) -> RustcOptGroup\n+    where F: Fn(&mut getopts::Options) -> &mut getopts::Options + 'static\n+{\n+    RustcOptGroup::stable(name, f)\n+}\n+\n+fn unstable<F>(name: &'static str, f: F) -> RustcOptGroup\n+    where F: Fn(&mut getopts::Options) -> &mut getopts::Options + 'static\n+{\n+    RustcOptGroup::unstable(name, f)\n+}\n \n pub fn opts() -> Vec<RustcOptGroup> {\n-    use getopts::*;\n     vec![\n-        stable(optflag(\"h\", \"help\", \"show this help message\")),\n-        stable(optflag(\"V\", \"version\", \"print rustdoc's version\")),\n-        stable(optflag(\"v\", \"verbose\", \"use verbose output\")),\n-        stable(optopt(\"r\", \"input-format\", \"the input type of the specified file\",\n-                      \"[rust]\")),\n-        stable(optopt(\"w\", \"output-format\", \"the output type to write\",\n-                      \"[html]\")),\n-        stable(optopt(\"o\", \"output\", \"where to place the output\", \"PATH\")),\n-        stable(optopt(\"\", \"crate-name\", \"specify the name of this crate\", \"NAME\")),\n-        stable(optmulti(\"L\", \"library-path\", \"directory to add to crate search path\",\n-                        \"DIR\")),\n-        stable(optmulti(\"\", \"cfg\", \"pass a --cfg to rustc\", \"\")),\n-        stable(optmulti(\"\", \"extern\", \"pass an --extern to rustc\", \"NAME=PATH\")),\n-        stable(optmulti(\"\", \"plugin-path\", \"directory to load plugins from\", \"DIR\")),\n-        stable(optmulti(\"\", \"passes\",\n-                        \"list of passes to also run, you might want \\\n-                         to pass it multiple times; a value of `list` \\\n-                         will print available passes\",\n-                        \"PASSES\")),\n-        stable(optmulti(\"\", \"plugins\", \"space separated list of plugins to also load\",\n-                        \"PLUGINS\")),\n-        stable(optflag(\"\", \"no-defaults\", \"don't run the default passes\")),\n-        stable(optflag(\"\", \"test\", \"run code examples as tests\")),\n-        stable(optmulti(\"\", \"test-args\", \"arguments to pass to the test runner\",\n-                        \"ARGS\")),\n-        stable(optopt(\"\", \"target\", \"target triple to document\", \"TRIPLE\")),\n-        stable(optmulti(\"\", \"markdown-css\",\n-                        \"CSS files to include via <link> in a rendered Markdown file\",\n-                        \"FILES\")),\n-        stable(optmulti(\"\", \"html-in-header\",\n-                        \"files to include inline in the <head> section of a rendered Markdown file \\\n-                         or generated documentation\",\n-                        \"FILES\")),\n-        stable(optmulti(\"\", \"html-before-content\",\n-                        \"files to include inline between <body> and the content of a rendered \\\n-                         Markdown file or generated documentation\",\n-                        \"FILES\")),\n-        stable(optmulti(\"\", \"html-after-content\",\n-                        \"files to include inline between the content and </body> of a rendered \\\n-                         Markdown file or generated documentation\",\n-                        \"FILES\")),\n-        unstable(optmulti(\"\", \"markdown-before-content\",\n-                          \"files to include inline between <body> and the content of a rendered \\\n-                           Markdown file or generated documentation\",\n-                          \"FILES\")),\n-        unstable(optmulti(\"\", \"markdown-after-content\",\n-                          \"files to include inline between the content and </body> of a rendered \\\n-                           Markdown file or generated documentation\",\n-                          \"FILES\")),\n-        stable(optopt(\"\", \"markdown-playground-url\",\n-                      \"URL to send code snippets to\", \"URL\")),\n-        stable(optflag(\"\", \"markdown-no-toc\", \"don't include table of contents\")),\n-        stable(optopt(\"e\", \"extend-css\",\n-                      \"To add some CSS rules with a given file to generate doc with your \\\n-                       own theme. However, your theme might break if the rustdoc's generated HTML \\\n-                       changes, so be careful!\", \"PATH\")),\n-        unstable(optmulti(\"Z\", \"\",\n-                          \"internal and debugging options (only on nightly build)\", \"FLAG\")),\n-        stable(optopt(\"\", \"sysroot\", \"Override the system root\", \"PATH\")),\n-        unstable(optopt(\"\", \"playground-url\",\n-                        \"URL to send code snippets to, may be reset by --markdown-playground-url \\\n-                         or `#![doc(html_playground_url=...)]`\",\n-                        \"URL\")),\n-        unstable(optflag(\"\", \"enable-commonmark\", \"to enable commonmark doc rendering/testing\")),\n-        unstable(optflag(\"\", \"display-warnings\", \"to print code warnings when testing doc\")),\n+        stable(\"h\", |o| o.optflag(\"h\", \"help\", \"show this help message\")),\n+        stable(\"V\", |o| o.optflag(\"V\", \"version\", \"print rustdoc's version\")),\n+        stable(\"v\", |o| o.optflag(\"v\", \"verbose\", \"use verbose output\")),\n+        stable(\"r\", |o| {\n+            o.optopt(\"r\", \"input-format\", \"the input type of the specified file\",\n+                     \"[rust]\")\n+        }),\n+        stable(\"w\", |o| {\n+            o.optopt(\"w\", \"output-format\", \"the output type to write\", \"[html]\")\n+        }),\n+        stable(\"o\", |o| o.optopt(\"o\", \"output\", \"where to place the output\", \"PATH\")),\n+        stable(\"crate-name\", |o| {\n+            o.optopt(\"\", \"crate-name\", \"specify the name of this crate\", \"NAME\")\n+        }),\n+        stable(\"L\", |o| {\n+            o.optmulti(\"L\", \"library-path\", \"directory to add to crate search path\",\n+                       \"DIR\")\n+        }),\n+        stable(\"cfg\", |o| o.optmulti(\"\", \"cfg\", \"pass a --cfg to rustc\", \"\")),\n+        stable(\"extern\", |o| {\n+            o.optmulti(\"\", \"extern\", \"pass an --extern to rustc\", \"NAME=PATH\")\n+        }),\n+        stable(\"plugin-path\", |o| {\n+            o.optmulti(\"\", \"plugin-path\", \"directory to load plugins from\", \"DIR\")\n+        }),\n+        stable(\"passes\", |o| {\n+            o.optmulti(\"\", \"passes\",\n+                       \"list of passes to also run, you might want \\\n+                        to pass it multiple times; a value of `list` \\\n+                        will print available passes\",\n+                       \"PASSES\")\n+        }),\n+        stable(\"plugins\", |o| {\n+            o.optmulti(\"\", \"plugins\", \"space separated list of plugins to also load\",\n+                       \"PLUGINS\")\n+        }),\n+        stable(\"no-default\", |o| {\n+            o.optflag(\"\", \"no-defaults\", \"don't run the default passes\")\n+        }),\n+        stable(\"test\", |o| o.optflag(\"\", \"test\", \"run code examples as tests\")),\n+        stable(\"test-args\", |o| {\n+            o.optmulti(\"\", \"test-args\", \"arguments to pass to the test runner\",\n+                       \"ARGS\")\n+        }),\n+        stable(\"target\", |o| o.optopt(\"\", \"target\", \"target triple to document\", \"TRIPLE\")),\n+        stable(\"markdown-css\", |o| {\n+            o.optmulti(\"\", \"markdown-css\",\n+                       \"CSS files to include via <link> in a rendered Markdown file\",\n+                       \"FILES\")\n+        }),\n+        stable(\"html-in-header\", |o|  {\n+            o.optmulti(\"\", \"html-in-header\",\n+                       \"files to include inline in the <head> section of a rendered Markdown file \\\n+                        or generated documentation\",\n+                       \"FILES\")\n+        }),\n+        stable(\"html-before-content\", |o| {\n+            o.optmulti(\"\", \"html-before-content\",\n+                       \"files to include inline between <body> and the content of a rendered \\\n+                        Markdown file or generated documentation\",\n+                       \"FILES\")\n+        }),\n+        stable(\"html-after-content\", |o| {\n+            o.optmulti(\"\", \"html-after-content\",\n+                       \"files to include inline between the content and </body> of a rendered \\\n+                        Markdown file or generated documentation\",\n+                       \"FILES\")\n+        }),\n+        unstable(\"markdown-before-content\", |o| {\n+            o.optmulti(\"\", \"markdown-before-content\",\n+                       \"files to include inline between <body> and the content of a rendered \\\n+                        Markdown file or generated documentation\",\n+                       \"FILES\")\n+        }),\n+        unstable(\"markdown-after-content\", |o| {\n+            o.optmulti(\"\", \"markdown-after-content\",\n+                       \"files to include inline between the content and </body> of a rendered \\\n+                        Markdown file or generated documentation\",\n+                       \"FILES\")\n+        }),\n+        stable(\"markdown-playground-url\", |o| {\n+            o.optopt(\"\", \"markdown-playground-url\",\n+                     \"URL to send code snippets to\", \"URL\")\n+        }),\n+        stable(\"markdown-no-toc\", |o| {\n+            o.optflag(\"\", \"markdown-no-toc\", \"don't include table of contents\")\n+        }),\n+        stable(\"e\", |o| {\n+            o.optopt(\"e\", \"extend-css\",\n+                     \"To add some CSS rules with a given file to generate doc with your \\\n+                      own theme. However, your theme might break if the rustdoc's generated HTML \\\n+                      changes, so be careful!\", \"PATH\")\n+        }),\n+        unstable(\"Z\", |o| {\n+            o.optmulti(\"Z\", \"\",\n+                       \"internal and debugging options (only on nightly build)\", \"FLAG\")\n+        }),\n+        stable(\"sysroot\", |o| {\n+            o.optopt(\"\", \"sysroot\", \"Override the system root\", \"PATH\")\n+        }),\n+        unstable(\"playground-url\", |o| {\n+            o.optopt(\"\", \"playground-url\",\n+                     \"URL to send code snippets to, may be reset by --markdown-playground-url \\\n+                      or `#![doc(html_playground_url=...)]`\",\n+                     \"URL\")\n+        }),\n+        unstable(\"enable-commonmark\", |o| {\n+            o.optflag(\"\", \"enable-commonmark\", \"to enable commonmark doc rendering/testing\")\n+        }),\n+        unstable(\"display-warnings\", |o| {\n+            o.optflag(\"\", \"display-warnings\", \"to print code warnings when testing doc\")\n+        }),\n     ]\n }\n \n pub fn usage(argv0: &str) {\n-    println!(\"{}\",\n-             getopts::usage(&format!(\"{} [options] <input>\", argv0),\n-                            &opts().into_iter()\n-                                   .map(|x| x.opt_group)\n-                                   .collect::<Vec<getopts::OptGroup>>()));\n+    let mut options = getopts::Options::new();\n+    for option in opts() {\n+        (option.apply)(&mut options);\n+    }\n+    println!(\"{}\", options.usage(&format!(\"{} [options] <input>\", argv0)));\n }\n \n pub fn main_args(args: &[String]) -> isize {\n-    let all_groups: Vec<getopts::OptGroup> = opts()\n-                                             .into_iter()\n-                                             .map(|x| x.opt_group)\n-                                             .collect();\n-    let matches = match getopts::getopts(&args[1..], &all_groups) {\n+    let mut options = getopts::Options::new();\n+    for option in opts() {\n+        (option.apply)(&mut options);\n+    }\n+    let matches = match options.parse(&args[1..]) {\n         Ok(m) => m,\n         Err(err) => {\n             print_error(err);"}, {"sha": "ec77f953380813b1d7a98fe1a1b7c507dbd84a0c", "filename": "src/libtest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Flibtest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Flibtest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2FCargo.toml?ref=5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "patch": "@@ -9,5 +9,5 @@ path = \"lib.rs\"\n crate-type = [\"dylib\", \"rlib\"]\n \n [dependencies]\n-getopts = { path = \"../libgetopts\" }\n+getopts = \"0.2\"\n term = { path = \"../libterm\" }"}, {"sha": "2094fd8898d49a3ebc4ec369557358ea50d483da", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "patch": "@@ -372,30 +372,31 @@ impl TestOpts {\n /// Result of parsing the options.\n pub type OptRes = Result<TestOpts, String>;\n \n-#[cfg_attr(rustfmt, rustfmt_skip)]\n-fn optgroups() -> Vec<getopts::OptGroup> {\n-    vec![getopts::optflag(\"\", \"ignored\", \"Run ignored tests\"),\n-      getopts::optflag(\"\", \"test\", \"Run tests and not benchmarks\"),\n-      getopts::optflag(\"\", \"bench\", \"Run benchmarks instead of tests\"),\n-      getopts::optflag(\"\", \"list\", \"List all tests and benchmarks\"),\n-      getopts::optflag(\"h\", \"help\", \"Display this message (longer with --help)\"),\n-      getopts::optopt(\"\", \"logfile\", \"Write logs to the specified file instead \\\n-                          of stdout\", \"PATH\"),\n-      getopts::optflag(\"\", \"nocapture\", \"don't capture stdout/stderr of each \\\n-                                         task, allow printing directly\"),\n-      getopts::optopt(\"\", \"test-threads\", \"Number of threads used for running tests \\\n-                                           in parallel\", \"n_threads\"),\n-      getopts::optmulti(\"\", \"skip\", \"Skip tests whose names contain FILTER (this flag can \\\n-                                     be used multiple times)\",\"FILTER\"),\n-      getopts::optflag(\"q\", \"quiet\", \"Display one character per test instead of one line\"),\n-      getopts::optflag(\"\", \"exact\", \"Exactly match filters rather than by substring\"),\n-      getopts::optopt(\"\", \"color\", \"Configure coloring of output:\n+fn optgroups() -> getopts::Options {\n+    let mut opts = getopts::Options::new();\n+    opts.optflag(\"\", \"ignored\", \"Run ignored tests\")\n+        .optflag(\"\", \"test\", \"Run tests and not benchmarks\")\n+        .optflag(\"\", \"bench\", \"Run benchmarks instead of tests\")\n+        .optflag(\"\", \"list\", \"List all tests and benchmarks\")\n+        .optflag(\"h\", \"help\", \"Display this message (longer with --help)\")\n+        .optopt(\"\", \"logfile\", \"Write logs to the specified file instead \\\n+                                of stdout\", \"PATH\")\n+        .optflag(\"\", \"nocapture\", \"don't capture stdout/stderr of each \\\n+                                   task, allow printing directly\")\n+        .optopt(\"\", \"test-threads\", \"Number of threads used for running tests \\\n+                                     in parallel\", \"n_threads\")\n+        .optmulti(\"\", \"skip\", \"Skip tests whose names contain FILTER (this flag can \\\n+                               be used multiple times)\",\"FILTER\")\n+        .optflag(\"q\", \"quiet\", \"Display one character per test instead of one line\")\n+        .optflag(\"\", \"exact\", \"Exactly match filters rather than by substring\")\n+        .optopt(\"\", \"color\", \"Configure coloring of output:\n             auto   = colorize if stdout is a tty and tests are run on serially (default);\n             always = always colorize output;\n-            never  = never colorize output;\", \"auto|always|never\")]\n+            never  = never colorize output;\", \"auto|always|never\");\n+    return opts\n }\n \n-fn usage(binary: &str) {\n+fn usage(binary: &str, options: &getopts::Options) {\n     let message = format!(\"Usage: {} [OPTIONS] [FILTER]\", binary);\n     println!(r#\"{usage}\n \n@@ -424,19 +425,19 @@ Test Attributes:\n                      test, then the test runner will ignore these tests during\n                      normal test runs. Running with --ignored will run these\n                      tests.\"#,\n-             usage = getopts::usage(&message, &optgroups()));\n+             usage = options.usage(&message));\n }\n \n // Parses command line arguments into test options\n pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n-    let args_ = &args[1..];\n-    let matches = match getopts::getopts(args_, &optgroups()) {\n+    let opts = optgroups();\n+    let matches = match opts.parse(&args[1..]) {\n         Ok(m) => m,\n         Err(f) => return Some(Err(f.to_string())),\n     };\n \n     if matches.opt_present(\"h\") {\n-        usage(&args[0]);\n+        usage(&args[0], &opts);\n         return None;\n     }\n "}, {"sha": "a54233535a466ff077ce06850a6b0a88640e5d23", "filename": "src/test/run-pass/auxiliary/allocator-dummy.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Ftest%2Frun-pass%2Fauxiliary%2Fallocator-dummy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Ftest%2Frun-pass%2Fauxiliary%2Fallocator-dummy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fallocator-dummy.rs?ref=5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "patch": "@@ -10,41 +10,48 @@\n \n // no-prefer-dynamic\n \n-#![feature(allocator, core_intrinsics, libc)]\n+#![feature(allocator, core_intrinsics)]\n #![allocator]\n #![crate_type = \"rlib\"]\n #![no_std]\n \n-extern crate libc;\n-\n pub static mut HITS: usize = 0;\n \n+type size_t = usize;\n+\n+extern {\n+    fn malloc(size: usize) -> *mut u8;\n+    fn free(ptr: *mut u8);\n+    fn calloc(size: usize, amt: usize) -> *mut u8;\n+    fn realloc(ptr: *mut u8, size: usize) -> *mut u8;\n+}\n+\n #[no_mangle]\n pub extern fn __rust_allocate(size: usize, align: usize) -> *mut u8 {\n     unsafe {\n         HITS += 1;\n-        libc::malloc(size as libc::size_t) as *mut u8\n+        malloc(size as size_t) as *mut u8\n     }\n }\n \n #[no_mangle]\n pub extern fn __rust_allocate_zeroed(size: usize, _align: usize) -> *mut u8 {\n-    unsafe { libc::calloc(size as libc::size_t, 1) as *mut u8 }\n+    unsafe { calloc(size as size_t, 1) as *mut u8 }\n }\n \n #[no_mangle]\n pub extern fn __rust_deallocate(ptr: *mut u8, old_size: usize, align: usize) {\n     unsafe {\n         HITS += 1;\n-        libc::free(ptr as *mut _)\n+        free(ptr as *mut _)\n     }\n }\n \n #[no_mangle]\n pub extern fn __rust_reallocate(ptr: *mut u8, old_size: usize, size: usize,\n                                 align: usize) -> *mut u8 {\n     unsafe {\n-        libc::realloc(ptr as *mut _, size as libc::size_t) as *mut u8\n+        realloc(ptr as *mut _, size as size_t) as *mut u8\n     }\n }\n "}, {"sha": "90726c21fac472db923f21dfc92c42f93ad175e9", "filename": "src/test/run-pass/getopts_ref.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a4024c58e1e5c92cfe3ed39ed9f5b96f3f38122e/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4024c58e1e5c92cfe3ed39ed9f5b96f3f38122e/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=a4024c58e1e5c92cfe3ed39ed9f5b96f3f38122e", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-#![feature(rustc_private)]\n-\n-extern crate getopts;\n-\n-use getopts::{optopt, getopts};\n-\n-pub fn main() {\n-    let args = Vec::new();\n-    let opts = vec![optopt(\"b\", \"\", \"something\", \"SMTHNG\")];\n-\n-    match getopts(&args, &opts) {\n-        Ok(ref m)  =>\n-            assert!(!m.opt_present(\"b\")),\n-        Err(ref f) => panic!(\"{}\", *f)\n-    };\n-\n-}"}, {"sha": "053ee8ee42ed60a57c434d812ac1396b3b40a033", "filename": "src/test/run-pass/smallest-hello-world.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs?ref=5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "patch": "@@ -11,6 +11,7 @@\n // Smallest \"hello world\" with a libc runtime\n \n // pretty-expanded FIXME #23616\n+// ignore-windows\n \n #![feature(intrinsics, lang_items, start, no_core, alloc_system)]\n #![no_core]"}, {"sha": "543e6784a72ac4ed7628261765295c238aa77caf", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "patch": "@@ -4,8 +4,9 @@ name = \"compiletest\"\n version = \"0.0.0\"\n \n [dependencies]\n-log = \"0.3\"\n+diff = \"0.1.10\"\n env_logger = { version = \"0.4\", default-features = false }\n-rustc-serialize = \"0.3\"\n filetime = \"0.1\"\n-diff = \"0.1.10\"\n+getopts = \"0.2\"\n+log = \"0.3\"\n+rustc-serialize = \"0.3\""}, {"sha": "c88ffba357a70f777d3cc728568e6ccc5bebfaab", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 48, "deletions": 49, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3d0e6de3ed0d3506cb70737b348ea2113c70d8/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=5c3d0e6de3ed0d3506cb70737b348ea2113c70d8", "patch": "@@ -11,7 +11,6 @@\n #![crate_name = \"compiletest\"]\n \n #![feature(box_syntax)]\n-#![feature(rustc_private)]\n #![feature(test)]\n #![feature(libc)]\n \n@@ -34,7 +33,7 @@ use std::io;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n use filetime::FileTime;\n-use getopts::{optopt, optflag, reqopt};\n+use getopts::Options;\n use common::Config;\n use common::{Pretty, DebugInfoGdb, DebugInfoLldb, Mode};\n use test::{TestPaths, ColorConfig};\n@@ -66,68 +65,68 @@ fn main() {\n \n pub fn parse_config(args: Vec<String> ) -> Config {\n \n-    let groups : Vec<getopts::OptGroup> =\n-        vec![reqopt(\"\", \"compile-lib-path\", \"path to host shared libraries\", \"PATH\"),\n-          reqopt(\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\"),\n-          reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\"),\n-          reqopt(\"\", \"rustdoc-path\", \"path to rustdoc to use for compiling\", \"PATH\"),\n-          reqopt(\"\", \"lldb-python\", \"path to python to use for doc tests\", \"PATH\"),\n-          reqopt(\"\", \"docck-python\", \"path to python to use for doc tests\", \"PATH\"),\n-          optopt(\"\", \"valgrind-path\", \"path to Valgrind executable for Valgrind tests\", \"PROGRAM\"),\n-          optflag(\"\", \"force-valgrind\", \"fail if Valgrind tests cannot be run under Valgrind\"),\n-          optopt(\"\", \"llvm-filecheck\", \"path to LLVM's FileCheck binary\", \"DIR\"),\n-          reqopt(\"\", \"src-base\", \"directory to scan for test files\", \"PATH\"),\n-          reqopt(\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\"),\n-          reqopt(\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\"),\n-          reqopt(\"\", \"mode\", \"which sort of compile tests to run\",\n-                 \"(compile-fail|parse-fail|run-fail|run-pass|\\\n-                  run-pass-valgrind|pretty|debug-info|incremental|mir-opt)\"),\n-          optflag(\"\", \"ignored\", \"run tests marked as ignored\"),\n-          optflag(\"\", \"exact\", \"filters match exactly\"),\n-          optopt(\"\", \"runtool\", \"supervisor program to run tests under \\\n-                                 (eg. emulator, valgrind)\", \"PROGRAM\"),\n-          optopt(\"\", \"host-rustcflags\", \"flags to pass to rustc for host\", \"FLAGS\"),\n-          optopt(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\"),\n-          optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\"),\n-          optflag(\"\", \"quiet\", \"print one character per test instead of one line\"),\n-          optopt(\"\", \"color\", \"coloring: auto, always, never\", \"WHEN\"),\n-          optopt(\"\", \"logfile\", \"file to log test execution to\", \"FILE\"),\n-          optopt(\"\", \"target\", \"the target to build for\", \"TARGET\"),\n-          optopt(\"\", \"host\", \"the host to build for\", \"HOST\"),\n-          optopt(\"\", \"gdb\", \"path to GDB to use for GDB debuginfo tests\", \"PATH\"),\n-          optopt(\"\", \"lldb-version\", \"the version of LLDB used\", \"VERSION STRING\"),\n-          optopt(\"\", \"llvm-version\", \"the version of LLVM used\", \"VERSION STRING\"),\n-          optflag(\"\", \"system-llvm\", \"is LLVM the system LLVM\"),\n-          optopt(\"\", \"android-cross-path\", \"Android NDK standalone path\", \"PATH\"),\n-          optopt(\"\", \"adb-path\", \"path to the android debugger\", \"PATH\"),\n-          optopt(\"\", \"adb-test-dir\", \"path to tests for the android debugger\", \"PATH\"),\n-          optopt(\"\", \"lldb-python-dir\", \"directory containing LLDB's python module\", \"PATH\"),\n-          reqopt(\"\", \"cc\", \"path to a C compiler\", \"PATH\"),\n-          reqopt(\"\", \"cxx\", \"path to a C++ compiler\", \"PATH\"),\n-          reqopt(\"\", \"cflags\", \"flags for the C compiler\", \"FLAGS\"),\n-          reqopt(\"\", \"llvm-components\", \"list of LLVM components built in\", \"LIST\"),\n-          reqopt(\"\", \"llvm-cxxflags\", \"C++ flags for LLVM\", \"FLAGS\"),\n-          optopt(\"\", \"nodejs\", \"the name of nodejs\", \"PATH\"),\n-          optopt(\"\", \"remote-test-client\", \"path to the remote test client\", \"PATH\"),\n-          optflag(\"h\", \"help\", \"show this message\")];\n+    let mut opts = Options::new();\n+    opts.reqopt(\"\", \"compile-lib-path\", \"path to host shared libraries\", \"PATH\")\n+        .reqopt(\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\")\n+        .reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\")\n+        .reqopt(\"\", \"rustdoc-path\", \"path to rustdoc to use for compiling\", \"PATH\")\n+        .reqopt(\"\", \"lldb-python\", \"path to python to use for doc tests\", \"PATH\")\n+        .reqopt(\"\", \"docck-python\", \"path to python to use for doc tests\", \"PATH\")\n+        .optopt(\"\", \"valgrind-path\", \"path to Valgrind executable for Valgrind tests\", \"PROGRAM\")\n+        .optflag(\"\", \"force-valgrind\", \"fail if Valgrind tests cannot be run under Valgrind\")\n+        .optopt(\"\", \"llvm-filecheck\", \"path to LLVM's FileCheck binary\", \"DIR\")\n+        .reqopt(\"\", \"src-base\", \"directory to scan for test files\", \"PATH\")\n+        .reqopt(\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\")\n+        .reqopt(\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\")\n+        .reqopt(\"\", \"mode\", \"which sort of compile tests to run\",\n+                \"(compile-fail|parse-fail|run-fail|run-pass|\\\n+                 run-pass-valgrind|pretty|debug-info|incremental|mir-opt)\")\n+        .optflag(\"\", \"ignored\", \"run tests marked as ignored\")\n+        .optflag(\"\", \"exact\", \"filters match exactly\")\n+        .optopt(\"\", \"runtool\", \"supervisor program to run tests under \\\n+                                (eg. emulator, valgrind)\", \"PROGRAM\")\n+        .optopt(\"\", \"host-rustcflags\", \"flags to pass to rustc for host\", \"FLAGS\")\n+        .optopt(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\")\n+        .optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\")\n+        .optflag(\"\", \"quiet\", \"print one character per test instead of one line\")\n+        .optopt(\"\", \"color\", \"coloring: auto, always, never\", \"WHEN\")\n+        .optopt(\"\", \"logfile\", \"file to log test execution to\", \"FILE\")\n+        .optopt(\"\", \"target\", \"the target to build for\", \"TARGET\")\n+        .optopt(\"\", \"host\", \"the host to build for\", \"HOST\")\n+        .optopt(\"\", \"gdb\", \"path to GDB to use for GDB debuginfo tests\", \"PATH\")\n+        .optopt(\"\", \"lldb-version\", \"the version of LLDB used\", \"VERSION STRING\")\n+        .optopt(\"\", \"llvm-version\", \"the version of LLVM used\", \"VERSION STRING\")\n+        .optflag(\"\", \"system-llvm\", \"is LLVM the system LLVM\")\n+        .optopt(\"\", \"android-cross-path\", \"Android NDK standalone path\", \"PATH\")\n+        .optopt(\"\", \"adb-path\", \"path to the android debugger\", \"PATH\")\n+        .optopt(\"\", \"adb-test-dir\", \"path to tests for the android debugger\", \"PATH\")\n+        .optopt(\"\", \"lldb-python-dir\", \"directory containing LLDB's python module\", \"PATH\")\n+        .reqopt(\"\", \"cc\", \"path to a C compiler\", \"PATH\")\n+        .reqopt(\"\", \"cxx\", \"path to a C++ compiler\", \"PATH\")\n+        .reqopt(\"\", \"cflags\", \"flags for the C compiler\", \"FLAGS\")\n+        .reqopt(\"\", \"llvm-components\", \"list of LLVM components built in\", \"LIST\")\n+        .reqopt(\"\", \"llvm-cxxflags\", \"C++ flags for LLVM\", \"FLAGS\")\n+        .optopt(\"\", \"nodejs\", \"the name of nodejs\", \"PATH\")\n+        .optopt(\"\", \"remote-test-client\", \"path to the remote test client\", \"PATH\")\n+        .optflag(\"h\", \"help\", \"show this message\");\n \n     let (argv0, args_) = args.split_first().unwrap();\n     if args.len() == 1 || args[1] == \"-h\" || args[1] == \"--help\" {\n         let message = format!(\"Usage: {} [OPTIONS] [TESTNAME...]\", argv0);\n-        println!(\"{}\", getopts::usage(&message, &groups));\n+        println!(\"{}\", opts.usage(&message));\n         println!(\"\");\n         panic!()\n     }\n \n     let matches =\n-        &match getopts::getopts(args_, &groups) {\n+        &match opts.parse(args_) {\n           Ok(m) => m,\n           Err(f) => panic!(\"{:?}\", f)\n         };\n \n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n         let message = format!(\"Usage: {} [OPTIONS]  [TESTNAME...]\", argv0);\n-        println!(\"{}\", getopts::usage(&message, &groups));\n+        println!(\"{}\", opts.usage(&message));\n         println!(\"\");\n         panic!()\n     }"}]}