{"sha": "6a9c5fb4cc499bc828422e32689c8f098542f821", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOWM1ZmI0Y2M0OTliYzgyODQyMmUzMjY4OWM4ZjA5ODU0MmY4MjE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-22T10:50:26Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-22T15:02:58Z"}, "message": "polymorphize GlobalAlloc::Function", "tree": {"sha": "867936b0cdc53888974da8b4bda8284c15fdfa09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/867936b0cdc53888974da8b4bda8284c15fdfa09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a9c5fb4cc499bc828422e32689c8f098542f821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a9c5fb4cc499bc828422e32689c8f098542f821", "html_url": "https://github.com/rust-lang/rust/commit/6a9c5fb4cc499bc828422e32689c8f098542f821", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a9c5fb4cc499bc828422e32689c8f098542f821/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e22b61bff0bdd08be7665607cb7be3748c8a35d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e22b61bff0bdd08be7665607cb7be3748c8a35d2", "html_url": "https://github.com/rust-lang/rust/commit/e22b61bff0bdd08be7665607cb7be3748c8a35d2"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "2a50d4a46d279436ade2897007f8615097f59b7a", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a9c5fb4cc499bc828422e32689c8f098542f821/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a9c5fb4cc499bc828422e32689c8f098542f821/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=6a9c5fb4cc499bc828422e32689c8f098542f821", "patch": "@@ -257,7 +257,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                         (value, AddressSpace::DATA)\n                     }\n                     GlobalAlloc::Function(fn_instance) => (\n-                        self.get_fn_addr(fn_instance),\n+                        self.get_fn_addr(fn_instance.polymorphize(self.tcx)),\n                         self.data_layout().instruction_address_space,\n                     ),\n                     GlobalAlloc::Static(def_id) => {"}, {"sha": "30d25270f03e57587646db384fe596aa31b8c139", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a9c5fb4cc499bc828422e32689c8f098542f821/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a9c5fb4cc499bc828422e32689c8f098542f821/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=6a9c5fb4cc499bc828422e32689c8f098542f821", "patch": "@@ -1197,6 +1197,7 @@ fn collect_miri<'tcx>(\n             }\n         }\n         GlobalAlloc::Function(fn_instance) => {\n+            let fn_instance = fn_instance.polymorphize(tcx);\n             if should_codegen_locally(tcx, &fn_instance) {\n                 trace!(\"collecting {:?} with {:#?}\", alloc_id, fn_instance);\n                 output.push(create_fn_mono_item(tcx, fn_instance, DUMMY_SP));"}, {"sha": "0d3af7a89c2aac2936426d8992c880c9dbd2511c", "filename": "src/test/ui/polymorphization/promoted-function.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6a9c5fb4cc499bc828422e32689c8f098542f821/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a9c5fb4cc499bc828422e32689c8f098542f821/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function.rs?ref=6a9c5fb4cc499bc828422e32689c8f098542f821", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+fn fop<T>() {}\n+\n+fn bar<T>() -> &'static fn() {\n+    &(fop::<T> as fn())\n+}\n+pub const FN: &'static fn() = &(fop::<i32> as fn());\n+\n+fn main() {\n+    bar::<u32>();\n+    bar::<i32>();\n+    (FN)();\n+}"}]}