{"sha": "f25811e34bf89c3dde760d826ad4662c245be202", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNTgxMWUzNGJmODljM2RkZTc2MGQ4MjZhZDQ2NjJjMjQ1YmUyMDI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-07-05T19:58:46Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-07-05T19:58:46Z"}, "message": "Replace early-bound normalization hack with per-query key/value type aliases.", "tree": {"sha": "df11fc9e30921eb7bf973899e11b9a82071d8f88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df11fc9e30921eb7bf973899e11b9a82071d8f88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f25811e34bf89c3dde760d826ad4662c245be202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f25811e34bf89c3dde760d826ad4662c245be202", "html_url": "https://github.com/rust-lang/rust/commit/f25811e34bf89c3dde760d826ad4662c245be202", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f25811e34bf89c3dde760d826ad4662c245be202/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "html_url": "https://github.com/rust-lang/rust/commit/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "a1c586b3283c20db344cd5e9cfc68a2bc3bc8125", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f25811e34bf89c3dde760d826ad4662c245be202/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25811e34bf89c3dde760d826ad4662c245be202/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=f25811e34bf89c3dde760d826ad4662c245be202", "patch": "@@ -17,7 +17,6 @@ use rustc_middle::middle::cstore::{CrateSource, CrateStore, EncodedMetadata};\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::query::QueryConfig;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::{CrateDisambiguator, Session};\n@@ -32,12 +31,10 @@ macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n       $($name:ident => $compute:block)*) => {\n         pub fn provide_extern<$lt>(providers: &mut Providers<$lt>) {\n-            // HACK(eddyb) `$lt: $lt` forces `$lt` to be early-bound, which\n-            // allows the associated type in the return type to be normalized.\n-            $(fn $name<$lt: $lt, T: IntoArgs>(\n+            $(fn $name<$lt>(\n                 $tcx: TyCtxt<$lt>,\n-                def_id_arg: T,\n-            ) -> <ty::queries::$name<$lt> as QueryConfig<TyCtxt<$lt>>>::Value {\n+                def_id_arg: ty::query::query_keys::$name<$lt>,\n+            ) -> ty::query::query_values::$name<$lt> {\n                 let _prof_timer =\n                     $tcx.prof.generic_activity(\"metadata_decode_entry\");\n "}, {"sha": "de79a33fac46217c752e493327bcb2879021651b", "filename": "src/librustc_middle/ty/query/plumbing.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f25811e34bf89c3dde760d826ad4662c245be202/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25811e34bf89c3dde760d826ad4662c245be202/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs?ref=f25811e34bf89c3dde760d826ad4662c245be202", "patch": "@@ -318,15 +318,34 @@ macro_rules! define_queries_inner {\n             }\n         }\n \n+        #[allow(nonstandard_style)]\n         pub mod queries {\n             use std::marker::PhantomData;\n \n-            $(#[allow(nonstandard_style)]\n-            pub struct $name<$tcx> {\n+            $(pub struct $name<$tcx> {\n                 data: PhantomData<&$tcx ()>\n             })*\n         }\n \n+        // HACK(eddyb) this is like the `impl QueryConfig for queries::$name`\n+        // below, but using type aliases instead of associated types, to bypass\n+        // the limitations around normalizing under HRTB - for example, this:\n+        // `for<'tcx> fn(...) -> <queries::$name<'tcx> as QueryConfig<TyCtxt<'tcx>>>::Value`\n+        // doesn't currently normalize to `for<'tcx> fn(...) -> query_values::$name<'tcx>`.\n+        // This is primarily used by the `provide!` macro in `rustc_metadata`.\n+        #[allow(nonstandard_style, unused_lifetimes)]\n+        pub mod query_keys {\n+            use super::*;\n+\n+            $(pub type $name<$tcx> = $($K)*;)*\n+        }\n+        #[allow(nonstandard_style, unused_lifetimes)]\n+        pub mod query_values {\n+            use super::*;\n+\n+            $(pub type $name<$tcx> = $V;)*\n+        }\n+\n         $(impl<$tcx> QueryConfig<TyCtxt<$tcx>> for queries::$name<$tcx> {\n             type Key = $($K)*;\n             type Value = $V;"}]}