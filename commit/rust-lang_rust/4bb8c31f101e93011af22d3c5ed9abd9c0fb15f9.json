{"sha": "4bb8c31f101e93011af22d3c5ed9abd9c0fb15f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYjhjMzFmMTAxZTkzMDExYWYyMmQzYzVlZDlhYmQ5YzBmYjE1Zjk=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-24T22:43:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-24T22:43:50Z"}, "message": "Rollup merge of #52668 - RalfJung:ptr-doc, r=cramertj\n\nclarify pointer offset function safety concerns", "tree": {"sha": "c2ecf4e6a64db6b5a052167022b616a14dcb3cbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2ecf4e6a64db6b5a052167022b616a14dcb3cbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bb8c31f101e93011af22d3c5ed9abd9c0fb15f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbV6umCRBK7hj4Ov3rIwAAdHIIACmGV7d2TpXvJQe3d1ZSbHc6\nBD89Ek6sNrmOuQKUWwXUEKw27q8z4ywjRFAZPp7azrdx5MvenPifbzP7dT30Yf/W\nc/N2Ut2p9WPfffZwmzd7jXiZOFLk0t+ubNRCAg3gTsPIK8pYZRla3VFlVvftGyHf\nNraJFMFSQoRnT9xJl9BF0ujfFlM2GDDMLUFgjqHbfEiHoqeCu/DvBazwCo50cSYJ\n1y/iFfabocEC5WjYHG1Zix4QanhTKatSvcjMQo6UgfpTY8w3lBiKDlZ7vPHL8xML\njP5LXTz7rQ5oJbLA7peiIDD5KmlO2TkglenkuYryisNx3zaRRKVa467bKJdKUmE=\n=dYfO\n-----END PGP SIGNATURE-----\n", "payload": "tree c2ecf4e6a64db6b5a052167022b616a14dcb3cbe\nparent c7a178ea5f84620508efbee96fb1da287c1a779d\nparent fb089156220ec2932b11de21226296c7fe3503f3\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1532472230 -0600\ncommitter GitHub <noreply@github.com> 1532472230 -0600\n\nRollup merge of #52668 - RalfJung:ptr-doc, r=cramertj\n\nclarify pointer offset function safety concerns\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb8c31f101e93011af22d3c5ed9abd9c0fb15f9", "html_url": "https://github.com/rust-lang/rust/commit/4bb8c31f101e93011af22d3c5ed9abd9c0fb15f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bb8c31f101e93011af22d3c5ed9abd9c0fb15f9/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7a178ea5f84620508efbee96fb1da287c1a779d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a178ea5f84620508efbee96fb1da287c1a779d", "html_url": "https://github.com/rust-lang/rust/commit/c7a178ea5f84620508efbee96fb1da287c1a779d"}, {"sha": "fb089156220ec2932b11de21226296c7fe3503f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb089156220ec2932b11de21226296c7fe3503f3", "html_url": "https://github.com/rust-lang/rust/commit/fb089156220ec2932b11de21226296c7fe3503f3"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "be82ab44cd1fcbf3b00d40ce528652d0aebc223d", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4bb8c31f101e93011af22d3c5ed9abd9c0fb15f9/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb8c31f101e93011af22d3c5ed9abd9c0fb15f9/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=4bb8c31f101e93011af22d3c5ed9abd9c0fb15f9", "patch": "@@ -591,7 +591,7 @@ impl<T: ?Sized> *const T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of an allocated object.\n+    ///   byte past the end of *the same* allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -643,9 +643,15 @@ impl<T: ?Sized> *const T {\n     ///\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// In particular, the resulting pointer may *not* be used to access a\n+    /// different allocated object than the one `self` points to. In other\n+    /// words, `x.wrapping_offset(y.wrapping_offset_from(x))` is\n+    /// *not* the same as `y`, and dereferencing it is undefined behavior\n+    /// unless `x` and `y` point into the same allocated object.\n     ///\n     /// Always use `.offset(count)` instead when possible, because `offset`\n-    /// allows the compiler to optimize better.\n+    /// allows the compiler to optimize better.  If you need to cross object\n+    /// boundaries, cast the pointer to an integer and do the arithmetic there.\n     ///\n     /// # Examples\n     ///\n@@ -1340,7 +1346,7 @@ impl<T: ?Sized> *mut T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of an allocated object.\n+    ///   byte past the end of *the same* allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -1391,9 +1397,15 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// In particular, the resulting pointer may *not* be used to access a\n+    /// different allocated object than the one `self` points to. In other\n+    /// words, `x.wrapping_offset(y.wrapping_offset_from(x))` is\n+    /// *not* the same as `y`, and dereferencing it is undefined behavior\n+    /// unless `x` and `y` point into the same allocated object.\n     ///\n     /// Always use `.offset(count)` instead when possible, because `offset`\n-    /// allows the compiler to optimize better.\n+    /// allows the compiler to optimize better.  If you need to cross object\n+    /// boundaries, cast the pointer to an integer and do the arithmetic there.\n     ///\n     /// # Examples\n     ///"}]}