{"sha": "1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZGU2ZTNmY2IzMmNhMDBjZjhhOGRmYTA5NzdlNDdmN2Y0YTc3YmY=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-06-06T06:18:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-07T02:51:31Z"}, "message": "Rename Iterator::len to count\n\nThis commit carries out the request from issue #14678:\n\n> The method `Iterator::len()` is surprising, as all the other uses of\n> `len()` do not consume the value. `len()` would make more sense to be\n> called `count()`, but that would collide with the current\n> `Iterator::count(|T| -> bool) -> unit` method. That method, however, is\n> a bit redundant, and can be easily replaced with\n> `iter.filter(|x| x < 5).count()`.\n> After this change, we could then define the `len()` method\n> on `iter::ExactSize`.\n\nCloses #14678.\n\n[breaking-change]", "tree": {"sha": "f5b2c5f46adc3cdc83e596445cc91e5112ea68b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5b2c5f46adc3cdc83e596445cc91e5112ea68b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "html_url": "https://github.com/rust-lang/rust/commit/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bc29924dc8f88c2c118b688f25ffa7c6a212276", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc29924dc8f88c2c118b688f25ffa7c6a212276", "html_url": "https://github.com/rust-lang/rust/commit/1bc29924dc8f88c2c118b688f25ffa7c6a212276"}], "stats": {"total": 161, "additions": 78, "deletions": 83}, "files": [{"sha": "8da984a414bdad019cb1df8b8985030ee1da82c5", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -1545,7 +1545,7 @@ fn disassemble_extract(config: &Config, _props: &TestProps,\n fn count_extracted_lines(p: &Path) -> uint {\n     let x = File::open(&p.with_extension(\"ll\")).read_to_end().unwrap();\n     let x = str::from_utf8(x.as_slice()).unwrap();\n-    x.lines().len()\n+    x.lines().count()\n }\n \n "}, {"sha": "58f081b25e3e541f820ce60fa46738c7850624cc", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -241,17 +241,17 @@ enum Op {Union, Intersect, Assign, Difference}\n /// bv.set(5, true);\n /// bv.set(7, true);\n /// println!(\"{}\", bv.to_str());\n-/// println!(\"total bits set to true: {}\", bv.iter().count(|x| x));\n+/// println!(\"total bits set to true: {}\", bv.iter().filter(|x| *x).count());\n ///\n /// // flip all values in bitvector, producing non-primes less than 10\n /// bv.negate();\n /// println!(\"{}\", bv.to_str());\n-/// println!(\"total bits set to true: {}\", bv.iter().count(|x| x));\n+/// println!(\"total bits set to true: {}\", bv.iter().filter(|x| *x).count());\n ///\n /// // reset bitvector to empty\n /// bv.clear();\n /// println!(\"{}\", bv.to_str());\n-/// println!(\"total bits set to true: {}\", bv.iter().count(|x| x));\n+/// println!(\"total bits set to true: {}\", bv.iter().filter(|x| *x).count());\n /// ```\n #[deriving(Clone)]\n pub struct Bitv {\n@@ -461,7 +461,7 @@ impl Bitv {\n     /// bv.set(5, true);\n     /// bv.set(8, true);\n     /// // Count bits set to 1; result should be 5\n-    /// println!(\"{}\", bv.iter().count(|x| x));\n+    /// println!(\"{}\", bv.iter().filter(|x| *x).count());\n     /// ```\n     #[inline]\n     pub fn iter<'a>(&'a self) -> Bits<'a> {"}, {"sha": "94c617b58e8d2683ae20224cfabb349b8883663f", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -1131,31 +1131,31 @@ mod tests {\n         let v = &[0, ..128];\n         let m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n-            assert!(m.iter().len() == 128);\n+            assert!(m.iter().count() == 128);\n         })\n     }\n     #[bench]\n     fn bench_iter_mut(b: &mut test::Bencher) {\n         let v = &[0, ..128];\n         let mut m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n-            assert!(m.mut_iter().len() == 128);\n+            assert!(m.mut_iter().count() == 128);\n         })\n     }\n     #[bench]\n     fn bench_iter_rev(b: &mut test::Bencher) {\n         let v = &[0, ..128];\n         let m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n-            assert!(m.iter().rev().len() == 128);\n+            assert!(m.iter().rev().count() == 128);\n         })\n     }\n     #[bench]\n     fn bench_iter_mut_rev(b: &mut test::Bencher) {\n         let v = &[0, ..128];\n         let mut m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n-            assert!(m.mut_iter().rev().len() == 128);\n+            assert!(m.mut_iter().rev().count() == 128);\n         })\n     }\n }"}, {"sha": "e631b8b77cf9cb6ac814fd01e66766d670603d7a", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -2155,7 +2155,7 @@ mod tests {\n     #[test]\n     fn test_mut_splitator() {\n         let mut xs = [0,1,0,2,3,0,0,4,5,0];\n-        assert_eq!(xs.mut_split(|x| *x == 0).len(), 6);\n+        assert_eq!(xs.mut_split(|x| *x == 0).count(), 6);\n         for slice in xs.mut_split(|x| *x == 0) {\n             slice.reverse();\n         }"}, {"sha": "f3118181bdcdd148f682b96e3b9d73360e8f28e3", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -31,7 +31,7 @@ pub struct SmallIntMap<T> {\n impl<V> Container for SmallIntMap<V> {\n     /// Return the number of elements in the map\n     fn len(&self) -> uint {\n-        self.v.iter().count(|elt| elt.is_some())\n+        self.v.iter().filter(|elt| elt.is_some()).count()\n     }\n \n     /// Return true if there are no elements in the map"}, {"sha": "5fd133b450f7610717d4b7eee023daae0808bb52", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -2181,7 +2181,7 @@ mod bench {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n         let len = s.char_len();\n \n-        b.iter(|| assert_eq!(s.chars().len(), len));\n+        b.iter(|| assert_eq!(s.chars().count(), len));\n     }\n \n     #[bench]\n@@ -2194,38 +2194,38 @@ mod bench {\n         Mary had a little lamb, Little lamb\";\n         let len = s.char_len();\n \n-        b.iter(|| assert_eq!(s.chars().len(), len));\n+        b.iter(|| assert_eq!(s.chars().count(), len));\n     }\n \n     #[bench]\n     fn char_iterator_rev(b: &mut Bencher) {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n         let len = s.char_len();\n \n-        b.iter(|| assert_eq!(s.chars().rev().len(), len));\n+        b.iter(|| assert_eq!(s.chars().rev().count(), len));\n     }\n \n     #[bench]\n     fn char_indicesator(b: &mut Bencher) {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n         let len = s.char_len();\n \n-        b.iter(|| assert_eq!(s.char_indices().len(), len));\n+        b.iter(|| assert_eq!(s.char_indices().count(), len));\n     }\n \n     #[bench]\n     fn char_indicesator_rev(b: &mut Bencher) {\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n         let len = s.char_len();\n \n-        b.iter(|| assert_eq!(s.char_indices().rev().len(), len));\n+        b.iter(|| assert_eq!(s.char_indices().rev().count(), len));\n     }\n \n     #[bench]\n     fn split_unicode_ascii(b: &mut Bencher) {\n         let s = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n \n-        b.iter(|| assert_eq!(s.split('V').len(), 3));\n+        b.iter(|| assert_eq!(s.split('V').count(), 3));\n     }\n \n     #[bench]\n@@ -2240,16 +2240,16 @@ mod bench {\n         }\n         let s = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n \n-        b.iter(|| assert_eq!(s.split(NotAscii('V')).len(), 3));\n+        b.iter(|| assert_eq!(s.split(NotAscii('V')).count(), 3));\n     }\n \n \n     #[bench]\n     fn split_ascii(b: &mut Bencher) {\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n-        let len = s.split(' ').len();\n+        let len = s.split(' ').count();\n \n-        b.iter(|| assert_eq!(s.split(' ').len(), len));\n+        b.iter(|| assert_eq!(s.split(' ').count(), len));\n     }\n \n     #[bench]\n@@ -2264,34 +2264,34 @@ mod bench {\n             fn only_ascii(&self) -> bool { false }\n         }\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n-        let len = s.split(' ').len();\n+        let len = s.split(' ').count();\n \n-        b.iter(|| assert_eq!(s.split(NotAscii(' ')).len(), len));\n+        b.iter(|| assert_eq!(s.split(NotAscii(' ')).count(), len));\n     }\n \n     #[bench]\n     fn split_extern_fn(b: &mut Bencher) {\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n-        let len = s.split(' ').len();\n+        let len = s.split(' ').count();\n         fn pred(c: char) -> bool { c == ' ' }\n \n-        b.iter(|| assert_eq!(s.split(pred).len(), len));\n+        b.iter(|| assert_eq!(s.split(pred).count(), len));\n     }\n \n     #[bench]\n     fn split_closure(b: &mut Bencher) {\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n-        let len = s.split(' ').len();\n+        let len = s.split(' ').count();\n \n-        b.iter(|| assert_eq!(s.split(|c: char| c == ' ').len(), len));\n+        b.iter(|| assert_eq!(s.split(|c: char| c == ' ').count(), len));\n     }\n \n     #[bench]\n     fn split_slice(b: &mut Bencher) {\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n-        let len = s.split(' ').len();\n+        let len = s.split(' ').count();\n \n-        b.iter(|| assert_eq!(s.split(&[' ']).len(), len));\n+        b.iter(|| assert_eq!(s.split(&[' ']).count(), len));\n     }\n \n     #[bench]"}, {"sha": "6ca21262f51cc8754bdcc6fb7120577377edf9fc", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -1772,23 +1772,23 @@ mod tests {\n         assert_eq!(v.pop(), Some(()));\n         assert_eq!(v.pop(), None);\n \n-        assert_eq!(v.iter().len(), 0);\n+        assert_eq!(v.iter().count(), 0);\n         v.push(());\n-        assert_eq!(v.iter().len(), 1);\n+        assert_eq!(v.iter().count(), 1);\n         v.push(());\n-        assert_eq!(v.iter().len(), 2);\n+        assert_eq!(v.iter().count(), 2);\n \n         for &() in v.iter() {}\n \n-        assert_eq!(v.mut_iter().len(), 2);\n+        assert_eq!(v.mut_iter().count(), 2);\n         v.push(());\n-        assert_eq!(v.mut_iter().len(), 3);\n+        assert_eq!(v.mut_iter().count(), 3);\n         v.push(());\n-        assert_eq!(v.mut_iter().len(), 4);\n+        assert_eq!(v.mut_iter().count(), 4);\n \n         for &() in v.mut_iter() {}\n         unsafe { v.set_len(0); }\n-        assert_eq!(v.mut_iter().len(), 0);\n+        assert_eq!(v.mut_iter().count(), 0);\n     }\n \n     #[test]"}, {"sha": "64c53b658eff12006d8b3d5e974a339fcf78a986", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -529,11 +529,11 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n-    /// assert!(it.len() == 5);\n-    /// assert!(it.len() == 0);\n+    /// assert!(it.count() == 5);\n+    /// assert!(it.count() == 0);\n     /// ```\n     #[inline]\n-    fn len(&mut self) -> uint {\n+    fn count(&mut self) -> uint {\n         self.fold(0, |cnt, _x| cnt + 1)\n     }\n \n@@ -591,16 +591,6 @@ pub trait Iterator<A> {\n         None\n     }\n \n-    /// Count the number of elements satisfying the specified predicate\n-    #[inline]\n-    fn count(&mut self, predicate: |A| -> bool) -> uint {\n-        let mut i = 0;\n-        for x in *self {\n-            if predicate(x) { i += 1 }\n-        }\n-        i\n-    }\n-\n     /// Return the element that gives the maximum value from the\n     /// specified function.\n     ///\n@@ -738,6 +728,14 @@ pub trait ExactSize<A> : DoubleEndedIterator<A> {\n         }\n         None\n     }\n+\n+    #[inline]\n+    /// Return the exact length of the iterator.\n+    fn len(&self) -> uint {\n+        let (lower, upper) = self.size_hint();\n+        assert!(upper == Some(lower));\n+        lower\n+    }\n }\n \n // All adaptors that preserve the size of the wrapped iterator are fine\n@@ -2594,9 +2592,9 @@ mod tests {\n     #[test]\n     fn test_iterator_len() {\n         let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-        assert_eq!(v.slice(0, 4).iter().len(), 4);\n-        assert_eq!(v.slice(0, 10).iter().len(), 10);\n-        assert_eq!(v.slice(0, 0).iter().len(), 0);\n+        assert_eq!(v.slice(0, 4).iter().count(), 4);\n+        assert_eq!(v.slice(0, 10).iter().count(), 10);\n+        assert_eq!(v.slice(0, 0).iter().count(), 0);\n     }\n \n     #[test]\n@@ -2712,9 +2710,9 @@ mod tests {\n     #[test]\n     fn test_count() {\n         let xs = &[1, 2, 2, 1, 5, 9, 0, 2];\n-        assert_eq!(xs.iter().count(|x| *x == 2), 3);\n-        assert_eq!(xs.iter().count(|x| *x == 5), 1);\n-        assert_eq!(xs.iter().count(|x| *x == 95), 0);\n+        assert_eq!(xs.iter().filter(|x| **x == 2).count(), 3);\n+        assert_eq!(xs.iter().filter(|x| **x == 5).count(), 1);\n+        assert_eq!(xs.iter().filter(|x| **x == 95).count(), 0);\n     }\n \n     #[test]\n@@ -3044,10 +3042,10 @@ mod tests {\n         assert!(range(-10i, -1).collect::<Vec<int>>() ==\n                    vec![-10, -9, -8, -7, -6, -5, -4, -3, -2]);\n         assert!(range(0i, 5).rev().collect::<Vec<int>>() == vec![4, 3, 2, 1, 0]);\n-        assert_eq!(range(200, -5).len(), 0);\n-        assert_eq!(range(200, -5).rev().len(), 0);\n-        assert_eq!(range(200, 200).len(), 0);\n-        assert_eq!(range(200, 200).rev().len(), 0);\n+        assert_eq!(range(200, -5).count(), 0);\n+        assert_eq!(range(200, -5).rev().count(), 0);\n+        assert_eq!(range(200, 200).count(), 0);\n+        assert_eq!(range(200, 200).rev().count(), 0);\n \n         assert_eq!(range(0i, 100).size_hint(), (100, Some(100)));\n         // this test is only meaningful when sizeof uint < sizeof u64\n@@ -3062,8 +3060,8 @@ mod tests {\n                 vec![0i, 1, 2, 3, 4, 5]);\n         assert!(range_inclusive(0i, 5).rev().collect::<Vec<int>>() ==\n                 vec![5i, 4, 3, 2, 1, 0]);\n-        assert_eq!(range_inclusive(200, -5).len(), 0);\n-        assert_eq!(range_inclusive(200, -5).rev().len(), 0);\n+        assert_eq!(range_inclusive(200, -5).count(), 0);\n+        assert_eq!(range_inclusive(200, -5).rev().count(), 0);\n         assert!(range_inclusive(200, 200).collect::<Vec<int>>() == vec![200]);\n         assert!(range_inclusive(200, 200).rev().collect::<Vec<int>>() == vec![200]);\n     }"}, {"sha": "4dea1fd75a4bf16b5923bfa6295c3ea57da661ee", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -252,7 +252,7 @@ pub mod traits {\n     use super::*;\n \n     use cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering, Equiv};\n-    use iter::{order, Iterator};\n+    use iter::order;\n     use container::Container;\n \n     impl<'a,T:PartialEq> PartialEq for &'a [T] {\n@@ -1141,7 +1141,6 @@ impl<'a, T:Clone> MutableCloneableVector<T> for &'a mut [T] {\n /// Unsafe operations\n pub mod raw {\n     use mem::transmute;\n-    use iter::Iterator;\n     use ptr::RawPtr;\n     use raw::Slice;\n     use option::{None, Option, Some};"}, {"sha": "936b698d4b10a771f5f6ed22190025e4862d9d25", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -867,7 +867,6 @@ static TAG_CONT_U8: u8 = 128u8;\n pub mod raw {\n     use mem;\n     use container::Container;\n-    use iter::Iterator;\n     use ptr::RawPtr;\n     use raw::Slice;\n     use slice::{ImmutableVector};\n@@ -1725,7 +1724,7 @@ impl<'a> StrSlice<'a> for &'a str {\n     fn is_alphanumeric(&self) -> bool { self.chars().all(char::is_alphanumeric) }\n \n     #[inline]\n-    fn char_len(&self) -> uint { self.chars().len() }\n+    fn char_len(&self) -> uint { self.chars().count() }\n \n     #[inline]\n     fn slice(&self, begin: uint, end: uint) -> &'a str {"}, {"sha": "cd2f3360f830dd77fec84852a8f271fb65fa5d32", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -351,7 +351,7 @@ fn encode_enum_variant_info(ecx: &EncodeContext,\n fn encode_path<PI: Iterator<PathElem> + Clone>(ebml_w: &mut Encoder,\n                                                mut path: PI) {\n     ebml_w.start_tag(tag_path);\n-    ebml_w.wr_tagged_u32(tag_path_len, path.clone().len() as u32);\n+    ebml_w.wr_tagged_u32(tag_path_len, path.clone().count() as u32);\n     for pe in path {\n         let tag = match pe {\n             ast_map::PathMod(_) => tag_path_elem_mod,"}, {"sha": "9a5f226bb73ceaf5546fcaf9718945d3c430b563", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -82,7 +82,7 @@ fn find_item(item: &Item, ctxt: &mut EntryContext) {\n         ItemFn(..) => {\n             if item.ident.name == ctxt.main_name {\n                  ctxt.ast_map.with_path(item.id, |mut path| {\n-                        if path.len() == 1 {\n+                        if path.count() == 1 {\n                             // This is a top-level function so can be 'main'\n                             if ctxt.main_fn.is_none() {\n                                 ctxt.main_fn = Some((item.id, item.span));"}, {"sha": "bdb23aea06708acd655c29132a739bb99b6b31ae", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -191,11 +191,11 @@ fn ast_path_substs<AC:AstConv,RS:RegionScope>(\n     };\n \n     // Convert the type parameters supplied by the user.\n-    let supplied_ty_param_count = path.segments.iter().flat_map(|s| s.types.iter()).len();\n+    let supplied_ty_param_count = path.segments.iter().flat_map(|s| s.types.iter()).count();\n     let formal_ty_param_count = decl_generics.type_param_defs().len();\n     let required_ty_param_count = decl_generics.type_param_defs().iter()\n                                                .take_while(|x| x.default.is_none())\n-                                               .len();\n+                                               .count();\n     if supplied_ty_param_count < required_ty_param_count {\n         let expected = if required_ty_param_count < formal_ty_param_count {\n             \"expected at least\"\n@@ -407,7 +407,7 @@ pub fn ast_ty_to_builtin_ty<AC:AstConv,\n                     if path.segments\n                            .iter()\n                            .flat_map(|s| s.types.iter())\n-                           .len() > 1 {\n+                           .count() > 1 {\n                         this.tcx()\n                             .sess\n                             .span_err(path.span,"}, {"sha": "d25fc9cc5bcdb298abd9cd49517d9d4d487739ae", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -1615,7 +1615,7 @@ fn check_type_parameter_positions_in_path(function_context: &FnCtxt,\n             let formal_ty_param_count = generics.type_param_defs().len();\n             let required_ty_param_count = generics.type_param_defs().iter()\n                                                   .take_while(|x| x.default.is_none())\n-                                                  .len();\n+                                                  .count();\n             let supplied_ty_param_count = trait_segment.types.len();\n             if supplied_ty_param_count < required_ty_param_count {\n                 let msg = if required_ty_param_count < generics.type_param_defs().len() {\n@@ -3876,7 +3876,7 @@ pub fn instantiate_path(fcx: &FnCtxt,\n     let ty_param_count = tpt.generics.type_param_defs().len();\n     let ty_param_req = tpt.generics.type_param_defs().iter()\n                                                    .take_while(|x| x.default.is_none())\n-                                                   .len();\n+                                                   .count();\n     let mut ty_substs_len = 0;\n     for segment in pth.segments.iter() {\n         ty_substs_len += segment.types.len()"}, {"sha": "eb84ed32335b95ba7b09667dda38eaa5d01b86ee", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -456,7 +456,7 @@ pub fn parameterized(cx: &ctxt,\n                 Some(default) => default.subst(cx, &substs) == actual,\n                 None => false\n             }\n-        }).len()\n+        }).count()\n     } else {\n         0\n     };"}, {"sha": "20d4d677bc08bb8267ecca2eb234af2dfdcdaaba", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -2043,7 +2043,7 @@ fn build_sidebar(m: &clean::Module) -> HashMap<String, Vec<String>> {\n impl<'a> fmt::Show for Source<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let Source(s) = *self;\n-        let lines = s.lines().len();\n+        let lines = s.lines().count();\n         let mut cols = 0;\n         let mut tmp = lines;\n         while tmp > 0 {"}, {"sha": "5bc6d8031ac29754970897aae18b3e904b9b69de", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -32,7 +32,7 @@ pub struct Toc {\n \n impl Toc {\n     fn count_entries_with_level(&self, level: u32) -> uint {\n-        self.entries.iter().count(|e| e.level == level)\n+        self.entries.iter().filter(|e| e.level == level).count()\n     }\n }\n "}, {"sha": "133a8db90facc6832ab16c6ff82ef74b59c44d95", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -13,7 +13,6 @@\n use char;\n use clone::Clone;\n use container::Container;\n-use iter::Iterator;\n use num::{NumCast, Zero, One, cast, Int};\n use num::{Float, FPNaN, FPInfinite, ToPrimitive};\n use num;"}, {"sha": "ee1935628871e52115f95b126fd0f92691c5d465", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -353,17 +353,17 @@ mod test {\n     #[test]\n     fn test_gen_ascii_str() {\n         let mut r = task_rng();\n-        assert_eq!(r.gen_ascii_chars().take(0).len(), 0u);\n-        assert_eq!(r.gen_ascii_chars().take(10).len(), 10u);\n-        assert_eq!(r.gen_ascii_chars().take(16).len(), 16u);\n+        assert_eq!(r.gen_ascii_chars().take(0).count(), 0u);\n+        assert_eq!(r.gen_ascii_chars().take(10).count(), 10u);\n+        assert_eq!(r.gen_ascii_chars().take(16).count(), 16u);\n     }\n \n     #[test]\n     fn test_gen_vec() {\n         let mut r = task_rng();\n-        assert_eq!(r.gen_iter::<u8>().take(0).len(), 0u);\n-        assert_eq!(r.gen_iter::<u8>().take(10).len(), 10u);\n-        assert_eq!(r.gen_iter::<f64>().take(16).len(), 16u);\n+        assert_eq!(r.gen_iter::<u8>().take(0).count(), 0u);\n+        assert_eq!(r.gen_iter::<u8>().take(10).count(), 10u);\n+        assert_eq!(r.gen_iter::<f64>().take(16).count(), 16u);\n     }\n \n     #[test]"}, {"sha": "fe6d84d4d2e2a4bb6cf24bde1e2ab8b9459de83d", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -84,7 +84,7 @@ fn demangle(writer: &mut Writer, s: &str) -> IoResult<()> {\n             if i == 0 {\n                 valid = chars.next().is_none();\n                 break\n-            } else if chars.by_ref().take(i - 1).len() != i - 1 {\n+            } else if chars.by_ref().take(i - 1).count() != i - 1 {\n                 valid = false;\n             }\n         }"}, {"sha": "f9b542dea56f0f082cdb42c71fb39a20a8641e6d", "filename": "src/test/run-pass/issue-13204.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Ftest%2Frun-pass%2Fissue-13204.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf/src%2Ftest%2Frun-pass%2Fissue-13204.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13204.rs?ref=1bde6e3fcb32ca00cf8a8dfa0977e47f7f4a77bf", "patch": "@@ -14,7 +14,7 @@\n pub trait Foo {\n     fn bar<'a, I: Iterator<&'a ()>>(&self, it: I) -> uint {\n         let mut xs = it.filter(|_| true);\n-        xs.len()\n+        xs.count()\n     }\n }\n "}]}