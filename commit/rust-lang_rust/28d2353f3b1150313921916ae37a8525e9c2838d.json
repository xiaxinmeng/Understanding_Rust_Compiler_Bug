{"sha": "28d2353f3b1150313921916ae37a8525e9c2838d", "node_id": "C_kwDOAAsO6NoAKDI4ZDIzNTNmM2IxMTUwMzEzOTIxOTE2YWUzN2E4NTI1ZTljMjgzOGQ", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-06T23:57:51Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-11T03:23:26Z"}, "message": "Update some comments post the side channel removal", "tree": {"sha": "d23aaeabc6d2869bdc23c66194cd5175e4ca139f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d23aaeabc6d2869bdc23c66194cd5175e4ca139f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28d2353f3b1150313921916ae37a8525e9c2838d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28d2353f3b1150313921916ae37a8525e9c2838d", "html_url": "https://github.com/rust-lang/rust/commit/28d2353f3b1150313921916ae37a8525e9c2838d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28d2353f3b1150313921916ae37a8525e9c2838d/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "895fa9cd5c79b5c30614852c4c74a963b3ec458a", "url": "https://api.github.com/repos/rust-lang/rust/commits/895fa9cd5c79b5c30614852c4c74a963b3ec458a", "html_url": "https://github.com/rust-lang/rust/commit/895fa9cd5c79b5c30614852c4c74a963b3ec458a"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "adeafc0d7589c6aed1669f7d83cf5269bf83cd4b", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28d2353f3b1150313921916ae37a8525e9c2838d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d2353f3b1150313921916ae37a8525e9c2838d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=28d2353f3b1150313921916ae37a8525e9c2838d", "patch": "@@ -705,10 +705,8 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         }))\n     }\n \n-    /// Returns:\n-    /// - None if no associated item was found\n-    /// - Some((_, _, Some(_))) if an item was found and should go through a side channel\n-    /// - Some((_, _, None)) otherwise\n+    /// Resolve an associated item, returning its containing page's `Res`\n+    /// and the fragment targeting the associated item on its page.\n     fn resolve_associated_item(\n         &mut self,\n         root_res: Res,\n@@ -1475,7 +1473,6 @@ impl LinkCollector<'_, '_> {\n         diag: DiagnosticInfo<'_>,\n         cache_resolution_failure: bool,\n     ) -> Option<(Res, Option<UrlFragment>)> {\n-        // Try to look up both the result and the corresponding side channel value\n         if let Some(ref cached) = self.visited_links.get(&key) {\n             match cached {\n                 Some(cached) => {"}]}