{"sha": "ee98dc8b3bdff99591630ca225f4769201100603", "node_id": "C_kwDOAAsO6NoAKGVlOThkYzhiM2JkZmY5OTU5MTYzMGNhMjI1ZjQ3NjkyMDExMDA2MDM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-06T23:57:29Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-24T16:40:59Z"}, "message": "restore spans for issue-50480", "tree": {"sha": "08bc11972a98af3d1a60eb655fc2cafe27cf9079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08bc11972a98af3d1a60eb655fc2cafe27cf9079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee98dc8b3bdff99591630ca225f4769201100603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee98dc8b3bdff99591630ca225f4769201100603", "html_url": "https://github.com/rust-lang/rust/commit/ee98dc8b3bdff99591630ca225f4769201100603", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee98dc8b3bdff99591630ca225f4769201100603/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ba74369c210a0cdb1b1440c47f19f2145e1640f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ba74369c210a0cdb1b1440c47f19f2145e1640f", "html_url": "https://github.com/rust-lang/rust/commit/8ba74369c210a0cdb1b1440c47f19f2145e1640f"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "c293708dcc9296017383fca25f247c334f6a12f1", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ee98dc8b3bdff99591630ca225f4769201100603/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee98dc8b3bdff99591630ca225f4769201100603/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=ee98dc8b3bdff99591630ca225f4769201100603", "patch": "@@ -50,8 +50,21 @@ pub fn can_type_implement_copy<'tcx>(\n                     continue;\n                 }\n                 let span = tcx.def_span(field.did);\n+                // FIXME(compiler-errors): This gives us better spans for bad\n+                // projection types like in issue-50480.\n+                // If the ADT has substs, point to the cause we are given.\n+                // If it does not, then this field probably doesn't normalize\n+                // to begin with, and point to the bad field's span instead.\n+                let cause = if field\n+                    .ty(tcx, traits::InternalSubsts::identity_for_item(tcx, adt.did))\n+                    .has_param_types_or_consts()\n+                {\n+                    cause.clone()\n+                } else {\n+                    ObligationCause::dummy_with_span(span)\n+                };\n                 let ctx = traits::FulfillmentContext::new();\n-                match traits::fully_normalize(&infcx, ctx, cause.clone(), param_env, ty) {\n+                match traits::fully_normalize(&infcx, ctx, cause, param_env, ty) {\n                     Ok(ty) => {\n                         if !infcx.type_is_copy_modulo_regions(param_env, ty, span) {\n                             infringing.push(field);"}, {"sha": "10597caf5b2dc09759e2a3430a26f592b7938e68", "filename": "src/test/ui/issues/issue-50480.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee98dc8b3bdff99591630ca225f4769201100603/src%2Ftest%2Fui%2Fissues%2Fissue-50480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee98dc8b3bdff99591630ca225f4769201100603/src%2Ftest%2Fui%2Fissues%2Fissue-50480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50480.rs?ref=ee98dc8b3bdff99591630ca225f4769201100603", "patch": "@@ -1,17 +1,17 @@\n #[derive(Clone, Copy)]\n //~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| ERROR `i32` is not an iterator\n struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n //~^ ERROR cannot find type `NotDefined` in this scope\n //~| ERROR cannot find type `NotDefined` in this scope\n //~| ERROR cannot find type `N` in this scope\n //~| ERROR cannot find type `N` in this scope\n+//~| ERROR `i32` is not an iterator\n \n #[derive(Clone, Copy)]\n //~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| ERROR `i32` is not an iterator\n struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n //~^ ERROR cannot find type `NotDefined` in this scope\n //~| ERROR cannot find type `N` in this scope\n+//~| ERROR `i32` is not an iterator\n \n fn main() {}"}, {"sha": "0bb1f9ae03500236017838440ae4aa0125dd5801", "filename": "src/test/ui/issues/issue-50480.stderr", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ee98dc8b3bdff99591630ca225f4769201100603/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee98dc8b3bdff99591630ca225f4769201100603/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr?ref=ee98dc8b3bdff99591630ca225f4769201100603", "patch": "@@ -1,35 +1,35 @@\n error[E0412]: cannot find type `N` in this scope\n-  --> $DIR/issue-50480.rs:4:12\n+  --> $DIR/issue-50480.rs:3:12\n    |\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |           -^ not found in this scope\n    |           |\n    |           help: you might be missing a type parameter: `<N>`\n \n error[E0412]: cannot find type `NotDefined` in this scope\n-  --> $DIR/issue-50480.rs:4:15\n+  --> $DIR/issue-50480.rs:3:15\n    |\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |               ^^^^^^^^^^ not found in this scope\n \n error[E0412]: cannot find type `N` in this scope\n-  --> $DIR/issue-50480.rs:4:12\n+  --> $DIR/issue-50480.rs:3:12\n    |\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |           -^ not found in this scope\n    |           |\n    |           help: you might be missing a type parameter: `<N>`\n \n error[E0412]: cannot find type `NotDefined` in this scope\n-  --> $DIR/issue-50480.rs:4:15\n+  --> $DIR/issue-50480.rs:3:15\n    |\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |           -   ^^^^^^^^^^ not found in this scope\n    |           |\n    |           help: you might be missing a type parameter: `<NotDefined>`\n \n error[E0412]: cannot find type `N` in this scope\n-  --> $DIR/issue-50480.rs:13:18\n+  --> $DIR/issue-50480.rs:12:18\n    |\n LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |            -     ^\n@@ -46,27 +46,26 @@ LL | struct Bar<T, N>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, Strin\n    |             +++\n \n error[E0412]: cannot find type `NotDefined` in this scope\n-  --> $DIR/issue-50480.rs:13:21\n+  --> $DIR/issue-50480.rs:12:21\n    |\n LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |                     ^^^^^^^^^^ not found in this scope\n \n error[E0277]: `i32` is not an iterator\n-  --> $DIR/issue-50480.rs:1:17\n+  --> $DIR/issue-50480.rs:3:27\n    |\n-LL | #[derive(Clone, Copy)]\n-   |                 ^^^^ `i32` is not an iterator\n+LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^ `i32` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `i32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n   --> $DIR/issue-50480.rs:1:17\n    |\n LL | #[derive(Clone, Copy)]\n    |                 ^^^^\n-...\n+LL |\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |                                                    --------  ------ this field does not implement `Copy`\n    |                                                    |\n@@ -75,21 +74,20 @@ LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `i32` is not an iterator\n-  --> $DIR/issue-50480.rs:10:17\n+  --> $DIR/issue-50480.rs:12:33\n    |\n-LL | #[derive(Clone, Copy)]\n-   |                 ^^^^ `i32` is not an iterator\n+LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^ `i32` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `i32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n   --> $DIR/issue-50480.rs:10:17\n    |\n LL | #[derive(Clone, Copy)]\n    |                 ^^^^\n-...\n+LL |\n LL | struct Bar<T>(T, N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |                                                          --------  ------ this field does not implement `Copy`\n    |                                                          |"}]}