{"sha": "3cba93f9933fe96fb77d625a480eb4cdddeed91f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYmE5M2Y5OTMzZmU5NmZiNzdkNjI1YTQ4MGViNGNkZGRlZWQ5MWY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-27T06:27:35Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-05T04:53:21Z"}, "message": "Refactor `with_exts_frame` from a macro to a function.", "tree": {"sha": "5d135d75bb89d2cb102ec3bfa5b42b1efe2c46b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d135d75bb89d2cb102ec3bfa5b42b1efe2c46b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cba93f9933fe96fb77d625a480eb4cdddeed91f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cba93f9933fe96fb77d625a480eb4cdddeed91f", "html_url": "https://github.com/rust-lang/rust/commit/3cba93f9933fe96fb77d625a480eb4cdddeed91f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cba93f9933fe96fb77d625a480eb4cdddeed91f/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de2e67836e23405e5bdc27cefa510fa562c5298f", "url": "https://api.github.com/repos/rust-lang/rust/commits/de2e67836e23405e5bdc27cefa510fa562c5298f", "html_url": "https://github.com/rust-lang/rust/commit/de2e67836e23405e5bdc27cefa510fa562c5298f"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "481278eb2574595518c6ee4b8cfb74d65562b66c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3cba93f9933fe96fb77d625a480eb4cdddeed91f/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cba93f9933fe96fb77d625a480eb4cdddeed91f/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3cba93f9933fe96fb77d625a480eb4cdddeed91f", "patch": "@@ -270,18 +270,6 @@ fn expand_mac_invoc(invoc: Invocation, fld: &mut MacroExpander) -> Expansion {\n     fully_expanded\n }\n \n-// eval $e with a new exts frame.\n-// must be a macro so that $e isn't evaluated too early.\n-macro_rules! with_exts_frame {\n-    ($extsboxexpr:expr,$macros_escape:expr,$e:expr) =>\n-    ({$extsboxexpr.push_frame();\n-      $extsboxexpr.info().macros_escape = $macros_escape;\n-      let result = $e;\n-      $extsboxexpr.pop_frame();\n-      result\n-     })\n-}\n-\n // When we enter a module, record it, for the sake of `module!`\n pub fn expand_item(it: P<ast::Item>, fld: &mut MacroExpander)\n                    -> SmallVector<P<ast::Item>> {\n@@ -378,9 +366,7 @@ fn expand_multi_modified(a: Annotatable, fld: &mut MacroExpander) -> SmallVector\n                     fld.cx.mod_push(it.ident);\n                 }\n                 let macro_use = contains_macro_use(fld, &it.attrs);\n-                let result = with_exts_frame!(fld.cx.syntax_env,\n-                                              macro_use,\n-                                              noop_fold_item(it, fld));\n+                let result = fld.with_exts_frame(macro_use, |fld| noop_fold_item(it, fld));\n                 if valid_ident {\n                     fld.cx.mod_pop();\n                 }\n@@ -561,6 +547,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let mark = Mark::fresh();\n         Invocation { span: span, attrs: attrs, mac: mac, mark: mark, kind: kind, ident: None }\n     }\n+\n+    fn with_exts_frame<T, F: FnOnce(&mut Self) -> T>(&mut self, macros_escape: bool, f: F) -> T {\n+        self.cx.syntax_env.push_frame();\n+        self.cx.syntax_env.info().macros_escape = macros_escape;\n+        let result = f(self);\n+        self.cx.syntax_env.pop_frame();\n+        result\n+    }\n }\n \n impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n@@ -624,7 +618,7 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n \n     fn fold_block(&mut self, block: P<Block>) -> P<Block> {\n         let was_in_block = ::std::mem::replace(&mut self.cx.in_block, true);\n-        let result = with_exts_frame!(self.cx.syntax_env, false, noop_fold_block(block, self));\n+        let result = self.with_exts_frame(false, |this| noop_fold_block(block, this));\n         self.cx.in_block = was_in_block;\n         result\n     }"}]}