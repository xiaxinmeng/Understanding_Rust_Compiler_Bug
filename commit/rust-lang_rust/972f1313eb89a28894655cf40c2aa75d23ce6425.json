{"sha": "972f1313eb89a28894655cf40c2aa75d23ce6425", "node_id": "C_kwDOAAsO6NoAKDk3MmYxMzEzZWI4OWEyODg5NDY1NWNmNDBjMmFhNzVkMjNjZTY0MjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T09:02:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T09:02:31Z"}, "message": "Auto merge of #14526 - rust-lang:revert-14521-dev, r=Veykril\n\nRevert \"Add bounds for fields in derive macro\"\n\nReverts rust-lang/rust-analyzer#14521 as it introduces too many mismatches", "tree": {"sha": "501bdd7c0a5bedba995bb1e0d0bf4e40ea60487a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/501bdd7c0a5bedba995bb1e0d0bf4e40ea60487a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/972f1313eb89a28894655cf40c2aa75d23ce6425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/972f1313eb89a28894655cf40c2aa75d23ce6425", "html_url": "https://github.com/rust-lang/rust/commit/972f1313eb89a28894655cf40c2aa75d23ce6425", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/972f1313eb89a28894655cf40c2aa75d23ce6425/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bca364c3fe443af370eb579cafe5f63388d17c76", "url": "https://api.github.com/repos/rust-lang/rust/commits/bca364c3fe443af370eb579cafe5f63388d17c76", "html_url": "https://github.com/rust-lang/rust/commit/bca364c3fe443af370eb579cafe5f63388d17c76"}, {"sha": "435d585d0c14646a8ae2014d67713573e1169b1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/435d585d0c14646a8ae2014d67713573e1169b1f", "html_url": "https://github.com/rust-lang/rust/commit/435d585d0c14646a8ae2014d67713573e1169b1f"}], "stats": {"total": 93, "additions": 27, "deletions": 66}, "files": [{"sha": "fafcde25ae708549241644a6e50803b98c358ce7", "filename": "crates/hir-def/src/macro_expansion_tests/builtin_derive_macro.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/972f1313eb89a28894655cf40c2aa75d23ce6425/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_derive_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972f1313eb89a28894655cf40c2aa75d23ce6425/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_derive_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_derive_macro.rs?ref=972f1313eb89a28894655cf40c2aa75d23ce6425", "patch": "@@ -16,7 +16,7 @@ struct Foo;\n #[derive(Copy)]\n struct Foo;\n \n-impl < > core::marker::Copy for Foo< > where {}\"#]],\n+impl < > core::marker::Copy for Foo< > {}\"#]],\n     );\n }\n \n@@ -41,7 +41,7 @@ macro Copy {}\n #[derive(Copy)]\n struct Foo;\n \n-impl < > crate ::marker::Copy for Foo< > where {}\"#]],\n+impl < > crate ::marker::Copy for Foo< > {}\"#]],\n     );\n }\n \n@@ -57,7 +57,7 @@ struct Foo<A, B>;\n #[derive(Copy)]\n struct Foo<A, B>;\n \n-impl <A: core::marker::Copy, B: core::marker::Copy, > core::marker::Copy for Foo<A, B, > where {}\"#]],\n+impl <T0: core::marker::Copy, T1: core::marker::Copy, > core::marker::Copy for Foo<T0, T1, > {}\"#]],\n     );\n }\n \n@@ -74,7 +74,7 @@ struct Foo<A, B, 'a, 'b>;\n #[derive(Copy)]\n struct Foo<A, B, 'a, 'b>;\n \n-impl <A: core::marker::Copy, B: core::marker::Copy, > core::marker::Copy for Foo<A, B, > where {}\"#]],\n+impl <T0: core::marker::Copy, T1: core::marker::Copy, > core::marker::Copy for Foo<T0, T1, > {}\"#]],\n     );\n }\n \n@@ -90,7 +90,7 @@ struct Foo<A, B>;\n #[derive(Clone)]\n struct Foo<A, B>;\n \n-impl <A: core::clone::Clone, B: core::clone::Clone, > core::clone::Clone for Foo<A, B, > where {}\"#]],\n+impl <T0: core::clone::Clone, T1: core::clone::Clone, > core::clone::Clone for Foo<T0, T1, > {}\"#]],\n     );\n }\n \n@@ -106,6 +106,6 @@ struct Foo<const X: usize, T>(u32);\n #[derive(Clone)]\n struct Foo<const X: usize, T>(u32);\n \n-impl <const X: usize, T: core::clone::Clone, > core::clone::Clone for Foo<X, T, > where u32: core::clone::Clone, {}\"#]],\n+impl <const T0: usize, T1: core::clone::Clone, > core::clone::Clone for Foo<T0, T1, > {}\"#]],\n     );\n }"}, {"sha": "5c1a75132ee94f19bd42e4c144003969d8fbb10e", "filename": "crates/hir-expand/src/builtin_derive_macro.rs", "status": "modified", "additions": 17, "deletions": 56, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/972f1313eb89a28894655cf40c2aa75d23ce6425/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972f1313eb89a28894655cf40c2aa75d23ce6425/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs?ref=972f1313eb89a28894655cf40c2aa75d23ce6425", "patch": "@@ -1,12 +1,11 @@\n //! Builtin derives.\n \n use base_db::{CrateOrigin, LangCrateOrigin};\n-use either::Either;\n use tracing::debug;\n \n use crate::tt::{self, TokenId};\n use syntax::{\n-    ast::{self, AstNode, HasGenericParams, HasModuleItem, HasName, HasTypeBounds},\n+    ast::{self, AstNode, HasGenericParams, HasModuleItem, HasName},\n     match_ast,\n };\n \n@@ -61,11 +60,8 @@ pub fn find_builtin_derive(ident: &name::Name) -> Option<BuiltinDeriveExpander>\n \n struct BasicAdtInfo {\n     name: tt::Ident,\n-    /// first field is the name, and\n-    /// second field is `Some(ty)` if it's a const param of type `ty`, `None` if it's a type param.\n-    /// third fields is where bounds, if any\n-    param_types: Vec<(tt::Subtree, Option<tt::Subtree>, Option<tt::Subtree>)>,\n-    field_types: Vec<tt::Subtree>,\n+    /// `Some(ty)` if it's a const param of type `ty`, `None` if it's a type param.\n+    param_types: Vec<Option<tt::Subtree>>,\n }\n \n fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, ExpandError> {\n@@ -79,34 +75,17 @@ fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, ExpandError> {\n         ExpandError::Other(\"no item found\".into())\n     })?;\n     let node = item.syntax();\n-    let (name, params, fields) = match_ast! {\n+    let (name, params) = match_ast! {\n         match node {\n-            ast::Struct(it) => {\n-                (it.name(), it.generic_param_list(), it.field_list().into_iter().collect::<Vec<_>>())\n-            },\n-            ast::Enum(it) => (it.name(), it.generic_param_list(), it.variant_list().into_iter().flat_map(|x| x.variants()).filter_map(|x| x.field_list()).collect()),\n-            ast::Union(it) => (it.name(), it.generic_param_list(), it.record_field_list().into_iter().map(|x| ast::FieldList::RecordFieldList(x)).collect()),\n+            ast::Struct(it) => (it.name(), it.generic_param_list()),\n+            ast::Enum(it) => (it.name(), it.generic_param_list()),\n+            ast::Union(it) => (it.name(), it.generic_param_list()),\n             _ => {\n                 debug!(\"unexpected node is {:?}\", node);\n                 return Err(ExpandError::Other(\"expected struct, enum or union\".into()))\n             },\n         }\n     };\n-    let field_types = fields\n-        .into_iter()\n-        .flat_map(|f| match f {\n-            ast::FieldList::RecordFieldList(x) => Either::Left(\n-                x.fields()\n-                    .filter_map(|x| x.ty())\n-                    .map(|x| mbe::syntax_node_to_token_tree(x.syntax()).0),\n-            ),\n-            ast::FieldList::TupleFieldList(x) => Either::Right(\n-                x.fields()\n-                    .filter_map(|x| x.ty())\n-                    .map(|x| mbe::syntax_node_to_token_tree(x.syntax()).0),\n-            ),\n-        })\n-        .collect::<Vec<_>>();\n     let name = name.ok_or_else(|| {\n         debug!(\"parsed item has no name\");\n         ExpandError::Other(\"missing name\".into())\n@@ -118,46 +97,35 @@ fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, ExpandError> {\n         .into_iter()\n         .flat_map(|param_list| param_list.type_or_const_params())\n         .map(|param| {\n-            let name = param\n-                .name()\n-                .map(|x| mbe::syntax_node_to_token_tree(x.syntax()).0)\n-                .unwrap_or_else(tt::Subtree::empty);\n-            let bounds = match &param {\n-                ast::TypeOrConstParam::Type(x) => {\n-                    x.type_bound_list().map(|x| mbe::syntax_node_to_token_tree(x.syntax()).0)\n-                }\n-                ast::TypeOrConstParam::Const(_) => None,\n-            };\n-            let ty = if let ast::TypeOrConstParam::Const(param) = param {\n+            if let ast::TypeOrConstParam::Const(param) = param {\n                 let ty = param\n                     .ty()\n                     .map(|ty| mbe::syntax_node_to_token_tree(ty.syntax()).0)\n                     .unwrap_or_else(tt::Subtree::empty);\n                 Some(ty)\n             } else {\n                 None\n-            };\n-            (name, ty, bounds)\n+            }\n         })\n         .collect();\n-    Ok(BasicAdtInfo { name: name_token, param_types, field_types })\n+    Ok(BasicAdtInfo { name: name_token, param_types })\n }\n \n fn expand_simple_derive(tt: &tt::Subtree, trait_path: tt::Subtree) -> ExpandResult<tt::Subtree> {\n     let info = match parse_adt(tt) {\n         Ok(info) => info,\n         Err(e) => return ExpandResult::with_err(tt::Subtree::empty(), e),\n     };\n-    let mut where_block = vec![];\n     let (params, args): (Vec<_>, Vec<_>) = info\n         .param_types\n         .into_iter()\n-        .map(|(ident, param_ty, bound)| {\n+        .enumerate()\n+        .map(|(idx, param_ty)| {\n+            let ident = tt::Leaf::Ident(tt::Ident {\n+                span: tt::TokenId::unspecified(),\n+                text: format!(\"T{idx}\").into(),\n+            });\n             let ident_ = ident.clone();\n-            if let Some(b) = bound {\n-                let ident = ident.clone();\n-                where_block.push(quote! { #ident : #b , });\n-            }\n             if let Some(ty) = param_ty {\n                 (quote! { const #ident : #ty , }, quote! { #ident_ , })\n             } else {\n@@ -166,16 +134,9 @@ fn expand_simple_derive(tt: &tt::Subtree, trait_path: tt::Subtree) -> ExpandResu\n             }\n         })\n         .unzip();\n-\n-    where_block.extend(info.field_types.iter().map(|x| {\n-        let x = x.clone();\n-        let bound = trait_path.clone();\n-        quote! { #x : #bound , }\n-    }));\n-\n     let name = info.name;\n     let expanded = quote! {\n-        impl < ##params > #trait_path for #name < ##args > where ##where_block {}\n+        impl < ##params > #trait_path for #name < ##args > {}\n     };\n     ExpandResult::ok(expanded)\n }"}, {"sha": "4382af434388d8909d2955320e7e400eb8f36063", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/972f1313eb89a28894655cf40c2aa75d23ce6425/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972f1313eb89a28894655cf40c2aa75d23ce6425/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=972f1313eb89a28894655cf40c2aa75d23ce6425", "patch": "@@ -471,7 +471,7 @@ struct Foo {}\n \"#,\n             expect![[r#\"\n                 Clone\n-                impl < >core::clone::Clone for Foo< >where{}\n+                impl < >core::clone::Clone for Foo< >{}\n             \"#]],\n         );\n     }\n@@ -488,7 +488,7 @@ struct Foo {}\n \"#,\n             expect![[r#\"\n                 Copy\n-                impl < >core::marker::Copy for Foo< >where{}\n+                impl < >core::marker::Copy for Foo< >{}\n             \"#]],\n         );\n     }\n@@ -504,7 +504,7 @@ struct Foo {}\n \"#,\n             expect![[r#\"\n                 Copy\n-                impl < >core::marker::Copy for Foo< >where{}\n+                impl < >core::marker::Copy for Foo< >{}\n             \"#]],\n         );\n         check(\n@@ -516,7 +516,7 @@ struct Foo {}\n \"#,\n             expect![[r#\"\n                 Clone\n-                impl < >core::clone::Clone for Foo< >where{}\n+                impl < >core::clone::Clone for Foo< >{}\n             \"#]],\n         );\n     }"}]}