{"sha": "9a4eac3944e2e2668b4aea0b5afd3d83b88e992e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNGVhYzM5NDRlMmUyNjY4YjRhZWEwYjVhZmQzZDgzYjg4ZTk5MmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-05T11:27:45Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-05T11:27:45Z"}, "message": "ast_validation: fix visiting bug.", "tree": {"sha": "75199b522e18d981b33c30db69b676c8561c5864", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75199b522e18d981b33c30db69b676c8561c5864"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a4eac3944e2e2668b4aea0b5afd3d83b88e992e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a4eac3944e2e2668b4aea0b5afd3d83b88e992e", "html_url": "https://github.com/rust-lang/rust/commit/9a4eac3944e2e2668b4aea0b5afd3d83b88e992e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a4eac3944e2e2668b4aea0b5afd3d83b88e992e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67c29ed8fc8d2aa6e6b86cb02f4596c5d222b704", "url": "https://api.github.com/repos/rust-lang/rust/commits/67c29ed8fc8d2aa6e6b86cb02f4596c5d222b704", "html_url": "https://github.com/rust-lang/rust/commit/67c29ed8fc8d2aa6e6b86cb02f4596c5d222b704"}], "stats": {"total": 70, "additions": 49, "deletions": 21}, "files": [{"sha": "79ed7f234f72e6ee1e92e7550e168f1f396febd4", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9a4eac3944e2e2668b4aea0b5afd3d83b88e992e/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a4eac3944e2e2668b4aea0b5afd3d83b88e992e/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=9a4eac3944e2e2668b4aea0b5afd3d83b88e992e", "patch": "@@ -81,6 +81,12 @@ struct AstValidator<'a> {\n }\n \n impl<'a> AstValidator<'a> {\n+    fn with_in_trait_impl(&mut self, is_in: bool, f: impl FnOnce(&mut Self)) {\n+        let old = mem::replace(&mut self.in_trait_impl, is_in);\n+        f(self);\n+        self.in_trait_impl = old;\n+    }\n+\n     fn with_banned_impl_trait(&mut self, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.is_impl_trait_banned, true);\n         f(self);\n@@ -737,28 +743,29 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 ref self_ty,\n                 items: _,\n             } => {\n-                let old_in_trait_impl = mem::replace(&mut self.in_trait_impl, true);\n-\n-                self.invalid_visibility(&item.vis, None);\n-                if let TyKind::Err = self_ty.kind {\n-                    self.err_handler()\n-                        .struct_span_err(item.span, \"`impl Trait for .. {}` is an obsolete syntax\")\n-                        .help(\"use `auto trait Trait {}` instead\")\n+                self.with_in_trait_impl(true, |this| {\n+                    this.invalid_visibility(&item.vis, None);\n+                    if let TyKind::Err = self_ty.kind {\n+                        this.err_handler()\n+                            .struct_span_err(\n+                                item.span,\n+                                \"`impl Trait for .. {}` is an obsolete syntax\",\n+                            )\n+                            .help(\"use `auto trait Trait {}` instead\")\n+                            .emit();\n+                    }\n+                    if unsafety == Unsafety::Unsafe && polarity == ImplPolarity::Negative {\n+                        struct_span_err!(\n+                            this.session,\n+                            item.span,\n+                            E0198,\n+                            \"negative impls cannot be unsafe\"\n+                        )\n                         .emit();\n-                }\n-                if unsafety == Unsafety::Unsafe && polarity == ImplPolarity::Negative {\n-                    struct_span_err!(\n-                        self.session,\n-                        item.span,\n-                        E0198,\n-                        \"negative impls cannot be unsafe\"\n-                    )\n-                    .emit();\n-                }\n-\n-                visit::walk_item(self, item);\n+                    }\n \n-                self.in_trait_impl = old_in_trait_impl;\n+                    visit::walk_item(this, item);\n+                });\n                 return; // Avoid visiting again.\n             }\n             ItemKind::Impl {\n@@ -1142,7 +1149,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n         }\n \n-        visit::walk_assoc_item(self, item, ctxt);\n+        self.with_in_trait_impl(false, |this| visit::walk_assoc_item(this, item, ctxt));\n     }\n }\n "}, {"sha": "7c3dd1d5a98c754cc43cae8723f7518bd06c581c", "filename": "src/test/ui/parser/issue-68788-in-trait-item-propagation.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9a4eac3944e2e2668b4aea0b5afd3d83b88e992e/src%2Ftest%2Fui%2Fparser%2Fissue-68788-in-trait-item-propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a4eac3944e2e2668b4aea0b5afd3d83b88e992e/src%2Ftest%2Fui%2Fparser%2Fissue-68788-in-trait-item-propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68788-in-trait-item-propagation.rs?ref=9a4eac3944e2e2668b4aea0b5afd3d83b88e992e", "patch": "@@ -0,0 +1,21 @@\n+// Make sure we don't propagate restrictions on trait impl items to items inside them.\n+\n+// check-pass\n+// edition:2018\n+\n+fn main() {}\n+\n+trait X {\n+    fn foo();\n+}\n+\n+impl X for () {\n+    fn foo() {\n+        struct S;\n+        impl S {\n+            pub const X: u8 = 0;\n+            pub const fn bar() {}\n+            async fn qux() {}\n+        }\n+    }\n+}"}]}