{"sha": "da921e97f4d3702ab60fb696699712444e8ec48f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhOTIxZTk3ZjRkMzcwMmFiNjBmYjY5NjY5OTcxMjQ0NGU4ZWM0OGY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-08T18:57:35Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-22T04:25:29Z"}, "message": "rustdoc: Only resolve traits in scope", "tree": {"sha": "06bfe1eaf0b667297ff1e8cb37d15c030a243067", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06bfe1eaf0b667297ff1e8cb37d15c030a243067"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da921e97f4d3702ab60fb696699712444e8ec48f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da921e97f4d3702ab60fb696699712444e8ec48f", "html_url": "https://github.com/rust-lang/rust/commit/da921e97f4d3702ab60fb696699712444e8ec48f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da921e97f4d3702ab60fb696699712444e8ec48f/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9db0b86f4e24c939cd33cff050ce556faf30e47d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9db0b86f4e24c939cd33cff050ce556faf30e47d", "html_url": "https://github.com/rust-lang/rust/commit/9db0b86f4e24c939cd33cff050ce556faf30e47d"}], "stats": {"total": 76, "additions": 59, "deletions": 17}, "files": [{"sha": "27debfc174339d818baef7b39327015fa19ed698", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da921e97f4d3702ab60fb696699712444e8ec48f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da921e97f4d3702ab60fb696699712444e8ec48f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=da921e97f4d3702ab60fb696699712444e8ec48f", "patch": "@@ -69,11 +69,11 @@ pub struct DocContext<'tcx> {\n     pub auto_traits: Vec<DefId>,\n     /// The options given to rustdoc that could be relevant to a pass.\n     pub render_options: RenderOptions,\n-    /// The traits implemented by a given type.\n+    /// The traits in scope for a given module.\n     ///\n     /// See `collect_intra_doc_links::traits_implemented_by` for more details.\n-    /// `map<type, set<trait>>`\n-    pub type_trait_cache: RefCell<FxHashMap<DefId, FxHashSet<DefId>>>,\n+    /// `map<module, set<trait>>`\n+    pub module_trait_cache: RefCell<FxHashMap<DefId, FxHashSet<DefId>>>,\n }\n \n impl<'tcx> DocContext<'tcx> {\n@@ -515,7 +515,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                         .filter(|trait_def_id| tcx.trait_is_auto(*trait_def_id))\n                         .collect(),\n                     render_options,\n-                    type_trait_cache: RefCell::new(FxHashMap::default()),\n+                    module_trait_cache: RefCell::new(FxHashMap::default()),\n                 };\n                 debug!(\"crate: {:?}\", tcx.hir().krate());\n "}, {"sha": "2ed3d07974fcf74fbcee0d82bf19a5f01650e35e", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/da921e97f4d3702ab60fb696699712444e8ec48f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da921e97f4d3702ab60fb696699712444e8ec48f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=da921e97f4d3702ab60fb696699712444e8ec48f", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::def::{\n     PerNS, Res,\n };\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty;\n use rustc_resolve::ParentScope;\n use rustc_session::lint;\n use rustc_span::hygiene::MacroKind;\n@@ -327,7 +327,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         // To handle that properly resolve() would have to support\n                         // something like [`ambi_fn`](<SomeStruct as SomeTrait>::ambi_fn)\n                         .or_else(|| {\n-                            let kind = resolve_associated_trait_item(did, item_name, ns, &self.cx);\n+                            let kind = resolve_associated_trait_item(\n+                                did, module_id, item_name, ns, &self.cx,\n+                            );\n                             debug!(\"got associated item kind {:?}\", kind);\n                             kind\n                         });\n@@ -440,6 +442,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n \n fn resolve_associated_trait_item(\n     did: DefId,\n+    module: DefId,\n     item_name: Symbol,\n     ns: Namespace,\n     cx: &DocContext<'_>,\n@@ -504,8 +507,7 @@ fn resolve_associated_trait_item(\n     // Next consider explicit impls: `impl MyTrait for MyType`\n     // Give precedence to inherent impls.\n     if candidates.is_empty() {\n-        let mut cache = cx.type_trait_cache.borrow_mut();\n-        let traits = cache.entry(did).or_insert_with(|| traits_implemented_by(cx.tcx, did));\n+        let traits = traits_implemented_by(cx, did, module);\n         debug!(\"considering traits {:?}\", traits);\n         candidates.extend(traits.iter().filter_map(|&trait_| {\n             cx.tcx\n@@ -519,27 +521,30 @@ fn resolve_associated_trait_item(\n     candidates.pop().map(|(_, kind)| kind)\n }\n \n-/// Given a type, return all traits implemented by that type.\n+/// Given a type, return all traits in scope in `module` implemented by that type.\n ///\n /// NOTE: this cannot be a query because more traits could be available when more crates are compiled!\n /// So it is not stable to serialize cross-crate.\n-/// FIXME: this should only search traits in scope\n-fn traits_implemented_by<'a>(tcx: TyCtxt<'a>, type_: DefId) -> FxHashSet<DefId> {\n-    use rustc_hir::def_id::LOCAL_CRATE;\n+fn traits_implemented_by(cx: &DocContext<'_>, type_: DefId, module: DefId) -> FxHashSet<DefId> {\n+    let mut cache = cx.module_trait_cache.borrow_mut();\n+    let in_scope_traits = cache.entry(module).or_insert_with(|| {\n+        cx.enter_resolver(|resolver| {\n+            resolver.traits_in_scope(module).into_iter().map(|candidate| candidate.def_id).collect()\n+        })\n+    });\n \n-    let all_traits = tcx.all_traits(LOCAL_CRATE).iter().copied();\n-    let ty = tcx.type_of(type_);\n-    let iter = all_traits.flat_map(|trait_| {\n+    let ty = cx.tcx.type_of(type_);\n+    let iter = in_scope_traits.iter().flat_map(|&trait_| {\n         trace!(\"considering explicit impl for trait {:?}\", trait_);\n         let mut saw_impl = false;\n         // Look at each trait implementation to see if it's an impl for `did`\n-        tcx.for_each_relevant_impl(trait_, ty, |impl_| {\n+        cx.tcx.for_each_relevant_impl(trait_, ty, |impl_| {\n             // FIXME: this is inefficient, find a way to short-circuit for_each_* so this doesn't take as long\n             if saw_impl {\n                 return;\n             }\n \n-            let trait_ref = tcx.impl_trait_ref(impl_).expect(\"this is not an inherent impl\");\n+            let trait_ref = cx.tcx.impl_trait_ref(impl_).expect(\"this is not an inherent impl\");\n             // Check if these are the same type.\n             let impl_type = trait_ref.self_ty();\n             debug!("}, {"sha": "c5bb4305db7ec724fdb73598957d2a574ce5e009", "filename": "src/test/rustdoc-ui/assoc-item-not-in-scope.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/da921e97f4d3702ab60fb696699712444e8ec48f/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da921e97f4d3702ab60fb696699712444e8ec48f/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.rs?ref=da921e97f4d3702ab60fb696699712444e8ec48f", "patch": "@@ -0,0 +1,22 @@\n+#![deny(broken_intra_doc_links)]\n+\n+#[derive(Debug)]\n+/// Link to [`S::fmt`]\n+//~^ ERROR unresolved link\n+pub struct S;\n+\n+pub mod inner {\n+    use std::fmt::Debug;\n+    use super::S;\n+\n+    /// Link to [`S::fmt`]\n+    pub fn f() {}\n+}\n+\n+pub mod ambiguous {\n+    use std::fmt::{Display, Debug};\n+    use super::S;\n+\n+    /// Link to [`S::fmt`]\n+    pub fn f() {}\n+}"}, {"sha": "8827c9351a62defc8c202c6542b851404a4c2322", "filename": "src/test/rustdoc-ui/assoc-item-not-in-scope.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/da921e97f4d3702ab60fb696699712444e8ec48f/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da921e97f4d3702ab60fb696699712444e8ec48f/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.stderr?ref=da921e97f4d3702ab60fb696699712444e8ec48f", "patch": "@@ -0,0 +1,15 @@\n+error: unresolved link to `S::fmt`\n+  --> $DIR/assoc-item-not-in-scope.rs:4:14\n+   |\n+LL | /// Link to [`S::fmt`]\n+   |              ^^^^^^^^ unresolved link\n+   |\n+note: the lint level is defined here\n+  --> $DIR/assoc-item-not-in-scope.rs:1:9\n+   |\n+LL | #![deny(broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+\n+error: aborting due to previous error\n+"}]}