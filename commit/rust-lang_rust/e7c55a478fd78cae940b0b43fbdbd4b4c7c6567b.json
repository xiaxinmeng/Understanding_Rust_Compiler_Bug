{"sha": "e7c55a478fd78cae940b0b43fbdbd4b4c7c6567b", "node_id": "C_kwDOAAsO6NoAKGU3YzU1YTQ3OGZkNzhjYWU5NDBiMGI0M2ZiZGJkNGI0YzdjNjU2N2I", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-06-25T12:16:28Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-06-25T12:16:28Z"}, "message": "Fix `#[expect]` for `clippy::ptr_arg`", "tree": {"sha": "5c1c96d317fac8b40d50ebb5431a8b11862f6a54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c1c96d317fac8b40d50ebb5431a8b11862f6a54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7c55a478fd78cae940b0b43fbdbd4b4c7c6567b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEwgBEOx3xlHwII7PG9cWdDmaeUwIFAmK2/JwACgkQ9cWdDmae\nUwKwOg//UU1exMPSM6pXVNyd9uMrwU/BiWq1VxDU/be8KcEdF9Oa7+qpHCZpBYTN\n25YP5moDpfFKHENL2l46Bg4LWYONnVyc+roe3ZfFMU4j+CZYtwH5gj55UyLLXz/a\nBS6ojKtAlboPTjEbftkf3NTdh4Ht8wkT2l4B6xMxUUuop7EmdRwaUVH5KR1ltka0\nSbjS6K09yCd88cJ8xml9w4V/ByEoBH8ubrr8zTHzFVVYJH7mIwja/gvTyu/NAGn3\nadReir6aTgv9ZIBoiD26VZ+P9+FLihCzV807fVEQHHOmBj+L0YDrCavzfd0/04IC\nHG0qxH+aUlpBJiNBs0qu0SbdsqRA2BTmgEq6alIgY5dKy5ABSUC6WgwoGqIWeduz\nngqous9owYawPuIYhGQmAGU/Hhmgt4diTfXdRsD80Id4CP0hb0CNXeBN5avqX09G\nxV8FGTuWAyouCG5pO+nhM5tQvGSY3nQl8jcWAUNfHXK7yVYy9zCdA+3EMe9m11XO\nPN2vgqgHJ4RpYXBj1p1iN/L26zj0UF9K8+bfMWPXdl3ZUMXp6VR+zijei6ojQEpY\nDuRoPL05Ar0hzqjXxe6foQxPDp0R6iJdW5cOiUdPaDfOD3pFaJZaSqjPQqKCEYU1\nIYuYdXedM5AVVGpnAu/oQtcijQL1HfCfOmUjCHCtpoFXNMpDcnQ=\n=uKRG\n-----END PGP SIGNATURE-----", "payload": "tree 5c1c96d317fac8b40d50ebb5431a8b11862f6a54\nparent 93ebd0e2db0e7c316cca3d35b077d19a79b4e7b1\nauthor xFrednet <xFrednet@gmail.com> 1656159388 +0200\ncommitter xFrednet <xFrednet@gmail.com> 1656159388 +0200\n\nFix `#[expect]` for `clippy::ptr_arg`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c55a478fd78cae940b0b43fbdbd4b4c7c6567b", "html_url": "https://github.com/rust-lang/rust/commit/e7c55a478fd78cae940b0b43fbdbd4b4c7c6567b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7c55a478fd78cae940b0b43fbdbd4b4c7c6567b/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93ebd0e2db0e7c316cca3d35b077d19a79b4e7b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/93ebd0e2db0e7c316cca3d35b077d19a79b4e7b1", "html_url": "https://github.com/rust-lang/rust/commit/93ebd0e2db0e7c316cca3d35b077d19a79b4e7b1"}], "stats": {"total": 87, "additions": 52, "deletions": 35}, "files": [{"sha": "8f729feb090d85456e69a891cb866a60a576532c", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e7c55a478fd78cae940b0b43fbdbd4b4c7c6567b/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c55a478fd78cae940b0b43fbdbd4b4c7c6567b/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=e7c55a478fd78cae940b0b43fbdbd4b4c7c6567b", "patch": "@@ -1,6 +1,6 @@\n //! Checks for usage of  `&Vec[_]` and `&String`.\n \n-use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then, span_lint_hir_and_then};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::expr_sig;\n use clippy_utils::visitors::contains_unsafe_block;\n@@ -166,15 +166,14 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n             )\n             .filter(|arg| arg.mutability() == Mutability::Not)\n             {\n-                span_lint_and_sugg(\n-                    cx,\n-                    PTR_ARG,\n-                    arg.span,\n-                    &arg.build_msg(),\n-                    \"change this to\",\n-                    format!(\"{}{}\", arg.ref_prefix, arg.deref_ty.display(cx)),\n-                    Applicability::Unspecified,\n-                );\n+                span_lint_hir_and_then(cx, PTR_ARG, arg.emission_id, arg.span, &arg.build_msg(), |diag| {\n+                    diag.span_suggestion(\n+                        arg.span,\n+                        \"change this to\",\n+                        format!(\"{}{}\", arg.ref_prefix, arg.deref_ty.display(cx)),\n+                        Applicability::Unspecified,\n+                    );\n+                });\n             }\n         }\n     }\n@@ -221,7 +220,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n         let results = check_ptr_arg_usage(cx, body, &lint_args);\n \n         for (result, args) in results.iter().zip(lint_args.iter()).filter(|(r, _)| !r.skip) {\n-            span_lint_and_then(cx, PTR_ARG, args.span, &args.build_msg(), |diag| {\n+            span_lint_hir_and_then(cx, PTR_ARG, args.emission_id, args.span, &args.build_msg(), |diag| {\n                 diag.multipart_suggestion(\n                     \"change this to\",\n                     iter::once((args.span, format!(\"{}{}\", args.ref_prefix, args.deref_ty.display(cx))))\n@@ -315,6 +314,7 @@ struct PtrArgReplacement {\n \n struct PtrArg<'tcx> {\n     idx: usize,\n+    emission_id: hir::HirId,\n     span: Span,\n     ty_did: DefId,\n     ty_name: Symbol,\n@@ -419,10 +419,8 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                 if let [.., name] = path.segments;\n                 if cx.tcx.item_name(adt.did()) == name.ident.name;\n \n-                if !is_lint_allowed(cx, PTR_ARG, hir_ty.hir_id);\n-                if params.get(i).map_or(true, |p| !is_lint_allowed(cx, PTR_ARG, p.hir_id));\n-\n                 then {\n+                    let emission_id = params.get(i).map_or(hir_ty.hir_id, |param| param.hir_id);\n                     let (method_renames, deref_ty) = match cx.tcx.get_diagnostic_name(adt.did()) {\n                         Some(sym::Vec) => (\n                             [(\"clone\", \".to_owned()\")].as_slice(),\n@@ -455,21 +453,28 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                                 })\n                                 .and_then(|arg| snippet_opt(cx, arg.span))\n                                 .unwrap_or_else(|| substs.type_at(1).to_string());\n-                            span_lint_and_sugg(\n+                            span_lint_hir_and_then(\n                                 cx,\n                                 PTR_ARG,\n+                                emission_id,\n                                 hir_ty.span,\n                                 \"using a reference to `Cow` is not recommended\",\n-                                \"change this to\",\n-                                format!(\"&{}{}\", mutability.prefix_str(), ty_name),\n-                                Applicability::Unspecified,\n+                                |diag| {\n+                                    diag.span_suggestion(\n+                                        hir_ty.span,\n+                                        \"change this to\",\n+                                        format!(\"&{}{}\", mutability.prefix_str(), ty_name),\n+                                        Applicability::Unspecified,\n+                                    );\n+                                }\n                             );\n                             return None;\n                         },\n                         _ => return None,\n                     };\n                     return Some(PtrArg {\n                         idx: i,\n+                        emission_id: emission_id,\n                         span: hir_ty.span,\n                         ty_did: adt.did(),\n                         ty_name: name.ident.name,"}, {"sha": "fd15001e540c6021d472bfd293fff12a53dec206", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7c55a478fd78cae940b0b43fbdbd4b4c7c6567b/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c55a478fd78cae940b0b43fbdbd4b4c7c6567b/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=e7c55a478fd78cae940b0b43fbdbd4b4c7c6567b", "patch": "@@ -1,3 +1,4 @@\n+#![feature(lint_reasons)]\n #![allow(unused, clippy::many_single_char_names, clippy::redundant_clone)]\n #![warn(clippy::ptr_arg)]\n \n@@ -109,16 +110,20 @@ mod issue_5644 {\n         #[allow(clippy::ptr_arg)] _s: &String,\n         #[allow(clippy::ptr_arg)] _p: &PathBuf,\n         #[allow(clippy::ptr_arg)] _c: &Cow<[i32]>,\n+        #[expect(clippy::ptr_arg)] _expect: &Cow<[i32]>,\n     ) {\n     }\n \n+    fn some_allowed(#[allow(clippy::ptr_arg)] _v: &Vec<u32>, _s: &String) {}\n+\n     struct S;\n     impl S {\n         fn allowed(\n             #[allow(clippy::ptr_arg)] _v: &Vec<u32>,\n             #[allow(clippy::ptr_arg)] _s: &String,\n             #[allow(clippy::ptr_arg)] _p: &PathBuf,\n             #[allow(clippy::ptr_arg)] _c: &Cow<[i32]>,\n+            #[expect(clippy::ptr_arg)] _expect: &Cow<[i32]>,\n         ) {\n         }\n     }\n@@ -129,6 +134,7 @@ mod issue_5644 {\n             #[allow(clippy::ptr_arg)] _s: &String,\n             #[allow(clippy::ptr_arg)] _p: &PathBuf,\n             #[allow(clippy::ptr_arg)] _c: &Cow<[i32]>,\n+            #[expect(clippy::ptr_arg)] _expect: &Cow<[i32]>,\n         ) {\n         }\n     }"}, {"sha": "bbf731c6d01c0ec8e4b77df4c9c8d3250a8b8516", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e7c55a478fd78cae940b0b43fbdbd4b4c7c6567b/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7c55a478fd78cae940b0b43fbdbd4b4c7c6567b/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=e7c55a478fd78cae940b0b43fbdbd4b4c7c6567b", "patch": "@@ -1,49 +1,49 @@\n error: writing `&Vec` instead of `&[_]` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:7:14\n+  --> $DIR/ptr_arg.rs:8:14\n    |\n LL | fn do_vec(x: &Vec<i64>) {\n    |              ^^^^^^^^^ help: change this to: `&[i64]`\n    |\n    = note: `-D clippy::ptr-arg` implied by `-D warnings`\n \n error: writing `&mut Vec` instead of `&mut [_]` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:11:18\n+  --> $DIR/ptr_arg.rs:12:18\n    |\n LL | fn do_vec_mut(x: &mut Vec<i64>) {\n    |                  ^^^^^^^^^^^^^ help: change this to: `&mut [i64]`\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:15:14\n+  --> $DIR/ptr_arg.rs:16:14\n    |\n LL | fn do_str(x: &String) {\n    |              ^^^^^^^ help: change this to: `&str`\n \n error: writing `&mut String` instead of `&mut str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:19:18\n+  --> $DIR/ptr_arg.rs:20:18\n    |\n LL | fn do_str_mut(x: &mut String) {\n    |                  ^^^^^^^^^^^ help: change this to: `&mut str`\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:23:15\n+  --> $DIR/ptr_arg.rs:24:15\n    |\n LL | fn do_path(x: &PathBuf) {\n    |               ^^^^^^^^ help: change this to: `&Path`\n \n error: writing `&mut PathBuf` instead of `&mut Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:27:19\n+  --> $DIR/ptr_arg.rs:28:19\n    |\n LL | fn do_path_mut(x: &mut PathBuf) {\n    |                   ^^^^^^^^^^^^ help: change this to: `&mut Path`\n \n error: writing `&Vec` instead of `&[_]` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:35:18\n+  --> $DIR/ptr_arg.rs:36:18\n    |\n LL |     fn do_vec(x: &Vec<i64>);\n    |                  ^^^^^^^^^ help: change this to: `&[i64]`\n \n error: writing `&Vec` instead of `&[_]` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:48:14\n+  --> $DIR/ptr_arg.rs:49:14\n    |\n LL | fn cloned(x: &Vec<u8>) -> Vec<u8> {\n    |              ^^^^^^^^\n@@ -59,7 +59,7 @@ LL |     let i = (e).clone();\n  ...\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:57:18\n+  --> $DIR/ptr_arg.rs:58:18\n    |\n LL | fn str_cloned(x: &String) -> String {\n    |                  ^^^^^^^\n@@ -75,7 +75,7 @@ LL ~     x.to_owned()\n    |\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:65:19\n+  --> $DIR/ptr_arg.rs:66:19\n    |\n LL | fn path_cloned(x: &PathBuf) -> PathBuf {\n    |                   ^^^^^^^^\n@@ -91,7 +91,7 @@ LL ~     x.to_path_buf()\n    |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:73:44\n+  --> $DIR/ptr_arg.rs:74:44\n    |\n LL | fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n    |                                            ^^^^^^^\n@@ -105,13 +105,19 @@ LL ~     let c = y;\n    |\n \n error: using a reference to `Cow` is not recommended\n-  --> $DIR/ptr_arg.rs:87:25\n+  --> $DIR/ptr_arg.rs:88:25\n    |\n LL | fn test_cow_with_ref(c: &Cow<[i32]>) {}\n    |                         ^^^^^^^^^^^ help: change this to: `&[i32]`\n \n+error: writing `&String` instead of `&str` involves a new object where a slice will do\n+  --> $DIR/ptr_arg.rs:117:66\n+   |\n+LL |     fn some_allowed(#[allow(clippy::ptr_arg)] _v: &Vec<u32>, _s: &String) {}\n+   |                                                                  ^^^^^^^ help: change this to: `&str`\n+\n error: writing `&Vec` instead of `&[_]` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:140:21\n+  --> $DIR/ptr_arg.rs:146:21\n    |\n LL |     fn foo_vec(vec: &Vec<u8>) {\n    |                     ^^^^^^^^\n@@ -124,7 +130,7 @@ LL ~         let _ = vec.to_owned().clone();\n    |\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:145:23\n+  --> $DIR/ptr_arg.rs:151:23\n    |\n LL |     fn foo_path(path: &PathBuf) {\n    |                       ^^^^^^^^\n@@ -137,7 +143,7 @@ LL ~         let _ = path.to_path_buf().clone();\n    |\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:150:21\n+  --> $DIR/ptr_arg.rs:156:21\n    |\n LL |     fn foo_str(str: &PathBuf) {\n    |                     ^^^^^^^^\n@@ -150,10 +156,10 @@ LL ~         let _ = str.to_path_buf().clone();\n    |\n \n error: writing `&mut Vec` instead of `&mut [_]` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:156:29\n+  --> $DIR/ptr_arg.rs:162:29\n    |\n LL | fn mut_vec_slice_methods(v: &mut Vec<u32>) {\n    |                             ^^^^^^^^^^^^^ help: change this to: `&mut [u32]`\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 17 previous errors\n "}]}