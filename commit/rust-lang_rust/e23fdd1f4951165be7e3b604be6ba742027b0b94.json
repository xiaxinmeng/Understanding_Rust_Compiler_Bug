{"sha": "e23fdd1f4951165be7e3b604be6ba742027b0b94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyM2ZkZDFmNDk1MTE2NWJlN2UzYjYwNGJlNmJhNzQyMDI3YjBiOTQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-23T13:40:46Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-23T13:40:46Z"}, "message": "fix const -> pointer writing (noticeable on big endian)", "tree": {"sha": "a2d91b9b8cf90a3115363857bb5bf841d18d25ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2d91b9b8cf90a3115363857bb5bf841d18d25ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e23fdd1f4951165be7e3b604be6ba742027b0b94", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXa+beAAoJEFbW7qD8Z6xG5LsQAJGZ1aEwq7n09ut6kZJnkvsB\ndfgbEZwk6jEFxFTNFkoItty4oLMXmcUU4tt3TXL0qJx5qFkzRsh3SiyWqcuoKS98\nWdmHjpZEJ/Tq3RmpIWBIsfU+htUp85qZU4dwDIU8GmL6vEncsRwfZrAg2ZojOxCL\nsyqYTVdvcwF/Jl45h/96P5dtjRJNaG32B4ybx62gPP/46WY+hGRr1N+0CvOA4ZCv\nBv9GVtOx4nEG1XHWCaSQ0rxkVWwT+C151Ur9j+47e9kEOvBlllqXUycs70vS/N2A\nktnVbPEunh9mMXxF6vQGTVu7mktRj0idM3AvZy5wLPg/LLdV4+9Msnz46PNw5Dd5\nvtSw0oZQXEQSyJgTWEDmdeX2XD9cOba37RWfWFXvtFghRcS6/vpDrnAldzAhfDIz\n1TAXqL74FGDH1Xnpq0EldVp2vRmwyHU73ux+81U+ZYm1p9T6TBp6SMArGS94NIMM\nqK/Q46MsIP/l9R4EMdNcxcQVZtevN0GpmzJQofhR7VOTPug5OobPCLZ8Mqqrq5wP\nY78hnfNEKOYmIBMPY8I8pyVUDtliQxoxYjWkf5nYdGjsFXTeuEZZW/GHkWPi93j5\nLZn11ybzSsL4AYacURsqX6q94EY9c1KETpTjFP9pgXT3Yg//ICpazNOiF/Owi2HI\nABk7poRgbr09ZbO+ZIA+\n=todx\n-----END PGP SIGNATURE-----", "payload": "tree a2d91b9b8cf90a3115363857bb5bf841d18d25ca\nparent 0288486b731b3da05dd4b42635bfcf3dae285400\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466689246 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466689246 +0200\n\nfix const -> pointer writing (noticeable on big endian)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e23fdd1f4951165be7e3b604be6ba742027b0b94", "html_url": "https://github.com/rust-lang/rust/commit/e23fdd1f4951165be7e3b604be6ba742027b0b94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e23fdd1f4951165be7e3b604be6ba742027b0b94/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0288486b731b3da05dd4b42635bfcf3dae285400", "url": "https://api.github.com/repos/rust-lang/rust/commits/0288486b731b3da05dd4b42635bfcf3dae285400", "html_url": "https://github.com/rust-lang/rust/commit/0288486b731b3da05dd4b42635bfcf3dae285400"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "e8e3f09621ddf5c6fb3072c24cc5f78f4c066127", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e23fdd1f4951165be7e3b604be6ba742027b0b94/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23fdd1f4951165be7e3b604be6ba742027b0b94/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=e23fdd1f4951165be7e3b604be6ba742027b0b94", "patch": "@@ -169,14 +169,32 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     // TODO(solson): Try making const_to_primval instead.\n     fn const_to_ptr(&mut self, const_val: &const_val::ConstVal) -> EvalResult<'tcx, Pointer> {\n         use rustc::middle::const_val::ConstVal::*;\n+        use rustc_const_math::{ConstInt, ConstIsize, ConstUsize};\n+        macro_rules! i2p {\n+            ($i:ident, $n:expr) => {{\n+                let ptr = self.memory.allocate($n);\n+                self.memory.write_int(ptr, $i as i64, $n)?;\n+                Ok(ptr)\n+            }}\n+        }\n         match *const_val {\n             Float(_f) => unimplemented!(),\n-            Integral(int) => {\n-                // TODO(solson): Check int constant type.\n-                let ptr = self.memory.allocate(8);\n-                self.memory.write_uint(ptr, int.to_u64_unchecked(), 8)?;\n-                Ok(ptr)\n-            }\n+            Integral(ConstInt::Infer(_)) => unreachable!(),\n+            Integral(ConstInt::InferSigned(_)) => unreachable!(),\n+            Integral(ConstInt::I8(i)) => i2p!(i, 1),\n+            Integral(ConstInt::U8(i)) => i2p!(i, 1),\n+            Integral(ConstInt::I16(i)) => i2p!(i, 2),\n+            Integral(ConstInt::U16(i)) => i2p!(i, 2),\n+            Integral(ConstInt::I32(i)) => i2p!(i, 4),\n+            Integral(ConstInt::U32(i)) => i2p!(i, 4),\n+            Integral(ConstInt::I64(i)) => i2p!(i, 8),\n+            Integral(ConstInt::U64(i)) => i2p!(i, 8),\n+            Integral(ConstInt::Isize(ConstIsize::Is16(i))) => i2p!(i, 2),\n+            Integral(ConstInt::Isize(ConstIsize::Is32(i))) => i2p!(i, 4),\n+            Integral(ConstInt::Isize(ConstIsize::Is64(i))) => i2p!(i, 8),\n+            Integral(ConstInt::Usize(ConstUsize::Us16(i))) => i2p!(i, 2),\n+            Integral(ConstInt::Usize(ConstUsize::Us32(i))) => i2p!(i, 4),\n+            Integral(ConstInt::Usize(ConstUsize::Us64(i))) => i2p!(i, 8),\n             Str(ref s) => {\n                 let psize = self.memory.pointer_size();\n                 let static_ptr = self.memory.allocate(s.len());"}]}