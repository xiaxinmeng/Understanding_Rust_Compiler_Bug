{"sha": "12775ce16a4449c0f04cbce14efc56ac8d9ed39a", "node_id": "C_kwDOAAsO6NoAKDEyNzc1Y2UxNmE0NDQ5YzBmMDRjYmNlMTRlZmM1NmFjOGQ5ZWQzOWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-19T19:38:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-19T19:38:41Z"}, "message": "Rollup merge of #103239 - m-ou-se:unstable-abi-fn-impl-check, r=lcnr\n\nAllow #[unstable] impls for fn() with unstable abi.\n\nThis allows `#[unstable]` trait impls for `extern \"unwind-C\" fn()`, based on the fact that that abi and therefore that type is unstable.\n\nSee https://github.com/rust-lang/rust/pull/101263#issuecomment-1283099947", "tree": {"sha": "e269243eae42d3123a31d8b7ab53362410c3c84a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e269243eae42d3123a31d8b7ab53362410c3c84a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12775ce16a4449c0f04cbce14efc56ac8d9ed39a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjUFJBCRBK7hj4Ov3rIwAA9UsIAElr8BdzVM4pY6aKv7PQovTX\n9P4urMb4x9b5tQYOr1tYy4oQr6Rktjggh35VkP51Jysrnv5gmLNUW+HWGyLooBtV\npkI2sBswEUcQiHHJQFCURgCzCanGMCrgy6qxK9zDUlTcliBPbNIUDPN4oC8KoNTZ\nvfEssON1K847d3lXyTxkxTttJH1X3RrqXVg7nlS+XEOANL04sNS/DocNoE/nq/zr\nSuyPMVJ2atpQK37M6/lu6tygBly81q6Sg2R2J7fH920homvcpoUcMZtizXmkgvz9\nr5HwEwZEf9J7vxJ/r50lu4YJkyXfWsMXm2V2rTbbzvt1bVBrHxnUiZ5RY6omZwI=\n=YYIB\n-----END PGP SIGNATURE-----\n", "payload": "tree e269243eae42d3123a31d8b7ab53362410c3c84a\nparent d17cef67a2e07c4146ce25628c5f179099b20596\nparent c4f829b2e5053cef753e010fa89bcc01b164a306\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666208321 +0200\ncommitter GitHub <noreply@github.com> 1666208321 +0200\n\nRollup merge of #103239 - m-ou-se:unstable-abi-fn-impl-check, r=lcnr\n\nAllow #[unstable] impls for fn() with unstable abi.\n\nThis allows `#[unstable]` trait impls for `extern \"unwind-C\" fn()`, based on the fact that that abi and therefore that type is unstable.\n\nSee https://github.com/rust-lang/rust/pull/101263#issuecomment-1283099947\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12775ce16a4449c0f04cbce14efc56ac8d9ed39a", "html_url": "https://github.com/rust-lang/rust/commit/12775ce16a4449c0f04cbce14efc56ac8d9ed39a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12775ce16a4449c0f04cbce14efc56ac8d9ed39a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d17cef67a2e07c4146ce25628c5f179099b20596", "url": "https://api.github.com/repos/rust-lang/rust/commits/d17cef67a2e07c4146ce25628c5f179099b20596", "html_url": "https://github.com/rust-lang/rust/commit/d17cef67a2e07c4146ce25628c5f179099b20596"}, {"sha": "c4f829b2e5053cef753e010fa89bcc01b164a306", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f829b2e5053cef753e010fa89bcc01b164a306", "html_url": "https://github.com/rust-lang/rust/commit/c4f829b2e5053cef753e010fa89bcc01b164a306"}], "stats": {"total": 317, "additions": 153, "deletions": 164}, "files": [{"sha": "9591aeb881f3d58c8e4790e0120ff7e7f5381b9d", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/12775ce16a4449c0f04cbce14efc56ac8d9ed39a/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12775ce16a4449c0f04cbce14efc56ac8d9ed39a/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=12775ce16a4449c0f04cbce14efc56ac8d9ed39a", "patch": "@@ -891,8 +891,25 @@ impl<'tcx> Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n         if let TyKind::Never = t.kind {\n             self.fully_stable = false;\n         }\n+        if let TyKind::BareFn(f) = t.kind {\n+            if rustc_target::spec::abi::is_stable(f.abi.name()).is_err() {\n+                self.fully_stable = false;\n+            }\n+        }\n         intravisit::walk_ty(self, t)\n     }\n+\n+    fn visit_fn_decl(&mut self, fd: &'tcx hir::FnDecl<'tcx>) {\n+        for ty in fd.inputs {\n+            self.visit_ty(ty)\n+        }\n+        if let hir::FnRetTy::Return(output_ty) = fd.output {\n+            match output_ty.kind {\n+                TyKind::Never => {} // `-> !` is stable\n+                _ => self.visit_ty(output_ty),\n+            }\n+        }\n+    }\n }\n \n /// Given the list of enabled features that were not language features (i.e., that"}, {"sha": "ce45fa13970b4bdfa4f4b25c38100d0e4ffa3381", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 109, "deletions": 159, "changes": 268, "blob_url": "https://github.com/rust-lang/rust/blob/12775ce16a4449c0f04cbce14efc56ac8d9ed39a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12775ce16a4449c0f04cbce14efc56ac8d9ed39a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=12775ce16a4449c0f04cbce14efc56ac8d9ed39a", "patch": "@@ -109,175 +109,125 @@ pub enum AbiDisabled {\n     Unrecognized,\n }\n \n-fn gate_feature_post(\n+pub fn is_enabled(\n     features: &rustc_feature::Features,\n-    feature: Symbol,\n     span: Span,\n-    explain: &'static str,\n+    name: &str,\n ) -> Result<(), AbiDisabled> {\n-    if !features.enabled(feature) && !span.allows_unstable(feature) {\n-        Err(AbiDisabled::Unstable { feature, explain })\n-    } else {\n-        Ok(())\n+    let s = is_stable(name);\n+    if let Err(AbiDisabled::Unstable { feature, .. }) = s {\n+        if features.enabled(feature) || span.allows_unstable(feature) {\n+            return Ok(());\n+        }\n     }\n+    s\n }\n \n-pub fn is_enabled(\n-    features: &rustc_feature::Features,\n-    span: Span,\n-    name: &str,\n-) -> Result<(), AbiDisabled> {\n+pub fn is_stable(name: &str) -> Result<(), AbiDisabled> {\n     match name {\n         // Stable\n         \"Rust\" | \"C\" | \"cdecl\" | \"stdcall\" | \"fastcall\" | \"aapcs\" | \"win64\" | \"sysv64\"\n         | \"system\" => Ok(()),\n-        \"rust-intrinsic\" => {\n-            gate_feature_post(features, sym::intrinsics, span, \"intrinsics are subject to change\")\n-        }\n-        \"platform-intrinsic\" => gate_feature_post(\n-            features,\n-            sym::platform_intrinsics,\n-            span,\n-            \"platform intrinsics are experimental and possibly buggy\",\n-        ),\n-        \"vectorcall\" => gate_feature_post(\n-            features,\n-            sym::abi_vectorcall,\n-            span,\n-            \"vectorcall is experimental and subject to change\",\n-        ),\n-        \"thiscall\" => gate_feature_post(\n-            features,\n-            sym::abi_thiscall,\n-            span,\n-            \"thiscall is experimental and subject to change\",\n-        ),\n-        \"rust-call\" => gate_feature_post(\n-            features,\n-            sym::unboxed_closures,\n-            span,\n-            \"rust-call ABI is subject to change\",\n-        ),\n-        \"rust-cold\" => gate_feature_post(\n-            features,\n-            sym::rust_cold_cc,\n-            span,\n-            \"rust-cold is experimental and subject to change\",\n-        ),\n-        \"ptx-kernel\" => gate_feature_post(\n-            features,\n-            sym::abi_ptx,\n-            span,\n-            \"PTX ABIs are experimental and subject to change\",\n-        ),\n-        \"unadjusted\" => gate_feature_post(\n-            features,\n-            sym::abi_unadjusted,\n-            span,\n-            \"unadjusted ABI is an implementation detail and perma-unstable\",\n-        ),\n-        \"msp430-interrupt\" => gate_feature_post(\n-            features,\n-            sym::abi_msp430_interrupt,\n-            span,\n-            \"msp430-interrupt ABI is experimental and subject to change\",\n-        ),\n-        \"x86-interrupt\" => gate_feature_post(\n-            features,\n-            sym::abi_x86_interrupt,\n-            span,\n-            \"x86-interrupt ABI is experimental and subject to change\",\n-        ),\n-        \"amdgpu-kernel\" => gate_feature_post(\n-            features,\n-            sym::abi_amdgpu_kernel,\n-            span,\n-            \"amdgpu-kernel ABI is experimental and subject to change\",\n-        ),\n-        \"avr-interrupt\" | \"avr-non-blocking-interrupt\" => gate_feature_post(\n-            features,\n-            sym::abi_avr_interrupt,\n-            span,\n-            \"avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\",\n-        ),\n-        \"efiapi\" => gate_feature_post(\n-            features,\n-            sym::abi_efiapi,\n-            span,\n-            \"efiapi ABI is experimental and subject to change\",\n-        ),\n-        \"C-cmse-nonsecure-call\" => gate_feature_post(\n-            features,\n-            sym::abi_c_cmse_nonsecure_call,\n-            span,\n-            \"C-cmse-nonsecure-call ABI is experimental and subject to change\",\n-        ),\n-        \"C-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"C-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"stdcall-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"stdcall-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"system-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"system-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"thiscall-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"thiscall-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"cdecl-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"cdecl-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"fastcall-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"fastcall-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"vectorcall-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"vectorcall-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"aapcs-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"aapcs-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"win64-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"win64-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"sysv64-unwind\" => gate_feature_post(\n-            features,\n-            sym::c_unwind,\n-            span,\n-            \"sysv64-unwind ABI is experimental and subject to change\",\n-        ),\n-        \"wasm\" => gate_feature_post(\n-            features,\n-            sym::wasm_abi,\n-            span,\n-            \"wasm ABI is experimental and subject to change\",\n-        ),\n+        \"rust-intrinsic\" => Err(AbiDisabled::Unstable {\n+            feature: sym::intrinsics,\n+            explain: \"intrinsics are subject to change\",\n+        }),\n+        \"platform-intrinsic\" => Err(AbiDisabled::Unstable {\n+            feature: sym::platform_intrinsics,\n+            explain: \"platform intrinsics are experimental and possibly buggy\",\n+        }),\n+        \"vectorcall\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_vectorcall,\n+            explain: \"vectorcall is experimental and subject to change\",\n+        }),\n+        \"thiscall\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_thiscall,\n+            explain: \"thiscall is experimental and subject to change\",\n+        }),\n+        \"rust-call\" => Err(AbiDisabled::Unstable {\n+            feature: sym::unboxed_closures,\n+            explain: \"rust-call ABI is subject to change\",\n+        }),\n+        \"rust-cold\" => Err(AbiDisabled::Unstable {\n+            feature: sym::rust_cold_cc,\n+            explain: \"rust-cold is experimental and subject to change\",\n+        }),\n+        \"ptx-kernel\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_ptx,\n+            explain: \"PTX ABIs are experimental and subject to change\",\n+        }),\n+        \"unadjusted\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_unadjusted,\n+            explain: \"unadjusted ABI is an implementation detail and perma-unstable\",\n+        }),\n+        \"msp430-interrupt\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_msp430_interrupt,\n+            explain: \"msp430-interrupt ABI is experimental and subject to change\",\n+        }),\n+        \"x86-interrupt\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_x86_interrupt,\n+            explain: \"x86-interrupt ABI is experimental and subject to change\",\n+        }),\n+        \"amdgpu-kernel\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_amdgpu_kernel,\n+            explain: \"amdgpu-kernel ABI is experimental and subject to change\",\n+        }),\n+        \"avr-interrupt\" | \"avr-non-blocking-interrupt\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_avr_interrupt,\n+            explain: \"avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\",\n+        }),\n+        \"efiapi\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_efiapi,\n+            explain: \"efiapi ABI is experimental and subject to change\",\n+        }),\n+        \"C-cmse-nonsecure-call\" => Err(AbiDisabled::Unstable {\n+            feature: sym::abi_c_cmse_nonsecure_call,\n+            explain: \"C-cmse-nonsecure-call ABI is experimental and subject to change\",\n+        }),\n+        \"C-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"C-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"stdcall-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"stdcall-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"system-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"system-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"thiscall-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"thiscall-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"cdecl-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"cdecl-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"fastcall-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"fastcall-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"vectorcall-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"vectorcall-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"aapcs-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"aapcs-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"win64-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"win64-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"sysv64-unwind\" => Err(AbiDisabled::Unstable {\n+            feature: sym::c_unwind,\n+            explain: \"sysv64-unwind ABI is experimental and subject to change\",\n+        }),\n+        \"wasm\" => Err(AbiDisabled::Unstable {\n+            feature: sym::wasm_abi,\n+            explain: \"wasm ABI is experimental and subject to change\",\n+        }),\n         _ => Err(AbiDisabled::Unrecognized),\n     }\n }"}, {"sha": "0c771ae87953c4ef24f9135430681def9f7937ac", "filename": "src/test/ui/stability-attribute/stability-attribute-trait-impl.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12775ce16a4449c0f04cbce14efc56ac8d9ed39a/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12775ce16a4449c0f04cbce14efc56ac8d9ed39a/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.rs?ref=12775ce16a4449c0f04cbce14efc56ac8d9ed39a", "patch": "@@ -1,4 +1,4 @@\n-#![feature(staged_api)]\n+#![feature(staged_api, never_type, c_unwind)]\n //~^ ERROR module has missing stability attribute\n \n #[stable(feature = \"a\", since = \"1\")]\n@@ -23,7 +23,21 @@ impl StableTrait for UnstableType {}\n impl UnstableTrait for StableType {}\n \n #[unstable(feature = \"h\", issue = \"none\")]\n+impl StableTrait for ! {}\n+\n+// Note: If C-unwind is stabilized, switch this to another (unstable) ABI.\n+#[unstable(feature = \"i\", issue = \"none\")]\n+impl StableTrait for extern \"C-unwind\" fn() {}\n+\n+#[unstable(feature = \"j\", issue = \"none\")]\n //~^ ERROR an `#[unstable]` annotation here has no effect [ineffective_unstable_trait_impl]\n impl StableTrait for StableType {}\n \n+#[unstable(feature = \"k\", issue = \"none\")]\n+//~^ ERROR an `#[unstable]` annotation here has no effect [ineffective_unstable_trait_impl]\n+impl StableTrait for fn() -> ! {}\n+\n+#[unstable(feature = \"l\", issue = \"none\")]\n+impl StableTrait for fn() -> UnstableType {}\n+\n fn main() {}"}, {"sha": "b91a1d2e11a8a9c2dfc3785fb7903443078b8148", "filename": "src/test/ui/stability-attribute/stability-attribute-trait-impl.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12775ce16a4449c0f04cbce14efc56ac8d9ed39a/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12775ce16a4449c0f04cbce14efc56ac8d9ed39a/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-trait-impl.stderr?ref=12775ce16a4449c0f04cbce14efc56ac8d9ed39a", "patch": "@@ -1,16 +1,24 @@\n error: an `#[unstable]` annotation here has no effect\n-  --> $DIR/stability-attribute-trait-impl.rs:25:1\n+  --> $DIR/stability-attribute-trait-impl.rs:32:1\n    |\n-LL | #[unstable(feature = \"h\", issue = \"none\")]\n+LL | #[unstable(feature = \"j\", issue = \"none\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #55436 <https://github.com/rust-lang/rust/issues/55436> for more information\n    = note: `#[deny(ineffective_unstable_trait_impl)]` on by default\n \n+error: an `#[unstable]` annotation here has no effect\n+  --> $DIR/stability-attribute-trait-impl.rs:36:1\n+   |\n+LL | #[unstable(feature = \"k\", issue = \"none\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #55436 <https://github.com/rust-lang/rust/issues/55436> for more information\n+\n error: module has missing stability attribute\n   --> $DIR/stability-attribute-trait-impl.rs:1:1\n    |\n-LL | / #![feature(staged_api)]\n+LL | / #![feature(staged_api, never_type, c_unwind)]\n LL | |\n LL | |\n LL | | #[stable(feature = \"a\", since = \"1\")]\n@@ -19,5 +27,5 @@ LL | |\n LL | | fn main() {}\n    | |____________^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}]}