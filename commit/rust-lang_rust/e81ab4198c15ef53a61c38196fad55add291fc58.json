{"sha": "e81ab4198c15ef53a61c38196fad55add291fc58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MWFiNDE5OGMxNWVmNTNhNjFjMzgxOTZmYWQ1NWFkZDI5MWZjNTg=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-01-23T14:51:54Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-01-27T20:32:30Z"}, "message": "Removed take_glue from tydesc, inlining the equivalent refcount increment code instead.", "tree": {"sha": "74fbbe58de9ebeb78309a88f86a8e663a304a97b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74fbbe58de9ebeb78309a88f86a8e663a304a97b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e81ab4198c15ef53a61c38196fad55add291fc58", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e81ab4198c15ef53a61c38196fad55add291fc58", "html_url": "https://github.com/rust-lang/rust/commit/e81ab4198c15ef53a61c38196fad55add291fc58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e81ab4198c15ef53a61c38196fad55add291fc58/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6d7812da841ddedf6c765eebb655be9866956ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d7812da841ddedf6c765eebb655be9866956ce", "html_url": "https://github.com/rust-lang/rust/commit/d6d7812da841ddedf6c765eebb655be9866956ce"}], "stats": {"total": 208, "additions": 62, "deletions": 146}, "files": [{"sha": "83a17bd3231a2442285a5035f95036950934858f", "filename": "src/librustc/back/abi.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibrustc%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibrustc%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fabi.rs?ref=e81ab4198c15ef53a61c38196fad55add291fc58", "patch": "@@ -42,11 +42,10 @@ pub static general_code_alignment: uint = 16u;\n \n pub static tydesc_field_size: uint = 0u;\n pub static tydesc_field_align: uint = 1u;\n-pub static tydesc_field_take_glue: uint = 2u;\n-pub static tydesc_field_drop_glue: uint = 3u;\n-pub static tydesc_field_visit_glue: uint = 4u;\n-pub static tydesc_field_name_offset: uint = 5u;\n-pub static n_tydesc_fields: uint = 6u;\n+pub static tydesc_field_drop_glue: uint = 2u;\n+pub static tydesc_field_visit_glue: uint = 3u;\n+pub static tydesc_field_name_offset: uint = 4u;\n+pub static n_tydesc_fields: uint = 5u;\n \n // The two halves of a closure: code and environment.\n pub static fn_field_code: uint = 0u;"}, {"sha": "1dea31939f57ffad7b2bb1fc1bc61a008b914724", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=e81ab4198c15ef53a61c38196fad55add291fc58", "patch": "@@ -777,16 +777,16 @@ pub fn iter_structural_ty<'r,\n                       let variant_cx =\n                           fcx.new_temp_block(~\"enum-iter-variant-\" +\n                                              variant.disr_val.to_str());\n-                      let variant_cx =\n-                          iter_variant(variant_cx, repr, av, *variant,\n-                                       substs.tps, |x,y,z| f(x,y,z));\n                       match adt::trans_case(cx, repr, variant.disr_val) {\n                           _match::single_result(r) => {\n                               AddCase(llswitch, r.val, variant_cx.llbb)\n                           }\n                           _ => ccx.sess.unimpl(\"value from adt::trans_case \\\n                                                 in iter_structural_ty\")\n                       }\n+                      let variant_cx =\n+                          iter_variant(variant_cx, repr, av, *variant,\n+                                       substs.tps, |x,y,z| f(x,y,z));\n                       Br(variant_cx, next_cx.llbb);\n                   }\n                   cx = next_cx;\n@@ -1458,16 +1458,16 @@ pub fn build_return_block(fcx: &FunctionContext, ret_cx: &Block) {\n // trans_closure: Builds an LLVM function out of a source function.\n // If the function closes over its environment a closure will be\n // returned.\n-pub fn trans_closure(ccx: @CrateContext,\n-                     path: ast_map::Path,\n-                     decl: &ast::FnDecl,\n-                     body: &ast::Block,\n-                     llfndecl: ValueRef,\n-                     param_substs: Option<@param_substs>,\n-                     id: ast::NodeId,\n-                     _attributes: &[ast::Attribute],\n-                     output_type: ty::t,\n-                     maybe_load_env: |&FunctionContext|) {\n+pub fn trans_closure<'a>(ccx: @CrateContext,\n+                         path: ast_map::Path,\n+                         decl: &ast::FnDecl,\n+                         body: &ast::Block,\n+                         llfndecl: ValueRef,\n+                         param_substs: Option<@param_substs>,\n+                         id: ast::NodeId,\n+                         _attributes: &[ast::Attribute],\n+                         output_type: ty::t,\n+                         maybe_load_env: |&'a Block<'a>| -> &'a Block<'a>) {\n     ccx.stats.n_closures.set(ccx.stats.n_closures.get() + 1);\n \n     let _icx = push_ctxt(\"trans_closure\");\n@@ -1500,7 +1500,7 @@ pub fn trans_closure(ccx: @CrateContext,\n \n     bcx = copy_args_to_allocas(&fcx, arg_scope, bcx, decl.inputs, arg_datums);\n \n-    maybe_load_env(&fcx);\n+    bcx = maybe_load_env(bcx);\n \n     // Up until here, IR instructions for this function have explicitly not been annotated with\n     // source code location, so we don't step into call setup code. From here on, source location\n@@ -1558,16 +1558,8 @@ pub fn trans_fn(ccx: @CrateContext,\n     debug!(\"trans_fn(param_substs={})\", param_substs.repr(ccx.tcx));\n     let _icx = push_ctxt(\"trans_fn\");\n     let output_type = ty::ty_fn_ret(ty::node_id_to_type(ccx.tcx, id));\n-    trans_closure(ccx,\n-                  path.clone(),\n-                  decl,\n-                  body,\n-                  llfndecl,\n-                  param_substs,\n-                  id,\n-                  attrs,\n-                  output_type,\n-                  |_fcx| { });\n+    trans_closure(ccx, path.clone(), decl, body, llfndecl,\n+                  param_substs, id, attrs, output_type, |bcx| bcx);\n }\n \n pub fn trans_enum_variant(ccx: @CrateContext,"}, {"sha": "5a8039f9c4d65b12f250138bcd7f8c5dd1bb0c60", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=e81ab4198c15ef53a61c38196fad55add291fc58", "patch": "@@ -282,23 +282,22 @@ fn build_closure<'a>(bcx0: &'a Block<'a>,\n // Given an enclosing block context, a new function context, a closure type,\n // and a list of upvars, generate code to load and populate the environment\n // with the upvars and type descriptors.\n-fn load_environment(fcx: &FunctionContext, cdata_ty: ty::t,\n-                    cap_vars: &[moves::CaptureVar], sigil: ast::Sigil) {\n+fn load_environment<'a>(bcx: &'a Block<'a>, cdata_ty: ty::t,\n+                        cap_vars: &[moves::CaptureVar],\n+                        sigil: ast::Sigil) -> &'a Block<'a> {\n     let _icx = push_ctxt(\"closure::load_environment\");\n \n     // Don't bother to create the block if there's nothing to load\n     if cap_vars.len() == 0 {\n-        return;\n+        return bcx;\n     }\n \n-    let bcx = fcx.entry_bcx.get().unwrap();\n-\n     // Load a pointer to the closure data, skipping over the box header:\n-    let llcdata = at_box_body(bcx, cdata_ty, fcx.llenv.unwrap());\n+    let llcdata = at_box_body(bcx, cdata_ty, bcx.fcx.llenv.unwrap());\n \n     // Store the pointer to closure data in an alloca for debug info because that's what the\n     // llvm.dbg.declare intrinsic expects\n-    let env_pointer_alloca = if fcx.ccx.sess.opts.extra_debuginfo {\n+    let env_pointer_alloca = if bcx.ccx().sess.opts.extra_debuginfo {\n         let alloc = alloc_ty(bcx, ty::mk_mut_ptr(bcx.tcx(), cdata_ty), \"__debuginfo_env_ptr\");\n         Store(bcx, llcdata, alloc);\n         Some(alloc)\n@@ -317,7 +316,7 @@ fn load_environment(fcx: &FunctionContext, cdata_ty: ty::t,\n         let def_id = ast_util::def_id_of_def(cap_var.def);\n \n         {\n-            let mut llupvars = fcx.llupvars.borrow_mut();\n+            let mut llupvars = bcx.fcx.llupvars.borrow_mut();\n             llupvars.get().insert(def_id.node, upvarptr);\n         }\n \n@@ -334,6 +333,8 @@ fn load_environment(fcx: &FunctionContext, cdata_ty: ty::t,\n \n         i += 1u;\n     }\n+\n+    bcx\n }\n \n fn fill_fn_pair(bcx: &Block, pair: ValueRef, llfn: ValueRef, llenvptr: ValueRef) {\n@@ -405,7 +406,7 @@ pub fn trans_expr_fn<'a>(\n     trans_closure(ccx, sub_path, decl, body, llfn,\n                     bcx.fcx.param_substs, user_id,\n                     [], ty::ty_fn_ret(fty),\n-                    |fcx| load_environment(fcx, cdata_ty, cap_vars, sigil));\n+                    |bcx| load_environment(bcx, cdata_ty, cap_vars, sigil));\n     fill_fn_pair(bcx, dest_addr, llfn, llbox);\n \n     bcx"}, {"sha": "38badc20c19ac9d3450b290dae96da87a465b279", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=e81ab4198c15ef53a61c38196fad55add291fc58", "patch": "@@ -114,7 +114,6 @@ pub struct tydesc_info {\n     size: ValueRef,\n     align: ValueRef,\n     name: ValueRef,\n-    take_glue: Cell<Option<ValueRef>>,\n     drop_glue: Cell<Option<ValueRef>>,\n     visit_glue: Cell<Option<ValueRef>>,\n }"}, {"sha": "4888c2ce4d5dc920f8ce9c251b59501ce1311092", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=e81ab4198c15ef53a61c38196fad55add291fc58", "patch": "@@ -491,7 +491,7 @@ impl Datum<Expr> {\n                     }\n                     ByValue => {\n                         let v = load(bcx, l.val, l.ty);\n-                        l.kind.post_store(bcx, l.val, l.ty);\n+                        bcx = l.kind.post_store(bcx, l.val, l.ty);\n                         DatumBlock(bcx, Datum(v, l.ty, Rvalue(ByValue)))\n                     }\n                 }"}, {"sha": "ea5e6e8d38604de95df44c44a3189e261492ce6a", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 29, "deletions": 105, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=e81ab4198c15ef53a61c38196fad55add291fc58", "patch": "@@ -58,14 +58,24 @@ pub fn trans_exchange_free<'a>(cx: &'a Block<'a>, v: ValueRef)\n         Some(expr::Ignore)).bcx\n }\n \n-pub fn take_ty<'a>(cx: &'a Block<'a>, v: ValueRef, t: ty::t)\n+pub fn take_ty<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)\n                -> &'a Block<'a> {\n     // NB: v is an *alias* of type t here, not a direct value.\n     let _icx = push_ctxt(\"take_ty\");\n-    if ty::type_needs_drop(cx.tcx(), t) {\n-        return call_tydesc_glue(cx, v, t, abi::tydesc_field_take_glue);\n+    match ty::get(t).sty {\n+        ty::ty_box(_) |\n+        ty::ty_vec(_, ty::vstore_box) | ty::ty_str(ty::vstore_box) => {\n+            incr_refcnt_of_boxed(bcx, v)\n+        }\n+        ty::ty_trait(_, _, ty::BoxTraitStore, _, _) => {\n+            incr_refcnt_of_boxed(bcx, GEPi(bcx, v, [0u, abi::trt_field_box]))\n+        }\n+        _ if ty::type_is_structural(t)\n+          && ty::type_needs_drop(bcx.tcx(), t) => {\n+            iter_structural_ty(bcx, v, t, take_ty)\n+        }\n+        _ => bcx\n     }\n-    return cx;\n }\n \n pub fn drop_ty<'a>(cx: &'a Block<'a>, v: ValueRef, t: ty::t)\n@@ -88,30 +98,15 @@ pub fn drop_ty_immediate<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)\n \n pub fn lazily_emit_all_tydesc_glue(ccx: @CrateContext,\n                                    static_ti: @tydesc_info) {\n-    lazily_emit_tydesc_glue(ccx, abi::tydesc_field_take_glue, static_ti);\n     lazily_emit_tydesc_glue(ccx, abi::tydesc_field_drop_glue, static_ti);\n     lazily_emit_tydesc_glue(ccx, abi::tydesc_field_visit_glue, static_ti);\n }\n \n fn simplified_glue_type(tcx: ty::ctxt, field: uint, t: ty::t) -> ty::t {\n-    if (field == abi::tydesc_field_take_glue || field == abi::tydesc_field_drop_glue)\n-        && !ty::type_needs_drop(tcx, t) {\n-        return ty::mk_nil();\n-    }\n-\n-    if field == abi::tydesc_field_take_glue {\n-        match ty::get(t).sty {\n-            ty::ty_str(ty::vstore_uniq) |  ty::ty_vec(_, ty::vstore_uniq) |\n-            ty::ty_unboxed_vec(..) | ty::ty_uniq(..) => return ty::mk_nil(),\n-            _ => {}\n-        }\n-    }\n-\n-    if field == abi::tydesc_field_take_glue && ty::type_is_boxed(t) {\n-        return ty::mk_box(tcx, ty::mk_nil());\n-    }\n-\n     if field == abi::tydesc_field_drop_glue {\n+        if !ty::type_needs_drop(tcx, t) {\n+            return ty::mk_nil();\n+        }\n         match ty::get(t).sty {\n             ty::ty_box(typ)\n                 if !ty::type_needs_drop(tcx, typ) =>\n@@ -145,9 +140,7 @@ fn lazily_emit_tydesc_glue(ccx: @CrateContext, field: uint, ti: @tydesc_info) {\n         let simpl_ti = get_tydesc(ccx, simpl);\n         lazily_emit_tydesc_glue(ccx, field, simpl_ti);\n \n-        if field == abi::tydesc_field_take_glue {\n-            ti.take_glue.set(simpl_ti.take_glue.get());\n-        } else if field == abi::tydesc_field_drop_glue {\n+        if field == abi::tydesc_field_drop_glue {\n             ti.drop_glue.set(simpl_ti.drop_glue.get());\n         } else if field == abi::tydesc_field_visit_glue {\n             ti.visit_glue.set(simpl_ti.visit_glue.get());\n@@ -158,20 +151,7 @@ fn lazily_emit_tydesc_glue(ccx: @CrateContext, field: uint, ti: @tydesc_info) {\n \n     let llfnty = Type::glue_fn(type_of(ccx, ti.ty).ptr_to());\n \n-    if field == abi::tydesc_field_take_glue {\n-        match ti.take_glue.get() {\n-          Some(_) => (),\n-          None => {\n-            debug!(\"+++ lazily_emit_tydesc_glue TAKE {}\",\n-                   ppaux::ty_to_str(ccx.tcx, ti.ty));\n-            let glue_fn = declare_generic_glue(ccx, ti.ty, llfnty, \"take\");\n-            ti.take_glue.set(Some(glue_fn));\n-            make_generic_glue(ccx, ti.ty, glue_fn, make_take_glue, \"take\");\n-            debug!(\"--- lazily_emit_tydesc_glue TAKE {}\",\n-                   ppaux::ty_to_str(ccx.tcx, ti.ty));\n-          }\n-        }\n-    } else if field == abi::tydesc_field_drop_glue {\n+    if field == abi::tydesc_field_drop_glue {\n         match ti.drop_glue.get() {\n           Some(_) => (),\n           None => {\n@@ -213,9 +193,7 @@ pub fn call_tydesc_glue_full(bcx: &Block, v: ValueRef, tydesc: ValueRef,\n         None => None,\n         Some(sti) => {\n             lazily_emit_tydesc_glue(ccx, field, sti);\n-            if field == abi::tydesc_field_take_glue {\n-                sti.take_glue.get()\n-            } else if field == abi::tydesc_field_drop_glue {\n+            if field == abi::tydesc_field_drop_glue {\n                 sti.drop_glue.get()\n             } else if field == abi::tydesc_field_visit_glue {\n                 sti.visit_glue.get()\n@@ -472,53 +450,16 @@ fn decr_refcnt_maybe_free<'a>(bcx: &'a Block<'a>, box_ptr_ptr: ValueRef,\n     next_bcx\n }\n \n-fn make_take_glue<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t) -> &'a Block<'a> {\n-    let _icx = push_ctxt(\"make_take_glue\");\n-    // NB: v is a *pointer* to type t here, not a direct value.\n-    match ty::get(t).sty {\n-        ty::ty_box(_) |\n-        ty::ty_vec(_, ty::vstore_box) | ty::ty_str(ty::vstore_box) => {\n-            incr_refcnt_of_boxed(bcx, Load(bcx, v)); bcx\n-        }\n-        ty::ty_vec(_, ty::vstore_slice(_))\n-        | ty::ty_str(ty::vstore_slice(_)) => {\n-            bcx\n-        }\n-        ty::ty_closure(_) => bcx,\n-        ty::ty_trait(_, _, ty::BoxTraitStore, _, _) => {\n-            let llbox = Load(bcx, GEPi(bcx, v, [0u, abi::trt_field_box]));\n-            incr_refcnt_of_boxed(bcx, llbox);\n-            bcx\n-        }\n-        ty::ty_trait(_, _, ty::UniqTraitStore, _, _) => {\n-            let lluniquevalue = GEPi(bcx, v, [0, abi::trt_field_box]);\n-            let llvtable = Load(bcx, GEPi(bcx, v, [0, abi::trt_field_vtable]));\n-\n-            // Cast the vtable to a pointer to a pointer to a tydesc.\n-            let llvtable = PointerCast(bcx, llvtable,\n-                                       bcx.ccx().tydesc_type.ptr_to().ptr_to());\n-            let lltydesc = Load(bcx, llvtable);\n-            call_tydesc_glue_full(bcx,\n-                                  lluniquevalue,\n-                                  lltydesc,\n-                                  abi::tydesc_field_take_glue,\n-                                  None);\n-            bcx\n-        }\n-        _ if ty::type_is_structural(t) => {\n-            iter_structural_ty(bcx, v, t, take_ty)\n-        }\n-        _ => bcx\n-    }\n-}\n-\n-fn incr_refcnt_of_boxed(cx: &Block, box_ptr: ValueRef) {\n+fn incr_refcnt_of_boxed<'a>(bcx: &'a Block<'a>,\n+                            box_ptr_ptr: ValueRef) -> &'a Block<'a> {\n     let _icx = push_ctxt(\"incr_refcnt_of_boxed\");\n-    let ccx = cx.ccx();\n-    let rc_ptr = GEPi(cx, box_ptr, [0u, abi::box_field_refcnt]);\n-    let rc = Load(cx, rc_ptr);\n-    let rc = Add(cx, rc, C_int(ccx, 1));\n-    Store(cx, rc, rc_ptr);\n+    let ccx = bcx.ccx();\n+    let box_ptr = Load(bcx, box_ptr_ptr);\n+    let rc_ptr = GEPi(bcx, box_ptr, [0u, abi::box_field_refcnt]);\n+    let rc = Load(bcx, rc_ptr);\n+    let rc = Add(bcx, rc, C_int(ccx, 1));\n+    Store(bcx, rc, rc_ptr);\n+    bcx\n }\n \n \n@@ -554,7 +495,6 @@ pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> @tydesc_info {\n         size: llsize,\n         align: llalign,\n         name: ty_name,\n-        take_glue: Cell::new(None),\n         drop_glue: Cell::new(None),\n         visit_glue: Cell::new(None),\n     };\n@@ -616,21 +556,6 @@ pub fn emit_tydescs(ccx: &CrateContext) {\n         // before being put into the tydesc because we only have a singleton\n         // tydesc type. Then we'll recast each function to its real type when\n         // calling it.\n-        let take_glue =\n-            match ti.take_glue.get() {\n-              None => {\n-                  ccx.stats.n_null_glues.set(ccx.stats.n_null_glues.get() +\n-                                             1);\n-                  C_null(glue_fn_ty)\n-              }\n-              Some(v) => {\n-                unsafe {\n-                    ccx.stats.n_real_glues.set(ccx.stats.n_real_glues.get() +\n-                                               1);\n-                    llvm::LLVMConstPointerCast(v, glue_fn_ty.to_ref())\n-                }\n-              }\n-            };\n         let drop_glue =\n             match ti.drop_glue.get() {\n               None => {\n@@ -665,7 +590,6 @@ pub fn emit_tydescs(ccx: &CrateContext) {\n         let tydesc = C_named_struct(ccx.tydesc_type,\n                                     [ti.size, // size\n                                      ti.align, // align\n-                                     take_glue, // take_glue\n                                      drop_glue, // drop_glue\n                                      visit_glue, // visit_glue\n                                      ti.name]); // name"}, {"sha": "e685849cbd85abc6ff13049835db58951a9e6c26", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=e81ab4198c15ef53a61c38196fad55add291fc58", "patch": "@@ -211,7 +211,6 @@ impl Type {\n \n         let elems = [int_ty,     // size\n                      int_ty,     // align\n-                     glue_fn_ty, // take\n                      glue_fn_ty, // drop\n                      glue_fn_ty, // visit\n                      Type::struct_([Type::i8p(), Type::int(arch)], false)]; // name"}, {"sha": "067826f04dc8364f568ce76495bc859ba5a1979b", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81ab4198c15ef53a61c38196fad55add291fc58/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=e81ab4198c15ef53a61c38196fad55add291fc58", "patch": "@@ -57,6 +57,8 @@ pub struct TyDesc {\n     align: uint,\n \n     // Called on a copy of a value of type `T` *after* memcpy\n+    // NOTE remove after next snapshot\n+    #[cfg(stage0)]\n     take_glue: GlueFn,\n \n     // Called when a value of type `T` is no longer needed"}]}