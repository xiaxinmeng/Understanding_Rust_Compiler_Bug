{"sha": "bdddaebd76cba207b67141e2c362a4fe117bbd34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZGRhZWJkNzZjYmEyMDdiNjcxNDFlMmMzNjJhNGZlMTE3YmJkMzQ=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-10T23:20:00Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-10T23:20:00Z"}, "message": "Fix type checking of return expressions outside fn bodies", "tree": {"sha": "1ecd5fe6a4cffb808b9a7256c00e058f48477301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ecd5fe6a4cffb808b9a7256c00e058f48477301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdddaebd76cba207b67141e2c362a4fe117bbd34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdddaebd76cba207b67141e2c362a4fe117bbd34", "html_url": "https://github.com/rust-lang/rust/commit/bdddaebd76cba207b67141e2c362a4fe117bbd34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdddaebd76cba207b67141e2c362a4fe117bbd34/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40c1623b16fb28f7625cab13570752d04513815c", "url": "https://api.github.com/repos/rust-lang/rust/commits/40c1623b16fb28f7625cab13570752d04513815c", "html_url": "https://github.com/rust-lang/rust/commit/40c1623b16fb28f7625cab13570752d04513815c"}], "stats": {"total": 234, "additions": 204, "deletions": 30}, "files": [{"sha": "e9bb2b1c914f273786208f3474f514a72211b994", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bdddaebd76cba207b67141e2c362a4fe117bbd34/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdddaebd76cba207b67141e2c362a4fe117bbd34/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=bdddaebd76cba207b67141e2c362a4fe117bbd34", "patch": "@@ -674,7 +674,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr<'tcx>,\n     ) -> Ty<'tcx> {\n         if self.ret_coercion.is_none() {\n-            self.tcx.sess.emit_err(ReturnStmtOutsideOfFnBody { span: expr.span });\n+            let mut err = ReturnStmtOutsideOfFnBody {\n+                span: expr.span,\n+                encl_body_span: None,\n+                encl_fn_span: None,\n+            };\n+\n+            let encl_item_id = self.tcx.hir().get_parent_item(expr.hir_id);\n+            let encl_item = self.tcx.hir().expect_item(encl_item_id);\n+\n+            if let hir::ItemKind::Fn(..) = encl_item.kind {\n+                // We are inside a function body, so reporting \"return statement\n+                // outside of function body\" needs an explanation.\n+\n+                let encl_body_owner_id = self.tcx.hir().enclosing_body_owner(expr.hir_id);\n+\n+                // If this didn't hold, we would not have to report an error in\n+                // the first place.\n+                assert_ne!(encl_item_id, encl_body_owner_id);\n+\n+                let encl_body_id = self.tcx.hir().body_owned_by(encl_body_owner_id);\n+                let encl_body = self.tcx.hir().body(encl_body_id);\n+\n+                err.encl_body_span = Some(encl_body.value.span);\n+                err.encl_fn_span = Some(encl_item.span);\n+            }\n+\n+            self.tcx.sess.emit_err(err);\n+\n+            if let Some(e) = expr_opt {\n+                // We still have to type-check `e` (issue #86188), but calling\n+                // `check_return_expr` only works inside fn bodies.\n+                self.check_expr(e);\n+            }\n         } else if let Some(e) = expr_opt {\n             if self.ret_coercion_span.get().is_none() {\n                 self.ret_coercion_span.set(Some(e.span));"}, {"sha": "1a21c085d5397f035ba9ebc14575176fcbaddac9", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdddaebd76cba207b67141e2c362a4fe117bbd34/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdddaebd76cba207b67141e2c362a4fe117bbd34/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=bdddaebd76cba207b67141e2c362a4fe117bbd34", "patch": "@@ -147,6 +147,10 @@ pub struct TypeofReservedKeywordUsed {\n pub struct ReturnStmtOutsideOfFnBody {\n     #[message = \"return statement outside of function body\"]\n     pub span: Span,\n+    #[label = \"the return is part of this body...\"]\n+    pub encl_body_span: Option<Span>,\n+    #[label = \"...not the enclosing function body\"]\n+    pub encl_fn_span: Option<Span>,\n }\n \n #[derive(SessionDiagnostic)]"}, {"sha": "8716524d6f4b527957281101625b8ce3ea9b1261", "filename": "src/test/ui/issues/issue-51714.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bdddaebd76cba207b67141e2c362a4fe117bbd34/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdddaebd76cba207b67141e2c362a4fe117bbd34/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs?ref=bdddaebd76cba207b67141e2c362a4fe117bbd34", "patch": "@@ -1,13 +1,21 @@\n fn main() {\n+//~^ NOTE: not the enclosing function body\n+//~| NOTE: not the enclosing function body\n+//~| NOTE: not the enclosing function body\n+//~| NOTE: not the enclosing function body\n     |_:  [_; return || {}] | {};\n-    //~^ ERROR return statement outside of function body\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n \n     [(); return || {}];\n-    //~^ ERROR return statement outside of function body\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n \n     [(); return |ice| {}];\n-    //~^ ERROR return statement outside of function body\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n \n     [(); return while let Some(n) = Some(0) {}];\n-    //~^ ERROR return statement outside of function body\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n }"}, {"sha": "514d69c1c7d3985f6254d32fca7afaed5274189f", "filename": "src/test/ui/issues/issue-51714.stderr", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bdddaebd76cba207b67141e2c362a4fe117bbd34/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdddaebd76cba207b67141e2c362a4fe117bbd34/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr?ref=bdddaebd76cba207b67141e2c362a4fe117bbd34", "patch": "@@ -1,26 +1,62 @@\n error[E0572]: return statement outside of function body\n-  --> $DIR/issue-51714.rs:2:14\n+  --> $DIR/issue-51714.rs:6:14\n    |\n-LL |     |_:  [_; return || {}] | {};\n-   |              ^^^^^^^^^^^^\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n+LL | |     |_:  [_; return || {}] | {};\n+   | |              ^^^^^^^^^^^^ the return is part of this body...\n+...  |\n+LL | |\n+LL | | }\n+   | |_- ...not the enclosing function body\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/issue-51714.rs:5:10\n+  --> $DIR/issue-51714.rs:10:10\n    |\n-LL |     [(); return || {}];\n-   |          ^^^^^^^^^^^^\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     [(); return || {}];\n+   | |          ^^^^^^^^^^^^ the return is part of this body...\n+...  |\n+LL | |\n+LL | | }\n+   | |_- ...not the enclosing function body\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/issue-51714.rs:8:10\n+  --> $DIR/issue-51714.rs:14:10\n    |\n-LL |     [(); return |ice| {}];\n-   |          ^^^^^^^^^^^^^^^\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     [(); return |ice| {}];\n+   | |          ^^^^^^^^^^^^^^^ the return is part of this body...\n+...  |\n+LL | |\n+LL | | }\n+   | |_- ...not the enclosing function body\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/issue-51714.rs:11:10\n+  --> $DIR/issue-51714.rs:18:10\n    |\n-LL |     [(); return while let Some(n) = Some(0) {}];\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     [(); return while let Some(n) = Some(0) {}];\n+   | |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the return is part of this body...\n+LL | |\n+LL | |\n+LL | | }\n+   | |_- ...not the enclosing function body\n \n error: aborting due to 4 previous errors\n "}, {"sha": "23cc9f0512ca1f1185549fdbe87cdc551fecee73", "filename": "src/test/ui/return/issue-86188-return-not-in-fn-body.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bdddaebd76cba207b67141e2c362a4fe117bbd34/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdddaebd76cba207b67141e2c362a4fe117bbd34/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.rs?ref=bdddaebd76cba207b67141e2c362a4fe117bbd34", "patch": "@@ -0,0 +1,22 @@\n+// Due to a compiler bug, if a return occurs outside of a function body\n+// (e.g. in an AnonConst body), the return value expression would not be\n+// type-checked, leading to an ICE. This test checks that the ICE no\n+// longer happens, and that an appropriate error message is issued that\n+// also explains why the return is considered \"outside of a function body\"\n+// if it seems to be inside one, as in the main function below.\n+\n+const C: [(); 42] = {\n+    [(); return || {\n+    //~^ ERROR: return statement outside of function body [E0572]\n+        let tx;\n+    }]\n+};\n+\n+fn main() {\n+//~^ NOTE: ...not the enclosing function body\n+    [(); return || {\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n+        let tx;\n+    }];\n+}"}, {"sha": "9275cb91dd3564fa79d61ddd55ba67f86b5ccff9", "filename": "src/test/ui/return/issue-86188-return-not-in-fn-body.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bdddaebd76cba207b67141e2c362a4fe117bbd34/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdddaebd76cba207b67141e2c362a4fe117bbd34/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.stderr?ref=bdddaebd76cba207b67141e2c362a4fe117bbd34", "patch": "@@ -0,0 +1,28 @@\n+error[E0572]: return statement outside of function body\n+  --> $DIR/issue-86188-return-not-in-fn-body.rs:9:10\n+   |\n+LL |       [(); return || {\n+   |  __________^\n+LL | |\n+LL | |         let tx;\n+LL | |     }]\n+   | |_____^\n+\n+error[E0572]: return statement outside of function body\n+  --> $DIR/issue-86188-return-not-in-fn-body.rs:17:10\n+   |\n+LL |  / fn main() {\n+LL |  |\n+LL |  |     [(); return || {\n+   |  |__________^\n+LL | ||\n+LL | ||\n+LL | ||         let tx;\n+LL | ||     }];\n+   | ||_____^ the return is part of this body...\n+LL |  | }\n+   |  |_- ...not the enclosing function body\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0572`."}, {"sha": "b619a4d57f9553ef4812cfa3a4b1fa5ecd8640c1", "filename": "src/test/ui/return/return-match-array-const.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bdddaebd76cba207b67141e2c362a4fe117bbd34/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdddaebd76cba207b67141e2c362a4fe117bbd34/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.rs?ref=bdddaebd76cba207b67141e2c362a4fe117bbd34", "patch": "@@ -1,10 +1,19 @@\n fn main() {\n+//~^ NOTE: not the enclosing function body\n+//~| NOTE: not the enclosing function body\n+//~| NOTE: not the enclosing function body\n     [(); return match 0 { n => n }];\n-    //~^ ERROR: return statement outside of function body\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n \n     [(); return match 0 { 0 => 0 }];\n-    //~^ ERROR: return statement outside of function body\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n \n     [(); return match () { 'a' => 0, _ => 0 }];\n-    //~^ ERROR: return statement outside of function body\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n+    //~| ERROR: mismatched types [E0308]\n+    //~| NOTE: expected `()`, found `char`\n+    //~| NOTE: this expression has type `()`\n }"}, {"sha": "85a733adfee69448cd7ff6d804502e971c64b309", "filename": "src/test/ui/return/return-match-array-const.stderr", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/bdddaebd76cba207b67141e2c362a4fe117bbd34/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdddaebd76cba207b67141e2c362a4fe117bbd34/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr?ref=bdddaebd76cba207b67141e2c362a4fe117bbd34", "patch": "@@ -1,21 +1,56 @@\n error[E0572]: return statement outside of function body\n-  --> $DIR/return-match-array-const.rs:2:10\n+  --> $DIR/return-match-array-const.rs:5:10\n    |\n-LL |     [(); return match 0 { n => n }];\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+LL | |     [(); return match 0 { n => n }];\n+   | |          ^^^^^^^^^^^^^^^^^^^^^^^^^ the return is part of this body...\n+...  |\n+LL | |\n+LL | | }\n+   | |_- ...not the enclosing function body\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/return-match-array-const.rs:5:10\n+  --> $DIR/return-match-array-const.rs:9:10\n    |\n-LL |     [(); return match 0 { 0 => 0 }];\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     [(); return match 0 { 0 => 0 }];\n+   | |          ^^^^^^^^^^^^^^^^^^^^^^^^^ the return is part of this body...\n+...  |\n+LL | |\n+LL | | }\n+   | |_- ...not the enclosing function body\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/return-match-array-const.rs:8:10\n+  --> $DIR/return-match-array-const.rs:13:10\n+   |\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     [(); return match () { 'a' => 0, _ => 0 }];\n+   | |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the return is part of this body...\n+...  |\n+LL | |\n+LL | | }\n+   | |_- ...not the enclosing function body\n+\n+error[E0308]: mismatched types\n+  --> $DIR/return-match-array-const.rs:13:28\n    |\n LL |     [(); return match () { 'a' => 0, _ => 0 }];\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       --   ^^^ expected `()`, found `char`\n+   |                       |\n+   |                       this expression has type `()`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0572`.\n+Some errors have detailed explanations: E0308, E0572.\n+For more information about an error, try `rustc --explain E0308`."}]}