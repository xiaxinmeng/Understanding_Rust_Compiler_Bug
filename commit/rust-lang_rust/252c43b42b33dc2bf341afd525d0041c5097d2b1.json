{"sha": "252c43b42b33dc2bf341afd525d0041c5097d2b1", "node_id": "C_kwDOAAsO6NoAKDI1MmM0M2I0MmIzM2RjMmJmMzQxYWZkNTI1ZDAwNDFjNTA5N2QyYjE", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-06T01:11:50Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-30T20:12:21Z"}, "message": "Do not mention lifetime names in force trimmed paths", "tree": {"sha": "859c1fae3c533f50deb8262a15df0dc125d7c054", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/859c1fae3c533f50deb8262a15df0dc125d7c054"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/252c43b42b33dc2bf341afd525d0041c5097d2b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/252c43b42b33dc2bf341afd525d0041c5097d2b1", "html_url": "https://github.com/rust-lang/rust/commit/252c43b42b33dc2bf341afd525d0041c5097d2b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/252c43b42b33dc2bf341afd525d0041c5097d2b1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81973a39e05bfc5ddad4b5a54903c2c8fbdfa273", "url": "https://api.github.com/repos/rust-lang/rust/commits/81973a39e05bfc5ddad4b5a54903c2c8fbdfa273", "html_url": "https://github.com/rust-lang/rust/commit/81973a39e05bfc5ddad4b5a54903c2c8fbdfa273"}], "stats": {"total": 84, "additions": 44, "deletions": 40}, "files": [{"sha": "78f17c7783e9e89495fc5d375e8614173c0792d4", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -2070,6 +2070,10 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n             return true;\n         }\n \n+        if FORCE_TRIMMED_PATH.with(|flag| flag.get()) {\n+            return false;\n+        }\n+\n         let identify_regions = self.tcx.sess.opts.unstable_opts.identify_regions;\n \n         match *region {"}, {"sha": "fa1390a5462fe779b4a9aade0923a5b562a5c18f", "filename": "tests/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -95,7 +95,7 @@ LL | union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `ManuallyDrop<(dyn Iterator<Item = impl Copy> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Copy> + 'static)`\n-   = note: required because it appears within the type `ManuallyDrop<(dyn Iterator<Item = impl Copy> + 'static)>`\n+   = note: required because it appears within the type `ManuallyDrop<dyn Iterator<Item = impl Copy>>`\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -114,7 +114,7 @@ LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `ManuallyDrop<(dyn Iterator<Item = impl Sized + 'static> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n-   = note: required because it appears within the type `ManuallyDrop<(dyn Iterator<Item = impl Sized + 'static> + 'static)>`\n+   = note: required because it appears within the type `ManuallyDrop<dyn Iterator<Item = impl Sized + 'static>>`\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size"}, {"sha": "9046170d7c995accdc8723105c90ac87396766e9", "filename": "tests/ui/associated-types/issue-43924.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fassociated-types%2Fissue-43924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fassociated-types%2Fissue-43924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-43924.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -10,11 +10,11 @@ note: required by a bound in `Foo::Out`\n LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n    |               ^^^^^^^ required by this bound in `Foo::Out`\n \n-error[E0599]: no function or associated item named `default` found for trait object `(dyn ToString + 'static)` in the current scope\n+error[E0599]: no function or associated item named `default` found for trait object `dyn ToString` in the current scope\n   --> $DIR/issue-43924.rs:14:39\n    |\n LL |     assert_eq!(<() as Foo<u32>>::Out::default().to_string(), \"false\");\n-   |                                       ^^^^^^^ function or associated item not found in `(dyn ToString + 'static)`\n+   |                                       ^^^^^^^ function or associated item not found in `dyn ToString`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "104b85baa63f6cafd5f659dadfe9645be819fa8a", "filename": "tests/ui/async-await/issue-98634.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fasync-await%2Fissue-98634.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fasync-await%2Fissue-98634.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-98634.rs?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -43,8 +43,8 @@ impl Runtime {\n fn main() {\n     Runtime.block_on(async {\n         StructAsync { callback }.await;\n-        //~^ ERROR expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n-        //~| ERROR expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n-        //~| ERROR expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+        //~^ ERROR expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n+        //~| ERROR expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n+        //~| ERROR expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n     });\n }"}, {"sha": "17e598508e57f0e8994a717c955516aedeec9f28", "filename": "tests/ui/async-await/issue-98634.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-98634.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n   --> $DIR/issue-98634.rs:45:23\n    |\n LL |         StructAsync { callback }.await;\n@@ -17,7 +17,7 @@ note: required by a bound in `StructAsync`\n LL | pub struct StructAsync<F: Fn() -> Pin<Box<dyn Future<Output = ()>>>> {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `StructAsync`\n \n-error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n   --> $DIR/issue-98634.rs:45:9\n    |\n LL |         StructAsync { callback }.await;\n@@ -36,7 +36,7 @@ note: required by a bound in `StructAsync`\n LL | pub struct StructAsync<F: Fn() -> Pin<Box<dyn Future<Output = ()>>>> {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `StructAsync`\n \n-error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n   --> $DIR/issue-98634.rs:45:33\n    |\n LL |         StructAsync { callback }.await;"}, {"sha": "d2ad372dfbc5fac424c45ab65f4eb0aec2516e22", "filename": "tests/ui/feature-gates/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -95,7 +95,7 @@ LL | fn unsized_local() where Dst<dyn A>: Sized {\n    |                          ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Dst<(dyn A + 'static)>`, the trait `Sized` is not implemented for `(dyn A + 'static)`\n-note: required because it appears within the type `Dst<(dyn A + 'static)>`\n+note: required because it appears within the type `Dst<dyn A>`\n   --> $DIR/feature-gate-trivial_bounds.rs:48:8\n    |\n LL | struct Dst<X: ?Sized> {"}, {"sha": "870f1805b58942d5dd793cd4f36f182f1b359c75", "filename": "tests/ui/function-pointer/unsized-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Ffunction-pointer%2Funsized-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Ffunction-pointer%2Funsized-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunction-pointer%2Funsized-ret.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -23,7 +23,7 @@ LL |     foo::<for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a), _>(None, (&()\n    |     required by a bound introduced by this call\n    |\n    = help: within `for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a)`, the trait `for<'a> Sized` is not implemented for `(dyn std::fmt::Display + 'a)`\n-   = note: required because it appears within the type `fn(&'a ()) -> (dyn Display + 'a)`\n+   = note: required because it appears within the type `fn(&()) -> dyn Display`\n note: required by a bound in `foo`\n   --> $DIR/unsized-ret.rs:5:11\n    |"}, {"sha": "3662cbfb9ba1e982cf74d7a2252bc2ca816c28c7", "filename": "tests/ui/higher-rank-trait-bounds/hang-on-deeply-nested-dyn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhang-on-deeply-nested-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhang-on-deeply-nested-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhang-on-deeply-nested-dyn.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -11,9 +11,9 @@ LL | |     ),\n LL | | ) {\n    | |_- expected `&dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn Fn(u32) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a))` because of return type\n LL |       f\n-   |       ^ expected `&dyn Fn(&'a (dyn Fn(&'a ...) + 'a))`, found `&dyn Fn(u32)`\n+   |       ^ expected `&dyn Fn(&dyn Fn(&dyn Fn(&...)))`, found `&dyn Fn(u32)`\n    |\n-   = note: expected reference `&dyn Fn(&'a (dyn Fn(&'a (dyn Fn(&'a (dyn Fn(&'a (dyn Fn(&'a (dyn Fn(...) + 'a)) + 'a)) + 'a)) + 'a)) + 'a))`\n+   = note: expected reference `&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&...)))))))))))`\n            the full type name has been written to '$TEST_BUILD_DIR/higher-rank-trait-bounds/hang-on-deeply-nested-dyn/hang-on-deeply-nested-dyn.long-type-hash.txt'\n               found reference `&dyn Fn(u32)`\n "}, {"sha": "2ded5ae56cdbcfb5381bb305495d25e96238df0d", "filename": "tests/ui/higher-rank-trait-bounds/issue-30786.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-30786.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -19,7 +19,7 @@ note: the following trait bounds were not satisfied:\n LL | impl<T> StreamExt for T where for<'a> &'a mut T: Stream {}\n    |         ---------     -                          ^^^^^^ unsatisfied trait bound introduced here\n \n-error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, fn(&'a u64) -> &'a u64 {identity::<u64>}>, [closure@issue-30786.rs:129:30]>`, but its trait bounds were not satisfied\n+error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, fn(&u64) -> &u64 {identity::<u64>}>, [closure@issue-30786.rs:129:30]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-30786.rs:130:24\n    |\n LL | pub struct Filter<S, F> {"}, {"sha": "dc1e40ea560ac1f965b9274e6c985a791cb5adc3", "filename": "tests/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -16,7 +16,7 @@ LL | fn fuz() -> (usize, Trait) { (42, Struct) }\n    |             doesn't have a size known at compile-time\n    |\n    = help: within `(usize, (dyn Trait + 'static))`, the trait `Sized` is not implemented for `(dyn Trait + 'static)`\n-   = note: required because it appears within the type `(usize, (dyn Trait + 'static))`\n+   = note: required because it appears within the type `(usize, dyn Trait)`\n    = note: the return type of a function must have a statically known size\n \n error[E0308]: mismatched types\n@@ -37,7 +37,7 @@ LL | fn bar() -> (usize, dyn Trait) { (42, Struct) }\n    |             doesn't have a size known at compile-time\n    |\n    = help: within `(usize, (dyn Trait + 'static))`, the trait `Sized` is not implemented for `(dyn Trait + 'static)`\n-   = note: required because it appears within the type `(usize, (dyn Trait + 'static))`\n+   = note: required because it appears within the type `(usize, dyn Trait)`\n    = note: the return type of a function must have a statically known size\n \n error[E0746]: return type cannot have an unboxed trait object"}, {"sha": "c0766480a41f42448c520f75b4c8d772339e0965", "filename": "tests/ui/issues/issue-102964.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fissues%2Fissue-102964.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fissues%2Fissue-102964.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-102964.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-102964.rs:5:41\n    |\n LL | fn bar_function<T>(function: Foo<T>) -> RcFoo<T> {\n-   |    ------------                         ^^^^^^^^ expected `Rc<&dyn Fn(&'a T)>`, found `()`\n+   |    ------------                         ^^^^^^^^ expected `Rc<&dyn Fn(&T)>`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |"}, {"sha": "8993637408539155e4cb5745f7e0b5957f88fd30", "filename": "tests/ui/issues/issue-19521.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fissues%2Fissue-19521.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fissues%2Fissue-19521.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-19521.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -1,8 +1,8 @@\n-error[E0599]: no method named `homura` found for reference `&'static str` in the current scope\n+error[E0599]: no method named `homura` found for reference `&str` in the current scope\n   --> $DIR/issue-19521.rs:2:8\n    |\n LL |     \"\".homura()();\n-   |        ^^^^^^ method not found in `&'static str`\n+   |        ^^^^^^ method not found in `&str`\n \n error: aborting due to previous error\n "}, {"sha": "954fd4928126fafc979363959c7d053966728100", "filename": "tests/ui/issues/issue-24322.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fissues%2Fissue-24322.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fissues%2Fissue-24322.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-24322.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-24322.rs:8:29\n    |\n LL |     let x: &fn(&B) -> u32 = &B::func;\n-   |            --------------   ^^^^^^^^ expected `&fn(&'a B) -> u32`, found `&fn(&'a B) -> u32 {B::func}`\n+   |            --------------   ^^^^^^^^ expected `&fn(&B) -> u32`, found `&fn(&B) -> u32 {B::func}`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "37beb587d2767e5e5052ef0e1ea1a9ecd1ba87bf", "filename": "tests/ui/issues/issue-57362-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fissues%2Fissue-57362-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fissues%2Fissue-57362-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-57362-2.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -1,8 +1,8 @@\n-error[E0599]: the function or associated item `make_g` exists for fn pointer `fn(&'a ())`, but its trait bounds were not satisfied\n+error[E0599]: the function or associated item `make_g` exists for fn pointer `fn(&())`, but its trait bounds were not satisfied\n   --> $DIR/issue-57362-2.rs:22:25\n    |\n LL |     let x = <fn (&())>::make_g();\n-   |                         ^^^^^^ function or associated item cannot be called on `fn(&'a ())` due to unsatisfied trait bounds\n+   |                         ^^^^^^ function or associated item cannot be called on `fn(&())` due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n            `for<'a> fn(&'a ()): X`"}, {"sha": "19ef4f6fc68d4a62b53852b06de55b9b1caac7b6", "filename": "tests/ui/kindck/kindck-send-object1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-send-object1.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -20,7 +20,7 @@ LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |\n    = help: the trait `Send` is not implemented for `(dyn Dummy + 'a)`\n    = note: required for `Unique<(dyn Dummy + 'a)>` to implement `Send`\n-   = note: required because it appears within the type `Box<(dyn Dummy + 'a)>`\n+   = note: required because it appears within the type `Box<dyn Dummy>`\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-object1.rs:5:18\n    |"}, {"sha": "cab5898259fbc5afc24c32ea011368ddc98992ea", "filename": "tests/ui/nll/issue-57642-higher-ranked-subtype.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -1,8 +1,8 @@\n-error[E0599]: the function or associated item `make_g` exists for fn pointer `fn(&'a ())`, but its trait bounds were not satisfied\n+error[E0599]: the function or associated item `make_g` exists for fn pointer `fn(&())`, but its trait bounds were not satisfied\n   --> $DIR/issue-57642-higher-ranked-subtype.rs:31:25\n    |\n LL |     let x = <fn (&())>::make_g();\n-   |                         ^^^^^^ function or associated item cannot be called on `fn(&'a ())` due to unsatisfied trait bounds\n+   |                         ^^^^^^ function or associated item cannot be called on `fn(&())` due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n            `for<'a> fn(&'a ()): X`\n@@ -13,11 +13,11 @@ note: `X` defines an item `make_g`, perhaps you need to implement it\n LL | trait X {\n    | ^^^^^^^\n \n-error[E0599]: no function or associated item named `make_f` found for fn pointer `fn(&'a ())` in the current scope\n+error[E0599]: no function or associated item named `make_f` found for fn pointer `fn(&())` in the current scope\n   --> $DIR/issue-57642-higher-ranked-subtype.rs:35:25\n    |\n LL |     let x = <fn (&())>::make_f();\n-   |                         ^^^^^^ function or associated item not found in `fn(&'a ())`\n+   |                         ^^^^^^ function or associated item not found in `fn(&())`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Y` defines an item `make_f`, perhaps you need to implement it"}, {"sha": "7133f8ae1947801d9fcad6bee07d49a47741d9bc", "filename": "tests/ui/object-pointer-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fobject-pointer-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fobject-pointer-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-pointer-types.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -16,11 +16,11 @@ LL |     fn owned(self: Box<Self>);\n LL |     x.owned();\n    |       ^^^^^ method not found in `&mut dyn Foo`\n \n-error[E0599]: no method named `managed` found for struct `Box<(dyn Foo + 'static)>` in the current scope\n+error[E0599]: no method named `managed` found for struct `Box<dyn Foo>` in the current scope\n   --> $DIR/object-pointer-types.rs:23:7\n    |\n LL |     x.managed();\n-   |       ^^^^^^^ method not found in `Box<(dyn Foo + 'static)>`\n+   |       ^^^^^^^ method not found in `Box<dyn Foo>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "151587d42223021f84603f5d6537bcf23e8e86f6", "filename": "tests/ui/suggestions/issue-101984.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fsuggestions%2Fissue-101984.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fsuggestions%2Fissue-101984.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-101984.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |         let (cmp, router) = self.router.at()?;\n    |             ^^^^^^^^^^^^^   ----------------- this expression has type `Match<&(for<'a> fn(&'a ()), Box<Wrapper>)>`\n    |             |\n-   |             expected `Match<&(fn(&'a ()), Box<Wrapper>)>`, found `(_, _)`\n+   |             expected `Match<&(fn(&()), Box<Wrapper>)>`, found `(_, _)`\n    |\n    = note: expected struct `Match<&(for<'a> fn(&'a ()), Box<Wrapper>)>`\n                found tuple `(_, _)`"}, {"sha": "cb618db704d1bca369371bd0ad03efe93b45133c", "filename": "tests/ui/suggestions/remove-as_str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fsuggestions%2Fremove-as_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fsuggestions%2Fremove-as_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fremove-as_str.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -4,7 +4,7 @@ error[E0599]: no method named `as_str` found for reference `&str` in the current\n LL |     s.as_str();\n    |      -^^^^^^-- help: remove this method call\n \n-error[E0599]: no method named `as_str` found for reference `&'a str` in the current scope\n+error[E0599]: no method named `as_str` found for reference `&str` in the current scope\n   --> $DIR/remove-as_str.rs:7:7\n    |\n LL |     s.as_str();"}, {"sha": "29750a20199966108b0f62a0831ee6d0a97ae8ee", "filename": "tests/ui/suggestions/suggest-using-chars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fsuggestions%2Fsuggest-using-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fsuggestions%2Fsuggest-using-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-using-chars.rs?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -1,6 +1,6 @@\n pub fn main() {\n-    let _ = \"foo\".iter(); //~ ERROR no method named `iter` found for reference `&'static str` in the current scope\n-    let _ = \"foo\".foo(); //~ ERROR no method named `foo` found for reference `&'static str` in the current scope\n+    let _ = \"foo\".iter(); //~ ERROR no method named `iter` found for reference `&str` in the current scope\n+    let _ = \"foo\".foo(); //~ ERROR no method named `foo` found for reference `&str` in the current scope\n     let _ = String::from(\"bar\").iter(); //~ ERROR no method named `iter` found for struct `String` in the current scope\n     let _ = (&String::from(\"bar\")).iter(); //~ ERROR no method named `iter` found for reference `&String` in the current scope\n     let _ = 0.iter(); //~ ERROR no method named `iter` found for type `{integer}` in the current scope"}, {"sha": "57b0e866f84535892537dedf4981a9e0758dd681", "filename": "tests/ui/suggestions/suggest-using-chars.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fsuggestions%2Fsuggest-using-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Fsuggestions%2Fsuggest-using-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-using-chars.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -1,19 +1,19 @@\n-error[E0599]: no method named `iter` found for reference `&'static str` in the current scope\n+error[E0599]: no method named `iter` found for reference `&str` in the current scope\n   --> $DIR/suggest-using-chars.rs:2:19\n    |\n LL |     let _ = \"foo\".iter();\n-   |                   ^^^^ method not found in `&'static str`\n+   |                   ^^^^ method not found in `&str`\n    |\n help: because of the in-memory representation of `&str`, to obtain an `Iterator` over each of its codepoint use method `chars`\n    |\n LL |     let _ = \"foo\".chars();\n    |                   ~~~~~\n \n-error[E0599]: no method named `foo` found for reference `&'static str` in the current scope\n+error[E0599]: no method named `foo` found for reference `&str` in the current scope\n   --> $DIR/suggest-using-chars.rs:3:19\n    |\n LL |     let _ = \"foo\".foo();\n-   |                   ^^^ method not found in `&'static str`\n+   |                   ^^^ method not found in `&str`\n \n error[E0599]: no method named `iter` found for struct `String` in the current scope\n   --> $DIR/suggest-using-chars.rs:4:33"}, {"sha": "35f0bbfac93f6b0f59bd1f57eda603ee75676231", "filename": "tests/ui/type-alias-impl-trait/issue-98604.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.rs?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -7,5 +7,5 @@ async fn test() {}\n #[allow(unused_must_use)]\n fn main() {\n     Box::new(test) as AsyncFnPtr;\n-    //~^ ERROR expected `fn() -> impl Future<Output = ()> {test}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+    //~^ ERROR expected `fn() -> impl Future<Output = ()> {test}` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>\n }"}, {"sha": "650376f8c6b43acb52bcc094dd397e318a0fe7dd", "filename": "tests/ui/type-alias-impl-trait/issue-98604.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252c43b42b33dc2bf341afd525d0041c5097d2b1/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr?ref=252c43b42b33dc2bf341afd525d0041c5097d2b1", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: expected `fn() -> impl Future<Output = ()> {test}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+error[E0271]: expected `fn() -> impl Future<Output = ()> {test}` to be a fn item that returns `Pin<Box<dyn Future<Output = ()>>>`, but it returns `impl Future<Output = ()>`\n   --> $DIR/issue-98604.rs:9:5\n    |\n LL |     Box::new(test) as AsyncFnPtr;"}]}