{"sha": "346aeef496b5e6daaffb7f71b21d4cf003b44256", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NmFlZWY0OTZiNWU2ZGFhZmZiN2Y3MWIyMWQ0Y2YwMDNiNDQyNTY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-28T00:21:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-28T00:21:08Z"}, "message": "Rollup merge of #78152 - spastorino:separate-unsized-locals, r=oli-obk\n\nSeparate unsized locals\n\nCloses #71694\n\nTakes over again #72029 and #74971\n\ncc @RalfJung @oli-obk @pnkfelix @eddyb as they've participated in previous reviews of this PR.", "tree": {"sha": "ce04bf93b3dae58a036944444f8109b0a4b34e20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce04bf93b3dae58a036944444f8109b0a4b34e20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/346aeef496b5e6daaffb7f71b21d4cf003b44256", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfmLl0CRBK7hj4Ov3rIwAAdHIIAI7LV7hthQSH1bx/HEVWFRvl\ne+5SdkC2Q6Dw+p3lfm3rUd8HTw+VtiathrxMl/c+n8Ip8r+3AxJWJvLVcXXUeh1n\nVI5HH0vCorGL8x6na6mf94fHkxKxVl5dm++wdtSjKrnWC5peiDOpoZHciWvAvw+O\nzYeCfnQMr/Dz7CguULde+4a+2eaK1XLO620wQkzr+Puh7/TcnyEiBDBlMisideRr\nbDzUFLwI1C2WhcXPea6+UmDA8hQA/x845rfMDbScVB3DqX/4oUodg/Zl79wTo/cQ\nAdv8xs+fyEUxvKq+SYHu0VBieNFXn1buOgeiB4rAFSypVCKhQ+nya+zhrUqwfQA=\n=LfyV\n-----END PGP SIGNATURE-----\n", "payload": "tree ce04bf93b3dae58a036944444f8109b0a4b34e20\nparent 07e968b640e8ff76fa8be4b48b70ab80ea577800\nparent cc9ab1cd58e55de4e60cfaf884e89a9d66563b38\nauthor Dylan DPC <dylan.dpc@gmail.com> 1603844468 +0100\ncommitter GitHub <noreply@github.com> 1603844468 +0100\n\nRollup merge of #78152 - spastorino:separate-unsized-locals, r=oli-obk\n\nSeparate unsized locals\n\nCloses #71694\n\nTakes over again #72029 and #74971\n\ncc @RalfJung @oli-obk @pnkfelix @eddyb as they've participated in previous reviews of this PR.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/346aeef496b5e6daaffb7f71b21d4cf003b44256", "html_url": "https://github.com/rust-lang/rust/commit/346aeef496b5e6daaffb7f71b21d4cf003b44256", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/346aeef496b5e6daaffb7f71b21d4cf003b44256/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e968b640e8ff76fa8be4b48b70ab80ea577800", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e968b640e8ff76fa8be4b48b70ab80ea577800", "html_url": "https://github.com/rust-lang/rust/commit/07e968b640e8ff76fa8be4b48b70ab80ea577800"}, {"sha": "cc9ab1cd58e55de4e60cfaf884e89a9d66563b38", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9ab1cd58e55de4e60cfaf884e89a9d66563b38", "html_url": "https://github.com/rust-lang/rust/commit/cc9ab1cd58e55de4e60cfaf884e89a9d66563b38"}], "stats": {"total": 501, "additions": 354, "deletions": 147}, "files": [{"sha": "ad926a810e6bfc87b38ef71469880dab9e16bc1d", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -607,6 +607,9 @@ declare_features! (\n     /// Allow anonymous constants from an inline `const` block\n     (active, inline_const, \"1.49.0\", Some(76001), None),\n \n+    /// Allows unsized fn parameters.\n+    (active, unsized_fn_params, \"1.49.0\", Some(48055), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -629,6 +632,7 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::specialization,\n     sym::inline_const,\n     sym::repr128,\n+    sym::unsized_locals,\n ];\n \n /// Some features are not allowed to be used together at the same time, if"}, {"sha": "409399094e84921212e3c9d1fc460d74ba0957e6", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -974,6 +974,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         checker\n     }\n \n+    fn unsized_feature_enabled(&self) -> bool {\n+        let features = self.tcx().features();\n+        features.unsized_locals || features.unsized_fn_params\n+    }\n+\n     /// Equate the inferred type and the annotated type for user type annotations\n     fn check_user_type_annotations(&mut self) {\n         debug!(\n@@ -1456,7 +1461,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n \n                 self.check_rvalue(body, rv, location);\n-                if !self.tcx().features().unsized_locals {\n+                if !self.unsized_feature_enabled() {\n                     let trait_ref = ty::TraitRef {\n                         def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n                         substs: tcx.mk_substs_trait(place_ty, &[]),\n@@ -1717,9 +1722,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     );\n                 }\n \n-                // When `#![feature(unsized_locals)]` is not enabled,\n+                // When `unsized_fn_params` and `unsized_locals` are both not enabled,\n                 // this check is done at `check_local`.\n-                if self.tcx().features().unsized_locals {\n+                if self.unsized_feature_enabled() {\n                     let span = term.source_info.span;\n                     self.ensure_place_sized(dest_ty, span);\n                 }\n@@ -1880,9 +1885,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             LocalKind::Var | LocalKind::Temp => {}\n         }\n \n-        // When `#![feature(unsized_locals)]` is enabled, only function calls\n+        // When `unsized_fn_params` or `unsized_locals` is enabled, only function calls\n         // and nullary ops are checked in `check_call_dest`.\n-        if !self.tcx().features().unsized_locals {\n+        if !self.unsized_feature_enabled() {\n             let span = local_decl.source_info.span;\n             let ty = local_decl.ty;\n             self.ensure_place_sized(ty, span);\n@@ -2024,7 +2029,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n             Rvalue::NullaryOp(_, ty) => {\n                 // Even with unsized locals cannot box an unsized value.\n-                if self.tcx().features().unsized_locals {\n+                if self.unsized_feature_enabled() {\n                     let span = body.source_info(location).span;\n                     self.ensure_place_sized(ty, span);\n                 }"}, {"sha": "cf075abc94bf5f776ce52bd142cb012aed361cb9", "filename": "compiler/rustc_mir_build/src/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -165,7 +165,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         let tcx = this.hir.tcx();\n \n-        if tcx.features().unsized_locals {\n+        if tcx.features().unsized_fn_params {\n             let ty = expr.ty;\n             let span = expr.span;\n             let param_env = this.hir.param_env;"}, {"sha": "b8f2b57a046a1d0c1def2f9bd170f7e6464c5926", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1163,6 +1163,7 @@ symbols! {\n         unsafe_cell,\n         unsafe_no_drop_flag,\n         unsize,\n+        unsized_fn_params,\n         unsized_locals,\n         unsized_tuple_coercion,\n         unstable,"}, {"sha": "c0881befe2481372e64974c333ec905a1023babf", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1845,9 +1845,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     err.note(\"all function arguments must have a statically known size\");\n                 }\n                 if tcx.sess.opts.unstable_features.is_nightly_build()\n-                    && !self.tcx.features().unsized_locals\n+                    && !self.tcx.features().unsized_fn_params\n                 {\n-                    err.help(\"unsized locals are gated as an unstable feature\");\n+                    err.help(\"unsized fn params are gated as an unstable feature\");\n                 }\n             }\n             ObligationCauseCode::SizedReturnType => {"}, {"sha": "6dd8a143ec0f28c1e94f36a963964e7716d67a4c", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -131,7 +131,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n         // The check for a non-trivial pattern is a hack to avoid duplicate warnings\n         // for simple cases like `fn foo(x: Trait)`,\n         // where we would error once on the parameter as a whole, and once on the binding `x`.\n-        if param.pat.simple_ident().is_none() && !tcx.features().unsized_locals {\n+        if param.pat.simple_ident().is_none() && !tcx.features().unsized_fn_params {\n             fcx.require_type_is_sized(param_ty, param.pat.span, traits::SizedArgumentType(ty_span));\n         }\n "}, {"sha": "5eba7be3b02dc52ec3a5b53750b5f2572e05d5eb", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -476,7 +476,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if let ty::FnDef(..) = ty.kind() {\n             let fn_sig = ty.fn_sig(tcx);\n-            if !tcx.features().unsized_locals {\n+            if !tcx.features().unsized_fn_params {\n                 // We want to remove some Sized bounds from std functions,\n                 // but don't want to expose the removal to stable Rust.\n                 // i.e., we don't want to allow"}, {"sha": "af552389de02491def93f0a9c6a247d11645aa21", "filename": "compiler/rustc_typeck/src/check/gather_locals.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -6,15 +6,20 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_middle::ty::Ty;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n+use std::mem;\n \n pub(super) struct GatherLocalsVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     parent_id: hir::HirId,\n+    // parameters are special cases of patterns, but we want to handle them as\n+    // *distinct* cases. so track when we are hitting a pattern *within* an fn\n+    // parameter.\n+    outermost_fn_param_pat: bool,\n }\n \n impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n     pub(super) fn new(fcx: &'a FnCtxt<'a, 'tcx>, parent_id: hir::HirId) -> Self {\n-        Self { fcx, parent_id }\n+        Self { fcx, parent_id, outermost_fn_param_pat: false }\n     }\n \n     fn assign(&mut self, span: Span, nid: hir::HirId, ty_opt: Option<LocalTy<'tcx>>) -> Ty<'tcx> {\n@@ -88,13 +93,29 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n         intravisit::walk_local(self, local);\n     }\n \n+    fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n+        let old_outermost_fn_param_pat = mem::replace(&mut self.outermost_fn_param_pat, true);\n+        intravisit::walk_param(self, param);\n+        self.outermost_fn_param_pat = old_outermost_fn_param_pat;\n+    }\n+\n     // Add pattern bindings.\n     fn visit_pat(&mut self, p: &'tcx hir::Pat<'tcx>) {\n         if let PatKind::Binding(_, _, ident, _) = p.kind {\n             let var_ty = self.assign(p.span, p.hir_id, None);\n \n-            if !self.fcx.tcx.features().unsized_locals {\n-                self.fcx.require_type_is_sized(var_ty, p.span, traits::VariableType(p.hir_id));\n+            if self.outermost_fn_param_pat {\n+                if !self.fcx.tcx.features().unsized_fn_params {\n+                    self.fcx.require_type_is_sized(\n+                        var_ty,\n+                        p.span,\n+                        traits::SizedArgumentType(Some(p.span)),\n+                    );\n+                }\n+            } else {\n+                if !self.fcx.tcx.features().unsized_locals {\n+                    self.fcx.require_type_is_sized(var_ty, p.span, traits::VariableType(p.hir_id));\n+                }\n             }\n \n             debug!(\n@@ -104,7 +125,9 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n                 var_ty\n             );\n         }\n+        let old_outermost_fn_param_pat = mem::replace(&mut self.outermost_fn_param_pat, false);\n         intravisit::walk_pat(self, p);\n+        self.outermost_fn_param_pat = old_outermost_fn_param_pat;\n     }\n \n     // Don't descend into the bodies of nested closures."}, {"sha": "405667e0b2aa6735d43e17f8cbe3ab40ff291665", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -130,7 +130,8 @@\n #![feature(unicode_internals)]\n #![feature(unsafe_block_in_unsafe_fn)]\n #![feature(unsize)]\n-#![feature(unsized_locals)]\n+#![cfg_attr(not(bootstrap), feature(unsized_fn_params))]\n+#![cfg_attr(bootstrap, feature(unsized_locals))]\n #![feature(allocator_internals)]\n #![feature(slice_partition_dedup)]\n #![feature(maybe_uninit_extra, maybe_uninit_slice, maybe_uninit_uninit_array)]"}, {"sha": "b89ec93834fcc7232df1850e7338a31ea53001dd", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -132,7 +132,8 @@\n #![feature(transparent_unions)]\n #![feature(try_blocks)]\n #![feature(unboxed_closures)]\n-#![feature(unsized_locals)]\n+#![cfg_attr(not(bootstrap), feature(unsized_fn_params))]\n+#![cfg_attr(bootstrap, feature(unsized_locals))]\n #![cfg_attr(bootstrap, feature(untagged_unions))]\n #![feature(unwind_attributes)]\n #![feature(variant_count)]"}, {"sha": "d716b1d51dcf7a6e4cd6c6641733cadbfa8abcb4", "filename": "src/doc/unstable-book/src/language-features/unsized-locals.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-locals.md", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-locals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-locals.md?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -11,7 +11,8 @@ This implements [RFC1909]. When turned on, you can have unsized arguments and lo\n [RFC1909]: https://github.com/rust-lang/rfcs/blob/master/text/1909-unsized-rvalues.md\n \n ```rust\n-#![feature(unsized_locals)]\n+#![allow(incomplete_features)]\n+#![feature(unsized_locals, unsized_fn_params)]\n \n use std::any::Any;\n \n@@ -85,7 +86,7 @@ fn main() {\n With this feature, you can have by-value `self` arguments without `Self: Sized` bounds.\n \n ```rust\n-#![feature(unsized_locals)]\n+#![feature(unsized_fn_params)]\n \n trait Foo {\n     fn foo(self) {}\n@@ -102,7 +103,7 @@ fn main() {\n And `Foo` will also be object-safe.\n \n ```rust\n-#![feature(unsized_locals)]\n+#![feature(unsized_fn_params)]\n \n trait Foo {\n     fn foo(self) {}"}, {"sha": "a7b9052617f0c7b95e25d39bef32814b06304510", "filename": "src/test/run-pass-valgrind/unsized-locals/long-live-the-unsized-temporary.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Flong-live-the-unsized-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Flong-live-the-unsized-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Funsized-locals%2Flong-live-the-unsized-temporary.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,4 +1,5 @@\n-#![feature(unsized_locals)]\n+#![allow(incomplete_features)]\n+#![feature(unsized_locals, unsized_fn_params)]\n \n use std::fmt;\n \n@@ -45,11 +46,7 @@ fn main() {\n \n     {\n         let x: fmt::Display = *gen_foo();\n-        let x = if true {\n-            x\n-        } else {\n-            *gen_foo()\n-        };\n+        let x = if true { x } else { *gen_foo() };\n         foo(x);\n     }\n }"}, {"sha": "0f90a4c336c57e5b136ecd7c069a9c33777ed7b2", "filename": "src/test/ui/async-await/issue-72590-type-error-sized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -18,7 +18,7 @@ LL |     async fn frob(self) {}\n    |\n    = help: within `Foo`, the trait `Sized` is not implemented for `str`\n    = note: required because it appears within the type `Foo`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL |     async fn frob(&self) {}"}, {"sha": "72ef5b3b962c734d5386c07b0796aca96c57007b", "filename": "src/test/ui/closures/issue-41366.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-41366.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -16,7 +16,7 @@ LL |     (&|_| ()) as &dyn for<'x> Fn(<u32 as T<'x>>::V);\n    |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `<u32 as T<'_>>::V`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: consider further restricting the associated type\n    |\n LL | fn main() where <u32 as T<'_>>::V: Sized {"}, {"sha": "e0f5776424e0951a2b37b39ae94fc0def7bd2410", "filename": "src/test/ui/error-codes/E0161.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -9,13 +9,13 @@\n //[zflagsul]compile-flags: -Z borrowck=migrate\n //[editionul]edition:2018\n \n+#![allow(incomplete_features)]\n #![cfg_attr(nll, feature(nll))]\n #![cfg_attr(nllul, feature(nll))]\n #![cfg_attr(migrateul, feature(unsized_locals))]\n #![cfg_attr(zflagsul, feature(unsized_locals))]\n #![cfg_attr(nllul, feature(unsized_locals))]\n #![cfg_attr(editionul, feature(unsized_locals))]\n-\n #![feature(box_syntax)]\n \n fn foo(x: Box<[i32]>) {"}, {"sha": "647e0c7d76ff2da1505c07dadbdca668a07a49b1", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -6,11 +6,11 @@ LL | fn f(p: Path) { }\n    |\n    = help: within `Path`, the trait `Sized` is not implemented for `[u8]`\n    = note: required because it appears within the type `Path`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn f(p: &Path) { }\n-   |         ^\n+LL | fn f(&p: Path) { }\n+   |      ^\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/E0277.rs:17:15"}, {"sha": "9b868ed7a9e93868b712ac46ca19482e99839947", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -0,0 +1,26 @@\n+#[repr(align(256))]\n+#[allow(dead_code)]\n+struct A {\n+    v: u8,\n+}\n+\n+trait Foo {\n+    fn foo(&self);\n+}\n+\n+impl Foo for A {\n+    fn foo(&self) {\n+        assert_eq!(self as *const A as usize % 256, 0);\n+    }\n+}\n+\n+fn foo(x: dyn Foo) {\n+    //~^ ERROR [E0277]\n+    x.foo()\n+}\n+\n+fn main() {\n+    let x: Box<dyn Foo> = Box::new(A { v: 22 });\n+    foo(*x);\n+    //~^ ERROR [E0277]\n+}"}, {"sha": "71acbb174ac667b82223581fbd48ddf0eccd620e", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -0,0 +1,26 @@\n+error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n+  --> $DIR/feature-gate-unsized_fn_params.rs:17:8\n+   |\n+LL | fn foo(x: dyn Foo) {\n+   |        ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`\n+   = help: unsized fn params are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn foo(&x: dyn Foo) {\n+   |        ^\n+\n+error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n+  --> $DIR/feature-gate-unsized_fn_params.rs:24:5\n+   |\n+LL |     foo(*x);\n+   |     ^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`\n+   = note: all function arguments must have a statically known size\n+   = help: unsized fn params are gated as an unstable feature\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "522542208724bd10071e9bdcff591130998040a5", "filename": "src/test/ui/feature-gates/feature-gate-unsized_locals.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -5,11 +5,11 @@ LL | fn f(f: dyn FnOnce()) {}\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn FnOnce() + 'static)`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn f(f: &dyn FnOnce()) {}\n-   |         ^\n+LL | fn f(&f: dyn FnOnce()) {}\n+   |      ^\n \n error: aborting due to previous error\n "}, {"sha": "cedfd1cf2dcc961db02fb79e10cb50bde7a6c022", "filename": "src/test/ui/fn/dyn-fn-alignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Ffn%2Fdyn-fn-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Ffn%2Fdyn-fn-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fdyn-fn-alignment.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(unsized_locals)]\n #![allow(dead_code)]\n #[repr(align(256))]\n struct A {"}, {"sha": "69817f10c9f32c9c45663cc3581faec77601073b", "filename": "src/test/ui/issues/issue-17651.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -15,7 +15,7 @@ LL |     (|| Box::new(*(&[0][..])))();\n    |\n    = help: the trait `Sized` is not implemented for `[{integer}]`\n    = note: all function arguments must have a statically known size\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n \n error: aborting due to 2 previous errors\n "}, {"sha": "021a08696de2cc831035935513c6c7656323d871", "filename": "src/test/ui/issues/issue-27078.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n LL |     fn foo(self) -> &'static i32 {\n    |            ^^^^ doesn't have a size known at compile-time\n    |\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: consider further restricting `Self`\n    |\n LL |     fn foo(self) -> &'static i32 where Self: Sized {"}, {"sha": "79f5db650d9dcb76e89b0917aeae621e0e6a45bf", "filename": "src/test/ui/issues/issue-30355.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -6,7 +6,7 @@ LL |     &X(*Y)\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n    = note: all function arguments must have a statically known size\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "f76063fc55872ceefde07464b6e233aabde2a335", "filename": "src/test/ui/issues/issue-38954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -5,7 +5,7 @@ LL | fn _test(ref _p: str) {}\n    |          ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | fn _test(ref _p: &str) {}"}, {"sha": "8b37e5e9774e58b69e27ea2e5e5f2cf1375d6259", "filename": "src/test/ui/issues/issue-41229-ref-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -5,7 +5,7 @@ LL | pub fn example(ref s: str) {}\n    |                ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | pub fn example(ref s: &str) {}"}, {"sha": "f69c2a9925de7bd922221ea56208efa27ce8d55d", "filename": "src/test/ui/issues/issue-42312.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -5,7 +5,7 @@ LL |     fn baz(_: Self::Target) where Self: Deref {}\n    |            ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `<Self as Deref>::Target`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: consider further restricting the associated type\n    |\n LL |     fn baz(_: Self::Target) where Self: Deref, <Self as Deref>::Target: Sized {}\n@@ -22,7 +22,7 @@ LL | pub fn f(_: dyn ToString) {}\n    |          ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn ToString + 'static)`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | pub fn f(_: &dyn ToString) {}"}, {"sha": "5798733e04be03a86f4296db44e81daa545d0a8e", "filename": "src/test/ui/issues/issue-5883.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -5,11 +5,11 @@ LL | fn new_struct(r: dyn A + 'static)\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn A + 'static)`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn new_struct(r: &dyn A + 'static)\n-   |                  ^\n+LL | fn new_struct(&r: dyn A + 'static)\n+   |               ^\n \n error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n   --> $DIR/issue-5883.rs:8:8"}, {"sha": "9e53ff07917287492d3f9625d8250ac684e2130b", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,4 +1,6 @@\n-#![feature(arbitrary_self_types, coerce_unsized, dispatch_from_dyn, unsize, unsized_locals)]\n+#![feature(arbitrary_self_types, coerce_unsized, dispatch_from_dyn, unsize)]\n+#![feature(unsized_locals, unsized_fn_params)]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n // This tests a few edge-cases around `arbitrary_self_types`. Most specifically,\n // it checks that the `ObjectCandidate` you get from method matching can't"}, {"sha": "0a516c89a8b554c8bef5701ebc5240247be8eac5", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,37 +1,46 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:2:12\n+   |\n+LL | #![feature(unsized_locals, unsized_fn_params)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error[E0308]: mismatched types\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:85:24\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:87:24\n    |\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u32`\n    |                   |\n    |                   expected due to this\n \n error[E0308]: mismatched types\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:102:24\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:104:24\n    |\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u64`\n    |                   |\n    |                   expected due to this\n \n error[E0034]: multiple applicable items in scope\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:120:15\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:122:15\n    |\n LL |     let z = x.foo();\n    |               ^^^ multiple `foo` found\n    |\n note: candidate #1 is defined in an impl of the trait `X` for the type `T`\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:43:9\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:45:9\n    |\n LL |         fn foo(self: Smaht<Self, u64>) -> u64 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: candidate #2 is defined in an impl of the trait `NuisanceFoo` for the type `T`\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:70:9\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:72:9\n    |\n LL |         fn foo(self) {}\n    |         ^^^^^^^^^^^^\n note: candidate #3 is defined in the trait `FinalFoo`\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:57:5\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:59:5\n    |\n LL |     fn foo(&self) -> u8;\n    |     ^^^^^^^^^^^^^^^^^^^^\n@@ -49,30 +58,30 @@ LL |     let z = FinalFoo::foo(x);\n    |             ^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:137:24\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:139:24\n    |\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u8`\n    |                   |\n    |                   expected due to this\n \n error[E0308]: mismatched types\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:155:24\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:157:24\n    |\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u32`\n    |                   |\n    |                   expected due to this\n \n error[E0308]: mismatched types\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:172:24\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:174:24\n    |\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u32`\n    |                   |\n    |                   expected due to this\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 6 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0034, E0308.\n For more information about an error, try `rustc --explain E0034`."}, {"sha": "59c02d42bf17ebe844771f6b20b27b313be15fed", "filename": "src/test/ui/moves/move-out-of-slice-2.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,4 +1,5 @@\n #![feature(unsized_locals)]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n struct A;\n #[derive(Clone, Copy)]\n@@ -8,27 +9,27 @@ fn main() {\n     let a: Box<[A]> = Box::new([A]);\n     match *a {\n         //~^ ERROR cannot move out of type `[A]`, a non-copy slice\n-        [a @ ..] => {},\n+        [a @ ..] => {}\n         _ => {}\n     }\n     let b: Box<[A]> = Box::new([A, A, A]);\n     match *b {\n         //~^ ERROR cannot move out of type `[A]`, a non-copy slice\n-        [_, _, b @ .., _] => {},\n+        [_, _, b @ .., _] => {}\n         _ => {}\n     }\n \n     // `[C]` isn't `Copy`, even if `C` is.\n     let c: Box<[C]> = Box::new([C]);\n     match *c {\n         //~^ ERROR cannot move out of type `[C]`, a non-copy slice\n-        [c @ ..] => {},\n+        [c @ ..] => {}\n         _ => {}\n     }\n     let d: Box<[C]> = Box::new([C, C, C]);\n     match *d {\n         //~^ ERROR cannot move out of type `[C]`, a non-copy slice\n-        [_, _, d @ .., _] => {},\n+        [_, _, d @ .., _] => {}\n         _ => {}\n     }\n }"}, {"sha": "9a863bf31a7fb79d0735cd725038bfb03944ce0a", "filename": "src/test/ui/moves/move-out-of-slice-2.stderr", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,51 +1,60 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/move-out-of-slice-2.rs:1:12\n+   |\n+LL | #![feature(unsized_locals)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error[E0508]: cannot move out of type `[A]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:9:11\n+  --> $DIR/move-out-of-slice-2.rs:10:11\n    |\n LL |     match *a {\n    |           ^^ cannot move out of here\n LL |\n-LL |         [a @ ..] => {},\n+LL |         [a @ ..] => {}\n    |          ------\n    |          |\n    |          data moved here\n    |          move occurs because `a` has type `[A]`, which does not implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[A]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:15:11\n+  --> $DIR/move-out-of-slice-2.rs:16:11\n    |\n LL |     match *b {\n    |           ^^ cannot move out of here\n LL |\n-LL |         [_, _, b @ .., _] => {},\n+LL |         [_, _, b @ .., _] => {}\n    |                ------\n    |                |\n    |                data moved here\n    |                move occurs because `b` has type `[A]`, which does not implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[C]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:23:11\n+  --> $DIR/move-out-of-slice-2.rs:24:11\n    |\n LL |     match *c {\n    |           ^^ cannot move out of here\n LL |\n-LL |         [c @ ..] => {},\n+LL |         [c @ ..] => {}\n    |          ------\n    |          |\n    |          data moved here\n    |          move occurs because `c` has type `[C]`, which does not implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[C]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:29:11\n+  --> $DIR/move-out-of-slice-2.rs:30:11\n    |\n LL |     match *d {\n    |           ^^ cannot move out of here\n LL |\n-LL |         [_, _, d @ .., _] => {},\n+LL |         [_, _, d @ .., _] => {}\n    |                ------\n    |                |\n    |                data moved here\n    |                move occurs because `d` has type `[C]`, which does not implement the `Copy` trait\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 4 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0508`."}, {"sha": "b2084a7a426a66c727edc89e4d72f1ef5cb3a15f", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -5,11 +5,11 @@ LL | fn foo(_x: K) {}\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn I + 'static)`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn foo(_x: &K) {}\n-   |            ^\n+LL | fn foo(&_x: K) {}\n+   |        ^\n \n error: aborting due to previous error\n "}, {"sha": "19fc3406ccfe43c165b809364beb1c34fa880e52", "filename": "src/test/ui/suggestions/path-by-value.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -6,11 +6,11 @@ LL | fn f(p: Path) { }\n    |\n    = help: within `Path`, the trait `Sized` is not implemented for `[u8]`\n    = note: required because it appears within the type `Path`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn f(p: &Path) { }\n-   |         ^\n+LL | fn f(&p: Path) { }\n+   |      ^\n \n error: aborting due to previous error\n "}, {"sha": "48eedc0b0ea430467dd91b9e7167c3f6f0854ae9", "filename": "src/test/ui/traits/trait-bounds-not-on-bare-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -13,11 +13,11 @@ LL | fn foo(_x: Foo + Send) {\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Foo + Send + 'static)`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn foo(_x: &Foo + Send) {\n-   |            ^\n+LL | fn foo(&_x: Foo + Send) {\n+   |        ^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "29273a5babefd577162f775b8cac4d50e228d3fa", "filename": "src/test/ui/unboxed-closures/issue-53448.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-53448.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-53448.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-53448.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -5,7 +5,7 @@ LL |     let f: &mut dyn FnMut<(_,), Output = ()> = &mut |_: <() as Lt<'_>>::T|\n    |                                                      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `<() as Lt<'_>>::T`\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: consider further restricting the associated type\n    |\n LL | fn main() where <() as Lt<'_>>::T: Sized {"}, {"sha": "5dd5898c12e5c2d44979fb44ebe9772cfebdc09b", "filename": "src/test/ui/unsized-locals/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fautoderef.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n-#![feature(unsized_locals)]\n+#![allow(incomplete_features)]\n+#![feature(unsized_locals, unsized_fn_params)]\n \n pub trait Foo {\n     fn foo(self) -> String;\n@@ -24,7 +25,6 @@ impl Foo for dyn FnMut() -> String {\n     }\n }\n \n-\n fn main() {\n     let x = *(Box::new(['h', 'e', 'l', 'l', 'o']) as Box<[char]>);\n     assert_eq!(&x.foo() as &str, \"hello\");"}, {"sha": "5954abf3a1fc5ea007222a44adb4e3c0e41e910b", "filename": "src/test/ui/unsized-locals/auxiliary/ufuncs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fauxiliary%2Fufuncs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fauxiliary%2Fufuncs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fauxiliary%2Fufuncs.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,3 +1,3 @@\n-#![feature(unsized_locals)]\n+#![feature(unsized_locals, unsized_fn_params)]\n \n pub fn udrop<T: ?Sized>(_x: T) {}"}, {"sha": "ad73b720fa39d1b4790270a06ca785d3c843fc68", "filename": "src/test/ui/unsized-locals/borrow-after-move.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,4 +1,5 @@\n-#![feature(unsized_locals)]\n+#![feature(unsized_locals, unsized_fn_params)]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n pub trait Foo {\n     fn foo(self) -> String;"}, {"sha": "5934276cc1dda525e1e387031d5c44d576e9d578", "filename": "src/test/ui/unsized-locals/borrow-after-move.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,5 +1,14 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/borrow-after-move.rs:1:12\n+   |\n+LL | #![feature(unsized_locals, unsized_fn_params)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/borrow-after-move.rs:20:24\n+  --> $DIR/borrow-after-move.rs:21:24\n    |\n LL |         let y = *x;\n    |                 -- value moved here\n@@ -10,7 +19,7 @@ LL |         println!(\"{}\", &x);\n    = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `y`\n-  --> $DIR/borrow-after-move.rs:22:24\n+  --> $DIR/borrow-after-move.rs:23:24\n    |\n LL |         let y = *x;\n    |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n@@ -21,7 +30,7 @@ LL |         println!(\"{}\", &y);\n    |                        ^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/borrow-after-move.rs:30:24\n+  --> $DIR/borrow-after-move.rs:31:24\n    |\n LL |         let y = *x;\n    |                 -- value moved here\n@@ -32,7 +41,7 @@ LL |         println!(\"{}\", &x);\n    = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `y`\n-  --> $DIR/borrow-after-move.rs:32:24\n+  --> $DIR/borrow-after-move.rs:33:24\n    |\n LL |         let y = *x;\n    |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n@@ -43,13 +52,13 @@ LL |         println!(\"{}\", &y);\n    |                        ^^ value borrowed here after move\n    |\n note: this function consumes the receiver `self` by taking ownership of it, which moves `y`\n-  --> $DIR/borrow-after-move.rs:4:12\n+  --> $DIR/borrow-after-move.rs:5:12\n    |\n LL |     fn foo(self) -> String;\n    |            ^^^^\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/borrow-after-move.rs:39:24\n+  --> $DIR/borrow-after-move.rs:40:24\n    |\n LL |         let x = \"hello\".to_owned().into_boxed_str();\n    |             - move occurs because `x` has type `Box<str>`, which does not implement the `Copy` trait\n@@ -58,6 +67,6 @@ LL |         x.foo();\n LL |         println!(\"{}\", &x);\n    |                        ^^ value borrowed here after move\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 5 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "b9881defac39a180a30198d43d7445c763315e5f", "filename": "src/test/ui/unsized-locals/by-value-trait-object-safety-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety-rpass.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#![allow(incomplete_features)]\n #![feature(unsized_locals)]\n \n pub trait Foo {\n@@ -14,7 +15,6 @@ impl Foo for A {\n     }\n }\n \n-\n fn main() {\n     let x = *(Box::new(A) as Box<dyn Foo>);\n     assert_eq!(x.foo(), format!(\"hello\"));"}, {"sha": "957991f853b2d9dd3ea95f1c3feffd0df80e8587", "filename": "src/test/ui/unsized-locals/by-value-trait-object-safety-withdefault.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety-withdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety-withdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety-withdefault.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n-#![feature(unsized_locals)]\n+#![allow(incomplete_features)]\n+#![feature(unsized_locals, unsized_fn_params)]\n \n pub trait Foo {\n     fn foo(self) -> String {\n@@ -12,7 +13,6 @@ struct A;\n \n impl Foo for A {}\n \n-\n fn main() {\n     let x = *(Box::new(A) as Box<dyn Foo>);\n     assert_eq!(x.foo(), format!(\"hello\"));"}, {"sha": "d0ba6944a1e812e50d599556bead3e11b3ba6149", "filename": "src/test/ui/unsized-locals/by-value-trait-object-safety.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,7 +1,10 @@\n #![feature(unsized_locals)]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n pub trait Foo {\n-    fn foo(self) -> String where Self: Sized;\n+    fn foo(self) -> String\n+    where\n+        Self: Sized;\n }\n \n struct A;\n@@ -12,7 +15,6 @@ impl Foo for A {\n     }\n }\n \n-\n fn main() {\n     let x = *(Box::new(A) as Box<dyn Foo>);\n     x.foo();"}, {"sha": "59d91bc0cfd3d5ba405520d1a23162c5984eedda", "filename": "src/test/ui/unsized-locals/by-value-trait-object-safety.stderr", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,11 +1,20 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/by-value-trait-object-safety.rs:1:12\n+   |\n+LL | #![feature(unsized_locals)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error: the `foo` method cannot be invoked on a trait object\n-  --> $DIR/by-value-trait-object-safety.rs:18:7\n+  --> $DIR/by-value-trait-object-safety.rs:20:7\n    |\n-LL |     fn foo(self) -> String where Self: Sized;\n-   |                                        ----- this has a `Sized` requirement\n+LL |         Self: Sized;\n+   |               ----- this has a `Sized` requirement\n ...\n LL |     x.foo();\n    |       ^^^\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "9e46ef9be487cd18b10c5a8a5b440918962c77b4", "filename": "src/test/ui/unsized-locals/double-move.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,4 +1,5 @@\n-#![feature(unsized_locals)]\n+#![feature(unsized_locals, unsized_fn_params)]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n pub trait Foo {\n     fn foo(self) -> String;"}, {"sha": "b897dbbc9a3aac4547f05eb34444fbec2a6164f5", "filename": "src/test/ui/unsized-locals/double-move.stderr", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,5 +1,14 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/double-move.rs:1:12\n+   |\n+LL | #![feature(unsized_locals, unsized_fn_params)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error[E0382]: use of moved value: `y`\n-  --> $DIR/double-move.rs:20:22\n+  --> $DIR/double-move.rs:21:22\n    |\n LL |         let y = *x;\n    |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n@@ -9,7 +18,7 @@ LL |         drop_unsized(y);\n    |                      ^ value used here after move\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/double-move.rs:26:22\n+  --> $DIR/double-move.rs:27:22\n    |\n LL |         let _y = *x;\n    |                  -- value moved here\n@@ -19,7 +28,7 @@ LL |         drop_unsized(x);\n    = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `*x`\n-  --> $DIR/double-move.rs:32:18\n+  --> $DIR/double-move.rs:33:18\n    |\n LL |         let x = \"hello\".to_owned().into_boxed_str();\n    |             - move occurs because `x` has type `Box<str>`, which does not implement the `Copy` trait\n@@ -29,7 +38,7 @@ LL |         let _y = *x;\n    |                  ^^ value used here after move\n \n error[E0382]: use of moved value: `y`\n-  --> $DIR/double-move.rs:39:9\n+  --> $DIR/double-move.rs:40:9\n    |\n LL |         let y = *x;\n    |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n@@ -39,13 +48,13 @@ LL |         y.foo();\n    |         ^ value used here after move\n    |\n note: this function consumes the receiver `self` by taking ownership of it, which moves `y`\n-  --> $DIR/double-move.rs:4:12\n+  --> $DIR/double-move.rs:5:12\n    |\n LL |     fn foo(self) -> String;\n    |            ^^^^\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/double-move.rs:45:9\n+  --> $DIR/double-move.rs:46:9\n    |\n LL |         let _y = *x;\n    |                  -- value moved here\n@@ -55,7 +64,7 @@ LL |         x.foo();\n    = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `*x`\n-  --> $DIR/double-move.rs:51:18\n+  --> $DIR/double-move.rs:52:18\n    |\n LL |         let x = \"hello\".to_owned().into_boxed_str();\n    |             - move occurs because `x` has type `Box<str>`, which does not implement the `Copy` trait\n@@ -64,6 +73,6 @@ LL |         x.foo();\n LL |         let _y = *x;\n    |                  ^^ value used here after move\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 6 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "635d34f822914fef3e962af09aa2908c253dcea8", "filename": "src/test/ui/unsized-locals/issue-30276-feature-flagged.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,4 +1,5 @@\n #![feature(unsized_locals)]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n struct Test([i32]);\n "}, {"sha": "0f0ff5793776fe69736d84561e2680d22d2c4906", "filename": "src/test/ui/unsized-locals/issue-30276-feature-flagged.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,13 +1,22 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-30276-feature-flagged.rs:1:12\n+   |\n+LL | #![feature(unsized_locals)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n-  --> $DIR/issue-30276-feature-flagged.rs:6:29\n+  --> $DIR/issue-30276-feature-flagged.rs:7:29\n    |\n LL |     let _x: fn(_) -> Test = Test;\n    |                             ^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `Test`, the trait `Sized` is not implemented for `[i32]`\n-   = note: required because it appears within the type `Test`\n-   = note: the return type of a function must have a statically known size\n+   = help: the trait `Sized` is not implemented for `[i32]`\n+   = note: all function arguments must have a statically known size\n+   = help: unsized fn params are gated as an unstable feature\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "8cccbd792da5c0f1d88fa4a42894aba1e72db235", "filename": "src/test/ui/unsized-locals/issue-30276.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -6,7 +6,7 @@ LL |     let _x: fn(_) -> Test = Test;\n    |\n    = help: the trait `Sized` is not implemented for `[i32]`\n    = note: all function arguments must have a statically known size\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "63b0e830be4ed0290ce08a192b0b1a9ad04e6565", "filename": "src/test/ui/unsized-locals/issue-50940-with-feature.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,4 +1,5 @@\n-#![feature(unsized_locals)]\n+#![feature(unsized_locals, unsized_fn_params)]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n fn main() {\n     struct A<X: ?Sized>(X);"}, {"sha": "1b1a584a01ff1bc24e4b3872339d2b0bc1fee63a", "filename": "src/test/ui/unsized-locals/issue-50940-with-feature.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,5 +1,14 @@\n+warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-50940-with-feature.rs:1:12\n+   |\n+LL | #![feature(unsized_locals, unsized_fn_params)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n+\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/issue-50940-with-feature.rs:5:5\n+  --> $DIR/issue-50940-with-feature.rs:6:5\n    |\n LL |     A as fn(str) -> A<str>;\n    |     ^ doesn't have a size known at compile-time\n@@ -8,6 +17,6 @@ LL |     A as fn(str) -> A<str>;\n    = note: required because it appears within the type `A<str>`\n    = note: the return type of a function must have a statically known size\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "8f09b460e004bc1c2cbf98205cae50aacee09816", "filename": "src/test/ui/unsized-locals/issue-50940.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -6,7 +6,7 @@ LL |     A as fn(str) -> A<str>;\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: all function arguments must have a statically known size\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "4e887f32753f1ea15da3fb823bae4232752d5ae5", "filename": "src/test/ui/unsized-locals/reference-unsized-locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Freference-unsized-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Freference-unsized-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Freference-unsized-locals.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#![allow(incomplete_features)]\n #![feature(unsized_locals)]\n \n fn main() {"}, {"sha": "02b7c299aa40a35f1be9e424e21cf40d37cd1b89", "filename": "src/test/ui/unsized-locals/simple-unsized-locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fsimple-unsized-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Fsimple-unsized-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fsimple-unsized-locals.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#![allow(incomplete_features)]\n #![feature(unsized_locals)]\n \n fn main() {"}, {"sha": "8fcb6d93d391cd4686e2a613e572c1ae332cebbd", "filename": "src/test/ui/unsized-locals/unsized-exprs-rpass.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs-rpass.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n-#![allow(unused_braces, unused_parens)]\n-#![feature(unsized_tuple_coercion, unsized_locals)]\n+#![allow(incomplete_features, unused_braces, unused_parens)]\n+#![feature(unsized_tuple_coercion, unsized_locals, unsized_fn_params)]\n \n struct A<X: ?Sized>(X);\n \n@@ -24,12 +24,8 @@ fn main() {\n     udrop::<[u8]>(loop {\n         break *foo();\n     });\n-    udrop::<[u8]>(if true {\n-        *foo()\n-    } else {\n-        *foo()\n-    });\n-    udrop::<[u8]>({*foo()});\n+    udrop::<[u8]>(if true { *foo() } else { *foo() });\n+    udrop::<[u8]>({ *foo() });\n     udrop::<[u8]>((*foo()));\n     udrop::<[u8]>((*tfoo()).1);\n     *afoo() + 42;"}, {"sha": "1729b9ffa867091033d9ecb1a5ade7e4154ac50f", "filename": "src/test/ui/unsized-locals/unsized-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,4 +1,4 @@\n-#![feature(unsized_tuple_coercion, unsized_locals)]\n+#![feature(unsized_tuple_coercion, unsized_fn_params)]\n \n struct A<X: ?Sized>(X);\n "}, {"sha": "127d8717e580602033c9bd810f4ba4d55e95d0ba", "filename": "src/test/ui/unsized-locals/unsized-exprs2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,4 +1,4 @@\n-#![feature(unsized_tuple_coercion, unsized_locals)]\n+#![feature(unsized_tuple_coercion, unsized_fn_params)]\n \n struct A<X: ?Sized>(X);\n "}, {"sha": "57d9978225a2dc204eb36494efa608ebc1e4bfea", "filename": "src/test/ui/unsized-locals/unsized-exprs3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -6,7 +6,7 @@ LL |     udrop as fn([u8]);\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n    = note: all function arguments must have a statically known size\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "e8782e8948153d7bdad78ed067d04f09c1518c53", "filename": "src/test/ui/unsized-locals/unsized-index.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-index.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,23 +1,27 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// run-pass\n \n-// `std::ops::Index` has an `: ?Sized` bound on the `Idx` type param. This is\n-// an accidental left-over from the times when it `Index` was by-reference.\n-// Tightening the bound now could be a breaking change. Although no crater\n-// regression were observed (https://github.com/rust-lang/rust/pull/59527),\n-// let's be conservative and just add a test for this.\n-#![feature(unsized_locals)]\n+#![feature(unsized_fn_params)]\n \n use std::ops;\n+use std::ops::Index;\n \n pub struct A;\n \n impl ops::Index<str> for A {\n     type Output = ();\n-    fn index(&self, _: str) -> &Self::Output { panic!() }\n+    fn index(&self, _: str) -> &Self::Output {\n+        &()\n+    }\n }\n \n impl ops::IndexMut<str> for A {\n-    fn index_mut(&mut self, _: str) -> &mut Self::Output { panic!() }\n+    fn index_mut(&mut self, _: str) -> &mut Self::Output {\n+        panic!()\n+    }\n }\n \n-fn main() {}\n+fn main() {\n+    let a = A {};\n+    let s = String::new().into_boxed_str();\n+    assert_eq!(&(), a.index(*s));\n+}"}, {"sha": "15263954ced775e5c8c9710696b9dc37ea02c86f", "filename": "src/test/ui/unsized-locals/unsized-locals-using-unsized-fn-params.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-locals-using-unsized-fn-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-locals-using-unsized-fn-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-locals-using-unsized-fn-params.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -0,0 +1,15 @@\n+#![feature(box_patterns)]\n+#![feature(unsized_fn_params)]\n+\n+#[allow(dead_code)]\n+fn f1(box box _b: Box<Box<[u8]>>) {}\n+//~^ ERROR: the size for values of type `[u8]` cannot be known at compilation time [E0277]\n+\n+fn f2((_x, _y): (i32, [i32])) {}\n+//~^ ERROR: the size for values of type `[i32]` cannot be known at compilation time [E0277]\n+\n+fn main() {\n+    let foo: Box<[u8]> = Box::new(*b\"foo\");\n+    let _foo: [u8] = *foo;\n+    //~^ ERROR: the size for values of type `[u8]` cannot be known at compilation time [E0277]\n+}"}, {"sha": "da77026673d96c51a08c8b180bd9a12df830e2fd", "filename": "src/test/ui/unsized-locals/unsized-locals-using-unsized-fn-params.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-locals-using-unsized-fn-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-locals-using-unsized-fn-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-locals-using-unsized-fn-params.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -0,0 +1,33 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/unsized-locals-using-unsized-fn-params.rs:5:15\n+   |\n+LL | fn f1(box box _b: Box<Box<[u8]>>) {}\n+   |               ^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+   = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n+\n+error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n+  --> $DIR/unsized-locals-using-unsized-fn-params.rs:8:12\n+   |\n+LL | fn f2((_x, _y): (i32, [i32])) {}\n+   |            ^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[i32]`\n+   = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/unsized-locals-using-unsized-fn-params.rs:13:9\n+   |\n+LL |     let _foo: [u8] = *foo;\n+   |         ^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+   = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a1b772a7eb689c75c3b802c56a97e1f24af6e4b1", "filename": "src/test/ui/unsized-locals/unsized-parameters.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized-locals%2Funsized-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-parameters.rs?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -1,10 +1,11 @@\n // run-pass\n \n-#![feature(unsized_locals)]\n+#![allow(incomplete_features)]\n+#![feature(unsized_fn_params)]\n \n pub fn f0(_f: dyn FnOnce()) {}\n pub fn f1(_s: str) {}\n-pub fn f2((_x, _y): (i32, [i32])) {}\n+pub fn f2(_x: i32, _y: [i32]) {}\n \n fn main() {\n     let foo = \"foo\".to_string().into_boxed_str();"}, {"sha": "71dac236fa31678febd9d85c35a539a10d3662f6", "filename": "src/test/ui/unsized6.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/346aeef496b5e6daaffb7f71b21d4cf003b44256/src%2Ftest%2Fui%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized6.stderr?ref=346aeef496b5e6daaffb7f71b21d4cf003b44256", "patch": "@@ -132,11 +132,11 @@ LL | fn g1<X: ?Sized>(x: X) {}\n    |       |\n    |       this type parameter needs to be `Sized`\n    |\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn g1<X: ?Sized>(x: &X) {}\n-   |                     ^\n+LL | fn g1<X: ?Sized>(&x: X) {}\n+   |                  ^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:40:22\n@@ -146,11 +146,11 @@ LL | fn g2<X: ?Sized + T>(x: X) {}\n    |       |\n    |       this type parameter needs to be `Sized`\n    |\n-   = help: unsized locals are gated as an unstable feature\n+   = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn g2<X: ?Sized + T>(x: &X) {}\n-   |                         ^\n+LL | fn g2<X: ?Sized + T>(&x: X) {}\n+   |                      ^\n \n error: aborting due to 13 previous errors\n "}]}