{"sha": "5321b35a5ad037369fabae99191c9e45111b21a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMjFiMzVhNWFkMDM3MzY5ZmFiYWU5OTE5MWM5ZTQ1MTExYjIxYTk=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-11T22:43:44Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-11T22:43:44Z"}, "message": "Fix redundant arguments in `external_path()`\n\nIf the path is for a trait, it is always true that `trait_did ==\nSome(did)`, so instead, `external_path()` now takes an `is_trait`\nboolean.", "tree": {"sha": "846cf396e7e35cd7725ce1d6aa3be63c74571d46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/846cf396e7e35cd7725ce1d6aa3be63c74571d46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5321b35a5ad037369fabae99191c9e45111b21a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5321b35a5ad037369fabae99191c9e45111b21a9", "html_url": "https://github.com/rust-lang/rust/commit/5321b35a5ad037369fabae99191c9e45111b21a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5321b35a5ad037369fabae99191c9e45111b21a9/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2207f5a48376c7e4ed12975ba1130680cd57455", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2207f5a48376c7e4ed12975ba1130680cd57455", "html_url": "https://github.com/rust-lang/rust/commit/c2207f5a48376c7e4ed12975ba1130680cd57455"}], "stats": {"total": 61, "additions": 27, "deletions": 34}, "files": [{"sha": "81792ece8a2bbd588c3a763b457167015cb77534", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5321b35a5ad037369fabae99191c9e45111b21a9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5321b35a5ad037369fabae99191c9e45111b21a9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5321b35a5ad037369fabae99191c9e45111b21a9", "patch": "@@ -164,14 +164,8 @@ impl Clean<Type> for (ty::TraitRef<'_>, &[TypeBinding]) {\n             );\n         }\n         inline::record_extern_fqn(cx, trait_ref.def_id, kind);\n-        let path = external_path(\n-            cx,\n-            trait_ref.def_id,\n-            Some(trait_ref.def_id),\n-            true,\n-            bounds.to_vec(),\n-            trait_ref.substs,\n-        );\n+        let path =\n+            external_path(cx, trait_ref.def_id, true, true, bounds.to_vec(), trait_ref.substs);\n \n         debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n \n@@ -1448,12 +1442,12 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     AdtKind::Enum => ItemType::Enum,\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n-                let path = external_path(cx, did, None, false, vec![], substs);\n+                let path = external_path(cx, did, false, false, vec![], substs);\n                 ResolvedPath { path, did, is_generic: false }\n             }\n             ty::Foreign(did) => {\n                 inline::record_extern_fqn(cx, did, ItemType::ForeignType);\n-                let path = external_path(cx, did, None, false, vec![], InternalSubsts::empty());\n+                let path = external_path(cx, did, false, false, vec![], InternalSubsts::empty());\n                 ResolvedPath { path, did, is_generic: false }\n             }\n             ty::Dynamic(ref obj, ref reg) => {\n@@ -1477,7 +1471,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n                 for did in dids {\n                     let empty = cx.tcx.intern_substs(&[]);\n-                    let path = external_path(cx, did, Some(did), false, vec![], empty);\n+                    let path = external_path(cx, did, true, false, vec![], empty);\n                     inline::record_extern_fqn(cx, did, ItemType::Trait);\n                     let bound = PolyTrait {\n                         trait_: ResolvedPath { path, did, is_generic: false },\n@@ -1494,7 +1488,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     });\n                 }\n \n-                let path = external_path(cx, did, Some(did), false, bindings, substs);\n+                let path = external_path(cx, did, true, false, bindings, substs);\n                 bounds.insert(\n                     0,\n                     PolyTrait {"}, {"sha": "0737ff8c6c2094a1bb03b91bd14e643421704977", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5321b35a5ad037369fabae99191c9e45111b21a9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5321b35a5ad037369fabae99191c9e45111b21a9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5321b35a5ad037369fabae99191c9e45111b21a9", "patch": "@@ -1158,7 +1158,7 @@ impl GenericBound {\n     crate fn maybe_sized(cx: &mut DocContext<'_>) -> GenericBound {\n         let did = cx.tcx.require_lang_item(LangItem::Sized, None);\n         let empty = cx.tcx.intern_substs(&[]);\n-        let path = external_path(cx, did, Some(did), false, vec![], empty);\n+        let path = external_path(cx, did, true, false, vec![], empty);\n         inline::record_extern_fqn(cx, did, ItemType::Trait);\n         GenericBound::TraitBound(\n             PolyTrait {"}, {"sha": "57ddf81d0e0480c909b8c85aa11e05b7dc0838e8", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5321b35a5ad037369fabae99191c9e45111b21a9/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5321b35a5ad037369fabae99191c9e45111b21a9/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=5321b35a5ad037369fabae99191c9e45111b21a9", "patch": "@@ -93,7 +93,8 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n \n fn external_generic_args(\n     cx: &mut DocContext<'_>,\n-    trait_did: Option<DefId>,\n+    did: DefId,\n+    is_trait: bool,\n     has_self: bool,\n     bindings: Vec<TypeBinding>,\n     substs: SubstsRef<'_>,\n@@ -121,32 +122,30 @@ fn external_generic_args(\n         })\n         .collect();\n \n-    match trait_did {\n-        // Attempt to sugar an external path like Fn<(A, B,), C> to Fn(A, B) -> C\n-        Some(did) if cx.tcx.fn_trait_kind_from_lang_item(did).is_some() => {\n-            assert!(ty_kind.is_some());\n-            let inputs = match ty_kind {\n-                Some(ty::Tuple(ref tys)) => tys.iter().map(|t| t.expect_ty().clean(cx)).collect(),\n-                _ => return GenericArgs::AngleBracketed { args, bindings },\n-            };\n-            let output = None;\n-            // FIXME(#20299) return type comes from a projection now\n-            // match types[1].kind {\n-            //     ty::Tuple(ref v) if v.is_empty() => None, // -> ()\n-            //     _ => Some(types[1].clean(cx))\n-            // };\n-            GenericArgs::Parenthesized { inputs, output }\n-        }\n-        _ => GenericArgs::AngleBracketed { args, bindings },\n+    if is_trait && cx.tcx.fn_trait_kind_from_lang_item(did).is_some() {\n+        assert!(ty_kind.is_some());\n+        let inputs = match ty_kind {\n+            Some(ty::Tuple(ref tys)) => tys.iter().map(|t| t.expect_ty().clean(cx)).collect(),\n+            _ => return GenericArgs::AngleBracketed { args, bindings },\n+        };\n+        let output = None;\n+        // FIXME(#20299) return type comes from a projection now\n+        // match types[1].kind {\n+        //     ty::Tuple(ref v) if v.is_empty() => None, // -> ()\n+        //     _ => Some(types[1].clean(cx))\n+        // };\n+        GenericArgs::Parenthesized { inputs, output }\n+    } else {\n+        GenericArgs::AngleBracketed { args, bindings }\n     }\n }\n \n-/// trait_did should be set to a trait's DefId if called on a TraitRef, in order to sugar\n+/// `is_trait` should be set to `true` if called on a `TraitRef`, in order to sugar\n /// from `Fn<(A, B,), C>` to `Fn(A, B) -> C`\n pub(super) fn external_path(\n     cx: &mut DocContext<'_>,\n     did: DefId,\n-    trait_did: Option<DefId>,\n+    is_trait: bool,\n     has_self: bool,\n     bindings: Vec<TypeBinding>,\n     substs: SubstsRef<'_>,\n@@ -158,7 +157,7 @@ pub(super) fn external_path(\n         res: Res::Def(def_kind, did),\n         segments: vec![PathSegment {\n             name,\n-            args: external_generic_args(cx, trait_did, has_self, bindings, substs),\n+            args: external_generic_args(cx, did, is_trait, has_self, bindings, substs),\n         }],\n     }\n }"}]}