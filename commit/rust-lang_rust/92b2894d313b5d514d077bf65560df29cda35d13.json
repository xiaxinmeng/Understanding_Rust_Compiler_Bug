{"sha": "92b2894d313b5d514d077bf65560df29cda35d13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYjI4OTRkMzEzYjVkNTE0ZDA3N2JmNjU1NjBkZjI5Y2RhMzVkMTM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-05-15T23:49:54Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-05-29T16:45:07Z"}, "message": "Switch to reserve over extend_from_slice\n\nThis is a 0.15% win on diesel.", "tree": {"sha": "afcd84b6601299ebd2103551028b056ed846c7af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afcd84b6601299ebd2103551028b056ed846c7af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92b2894d313b5d514d077bf65560df29cda35d13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92b2894d313b5d514d077bf65560df29cda35d13", "html_url": "https://github.com/rust-lang/rust/commit/92b2894d313b5d514d077bf65560df29cda35d13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92b2894d313b5d514d077bf65560df29cda35d13/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "299ac7589410a4e9541d0483161abb9e455e0ec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/299ac7589410a4e9541d0483161abb9e455e0ec1", "html_url": "https://github.com/rust-lang/rust/commit/299ac7589410a4e9541d0483161abb9e455e0ec1"}], "stats": {"total": 46, "additions": 21, "deletions": 25}, "files": [{"sha": "a2030b9b8bffef2982fc3e6a1dd2fb55e6128624", "filename": "library/proc_macro/src/bridge/buffer.rs", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/92b2894d313b5d514d077bf65560df29cda35d13/library%2Fproc_macro%2Fsrc%2Fbridge%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b2894d313b5d514d077bf65560df29cda35d13/library%2Fproc_macro%2Fsrc%2Fbridge%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fbuffer.rs?ref=92b2894d313b5d514d077bf65560df29cda35d13", "patch": "@@ -39,7 +39,7 @@ pub struct Buffer<T: Copy> {\n     data: *mut T,\n     len: usize,\n     capacity: usize,\n-    extend_from_slice: extern \"C\" fn(Buffer<T>, Slice<'_, T>) -> Buffer<T>,\n+    reserve: extern \"C\" fn(Buffer<T>, usize) -> Buffer<T>,\n     drop: extern \"C\" fn(Buffer<T>),\n }\n \n@@ -79,32 +79,28 @@ impl<T: Copy> Buffer<T> {\n     }\n \n     pub(super) fn extend_from_slice(&mut self, xs: &[T]) {\n-        // Fast path to avoid going through an FFI call.\n-        if let Some(final_len) = self.len.checked_add(xs.len()) {\n-            if final_len <= self.capacity {\n-                let dst = unsafe { slice::from_raw_parts_mut(self.data, self.capacity) };\n-                dst[self.len..][..xs.len()].copy_from_slice(xs);\n-                self.len = final_len;\n-                return;\n-            }\n+        if xs.len() > self.capacity.wrapping_sub(self.len) {\n+            let b = self.take();\n+            *self = (b.reserve)(b, xs.len());\n+        }\n+        unsafe {\n+            xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());\n+            self.len += xs.len();\n         }\n-        let b = self.take();\n-        *self = (b.extend_from_slice)(b, Slice::from(xs));\n     }\n \n     pub(super) fn push(&mut self, v: T) {\n-        // Fast path to avoid going through an FFI call.\n-        if let Some(final_len) = self.len.checked_add(1) {\n-            if final_len <= self.capacity {\n-                unsafe {\n-                    *self.data.add(self.len) = v;\n-                }\n-                self.len = final_len;\n-                return;\n-            }\n+        // The code here is taken from Vec::push, and we know that reserve()\n+        // will panic if we're exceeding isize::MAX bytes and so there's no need\n+        // to check for overflow.\n+        if self.len == self.capacity {\n+            let b = self.take();\n+            *self = (b.reserve)(b, 1);\n+        }\n+        unsafe {\n+            *self.data.add(self.len) = v;\n+            self.len += 1;\n         }\n-        let b = self.take();\n-        *self = (b.extend_from_slice)(b, Slice::from(std::slice::from_ref(&v)));\n     }\n }\n \n@@ -146,16 +142,16 @@ impl<T: Copy> From<Vec<T>> for Buffer<T> {\n             }\n         }\n \n-        extern \"C\" fn extend_from_slice<T: Copy>(b: Buffer<T>, xs: Slice<'_, T>) -> Buffer<T> {\n+        extern \"C\" fn reserve<T: Copy>(b: Buffer<T>, additional: usize) -> Buffer<T> {\n             let mut v = to_vec(b);\n-            v.extend_from_slice(&xs);\n+            v.reserve(additional);\n             Buffer::from(v)\n         }\n \n         extern \"C\" fn drop<T: Copy>(b: Buffer<T>) {\n             mem::drop(to_vec(b));\n         }\n \n-        Buffer { data, len, capacity, extend_from_slice, drop }\n+        Buffer { data, len, capacity, reserve, drop }\n     }\n }"}]}