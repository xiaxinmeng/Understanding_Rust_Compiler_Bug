{"sha": "9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9", "node_id": "C_kwDOAAsO6NoAKDliZjMyYzQwYjRjMWI3NTU4YWVlMzQyMWVkM2U4ZTczZWY1MThkZDk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-21T18:27:17Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-23T02:12:51Z"}, "message": "Don't project specializable RPITIT projection", "tree": {"sha": "c41aba5c5a5e475749366249a8f8820364411a3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c41aba5c5a5e475749366249a8f8820364411a3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9", "html_url": "https://github.com/rust-lang/rust/commit/9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02b3664766f1053746a3068c6eed6c464d8a40dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b3664766f1053746a3068c6eed6c464d8a40dc", "html_url": "https://github.com/rust-lang/rust/commit/02b3664766f1053746a3068c6eed6c464d8a40dc"}], "stats": {"total": 124, "additions": 119, "deletions": 5}, "files": [{"sha": "c9e46ba41b0571f0282ee597e5678c6a8ecaaab9", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9", "patch": "@@ -1307,21 +1307,38 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n         let _ = selcx.infcx.commit_if_ok(|_| {\n             match selcx.select(&obligation.with(tcx, trait_predicate)) {\n                 Ok(Some(super::ImplSource::UserDefined(data))) => {\n-                    candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(data));\n-                    Ok(())\n+                    let Ok(leaf_def) = specialization_graph::assoc_def(tcx, data.impl_def_id, trait_fn_def_id) else {\n+                        return Err(());\n+                    };\n+                    // Only reveal a specializable default if we're past type-checking\n+                    // and the obligation is monomorphic, otherwise passes such as\n+                    // transmute checking and polymorphic MIR optimizations could\n+                    // get a result which isn't correct for all monomorphizations.\n+                    if leaf_def.is_final()\n+                        || (obligation.param_env.reveal() == Reveal::All\n+                            && !selcx\n+                                .infcx\n+                                .resolve_vars_if_possible(obligation.predicate.trait_ref(tcx))\n+                                .still_further_specializable())\n+                    {\n+                        candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(data));\n+                        Ok(())\n+                    } else {\n+                        Err(())\n+                    }\n                 }\n                 Ok(None) => {\n                     candidate_set.mark_ambiguous();\n-                    return Err(());\n+                    Err(())\n                 }\n                 Ok(Some(_)) => {\n                     // Don't know enough about the impl to provide a useful signature\n-                    return Err(());\n+                    Err(())\n                 }\n                 Err(e) => {\n                     debug!(error = ?e, \"selection error\");\n                     candidate_set.mark_error(e);\n-                    return Err(());\n+                    Err(())\n                 }\n             }\n         });"}, {"sha": "afd3db5e0525ef416737786bc8bb896bd8eed7f8", "filename": "tests/ui/async-await/in-trait/dont-project-to-specializable-projection.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.rs?ref=9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9", "patch": "@@ -0,0 +1,71 @@\n+// edition: 2021\n+// known-bug: #108309\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(min_specialization)]\n+\n+struct MyStruct;\n+\n+trait MyTrait<T> {\n+    async fn foo(_: T) -> &'static str;\n+}\n+\n+impl<T> MyTrait<T> for MyStruct {\n+    default async fn foo(_: T) -> &'static str {\n+        \"default\"\n+    }\n+}\n+\n+impl MyTrait<i32> for MyStruct {\n+    async fn foo(_: i32) -> &'static str {\n+        \"specialized\"\n+    }\n+}\n+\n+async fn async_main() {\n+    assert_eq!(MyStruct::foo(42).await, \"specialized\");\n+    assert_eq!(indirection(42).await, \"specialized\");\n+}\n+\n+async fn indirection<T>(x: T) -> &'static str {\n+    //explicit type coercion is currently necessary\n+    // because of https://github.com/rust-lang/rust/issues/67918\n+    <MyStruct as MyTrait<T>>::foo(x).await\n+}\n+\n+// ------------------------------------------------------------------------- //\n+// Implementation Details Below...\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::*;\n+\n+pub fn noop_waker() -> Waker {\n+    let raw = RawWaker::new(std::ptr::null(), &NOOP_WAKER_VTABLE);\n+\n+    // SAFETY: the contracts for RawWaker and RawWakerVTable are upheld\n+    unsafe { Waker::from_raw(raw) }\n+}\n+\n+const NOOP_WAKER_VTABLE: RawWakerVTable = RawWakerVTable::new(noop_clone, noop, noop, noop);\n+\n+unsafe fn noop_clone(_p: *const ()) -> RawWaker {\n+    RawWaker::new(std::ptr::null(), &NOOP_WAKER_VTABLE)\n+}\n+\n+unsafe fn noop(_p: *const ()) {}\n+\n+fn main() {\n+    let mut fut = async_main();\n+\n+    // Poll loop, just to test the future...\n+    let waker = noop_waker();\n+    let ctx = &mut Context::from_waker(&waker);\n+\n+    loop {\n+        match unsafe { Pin::new_unchecked(&mut fut).poll(ctx) } {\n+            Poll::Pending => {}\n+            Poll::Ready(()) => break,\n+        }\n+    }\n+}"}, {"sha": "371122ea71ec0e2ec43918f8638a737945f7a413", "filename": "tests/ui/async-await/in-trait/dont-project-to-specializable-projection.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.stderr?ref=9bf32c40b4c1b7558aee3421ed3e8e73ef518dd9", "patch": "@@ -0,0 +1,26 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/dont-project-to-specializable-projection.rs:4:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0053]: method `foo` has an incompatible type for trait\n+  --> $DIR/dont-project-to-specializable-projection.rs:14:35\n+   |\n+LL |     default async fn foo(_: T) -> &'static str {\n+   |                                   ^^^^^^^^^^^^ expected associated type, found future\n+   |\n+note: type in trait\n+  --> $DIR/dont-project-to-specializable-projection.rs:10:27\n+   |\n+LL |     async fn foo(_: T) -> &'static str;\n+   |                           ^^^^^^^^^^^^\n+   = note: expected signature `fn(_) -> impl Future<Output = &'static str>`\n+              found signature `fn(_) -> impl Future<Output = &'static str>`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0053`."}]}