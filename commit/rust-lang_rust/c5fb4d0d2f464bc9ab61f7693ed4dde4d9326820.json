{"sha": "c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZmI0ZDBkMmY0NjRiYzlhYjYxZjc2OTNlZDRkZGU0ZDkzMjY4MjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-27T08:58:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-27T08:58:40Z"}, "message": "Auto merge of #55780 - ogoffart:span_source_text, r=petrochenkov\n\nIntroduce proc_macro::Span::source_text\n\nA function to extract the actual source behind a Span.\n\nBackground: I would like to use `syn` in a `build.rs` script to parse the rust code, and extract part of the source code. However, `syn` only gives access to proc_macro2::Span, and i would like to get the source code behind that.\nI opened an issue on proc_macro2 bug tracker for this feature https://github.com/alexcrichton/proc-macro2/issues/110  and @alexcrichton said the feature should first go upstream in proc_macro.  So there it is!\n\nSince most of the Span API is unstable anyway, this is guarded by the same `proc_macro_span` feature as everything else.", "tree": {"sha": "cdee8726acffb5087a4cb9343491a4b72e80a487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdee8726acffb5087a4cb9343491a4b72e80a487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820", "html_url": "https://github.com/rust-lang/rust/commit/c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "267fb90b55736dc2362e8621a247f54da5fd8d40", "url": "https://api.github.com/repos/rust-lang/rust/commits/267fb90b55736dc2362e8621a247f54da5fd8d40", "html_url": "https://github.com/rust-lang/rust/commit/267fb90b55736dc2362e8621a247f54da5fd8d40"}, {"sha": "e88b0d9a94118168fd02a917e7c99ad47cf3418e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e88b0d9a94118168fd02a917e7c99ad47cf3418e", "html_url": "https://github.com/rust-lang/rust/commit/e88b0d9a94118168fd02a917e7c99ad47cf3418e"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "3c48466fffa28d366e151f70f13460d79f63a4d0", "filename": "src/libproc_macro/bridge/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fmod.rs?ref=c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820", "patch": "@@ -155,6 +155,7 @@ macro_rules! with_api {\n                 fn end($self: $S::Span) -> LineColumn;\n                 fn join($self: $S::Span, other: $S::Span) -> Option<$S::Span>;\n                 fn resolved_at($self: $S::Span, at: $S::Span) -> $S::Span;\n+                fn source_text($self: $S::Span) -> Option<String>;\n             },\n         }\n     };"}, {"sha": "03905f3e705d35c99d684fce4319db24afb18a26", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820", "patch": "@@ -333,6 +333,18 @@ impl Span {\n         self.0 == other.0\n     }\n \n+    /// Returns the source text behind a span. This preserves the original source\n+    /// code, including spaces and comments. It only returns a result if the span\n+    /// corresponds to real source code.\n+    ///\n+    /// Note: The observable result of a macro should only rely on the tokens and\n+    /// not on this source text. The result of this function is a best effort to\n+    /// be used for diagnostics only.\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n+    pub fn source_text(&self) -> Option<String> {\n+        self.0.source_text()\n+    }\n+\n     diagnostic_method!(error, Level::Error);\n     diagnostic_method!(warning, Level::Warning);\n     diagnostic_method!(note, Level::Note);"}, {"sha": "f902e8169b6babbd553dc8e06292af0dd7cf8614", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820", "patch": "@@ -740,4 +740,7 @@ impl server::Span for Rustc<'_> {\n     fn resolved_at(&mut self, span: Self::Span, at: Self::Span) -> Self::Span {\n         span.with_ctxt(at.ctxt())\n     }\n+    fn source_text(&mut self,  span: Self::Span) -> Option<String> {\n+        self.sess.source_map().span_to_snippet(span).ok()\n+    }\n }"}, {"sha": "9092e7a49ea6ee08c970700be48d6852bedda8ab", "filename": "src/test/run-pass/proc-macro/auxiliary/span-api-tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fspan-api-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fspan-api-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fspan-api-tests.rs?ref=c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820", "patch": "@@ -33,3 +33,14 @@ pub fn assert_source_file(input: TokenStream) -> TokenStream {\n \n     \"\".parse().unwrap()\n }\n+\n+#[proc_macro]\n+pub fn macro_stringify(input: TokenStream) -> TokenStream {\n+    let mut tokens = input.into_iter();\n+    let first_span = tokens.next().expect(\"first token\").span();\n+    let last_span = tokens.last().map(|x| x.span()).unwrap_or(first_span);\n+    let span = first_span.join(last_span).expect(\"joined span\");\n+    let src = span.source_text().expect(\"source_text\");\n+    TokenTree::Literal(Literal::string(&src)).into()\n+}\n+"}, {"sha": "9b977b8fa75cd0452731d8e870fd15cb168a626a", "filename": "src/test/run-pass/proc-macro/span-api-tests.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820/src%2Ftest%2Frun-pass%2Fproc-macro%2Fspan-api-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820/src%2Ftest%2Frun-pass%2Fproc-macro%2Fspan-api-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fspan-api-tests.rs?ref=c5fb4d0d2f464bc9ab61f7693ed4dde4d9326820", "patch": "@@ -3,12 +3,14 @@\n \n // ignore-pretty\n \n+#![feature(proc_macro_hygiene)]\n+\n #[macro_use]\n extern crate span_test_macros;\n \n extern crate span_api_tests;\n \n-use span_api_tests::{reemit, assert_fake_source_file, assert_source_file};\n+use span_api_tests::{reemit, assert_fake_source_file, assert_source_file, macro_stringify};\n \n macro_rules! say_hello {\n     ($macname:ident) => ( $macname! { \"Hello, world!\" })\n@@ -28,4 +30,32 @@ reemit! {\n     assert_source_file! { \"Hello, world!\" }\n }\n \n-fn main() {}\n+fn main() {\n+    let s = macro_stringify!(Hello, world!);\n+    assert_eq!(s, \"Hello, world!\");\n+    assert_eq!(macro_stringify!(Hello, world!), \"Hello, world!\");\n+    assert_eq!(reemit_legacy!(macro_stringify!(Hello, world!)), \"Hello, world!\");\n+    reemit_legacy!(assert_eq!(macro_stringify!(Hello, world!), \"Hello, world!\"));\n+    // reemit change the span to be that of the call site\n+    assert_eq!(\n+        reemit!(macro_stringify!(Hello, world!)),\n+        \"reemit!(macro_stringify!(Hello, world!))\"\n+    );\n+    let r = \"reemit!(assert_eq!(macro_stringify!(Hello, world!), r));\";\n+    reemit!(assert_eq!(macro_stringify!(Hello, world!), r));\n+\n+    assert_eq!(macro_stringify!(\n+        Hello,\n+        world!\n+    ), \"Hello,\\n        world!\");\n+\n+    assert_eq!(macro_stringify!(Hello, /*world */ !), \"Hello, /*world */ !\");\n+        assert_eq!(macro_stringify!(\n+        Hello,\n+        // comment\n+        world!\n+    ), \"Hello,\\n        // comment\\n        world!\");\n+\n+    assert_eq!(say_hello! { macro_stringify }, \"\\\"Hello, world!\\\"\");\n+    assert_eq!(say_hello_extern! { macro_stringify }, \"\\\"Hello, world!\\\"\");\n+}"}]}