{"sha": "66b9277b1364b130aed260ac219c1fe58eb02df2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YjkyNzdiMTM2NGIxMzBhZWQyNjBhYzIxOWMxZmU1OGViMDJkZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-09T05:15:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-09T05:15:48Z"}, "message": "Auto merge of #26884 - dotdash:fast, r=alexcrichton\n\nExploiting the fact that getting the length of the slices is known, we\r\ncan use a counted loop instead of iterators, which means that we only\r\nneed a single counter, instead of having to increment and check one\r\npointer for each iterator.\r\n\r\nBenchmarks comparing vectors with 100,000 elements:\r\n\r\nBefore:\r\n\r\n```\r\nrunning 8 tests\r\ntest eq1_u8  ... bench:      66,757 ns/iter (+/- 113)\r\ntest eq2_u16 ... bench:     111,267 ns/iter (+/- 149)\r\ntest eq3_u32 ... bench:     126,282 ns/iter (+/- 111)\r\ntest eq4_u64 ... bench:     126,418 ns/iter (+/- 155)\r\ntest ne1_u8  ... bench:      88,990 ns/iter (+/- 161)\r\ntest ne2_u16 ... bench:      89,126 ns/iter (+/- 265)\r\ntest ne3_u32 ... bench:      96,901 ns/iter (+/- 92)\r\ntest ne4_u64 ... bench:      96,750 ns/iter (+/- 137)\r\n```\r\n\r\nAfter:\r\n\r\n```\r\nrunning 8 tests\r\ntest eq1_u8  ... bench:      46,413 ns/iter (+/- 521)\r\ntest eq2_u16 ... bench:      46,500 ns/iter (+/- 74)\r\ntest eq3_u32 ... bench:      50,059 ns/iter (+/- 92)\r\ntest eq4_u64 ... bench:      54,001 ns/iter (+/- 92)\r\ntest ne1_u8  ... bench:      47,595 ns/iter (+/- 53)\r\ntest ne2_u16 ... bench:      47,521 ns/iter (+/- 59)\r\ntest ne3_u32 ... bench:      44,889 ns/iter (+/- 74)\r\ntest ne4_u64 ... bench:      47,775 ns/iter (+/- 68)\r\n```", "tree": {"sha": "8afa78679850bc0c9128356bd27b77787be987e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8afa78679850bc0c9128356bd27b77787be987e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66b9277b1364b130aed260ac219c1fe58eb02df2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66b9277b1364b130aed260ac219c1fe58eb02df2", "html_url": "https://github.com/rust-lang/rust/commit/66b9277b1364b130aed260ac219c1fe58eb02df2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66b9277b1364b130aed260ac219c1fe58eb02df2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afe25a2d6aaa308cce861fab50014f6a9f57a269", "url": "https://api.github.com/repos/rust-lang/rust/commits/afe25a2d6aaa308cce861fab50014f6a9f57a269", "html_url": "https://github.com/rust-lang/rust/commit/afe25a2d6aaa308cce861fab50014f6a9f57a269"}, {"sha": "9f4d5b4be10ce9683569a0bd55f555d30f70b5a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4d5b4be10ce9683569a0bd55f555d30f70b5a5", "html_url": "https://github.com/rust-lang/rust/commit/9f4d5b4be10ce9683569a0bd55f555d30f70b5a5"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "00e7ff3c4df823ada27f6340a3df5cde64b4176e", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/66b9277b1364b130aed260ac219c1fe58eb02df2/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b9277b1364b130aed260ac219c1fe58eb02df2/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=66b9277b1364b130aed260ac219c1fe58eb02df2", "patch": "@@ -1463,12 +1463,30 @@ pub mod bytes {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A, B> PartialEq<[B]> for [A] where A: PartialEq<B> {\n     fn eq(&self, other: &[B]) -> bool {\n-        self.len() == other.len() &&\n-            order::eq(self.iter(), other.iter())\n+        if self.len() != other.len() {\n+            return false;\n+        }\n+\n+        for i in 0..self.len() {\n+            if !self[i].eq(&other[i]) {\n+                return false;\n+            }\n+        }\n+\n+        true\n     }\n     fn ne(&self, other: &[B]) -> bool {\n-        self.len() != other.len() ||\n-            order::ne(self.iter(), other.iter())\n+        if self.len() != other.len() {\n+            return true;\n+        }\n+\n+        for i in 0..self.len() {\n+            if self[i].ne(&other[i]) {\n+                return true;\n+            }\n+        }\n+\n+        false\n     }\n }\n "}]}