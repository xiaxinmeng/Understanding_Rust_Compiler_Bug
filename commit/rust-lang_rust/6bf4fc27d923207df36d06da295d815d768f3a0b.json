{"sha": "6bf4fc27d923207df36d06da295d815d768f3a0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZjRmYzI3ZDkyMzIwN2RmMzZkMDZkYTI5NWQ4MTVkNzY4ZjNhMGI=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-05-19T15:56:51Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-05-19T15:56:51Z"}, "message": "LSP: Two stage initialization\n\nFills in server information.\n\nDerives CodeAction capabilities from the client. If code action literals\nare unsupported we fall back to the \"simple support\" which just sends back\ncommands (this is already supported in our config). The difference being\nthat we did not adjust our server capabilities so that if the client was\nchecking for `CodeActionProvider: \"true\"` in the response that would have failed.", "tree": {"sha": "7c7e3de3ca91efd1d15b51d8102f5e226c055c7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c7e3de3ca91efd1d15b51d8102f5e226c055c7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bf4fc27d923207df36d06da295d815d768f3a0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf4fc27d923207df36d06da295d815d768f3a0b", "html_url": "https://github.com/rust-lang/rust/commit/6bf4fc27d923207df36d06da295d815d768f3a0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bf4fc27d923207df36d06da295d815d768f3a0b/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c1c23ecc7c94fae0948abe8af7a700e42e20921", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c1c23ecc7c94fae0948abe8af7a700e42e20921", "html_url": "https://github.com/rust-lang/rust/commit/5c1c23ecc7c94fae0948abe8af7a700e42e20921"}], "stats": {"total": 83, "additions": 57, "deletions": 26}, "files": [{"sha": "5ce35c5b1dc7eabe738cfd3602f34dcd8fe4e744", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bf4fc27d923207df36d06da295d815d768f3a0b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6bf4fc27d923207df36d06da295d815d768f3a0b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6bf4fc27d923207df36d06da295d815d768f3a0b", "patch": "@@ -658,9 +658,9 @@ dependencies = [\n \n [[package]]\n name = \"lsp-server\"\n-version = \"0.3.1\"\n+version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5383e043329615624bbf45e1ba27bd75c176762b2592855c659bc28ac580a06b\"\n+checksum = \"dccec31bfd027ac0dd288a78e19005fd89624d9099456e284b5241316a6c3072\"\n dependencies = [\n  \"crossbeam-channel\",\n  \"log\","}, {"sha": "f5b4fee2bc7aff892bf1b9c11b0914d98224b66f", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6bf4fc27d923207df36d06da295d815d768f3a0b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf4fc27d923207df36d06da295d815d768f3a0b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=6bf4fc27d923207df36d06da295d815d768f3a0b", "patch": "@@ -74,12 +74,25 @@ fn run_server() -> Result<()> {\n     log::info!(\"lifecycle: server started\");\n \n     let (connection, io_threads) = Connection::stdio();\n-    let server_capabilities = serde_json::to_value(rust_analyzer::server_capabilities()).unwrap();\n \n-    let initialize_params = connection.initialize(server_capabilities)?;\n+    let (initialize_id, initialize_params) = connection.initialize_start()?;\n     let initialize_params =\n         from_json::<lsp_types::InitializeParams>(\"InitializeParams\", initialize_params)?;\n \n+    let server_capabilities = rust_analyzer::server_capabilities(&initialize_params.capabilities);\n+\n+    let initialize_result = lsp_types::InitializeResult {\n+        capabilities: server_capabilities,\n+        server_info: Some(lsp_types::ServerInfo {\n+            name: String::from(\"rust-analyzer\"),\n+            version: None,\n+        }),\n+    };\n+\n+    let initialize_result = serde_json::to_value(initialize_result).unwrap();\n+\n+    connection.initialize_finish(initialize_id, initialize_result)?;\n+\n     if let Some(client_info) = initialize_params.client_info {\n         log::info!(\"Client '{}' {}\", client_info.name, client_info.version.unwrap_or_default());\n     }"}, {"sha": "5ac98c65728b8f8534857384ab2eb94ce321ce71", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6bf4fc27d923207df36d06da295d815d768f3a0b/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bf4fc27d923207df36d06da295d815d768f3a0b/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=6bf4fc27d923207df36d06da295d815d768f3a0b", "patch": "@@ -4,16 +4,47 @@ use std::env;\n use crate::semantic_tokens;\n \n use lsp_types::{\n-    CallHierarchyServerCapability, CodeActionOptions, CodeActionProviderCapability,\n-    CodeLensOptions, CompletionOptions, DocumentOnTypeFormattingOptions,\n-    FoldingRangeProviderCapability, ImplementationProviderCapability, RenameOptions,\n-    RenameProviderCapability, SaveOptions, SelectionRangeProviderCapability,\n-    SemanticTokensDocumentProvider, SemanticTokensLegend, SemanticTokensOptions,\n-    ServerCapabilities, SignatureHelpOptions, TextDocumentSyncCapability, TextDocumentSyncKind,\n-    TextDocumentSyncOptions, TypeDefinitionProviderCapability, WorkDoneProgressOptions,\n+    CallHierarchyServerCapability, ClientCapabilities, CodeActionOptions,\n+    CodeActionProviderCapability, CodeLensOptions, CompletionOptions,\n+    DocumentOnTypeFormattingOptions, FoldingRangeProviderCapability,\n+    ImplementationProviderCapability, RenameOptions, RenameProviderCapability, SaveOptions,\n+    SelectionRangeProviderCapability, SemanticTokensDocumentProvider, SemanticTokensLegend,\n+    SemanticTokensOptions, ServerCapabilities, SignatureHelpOptions, TextDocumentSyncCapability,\n+    TextDocumentSyncKind, TextDocumentSyncOptions, TypeDefinitionProviderCapability,\n+    WorkDoneProgressOptions,\n };\n \n-pub fn server_capabilities() -> ServerCapabilities {\n+pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabilities {\n+    let mut code_action_provider = CodeActionProviderCapability::Simple(true);\n+\n+    match client_caps.text_document.as_ref() {\n+        Some(it) => {\n+            match it.code_action.as_ref().and_then(|c| c.code_action_literal_support.as_ref()) {\n+                Some(_literal_support) => {\n+                    code_action_provider =\n+                        CodeActionProviderCapability::Options(CodeActionOptions {\n+                            // Advertise support for all built-in CodeActionKinds.\n+                            // Ideally we would base this off of the client capabilities\n+                            // but the client is supposed to fall back gracefully for unknown values.\n+                            code_action_kinds: Some(vec![\n+                                lsp_types::code_action_kind::EMPTY.to_string(),\n+                                lsp_types::code_action_kind::QUICKFIX.to_string(),\n+                                lsp_types::code_action_kind::REFACTOR.to_string(),\n+                                lsp_types::code_action_kind::REFACTOR_EXTRACT.to_string(),\n+                                lsp_types::code_action_kind::REFACTOR_INLINE.to_string(),\n+                                lsp_types::code_action_kind::REFACTOR_REWRITE.to_string(),\n+                                lsp_types::code_action_kind::SOURCE.to_string(),\n+                                lsp_types::code_action_kind::SOURCE_ORGANIZE_IMPORTS.to_string(),\n+                            ]),\n+                            work_done_progress_options: Default::default(),\n+                        });\n+                }\n+                None => {}\n+            }\n+        }\n+        None => {}\n+    };\n+\n     ServerCapabilities {\n         text_document_sync: Some(TextDocumentSyncCapability::Options(TextDocumentSyncOptions {\n             open_close: Some(true),\n@@ -45,20 +76,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n         document_highlight_provider: Some(true),\n         document_symbol_provider: Some(true),\n         workspace_symbol_provider: Some(true),\n-        code_action_provider: Some(CodeActionProviderCapability::Options(CodeActionOptions {\n-            // Advertise support for all built-in CodeActionKinds\n-            code_action_kinds: Some(vec![\n-                lsp_types::code_action_kind::EMPTY.to_string(),\n-                lsp_types::code_action_kind::QUICKFIX.to_string(),\n-                lsp_types::code_action_kind::REFACTOR.to_string(),\n-                lsp_types::code_action_kind::REFACTOR_EXTRACT.to_string(),\n-                lsp_types::code_action_kind::REFACTOR_INLINE.to_string(),\n-                lsp_types::code_action_kind::REFACTOR_REWRITE.to_string(),\n-                lsp_types::code_action_kind::SOURCE.to_string(),\n-                lsp_types::code_action_kind::SOURCE_ORGANIZE_IMPORTS.to_string(),\n-            ]),\n-            work_done_progress_options: Default::default(),\n-        })),\n+        code_action_provider: Some(code_action_provider),\n         code_lens_provider: Some(CodeLensOptions { resolve_provider: Some(true) }),\n         document_formatting_provider: Some(true),\n         document_range_formatting_provider: None,"}]}