{"sha": "f818872ecb924fd5cf388a19a2119b0c1f5b7872", "node_id": "C_kwDOAAsO6NoAKGY4MTg4NzJlY2I5MjRmZDVjZjM4OGExOWEyMTE5YjBjMWY1Yjc4NzI", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-07-03T13:14:22Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-07-03T14:17:17Z"}, "message": "Enable check-cfg in stage0", "tree": {"sha": "ed7baefc1b7dd3a0f5202e329cc075ece6f24430", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed7baefc1b7dd3a0f5202e329cc075ece6f24430"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f818872ecb924fd5cf388a19a2119b0c1f5b7872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f818872ecb924fd5cf388a19a2119b0c1f5b7872", "html_url": "https://github.com/rust-lang/rust/commit/f818872ecb924fd5cf388a19a2119b0c1f5b7872", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f818872ecb924fd5cf388a19a2119b0c1f5b7872/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e82c5302819abd65e7cf238e1b269673eb91d99", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e82c5302819abd65e7cf238e1b269673eb91d99", "html_url": "https://github.com/rust-lang/rust/commit/0e82c5302819abd65e7cf238e1b269673eb91d99"}], "stats": {"total": 70, "additions": 32, "deletions": 38}, "files": [{"sha": "7f3625947e7211b192d5f819d0698f86a2598ff5", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 32, "deletions": 38, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f818872ecb924fd5cf388a19a2119b0c1f5b7872/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f818872ecb924fd5cf388a19a2119b0c1f5b7872/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f818872ecb924fd5cf388a19a2119b0c1f5b7872", "patch": "@@ -1462,45 +1462,39 @@ impl<'a> Builder<'a> {\n             rustflags.arg(\"-Zunstable-options\");\n         }\n \n-        // FIXME(Urgau): This a hack as it shouldn't be gated on stage 0 but until `rustc_llvm`\n-        // is made to work with `--check-cfg` which is currently not easly possible until cargo\n-        // get some support for setting `--check-cfg` within build script, it's the least invasive\n-        // hack that still let's us have cfg checking for the vast majority of the codebase.\n-        if stage != 0 {\n-            // Enable cfg checking of cargo features for everything but std and also enable cfg\n-            // checking of names and values.\n-            //\n-            // Note: `std`, `alloc` and `core` imports some dependencies by #[path] (like\n-            // backtrace, core_simd, std_float, ...), those dependencies have their own\n-            // features but cargo isn't involved in the #[path] process and so cannot pass the\n-            // complete list of features, so for that reason we don't enable checking of\n-            // features for std crates.\n-            cargo.arg(if mode != Mode::Std {\n-                \"-Zcheck-cfg=names,values,features\"\n-            } else {\n-                \"-Zcheck-cfg=names,values\"\n-            });\n+        // Enable cfg checking of cargo features for everything but std and also enable cfg\n+        // checking of names and values.\n+        //\n+        // Note: `std`, `alloc` and `core` imports some dependencies by #[path] (like\n+        // backtrace, core_simd, std_float, ...), those dependencies have their own\n+        // features but cargo isn't involved in the #[path] process and so cannot pass the\n+        // complete list of features, so for that reason we don't enable checking of\n+        // features for std crates.\n+        cargo.arg(if mode != Mode::Std {\n+            \"-Zcheck-cfg=names,values,output,features\"\n+        } else {\n+            \"-Zcheck-cfg=names,values,output\"\n+        });\n \n-            // Add extra cfg not defined in/by rustc\n-            //\n-            // Note: Altrough it would seems that \"-Zunstable-options\" to `rustflags` is useless as\n-            // cargo would implicitly add it, it was discover that sometimes bootstrap only use\n-            // `rustflags` without `cargo` making it required.\n-            rustflags.arg(\"-Zunstable-options\");\n-            for (restricted_mode, name, values) in EXTRA_CHECK_CFGS {\n-                if *restricted_mode == None || *restricted_mode == Some(mode) {\n-                    // Creating a string of the values by concatenating each value:\n-                    // ',\"tvos\",\"watchos\"' or '' (nothing) when there are no values\n-                    let values = match values {\n-                        Some(values) => values\n-                            .iter()\n-                            .map(|val| [\",\", \"\\\"\", val, \"\\\"\"])\n-                            .flatten()\n-                            .collect::<String>(),\n-                        None => String::new(),\n-                    };\n-                    rustflags.arg(&format!(\"--check-cfg=values({name}{values})\"));\n-                }\n+        // Add extra cfg not defined in/by rustc\n+        //\n+        // Note: Altrough it would seems that \"-Zunstable-options\" to `rustflags` is useless as\n+        // cargo would implicitly add it, it was discover that sometimes bootstrap only use\n+        // `rustflags` without `cargo` making it required.\n+        rustflags.arg(\"-Zunstable-options\");\n+        for (restricted_mode, name, values) in EXTRA_CHECK_CFGS {\n+            if *restricted_mode == None || *restricted_mode == Some(mode) {\n+                // Creating a string of the values by concatenating each value:\n+                // ',\"tvos\",\"watchos\"' or '' (nothing) when there are no values\n+                let values = match values {\n+                    Some(values) => values\n+                        .iter()\n+                        .map(|val| [\",\", \"\\\"\", val, \"\\\"\"])\n+                        .flatten()\n+                        .collect::<String>(),\n+                    None => String::new(),\n+                };\n+                rustflags.arg(&format!(\"--check-cfg=values({name}{values})\"));\n             }\n         }\n "}]}