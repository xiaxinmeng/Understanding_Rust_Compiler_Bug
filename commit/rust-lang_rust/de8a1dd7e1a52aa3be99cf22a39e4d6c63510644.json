{"sha": "de8a1dd7e1a52aa3be99cf22a39e4d6c63510644", "node_id": "C_kwDOAAsO6NoAKGRlOGExZGQ3ZTFhNTJhYTNiZTk5Y2YyMmEzOWU0ZDZjNjM1MTA2NDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-24T01:23:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-24T01:23:17Z"}, "message": "Auto merge of #102068 - cjgillot:erased-lifetime-print, r=eholk\n\nAlways print '_, even for erased lifetimes.\n\nExplicit lifetime arguments are now the recommended syntax in rust 2018 and rust 2021.  This PR applies this discipline to rustc itself.", "tree": {"sha": "8338032309d16c1bda1430c3b4a91abd23f38609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8338032309d16c1bda1430c3b4a91abd23f38609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de8a1dd7e1a52aa3be99cf22a39e4d6c63510644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de8a1dd7e1a52aa3be99cf22a39e4d6c63510644", "html_url": "https://github.com/rust-lang/rust/commit/de8a1dd7e1a52aa3be99cf22a39e4d6c63510644", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de8a1dd7e1a52aa3be99cf22a39e4d6c63510644/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9277c6aa8d80691b3663c1162a357f60c688eb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9277c6aa8d80691b3663c1162a357f60c688eb2", "html_url": "https://github.com/rust-lang/rust/commit/d9277c6aa8d80691b3663c1162a357f60c688eb2"}, {"sha": "781e45c224e2ae2f2d7876d2ebb3d0390db45a6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/781e45c224e2ae2f2d7876d2ebb3d0390db45a6c", "html_url": "https://github.com/rust-lang/rust/commit/781e45c224e2ae2f2d7876d2ebb3d0390db45a6c"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "1c0490ffa44ccbbf8096ac7d360e5f5017caa1c6", "filename": "tests/ui/inefficient_to_string.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de8a1dd7e1a52aa3be99cf22a39e4d6c63510644/tests%2Fui%2Finefficient_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de8a1dd7e1a52aa3be99cf22a39e4d6c63510644/tests%2Fui%2Finefficient_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finefficient_to_string.stderr?ref=de8a1dd7e1a52aa3be99cf22a39e4d6c63510644", "patch": "@@ -35,21 +35,21 @@ LL |     let _: String = rrrstring.to_string();\n    |\n    = help: `&&std::string::String` implements `ToString` through a slower blanket impl, but `std::string::String` has a fast specialization of `ToString`\n \n-error: calling `to_string` on `&&std::borrow::Cow<str>`\n+error: calling `to_string` on `&&std::borrow::Cow<'_, str>`\n   --> $DIR/inefficient_to_string.rs:29:21\n    |\n LL |     let _: String = rrcow.to_string();\n    |                     ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*rrcow).to_string()`\n    |\n-   = help: `&std::borrow::Cow<str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<str>` has a fast specialization of `ToString`\n+   = help: `&std::borrow::Cow<'_, str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<'_, str>` has a fast specialization of `ToString`\n \n-error: calling `to_string` on `&&&std::borrow::Cow<str>`\n+error: calling `to_string` on `&&&std::borrow::Cow<'_, str>`\n   --> $DIR/inefficient_to_string.rs:30:21\n    |\n LL |     let _: String = rrrcow.to_string();\n    |                     ^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(**rrrcow).to_string()`\n    |\n-   = help: `&&std::borrow::Cow<str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<str>` has a fast specialization of `ToString`\n+   = help: `&&std::borrow::Cow<'_, str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<'_, str>` has a fast specialization of `ToString`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "ae1aec34d82e0b3ccb19e9d8a1050fb87c9336d4", "filename": "tests/ui/suspicious_to_owned.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de8a1dd7e1a52aa3be99cf22a39e4d6c63510644/tests%2Fui%2Fsuspicious_to_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de8a1dd7e1a52aa3be99cf22a39e4d6c63510644/tests%2Fui%2Fsuspicious_to_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_to_owned.stderr?ref=de8a1dd7e1a52aa3be99cf22a39e4d6c63510644", "patch": "@@ -1,24 +1,24 @@\n-error: this `to_owned` call clones the std::borrow::Cow<str> itself and does not cause the std::borrow::Cow<str> contents to become owned\n+error: this `to_owned` call clones the std::borrow::Cow<'_, str> itself and does not cause the std::borrow::Cow<'_, str> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:16:13\n    |\n LL |     let _ = cow.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n    |\n    = note: `-D clippy::suspicious-to-owned` implied by `-D warnings`\n \n-error: this `to_owned` call clones the std::borrow::Cow<[char; 3]> itself and does not cause the std::borrow::Cow<[char; 3]> contents to become owned\n+error: this `to_owned` call clones the std::borrow::Cow<'_, [char; 3]> itself and does not cause the std::borrow::Cow<'_, [char; 3]> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:26:13\n    |\n LL |     let _ = cow.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n \n-error: this `to_owned` call clones the std::borrow::Cow<std::vec::Vec<char>> itself and does not cause the std::borrow::Cow<std::vec::Vec<char>> contents to become owned\n+error: this `to_owned` call clones the std::borrow::Cow<'_, std::vec::Vec<char>> itself and does not cause the std::borrow::Cow<'_, std::vec::Vec<char>> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:36:13\n    |\n LL |     let _ = cow.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n \n-error: this `to_owned` call clones the std::borrow::Cow<str> itself and does not cause the std::borrow::Cow<str> contents to become owned\n+error: this `to_owned` call clones the std::borrow::Cow<'_, str> itself and does not cause the std::borrow::Cow<'_, str> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:46:13\n    |\n LL |     let _ = cow.to_owned();"}, {"sha": "10117ee9182ab97d97e9bb13e5cee991a399980f", "filename": "tests/ui/transmute_ptr_to_ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de8a1dd7e1a52aa3be99cf22a39e4d6c63510644/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de8a1dd7e1a52aa3be99cf22a39e4d6c63510644/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ref.stderr?ref=de8a1dd7e1a52aa3be99cf22a39e4d6c63510644", "patch": "@@ -42,13 +42,13 @@ error: transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n LL |     let _: &T = std::mem::transmute(om);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(om as *const T)`\n \n-error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<u8>`)\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<'_, u8>`)\n   --> $DIR/transmute_ptr_to_ref.rs:36:32\n    |\n LL |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*raw.cast::<Foo<_>>()`\n \n-error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<&u8>`)\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<'_, &u8>`)\n   --> $DIR/transmute_ptr_to_ref.rs:38:33\n    |\n LL |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };"}, {"sha": "65ee3807fa9d9b19456730995dec508d1661211c", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de8a1dd7e1a52aa3be99cf22a39e4d6c63510644/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de8a1dd7e1a52aa3be99cf22a39e4d6c63510644/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=de8a1dd7e1a52aa3be99cf22a39e4d6c63510644", "patch": "@@ -46,7 +46,7 @@ error: useless conversion to the same type: `std::string::String`\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n-error: useless conversion to the same type: `std::str::Lines`\n+error: useless conversion to the same type: `std::str::Lines<'_>`\n   --> $DIR/useless_conversion.rs:65:13\n    |\n LL |     let _ = \"\".lines().into_iter();"}]}