{"sha": "3413b3f5c51284d8f0090bde5da80652fa7366ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MTNiM2Y1YzUxMjg0ZDhmMDA5MGJkZTVkYTgwNjUyZmE3MzY2ZWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-07T22:37:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-07T22:37:58Z"}, "message": "tutorial: Expand the section on functions", "tree": {"sha": "a69bdfb74d711805e1a874b8da5ac1bc0fbc2b78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a69bdfb74d711805e1a874b8da5ac1bc0fbc2b78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3413b3f5c51284d8f0090bde5da80652fa7366ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3413b3f5c51284d8f0090bde5da80652fa7366ef", "html_url": "https://github.com/rust-lang/rust/commit/3413b3f5c51284d8f0090bde5da80652fa7366ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3413b3f5c51284d8f0090bde5da80652fa7366ef/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "205b483edd713b88b8fb23305fb81dc6d7b52ce5", "url": "https://api.github.com/repos/rust-lang/rust/commits/205b483edd713b88b8fb23305fb81dc6d7b52ce5", "html_url": "https://github.com/rust-lang/rust/commit/205b483edd713b88b8fb23305fb81dc6d7b52ce5"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "cce8fed220e01ad1f2f0c8f8ac95e6f84ac5f7c9", "filename": "doc/tutorial.md", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3413b3f5c51284d8f0090bde5da80652fa7366ef/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/3413b3f5c51284d8f0090bde5da80652fa7366ef/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=3413b3f5c51284d8f0090bde5da80652fa7366ef", "patch": "@@ -880,19 +880,57 @@ their arguments are also lazily evaluated.\n \n Like all other static declarations, such as `type`, functions can be\n declared both at the top level and inside other functions (or modules,\n-which we'll come back to in moment).\n+which we'll come back to [later](#modules-and-crates)).\n \n-The `ret` keyword immediately returns from a function. It is\n-optionally followed by an expression to return. In functions that\n-return `()`, the returned expression can be left off. A function can\n+We've already seen several function definitions. They are introduced\n+with the `fn` keyword. The type of arguments are specified following\n+colons and the return type follows the arrow.\n+\n+~~~~\n+fn int_to_str(i: int) -> str {\n+    ret \"tube sock\";\n+}\n+~~~~\n+\n+The `ret` keyword immediately returns from the body of a function. It\n+is optionally followed by an expression to return. A function can\n also return a value by having its top level block produce an\n-expression (by omitting the final semicolon).\n+expression.\n+\n+~~~~\n+# const copernicus: int = 0;\n+fn int_to_str(i: int) -> str {\n+    if i == copernicus {\n+        ret \"tube sock\";\n+    } else {\n+        ret \"violin\";\n+    }\n+}\n+~~~~\n+\n+~~~~\n+# const copernicus: int = 0;\n+fn int_to_str(i: int) -> str {\n+    if i == copernicus { \"tube sock\" }\n+    else { \"violin\" }\n+}\n+~~~~\n+\n+Functions that do not return a value are said to return nil, `()`,\n+and both the return type and the return value may be omitted from\n+the definition. The following two functions are equivalent.\n+\n+~~~~\n+fn do_nothing_the_hard_way() -> () { ret (); }\n+\n+fn do_nothing_the_easy_way() { }\n+~~~~\n \n Some functions (such as the C function `exit`) never return normally.\n In Rust, these are annotated with the pseudo-return type '`!`':\n \n ~~~~\n-fn dead_end() -> ! { fail; }\n+fn dead_end() -> ! { fail }\n ~~~~\n \n This helps the compiler avoid spurious error messages. For example,\n@@ -909,6 +947,8 @@ let dir = if can_go_left() { left }\n           else { dead_end(); };\n ~~~~\n \n+\n+\n # The Rust Memory Model\n \n At this junction let's take a detour to explain the concepts involved"}]}