{"sha": "bcebe9e7def08e987516fb59a46234acd7ef5d2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZWJlOWU3ZGVmMDhlOTg3NTE2ZmI1OWE0NjIzNGFjZDdlZjVkMmM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-28T10:10:05Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-29T02:28:48Z"}, "message": "Use different style when rewriting comment with different opener", "tree": {"sha": "1ac233b5274e1196e25f6c3c5296139bc1b5e17a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ac233b5274e1196e25f6c3c5296139bc1b5e17a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcebe9e7def08e987516fb59a46234acd7ef5d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcebe9e7def08e987516fb59a46234acd7ef5d2c", "html_url": "https://github.com/rust-lang/rust/commit/bcebe9e7def08e987516fb59a46234acd7ef5d2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcebe9e7def08e987516fb59a46234acd7ef5d2c/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72c04facd259a386a7a95c180674927ed2e72c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/72c04facd259a386a7a95c180674927ed2e72c22", "html_url": "https://github.com/rust-lang/rust/commit/72c04facd259a386a7a95c180674927ed2e72c22"}], "stats": {"total": 192, "additions": 165, "deletions": 27}, "files": [{"sha": "5b3ee179e2ed87a43bfa2775a58485d35c0d259e", "filename": "src/comment.rs", "status": "modified", "additions": 156, "deletions": 27, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/bcebe9e7def08e987516fb59a46234acd7ef5d2c/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcebe9e7def08e987516fb59a46234acd7ef5d2c/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=bcebe9e7def08e987516fb59a46234acd7ef5d2c", "patch": "@@ -32,6 +32,122 @@ fn is_custom_comment(comment: &str) -> bool {\n     }\n }\n \n+#[derive(PartialEq, Eq)]\n+pub enum CommentStyle {\n+    DoubleSlash,\n+    TripleSlash,\n+    Doc,\n+    SingleBullet,\n+    DoubleBullet,\n+    Exclamation,\n+    Custom,\n+}\n+\n+impl CommentStyle {\n+    pub fn opener<'a>(&self, orig: &'a str) -> &'a str {\n+        match *self {\n+            CommentStyle::DoubleSlash => \"// \",\n+            CommentStyle::TripleSlash => \"/// \",\n+            CommentStyle::Doc => \"//! \",\n+            CommentStyle::SingleBullet => \"/* \",\n+            CommentStyle::DoubleBullet => \"/** \",\n+            CommentStyle::Exclamation => \"/*! \",\n+            CommentStyle::Custom => {\n+                if orig.chars().nth(3) == Some(' ') {\n+                    &orig[0..4]\n+                } else {\n+                    &orig[0..3]\n+                }\n+            }\n+        }\n+    }\n+\n+    pub fn closer<'a>(&self) -> &'a str {\n+        match *self {\n+            CommentStyle::DoubleSlash |\n+            CommentStyle::TripleSlash |\n+            CommentStyle::Custom |\n+            CommentStyle::Doc => \"\",\n+            CommentStyle::DoubleBullet => \" **/\",\n+            CommentStyle::SingleBullet |\n+            CommentStyle::Exclamation => \" */\",\n+        }\n+    }\n+\n+    pub fn line_start<'a>(&self, orig: &'a str) -> &'a str {\n+        match *self {\n+            CommentStyle::DoubleSlash => \"// \",\n+            CommentStyle::TripleSlash => \"/// \",\n+            CommentStyle::Doc => \"//! \",\n+            CommentStyle::SingleBullet |\n+            CommentStyle::Exclamation => \" * \",\n+            CommentStyle::DoubleBullet => \" ** \",\n+            CommentStyle::Custom => {\n+                if orig.chars().nth(3) == Some(' ') {\n+                    &orig[0..4]\n+                } else {\n+                    &orig[0..3]\n+                }\n+            }\n+        }\n+    }\n+\n+    pub fn to_str_tuplet<'a>(&self, orig: &'a str) -> (&'a str, &'a str, &'a str) {\n+        (self.opener(orig), self.closer(), self.line_start(orig))\n+    }\n+\n+    pub fn line_with_same_comment_style<'a>(&self,\n+                                            line: &str,\n+                                            orig: &'a str,\n+                                            normalize_comments: bool)\n+                                            -> bool {\n+        match *self {\n+            CommentStyle::DoubleSlash |\n+            CommentStyle::TripleSlash |\n+            CommentStyle::Custom |\n+            CommentStyle::Doc => {\n+                line.trim_left()\n+                    .starts_with(self.line_start(orig).trim_left()) ||\n+                comment_style(line, normalize_comments) == *self\n+            }\n+            CommentStyle::DoubleBullet |\n+            CommentStyle::SingleBullet |\n+            CommentStyle::Exclamation => {\n+                line.trim_left().starts_with(self.closer().trim_left()) ||\n+                line.trim_left()\n+                    .starts_with(self.line_start(orig).trim_left()) ||\n+                comment_style(line, normalize_comments) == *self\n+            }\n+        }\n+    }\n+}\n+\n+fn comment_style(orig: &str, normalize_comments: bool) -> CommentStyle {\n+    if !normalize_comments {\n+        if orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\") {\n+            CommentStyle::DoubleBullet\n+        } else if orig.starts_with(\"/*!\") {\n+            CommentStyle::Exclamation\n+        } else if orig.starts_with(\"/*\") {\n+            CommentStyle::SingleBullet\n+        } else if orig.starts_with(\"///\") {\n+            CommentStyle::TripleSlash\n+        } else if orig.starts_with(\"//!\") {\n+            CommentStyle::Doc\n+        } else {\n+            CommentStyle::DoubleSlash\n+        }\n+    } else if orig.starts_with(\"///\") || (orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\")) {\n+        CommentStyle::TripleSlash\n+    } else if orig.starts_with(\"//!\") || orig.starts_with(\"/*!\") {\n+        CommentStyle::Doc\n+    } else if is_custom_comment(orig) {\n+        CommentStyle::Custom\n+    } else {\n+        CommentStyle::DoubleSlash\n+    }\n+}\n+\n pub fn rewrite_comment(orig: &str,\n                        block_style: bool,\n                        shape: Shape,\n@@ -47,39 +163,52 @@ pub fn rewrite_comment(orig: &str,\n     if num_bare_lines > 0 && !config.normalize_comments() {\n         return Some(orig.to_owned());\n     }\n-\n     if !config.normalize_comments() && !config.wrap_comments() {\n         return light_rewrite_comment(orig, shape.indent, config);\n     }\n \n+    identify_comment(orig, block_style, shape, config)\n+}\n+\n+fn identify_comment(orig: &str,\n+                    block_style: bool,\n+                    shape: Shape,\n+                    config: &Config)\n+                    -> Option<String> {\n+    let style = comment_style(orig, false);\n+    let first_group = orig.lines()\n+        .take_while(|l| style.line_with_same_comment_style(l, orig, false))\n+        .collect::<Vec<_>>()\n+        .join(\"\\n\");\n+    let rest = orig.lines()\n+        .skip(first_group.lines().count())\n+        .collect::<Vec<_>>()\n+        .join(\"\\n\");\n+\n+    let first_group_str = try_opt!(rewrite_comment_inner(&first_group, block_style, shape, config));\n+    if rest.is_empty() {\n+        Some(first_group_str)\n+    } else {\n+        identify_comment(&rest, block_style, shape, config).map(|rest_str| {\n+                                                                    format!(\"{}\\n{}{}\",\n+                                                                            first_group_str,\n+                                                                            shape\n+                                                                                .indent\n+                                                                                .to_string(config),\n+                                                                            rest_str)\n+                                                                })\n+    }\n+}\n+\n+fn rewrite_comment_inner(orig: &str,\n+                         block_style: bool,\n+                         shape: Shape,\n+                         config: &Config)\n+                         -> Option<String> {\n     let (opener, closer, line_start) = if block_style {\n-        (\"/* \", \" */\", \" * \")\n-    } else if !config.normalize_comments() {\n-        if orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\") {\n-            (\"/** \", \" **/\", \" ** \")\n-        } else if orig.starts_with(\"/*!\") {\n-            (\"/*! \", \" */\", \" * \")\n-        } else if orig.starts_with(\"/*\") {\n-            (\"/* \", \" */\", \" * \")\n-        } else if orig.starts_with(\"///\") {\n-            (\"/// \", \"\", \"/// \")\n-        } else if orig.starts_with(\"//!\") {\n-            (\"//! \", \"\", \"//! \")\n-        } else {\n-            (\"// \", \"\", \"// \")\n-        }\n-    } else if orig.starts_with(\"///\") || (orig.starts_with(\"/**\") && !orig.starts_with(\"/**/\")) {\n-        (\"/// \", \"\", \"/// \")\n-    } else if orig.starts_with(\"//!\") || orig.starts_with(\"/*!\") {\n-        (\"//! \", \"\", \"//! \")\n-    } else if is_custom_comment(orig) {\n-        if orig.chars().nth(3) == Some(' ') {\n-            (&orig[0..4], \"\", &orig[0..4])\n-        } else {\n-            (&orig[0..3], \"\", &orig[0..3])\n-        }\n+        CommentStyle::SingleBullet.to_str_tuplet(\"\")\n     } else {\n-        (\"// \", \"\", \"// \")\n+        comment_style(orig, config.normalize_comments()).to_str_tuplet(orig)\n     };\n \n     let max_chars = shape"}, {"sha": "7473d070eff219c953ec5b9b0b864114a4e41288", "filename": "tests/target/issue-691.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcebe9e7def08e987516fb59a46234acd7ef5d2c/tests%2Ftarget%2Fissue-691.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcebe9e7def08e987516fb59a46234acd7ef5d2c/tests%2Ftarget%2Fissue-691.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-691.rs?ref=bcebe9e7def08e987516fb59a46234acd7ef5d2c", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-normalize_comments: true\n+\n+//! `std` or `core` and simply link to this library. In case the target\n+//! platform has no hardware\n+//! support for some operation, software implementations provided by this\n+//! library will be used automagically.\n+// TODO: provide instructions to override default libm link and how to link to\n+// this library.\n+fn foo() {}"}]}