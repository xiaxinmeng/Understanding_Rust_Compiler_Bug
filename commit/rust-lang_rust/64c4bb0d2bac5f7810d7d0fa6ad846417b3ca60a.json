{"sha": "64c4bb0d2bac5f7810d7d0fa6ad846417b3ca60a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YzRiYjBkMmJhYzVmNzgxMGQ3ZDBmYTZhZDg0NjQxN2IzY2E2MGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-26T18:15:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-26T18:15:42Z"}, "message": "Auto merge of #5966 - 1c3t3a:1c3t3a-dev-5819-fix, r=Manishearth\n\nCorrects the float_equality_without_abs lint\n\nFixes an issue in the `float_equality_without_abs` lint. The lint suggestion was configured in a way that it lints the whole error and not just the subtraction part. In the current configuration the lint would suggest to change the expression in a wrong way, e.g.\n```rust\nlet _ = (a - b) < f32::EPSILON; // before\nlet _ = (a - b).abs(); // after\n```\nThis was dicovered by @flip1995. (See discussion of PR #5952).\n\nAlso the suggestion is now formatted via `utils::sugg`.\nchangelog: none", "tree": {"sha": "ef8d2c80f564b3f3123ee6e38da6ecd70f79d6f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef8d2c80f564b3f3123ee6e38da6ecd70f79d6f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64c4bb0d2bac5f7810d7d0fa6ad846417b3ca60a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64c4bb0d2bac5f7810d7d0fa6ad846417b3ca60a", "html_url": "https://github.com/rust-lang/rust/commit/64c4bb0d2bac5f7810d7d0fa6ad846417b3ca60a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64c4bb0d2bac5f7810d7d0fa6ad846417b3ca60a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "894581b872ef8f87074815454f25a262d4e699f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/894581b872ef8f87074815454f25a262d4e699f4", "html_url": "https://github.com/rust-lang/rust/commit/894581b872ef8f87074815454f25a262d4e699f4"}, {"sha": "2d853148d72d49956052cf1cdb5f3be18c85a9fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d853148d72d49956052cf1cdb5f3be18c85a9fc", "html_url": "https://github.com/rust-lang/rust/commit/2d853148d72d49956052cf1cdb5f3be18c85a9fc"}], "stats": {"total": 74, "additions": 47, "deletions": 27}, "files": [{"sha": "9ac5a45eb4590c6b65c9e8f29ee74647ebc2a896", "filename": "clippy_lints/src/float_equality_without_abs.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/64c4bb0d2bac5f7810d7d0fa6ad846417b3ca60a/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c4bb0d2bac5f7810d7d0fa6ad846417b3ca60a/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs?ref=64c4bb0d2bac5f7810d7d0fa6ad846417b3ca60a", "patch": "@@ -1,5 +1,6 @@\n-use crate::utils::{match_qpath, paths, snippet, span_lint_and_sugg};\n+use crate::utils::{match_qpath, paths, span_lint_and_then, sugg};\n use if_chain::if_chain;\n+use rustc_ast::util::parser::AssocOp;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -84,27 +85,24 @@ impl<'tcx> LateLintPass<'tcx> for FloatEqualityWithoutAbs {\n             if let ty::Float(_) = t_val_r.kind;\n \n             then {\n-                // get the snippet string\n-                let lhs_string = snippet(\n-                    cx,\n-                    lhs.span,\n-                    \"(...)\",\n-                );\n+                let sug_l = sugg::Sugg::hir(cx, &val_l, \"..\");\n+                let sug_r = sugg::Sugg::hir(cx, &val_r, \"..\");\n                 // format the suggestion\n-                let suggestion = if lhs_string.starts_with('(') {\n-                    format!(\"{}.abs()\", lhs_string)\n-                } else {\n-                    format!(\"({}).abs()\", lhs_string)\n-                };\n+                let suggestion = format!(\"{}.abs()\", sugg::make_assoc(AssocOp::Subtract, &sug_l, &sug_r).maybe_par());\n                 // spans the lint\n-                span_lint_and_sugg(\n+                span_lint_and_then(\n                     cx,\n                     FLOAT_EQUALITY_WITHOUT_ABS,\n                     expr.span,\n                     \"float equality check without `.abs()`\",\n-                    \"add `.abs()`\",\n-                    suggestion,\n-                    Applicability::MaybeIncorrect,\n+                    | diag | {\n+                        diag.span_suggestion(\n+                            lhs.span,\n+                            \"add `.abs()`\",\n+                            suggestion,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n                 );\n             }\n         }"}, {"sha": "b34c8159da04db8c2258f29d1214418d166e9676", "filename": "tests/ui/float_equality_without_abs.stderr", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/64c4bb0d2bac5f7810d7d0fa6ad846417b3ca60a/tests%2Fui%2Ffloat_equality_without_abs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64c4bb0d2bac5f7810d7d0fa6ad846417b3ca60a/tests%2Fui%2Ffloat_equality_without_abs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_equality_without_abs.stderr?ref=64c4bb0d2bac5f7810d7d0fa6ad846417b3ca60a", "patch": "@@ -2,69 +2,91 @@ error: float equality check without `.abs()`\n   --> $DIR/float_equality_without_abs.rs:4:5\n    |\n LL |     (a - b) < f32::EPSILON\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a - b).abs()`\n+   |     -------^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: add `.abs()`: `(a - b).abs()`\n    |\n    = note: `-D clippy::float-equality-without-abs` implied by `-D warnings`\n \n error: float equality check without `.abs()`\n   --> $DIR/float_equality_without_abs.rs:13:13\n    |\n LL |     let _ = (a - b) < f32::EPSILON;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a - b).abs()`\n+   |             -------^^^^^^^^^^^^^^^\n+   |             |\n+   |             help: add `.abs()`: `(a - b).abs()`\n \n error: float equality check without `.abs()`\n   --> $DIR/float_equality_without_abs.rs:14:13\n    |\n LL |     let _ = a - b < f32::EPSILON;\n-   |             ^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a - b).abs()`\n+   |             -----^^^^^^^^^^^^^^^\n+   |             |\n+   |             help: add `.abs()`: `(a - b).abs()`\n \n error: float equality check without `.abs()`\n   --> $DIR/float_equality_without_abs.rs:15:13\n    |\n LL |     let _ = a - b.abs() < f32::EPSILON;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a - b.abs()).abs()`\n+   |             -----------^^^^^^^^^^^^^^^\n+   |             |\n+   |             help: add `.abs()`: `(a - b.abs()).abs()`\n \n error: float equality check without `.abs()`\n   --> $DIR/float_equality_without_abs.rs:16:13\n    |\n LL |     let _ = (a as f64 - b as f64) < f64::EPSILON;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a as f64 - b as f64).abs()`\n+   |             ---------------------^^^^^^^^^^^^^^^\n+   |             |\n+   |             help: add `.abs()`: `(a as f64 - b as f64).abs()`\n \n error: float equality check without `.abs()`\n   --> $DIR/float_equality_without_abs.rs:17:13\n    |\n LL |     let _ = 1.0 - 2.0 < f32::EPSILON;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(1.0 - 2.0).abs()`\n+   |             ---------^^^^^^^^^^^^^^^\n+   |             |\n+   |             help: add `.abs()`: `(1.0 - 2.0).abs()`\n \n error: float equality check without `.abs()`\n   --> $DIR/float_equality_without_abs.rs:19:13\n    |\n LL |     let _ = f32::EPSILON > (a - b);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a - b).abs()`\n+   |             ^^^^^^^^^^^^^^^-------\n+   |                            |\n+   |                            help: add `.abs()`: `(a - b).abs()`\n \n error: float equality check without `.abs()`\n   --> $DIR/float_equality_without_abs.rs:20:13\n    |\n LL |     let _ = f32::EPSILON > a - b;\n-   |             ^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a - b).abs()`\n+   |             ^^^^^^^^^^^^^^^-----\n+   |                            |\n+   |                            help: add `.abs()`: `(a - b).abs()`\n \n error: float equality check without `.abs()`\n   --> $DIR/float_equality_without_abs.rs:21:13\n    |\n LL |     let _ = f32::EPSILON > a - b.abs();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a - b.abs()).abs()`\n+   |             ^^^^^^^^^^^^^^^-----------\n+   |                            |\n+   |                            help: add `.abs()`: `(a - b.abs()).abs()`\n \n error: float equality check without `.abs()`\n   --> $DIR/float_equality_without_abs.rs:22:13\n    |\n LL |     let _ = f64::EPSILON > (a as f64 - b as f64);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a as f64 - b as f64).abs()`\n+   |             ^^^^^^^^^^^^^^^---------------------\n+   |                            |\n+   |                            help: add `.abs()`: `(a as f64 - b as f64).abs()`\n \n error: float equality check without `.abs()`\n   --> $DIR/float_equality_without_abs.rs:23:13\n    |\n LL |     let _ = f32::EPSILON > 1.0 - 2.0;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(1.0 - 2.0).abs()`\n+   |             ^^^^^^^^^^^^^^^---------\n+   |                            |\n+   |                            help: add `.abs()`: `(1.0 - 2.0).abs()`\n \n error: aborting due to 11 previous errors\n "}]}