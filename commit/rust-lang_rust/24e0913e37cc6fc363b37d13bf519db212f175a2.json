{"sha": "24e0913e37cc6fc363b37d13bf519db212f175a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZTA5MTNlMzdjYzZmYzM2M2IzN2QxM2JmNTE5ZGIyMTJmMTc1YTI=", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2020-08-20T22:59:52Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2020-08-30T18:58:03Z"}, "message": "handle vector layout", "tree": {"sha": "822e4cafc7346bc9497c1b2025195a48590107bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/822e4cafc7346bc9497c1b2025195a48590107bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24e0913e37cc6fc363b37d13bf519db212f175a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24e0913e37cc6fc363b37d13bf519db212f175a2", "html_url": "https://github.com/rust-lang/rust/commit/24e0913e37cc6fc363b37d13bf519db212f175a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24e0913e37cc6fc363b37d13bf519db212f175a2/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fc1d8bc13124bb134d7ab54e56237821a55912e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fc1d8bc13124bb134d7ab54e56237821a55912e", "html_url": "https://github.com/rust-lang/rust/commit/6fc1d8bc13124bb134d7ab54e56237821a55912e"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "799f3b3a5757026768f18faeb10b8c86f87be077", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/24e0913e37cc6fc363b37d13bf519db212f175a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e0913e37cc6fc363b37d13bf519db212f175a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=24e0913e37cc6fc363b37d13bf519db212f175a2", "patch": "@@ -96,7 +96,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n             let llval = match self.layout.abi {\n                 _ if offset.bytes() == 0 => {\n                     // Unions and newtypes only use an offset of 0.\n-                    // Also handles the first field of Scalar and ScalarPair layouts.\n+                    // Also handles the first field of Scalar, ScalarPair, and Vector layouts.\n                     self.llval\n                 }\n                 Abi::ScalarPair(ref a, ref b)\n@@ -105,16 +105,20 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                     // Offset matches second field.\n                     bx.struct_gep(self.llval, 1)\n                 }\n-                Abi::ScalarPair(..) | Abi::Scalar(_) => {\n-                    // ZST fields are not included in Scalar and ScalarPair layouts, so manually offset the pointer.\n-                    assert!(\n-                        field.is_zst(),\n-                        \"non-ZST field offset does not match layout: {:?}\",\n-                        field\n-                    );\n+                Abi::Scalar(_) | Abi::ScalarPair(..) | Abi::Vector { .. } if field.is_zst() => {\n+                    // ZST fields are not included in Scalar, ScalarPair, and Vector layouts, so manually offset the pointer.\n                     let byte_ptr = bx.pointercast(self.llval, bx.cx().type_i8p());\n                     bx.gep(byte_ptr, &[bx.const_usize(offset.bytes())])\n                 }\n+                Abi::Scalar(_) | Abi::ScalarPair(..) => {\n+                    // All fields of Scalar and ScalarPair layouts must have been handled by this point.\n+                    // Vector layouts have additional fields for each element of the vector, so don't panic in that case.\n+                    bug!(\n+                        \"offset of non-ZST field `{:?}` does not match layout `{:#?}`\",\n+                        field,\n+                        self.layout\n+                    );\n+                }\n                 _ => bx.struct_gep(self.llval, bx.cx().backend_field_index(self.layout, ix)),\n             };\n             PlaceRef {"}, {"sha": "0c015fca3253a6e7f66840fc6bde27bf272b64f7", "filename": "src/test/codegen/zst-offset.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/24e0913e37cc6fc363b37d13bf519db212f175a2/src%2Ftest%2Fcodegen%2Fzst-offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24e0913e37cc6fc363b37d13bf519db212f175a2/src%2Ftest%2Fcodegen%2Fzst-offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fzst-offset.rs?ref=24e0913e37cc6fc363b37d13bf519db212f175a2", "patch": "@@ -1,6 +1,7 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n+#![feature(repr_simd)]\n \n // Hack to get the correct size for the length part in slices\n // CHECK: @helper([[USIZE:i[0-9]+]] %_1)\n@@ -27,3 +28,16 @@ pub fn scalarpair_layout(s: &(u64, u32, ())) {\n     let x = &s.2;\n     &x; // keep variable in an alloca\n }\n+\n+#[repr(simd)]\n+pub struct U64x4(u64, u64, u64, u64);\n+\n+// Check that we correctly generate a GEP for a ZST that is not included in Vector layout\n+// CHECK-LABEL: @vector_layout\n+#[no_mangle]\n+pub fn vector_layout(s: &(U64x4, ())) {\n+// CHECK: [[X0:%[0-9]+]] = bitcast <4 x i64>* %s to i8*\n+// CHECK-NEXT: [[X1:%[0-9]+]] = getelementptr i8, i8* [[X0]], [[USIZE]] 32\n+    let x = &s.1;\n+    &x; // keep variable in an alloca\n+}"}]}