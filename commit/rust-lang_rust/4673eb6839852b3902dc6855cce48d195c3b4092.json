{"sha": "4673eb6839852b3902dc6855cce48d195c3b4092", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NzNlYjY4Mzk4NTJiMzkwMmRjNjg1NWNjZTQ4ZDE5NWMzYjQwOTI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-16T18:04:59Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-16T18:16:03Z"}, "message": "rustc: Fix LLVM type error when generating cmp glue for interior vectors", "tree": {"sha": "f74d9a7f5c905db3e35cd6cc0c57c24a4c2e2c56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f74d9a7f5c905db3e35cd6cc0c57c24a4c2e2c56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4673eb6839852b3902dc6855cce48d195c3b4092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4673eb6839852b3902dc6855cce48d195c3b4092", "html_url": "https://github.com/rust-lang/rust/commit/4673eb6839852b3902dc6855cce48d195c3b4092", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4673eb6839852b3902dc6855cce48d195c3b4092/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "741e77174c89723b05eb3dd79c3c47b2d0cd24d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/741e77174c89723b05eb3dd79c3c47b2d0cd24d8", "html_url": "https://github.com/rust-lang/rust/commit/741e77174c89723b05eb3dd79c3c47b2d0cd24d8"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "a83469e73bcf45fb3377bf0ba5bb97076e893cf8", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4673eb6839852b3902dc6855cce48d195c3b4092/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4673eb6839852b3902dc6855cce48d195c3b4092/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4673eb6839852b3902dc6855cce48d195c3b4092", "patch": "@@ -2164,10 +2164,26 @@ fn make_cmp_glue(&@block_ctxt cx, ValueRef lhs0, ValueRef rhs0, &ty::t t,\n             // If we hit == all the way through the minimum-shared-length\n             // section, default to judging the relative sequence lengths.\n \n-            r =\n-                compare_numerical_values(scx, vec_fill(scx, lhs),\n-                                         vec_fill(scx, rhs), unsigned_int,\n-                                         llop);\n+            auto lhs_fill;\n+            auto rhs_fill;\n+            auto bcx;\n+            if (ty::sequence_is_interior(cx.fcx.lcx.ccx.tcx, t)) {\n+                auto lad = ivec::get_len_and_data(scx, lhs,\n+                        ty::sequence_element_type(cx.fcx.lcx.ccx.tcx, t));\n+                bcx = lad._2;\n+                lhs_fill = lad._0;\n+                lad = ivec::get_len_and_data(bcx, rhs,\n+                        ty::sequence_element_type(cx.fcx.lcx.ccx.tcx, t));\n+                bcx = lad._2;\n+                rhs_fill = lad._0;\n+            } else {\n+                lhs_fill = vec_fill(scx, lhs);\n+                rhs_fill = vec_fill(scx, rhs);\n+                bcx = scx;\n+            }\n+\n+            r = compare_numerical_values(bcx, lhs_fill, rhs_fill,\n+                                         unsigned_int, llop);\n             r.bcx.build.Store(r.val, flag);\n         } else {\n             // == and <= default to true if they find == all the way. <"}]}