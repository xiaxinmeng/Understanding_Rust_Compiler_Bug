{"sha": "f3aaae65553550cc9b7101a844ecbc3d426a1bef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYWFhZTY1NTUzNTUwY2M5YjcxMDFhODQ0ZWNiYzNkNDI2YTFiZWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-26T15:36:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-26T15:36:14Z"}, "message": "Merge #9007\n\n9007: Internal: `clippy::redundant_clone` fixes r=lnicola a=lnicola\n\nbors r+\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "87a5fcbaa5c3a8851425b15689f95328213c6cd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87a5fcbaa5c3a8851425b15689f95328213c6cd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3aaae65553550cc9b7101a844ecbc3d426a1bef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrmruCRBK7hj4Ov3rIwAAoo4IAE/V1duR/k2BiGFAABsj/Q3t\nf81xMEwGpvsC/rG0Xjatpa32PZrmGYHYQOOi4y6RLxSgXvu7kP6cJD+Y2Yjitr1P\nGic7tDLWbfbSJjh9pd/wj/IY7nwPo4BQ0mtKdVrs/+LXYn/ewns5eXkWSW0hjNKR\ndRRLRfxsagKvoo3QoCmjJZhEa/GJEGHU9SJWQFxRB/4v18dkr/Wslhk6CAsFTTta\n8xCaVTTjtWN0hvqEVLVPPzD/ezdl4BHDp/0iy1ydxsTKZRVdGtX/1uZ4lJJ6Rn8A\nYE7J5auc/93GG6UPy1W2iwrxqyBlJLMaJBzkL8NMgoPIOi/1s36kTgfk/d9phfQ=\n=PydP\n-----END PGP SIGNATURE-----\n", "payload": "tree 87a5fcbaa5c3a8851425b15689f95328213c6cd1\nparent 5a1fd05760260be9a91f6fad2fd6463edffbcb13\nparent 8206939fed0e2307455d46620ee114f74ab35d7f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622043374 +0000\ncommitter GitHub <noreply@github.com> 1622043374 +0000\n\nMerge #9007\n\n9007: Internal: `clippy::redundant_clone` fixes r=lnicola a=lnicola\n\nbors r+\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3aaae65553550cc9b7101a844ecbc3d426a1bef", "html_url": "https://github.com/rust-lang/rust/commit/f3aaae65553550cc9b7101a844ecbc3d426a1bef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3aaae65553550cc9b7101a844ecbc3d426a1bef/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a1fd05760260be9a91f6fad2fd6463edffbcb13", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a1fd05760260be9a91f6fad2fd6463edffbcb13", "html_url": "https://github.com/rust-lang/rust/commit/5a1fd05760260be9a91f6fad2fd6463edffbcb13"}, {"sha": "8206939fed0e2307455d46620ee114f74ab35d7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8206939fed0e2307455d46620ee114f74ab35d7f", "html_url": "https://github.com/rust-lang/rust/commit/8206939fed0e2307455d46620ee114f74ab35d7f"}], "stats": {"total": 49, "additions": 22, "deletions": 27}, "files": [{"sha": "1464320ba2d20aa18a8e0fcd4f535680f5943a12", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3aaae65553550cc9b7101a844ecbc3d426a1bef/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3aaae65553550cc9b7101a844ecbc3d426a1bef/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=f3aaae65553550cc9b7101a844ecbc3d426a1bef", "patch": "@@ -197,7 +197,7 @@ fn eager_macro_recur(\n     macro_resolver: &dyn Fn(ast::Path) -> Option<MacroDefId>,\n     mut diagnostic_sink: &mut dyn FnMut(mbe::ExpandError),\n ) -> Result<SyntaxNode, ErrorEmitted> {\n-    let original = curr.value.clone().clone_for_update();\n+    let original = curr.value.clone_for_update();\n \n     let children = original.descendants().filter_map(ast::MacroCall::cast);\n     let mut replacements = Vec::new();"}, {"sha": "03b97e7db5d643ef5764178603145dccf8954524", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f3aaae65553550cc9b7101a844ecbc3d426a1bef/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3aaae65553550cc9b7101a844ecbc3d426a1bef/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=f3aaae65553550cc9b7101a844ecbc3d426a1bef", "patch": "@@ -76,17 +76,17 @@ impl<'a> InferenceContext<'a> {\n         // way around first would mean we make the type variable `!`, instead of\n         // just marking it as possibly diverging.\n         if self.coerce(&ty2, &ty1) {\n-            ty1.clone()\n+            ty1\n         } else if self.coerce(&ty1, &ty2) {\n-            ty2.clone()\n+            ty2\n         } else {\n             if let Some(id) = id {\n                 self.result\n                     .type_mismatches\n-                    .insert(id.into(), TypeMismatch { expected: ty1.clone(), actual: ty2.clone() });\n+                    .insert(id.into(), TypeMismatch { expected: ty1.clone(), actual: ty2 });\n             }\n             cov_mark::hit!(coerce_merge_fail_fallback);\n-            ty1.clone()\n+            ty1\n         }\n     }\n \n@@ -183,7 +183,7 @@ impl<'a> InferenceContext<'a> {\n         // details of coercion errors though, so I think it's useful to leave\n         // the structure like it is.\n \n-        let canonicalized = self.canonicalize(from_ty.clone());\n+        let canonicalized = self.canonicalize(from_ty);\n         let autoderef = autoderef::autoderef(\n             self.db,\n             self.resolver.krate(),\n@@ -389,7 +389,7 @@ impl<'a> InferenceContext<'a> {\n                 // The CoerceUnsized trait should have two generic params: Self and T.\n                 return Err(TypeError);\n             }\n-            b.push(coerce_from.clone()).push(to_ty.clone()).build()\n+            b.push(coerce_from).push(to_ty.clone()).build()\n         };\n \n         let goal: InEnvironment<DomainGoal> ="}, {"sha": "97507305c23ca86fed187c1330d5ea6956592f21", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f3aaae65553550cc9b7101a844ecbc3d426a1bef/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3aaae65553550cc9b7101a844ecbc3d426a1bef/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=f3aaae65553550cc9b7101a844ecbc3d426a1bef", "patch": "@@ -44,7 +44,7 @@ impl<'a> InferenceContext<'a> {\n             if !could_unify {\n                 self.result.type_mismatches.insert(\n                     tgt_expr.into(),\n-                    TypeMismatch { expected: expected_ty.clone(), actual: ty.clone() },\n+                    TypeMismatch { expected: expected_ty, actual: ty.clone() },\n                 );\n             }\n         }\n@@ -57,15 +57,14 @@ impl<'a> InferenceContext<'a> {\n         let ty = self.infer_expr_inner(expr, &expected);\n         let ty = if let Some(target) = expected.only_has_type(&mut self.table) {\n             if !self.coerce(&ty, &target) {\n-                self.result.type_mismatches.insert(\n-                    expr.into(),\n-                    TypeMismatch { expected: target.clone(), actual: ty.clone() },\n-                );\n+                self.result\n+                    .type_mismatches\n+                    .insert(expr.into(), TypeMismatch { expected: target, actual: ty.clone() });\n                 // Return actual type when type mismatch.\n                 // This is needed for diagnostic when return type mismatch.\n                 ty\n             } else {\n-                target.clone()\n+                target\n             }\n         } else {\n             ty"}, {"sha": "83e0a7a9e957d1e2720d033a8e162c8847838500", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3aaae65553550cc9b7101a844ecbc3d426a1bef/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3aaae65553550cc9b7101a844ecbc3d426a1bef/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=f3aaae65553550cc9b7101a844ecbc3d426a1bef", "patch": "@@ -196,7 +196,7 @@ impl<'a> InferenceContext<'a> {\n                 let inner_ty = if let Some(subpat) = subpat {\n                     self.infer_pat(*subpat, &expected, default_bm)\n                 } else {\n-                    expected.clone()\n+                    expected\n                 };\n                 let inner_ty = self.insert_type_vars_shallow(inner_ty);\n \n@@ -266,10 +266,9 @@ impl<'a> InferenceContext<'a> {\n         // use a new type variable if we got error type here\n         let ty = self.insert_type_vars_shallow(ty);\n         if !self.unify(&ty, &expected) {\n-            self.result.type_mismatches.insert(\n-                pat.into(),\n-                TypeMismatch { expected: expected.clone(), actual: ty.clone() },\n-            );\n+            self.result\n+                .type_mismatches\n+                .insert(pat.into(), TypeMismatch { expected: expected, actual: ty.clone() });\n         }\n         self.write_pat_ty(pat, ty.clone());\n         ty"}, {"sha": "6da880b52d9249bb1f10230a277d737c2bc6589f", "filename": "crates/ide_assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3aaae65553550cc9b7101a844ecbc3d426a1bef/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3aaae65553550cc9b7101a844ecbc3d426a1bef/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=f3aaae65553550cc9b7101a844ecbc3d426a1bef", "patch": "@@ -55,7 +55,7 @@ pub(crate) fn expand_glob_import(acc: &mut Assists, ctx: &AssistContext) -> Opti\n     let refs_in_target = find_refs_in_mod(ctx, target_module, Some(current_module))?;\n     let imported_defs = find_imported_defs(ctx, star)?;\n \n-    let target = parent.clone().either(|n| n.syntax().clone(), |n| n.syntax().clone());\n+    let target = parent.either(|n| n.syntax().clone(), |n| n.syntax().clone());\n     acc.add(\n         AssistId(\"expand_glob_import\", AssistKind::RefactorRewrite),\n         \"Expand glob import\","}, {"sha": "33a4f81686f3af2228af166d87233e9d9aeba889", "filename": "crates/project_model/src/build_data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3aaae65553550cc9b7101a844ecbc3d426a1bef/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3aaae65553550cc9b7101a844ecbc3d426a1bef/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs?ref=f3aaae65553550cc9b7101a844ecbc3d426a1bef", "patch": "@@ -214,7 +214,7 @@ impl WorkspaceBuildData {\n                             acc\n                         };\n                         let package_build_data =\n-                            res.per_package.entry(package_id.repr.clone()).or_default();\n+                            res.per_package.entry(package_id.repr).or_default();\n                         // cargo_metadata crate returns default (empty) path for\n                         // older cargos, which is not absolute, so work around that.\n                         if !out_dir.as_str().is_empty() {\n@@ -237,13 +237,13 @@ impl WorkspaceBuildData {\n                             {\n                                 let filename = AbsPathBuf::assert(PathBuf::from(&filename));\n                                 let package_build_data =\n-                                    res.per_package.entry(package_id.repr.clone()).or_default();\n+                                    res.per_package.entry(package_id.repr).or_default();\n                                 package_build_data.proc_macro_dylib_path = Some(filename);\n                             }\n                         }\n                     }\n                     Message::CompilerMessage(message) => {\n-                        progress(message.target.name.clone());\n+                        progress(message.target.name);\n                     }\n                     Message::BuildFinished(_) => {}\n                     Message::TextLine(_) => {}"}, {"sha": "b8ad083640c9f41bb4fb9d4442a1b8c4f98329fc", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f3aaae65553550cc9b7101a844ecbc3d426a1bef/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3aaae65553550cc9b7101a844ecbc3d426a1bef/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=f3aaae65553550cc9b7101a844ecbc3d426a1bef", "patch": "@@ -346,11 +346,8 @@ impl CargoWorkspace {\n \n         let workspace_root =\n             AbsPathBuf::assert(PathBuf::from(meta.workspace_root.into_os_string()));\n-        let build_data_config = BuildDataConfig::new(\n-            cargo_toml.to_path_buf(),\n-            config.clone(),\n-            Arc::new(meta.packages.clone()),\n-        );\n+        let build_data_config =\n+            BuildDataConfig::new(cargo_toml.to_path_buf(), config.clone(), Arc::new(meta.packages));\n \n         Ok(CargoWorkspace { packages, targets, workspace_root, build_data_config })\n     }"}]}