{"sha": "9c1783a3a0bff2bdc4992769d2bb2f12bc728477", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMTc4M2EzYTBiZmYyYmRjNDk5Mjc2OWQyYmIyZjEyYmM3Mjg0Nzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-07T12:46:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-07T12:46:57Z"}, "message": "Auto merge of #34658 - luqmana:34592-nested_returns, r=eddyb\n\nJust pass in NodeId to FunctionContext::new instead of looking it up.\n\nFixes #34592.", "tree": {"sha": "b3bbb0e26d8f0ca180c209627be2f43aa4722c25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3bbb0e26d8f0ca180c209627be2f43aa4722c25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c1783a3a0bff2bdc4992769d2bb2f12bc728477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1783a3a0bff2bdc4992769d2bb2f12bc728477", "html_url": "https://github.com/rust-lang/rust/commit/9c1783a3a0bff2bdc4992769d2bb2f12bc728477", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c1783a3a0bff2bdc4992769d2bb2f12bc728477/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7f5d8a2ef56dca21ff4df3f88fa0436e32de643", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f5d8a2ef56dca21ff4df3f88fa0436e32de643", "html_url": "https://github.com/rust-lang/rust/commit/a7f5d8a2ef56dca21ff4df3f88fa0436e32de643"}, {"sha": "fd3b4646cc505dad8ecf97fe0bb541b058a981ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3b4646cc505dad8ecf97fe0bb541b058a981ce", "html_url": "https://github.com/rust-lang/rust/commit/fd3b4646cc505dad8ecf97fe0bb541b058a981ce"}], "stats": {"total": 64, "additions": 54, "deletions": 10}, "files": [{"sha": "590220f0c8b6478c172254f830e950fcf7804f31", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9c1783a3a0bff2bdc4992769d2bb2f12bc728477/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1783a3a0bff2bdc4992769d2bb2f12bc728477/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=9c1783a3a0bff2bdc4992769d2bb2f12bc728477", "patch": "@@ -75,7 +75,6 @@ use debuginfo::{self, DebugLoc, ToDebugLoc};\n use declare;\n use expr;\n use glue;\n-use inline;\n use machine;\n use machine::{llalign_of_min, llsize_of, llsize_of_real};\n use meth;\n@@ -1407,19 +1406,17 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n     pub fn new(ccx: &'blk CrateContext<'blk, 'tcx>,\n                llfndecl: ValueRef,\n                fn_ty: FnType,\n-               definition: Option<(Instance<'tcx>, &ty::FnSig<'tcx>, Abi)>,\n+               definition: Option<(Instance<'tcx>, &ty::FnSig<'tcx>, Abi, ast::NodeId)>,\n                block_arena: &'blk TypedArena<common::BlockS<'blk, 'tcx>>)\n                -> FunctionContext<'blk, 'tcx> {\n-        let (param_substs, def_id) = match definition {\n-            Some((instance, _, _)) => {\n+        let (param_substs, def_id, inlined_id) = match definition {\n+            Some((instance, _, _, inlined_id)) => {\n                 common::validate_substs(instance.substs);\n-                (instance.substs, Some(instance.def))\n+                (instance.substs, Some(instance.def), Some(inlined_id))\n             }\n-            None => (ccx.tcx().mk_substs(Substs::empty()), None)\n+            None => (ccx.tcx().mk_substs(Substs::empty()), None, None)\n         };\n \n-        let inlined_did = def_id.and_then(|def_id| inline::get_local_instance(ccx, def_id));\n-        let inlined_id = inlined_did.and_then(|id| ccx.tcx().map.as_local_node_id(id));\n         let local_id = def_id.and_then(|id| ccx.tcx().map.as_local_node_id(id));\n \n         debug!(\"FunctionContext::new({})\",\n@@ -1454,7 +1451,7 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n         };\n \n         let debug_context = if let (false, Some(definition)) = (no_debug, definition) {\n-            let (instance, sig, abi) = definition;\n+            let (instance, sig, abi, _) = definition;\n             debuginfo::create_function_debug_context(ccx, instance, sig, abi, llfndecl)\n         } else {\n             debuginfo::empty_function_debug_context(ccx)\n@@ -1850,7 +1847,11 @@ pub fn trans_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     let (arena, fcx): (TypedArena<_>, FunctionContext);\n     arena = TypedArena::new();\n-    fcx = FunctionContext::new(ccx, llfndecl, fn_ty, Some((instance, sig, abi)), &arena);\n+    fcx = FunctionContext::new(ccx,\n+                               llfndecl,\n+                               fn_ty,\n+                               Some((instance, sig, abi, inlined_id)),\n+                               &arena);\n \n     if fcx.mir.is_some() {\n         return mir::trans_mir(&fcx);"}, {"sha": "48fb05f7779d230f320c11ecc7ac35747fac6790", "filename": "src/test/run-pass/auxiliary/xcrate_generic_fn_nested_return.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c1783a3a0bff2bdc4992769d2bb2f12bc728477/src%2Ftest%2Frun-pass%2Fauxiliary%2Fxcrate_generic_fn_nested_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1783a3a0bff2bdc4992769d2bb2f12bc728477/src%2Ftest%2Frun-pass%2Fauxiliary%2Fxcrate_generic_fn_nested_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fxcrate_generic_fn_nested_return.rs?ref=9c1783a3a0bff2bdc4992769d2bb2f12bc728477", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Request {\n+    pub id: String,\n+    pub arg: String,\n+}\n+\n+pub fn decode<T>() -> Result<Request, ()> {\n+    (|| {\n+        Ok(Request {\n+            id: \"hi\".to_owned(),\n+            arg: match Err(()) {\n+                Ok(v) => v,\n+                Err(e) => return Err(e)\n+            },\n+        })\n+    })()\n+}"}, {"sha": "181c91686823da032d05db3d986b408badb6bcb2", "filename": "src/test/run-pass/xcrate_generic_fn_nested_return.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9c1783a3a0bff2bdc4992769d2bb2f12bc728477/src%2Ftest%2Frun-pass%2Fxcrate_generic_fn_nested_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1783a3a0bff2bdc4992769d2bb2f12bc728477/src%2Ftest%2Frun-pass%2Fxcrate_generic_fn_nested_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxcrate_generic_fn_nested_return.rs?ref=9c1783a3a0bff2bdc4992769d2bb2f12bc728477", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:xcrate_generic_fn_nested_return.rs\n+\n+extern crate xcrate_generic_fn_nested_return as test;\n+\n+pub fn main() {\n+    assert!(test::decode::<()>().is_err());\n+}"}]}