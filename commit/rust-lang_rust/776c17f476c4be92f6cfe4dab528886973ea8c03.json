{"sha": "776c17f476c4be92f6cfe4dab528886973ea8c03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NmMxN2Y0NzZjNGJlOTJmNmNmZTRkYWI1Mjg4ODY5NzNlYThjMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-17T21:16:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-17T21:16:10Z"}, "message": "auto merge of #16554 : jakub-/rust/struct-pat-fields-ty-err, r=pcwalton\n\nFixes #16338.\r\nFixed #16401.", "tree": {"sha": "6d8c929d3eb1753cd3b920aacfbecc1e23dff3f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d8c929d3eb1753cd3b920aacfbecc1e23dff3f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/776c17f476c4be92f6cfe4dab528886973ea8c03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/776c17f476c4be92f6cfe4dab528886973ea8c03", "html_url": "https://github.com/rust-lang/rust/commit/776c17f476c4be92f6cfe4dab528886973ea8c03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/776c17f476c4be92f6cfe4dab528886973ea8c03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f57c8988dfd2eba8fb751fe72dde503a6ebf2c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f57c8988dfd2eba8fb751fe72dde503a6ebf2c6", "html_url": "https://github.com/rust-lang/rust/commit/3f57c8988dfd2eba8fb751fe72dde503a6ebf2c6"}, {"sha": "9b0f89d342de06b035c108186f0243a3bdc7528b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0f89d342de06b035c108186f0243a3bdc7528b", "html_url": "https://github.com/rust-lang/rust/commit/9b0f89d342de06b035c108186f0243a3bdc7528b"}], "stats": {"total": 56, "additions": 43, "deletions": 13}, "files": [{"sha": "ff49aa8a40b0387fc37fa1870644e3e42f1d6b29", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/776c17f476c4be92f6cfe4dab528886973ea8c03/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776c17f476c4be92f6cfe4dab528886973ea8c03/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=776c17f476c4be92f6cfe4dab528886973ea8c03", "patch": "@@ -355,8 +355,7 @@ pub fn check_struct_pat_fields(pcx: &pat_ctxt,\n     }\n }\n \n-pub fn check_struct_pat(pcx: &pat_ctxt, _pat_id: ast::NodeId, span: Span,\n-                        _expected: ty::t, _path: &ast::Path,\n+pub fn check_struct_pat(pcx: &pat_ctxt, span: Span,\n                         fields: &[ast::FieldPat], etc: bool,\n                         struct_id: ast::DefId,\n                         substitutions: &subst::Substs) {\n@@ -529,8 +528,7 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                     },\n                 }\n \n-                check_struct_pat(pcx, pat.id, pat.span, expected, path,\n-                                 fields.as_slice(), etc, cid, substs);\n+                check_struct_pat(pcx, pat.span, fields.as_slice(), etc, cid, substs);\n             }\n             ty::ty_enum(eid, ref substs) => {\n                 check_struct_like_enum_variant_pat(pcx,\n@@ -557,15 +555,11 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                             None);\n                 match tcx.def_map.borrow().find(&pat.id) {\n                     Some(def) => {\n-                         check_struct_pat(pcx,\n-                                          pat.id,\n-                                          pat.span,\n-                                          ty::mk_err(),\n-                                          path,\n-                                          fields.as_slice(),\n-                                          etc,\n-                                          def.def_id(),\n-                                          &subst::Substs::empty());\n+                        let item_type = ty::lookup_item_type(tcx, def.def_id());\n+                        let substitutions = fcx.infcx().fresh_substs_for_type(\n+                            pat.span, &item_type.generics);\n+                        check_struct_pat(pcx, pat.span, fields.as_slice(),\n+                                         etc, def.def_id(), &substitutions);\n                     }\n                     None => {\n                         tcx.sess.span_bug(pat.span,"}, {"sha": "db0a0487687a8623463848bbfaa0bfb8816ccb98", "filename": "src/test/compile-fail/issue-16338.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/776c17f476c4be92f6cfe4dab528886973ea8c03/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776c17f476c4be92f6cfe4dab528886973ea8c03/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs?ref=776c17f476c4be92f6cfe4dab528886973ea8c03", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::raw::Slice;\n+\n+fn main() {\n+    let Slice { data: data, len: len } = \"foo\";\n+    //~^ ERROR mismatched types: expected `&'static str` but found a structure pattern\n+}\n+"}, {"sha": "79a824bbf69215872dabfcae9b990a1b22403af7", "filename": "src/test/compile-fail/issue-16401.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/776c17f476c4be92f6cfe4dab528886973ea8c03/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/776c17f476c4be92f6cfe4dab528886973ea8c03/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs?ref=776c17f476c4be92f6cfe4dab528886973ea8c03", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::raw::Slice;\n+\n+fn main() {\n+    match () {\n+        Slice { data: data, len: len } => (),\n+        //~^ ERROR mismatched types: expected `()` but found a structure pattern\n+        _ => unreachable!()\n+    }\n+}"}]}