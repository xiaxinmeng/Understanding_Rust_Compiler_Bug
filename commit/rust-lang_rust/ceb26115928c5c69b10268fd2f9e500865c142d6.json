{"sha": "ceb26115928c5c69b10268fd2f9e500865c142d6", "node_id": "C_kwDOAAsO6NoAKGNlYjI2MTE1OTI4YzVjNjliMTAyNjhmZDJmOWU1MDA4NjVjMTQyZDY", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2023-04-10T04:26:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-10T04:26:40Z"}, "message": "Remove formats `[T; N]` does not impl (rust-lang/portable-simd#337)\n\nRemove these extra formatting traits, as they are\r\ninconsistent with how arrays and slices format,\r\nand it can cause unnecessary code bloat in binaries.\r\nWe can revisit this if people ever agree on doing these\r\nformatters for the other slice-y types.\r\n\r\nPrefer to dispatch to the `impl `fmt::Debug for [T]`,\r\nto reduce the chances of monomorphizing twice.\r\nInlining it seems like a good idea for similar reasons?", "tree": {"sha": "4dfbff3baa418942cf620eb6faf1b1a69ee5f9c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dfbff3baa418942cf620eb6faf1b1a69ee5f9c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceb26115928c5c69b10268fd2f9e500865c142d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkM5AACRBK7hj4Ov3rIwAACx0IAJFdemn91NLqN+6i/yga//sX\njziINFgnVb+T6mUMU2kO+zMJMDPwli5Q3PY+7JNx6MwIiM27YQsJbzCqrzoykmQs\n9xRvgspDR/W4tHWdgQW6dqAqdcLWhBq194u7gvQE+fh1G67rjNu4Ga4srGd1y/pZ\n+8tydS3x/tm18L0WMeWP71HmyMeDmtCh6Hh4jD6PZkSbbGKA6SXgeDPcN6hJbWXc\nly5N31hNzwWvrn14AFFrHEmcjEJrczaaklrTa94AACprpr73JVyNU88quYBlRbCT\nIfC2gEmSy49mw9b6rpBWJ47VDLIZCNQ2SWToENy0Emfb03A8xAEKS6PVwdY9ubE=\n=8coR\n-----END PGP SIGNATURE-----\n", "payload": "tree 4dfbff3baa418942cf620eb6faf1b1a69ee5f9c7\nparent 90f2af774ae3149ad52ec6bb2d48649b72844a2c\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1681100800 -0700\ncommitter GitHub <noreply@github.com> 1681100800 -0700\n\nRemove formats `[T; N]` does not impl (rust-lang/portable-simd#337)\n\nRemove these extra formatting traits, as they are\r\ninconsistent with how arrays and slices format,\r\nand it can cause unnecessary code bloat in binaries.\r\nWe can revisit this if people ever agree on doing these\r\nformatters for the other slice-y types.\r\n\r\nPrefer to dispatch to the `impl `fmt::Debug for [T]`,\r\nto reduce the chances of monomorphizing twice.\r\nInlining it seems like a good idea for similar reasons?\r\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb26115928c5c69b10268fd2f9e500865c142d6", "html_url": "https://github.com/rust-lang/rust/commit/ceb26115928c5c69b10268fd2f9e500865c142d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceb26115928c5c69b10268fd2f9e500865c142d6/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90f2af774ae3149ad52ec6bb2d48649b72844a2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f2af774ae3149ad52ec6bb2d48649b72844a2c", "html_url": "https://github.com/rust-lang/rust/commit/90f2af774ae3149ad52ec6bb2d48649b72844a2c"}], "stats": {"total": 50, "additions": 16, "deletions": 34}, "files": [{"sha": "b7317969cbb49ad994408227a5d8cdeadda3618e", "filename": "crates/core_simd/src/fmt.rs", "status": "modified", "additions": 16, "deletions": 34, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ceb26115928c5c69b10268fd2f9e500865c142d6/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb26115928c5c69b10268fd2f9e500865c142d6/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Ffmt.rs?ref=ceb26115928c5c69b10268fd2f9e500865c142d6", "patch": "@@ -1,39 +1,21 @@\n use crate::simd::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n use core::fmt;\n \n-macro_rules! impl_fmt_trait {\n-    { $($trait:ident,)* } => {\n-        $(\n-            impl<T, const LANES: usize> fmt::$trait for Simd<T, LANES>\n-            where\n-                LaneCount<LANES>: SupportedLaneCount,\n-                T: SimdElement + fmt::$trait,\n-            {\n-                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                    #[repr(transparent)]\n-                    struct Wrapper<'a, T: fmt::$trait>(&'a T);\n-\n-                    impl<T: fmt::$trait> fmt::Debug for Wrapper<'_, T> {\n-                        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                            self.0.fmt(f)\n-                        }\n-                    }\n-\n-                    f.debug_list()\n-                        .entries(self.as_array().iter().map(|x| Wrapper(x)))\n-                        .finish()\n-                }\n-            }\n-        )*\n+impl<T, const LANES: usize> fmt::Debug for Simd<T, LANES>\n+where\n+    LaneCount<LANES>: SupportedLaneCount,\n+    T: SimdElement + fmt::Debug,\n+{\n+    /// A `Simd<T, N>` has a debug format like the one for `[T]`:\n+    /// ```\n+    /// # #![feature(portable_simd)]\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd::Simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd::Simd;\n+    /// let floats = Simd::<f32, 4>::splat(-1.0);\n+    /// assert_eq!(format!(\"{:?}\", [-1.0; 4]), format!(\"{:?}\", floats));\n+    /// ```\n+    #[inline]\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        <[T] as fmt::Debug>::fmt(self.as_array(), f)\n     }\n }\n-\n-impl_fmt_trait! {\n-    Debug,\n-    Binary,\n-    LowerExp,\n-    UpperExp,\n-    Octal,\n-    LowerHex,\n-    UpperHex,\n-}"}]}