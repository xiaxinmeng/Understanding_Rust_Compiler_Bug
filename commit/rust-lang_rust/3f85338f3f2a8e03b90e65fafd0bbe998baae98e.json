{"sha": "3f85338f3f2a8e03b90e65fafd0bbe998baae98e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmODUzMzhmM2YyYThlMDNiOTBlNjVmYWZkMGJiZTk5OGJhYWU5OGU=", "commit": {"author": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-04-28T19:05:12Z"}, "committer": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-05-05T09:25:12Z"}, "message": "Restore the snapshot/rollback optimization for region constraints", "tree": {"sha": "75b97904cd5c709aea8be87ca77d69e45bd75139", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75b97904cd5c709aea8be87ca77d69e45bd75139"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f85338f3f2a8e03b90e65fafd0bbe998baae98e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f85338f3f2a8e03b90e65fafd0bbe998baae98e", "html_url": "https://github.com/rust-lang/rust/commit/3f85338f3f2a8e03b90e65fafd0bbe998baae98e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f85338f3f2a8e03b90e65fafd0bbe998baae98e/comments", "author": null, "committer": null, "parents": [{"sha": "f7f62452e47bab1a8e649da77a0ab0f8505d7035", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f62452e47bab1a8e649da77a0ab0f8505d7035", "html_url": "https://github.com/rust-lang/rust/commit/f7f62452e47bab1a8e649da77a0ab0f8505d7035"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "2cf9dd882e4bbd2eccf3a666bb4b841896b8c69f", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3f85338f3f2a8e03b90e65fafd0bbe998baae98e/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f85338f3f2a8e03b90e65fafd0bbe998baae98e/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=3f85338f3f2a8e03b90e65fafd0bbe998baae98e", "patch": "@@ -45,7 +45,9 @@ use self::free_regions::RegionRelations;\n use self::lexical_region_resolve::LexicalRegionResolutions;\n use self::outlives::env::OutlivesEnvironment;\n use self::region_constraints::{GenericKind, RegionConstraintData, VarInfos, VerifyBound};\n-use self::region_constraints::{RegionConstraintCollector, RegionConstraintStorage};\n+use self::region_constraints::{\n+    RegionConstraintCollector, RegionConstraintStorage, RegionSnapshot,\n+};\n use self::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n \n pub mod at;\n@@ -265,7 +267,7 @@ impl<'tcx> InferCtxtInner<'tcx> {\n         self.const_unification_storage.with_log(&mut self.undo_log)\n     }\n \n-    pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'tcx, '_> {\n+    pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {\n         self.region_constraint_storage\n             .as_mut()\n             .expect(\"region constraints already solved\")\n@@ -706,6 +708,7 @@ impl<'tcx> InferOk<'tcx, ()> {\n #[must_use = \"once you start a snapshot, you should always consume it\"]\n pub struct CombinedSnapshot<'a, 'tcx> {\n     undo_snapshot: Snapshot<'tcx>,\n+    region_constraints_snapshot: RegionSnapshot,\n     universe: ty::UniverseIndex,\n     was_in_snapshot: bool,\n     _in_progress_tables: Option<Ref<'a, ty::TypeckTables<'tcx>>>,\n@@ -827,6 +830,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         CombinedSnapshot {\n             undo_snapshot: inner.undo_log.start_snapshot(),\n+            region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),\n             universe: self.universe(),\n             was_in_snapshot: in_snapshot,\n             // Borrow tables \"in progress\" (i.e., during typeck)\n@@ -837,19 +841,31 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n     fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {\n         debug!(\"rollback_to(cause={})\", cause);\n-        let CombinedSnapshot { undo_snapshot, universe, was_in_snapshot, _in_progress_tables } =\n-            snapshot;\n+        let CombinedSnapshot {\n+            undo_snapshot,\n+            region_constraints_snapshot,\n+            universe,\n+            was_in_snapshot,\n+            _in_progress_tables,\n+        } = snapshot;\n \n         self.in_snapshot.set(was_in_snapshot);\n         self.universe.set(universe);\n \n-        self.inner.borrow_mut().rollback_to(undo_snapshot);\n+        let mut inner = self.inner.borrow_mut();\n+        inner.rollback_to(undo_snapshot);\n+        inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);\n     }\n \n     fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {\n         debug!(\"commit_from()\");\n-        let CombinedSnapshot { undo_snapshot, universe: _, was_in_snapshot, _in_progress_tables } =\n-            snapshot;\n+        let CombinedSnapshot {\n+            undo_snapshot,\n+            region_constraints_snapshot: _,\n+            universe: _,\n+            was_in_snapshot,\n+            _in_progress_tables,\n+        } = snapshot;\n \n         self.in_snapshot.set(was_in_snapshot);\n "}, {"sha": "473550d5433df3c14e8a4ad95c9ec75cde957ede", "filename": "src/librustc_infer/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f85338f3f2a8e03b90e65fafd0bbe998baae98e/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f85338f3f2a8e03b90e65fafd0bbe998baae98e/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=3f85338f3f2a8e03b90e65fafd0bbe998baae98e", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::undo_log::UndoLogs;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::RelateResult;\n \n-impl<'tcx> RegionConstraintCollector<'tcx, '_> {\n+impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     /// Searches region constraints created since `snapshot` that\n     /// affect one of the placeholders in `placeholder_map`, returning\n     /// an error if any of the placeholders are related to another"}, {"sha": "0c9f002a2a21dc7861cd91ea918d403f8284b3bb", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f85338f3f2a8e03b90e65fafd0bbe998baae98e/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f85338f3f2a8e03b90e65fafd0bbe998baae98e/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=3f85338f3f2a8e03b90e65fafd0bbe998baae98e", "patch": "@@ -61,19 +61,19 @@ pub struct RegionConstraintStorage<'tcx> {\n     any_unifications: bool,\n }\n \n-pub struct RegionConstraintCollector<'tcx, 'a> {\n+pub struct RegionConstraintCollector<'a, 'tcx> {\n     storage: &'a mut RegionConstraintStorage<'tcx>,\n     undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n }\n \n-impl std::ops::Deref for RegionConstraintCollector<'tcx, '_> {\n+impl std::ops::Deref for RegionConstraintCollector<'_, 'tcx> {\n     type Target = RegionConstraintStorage<'tcx>;\n     fn deref(&self) -> &RegionConstraintStorage<'tcx> {\n         self.storage\n     }\n }\n \n-impl std::ops::DerefMut for RegionConstraintCollector<'tcx, '_> {\n+impl std::ops::DerefMut for RegionConstraintCollector<'_, 'tcx> {\n     fn deref_mut(&mut self) -> &mut RegionConstraintStorage<'tcx> {\n         self.storage\n     }\n@@ -348,7 +348,7 @@ impl<'tcx> RegionConstraintStorage<'tcx> {\n     pub(crate) fn with_log<'a>(\n         &'a mut self,\n         undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n-    ) -> RegionConstraintCollector<'tcx, 'a> {\n+    ) -> RegionConstraintCollector<'a, 'tcx> {\n         RegionConstraintCollector { storage: self, undo_log }\n     }\n \n@@ -381,7 +381,7 @@ impl<'tcx> RegionConstraintStorage<'tcx> {\n     }\n }\n \n-impl<'tcx> RegionConstraintCollector<'tcx, '_> {\n+impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     pub fn num_region_vars(&self) -> usize {\n         self.var_infos.len()\n     }"}]}