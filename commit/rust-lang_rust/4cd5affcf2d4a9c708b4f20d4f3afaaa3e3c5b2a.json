{"sha": "4cd5affcf2d4a9c708b4f20d4f3afaaa3e3c5b2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZDVhZmZjZjJkNGE5YzcwOGI0ZjIwZDRmM2FmYWFhM2UzYzViMmE=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-06-21T18:26:14Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-06-21T18:26:14Z"}, "message": "Fix handling of disambiguator suffixes for intra-doc links", "tree": {"sha": "c7649c8cf69cbe249a9f8b48dfe1ea6042bcbf22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7649c8cf69cbe249a9f8b48dfe1ea6042bcbf22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cd5affcf2d4a9c708b4f20d4f3afaaa3e3c5b2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cd5affcf2d4a9c708b4f20d4f3afaaa3e3c5b2a", "html_url": "https://github.com/rust-lang/rust/commit/4cd5affcf2d4a9c708b4f20d4f3afaaa3e3c5b2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cd5affcf2d4a9c708b4f20d4f3afaaa3e3c5b2a/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a5b97adb4da4b0f913d19765e91d4322ef6542e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5b97adb4da4b0f913d19765e91d4322ef6542e", "html_url": "https://github.com/rust-lang/rust/commit/6a5b97adb4da4b0f913d19765e91d4322ef6542e"}], "stats": {"total": 37, "additions": 10, "deletions": 27}, "files": [{"sha": "ce017995a3b85986c7db36ef908adf97ed9ccb83", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4cd5affcf2d4a9c708b4f20d4f3afaaa3e3c5b2a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd5affcf2d4a9c708b4f20d4f3afaaa3e3c5b2a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=4cd5affcf2d4a9c708b4f20d4f3afaaa3e3c5b2a", "patch": "@@ -951,9 +951,9 @@ fn preprocess_link<'a>(\n     }\n \n     // Parse and strip the disambiguator from the link, if present.\n-    let (path_str, disambiguator) = match Disambiguator::from_str(&link) {\n-        Ok(Some((d, path))) => (path.trim(), Some(d)),\n-        Ok(None) => (link.trim(), None),\n+    let (link_text, path_str, disambiguator) = match Disambiguator::from_str(&link) {\n+        Ok(Some((d, path, link_text))) => (link_text.trim(), path.trim(), Some(d)),\n+        Ok(None) => (link.trim(), link.trim(), None),\n         Err((err_msg, relative_range)) => {\n             // Only report error if we would not have ignored this link. See issue #83859.\n             if !should_ignore_link_with_disambiguators(link) {\n@@ -971,11 +971,6 @@ fn preprocess_link<'a>(\n         return None;\n     }\n \n-    // We stripped `()` and `!` when parsing the disambiguator.\n-    // Add them back to be displayed, but not prefix disambiguators.\n-    let link_text =\n-        disambiguator.map(|d| d.display_for(path_str)).unwrap_or_else(|| path_str.to_owned());\n-\n     // Strip generics from the path.\n     let path_str = if path_str.contains(['<', '>'].as_slice()) {\n         match strip_generics_from_path(&path_str) {\n@@ -1005,7 +1000,7 @@ fn preprocess_link<'a>(\n         path_str,\n         disambiguator,\n         extra_fragment: extra_fragment.map(String::from),\n-        link_text,\n+        link_text: link_text.to_owned(),\n     }))\n }\n \n@@ -1513,24 +1508,12 @@ enum Disambiguator {\n }\n \n impl Disambiguator {\n-    /// The text that should be displayed when the path is rendered as HTML.\n-    ///\n-    /// NOTE: `path` is not the original link given by the user, but a name suitable for passing to `resolve`.\n-    fn display_for(&self, path: &str) -> String {\n-        match self {\n-            // FIXME: this will have different output if the user had `m!()` originally.\n-            Self::Kind(DefKind::Macro(MacroKind::Bang)) => format!(\"{}!\", path),\n-            Self::Kind(DefKind::Fn) => format!(\"{}()\", path),\n-            _ => path.to_owned(),\n-        }\n-    }\n-\n-    /// Given a link, parse and return `(disambiguator, path_str)`.\n+    /// Given a link, parse and return `(disambiguator, path_str, link_text)`.\n     ///\n     /// This returns `Ok(Some(...))` if a disambiguator was found,\n     /// `Ok(None)` if no disambiguator was found, or `Err(...)`\n     /// if there was a problem with the disambiguator.\n-    fn from_str(link: &str) -> Result<Option<(Self, &str)>, (String, Range<usize>)> {\n+    fn from_str(link: &str) -> Result<Option<(Self, &str, &str)>, (String, Range<usize>)> {\n         use Disambiguator::{Kind, Namespace as NS, Primitive};\n \n         if let Some(idx) = link.find('@') {\n@@ -1551,18 +1534,18 @@ impl Disambiguator {\n                 \"prim\" | \"primitive\" => Primitive,\n                 _ => return Err((format!(\"unknown disambiguator `{}`\", prefix), 0..idx)),\n             };\n-            Ok(Some((d, &rest[1..])))\n+            Ok(Some((d, &rest[1..], &rest[1..])))\n         } else {\n             let suffixes = [\n                 (\"!()\", DefKind::Macro(MacroKind::Bang)),\n                 (\"()\", DefKind::Fn),\n                 (\"!\", DefKind::Macro(MacroKind::Bang)),\n             ];\n             for (suffix, kind) in suffixes {\n-                if let Some(link) = link.strip_suffix(suffix) {\n+                if let Some(path_str) = link.strip_suffix(suffix) {\n                     // Avoid turning `!` or `()` into an empty string\n-                    if !link.is_empty() {\n-                        return Ok(Some((Kind(kind), link)));\n+                    if !path_str.is_empty() {\n+                        return Ok(Some((Kind(kind), path_str, link)));\n                     }\n                 }\n             }"}]}