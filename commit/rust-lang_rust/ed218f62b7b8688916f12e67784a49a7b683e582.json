{"sha": "ed218f62b7b8688916f12e67784a49a7b683e582", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMjE4ZjYyYjdiODY4ODkxNmYxMmU2Nzc4NGE0OWE3YjY4M2U1ODI=", "commit": {"author": {"name": "jethrogb", "email": "github@jbeekman.nl", "date": "2016-04-11T05:28:24Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@jbeekman.nl", "date": "2016-04-11T05:34:37Z"}, "message": "Match signed/unsigned integer type docs\n\n* Copy documentation from signed implementation to unsigned implementation, where necessary.\n* Use signed integers in signed documentation, where possible.", "tree": {"sha": "d007b6326ac5d712341ead72c715b75fcc504dd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d007b6326ac5d712341ead72c715b75fcc504dd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed218f62b7b8688916f12e67784a49a7b683e582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed218f62b7b8688916f12e67784a49a7b683e582", "html_url": "https://github.com/rust-lang/rust/commit/ed218f62b7b8688916f12e67784a49a7b683e582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed218f62b7b8688916f12e67784a49a7b683e582/comments", "author": {"login": "jethrogb", "id": 1132307, "node_id": "MDQ6VXNlcjExMzIzMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1132307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jethrogb", "html_url": "https://github.com/jethrogb", "followers_url": "https://api.github.com/users/jethrogb/followers", "following_url": "https://api.github.com/users/jethrogb/following{/other_user}", "gists_url": "https://api.github.com/users/jethrogb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jethrogb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jethrogb/subscriptions", "organizations_url": "https://api.github.com/users/jethrogb/orgs", "repos_url": "https://api.github.com/users/jethrogb/repos", "events_url": "https://api.github.com/users/jethrogb/events{/privacy}", "received_events_url": "https://api.github.com/users/jethrogb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "924da295c3c1e697e96e359435c4052f3c6d8b56", "url": "https://api.github.com/repos/rust-lang/rust/commits/924da295c3c1e697e96e359435c4052f3c6d8b56", "html_url": "https://github.com/rust-lang/rust/commit/924da295c3c1e697e96e359435c4052f3c6d8b56"}], "stats": {"total": 94, "additions": 53, "deletions": 41}, "files": [{"sha": "9af8ef53851db986bc48556ebe74f3fa8c40eda7", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 53, "deletions": 41, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/ed218f62b7b8688916f12e67784a49a7b683e582/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed218f62b7b8688916f12e67784a49a7b683e582/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=ed218f62b7b8688916f12e67784a49a7b683e582", "patch": "@@ -149,7 +149,7 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// assert_eq!(u32::from_str_radix(\"A\", 16), Ok(10));\n+        /// assert_eq!(i32::from_str_radix(\"A\", 16), Ok(10));\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {\n@@ -163,9 +163,9 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// let n = 0b01001100u8;\n+        /// let n = -0b1000_0000i8;\n         ///\n-        /// assert_eq!(n.count_ones(), 3);\n+        /// assert_eq!(n.count_ones(), 1);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n@@ -178,9 +178,9 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// let n = 0b01001100u8;\n+        /// let n = -0b1000_0000i8;\n         ///\n-        /// assert_eq!(n.count_zeros(), 5);\n+        /// assert_eq!(n.count_zeros(), 7);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n@@ -196,9 +196,9 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// let n = 0b0101000u16;\n+        /// let n = -1i16;\n         ///\n-        /// assert_eq!(n.leading_zeros(), 10);\n+        /// assert_eq!(n.leading_zeros(), 0);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n@@ -214,9 +214,9 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// let n = 0b0101000u16;\n+        /// let n = -4i8;\n         ///\n-        /// assert_eq!(n.trailing_zeros(), 3);\n+        /// assert_eq!(n.trailing_zeros(), 2);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n@@ -232,10 +232,10 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// let n = 0x0123456789ABCDEFu64;\n-        /// let m = 0x3456789ABCDEF012u64;\n+        /// let n = 0x0123456789ABCDEFi64;\n+        /// let m = -0x76543210FEDCBA99i64;\n         ///\n-        /// assert_eq!(n.rotate_left(12), m);\n+        /// assert_eq!(n.rotate_left(32), m);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n@@ -252,10 +252,10 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// let n = 0x0123456789ABCDEFu64;\n-        /// let m = 0xDEF0123456789ABCu64;\n+        /// let n = 0x0123456789ABCDEFi64;\n+        /// let m = -0xFEDCBA987654322i64;\n         ///\n-        /// assert_eq!(n.rotate_right(12), m);\n+        /// assert_eq!(n.rotate_right(4), m);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n@@ -270,8 +270,8 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// let n = 0x0123456789ABCDEFu64;\n-        /// let m = 0xEFCDAB8967452301u64;\n+        /// let n =  0x0123456789ABCDEFi64;\n+        /// let m = -0x1032547698BADCFFi64;\n         ///\n         /// assert_eq!(n.swap_bytes(), m);\n         /// ```\n@@ -291,12 +291,12 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// let n = 0x0123456789ABCDEFu64;\n+        /// let n = 0x0123456789ABCDEFi64;\n         ///\n         /// if cfg!(target_endian = \"big\") {\n-        ///     assert_eq!(u64::from_be(n), n)\n+        ///     assert_eq!(i64::from_be(n), n)\n         /// } else {\n-        ///     assert_eq!(u64::from_be(n), n.swap_bytes())\n+        ///     assert_eq!(i64::from_be(n), n.swap_bytes())\n         /// }\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -315,12 +315,12 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// let n = 0x0123456789ABCDEFu64;\n+        /// let n = 0x0123456789ABCDEFi64;\n         ///\n         /// if cfg!(target_endian = \"little\") {\n-        ///     assert_eq!(u64::from_le(n), n)\n+        ///     assert_eq!(i64::from_le(n), n)\n         /// } else {\n-        ///     assert_eq!(u64::from_le(n), n.swap_bytes())\n+        ///     assert_eq!(i64::from_le(n), n.swap_bytes())\n         /// }\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -339,7 +339,7 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// let n = 0x0123456789ABCDEFu64;\n+        /// let n = 0x0123456789ABCDEFi64;\n         ///\n         /// if cfg!(target_endian = \"big\") {\n         ///     assert_eq!(n.to_be(), n)\n@@ -363,7 +363,7 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// let n = 0x0123456789ABCDEFu64;\n+        /// let n = 0x0123456789ABCDEFi64;\n         ///\n         /// if cfg!(target_endian = \"little\") {\n         ///     assert_eq!(n.to_le(), n)\n@@ -385,8 +385,8 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// assert_eq!(5u16.checked_add(65530), Some(65535));\n-        /// assert_eq!(6u16.checked_add(65530), None);\n+        /// assert_eq!(7i16.checked_add(32760), Some(32767));\n+        /// assert_eq!(8i16.checked_add(32760), None);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n@@ -421,8 +421,8 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// assert_eq!(5u8.checked_mul(51), Some(255));\n-        /// assert_eq!(5u8.checked_mul(52), None);\n+        /// assert_eq!(6i8.checked_mul(21), Some(126));\n+        /// assert_eq!(6i8.checked_mul(22), None);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n@@ -753,8 +753,8 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// assert_eq!(1u8.wrapping_shl(7), 128);\n-        /// assert_eq!(1u8.wrapping_shl(8), 1);\n+        /// assert_eq!((-1i8).wrapping_shl(7), -128);\n+        /// assert_eq!((-1i8).wrapping_shl(8), -1);\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n@@ -778,8 +778,8 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// assert_eq!(128u8.wrapping_shr(7), 1);\n-        /// assert_eq!(128u8.wrapping_shr(8), 128);\n+        /// assert_eq!((-128i8).wrapping_shr(7), -1);\n+        /// assert_eq!((-128i8).wrapping_shr(8), -128);\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n@@ -1193,15 +1193,13 @@ macro_rules! uint_impl {\n         ///\n         /// Leading and trailing whitespace represent an error.\n         ///\n-        /// # Arguments\n-        ///\n-        /// * src - A string slice\n-        /// * radix - The base to use. Must lie in the range [2 .. 36]\n+        /// # Examples\n         ///\n-        /// # Return value\n+        /// Basic usage:\n         ///\n-        /// `Err(ParseIntError)` if the string did not represent a valid number.\n-        /// Otherwise, `Ok(n)` where `n` is the integer represented by `src`.\n+        /// ```\n+        /// assert_eq!(u32::from_str_radix(\"A\", 16), Ok(10));\n+        /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {\n             from_str_radix(src, radix)\n@@ -1745,7 +1743,7 @@ macro_rules! uint_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// assert_eq!(100i8.wrapping_rem(10), 0);\n+        /// assert_eq!(100u8.wrapping_rem(10), 0);\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n@@ -1783,6 +1781,13 @@ macro_rules! uint_impl {\n         /// where `mask` removes any high-order bits of `rhs` that\n         /// would cause the shift to exceed the bitwidth of the type.\n         ///\n+        /// Note that this is *not* the same as a rotate-left; the\n+        /// RHS of a wrapping shift-left is restricted to the range\n+        /// of the type, rather than the bits shifted out of the LHS\n+        /// being returned to the other end. The primitive integer\n+        /// types all implement a `rotate_left` function, which may\n+        /// be what you want instead.\n+        ///\n         /// # Examples\n         ///\n         /// Basic usage:\n@@ -1801,6 +1806,13 @@ macro_rules! uint_impl {\n         /// where `mask` removes any high-order bits of `rhs` that\n         /// would cause the shift to exceed the bitwidth of the type.\n         ///\n+        /// Note that this is *not* the same as a rotate-right; the\n+        /// RHS of a wrapping shift-right is restricted to the range\n+        /// of the type, rather than the bits shifted out of the LHS\n+        /// being returned to the other end. The primitive integer\n+        /// types all implement a `rotate_right` function, which may\n+        /// be what you want instead.\n+        ///\n         /// # Examples\n         ///\n         /// Basic usage:"}]}