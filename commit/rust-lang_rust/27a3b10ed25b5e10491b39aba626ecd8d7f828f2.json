{"sha": "27a3b10ed25b5e10491b39aba626ecd8d7f828f2", "node_id": "C_kwDOAAsO6NoAKDI3YTNiMTBlZDI1YjVlMTA0OTFiMzlhYmE2MjZlY2Q4ZDdmODI4ZjI", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-28T19:45:35Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-28T19:45:35Z"}, "message": "check for intercrate mode when accessing the cache", "tree": {"sha": "4851bfb2bc0b3eb0d2bab2ee52952dc498251e35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4851bfb2bc0b3eb0d2bab2ee52952dc498251e35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27a3b10ed25b5e10491b39aba626ecd8d7f828f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27a3b10ed25b5e10491b39aba626ecd8d7f828f2", "html_url": "https://github.com/rust-lang/rust/commit/27a3b10ed25b5e10491b39aba626ecd8d7f828f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27a3b10ed25b5e10491b39aba626ecd8d7f828f2/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60660371efe59dfc99644e9d709a1b71e25ae2ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/60660371efe59dfc99644e9d709a1b71e25ae2ac", "html_url": "https://github.com/rust-lang/rust/commit/60660371efe59dfc99644e9d709a1b71e25ae2ac"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "d7ad730b4a321ebca95165f96e47b99aa7531523", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/27a3b10ed25b5e10491b39aba626ecd8d7f828f2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a3b10ed25b5e10491b39aba626ecd8d7f828f2/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=27a3b10ed25b5e10491b39aba626ecd8d7f828f2", "patch": "@@ -47,6 +47,22 @@ impl<'tcx> SearchGraph<'tcx> {\n         self.mode\n     }\n \n+    /// We do not use the global cache during coherence.\n+    ///\n+    /// The trait solver behavior is different for coherence\n+    /// so we would have to add the solver mode to the cache key.\n+    /// This is probably not worth it as trait solving during\n+    /// coherence tends to already be incredibly fast.\n+    ///\n+    /// We could add another global cache for coherence instead,\n+    /// but that's effort so let's only do it if necessary.\n+    pub(super) fn should_use_global_cache(&self) -> bool {\n+        match self.mode {\n+            SolverMode::Normal => true,\n+            SolverMode::Coherence => false,\n+        }\n+    }\n+\n     pub(super) fn is_empty(&self) -> bool {\n         self.stack.is_empty() && self.provisional_cache.is_empty()\n     }\n@@ -191,8 +207,10 @@ impl<'tcx> SearchGraph<'tcx> {\n         canonical_goal: CanonicalGoal<'tcx>,\n         mut loop_body: impl FnMut(&mut Self) -> QueryResult<'tcx>,\n     ) -> QueryResult<'tcx> {\n-        if let Some(result) = tcx.new_solver_evaluation_cache.get(&canonical_goal, tcx) {\n-            return result;\n+        if self.should_use_global_cache() {\n+            if let Some(result) = tcx.new_solver_evaluation_cache.get(&canonical_goal, tcx) {\n+                return result;\n+            }\n         }\n \n         match self.try_push_stack(tcx, canonical_goal) {\n@@ -252,9 +270,8 @@ impl<'tcx> SearchGraph<'tcx> {\n             // dependencies, our non-root goal may no longer appear as child of the root goal.\n             //\n             // See https://github.com/rust-lang/rust/pull/108071 for some additional context.\n-            let should_cache_globally = matches!(self.solver_mode(), SolverMode::Normal)\n-                && (!self.overflow_data.did_overflow() || self.stack.is_empty());\n-            if should_cache_globally {\n+            let can_cache = !self.overflow_data.did_overflow() || self.stack.is_empty();\n+            if self.should_use_global_cache() && can_cache {\n                 tcx.new_solver_evaluation_cache.insert(\n                     current_goal.goal,\n                     dep_node,"}]}