{"sha": "bff170786cd99bfca7669430fdcc0889a01d2906", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZjE3MDc4NmNkOTliZmNhNzY2OTQzMGZkY2MwODg5YTAxZDI5MDY=", "commit": {"author": {"name": "Micha\u0142 Czardybon", "email": "mczard@poczta.onet.pl", "date": "2015-05-08T20:15:14Z"}, "committer": {"name": "Micha\u0142 Czardybon", "email": "mczard@poczta.onet.pl", "date": "2015-05-11T07:02:25Z"}, "message": "Fixed one textual mistake and one casing error.\n\nCorrected \"Ownership\":\n\n- [`Variable bindings`] link was not processed properly.\n- Changed the paragraph about move semantics with two vectors, because it was confusing.\n- Removed \"So it may not be as inefficient as it initially seems\", because there is nothing that seems inefficient in copying pointers only.\n- Other text corrections.\n\nFixed copied-and-pasted text mistakes.\n\nRevised the paragraph about moving a vector (taking into account suggestions by echochamber).\n\nFixed markdown.\n\nFixes requested by steveklabnik.\n\nBrought back a sentence about supposed inefficiency.", "tree": {"sha": "8db9d9b041eb3e4df52d1b7ef475fe520533e12d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8db9d9b041eb3e4df52d1b7ef475fe520533e12d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bff170786cd99bfca7669430fdcc0889a01d2906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bff170786cd99bfca7669430fdcc0889a01d2906", "html_url": "https://github.com/rust-lang/rust/commit/bff170786cd99bfca7669430fdcc0889a01d2906", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bff170786cd99bfca7669430fdcc0889a01d2906/comments", "author": {"login": "michal-czardybon", "id": 8016949, "node_id": "MDQ6VXNlcjgwMTY5NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/8016949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michal-czardybon", "html_url": "https://github.com/michal-czardybon", "followers_url": "https://api.github.com/users/michal-czardybon/followers", "following_url": "https://api.github.com/users/michal-czardybon/following{/other_user}", "gists_url": "https://api.github.com/users/michal-czardybon/gists{/gist_id}", "starred_url": "https://api.github.com/users/michal-czardybon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michal-czardybon/subscriptions", "organizations_url": "https://api.github.com/users/michal-czardybon/orgs", "repos_url": "https://api.github.com/users/michal-czardybon/repos", "events_url": "https://api.github.com/users/michal-czardybon/events{/privacy}", "received_events_url": "https://api.github.com/users/michal-czardybon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michal-czardybon", "id": 8016949, "node_id": "MDQ6VXNlcjgwMTY5NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/8016949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michal-czardybon", "html_url": "https://github.com/michal-czardybon", "followers_url": "https://api.github.com/users/michal-czardybon/followers", "following_url": "https://api.github.com/users/michal-czardybon/following{/other_user}", "gists_url": "https://api.github.com/users/michal-czardybon/gists{/gist_id}", "starred_url": "https://api.github.com/users/michal-czardybon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michal-czardybon/subscriptions", "organizations_url": "https://api.github.com/users/michal-czardybon/orgs", "repos_url": "https://api.github.com/users/michal-czardybon/repos", "events_url": "https://api.github.com/users/michal-czardybon/events{/privacy}", "received_events_url": "https://api.github.com/users/michal-czardybon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73345185793cca8a0b4c77aa87973a2634a0c492", "url": "https://api.github.com/repos/rust-lang/rust/commits/73345185793cca8a0b4c77aa87973a2634a0c492", "html_url": "https://github.com/rust-lang/rust/commit/73345185793cca8a0b4c77aa87973a2634a0c492"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "25d5122b4e49e31d167f8dde9b7340c05952fa58", "filename": "src/doc/trpl/lifetimes.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bff170786cd99bfca7669430fdcc0889a01d2906/src%2Fdoc%2Ftrpl%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/bff170786cd99bfca7669430fdcc0889a01d2906/src%2Fdoc%2Ftrpl%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Flifetimes.md?ref=bff170786cd99bfca7669430fdcc0889a01d2906", "patch": "@@ -5,7 +5,7 @@ Rust\u2019s most unique and compelling features, with which Rust developers should\n become quite acquainted. Ownership is how Rust achieves its largest goal,\n memory safety. There are a few distinct concepts, each with its own chapter:\n \n-* [ownership][ownership], ownership, the key concept\n+* [ownership][ownership], the key concept\n * [borrowing][borrowing], and their associated feature \u2018references\u2019\n * lifetimes, which you\u2019re reading now\n "}, {"sha": "b210f1c643f438dce8edd6c65c16aada12803186", "filename": "src/doc/trpl/ownership.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bff170786cd99bfca7669430fdcc0889a01d2906/src%2Fdoc%2Ftrpl%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/bff170786cd99bfca7669430fdcc0889a01d2906/src%2Fdoc%2Ftrpl%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fownership.md?ref=bff170786cd99bfca7669430fdcc0889a01d2906", "patch": "@@ -6,7 +6,7 @@ become quite acquainted. Ownership is how Rust achieves its largest goal,\n memory safety. There are a few distinct concepts, each with its own\n chapter:\n \n-* ownership, which you\u2019re reading now.\n+* ownership, which you\u2019re reading now\n * [borrowing][borrowing], and their associated feature \u2018references\u2019\n * [lifetimes][lifetimes], an advanced concept of borrowing\n \n@@ -23,7 +23,7 @@ Before we get to the details, two important notes about the ownership system.\n Rust has a focus on safety and speed. It accomplishes these goals through many\n \u2018zero-cost abstractions\u2019, which means that in Rust, abstractions cost as little\n as possible in order to make them work. The ownership system is a prime example\n-of a zero cost abstraction. All of the analysis we\u2019ll talk about in this guide\n+of a zero-cost abstraction. All of the analysis we\u2019ll talk about in this guide\n is _done at compile time_. You do not pay any run-time cost for any of these\n features.\n \n@@ -41,7 +41,7 @@ With that in mind, let\u2019s learn about ownership.\n \n # Ownership\n \n-[`Variable bindings`][bindings] have a property in Rust: they \u2018have ownership\u2019\n+[Variable bindings][bindings] have a property in Rust: they \u2018have ownership\u2019\n of what they\u2019re bound to. This means that when a binding goes out of scope, the\n resource that they\u2019re bound to are freed. For example:\n \n@@ -106,8 +106,8 @@ take(v);\n println!(\"v[0] is: {}\", v[0]);\n ```\n \n-Same error: \u201cuse of moved value.\u201d When we transfer ownership to something else,\n-we say that we\u2019ve \u2018moved\u2019 the thing we refer to. You don\u2019t need some sort of\n+Same error: \u2018use of moved value\u2019. When we transfer ownership to something else,\n+we say that we\u2019ve \u2018moved\u2019 the thing we refer to. You don\u2019t need any sort of\n special annotation here, it\u2019s the default thing that Rust does.\n \n ## The details\n@@ -121,19 +121,19 @@ let v = vec![1, 2, 3];\n let v2 = v;\n ```\n \n-The first line creates some data for the vector on the [stack][sh], `v`. The\n-vector\u2019s data, however, is stored on the [heap][sh], and so it contains a\n-pointer to that data. When we move `v` to `v2`, it creates a copy of that pointer,\n-for `v2`. Which would mean two pointers to the contents of the vector on the\n-heap. That would be a problem: it would violate Rust\u2019s safety guarantees by\n-introducing a data race. Therefore, Rust forbids using `v` after we\u2019ve done the\n-move.\n+The first line allocates memory for the vector object, `v`, and for the data it\n+contains. The vector object is stored on the [stack][sh] and contains a pointer\n+to the content (`[1, 2, 3]`) stored on the [heap][sh]. When we move `v` to `v2`,\n+it creates a copy of that pointer, for `v2`. Which means that there would be two\n+pointers to the content of the vector on the heap. It would violate Rust\u2019s\n+safety guarantees by introducing a data race. Therefore, Rust forbids using `v`\n+after we\u2019ve done the move.\n \n [sh]: the-stack-and-the-heap.html\n \n It\u2019s also important to note that optimizations may remove the actual copy of\n-the bytes, depending on circumstances. So it may not be as inefficient as it\n-initially seems.\n+the bytes on the stack, depending on circumstances. So it may not be as\n+inefficient as it initially seems.\n \n ## `Copy` types\n "}, {"sha": "c434371ce59d319ed4044c15d80440b204fabb35", "filename": "src/doc/trpl/references-and-borrowing.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bff170786cd99bfca7669430fdcc0889a01d2906/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/bff170786cd99bfca7669430fdcc0889a01d2906/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md?ref=bff170786cd99bfca7669430fdcc0889a01d2906", "patch": "@@ -6,7 +6,7 @@ become quite acquainted. Ownership is how Rust achieves its largest goal,\n memory safety. There are a few distinct concepts, each with its own\n chapter:\n \n-* [ownership][ownership], ownership, the key concept\n+* [ownership][ownership], the key concept\n * borrowing, which you\u2019re reading now\n * [lifetimes][lifetimes], an advanced concept of borrowing\n \n@@ -368,4 +368,4 @@ statement 1 at 3:14\n     \n     println!(\"{}\", y);\n }\n-```\n\\ No newline at end of file\n+```"}, {"sha": "e71d2033f49ed2f404e68baf56080bad695d18d4", "filename": "src/doc/trpl/while-loops.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bff170786cd99bfca7669430fdcc0889a01d2906/src%2Fdoc%2Ftrpl%2Fwhile-loops.md", "raw_url": "https://github.com/rust-lang/rust/raw/bff170786cd99bfca7669430fdcc0889a01d2906/src%2Fdoc%2Ftrpl%2Fwhile-loops.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fwhile-loops.md?ref=bff170786cd99bfca7669430fdcc0889a01d2906", "patch": "@@ -1,4 +1,4 @@\n-% while loops\n+% while Loops\n \n Rust also has a `while` loop. It looks like this:\n "}]}