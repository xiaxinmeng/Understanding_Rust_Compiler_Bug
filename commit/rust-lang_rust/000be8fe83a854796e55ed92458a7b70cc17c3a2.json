{"sha": "000be8fe83a854796e55ed92458a7b70cc17c3a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMGJlOGZlODNhODU0Nzk2ZTU1ZWQ5MjQ1OGE3YjcwY2MxN2MzYTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-09-18T00:42:39Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-09-20T15:39:09Z"}, "message": "dbg!(expr) implementation.", "tree": {"sha": "0f56ef653261b0ea437f575e99e932d4cf53e5ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f56ef653261b0ea437f575e99e932d4cf53e5ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/000be8fe83a854796e55ed92458a7b70cc17c3a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/000be8fe83a854796e55ed92458a7b70cc17c3a2", "html_url": "https://github.com/rust-lang/rust/commit/000be8fe83a854796e55ed92458a7b70cc17c3a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/000be8fe83a854796e55ed92458a7b70cc17c3a2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7f4c500b46603386e940f116b469c7adc043a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f4c500b46603386e940f116b469c7adc043a6d", "html_url": "https://github.com/rust-lang/rust/commit/f7f4c500b46603386e940f116b469c7adc043a6d"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "8344c73c9bea35c2ab95318ae3fd8078b343e96e", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/000be8fe83a854796e55ed92458a7b70cc17c3a2/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000be8fe83a854796e55ed92458a7b70cc17c3a2/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=000be8fe83a854796e55ed92458a7b70cc17c3a2", "patch": "@@ -220,6 +220,124 @@ macro_rules! eprintln {\n     })\n }\n \n+/// A macro for quick and dirty debugging with which you can inspect\n+/// the value of a given expression. An example:\n+///\n+/// ```rust\n+/// #![feature(dbg_macro)]\n+///\n+/// let a = 2;\n+/// let b = dbg!(a * 2) + 1;\n+/// //      ^-- prints: [src/main.rs:4] a * 2 = 4\n+/// assert_eq!(b, 5);\n+/// ```\n+///\n+/// The macro works by using the `Debug` implementation of the type of\n+/// the given expression to print the value to [stderr] along with the\n+/// source location of the macro invocation as well as the source code\n+/// of the expression.\n+///\n+/// Invoking the macro on an expression moves and takes ownership of it\n+/// before returning the evaluated expression unchanged. If the type\n+/// of the expression does not implement `Copy` and you don't want\n+/// to give up ownership, you can instead borrow with `dbg!(&expr)`\n+/// for some expression `expr`.\n+///\n+///  and should be avoided\n+/// for longer periods in version control\n+///\n+/// # Stability\n+///\n+/// The exact output printed by this macro should not be relied upon\n+/// and is subject to future changes.\n+///\n+/// # Panics\n+///\n+/// Panics if writing to `io::stderr` fails.\n+///\n+/// # Further examples\n+///\n+/// With a method call:\n+///\n+/// ```rust\n+/// #![feature(dbg_macro)]\n+/// \n+/// fn foo(n: usize) {\n+///     if let Some(_) = dbg!(n.checked_sub(4)) {\n+///         // ...\n+///     }\n+/// }\n+///\n+/// foo(3)\n+/// ```\n+///\n+/// This prints to [stderr]:\n+///\n+/// ```text,ignore\n+/// [src/main.rs:4] n.checked_sub(4) = None\n+/// ```\n+///\n+/// Naive factorial implementation:\n+///\n+/// ```rust\n+/// #![feature(dbg_macro)]\n+///\n+/// fn factorial(n: u32) -> u32 {\n+///     if dbg!(n <= 1) {\n+///         dbg!(1)\n+///     } else {\n+///         dbg!(n * factorial(n - 1))\n+///     }\n+/// }\n+///\n+/// dbg!(factorial(4));\n+/// ```\n+///\n+/// This prints to [stderr]:\n+///\n+/// ```text,ignore\n+/// [src/main.rs:3] n <= 1 = false\n+/// [src/main.rs:3] n <= 1 = false\n+/// [src/main.rs:3] n <= 1 = false\n+/// [src/main.rs:3] n <= 1 = true\n+/// [src/main.rs:4] 1 = 1\n+/// [src/main.rs:5] n * factorial(n - 1) = 2\n+/// [src/main.rs:5] n * factorial(n - 1) = 6\n+/// [src/main.rs:5] n * factorial(n - 1) = 24\n+/// [src/main.rs:11] factorial(4) = 24\n+/// ```\n+///\n+/// The `dbg!(..)` macro moves the input:\n+///\n+/// ```compile_fail\n+/// #![feature(dbg_macro)]\n+///\n+/// /// A wrapper around `usize` which importantly is not Copyable.\n+/// #[derive(Debug)]\n+/// struct NoCopy(usize);\n+///\n+/// let a = NoCopy(42);\n+/// let _ = dbg!(a); // <-- `a` is moved here.\n+/// let _ = dbg!(a); // <-- `a` is moved again; error!\n+/// ```\n+///\n+/// [stderr]: https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)\n+#[macro_export]\n+#[unstable(feature = \"dbg_macro\", issue = \"54306\")]\n+macro_rules! dbg {\n+    ($val:expr) => {\n+        // Use of `match` here is intentional because it affects the lifetimes\n+        // of temporaries - https://stackoverflow.com/a/48732525/1063961\n+        match $val {\n+            tmp => {\n+                eprintln!(\"[{}:{}] {} = {:#?}\",\n+                    file!(), line!(), stringify!($val), &tmp);\n+                tmp\n+            }\n+        }\n+    }\n+}\n+\n #[macro_export]\n #[unstable(feature = \"await_macro\", issue = \"50547\")]\n #[allow_internal_unstable]"}]}