{"sha": "b7a78729100aa2068827e5812aec03abd3a5df9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YTc4NzI5MTAwYWEyMDY4ODI3ZTU4MTJhZWMwM2FiZDNhNWRmOWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T18:34:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T18:34:38Z"}, "message": "move more code to presentation", "tree": {"sha": "e2607e8a806a1c54a8e9f54a0def129fa9ecd5d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2607e8a806a1c54a8e9f54a0def129fa9ecd5d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7a78729100aa2068827e5812aec03abd3a5df9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a78729100aa2068827e5812aec03abd3a5df9a", "html_url": "https://github.com/rust-lang/rust/commit/b7a78729100aa2068827e5812aec03abd3a5df9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7a78729100aa2068827e5812aec03abd3a5df9a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a650a93bf5d0217e6f366ffc91ca8b25bfd37be4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a650a93bf5d0217e6f366ffc91ca8b25bfd37be4", "html_url": "https://github.com/rust-lang/rust/commit/a650a93bf5d0217e6f366ffc91ca8b25bfd37be4"}], "stats": {"total": 145, "additions": 57, "deletions": 88}, "files": [{"sha": "cb880d92cc397d349673fa021da6e19fab5328bc", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 1, "deletions": 72, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/b7a78729100aa2068827e5812aec03abd3a5df9a/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a78729100aa2068827e5812aec03abd3a5df9a/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=b7a78729100aa2068827e5812aec03abd3a5df9a", "patch": "@@ -1,13 +1,11 @@\n use std::fmt;\n \n-use hir::{Docs, Documentation, PerNs, Resolution};\n+use hir::{Docs, Documentation};\n use ra_syntax::TextRange;\n use ra_text_edit::{ TextEditBuilder, TextEdit};\n-use test_utils::tested_by;\n \n use crate::completion::{\n     completion_context::CompletionContext,\n-    function_label,\n     const_label,\n     type_label\n };\n@@ -255,70 +253,6 @@ impl Builder {\n         self.documentation = docs.map(Into::into);\n         self\n     }\n-    pub(super) fn from_resolution(\n-        mut self,\n-        ctx: &CompletionContext,\n-        resolution: &PerNs<Resolution>,\n-    ) -> Builder {\n-        use hir::ModuleDef::*;\n-\n-        let def = resolution.as_ref().take_types().or_else(|| resolution.as_ref().take_values());\n-        let def = match def {\n-            None => return self,\n-            Some(it) => it,\n-        };\n-        let (kind, docs) = match def {\n-            Resolution::Def(Module(it)) => (CompletionItemKind::Module, it.docs(ctx.db)),\n-            Resolution::Def(Function(func)) => return self.from_function(ctx, *func),\n-            Resolution::Def(Struct(it)) => (CompletionItemKind::Struct, it.docs(ctx.db)),\n-            Resolution::Def(Enum(it)) => (CompletionItemKind::Enum, it.docs(ctx.db)),\n-            Resolution::Def(EnumVariant(it)) => (CompletionItemKind::EnumVariant, it.docs(ctx.db)),\n-            Resolution::Def(Const(it)) => (CompletionItemKind::Const, it.docs(ctx.db)),\n-            Resolution::Def(Static(it)) => (CompletionItemKind::Static, it.docs(ctx.db)),\n-            Resolution::Def(Trait(it)) => (CompletionItemKind::Trait, it.docs(ctx.db)),\n-            Resolution::Def(Type(it)) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n-            Resolution::GenericParam(..) => (CompletionItemKind::TypeParam, None),\n-            Resolution::LocalBinding(..) => (CompletionItemKind::Binding, None),\n-            Resolution::SelfType(..) => (\n-                CompletionItemKind::TypeParam, // (does this need its own kind?)\n-                None,\n-            ),\n-        };\n-        self.kind = Some(kind);\n-        self.documentation = docs;\n-\n-        self\n-    }\n-\n-    pub(super) fn from_function(\n-        mut self,\n-        ctx: &CompletionContext,\n-        function: hir::Function,\n-    ) -> Builder {\n-        // If not an import, add parenthesis automatically.\n-        if ctx.use_item_syntax.is_none() && !ctx.is_call {\n-            tested_by!(inserts_parens_for_function_calls);\n-            let sig = function.signature(ctx.db);\n-            if sig.params().is_empty() || sig.has_self_param() && sig.params().len() == 1 {\n-                self.insert_text = Some(format!(\"{}()$0\", self.label));\n-            } else {\n-                self.insert_text = Some(format!(\"{}($0)\", self.label));\n-            }\n-            self.insert_text_format = InsertTextFormat::Snippet;\n-        }\n-\n-        if let Some(docs) = function.docs(ctx.db) {\n-            self.documentation = Some(docs);\n-        }\n-\n-        if let Some(label) = function_item_label(ctx, function) {\n-            self.detail = Some(label);\n-        }\n-\n-        self.kind = Some(CompletionItemKind::Function);\n-        self\n-    }\n-\n     pub(super) fn from_const(mut self, ctx: &CompletionContext, ct: hir::Const) -> Builder {\n         if let Some(docs) = ct.docs(ctx.db) {\n             self.documentation = Some(docs);\n@@ -373,11 +307,6 @@ impl Into<Vec<CompletionItem>> for Completions {\n     }\n }\n \n-fn function_item_label(ctx: &CompletionContext, function: hir::Function) -> Option<String> {\n-    let node = function.source(ctx.db).1;\n-    function_label(&node)\n-}\n-\n fn const_item_label(ctx: &CompletionContext, ct: hir::Const) -> String {\n     let node = ct.source(ctx.db).1;\n     const_label(&node)"}, {"sha": "d386288ed5e0ef4bc059df1d51f070cddcd3075f", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 56, "deletions": 16, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b7a78729100aa2068827e5812aec03abd3a5df9a/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a78729100aa2068827e5812aec03abd3a5df9a/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=b7a78729100aa2068827e5812aec03abd3a5df9a", "patch": "@@ -38,28 +38,68 @@ impl Completions {\n         &mut self,\n         ctx: &CompletionContext,\n         local_name: String,\n-        res: &PerNs<Resolution>,\n+        resolution: &PerNs<Resolution>,\n     ) {\n+        use hir::ModuleDef::*;\n+\n+        let def = resolution.as_ref().take_types().or_else(|| resolution.as_ref().take_values());\n+        let def = match def {\n+            None => {\n+                self.add(CompletionItem::new(\n+                    CompletionKind::Reference,\n+                    ctx.source_range(),\n+                    local_name,\n+                ));\n+                return;\n+            }\n+            Some(it) => it,\n+        };\n+        let (kind, docs) = match def {\n+            Resolution::Def(Module(it)) => (CompletionItemKind::Module, it.docs(ctx.db)),\n+            Resolution::Def(Function(func)) => {\n+                return self.add_function_with_name(ctx, Some(local_name), *func);\n+            }\n+            Resolution::Def(Struct(it)) => (CompletionItemKind::Struct, it.docs(ctx.db)),\n+            Resolution::Def(Enum(it)) => (CompletionItemKind::Enum, it.docs(ctx.db)),\n+            Resolution::Def(EnumVariant(it)) => (CompletionItemKind::EnumVariant, it.docs(ctx.db)),\n+            Resolution::Def(Const(it)) => (CompletionItemKind::Const, it.docs(ctx.db)),\n+            Resolution::Def(Static(it)) => (CompletionItemKind::Static, it.docs(ctx.db)),\n+            Resolution::Def(Trait(it)) => (CompletionItemKind::Trait, it.docs(ctx.db)),\n+            Resolution::Def(Type(it)) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n+            Resolution::GenericParam(..) => (CompletionItemKind::TypeParam, None),\n+            Resolution::LocalBinding(..) => (CompletionItemKind::Binding, None),\n+            Resolution::SelfType(..) => (\n+                CompletionItemKind::TypeParam, // (does this need its own kind?)\n+                None,\n+            ),\n+        };\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), local_name)\n-            .from_resolution(ctx, res)\n-            .add_to(self);\n+            .kind(kind)\n+            .set_documentation(docs)\n+            .add_to(self)\n     }\n \n     pub(crate) fn add_function(&mut self, ctx: &CompletionContext, func: hir::Function) {\n-        let sig = func.signature(ctx.db);\n+        self.add_function_with_name(ctx, None, func)\n+    }\n \n-        let mut builder = CompletionItem::new(\n-            CompletionKind::Reference,\n-            ctx.source_range(),\n-            sig.name().to_string(),\n-        )\n-        .kind(if sig.has_self_param() {\n-            CompletionItemKind::Method\n-        } else {\n-            CompletionItemKind::Function\n-        })\n-        .set_documentation(func.docs(ctx.db))\n-        .set_detail(function_item_label(ctx, func));\n+    fn add_function_with_name(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        name: Option<String>,\n+        func: hir::Function,\n+    ) {\n+        let sig = func.signature(ctx.db);\n+        let name = name.unwrap_or_else(|| sig.name().to_string());\n+\n+        let mut builder = CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name)\n+            .kind(if sig.has_self_param() {\n+                CompletionItemKind::Method\n+            } else {\n+                CompletionItemKind::Function\n+            })\n+            .set_documentation(func.docs(ctx.db))\n+            .set_detail(function_item_label(ctx, func));\n         // If not an import, add parenthesis automatically.\n         if ctx.use_item_syntax.is_none() && !ctx.is_call {\n             tested_by!(inserts_parens_for_function_calls);"}]}