{"sha": "71f7d82e45145281b9aec5bcdc694524864e552b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZjdkODJlNDUxNDUyODFiOWFlYzViY2RjNjk0NTI0ODY0ZTU1MmI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-06T22:57:39Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-06T23:05:19Z"}, "message": "Introduce ArenaMap", "tree": {"sha": "dab214dd290cfb87c85b56b478a477eeaf4edc6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dab214dd290cfb87c85b56b478a477eeaf4edc6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71f7d82e45145281b9aec5bcdc694524864e552b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71f7d82e45145281b9aec5bcdc694524864e552b", "html_url": "https://github.com/rust-lang/rust/commit/71f7d82e45145281b9aec5bcdc694524864e552b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71f7d82e45145281b9aec5bcdc694524864e552b/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf49a11263c4d48720250db0c448b97dbec3d8b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf49a11263c4d48720250db0c448b97dbec3d8b9", "html_url": "https://github.com/rust-lang/rust/commit/cf49a11263c4d48720250db0c448b97dbec3d8b9"}], "stats": {"total": 122, "additions": 97, "deletions": 25}, "files": [{"sha": "040977dc472f62a1ff1bd3c3d6deae65442973d0", "filename": "crates/ra_arena/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f7d82e45145281b9aec5bcdc694524864e552b/crates%2Fra_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f7d82e45145281b9aec5bcdc694524864e552b/crates%2Fra_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_arena%2Fsrc%2Flib.rs?ref=71f7d82e45145281b9aec5bcdc694524864e552b", "patch": "@@ -6,6 +6,8 @@ use std::{\n     ops::{Index, IndexMut},\n };\n \n+pub mod map;\n+\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct RawId(u32);\n "}, {"sha": "2f09d677f1aa66c037a776f79f130fc4129513da", "filename": "crates/ra_arena/src/map.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/71f7d82e45145281b9aec5bcdc694524864e552b/crates%2Fra_arena%2Fsrc%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f7d82e45145281b9aec5bcdc694524864e552b/crates%2Fra_arena%2Fsrc%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_arena%2Fsrc%2Fmap.rs?ref=71f7d82e45145281b9aec5bcdc694524864e552b", "patch": "@@ -0,0 +1,70 @@\n+//! A map from arena IDs to some other type. Space requirement is O(highest ID).\n+\n+use std::marker::PhantomData;\n+\n+use super::ArenaId;\n+\n+/// A map from arena IDs to some other type. Space requirement is O(highest ID).\n+#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct ArenaMap<ID, T> {\n+    v: Vec<Option<T>>,\n+    _ty: PhantomData<ID>,\n+}\n+\n+impl<ID: ArenaId, T> ArenaMap<ID, T> {\n+    pub fn insert(&mut self, id: ID, t: T) {\n+        let idx = Self::to_idx(id);\n+        if self.v.capacity() <= idx {\n+            self.v.reserve(idx + 1 - self.v.capacity());\n+        }\n+        if self.v.len() <= idx {\n+            while self.v.len() <= idx {\n+                self.v.push(None);\n+            }\n+        }\n+        self.v[idx] = Some(t);\n+    }\n+\n+    pub fn get(&self, id: ID) -> Option<&T> {\n+        self.v.get(Self::to_idx(id)).and_then(|it| it.as_ref())\n+    }\n+\n+    pub fn values(&self) -> impl Iterator<Item = &T> {\n+        self.v.iter().filter_map(|o| o.as_ref())\n+    }\n+\n+    pub fn values_mut(&mut self) -> impl Iterator<Item = &mut T> {\n+        self.v.iter_mut().filter_map(|o| o.as_mut())\n+    }\n+\n+    pub fn iter(&self) -> impl Iterator<Item = (ID, &T)> {\n+        self.v\n+            .iter()\n+            .enumerate()\n+            .filter_map(|(idx, o)| Some((Self::from_idx(idx), o.as_ref()?)))\n+    }\n+\n+    fn to_idx(id: ID) -> usize {\n+        u32::from(id.into_raw()) as usize\n+    }\n+\n+    fn from_idx(idx: usize) -> ID {\n+        ID::from_raw((idx as u32).into())\n+    }\n+}\n+\n+impl<ID: ArenaId, T> std::ops::Index<ID> for ArenaMap<ID, T> {\n+    type Output = T;\n+    fn index(&self, id: ID) -> &T {\n+        self.v[Self::to_idx(id)].as_ref().unwrap()\n+    }\n+}\n+\n+impl<ID, T> Default for ArenaMap<ID, T> {\n+    fn default() -> Self {\n+        ArenaMap {\n+            v: Vec::new(),\n+            _ty: PhantomData,\n+        }\n+    }\n+}"}, {"sha": "69144e94f992f470032f8c5406f54c60a058d98a", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/71f7d82e45145281b9aec5bcdc694524864e552b/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f7d82e45145281b9aec5bcdc694524864e552b/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=71f7d82e45145281b9aec5bcdc694524864e552b", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n \n use rustc_hash::FxHashMap;\n \n-use ra_arena::{Arena, RawId, impl_arena_id};\n+use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n use ra_db::{LocalSyntaxPtr, Cancelable};\n use ra_syntax::{SyntaxNodeRef, ast::{self, AstNode, LoopBodyOwner, ArgListOwner, NameOwner}};\n \n@@ -39,9 +39,9 @@ pub struct Body {\n pub struct BodySyntaxMapping {\n     body: Arc<Body>,\n     expr_syntax_mapping: FxHashMap<LocalSyntaxPtr, ExprId>,\n-    expr_syntax_mapping_back: FxHashMap<ExprId, LocalSyntaxPtr>,\n+    expr_syntax_mapping_back: ArenaMap<ExprId, LocalSyntaxPtr>,\n     pat_syntax_mapping: FxHashMap<LocalSyntaxPtr, PatId>,\n-    pat_syntax_mapping_back: FxHashMap<PatId, LocalSyntaxPtr>,\n+    pat_syntax_mapping_back: ArenaMap<PatId, LocalSyntaxPtr>,\n }\n \n impl Body {\n@@ -72,7 +72,7 @@ impl Index<PatId> for Body {\n \n impl BodySyntaxMapping {\n     pub fn expr_syntax(&self, expr: ExprId) -> Option<LocalSyntaxPtr> {\n-        self.expr_syntax_mapping_back.get(&expr).cloned()\n+        self.expr_syntax_mapping_back.get(expr).cloned()\n     }\n     pub fn syntax_expr(&self, ptr: LocalSyntaxPtr) -> Option<ExprId> {\n         self.expr_syntax_mapping.get(&ptr).cloned()\n@@ -83,7 +83,7 @@ impl BodySyntaxMapping {\n             .cloned()\n     }\n     pub fn pat_syntax(&self, pat: PatId) -> Option<LocalSyntaxPtr> {\n-        self.pat_syntax_mapping_back.get(&pat).cloned()\n+        self.pat_syntax_mapping_back.get(pat).cloned()\n     }\n     pub fn syntax_pat(&self, ptr: LocalSyntaxPtr) -> Option<PatId> {\n         self.pat_syntax_mapping.get(&ptr).cloned()\n@@ -334,9 +334,9 @@ struct ExprCollector {\n     exprs: Arena<ExprId, Expr>,\n     pats: Arena<PatId, Pat>,\n     expr_syntax_mapping: FxHashMap<LocalSyntaxPtr, ExprId>,\n-    expr_syntax_mapping_back: FxHashMap<ExprId, LocalSyntaxPtr>,\n+    expr_syntax_mapping_back: ArenaMap<ExprId, LocalSyntaxPtr>,\n     pat_syntax_mapping: FxHashMap<LocalSyntaxPtr, PatId>,\n-    pat_syntax_mapping_back: FxHashMap<PatId, LocalSyntaxPtr>,\n+    pat_syntax_mapping_back: ArenaMap<PatId, LocalSyntaxPtr>,\n }\n \n impl ExprCollector {\n@@ -345,9 +345,9 @@ impl ExprCollector {\n             exprs: Arena::default(),\n             pats: Arena::default(),\n             expr_syntax_mapping: FxHashMap::default(),\n-            expr_syntax_mapping_back: FxHashMap::default(),\n+            expr_syntax_mapping_back: ArenaMap::default(),\n             pat_syntax_mapping: FxHashMap::default(),\n-            pat_syntax_mapping_back: FxHashMap::default(),\n+            pat_syntax_mapping_back: ArenaMap::default(),\n         }\n     }\n "}, {"sha": "d57990cd202a5504bab6250ce78b5a7f7174acec", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/71f7d82e45145281b9aec5bcdc694524864e552b/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f7d82e45145281b9aec5bcdc694524864e552b/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=71f7d82e45145281b9aec5bcdc694524864e552b", "patch": "@@ -22,8 +22,8 @@ use std::sync::Arc;\n use std::{fmt, mem};\n \n use log;\n-use rustc_hash::FxHashMap;\n use ena::unify::{InPlaceUnificationTable, UnifyKey, UnifyValue, NoError};\n+use ra_arena::map::ArenaMap;\n \n use ra_db::Cancelable;\n \n@@ -470,23 +470,23 @@ pub(super) fn type_for_field(db: &impl HirDatabase, def_id: DefId, field: Name)\n /// The result of type inference: A mapping from expressions and patterns to types.\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct InferenceResult {\n-    type_of_expr: FxHashMap<ExprId, Ty>,\n-    type_of_pat: FxHashMap<PatId, Ty>,\n+    type_of_expr: ArenaMap<ExprId, Ty>,\n+    type_of_pat: ArenaMap<PatId, Ty>,\n }\n \n impl Index<ExprId> for InferenceResult {\n     type Output = Ty;\n \n     fn index(&self, expr: ExprId) -> &Ty {\n-        self.type_of_expr.get(&expr).unwrap_or(&Ty::Unknown)\n+        self.type_of_expr.get(expr).unwrap_or(&Ty::Unknown)\n     }\n }\n \n impl Index<PatId> for InferenceResult {\n     type Output = Ty;\n \n     fn index(&self, pat: PatId) -> &Ty {\n-        self.type_of_pat.get(&pat).unwrap_or(&Ty::Unknown)\n+        self.type_of_pat.get(pat).unwrap_or(&Ty::Unknown)\n     }\n }\n \n@@ -499,8 +499,8 @@ struct InferenceContext<'a, D: HirDatabase> {\n     module: Module,\n     impl_block: Option<ImplBlock>,\n     var_unification_table: InPlaceUnificationTable<TypeVarId>,\n-    type_of_expr: FxHashMap<ExprId, Ty>,\n-    type_of_pat: FxHashMap<PatId, Ty>,\n+    type_of_expr: ArenaMap<ExprId, Ty>,\n+    type_of_pat: ArenaMap<PatId, Ty>,\n     /// The return type of the function being inferred.\n     return_ty: Ty,\n }\n@@ -528,8 +528,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         impl_block: Option<ImplBlock>,\n     ) -> Self {\n         InferenceContext {\n-            type_of_expr: FxHashMap::default(),\n-            type_of_pat: FxHashMap::default(),\n+            type_of_expr: ArenaMap::default(),\n+            type_of_pat: ArenaMap::default(),\n             var_unification_table: InPlaceUnificationTable::new(),\n             return_ty: Ty::Unknown, // set in collect_fn_signature\n             db,\n@@ -541,12 +541,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn resolve_all(mut self) -> InferenceResult {\n-        let mut expr_types = mem::replace(&mut self.type_of_expr, FxHashMap::default());\n+        let mut expr_types = mem::replace(&mut self.type_of_expr, ArenaMap::default());\n         for ty in expr_types.values_mut() {\n             let resolved = self.resolve_ty_completely(mem::replace(ty, Ty::Unknown));\n             *ty = resolved;\n         }\n-        let mut pat_types = mem::replace(&mut self.type_of_pat, FxHashMap::default());\n+        let mut pat_types = mem::replace(&mut self.type_of_pat, ArenaMap::default());\n         for ty in pat_types.values_mut() {\n             let resolved = self.resolve_ty_completely(mem::replace(ty, Ty::Unknown));\n             *ty = resolved;\n@@ -666,7 +666,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             // resolve locally\n             let name = path.as_ident().cloned().unwrap_or_else(Name::self_param);\n             if let Some(scope_entry) = self.scopes.resolve_local_name(expr, name) {\n-                let ty = ctry!(self.type_of_pat.get(&scope_entry.pat()));\n+                let ty = ctry!(self.type_of_pat.get(scope_entry.pat()));\n                 let ty = self.resolve_ty_as_possible(ty.clone());\n                 return Ok(Some(ty));\n             };"}, {"sha": "030a20f1b71fe0e09a19f53e08b79bc3ad7a784f", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71f7d82e45145281b9aec5bcdc694524864e552b/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f7d82e45145281b9aec5bcdc694524864e552b/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=71f7d82e45145281b9aec5bcdc694524864e552b", "patch": "@@ -195,16 +195,16 @@ fn infer(content: &str) -> String {\n         let inference_result = func.infer(&db).unwrap();\n         let body_syntax_mapping = func.body_syntax_mapping(&db).unwrap();\n         let mut types = Vec::new();\n-        for (pat, ty) in &inference_result.type_of_pat {\n-            let syntax_ptr = if let Some(sp) = body_syntax_mapping.pat_syntax(*pat) {\n+        for (pat, ty) in inference_result.type_of_pat.iter() {\n+            let syntax_ptr = if let Some(sp) = body_syntax_mapping.pat_syntax(pat) {\n                 sp\n             } else {\n                 continue;\n             };\n             types.push((syntax_ptr, ty));\n         }\n-        for (expr, ty) in &inference_result.type_of_expr {\n-            let syntax_ptr = if let Some(sp) = body_syntax_mapping.expr_syntax(*expr) {\n+        for (expr, ty) in inference_result.type_of_expr.iter() {\n+            let syntax_ptr = if let Some(sp) = body_syntax_mapping.expr_syntax(expr) {\n                 sp\n             } else {\n                 continue;"}]}