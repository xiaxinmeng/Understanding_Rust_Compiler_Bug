{"sha": "b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "node_id": "C_kwDOAAsO6NoAKGIxNDMwZmI3Y2E0OTlkNTE3ZDlmNGIzYjZjNWE4MTQ0MjEyOWM4OGI", "commit": {"author": {"name": "Dezhi Wu", "email": "wu543065657@163.com", "date": "2022-08-18T02:13:37Z"}, "committer": {"name": "Dezhi Wu", "email": "wu543065657@163.com", "date": "2022-08-31T10:24:55Z"}, "message": "Fix a bunch of typo\n\nThis PR will fix some typos detected by [typos].\n\nI only picked the ones I was sure were spelling errors to fix, mostly in\nthe comments.\n\n[typos]: https://github.com/crate-ci/typos", "tree": {"sha": "ff8f7fbd60789774143168b08862f8edfdcf8526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff8f7fbd60789774143168b08862f8edfdcf8526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "html_url": "https://github.com/rust-lang/rust/commit/b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/comments", "author": {"login": "dzvon", "id": 3402811, "node_id": "MDQ6VXNlcjM0MDI4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3402811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzvon", "html_url": "https://github.com/dzvon", "followers_url": "https://api.github.com/users/dzvon/followers", "following_url": "https://api.github.com/users/dzvon/following{/other_user}", "gists_url": "https://api.github.com/users/dzvon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzvon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzvon/subscriptions", "organizations_url": "https://api.github.com/users/dzvon/orgs", "repos_url": "https://api.github.com/users/dzvon/repos", "events_url": "https://api.github.com/users/dzvon/events{/privacy}", "received_events_url": "https://api.github.com/users/dzvon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dzvon", "id": 3402811, "node_id": "MDQ6VXNlcjM0MDI4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3402811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzvon", "html_url": "https://github.com/dzvon", "followers_url": "https://api.github.com/users/dzvon/followers", "following_url": "https://api.github.com/users/dzvon/following{/other_user}", "gists_url": "https://api.github.com/users/dzvon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzvon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzvon/subscriptions", "organizations_url": "https://api.github.com/users/dzvon/orgs", "repos_url": "https://api.github.com/users/dzvon/repos", "events_url": "https://api.github.com/users/dzvon/events{/privacy}", "received_events_url": "https://api.github.com/users/dzvon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f442f8ba174fd4233a14ef4d7b577aa907db594", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f442f8ba174fd4233a14ef4d7b577aa907db594", "html_url": "https://github.com/rust-lang/rust/commit/7f442f8ba174fd4233a14ef4d7b577aa907db594"}], "stats": {"total": 342, "additions": 171, "deletions": 171}, "files": [{"sha": "5de300394178efaf978f59537a9b05dfbf71c7b2", "filename": "RELEASES.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1442,7 +1442,7 @@ Compatibility Notes\n - [Mixing Option and Result via `?` is no longer permitted in closures for inferred types.][86831]\n - [Previously unsound code is no longer permitted where different constructors in branches\n   could require different lifetimes.][85574]\n-- As previously mentioned the [`std::arch` instrinsics now uses stricter const checking][83278]\n+- As previously mentioned the [`std::arch` intrinsic now uses stricter const checking][83278]\n   than before and may reject some previously accepted code.\n - [`i128` multiplication on Cortex M0+ platforms currently unconditionally causes overflow\n    when compiled with `codegen-units = 1`.][86063]\n@@ -2520,7 +2520,7 @@ Compatibility Notes\n - [Fixed a regression parsing `{} && false` in tail expressions.][74650]\n - [Added changes to how proc-macros are expanded in `macro_rules!` that should\n   help to preserve more span information.][73084] These changes may cause\n-  compiliation errors if your macro was unhygenic or didn't correctly handle\n+  compilation errors if your macro was unhygenic or didn't correctly handle\n   `Delimiter::None`.\n - [Moved support for the CloudABI target to tier 3.][75568]\n - [`linux-gnu` targets now require minimum kernel 2.6.32 and glibc 2.11.][74163]"}, {"sha": "3604a85367ab6986c1172175e21e75efd6194175", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1177,7 +1177,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     ) -> hir::Ty<'hir> {\n         // Check whether we should interpret this as a bare trait object.\n         // This check mirrors the one in late resolution.  We only introduce this special case in\n-        // the rare occurence we need to lower `Fresh` anonymous lifetimes.\n+        // the rare occurrence we need to lower `Fresh` anonymous lifetimes.\n         // The other cases when a qpath should be opportunistically made a trait object are handled\n         // by `ty_path`.\n         if qself.is_none()"}, {"sha": "23464bf0a5a283e50039bf38ba77f2e9e741d673", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1800,7 +1800,7 @@ pub(crate) enum ForbiddenLetReason {\n     NotSupportedOr(Span),\n     /// A let chain with invalid parentheses\n     ///\n-    /// For exemple, `let 1 = 1 && (expr && expr)` is allowed\n+    /// For example, `let 1 = 1 && (expr && expr)` is allowed\n     /// but `(let 1 = 1 && (let 1 = 1 && (let 1 = 1))) && let a = 1` is not\n     NotSupportedParentheses(Span),\n }"}, {"sha": "0497c2570e6228b3984b639805ebbdef0bd6d07b", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -342,7 +342,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n \n     let ret_place = codegen_place(fx, destination);\n \n-    // Handle special calls like instrinsics and empty drop glue.\n+    // Handle special calls like intrinsics and empty drop glue.\n     let instance = if let ty::FnDef(def_id, substs) = *fn_ty.kind() {\n         let instance = ty::Instance::resolve(fx.tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n             .unwrap()"}, {"sha": "9224f499339cbd8e14cf6d5d75e8adaf608362a0", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -59,7 +59,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n                         ErrorHandled::TooGeneric => {\n                             span_bug!(\n                                 constant.span,\n-                                \"codgen encountered polymorphic constant: {:?}\",\n+                                \"codegen encountered polymorphic constant: {:?}\",\n                                 err\n                             );\n                         }"}, {"sha": "4aeb1e3aab95334f97c33398923ab7b57e43c44f", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -203,7 +203,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             sym::transmute => {\n                 crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", source_info);\n             }\n-            _ => unimplemented!(\"unsupported instrinsic {}\", intrinsic),\n+            _ => unimplemented!(\"unsupported intrinsics {}\", intrinsic),\n         }\n         return;\n     };"}, {"sha": "8d7e2c5cf3939a5cc5d907751f18ba1c94df1355", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -540,7 +540,7 @@ pub fn linking_symbol_name_for_instance_in_crate<'tcx>(\n         .map(|fnabi| (fnabi.conv, &fnabi.args[..]))\n         .unwrap_or((Conv::Rust, &[]));\n \n-    // Decorate symbols with prefices, suffices and total number of bytes of arguments.\n+    // Decorate symbols with prefixes, suffixes and total number of bytes of arguments.\n     // Reference: https://docs.microsoft.com/en-us/cpp/build/reference/decorated-names?view=msvc-170\n     let (prefix, suffix) = match conv {\n         Conv::X86Fastcall => (\"@\", \"@\"),"}, {"sha": "2b931bfc91d63b05c93717a42b522d87a9a4b127", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -191,7 +191,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                 // errored or at least linted\n                 ErrorHandled::Reported(_) | ErrorHandled::Linted => {}\n                 ErrorHandled::TooGeneric => {\n-                    span_bug!(const_.span, \"codgen encountered polymorphic constant: {:?}\", err)\n+                    span_bug!(const_.span, \"codegen encountered polymorphic constant: {:?}\", err)\n                 }\n             }\n         }"}, {"sha": "adda9639990d0e38934100bce1856cb15c67c518", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -320,7 +320,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let (a_offset, b_offset) =\n                     match (self.ptr_try_get_alloc_id(a), self.ptr_try_get_alloc_id(b)) {\n                         (Err(a), Err(b)) => {\n-                            // Neither poiner points to an allocation.\n+                            // Neither pointer points to an allocation.\n                             // If these are inequal or null, this *will* fail the deref check below.\n                             (a, b)\n                         }"}, {"sha": "ed155fbfef087e3fab4b188b53efcda489cc295b", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -437,7 +437,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         msg,\n                     })\n                 }\n-                // Ensure we never consider the null pointer dereferencable.\n+                // Ensure we never consider the null pointer dereferenceable.\n                 if M::Provenance::OFFSET_IS_ADDR {\n                     assert_ne!(ptr.addr(), Size::ZERO);\n                 }\n@@ -914,7 +914,7 @@ impl<'tcx, 'a, Prov: Provenance, Extra> AllocRefMut<'a, 'tcx, Prov, Extra> {\n         self.write_scalar(alloc_range(offset, self.tcx.data_layout().pointer_size), val)\n     }\n \n-    /// Mark the entire referenced range as uninitalized\n+    /// Mark the entire referenced range as uninitialized\n     pub fn write_uninit(&mut self) -> InterpResult<'tcx> {\n         Ok(self\n             .alloc"}, {"sha": "77da8f1041eeaf961e70e661ba911878e265a35c", "filename": "compiler/rustc_const_eval/src/interpret/projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,6 +1,6 @@\n //! This file implements \"place projections\"; basically a symmetric API for 3 types: MPlaceTy, OpTy, PlaceTy.\n //!\n-//! OpTy and PlaceTy genrally work by \"let's see if we are actually an MPlaceTy, and do something custom if not\".\n+//! OpTy and PlaceTy generally work by \"let's see if we are actually an MPlaceTy, and do something custom if not\".\n //! For PlaceTy, the custom thing is basically always to call `force_allocation` and then use the MPlaceTy logic anyway.\n //! For OpTy, the custom thing on field pojections has to be pretty clever (since `Operand::Immediate` can have fields),\n //! but for array/slice operations it only has to worry about `Operand::Uninit`. That makes the value part trivial,"}, {"sha": "ea366eba77245b90ec7a44dad831c7a3c68d60b4", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -217,7 +217,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // When comparing the PassMode, we have to be smart about comparing the attributes.\n         let arg_attr_compat = |a1: &ArgAttributes, a2: &ArgAttributes| {\n             // There's only one regular attribute that matters for the call ABI: InReg.\n-            // Everything else is things like noalias, dereferencable, nonnull, ...\n+            // Everything else is things like noalias, dereferenceable, nonnull, ...\n             // (This also applies to pointee_size, pointee_align.)\n             if a1.regular.contains(ArgAttribute::InReg) != a2.regular.contains(ArgAttribute::InReg)\n             {\n@@ -556,7 +556,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     .tcx\n                     .struct_tail_erasing_lifetimes(receiver_place.layout.ty, self.param_env);\n                 let ty::Dynamic(data, ..) = receiver_tail.kind() else {\n-                    span_bug!(self.cur_span(), \"dyanmic call on non-`dyn` type {}\", receiver_tail)\n+                    span_bug!(self.cur_span(), \"dynamic call on non-`dyn` type {}\", receiver_tail)\n                 };\n \n                 // Get the required information from the vtable."}, {"sha": "cab23b7241ffc2ea2649103b83552c091d00119a", "filename": "compiler/rustc_const_eval/src/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -32,7 +32,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(vtable_ptr.into())\n     }\n \n-    /// Returns a high-level representation of the entires of the given vtable.\n+    /// Returns a high-level representation of the entries of the given vtable.\n     pub fn get_vtable_entries(\n         &self,\n         vtable: Pointer<Option<M::Provenance>>,"}, {"sha": "a39178016ce20617dda20a517959ae7843ade27b", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -29,7 +29,7 @@ impl Fingerprint {\n         // quality hash values, let's still combine the two values because the\n         // Fingerprints in DefPathHash have the StableCrateId portion which is\n         // the same for all DefPathHashes from the same crate. Combining the\n-        // two halfs makes sure we get a good quality hash in such cases too.\n+        // two halves makes sure we get a good quality hash in such cases too.\n         self.0.wrapping_mul(3).wrapping_add(self.1)\n     }\n \n@@ -120,7 +120,7 @@ impl FingerprintHasher for crate::unhash::Unhasher {\n         // quality hash values, let's still combine the two values because the\n         // Fingerprints in DefPathHash have the StableCrateId portion which is\n         // the same for all DefPathHashes from the same crate. Combining the\n-        // two halfs makes sure we get a good quality hash in such cases too.\n+        // two halves makes sure we get a good quality hash in such cases too.\n         //\n         // Since `Unhasher` is used only in the context of HashMaps, it is OK\n         // to combine the two components in an order-independent way (which is"}, {"sha": "c8bdc39311c6550c7c206eb0b24e6bc1fc099b22", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -430,7 +430,7 @@ impl TtParser {\n                     }\n                 }\n                 MatcherLoc::Delimited => {\n-                    // Entering the delimeter is trivial.\n+                    // Entering the delimiter is trivial.\n                     mp.idx += 1;\n                     self.cur_mps.push(mp);\n                 }"}, {"sha": "86dbd33a221f81c08b9d9ff6072814c411c69e90", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -976,7 +976,7 @@ impl<'tt> TokenSet<'tt> {\n         self.maybe_empty = false;\n     }\n \n-    // Adds `tok` to the set for `self`, marking sequence as non-empy.\n+    // Adds `tok` to the set for `self`, marking sequence as non-empty.\n     fn add_one(&mut self, tt: TtHandle<'tt>) {\n         if !self.tokens.contains(&tt) {\n             self.tokens.push(tt);"}, {"sha": "b34ab15efe89e13eb3812e1fc611a60f1fea0797", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -173,7 +173,7 @@ impl MultiItemModifier for DeriveProcMacro {\n \n         // fail if there have been errors emitted\n         if ecx.sess.parse_sess.span_diagnostic.err_count() > error_count_before {\n-            ecx.struct_span_err(span, \"proc-macro derive produced unparseable tokens\").emit();\n+            ecx.struct_span_err(span, \"proc-macro derive produced unparsable tokens\").emit();\n         }\n \n         ExpandResult::Ready(items)"}, {"sha": "91a05367eee0242565e6cda3d03e4731e55d2a1a", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -199,7 +199,7 @@ fn ty_to_string<'tcx>(infcx: &InferCtxt<'_, 'tcx>, ty: Ty<'tcx>) -> String {\n }\n \n /// We don't want to directly use `ty_to_string` for closures as their type isn't really\n-/// something users are familar with. Directly printing the `fn_sig` of closures also\n+/// something users are familiar with. Directly printing the `fn_sig` of closures also\n /// doesn't work as they actually use the \"rust-call\" API.\n fn closure_as_fn_str<'tcx>(infcx: &InferCtxt<'_, 'tcx>, ty: Ty<'tcx>) -> String {\n     let ty::Closure(_, substs) = ty.kind() else { unreachable!() };"}, {"sha": "fe037a458a7f85106d756c92aef897a779552738", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1333,7 +1333,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// `resolve_vars_if_possible` as well as `fully_resolve`.\n     ///\n     /// Make sure to call [`InferCtxt::process_registered_region_obligations`]\n-    /// first, or preferrably use [`InferCtxt::check_region_obligations_and_report_errors`]\n+    /// first, or preferably use [`InferCtxt::check_region_obligations_and_report_errors`]\n     /// to do both of these operations together.\n     pub fn resolve_regions_and_report_errors(\n         &self,"}, {"sha": "611961ab1cc94afb98501fb1b205e4502af4199a", "filename": "compiler/rustc_infer/src/infer/undo_log.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -100,7 +100,7 @@ impl Default for InferCtxtUndoLogs<'_> {\n }\n \n /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any\n-/// action that is convertable into an UndoLog (per the From impls above).\n+/// action that is convertible into an UndoLog (per the From impls above).\n impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>\n where\n     UndoLog<'tcx>: From<T>,"}, {"sha": "1c6243c275c01daed80196d81a77c072ec4af099", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -176,7 +176,7 @@ pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n                                         let ident = arg.ident().expect(\"multi-segment cfg key\");\n                                         names_valid.insert(ident.name.to_string());\n                                     } else {\n-                                        error!(\"`names()` arguments must be simple identifers\");\n+                                        error!(\"`names()` arguments must be simple identifiers\");\n                                     }\n                                 }\n                                 continue 'specs;\n@@ -204,7 +204,7 @@ pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n                                         continue 'specs;\n                                     } else {\n                                         error!(\n-                                            \"`values()` first argument must be a simple identifer\"\n+                                            \"`values()` first argument must be a simple identifier\"\n                                         );\n                                     }\n                                 } else if args.is_empty() {"}, {"sha": "1f4e5b480917d556c3245beaef3e9f82d831bd8d", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -268,7 +268,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 },\n                 ty::Closure(..) => {\n                     cx.struct_span_lint(UNUSED_MUST_USE, span, |lint| {\n-                        // FIXME(davidtwco): this isn't properly translatable becauses of the\n+                        // FIXME(davidtwco): this isn't properly translatable because of the\n                         // pre/post strings\n                         lint.build(fluent::lint::unused_closure)\n                             .set_arg(\"count\", plural_len)\n@@ -281,7 +281,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 }\n                 ty::Generator(..) => {\n                     cx.struct_span_lint(UNUSED_MUST_USE, span, |lint| {\n-                        // FIXME(davidtwco): this isn't properly translatable becauses of the\n+                        // FIXME(davidtwco): this isn't properly translatable because of the\n                         // pre/post strings\n                         lint.build(fluent::lint::unused_generator)\n                             .set_arg(\"count\", plural_len)\n@@ -310,7 +310,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n         ) -> bool {\n             if let Some(attr) = cx.tcx.get_attr(def_id, sym::must_use) {\n                 cx.struct_span_lint(UNUSED_MUST_USE, span, |lint| {\n-                    // FIXME(davidtwco): this isn't properly translatable becauses of the pre/post\n+                    // FIXME(davidtwco): this isn't properly translatable because of the pre/post\n                     // strings\n                     let mut err = lint.build(fluent::lint::unused_def);\n                     err.set_arg(\"pre\", descr_pre_path);"}, {"sha": "845563338eaa992c91b1f2178783800da41c0b5e", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -3206,7 +3206,7 @@ declare_lint! {\n     /// [future-incompatible]: ../index.md#future-incompatible-lints\n     pub REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS,\n     Warn,\n-    \"tranparent type contains an external ZST that is marked #[non_exhaustive] or contains private fields\",\n+    \"transparent type contains an external ZST that is marked #[non_exhaustive] or contains private fields\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #78586 <https://github.com/rust-lang/rust/issues/78586>\",\n     };"}, {"sha": "752cbdeae6b25df2eb76ad53c4db05c3edbfb534", "filename": "compiler/rustc_middle/src/mir/basic_blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fbasic_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fbasic_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fbasic_blocks.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> BasicBlocks<'tcx> {\n     ///\n     /// You will only ever need this if you have also called [`BasicBlocks::as_mut_preserves_cfg`].\n     /// All other methods that allow you to mutate the basic blocks also call this method\n-    /// themselves, thereby avoiding any risk of accidentaly cache invalidation.\n+    /// themselves, thereby avoiding any risk of accidentally cache invalidation.\n     pub fn invalidate_cfg_cache(&mut self) {\n         self.predecessor_cache.invalidate();\n         self.switch_source_cache.invalidate();"}, {"sha": "560d9fde0492af646e4146f9960196049789d27a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1457,7 +1457,7 @@ pub struct PlaceRef<'tcx> {\n // Once we stop implementing `Ord` for `DefId`,\n // this impl will be unnecessary. Until then, we'll\n // leave this impl in place to prevent re-adding a\n-// dependnecy on the `Ord` impl for `DefId`\n+// dependency on the `Ord` impl for `DefId`\n impl<'tcx> !PartialOrd for PlaceRef<'tcx> {}\n \n impl<'tcx> Place<'tcx> {"}, {"sha": "d7b9d59eced51eee813171db11a11635a881378e", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -332,7 +332,7 @@ pub enum StatementKind<'tcx> {\n     /// First, all three operands are evaluated. `src` and `dest` must each be a reference, pointer,\n     /// or `Box` pointing to the same type `T`. `count` must evaluate to a `usize`. Then, `src` and\n     /// `dest` are dereferenced, and `count * size_of::<T>()` bytes beginning with the first byte of\n-    /// the `src` place are copied to the continguous range of bytes beginning with the first byte\n+    /// the `src` place are copied to the contiguous range of bytes beginning with the first byte\n     /// of `dest`.\n     ///\n     /// **Needs clarification**: In what order are operands computed and dereferenced? It should\n@@ -378,7 +378,7 @@ pub enum FakeReadCause {\n     /// Some(closure_def_id).\n     /// Otherwise, the value of the optional LocalDefId will be None.\n     //\n-    // We can use LocaDefId here since fake read statements are removed\n+    // We can use LocalDefId here since fake read statements are removed\n     // before codegen in the `CleanupNonCodegenStatements` pass.\n     ForMatchedPlace(Option<LocalDefId>),\n "}, {"sha": "abaef0354ade5b319f5ca9560aa19eced27113b8", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1151,7 +1151,7 @@ rustc_queries! {\n     /// Used by rustdoc.\n     query rendered_const(def_id: DefId) -> String {\n         storage(ArenaCacheSelector<'tcx>)\n-        desc { |tcx| \"rendering constant intializer of `{}`\", tcx.def_path_str(def_id) }\n+        desc { |tcx| \"rendering constant initializer of `{}`\", tcx.def_path_str(def_id) }\n         cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }"}, {"sha": "0a2819feecf0bb80a4b78f9e80d1571cc33993cf", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -115,7 +115,7 @@ impl Node {\n         matches!(self, Node::Trait(..))\n     }\n \n-    /// Trys to find the associated item that implements `trait_item_def_id`\n+    /// Tries to find the associated item that implements `trait_item_def_id`\n     /// defined in this node.\n     ///\n     /// If this returns `None`, the item can potentially still be found in"}, {"sha": "dc3f2ae20876d0d73a433c901259541f01195067", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1498,17 +1498,17 @@ impl<'tcx> TyCtxt<'tcx> {\n         // Create a dependency to the crate to be sure we re-execute this when the amount of\n         // definitions change.\n         self.ensure().hir_crate(());\n-        // Leak a read lock once we start iterating on definitions, to prevent adding new onces\n+        // Leak a read lock once we start iterating on definitions, to prevent adding new ones\n         // while iterating.  If some query needs to add definitions, it should be `ensure`d above.\n         let definitions = self.definitions.leak();\n         definitions.iter_local_def_id()\n     }\n \n     pub fn def_path_table(self) -> &'tcx rustc_hir::definitions::DefPathTable {\n-        // Create a dependency to the crate to be sure we reexcute this when the amount of\n+        // Create a dependency to the crate to be sure we re-execute this when the amount of\n         // definitions change.\n         self.ensure().hir_crate(());\n-        // Leak a read lock once we start iterating on definitions, to prevent adding new onces\n+        // Leak a read lock once we start iterating on definitions, to prevent adding new ones\n         // while iterating.  If some query needs to add definitions, it should be `ensure`d above.\n         let definitions = self.definitions.leak();\n         definitions.def_path_table()\n@@ -1517,10 +1517,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn def_path_hash_to_def_index_map(\n         self,\n     ) -> &'tcx rustc_hir::def_path_hash_map::DefPathHashMap {\n-        // Create a dependency to the crate to be sure we reexcute this when the amount of\n+        // Create a dependency to the crate to be sure we re-execute this when the amount of\n         // definitions change.\n         self.ensure().hir_crate(());\n-        // Leak a read lock once we start iterating on definitions, to prevent adding new onces\n+        // Leak a read lock once we start iterating on definitions, to prevent adding new ones\n         // while iterating.  If some query needs to add definitions, it should be `ensure`d above.\n         let definitions = self.definitions.leak();\n         definitions.def_path_hash_to_def_index_map()"}, {"sha": "a1d980af921afeb05590a6ae722dc0436146dbb5", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -266,7 +266,7 @@ impl<'tcx> Generics {\n         // Filter the default arguments.\n         //\n         // This currently uses structural equality instead\n-        // of semantic equivalance. While not ideal, that's\n+        // of semantic equivalence. While not ideal, that's\n         // good enough for now as this should only be used\n         // for diagnostics anyways.\n         own_params.end -= self"}, {"sha": "26b60e4f33988b4885dac0fc0d7cfb7a23fc549f", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -756,7 +756,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 // * the element type and length of the single array field, if\n                 // the first field is of array type, or\n                 //\n-                // * the homogenous field type and the number of fields.\n+                // * the homogeneous field type and the number of fields.\n                 let (e_ty, e_len, is_array) = if let ty::Array(e_ty, _) = f0_ty.kind() {\n                     // First ADT field is an array:\n "}, {"sha": "2ca6d7628466229c1ea5db3c678d47397d98aa45", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -702,7 +702,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let local_id = self.var_local_id(var, for_guard);\n         let source_info = self.source_info(span);\n         self.cfg.push(block, Statement { source_info, kind: StatementKind::StorageLive(local_id) });\n-        // Altough there is almost always scope for given variable in corner cases\n+        // Although there is almost always scope for given variable in corner cases\n         // like #92893 we might get variable with no scope.\n         if let Some(region_scope) = self.region_scope_tree.var_scope(var.0.local_id) && schedule_drop{\n             self.schedule_drop(span, region_scope, local_id, DropKind::Storage);"}, {"sha": "6a4d2df1ead158b8612f7b4ad0c14cf8f26e5c4b", "filename": "compiler/rustc_monomorphize/src/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn dump_closure_profile<'tcx>(tcx: TyCtxt<'tcx>, closure_instance: In\n         .append(true)\n         .open(&format!(\"closure_profile_{}.csv\", std::process::id()))\n     else {\n-        eprintln!(\"Cound't open file for writing closure profile\");\n+        eprintln!(\"Couldn't open file for writing closure profile\");\n         return;\n     };\n "}, {"sha": "be00e57b9322e3c2da102b47619f1628f9498749", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1578,7 +1578,7 @@ impl<'a> Parser<'a> {\n                     Applicability::MachineApplicable,\n                 );\n \n-                // Replace `'label: non_block_expr` with `'label: {non_block_expr}` in order to supress future errors about `break 'label`.\n+                // Replace `'label: non_block_expr` with `'label: {non_block_expr}` in order to suppress future errors about `break 'label`.\n                 let stmt = self.mk_stmt(span, StmtKind::Expr(expr));\n                 let blk = self.mk_block(vec![stmt], BlockCheckMode::Default, span);\n                 self.mk_expr(span, ExprKind::Block(blk, label))\n@@ -2578,7 +2578,7 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn parse_arm(&mut self) -> PResult<'a, Arm> {\n-        // Used to check the `let_chains` and `if_let_guard` features mostly by scaning\n+        // Used to check the `let_chains` and `if_let_guard` features mostly by scanning\n         // `&&` tokens.\n         fn check_let_expr(expr: &Expr) -> (bool, bool) {\n             match expr.kind {"}, {"sha": "5e79308464f6408bb22b6278c22aaef8f80ca42b", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -281,7 +281,7 @@ impl TokenCursor {\n                         if delim != Delimiter::Invisible {\n                             return (Token::new(token::OpenDelim(delim), sp.open), Spacing::Alone);\n                         }\n-                        // No open delimeter to return; continue on to the next iteration.\n+                        // No open delimiter to return; continue on to the next iteration.\n                     }\n                 };\n             } else if let Some(frame) = self.stack.pop() {"}, {"sha": "fb1d724d9d83b5a30a39cff45d5de51b6758af66", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -49,7 +49,7 @@ impl Node {\n ///\n /// For example, `ast::Visitor` has `visit_ident`, but `Ident`s are always\n /// stored inline within other AST nodes, so we don't implement `visit_ident`\n-/// here. In constrast, we do implement `visit_expr` because `ast::Expr` is\n+/// here. In contrast, we do implement `visit_expr` because `ast::Expr` is\n /// always stored as `P<ast::Expr>`, and every such expression should be\n /// measured separately.\n ///"}, {"sha": "661aadea94443022dbfc2f1a25368b4d4fcf1fa3", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1368,7 +1368,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             return;\n         }\n \n-        // We may fail to resolve higher-ranked lifetimes that are mentionned by APIT.\n+        // We may fail to resolve higher-ranked lifetimes that are mentioned by APIT.\n         // AST-based resolution does not care for impl-trait desugaring, which are the\n         // responibility of lowering.  This may create a mismatch between the resolution\n         // AST found (`region_def_id`) which points to HRTB, and what HIR allows."}, {"sha": "5c33cb694a7655356cef6ca54838423891e8fc04", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1991,7 +1991,7 @@ impl<'a> Resolver<'a> {\n                         _ => panic!(\"invalid arg index\"),\n                     }\n                 }\n-                // Cache the lookup to avoid parsing attributes for an iterm multiple times.\n+                // Cache the lookup to avoid parsing attributes for an item multiple times.\n                 self.legacy_const_generic_args.insert(def_id, Some(ret.clone()));\n                 return Some(ret);\n             }"}, {"sha": "dafa10e9e0026ff4ad4c32fc8f511a1bf73b8f2e", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -441,7 +441,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                 }\n                 PathResult::Indeterminate => indeterminate = true,\n                 // We can only be sure that a path doesn't exist after having tested all the\n-                // posibilities, only at that time we can return false.\n+                // possibilities, only at that time we can return false.\n                 PathResult::Failed { .. } => {}\n                 PathResult::Module(_) => panic!(\"unexpected path resolution\"),\n             }"}, {"sha": "1c69596b2052bd57c990203f8bbb9bc5c68f154f", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -2309,7 +2309,7 @@ impl Target {\n                 load_builtin(target_triple).expect(\"built-in target\")\n             }\n             TargetTriple::TargetJson { .. } => {\n-                panic!(\"built-in targets doens't support target-paths\")\n+                panic!(\"built-in targets doesn't support target-paths\")\n             }\n         }\n     }"}, {"sha": "f30be25497d8a7ef9626658a00d4b7d493eb5d20", "filename": "compiler/rustc_target/src/spec/windows_gnullvm_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{cvs, LinkerFlavor, TargetOptions};\n pub fn opts() -> TargetOptions {\n     // We cannot use `-nodefaultlibs` because compiler-rt has to be passed\n     // as a path since it's not added to linker search path by the default.\n-    // There were attemts to make it behave like libgcc (so one can just use -l<name>)\n+    // There were attempts to make it behave like libgcc (so one can just use -l<name>)\n     // but LLVM maintainers rejected it: https://reviews.llvm.org/D51440\n     let pre_link_args =\n         TargetOptions::link_args(LinkerFlavor::Gcc, &[\"-nolibc\", \"--unwindlib=none\"]);"}, {"sha": "a166371fed1e01c2dc2af7ae5700b1a0829cb7e7", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -191,7 +191,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n                 GenericArgKind::Const(..) => {\n                     chalk_ir::GoalData::All(chalk_ir::Goals::empty(interner))\n                 }\n-                GenericArgKind::Lifetime(lt) => bug!(\"unexpect well formed predicate: {:?}\", lt),\n+                GenericArgKind::Lifetime(lt) => bug!(\"unexpected well formed predicate: {:?}\", lt),\n             },\n \n             ty::PredicateKind::ObjectSafe(t) => chalk_ir::GoalData::DomainGoal("}, {"sha": "4ab6d3737c5959c31c39d1b5bd272ea662672ce2", "filename": "compiler/rustc_transmute/src/layout/tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -416,7 +416,7 @@ pub(crate) mod rustc {\n                 // begin with the field's visibility\n                 tree = tree.then(Self::def(Def::Field(field_def)));\n \n-                // compute the field's layout charactaristics\n+                // compute the field's layout characteristics\n                 let field_layout = layout_of(tcx, field_ty)?.clamp_align(min_align, max_align);\n \n                 // next comes the field's padding"}, {"sha": "29a128f27b840f5653dc3796f181f8f317d3d738", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -101,7 +101,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n             decl.output.span(),\n             param_env,\n         ));\n-    // If we replaced declared_ret_ty with infer vars, then we must be infering\n+    // If we replaced declared_ret_ty with infer vars, then we must be inferring\n     // an opaque type, so set a flag so we can improve diagnostics.\n     fcx.return_type_has_opaque = ret_ty != declared_ret_ty;\n \n@@ -1543,7 +1543,7 @@ fn detect_discriminant_duplicate<'tcx>(\n             None => {\n                 // At this point we know this discriminant is a duplicate, and was not explicitly\n                 // assigned by the user. Here we iterate backwards to fetch the HIR for the last\n-                // explictly assigned discriminant, and letting the user know that this was the\n+                // explicitly assigned discriminant, and letting the user know that this was the\n                 // increment startpoint, and how many steps from there leading to the duplicate\n                 if let Some((n, hir::Variant { span, ident, .. })) =\n                     vs[..idx].iter().rev().enumerate().find(|v| v.1.disr_expr.is_some())\n@@ -1566,7 +1566,7 @@ fn detect_discriminant_duplicate<'tcx>(\n     };\n \n     // Here we loop through the discriminants, comparing each discriminant to another.\n-    // When a duplicate is detected, we instatiate an error and point to both\n+    // When a duplicate is detected, we instantiate an error and point to both\n     // initial and duplicate value. The duplicate discriminant is then discarded by swapping\n     // it with the last element and decrementing the `vec.len` (which is why we have to evaluate\n     // `discrs.len()` anew every iteration, and why this could be tricky to do in a functional"}, {"sha": "7ff4aef2d25716a28c6fa44177c35512bcb140e2", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -153,7 +153,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let tcx = self.tcx;\n \n-        // Conceptually, we've got some number of expected inputs, and some number of provided aguments\n+        // Conceptually, we've got some number of expected inputs, and some number of provided arguments\n         // and we can form a grid of whether each argument could satisfy a given input:\n         //      in1 | in2 | in3 | ...\n         // arg1  ?  |     |     |"}, {"sha": "bfc4f061b70f492f7ebfced4da35d8353328e9aa", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -497,7 +497,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         let expr_place = return_if_err!(self.mc.cat_expr(expr));\n         f(self);\n         if let Some(els) = els {\n-            // borrowing because we need to test the descriminant\n+            // borrowing because we need to test the discriminant\n             self.maybe_read_scrutinee(expr, expr_place.clone(), from_ref(pat).iter());\n             self.walk_block(els)\n         }"}, {"sha": "6480fcaf93d4ee5754d74c01fea9cfec49822b33", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1570,7 +1570,7 @@ impl<'a, T> CursorMut<'a, T> {\n     /// that the cursor points to is unchanged, even if it is the \"ghost\" node.\n     ///\n     /// This operation should compute in *O*(1) time.\n-    // `push_front` continues to point to \"ghost\" when it addes a node to mimic\n+    // `push_front` continues to point to \"ghost\" when it adds a node to mimic\n     // the behavior of `insert_before` on an empty list.\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n     pub fn push_front(&mut self, elt: T) {"}, {"sha": "60b36af5e67fcce6af2b855242c0b6e48d2ffe5a", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -436,7 +436,7 @@ impl<T> Vec<T> {\n     /// an explanation of the difference between length and capacity, see\n     /// *[Capacity and reallocation]*.\n     ///\n-    /// If it is imporant to know the exact allocated capacity of a `Vec`,\n+    /// If it is important to know the exact allocated capacity of a `Vec`,\n     /// always use the [`capacity`] method after construction.\n     ///\n     /// For `Vec<T>` where `T` is a zero-sized type, there will be no allocation\n@@ -591,7 +591,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// an explanation of the difference between length and capacity, see\n     /// *[Capacity and reallocation]*.\n     ///\n-    /// If it is imporant to know the exact allocated capacity of a `Vec`,\n+    /// If it is important to know the exact allocated capacity of a `Vec`,\n     /// always use the [`capacity`] method after construction.\n     ///\n     /// For `Vec<T, A>` where `T` is a zero-sized type, there will be no allocation"}, {"sha": "20340d42962efbbf1caf5fd8bb06f4b6515d1b91", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -31,7 +31,7 @@ use crate::intrinsics;\n ///\n /// `unreachable_unchecked()` can be used in situations where the compiler\n /// can't prove invariants that were previously established. Such situations\n-/// have a higher chance of occuring if those invariants are upheld by\n+/// have a higher chance of occurring if those invariants are upheld by\n /// external code that the compiler can't analyze.\n /// ```\n /// fn prepare_inputs(divisors: &mut Vec<u32>) {"}, {"sha": "d610f0a02f40310d8b1090e65395c432ce141fd9", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1082,7 +1082,7 @@ extern \"rust-intrinsic\" {\n     /// Note that using `transmute` to turn a pointer to a `usize` is (as noted above) [undefined\n     /// behavior][ub] in `const` contexts. Also outside of consts, this operation might not behave\n     /// as expected -- this is touching on many unspecified aspects of the Rust memory model.\n-    /// Depending on what the code is doing, the following alternatives are preferrable to\n+    /// Depending on what the code is doing, the following alternatives are preferable to\n     /// pointer-to-integer transmutation:\n     /// - If the code just wants to store data of arbitrary type in some buffer and needs to pick a\n     ///   type for that buffer, it can use [`MaybeUninit`][mem::MaybeUninit]."}, {"sha": "f5c72d797553450b5c103d6ff05c48e842a2c489", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -154,7 +154,7 @@ impl<T: ?Sized> *const T {\n     /// This is similar to `self as usize`, which semantically discards *provenance* and\n     /// *address-space* information. However, unlike `self as usize`, casting the returned address\n     /// back to a pointer yields [`invalid`][], which is undefined behavior to dereference. To\n-    /// properly restore the lost information and obtain a dereferencable pointer, use\n+    /// properly restore the lost information and obtain a dereferenceable pointer, use\n     /// [`with_addr`][pointer::with_addr] or [`map_addr`][pointer::map_addr].\n     ///\n     /// If using those APIs is not possible because there is no way to preserve a pointer with the"}, {"sha": "41a2685d361c805a1696cc39d899f6da3ff76fd1", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -90,7 +90,7 @@\n //! isn't *pointer*-sized but address-space/offset/allocation-sized (we'll probably continue\n //! to conflate these notions). This would potentially make it possible to more efficiently\n //! target platforms where pointers are larger than offsets, such as CHERI and maybe some\n-//! segmented architecures.\n+//! segmented architectures.\n //!\n //! ## Provenance\n //!\n@@ -172,7 +172,7 @@\n //! a pointer to a usize is generally an operation which *only* extracts the address. It is\n //! therefore *impossible* to construct a valid pointer from a usize because there is no way\n //! to restore the address-space and provenance. In other words, pointer-integer-pointer\n-//! roundtrips are not possible (in the sense that the resulting pointer is not dereferencable).\n+//! roundtrips are not possible (in the sense that the resulting pointer is not dereferenceable).\n //!\n //! The key insight to making this model *at all* viable is the [`with_addr`][] method:\n //!\n@@ -272,7 +272,7 @@\n //!\n //! * Create an invalid pointer from just an address (see [`ptr::invalid`][]). This can\n //!   be used for sentinel values like `null` *or* to represent a tagged pointer that will\n-//!   never be dereferencable. In general, it is always sound for an integer to pretend\n+//!   never be dereferenceable. In general, it is always sound for an integer to pretend\n //!   to be a pointer \"for fun\" as long as you don't use operations on it which require\n //!   it to be valid (offset, read, write, etc).\n //!"}, {"sha": "3e4c3ae07567565da53e13364d3ed28a88890fa5", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -160,7 +160,7 @@ impl<T: ?Sized> *mut T {\n     /// This is similar to `self as usize`, which semantically discards *provenance* and\n     /// *address-space* information. However, unlike `self as usize`, casting the returned address\n     /// back to a pointer yields [`invalid`][], which is undefined behavior to dereference. To\n-    /// properly restore the lost information and obtain a dereferencable pointer, use\n+    /// properly restore the lost information and obtain a dereferenceable pointer, use\n     /// [`with_addr`][pointer::with_addr] or [`map_addr`][pointer::map_addr].\n     ///\n     /// If using those APIs is not possible because there is no way to preserve a pointer with the"}, {"sha": "395c5678451cdc03841c026eab1932bc19260721", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -2754,10 +2754,10 @@ impl<'a, T> Iterator for RChunksMut<'a, T> {\n                 None => 0,\n             };\n             // SAFETY: This type ensures that self.v is a valid pointer with a correct len.\n-            // Therefore the bounds check in split_at_mut guarantess the split point is inbounds.\n+            // Therefore the bounds check in split_at_mut guarantees the split point is inbounds.\n             let (head, tail) = unsafe { self.v.split_at_mut(start) };\n             // SAFETY: This type ensures that self.v is a valid pointer with a correct len.\n-            // Therefore the bounds check in split_at_mut guarantess the split point is inbounds.\n+            // Therefore the bounds check in split_at_mut guarantees the split point is inbounds.\n             let (nth, _) = unsafe { tail.split_at_mut(end - start) };\n             self.v = head;\n             // SAFETY: Nothing else points to or will point to the contents of this slice."}, {"sha": "3bd296f37cafda4673473997b5cdf0e1c9091288", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -2321,7 +2321,7 @@ impl<T> [T] {\n     }\n \n     /// Binary searches this slice for a given element.\n-    /// This behaves similary to [`contains`] if this slice is sorted.\n+    /// This behaves similar to [`contains`] if this slice is sorted.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -3530,7 +3530,7 @@ impl<T> [T] {\n         // alignment targeted for U.\n         // `crate::ptr::align_offset` is called with a correctly aligned and\n         // valid pointer `ptr` (it comes from a reference to `self`) and with\n-        // a size that is a power of two (since it comes from the alignement for U),\n+        // a size that is a power of two (since it comes from the alignment for U),\n         // satisfying its safety constraints.\n         let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };\n         if offset > self.len() {"}, {"sha": "4f29ecc0fba8b55c681714dce9a14de126f1ee0b", "filename": "library/core/src/time.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1280,7 +1280,7 @@ macro_rules! try_from_secs {\n             let rem_msb = nanos_tmp & rem_msb_mask == 0;\n             let add_ns = !(rem_msb || (is_even && is_tie));\n \n-            // f32 does not have enough presicion to trigger the second branch\n+            // f32 does not have enough precision to trigger the second branch\n             // since it can not represent numbers between 0.999_999_940_395 and 1.0.\n             let nanos = nanos + add_ns as u32;\n             if ($mant_bits == 23) || (nanos != NANOS_PER_SEC) { (0, nanos) } else { (1, 0) }\n@@ -1299,9 +1299,9 @@ macro_rules! try_from_secs {\n             let rem_msb = nanos_tmp & rem_msb_mask == 0;\n             let add_ns = !(rem_msb || (is_even && is_tie));\n \n-            // f32 does not have enough presicion to trigger the second branch.\n+            // f32 does not have enough precision to trigger the second branch.\n             // For example, it can not represent numbers between 1.999_999_880...\n-            // and 2.0. Bigger values result in even smaller presicion of the\n+            // and 2.0. Bigger values result in even smaller precision of the\n             // fractional part.\n             let nanos = nanos + add_ns as u32;\n             if ($mant_bits == 23) || (nanos != NANOS_PER_SEC) {"}, {"sha": "2235f016c7144e762a0339bc300d0dd76f0a34ae", "filename": "library/portable-simd/crates/core_simd/src/masks/to_bitmask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -70,7 +70,7 @@ impl_integer_intrinsic! {\n     impl ToBitMask<BitMask=u64> for Mask<_, 64>\n }\n \n-/// Returns the minimum numnber of bytes in a bitmask with `lanes` lanes.\n+/// Returns the minimum number of bytes in a bitmask with `lanes` lanes.\n #[cfg(feature = \"generic_const_exprs\")]\n pub const fn bitmask_len(lanes: usize) -> usize {\n     (lanes + 7) / 8"}, {"sha": "a4b0522b050244b2e4e32e9f7a30afd35e219796", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1921,7 +1921,7 @@ mod type_keyword {}\n /// and [proposal]s exist to use `unsafe {}` blocks inside such functions when\n /// making `unsafe` operations.\n ///\n-/// See the [Rustnomicon] and the [Reference] for more informations.\n+/// See the [Rustnomicon] and the [Reference] for more information.\n ///\n /// # Examples\n ///\n@@ -2113,7 +2113,7 @@ mod use_keyword {}\n /// Add constraints that must be upheld to use an item.\n ///\n /// `where` allows specifying constraints on lifetime and generic parameters.\n-/// The [RFC] introducing `where` contains detailed informations about the\n+/// The [RFC] introducing `where` contains detailed information about the\n /// keyword.\n ///\n /// # Examples\n@@ -2355,7 +2355,7 @@ mod dyn_keyword {}\n /// println!(\"f = {f} and i = {i}\");\n /// ```\n ///\n-/// See the [Reference][union] for more informations on `union`s.\n+/// See the [Reference][union] for more information on `union`s.\n ///\n /// [`struct`]: keyword.struct.html\n /// [union]: ../reference/items/unions.html"}, {"sha": "dbb9829bb666dc89cfbc789204c0b654079ffcd4", "filename": "library/std/src/sys/unix/locks/fuchsia_mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffuchsia_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffuchsia_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffuchsia_mutex.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -138,7 +138,7 @@ impl Mutex {\n                 }\n             }\n \n-            // The state has changed or a wakeup occured, try to lock the mutex.\n+            // The state has changed or a wakeup occurred, try to lock the mutex.\n             match self.futex.compare_exchange(UNLOCKED, owned_state, Acquire, Relaxed) {\n                 Ok(_) => return,\n                 Err(updated) => state = updated,"}, {"sha": "1b5be46c6050230aab31e2bad89031ff6517ce13", "filename": "library/std/src/sys/unix/locks/futex_mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_mutex.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -53,7 +53,7 @@ impl Mutex {\n             // We avoid an unnecessary write if it as already set to 2,\n             // to be friendlier for the caches.\n             if state != 2 && self.futex.swap(2, Acquire) == 0 {\n-                // We changed it from 0 to 2, so we just succesfully locked it.\n+                // We changed it from 0 to 2, so we just successfully locked it.\n                 return;\n             }\n "}, {"sha": "0cc92244ecad3a195e2eecb5d18a6792ebf5146a", "filename": "library/std/src/sys/unix/locks/futex_rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -54,7 +54,7 @@ fn is_read_lockable(state: u32) -> bool {\n     // We don't allow read-locking if there's readers waiting, even if the lock is unlocked\n     // and there's no writers waiting. The only situation when this happens is after unlocking,\n     // at which point the unlocking thread might be waking up writers, which have priority over readers.\n-    // The unlocking thread will clear the readers waiting bit and wake up readers, if necssary.\n+    // The unlocking thread will clear the readers waiting bit and wake up readers, if necessary.\n     state & MASK < MAX_READERS && !has_readers_waiting(state) && !has_writers_waiting(state)\n }\n "}, {"sha": "74bb552527f64fec399b4ebde58a07b4bb7865dc", "filename": "library/std/src/sys/windows/cmath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcmath.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -44,7 +44,7 @@ mod shims {\n }\n \n // On 32-bit x86 MSVC these functions aren't defined, so we just define shims\n-// which promote everything fo f64, perform the calculation, and then demote\n+// which promote everything for f64, perform the calculation, and then demote\n // back to f32. While not precisely correct should be \"correct enough\" for now.\n #[cfg(all(target_env = \"msvc\", target_arch = \"x86\"))]\n mod shims {"}, {"sha": "a71175069052f0539c8af1b850fc9ad48eee3d7d", "filename": "library/std/src/sys/windows/path/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath%2Ftests.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -115,7 +115,7 @@ fn test_parse_prefix_verbatim_device() {\n     assert_eq!(prefix, parse_prefix(r\"\\\\?/C:\\windows\\system32\\notepad.exe\"));\n }\n \n-// See #93586 for more infomation.\n+// See #93586 for more information.\n #[test]\n fn test_windows_prefix_components() {\n     use crate::path::Path;"}, {"sha": "fe1b00a90fce25d229dfb62b76bc694ada48a86d", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -85,7 +85,7 @@ def _download(path, url, probably_big, verbose, exception):\n             option = \"-#\"\n         else:\n             option = \"-s\"\n-        # If curl is not present on Win32, we shoud not sys.exit\n+        # If curl is not present on Win32, we should not sys.exit\n         #   but raise `CalledProcessError` or `OSError` instead\n         require([\"curl\", \"--version\"], exception=platform_is_win32)\n         run([\"curl\", option,"}, {"sha": "14e8ebd6876b45646a2bdbe97ae3b26248f8f35e", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -946,7 +946,7 @@ impl<'a> Builder<'a> {\n         };\n         patchelf.args(&[OsString::from(\"--set-rpath\"), rpath_entries]);\n         if !fname.extension().map_or(false, |ext| ext == \"so\") {\n-            // Finally, set the corret .interp for binaries\n+            // Finally, set the correct .interp for binaries\n             let dynamic_linker_path = nix_deps_dir.join(\"nix-support/dynamic-linker\");\n             // FIXME: can we support utf8 here? `args` doesn't accept Vec<u8>, only OsString ...\n             let dynamic_linker = t!(String::from_utf8(t!(fs::read(dynamic_linker_path))));\n@@ -962,7 +962,7 @@ impl<'a> Builder<'a> {\n         let tempfile = self.tempdir().join(dest_path.file_name().unwrap());\n         // While bootstrap itself only supports http and https downloads, downstream forks might\n         // need to download components from other protocols. The match allows them adding more\n-        // protocols without worrying about merge conficts if we change the HTTP implementation.\n+        // protocols without worrying about merge conflicts if we change the HTTP implementation.\n         match url.split_once(\"://\").map(|(proto, _)| proto) {\n             Some(\"http\") | Some(\"https\") => {\n                 self.download_http_with_retries(&tempfile, url, help_on_error)"}, {"sha": "d111d945d6f2f5b439dd3c76aaf71d16e655b7d5", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1629,7 +1629,7 @@ fn chmod(_path: &Path, _perms: u32) {}\n /// If code is not 0 (successful exit status), exit status is 101 (rust's default error code.)\n /// If the test is running and code is an error code, it will cause a panic.\n fn detail_exit(code: i32) -> ! {\n-    // if in test and code is an error code, panic with staus code provided\n+    // if in test and code is an error code, panic with status code provided\n     if cfg!(test) && code != 0 {\n         panic!(\"status code: {}\", code);\n     } else {"}, {"sha": "f803ae07149283f19eae5a85769ddb577d872abb", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -637,7 +637,7 @@ fn configure_cmake(\n \n         if target.contains(\"darwin\") {\n             // Make sure that CMake does not build universal binaries on macOS.\n-            // Explicitly specifiy the one single target architecture.\n+            // Explicitly specify the one single target architecture.\n             if target.starts_with(\"aarch64\") {\n                 // macOS uses a different name for building arm64\n                 cfg.define(\"CMAKE_OSX_ARCHITECTURES\", \"arm64\");"}, {"sha": "b18a125f3b095e75e755cfb46a9b83b968f8a250", "filename": "src/doc/rustc/src/platform-support/m68k-unknown-linux-gnu.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fm68k-unknown-linux-gnu.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fm68k-unknown-linux-gnu.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fm68k-unknown-linux-gnu.md?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -87,7 +87,7 @@ Rust programs can be built for that target:\n rustc --target m68k-unknown-linux-gnu your-code.rs\n ```\n \n-Very simple progams can be run using the `qemu-m68k-static` program:\n+Very simple programs can be run using the `qemu-m68k-static` program:\n \n ```text\n $ qemu-m68k-static your-code"}, {"sha": "fb0cea05d4405f1a43447723c3dad2deb9b56c1c", "filename": "src/doc/rustc/src/platform-support/pc-windows-gnullvm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fpc-windows-gnullvm.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fpc-windows-gnullvm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fpc-windows-gnullvm.md?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -25,7 +25,7 @@ Like with any other Windows target created binaries are in PE format.\n \n ## Building the target\n \n-For cross-compilation I recommend using [llvm-mingw](https://github.com/mstorsjo/llvm-mingw) toolchain, one change that seems necessary beside configuring corss compilers is disabling experimental `m86k` target. Otherwise LLVM build fails with `multiple definition ...` errors.\n+For cross-compilation I recommend using [llvm-mingw](https://github.com/mstorsjo/llvm-mingw) toolchain, one change that seems necessary beside configuring cross compilers is disabling experimental `m86k` target. Otherwise LLVM build fails with `multiple definition ...` errors.\n Native bootstrapping builds require rather fragile hacks until host artifacts are available so I won't describe them here.\n \n ## Building Rust programs"}, {"sha": "295dec0f0e488aeee419db6e29e380c5d534fb42", "filename": "src/doc/rustc/src/platform-support/unknown-uefi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Funknown-uefi.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Funknown-uefi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Funknown-uefi.md?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -133,7 +133,7 @@ There are 3 common ways to compile native C code for UEFI targets:\n - Use native Windows targets. This means compiling your C code for the Windows\n   platform as if it was the UEFI platform. This works for static libraries, but\n   needs adjustments when linking into an UEFI executable. You can, however,\n-  link such static libraries seemlessly into rust code compiled for UEFI\n+  link such static libraries seamlessly into rust code compiled for UEFI\n   targets. Be wary of any includes that are not specifically suitable for UEFI\n   targets (especially the C standard library includes are not always\n   compatible). Freestanding compilations are recommended to avoid"}, {"sha": "6932e6a5764bc416e160f0aa8e2c1d8b438629db", "filename": "src/doc/rustc/src/platform-support/wasm64-unknown-unknown.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fwasm64-unknown-unknown.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fwasm64-unknown-unknown.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fwasm64-unknown-unknown.md?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -30,7 +30,7 @@ is 8-bytes large as well as pointers. The tradeoff, though, is that the maximum\n memory size is now the full 64-bit address space instead of the 4GB as limited\n by the 32-bit address space for `wasm32-unknown-unknown`.\n \n-This target is not a stable target. The [memory64] WebAssembly proposal is stil\n+This target is not a stable target. The [memory64] WebAssembly proposal is still\n in-progress and not standardized. This means that there are not many engines\n which implement the `memory64` feature and if they do they're likely behind a\n flag, for example:"}, {"sha": "321992f7b0d75882b1521e9e75273810a719a119", "filename": "src/doc/unstable-book/src/compiler-flags/check-cfg.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -143,7 +143,7 @@ fn do_features() {}\n \n #[cfg(has_feathers = \"zapping\")] // This is expected as \"has_feathers\" was provided in names()\n                                  // and because no value checking was enable for \"has_feathers\"\n-                                 // no warning is emited for the value \"zapping\"\n+                                 // no warning is emitted for the value \"zapping\"\n fn do_zapping() {}\n \n #[cfg(has_mumble_frotz)]    // This is UNEXPECTED because names checking is enable and"}, {"sha": "3890a12b7e684a92c8883581a8cef32aed652503", "filename": "src/doc/unstable-book/src/compiler-flags/remap-cwd-prefix.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fremap-cwd-prefix.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fremap-cwd-prefix.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fremap-cwd-prefix.md?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -8,7 +8,7 @@ This flag will rewrite absolute paths under the current working directory,\n replacing the current working directory prefix with a specified value.\n \n The given value may be absolute or relative, or empty. This switch takes\n-precidence over `--remap-path-prefix` in case they would both match a given\n+precedence over `--remap-path-prefix` in case they would both match a given\n path.\n \n This flag helps to produce deterministic output, by removing the current working"}, {"sha": "2617378ba5fd2d5cec6186e005fedb2b9841ae5a", "filename": "src/etc/cpu-usage-over-time-plot.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fetc%2Fcpu-usage-over-time-plot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fetc%2Fcpu-usage-over-time-plot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcpu-usage-over-time-plot.sh?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -15,7 +15,7 @@\n # Improvements to this script are greatly appreciated!\n \n if [[ $# != 2 ]]; then\n-    echo \"expected 2 arguments, recieved $#\"\n+    echo \"expected 2 arguments, received $#\"\n     echo \"example usage: './src/etc/cpu-usage-over-time-plot.sh \\\n 7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c \\\n x86_64-gnu'\""}, {"sha": "c97fb4b805473625201e5c46b5ab339ceb10ab64", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -386,7 +386,7 @@ def check_tree_attr(tree, path, attr, pat, regexp):\n     return ret\n \n \n-# Returns the number of occurences matching the regex (`regexp`) and the text (`pat`).\n+# Returns the number of occurrences matching the regex (`regexp`) and the text (`pat`).\n def check_tree_text(tree, path, pat, regexp, stop_at_first):\n     path = normalize_xpath(path)\n     match_count = 0"}, {"sha": "bb8e46af76286d9b74a22e54e868eb464094ed41", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -450,7 +450,7 @@ impl<'a> PeekIter<'a> {\n     fn new(iter: TokenIter<'a>) -> Self {\n         Self { stored: VecDeque::new(), peek_pos: 0, iter }\n     }\n-    /// Returns the next item after the current one. It doesn't interfer with `peek_next` output.\n+    /// Returns the next item after the current one. It doesn't interfere with `peek_next` output.\n     fn peek(&mut self) -> Option<&(TokenKind, &'a str)> {\n         if self.stored.is_empty() {\n             if let Some(next) = self.iter.next() {\n@@ -459,7 +459,7 @@ impl<'a> PeekIter<'a> {\n         }\n         self.stored.front()\n     }\n-    /// Returns the next item after the last one peeked. It doesn't interfer with `peek` output.\n+    /// Returns the next item after the last one peeked. It doesn't interfere with `peek` output.\n     fn peek_next(&mut self) -> Option<&(TokenKind, &'a str)> {\n         self.peek_pos += 1;\n         if self.peek_pos - 1 < self.stored.len() {"}, {"sha": "39d3b43cf32e2aa1c5e5d083a1c04b83fb709a3a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -477,7 +477,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             // If there's no `::`, it's not an associated item.\n             // So we can be sure that `rustc_resolve` was accurate when it said it wasn't resolved.\n             .ok_or_else(|| {\n-                debug!(\"found no `::`, assumming {} was correctly not in scope\", item_name);\n+                debug!(\"found no `::`, assuming {} was correctly not in scope\", item_name);\n                 UnresolvedPath {\n                     item_id,\n                     module_id,\n@@ -1256,7 +1256,7 @@ impl LinkCollector<'_, '_> {\n         &mut self,\n         key: ResolutionInfo,\n         diag: DiagnosticInfo<'_>,\n-        // If errors are cached then they are only reported on first ocurrence\n+        // If errors are cached then they are only reported on first occurrence\n         // which we want in some cases but not in others.\n         cache_errors: bool,\n     ) -> Option<(Res, Option<UrlFragment>)> {"}, {"sha": "f53fa240cd1adba3e52e9a9a92fe6af0aeae0a78", "filename": "src/test/codegen/issue-34634.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Fissue-34634.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Fissue-34634.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-34634.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,5 +1,5 @@\n // Test that `wrapping_div` only checks divisor once.\n-// This test checks that there is only a single compare agains -1 and -1 is not present as a\n+// This test checks that there is only a single compare against -1 and -1 is not present as a\n // switch case (the second check present until rustc 1.12).\n // This test also verifies that a single panic call is generated (for the division by zero case).\n "}, {"sha": "c092e28a05ac8f098769965785aeb9ae4f75f988", "filename": "src/test/codegen/unwind-abis/aapcs-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Faapcs-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Faapcs-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Faapcs-unwind-abi.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -5,7 +5,7 @@\n #[lang=\"sized\"]\n trait Sized { }\n \n-// Test that `nounwind` atributes are correctly applied to exported `aapcs` and\n+// Test that `nounwind` attributes are correctly applied to exported `aapcs` and\n // `aapcs-unwind` extern functions. `aapcs-unwind` functions MUST NOT have this attribute. We\n // disable optimizations above to prevent LLVM from inferring the attribute.\n "}, {"sha": "8447bbeb1ed205e6f6a9b2695339e2c4d43f6de7", "filename": "src/test/codegen/unwind-abis/c-unwind-abi-panic-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi-panic-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi-panic-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi-panic-abort.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: -C panic=abort\n \n-// Test that `nounwind` atributes are also applied to extern `C-unwind` Rust functions\n+// Test that `nounwind` attributes are also applied to extern `C-unwind` Rust functions\n // when the code is compiled with `panic=abort`.\n \n #![crate_type = \"lib\"]"}, {"sha": "e258dbcacd229a3f5aa7bfaffc7e3108546a597f", "filename": "src/test/codegen/unwind-abis/c-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fc-unwind-abi.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: -C opt-level=0\n \n-// Test that `nounwind` atributes are correctly applied to exported `C` and `C-unwind` extern\n+// Test that `nounwind` attributes are correctly applied to exported `C` and `C-unwind` extern\n // functions. `C-unwind` functions MUST NOT have this attribute. We disable optimizations above\n // to prevent LLVM from inferring the attribute.\n "}, {"sha": "19a7228839abfb82662085d69e69b643416e16d1", "filename": "src/test/codegen/unwind-abis/cdecl-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fcdecl-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fcdecl-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fcdecl-unwind-abi.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: -C opt-level=0\n \n-// Test that `nounwind` atributes are correctly applied to exported `cdecl` and\n+// Test that `nounwind` attributes are correctly applied to exported `cdecl` and\n // `cdecl-unwind` extern functions. `cdecl-unwind` functions MUST NOT have this attribute. We\n // disable optimizations above to prevent LLVM from inferring the attribute.\n "}, {"sha": "b74099a5d965b0f386e361404dd1121908f9852c", "filename": "src/test/codegen/unwind-abis/fastcall-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Ffastcall-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Ffastcall-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Ffastcall-unwind-abi.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -5,7 +5,7 @@\n #[lang=\"sized\"]\n trait Sized { }\n \n-// Test that `nounwind` atributes are correctly applied to exported `fastcall` and\n+// Test that `nounwind` attributes are correctly applied to exported `fastcall` and\n // `fastcall-unwind` extern functions. `fastcall-unwind` functions MUST NOT have this attribute. We\n // disable optimizations above to prevent LLVM from inferring the attribute.\n "}, {"sha": "106d593b21de23bda5e1a941117403b7692bddb1", "filename": "src/test/codegen/unwind-abis/nounwind-on-stable-panic-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fnounwind-on-stable-panic-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fnounwind-on-stable-panic-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fnounwind-on-stable-panic-abort.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -3,7 +3,7 @@\n \n #![crate_type = \"lib\"]\n \n-// We disable optimizations to prevent LLVM from infering the attribute.\n+// We disable optimizations to prevent LLVM from inferring the attribute.\n \n // CHECK: Function Attrs:{{.*}}nounwind\n // CHECK-NEXT: @foo"}, {"sha": "c1c5bbdda3456ba8121cd62d24a090bc50172408", "filename": "src/test/codegen/unwind-abis/nounwind-on-stable-panic-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fnounwind-on-stable-panic-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fnounwind-on-stable-panic-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fnounwind-on-stable-panic-unwind.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -3,7 +3,7 @@\n \n #![crate_type = \"lib\"]\n \n-// We disable optimizations to prevent LLVM from infering the attribute.\n+// We disable optimizations to prevent LLVM from inferring the attribute.\n \n extern \"C\" {\n     fn bar();"}, {"sha": "c46d717331b465fda746b35aa9e6da5b329361c5", "filename": "src/test/codegen/unwind-abis/nounwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fnounwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fnounwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fnounwind.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -4,7 +4,7 @@\n #![crate_type = \"lib\"]\n #![feature(c_unwind)]\n \n-// We disable optimizations to prevent LLVM from infering the attribute.\n+// We disable optimizations to prevent LLVM from inferring the attribute.\n \n // CHECK: Function Attrs:{{.*}}nounwind\n // CHECK-NEXT: @foo"}, {"sha": "8eff0719f8fa7c19826e56420e01d80b1b63f40a", "filename": "src/test/codegen/unwind-abis/stdcall-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fstdcall-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fstdcall-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fstdcall-unwind-abi.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -5,7 +5,7 @@\n #[lang=\"sized\"]\n trait Sized { }\n \n-// Test that `nounwind` atributes are correctly applied to exported `stdcall` and `stdcall-unwind`\n+// Test that `nounwind` attributes are correctly applied to exported `stdcall` and `stdcall-unwind`\n // extern functions. `stdcall-unwind` functions MUST NOT have this attribute. We disable\n // optimizations above to prevent LLVM from inferring the attribute.\n "}, {"sha": "2591c1d4814302f1cfb4882dc9d6bbf58b17536c", "filename": "src/test/codegen/unwind-abis/system-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fsystem-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fsystem-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fsystem-unwind-abi.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: -C opt-level=0\n \n-// Test that `nounwind` atributes are correctly applied to exported `system` and `system-unwind`\n+// Test that `nounwind` attributes are correctly applied to exported `system` and `system-unwind`\n // extern functions. `system-unwind` functions MUST NOT have this attribute. We disable\n // optimizations above to prevent LLVM from inferring the attribute.\n "}, {"sha": "694fde17c3cbeedc5593ed638e7f925216c3b898", "filename": "src/test/codegen/unwind-abis/sysv64-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fsysv64-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fsysv64-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fsysv64-unwind-abi.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -5,7 +5,7 @@\n #[lang=\"sized\"]\n trait Sized { }\n \n-// Test that `nounwind` atributes are correctly applied to exported `sysv64` and\n+// Test that `nounwind` attributes are correctly applied to exported `sysv64` and\n // `sysv64-unwind` extern functions. `sysv64-unwind` functions MUST NOT have this attribute. We\n // disable optimizations above to prevent LLVM from inferring the attribute.\n "}, {"sha": "7e81367fc5b78d5165c5c744e251620a6e105603", "filename": "src/test/codegen/unwind-abis/thiscall-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fthiscall-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fthiscall-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fthiscall-unwind-abi.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -5,7 +5,7 @@\n #[lang=\"sized\"]\n trait Sized { }\n \n-// Test that `nounwind` atributes are correctly applied to exported `thiscall` and\n+// Test that `nounwind` attributes are correctly applied to exported `thiscall` and\n // `thiscall-unwind` extern functions. `thiscall-unwind` functions MUST NOT have this attribute. We\n // disable optimizations above to prevent LLVM from inferring the attribute.\n "}, {"sha": "d7eca2a97000298b15ba2dc919fe35754d3b074b", "filename": "src/test/codegen/unwind-abis/vectorcall-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fvectorcall-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fvectorcall-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fvectorcall-unwind-abi.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -5,7 +5,7 @@\n #[lang=\"sized\"]\n trait Sized { }\n \n-// Test that `nounwind` atributes are correctly applied to exported `vectorcall` and\n+// Test that `nounwind` attributes are correctly applied to exported `vectorcall` and\n // `vectorcall-unwind` extern functions. `vectorcall-unwind` functions MUST NOT have this attribute.\n // We disable optimizations above to prevent LLVM from inferring the attribute.\n "}, {"sha": "6591348c35d3d436d1409281be8091f227cefd92", "filename": "src/test/codegen/unwind-abis/win64-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fwin64-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-abis%2Fwin64-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fwin64-unwind-abi.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -5,7 +5,7 @@\n #[lang=\"sized\"]\n trait Sized { }\n \n-// Test that `nounwind` atributes are correctly applied to exported `win64` and\n+// Test that `nounwind` attributes are correctly applied to exported `win64` and\n // `win64-unwind` extern functions. `win64-unwind` functions MUST NOT have this attribute. We\n // disable optimizations above to prevent LLVM from inferring the attribute.\n "}, {"sha": "6ac3c079f81ba5da6457a56cb81f463a2de546cf", "filename": "src/test/codegen/unwind-extern-exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-extern-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fcodegen%2Funwind-extern-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-extern-exports.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -5,7 +5,7 @@\n #![feature(c_unwind)]\n \n // Make sure these all do *not* get the attribute.\n-// We disable optimizations to prevent LLVM from infering the attribute.\n+// We disable optimizations to prevent LLVM from inferring the attribute.\n // CHECK-NOT: nounwind\n \n // \"C\" ABI"}, {"sha": "355d334585249bcc28e5c1ceb74250defd7547ae", "filename": "src/test/incremental/hygiene/load_cached_hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fincremental%2Fhygiene%2Fload_cached_hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fincremental%2Fhygiene%2Fload_cached_hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhygiene%2Fload_cached_hygiene.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: -Z query-dep-graph\n // aux-build:cached_hygiene.rs\n \n-// This tests the folllowing scenario\n+// This tests the following scenario\n // 1. A foreign crate is compiled with incremental compilation.\n //    This causes hygiene information to be saved to the incr cache.\n // 2. One function is the foreign crate is modified. This causes the"}, {"sha": "8d13718b8d847a767c3c6f8a52d2b7f2dfd2c92f", "filename": "src/test/incremental/issue-49043.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fincremental%2Fissue-49043.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fincremental%2Fissue-49043.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-49043.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,5 +1,5 @@\n // Regression test for hashing involving canonical variables.  In this\n-// test -- which has an intensional error -- the type of the value\n+// test -- which has an intentional error -- the type of the value\n // being dropped winds up including a type variable. Canonicalization\n // would then produce a `?0` which -- in turn -- triggered an ICE in\n // hashing."}, {"sha": "95f3b8ae4d9868fa8050317b99dffdb67693b1ec", "filename": "src/test/incremental/thinlto/cgu_invalidated_when_export_added.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_invalidated_when_export_added.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_invalidated_when_export_added.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_invalidated_when_export_added.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -3,7 +3,7 @@\n \n // rust-lang/rust#69798:\n //\n-// This is analgous to cgu_invalidated_when_import_added, but it covers a\n+// This is analogous to cgu_invalidated_when_import_added, but it covers a\n // problem uncovered where a change to the *export* set caused a link failure\n // when reusing post-LTO optimized object code.\n "}, {"sha": "e86ebd354b1a9601b4ae29b2e13d17ba6ee1640f", "filename": "src/test/incremental/thinlto/cgu_invalidated_when_export_removed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_invalidated_when_export_removed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_invalidated_when_export_removed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_invalidated_when_export_removed.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -3,7 +3,7 @@\n \n // rust-lang/rust#69798:\n //\n-// This is analgous to cgu_invalidated_when_export_added, but it covers the\n+// This is analogous to cgu_invalidated_when_export_added, but it covers the\n // other direction. This is analogous to cgu_invalidated_when_import_added: we\n // include it, because it may uncover bugs in variant implementation strategies.\n "}, {"sha": "eb6cb09fc455492d9dcf2201b7565c83382f1316", "filename": "src/test/mir-opt/dest-prop/union.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,4 +1,4 @@\n-//! Tests that we can propogate into places that are projections into unions\n+//! Tests that we can propagate into places that are projections into unions\n // compile-flags: -Zunsound-mir-opts\n fn val() -> u32 {\n     1"}, {"sha": "f42ea620fb9d13313b4ab3e1e22bc84bccf3b5cb", "filename": "src/test/run-make-fulldeps/issue-64153/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frun-make-fulldeps%2Fissue-64153%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frun-make-fulldeps%2Fissue-64153%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-64153%2FMakefile?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -19,7 +19,7 @@ all:\n \t# Dump all the symbols from the staticlib into `syms`\n \t\"$(LLVM_BIN_DIR)\"/llvm-objdump -t $(TMPDIR)/libdownstream.a > $(TMPDIR)/syms\n \t# Count the global instances of `issue64153_test_function`. There'll be 2\n-\t# if the `upstream` object file got erronously included twice.\n+\t# if the `upstream` object file got erroneously included twice.\n \t# The line we are testing for with the regex looks something like:\n \t# 0000000000000000 g     F .text.issue64153_test_function\t00000023 issue64153_test_function\n \tgrep -c -e \"[[:space:]]g[[:space:]]*F[[:space:]].*issue64153_test_function\" $(TMPDIR)/syms > $(TMPDIR)/count"}, {"sha": "6fc2a6bada9a05d3028fdaa863d67a5773f52711", "filename": "src/test/run-make/coverage-reports/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frun-make%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frun-make%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcoverage-reports%2FMakefile?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -60,7 +60,7 @@ endif\n # for now, but it is effectively ignored for all tests that don't include this file anyway.\n #\n # (Note that it's also possible the `_counters.<test>.txt` and `<test>.json` files (if generated)\n-# may order results from multiple files inconsistently, which might also have to be accomodated\n+# may order results from multiple files inconsistently, which might also have to be accommodated\n # if and when we allow `llvm-cov` to produce results for multiple files. Note, the path separators\n # appear to be normalized to `/` in those files, thankfully.)\n LLVM_COV_IGNORE_FILES=\\\n@@ -157,7 +157,7 @@ else\n \t# `// ignore-llvm-cov-show-diffs` anymore. This directive exists to work around a limitation\n \t# with `llvm-cov show`. When reporting coverage for multiple instantiations of a generic function,\n \t# with different type substitutions, `llvm-cov show` prints these in a non-deterministic order,\n-\t# breaking the `diff` comparision.\n+\t# breaking the `diff` comparison.\n \t#\n \t# A partial workaround is implemented below, with `diff --ignore-matching-lines=RE`\n \t# to ignore each line prefixing each generic instantiation coverage code region."}, {"sha": "87ccb6c43eab3e344d29ee59325d1793a937fe44", "filename": "src/test/run-make/coverage-reports/expected_show_coverage.async.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.async.txt?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -55,7 +55,7 @@\n    53|      1|            1 // This line appears covered, but the 1-character expression span covering the `1`\n                           ^0\n    54|      1|              // is not executed. (`llvm-cov show` displays a `^0` below the `1` ). This is because\n-   55|      1|              // `fn j()` executes the open brace for the funciton body, followed by the function's\n+   55|      1|              // `fn j()` executes the open brace for the function body, followed by the function's\n    56|      1|              // first executable statement, `match x`. Inner function declarations are not\n    57|      1|              // \"visible\" to the MIR for `j()`, so the code region counts all lines between the\n    58|      1|              // open brace and the first statement as executed, which is, in a sense, true."}, {"sha": "efd9e62d64e1d3453f00a3f3a48700c52269e225", "filename": "src/test/run-make/coverage/async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frun-make%2Fcoverage%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frun-make%2Fcoverage%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcoverage%2Fasync.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -52,7 +52,7 @@ fn j(x: u8) {\n         if x == 8 {\n             1 // This line appears covered, but the 1-character expression span covering the `1`\n               // is not executed. (`llvm-cov show` displays a `^0` below the `1` ). This is because\n-              // `fn j()` executes the open brace for the funciton body, followed by the function's\n+              // `fn j()` executes the open brace for the function body, followed by the function's\n               // first executable statement, `match x`. Inner function declarations are not\n               // \"visible\" to the MIR for `j()`, so the code region counts all lines between the\n               // open brace and the first statement as executed, which is, in a sense, true."}, {"sha": "944343df6e587fea2b6aefb2f4af315ec40ac893", "filename": "src/test/run-make/x86_64-fortanix-unknown-sgx-lvi/script.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -45,7 +45,7 @@ check cc_plus_one_cxx cc_plus_one_cxx.checks\n check cc_plus_one_cxx_asm cc_plus_one_cxx_asm.checks\n check cc_plus_one_asm cc_plus_one_asm.checks \\\n   || echo \"warning: the cc crate forwards assembly files to the CC compiler.\" \\\n-           \"Clang uses its own intergrated assembler, which does not include the LVI passes.\"\n+           \"Clang uses its own integrated assembler, which does not include the LVI passes.\"\n \n check cmake_plus_one_c cmake_plus_one_c.checks\n check cmake_plus_one_c_asm cmake_plus_one_c_asm.checks"}, {"sha": "14ffac1e1dce6c40ab9326f07ca9003a79be52a4", "filename": "src/test/rustdoc-ui/normalize-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frustdoc-ui%2Fnormalize-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frustdoc-ui%2Fnormalize-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnormalize-cycle.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// Regresion test for <https://github.com/rust-lang/rust/issues/79459>.\n+// Regression test for <https://github.com/rust-lang/rust/issues/79459>.\n pub trait Query {}\n \n pub trait AsQuery {"}, {"sha": "006132ef8aa40f8994c068399c4fc3670c0913a9", "filename": "src/test/rustdoc/elided-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frustdoc%2Felided-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frustdoc%2Felided-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Felided-lifetime.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -3,7 +3,7 @@\n // rust-lang/rust#75225\n //\n // Since Rust 2018 we encourage writing out <'_> explicitly to make it clear\n-// that borrowing is occuring. Make sure rustdoc is following the same idiom.\n+// that borrowing is occurring. Make sure rustdoc is following the same idiom.\n \n #![crate_name = \"foo\"]\n "}, {"sha": "f037a8e1a83d48fb5ab3a7590ffb8628f11f7b92", "filename": "src/test/rustdoc/infinite-redirection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frustdoc%2Finfinite-redirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frustdoc%2Finfinite-redirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finfinite-redirection.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -7,7 +7,7 @@\n // @has 'foo/builders/struct.ActionRowBuilder.html'\n // @has - '//*[@id=\"synthetic-implementations\"]' 'Auto Trait Implementations'\n \n-// And that the link in the module is targetting it.\n+// And that the link in the module is targeting it.\n // @has 'foo/builders/index.html'\n // @has - '//a[@href=\"struct.ActionRowBuilder.html\"]' 'ActionRowBuilder'\n "}, {"sha": "d3cf7e1406503f72ef67f4c38fb8614776410c5e", "filename": "src/test/rustdoc/macro-document-private-duplicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frustdoc%2Fmacro-document-private-duplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Frustdoc%2Fmacro-document-private-duplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro-document-private-duplicate.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -4,7 +4,7 @@\n // (yes, that's a thing), rustdoc lists both of them on the index page,\n // but only documents the first one on the page for the macro.\n // Fortunately, this can only happen in document private items mode,\n-// but it still isn't ideal beahvior.\n+// but it still isn't ideal behavior.\n //\n // See https://github.com/rust-lang/rust/pull/88019#discussion_r693920453\n //"}, {"sha": "851da231a73441708317aabc4c681f92e967f2dc", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -86,7 +86,7 @@ fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n \n // Because we are compiling this code with `-C panic=abort`, this wouldn't normally be needed.\n // However, `core` and `alloc` are both compiled with `-C panic=unwind`, which means that functions\n-// in these libaries will refer to `rust_eh_personality` if LLVM can not *prove* the contents won't\n+// in these libraries will refer to `rust_eh_personality` if LLVM can not *prove* the contents won't\n // unwind. So, for this test case we will define the symbol.\n #[lang = \"eh_personality\"]\n extern fn rust_eh_personality() {}"}, {"sha": "30ce0f162c7ac55d21b1e362078abbee6f8c22dd", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -73,7 +73,7 @@ fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n \n // Because we are compiling this code with `-C panic=abort`, this wouldn't normally be needed.\n // However, `core` and `alloc` are both compiled with `-C panic=unwind`, which means that functions\n-// in these libaries will refer to `rust_eh_personality` if LLVM can not *prove* the contents won't\n+// in these libraries will refer to `rust_eh_personality` if LLVM can not *prove* the contents won't\n // unwind. So, for this test case we will define the symbol.\n #[lang = \"eh_personality\"]\n extern fn rust_eh_personality() {}"}, {"sha": "d00def571666bdaf38857f9dea57b551b6dcb8fd", "filename": "src/test/ui/associated-type-bounds/elision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fassociated-type-bounds%2Felision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fassociated-type-bounds%2Felision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Felision.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,7 +1,7 @@\n #![feature(associated_type_bounds)]\n #![feature(anonymous_lifetime_in_impl_trait)]\n \n-// The same thing should happen for constaints in dyn trait.\n+// The same thing should happen for constraints in dyn trait.\n fn f(x: &mut dyn Iterator<Item: Iterator<Item = &'_ ()>>) -> Option<&'_ ()> { x.next() }\n //~^ ERROR missing lifetime specifier\n //~| ERROR mismatched types"}, {"sha": "da238205b402f1562159a05fc91c7d64dd062e86", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -131,13 +131,13 @@ fn coerce_index_op() {\n     let mut i = I(10);\n     i[i[3]] = 4;\n     //~^ ERROR cannot borrow `i` as immutable because it is also borrowed as mutable [E0502]\n-    // Shoud be accepted with g2p\n+    // Should be accepted with g2p\n \n     i[3] = i[4];\n \n     i[i[3]] = i[4];\n     //~^ ERROR cannot borrow `i` as immutable because it is also borrowed as mutable [E0502]\n-    // Shoud be accepted with g2p\n+    // Should be accepted with g2p\n }\n \n fn main() {"}, {"sha": "0463e22b3c2d16bc8555d1d18d1d51481d0c5261", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -40,6 +40,6 @@ fn main() {\n     //\n     // (At least in theory; part of the reason this test fails is that\n     // the constructed MIR throws in extra &mut reborrows which\n-    // flummoxes our attmpt to delay the activation point here.)\n+    // flummoxes our attempt to delay the activation point here.)\n     delay.push(2);\n }"}, {"sha": "f97e60daf43a88afbefcbd5046ff5a3725666cdb", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -68,7 +68,7 @@ fn arrays_5() {\n         arr[1] += 10;\n     };\n \n-    // c will capture `arr` completely, therefore we cannot borrow other indecies\n+    // c will capture `arr` completely, therefore we cannot borrow other indices\n     // into the array.\n     println!(\"{:#?}\", &arr[3..2]);\n     //~^ ERROR: cannot borrow `arr` as immutable because it is also borrowed as mutable"}, {"sha": "f23670f63acb7d0f5f63a68797a6d8c0192bf94a", "filename": "src/test/ui/closures/2229_closure_analysis/repr_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frepr_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frepr_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frepr_packed.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -31,7 +31,7 @@ fn test_alignment_not_affected() {\n     c();\n }\n \n-// `String`, `u16` are not aligned at a one byte boundry and are thus affected by repr(packed).\n+// `String`, `u16` are not aligned at a one byte boundary and are thus affected by repr(packed).\n //\n // Here we test that the closure doesn't capture a reference point to `foo.x` but\n // rather capture `foo` entirely."}, {"sha": "f8752fe1cec0407a18b7021cbcaa9087f96fc523", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fby_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fby_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fby_value.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,8 +1,8 @@\n // edition:2021\n // run-pass\n \n-// Test that ByValue captures compile sucessefully especially when the captures are\n-// derefenced within the closure.\n+// Test that ByValue captures compile successfully especially when the captures are\n+// dereferenced within the closure.\n \n #[derive(Debug, Default)]\n struct SomeLargeType;"}, {"sha": "03400e0ee8d56fdd8bacc323eca72dbb49c25a31", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,7 +1,7 @@\n // edition:2021\n // run-pass\n \n-// Tests that if a closure uses indivual fields of the same object\n+// Tests that if a closure uses individual fields of the same object\n // then that case is handled properly.\n \n #![allow(unused)]"}, {"sha": "624e0ff22568d73227054e1605896a23014ff689", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-1.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,10 +1,10 @@\n // edition:2021\n // run-pass\n \n-// Test that closures can catpure paths that are more precise than just one level\n+// Test that closures can capture paths that are more precise than just one level\n // from the root variable.\n //\n-// If the closures can handle such precison we should be able to mutate one path in the closure\n+// If the closures can handle such precision we should be able to mutate one path in the closure\n // while being able to mutate another path outside the closure, where the two paths are disjoint\n // after applying two projections on the root variable.\n "}, {"sha": "bd8addd37812a10edab027e12855701a8e98dd2d", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/multilevel-path-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-2.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -3,7 +3,7 @@\n \n #![allow(unused)]\n \n-// If the closures can handle such precison we should be able to read one path in the closure\n+// If the closures can handle such precision we should be able to read one path in the closure\n // while being able mutate another path outside the closure, where the two paths are disjoint\n // after applying two projections on the root variable.\n "}, {"sha": "a85335438a9fbd301c40d0aa003ed7e499028017", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -5,7 +5,7 @@\n // that is captured by the closure\n \n // More specifically we test that the if the mutable reference isn't root variable of a capture\n-// but rather accessed while acessing the precise capture.\n+// but rather accessed while accessing the precise capture.\n \n fn mut_tuple() {\n     let mut t = (10, 10);"}, {"sha": "30733871b855f0fadf41a883c777fa476f208a30", "filename": "src/test/ui/closures/issue-84128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,5 +1,5 @@\n // test for issue 84128\n-// missing suggestion for similar ADT type with diffetent generic paramenter\n+// missing suggestion for similar ADT type with diffetent generic parameter\n // on closure ReturnNoExpression\n \n struct Foo<T>(T);"}, {"sha": "69a0b486d689f8585b3dfd953e1f07bab7b56fc4", "filename": "src/test/ui/command/command-current-dir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fcommand%2Fcommand-current-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fcommand%2Fcommand-current-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-current-dir.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     let exe = me.file_name().unwrap();\n     let cwd = me.parent().unwrap();\n     eprintln!(\"cwd={:?}\", cwd);\n-    // Change directory to where the exectuable is located, since this test\n+    // Change directory to where the executable is located, since this test\n     // fundamentally needs to use relative paths. In some cases (like\n     // remote-test-server), the current_dir can be somewhere else, so make\n     // sure it is something we can use. We assume we can write to this"}, {"sha": "73c9301011d58693e52f12d50925c538d706d58f", "filename": "src/test/ui/const-generics/issues/issue-83466.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83466.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,5 +1,5 @@\n // regression test for #83466- tests that generic arg mismatch errors between\n-// consts and types are not supressed when there are explicit late bound lifetimes\n+// consts and types are not suppressed when there are explicit late bound lifetimes\n \n struct S;\n impl S {"}, {"sha": "d8dc6d057a73d94675516cccc12ee55d876d3740", "filename": "src/test/ui/consts/const-eval/ub-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -93,7 +93,7 @@ const BAD_OPTION_CHAR: Option<(char, char)> = Some(('x', unsafe { mem::transmute\n //~^ ERROR is undefined behavior\n \n // All variants are uninhabited but also have data.\n-// Use `0` as constant to make behavior endianess-independent.\n+// Use `0` as constant to make behavior endianness-independent.\n const BAD_UNINHABITED_WITH_DATA1: Result<(i32, Never), (i32, !)> = unsafe { mem::transmute(0u64) };\n //~^ ERROR evaluation of constant value failed\n const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe { mem::transmute(0u64) };"}, {"sha": "f412ba84c6ba02cca01525873b048664ae5d7a55", "filename": "src/test/ui/generic-associated-types/issue-78113-lifetime-mismatch-dyn-trait-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,4 +1,4 @@\n-// Test for diagnostics when we have mismatched lifetime due to implict 'static lifetime in GATs\n+// Test for diagnostics when we have mismatched lifetime due to implicit 'static lifetime in GATs\n \n // check-fail\n "}, {"sha": "cdb130d600c5ef2167ac509dff06e39965a91632", "filename": "src/test/ui/issues/issue-23611-enum-swap-in-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fissues%2Fissue-23611-enum-swap-in-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fissues%2Fissue-23611-enum-swap-in-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23611-enum-swap-in-drop.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -97,7 +97,7 @@ pub fn main() {\n     // ever hands f_A off to instances of GaspA, and thus one should\n     // be able to prove the invariant that f_A is *only* invoked from\n     // from an instance of GaspA (either via the GaspA drop\n-    // implementation or the E drop implementaton). Yet the old (bad)\n+    // implementation or the E drop implementation). Yet the old (bad)\n     // behavior allowed a call to f_A to leak in while we are tearing\n     // down a value of type GaspB.\n }"}, {"sha": "6d12db8d13730a860153df747af5df481c2d3c9c", "filename": "src/test/ui/iterators/issue-58952-filter-type-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fiterators%2Fissue-58952-filter-type-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fiterators%2Fissue-58952-filter-type-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fissue-58952-filter-type-length.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n //! This snippet causes the type length to blowup exponentially,\n-//! so check that we don't accidentially exceed the type length limit.\n+//! so check that we don't accidentally exceed the type length limit.\n // FIXME: Once the size of iterator adaptors is further reduced,\n // increase the complexity of this test.\n use std::collections::VecDeque;"}, {"sha": "b4fc3317487d29c8a4844726c6d5479cfa62d52e", "filename": "src/test/ui/lint/issue-70819-dont-override-forbid-in-same-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -5,7 +5,7 @@\n // If you turn off deduplicate diagnostics (which rustc turns on by default but\n // compiletest turns off when it runs ui tests), then the errors are\n // (unfortunately) repeated here because the checking is done as we read in the\n-// errors, and curretly that happens two or three different times, depending on\n+// errors, and currently that happens two or three different times, depending on\n // compiler flags.\n //\n // I decided avoiding the redundant output was not worth the time in engineering"}, {"sha": "f88355bb285f39a8e7eba473b62142fc53612578", "filename": "src/test/ui/never_type/fallback-closure-wrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -3,7 +3,7 @@\n //\n // This particular test case currently fails as the inference to `()` rather\n // than `!` happens as a result of an `as` cast, which is not currently tracked.\n-// Crater did not find many cases of this occuring, but it is included for\n+// Crater did not find many cases of this occurring, but it is included for\n // awareness.\n //\n // revisions: nofallback fallback"}, {"sha": "ad3eb248351d4c18cefe473f2adff2137212bf48", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -53,7 +53,7 @@ impl<F> R<F> { fn new(f: F) -> Self { R { w: 0, f } } }\n // * local/field: Is the structure in a local or a field\n // * fully/partial/void: Are we fully initializing it before using any part?\n //                       Is whole type empty due to a void component?\n-// * init/reinit: First initialization, or did we previously inititalize and then move out?\n+// * init/reinit: First initialization, or did we previously initialize and then move out?\n // * struct/tuple: Is this a struct or a (X, Y).\n //\n // As a shorthand for the cases above, adding a numeric summary to"}, {"sha": "696bf61cefde04f818610fc389a9aca0dea6ef25", "filename": "src/test/ui/nll/polonius/assignment-kills-loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-kills-loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-kills-loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-kills-loans.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,7 +1,7 @@\n #![allow(dead_code)]\n \n // This tests the various kinds of assignments there are. Polonius used to generate `killed`\n-// facts only on simple assigments, but not projections, incorrectly causing errors to be emitted\n+// facts only on simple assignments, but not projections, incorrectly causing errors to be emitted\n // for code accepted by NLL. They are all variations from example code in the NLL RFC.\n \n // check-pass"}, {"sha": "156285e0f9fc97356f5251ab7ff4254ce6dc4b73", "filename": "src/test/ui/pattern/rest-pat-semantic-disallowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,5 +1,5 @@\n // Here we test that rest patterns, i.e. `..`, are not allowed\n-// outside of slice (+ ident patterns witin those), tuple,\n+// outside of slice (+ ident patterns within those), tuple,\n // and tuple struct patterns and that duplicates are caught in these contexts.\n \n #![feature(box_patterns)]"}, {"sha": "6103acb7b6bd9ef82e9f3c7cc73f5605f434448a", "filename": "src/test/ui/proc-macro/crt-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fproc-macro%2Fcrt-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fproc-macro%2Fcrt-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcrt-static.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -9,7 +9,7 @@\n \n // FIXME: This don't work when crate-type is specified by attribute\n // `#![crate_type = \"proc-macro\"]`, not by `--crate-type=proc-macro`\n-// command line flag. This is beacuse the list of `cfg` symbols is generated\n+// command line flag. This is because the list of `cfg` symbols is generated\n // before attributes are parsed. See rustc_interface::util::add_configuration\n #[cfg(target_feature = \"crt-static\")]\n compile_error!(\"crt-static is enabled\");"}, {"sha": "a8f7a41c4428495bd821ae66fc46d8726c2b93fd", "filename": "src/test/ui/regions/issue-56537-closure-uses-region-from-container.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fregions%2Fissue-56537-closure-uses-region-from-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fregions%2Fissue-56537-closure-uses-region-from-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-56537-closure-uses-region-from-container.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -5,7 +5,7 @@\n // by the function.\n //\n // This works today, which precludes changing things so that closures\n-// follow the same lifetime-elision rules used elsehwere. See\n+// follow the same lifetime-elision rules used elsewhere. See\n // rust-lang/rust#56537\n \n // check-pass"}, {"sha": "8dbadf58d5c888262bd183ea911f656e6142925f", "filename": "src/test/ui/specialization/issue-33017.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,4 +1,4 @@\n-// Test to ensure that trait bounds are propertly\n+// Test to ensure that trait bounds are properly\n // checked on specializable associated types\n \n #![allow(incomplete_features)]"}, {"sha": "14fef1b524892d78877981ad584138923f6c1ae6", "filename": "src/test/ui/suggestions/suggest-blanket-impl-local-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-blanket-impl-local-trait.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,5 +1,5 @@\n // Ensure that the compiler include the blanklet implementation suggestion\n-// when inside a `impl` statment are used two local traits.\n+// when inside a `impl` statement are used two local traits.\n //\n // edition:2021\n use std::fmt;"}, {"sha": "17ddaa312f7c440b1965df00f96e986e4eba9b6d", "filename": "src/test/ui/traits/negative-impls/explicitly-unimplemented-error-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fexplicitly-unimplemented-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fexplicitly-unimplemented-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fexplicitly-unimplemented-error-message.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,5 +1,5 @@\n // This tests issue #79683: note in the error message that the trait is\n-// explicitely unimplemented instead of suggesting to implement it.\n+// explicitly unimplemented instead of suggesting to implement it.\n \n #![feature(negative_impls)]\n "}, {"sha": "e49731725d51271c2f0bf24700985acc207fca69", "filename": "src/test/ui/type/type-alias-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -52,7 +52,7 @@ type T2<U> where U: Bound = U::Assoc;  //~ WARN not enforced in type aliases\n // Do this instead:\n type T4<U> = <U as Bound>::Assoc;\n \n-// Make sure the help about associatd types is not shown incorrectly\n+// Make sure the help about associated types is not shown incorrectly\n type T5<U: Bound> = <U as Bound>::Assoc;  //~ WARN not enforced in type aliases\n type T6<U: Bound> = ::std::vec::Vec<U>;  //~ WARN not enforced in type aliases\n "}, {"sha": "40781fbf082b648047a6431cdf4d37dae84b4dcd", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,4 +1,4 @@\n-// Test various uses of structs with distint variances to make sure\n+// Test various uses of structs with distinct variances to make sure\n // they permit lifetimes to be approximated as expected.\n \n struct SomeStruct<T>(fn(T));"}, {"sha": "d4b2d08342a9bd0f9c0d0770aec5ac31179300c6", "filename": "src/test/ui/variance/variance-use-contravariant-struct-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-2.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,4 +1,4 @@\n-// Test various uses of structs with distint variances to make sure\n+// Test various uses of structs with distinct variances to make sure\n // they permit lifetimes to be approximated as expected.\n \n #![allow(dead_code)]"}, {"sha": "72f50f3459d1a47d8002a84043e6117f60b0d5ff", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1430fb7ca499d517d9f4b3b6c5a81442129c88b/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs?ref=b1430fb7ca499d517d9f4b3b6c5a81442129c88b", "patch": "@@ -1,4 +1,4 @@\n-// Test various uses of structs with distint variances to make sure\n+// Test various uses of structs with distinct variances to make sure\n // they permit lifetimes to be approximated as expected.\n \n struct SomeStruct<T>(*mut T);"}]}