{"sha": "7fc35d391c76aed4defc8600e75215845afa66b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYzM1ZDM5MWM3NmFlZDRkZWZjODYwMGU3NTIxNTg0NWFmYTY2Yjc=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-18T19:26:45Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-18T19:26:45Z"}, "message": "Merge #993\n\n993: Fix installing vscode extension on MacOS r=matklad a=funkill\n\nVSCode often installed in MacOS as `Visual Studio Code.app` package and `code` binary located at `Contents/Resources/app/bin` in package. This path not exists in `$PATH` variable and we can't run `code`.\r\n\r\nIn previous version of `do_run` function all before space was command and all after - arguments. If path or command has spaces, extracting command breaks. To fix this i extracted command to separated argument of function.\r\n\r\nAll packages can be placed in system app dir (`/Applications`) or user app dir (`~/Applications`). I created helper function for find app in this directories.\r\n\r\n\n\nCo-authored-by: funkill2 <funkill2@gmail.com>", "tree": {"sha": "ccae2a9b37df57da996157d54113d2357edb8da3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccae2a9b37df57da996157d54113d2357edb8da3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fc35d391c76aed4defc8600e75215845afa66b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc35d391c76aed4defc8600e75215845afa66b7", "html_url": "https://github.com/rust-lang/rust/commit/7fc35d391c76aed4defc8600e75215845afa66b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fc35d391c76aed4defc8600e75215845afa66b7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "132b207a228d0c588b08bbfffd53002b46521a1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/132b207a228d0c588b08bbfffd53002b46521a1e", "html_url": "https://github.com/rust-lang/rust/commit/132b207a228d0c588b08bbfffd53002b46521a1e"}, {"sha": "69edc10f3529add3de65b62a7304d3fc258c7a62", "url": "https://api.github.com/repos/rust-lang/rust/commits/69edc10f3529add3de65b62a7304d3fc258c7a62", "html_url": "https://github.com/rust-lang/rust/commit/69edc10f3529add3de65b62a7304d3fc258c7a62"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "0c33396857df021d1784a159a57707851d723f92", "filename": "crates/tools/src/main.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7fc35d391c76aed4defc8600e75215845afa66b7/crates%2Ftools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc35d391c76aed4defc8600e75215845afa66b7/crates%2Ftools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fmain.rs?ref=7fc35d391c76aed4defc8600e75215845afa66b7", "patch": "@@ -5,6 +5,7 @@ use tools::{\n     generate, gen_tests, install_format_hook, run, run_with_output, run_rustfmt,\n     Overwrite, Result, run_fuzzer,\n };\n+use std::{path::{PathBuf}, env};\n \n fn main() -> Result<()> {\n     let matches = App::new(\"tasks\")\n@@ -17,7 +18,12 @@ fn main() -> Result<()> {\n         .subcommand(SubCommand::with_name(\"fuzz-tests\"))\n         .get_matches();\n     match matches.subcommand_name().expect(\"Subcommand must be specified\") {\n-        \"install-code\" => install_code_extension()?,\n+        \"install-code\" => {\n+            if cfg!(target_os = \"macos\") {\n+                fix_path_for_mac()?;\n+            }\n+            install_code_extension()?;\n+        }\n         \"gen-tests\" => gen_tests(Overwrite)?,\n         \"gen-syntax\" => generate(Overwrite)?,\n         \"format\" => run_rustfmt(Overwrite)?,\n@@ -63,3 +69,36 @@ fn verify_installed_extensions() -> Result<()> {\n     }\n     Ok(())\n }\n+\n+fn fix_path_for_mac() -> Result<()> {\n+    let mut vscode_path: Vec<PathBuf> = {\n+        const COMMON_APP_PATH: &str =\n+            r\"/Applications/Visual Studio Code.app/Contents/Resources/app/bin\";\n+        const ROOT_DIR: &str = \"\";\n+        let home_dir = match env::var(\"HOME\") {\n+            Ok(home) => home,\n+            Err(e) => bail!(\"Failed getting HOME from environment with error: {}.\", e),\n+        };\n+\n+        [ROOT_DIR, &home_dir]\n+            .iter()\n+            .map(|dir| String::from(dir.clone()) + COMMON_APP_PATH)\n+            .map(PathBuf::from)\n+            .filter(|path| path.exists())\n+            .collect()\n+    };\n+\n+    if !vscode_path.is_empty() {\n+        let vars = match env::var_os(\"PATH\") {\n+            Some(path) => path,\n+            None => bail!(\"Could not get PATH variable from env.\"),\n+        };\n+\n+        let mut paths = env::split_paths(&vars).collect::<Vec<_>>();\n+        paths.append(&mut vscode_path);\n+        let new_paths = env::join_paths(paths)?;\n+        env::set_var(\"PATH\", &new_paths);\n+    }\n+\n+    Ok(())\n+}"}]}