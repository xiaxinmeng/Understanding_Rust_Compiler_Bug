{"sha": "33cd862733af18d2a038a1a477f0e75b90c74a02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzY2Q4NjI3MzNhZjE4ZDJhMDM4YTFhNDc3ZjBlNzViOTBjNzRhMDI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-31T00:47:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-31T00:47:41Z"}, "message": "Rollup merge of #81547 - pierwill:edit-typeck-mod-docs, r=davidtwco\n\nEdit rustc_typeck top-level docs\n\nEdit punctuation and wording in note on type variables vs. type parameters.\n\nAlso add missing punctuation and two inter-doc links.", "tree": {"sha": "0cad8bbbd2b4b42d0d42f8c377c9375f16eb10a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cad8bbbd2b4b42d0d42f8c377c9375f16eb10a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33cd862733af18d2a038a1a477f0e75b90c74a02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgFf4tCRBK7hj4Ov3rIwAAdHIIAFCPh/axgmGCSMvhS+wS+pTh\nwClvGzgrtj0PqBVEMJQel9onhAAhloz9sINuRViKQfZpEhSIinCQxkozgHq1eGmT\nM10jawz+PhVu4xHjULMWIVGNBmBU/00+hF2zHZDBp25H56iBKdtpazxZsvukLII5\nxfHbcDa0F8YM1GwMakvaIIglqGer5Autmn3Sq2/OZcuYMEQV6RFFPKLS5DKvq/Iv\ni1/EQe6qVpb9uEZfXiYIvgIpxP99FoKxQ84pl/yoiFBPkCmqGQTwzDKHo9siIb3u\nGCFhh/DGhHnMpdCTtVH4eQsPtIdZYyULnexdmW865E/Z1a7ecjrlAKqR5gvgp9w=\n=8hfU\n-----END PGP SIGNATURE-----\n", "payload": "tree 0cad8bbbd2b4b42d0d42f8c377c9375f16eb10a4\nparent c74f0045a177c61bd58a23455b27548e3f4bf5e5\nparent adfb04fc4e9742ab9cce34e8c1989029c92eca48\nauthor Jonas Schievink <jonasschievink@gmail.com> 1612054061 +0100\ncommitter GitHub <noreply@github.com> 1612054061 +0100\n\nRollup merge of #81547 - pierwill:edit-typeck-mod-docs, r=davidtwco\n\nEdit rustc_typeck top-level docs\n\nEdit punctuation and wording in note on type variables vs. type parameters.\n\nAlso add missing punctuation and two inter-doc links.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33cd862733af18d2a038a1a477f0e75b90c74a02", "html_url": "https://github.com/rust-lang/rust/commit/33cd862733af18d2a038a1a477f0e75b90c74a02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33cd862733af18d2a038a1a477f0e75b90c74a02/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c74f0045a177c61bd58a23455b27548e3f4bf5e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c74f0045a177c61bd58a23455b27548e3f4bf5e5", "html_url": "https://github.com/rust-lang/rust/commit/c74f0045a177c61bd58a23455b27548e3f4bf5e5"}, {"sha": "adfb04fc4e9742ab9cce34e8c1989029c92eca48", "url": "https://api.github.com/repos/rust-lang/rust/commits/adfb04fc4e9742ab9cce34e8c1989029c92eca48", "html_url": "https://github.com/rust-lang/rust/commit/adfb04fc4e9742ab9cce34e8c1989029c92eca48"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "dc3e3b4e738392b99938667b32ae5cc8dc9eed3b", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33cd862733af18d2a038a1a477f0e75b90c74a02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33cd862733af18d2a038a1a477f0e75b90c74a02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=33cd862733af18d2a038a1a477f0e75b90c74a02", "patch": "@@ -52,13 +52,13 @@ The types of top-level items, which never contain unbound type\n variables, are stored directly into the `tcx` typeck_results.\n \n N.B., a type variable is not the same thing as a type parameter.  A\n-type variable is rather an \"instance\" of a type parameter: that is,\n-given a generic function `fn foo<T>(t: T)`: while checking the\n+type variable is an instance of a type parameter. That is,\n+given a generic function `fn foo<T>(t: T)`, while checking the\n function `foo`, the type `ty_param(0)` refers to the type `T`, which\n-is treated in abstract.  When `foo()` is called, however, `T` will be\n+is treated in abstract. However, when `foo()` is called, `T` will be\n substituted for a fresh type variable `N`.  This variable will\n eventually be resolved to some concrete type (which might itself be\n-type parameter).\n+a type parameter).\n \n */\n "}, {"sha": "fd44bafab6f76ea19abb763bd0a474d0c778cad7", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33cd862733af18d2a038a1a477f0e75b90c74a02/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33cd862733af18d2a038a1a477f0e75b90c74a02/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=33cd862733af18d2a038a1a477f0e75b90c74a02", "patch": "@@ -7,9 +7,9 @@ The type checker is responsible for:\n 1. Determining the type of each expression.\n 2. Resolving methods and traits.\n 3. Guaranteeing that most type rules are met. (\"Most?\", you say, \"why most?\"\n-   Well, dear reader, read on)\n+   Well, dear reader, read on.)\n \n-The main entry point is `check_crate()`. Type checking operates in\n+The main entry point is [`check_crate()`]. Type checking operates in\n several major phases:\n \n 1. The collect phase first passes over all items and determines their\n@@ -25,7 +25,7 @@ several major phases:\n    containing function).  Inference is used to supply types wherever\n    they are unknown. The actual checking of a function itself has\n    several phases (check, regionck, writeback), as discussed in the\n-   documentation for the `check` module.\n+   documentation for the [`check`] module.\n \n The type checker is defined into various submodules which are documented\n independently:"}]}