{"sha": "b599cf45d6119164bf7adc740c0c81dad2b73c1a", "node_id": "C_kwDOAAsO6NoAKGI1OTljZjQ1ZDYxMTkxNjRiZjdhZGM3NDBjMGM4MWRhZDJiNzNjMWE", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-07-06T22:23:38Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-07-13T16:22:49Z"}, "message": "inline associated_body\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "94a72a33e57156807a30f8d2536ae53fc93759f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94a72a33e57156807a30f8d2536ae53fc93759f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b599cf45d6119164bf7adc740c0c81dad2b73c1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b599cf45d6119164bf7adc740c0c81dad2b73c1a", "html_url": "https://github.com/rust-lang/rust/commit/b599cf45d6119164bf7adc740c0c81dad2b73c1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b599cf45d6119164bf7adc740c0c81dad2b73c1a/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "html_url": "https://github.com/rust-lang/rust/commit/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551"}], "stats": {"total": 25, "additions": 5, "deletions": 20}, "files": [{"sha": "3240360a53980908e9031d793baf6ba75e709b74", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b599cf45d6119164bf7adc740c0c81dad2b73c1a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b599cf45d6119164bf7adc740c0c81dad2b73c1a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=b599cf45d6119164bf7adc740c0c81dad2b73c1a", "patch": "@@ -39,6 +39,7 @@ pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {\n     }\n }\n \n+#[inline]\n pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {\n     match node {\n         Node::Item(Item {\n@@ -1292,27 +1293,19 @@ pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> Module\n         }\n \n         fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {\n-            if associated_body(Node::ForeignItem(item)).is_some() {\n-                self.body_owners.push(item.def_id);\n-            }\n-\n             self.foreign_items.push(item.foreign_item_id());\n             intravisit::walk_foreign_item(self, item)\n         }\n \n         fn visit_expr(&mut self, ex: &'hir Expr<'hir>) {\n-            if matches!(ex.kind, ExprKind::Closure { .. })\n-                && associated_body(Node::Expr(ex)).is_some()\n-            {\n+            if matches!(ex.kind, ExprKind::Closure { .. }) {\n                 self.body_owners.push(self.tcx.hir().local_def_id(ex.hir_id));\n             }\n             intravisit::walk_expr(self, ex)\n         }\n \n         fn visit_anon_const(&mut self, c: &'hir AnonConst) {\n-            if associated_body(Node::AnonConst(c)).is_some() {\n-                self.body_owners.push(self.tcx.hir().local_def_id(c.hir_id));\n-            }\n+            self.body_owners.push(self.tcx.hir().local_def_id(c.hir_id));\n             intravisit::walk_anon_const(self, c)\n         }\n     }\n@@ -1382,10 +1375,6 @@ pub(crate) fn hir_crate_items(tcx: TyCtxt<'_>, _: ()) -> ModuleItems {\n         }\n \n         fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {\n-            if associated_body(Node::ForeignItem(item)).is_some() {\n-                self.body_owners.push(item.def_id);\n-            }\n-\n             self.foreign_items.push(item.foreign_item_id());\n             intravisit::walk_foreign_item(self, item)\n         }\n@@ -1409,18 +1398,14 @@ pub(crate) fn hir_crate_items(tcx: TyCtxt<'_>, _: ()) -> ModuleItems {\n         }\n \n         fn visit_expr(&mut self, ex: &'hir Expr<'hir>) {\n-            if matches!(ex.kind, ExprKind::Closure { .. })\n-                && associated_body(Node::Expr(ex)).is_some()\n-            {\n+            if matches!(ex.kind, ExprKind::Closure { .. }) {\n                 self.body_owners.push(self.tcx.hir().local_def_id(ex.hir_id));\n             }\n             intravisit::walk_expr(self, ex)\n         }\n \n         fn visit_anon_const(&mut self, c: &'hir AnonConst) {\n-            if associated_body(Node::AnonConst(c)).is_some() {\n-                self.body_owners.push(self.tcx.hir().local_def_id(c.hir_id));\n-            }\n+            self.body_owners.push(self.tcx.hir().local_def_id(c.hir_id));\n             intravisit::walk_anon_const(self, c)\n         }\n     }"}]}