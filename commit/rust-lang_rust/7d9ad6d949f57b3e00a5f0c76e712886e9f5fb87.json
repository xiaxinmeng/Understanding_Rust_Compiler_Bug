{"sha": "7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkOWFkNmQ5NDlmNTdiM2UwMGE1ZjBjNzZlNzEyODg2ZTlmNWZiODc=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-08T12:36:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-08T12:36:09Z"}, "message": "Rollup merge of #78658 - casey:x, r=Mark-Simulacrum\n\nAdd a tool to run `x.py` from any subdirectory\n\nThis adds a binary called `x` in `src/tools/x`. All it does is check the current directory and its ancestors for a file called `x.py`, and if it finds one, runs it.\n\nBy installing x, you can easily run `x.py` from any subdirectory, and only need to type `x`.\n\nIt can be installed with `cargo install --path src/tools/x`\n\nThis is a copy of a [binary I've been using myself when working on rust](https://github.com/casey/bootstrap), currently published to crates.io as `bootstrap`.\n\nIt could be changed to avoid indirecting through `x.py`, and instead call the bootstrap module directly. However, this seemed like the simplest thing possible, and won't break if the details of how the bootstrap module is invoked change.", "tree": {"sha": "a2b6f7314f67077a57efba01ae57c8b0d73540f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2b6f7314f67077a57efba01ae57c8b0d73540f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfp+Y6CRBK7hj4Ov3rIwAAdHIIADYhIHsfIGWPo1TJw1nlp/5S\nafidFFELcmiR+ez8LQj0v6w9HdnTPk8noWRbV4ykDROILzfPRrz+RmaG77/ZXYJm\nMqgTYV3u0tx0K/egud0JwxKG8kCWpTfKjgXtNytQ1TyLJjFCBt4exHjM4VV+30jh\n2fFK4nzOhTARO9z8+Hslq/cYhu4EhaFEtTlaDVFqxiOeNltuCJp/BSa+GrOgMBX2\nfiZiFHF2MrP091jJs0hwcrUjY+HU/1bQrYApLwUJLtrfGowceY9Nemr03hOJ8Pe7\ntL3YN5dbAMzDLX29mWja85679hAdDVXa2EsaIB+qJxtKQXLwAKfPTgFj4ikGHs0=\n=OcrR\n-----END PGP SIGNATURE-----\n", "payload": "tree a2b6f7314f67077a57efba01ae57c8b0d73540f9\nparent eef9951e443a051495bd4758d6265a95f01aa5b9\nparent 5fc22f1431e209610040d92ba671966ab2781f0b\nauthor Mara Bos <m-ou.se@m-ou.se> 1604838969 +0100\ncommitter GitHub <noreply@github.com> 1604838969 +0100\n\nRollup merge of #78658 - casey:x, r=Mark-Simulacrum\n\nAdd a tool to run `x.py` from any subdirectory\n\nThis adds a binary called `x` in `src/tools/x`. All it does is check the current directory and its ancestors for a file called `x.py`, and if it finds one, runs it.\n\nBy installing x, you can easily run `x.py` from any subdirectory, and only need to type `x`.\n\nIt can be installed with `cargo install --path src/tools/x`\n\nThis is a copy of a [binary I've been using myself when working on rust](https://github.com/casey/bootstrap), currently published to crates.io as `bootstrap`.\n\nIt could be changed to avoid indirecting through `x.py`, and instead call the bootstrap module directly. However, this seemed like the simplest thing possible, and won't break if the details of how the bootstrap module is invoked change.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87", "html_url": "https://github.com/rust-lang/rust/commit/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eef9951e443a051495bd4758d6265a95f01aa5b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/eef9951e443a051495bd4758d6265a95f01aa5b9", "html_url": "https://github.com/rust-lang/rust/commit/eef9951e443a051495bd4758d6265a95f01aa5b9"}, {"sha": "5fc22f1431e209610040d92ba671966ab2781f0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fc22f1431e209610040d92ba671966ab2781f0b", "html_url": "https://github.com/rust-lang/rust/commit/5fc22f1431e209610040d92ba671966ab2781f0b"}], "stats": {"total": 114, "additions": 114, "deletions": 0}, "files": [{"sha": "5f7135e38d11370085c8d2d18f5d2b0bb2027a78", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87", "patch": "@@ -31,6 +31,7 @@ __pycache__/\n /inst/\n /llvm/\n /mingw-build/\n+/src/tools/x/target\n # Created by default with `src/ci/docker/run.sh`:\n /obj/\n /unicode-downloads"}, {"sha": "e1a36d880867b122814d6251a2e54e4b296b73cf", "filename": "Cargo.toml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87", "patch": "@@ -29,11 +29,17 @@ members = [\n   \"src/tools/unicode-table-generator\",\n   \"src/tools/expand-yaml-anchors\",\n ]\n+\n exclude = [\n   \"build\",\n   \"compiler/rustc_codegen_cranelift\",\n   # HACK(eddyb) This hardcodes the fact that our CI uses `/checkout/obj`.\n   \"obj\",\n+  # The `x` binary is a thin wrapper that calls `x.py`, which initializes\n+  # submodules, before which workspace members cannot be invoked because\n+  # not all `Cargo.toml` files are available, so we exclude the `x` binary,\n+  # so it can be invoked before the current checkout is set up.\n+  \"src/tools/x\",\n ]\n \n [profile.release.package.compiler_builtins]"}, {"sha": "723d6cb25ed6a9726637ef7b871ce6a6068a7c71", "filename": "src/tools/x/Cargo.lock", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87/src%2Ftools%2Fx%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87/src%2Ftools%2Fx%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2FCargo.lock?ref=7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87", "patch": "@@ -0,0 +1,5 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+[[package]]\n+name = \"x\"\n+version = \"0.1.0\""}, {"sha": "72c4948c617fa21bf006957a4f0d81e428cad86a", "filename": "src/tools/x/Cargo.toml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87/src%2Ftools%2Fx%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87/src%2Ftools%2Fx%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2FCargo.toml?ref=7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87", "patch": "@@ -0,0 +1,7 @@\n+[package]\n+name = \"x\"\n+version = \"0.1.0\"\n+description = \"Run x.py slightly more conveniently\"\n+authors = [\"Casey Rodarmor <casey@rodarmor.com>\"]\n+edition = \"2018\"\n+publish = false"}, {"sha": "3b3cf2847c2005af1235bc0da562c3ac82c2f303", "filename": "src/tools/x/README.md", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87/src%2Ftools%2Fx%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87/src%2Ftools%2Fx%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2FREADME.md?ref=7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87", "patch": "@@ -0,0 +1,3 @@\n+# x\n+\n+`x` invokes `x.py` from any subdirectory."}, {"sha": "6c0311433d676a98a9771ae55011bdde04452c78", "filename": "src/tools/x/src/main.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2Fsrc%2Fmain.rs?ref=7d9ad6d949f57b3e00a5f0c76e712886e9f5fb87", "patch": "@@ -0,0 +1,92 @@\n+//! Run `x.py` from any subdirectory of a rust compiler checkout.\n+//!\n+//! We prefer `exec`, to avoid adding an extra process in the process tree.\n+//! However, since `exec` isn't available on Windows, we indirect through\n+//! `exec_or_status`, which will call `exec` on unix and `status` on Windows.\n+//!\n+//! We use `python`, `python3`, or `python2` as the python interpreter to run\n+//! `x.py`, in that order of preference.\n+\n+use std::{\n+    env, io,\n+    process::{self, Command, ExitStatus},\n+};\n+\n+const PYTHON: &str = \"python\";\n+const PYTHON2: &str = \"python2\";\n+const PYTHON3: &str = \"python3\";\n+\n+fn python() -> &'static str {\n+    let val = match env::var_os(\"PATH\") {\n+        Some(val) => val,\n+        None => return PYTHON,\n+    };\n+\n+    let mut python2 = false;\n+    let mut python3 = false;\n+\n+    for dir in env::split_paths(&val) {\n+        if dir.join(PYTHON).exists() {\n+            return PYTHON;\n+        }\n+\n+        python2 |= dir.join(PYTHON2).exists();\n+        python3 |= dir.join(PYTHON3).exists();\n+    }\n+\n+    if python3 {\n+        PYTHON3\n+    } else if python2 {\n+        PYTHON2\n+    } else {\n+        PYTHON\n+    }\n+}\n+\n+#[cfg(unix)]\n+fn exec_or_status(command: &mut Command) -> io::Result<ExitStatus> {\n+    use std::os::unix::process::CommandExt;\n+    Err(command.exec())\n+}\n+\n+#[cfg(not(unix))]\n+fn exec_or_status(command: &mut Command) -> io::Result<ExitStatus> {\n+    command.status()\n+}\n+\n+fn main() {\n+    let current = match env::current_dir() {\n+        Ok(dir) => dir,\n+        Err(err) => {\n+            eprintln!(\"Failed to get current directory: {}\", err);\n+            process::exit(1);\n+        }\n+    };\n+\n+    for dir in current.ancestors() {\n+        let candidate = dir.join(\"x.py\");\n+\n+        if candidate.exists() {\n+            let mut python = Command::new(python());\n+\n+            python.arg(&candidate).args(env::args().skip(1)).current_dir(dir);\n+\n+            let result = exec_or_status(&mut python);\n+\n+            match result {\n+                Err(error) => {\n+                    eprintln!(\"Failed to invoke `{}`: {}\", candidate.display(), error);\n+                }\n+                Ok(status) => {\n+                    process::exit(status.code().unwrap_or(1));\n+                }\n+            }\n+        }\n+    }\n+\n+    eprintln!(\n+        \"x.py not found. Please run inside of a checkout of `https://github.com/rust-lang/rust`.\"\n+    );\n+\n+    process::exit(1);\n+}"}]}