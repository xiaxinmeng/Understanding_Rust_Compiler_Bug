{"sha": "9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMTczZjE3YzBmYjEwYTM5MjNkYTg5MGMxMjA0ZTBhNzFkM2M5Yzc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-02T05:08:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-02T06:25:33Z"}, "message": "Remove lots of estr code from rustc. Issue #855", "tree": {"sha": "be9eb6a7f717bd898bd5006dfebb1f0e92583b9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be9eb6a7f717bd898bd5006dfebb1f0e92583b9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "html_url": "https://github.com/rust-lang/rust/commit/9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3eb4911a227500c51858cdb830fe27cb5b9ca7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3eb4911a227500c51858cdb830fe27cb5b9ca7", "html_url": "https://github.com/rust-lang/rust/commit/1d3eb4911a227500c51858cdb830fe27cb5b9ca7"}], "stats": {"total": 175, "additions": 35, "deletions": 140}, "files": [{"sha": "731e05125dae1704a9f4dbabb04003e3f1da9677", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -84,7 +84,7 @@ fn get_meta_item_value_str(meta: &@ast::meta_item) -> option::t<istr> {\n     alt meta.node {\n       ast::meta_name_value(_, v) {\n         alt v.node {\n-          ast::lit_str(s, _) { option::some(s) }\n+          ast::lit_str(s) { option::some(s) }\n           _ { option::none }\n         }\n       }\n@@ -196,7 +196,7 @@ fn span<@T>(item: &T) -> ast::spanned<T> {\n \n fn mk_name_value_item_str(name: ast::ident,\n                           value: &istr) -> @ast::meta_item {\n-    let value_lit = span(ast::lit_str(value, ast::sk_unique));\n+    let value_lit = span(ast::lit_str(value));\n     ret mk_name_value_item(name, value_lit);\n }\n "}, {"sha": "ae2a663c3db63d5dcf43aac70d21d167c348a447", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -253,7 +253,7 @@ fn mk_test_desc_rec(cx: &test_ctxt, test: test) -> @ast::expr {\n              ast_util::path_name_i(path)];\n \n     let name_lit: ast::lit =\n-        nospan(ast::lit_str(ast_util::path_name_i(path), ast::sk_unique));\n+        nospan(ast::lit_str(ast_util::path_name_i(path)));\n     let name_expr: ast::expr =\n         {id: cx.next_node_id(),\n          node: ast::expr_lit(@name_lit),"}, {"sha": "e1a9e54a6c5130d3254f4df7b54c8a53f36652f6", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -460,7 +460,7 @@ fn encode_meta_item(ebml_w: &ebml::writer, mi: &meta_item) {\n       }\n       meta_name_value(name, value) {\n         alt value.node {\n-          lit_str(value, _) {\n+          lit_str(value) {\n             ebml::start_tag(ebml_w, tag_meta_item_name_value);\n             ebml::start_tag(ebml_w, tag_meta_item_name);\n             ebml_w.writer.write(str::bytes(name));"}, {"sha": "c72bc02028849749b36e85a8b4de0ae54f735429", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -193,7 +193,6 @@ fn parse_ty(st: @pstate, sd: str_def) -> ty::t {\n         }\n       }\n       'c' { ret ty::mk_char(st.tcx); }\n-      's' { ret ty::mk_str(st.tcx); }\n       'S' { ret ty::mk_istr(st.tcx); }\n       't' {\n         assert (next(st) as char == '[');"}, {"sha": "46015f72cf89119498434906f91b6cb3eece8e7c", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -113,7 +113,6 @@ fn enc_sty(w: &io::writer, cx: &@ctxt, st: &ty::sty) {\n         }\n       }\n       ty::ty_char. { w.write_char('c'); }\n-      ty::ty_str. { w.write_char('s'); }\n       ty::ty_istr. { w.write_char('S'); }\n       ty::ty_tag(def, tys) {\n         w.write_str(~\"t[\");"}, {"sha": "e957bb7163d73bf9a8d352e06471ef4f47f3996c", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -282,7 +282,7 @@ fn check_for(cx: &ctx, local: &@ast::local, seq: &@ast::expr, blk: &ast::blk,\n     let seq_t = ty::expr_ty(cx.tcx, seq);\n     alt ty::struct(cx.tcx, seq_t) {\n       ty::ty_vec(mt) { if mt.mut != ast::imm { unsafe = some(seq_t); } }\n-      ty::ty_str. | ty::ty_istr. {/* no-op */ }\n+      ty::ty_istr. {/* no-op */ }\n       _ {\n         cx.tcx.sess.span_unimpl(seq.span, ~\"unknown seq type \" +\n                                 util::ppaux::ty_to_str(cx.tcx, seq_t));"}, {"sha": "f0e366f0e9ea96060bb03c867cf400d9d9fa57f3", "filename": "src/comp/middle/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmiddle%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmiddle%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fgc.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -137,7 +137,7 @@ fn type_is_gc_relevant(cx: &ty::ctxt, ty: ty::t) -> bool {\n       ty::ty_constr(sub, _) { ret type_is_gc_relevant(cx, sub); }\n \n \n-      ty::ty_str. | ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_fn(_, _, _, _, _)\n+      ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_fn(_, _, _, _, _)\n       | ty::ty_native_fn(_, _, _) | ty::ty_obj(_) | ty::ty_param(_, _) |\n       ty::ty_res(_, _, _) {\n         ret true;"}, {"sha": "0a6364f4bda63ef659b5e1956df4ae69ef41bdd7", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -305,9 +305,6 @@ fn shape_of(ccx: &@crate_ctxt, t: ty::t) -> [u8] {\n       ty::ty_machine(ast::ty_i64.) { s += [shape_i64]; }\n \n \n-      ty::ty_str. {\n-        s += [shape_evec, 1u8, 1u8, 0u8, shape_u8];\n-      }\n       ty::ty_istr. {\n         s += [shape_ivec];\n         add_bool(s, true); // type is POD"}, {"sha": "6d69a8c8c40d414d87962c2963db83474d578b0b", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 49, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -202,7 +202,6 @@ fn type_of_inner(cx: &@crate_ctxt, sp: &span, t: ty::t) -> TypeRef {\n         }\n       }\n       ty::ty_char. { llty = T_char(); }\n-      ty::ty_str. { llty = T_ptr(T_str()); }\n       ty::ty_istr. { llty = T_ptr(T_ivec(T_i8())); }\n       ty::ty_tag(did, _) { llty = type_of_tag(cx, sp, did, t); }\n       ty::ty_box(mt) { llty = T_ptr(T_box(type_of_inner(cx, sp, mt.ty))); }\n@@ -1334,12 +1333,6 @@ fn incr_refcnt_of_boxed(cx: &@block_ctxt, box_ptr: ValueRef) -> @block_ctxt {\n fn make_free_glue(bcx: &@block_ctxt, v0: ValueRef, t: ty::t) {\n     // NB: v is an *alias* of type t here, not a direct value.\n     let bcx = alt ty::struct(bcx_tcx(bcx), t) {\n-      ty::ty_str. {\n-        let v = Load(bcx, v0);\n-        if !bcx_ccx(bcx).sess.get_opts().do_gc {\n-            trans_non_gc_free(bcx, v)\n-        } else { bcx }\n-      }\n       ty::ty_box(body_mt) {\n         let v = Load(bcx, v0);\n         let body = GEP(bcx, v, [C_int(0), C_int(abi::box_rc_field_body)]);\n@@ -1397,7 +1390,6 @@ fn make_drop_glue(bcx: &@block_ctxt, v0: ValueRef, t: ty::t) {\n     // NB: v0 is an *alias* of type t here, not a direct value.\n     let ccx = bcx_ccx(bcx);\n     let bcx = alt ty::struct(ccx.tcx, t) {\n-      ty::ty_str. { decr_refcnt_maybe_free(bcx, v0, v0, t) }\n       ty::ty_vec(_) { ivec::make_drop_glue(bcx, v0, t) }\n       ty::ty_istr. { ivec::make_drop_glue(bcx, v0, t) }\n       ty::ty_box(_) { decr_refcnt_maybe_free(bcx, v0, v0, t) }\n@@ -1843,10 +1835,6 @@ fn iter_sequence(cx: @block_ctxt, v: ValueRef, t: ty::t, f: &val_and_ty_fn)\n \n \n     alt ty::struct(bcx_tcx(cx), t) {\n-      ty::ty_str. {\n-        let et = ty::mk_mach(bcx_tcx(cx), ast::ty_u8);\n-        ret iter_sequence_body(cx, v, et, f, true, false);\n-      }\n       ty::ty_vec(elt) {\n         ret iter_sequence_body(cx, v, elt.ty, f, false, true);\n       }\n@@ -2263,16 +2251,15 @@ fn trans_crate_lit(cx: &@crate_ctxt, lit: &ast::lit) -> ValueRef {\n       ast::lit_char(c) { ret C_integral(T_char(), c as uint, False); }\n       ast::lit_bool(b) { ret C_bool(b); }\n       ast::lit_nil. { ret C_nil(); }\n-      ast::lit_str(s, ast::sk_rc.) { ret C_str(cx, s); }\n-      ast::lit_str(s, ast::sk_unique.) {\n+      ast::lit_str(s) {\n         cx.sess.span_unimpl(lit.span, ~\"unique string in this context\");\n       }\n     }\n }\n \n fn trans_lit(cx: &@block_ctxt, lit: &ast::lit) -> result {\n     alt lit.node {\n-      ast::lit_str(s, ast::sk_unique.) { ret ivec::trans_istr(cx, s); }\n+      ast::lit_str(s) { ret ivec::trans_istr(cx, s); }\n       _ { ret rslt(cx, trans_crate_lit(bcx_ccx(cx), lit)); }\n     }\n }\n@@ -2351,10 +2338,6 @@ fn trans_evec_append(cx: &@block_ctxt, t: ty::t, lhs: ValueRef,\n                      rhs: ValueRef) -> result {\n     let elt_ty = ty::sequence_element_type(bcx_tcx(cx), t);\n     let skip_null = C_bool(false);\n-    alt ty::struct(bcx_tcx(cx), t) {\n-      ty::ty_str. { skip_null = C_bool(true); }\n-      _ { }\n-    }\n     let bcx = cx;\n     let ti = none::<@tydesc_info>;\n     let llvec_tydesc = get_tydesc(bcx, t, false, tps_normal, ti).result;\n@@ -5529,45 +5512,20 @@ fn create_main_wrapper(ccx: &@crate_ctxt, sp: &span, main_llfn: ValueRef,\n         ccx.sess.span_fatal(sp, ~\"multiple 'main' functions\");\n     }\n \n-    let (main_takes_argv, main_takes_istr) =\n+    let main_takes_argv =\n         alt ty::struct(ccx.tcx, main_node_type) {\n           ty::ty_fn(_, args, _, _, _) {\n-            if std::vec::len(args) == 0u {\n-                (false, false)\n-            } else {\n-                alt ty::struct(ccx.tcx, args[0].ty) {\n-                  ty::ty_vec({ty: t, _}) {\n-                    alt ty::struct(ccx.tcx, t) {\n-                      ty::ty_str. { (true, false) }\n-                      ty::ty_istr. { (true, true) }\n-                    }\n-                  }\n-                }\n-            }\n+            std::vec::len(args) != 0u\n           }\n         };\n \n     let llfn = create_main(ccx, sp, main_llfn,\n-                           main_takes_argv, main_takes_istr);\n+                           main_takes_argv);\n     ccx.main_fn = some(llfn);\n \n-    // FIXME: This is a transitional way to let the runtime know\n-    // it needs to feed us istrs\n-    let lltakesistr = str::as_buf(~\"_rust_main_takes_istr\", { |buf|\n-        llvm::LLVMAddGlobal(ccx.llmod, T_int(), buf)\n-    });\n-    llvm::LLVMSetInitializer(lltakesistr, C_uint(main_takes_istr as uint));\n-    llvm::LLVMSetGlobalConstant(lltakesistr, True);\n-    llvm::LLVMSetLinkage(lltakesistr,\n-                         lib::llvm::LLVMExternalLinkage as llvm::Linkage);\n-\n     fn create_main(ccx: &@crate_ctxt, sp: &span, main_llfn: ValueRef,\n-                   takes_argv: bool, takes_istr: bool) -> ValueRef {\n-        let unit_ty = if takes_istr {\n-            ty::mk_istr(ccx.tcx)\n-        } else {\n-            ty::mk_str(ccx.tcx)\n-        };\n+                   takes_argv: bool) -> ValueRef {\n+        let unit_ty = ty::mk_istr(ccx.tcx);\n         let ivecarg_ty: ty::arg =\n             {mode: ty::mo_val,\n              ty:"}, {"sha": "535082131da9d5e5b9249b9ab31490e9042bef62", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -408,7 +408,7 @@ fn compile_submatch(bcx: @block_ctxt, m: &match, vals: [ValueRef],\n           }\n           lit(l) {\n             test_val = Load(bcx, val);\n-            kind = alt l.node { ast::lit_str(_, _) { compare } _ { switch } };\n+            kind = alt l.node { ast::lit_str(_) { compare } _ { switch } };\n           }\n         }\n     }"}, {"sha": "3c7e7de91f86be2439c7818bbd7bbcf5988cfa7e", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -78,7 +78,6 @@ export mk_res;\n export mk_param;\n export mk_ptr;\n export mk_rec;\n-export mk_str;\n export mk_tag;\n export mk_tup;\n export mk_type;\n@@ -133,7 +132,6 @@ export ty_res;\n export ty_param;\n export ty_ptr;\n export ty_rec;\n-export ty_str;\n export ty_tag;\n export ty_tup;\n export ty_type;\n@@ -252,7 +250,6 @@ tag sty {\n     ty_uint;\n     ty_machine(ast::ty_mach);\n     ty_char;\n-    ty_str;\n     ty_istr;\n     ty_tag(def_id, [t]);\n     ty_box(mt);\n@@ -335,15 +332,13 @@ const idx_f64: uint = 14u;\n \n const idx_char: uint = 15u;\n \n-const idx_str: uint = 16u;\n+const idx_istr: uint = 16u;\n \n-const idx_istr: uint = 17u;\n+const idx_type: uint = 17u;\n \n-const idx_type: uint = 18u;\n+const idx_bot: uint = 18u;\n \n-const idx_bot: uint = 19u;\n-\n-const idx_first_others: uint = 20u;\n+const idx_first_others: uint = 19u;\n \n type type_store = interner::interner<@raw_t>;\n \n@@ -369,7 +364,6 @@ fn populate_type_store(cx: &ctxt) {\n     intern(cx, ty_machine(ast::ty_f32), none);\n     intern(cx, ty_machine(ast::ty_f64), none);\n     intern(cx, ty_char, none);\n-    intern(cx, ty_str, none);\n     intern(cx, ty_istr, none);\n     intern(cx, ty_type, none);\n     intern(cx, ty_bot, none);\n@@ -449,7 +443,6 @@ fn mk_raw_ty(cx: &ctxt, st: &sty, _in_cname: &option::t<istr>) -> @raw_t {\n       ty_uint. {/* no-op */ }\n       ty_machine(_) {/* no-op */ }\n       ty_char. {/* no-op */ }\n-      ty_str. {/* no-op */ }\n       ty_istr. {/* no-op */ }\n       ty_type. {/* no-op */ }\n       ty_native(_) {/* no-op */ }\n@@ -537,8 +530,6 @@ fn mk_mach(_cx: &ctxt, tm: &ast::ty_mach) -> t {\n \n fn mk_char(_cx: &ctxt) -> t { ret idx_char; }\n \n-fn mk_str(_cx: &ctxt) -> t { ret idx_str; }\n-\n fn mk_istr(_cx: &ctxt) -> t { ret idx_istr; }\n \n fn mk_tag(cx: &ctxt, did: &ast::def_id, tys: &[t]) -> t {\n@@ -624,7 +615,6 @@ fn walk_ty(cx: &ctxt, walker: ty_walk, ty: t) {\n       ty_float. {/* no-op */ }\n       ty_machine(_) {/* no-op */ }\n       ty_char. {/* no-op */ }\n-      ty_str. {/* no-op */ }\n       ty_istr. {/* no-op */ }\n       ty_type. {/* no-op */ }\n       ty_native(_) {/* no-op */ }\n@@ -688,7 +678,6 @@ fn fold_ty(cx: &ctxt, fld: fold_mode, ty_0: t) -> t {\n       ty_float. {/* no-op */ }\n       ty_machine(_) {/* no-op */ }\n       ty_char. {/* no-op */ }\n-      ty_str. {/* no-op */ }\n       ty_istr. {/* no-op */ }\n       ty_type. {/* no-op */ }\n       ty_native(_) {/* no-op */ }\n@@ -831,7 +820,6 @@ fn type_is_copyable(cx: &ctxt, ty: t) -> bool {\n \n fn type_is_sequence(cx: &ctxt, ty: t) -> bool {\n     alt struct(cx, ty) {\n-      ty_str. { ret true; }\n       ty_istr. { ret true; }\n       ty_vec(_) { ret true; }\n       _ { ret false; }\n@@ -840,17 +828,13 @@ fn type_is_sequence(cx: &ctxt, ty: t) -> bool {\n \n fn type_is_str(cx: &ctxt, ty: t) -> bool {\n     alt struct(cx, ty) {\n-      ty_str. { ret true; }\n       ty_istr. { ret true; }\n       _ { ret false; }\n     }\n }\n \n fn sequence_is_interior(cx: &ctxt, ty: t) -> bool {\n     alt struct(cx, ty) {\n-      ty::ty_str. {\n-        ret false;\n-      }\n       ty::ty_vec(_) { ret true; }\n       ty::ty_istr. { ret true; }\n       _ { cx.sess.bug(~\"sequence_is_interior called on non-sequence type\"); }\n@@ -859,7 +843,6 @@ fn sequence_is_interior(cx: &ctxt, ty: t) -> bool {\n \n fn sequence_element_type(cx: &ctxt, ty: t) -> t {\n     alt struct(cx, ty) {\n-      ty_str. { ret mk_mach(cx, ast::ty_u8); }\n       ty_istr. { ret mk_mach(cx, ast::ty_u8); }\n       ty_vec(mt) { ret mt.ty; }\n       _ { cx.sess.bug(\n@@ -898,7 +881,6 @@ fn type_is_box(cx: &ctxt, ty: t) -> bool {\n \n fn type_is_boxed(cx: &ctxt, ty: t) -> bool {\n     alt struct(cx, ty) {\n-      ty_str. { ret true; }\n       ty_box(_) { ret true; }\n       _ { ret false; }\n     }\n@@ -1020,12 +1002,6 @@ fn type_kind(cx: &ctxt, ty: t) -> ast::kind {\n       }\n \n \n-      // Those things with refcounts-to-interior are just shared.\n-      ty_str. {\n-        result = kind_shared;\n-      }\n-\n-\n       // FIXME: obj is broken for now, since we aren't asserting\n       // anything about its fields.\n       ty_obj(_) {\n@@ -1240,7 +1216,7 @@ fn type_is_pod(cx: &ctxt, ty: t) -> bool {\n \n \n       // Boxed types\n-      ty_str. | ty_istr. | ty_box(_) | ty_vec(_) | ty_fn(_, _, _, _, _) |\n+      ty_istr. | ty_box(_) | ty_vec(_) | ty_fn(_, _, _, _, _) |\n       ty_native_fn(_, _, _) | ty_obj(_) {\n         result = false;\n       }\n@@ -1392,7 +1368,6 @@ fn hash_type_structure(st: &sty) -> uint {\n         }\n       }\n       ty_char. { ret 15u; }\n-      ty_str. { ret 16u; }\n       ty_istr. { ret 17u; }\n       ty_tag(did, tys) {\n         let h = hash_def(18u, did);\n@@ -2151,7 +2126,6 @@ mod unify {\n           ty::ty_machine(_) { ret struct_cmp(cx, expected, actual); }\n           ty::ty_float. { ret struct_cmp(cx, expected, actual); }\n           ty::ty_char. { ret struct_cmp(cx, expected, actual); }\n-          ty::ty_str. { ret struct_cmp(cx, expected, actual); }\n           ty::ty_istr. { ret struct_cmp(cx, expected, actual); }\n           ty::ty_type. { ret struct_cmp(cx, expected, actual); }\n           ty::ty_native(ex_id) {\n@@ -2759,7 +2733,6 @@ fn is_binopable(cx: &ctxt, ty: t, op: ast::binop) -> bool {\n           ty_machine(ast::ty_f64.) { tycat_float }\n           ty_char. { tycat_int }\n           ty_ptr(_) { tycat_int }\n-          ty_str. { tycat_str }\n           ty_istr. { tycat_str }\n           ty_vec(_) { tycat_vec }\n           ty_rec(_) { tycat_struct }"}, {"sha": "daa6e5f368d9b1364786edbc7a2e96b5225794c3", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -326,7 +326,6 @@ fn ast_ty_to_ty(tcx: &ty::ctxt, getter: &ty_getter, ast_ty: &@ast::ty) ->\n       ast::ty_float. { typ = ty::mk_float(tcx); }\n       ast::ty_machine(tm) { typ = ty::mk_mach(tcx, tm); }\n       ast::ty_char. { typ = ty::mk_char(tcx); }\n-      ast::ty_str. { typ = ty::mk_str(tcx); }\n       ast::ty_istr. { typ = ty::mk_istr(tcx); }\n       ast::ty_box(mt) {\n         typ = ty::mk_box(tcx, ast_mt_to_mt(tcx, getter, mt));\n@@ -1308,8 +1307,7 @@ fn gather_locals(ccx: &@crate_ctxt, f: &ast::_fn, id: &ast::node_id,\n // AST fragment checking\n fn check_lit(ccx: @crate_ctxt, lit: &@ast::lit) -> ty::t {\n     alt lit.node {\n-      ast::lit_str(_, ast::sk_rc.) { ret ty::mk_str(ccx.tcx); }\n-      ast::lit_str(_, ast::sk_unique.) { ret ty::mk_istr(ccx.tcx); }\n+      ast::lit_str(_) { ret ty::mk_istr(ccx.tcx); }\n       ast::lit_char(_) { ret ty::mk_char(ccx.tcx); }\n       ast::lit_int(_) { ret ty::mk_int(ccx.tcx); }\n       ast::lit_float(_) { ret ty::mk_float(ccx.tcx); }\n@@ -1869,13 +1867,7 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr, unify: &unifier,\n         alt expr_opt {\n           none. {/* do nothing */ }\n           some(e) {\n-            // FIXME: istr transitional. Should be:\n-            // check_expr_with(fcx, e, ty::mk_str(tcx));\n-            check_expr(fcx, e);\n-            if !are_compatible(fcx, expr_ty(tcx, e), ty::mk_str(tcx))\n-                && !are_compatible(fcx, expr_ty(tcx, e), ty::mk_istr(tcx)) {\n-                check_expr_with(fcx, e, ty::mk_str(tcx));\n-            }\n+            check_expr_with(fcx, e, ty::mk_istr(tcx));\n           }\n         }\n         write::bot_ty(tcx, id);\n@@ -1974,7 +1966,6 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr, unify: &unifier,\n         let elt_ty;\n         let ety = expr_ty(tcx, seq);\n         alt structure_of(fcx, expr.span, ety) {\n-          ty::ty_str. { elt_ty = ty::mk_mach(tcx, ast::ty_u8); }\n           ty::ty_vec(vec_elt_ty) { elt_ty = vec_elt_ty.ty; }\n           ty::ty_istr. { elt_ty = ty::mk_mach(tcx, ast::ty_u8); }\n           _ {\n@@ -2294,10 +2285,6 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr, unify: &unifier,\n         }\n         alt structure_of(fcx, expr.span, base_t) {\n           ty::ty_vec(mt) { write::ty_only_fixup(fcx, id, mt.ty); }\n-          ty::ty_str. {\n-            let typ = ty::mk_mach(tcx, ast::ty_u8);\n-            write::ty_only_fixup(fcx, id, typ);\n-          }\n           ty::ty_istr. {\n             let typ = ty::mk_mach(tcx, ast::ty_u8);\n             write::ty_only_fixup(fcx, id, typ);\n@@ -2755,7 +2742,6 @@ fn arg_is_argv_ty(tcx: &ty::ctxt, a: &ty::arg) -> bool {\n       ty::ty_vec(mt) {\n         if mt.mut != ast::imm { ret false; }\n         alt ty::struct(tcx, mt.ty) {\n-          ty::ty_str. { ret true; }\n           ty::ty_istr. { ret true; }\n           _ { ret false; }\n         }"}, {"sha": "7e1a7942f75937c1e3decb2b1855fa7a43561709", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -160,9 +160,6 @@ type field = spanned<field_>;\n \n tag check_mode { checked; unchecked; }\n \n-// FIXME: temporary\n-tag seq_kind { sk_unique; sk_rc; }\n-\n type expr = {id: node_id, node: expr_, span: span};\n \n tag expr_ {\n@@ -241,7 +238,7 @@ tag mac_ {\n type lit = spanned<lit_>;\n \n tag lit_ {\n-    lit_str(istr, seq_kind);\n+    lit_str(istr);\n     lit_char(char);\n     lit_int(int);\n     lit_uint(uint);\n@@ -304,7 +301,6 @@ tag ty_ {\n     ty_float;\n     ty_machine(ty_mach);\n     ty_char;\n-    ty_str;\n     ty_istr; // interior string\n     ty_box(mt);\n     ty_vec(mt); // interior vector"}, {"sha": "2dcc43ef178e412d545c11675b766fcb44f6a069", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -104,7 +104,7 @@ fn expr_to_str(cx: &ext_ctxt, expr: @ast::expr, error: &istr) -> istr {\n     alt expr.node {\n       ast::expr_lit(l) {\n         alt l.node {\n-          ast::lit_str(s, _) { ret s; }\n+          ast::lit_str(s) { ret s; }\n           _ { cx.span_fatal(l.span, error); }\n         }\n       }"}, {"sha": "487b12d0bc22f53c7db2d7b0f0decb5dd13c11f0", "filename": "src/comp/syntax/ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -36,7 +36,7 @@ fn expand_syntax_ext(cx: &ext_ctxt, sp: codemap::span, arg: @ast::expr,\n }\n \n fn make_new_str(cx: &ext_ctxt, sp: codemap::span, s: &istr) -> @ast::expr {\n-    ret make_new_lit(cx, sp, ast::lit_str(s, ast::sk_unique));\n+    ret make_new_lit(cx, sp, ast::lit_str(s));\n }\n //\n // Local Variables:"}, {"sha": "91a83b0626731514bd0b23f6e60d2353f56ec9cf", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -53,7 +53,7 @@ fn pieces_to_expr(cx: &ext_ctxt, sp: span, pieces: &[piece],\n         ret @{id: cx.next_id(), node: ast::expr_lit(sp_lit), span: sp};\n     }\n     fn make_new_str(cx: &ext_ctxt, sp: span, s: &istr) -> @ast::expr {\n-        let lit = ast::lit_str(s, ast::sk_unique);\n+        let lit = ast::lit_str(s);\n         ret make_new_lit(cx, sp, lit);\n     }\n     fn make_new_int(cx: &ext_ctxt, sp: span, i: int) -> @ast::expr {"}, {"sha": "f30d69325556a9d1dbe3be7e90975f628377f175", "filename": "src/comp/syntax/ext/ident_to_str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -19,7 +19,6 @@ fn expand_syntax_ext(cx: &ext_ctxt, sp: codemap::span, arg: @ast::expr,\n \n     ret make_new_lit(cx, sp,\n                      ast::lit_str(expr_to_ident(cx, args[0u],\n-                                                ~\"expected an ident\"),\n-                                  ast::sk_unique));\n+                                                ~\"expected an ident\")));\n \n }"}, {"sha": "7be1d78d7306e897e9c4586a58969dd83ec690f8", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -708,7 +708,7 @@ fn parse_lit(p: &parser) -> ast::lit {\n           token::LIT_CHAR(c) { p.bump(); lit = ast::lit_char(c); }\n           token::LIT_STR(s) {\n             p.bump();\n-            lit = ast::lit_str(p.get_str(s), ast::sk_unique);\n+            lit = ast::lit_str(p.get_str(s));\n           }\n           token::LPAREN. {\n             p.bump();\n@@ -895,8 +895,7 @@ fn parse_bottom_expr(p: &parser) -> @ast::expr {\n             let sp = p.get_span();\n             p.bump();\n             let lit =\n-                @{node: ast::lit_str(p.get_str(s),\n-                                     ast::sk_unique),\n+                @{node: ast::lit_str(p.get_str(s)),\n                   span: sp};\n             ex = ast::expr_lit(lit);\n           }\n@@ -1503,8 +1502,7 @@ fn parse_pat(p: &parser) -> @ast::pat {\n             let sp = p.get_span();\n             p.bump();\n             let lit =\n-                @{node: ast::lit_str(p.get_str(s),\n-                                     ast::sk_unique),\n+                @{node: ast::lit_str(p.get_str(s)),\n                   span: sp};\n             hi = lit.span.hi;\n             pat = ast::pat_lit(lit);"}, {"sha": "257404e7f65f3f4fdd3e818354ff0d692555b877", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -278,7 +278,6 @@ fn print_type(s: &ps, ty: &@ast::ty) {\n         word(s.s, ast_util::ty_mach_to_str(tm));\n       }\n       ast::ty_char. { word(s.s, ~\"char\"); }\n-      ast::ty_str. { word(s.s, ~\"str\"); }\n       ast::ty_istr. { word(s.s, ~\"str\"); }\n       ast::ty_box(mt) { word(s.s, ~\"@\"); print_mt(s, mt); }\n       ast::ty_vec(mt) {\n@@ -1505,7 +1504,7 @@ fn print_literal(s: &ps, lit: &@ast::lit) {\n       _ { }\n     }\n     alt lit.node {\n-      ast::lit_str(st, kind) {\n+      ast::lit_str(st) {\n         print_string(s, st);\n       }\n       ast::lit_char(ch) {"}, {"sha": "7cd281afdca2ad2b13ecd9618c45e44dd54a43f4", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -120,7 +120,6 @@ fn visit_ty<E>(t: &@ty, e: &E, v: &vt<E>) {\n       ty_uint. {/* no-op */ }\n       ty_machine(_) {/* no-op */ }\n       ty_char. {/* no-op */ }\n-      ty_str. {/* no-op */ }\n       ty_istr. {/* no-op */ }\n       ty_box(mt) { v.visit_ty(mt.ty, e, v); }\n       ty_vec(mt) { v.visit_ty(mt.ty, e, v); }"}, {"sha": "822cdbe053341827deb2c89e51969b9bb9381579", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -103,9 +103,9 @@ fn local_rhs_span(l: &@ast::local, def: &span) -> span {\n \n fn lit_eq(l: &@ast::lit, m: &@ast::lit) -> bool {\n     alt l.node {\n-      ast::lit_str(s, kind_s) {\n+      ast::lit_str(s) {\n         alt m.node {\n-          ast::lit_str(t, kind_t) { ret s == t && kind_s == kind_t; }\n+          ast::lit_str(t) { ret s == t }\n           _ { ret false; }\n         }\n       }"}, {"sha": "f227836f492e242ef4543903232acb9c79c9bcf1", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -119,7 +119,6 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> istr {\n           ty_uint. { ~\"uint\" }\n           ty_machine(tm) { ty_mach_to_str(tm) }\n           ty_char. { ~\"char\" }\n-          ty_str. { ~\"str\" }\n           ty_istr. { ~\"istr\" }\n           ty_box(tm) { ~\"@\" + mt_to_str(cx, tm) }\n           ty_uniq(t) { ~\"~\" + ty_to_str(cx, t) }"}, {"sha": "b8a70dd1c9cef4af27b66d693c9f6ce55b447f0d", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -58,7 +58,7 @@ fn safe_to_steal(e: ast::expr_) -> bool {\n       }\n       ast::expr_lit(lit) {\n         alt lit.node {\n-          ast::lit_str(_, _) { true }\n+          ast::lit_str(_) { true }\n           ast::lit_char(_) { true }\n           ast::lit_int(_) { false }\n           ast::lit_uint(_) { false }"}, {"sha": "6df51e6750386720f12c8d07460024a5ef7fcfbe", "filename": "src/rt/main.ll.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Frt%2Fmain.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Frt%2Fmain.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmain.ll.in?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -24,13 +24,7 @@ define void @_rust_main_wrap(i1* nocapture, %task *, %2* nocapture, %vec *)\n   ret void\n }\n \n-; FIXME: Transitional. Please remove\n-@_rust_main_takes_istr = external global i32\n-declare void @set_main_takes_istr(i32)\n-\n define i32 @\"MAIN\"(i32, i32) {\n-  %i = load i32* @_rust_main_takes_istr\n-  call void @set_main_takes_istr(i32 %i)\n   %3 = tail call i32 @rust_start(i32 ptrtoint (void (i1*, %task*, %2*, %vec*)* @_rust_main_wrap to i32), i32 %0, i32 %1, i32 ptrtoint (%0* @_rust_crate_map_toplevel to i32))\n   ret i32 %3\n }"}, {"sha": "c20f93102c08ec4f797609a6354d25af61eb69cd", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -97,8 +97,7 @@ command_line_args : public kernel_owned<command_line_args>\n };\n \n \n-// FIXME: Transitional. Please remove.\n-bool main_takes_istr = false;\n+bool main_takes_istr = true;\n \n extern \"C\" CDECL void\n set_main_takes_istr(uintptr_t flag) {"}, {"sha": "8d1f36fc25f7e62b8dbe45442e0cdfa8c5c4675c", "filename": "src/test/compile-fail/fail-type-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c173f17c0fb10a3923da890c1204e0a71d3c9c7/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs?ref=9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern:expected str but found [int]\n+// error-pattern:expected istr but found [int]\n fn main() { fail [0]; }"}]}