{"sha": "28635ff04be246a0e2d5bcec25b229f17b4f5974", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NjM1ZmYwNGJlMjQ2YTBlMmQ1YmNlYzI1YjIyOWYxN2I0ZjU5NzQ=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-12-11T14:21:25Z"}, "committer": {"name": "Shotaro Yamada", "email": "yamada@ccs.ee.tut.ac.jp", "date": "2018-12-12T08:41:51Z"}, "message": "question_mark: Lint only early returns", "tree": {"sha": "e806b18d95bba0c4c96ca7195f3eda99a3f0e5b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e806b18d95bba0c4c96ca7195f3eda99a3f0e5b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28635ff04be246a0e2d5bcec25b229f17b4f5974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28635ff04be246a0e2d5bcec25b229f17b4f5974", "html_url": "https://github.com/rust-lang/rust/commit/28635ff04be246a0e2d5bcec25b229f17b4f5974", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28635ff04be246a0e2d5bcec25b229f17b4f5974/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05d07155b72d39d447bff1f5c1e8fb13a1eecd31", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d07155b72d39d447bff1f5c1e8fb13a1eecd31", "html_url": "https://github.com/rust-lang/rust/commit/05d07155b72d39d447bff1f5c1e8fb13a1eecd31"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "61178ccdd563e0cd6b426d65c8dcdb9a42d83ad9", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28635ff04be246a0e2d5bcec25b229f17b4f5974/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28635ff04be246a0e2d5bcec25b229f17b4f5974/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=28635ff04be246a0e2d5bcec25b229f17b4f5974", "patch": "@@ -133,9 +133,13 @@ impl Pass {\n             }\n         }\n \n-        // Check if the block has an implicit return expression\n-        if let Some(ref ret_expr) = block.expr {\n-            return Some(ret_expr.clone());\n+        // Check for `return` without a semicolon.\n+        if_chain! {\n+            if block.stmts.len() == 0;\n+            if let Some(ExprKind::Ret(Some(ret_expr))) = block.expr.as_ref().map(|e| &e.node);\n+            then {\n+                return Some(ret_expr.clone());\n+            }\n         }\n \n         None"}]}