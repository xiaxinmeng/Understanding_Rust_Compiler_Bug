{"sha": "462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "node_id": "C_kwDOAAsO6NoAKDQ2MmU3ZTdhMTAwZWViNmY3ZmYzYmZhYTY2NDY0ZmYwYWIxYWEwYWQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-19T10:03:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-19T10:03:57Z"}, "message": "Rollup merge of #109003 - GuillaumeGomez:useless-anonymous-reexport-lint, r=cjgillot\n\nAdd `useless_anonymous_reexport` lint\n\nThis is a follow-up of https://github.com/rust-lang/rust/pull/108936. We once again show all anonymous re-exports in rustdoc, however we also wanted to add a lint to let users know that it very likely doesn't have the effect they think it has.", "tree": {"sha": "9bf77c99b8b98e07d3e07828e1ae4f3f8493cbfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bf77c99b8b98e07d3e07828e1ae4f3f8493cbfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkFt4NCRBK7hj4Ov3rIwAAj2QIAICFfxDK0SJcynNNlKckPBkQ\nVI9+k2uYJ0Xm8PgwJr+xabOLoa8YEFrxPGHMGE4ydrPh4R57ga1n/VHPWECNZQvS\noXK5twAGas6OWYm7x4OYkA5MqpG/ESQUetlC71YbP+cvXzaN6OAVJlr1VO9y8h7c\nF0pJ1aTR2Gg336m2jryRG/f3DG/+ePUJpl2WJaUdW3BG4ea92zPv4odbPOdbwdXp\nZ/HY+fJX4vwct6SLUHxtwUX96CEb4W+rzlN1v/CSTHZzbdhLZg3duZ6hTaQuHX5D\nSIeoUtlkb34JolO8utAZdgIRCPQR8vwZwhdA+MbUvaPKQjW6wbRhtvqMbH+qz0w=\n=V7ek\n-----END PGP SIGNATURE-----\n", "payload": "tree 9bf77c99b8b98e07d3e07828e1ae4f3f8493cbfe\nparent c8e112a02579cea6e2f3a31b8dbd8ce4ebd0b8cf\nparent 7b0fa085b093be4cca285441703d91caa216e4dc\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1679220237 +0530\ncommitter GitHub <noreply@github.com> 1679220237 +0530\n\nRollup merge of #109003 - GuillaumeGomez:useless-anonymous-reexport-lint, r=cjgillot\n\nAdd `useless_anonymous_reexport` lint\n\nThis is a follow-up of https://github.com/rust-lang/rust/pull/108936. We once again show all anonymous re-exports in rustdoc, however we also wanted to add a lint to let users know that it very likely doesn't have the effect they think it has.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "html_url": "https://github.com/rust-lang/rust/commit/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8e112a02579cea6e2f3a31b8dbd8ce4ebd0b8cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e112a02579cea6e2f3a31b8dbd8ce4ebd0b8cf", "html_url": "https://github.com/rust-lang/rust/commit/c8e112a02579cea6e2f3a31b8dbd8ce4ebd0b8cf"}, {"sha": "7b0fa085b093be4cca285441703d91caa216e4dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0fa085b093be4cca285441703d91caa216e4dc", "html_url": "https://github.com/rust-lang/rust/commit/7b0fa085b093be4cca285441703d91caa216e4dc"}], "stats": {"total": 180, "additions": 176, "deletions": 4}, "files": [{"sha": "c822237413c7039c132dac232b30a3bc7ecd34cb", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "patch": "@@ -508,3 +508,6 @@ lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its ass\n     .specifically = this associated type bound is unsatisfied for `{$proj_ty}`\n \n lint_opaque_hidden_inferred_bound_sugg = add this bound\n+\n+lint_useless_anonymous_reexport = useless anonymous re-export\n+    .note = only anonymous re-exports of traits are useful, this is {$article} `{$desc}`"}, {"sha": "c2cc2fcdf551a580d4fe094c53b5f2807c7b0ae6", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "patch": "@@ -74,6 +74,7 @@ mod opaque_hidden_inferred_bound;\n mod pass_by_value;\n mod passes;\n mod redundant_semicolon;\n+mod reexports;\n mod traits;\n mod types;\n mod unused;\n@@ -111,6 +112,7 @@ use noop_method_call::*;\n use opaque_hidden_inferred_bound::*;\n use pass_by_value::*;\n use redundant_semicolon::*;\n+use reexports::*;\n use traits::*;\n use types::*;\n use unused::*;\n@@ -242,6 +244,7 @@ late_lint_methods!(\n             OpaqueHiddenInferredBound: OpaqueHiddenInferredBound,\n             MultipleSupertraitUpcastable: MultipleSupertraitUpcastable,\n             MapUnitFn: MapUnitFn,\n+            UselessAnonymousReexport: UselessAnonymousReexport,\n         ]\n     ]\n );"}, {"sha": "46a025f41e04aec056cb2e84115b6fb2c27c670c", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "patch": "@@ -1528,3 +1528,11 @@ pub struct UnusedAllocationDiag;\n #[derive(LintDiagnostic)]\n #[diag(lint_unused_allocation_mut)]\n pub struct UnusedAllocationMutDiag;\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_useless_anonymous_reexport)]\n+#[note]\n+pub struct UselessAnonymousReexportDiag {\n+    pub article: &'static str,\n+    pub desc: &'static str,\n+}"}, {"sha": "8737a57ea0264cddb1476d51411acbed456d027f", "filename": "compiler/rustc_lint/src/reexports.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/compiler%2Frustc_lint%2Fsrc%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/compiler%2Frustc_lint%2Fsrc%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Freexports.rs?ref=462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "patch": "@@ -0,0 +1,82 @@\n+use crate::lints::UselessAnonymousReexportDiag;\n+use crate::{LateContext, LateLintPass, LintContext};\n+use rustc_hir::def::DefKind;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{Item, ItemKind, UseKind};\n+use rustc_middle::ty::Visibility;\n+use rustc_span::symbol::kw;\n+use rustc_span::Span;\n+\n+declare_lint! {\n+    /// The `useless_anonymous_reexport` lint checks if anonymous re-exports\n+    /// are re-exports of traits.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(useless_anonymous_reexport)]\n+    ///\n+    /// mod sub {\n+    ///     pub struct Bar;\n+    /// }\n+    ///\n+    /// pub use self::sub::Bar as _;\n+    /// # fn main() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Anonymous re-exports are only useful if it's a re-export of a trait\n+    /// in case you want to give access to it. If you re-export any other kind,\n+    /// you won't be able to use it since its name won't be accessible.\n+    pub USELESS_ANONYMOUS_REEXPORT,\n+    Warn,\n+    \"useless anonymous re-export\"\n+}\n+\n+declare_lint_pass!(UselessAnonymousReexport => [USELESS_ANONYMOUS_REEXPORT]);\n+\n+fn emit_err(cx: &LateContext<'_>, span: Span, def_id: DefId) {\n+    let article = cx.tcx.def_descr_article(def_id);\n+    let desc = cx.tcx.def_descr(def_id);\n+    cx.emit_spanned_lint(\n+        USELESS_ANONYMOUS_REEXPORT,\n+        span,\n+        UselessAnonymousReexportDiag { article, desc },\n+    );\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for UselessAnonymousReexport {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        if let ItemKind::Use(path, kind) = item.kind &&\n+            !matches!(kind, UseKind::Glob) &&\n+            item.ident.name == kw::Underscore &&\n+            // We only want re-exports. If it's just a `use X;`, then we ignore it.\n+            match cx.tcx.local_visibility(item.owner_id.def_id) {\n+                Visibility::Public => true,\n+                Visibility::Restricted(level) => {\n+                    level != cx.tcx.parent_module_from_def_id(item.owner_id.def_id)\n+                }\n+            }\n+        {\n+            for def_id in path.res.iter().filter_map(|r| r.opt_def_id()) {\n+                match cx.tcx.def_kind(def_id) {\n+                    DefKind::Trait | DefKind::TraitAlias => {}\n+                    DefKind::TyAlias => {\n+                        let ty = cx.tcx.type_of(def_id);\n+                        if !ty.0.is_trait() {\n+                            emit_err(cx, item.span, def_id);\n+                            break;\n+                        }\n+                    }\n+                    _ => {\n+                        emit_err(cx, item.span, def_id);\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "0f688fa282356dca1372cd3380c296941a38180a", "filename": "tests/ui/imports/issue-99695-b.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/tests%2Fui%2Fimports%2Fissue-99695-b.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/tests%2Fui%2Fimports%2Fissue-99695-b.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695-b.fixed?ref=462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style)]\n+#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n mod m {\n \n     mod p {"}, {"sha": "b433997e53f6a7b8a7c77ad7c003e3e105e840db", "filename": "tests/ui/imports/issue-99695-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/tests%2Fui%2Fimports%2Fissue-99695-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/tests%2Fui%2Fimports%2Fissue-99695-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695-b.rs?ref=462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style)]\n+#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n mod m {\n \n     mod p {"}, {"sha": "17ff409324e3401ce8acba9f80707a9c5dcdf40d", "filename": "tests/ui/imports/issue-99695.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/tests%2Fui%2Fimports%2Fissue-99695.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/tests%2Fui%2Fimports%2Fissue-99695.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695.fixed?ref=462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style)]\n+#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n mod m {\n     #[macro_export]\n     macro_rules! nu {"}, {"sha": "b8979bcb7345ca81c9177980271489ffae244565", "filename": "tests/ui/imports/issue-99695.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/tests%2Fui%2Fimports%2Fissue-99695.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/tests%2Fui%2Fimports%2Fissue-99695.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695.rs?ref=462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style)]\n+#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n mod m {\n     #[macro_export]\n     macro_rules! nu {"}, {"sha": "5d56ae6f969b551107c4c1466e640565128961b3", "filename": "tests/ui/lint/anonymous-reexport.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/tests%2Fui%2Flint%2Fanonymous-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/tests%2Fui%2Flint%2Fanonymous-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fanonymous-reexport.rs?ref=462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "patch": "@@ -0,0 +1,21 @@\n+#![deny(useless_anonymous_reexport)]\n+#![crate_type = \"rlib\"]\n+\n+mod my_mod {\n+    pub trait Foo {}\n+    pub type TyFoo = dyn Foo;\n+    pub struct Bar;\n+    pub type TyBar = Bar;\n+}\n+\n+pub use self::my_mod::Foo as _;\n+pub use self::my_mod::TyFoo as _;\n+pub use self::my_mod::Bar as _; //~ ERROR\n+pub use self::my_mod::TyBar as _; //~ ERROR\n+pub use self::my_mod::{Bar as _}; //~ ERROR\n+pub use self::my_mod::{Bar as _, Foo as _}; //~ ERROR\n+pub use self::my_mod::{Bar as _, TyBar as _};\n+//~^ ERROR\n+//~| ERROR\n+#[allow(unused_imports)]\n+use self::my_mod::TyBar as _;"}, {"sha": "f4f8b41c417a438192381ae6be7717597946ab6f", "filename": "tests/ui/lint/anonymous-reexport.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/tests%2Fui%2Flint%2Fanonymous-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad/tests%2Fui%2Flint%2Fanonymous-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fanonymous-reexport.stderr?ref=462e7e7a100eeb6f7ff3bfaa66464ff0ab1aa0ad", "patch": "@@ -0,0 +1,55 @@\n+error: useless anonymous re-export\n+  --> $DIR/anonymous-reexport.rs:13:1\n+   |\n+LL | pub use self::my_mod::Bar as _;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only anonymous re-exports of traits are useful, this is a `struct`\n+note: the lint level is defined here\n+  --> $DIR/anonymous-reexport.rs:1:9\n+   |\n+LL | #![deny(useless_anonymous_reexport)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: useless anonymous re-export\n+  --> $DIR/anonymous-reexport.rs:14:1\n+   |\n+LL | pub use self::my_mod::TyBar as _;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: only anonymous re-exports of traits are useful, this is a `type alias`\n+\n+error: useless anonymous re-export\n+  --> $DIR/anonymous-reexport.rs:15:24\n+   |\n+LL | pub use self::my_mod::{Bar as _};\n+   |                        ^^^^^^^^\n+   |\n+   = note: only anonymous re-exports of traits are useful, this is a `struct`\n+\n+error: useless anonymous re-export\n+  --> $DIR/anonymous-reexport.rs:16:24\n+   |\n+LL | pub use self::my_mod::{Bar as _, Foo as _};\n+   |                        ^^^^^^^^\n+   |\n+   = note: only anonymous re-exports of traits are useful, this is a `struct`\n+\n+error: useless anonymous re-export\n+  --> $DIR/anonymous-reexport.rs:17:24\n+   |\n+LL | pub use self::my_mod::{Bar as _, TyBar as _};\n+   |                        ^^^^^^^^\n+   |\n+   = note: only anonymous re-exports of traits are useful, this is a `struct`\n+\n+error: useless anonymous re-export\n+  --> $DIR/anonymous-reexport.rs:17:34\n+   |\n+LL | pub use self::my_mod::{Bar as _, TyBar as _};\n+   |                                  ^^^^^^^^^^\n+   |\n+   = note: only anonymous re-exports of traits are useful, this is a `type alias`\n+\n+error: aborting due to 6 previous errors\n+"}]}