{"sha": "246a5e08bf6befc14f43ec6a30f2deb463f175aa", "node_id": "C_kwDOAAsO6NoAKDI0NmE1ZTA4YmY2YmVmYzE0ZjQzZWM2YTMwZjJkZWI0NjNmMTc1YWE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-08T23:46:23Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-16T00:52:58Z"}, "message": "Remove `ty` arg from `compare_const_vals`.\n\nIt's now only used in no-longer-interesting assertion.", "tree": {"sha": "11f1be1eecdba613dfd0c454b56b60e4fd64e76b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11f1be1eecdba613dfd0c454b56b60e4fd64e76b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/246a5e08bf6befc14f43ec6a30f2deb463f175aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/246a5e08bf6befc14f43ec6a30f2deb463f175aa", "html_url": "https://github.com/rust-lang/rust/commit/246a5e08bf6befc14f43ec6a30f2deb463f175aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/246a5e08bf6befc14f43ec6a30f2deb463f175aa/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab6ef19386c8df6d43bd474f356d2bc38942350", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab6ef19386c8df6d43bd474f356d2bc38942350", "html_url": "https://github.com/rust-lang/rust/commit/3ab6ef19386c8df6d43bd474f356d2bc38942350"}], "stats": {"total": 29, "additions": 8, "deletions": 21}, "files": [{"sha": "598da80c574aff45ba7d4684fb4d307c86f16dd0", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/246a5e08bf6befc14f43ec6a30f2deb463f175aa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246a5e08bf6befc14f43ec6a30f2deb463f175aa/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=246a5e08bf6befc14f43ec6a30f2deb463f175aa", "patch": "@@ -639,16 +639,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     return Some(0);\n                 }\n \n-                let tcx = self.tcx;\n-                let test_ty = test.lo.ty();\n-\n                 // For performance, it's important to only do the second\n                 // `compare_const_vals` if necessary.\n                 let no_overlap = if matches!(\n-                    (compare_const_vals(tcx, test.hi, pat.lo, self.param_env, test_ty)?, test.end),\n+                    (compare_const_vals(self.tcx, test.hi, pat.lo, self.param_env)?, test.end),\n                     (Less, _) | (Equal, RangeEnd::Excluded) // test < pat\n                 ) || matches!(\n-                    (compare_const_vals(tcx, test.lo, pat.hi, self.param_env, test_ty)?, pat.end),\n+                    (compare_const_vals(self.tcx, test.lo, pat.hi, self.param_env)?, pat.end),\n                     (Greater, _) | (Equal, RangeEnd::Excluded) // test > pat\n                 ) {\n                     Some(1)\n@@ -762,15 +759,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ) -> Option<bool> {\n         use std::cmp::Ordering::*;\n \n-        let tcx = self.tcx;\n-        let param_env = self.param_env;\n-        let ty = range.lo.ty();\n         // For performance, it's important to only do the second\n         // `compare_const_vals` if necessary.\n         Some(\n-            matches!(compare_const_vals(tcx, range.lo, value, param_env, ty)?, Less | Equal)\n+            matches!(compare_const_vals(self.tcx, range.lo, value, self.param_env)?, Less | Equal)\n                 && matches!(\n-                    (compare_const_vals(tcx, value, range.hi, param_env, ty)?, range.end),\n+                    (compare_const_vals(self.tcx, value, range.hi, self.param_env)?, range.end),\n                     (Less, _) | (Equal, RangeEnd::Included)\n                 ),\n         )"}, {"sha": "60db98073a3b91776504b854718a6f88ffb494ad", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/246a5e08bf6befc14f43ec6a30f2deb463f175aa/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246a5e08bf6befc14f43ec6a30f2deb463f175aa/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=246a5e08bf6befc14f43ec6a30f2deb463f175aa", "patch": "@@ -828,14 +828,8 @@ impl<'tcx> Constructor<'tcx> {\n                 FloatRange(other_from, other_to, other_end),\n             ) => {\n                 match (\n-                    compare_const_vals(pcx.cx.tcx, *self_to, *other_to, pcx.cx.param_env, pcx.ty),\n-                    compare_const_vals(\n-                        pcx.cx.tcx,\n-                        *self_from,\n-                        *other_from,\n-                        pcx.cx.param_env,\n-                        pcx.ty,\n-                    ),\n+                    compare_const_vals(pcx.cx.tcx, *self_to, *other_to, pcx.cx.param_env),\n+                    compare_const_vals(pcx.cx.tcx, *self_from, *other_from, pcx.cx.param_env),\n                 ) {\n                     (Some(to), Some(from)) => {\n                         (from == Ordering::Greater || from == Ordering::Equal)"}, {"sha": "a72af8be83e4b2821535e616ab2a69671cbc9f85", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/246a5e08bf6befc14f43ec6a30f2deb463f175aa/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246a5e08bf6befc14f43ec6a30f2deb463f175aa/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=246a5e08bf6befc14f43ec6a30f2deb463f175aa", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n     ) -> PatKind<'tcx> {\n         assert_eq!(lo.ty(), ty);\n         assert_eq!(hi.ty(), ty);\n-        let cmp = compare_const_vals(self.tcx, lo, hi, self.param_env, ty);\n+        let cmp = compare_const_vals(self.tcx, lo, hi, self.param_env);\n         match (end, cmp) {\n             // `x..y` where `x < y`.\n             // Non-empty because the range includes at least `x`.\n@@ -752,15 +752,14 @@ pub(crate) fn compare_const_vals<'tcx>(\n     a: mir::ConstantKind<'tcx>,\n     b: mir::ConstantKind<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    ty: Ty<'tcx>,\n ) -> Option<Ordering> {\n     assert_eq!(a.ty(), b.ty());\n-    assert_eq!(a.ty(), ty);\n \n     if a == b {\n         return Some(Ordering::Equal);\n     }\n \n+    let ty = a.ty();\n     let a_bits = a.try_eval_bits(tcx, param_env, ty);\n     let b_bits = b.try_eval_bits(tcx, param_env, ty);\n "}]}