{"sha": "2f451a7bd7d856daad1e487f7bc7a14c40840c2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNDUxYTdiZDdkODU2ZGFhZDFlNDg3ZjdiYzdhMTRjNDA4NDBjMmQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-03T01:13:56Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-03T01:15:19Z"}, "message": "rustc: Only allow imports marked with \"pub\" to be imported from other modules", "tree": {"sha": "939578793823dcef8262a839d5dc3992a513b02f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/939578793823dcef8262a839d5dc3992a513b02f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f451a7bd7d856daad1e487f7bc7a14c40840c2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f451a7bd7d856daad1e487f7bc7a14c40840c2d", "html_url": "https://github.com/rust-lang/rust/commit/2f451a7bd7d856daad1e487f7bc7a14c40840c2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f451a7bd7d856daad1e487f7bc7a14c40840c2d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a5545e9cd3f9fa82e8003c2e71eee595492ad64", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5545e9cd3f9fa82e8003c2e71eee595492ad64", "html_url": "https://github.com/rust-lang/rust/commit/8a5545e9cd3f9fa82e8003c2e71eee595492ad64"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "464600b946931620d865746f2f027ab01a9db5dd", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f451a7bd7d856daad1e487f7bc7a14c40840c2d/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f451a7bd7d856daad1e487f7bc7a14c40840c2d/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=2f451a7bd7d856daad1e487f7bc7a14c40840c2d", "patch": "@@ -29,7 +29,7 @@ with destructors.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-use stackwalk::Word;\n+pub use stackwalk::Word;\n use libc::size_t;\n use libc::uintptr_t;\n use send_map::linear::LinearMap;"}, {"sha": "d37bdabd48a9217af2fc355a85cbb8b7a895c51a", "filename": "src/libcore/os.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f451a7bd7d856daad1e487f7bc7a14c40840c2d/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f451a7bd7d856daad1e487f7bc7a14c40840c2d/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=2f451a7bd7d856daad1e487f7bc7a14c40840c2d", "patch": "@@ -22,7 +22,7 @@\n \n use libc::{c_char, c_void, c_int, c_uint, size_t, ssize_t,\n            mode_t, pid_t, FILE};\n-use libc::{close, fclose};\n+pub use libc::{close, fclose};\n \n use option::{Some, None};\n \n@@ -225,7 +225,7 @@ mod global_env {\n         pub fn setenv(n: &str, v: &str) {\n             do str::as_c_str(n) |nbuf| {\n                 do str::as_c_str(v) |vbuf| {\n-                    libc::setenv(nbuf, vbuf, 1i32);\n+                    libc::funcs::posix01::unistd::setenv(nbuf, vbuf, 1i32);\n                 }\n             }\n         }\n@@ -384,8 +384,8 @@ pub fn self_exe_path() -> Option<Path> {\n     #[cfg(target_os = \"macos\")]\n     fn load_self() -> Option<~str> {\n         do fill_charp_buf() |buf, sz| {\n-            libc::_NSGetExecutablePath(buf, ptr::mut_addr_of(&(sz as u32)))\n-                == (0 as c_int)\n+            libc::funcs::extra::_NSGetExecutablePath(\n+                buf, ptr::mut_addr_of(&(sz as u32))) == (0 as c_int)\n         }\n     }\n "}, {"sha": "ff82ed3fb419ccea4c0bc926119d56fb59a2c462", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f451a7bd7d856daad1e487f7bc7a14c40840c2d/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f451a7bd7d856daad1e487f7bc7a14c40840c2d/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=2f451a7bd7d856daad1e487f7bc7a14c40840c2d", "patch": "@@ -13,7 +13,8 @@ use cast::transmute;\n use intrinsic::{TyDesc, TyVisitor, visit_tydesc};\n use reflect::{MovePtr, MovePtrAdaptor};\n use vec::raw::{VecRepr, UnboxedVecRepr, SliceRepr};\n-use box::raw::{BoxRepr, BoxHeaderRepr};\n+pub use box::raw::BoxRepr;\n+use box::raw::BoxHeaderRepr;\n \n /// Helpers\n "}, {"sha": "8860d1b5cea83d30dbc5452a63586c756a625a50", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f451a7bd7d856daad1e487f7bc7a14c40840c2d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f451a7bd7d856daad1e487f7bc7a14c40840c2d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2f451a7bd7d856daad1e487f7bc7a14c40840c2d", "patch": "@@ -3511,8 +3511,8 @@ impl parser {\n                 self.token_is_keyword(~\"mod\", next_tok))\n     }\n \n-    fn parse_view_item(+attrs: ~[attribute]) -> @view_item {\n-        let lo = self.span.lo, vis = self.parse_visibility();\n+    fn parse_view_item(+attrs: ~[attribute], vis: visibility) -> @view_item {\n+        let lo = self.span.lo;\n         let node = if self.eat_keyword(~\"use\") {\n             self.parse_use()\n         } else if self.eat_keyword(~\"export\") {\n@@ -3644,7 +3644,7 @@ impl parser {\n               _ => self.unexpected()\n             }\n         } else if self.is_view_item() {\n-            let vi = self.parse_view_item(outer_attrs);\n+            let vi = self.parse_view_item(outer_attrs, vis);\n             return spanned(lo, vi.span.hi, cdir_view_item(vi));\n         }\n         return self.fatal(~\"expected crate directive\");"}, {"sha": "eca0687f2fda36ca36a50caeef794a54f3e1631f", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2f451a7bd7d856daad1e487f7bc7a14c40840c2d/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f451a7bd7d856daad1e487f7bc7a14c40840c2d/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=2f451a7bd7d856daad1e487f7bc7a14c40840c2d", "patch": "@@ -367,8 +367,7 @@ struct ImportResolution {\n     mut used: bool,\n }\n \n-fn ImportResolution(privacy: Privacy,\n-                    span: span) -> ImportResolution {\n+fn ImportResolution(privacy: Privacy, span: span) -> ImportResolution {\n     ImportResolution {\n         privacy: privacy,\n         span: span,\n@@ -1639,11 +1638,20 @@ impl Resolver {\n \n         match *subclass {\n             SingleImport(target, _, _) => {\n+                debug!(\"(building import directive) building import \\\n+                        directive: privacy %? %s::%s\",\n+                       privacy,\n+                       self.idents_to_str(module_path.get()),\n+                       self.session.str_of(target));\n+\n                 match module_.import_resolutions.find(target) {\n                     Some(resolution) => {\n+                        debug!(\"(building import directive) bumping \\\n+                                reference\");\n                         resolution.outstanding_references += 1u;\n                     }\n                     None => {\n+                        debug!(\"(building import directive) creating new\");\n                         let resolution = @ImportResolution(privacy, span);\n                         resolution.outstanding_references = 1u;\n                         module_.import_resolutions.insert(target, resolution);\n@@ -1967,6 +1975,12 @@ impl Resolver {\n                                        namespace: Namespace)\n                                     -> NamespaceResult {\n \n+                            // Import resolutions must be declared with \"pub\"\n+                            // in order to be exported.\n+                            if import_resolution.privacy == Private {\n+                                return UnboundResult;\n+                            }\n+\n                             match (*import_resolution).\n                                     target_for_namespace(namespace) {\n                                 None => {\n@@ -4229,7 +4243,8 @@ impl Resolver {\n \n         // Next, search import resolutions.\n         match containing_module.import_resolutions.find(name) {\n-            Some(import_resolution) => {\n+            Some(import_resolution) if import_resolution.privacy == Public ||\n+                                       xray == Xray => {\n                 match (*import_resolution).target_for_namespace(namespace) {\n                     Some(target) => {\n                         match (*target.bindings)\n@@ -4252,7 +4267,7 @@ impl Resolver {\n                     }\n                 }\n             }\n-            None => {\n+            Some(_) | None => {\n                 return NoNameDefinition;\n             }\n         }"}]}