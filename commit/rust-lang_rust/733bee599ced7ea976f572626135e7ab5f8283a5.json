{"sha": "733bee599ced7ea976f572626135e7ab5f8283a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczM2JlZTU5OWNlZDdlYTk3NmY1NzI2MjYxMzVlN2FiNWY4MjgzYTU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-29T00:33:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-29T00:33:19Z"}, "message": "Rollup merge of #72667 - RalfJung:unaligned-ref-test, r=nikomatsakis\n\nexpand unaligned_references test\n\nAlso test implicit ref when having a field as a method receiver, as suggested by @bluss.", "tree": {"sha": "f3ddd8cfefe3d6cda06c73b0a079f7e808aa8e6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3ddd8cfefe3d6cda06c73b0a079f7e808aa8e6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/733bee599ced7ea976f572626135e7ab5f8283a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0FhQCRBK7hj4Ov3rIwAAdHIIAAYTcr8UbiiUXXYK3sGEX9XY\njW/mNvP4sVD/vUbE8ElNZjlocxWMiiPaFzAC56RPh0FicWAq7EGJEpEAOtLYRzlJ\nqkLxth+MfOHiNC6Vrq06XKkMApIZEHQIs1J+nw3BaWHdFyfJPHREF7HUM7azmurx\n3MNBaCp6O6P1kgd0bFpmB9cfn+PNE5yDw5O9BoayGTLCN4w0xf2WHBGlaBiMNI4E\nn64L/AZo6xSC5gd1EEXcrop7WYRW33t9FW4WQQhDGjEytst/D8JvfEdOALvL8a8g\n66aZ8jp5swV8kDWSM0vrjKsm5VB0RiZHLIvnQjko4KEifJU7DD+x5EPlZLvzVII=\n=9ONx\n-----END PGP SIGNATURE-----\n", "payload": "tree f3ddd8cfefe3d6cda06c73b0a079f7e808aa8e6c\nparent ec0cd2df0c1cf0fac39ea198797d509abcc6365e\nparent 7b1187968ce5385758996ec7765d886d3a659d07\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590712399 +0200\ncommitter GitHub <noreply@github.com> 1590712399 +0200\n\nRollup merge of #72667 - RalfJung:unaligned-ref-test, r=nikomatsakis\n\nexpand unaligned_references test\n\nAlso test implicit ref when having a field as a method receiver, as suggested by @bluss.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/733bee599ced7ea976f572626135e7ab5f8283a5", "html_url": "https://github.com/rust-lang/rust/commit/733bee599ced7ea976f572626135e7ab5f8283a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/733bee599ced7ea976f572626135e7ab5f8283a5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec0cd2df0c1cf0fac39ea198797d509abcc6365e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec0cd2df0c1cf0fac39ea198797d509abcc6365e", "html_url": "https://github.com/rust-lang/rust/commit/ec0cd2df0c1cf0fac39ea198797d509abcc6365e"}, {"sha": "7b1187968ce5385758996ec7765d886d3a659d07", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b1187968ce5385758996ec7765d886d3a659d07", "html_url": "https://github.com/rust-lang/rust/commit/7b1187968ce5385758996ec7765d886d3a659d07"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "c4e5d065643c82890cd44a5bd8cd71264d339c43", "filename": "src/test/ui/lint/unaligned_references.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/733bee599ced7ea976f572626135e7ab5f8283a5/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733bee599ced7ea976f572626135e7ab5f8283a5/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs?ref=733bee599ced7ea976f572626135e7ab5f8283a5", "patch": "@@ -2,20 +2,27 @@\n \n #[repr(packed)]\n pub struct Good {\n-    data: &'static u32,\n-    data2: [&'static u32; 2],\n+    data: u64,\n+    ptr: &'static u64,\n+    data2: [u64; 2],\n     aligned: [u8; 32],\n }\n \n fn main() {\n     unsafe {\n-        let good = Good { data: &0, data2: [&0, &0], aligned: [0; 32] };\n+        let good = Good { data: 0, ptr: &0, data2: [0, 0], aligned: [0; 32] };\n \n+        let _ = &good.ptr; //~ ERROR reference to packed field\n         let _ = &good.data; //~ ERROR reference to packed field\n+        // Error even when turned into raw pointer immediately.\n         let _ = &good.data as *const _; //~ ERROR reference to packed field\n         let _: *const _ = &good.data; //~ ERROR reference to packed field\n+        // Error on method call.\n+        let _ = good.data.clone(); //~ ERROR reference to packed field\n+        // Error for nested fields.\n         let _ = &good.data2[0]; //~ ERROR reference to packed field\n-        let _ = &*good.data; // ok, behind a pointer\n+\n+        let _ = &*good.ptr; // ok, behind a pointer\n         let _ = &good.aligned; // ok, has align 1\n         let _ = &good.aligned[2]; // ok, has align 1\n     }"}, {"sha": "8786b9c05db271e5e16e252d9cc7305fb5394f76", "filename": "src/test/ui/lint/unaligned_references.stderr", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/733bee599ced7ea976f572626135e7ab5f8283a5/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/733bee599ced7ea976f572626135e7ab5f8283a5/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr?ref=733bee599ced7ea976f572626135e7ab5f8283a5", "patch": "@@ -1,8 +1,8 @@\n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:14:17\n+  --> $DIR/unaligned_references.rs:15:17\n    |\n-LL |         let _ = &good.data;\n-   |                 ^^^^^^^^^^\n+LL |         let _ = &good.ptr;\n+   |                 ^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/unaligned_references.rs:1:9\n@@ -12,28 +12,44 @@ LL | #![deny(unaligned_references)]\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:15:17\n+  --> $DIR/unaligned_references.rs:16:17\n+   |\n+LL |         let _ = &good.data;\n+   |                 ^^^^^^^^^^\n+   |\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:18:17\n    |\n LL |         let _ = &good.data as *const _;\n    |                 ^^^^^^^^^^\n    |\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:16:27\n+  --> $DIR/unaligned_references.rs:19:27\n    |\n LL |         let _: *const _ = &good.data;\n    |                           ^^^^^^^^^^\n    |\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:17:17\n+  --> $DIR/unaligned_references.rs:21:17\n+   |\n+LL |         let _ = good.data.clone();\n+   |                 ^^^^^^^^^\n+   |\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:23:17\n    |\n LL |         let _ = &good.data2[0];\n    |                 ^^^^^^^^^^^^^^\n    |\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n "}]}