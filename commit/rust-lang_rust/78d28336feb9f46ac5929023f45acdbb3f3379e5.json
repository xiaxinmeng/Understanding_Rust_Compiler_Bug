{"sha": "78d28336feb9f46ac5929023f45acdbb3f3379e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZDI4MzM2ZmViOWY0NmFjNTkyOTAyM2Y0NWFjZGJiM2YzMzc5ZTU=", "commit": {"author": {"name": "Alisdair Owens", "email": "awo101@zepler.net", "date": "2015-08-10T15:48:01Z"}, "committer": {"name": "Alisdair Owens", "email": "awo101@zepler.net", "date": "2015-08-10T15:48:53Z"}, "message": "add info about cell types to diagnostic message E0387", "tree": {"sha": "81417a20afe8b8fa4d0128bcf332f7fbcb4601fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81417a20afe8b8fa4d0128bcf332f7fbcb4601fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78d28336feb9f46ac5929023f45acdbb3f3379e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78d28336feb9f46ac5929023f45acdbb3f3379e5", "html_url": "https://github.com/rust-lang/rust/commit/78d28336feb9f46ac5929023f45acdbb3f3379e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78d28336feb9f46ac5929023f45acdbb3f3379e5/comments", "author": {"login": "AlisdairO", "id": 6296622, "node_id": "MDQ6VXNlcjYyOTY2MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6296622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlisdairO", "html_url": "https://github.com/AlisdairO", "followers_url": "https://api.github.com/users/AlisdairO/followers", "following_url": "https://api.github.com/users/AlisdairO/following{/other_user}", "gists_url": "https://api.github.com/users/AlisdairO/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlisdairO/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlisdairO/subscriptions", "organizations_url": "https://api.github.com/users/AlisdairO/orgs", "repos_url": "https://api.github.com/users/AlisdairO/repos", "events_url": "https://api.github.com/users/AlisdairO/events{/privacy}", "received_events_url": "https://api.github.com/users/AlisdairO/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AlisdairO", "id": 6296622, "node_id": "MDQ6VXNlcjYyOTY2MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6296622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlisdairO", "html_url": "https://github.com/AlisdairO", "followers_url": "https://api.github.com/users/AlisdairO/followers", "following_url": "https://api.github.com/users/AlisdairO/following{/other_user}", "gists_url": "https://api.github.com/users/AlisdairO/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlisdairO/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlisdairO/subscriptions", "organizations_url": "https://api.github.com/users/AlisdairO/orgs", "repos_url": "https://api.github.com/users/AlisdairO/repos", "events_url": "https://api.github.com/users/AlisdairO/events{/privacy}", "received_events_url": "https://api.github.com/users/AlisdairO/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d83a0fdf7da8b93b21de6ff2809e81a69447a9a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d83a0fdf7da8b93b21de6ff2809e81a69447a9a5", "html_url": "https://github.com/rust-lang/rust/commit/d83a0fdf7da8b93b21de6ff2809e81a69447a9a5"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "b641dfd7d40e1460998426002e3c891aa6fe372c", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/78d28336feb9f46ac5929023f45acdbb3f3379e5/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d28336feb9f46ac5929023f45acdbb3f3379e5/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=78d28336feb9f46ac5929023f45acdbb3f3379e5", "patch": "@@ -125,12 +125,28 @@ The problem here is that foo is defined as accepting a parameter of type `Fn`.\n Closures passed into foo will thus be inferred to be of type `Fn`, meaning that\n they capture their context immutably.\n \n-The solution is to capture the data mutably. This can be done by defining `foo`\n-to take FnMut rather than Fn:\n+If the definition of `foo` is under your control, the simplest solution is to\n+capture the data mutably. This can be done by defining `foo` to take FnMut\n+rather than Fn:\n \n ```\n fn foo<F: FnMut()>(f: F) { }\n ```\n+\n+Alternatively, we can consider using the `Cell` and `RefCell` types to achieve\n+interior mutability through a shared reference. Our example's `mutable` function\n+could be redefined as below:\n+\n+```\n+fn mutable() {\n+    let x = std::cell::Cell::new(0u32);\n+    foo(|| x.set(2));\n+}\n+```\n+\n+You can read more about cell types in the API documentation:\n+\n+https://doc.rust-lang.org/std/cell/\n \"##\n \n }"}]}