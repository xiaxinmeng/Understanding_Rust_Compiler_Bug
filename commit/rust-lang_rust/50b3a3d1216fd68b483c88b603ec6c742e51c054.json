{"sha": "50b3a3d1216fd68b483c88b603ec6c742e51c054", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYjNhM2QxMjE2ZmQ2OGI0ODNjODhiNjAzZWM2Yzc0MmU1MWMwNTQ=", "commit": {"author": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2018-04-06T16:32:16Z"}, "committer": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2018-04-09T18:04:58Z"}, "message": "add a lot of text about lints", "tree": {"sha": "5fe64c7b501a5348e629b1a2697fed6f1ca9f490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fe64c7b501a5348e629b1a2697fed6f1ca9f490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50b3a3d1216fd68b483c88b603ec6c742e51c054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50b3a3d1216fd68b483c88b603ec6c742e51c054", "html_url": "https://github.com/rust-lang/rust/commit/50b3a3d1216fd68b483c88b603ec6c742e51c054", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50b3a3d1216fd68b483c88b603ec6c742e51c054/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78b076dadb0d8ac51be84ab3748e71a70abffa90", "url": "https://api.github.com/repos/rust-lang/rust/commits/78b076dadb0d8ac51be84ab3748e71a70abffa90", "html_url": "https://github.com/rust-lang/rust/commit/78b076dadb0d8ac51be84ab3748e71a70abffa90"}], "stats": {"total": 824, "additions": 824, "deletions": 0}, "files": [{"sha": "46b717f3387d2ce95cb4c0d4d7f25ed0c1deac78", "filename": "src/doc/rustc/src/lints/groups.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/50b3a3d1216fd68b483c88b603ec6c742e51c054/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Fgroups.md", "raw_url": "https://github.com/rust-lang/rust/raw/50b3a3d1216fd68b483c88b603ec6c742e51c054/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Fgroups.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Fgroups.md?ref=50b3a3d1216fd68b483c88b603ec6c742e51c054", "patch": "@@ -1 +1,29 @@\n # Lint Groups\n+\n+`rustc` has the concept of a \"lint group\", where you can toggle several warnings\n+through one name.\n+\n+For example, the `nonstandard-style` lint sets `non-camel-case-types`,\n+`non-snake-case`, and `non-upper-case-globals` all at once. So these are\n+equivalent:\n+\n+```bash\n+$ rustc -D nonstandard-style\n+$ rustc -D non-camel-case-types -D non-snake-case -D non-upper-case-globals\n+```\n+\n+Here's a list of each lint group, and the lints that they are made up of:\n+\n+| group               | description                                                   | lints                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n+|---------------------|---------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| nonstandard-style   | Violation of standard naming conventions                      | non-camel-case-types, non-snake-case, non-upper-case-globals                                                                                                                                                                                                                                                                                                                                                                                                                           |\n+| warnings            | all lints that would be issuing warnings                      | all lints that would be issuing warnings                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n+| edition-2018        | Lints that will be turned into errors in Rust 2018            | tyvar-behind-raw-pointer                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n+| rust-2018-idioms    | Lints to nudge you toward idiomatic features of Rust 2018     | bare-trait-object, unreachable-pub                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n+| unused              | These lints detect things being declared but not used         | unused-imports, unused-variables, unused-assignments, dead-code, unused-mut, unreachable-code, unreachable-patterns, unused-must-use, unused-unsafe, path-statements, unused-attributes, unused-macros, unused-allocation, unused-doc-comment, unused-extern-crates, unused-features, unused-parens                                                                                                                                                                                    |\n+| future-incompatible | Lints that detect code that has future-compatibility problems | private-in-public, pub-use-of-private-extern-crate, patterns-in-fns-without-body, safe-extern-statics, invalid-type-param-default, legacy-directory-ownership, legacy-imports, legacy-constructor-visibility, missing-fragment-specifier, illegal-floating-point-literal-pattern, anonymous-parameters, parenthesized-params-in-types-and-modules, late-bound-lifetime-arguments, safe-packed-borrows, incoherent-fundamental-impls, tyvar-behind-raw-pointer, unstable-name-collision |\n+\n+Additionally, there's a `bad-style` lint group that's a deprecated alias for `nonstandard-style`.\n+\n+Finally, you can also see the table above by invoking `rustc -W help`. This will give you the exact values for the specific\n+compiler you have installed.\n\\ No newline at end of file"}, {"sha": "4706a10c908eed1d1256ee4771f078b082448e8c", "filename": "src/doc/rustc/src/lints/index.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/50b3a3d1216fd68b483c88b603ec6c742e51c054/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/50b3a3d1216fd68b483c88b603ec6c742e51c054/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md?ref=50b3a3d1216fd68b483c88b603ec6c742e51c054", "patch": "@@ -1 +1,28 @@\n # Lints\n+\n+In software, a \"lint\" is a tool used to help improve your source code. The\n+Rust compiler contains a number of lints, and when it compiles your code, it will\n+also run the lints. These lints may produce a warning, an error, or nothing at all,\n+depending on how you've configured things.\n+\n+Here's a small example:\n+\n+```rust\n+$ cat main.rs\n+fn main() {\n+    let x = 5;\n+}\n+> rustc main.rs\n+warning: unused variable: `x`\n+ --> main.rs:2:9\n+  |\n+2 |     let x = 5;\n+  |         ^\n+  |\n+  = note: #[warn(unused_variables)] on by default\n+  = note: to avoid this warning, consider using `_x` instead\n+```\n+\n+This is the `unused_variables` lint, and it tells you that you've introduced\n+a variable that you don't use in your code. That's not *wrong*, so it's not\n+an error, but it might be a bug, so you get a warning.\n\\ No newline at end of file"}, {"sha": "f2d7241e648a41098559423d47ce19a4b6c0a70c", "filename": "src/doc/rustc/src/lints/levels.md", "status": "modified", "additions": 251, "deletions": 0, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/50b3a3d1216fd68b483c88b603ec6c742e51c054/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "raw_url": "https://github.com/rust-lang/rust/raw/50b3a3d1216fd68b483c88b603ec6c742e51c054/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md?ref=50b3a3d1216fd68b483c88b603ec6c742e51c054", "patch": "@@ -1 +1,252 @@\n # Lint levels\n+\n+In `rustc`, lints are divided into four *levels*:\n+\n+1. allow\n+2. warn\n+3. deny\n+4. forbid\n+\n+Each lint has a default level (explained in the lint listing later in this\n+chapter), and the compiler has a default warning level. First, let's explain\n+what these levels mean, and then we'll talk about configuration.\n+\n+## allow\n+\n+These lints exist, but by default, do nothing. For example, consider this\n+source:\n+\n+```rust\n+pub fn foo() {}\n+```\n+\n+Compiling this file produces no warnings:\n+\n+```rust\n+$ rustc lib.rs --crate-type=lib\n+$\n+```\n+\n+But this code violates the `missing_docs` lint.\n+\n+These lints exist mostly to be manually turned on via configuration, as we'll\n+talk about later in this section.\n+\n+## warn\n+\n+The 'warn' lint level will produce a warning if you violate the lint. For example,\n+this code runs afoul of the `unused_variable` lint:\n+\n+```rust\n+pub fn foo() {\n+    let x = 5;\n+}\n+```\n+\n+This will produce this warning:\n+\n+```bash\n+> rustc lib.rs --crate-type=lib\n+warning: unused variable: `x`\n+ --> lib.rs:2:9\n+  |\n+2 |     let x = 5;\n+  |         ^\n+  |\n+  = note: #[warn(unused_variables)] on by default\n+  = note: to avoid this warning, consider using `_x` instead\n+```\n+\n+## deny\n+\n+A 'deny' lint produces an error if you violate it. For example, this code\n+runs into the `exceeding_bitshifts` lint.\n+\n+```rust\n+fn main() {\n+    100u8 << 10;\n+}\n+```\n+\n+```bash\n+> rustc main.rs\n+error: bitshift exceeds the type's number of bits\n+ --> main.rs:2:13\n+  |\n+2 |     100u8 << 10;\n+  |     ^^^^^^^^^^^\n+  |\n+  = note: #[deny(exceeding_bitshifts)] on by default\n+```\n+\n+What's the difference between an error from a lint and a regular old error?\n+Lints are configurable via levels, so in a similar way to 'allow' lints,\n+warnings that are 'deny' by default let you allow them. Similarly, you may\n+wish to set up a lint that is `warn` by default to produce an error instead.\n+This lint level gives you that.\n+\n+## forbid\n+\n+'forbid' is a special lint level that's stronger than 'deny'. It's the same\n+as 'deny' in that a lint at this level will produce an error, but unlike the\n+'deny' level, the 'forbid' level can not be overridden to be anything lower\n+than an error.\n+\n+## Configuring warning levels\n+\n+Remember our `missing_docs` example from the 'allow' lint level?\n+\n+```bash\n+$ cat lib.rs\n+pub fn foo() {}\n+$ rustc lib.rs --crate-type=lib\n+$\n+```\n+\n+We can configure this lint to operate at a higher level, both with\n+compiler flags, as well as with an attribute in the source code.\n+\n+You can also \"cap\" lints so that the compiler can choose to ignore\n+certain lint levels. We'll talk about that last.\n+\n+### Via compiler flag\n+\n+The `-A`, `-W`, `-D`, and `-F` flags let you turn one or more lints\n+into allowed, warning, deny, or forbid levels, like this:\n+\n+```bash\n+$ rustc lib.rs --crate-type=lib -W missing-docs\n+warning: missing documentation for crate\n+ --> lib.rs:1:1\n+  |\n+1 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+  |\n+  = note: requested on the command line with `-W missing-docs`\n+\n+warning: missing documentation for a function\n+ --> lib.rs:1:1\n+  |\n+1 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+> rustc lib.rs --crate-type=lib -D missing-docs\n+error: missing documentation for crate\n+ --> lib.rs:1:1\n+  |\n+1 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+  |\n+  = note: requested on the command line with `-D missing-docs`\n+\n+error: missing documentation for a function\n+ --> lib.rs:1:1\n+  |\n+1 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+```\n+\n+You can also pass each flag more than once for changing multiple lints:\n+\n+```bash\n+rustc lib.rs --crate-type=lib -D missing-docs -D unused-variables\n+```\n+\n+And of course, you can mix these four flags together:\n+\n+```bash\n+rustc lib.rs --crate-type=lib -D missing-docs -A unused-variables\n+```\n+\n+### Via an attribute\n+\n+You can also modify the lint level with a crate-wide attribute:\n+\n+```bash\n+> cat lib.rs\n+#![warn(missing_docs)]\n+\n+pub fn foo() {}\n+$ rustc lib.rs --crate-type=lib\n+warning: missing documentation for crate\n+ --> lib.rs:1:1\n+  |\n+1 | / #![warn(missing_docs)]\n+2 | |\n+3 | | pub fn foo() {}\n+  | |_______________^\n+  |\n+note: lint level defined here\n+ --> lib.rs:1:9\n+  |\n+1 | #![warn(missing_docs)]\n+  |         ^^^^^^^^^^^^\n+\n+warning: missing documentation for a function\n+ --> lib.rs:3:1\n+  |\n+3 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+```\n+\n+All four, `warn`, `allow`, `deny`, and `forbid` all work this way.\n+\n+You can also pass in multiple lints per attribute:\n+\n+```rust\n+#![warn(missing_docs, unused_variables)]\n+\n+pub fn foo() {}\n+```\n+\n+And use multiple attributes together:\n+\n+```rust\n+#![warn(missing_docs)]\n+#![deny(unused_variables)]\n+\n+pub fn foo() {}\n+```\n+\n+### Capping lints\n+\n+`rustc` supports a flag, `--cap-lints LEVEL` that sets the \"lint cap level.\"\n+This is the maximum level for all lints. So for example, if we take our\n+code sample from the \"deny\" lint level above:\n+\n+```rust\n+fn main() {\n+    100u8 << 10;\n+}\n+```\n+\n+And we compile it, capping lints to warn:\n+\n+```bash\n+$ rustc lib.rs --cap-lints warn\n+warning: bitshift exceeds the type's number of bits\n+ --> lib.rs:2:5\n+  |\n+2 |     100u8 << 10;\n+  |     ^^^^^^^^^^^\n+  |\n+  = note: #[warn(exceeding_bitshifts)] on by default\n+\n+warning: this expression will panic at run-time\n+ --> lib.rs:2:5\n+  |\n+2 |     100u8 << 10;\n+  |     ^^^^^^^^^^^ attempt to shift left with overflow\n+```\n+\n+It now only warns, rather than errors. We can go further and allow all lints:\n+\n+```bash\n+$ rustc lib.rs --cap-lints allow\n+$\n+```\n+\n+This feature is used heavily by Cargo; it will pass `--cap-lints allow` when\n+compiling your dependencies, so that if they have any warnings, they do not\n+pollute the output of your build.\n\\ No newline at end of file"}, {"sha": "61c7c5e88969eecd2ffb2d910a0fe7d5b4b8c91c", "filename": "src/doc/rustc/src/lints/listing/allowed-by-default.md", "status": "modified", "additions": 451, "deletions": 0, "changes": 451, "blob_url": "https://github.com/rust-lang/rust/blob/50b3a3d1216fd68b483c88b603ec6c742e51c054/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/50b3a3d1216fd68b483c88b603ec6c742e51c054/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md?ref=50b3a3d1216fd68b483c88b603ec6c742e51c054", "patch": "@@ -1 +1,452 @@\n # Allowed-by-default lints\n+\n+These lints are all set to the 'allow' level by default. As such, they won't show up\n+unless you set them to a higher lint level with a flag or attribute.\n+\n+## anonymous-parameters\n+\n+This lint detects anonymous parameters. Some example code that triggers this lint:\n+\n+```rust\n+trait Foo {\n+    fn foo(usize);\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: use of deprecated anonymous parameter\n+ --> src/lib.rs:5:11\n+  |\n+5 |     fn foo(usize);\n+  |           ^\n+  |\n+  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+  = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n+```\n+\n+This syntax is mostly a historical accident, and can be worked around quite\n+easily:\n+\n+```rust\n+trait Foo {\n+    fn foo(_: usize);\n+}\n+```\n+\n+## bare-trait-object\n+\n+This lint suggests using `dyn Trait` for trait objects. Some example code\n+that triggers this lint:\n+\n+```rust\n+#![feature(dyn_trait)]\n+\n+trait Trait { }\n+\n+fn takes_trait_object(_: Box<Trait>) {\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: trait objects without an explicit `dyn` are deprecated\n+ --> src/lib.rs:7:30\n+  |\n+7 | fn takes_trait_object(_: Box<Trait>) {\n+  |                              ^^^^^ help: use `dyn`: `dyn Trait`\n+  |\n+```\n+\n+To fix it, do as the help message suggests:\n+\n+```rust\n+#![feature(dyn_trait)]\n+#![deny(bare_trait_object)]\n+\n+trait Trait { }\n+\n+fn takes_trait_object(_: Box<dyn Trait>) {\n+}\n+```\n+\n+## box-pointers\n+\n+This lints use of the Box type. Some example code that triggers this lint:\n+\n+```rust\n+struct Foo {\n+    x: Box<isize>,\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: type uses owned (Box type) pointers: std::boxed::Box<isize>\n+ --> src/lib.rs:6:5\n+  |\n+6 |     x: Box<isize> //~ ERROR type uses owned\n+  |     ^^^^^^^^^^^^^\n+  |\n+```\n+\n+This lint is mostly historical, and not particularly useful. `Box<T>` used to\n+be built into the language, and the only way to do heap allocation. Today's\n+Rust can call into other allocators, etc.\n+\n+## elided-lifetime-in-path\n+\n+This lint detects the use of hidden lifetime parameters. Some example code\n+that triggers this lint:\n+\n+```rust\n+struct Foo<'a> {\n+    x: &'a u32\n+}\n+\n+fn foo(x: &Foo) {\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: hidden lifetime parameters are deprecated, try `Foo<'_>`\n+ --> src/lib.rs:5:12\n+  |\n+5 | fn foo(x: &Foo) {\n+  |            ^^^\n+  |\n+```\n+\n+Lifetime elision elides this lifetime, but that is being deprecated.\n+\n+## missing-copy-implementations\n+\n+This lint detects potentially-forgotten implementations of `Copy`. Some\n+example code that triggers this lint:\n+\n+```rust\n+pub struct Foo {\n+    pub field: i32\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: type could implement `Copy`; consider adding `impl Copy`\n+ --> src/main.rs:3:1\n+  |\n+3 | / pub struct Foo { //~ ERROR type could implement `Copy`; consider adding `impl Copy`\n+4 | |     pub field: i32\n+5 | | }\n+  | |_^\n+  |\n+```\n+\n+You can fix the lint by deriving `Copy`.\n+\n+This lint is set to 'allow' because this code isn't bad; it's common to write\n+newtypes like this specifically so that a `Copy` type is no longer `Copy`.\n+\n+## missing-debug-implementations\n+\n+This lint detects missing implementations of `fmt::Debug`. Some example code\n+that triggers this lint:\n+\n+```rust\n+pub struct Foo;\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: type does not implement `fmt::Debug`; consider adding #[derive(Debug)] or a manual implementation\n+ --> src/main.rs:3:1\n+  |\n+3 | pub struct Foo;\n+  | ^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+You can fix the lint by deriving `Debug`.\n+\n+## missing-docs\n+\n+This lint detects missing documentation for public items. Some example code\n+that triggers this lint:\n+\n+```rust\n+pub fn foo() {}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: missing documentation for crate\n+ --> src/main.rs:1:1\n+  |\n+1 | / #![deny(missing_docs)]\n+2 | |\n+3 | | pub fn foo() {}\n+4 | |\n+5 | | fn main() {}\n+  | |____________^\n+  |\n+\n+error: missing documentation for a function\n+ --> src/main.rs:3:1\n+  |\n+3 | pub fn foo() {}\n+  | ^^^^^^^^^^^^\n+\n+```\n+\n+To fix the lint, add documentation to all items.\n+\n+## single-use-lifetime\n+\n+This lint detects lifetimes that are only used once. Some example code that\n+triggers this lint:\n+\n+```rust\n+struct Foo<'x> {\n+    x: &'x u32\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: lifetime name `'x` only used once\n+ --> src/main.rs:3:12\n+  |\n+3 | struct Foo<'x> {\n+  |            ^^\n+  |\n+```\n+\n+## trivial-casts\n+\n+This lint detects trivial casts which could be removed. Some example code\n+that triggers this lint:\n+\n+```rust\n+let x: &u32 = &42;\n+let _ = x as *const u32;\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: trivial cast: `&u32` as `*const u32`. Cast can be replaced by coercion, this might require type ascription or a temporary variable\n+ --> src/main.rs:5:13\n+  |\n+5 |     let _ = x as *const u32;\n+  |             ^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> src/main.rs:1:9\n+  |\n+1 | #![deny(trivial_casts)]\n+  |         ^^^^^^^^^^^^^\n+```\n+\n+## trivial-numeric-casts\n+\n+This lint detects trivial casts of numeric types which could be removed. Some\n+example code that triggers this lint:\n+\n+```rust\n+let x = 42i32 as i32;\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: trivial numeric cast: `i32` as `i32`. Cast can be replaced by coercion, this might require type ascription or a temporary variable\n+ --> src/main.rs:4:13\n+  |\n+4 |     let x = 42i32 as i32;\n+  |             ^^^^^^^^^^^^\n+  |\n+```\n+\n+## unreachable-pub\n+\n+This lint triggers for `pub` items not reachable from the crate root. Some\n+example code that triggers this lint:\n+\n+```rust\n+mod foo {\n+    pub mod bar {\n+        \n+    }\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: unreachable `pub` item\n+ --> src/main.rs:4:5\n+  |\n+4 |     pub mod bar {\n+  |     ---^^^^^^^^\n+  |     |\n+  |     help: consider restricting its visibility: `pub(crate)`\n+  |\n+```\n+\n+## unsafe-code\n+\n+This lint catches usage of `unsafe` code. Some example code that triggers this lint:\n+\n+```rust\n+fn main() {\n+    unsafe {\n+\n+    }\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: usage of an `unsafe` block\n+ --> src/main.rs:4:5\n+  |\n+4 | /     unsafe {\n+5 | |         \n+6 | |     }\n+  | |_____^\n+  |\n+```\n+\n+## unstable-features\n+\n+This lint is deprecated and no longer used.\n+\n+## unused-extern-crates\n+\n+This lint guards against `extern crate` items that are never used. Some\n+example code that triggers this lint:\n+\n+```rust\n+extern crate semver;\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: unused extern crate\n+ --> src/main.rs:3:1\n+  |\n+3 | extern crate semver;\n+  | ^^^^^^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## unused-import-braces\n+\n+This lint catches unnecessary braces around an imported item. Some example\n+code that triggers this lint:\n+\n+```rust\n+use test::{A};\n+\n+mod test {\n+    struct A;\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: braces around A is unnecessary\n+ --> src/main.rs:3:1\n+  |\n+3 | use test::{A};\n+  | ^^^^^^^^^^^^^^\n+  |\n+```\n+\n+To fix it, `use test::A;`\n+\n+## unused-qualifications\n+\n+This lint detects unnecessarily qualified names. Some example code that triggers this lint:\n+\n+```rust\n+mod foo {\n+    pub fn bar() {}\n+}\n+\n+fn main() {\n+    use foo::bar;\n+    foo::bar();\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: unnecessary qualification\n+ --> src/main.rs:9:5\n+  |\n+9 |     foo::bar();\n+  |     ^^^^^^^^\n+  |\n+```\n+\n+You can call `bar()` directly, without the `foo::`.\n+\n+## unused-results\n+\n+This lint checks for the unused result of an expression in a statement. Some\n+example code that triggers this lint:\n+\n+```rust\n+fn foo<T>() -> T { panic!() }\n+\n+fn main() {\n+    foo::<usize>();\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: unused result\n+ --> src/main.rs:6:5\n+  |\n+6 |     foo::<usize>();\n+  |     ^^^^^^^^^^^^^^^\n+  |\n+```\n+\n+## variant-size-differences\n+\n+This lint detects enums with widely varying variant sizes. Some example code that triggers this lint:\n+\n+```rust\n+enum En {\n+    V0(u8),\n+    VBig([u8; 1024]),   //~ ERROR variant is more than three times larger\n+}\n+```\n+\n+When set to 'deny', this will produce:\n+\n+```text\n+error: enum variant is more than three times larger (1024 bytes) than the next largest\n+ --> src/main.rs:5:5\n+  |\n+5 |     VBig([u8; 1024]),   //~ ERROR variant is more than three times larger\n+  |     ^^^^^^^^^^^^^^^^\n+  |\n+```\n\\ No newline at end of file"}, {"sha": "54e857c885dbe64d4524a273758b02389651d1ca", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/50b3a3d1216fd68b483c88b603ec6c742e51c054/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/50b3a3d1216fd68b483c88b603ec6c742e51c054/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=50b3a3d1216fd68b483c88b603ec6c742e51c054", "patch": "@@ -1 +1,16 @@\n # Deny-by-default lints\n+\n+These lints are all set to the 'deny' level by default.\n+\n+                          exceeding-bitshifts  deny     shift exceeds the type's number of bits\n+                   invalid-type-param-default  deny     type parameter default erroneously allowed in invalid location\n+                legacy-constructor-visibility  deny     detects use of struct constructors that would be invisible with new visibility rules\n+                   legacy-directory-ownership  deny     non-inline, non-`#[path]` modules (e.g. `mod foo;`) were erroneously allowed in some files not named `mod.rs`\n+                               legacy-imports  deny     detects names that resolve to ambiguous glob imports with RFC 1560\n+                   missing-fragment-specifier  deny     detects missing fragment specifiers in unused `macro_rules!` patterns\n+                           mutable-transmutes  deny     mutating transmuted &mut T from &T may cause undefined behavior\n+                        no-mangle-const-items  deny     const items will not have their symbols exported\n+    parenthesized-params-in-types-and-modules  deny     detects parenthesized generic parameters in type and module names\n+              pub-use-of-private-extern-crate  deny     detect public re-exports of private extern crates\n+                          safe-extern-statics  deny     safe access to extern statics was erroneously allowed\n+                          unknown-crate-types  deny     unknown crate type found in #[crate_type] directive\n\\ No newline at end of file"}, {"sha": "18cd2fe32a3cc75707effe23e285c4d187d5373f", "filename": "src/doc/rustc/src/lints/listing/index.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b3a3d1216fd68b483c88b603ec6c742e51c054/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/50b3a3d1216fd68b483c88b603ec6c742e51c054/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Findex.md?ref=50b3a3d1216fd68b483c88b603ec6c742e51c054", "patch": "@@ -1 +1,5 @@\n # Lint listing\n+\n+This section lists out all of the lints, grouped by their default lint levels.\n+\n+You can also see this list by running `rustc -W help`.\n\\ No newline at end of file"}, {"sha": "531cf7606b1ff07606fb08694350f3fb40695f7d", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/50b3a3d1216fd68b483c88b603ec6c742e51c054/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/50b3a3d1216fd68b483c88b603ec6c742e51c054/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=50b3a3d1216fd68b483c88b603ec6c742e51c054", "patch": "@@ -1 +1,49 @@\n # Warn-by-default lints\n+\n+These lints are all set to the 'warn' level by default.\n+\n+                                    const-err  warn     constant evaluation detected erroneous expression\n+                                    dead-code  warn     detect unused, unexported items\n+                                   deprecated  warn     detects use of deprecated items\n+       illegal-floating-point-literal-pattern  warn     floating-point literals cannot be used in patterns\n+                              improper-ctypes  warn     proper use of libc types in foreign modules\n+                 incoherent-fundamental-impls  warn     potentially-conflicting impls were erroneously allowed\n+                late-bound-lifetime-arguments  warn     detects generic lifetime arguments in path segments with late bound lifetime parameters\n+                         non-camel-case-types  warn     types, variants, traits and type parameters should have camel case names\n+                 non-shorthand-field-patterns  warn     using `Struct { x: x }` instead of `Struct { x }` in a pattern\n+                               non-snake-case  warn     variables, methods, functions, lifetime parameters and modules should have snake case names\n+                       non-upper-case-globals  warn     static constants should have uppercase identifiers\n+                      no-mangle-generic-items  warn     generic items must be mangled\n+                         overflowing-literals  warn     literal out of range for its type\n+                              path-statements  warn     path statements with no effect\n+                 patterns-in-fns-without-body  warn     patterns in functions without body were erroneously allowed\n+                            plugin-as-library  warn     compiler plugin used as ordinary library in non-plugin crate\n+                            private-in-public  warn     detect private items in public interfaces not caught by the old implementation\n+                        private-no-mangle-fns  warn     functions marked #[no_mangle] should be exported\n+                    private-no-mangle-statics  warn     statics marked #[no_mangle] should be exported\n+                    renamed-and-removed-lints  warn     lints that have been renamed or removed\n+                          safe-packed-borrows  warn     safe borrows of fields of packed structs were was erroneously allowed\n+                              stable-features  warn     stable features found in #[feature] directive\n+                            type-alias-bounds  warn     bounds in type aliases are not enforced\n+                     tyvar-behind-raw-pointer  warn     raw pointer to an inference variable\n+                      unconditional-recursion  warn     functions that cannot return without calling themselves\n+                      unions-with-drop-fields  warn     use of unions that contain fields with possibly non-trivial drop code\n+                                unknown-lints  warn     unrecognized lint attribute\n+                             unreachable-code  warn     detects unreachable code paths\n+                         unreachable-patterns  warn     detects unreachable patterns\n+                      unstable-name-collision  warn     detects name collision with an existing but unstable method\n+                            unused-allocation  warn     detects unnecessary allocations that can be eliminated\n+                           unused-assignments  warn     detect assignments that will never be read\n+                            unused-attributes  warn     detects attributes that were not used by the compiler\n+                           unused-comparisons  warn     comparisons made useless by limits of the types involved\n+                           unused-doc-comment  warn     detects doc comments that aren't used by rustdoc\n+                              unused-features  warn     unused or unknown features found in crate-level #[feature] directives\n+                               unused-imports  warn     imports that are never used\n+                                unused-macros  warn     detects macros that were not used\n+                              unused-must-use  warn     unused result of a type flagged as #[must_use]\n+                                   unused-mut  warn     detect mut variables which don't need to be mutable\n+                                unused-parens  warn     `if`, `match`, `while` and `return` do not need parentheses\n+                                unused-unsafe  warn     unnecessary use of an `unsafe` block\n+                             unused-variables  warn     detect variables which are not used in any way\n+                                     warnings  warn     mass-change the level for lints which produce warnings\n+                                   while-true  warn     suggest using `loop { }` instead of `while true { }`\n\\ No newline at end of file"}]}