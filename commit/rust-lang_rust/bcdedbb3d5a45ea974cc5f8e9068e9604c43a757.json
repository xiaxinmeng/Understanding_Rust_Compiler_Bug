{"sha": "bcdedbb3d5a45ea974cc5f8e9068e9604c43a757", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZGVkYmIzZDVhNDVlYTk3NGNjNWY4ZTkwNjhlOTYwNGM0M2E3NTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-21T12:36:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-21T12:36:05Z"}, "message": "Merge #6048\n\n6048: Code Docs r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "517f29aab74a5906d02f9035f39e352a055d6088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/517f29aab74a5906d02f9035f39e352a055d6088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcdedbb3d5a45ea974cc5f8e9068e9604c43a757", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaJ41CRBK7hj4Ov3rIwAAdHIIAEiEa/UGp3U7zOoLmhbuyHnG\nO/Z4bkoAZ/NUsQIaUYZ88mAqSEl3DcS0nJ0yx+GFNUXj/6I+GL2+GQTQq9lU+hgF\nxk+CthLDafQxEFZMd+bakxx12yYyzlsBOHMA4naak075FqzGrpYMu2NRFdikBtbg\nuBSsGm6Kzca5PFeNxxozH5/BH96+byie8cBLTncbowpEc/0svUbUoDY/ljuwxrib\nNwB/DrHLoSopg8SnT0VHpgASgHhDHddZ9/0WLn2aVxJppKRMUfx/CWd+YjrWQHBC\nLPogSH+1H7S4QzBZL+69NmmZrBWuLwoaehVMpJ0qSlqd1n9S0DOUpTz9Ckj37Wo=\n=yJps\n-----END PGP SIGNATURE-----\n", "payload": "tree 517f29aab74a5906d02f9035f39e352a055d6088\nparent 3b52d3181a44a0ccedd30c52e70ce84231918e72\nparent fcc3c49013c681d7f7cc98a59fe140e076837813\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1600691765 +0000\ncommitter GitHub <noreply@github.com> 1600691765 +0000\n\nMerge #6048\n\n6048: Code Docs r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcdedbb3d5a45ea974cc5f8e9068e9604c43a757", "html_url": "https://github.com/rust-lang/rust/commit/bcdedbb3d5a45ea974cc5f8e9068e9604c43a757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcdedbb3d5a45ea974cc5f8e9068e9604c43a757/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b52d3181a44a0ccedd30c52e70ce84231918e72", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b52d3181a44a0ccedd30c52e70ce84231918e72", "html_url": "https://github.com/rust-lang/rust/commit/3b52d3181a44a0ccedd30c52e70ce84231918e72"}, {"sha": "fcc3c49013c681d7f7cc98a59fe140e076837813", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc3c49013c681d7f7cc98a59fe140e076837813", "html_url": "https://github.com/rust-lang/rust/commit/fcc3c49013c681d7f7cc98a59fe140e076837813"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "835da3bb261dc10d47e131b4ee6320f647fc145c", "filename": "crates/assists/src/ast_transform.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bcdedbb3d5a45ea974cc5f8e9068e9604c43a757/crates%2Fassists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdedbb3d5a45ea974cc5f8e9068e9604c43a757/crates%2Fassists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fast_transform.rs?ref=bcdedbb3d5a45ea974cc5f8e9068e9604c43a757", "patch": "@@ -18,6 +18,34 @@ pub fn apply<'a, N: AstNode>(transformer: &dyn AstTransform<'a>, node: N) -> N {\n     .rewrite_ast(&node)\n }\n \n+/// `AstTransform` helps with applying bulk transformations to syntax nodes.\n+///\n+/// This is mostly useful for IDE code generation. If you paste some existing\n+/// code into a new context (for example, to add method overrides to an `impl`\n+/// block), you generally want to appropriately qualify the names, and sometimes\n+/// you might want to substitute generic parameters as well:\n+///\n+/// ```\n+/// mod x {\n+///   pub struct A;\n+///   pub trait T<U> { fn foo(&self, _: U) -> A; }\n+/// }\n+///\n+/// mod y {\n+///   use x::T;\n+///\n+///   impl T<()> for () {\n+///      // If we invoke **Add Missing Members** here, we want to copy-paste `foo`.\n+///      // But we want a slightly-modified version of it:\n+///      fn foo(&self, _: ()) -> x::A {}\n+///   }\n+/// }\n+/// ```\n+///\n+/// So, a single `AstTransform` describes such function from `SyntaxNode` to\n+/// `SyntaxNode`. Note that the API here is a bit too high-order and high-brow.\n+/// We'd want to somehow express this concept simpler, but so far nobody got to\n+/// simplifying this!\n pub trait AstTransform<'a> {\n     fn get_substitution(&self, node: &syntax::SyntaxNode) -> Option<syntax::SyntaxNode>;\n "}, {"sha": "c61a430e11bac6299f5ce7250b3e5cb5b0578718", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bcdedbb3d5a45ea974cc5f8e9068e9604c43a757/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdedbb3d5a45ea974cc5f8e9068e9604c43a757/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=bcdedbb3d5a45ea974cc5f8e9068e9604c43a757", "patch": "@@ -697,6 +697,25 @@ fn find_root(node: &SyntaxNode) -> SyntaxNode {\n     node.ancestors().last().unwrap()\n }\n \n+/// `SemanticScope` encapsulates the notion of a scope (the set of visible\n+/// names) at a particular program point.\n+///\n+/// It is a bit tricky, as scopes do not really exist inside the compiler.\n+/// Rather, the compiler directly computes for each reference the definition it\n+/// refers to. It might transiently compute the explicit scope map while doing\n+/// so, but, generally, this is not something left after the analysis.\n+///\n+/// However, we do very much need explicit scopes for IDE purposes --\n+/// completion, at its core, lists the contents of the current scope. The notion\n+/// of scope is also useful to answer questions like \"what would be the meaning\n+/// of this piece of code if we inserted it into this position?\".\n+///\n+/// So `SemanticsScope` is constructed from a specific program point (a syntax\n+/// node or just a raw offset) and provides access to the set of visible names\n+/// on a somewhat best-effort basis.\n+///\n+/// Note that if you are wondering \"what does this specific existing name mean?\",\n+/// you'd better use the `resolve_` family of methods.\n #[derive(Debug)]\n pub struct SemanticsScope<'a> {\n     pub db: &'a dyn HirDatabase,"}]}