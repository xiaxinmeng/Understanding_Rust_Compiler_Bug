{"sha": "e5ccc76bc4e32538f8b2cb5f6745f42ce50ac232", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1Y2NjNzZiYzRlMzI1MzhmOGIyY2I1ZjY3NDVmNDJjZTUwYWMyMzI=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-03-23T04:15:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-06T22:35:48Z"}, "message": "fixed by-val from rust->c, use ++ sigil in native fn sig <-- NEVAR FORGET\n\nhave to use ++ sigil in rust-side extern fn decls in order to have rust\nactually copy the struct, by value, onto the C stack. gotcha, indeed.\n\nalso adding a helper method to verify/remind how to pass a struct by-val\ninto C... check out the rust fn sig for rust_uv_ip4_test_verify_port_val()\nfor more infos", "tree": {"sha": "a9f275b248045f076a13b8a2bc193b68b3849b64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9f275b248045f076a13b8a2bc193b68b3849b64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5ccc76bc4e32538f8b2cb5f6745f42ce50ac232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ccc76bc4e32538f8b2cb5f6745f42ce50ac232", "html_url": "https://github.com/rust-lang/rust/commit/e5ccc76bc4e32538f8b2cb5f6745f42ce50ac232", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5ccc76bc4e32538f8b2cb5f6745f42ce50ac232/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c82bdb453523be57512c91d267bac05018ed19", "url": "https://api.github.com/repos/rust-lang/rust/commits/43c82bdb453523be57512c91d267bac05018ed19", "html_url": "https://github.com/rust-lang/rust/commit/43c82bdb453523be57512c91d267bac05018ed19"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "e52b1121a6f6dd66b2215fc4a3e65e29220ddd59", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e5ccc76bc4e32538f8b2cb5f6745f42ce50ac232/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ccc76bc4e32538f8b2cb5f6745f42ce50ac232/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=e5ccc76bc4e32538f8b2cb5f6745f42ce50ac232", "patch": "@@ -217,17 +217,15 @@ fn gen_stub_uv_write_t() -> uv_write_t {\n     ret { loop_handle: ptr::null() };\n }\n \n-// not going to use this type, for now, because of\n-// github issue #1402\n // unix size: 16\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n type sockaddr_in = {\n-    sin_family: u16,\n-    sin_port: u16,\n-    sin_addr: u32, // in_addr: this is an opaque, per-platform struct\n-    sin_zero: *u8\n+    mut sin_family: u16,\n+    mut sin_port: u16,\n+    mut sin_addr: u32, // in_addr: this is an opaque, per-platform struct\n+    mut sin_zero: (u8, u8, u8, u8, u8, u8, u8, u8)\n };\n \n // unix size: 28 .. make due w/ 32\n@@ -275,11 +273,14 @@ native mod rustrt {\n     fn rust_uv_buf_init(base: *u8, len: libc::size_t)\n         -> *libc::c_void;\n     fn rust_uv_last_error(loop_handle: *libc::c_void) -> uv_err_t;\n+    fn rust_uv_ip4_test_verify_port_val(++addr: sockaddr_in,\n+                                        expected: libc::c_uint)\n+        -> bool;\n     fn rust_uv_ip4_addr(ip: *u8, port: libc::c_int)\n         -> sockaddr_in;\n     fn rust_uv_tcp_connect(connect_ptr: *uv_connect_t,\n                            tcp_handle_ptr: *uv_tcp_t,\n-                           addr: *libc::c_void,\n+                           ++addr: sockaddr_in,\n                            after_cb: *u8) -> libc::c_int;\n     fn rust_uv_write(req: *libc::c_void, stream: *libc::c_void,\n              buf_in: **libc::c_void, buf_cnt: libc::c_int,\n@@ -329,9 +330,10 @@ mod direct {\n     }\n     unsafe fn tcp_connect(connect_ptr: *uv_connect_t,\n                           tcp_handle_ptr: *uv_tcp_t,\n-                          address: *libc::c_void,\n+                          address: sockaddr_in,\n                           after_connect_cb: *u8)\n     -> libc::c_int {\n+        io::println(#fmt(\"before native tcp_connect -- addr port: %u\", address.sin_port as uint));\n         ret rustrt::rust_uv_tcp_connect(connect_ptr, tcp_handle_ptr,\n                                     address, after_connect_cb);\n     }\n@@ -380,15 +382,15 @@ mod direct {\n     unsafe fn buf_init(input: *u8, len: uint) -> *libc::c_void {\n         ret rustrt::rust_uv_buf_init(input, len);\n     }\n-    // TODO: see github issue #1402\n-    unsafe fn ip4_addr(ip: str, port: libc::c_int)\n+    unsafe fn ip4_addr(ip: str, port: int)\n     -> sockaddr_in {\n         let mut addr_vec = str::bytes(ip);\n         addr_vec += [0u8]; // add null terminator\n         let addr_vec_ptr = vec::unsafe::to_ptr(addr_vec);\n         let ip_back = str::from_bytes(addr_vec);\n         io::println(#fmt(\"vec val: '%s' length: %u\",ip_back, vec::len(addr_vec)));\n-        ret rustrt::rust_uv_ip4_addr(addr_vec_ptr, port);\n+        ret rustrt::rust_uv_ip4_addr(addr_vec_ptr,\n+                                     port as libc::c_int);\n     }\n     // this is lame.\n     // TODO: see github issue #1402\n@@ -1032,11 +1034,11 @@ fn impl_uv_tcp_request() unsafe {\n         io::println(\"sucessful tcp_init_result\");\n         \n         io::println(\"building addr...\");\n-        let addr_val = direct::ip4_addr(\"173.194.33.40\", 80i32);\n+        let addr = direct::ip4_addr(\"173.194.33.40\", 80);\n         io::println(#fmt(\"after build addr in rust. port: %u\",\n-                         addr_val.sin_port as uint));\n-        let addr: *libc::c_void = ptr::addr_of(addr_val) as\n-                                    *libc::c_void;\n+                         addr.sin_port as uint));\n+        //let addr: *libc::c_void = ptr::addr_of(addr_val) as\n+        //                            *libc::c_void;\n         \n         // this should set up the connection request..\n         let tcp_connect_result = direct::tcp_connect(\n@@ -1128,3 +1130,17 @@ fn test_uv_struct_size_sockaddr_in() {\n     io::println(output);\n     assert native_handle_size as uint == rust_handle_size;\n }\n+\n+fn impl_uv_byval_test() unsafe {\n+    let addr = direct::ip4_addr(\"173.194.33.111\", 80);\n+    io::println(#fmt(\"after build addr in rust. port: %u\",\n+                     addr.sin_port as uint));\n+    assert rustrt::rust_uv_ip4_test_verify_port_val(addr,\n+                                   addr.sin_port as libc::c_uint);\n+    io::println(#fmt(\"after build addr in rust. port: %u\",\n+                     addr.sin_port as uint));\n+}\n+#[test]\n+fn test_uv_ip4_byval_passing_test() {\n+    impl_uv_byval_test();\n+}"}, {"sha": "cfe3b78b1083820b14d90582310a6042b34cab69", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5ccc76bc4e32538f8b2cb5f6745f42ce50ac232/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e5ccc76bc4e32538f8b2cb5f6745f42ce50ac232/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=e5ccc76bc4e32538f8b2cb5f6745f42ce50ac232", "patch": "@@ -287,12 +287,12 @@ rust_uv_last_error(uv_loop_t* loop) {\n extern \"C\" int\n rust_uv_tcp_connect(uv_connect_t* connect_ptr,\n \t\t\t\t\tuv_tcp_t* tcp_ptr,\n-\t\t\t\t\tvoid* addr_ptr,\n+\t\t\t\t\tstruct sockaddr_in addr,\n \t\t\t\t\tuv_connect_cb cb) {\n \t//return uv_tcp_connect(connect_ptr, tcp_ptr, addr, cb);\n \tprintf(\"inside rust_uv_tcp_connect\\n\");\n-\tsockaddr_in addr_tmp = *((sockaddr_in*)addr_ptr);\n-\tsockaddr_in addr = addr_tmp;\n+\t//sockaddr_in addr_tmp = *((sockaddr_in*)addr_ptr);\n+\t//sockaddr_in addr = addr_tmp;\n \tprintf(\"before tcp_connect .. port: %d\\n\", addr.sin_port);\n \tint result = uv_tcp_connect(connect_ptr, tcp_ptr, addr, cb);\n \tprintf (\"leaving rust_uv_tcp_connect.. and result: %d\\n\",\n@@ -313,10 +313,17 @@ rust_uv_write(uv_write_t* req, uv_stream_t* handle,\n \treturn uv_write(req, handle, buf_vals, buf_cnt, cb);\n }\n \n-extern \"C\" sockaddr_in\n+extern \"C\" struct sockaddr_in\n rust_uv_ip4_addr(const char* ip, int port) {\n \tprintf(\"before creating addr_ptr.. ip %s port %d\\n\", ip, port);\n-\tsockaddr_in addr = uv_ip4_addr(\"173.194.33.40\", 80);\n+\tstruct sockaddr_in addr = uv_ip4_addr(ip, port);\n \tprintf(\"after creating .. port: %d\\n\", addr.sin_port);\n \treturn addr;\n }\n+\n+extern \"C\" bool\n+rust_uv_ip4_test_verify_port_val(struct sockaddr_in addr,\n+\t\t\t\t\t\t\t\t unsigned int expected) {\n+\tprintf(\"inside c++ ip4_test .. port: %u\\n\", addr.sin_port);\n+\treturn addr.sin_port == expected;\n+}"}]}