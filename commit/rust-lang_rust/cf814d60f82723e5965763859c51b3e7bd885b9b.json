{"sha": "cf814d60f82723e5965763859c51b3e7bd885b9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmODE0ZDYwZjgyNzIzZTU5NjU3NjM4NTljNTFiM2U3YmQ4ODViOWI=", "commit": {"author": {"name": "Cheng XU", "email": "git@xuc.me", "date": "2021-08-28T23:48:45Z"}, "committer": {"name": "Cheng XU", "email": "git@xuc.me", "date": "2021-08-29T00:18:50Z"}, "message": "BTreeMap::from_iter: use bulk building to improve the performance\n\nBulk building is a common technique to increase the performance of\nbuilding a fresh btree map. Instead of inserting items one-by-one,\nwe sort all the items beforehand then create the BtreeMap in bulk.", "tree": {"sha": "3076d1accc7df88f4ad350dc57d8fea3ccdd1f43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3076d1accc7df88f4ad350dc57d8fea3ccdd1f43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf814d60f82723e5965763859c51b3e7bd885b9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQQMYHRMWe9yVY/QcCqHlLXXo8Z/cAUCYSrSdAAKCRCHlLXXo8Z/\ncJCQAQC3UWO3ALzdyY27DHnsp6tdepcS3lzgHe/W1VyenT9ZtAD+PRUnyFkChaBK\nsoSfoz4NLb4OUczZeRpCUd2M1e0d5ws=\n=5j9g\n-----END PGP SIGNATURE-----", "payload": "tree 3076d1accc7df88f4ad350dc57d8fea3ccdd1f43\nparent 6a6885c6bd1d44969ced14ab7f3ea9d543bf14a2\nauthor Cheng XU <git@xuc.me> 1630194525 -0700\ncommitter Cheng XU <git@xuc.me> 1630196330 -0700\n\nBTreeMap::from_iter: use bulk building to improve the performance\n\nBulk building is a common technique to increase the performance of\nbuilding a fresh btree map. Instead of inserting items one-by-one,\nwe sort all the items beforehand then create the BtreeMap in bulk.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf814d60f82723e5965763859c51b3e7bd885b9b", "html_url": "https://github.com/rust-lang/rust/commit/cf814d60f82723e5965763859c51b3e7bd885b9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf814d60f82723e5965763859c51b3e7bd885b9b/comments", "author": {"login": "xu-cheng", "id": 3105373, "node_id": "MDQ6VXNlcjMxMDUzNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3105373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xu-cheng", "html_url": "https://github.com/xu-cheng", "followers_url": "https://api.github.com/users/xu-cheng/followers", "following_url": "https://api.github.com/users/xu-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/xu-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/xu-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xu-cheng/subscriptions", "organizations_url": "https://api.github.com/users/xu-cheng/orgs", "repos_url": "https://api.github.com/users/xu-cheng/repos", "events_url": "https://api.github.com/users/xu-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/xu-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xu-cheng", "id": 3105373, "node_id": "MDQ6VXNlcjMxMDUzNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3105373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xu-cheng", "html_url": "https://github.com/xu-cheng", "followers_url": "https://api.github.com/users/xu-cheng/followers", "following_url": "https://api.github.com/users/xu-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/xu-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/xu-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xu-cheng/subscriptions", "organizations_url": "https://api.github.com/users/xu-cheng/orgs", "repos_url": "https://api.github.com/users/xu-cheng/repos", "events_url": "https://api.github.com/users/xu-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/xu-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a6885c6bd1d44969ced14ab7f3ea9d543bf14a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6885c6bd1d44969ced14ab7f3ea9d543bf14a2", "html_url": "https://github.com/rust-lang/rust/commit/6a6885c6bd1d44969ced14ab7f3ea9d543bf14a2"}], "stats": {"total": 84, "additions": 79, "deletions": 5}, "files": [{"sha": "60bf83b8387c38c135d51b51329774d9638c836b", "filename": "library/alloc/src/collections/btree/dedup_sorted_iter.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cf814d60f82723e5965763859c51b3e7bd885b9b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fdedup_sorted_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf814d60f82723e5965763859c51b3e7bd885b9b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fdedup_sorted_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fdedup_sorted_iter.rs?ref=cf814d60f82723e5965763859c51b3e7bd885b9b", "patch": "@@ -0,0 +1,47 @@\n+use core::iter::Peekable;\n+\n+/// A iterator for deduping the key of a sorted iterator.\n+/// When encountering the duplicated key, only the last key-value pair is yielded.\n+///\n+/// Used by [`BTreeMap::bulk_build_from_sorted_iter`].\n+pub struct DedupSortedIter<K, V, I>\n+where\n+    I: Iterator<Item = (K, V)>,\n+{\n+    iter: Peekable<I>,\n+}\n+\n+impl<K, V, I> DedupSortedIter<K, V, I>\n+where\n+    I: Iterator<Item = (K, V)>,\n+{\n+    pub fn new(iter: I) -> Self {\n+        Self { iter: iter.peekable() }\n+    }\n+}\n+\n+impl<K, V, I> Iterator for DedupSortedIter<K, V, I>\n+where\n+    K: Eq,\n+    I: Iterator<Item = (K, V)>,\n+{\n+    type Item = (K, V);\n+\n+    fn next(&mut self) -> Option<(K, V)> {\n+        loop {\n+            let next = match self.iter.next() {\n+                Some(next) => next,\n+                None => return None,\n+            };\n+\n+            let peeked = match self.iter.peek() {\n+                Some(peeked) => peeked,\n+                None => return Some(next),\n+            };\n+\n+            if next.0 != peeked.0 {\n+                return Some(next);\n+            }\n+        }\n+    }\n+}"}, {"sha": "5e60851aec8c97edb5511cf24f1e6aadefbbdf87", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cf814d60f82723e5965763859c51b3e7bd885b9b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf814d60f82723e5965763859c51b3e7bd885b9b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=cf814d60f82723e5965763859c51b3e7bd885b9b", "patch": "@@ -1,3 +1,4 @@\n+use crate::vec::Vec;\n use core::borrow::Borrow;\n use core::cmp::Ordering;\n use core::fmt::{self, Debug};\n@@ -9,6 +10,7 @@ use core::ops::{Index, RangeBounds};\n use core::ptr;\n \n use super::borrow::DormantMutRef;\n+use super::dedup_sorted_iter::DedupSortedIter;\n use super::navigate::{LazyLeafRange, LeafRange};\n use super::node::{self, marker, ForceResult::*, Handle, NodeRef, Root};\n use super::search::SearchResult::*;\n@@ -1290,6 +1292,18 @@ impl<K, V> BTreeMap<K, V> {\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }\n     }\n+\n+    /// Makes a `BTreeMap` from a sorted iterator.\n+    pub(crate) fn bulk_build_from_sorted_iter<I>(iter: I) -> Self\n+    where\n+        K: Ord,\n+        I: Iterator<Item = (K, V)>,\n+    {\n+        let mut root = Root::new();\n+        let mut length = 0;\n+        root.bulk_push(DedupSortedIter::new(iter), &mut length);\n+        BTreeMap { root: Some(root), length }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1914,9 +1928,15 @@ impl<K, V> FusedIterator for RangeMut<'_, K, V> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> {\n     fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> BTreeMap<K, V> {\n-        let mut map = BTreeMap::new();\n-        map.extend(iter);\n-        map\n+        let mut inputs: Vec<_> = iter.into_iter().collect();\n+\n+        if inputs.is_empty() {\n+            return BTreeMap::new();\n+        }\n+\n+        // use stable sort to preserve the insertion order.\n+        inputs.sort_by(|a, b| a.0.cmp(&b.0));\n+        BTreeMap::bulk_build_from_sorted_iter(inputs.into_iter())\n     }\n }\n \n@@ -2025,8 +2045,14 @@ impl<K: Ord, V, const N: usize> From<[(K, V); N]> for BTreeMap<K, V> {\n     /// let map2: BTreeMap<_, _> = [(1, 2), (3, 4)].into();\n     /// assert_eq!(map1, map2);\n     /// ```\n-    fn from(arr: [(K, V); N]) -> Self {\n-        core::array::IntoIter::new(arr).collect()\n+    fn from(mut arr: [(K, V); N]) -> Self {\n+        if N == 0 {\n+            return BTreeMap::new();\n+        }\n+\n+        // use stable sort to preserve the insertion order.\n+        arr.sort_by(|a, b| a.0.cmp(&b.0));\n+        BTreeMap::bulk_build_from_sorted_iter(core::array::IntoIter::new(arr))\n     }\n }\n "}, {"sha": "9571b3d594df8cf6c410a663388c6825d099c82d", "filename": "library/alloc/src/collections/btree/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf814d60f82723e5965763859c51b3e7bd885b9b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf814d60f82723e5965763859c51b3e7bd885b9b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs?ref=cf814d60f82723e5965763859c51b3e7bd885b9b", "patch": "@@ -1,5 +1,6 @@\n mod append;\n mod borrow;\n+mod dedup_sorted_iter;\n mod fix;\n pub mod map;\n mod mem;"}]}