{"sha": "728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOGQyMGY3Y2M4NGE2N2VhODVhYWExMjU3MjM0YjQ3NTBiZGNjMWM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-03-31T18:42:23Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-04-05T17:58:58Z"}, "message": "improve error message", "tree": {"sha": "5a2fbad3b9c8fed24336e0816004dc7895845d8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a2fbad3b9c8fed24336e0816004dc7895845d8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "html_url": "https://github.com/rust-lang/rust/commit/728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a461d940cc6019bd332b1ea732d79d3216d9108", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a461d940cc6019bd332b1ea732d79d3216d9108", "html_url": "https://github.com/rust-lang/rust/commit/8a461d940cc6019bd332b1ea732d79d3216d9108"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "a8135ad384932bbf88916b454380825bb301ecf0", "filename": "src/doc/book/closures.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Fdoc%2Fbook%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Fdoc%2Fbook%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fclosures.md?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -371,13 +371,13 @@ assert_eq!(6, answer);\n This gives us these long, related errors:\n \n ```text\n-error: the predicate `core::ops::Fn(i32) -> i32 : core::marker::Sized` is not satisfied [E0277]\n+error: the trait bound `core::ops::Fn(i32) -> i32 : core::marker::Sized` is not satisfied [E0277]\n fn factory() -> (Fn(i32) -> i32) {\n                 ^~~~~~~~~~~~~~~~\n note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time\n fn factory() -> (Fn(i32) -> i32) {\n                 ^~~~~~~~~~~~~~~~\n-error: the predicate `core::ops::Fn(i32) -> i32 : core::marker::Sized` is not satisfied [E0277]\n+error: the trait bound `core::ops::Fn(i32) -> i32 : core::marker::Sized` is not satisfied [E0277]\n let f = factory();\n     ^\n note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time"}, {"sha": "ac55972524f9fbee50b5f2b358ea91c3253ba444", "filename": "src/doc/book/concurrency.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Fdoc%2Fbook%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Fdoc%2Fbook%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fconcurrency.md?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -231,7 +231,7 @@ fn main() {\n This won't work, however, and will give us the error:\n \n ```text\n-13:9: 13:22 error: the predicate `alloc::rc::Rc<collections::vec::Vec<i32>> : core::marker::Send`\n+13:9: 13:22 error: the trait bound `alloc::rc::Rc<collections::vec::Vec<i32>> : core::marker::Send`\n             is not satisfied\n ...\n 13:9: 13:22 note: `alloc::rc::Rc<collections::vec::Vec<i32>>`"}, {"sha": "b3b41979245681e2408a3626c0354b39e4f4fb42", "filename": "src/doc/book/traits.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Fdoc%2Fbook%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Fdoc%2Fbook%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftraits.md?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -154,7 +154,7 @@ print_area(5);\n We get a compile-time error:\n \n ```text\n-error: the predicate `_ : HasArea` is not satisfied [E0277]\n+error: the trait bound `_ : HasArea` is not satisfied [E0277]\n ```\n \n ## Trait bounds on generic structs\n@@ -496,7 +496,7 @@ impl FooBar for Baz {\n If we forget to implement `Foo`, Rust will tell us:\n \n ```text\n-error: the predicate `main::Baz : main::Foo` is not satisfied [E0277]\n+error: the trait bound `main::Baz : main::Foo` is not satisfied [E0277]\n ```\n \n # Deriving"}, {"sha": "75e961e4c4a80504d6c2fefc27db9ebd6025d39e", "filename": "src/doc/book/vectors.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Fdoc%2Fbook%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Fdoc%2Fbook%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fvectors.md?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -56,7 +56,7 @@ v[j];\n Indexing with a non-`usize` type gives an error that looks like this:\n \n ```text\n-error: the predicate `collections::vec::Vec<_> : core::ops::Index<i32>`\n+error: the trait bound `collections::vec::Vec<_> : core::ops::Index<i32>`\n is not satisfied [E0277]\n v[j];\n ^~~~"}, {"sha": "6a9ebd6edf8fbc7f53968c25047ce266d719bb0a", "filename": "src/doc/nomicon/coercions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Fdoc%2Fnomicon%2Fcoercions.md", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Fdoc%2Fnomicon%2Fcoercions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fcoercions.md?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -64,7 +64,7 @@ fn main() {\n ```\n \n ```text\n-<anon>:10:5: 10:8 error: the predicate `&mut i32 : Trait` is not satisfied [E0277]\n+<anon>:10:5: 10:8 error: the trait bound `&mut i32 : Trait` is not satisfied [E0277]\n <anon>:10     foo(t);\n               ^~~\n ```"}, {"sha": "4abb1c8b98af68c0208f27627016dfbc1ed905cd", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -1006,7 +1006,7 @@ fn some_func<T: Foo>(foo: T) {\n fn main() {\n     // we now call the method with the i32 type, which doesn't implement\n     // the Foo trait\n-    some_func(5i32); // error: the predicate `i32 : Foo` is not satisfied\n+    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n }\n ```\n "}, {"sha": "dfe3f91c7b158e5b373d89cbf2260bf52760da52", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -361,7 +361,7 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                             let trait_ref = trait_predicate.to_poly_trait_ref();\n                             let mut err = struct_span_err!(\n                                 infcx.tcx.sess, obligation.cause.span, E0277,\n-                                \"the predicate `{}` is not satisfied\",\n+                                \"the trait bound `{}` is not satisfied\",\n                                 trait_ref.to_predicate());\n \n                             // Try to report a good error message."}, {"sha": "9fa24850e037f49895d883086d4408d4f34bdbbd", "filename": "src/test/compile-fail/associated-types-for-unimpl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fassociated-types-for-unimpl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fassociated-types-for-unimpl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-for-unimpl-trait.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -15,7 +15,7 @@ trait Get {\n \n trait Other {\n     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-    //~^ ERROR the predicate `Self : Get` is not satisfied\n+    //~^ ERROR the trait bound `Self : Get` is not satisfied\n }\n \n fn main() {"}, {"sha": "18d9ea52ff25efe2bfd7f22dcc281bbe15d1e329", "filename": "src/test/compile-fail/associated-types-invalid-trait-ref-issue-18865.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -18,7 +18,7 @@ trait Foo<T> {\n \n fn f<T:Foo<isize>>(t: &T) {\n     let u: <T as Foo<usize>>::Bar = t.get_bar();\n-    //~^ ERROR the predicate `T : Foo<usize>` is not satisfied\n+    //~^ ERROR the trait bound `T : Foo<usize>` is not satisfied\n }\n \n fn main() { }"}, {"sha": "0aafd193c90d3e9fc2278f1ac08cedc0bba14767", "filename": "src/test/compile-fail/associated-types-no-suitable-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -19,7 +19,7 @@ struct Struct {\n \n impl Struct {\n     fn uhoh<T>(foo: <T as Get>::Value) {}\n-    //~^ ERROR the predicate `T : Get` is not satisfied\n+    //~^ ERROR the trait bound `T : Get` is not satisfied\n }\n \n fn main() {"}, {"sha": "225ee0857013bbe2616f0a390faea9f45be1558d", "filename": "src/test/compile-fail/associated-types-no-suitable-supertrait-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait-2.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -25,7 +25,7 @@ trait Get {\n \n trait Other {\n     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-    //~^ ERROR the predicate `Self : Get` is not satisfied\n+    //~^ ERROR the trait bound `Self : Get` is not satisfied\n }\n \n fn main() { }"}, {"sha": "fe519beef672624d5c1705896a725b6697b2ad95", "filename": "src/test/compile-fail/associated-types-no-suitable-supertrait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -25,12 +25,12 @@ trait Get {\n \n trait Other {\n     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-    //~^ ERROR the predicate `Self : Get` is not satisfied\n+    //~^ ERROR the trait bound `Self : Get` is not satisfied\n }\n \n impl<T:Get> Other for T {\n     fn uhoh<U:Get>(&self, foo: U, bar: <(T, U) as Get>::Value) {}\n-    //~^ ERROR the predicate `(T, U) : Get` is not satisfied\n+    //~^ ERROR the trait bound `(T, U) : Get` is not satisfied\n }\n \n fn main() { }"}, {"sha": "c032fb43402f922cc2a064df056439690f450e37", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -91,7 +91,7 @@ fn main()\n     let _ = 42usize as *const [u8]; //~ ERROR casting\n     let _ = v as *const [u8]; //~ ERROR cannot cast\n     let _ = fat_v as *const Foo;\n-    //~^ ERROR the predicate `[u8] : std::marker::Sized` is not satisfied\n+    //~^ ERROR the trait bound `[u8] : std::marker::Sized` is not satisfied\n     //~^^ HELP run `rustc --explain E0277` to see a detailed explanation\n     //~^^^ NOTE `[u8]` does not have a constant size known at compile-time\n     //~^^^^ NOTE required for the cast to the object type `Foo`\n@@ -106,7 +106,7 @@ fn main()\n \n     let a : *const str = \"hello\";\n     let _ = a as *const Foo;\n-    //~^ ERROR the predicate `str : std::marker::Sized` is not satisfied\n+    //~^ ERROR the trait bound `str : std::marker::Sized` is not satisfied\n     //~^^ HELP run `rustc --explain E0277` to see a detailed explanation\n     //~^^^ NOTE `str` does not have a constant size known at compile-time\n     //~^^^^ NOTE required for the cast to the object type `Foo`"}, {"sha": "0a3ce03f27bf0f9a3289a3c608dd93004b5b42aa", "filename": "src/test/compile-fail/cross-fn-cache-hole.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fcross-fn-cache-hole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fcross-fn-cache-hole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-fn-cache-hole.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -23,7 +23,7 @@ trait Bar<X> { }\n \n // We don't always check where clauses for sanity, but in this case\n // wfcheck does report an error here:\n-fn vacuous<A>() //~ ERROR the predicate `i32 : Bar<u32>` is not satisfied\n+fn vacuous<A>() //~ ERROR the trait bound `i32 : Bar<u32>` is not satisfied\n     where i32: Foo<u32, A>\n {\n     // ... the original intention was to check that we don't use that"}, {"sha": "7bc4adfa85d0b086cb87b4071f18ad7b59912f7d", "filename": "src/test/compile-fail/issue-21659-show-relevant-trait-impls-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-1.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -32,7 +32,7 @@ fn main() {\n     let f1 = Bar;\n \n     f1.foo(1usize);\n-    //~^ error: the predicate `Bar : Foo<usize>` is not satisfied\n+    //~^ error: the trait bound `Bar : Foo<usize>` is not satisfied\n     //~| help: the following implementations were found:\n     //~| help:   <Bar as Foo<i32>>\n     //~| help:   <Bar as Foo<u8>>"}, {"sha": "f4e536144720e40f2704a5e0ee62bd375949fd6c", "filename": "src/test/compile-fail/issue-21659-show-relevant-trait-impls-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-2.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -36,7 +36,7 @@ fn main() {\n     let f1 = Bar;\n \n     f1.foo(1usize);\n-    //~^ error: the predicate `Bar : Foo<usize>` is not satisfied\n+    //~^ error: the trait bound `Bar : Foo<usize>` is not satisfied\n     //~| help: the following implementations were found:\n     //~| help:   <Bar as Foo<i8>>\n     //~| help:   <Bar as Foo<i16>>"}, {"sha": "2fee2604a8a8cbff7a5df3c5ea999b97505222e9", "filename": "src/test/compile-fail/wf-impl-associated-type-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fwf-impl-associated-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fwf-impl-associated-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-impl-associated-type-trait.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -25,7 +25,7 @@ pub trait Foo {\n \n impl<T> Foo for T {\n     type Bar = MySet<T>;\n-    //~^ ERROR the predicate `T : MyHash` is not satisfied\n+    //~^ ERROR the trait bound `T : MyHash` is not satisfied\n }\n \n #[rustc_error]"}, {"sha": "4b85f2275a75bea1481e04e75467d997eeedd272", "filename": "src/test/compile-fail/where-clause-constraints-are-local-for-inherent-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-inherent-impl.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -21,7 +21,7 @@ impl<T> Foo<T> {\n \n     fn fails_copy(self) {\n         require_copy(self.x);\n-        //~^ ERROR the predicate `T : std::marker::Copy` is not satisfied\n+        //~^ ERROR the trait bound `T : std::marker::Copy` is not satisfied\n     }\n }\n "}, {"sha": "f55586982bee2c6697adb67b639b1ad758f57936", "filename": "src/test/compile-fail/where-clause-constraints-are-local-for-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-trait-impl.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -26,7 +26,7 @@ impl<T> Foo<T> for Bar<T> {\n \n     fn fails_copy(self) {\n         require_copy(self.x);\n-        //~^ ERROR the predicate `T : std::marker::Copy` is not satisfied\n+        //~^ ERROR the trait bound `T : std::marker::Copy` is not satisfied\n     }\n }\n "}, {"sha": "9f217f29bd187df460c4e3b371dc6b1d8518ff51", "filename": "src/test/compile-fail/where-clause-method-substituion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fwhere-clause-method-substituion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fwhere-clause-method-substituion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clause-method-substituion.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -28,5 +28,5 @@ impl Bar<X> for isize {\n \n fn main() {\n     1.method::<X>();\n-    //~^ ERROR the predicate `X : Foo<X>` is not satisfied\n+    //~^ ERROR the trait bound `X : Foo<X>` is not satisfied\n }"}, {"sha": "38470bc3de67465d4fc9bb5ec9aa56faa951f05b", "filename": "src/test/compile-fail/where-clauses-unsatisfied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-unsatisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728d20f7cc84a67ea85aaa1257234b4750bdcc1c/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-unsatisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-unsatisfied.rs?ref=728d20f7cc84a67ea85aaa1257234b4750bdcc1c", "patch": "@@ -15,5 +15,5 @@ struct Struct;\n \n fn main() {\n     drop(equal(&Struct, &Struct))\n-    //~^ ERROR the predicate `Struct : std::cmp::Eq` is not satisfied\n+    //~^ ERROR the trait bound `Struct : std::cmp::Eq` is not satisfied\n }"}]}