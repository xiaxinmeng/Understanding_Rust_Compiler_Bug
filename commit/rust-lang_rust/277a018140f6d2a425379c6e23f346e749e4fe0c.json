{"sha": "277a018140f6d2a425379c6e23f346e749e4fe0c", "node_id": "C_kwDOAAsO6NoAKDI3N2EwMTgxNDBmNmQyYTQyNTM3OWM2ZTIzZjM0NmU3NDllNGZlMGM", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-10-01T19:41:36Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-10-01T23:42:29Z"}, "message": "rustdoc: use slice::contains instead of open-coding it", "tree": {"sha": "60e415eaa43bed29f6d554b5dd34fa9bc1a0a754", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60e415eaa43bed29f6d554b5dd34fa9bc1a0a754"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/277a018140f6d2a425379c6e23f346e749e4fe0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/277a018140f6d2a425379c6e23f346e749e4fe0c", "html_url": "https://github.com/rust-lang/rust/commit/277a018140f6d2a425379c6e23f346e749e4fe0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/277a018140f6d2a425379c6e23f346e749e4fe0c/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed937594d3912ced11f6f35a90bb8bf591909d2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed937594d3912ced11f6f35a90bb8bf591909d2a", "html_url": "https://github.com/rust-lang/rust/commit/ed937594d3912ced11f6f35a90bb8bf591909d2a"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "a3fde92d7655d776e9bb27dbe1bff1ce7c5ee19c", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/277a018140f6d2a425379c6e23f346e749e4fe0c/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/277a018140f6d2a425379c6e23f346e749e4fe0c/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=277a018140f6d2a425379c6e23f346e749e4fe0c", "patch": "@@ -52,7 +52,7 @@ fn drop_tag(\n                 continue;\n             }\n             let last_tag_name_low = last_tag_name.to_lowercase();\n-            if ALLOWED_UNCLOSED.iter().any(|&at| at == last_tag_name_low) {\n+            if ALLOWED_UNCLOSED.contains(&last_tag_name_low.as_str()) {\n                 continue;\n             }\n             // `tags` is used as a queue, meaning that everything after `pos` is included inside it.\n@@ -207,7 +207,7 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n \n             for (tag, range) in tags.iter().filter(|(t, _)| {\n                 let t = t.to_lowercase();\n-                ALLOWED_UNCLOSED.iter().find(|&&at| at == t).is_none()\n+                !ALLOWED_UNCLOSED.contains(&t.as_str())\n             }) {\n                 report_diag(&format!(\"unclosed HTML tag `{}`\", tag), range);\n             }"}]}