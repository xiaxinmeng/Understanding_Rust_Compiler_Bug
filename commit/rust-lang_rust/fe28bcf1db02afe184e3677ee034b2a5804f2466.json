{"sha": "fe28bcf1db02afe184e3677ee034b2a5804f2466", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMjhiY2YxZGIwMmFmZTE4NGUzNjc3ZWUwMzRiMmE1ODA0ZjI0NjY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-08-08T11:31:42Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-08-14T08:37:54Z"}, "message": "Check error-patterns on UI tests. Fixes #52531.\n\nPreviously, even if no expected errors were supplied, if a test execution failed\nthen supplied error patterns would not be checked. This commit modifies the\nconditional that determines whether error patterns or expected errors are checked\nto remedy this.\n\nFurther, this commit modifies the error pattern checking logic so that each pattern\nis checked against all lines of the string. This is required for UI tests as the\nstderr is in JSON format - all on one line - so in the previous implementation when the\nfirst pattern was found on the first line (which was actually the entire error) then\nno other patterns would be found on subsequent lines (as there weren't any).", "tree": {"sha": "8e9f570b434a3581ac054af973f26b526d7bdf28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e9f570b434a3581ac054af973f26b526d7bdf28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe28bcf1db02afe184e3677ee034b2a5804f2466", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAltylOIACgkQAXYLT59T\n8VRvMhAAwGhFHDds1KmdSGFqHRRU5FVYXyrTaU5/aT4obTmgwIny7Inm56bicbOV\n9LS7hDkgbEqEO+PrjggbIVrS/eXBz7DHD0LkzmBCEyKVx92ADS9W2vX7Y7EBNmJz\neFp5Ju9eX9Xp3gd6Mwjm8A+tF8mc+KP1z8hC2xRpY4fUuEaGq/9eTebA+54U0RPx\n98g9zZ8UiptyGOB2Q5vB4xmc6RnkTsWJDNzrpgpj5jrmWY52rB+jADgVHc53QqRn\nEvfdfz9HufV8xizsF0VmscafFtz5LP15BVIGDlIXQHLDfqqpcsdiAVXMqgBIanye\nGmn37j7suU2JTORx+3ienY9G+h3X5kY0+pGK1RQx8YQ7I2ZpMjEgyEarwHdTfpm8\ngoGKH0Fjm80G8zwzOYlimppWOZQMQX1SO/lG69B9SxqKWyMnTG2/gb0/hXdQ+HkJ\nZcvRwmeFm5P6XgtGg0zm5Jh2g+LP1V5o3ZZlbqSiFe+dsNfqukl3gIT8GPkWJOAZ\nJz4zY+UCMEj6uAFcHLnO41j29U04jh3M05c8MP+0evznevOxaujg4xPotpneiDZl\nhtnOCTBqpcCZG/fNGSkpTpXAwhASL39xRmjuJbQAbKiBLxcuDRE/TfNP3eYZKJBL\nCn723Q3VVeUso8tvEGZFId1loCmdt/9ZKCalg9nQm2OEIG/FFQk=\n=6+su\n-----END PGP SIGNATURE-----", "payload": "tree 8e9f570b434a3581ac054af973f26b526d7bdf28\nparent a8763b5370ed044b6e703981217f074e8ddf1e7c\nauthor David Wood <david@davidtw.co> 1533727902 +0200\ncommitter David Wood <david@davidtw.co> 1534235874 +0200\n\nCheck error-patterns on UI tests. Fixes #52531.\n\nPreviously, even if no expected errors were supplied, if a test execution failed\nthen supplied error patterns would not be checked. This commit modifies the\nconditional that determines whether error patterns or expected errors are checked\nto remedy this.\n\nFurther, this commit modifies the error pattern checking logic so that each pattern\nis checked against all lines of the string. This is required for UI tests as the\nstderr is in JSON format - all on one line - so in the previous implementation when the\nfirst pattern was found on the first line (which was actually the entire error) then\nno other patterns would be found on subsequent lines (as there weren't any).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe28bcf1db02afe184e3677ee034b2a5804f2466", "html_url": "https://github.com/rust-lang/rust/commit/fe28bcf1db02afe184e3677ee034b2a5804f2466", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe28bcf1db02afe184e3677ee034b2a5804f2466/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8763b5370ed044b6e703981217f074e8ddf1e7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8763b5370ed044b6e703981217f074e8ddf1e7c", "html_url": "https://github.com/rust-lang/rust/commit/a8763b5370ed044b6e703981217f074e8ddf1e7c"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "6679ec79c1dd6d13804a6ef810871998ea8b47df", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe28bcf1db02afe184e3677ee034b2a5804f2466/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe28bcf1db02afe184e3677ee034b2a5804f2466/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=fe28bcf1db02afe184e3677ee034b2a5804f2466", "patch": "@@ -96,7 +96,7 @@ impl fmt::Display for Mode {\n     }\n }\n \n-#[derive(Clone, PartialEq)]\n+#[derive(Clone, Debug, PartialEq)]\n pub enum CompareMode {\n     Nll,\n     Polonius,"}, {"sha": "56cf553dc82086ae3cdc1e738bb97c777066ff8a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fe28bcf1db02afe184e3677ee034b2a5804f2466/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe28bcf1db02afe184e3677ee034b2a5804f2466/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=fe28bcf1db02afe184e3677ee034b2a5804f2466", "patch": "@@ -1126,6 +1126,7 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn check_error_patterns(&self, output_to_check: &str, proc_res: &ProcRes) {\n+        debug!(\"check_error_patterns\");\n         if self.props.error_patterns.is_empty() {\n             if self.props.compile_pass {\n                 return;\n@@ -1136,34 +1137,29 @@ impl<'test> TestCx<'test> {\n                 ));\n             }\n         }\n-        let mut next_err_idx = 0;\n-        let mut next_err_pat = self.props.error_patterns[next_err_idx].trim();\n-        let mut done = false;\n-        for line in output_to_check.lines() {\n-            if line.contains(next_err_pat) {\n-                debug!(\"found error pattern {}\", next_err_pat);\n-                next_err_idx += 1;\n-                if next_err_idx == self.props.error_patterns.len() {\n-                    debug!(\"found all error patterns\");\n-                    done = true;\n-                    break;\n-                }\n-                next_err_pat = self.props.error_patterns[next_err_idx].trim();\n+\n+        let mut missing_patterns: Vec<String> = Vec::new();\n+\n+        for pattern in &self.props.error_patterns {\n+            if output_to_check.contains(pattern.trim()) {\n+                debug!(\"found error pattern {}\", pattern);\n+            } else {\n+                missing_patterns.push(pattern.to_string());\n             }\n         }\n-        if done {\n+\n+        if missing_patterns.is_empty() {\n             return;\n         }\n \n-        let missing_patterns = &self.props.error_patterns[next_err_idx..];\n         if missing_patterns.len() == 1 {\n             self.fatal_proc_rec(\n                 &format!(\"error pattern '{}' not found!\", missing_patterns[0]),\n                 proc_res,\n             );\n         } else {\n             for pattern in missing_patterns {\n-                self.error(&format!(\"error pattern '{}' not found!\", *pattern));\n+                self.error(&format!(\"error pattern '{}' not found!\", pattern));\n             }\n             self.fatal_proc_rec(\"multiple error patterns not found\", proc_res);\n         }\n@@ -1186,6 +1182,8 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn check_expected_errors(&self, expected_errors: Vec<errors::Error>, proc_res: &ProcRes) {\n+        debug!(\"check_expected_errors: expected_errors={:?} proc_res.status={:?}\",\n+               expected_errors, proc_res.status);\n         if proc_res.status.success()\n             && expected_errors\n                 .iter()\n@@ -2668,12 +2666,17 @@ impl<'test> TestCx<'test> {\n                 self.fatal_proc_rec(\"test run failed!\", &proc_res);\n             }\n         }\n+\n+        debug!(\"run_ui_test: explicit={:?} config.compare_mode={:?} expected_errors={:?} \\\n+               proc_res.status={:?} props.error_patterns={:?}\",\n+               explicit, self.config.compare_mode, expected_errors, proc_res.status,\n+               self.props.error_patterns);\n         if !explicit && self.config.compare_mode.is_none() {\n-            if !expected_errors.is_empty() || !proc_res.status.success() {\n-                // \"// error-pattern\" comments\n-                self.check_expected_errors(expected_errors, &proc_res);\n-            } else if !self.props.error_patterns.is_empty() || !proc_res.status.success() {\n+            if !expected_errors.is_empty() && !proc_res.status.success() {\n                 // \"//~ERROR comments\"\n+                self.check_expected_errors(expected_errors, &proc_res);\n+            } else if !self.props.error_patterns.is_empty() && !proc_res.status.success() {\n+                // \"// error-pattern\" comments\n                 self.check_error_patterns(&proc_res.stderr, &proc_res);\n             }\n         }"}]}