{"sha": "445841cda32cf9fb95528cfe8d126d0a0e0cb608", "node_id": "C_kwDOAAsO6NoAKDQ0NTg0MWNkYTMyY2Y5ZmI5NTUyOGNmZThkMTI2ZDBhMGUwY2I2MDg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-27T10:21:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-13T17:18:23Z"}, "message": "Compute explicit MIR params on THIR.", "tree": {"sha": "dc88d651294afb045b86981bbfc6300f7f2a7c57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc88d651294afb045b86981bbfc6300f7f2a7c57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/445841cda32cf9fb95528cfe8d126d0a0e0cb608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/445841cda32cf9fb95528cfe8d126d0a0e0cb608", "html_url": "https://github.com/rust-lang/rust/commit/445841cda32cf9fb95528cfe8d126d0a0e0cb608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/445841cda32cf9fb95528cfe8d126d0a0e0cb608/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f76594a0bc0be37d92d9182aa1e7eb1f9e25d54c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f76594a0bc0be37d92d9182aa1e7eb1f9e25d54c", "html_url": "https://github.com/rust-lang/rust/commit/f76594a0bc0be37d92d9182aa1e7eb1f9e25d54c"}], "stats": {"total": 141, "additions": 86, "deletions": 55}, "files": [{"sha": "0214610f687ed7ef6932e07be6c0db5af01e7df1", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/445841cda32cf9fb95528cfe8d126d0a0e0cb608/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445841cda32cf9fb95528cfe8d126d0a0e0cb608/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=445841cda32cf9fb95528cfe8d126d0a0e0cb608", "patch": "@@ -78,6 +78,22 @@ thir_with_elements! {\n     blocks: BlockId => Block => \"b{}\",\n     exprs: ExprId => Expr<'tcx> => \"e{}\",\n     stmts: StmtId => Stmt<'tcx> => \"s{}\",\n+    params: ParamId => Param<'tcx> => \"p{}\",\n+}\n+\n+/// Description of a type-checked function parameter.\n+#[derive(Clone, Debug, HashStable)]\n+pub struct Param<'tcx> {\n+    /// The pattern that appears in the parameter list.\n+    pub pat: Box<Pat<'tcx>>,\n+    /// The possibly inferred type.\n+    pub ty: Ty<'tcx>,\n+    /// Span of the explicitly provided type, or None if inferred for closures.\n+    pub ty_span: Option<Span>,\n+    /// Whether this param is `self`, and how it is bound.\n+    pub self_kind: Option<hir::ImplicitSelfKind>,\n+    /// HirId for lints.\n+    pub hir_id: hir::HirId,\n }\n \n #[derive(Copy, Clone, Debug, HashStable)]\n@@ -548,6 +564,15 @@ impl<'tcx> Pat<'tcx> {\n     pub fn wildcard_from_ty(ty: Ty<'tcx>) -> Self {\n         Pat { ty, span: DUMMY_SP, kind: PatKind::Wild }\n     }\n+\n+    pub fn simple_ident(&self) -> Option<Symbol> {\n+        match self.kind {\n+            PatKind::Binding { name, mode: BindingMode::ByValue, subpattern: None, .. } => {\n+                Some(name)\n+            }\n+            _ => None,\n+        }\n+    }\n }\n \n #[derive(Clone, Debug, HashStable)]"}, {"sha": "b1cb9b9f084a46790e7dc8c74d2c5cc25b6183de", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/445841cda32cf9fb95528cfe8d126d0a0e0cb608/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445841cda32cf9fb95528cfe8d126d0a0e0cb608/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=445841cda32cf9fb95528cfe8d126d0a0e0cb608", "patch": "@@ -568,7 +568,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             _ => {\n                 let place_builder = unpack!(block = self.as_place_builder(block, initializer));\n-                self.place_into_pattern(block, irrefutable_pat, place_builder, true)\n+                self.place_into_pattern(block, &irrefutable_pat, place_builder, true)\n             }\n         }\n     }"}, {"sha": "d44263b4e1bd52a3f0ac7cdca8bcf4db3967040a", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 12, "deletions": 53, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/445841cda32cf9fb95528cfe8d126d0a0e0cb608/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445841cda32cf9fb95528cfe8d126d0a0e0cb608/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=445841cda32cf9fb95528cfe8d126d0a0e0cb608", "patch": "@@ -1,15 +1,13 @@\n pub(crate) use crate::build::expr::as_constant::lit_to_mir_constant;\n use crate::build::expr::as_place::PlaceBuilder;\n use crate::build::scope::DropKind;\n-use crate::thir::pattern::pat_from_hir;\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sorted_map::SortedIndexMultiMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::lang_items::LangItem;\n use rustc_hir::{GeneratorKind, ImplicitSelfKind, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n@@ -18,8 +16,7 @@ use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::*;\n-use rustc_middle::thir::{BindingMode, Expr, ExprId, LintLevel, LocalVarId, PatKind, Thir};\n-use rustc_middle::ty::subst::Subst;\n+use rustc_middle::thir::{BindingMode, Expr, ExprId, LintLevel, LocalVarId, Param, PatKind, Thir};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable, TypeckResults};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -449,10 +446,10 @@ macro_rules! unpack {\n ///////////////////////////////////////////////////////////////////////////\n /// the main entry point for building MIR for a function\n \n-struct ArgInfo<'tcx>(\n+struct ArgInfo<'thir, 'tcx>(\n     Ty<'tcx>,\n     Option<Span>,\n-    Option<&'tcx hir::Param<'tcx>>,\n+    Option<&'thir Param<'tcx>>,\n     Option<ImplicitSelfKind>,\n );\n \n@@ -510,38 +507,8 @@ fn construct_fn<'tcx>(\n         _ => vec![],\n     };\n \n-    let explicit_arguments = body.params.iter().enumerate().map(|(index, arg)| {\n-        let owner_id = tcx.hir().body_owner(body_id);\n-        let opt_ty_info;\n-        let self_arg;\n-        if let Some(ref fn_decl) = tcx.hir().fn_decl_by_hir_id(owner_id) {\n-            opt_ty_info = fn_decl\n-                .inputs\n-                .get(index)\n-                // Make sure that inferred closure args have no type span\n-                .and_then(|ty| if arg.pat.span != ty.span { Some(ty.span) } else { None });\n-            self_arg = if index == 0 && fn_decl.implicit_self.has_implicit_self() {\n-                Some(fn_decl.implicit_self)\n-            } else {\n-                None\n-            };\n-        } else {\n-            opt_ty_info = None;\n-            self_arg = None;\n-        }\n-\n-        // C-variadic fns also have a `VaList` input that's not listed in `fn_sig`\n-        // (as it's created inside the body itself, not passed in from outside).\n-        let ty = if fn_sig.c_variadic && index == fn_sig.inputs().len() {\n-            let va_list_did = tcx.require_lang_item(LangItem::VaList, Some(arg.span));\n-\n-            tcx.bound_type_of(va_list_did).subst(tcx, &[tcx.lifetimes.re_erased.into()])\n-        } else {\n-            fn_sig.inputs()[index]\n-        };\n-\n-        ArgInfo(ty, opt_ty_info, Some(&arg), self_arg)\n-    });\n+    let explicit_arguments =\n+        thir.params.iter().map(|arg| ArgInfo(arg.ty, arg.ty_span, Some(&arg), arg.self_kind));\n \n     let arguments = implicit_argument.into_iter().chain(explicit_arguments);\n \n@@ -852,7 +819,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         mut block: BasicBlock,\n         fn_def_id: LocalDefId,\n-        arguments: &[ArgInfo<'tcx>],\n+        arguments: &[ArgInfo<'_, 'tcx>],\n         argument_scope: region::Scope,\n         expr: &Expr<'tcx>,\n     ) -> BlockAnd<()> {\n@@ -863,9 +830,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let arg_local = self.local_decls.push(LocalDecl::with_source_info(ty, source_info));\n \n             // If this is a simple binding pattern, give debuginfo a nice name.\n-            if let Some(arg) = arg_opt && let Some(ident) = arg.pat.simple_ident() {\n+            if let Some(arg) = arg_opt && let Some(name) = arg.pat.simple_ident() {\n                 self.var_debug_info.push(VarDebugInfo {\n-                    name: ident.name,\n+                    name,\n                     source_info,\n                     value: VarDebugInfoContents::Place(arg_local.into()),\n                 });\n@@ -955,15 +922,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let Some(arg) = arg_opt else {\n                 continue;\n             };\n-            let pat = match tcx.hir().get(arg.pat.hir_id) {\n-                Node::Pat(pat) => pat,\n-                node => bug!(\"pattern became {:?}\", node),\n-            };\n-            let pattern = pat_from_hir(tcx, self.param_env, self.typeck_results, pat);\n             let original_source_scope = self.source_scope;\n-            let span = pattern.span;\n+            let span = arg.pat.span;\n             self.set_correct_source_scope_for_arg(arg.hir_id, original_source_scope, span);\n-            match pattern.kind {\n+            match arg.pat.kind {\n                 // Don't introduce extra copies for simple bindings\n                 PatKind::Binding {\n                     mutability,\n@@ -995,15 +957,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     scope = self.declare_bindings(\n                         scope,\n                         expr.span,\n-                        &pattern,\n+                        &arg.pat,\n                         matches::ArmHasGuard(false),\n                         Some((Some(&place), span)),\n                     );\n                     let place_builder = PlaceBuilder::from(local);\n-                    unpack!(\n-                        block =\n-                            self.place_into_pattern(block, pattern.as_ref(), place_builder, false)\n-                    );\n+                    unpack!(block = self.place_into_pattern(block, &arg.pat, place_builder, false));\n                 }\n             }\n             self.source_scope = original_source_scope;"}, {"sha": "8526af75576f74464d93e4c339c1d7b32e1d2794", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/445841cda32cf9fb95528cfe8d126d0a0e0cb608/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445841cda32cf9fb95528cfe8d126d0a0e0cb608/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=445841cda32cf9fb95528cfe8d126d0a0e0cb608", "patch": "@@ -9,11 +9,12 @@ use rustc_data_structures::steal::Steal;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::HirId;\n use rustc_hir::Node;\n use rustc_middle::middle::region;\n use rustc_middle::thir::*;\n-use rustc_middle::ty::{self, RvalueScopes, TyCtxt};\n+use rustc_middle::ty::{self, RvalueScopes, Subst, TyCtxt};\n use rustc_span::Span;\n \n pub(crate) fn thir_body<'tcx>(\n@@ -27,6 +28,13 @@ pub(crate) fn thir_body<'tcx>(\n         return Err(reported);\n     }\n     let expr = cx.mirror_expr(&body.value);\n+\n+    let owner_id = hir.local_def_id_to_hir_id(owner_def.did);\n+    if let Some(ref fn_decl) = hir.fn_decl_by_hir_id(owner_id) {\n+        let explicit_params = cx.explicit_params(owner_id, fn_decl, body);\n+        cx.thir.params = explicit_params.collect();\n+    }\n+\n     Ok((tcx.alloc_steal_thir(cx.thir), expr))\n }\n \n@@ -85,6 +93,44 @@ impl<'tcx> Cx<'tcx> {\n         };\n         pat_from_hir(self.tcx, self.param_env, self.typeck_results(), p)\n     }\n+\n+    fn explicit_params<'a>(\n+        &'a mut self,\n+        owner_id: HirId,\n+        fn_decl: &'tcx hir::FnDecl<'tcx>,\n+        body: &'tcx hir::Body<'tcx>,\n+    ) -> impl Iterator<Item = Param<'tcx>> + 'a {\n+        let fn_sig = self.typeck_results.liberated_fn_sigs()[owner_id];\n+\n+        body.params.iter().enumerate().map(move |(index, param)| {\n+            let ty_span = fn_decl\n+                .inputs\n+                .get(index)\n+                // Make sure that inferred closure args have no type span\n+                .and_then(|ty| if param.pat.span != ty.span { Some(ty.span) } else { None });\n+\n+            let self_kind = if index == 0 && fn_decl.implicit_self.has_implicit_self() {\n+                Some(fn_decl.implicit_self)\n+            } else {\n+                None\n+            };\n+\n+            // C-variadic fns also have a `VaList` input that's not listed in `fn_sig`\n+            // (as it's created inside the body itself, not passed in from outside).\n+            let ty = if fn_decl.c_variadic && index == fn_decl.inputs.len() {\n+                let va_list_did = self.tcx.require_lang_item(LangItem::VaList, Some(param.span));\n+\n+                self.tcx\n+                    .bound_type_of(va_list_did)\n+                    .subst(self.tcx, &[self.tcx.lifetimes.re_erased.into()])\n+            } else {\n+                fn_sig.inputs()[index]\n+            };\n+\n+            let pat = self.pattern_from_hir(param.pat);\n+            Param { pat, ty, ty_span, self_kind, hir_id: param.hir_id }\n+        })\n+    }\n }\n \n impl<'tcx> UserAnnotatedTyHelpers<'tcx> for Cx<'tcx> {"}, {"sha": "5fcdfca18d69eb5a16946593be7fcf53a7a0e443", "filename": "src/test/ui/thir-tree.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/445841cda32cf9fb95528cfe8d126d0a0e0cb608/src%2Ftest%2Fui%2Fthir-tree.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/445841cda32cf9fb95528cfe8d126d0a0e0cb608/src%2Ftest%2Fui%2Fthir-tree.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthir-tree.stdout?ref=445841cda32cf9fb95528cfe8d126d0a0e0cb608", "patch": "@@ -54,5 +54,6 @@ Thir {\n         },\n     ],\n     stmts: [],\n+    params: [],\n }\n "}]}