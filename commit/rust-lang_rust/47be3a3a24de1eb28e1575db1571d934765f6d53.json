{"sha": "47be3a3a24de1eb28e1575db1571d934765f6d53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YmUzYTNhMjRkZTFlYjI4ZTE1NzVkYjE1NzFkOTM0NzY1ZjZkNTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-15T10:38:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-15T21:00:05Z"}, "message": "renames", "tree": {"sha": "6653f5206a482f013fe0a6d4bb6d6dcc259f16fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6653f5206a482f013fe0a6d4bb6d6dcc259f16fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47be3a3a24de1eb28e1575db1571d934765f6d53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47be3a3a24de1eb28e1575db1571d934765f6d53", "html_url": "https://github.com/rust-lang/rust/commit/47be3a3a24de1eb28e1575db1571d934765f6d53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47be3a3a24de1eb28e1575db1571d934765f6d53/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c737255ff876fc61f8dc8a7d33252476a4b4c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c737255ff876fc61f8dc8a7d33252476a4b4c8d", "html_url": "https://github.com/rust-lang/rust/commit/8c737255ff876fc61f8dc8a7d33252476a4b4c8d"}], "stats": {"total": 96, "additions": 49, "deletions": 47}, "files": [{"sha": "3198272b7d645b6c09de0335330e3136f6cfb99d", "filename": "crates/libanalysis/src/db/mod.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/47be3a3a24de1eb28e1575db1571d934765f6d53/crates%2Flibanalysis%2Fsrc%2Fdb%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47be3a3a24de1eb28e1575db1571d934765f6d53/crates%2Flibanalysis%2Fsrc%2Fdb%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fdb%2Fmod.rs?ref=47be3a3a24de1eb28e1575db1571d934765f6d53", "patch": "@@ -120,38 +120,36 @@ impl<'a> QueryCtx<'a> {\n \n fn query_config() -> salsa::QueryConfig<State, Data> {\n     let mut res = salsa::QueryConfig::new();\n-    let queries: Vec<SalsaGroundQuery> = vec![\n+    let queries: Vec<BoxedGroundQuery> = vec![\n         queries::FILE_TEXT.into(),\n         queries::FILE_SET.into(),\n     ];\n     for q in queries {\n         res = res.with_ground_query(q.query_type, q.f)\n     }\n-    let queries: Vec<SalsaQuery> = vec![\n+    let mut queries: Vec<BoxedQuery> = vec![\n         queries::FILE_SYNTAX.into(),\n-        ::module_map_db::MODULE_DESCR.into(),\n-        ::module_map_db::RESOLVE_SUBMODULE.into(),\n-        ::module_map_db::PARENT_MODULE.into(),\n     ];\n+    ::module_map_db::queries(&mut queries);\n     for q in queries {\n         res = res.with_query(q.query_type, q.f);\n     }\n     res\n }\n \n-struct SalsaGroundQuery {\n+struct BoxedGroundQuery {\n     query_type: salsa::QueryTypeId,\n     f: Box<Fn(&State, &Data) -> (Data, salsa::OutputFingerprint) + Send + Sync + 'static>,\n }\n \n-impl<T, R> From<GroundQuery<T, R>> for SalsaGroundQuery\n+impl<T, R> From<GroundQuery<T, R>> for BoxedGroundQuery\n where\n     T: Send + Sync + 'static,\n     R: Send + Sync + 'static,\n {\n-    fn from(q: GroundQuery<T, R>) -> SalsaGroundQuery\n+    fn from(q: GroundQuery<T, R>) -> BoxedGroundQuery\n     {\n-        SalsaGroundQuery {\n+        BoxedGroundQuery {\n             query_type: salsa::QueryTypeId(q.id),\n             f: Box::new(move |state, data| {\n                 let data: &T = data.downcast_ref().unwrap();\n@@ -163,19 +161,19 @@ where\n     }\n }\n \n-struct SalsaQuery {\n+pub(crate) struct BoxedQuery {\n     query_type: salsa::QueryTypeId,\n     f: Box<Fn(&salsa::QueryCtx<State, Data>, &Data) -> (Data, salsa::OutputFingerprint) + Send + Sync + 'static>,\n }\n \n-impl<T, R> From<Query<T, R>> for SalsaQuery\n+impl<T, R> From<Query<T, R>> for BoxedQuery\n where\n     T: Hash + Send + Sync + 'static,\n     R: Hash + Send + Sync + 'static,\n {\n-    fn from(q: Query<T, R>) -> SalsaQuery\n+    fn from(q: Query<T, R>) -> BoxedQuery\n     {\n-        SalsaQuery {\n+        BoxedQuery {\n             query_type: salsa::QueryTypeId(q.id),\n             f: Box::new(move |ctx, data| {\n                 let ctx = QueryCtx { inner: ctx };"}, {"sha": "fb298a315d8e6bee61e752e23476aa0101be156d", "filename": "crates/libanalysis/src/module_map_db/descr.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/47be3a3a24de1eb28e1575db1571d934765f6d53/crates%2Flibanalysis%2Fsrc%2Fmodule_map_db%2Fdescr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47be3a3a24de1eb28e1575db1571d934765f6d53/crates%2Flibanalysis%2Fsrc%2Fmodule_map_db%2Fdescr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fmodule_map_db%2Fdescr.rs?ref=47be3a3a24de1eb28e1575db1571d934765f6d53", "patch": "@@ -0,0 +1,29 @@\n+use libsyntax2::{\n+    SmolStr,\n+    ast::{self, NameOwner},\n+};\n+\n+#[derive(Debug, Hash)]\n+pub struct ModuleDescr {\n+    pub submodules: Vec<Submodule>\n+}\n+\n+impl ModuleDescr {\n+    pub fn new(root: ast::Root) -> ModuleDescr {\n+        let submodules = root\n+            .modules()\n+            .filter_map(|module| {\n+                let name = module.name()?.text();\n+                if !module.has_semi() {\n+                    return None;\n+                }\n+                Some(Submodule { name })\n+            }).collect();\n+\n+        ModuleDescr { submodules } }\n+}\n+\n+#[derive(Clone, Hash, PartialEq, Eq, Debug)]\n+pub struct Submodule {\n+    pub name: SmolStr,\n+}"}, {"sha": "777f7a38ad4a142ce8531c50f035982755f607a3", "filename": "crates/libanalysis/src/module_map_db/mod.rs", "status": "renamed", "additions": 9, "deletions": 34, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/47be3a3a24de1eb28e1575db1571d934765f6d53/crates%2Flibanalysis%2Fsrc%2Fmodule_map_db%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47be3a3a24de1eb28e1575db1571d934765f6d53/crates%2Flibanalysis%2Fsrc%2Fmodule_map_db%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fmodule_map_db%2Fmod.rs?ref=47be3a3a24de1eb28e1575db1571d934765f6d53", "patch": "@@ -1,12 +1,20 @@\n+mod descr;\n+\n use std::sync::Arc;\n use {\n     FileId,\n     db::{\n-        Query, QueryCtx\n+        BoxedQuery, Query, QueryCtx\n     },\n     module_map::resolve_submodule,\n };\n \n+pub(crate) fn queries(acc: &mut Vec<BoxedQuery>) {\n+    acc.push(MODULE_DESCR.into());\n+    acc.push(RESOLVE_SUBMODULE.into());\n+    acc.push(PARENT_MODULE.into());\n+}\n+\n impl<'a> QueryCtx<'a> {\n     fn module_descr(&self, file_id: FileId) -> Arc<descr::ModuleDescr> {\n         self.get(MODULE_DESCR, file_id)\n@@ -52,39 +60,6 @@ pub(crate) const PARENT_MODULE: Query<FileId, Vec<FileId>> = Query {\n     }\n };\n \n-mod descr {\n-    use libsyntax2::{\n-        SmolStr,\n-        ast::{self, NameOwner},\n-    };\n-\n-    #[derive(Debug, Hash)]\n-    pub struct ModuleDescr {\n-        pub submodules: Vec<Submodule>\n-    }\n-\n-    impl ModuleDescr {\n-        pub fn new(root: ast::Root) -> ModuleDescr {\n-            let submodules = root\n-                .modules()\n-                .filter_map(|module| {\n-                    let name = module.name()?.text();\n-                    if !module.has_semi() {\n-                        return None;\n-                    }\n-                    Some(Submodule { name })\n-                }).collect();\n-\n-            ModuleDescr { submodules } }\n-    }\n-\n-    #[derive(Clone, Hash, PartialEq, Eq, Debug)]\n-    pub struct Submodule {\n-        pub name: SmolStr,\n-    }\n-\n-}\n-\n #[cfg(test)]\n mod tests {\n     use std::collections::HashMap;", "previous_filename": "crates/libanalysis/src/module_map_db.rs"}]}