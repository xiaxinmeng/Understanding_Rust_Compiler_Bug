{"sha": "dea667725137368dd9c928bae3c091b9ccf42e67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYTY2NzcyNTEzNzM2OGRkOWM5MjhiYWUzYzA5MWI5Y2NmNDJlNjc=", "commit": {"author": {"name": "Olivier Saut", "email": "osaut@airpost.net", "date": "2013-05-26T17:10:16Z"}, "committer": {"name": "Olivier Saut", "email": "osaut@airpost.net", "date": "2013-05-26T17:10:16Z"}, "message": "Add a short section on ARC", "tree": {"sha": "ace3126634eb7ac8a7f1ede2d1c054600c73d3d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ace3126634eb7ac8a7f1ede2d1c054600c73d3d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dea667725137368dd9c928bae3c091b9ccf42e67", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dea667725137368dd9c928bae3c091b9ccf42e67", "html_url": "https://github.com/rust-lang/rust/commit/dea667725137368dd9c928bae3c091b9ccf42e67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dea667725137368dd9c928bae3c091b9ccf42e67/comments", "author": null, "committer": null, "parents": [{"sha": "510d0f221c5a9ca7671149fe7e7bb802592edc06", "url": "https://api.github.com/repos/rust-lang/rust/commits/510d0f221c5a9ca7671149fe7e7bb802592edc06", "html_url": "https://github.com/rust-lang/rust/commit/510d0f221c5a9ca7671149fe7e7bb802592edc06"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "8c574e539febfbe736facfcfd0084257943cba36", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/dea667725137368dd9c928bae3c091b9ccf42e67/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/dea667725137368dd9c928bae3c091b9ccf42e67/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=dea667725137368dd9c928bae3c091b9ccf42e67", "patch": "@@ -284,7 +284,7 @@ let result = ports.foldl(0, |accum, port| *accum + port.recv() );\n # fn some_expensive_computation(_i: uint) -> int { 42 }\n ~~~\n \n-## Futures\n+## Backgrounding computations: Futures\n With `extra::future`, rust has a mechanism for requesting a computation and getting the result\n later.\n \n@@ -329,6 +329,77 @@ fn main() {\n }\n ~~~\n \n+## Sharing immutable data without copy: ARC\n+\n+To share immutable data between tasks, a first approach would be to only use pipes as we have seen\n+previously. A copy of the data to share would then be made for each task. In some cases, this would\n+add up to a significant amount of wasted memory and would require copying the same data more than\n+necessary.\n+\n+To tackle this issue, one can use an Atomically Reference Counted wrapper (`ARC`) as implemented in\n+the `extra` library of Rust. With an ARC, the data will no longer be copied for each task. The ARC\n+acts as a reference to the shared data and only this reference is shared and cloned.\n+\n+Here is a small example showing how to use ARCs. We wish to run concurrently several computations on\n+a single large vector of floats. Each task needs the full vector to perform its duty.\n+~~~\n+use extra::arc::ARC;\n+\n+fn pnorm(nums: &~[float], p: uint) -> float {\n+    (vec::foldl(0.0, *nums, |a,b| a+(*b).pow(p as float) )).pow(1f / (p as float))\n+}\n+\n+fn main() {\n+    let numbers=vec::from_fn(1000000, |_| rand::random::<float>());\n+    println(fmt!(\"Inf-norm = %?\",  numbers.max()));\n+\n+    let numbers_arc = ARC(numbers);\n+\n+    for uint::range(1,10) |num| {\n+        let (port, chan)  = stream();\n+        chan.send(numbers_arc.clone());\n+\n+        do spawn {\n+            let local_arc : ARC<~[float]> = port.recv();\n+            let task_numbers = local_arc.get();\n+            println(fmt!(\"%u-norm = %?\", num, pnorm(task_numbers, num)));\n+        }\n+    }\n+}\n+~~~\n+\n+The function `pnorm` performs a simple computation on the vector (it computes the sum of its items\n+at the power given as argument and takes the inverse power of this value). The ARC on the vector is\n+created by the line\n+~~~\n+# use extra::arc::ARC;\n+# let numbers=vec::from_fn(1000000, |_| rand::random::<float>());\n+let numbers_arc=ARC(numbers);\n+~~~\n+and a clone of it is sent to each task\n+~~~\n+# use extra::arc::ARC;\n+# let numbers=vec::from_fn(1000000, |_| rand::random::<float>());\n+# let numbers_arc = ARC(numbers);\n+# let (port, chan)  = stream();\n+chan.send(numbers_arc.clone());\n+~~~\n+copying only the wrapper and not its contents.\n+\n+Each task recovers the underlying data by\n+~~~\n+# use extra::arc::ARC;\n+# let numbers=vec::from_fn(1000000, |_| rand::random::<float>());\n+# let numbers_arc=ARC(numbers);\n+# let (port, chan)  = stream();\n+# chan.send(numbers_arc.clone());\n+# let local_arc : ARC<~[float]> = port.recv();\n+let task_numbers = local_arc.get();\n+~~~\n+and can use it as if it were local.\n+\n+The `arc` module also implements ARCs around mutable data that are not covered here.\n+\n # Handling task failure\n \n Rust has a built-in mechanism for raising exceptions. The `fail!()` macro"}]}