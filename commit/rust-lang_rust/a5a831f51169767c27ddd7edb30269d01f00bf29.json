{"sha": "a5a831f51169767c27ddd7edb30269d01f00bf29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YTgzMWY1MTE2OTc2N2MyN2RkZDdlZGIzMDI2OWQwMWYwMGJmMjk=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-06-17T23:04:25Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-06-24T21:53:29Z"}, "message": "Emit line info for generator variants", "tree": {"sha": "4d7f7b8306e7800c4d00e4c418393284d1aa3410", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d7f7b8306e7800c4d00e4c418393284d1aa3410"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5a831f51169767c27ddd7edb30269d01f00bf29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5a831f51169767c27ddd7edb30269d01f00bf29", "html_url": "https://github.com/rust-lang/rust/commit/a5a831f51169767c27ddd7edb30269d01f00bf29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5a831f51169767c27ddd7edb30269d01f00bf29/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8ed1b03c202d77248eb0d335062f46026fc29c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ed1b03c202d77248eb0d335062f46026fc29c4", "html_url": "https://github.com/rust-lang/rust/commit/d8ed1b03c202d77248eb0d335062f46026fc29c4"}], "stats": {"total": 96, "additions": 83, "deletions": 13}, "files": [{"sha": "ee8ab7c0e4df3d541a2c4581bc58d2cf7f38542c", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 56, "deletions": 10, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a5a831f51169767c27ddd7edb30269d01f00bf29/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5a831f51169767c27ddd7edb30269d01f00bf29/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=a5a831f51169767c27ddd7edb30269d01f00bf29", "patch": "@@ -392,6 +392,7 @@ fn vec_slice_metadata(\n             align: pointer_align,\n             flags: DIFlags::FlagZero,\n             discriminant: None,\n+            source_info: None,\n         },\n         MemberDescription {\n             name: \"length\".to_owned(),\n@@ -401,6 +402,7 @@ fn vec_slice_metadata(\n             align: usize_align,\n             flags: DIFlags::FlagZero,\n             discriminant: None,\n+            source_info: None,\n         },\n     ];\n \n@@ -508,6 +510,7 @@ fn trait_pointer_metadata(\n             align: data_ptr_field.align.abi,\n             flags: DIFlags::FlagArtificial,\n             discriminant: None,\n+            source_info: None,\n         },\n         MemberDescription {\n             name: \"vtable\".to_owned(),\n@@ -517,6 +520,7 @@ fn trait_pointer_metadata(\n             align: vtable_field.align.abi,\n             flags: DIFlags::FlagArtificial,\n             discriminant: None,\n+            source_info: None,\n         },\n     ];\n \n@@ -1026,6 +1030,12 @@ impl MetadataCreationResult<'ll> {\n     }\n }\n \n+#[derive(Debug)]\n+struct SourceInfo<'ll> {\n+    file: &'ll DIFile,\n+    line: u32,\n+}\n+\n /// Description of a type member, which can either be a regular field (as in\n /// structs or tuples) or an enum variant.\n #[derive(Debug)]\n@@ -1037,6 +1047,7 @@ struct MemberDescription<'ll> {\n     align: Align,\n     flags: DIFlags,\n     discriminant: Option<u64>,\n+    source_info: Option<SourceInfo<'ll>>,\n }\n \n impl<'ll> MemberDescription<'ll> {\n@@ -1045,14 +1056,18 @@ impl<'ll> MemberDescription<'ll> {\n         cx: &CodegenCx<'ll, '_>,\n         composite_type_metadata: &'ll DIScope,\n     ) -> &'ll DIType {\n+        let (file, line) = self\n+            .source_info\n+            .map(|info| (info.file, info.line))\n+            .unwrap_or_else(|| (unknown_file_metadata(cx), UNKNOWN_LINE_NUMBER));\n         unsafe {\n             llvm::LLVMRustDIBuilderCreateVariantMemberType(\n                 DIB(cx),\n                 composite_type_metadata,\n                 self.name.as_ptr().cast(),\n                 self.name.len(),\n-                unknown_file_metadata(cx),\n-                UNKNOWN_LINE_NUMBER,\n+                file,\n+                line,\n                 self.size.bits(),\n                 self.align.bits() as u32,\n                 self.offset.bits(),\n@@ -1124,6 +1139,7 @@ impl<'tcx> StructMemberDescriptionFactory<'tcx> {\n                     align: field.align.abi,\n                     flags: DIFlags::FlagZero,\n                     discriminant: None,\n+                    source_info: None,\n                 }\n             })\n             .collect()\n@@ -1185,6 +1201,7 @@ impl<'tcx> TupleMemberDescriptionFactory<'tcx> {\n                     align,\n                     flags: DIFlags::FlagZero,\n                     discriminant: None,\n+                    source_info: None,\n                 }\n             })\n             .collect()\n@@ -1244,6 +1261,7 @@ impl<'tcx> UnionMemberDescriptionFactory<'tcx> {\n                     align: field.align.abi,\n                     flags: DIFlags::FlagZero,\n                     discriminant: None,\n+                    source_info: None,\n                 }\n             })\n             .collect()\n@@ -1351,10 +1369,11 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n \n         let variant_info_for = |index: VariantIdx| match self.enum_type.kind {\n             ty::Adt(adt, _) => VariantInfo::Adt(&adt.variants[index]),\n-            ty::Generator(_, substs, _) => {\n+            ty::Generator(def_id, substs, _) => {\n                 let (generator_layout, generator_saved_local_names) =\n                     generator_variant_info_data.as_ref().unwrap();\n                 VariantInfo::Generator {\n+                    def_id,\n                     substs,\n                     generator_layout: *generator_layout,\n                     generator_saved_local_names,\n@@ -1406,6 +1425,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     align: self.layout.align.abi,\n                     flags: DIFlags::FlagZero,\n                     discriminant: None,\n+                    source_info: variant_info.source_info(cx),\n                 }]\n             }\n             Variants::Multiple {\n@@ -1462,6 +1482,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                 self.layout.ty.discriminant_for_variant(cx.tcx, i).unwrap().val\n                                     as u64,\n                             ),\n+                            source_info: variant_info.source_info(cx),\n                         }\n                     })\n                     .collect()\n@@ -1527,7 +1548,8 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         self.layout.fields.offset(tag_field),\n                         self.layout.field(cx, tag_field).size,\n                     );\n-                    variant_info_for(*niche_variants.start()).map_struct_name(|variant_name| {\n+                    let variant_info = variant_info_for(*niche_variants.start());\n+                    variant_info.map_struct_name(|variant_name| {\n                         name.push_str(variant_name);\n                     });\n \n@@ -1540,6 +1562,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         align: variant.align.abi,\n                         flags: DIFlags::FlagZero,\n                         discriminant: None,\n+                        source_info: variant_info.source_info(cx),\n                     }]\n                 } else {\n                     variants\n@@ -1589,6 +1612,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                 align: self.layout.align.abi,\n                                 flags: DIFlags::FlagZero,\n                                 discriminant: niche_value,\n+                                source_info: variant_info.source_info(cx),\n                             }\n                         })\n                         .collect()\n@@ -1631,6 +1655,7 @@ impl VariantMemberDescriptionFactory<'ll, 'tcx> {\n                     align,\n                     flags: DIFlags::FlagZero,\n                     discriminant: None,\n+                    source_info: None,\n                 }\n             })\n             .collect()\n@@ -1651,6 +1676,7 @@ enum EnumTagInfo<'ll> {\n enum VariantInfo<'a, 'tcx> {\n     Adt(&'tcx ty::VariantDef),\n     Generator {\n+        def_id: DefId,\n         substs: SubstsRef<'tcx>,\n         generator_layout: &'tcx GeneratorLayout<'tcx>,\n         generator_saved_local_names: &'a IndexVec<mir::GeneratorSavedLocal, Option<Symbol>>,\n@@ -1699,6 +1725,24 @@ impl<'tcx> VariantInfo<'_, 'tcx> {\n         };\n         field_name.map(|name| name.to_string()).unwrap_or_else(|| format!(\"__{}\", i))\n     }\n+\n+    fn source_info(&self, cx: &CodegenCx<'ll, 'tcx>) -> Option<SourceInfo<'ll>> {\n+        match self {\n+            VariantInfo::Generator { def_id, variant_index, .. } => {\n+                let span =\n+                    cx.tcx.generator_layout(*def_id).variant_source_info[*variant_index].span;\n+                if !span.is_dummy() {\n+                    let loc = cx.lookup_debug_loc(span.lo());\n+                    return Some(SourceInfo {\n+                        file: file_metadata(cx, &loc.file, def_id.krate),\n+                        line: loc.line.unwrap_or(UNKNOWN_LINE_NUMBER),\n+                    });\n+                }\n+            }\n+            _ => {}\n+        }\n+        None\n+    }\n }\n \n /// Returns a tuple of (1) `type_metadata_stub` of the variant, (2) a\n@@ -1778,7 +1822,8 @@ fn prepare_enum_metadata(\n     span: Span,\n     outer_field_tys: Vec<Ty<'tcx>>,\n ) -> RecursiveTypeDescription<'ll, 'tcx> {\n-    let enum_name = compute_debuginfo_type_name(cx.tcx, enum_type, false);\n+    let tcx = cx.tcx;\n+    let enum_name = compute_debuginfo_type_name(tcx, enum_type, false);\n \n     let containing_scope = get_namespace_for_item(cx, enum_def_id);\n     // FIXME: This should emit actual file metadata for the enum, but we\n@@ -1792,7 +1837,7 @@ fn prepare_enum_metadata(\n     let discriminant_type_metadata = |discr: Primitive| {\n         let enumerators_metadata: Vec<_> = match enum_type.kind {\n             ty::Adt(def, _) => def\n-                .discriminants(cx.tcx)\n+                .discriminants(tcx)\n                 .zip(&def.variants)\n                 .map(|((_, discr), v)| {\n                     let name = v.ident.as_str();\n@@ -1815,15 +1860,16 @@ fn prepare_enum_metadata(\n                 .collect(),\n             ty::Generator(_, substs, _) => substs\n                 .as_generator()\n-                .variant_range(enum_def_id, cx.tcx)\n+                .variant_range(enum_def_id, tcx)\n                 .map(|variant_index| {\n+                    debug_assert_eq!(tcx.types.u32, substs.as_generator().discr_ty(tcx));\n                     let name = substs.as_generator().variant_name(variant_index);\n                     unsafe {\n                         Some(llvm::LLVMRustDIBuilderCreateEnumerator(\n                             DIB(cx),\n                             name.as_ptr().cast(),\n                             name.len(),\n-                            // Generators use u32 as discriminant type.\n+                            // Generators use u32 as discriminant type, verified above.\n                             variant_index.as_u32().into(),\n                             true, // IsUnsigned\n                         ))\n@@ -1841,12 +1887,12 @@ fn prepare_enum_metadata(\n             None => {\n                 let (discriminant_size, discriminant_align) = (discr.size(cx), discr.align(cx));\n                 let discriminant_base_type_metadata =\n-                    type_metadata(cx, discr.to_ty(cx.tcx), rustc_span::DUMMY_SP);\n+                    type_metadata(cx, discr.to_ty(tcx), rustc_span::DUMMY_SP);\n \n                 let item_name;\n                 let discriminant_name = match enum_type.kind {\n                     ty::Adt(..) => {\n-                        item_name = cx.tcx.item_name(enum_def_id).as_str();\n+                        item_name = tcx.item_name(enum_def_id).as_str();\n                         &*item_name\n                     }\n                     ty::Generator(..) => enum_name.as_str(),"}, {"sha": "b77b069befd000b46cd34b2c2bec799c194708ce", "filename": "src/librustc_middle/mir/query.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5a831f51169767c27ddd7edb30269d01f00bf29/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5a831f51169767c27ddd7edb30269d01f00bf29/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fquery.rs?ref=a5a831f51169767c27ddd7edb30269d01f00bf29", "patch": "@@ -67,6 +67,10 @@ pub struct GeneratorLayout<'tcx> {\n     /// be stored in multiple variants.\n     pub variant_fields: IndexVec<VariantIdx, IndexVec<Field, GeneratorSavedLocal>>,\n \n+    /// The source that led to each variant being created (usually, a yield or\n+    /// await).\n+    pub variant_source_info: IndexVec<VariantIdx, SourceInfo>,\n+\n     /// Which saved locals are storage-live at the same time. Locals that do not\n     /// have conflicts with each other are allowed to overlap in the computed\n     /// layout."}, {"sha": "523d3c9af3f68c0dfde4f15e4272545618479c9d", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a5a831f51169767c27ddd7edb30269d01f00bf29/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5a831f51169767c27ddd7edb30269d01f00bf29/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=a5a831f51169767c27ddd7edb30269d01f00bf29", "patch": "@@ -422,6 +422,9 @@ struct LivenessInfo {\n     /// The set of saved locals live at each suspension point.\n     live_locals_at_suspension_points: Vec<BitSet<GeneratorSavedLocal>>,\n \n+    /// Parallel vec to the above with SourceInfo for each yield terminator.\n+    source_info_at_suspension_points: Vec<SourceInfo>,\n+\n     /// For every saved local, the set of other saved locals that are\n     /// storage-live at the same time as this local. We cannot overlap locals in\n     /// the layout which have conflicting storage.\n@@ -473,6 +476,7 @@ fn locals_live_across_suspend_points(\n \n     let mut storage_liveness_map = IndexVec::from_elem(None, body.basic_blocks());\n     let mut live_locals_at_suspension_points = Vec::new();\n+    let mut source_info_at_suspension_points = Vec::new();\n     let mut live_locals_at_any_suspension_point = BitSet::new_empty(body.local_decls.len());\n \n     for (block, data) in body.basic_blocks().iter_enumerated() {\n@@ -518,6 +522,7 @@ fn locals_live_across_suspend_points(\n             live_locals_at_any_suspension_point.union(&live_locals);\n \n             live_locals_at_suspension_points.push(live_locals);\n+            source_info_at_suspension_points.push(data.terminator().source_info);\n         }\n     }\n \n@@ -541,6 +546,7 @@ fn locals_live_across_suspend_points(\n     LivenessInfo {\n         saved_locals,\n         live_locals_at_suspension_points,\n+        source_info_at_suspension_points,\n         storage_conflicts,\n         storage_liveness: storage_liveness_map,\n     }\n@@ -754,6 +760,7 @@ fn compute_layout<'tcx>(\n     let LivenessInfo {\n         saved_locals,\n         live_locals_at_suspension_points,\n+        source_info_at_suspension_points,\n         storage_conflicts,\n         storage_liveness,\n     } = liveness;\n@@ -768,7 +775,18 @@ fn compute_layout<'tcx>(\n     }\n \n     // Leave empty variants for the UNRESUMED, RETURNED, and POISONED states.\n+    // In debuginfo, these will correspond to the beginning (UNRESUMED) or end\n+    // (RETURNED, POISONED) of the function.\n     const RESERVED_VARIANTS: usize = 3;\n+    let body_span = body.source_scopes[OUTERMOST_SOURCE_SCOPE].span;\n+    let mut variant_source_info: IndexVec<VariantIdx, SourceInfo> = [\n+        SourceInfo::outermost(body_span.shrink_to_lo()),\n+        SourceInfo::outermost(body_span.shrink_to_hi()),\n+        SourceInfo::outermost(body_span.shrink_to_hi()),\n+    ]\n+    .iter()\n+    .copied()\n+    .collect();\n \n     // Build the generator variant field list.\n     // Create a map from local indices to generator struct indices.\n@@ -787,11 +805,13 @@ fn compute_layout<'tcx>(\n             remap.entry(locals[saved_local]).or_insert((tys[saved_local], variant_index, idx));\n         }\n         variant_fields.push(fields);\n+        variant_source_info.push(source_info_at_suspension_points[suspension_point_idx]);\n     }\n     debug!(\"generator variant_fields = {:?}\", variant_fields);\n     debug!(\"generator storage_conflicts = {:#?}\", storage_conflicts);\n \n-    let layout = GeneratorLayout { field_tys: tys, variant_fields, storage_conflicts };\n+    let layout =\n+        GeneratorLayout { field_tys: tys, variant_fields, variant_source_info, storage_conflicts };\n \n     (remap, layout, storage_liveness)\n }"}, {"sha": "b34d42155cc6cd2bbfdaf4862b3e58bebe9d31ca", "filename": "src/test/mir-opt/generator-drop-cleanup/rustc.main-{{closure}}.generator_drop.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5a831f51169767c27ddd7edb30269d01f00bf29/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a5a831f51169767c27ddd7edb30269d01f00bf29/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir?ref=a5a831f51169767c27ddd7edb30269d01f00bf29", "patch": "@@ -1,5 +1,5 @@\n // MIR for `main::{{closure}}#0` 0 generator_drop\n-// generator_layout = GeneratorLayout { field_tys: [std::string::String], variant_fields: [[], [], [], [_0]], storage_conflicts: BitMatrix { num_rows: 1, num_columns: 1, words: [1], marker: PhantomData } }\n+// generator_layout = GeneratorLayout { field_tys: [std::string::String], variant_fields: [[], [], [], [_0]], variant_source_info: [SourceInfo { span: $DIR/generator-drop-cleanup.rs:10:15: 10:15 (#0), scope: scope[0] }, SourceInfo { span: $DIR/generator-drop-cleanup.rs:13:6: 13:6 (#0), scope: scope[0] }, SourceInfo { span: $DIR/generator-drop-cleanup.rs:13:6: 13:6 (#0), scope: scope[0] }, SourceInfo { span: $DIR/generator-drop-cleanup.rs:12:9: 12:14 (#0), scope: scope[1] }], storage_conflicts: BitMatrix { num_rows: 1, num_columns: 1, words: [1], marker: PhantomData } }\n \n fn main::{{closure}}#0(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 13:6 {std::string::String, ()}]) -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6"}, {"sha": "2398e9501452e87b767d230a42a0dcc1237b6b60", "filename": "src/test/mir-opt/generator-tiny/rustc.main-{{closure}}.generator_resume.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5a831f51169767c27ddd7edb30269d01f00bf29/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a5a831f51169767c27ddd7edb30269d01f00bf29/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir?ref=a5a831f51169767c27ddd7edb30269d01f00bf29", "patch": "@@ -1,5 +1,5 @@\n // MIR for `main::{{closure}}#0` 0 generator_resume\n-// generator_layout = GeneratorLayout { field_tys: [HasDrop], variant_fields: [[], [], [], [_0]], storage_conflicts: BitMatrix { num_rows: 1, num_columns: 1, words: [1], marker: PhantomData } }\n+// generator_layout = GeneratorLayout { field_tys: [HasDrop], variant_fields: [[], [], [], [_0]], variant_source_info: [SourceInfo { span: $DIR/generator-tiny.rs:19:16: 19:16 (#0), scope: scope[0] }, SourceInfo { span: $DIR/generator-tiny.rs:25:6: 25:6 (#0), scope: scope[0] }, SourceInfo { span: $DIR/generator-tiny.rs:25:6: 25:6 (#0), scope: scope[0] }, SourceInfo { span: $DIR/generator-tiny.rs:22:13: 22:18 (#0), scope: scope[1] }], storage_conflicts: BitMatrix { num_rows: 1, num_columns: 1, words: [1], marker: PhantomData } }\n \n fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}]>, _2: u8) -> std::ops::GeneratorState<(), ()> {\n     debug _x => _10;                     // in scope 0 at $DIR/generator-tiny.rs:19:17: 19:19"}]}