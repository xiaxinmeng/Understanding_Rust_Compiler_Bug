{"sha": "84ebf74ee2f163461cf021b3d415171e8b5ef8be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZWJmNzRlZTJmMTYzNDYxY2YwMjFiM2Q0MTUxNzFlOGI1ZWY4YmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-28T20:06:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-28T20:06:30Z"}, "message": "auto merge of #12607 : alexcrichton/rust/io++, r=brson\n\nThis lowers the #[allow(missing_doc)] directive into some of the lower modules\r\nwhich are less mature. Most I/O modules now require comprehensive documentation.", "tree": {"sha": "50445a54a33026b5130e0723bfff9139d2736fb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50445a54a33026b5130e0723bfff9139d2736fb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84ebf74ee2f163461cf021b3d415171e8b5ef8be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84ebf74ee2f163461cf021b3d415171e8b5ef8be", "html_url": "https://github.com/rust-lang/rust/commit/84ebf74ee2f163461cf021b3d415171e8b5ef8be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84ebf74ee2f163461cf021b3d415171e8b5ef8be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58ea029db2fd9da6eac85456191481b4cbdb9e58", "url": "https://api.github.com/repos/rust-lang/rust/commits/58ea029db2fd9da6eac85456191481b4cbdb9e58", "html_url": "https://github.com/rust-lang/rust/commit/58ea029db2fd9da6eac85456191481b4cbdb9e58"}, {"sha": "311ac8f480917f2dccb98b0dd08342b18208e477", "url": "https://api.github.com/repos/rust-lang/rust/commits/311ac8f480917f2dccb98b0dd08342b18208e477", "html_url": "https://github.com/rust-lang/rust/commit/311ac8f480917f2dccb98b0dd08342b18208e477"}], "stats": {"total": 221, "additions": 188, "deletions": 33}, "files": [{"sha": "f2d3d41075865b4c5de4d2692161159a152f60ea", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=84ebf74ee2f163461cf021b3d415171e8b5ef8be", "patch": "@@ -42,6 +42,7 @@ pub struct PortReader {\n }\n \n impl PortReader {\n+    /// Wraps a `Port` in a `PortReader` structure\n     pub fn new(port: Port<~[u8]>) -> PortReader {\n         PortReader {\n             buf: None,\n@@ -96,10 +97,11 @@ impl Reader for PortReader {\n /// writer.write(\"hello, world\".as_bytes());\n /// ```\n pub struct ChanWriter {\n-    chan: Chan<~[u8]>,\n+    priv chan: Chan<~[u8]>,\n }\n \n impl ChanWriter {\n+    /// Wraps a channel in a `ChanWriter` structure\n     pub fn new(chan: Chan<~[u8]>) -> ChanWriter {\n         ChanWriter { chan: chan }\n     }"}, {"sha": "0424b7783cec943db6c884971c230ef2c3ff9758", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=84ebf74ee2f163461cf021b3d415171e8b5ef8be", "patch": "@@ -10,6 +10,8 @@\n \n //! Utility mixins that apply to all Readers and Writers\n \n+#[allow(missing_doc)];\n+\n // FIXME: Not sure how this should be structured\n // FIXME: Iteration should probably be considered separately\n "}, {"sha": "862368a8fa2515c654247d9f80b07572592b0e1a", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=84ebf74ee2f163461cf021b3d415171e8b5ef8be", "patch": "@@ -224,6 +224,8 @@ pub struct BufWriter<'a> {\n }\n \n impl<'a> BufWriter<'a> {\n+    /// Creates a new `BufWriter` which will wrap the specified buffer. The\n+    /// writer initially starts at position 0.\n     pub fn new<'a>(buf: &'a mut [u8]) -> BufWriter<'a> {\n         BufWriter {\n             buf: buf,"}, {"sha": "1120d32408121dce2ad131eb1414d3524b9a675f", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 126, "deletions": 11, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=84ebf74ee2f163461cf021b3d415171e8b5ef8be", "patch": "@@ -174,7 +174,6 @@ will also return an error.\n \n */\n \n-#[allow(missing_doc)];\n #[deny(unused_must_use)];\n \n use cast;\n@@ -247,6 +246,7 @@ mod comm_adapters;\n // https://groups.google.com/forum/#!topic/libuv/oQO1HJAIDdA\n static DEFAULT_BUF_SIZE: uint = 1024 * 64;\n \n+/// A convenient typedef of the return value of any I/O action.\n pub type IoResult<T> = Result<T, IoError>;\n \n /// The type passed to I/O condition handlers to indicate error\n@@ -256,8 +256,12 @@ pub type IoResult<T> = Result<T, IoError>;\n /// Is something like this sufficient? It's kind of archaic\n #[deriving(Eq, Clone)]\n pub struct IoError {\n+    /// An enumeration which can be matched against for determining the flavor\n+    /// of error.\n     kind: IoErrorKind,\n+    /// A human-readable description about the error\n     desc: &'static str,\n+    /// Detailed information about this error, not always available\n     detail: Option<~str>\n }\n \n@@ -272,6 +276,7 @@ impl fmt::Show for IoError {\n }\n \n #[deriving(Eq, Clone, Show)]\n+#[allow(missing_doc)]\n pub enum IoErrorKind {\n     OtherIoError,\n     EndOfFile,\n@@ -292,6 +297,13 @@ pub enum IoErrorKind {\n     InvalidInput,\n }\n \n+/// A trait for objects which are byte-oriented streams. Readers are defined by\n+/// one method, `read`. This function will block until data is available,\n+/// filling in the provided buffer with any data read.\n+///\n+/// Readers are intended to be composable with one another. Many objects\n+/// throughout the I/O and related libraries take and provide types which\n+/// implement the `Reader` trait.\n pub trait Reader {\n \n     // Only method which need to get implemented for this trait\n@@ -655,8 +667,33 @@ impl<'a> Reader for &'a mut Reader {\n     fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> { self.read(buf) }\n }\n \n+/// A `RefReader` is a struct implementing `Reader` which contains a reference\n+/// to another reader. This is often useful when composing streams.\n+///\n+/// # Example\n+///\n+/// ```\n+/// # fn main() {}\n+/// # fn process_input<R: Reader>(r: R) {}\n+/// # fn foo() {\n+/// use std::io;\n+/// use std::io::util::LimitReader;\n+///\n+/// let mut stream = io::stdin();\n+///\n+/// // Only allow the function to process at most one kilobyte of input\n+/// {\n+///     let stream = LimitReader::new(stream.by_ref(), 1024);\n+///     process_input(stream);\n+/// }\n+///\n+/// // 'stream' is still available for use here\n+///\n+/// # }\n+/// ```\n pub struct RefReader<'a, R> {\n-    priv inner: &'a mut R\n+    /// The underlying reader which this is referencing\n+    inner: &'a mut R\n }\n \n impl<'a, R: Reader> Reader for RefReader<'a, R> {\n@@ -668,6 +705,16 @@ fn extend_sign(val: u64, nbytes: uint) -> i64 {\n     (val << shift) as i64 >> shift\n }\n \n+/// A trait for objects which are byte-oriented streams. Writers are defined by\n+/// one method, `write`. This function will block until the provided buffer of\n+/// bytes has been entirely written, and it will return any failurs which occur.\n+///\n+/// Another commonly overriden method is the `flush` method for writers such as\n+/// buffered writers.\n+///\n+/// Writers are intended to be composable with one another. Many objects\n+/// throughout the I/O and related libraries take and provide types which\n+/// implement the `Writer` trait.\n pub trait Writer {\n     /// Write the entirety of a given buffer\n     ///\n@@ -863,7 +910,32 @@ impl<'a> Writer for &'a mut Writer {\n     fn flush(&mut self) -> IoResult<()> { self.flush() }\n }\n \n+/// A `RefWriter` is a struct implementing `Writer` which contains a reference\n+/// to another writer. This is often useful when composing streams.\n+///\n+/// # Example\n+///\n+/// ```\n+/// # fn main() {}\n+/// # fn process_input<R: Reader>(r: R) {}\n+/// # fn foo () {\n+/// use std::io::util::TeeReader;\n+/// use std::io::{stdin, MemWriter};\n+///\n+/// let mut output = MemWriter::new();\n+///\n+/// {\n+///     // Don't give ownership of 'output' to the 'tee'. Instead we keep a\n+///     // handle to it in the outer scope\n+///     let mut tee = TeeReader::new(stdin(), output.by_ref());\n+///     process_input(tee);\n+/// }\n+///\n+/// println!(\"input processed: {}\", output.unwrap());\n+/// # }\n+/// ```\n pub struct RefWriter<'a, W> {\n+    /// The underlying writer which this is referencing\n     inner: &'a mut W\n }\n \n@@ -873,6 +945,8 @@ impl<'a, W: Writer> Writer for RefWriter<'a, W> {\n }\n \n \n+/// A Stream is a readable and a writable object. Data written is typically\n+/// received by the object which reads receive data from.\n pub trait Stream: Reader + Writer { }\n \n impl<T: Reader + Writer> Stream for T {}\n@@ -1070,7 +1144,8 @@ pub trait Buffer: Reader {\n         }\n     }\n \n-    /// Create an iterator that reads a utf8-encoded character on each iteration until EOF.\n+    /// Create an iterator that reads a utf8-encoded character on each iteration\n+    /// until EOF.\n     ///\n     /// # Error\n     ///\n@@ -1082,6 +1157,8 @@ pub trait Buffer: Reader {\n     }\n }\n \n+/// When seeking, the resulting cursor is offset from a base by the offset given\n+/// to the `seek` function. The base used is specified by this enumeration.\n pub enum SeekStyle {\n     /// Seek from the beginning of the stream\n     SeekSet,\n@@ -1091,6 +1168,9 @@ pub enum SeekStyle {\n     SeekCur,\n }\n \n+/// An object implementing `Seek` internally has some form of cursor which can\n+/// be moved within a stream of bytes. The stream typically has a fixed size,\n+/// allowing seeking relative to either end.\n pub trait Seek {\n     /// Return position of file cursor in the stream\n     fn tell(&self) -> IoResult<u64>;\n@@ -1157,6 +1237,17 @@ impl<'a, T, A: Acceptor<T>> Iterator<IoResult<T>> for IncomingConnections<'a, A>\n     }\n }\n \n+/// Creates a standard error for a commonly used flavor of error. The `detail`\n+/// field of the returned error will always be `None`.\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::io;\n+///\n+/// let eof = io::standard_error(io::EndOfFile);\n+/// let einval = io::standard_error(io::InvalidInput);\n+/// ```\n pub fn standard_error(kind: IoErrorKind) -> IoError {\n     let desc = match kind {\n         EndOfFile => \"end of file\",\n@@ -1171,14 +1262,6 @@ pub fn standard_error(kind: IoErrorKind) -> IoError {\n     }\n }\n \n-pub fn placeholder_error() -> IoError {\n-    IoError {\n-        kind: OtherIoError,\n-        desc: \"Placeholder error. You shouldn't be seeing this\",\n-        detail: None\n-    }\n-}\n-\n /// A mode specifies how a file should be opened or created. These modes are\n /// passed to `File::open_mode` and are used to control where the file is\n /// positioned when it is initially opened.\n@@ -1194,22 +1277,53 @@ pub enum FileMode {\n /// Access permissions with which the file should be opened. `File`s\n /// opened with `Read` will return an error if written to.\n pub enum FileAccess {\n+    /// Read-only access, requests to write will result in an error\n     Read,\n+    /// Write-only access, requests to read will result in an error\n     Write,\n+    /// Read-write access, no requests are denied by default\n     ReadWrite,\n }\n \n /// Different kinds of files which can be identified by a call to stat\n #[deriving(Eq)]\n pub enum FileType {\n+    /// This is a normal file, corresponding to `S_IFREG`\n     TypeFile,\n+\n+    /// This file is a directory, corresponding to `S_IFDIR`\n     TypeDirectory,\n+\n+    /// This file is a named pipe, corresponding to `S_IFIFO`\n     TypeNamedPipe,\n+\n+    /// This file is a block device, corresponding to `S_IFBLK`\n     TypeBlockSpecial,\n+\n+    /// This file is a symbolic link to another file, corresponding to `S_IFLNK`\n     TypeSymlink,\n+\n+    /// The type of this file is not recognized as one of the other categories\n     TypeUnknown,\n }\n \n+/// A structure used to describe metadata information about a file. This\n+/// structure is created through the `stat` method on a `Path`.\n+///\n+/// # Example\n+///\n+/// ```\n+/// # fn main() {}\n+/// # fn foo() {\n+/// let info = match Path::new(\"foo.txt\").stat() {\n+///     Ok(stat) => stat,\n+///     Err(e) => fail!(\"couldn't read foo.txt: {}\", e),\n+/// };\n+///\n+/// println!(\"path: {}\", info.path.display());\n+/// println!(\"byte size: {}\", info.size);\n+/// # }\n+/// ```\n pub struct FileStat {\n     /// The path that this stat structure is describing\n     path: Path,\n@@ -1250,6 +1364,7 @@ pub struct FileStat {\n /// structure. This information is not necessarily platform independent, and may\n /// have different meanings or no meaning at all on some platforms.\n #[unstable]\n+#[allow(missing_doc)]\n pub struct UnstableFileStat {\n     device: u64,\n     inode: u64,"}, {"sha": "80ca353523f5b12eca704816de350bd272f84d8e", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=84ebf74ee2f163461cf021b3d415171e8b5ef8be", "patch": "@@ -17,6 +17,8 @@ getaddrinfo()\n \n */\n \n+#[allow(missing_doc)];\n+\n use io::IoResult;\n use io::net::ip::{SocketAddr, IpAddr};\n use option::{Option, Some, None};"}, {"sha": "7c9321d87d9ecbf49a26d7c0426a86a2dbf4382b", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=84ebf74ee2f163461cf021b3d415171e8b5ef8be", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(missing_doc)];\n+\n use container::Container;\n use fmt;\n use from_str::FromStr;"}, {"sha": "1939d6537521fd3aa90bd76f3dc289d36df655a6", "filename": "src/libstd/io/net/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fmod.rs?ref=84ebf74ee2f163461cf021b3d415171e8b5ef8be", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! Networking I/O\n+\n pub use self::addrinfo::get_host_addresses;\n \n pub mod addrinfo;"}, {"sha": "1aff58a80ecad121d66c4fd35405abc6032a6e1f", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=84ebf74ee2f163461cf021b3d415171e8b5ef8be", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(missing_doc)];\n+\n use clone::Clone;\n use result::{Ok, Err};\n use io::net::ip::SocketAddr;"}, {"sha": "64586113a1095fd877850da86c5ca1cb0dab15e1", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=84ebf74ee2f163461cf021b3d415171e8b5ef8be", "patch": "@@ -22,6 +22,8 @@ instances as clients.\n \n */\n \n+#[allow(missing_doc)];\n+\n use prelude::*;\n \n use c_str::ToCStr;"}, {"sha": "763f2d6c6a19df81f07b625ba15490700ceeb979", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=84ebf74ee2f163461cf021b3d415171e8b5ef8be", "patch": "@@ -13,6 +13,8 @@\n //! Currently these aren't particularly useful, there only exists bindings\n //! enough so that pipes can be created to child processes.\n \n+#[allow(missing_doc)];\n+\n use prelude::*;\n use io::IoResult;\n use libc;\n@@ -46,6 +48,7 @@ impl PipeStream {\n         })\n     }\n \n+    #[doc(hidden)]\n     pub fn new(inner: ~RtioPipe) -> PipeStream {\n         PipeStream { obj: inner }\n     }"}, {"sha": "5275eea0c81eb4cd850afd318cd3852ad4db425f", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=84ebf74ee2f163461cf021b3d415171e8b5ef8be", "patch": "@@ -29,6 +29,7 @@ use result::{Ok, Err};\n use rt::rtio::{IoFactory, LocalIo, RtioSignal};\n use vec::{ImmutableVector, OwnedVector};\n \n+/// Signals that can be sent and received\n #[repr(int)]\n #[deriving(Eq, Hash)]\n pub enum Signum {"}, {"sha": "b491891ff59df15523fb61494bdea4e8e9bb877d", "filename": "src/libstd/io/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftest.rs?ref=84ebf74ee2f163461cf021b3d415171e8b5ef8be", "patch": "@@ -121,6 +121,7 @@ fn base_port() -> u16 {\n     return final_base;\n }\n \n+/// Raises the file descriptor limit when running tests if necessary\n pub fn raise_fd_limit() {\n     unsafe { darwin_fd_limit::raise_fd_limit() }\n }"}, {"sha": "8a13277aee35bc48d3e2b9ff71285ad568ef654f", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 40, "deletions": 21, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ebf74ee2f163461cf021b3d415171e8b5ef8be/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=84ebf74ee2f163461cf021b3d415171e8b5ef8be", "patch": "@@ -15,33 +15,52 @@ Synchronous Timers\n This module exposes the functionality to create timers, block the current task,\n and create ports which will receive notifications after a period of time.\n \n-# Example\n-\n-```rust,ignore\n-\n-use std::io::Timer;\n-\n-let mut timer = Timer::new().unwrap();\n-timer.sleep(10); // block the task for awhile\n-\n-let timeout = timer.oneshot(10);\n-// do some work\n-timeout.recv(); // wait for the timeout to expire\n-\n-let periodic = timer.periodic(10);\n-loop {\n-    periodic.recv();\n-    // this loop is only executed once every 10ms\n-}\n-\n-```\n-\n */\n \n use comm::Port;\n use rt::rtio::{IoFactory, LocalIo, RtioTimer};\n use io::IoResult;\n \n+/// A synchronous timer object\n+///\n+/// Values of this type can be used to put the current task to sleep for a\n+/// period of time. Handles to this timer can also be created in the form of\n+/// ports which will receive notifications over time.\n+///\n+/// # Example\n+///\n+/// ```\n+/// # fn main() {}\n+/// # fn foo() {\n+/// use std::io::Timer;\n+///\n+/// let mut timer = Timer::new().unwrap();\n+/// timer.sleep(10); // block the task for awhile\n+///\n+/// let timeout = timer.oneshot(10);\n+/// // do some work\n+/// timeout.recv(); // wait for the timeout to expire\n+///\n+/// let periodic = timer.periodic(10);\n+/// loop {\n+///     periodic.recv();\n+///     // this loop is only executed once every 10ms\n+/// }\n+/// # }\n+/// ```\n+///\n+/// If only sleeping is necessary, then a convenience api is provided through\n+/// the `io::timer` module.\n+///\n+/// ```\n+/// # fn main() {}\n+/// # fn foo() {\n+/// use std::io::timer;\n+///\n+/// // Put this task to sleep for 5 seconds\n+/// timer::sleep(5000);\n+/// # }\n+/// ```\n pub struct Timer {\n     priv obj: ~RtioTimer\n }"}]}