{"sha": "fd030f9450ed6910677e30f8fa65b06e71fcffa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMDMwZjk0NTBlZDY5MTA2NzdlMzBmOGZhNjViMDZlNzFmY2ZmYTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-01T23:12:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-01T23:12:37Z"}, "message": "Revert \"Merge #4233\"\n\nThis reverts commit a5f2b16366f027ad60c58266a66eb7fbdcbda9f9, reversing\nchanges made to c96b2180c1c4206a0a98c280b4d30897eb116336.", "tree": {"sha": "27298926ab8ffa68cfef463bd37d6564ffb417dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27298926ab8ffa68cfef463bd37d6564ffb417dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd030f9450ed6910677e30f8fa65b06e71fcffa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd030f9450ed6910677e30f8fa65b06e71fcffa2", "html_url": "https://github.com/rust-lang/rust/commit/fd030f9450ed6910677e30f8fa65b06e71fcffa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd030f9450ed6910677e30f8fa65b06e71fcffa2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a984587c47a8ad8b7dbdae0509089a9f6d898d8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a984587c47a8ad8b7dbdae0509089a9f6d898d8d", "html_url": "https://github.com/rust-lang/rust/commit/a984587c47a8ad8b7dbdae0509089a9f6d898d8d"}], "stats": {"total": 93, "additions": 63, "deletions": 30}, "files": [{"sha": "f06cc115b1d68bfbaeb005c538a6e9e8504787e4", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=fd030f9450ed6910677e30f8fa65b06e71fcffa2", "patch": "@@ -203,6 +203,10 @@ impl ExprCollector<'_> {\n \n                 self.alloc_expr(Expr::If { condition, then_branch, else_branch }, syntax_ptr)\n             }\n+            ast::Expr::TryBlockExpr(e) => {\n+                let body = self.collect_block_opt(e.body());\n+                self.alloc_expr(Expr::TryBlock { body }, syntax_ptr)\n+            }\n             ast::Expr::BlockExpr(e) => self.collect_block(e),\n             ast::Expr::LoopExpr(e) => {\n                 let body = self.collect_block_opt(e.loop_body());"}, {"sha": "a0cdad529b3fb8404e4216df17ab6cb353a912cd", "filename": "crates/ra_hir_def/src/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs?ref=fd030f9450ed6910677e30f8fa65b06e71fcffa2", "patch": "@@ -101,6 +101,9 @@ pub enum Expr {\n     Try {\n         expr: ExprId,\n     },\n+    TryBlock {\n+        body: ExprId,\n+    },\n     Cast {\n         expr: ExprId,\n         type_ref: TypeRef,\n@@ -236,6 +239,7 @@ impl Expr {\n                     f(*expr);\n                 }\n             }\n+            Expr::TryBlock { body } => f(*body),\n             Expr::Loop { body } => f(*body),\n             Expr::While { condition, body } => {\n                 f(*condition);"}, {"sha": "83f946eeea0567155459f8931d878ac4cfa6188d", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=fd030f9450ed6910677e30f8fa65b06e71fcffa2", "patch": "@@ -73,6 +73,11 @@ impl<'a> InferenceContext<'a> {\n                 self.coerce_merge_branch(&then_ty, &else_ty)\n             }\n             Expr::Block { statements, tail } => self.infer_block(statements, *tail, expected),\n+            Expr::TryBlock { body } => {\n+                let _inner = self.infer_expr(*body, expected);\n+                // FIXME should be std::result::Result<{inner}, _>\n+                Ty::Unknown\n+            }\n             Expr::Loop { body } => {\n                 self.infer_expr(*body, &Expectation::has_type(Ty::unit()));\n                 // FIXME handle break with value"}, {"sha": "166dfc472b0ff7113975ead362499b0e99357696", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=fd030f9450ed6910677e30f8fa65b06e71fcffa2", "patch": "@@ -84,7 +84,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n         T![box] => box_expr(p, None),\n         T![for] => for_expr(p, None),\n         T![while] => while_expr(p, None),\n-        T![try] => try_expr(p, None),\n+        T![try] => try_block_expr(p, None),\n         LIFETIME if la == T![:] => {\n             let m = p.start();\n             label(p);\n@@ -134,7 +134,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n         }\n     };\n     let blocklike = match done.kind() {\n-        IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR | TRY_EXPR => {\n+        IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR | TRY_BLOCK_EXPR => {\n             BlockLike::Block\n         }\n         _ => BlockLike::NotBlock,\n@@ -532,7 +532,7 @@ fn break_expr(p: &mut Parser, r: Restrictions) -> CompletedMarker {\n // fn foo() {\n //     let _ = try {};\n // }\n-fn try_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n+fn try_block_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     assert!(p.at(T![try]));\n     let m = m.unwrap_or_else(|| p.start());\n     // Special-case `try!` as macro."}, {"sha": "524e7d784e5be057537bbe56033875a15b0cec2f", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=fd030f9450ed6910677e30f8fa65b06e71fcffa2", "patch": "@@ -191,6 +191,7 @@ pub enum SyntaxKind {\n     RECORD_LIT,\n     RECORD_FIELD_LIST,\n     RECORD_FIELD,\n+    TRY_BLOCK_EXPR,\n     BOX_EXPR,\n     CALL_EXPR,\n     INDEX_EXPR,"}, {"sha": "a716e525b9520a828b3ab0ccc11f77054d318120", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=fd030f9450ed6910677e30f8fa65b06e71fcffa2", "patch": "@@ -16,9 +16,7 @@ use crate::{\n };\n \n pub use self::{\n-    expr_extensions::{\n-        ArrayExprKind, BinOp, BlockModifier, ElseBranch, LiteralKind, PrefixOp, RangeOp,\n-    },\n+    expr_extensions::{ArrayExprKind, BinOp, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n     extensions::{\n         AttrKind, FieldKind, NameOrNameRef, PathSegmentKind, SelfParamKind, SlicePatComponents,\n         StructKind, TypeBoundKind, VisibilityKind,"}, {"sha": "ecf74fd3662fdb1f7fd51d6d33a5fe05c1b3ffd1", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=fd030f9450ed6910677e30f8fa65b06e71fcffa2", "patch": "@@ -16,7 +16,7 @@ impl ast::Expr {\n             | ast::Expr::WhileExpr(_)\n             | ast::Expr::BlockExpr(_)\n             | ast::Expr::MatchExpr(_)\n-            | ast::Expr::TryExpr(_) => true,\n+            | ast::Expr::TryBlockExpr(_) => true,\n             _ => false,\n         }\n     }\n@@ -359,22 +359,7 @@ impl ast::Literal {\n     }\n }\n \n-pub enum BlockModifier {\n-    Async(SyntaxToken),\n-    Unsafe(SyntaxToken),\n-}\n-\n impl ast::BlockExpr {\n-    pub fn modifier(&self) -> Option<BlockModifier> {\n-        if let Some(token) = self.async_token() {\n-            return Some(BlockModifier::Async(token));\n-        }\n-        if let Some(token) = self.unsafe_token() {\n-            return Some(BlockModifier::Unsafe(token));\n-        }\n-        None\n-    }\n-\n     /// false if the block is an intrinsic part of the syntax and can't be\n     /// replaced with arbitrary expression.\n     ///\n@@ -383,15 +368,15 @@ impl ast::BlockExpr {\n     /// const FOO: () = { stand_alone };\n     /// ```\n     pub fn is_standalone(&self) -> bool {\n-        if self.modifier().is_some() {\n+        if self.unsafe_token().is_some() || self.async_token().is_some() {\n             return false;\n         }\n-        let parent = match self.syntax().parent() {\n-            Some(it) => it,\n+        let kind = match self.syntax().parent() {\n             None => return true,\n+            Some(it) => it.kind(),\n         };\n-        match parent.kind() {\n-            FN_DEF | IF_EXPR | WHILE_EXPR | LOOP_EXPR => false,\n+        match kind {\n+            FN_DEF | IF_EXPR | WHILE_EXPR | LOOP_EXPR | TRY_BLOCK_EXPR => false,\n             _ => true,\n         }\n     }"}, {"sha": "2096f12f1b6ae5ba2ac6a9888142d8e7c533ce6b", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd030f9450ed6910677e30f8fa65b06e71fcffa2/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=fd030f9450ed6910677e30f8fa65b06e71fcffa2", "patch": "@@ -475,6 +475,16 @@ impl LoopExpr {\n     pub fn loop_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![loop]) }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct TryBlockExpr {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::AttrsOwner for TryBlockExpr {}\n+impl TryBlockExpr {\n+    pub fn try_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![try]) }\n+    pub fn body(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ForExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1467,6 +1477,7 @@ pub enum Expr {\n     FieldExpr(FieldExpr),\n     AwaitExpr(AwaitExpr),\n     TryExpr(TryExpr),\n+    TryBlockExpr(TryBlockExpr),\n     CastExpr(CastExpr),\n     RefExpr(RefExpr),\n     PrefixExpr(PrefixExpr),\n@@ -1949,6 +1960,17 @@ impl AstNode for LoopExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for TryBlockExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TRY_BLOCK_EXPR }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for ForExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == FOR_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3290,6 +3312,9 @@ impl From<AwaitExpr> for Expr {\n impl From<TryExpr> for Expr {\n     fn from(node: TryExpr) -> Expr { Expr::TryExpr(node) }\n }\n+impl From<TryBlockExpr> for Expr {\n+    fn from(node: TryBlockExpr) -> Expr { Expr::TryBlockExpr(node) }\n+}\n impl From<CastExpr> for Expr {\n     fn from(node: CastExpr) -> Expr { Expr::CastExpr(node) }\n }\n@@ -3320,8 +3345,9 @@ impl AstNode for Expr {\n             TUPLE_EXPR | ARRAY_EXPR | PAREN_EXPR | PATH_EXPR | LAMBDA_EXPR | IF_EXPR\n             | LOOP_EXPR | FOR_EXPR | WHILE_EXPR | CONTINUE_EXPR | BREAK_EXPR | LABEL\n             | BLOCK_EXPR | RETURN_EXPR | MATCH_EXPR | RECORD_LIT | CALL_EXPR | INDEX_EXPR\n-            | METHOD_CALL_EXPR | FIELD_EXPR | AWAIT_EXPR | TRY_EXPR | CAST_EXPR | REF_EXPR\n-            | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL | BOX_EXPR => true,\n+            | METHOD_CALL_EXPR | FIELD_EXPR | AWAIT_EXPR | TRY_EXPR | TRY_BLOCK_EXPR\n+            | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL\n+            | BOX_EXPR => true,\n             _ => false,\n         }\n     }\n@@ -3349,6 +3375,7 @@ impl AstNode for Expr {\n             FIELD_EXPR => Expr::FieldExpr(FieldExpr { syntax }),\n             AWAIT_EXPR => Expr::AwaitExpr(AwaitExpr { syntax }),\n             TRY_EXPR => Expr::TryExpr(TryExpr { syntax }),\n+            TRY_BLOCK_EXPR => Expr::TryBlockExpr(TryBlockExpr { syntax }),\n             CAST_EXPR => Expr::CastExpr(CastExpr { syntax }),\n             REF_EXPR => Expr::RefExpr(RefExpr { syntax }),\n             PREFIX_EXPR => Expr::PrefixExpr(PrefixExpr { syntax }),\n@@ -3385,6 +3412,7 @@ impl AstNode for Expr {\n             Expr::FieldExpr(it) => &it.syntax,\n             Expr::AwaitExpr(it) => &it.syntax,\n             Expr::TryExpr(it) => &it.syntax,\n+            Expr::TryBlockExpr(it) => &it.syntax,\n             Expr::CastExpr(it) => &it.syntax,\n             Expr::RefExpr(it) => &it.syntax,\n             Expr::PrefixExpr(it) => &it.syntax,\n@@ -3865,6 +3893,11 @@ impl std::fmt::Display for LoopExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for TryBlockExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for ForExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "1abb62f6faecdde90dd13da2f75fe43e54097a40", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd030f9450ed6910677e30f8fa65b06e71fcffa2/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd030f9450ed6910677e30f8fa65b06e71fcffa2/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=fd030f9450ed6910677e30f8fa65b06e71fcffa2", "patch": "@@ -162,6 +162,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"RECORD_LIT\",\n         \"RECORD_FIELD_LIST\",\n         \"RECORD_FIELD\",\n+        \"TRY_BLOCK_EXPR\",\n         \"BOX_EXPR\",\n         // postfix\n         \"CALL_EXPR\",\n@@ -439,6 +440,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         }\n         struct IfExpr: AttrsOwner { T![if], Condition }\n         struct LoopExpr: AttrsOwner, LoopBodyOwner { T![loop] }\n+        struct TryBlockExpr: AttrsOwner { T![try], body: BlockExpr }\n         struct ForExpr: AttrsOwner, LoopBodyOwner {\n             T![for],\n             Pat,\n@@ -449,7 +451,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct ContinueExpr: AttrsOwner { T![continue], T![lifetime] }\n         struct BreakExpr: AttrsOwner { T![break], T![lifetime], Expr }\n         struct Label { T![lifetime] }\n-        struct BlockExpr: AttrsOwner { Label, T![unsafe], T![async], Block }\n+        struct BlockExpr: AttrsOwner { Label, T![unsafe], T![async], Block  }\n         struct ReturnExpr: AttrsOwner { Expr }\n         struct CallExpr: ArgListOwner { Expr }\n         struct MethodCallExpr: AttrsOwner, ArgListOwner {\n@@ -720,6 +722,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             FieldExpr,\n             AwaitExpr,\n             TryExpr,\n+            TryBlockExpr,\n             CastExpr,\n             RefExpr,\n             PrefixExpr,"}]}