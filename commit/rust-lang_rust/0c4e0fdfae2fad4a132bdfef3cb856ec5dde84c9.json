{"sha": "0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNGUwZmRmYWUyZmFkNGExMzJiZGZlZjNjYjg1NmVjNWRkZTg0Yzk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-23T23:51:50Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-24T00:57:25Z"}, "message": "rt: Get rid of the hack that looks for captured type descriptors adjacent to the root one for functions and objects", "tree": {"sha": "247c7e3e776df8ff964ebca50fb9321696542384", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/247c7e3e776df8ff964ebca50fb9321696542384"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9", "html_url": "https://github.com/rust-lang/rust/commit/0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6164de90e2277aac21f85894acf79ed0561cd3ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/6164de90e2277aac21f85894acf79ed0561cd3ae", "html_url": "https://github.com/rust-lang/rust/commit/6164de90e2277aac21f85894acf79ed0561cd3ae"}], "stats": {"total": 80, "additions": 52, "deletions": 28}, "files": [{"sha": "146c1f514ba081dc85371ac65f5b50f026b062f9", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9", "patch": "@@ -169,7 +169,6 @@ irc::compute_ircs(rust_task *task, irc_map &ircs) {\n         begin(task->local_allocs.begin()), end(task->local_allocs.end());\n     while (begin != end) {\n         uint8_t *p = reinterpret_cast<uint8_t *>(begin->first);\n-        p += sizeof(uintptr_t); // Skip over the reference count.\n \n         const type_desc *tydesc = begin->second;\n \n@@ -178,9 +177,9 @@ irc::compute_ircs(rust_task *task, irc_map &ircs) {\n \n         shape::arena arena;\n         shape::type_param *params =\n-            shape::type_param::from_tydesc(&tydesc, arena);\n-        irc irc(task, true, tydesc->shape, params, tydesc->shape_tables, p,\n-                ircs);\n+            shape::type_param::from_tydesc_and_data(tydesc, p, arena);\n+        irc irc(task, true, tydesc->shape, params, tydesc->shape_tables,\n+                p + sizeof(uintptr_t), ircs);\n         irc.walk();\n \n #if 0\n@@ -374,26 +373,25 @@ mark::do_mark(rust_task *task, const std::vector<void *> &roots,\n         if (marked.find(alloc) == marked.end()) {\n             marked.insert(alloc);\n \n-            uint8_t *p = reinterpret_cast<uint8_t *>(alloc);\n-            p += sizeof(uintptr_t); // Skip over the reference count.\n-\n-            const type_desc *tydesc = task->local_allocs[*begin];\n+            const type_desc *tydesc = task->local_allocs[alloc];\n \n             //DPRINT(\"marking: %p, tydesc=%p\\n\", p, tydesc);\n \n+            uint8_t *p = reinterpret_cast<uint8_t *>(alloc);\n             shape::arena arena;\n             shape::type_param *params =\n-                shape::type_param::from_tydesc(&tydesc, arena);\n+                shape::type_param::from_tydesc_and_data(tydesc, p, arena);\n \n-#if 0\n+            // We skip over the reference count here.\n             shape::log log(task, true, tydesc->shape, params,\n-                           tydesc->shape_tables, p, std::cerr);\n+                           tydesc->shape_tables, p + sizeof(uintptr_t),\n+                           std::cerr);\n             log.walk();\n             DPRINT(\"\\n\");\n-#endif\n \n+            // We skip over the reference count here.\n             mark mark(task, true, tydesc->shape, params, tydesc->shape_tables,\n-                      p, marked);\n+                      p + sizeof(uintptr_t), marked);\n             mark.walk();\n         }\n "}, {"sha": "26e48857ecbbda2c9b35d2f225c764dfbf126e8a", "filename": "src/rt/rust_gc.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9/src%2Frt%2Frust_gc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9/src%2Frt%2Frust_gc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_gc.cpp?ref=0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9", "patch": "@@ -105,7 +105,8 @@ gc::mark(std::vector<root> &roots) {\n \n         shape::arena arena;\n         shape::type_param *params =\n-            shape::type_param::from_tydesc(&ri->tydesc, arena);\n+            shape::type_param::from_tydesc_and_data(ri->tydesc, ri->data,\n+                                                    arena);\n         shape::log log(task, true, ri->tydesc->shape, params,\n                        ri->tydesc->shape_tables, ri->data, std::cerr);\n         log.walk();"}, {"sha": "e8dbffd74a2c344d611309dd7f032fbdf71e589d", "filename": "src/rt/rust_obstack.cpp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9/src%2Frt%2Frust_obstack.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9/src%2Frt%2Frust_obstack.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_obstack.cpp?ref=0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9", "patch": "@@ -160,12 +160,13 @@ rust_obstack::dump() const {\n     iterator b = begin(), e = end();\n     while (b != e) {\n         std::pair<const type_desc *,void *> data = *b;\n+        uint8_t *dp = reinterpret_cast<uint8_t *>(data.second);\n+\n         shape::arena arena;\n         shape::type_param *params =\n-            shape::type_param::from_tydesc(&data.first, arena);\n+            shape::type_param::from_tydesc_and_data(data.first, dp, arena);\n         shape::log log(task, true, data.first->shape, params,\n-                       data.first->shape_tables,\n-                       reinterpret_cast<uint8_t *>(data.second), std::cerr);\n+                       data.first->shape_tables, dp, std::cerr);\n         log.walk();\n         std::cerr << \"\\n\";\n "}, {"sha": "994c4df0fb998e83579877f03091b709c3cfc218", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9", "patch": "@@ -37,7 +37,10 @@ type_param::make(const type_desc **tydescs, unsigned n_tydescs,\n         const type_desc *subtydesc = tydescs[i];\n         ptrs[i].shape = subtydesc->shape;\n         ptrs[i].tables = subtydesc->shape_tables;\n-        ptrs[i].params = from_tydesc(&subtydesc, arena);\n+\n+        // FIXME: Doesn't handle a type-parametric object closing over a\n+        // type-parametric object type properly.\n+        ptrs[i].params = from_tydesc(subtydesc, arena);\n     }\n     return ptrs;\n }\n@@ -531,8 +534,12 @@ upcall_cmp_type(int8_t *result, rust_task *task, const type_desc *tydesc,\n                 const type_desc **subtydescs, uint8_t *data_0,\n                 uint8_t *data_1, uint8_t cmp_type) {\n     shape::arena arena;\n+\n+    // FIXME: This may well be broken when comparing two closures or objects\n+    // that close over different sets of type parameters.\n     shape::type_param *params =\n-        shape::type_param::from_tydesc(&tydesc, arena);\n+        shape::type_param::from_tydesc_and_data(tydesc, data_0, arena);\n+\n     shape::cmp cmp(task, true, tydesc->shape, params, tydesc->shape_tables,\n                    data_0, data_1);\n     cmp.walk();\n@@ -552,7 +559,7 @@ upcall_log_type(rust_task *task, const type_desc *tydesc, uint8_t *data,\n \n     shape::arena arena;\n     shape::type_param *params =\n-        shape::type_param::from_tydesc(&tydesc, arena);\n+        shape::type_param::from_tydesc_and_data(tydesc, data, arena);\n \n     std::stringstream ss;\n     shape::log log(task, true, tydesc->shape, params, tydesc->shape_tables,"}, {"sha": "e71c5c8188f4454deee173dbd04727018c083565", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=0c4e0fdfae2fad4a132bdfef3cb856ec5dde84c9", "patch": "@@ -310,27 +310,44 @@ class type_param {\n     }\n \n     // Creates type parameters from a type descriptor.\n-    static inline type_param *from_tydesc(const type_desc **tydesc,\n+    static inline type_param *from_tydesc(const type_desc *tydesc,\n                                           arena &arena) {\n-        if ((*tydesc)->n_obj_params) {\n-            uintptr_t n_obj_params = (*tydesc)->n_obj_params;\n+        // In order to find the type parameters of objects and functions, we\n+        // have to actually have the data pointer, since we don't statically\n+        // know from the type of an object or function which type parameters\n+        // it closes over.\n+        assert(!tydesc->n_obj_params && \"Type-parametric objects and \"\n+               \"functions must go through from_tydesc_and_data() instead!\");\n+\n+        return make(tydesc->first_param, tydesc->n_params, arena);\n+    }\n+\n+    static type_param *from_tydesc_and_data(const type_desc *tydesc,\n+                                            uint8_t *dp, arena &arena) {\n+        if (tydesc->n_obj_params) {\n+            uintptr_t n_obj_params = tydesc->n_obj_params;\n             const type_desc **first_param;\n             if (n_obj_params & 0x80000000) {\n                 // Function closure.\n                 DPRINT(\"n_obj_params FN %lu, tydesc %p, starting at %p\\n\",\n-                       (unsigned long)n_obj_params, tydesc, tydesc + 4);\n+                       (unsigned long)n_obj_params, tydesc,\n+                       dp + sizeof(uintptr_t) + tydesc->size);\n                 n_obj_params &= 0x7fffffff;\n+                // FIXME: Is this right?\n                 first_param = (const type_desc **)\n-                    ((uint8_t *)(tydesc + 4) + (*tydesc)->size);\n+                    (dp + sizeof(uintptr_t) + tydesc->size);\n             } else {\n                 // Object closure.\n                 DPRINT(\"n_obj_params OBJ %lu, tydesc %p, starting at %p\\n\",\n-                       (unsigned long)n_obj_params, tydesc, tydesc + 4);\n-                first_param = tydesc + 4;\n+                       (unsigned long)n_obj_params, tydesc,\n+                       dp + sizeof(uintptr_t) * 2);\n+                first_param = (const type_desc **)\n+                    (dp + sizeof(uintptr_t) * 2);\n             }\n+            return make(first_param, n_obj_params, arena);\n         }\n \n-        return make((*tydesc)->first_param, (*tydesc)->n_params, arena);\n+        return make(tydesc->first_param, tydesc->n_params, arena);\n     }\n };\n "}]}