{"sha": "3e433738fb1ab9f353c943d60061d72024c6af07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNDMzNzM4ZmIxYWI5ZjM1M2M5NDNkNjAwNjFkNzIwMjRjNmFmMDc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-20T00:00:23Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-20T07:13:11Z"}, "message": "Rollup merge of #23504 - alexcrichton:parse-error-not-unit, r=aturon\n\n The IP and socket address types all had `FromStr` implemented but the\nimplementations were not marked stable, nor was the error type returned ready to\nbe properly stabilized.\n\nThis commit marks the implementations of `FromStr` as stable and also renamed\nthe `ParseError` structure to `AddrParseError`. The error is now also an opaque\nstructure that cannot be constructed outside the standard library.\n\ncc #22949\n[breaking-change]", "tree": {"sha": "8c6314956535ba90fef583b6eac58e5389b9106a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c6314956535ba90fef583b6eac58e5389b9106a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e433738fb1ab9f353c943d60061d72024c6af07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e433738fb1ab9f353c943d60061d72024c6af07", "html_url": "https://github.com/rust-lang/rust/commit/3e433738fb1ab9f353c943d60061d72024c6af07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e433738fb1ab9f353c943d60061d72024c6af07/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4294327886ed7c1a21148f86941418a8a5950381", "url": "https://api.github.com/repos/rust-lang/rust/commits/4294327886ed7c1a21148f86941418a8a5950381", "html_url": "https://github.com/rust-lang/rust/commit/4294327886ed7c1a21148f86941418a8a5950381"}, {"sha": "f2e3c7469b56cd744e613a05a1ea73f441f66401", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2e3c7469b56cd744e613a05a1ea73f441f66401", "html_url": "https://github.com/rust-lang/rust/commit/f2e3c7469b56cd744e613a05a1ea73f441f66401"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "543fdd16f41e307d3b185f7e8f39232ad494e6b0", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e433738fb1ab9f353c943d60061d72024c6af07/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e433738fb1ab9f353c943d60061d72024c6af07/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=3e433738fb1ab9f353c943d60061d72024c6af07", "patch": "@@ -25,6 +25,7 @@ pub use self::ip::{Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};\n pub use self::addr::{SocketAddr, SocketAddrV4, SocketAddrV6, ToSocketAddrs};\n pub use self::tcp::{TcpStream, TcpListener};\n pub use self::udp::UdpSocket;\n+pub use self::parser::AddrParseError;\n \n mod ip;\n mod addr;"}, {"sha": "e7509834c7b7866a83b2f52f564c40816c76781a", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3e433738fb1ab9f353c943d60061d72024c6af07/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e433738fb1ab9f353c943d60061d72024c6af07/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=3e433738fb1ab9f353c943d60061d72024c6af07", "patch": "@@ -296,35 +296,40 @@ impl<'a> Parser<'a> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromStr for Ipv4Addr {\n-    type Err = ParseError;\n-    fn from_str(s: &str) -> Result<Ipv4Addr, ParseError> {\n+    type Err = AddrParseError;\n+    fn from_str(s: &str) -> Result<Ipv4Addr, AddrParseError> {\n         match Parser::new(s).read_till_eof(|p| p.read_ipv4_addr()) {\n             Some(s) => Ok(s),\n-            None => Err(ParseError)\n+            None => Err(AddrParseError(()))\n         }\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromStr for Ipv6Addr {\n-    type Err = ParseError;\n-    fn from_str(s: &str) -> Result<Ipv6Addr, ParseError> {\n+    type Err = AddrParseError;\n+    fn from_str(s: &str) -> Result<Ipv6Addr, AddrParseError> {\n         match Parser::new(s).read_till_eof(|p| p.read_ipv6_addr()) {\n             Some(s) => Ok(s),\n-            None => Err(ParseError)\n+            None => Err(AddrParseError(()))\n         }\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromStr for SocketAddr {\n-    type Err = ParseError;\n-    fn from_str(s: &str) -> Result<SocketAddr, ParseError> {\n+    type Err = AddrParseError;\n+    fn from_str(s: &str) -> Result<SocketAddr, AddrParseError> {\n         match Parser::new(s).read_till_eof(|p| p.read_socket_addr()) {\n             Some(s) => Ok(s),\n-            None => Err(ParseError),\n+            None => Err(AddrParseError(())),\n         }\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Copy)]\n-pub struct ParseError;\n+/// An error returned when parsing an IP address or a socket address.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Debug, Clone, PartialEq)]\n+pub struct AddrParseError(());"}]}