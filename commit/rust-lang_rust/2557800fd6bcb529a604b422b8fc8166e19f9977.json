{"sha": "2557800fd6bcb529a604b422b8fc8166e19f9977", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NTc4MDBmZDZiY2I1MjlhNjA0YjQyMmI4ZmM4MTY2ZTE5Zjk5Nzc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-06-22T08:54:26Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-10T10:20:56Z"}, "message": "Split DepNode::ItemSignature into non-overlapping variants.", "tree": {"sha": "2f618dd0cdde4cd248fd8e2ee1c1782be8ff2a93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f618dd0cdde4cd248fd8e2ee1c1782be8ff2a93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2557800fd6bcb529a604b422b8fc8166e19f9977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2557800fd6bcb529a604b422b8fc8166e19f9977", "html_url": "https://github.com/rust-lang/rust/commit/2557800fd6bcb529a604b422b8fc8166e19f9977", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2557800fd6bcb529a604b422b8fc8166e19f9977/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d84693b93dae3958e3504f817face0184c5c3fdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d84693b93dae3958e3504f817face0184c5c3fdd", "html_url": "https://github.com/rust-lang/rust/commit/d84693b93dae3958e3504f817face0184c5c3fdd"}], "stats": {"total": 104, "additions": 63, "deletions": 41}, "files": [{"sha": "c8d0362f17c8ed9a4f026a9e95b69bbe48f1319f", "filename": "src/librustc/dep_graph/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2557800fd6bcb529a604b422b8fc8166e19f9977/src%2Flibrustc%2Fdep_graph%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/2557800fd6bcb529a604b422b8fc8166e19f9977/src%2Flibrustc%2Fdep_graph%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2FREADME.md?ref=2557800fd6bcb529a604b422b8fc8166e19f9977", "patch": "@@ -16,7 +16,7 @@ The nodes of the graph are defined by the enum `DepNode`. They represent\n one of three things:\n \n 1. HIR nodes (like `Hir(DefId)`) represent the HIR input itself.\n-2. Data nodes (like `ItemSignature(DefId)`) represent some computed\n+2. Data nodes (like `TypeOfItem(DefId)`) represent some computed\n    information about a particular item.\n 3. Procedure nodes (like `CoherenceCheckTrait(DefId)`) represent some\n    procedure that is executing. Usually this procedure is\n@@ -289,7 +289,7 @@ to see something like:\n \n     Hir(foo) -> Collect(bar)\n     Collect(bar) -> TypeckTables(bar)\n-    \n+\n That first edge looks suspicious to you. So you set\n `RUST_FORBID_DEP_GRAPH_EDGE` to `Hir&foo -> Collect&bar`, re-run, and\n then observe the backtrace. Voila, bug fixed!"}, {"sha": "887a7a4fe04bd3ef14767e3f0aab58abddccd8ff", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2557800fd6bcb529a604b422b8fc8166e19f9977/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2557800fd6bcb529a604b422b8fc8166e19f9977/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=2557800fd6bcb529a604b422b8fc8166e19f9977", "patch": "@@ -387,11 +387,21 @@ define_dep_nodes!(\n \n     // Nodes representing bits of computed IR in the tcx. Each shared\n     // table in the tcx (or elsewhere) maps to one of these\n-    // nodes. Often we map multiple tables to the same node if there\n-    // is no point in distinguishing them (e.g., both the type and\n-    // predicates for an item wind up in `ItemSignature`).\n+    // nodes.\n     AssociatedItems(DefId),\n-    ItemSignature(DefId),\n+    TypeOfItem(DefId),\n+    GenericsOfItem(DefId),\n+    PredicatesOfItem(DefId),\n+    SuperPredicatesOfItem(DefId),\n+    TraitDefOfItem(DefId),\n+    AdtDefOfItem(DefId),\n+    IsDefaultImpl(DefId),\n+    ImplTraitRef(DefId),\n+    ImplPolarity(DefId),\n+    ClosureKind(DefId),\n+    FnSignature(DefId),\n+    CoerceUnsizedInfo(DefId),\n+\n     ItemVarianceConstraints(DefId),\n     ItemVariances(DefId),\n     IsConstFn(DefId),"}, {"sha": "b584143c52774df6184b1f58955f40e299cf873b", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2557800fd6bcb529a604b422b8fc8166e19f9977/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2557800fd6bcb529a604b422b8fc8166e19f9977/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=2557800fd6bcb529a604b422b8fc8166e19f9977", "patch": "@@ -796,28 +796,28 @@ macro_rules! define_provider_struct {\n // the driver creates (using several `rustc_*` crates).\n define_maps! { <'tcx>\n     /// Records the type of every item.\n-    [] type_of: ItemSignature(DefId) -> Ty<'tcx>,\n+    [] type_of: TypeOfItem(DefId) -> Ty<'tcx>,\n \n     /// Maps from the def-id of an item (trait/struct/enum/fn) to its\n     /// associated generics and predicates.\n-    [] generics_of: ItemSignature(DefId) -> &'tcx ty::Generics,\n-    [] predicates_of: ItemSignature(DefId) -> ty::GenericPredicates<'tcx>,\n+    [] generics_of: GenericsOfItem(DefId) -> &'tcx ty::Generics,\n+    [] predicates_of: PredicatesOfItem(DefId) -> ty::GenericPredicates<'tcx>,\n \n     /// Maps from the def-id of a trait to the list of\n     /// super-predicates. This is a subset of the full list of\n     /// predicates. We store these in a separate map because we must\n     /// evaluate them even during type conversion, often before the\n     /// full predicates are available (note that supertraits have\n     /// additional acyclicity requirements).\n-    [] super_predicates_of: ItemSignature(DefId) -> ty::GenericPredicates<'tcx>,\n+    [] super_predicates_of: SuperPredicatesOfItem(DefId) -> ty::GenericPredicates<'tcx>,\n \n     /// To avoid cycles within the predicates of a single item we compute\n     /// per-type-parameter predicates for resolving `T::AssocTy`.\n     [] type_param_predicates: type_param_predicates((DefId, DefId))\n         -> ty::GenericPredicates<'tcx>,\n \n-    [] trait_def: ItemSignature(DefId) -> &'tcx ty::TraitDef,\n-    [] adt_def: ItemSignature(DefId) -> &'tcx ty::AdtDef,\n+    [] trait_def: TraitDefOfItem(DefId) -> &'tcx ty::TraitDef,\n+    [] adt_def: AdtDefOfItem(DefId) -> &'tcx ty::AdtDef,\n     [] adt_destructor: AdtDestructor(DefId) -> Option<ty::Destructor>,\n     [] adt_sized_constraint: SizedConstraint(DefId) -> &'tcx [Ty<'tcx>],\n     [] adt_dtorck_constraint: DtorckConstraint(DefId) -> ty::DtorckConstraint<'tcx>,\n@@ -829,7 +829,7 @@ define_maps! { <'tcx>\n     [] is_foreign_item: IsForeignItem(DefId) -> bool,\n \n     /// True if this is a default impl (aka impl Foo for ..)\n-    [] is_default_impl: ItemSignature(DefId) -> bool,\n+    [] is_default_impl: IsDefaultImpl(DefId) -> bool,\n \n     /// Get a map with the variance of every item; use `item_variance`\n     /// instead.\n@@ -845,8 +845,8 @@ define_maps! { <'tcx>\n     /// Maps from a trait item to the trait item \"descriptor\"\n     [] associated_item: AssociatedItems(DefId) -> ty::AssociatedItem,\n \n-    [] impl_trait_ref: ItemSignature(DefId) -> Option<ty::TraitRef<'tcx>>,\n-    [] impl_polarity: ItemSignature(DefId) -> hir::ImplPolarity,\n+    [] impl_trait_ref: ImplTraitRef(DefId) -> Option<ty::TraitRef<'tcx>>,\n+    [] impl_polarity: ImplPolarity(DefId) -> hir::ImplPolarity,\n \n     /// Maps a DefId of a type to a list of its inherent impls.\n     /// Contains implementations of methods that are inherent to a type.\n@@ -877,13 +877,13 @@ define_maps! { <'tcx>\n \n     /// Type of each closure. The def ID is the ID of the\n     /// expression defining the closure.\n-    [] closure_kind: ItemSignature(DefId) -> ty::ClosureKind,\n+    [] closure_kind: ClosureKind(DefId) -> ty::ClosureKind,\n \n     /// The signature of functions and closures.\n-    [] fn_sig: ItemSignature(DefId) -> ty::PolyFnSig<'tcx>,\n+    [] fn_sig: FnSignature(DefId) -> ty::PolyFnSig<'tcx>,\n \n     /// Caches CoerceUnsized kinds for impls on custom types.\n-    [] coerce_unsized_info: ItemSignature(DefId)\n+    [] coerce_unsized_info: CoerceUnsizedInfo(DefId)\n         -> ty::adjustment::CoerceUnsizedInfo,\n \n     [] typeck_item_bodies: typeck_item_bodies_dep_node(CrateNum) -> CompileResult,"}, {"sha": "647605ae4383e823623bf7314139624dc798b0bd", "filename": "src/test/compile-fail/dep-graph-struct-signature.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2557800fd6bcb529a604b422b8fc8166e19f9977/src%2Ftest%2Fcompile-fail%2Fdep-graph-struct-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2557800fd6bcb529a604b422b8fc8166e19f9977/src%2Ftest%2Fcompile-fail%2Fdep-graph-struct-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-struct-signature.rs?ref=2557800fd6bcb529a604b422b8fc8166e19f9977", "patch": "@@ -34,54 +34,64 @@ struct WontChange {\n mod signatures {\n     use WillChange;\n \n-    #[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n+    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n+    #[rustc_then_this_would_need(AssociatedItems)] //~ ERROR no path\n+    #[rustc_then_this_would_need(TraitDefOfItem)] //~ ERROR no path\n     trait Bar {\n-        #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n+        #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n         fn do_something(x: WillChange);\n     }\n \n-    #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n+    #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n     fn some_fn(x: WillChange) { }\n \n-    #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n+    #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n     fn new_foo(x: u32, y: u32) -> WillChange {\n         WillChange { x: x, y: y }\n     }\n \n-    #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n     impl WillChange {\n+        #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n+        #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n         fn new(x: u32, y: u32) -> WillChange { loop { } }\n     }\n \n-    #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n     impl WillChange {\n+        #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n+        #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n         fn method(&self, x: u32) { }\n     }\n \n     struct WillChanges {\n-        #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n+        #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n         x: WillChange,\n-        #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n+        #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n         y: WillChange\n     }\n \n     // The fields change, not the type itself.\n-    #[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n+    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n     fn indirect(x: WillChanges) { }\n }\n \n mod invalid_signatures {\n     use WontChange;\n \n-    #[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n+    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n     trait A {\n+        #[rustc_then_this_would_need(FnSignature)] //~ ERROR no path\n         fn do_something_else_twice(x: WontChange);\n     }\n \n-    #[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n+    #[rustc_then_this_would_need(FnSignature)] //~ ERROR no path\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR no path\n     fn b(x: WontChange) { }\n \n-    #[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path from `WillChange`\n+    #[rustc_then_this_would_need(FnSignature)] //~ ERROR no path from `WillChange`\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR no path from `WillChange`\n     fn c(x: u32) { }\n }\n-"}, {"sha": "dca1fa4d98f95d97226ff11a32a79306e26cdb45", "filename": "src/test/compile-fail/dep-graph-type-alias.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2557800fd6bcb529a604b422b8fc8166e19f9977/src%2Ftest%2Fcompile-fail%2Fdep-graph-type-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2557800fd6bcb529a604b422b8fc8166e19f9977/src%2Ftest%2Fcompile-fail%2Fdep-graph-type-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdep-graph-type-alias.rs?ref=2557800fd6bcb529a604b422b8fc8166e19f9977", "patch": "@@ -25,40 +25,42 @@ type TypeAlias = u32;\n \n // The type alias directly affects the type of the field,\n // not the enclosing struct:\n-#[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n+#[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n struct Struct {\n-    #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n     x: TypeAlias,\n     y: u32\n }\n \n-#[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n+#[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n enum Enum {\n     Variant1 {\n-        #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n+        #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n         t: TypeAlias\n     },\n     Variant2(i32)\n }\n \n-#[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n+#[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n trait Trait {\n-    #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n+    #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n     fn method(&self, _: TypeAlias);\n }\n \n struct SomeType;\n \n-#[rustc_then_this_would_need(ItemSignature)] //~ ERROR no path\n+#[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n impl SomeType {\n-    #[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n+    #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n     fn method(&self, _: TypeAlias) {}\n }\n \n-#[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n+#[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n type TypeAlias2 = TypeAlias;\n \n-#[rustc_then_this_would_need(ItemSignature)] //~ ERROR OK\n+#[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n+#[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n fn function(_: TypeAlias) {\n \n }"}]}