{"sha": "57b281533d4bdd93744562cf1d39ebc090621151", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YjI4MTUzM2Q0YmRkOTM3NDQ1NjJjZjFkMzllYmMwOTA2MjExNTE=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-17T19:56:39Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-17T19:58:18Z"}, "message": "Some misc cleanups:\n* Remove unused argument\n* Move option.t wrapping to outer functions.", "tree": {"sha": "b8e023d903b376a55372dfda8beabdadea8c92f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8e023d903b376a55372dfda8beabdadea8c92f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57b281533d4bdd93744562cf1d39ebc090621151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57b281533d4bdd93744562cf1d39ebc090621151", "html_url": "https://github.com/rust-lang/rust/commit/57b281533d4bdd93744562cf1d39ebc090621151", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57b281533d4bdd93744562cf1d39ebc090621151/comments", "author": null, "committer": null, "parents": [{"sha": "4b8779ea9505177a69d9d731fcf871438660312f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b8779ea9505177a69d9d731fcf871438660312f", "html_url": "https://github.com/rust-lang/rust/commit/4b8779ea9505177a69d9d731fcf871438660312f"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "3ca11fede74f6b84d75d598968d0fa6b746fc09a", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/57b281533d4bdd93744562cf1d39ebc090621151/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57b281533d4bdd93744562cf1d39ebc090621151/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=57b281533d4bdd93744562cf1d39ebc090621151", "patch": "@@ -158,67 +158,67 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[def_wrap] {\n \n     // log \"resolving name \" + i;\n \n-    fn found_def_item(@ast.item i) -> option.t[def_wrap] {\n+    fn found_def_item(@ast.item i) -> def_wrap {\n         alt (i.node) {\n             case (ast.item_const(_, _, _, ?id, _)) {\n-                ret some[def_wrap](def_wrap_other(ast.def_const(id)));\n+                ret def_wrap_other(ast.def_const(id));\n             }\n             case (ast.item_fn(_, _, _, ?id, _)) {\n-                ret some[def_wrap](def_wrap_other(ast.def_fn(id)));\n+                ret def_wrap_other(ast.def_fn(id));\n             }\n             case (ast.item_mod(_, _, ?id)) {\n-                ret some[def_wrap](def_wrap_mod(i));\n+                ret def_wrap_mod(i);\n             }\n             case (ast.item_ty(_, _, _, ?id, _)) {\n-                ret some[def_wrap](def_wrap_other(ast.def_ty(id)));\n+                ret def_wrap_other(ast.def_ty(id));\n             }\n             case (ast.item_tag(_, _, _, ?id)) {\n-                ret some[def_wrap](def_wrap_other(ast.def_ty(id)));\n+                ret def_wrap_other(ast.def_ty(id));\n             }\n             case (ast.item_obj(_, _, _, ?id, _)) {\n-                ret some[def_wrap](def_wrap_other(ast.def_obj(id)));\n+                ret def_wrap_other(ast.def_obj(id));\n             }\n         }\n     }\n \n-    fn found_decl_stmt(@ast.stmt s) -> option.t[def_wrap] {\n+    fn found_decl_stmt(@ast.stmt s) -> def_wrap {\n         alt (s.node) {\n             case (ast.stmt_decl(?d)) {\n                 alt (d.node) {\n                     case (ast.decl_local(?loc)) {\n                         auto t = ast.def_local(loc.id);\n-                        ret some[def_wrap](def_wrap_other(t));\n+                        ret def_wrap_other(t);\n                     }\n                     case (ast.decl_item(?it)) {\n                         ret found_def_item(it);\n                     }\n                 }\n             }\n         }\n-        ret none[def_wrap];\n+        fail;\n     }\n \n-    fn found_def_view(&env e, @ast.view_item i) -> option.t[def_wrap] {\n+    fn found_def_view(@ast.view_item i) -> def_wrap {\n         alt (i.node) {\n             case (ast.view_item_use(_, _, ?id)) {\n-                ret some[def_wrap](def_wrap_use(i));\n+                ret def_wrap_use(i);\n             }\n             case (ast.view_item_import(?idents,?d)) {\n-                ret some[def_wrap](def_wrap_import(i));\n+                ret def_wrap_import(i);\n             }\n         }\n         fail;\n     }\n \n-    fn check_mod(&env e, ast.ident i, ast._mod m) -> option.t[def_wrap] {\n+    fn check_mod(ast.ident i, ast._mod m) -> option.t[def_wrap] {\n         alt (m.index.find(i)) {\n             case (some[ast.mod_index_entry](?ent)) {\n                 alt (ent) {\n                     case (ast.mie_view_item(?view_item)) {\n-                        ret found_def_view(e, view_item);\n+                        ret some(found_def_view(view_item));\n                     }\n                     case (ast.mie_item(?item)) {\n-                        ret found_def_item(item);\n+                        ret some(found_def_item(item));\n                     }\n                     case (ast.mie_tag_variant(?item, ?variant_idx)) {\n                         alt (item.node) {\n@@ -241,11 +241,11 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[def_wrap] {\n     }\n \n \n-    fn in_scope(ast.ident i, env e, &scope s) -> option.t[def_wrap] {\n+    fn in_scope(ast.ident i, &scope s) -> option.t[def_wrap] {\n         alt (s) {\n \n             case (scope_crate(?c)) {\n-                ret check_mod(e, i, c.node.module);\n+                ret check_mod(i, c.node.module);\n             }\n \n             case (scope_item(?it)) {\n@@ -254,32 +254,32 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[def_wrap] {\n                         for (ast.arg a in f.inputs) {\n                             if (_str.eq(a.ident, i)) {\n                                 auto t = ast.def_arg(a.id);\n-                                ret some[def_wrap](def_wrap_other(t));\n+                                ret some(def_wrap_other(t));\n                             }\n                         }\n                         for (ast.ty_param tp in ty_params) {\n                             if (_str.eq(tp.ident, i)) {\n                                 auto t = ast.def_ty_arg(tp.id);\n-                                ret some[def_wrap](def_wrap_other(t));\n+                                ret some(def_wrap_other(t));\n                             }\n                         }\n                     }\n                     case (ast.item_obj(_, ?ob, ?ty_params, _, _)) {\n                         for (ast.obj_field f in ob.fields) {\n                             if (_str.eq(f.ident, i)) {\n                                 auto t = ast.def_obj_field(f.id);\n-                                ret some[def_wrap](def_wrap_other(t));\n+                                ret some(def_wrap_other(t));\n                             }\n                         }\n                         for (ast.ty_param tp in ty_params) {\n                             if (_str.eq(tp.ident, i)) {\n                                 auto t = ast.def_ty_arg(tp.id);\n-                                ret some[def_wrap](def_wrap_other(t));\n+                                ret some(def_wrap_other(t));\n                             }\n                         }\n                     }\n                     case (ast.item_mod(_, ?m, _)) {\n-                        ret check_mod(e, i, m);\n+                        ret check_mod(i, m);\n                     }\n                     case (_) { /* fall through */ }\n                 }\n@@ -288,7 +288,8 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[def_wrap] {\n             case (scope_block(?b)) {\n                 alt (b.node.index.find(i)) {\n                     case (some[uint](?ix)) {\n-                        ret found_decl_stmt(b.node.stmts.(ix));\n+                        auto x = found_decl_stmt(b.node.stmts.(ix));\n+                        ret some(x);\n                     }\n                     case (_) { /* fall through */  }\n                 }\n@@ -308,7 +309,7 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[def_wrap] {\n     }\n \n     ret std.list.find[scope,def_wrap](e.scopes,\n-                                      bind in_scope(i, e, _));\n+                                      bind in_scope(i, _));\n }\n \n fn fold_pat_tag(&env e, &span sp, import_map index, ident i,"}]}