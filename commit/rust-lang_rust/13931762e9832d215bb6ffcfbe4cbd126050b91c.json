{"sha": "13931762e9832d215bb6ffcfbe4cbd126050b91c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzOTMxNzYyZTk4MzJkMjE1YmI2ZmZjZmJlNGNiZDEyNjA1MGI5MWM=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-05-27T16:07:23Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-06-30T22:52:33Z"}, "message": "Loosened rules involving statics mentioning other statics.\n\nUpdated tests accordingly.", "tree": {"sha": "f6ea417f7e3e17abd86ba5752d08a46304d29163", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6ea417f7e3e17abd86ba5752d08a46304d29163"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13931762e9832d215bb6ffcfbe4cbd126050b91c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13931762e9832d215bb6ffcfbe4cbd126050b91c", "html_url": "https://github.com/rust-lang/rust/commit/13931762e9832d215bb6ffcfbe4cbd126050b91c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13931762e9832d215bb6ffcfbe4cbd126050b91c/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c89b023020e4c6b04acfc877a115c95ec7747b", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c89b023020e4c6b04acfc877a115c95ec7747b", "html_url": "https://github.com/rust-lang/rust/commit/74c89b023020e4c6b04acfc877a115c95ec7747b"}], "stats": {"total": 242, "additions": 27, "deletions": 215}, "files": [{"sha": "3c751d52b066498f93102a1aaf04c57bf2f9669c", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/13931762e9832d215bb6ffcfbe4cbd126050b91c/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13931762e9832d215bb6ffcfbe4cbd126050b91c/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=13931762e9832d215bb6ffcfbe4cbd126050b91c", "patch": "@@ -1145,33 +1145,6 @@ fn main() {\n ```\n \"##,\n \n-E0394: r##\"\n-A static was referred to by value by another static.\n-\n-Erroneous code examples:\n-\n-```compile_fail,E0394\n-static A: u32 = 0;\n-static B: u32 = A; // error: cannot refer to other statics by value, use the\n-                   //        address-of operator or a constant instead\n-```\n-\n-A static cannot be referred by value. To fix this issue, either use a\n-constant:\n-\n-```\n-const A: u32 = 0; // `A` is now a constant\n-static B: u32 = A; // ok!\n-```\n-\n-Or refer to `A` by reference:\n-\n-```\n-static A: u32 = 0;\n-static B: &'static u32 = &A; // ok!\n-```\n-\"##,\n-\n E0395: r##\"\n The value assigned to a constant scalar must be known at compile time,\n which is not the case when comparing raw pointers.\n@@ -1333,34 +1306,6 @@ Remember this solution is unsafe! You will have to ensure that accesses to the\n cell are synchronized.\n \"##,\n \n-E0494: r##\"\n-A reference of an interior static was assigned to another const/static.\n-Erroneous code example:\n-\n-```compile_fail,E0494\n-struct Foo {\n-    a: u32\n-}\n-\n-static S : Foo = Foo { a : 0 };\n-static A : &'static u32 = &S.a;\n-// error: cannot refer to the interior of another static, use a\n-//        constant instead\n-```\n-\n-The \"base\" variable has to be a const if you want another static/const variable\n-to refer to one of its fields. Example:\n-\n-```\n-struct Foo {\n-    a: u32\n-}\n-\n-const S : Foo = Foo { a : 0 };\n-static A : &'static u32 = &S.a; // ok!\n-```\n-\"##,\n-\n E0499: r##\"\n A variable was borrowed as mutable more than once. Erroneous code example:\n "}, {"sha": "66106c7eca149c7cffb889a20fdcc7240f87f228", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 26, "deletions": 97, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/13931762e9832d215bb6ffcfbe4cbd126050b91c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13931762e9832d215bb6ffcfbe4cbd126050b91c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=13931762e9832d215bb6ffcfbe4cbd126050b91c", "patch": "@@ -56,19 +56,13 @@ bitflags! {\n         // Function argument.\n         const FN_ARGUMENT       = 1 << 2;\n \n-        // Static place or move from a static.\n-        const STATIC            = 1 << 3;\n-\n-        // Reference to a static.\n-        const STATIC_REF        = 1 << 4;\n-\n         // Not constant at all - non-`const fn` calls, asm!,\n         // pointer comparisons, ptr-to-int casts, etc.\n-        const NOT_CONST         = 1 << 5;\n+        const NOT_CONST         = 1 << 3;\n \n         // Refers to temporaries which cannot be promoted as\n         // promote_consts decided they weren't simple enough.\n-        const NOT_PROMOTABLE    = 1 << 6;\n+        const NOT_PROMOTABLE    = 1 << 4;\n \n         // Const items can only have MUTABLE_INTERIOR\n         // and NOT_PROMOTABLE without producing an error.\n@@ -226,42 +220,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         self.add(original);\n     }\n \n-    /// Check if a Local with the current qualifications is promotable.\n-    fn can_promote(&self, qualif: Qualif) -> bool {\n-        // References to statics are allowed, but only in other statics.\n-        if self.mode == Mode::Static || self.mode == Mode::StaticMut {\n-            (qualif - Qualif::STATIC_REF).is_empty()\n-        } else {\n-            qualif.is_empty()\n-        }\n-    }\n-\n-    /// Check if a Place with the current qualifications could\n-    /// be consumed, by either an operand or a Deref projection.\n-    fn try_consume(&mut self) -> bool {\n-        if self.qualif.intersects(Qualif::STATIC) && self.mode != Mode::Fn {\n-            let msg = if self.mode == Mode::Static ||\n-                         self.mode == Mode::StaticMut {\n-                \"cannot refer to other statics by value, use the \\\n-                 address-of operator or a constant instead\"\n-            } else {\n-                \"cannot refer to statics by value, use a constant instead\"\n-            };\n-            struct_span_err!(self.tcx.sess, self.span, E0394, \"{}\", msg)\n-                .span_label(self.span, \"referring to another static by value\")\n-                .note(\"use the address-of operator or a constant instead\")\n-                .emit();\n-\n-            // Replace STATIC with NOT_CONST to avoid further errors.\n-            self.qualif = self.qualif - Qualif::STATIC;\n-            self.add(Qualif::NOT_CONST);\n-\n-            false\n-        } else {\n-            true\n-        }\n-    }\n-\n     /// Assign the current qualification to the given destination.\n     fn assign(&mut self, dest: &Place<'tcx>, location: Location) {\n         trace!(\"assign: {:?}\", dest);\n@@ -305,7 +263,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             }) if self.mir.local_kind(index) == LocalKind::Temp\n                && self.mir.local_decls[index].ty.is_box()\n                && self.local_qualif[index].map_or(false, |qualif| {\n-                    qualif.intersects(Qualif::NOT_CONST)\n+                    qualif.contains(Qualif::NOT_CONST)\n                }) => {\n                 // Part of `box expr`, we should've errored\n                 // already for the Box allocation Rvalue.\n@@ -492,17 +450,21 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n         match *place {\n             Place::Local(ref local) => self.visit_local(local, context, location),\n             Place::Static(ref global) => {\n-                self.add(Qualif::STATIC);\n+                // Only allow statics (not consts) to refer to other statics.\n+                if !(self.mode == Mode::Static || self.mode == Mode::StaticMut) {\n+                    self.add(Qualif::NOT_CONST);\n+                }\n \n                 if self.mode != Mode::Fn {\n-                    for attr in &self.tcx.get_attrs(global.def_id)[..] {\n-                        if attr.check_name(\"thread_local\") {\n-                            span_err!(self.tcx.sess, self.span, E0625,\n-                                      \"thread-local statics cannot be \\\n-                                       accessed at compile-time\");\n-                            self.add(Qualif::NOT_CONST);\n-                            return;\n-                        }\n+                    if self.tcx\n+                           .get_attrs(global.def_id)\n+                           .iter()\n+                           .any(|attr| attr.check_name(\"thread_local\")) {\n+                        span_err!(self.tcx.sess, self.span, E0625,\n+                                    \"thread-local statics cannot be \\\n+                                    accessed at compile-time\");\n+                        self.add(Qualif::NOT_CONST);\n+                        return;\n                     }\n                 }\n \n@@ -527,15 +489,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     this.super_place(place, context, location);\n                     match proj.elem {\n                         ProjectionElem::Deref => {\n-                            if !this.try_consume() {\n-                                return;\n-                            }\n-\n-                            if this.qualif.intersects(Qualif::STATIC_REF) {\n-                                this.qualif = this.qualif - Qualif::STATIC_REF;\n-                                this.add(Qualif::STATIC);\n-                            }\n-\n                             this.add(Qualif::NOT_CONST);\n \n                             let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n@@ -573,11 +526,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                         this.not_const();\n                                     }\n                                 }\n-                            } else if this.qualif.intersects(Qualif::STATIC) {\n-                                span_err!(this.tcx.sess, this.span, E0494,\n-                                          \"cannot refer to the interior of another \\\n-                                           static, use a constant instead\");\n                             }\n+\n                             let ty = place.ty(this.mir, this.tcx).to_ty(this.tcx);\n                             this.qualif.restrict(ty, this.tcx, this.param_env);\n                         }\n@@ -599,7 +549,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             Operand::Move(_) => {\n                 self.nest(|this| {\n                     this.super_operand(operand, location);\n-                    this.try_consume();\n                 });\n \n                 // Mark the consumed locals to indicate later drops are noops.\n@@ -651,14 +600,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                         region,\n                         kind\n                     }, location);\n-                    if !this.try_consume() {\n-                        return;\n-                    }\n-\n-                    if this.qualif.intersects(Qualif::STATIC_REF) {\n-                        this.qualif = this.qualif - Qualif::STATIC_REF;\n-                        this.add(Qualif::STATIC);\n-                    }\n                 });\n             } else {\n                 self.super_rvalue(rvalue, location);\n@@ -678,22 +619,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             Rvalue::Cast(CastKind::UnsafeFnPointer, ..) |\n             Rvalue::Cast(CastKind::ClosureFnPointer, ..) |\n             Rvalue::Cast(CastKind::Unsize, ..) |\n-            Rvalue::Discriminant(..) => {}\n-\n-            Rvalue::Len(_) => {\n-                // Static places in consts would have errored already,\n-                // don't treat length checks as reads from statics.\n-                self.qualif = self.qualif - Qualif::STATIC;\n-            }\n+            Rvalue::Discriminant(..) |\n+            Rvalue::Len(_) => {}\n \n             Rvalue::Ref(_, kind, ref place) => {\n-                // Static places in consts would have errored already,\n-                // only keep track of references to them here.\n-                if self.qualif.intersects(Qualif::STATIC) {\n-                    self.qualif = self.qualif - Qualif::STATIC;\n-                    self.add(Qualif::STATIC_REF);\n-                }\n-\n                 let ty = place.ty(self.mir, self.tcx).to_ty(self.tcx);\n \n                 // Default to forbidding the borrow and/or its promotion,\n@@ -744,7 +673,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     // Constants cannot be borrowed if they contain interior mutability as\n                     // it means that our \"silent insertion of statics\" could change\n                     // initializer values (very bad).\n-                    if self.qualif.intersects(Qualif::MUTABLE_INTERIOR) {\n+                    if self.qualif.contains(Qualif::MUTABLE_INTERIOR) {\n                         // A reference of a MUTABLE_INTERIOR place is instead\n                         // NOT_CONST (see `if forbidden_mut` below), to avoid\n                         // duplicate errors (from reborrowing, for example).\n@@ -781,7 +710,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                 // This allows borrowing fields which don't have\n                                 // `MUTABLE_INTERIOR`, from a type that does, e.g.:\n                                 // `let _: &'static _ = &(Cell::new(1), 2).1;`\n-                                if self.can_promote(qualif - Qualif::MUTABLE_INTERIOR) {\n+                                if (qualif - Qualif::MUTABLE_INTERIOR).is_empty() {\n                                     self.promotion_candidates.push(candidate);\n                                 }\n                             }\n@@ -889,7 +818,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                     if Some(def.did) == self.tcx.lang_items().unsafe_cell_type() {\n                         let ty = rvalue.ty(self.mir, self.tcx);\n                         self.add_type(ty);\n-                        assert!(self.qualif.intersects(Qualif::MUTABLE_INTERIOR));\n+                        assert!(self.qualif.contains(Qualif::MUTABLE_INTERIOR));\n                     }\n                 }\n             }\n@@ -949,7 +878,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                     }\n                     let candidate = Candidate::Argument { bb, index: i };\n                     if is_shuffle && i == 2 {\n-                        if this.can_promote(this.qualif) {\n+                        if this.qualif.is_empty() {\n                             this.promotion_candidates.push(candidate);\n                         } else {\n                             span_err!(this.tcx.sess, this.span, E0526,\n@@ -965,7 +894,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                     if !constant_arguments.contains(&i) {\n                         return\n                     }\n-                    if this.can_promote(this.qualif) {\n+                    if this.qualif.is_empty() {\n                         this.promotion_candidates.push(candidate);\n                     } else {\n                         this.tcx.sess.span_err(this.span,\n@@ -1059,7 +988,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                 // HACK(eddyb) Emulate a bit of dataflow analysis,\n                 // conservatively, that drop elaboration will do.\n                 let needs_drop = if let Place::Local(local) = *place {\n-                    if self.local_qualif[local].map_or(true, |q| q.intersects(Qualif::NEEDS_DROP)) {\n+                    if self.local_qualif[local].map_or(true, |q| q.contains(Qualif::NEEDS_DROP)) {\n                         Some(self.mir.local_decls[local].source_info.span)\n                     } else {\n                         None\n@@ -1111,7 +1040,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                 }\n \n                 // Avoid a generic error for other uses of arguments.\n-                if self.qualif.intersects(Qualif::FN_ARGUMENT) {\n+                if self.qualif.contains(Qualif::FN_ARGUMENT) {\n                     let decl = &self.mir.local_decls[index];\n                     let mut err = feature_err(\n                         &self.tcx.sess.parse_sess,"}, {"sha": "cc652119377165527c78412f12d18924f2840d9a", "filename": "src/test/compile-fail/issue-16538.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13931762e9832d215bb6ffcfbe4cbd126050b91c/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13931762e9832d215bb6ffcfbe4cbd126050b91c/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs?ref=13931762e9832d215bb6ffcfbe4cbd126050b91c", "patch": "@@ -22,7 +22,6 @@ mod Y {\n \n static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n //~^ ERROR `*const usize` cannot be shared between threads safely [E0277]\n-//~| ERROR cannot refer to other statics by value, use the address-of operator or a constant instead\n //~| ERROR E0015\n \n fn main() {}"}, {"sha": "77df168c257c7ff91c7a330c1cf6e33e39684bae", "filename": "src/test/run-pass/issue-17718-borrow-interior.rs", "status": "renamed", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13931762e9832d215bb6ffcfbe4cbd126050b91c/src%2Ftest%2Frun-pass%2Fissue-17718-borrow-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13931762e9832d215bb6ffcfbe4cbd126050b91c/src%2Ftest%2Frun-pass%2Fissue-17718-borrow-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718-borrow-interior.rs?ref=13931762e9832d215bb6ffcfbe4cbd126050b91c", "patch": "@@ -9,17 +9,13 @@\n // except according to those terms.\n \n struct S { a: usize }\n+\n static A: S  = S { a: 3 };\n static B: &'static usize = &A.a;\n-//~^ ERROR: cannot refer to the interior of another static\n static C: &'static usize = &(A.a);\n-//~^ ERROR: cannot refer to the interior of another static\n \n static D: [usize; 1] = [1];\n static E: usize = D[0];\n-//~^ ERROR: cannot refer to the interior of another static\n-//~^^ ERROR: cannot refer to other statics by value\n static F: &'static usize = &D[0];\n-//~^ ERROR: cannot refer to the interior of another static\n \n fn main() {}", "previous_filename": "src/test/compile-fail/issue-17718-borrow-interior.rs"}, {"sha": "dae8e14c5ef181e5a70fdf0a0aa080310c5aadfb", "filename": "src/test/ui/error-codes/E0394.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/74c89b023020e4c6b04acfc877a115c95ec7747b/src%2Ftest%2Fui%2Ferror-codes%2FE0394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c89b023020e4c6b04acfc877a115c95ec7747b/src%2Ftest%2Fui%2Ferror-codes%2FE0394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0394.rs?ref=74c89b023020e4c6b04acfc877a115c95ec7747b", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(warnings)]\n-\n-static A: u32 = 0;\n-static B: u32 = A;\n-//~^ ERROR E0394\n-\n-fn main() {\n-}"}, {"sha": "6c89957de07e3e90b5fedd8e0587158b47ca9366", "filename": "src/test/ui/error-codes/E0394.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74c89b023020e4c6b04acfc877a115c95ec7747b/src%2Ftest%2Fui%2Ferror-codes%2FE0394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c89b023020e4c6b04acfc877a115c95ec7747b/src%2Ftest%2Fui%2Ferror-codes%2FE0394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0394.stderr?ref=74c89b023020e4c6b04acfc877a115c95ec7747b", "patch": "@@ -1,11 +0,0 @@\n-error[E0394]: cannot refer to other statics by value, use the address-of operator or a constant instead\n-  --> $DIR/E0394.rs:14:17\n-   |\n-LL | static B: u32 = A;\n-   |                 ^ referring to another static by value\n-   |\n-   = note: use the address-of operator or a constant instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0394`."}, {"sha": "5f8632ac1c23d29b5e918382384938a60b1b5fa4", "filename": "src/test/ui/error-codes/E0494.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/74c89b023020e4c6b04acfc877a115c95ec7747b/src%2Ftest%2Fui%2Ferror-codes%2FE0494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c89b023020e4c6b04acfc877a115c95ec7747b/src%2Ftest%2Fui%2Ferror-codes%2FE0494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0494.rs?ref=74c89b023020e4c6b04acfc877a115c95ec7747b", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct Foo {\n-    a: u32\n-}\n-\n-static S : Foo = Foo { a : 0 };\n-static A : &'static u32 = &S.a; //~ ERROR E0494\n-\n-fn main() {\n-}"}, {"sha": "65e6b1fe670f11bc794d78ed2629d8bbcc4ad101", "filename": "src/test/ui/error-codes/E0494.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74c89b023020e4c6b04acfc877a115c95ec7747b/src%2Ftest%2Fui%2Ferror-codes%2FE0494.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c89b023020e4c6b04acfc877a115c95ec7747b/src%2Ftest%2Fui%2Ferror-codes%2FE0494.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0494.stderr?ref=74c89b023020e4c6b04acfc877a115c95ec7747b", "patch": "@@ -1,9 +0,0 @@\n-error[E0494]: cannot refer to the interior of another static, use a constant instead\n-  --> $DIR/E0494.rs:16:27\n-   |\n-LL | static A : &'static u32 = &S.a; //~ ERROR E0494\n-   |                           ^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0494`."}]}