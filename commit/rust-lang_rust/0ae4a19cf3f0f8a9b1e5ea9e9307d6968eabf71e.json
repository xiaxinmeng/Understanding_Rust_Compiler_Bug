{"sha": "0ae4a19cf3f0f8a9b1e5ea9e9307d6968eabf71e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZTRhMTljZjNmMGY4YTliMWU1ZWE5ZTkzMDdkNjk2OGVhYmY3MWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-23T01:22:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-23T01:22:44Z"}, "message": "Rollup merge of #65961 - lcnr:typename_of, r=Dylan-DPC\n\nadd fn type_name_of_val\n\nThis function is often useful during testing and mirrors `align_of_val` and `size_of_val`.\n\n# Example\n\nShowing the default type of integers.\n\n```rust\nlet x = 7;\nprintln!(\"per default, integers have the type: {}\", std::any::type_name_of_val(&x));\n```\n\nTo my knowledge this can currently not be done without defining a function similar to `type_name_of_val`.", "tree": {"sha": "56c0560043e512a4f37fb304ff8d99dc27f15afd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56c0560043e512a4f37fb304ff8d99dc27f15afd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ae4a19cf3f0f8a9b1e5ea9e9307d6968eabf71e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2InkCRBK7hj4Ov3rIwAAdHIIAHTOQa08njKFmmSvKQwmnCWg\nkK7PFNMJ7yviw++Bp3TJpWkxR0j526Izh3s5Vo3gi7yzwZkMuF5CM4cz6xDp9XXZ\nkDcThfAVwJWUyvRJhIqVwARrcS5+SQHUnEyFrDKSvKxj00aGa9py2tn85ItW9sF2\nPCh6yqZBuUVYFKwktsr2gcE/HrPscW8DWi2U6/ML1OCwAiVaKTvTeTm4/bbKMG78\nsb7aeUg9fQdVGP8YHZS/ccDohdL3N9xv2PTyipfsHkiijw4C5QfXUDQpFyIc7Wkz\nYvEqr9x7XG01abiVXx3Vsoybvee2oyCI4+A3GxQXjUxg+1sgNy7K5wQjjoJF+A0=\n=xqfo\n-----END PGP SIGNATURE-----\n", "payload": "tree 56c0560043e512a4f37fb304ff8d99dc27f15afd\nparent a449535bbc7912c4adc1bbf2ab2738d0442f212c\nparent 985e66362f8dc96699e2c621e4a235e8451376d6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574472164 +0100\ncommitter GitHub <noreply@github.com> 1574472164 +0100\n\nRollup merge of #65961 - lcnr:typename_of, r=Dylan-DPC\n\nadd fn type_name_of_val\n\nThis function is often useful during testing and mirrors `align_of_val` and `size_of_val`.\n\n# Example\n\nShowing the default type of integers.\n\n```rust\nlet x = 7;\nprintln!(\"per default, integers have the type: {}\", std::any::type_name_of_val(&x));\n```\n\nTo my knowledge this can currently not be done without defining a function similar to `type_name_of_val`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ae4a19cf3f0f8a9b1e5ea9e9307d6968eabf71e", "html_url": "https://github.com/rust-lang/rust/commit/0ae4a19cf3f0f8a9b1e5ea9e9307d6968eabf71e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ae4a19cf3f0f8a9b1e5ea9e9307d6968eabf71e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a449535bbc7912c4adc1bbf2ab2738d0442f212c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a449535bbc7912c4adc1bbf2ab2738d0442f212c", "html_url": "https://github.com/rust-lang/rust/commit/a449535bbc7912c4adc1bbf2ab2738d0442f212c"}, {"sha": "985e66362f8dc96699e2c621e4a235e8451376d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/985e66362f8dc96699e2c621e4a235e8451376d6", "html_url": "https://github.com/rust-lang/rust/commit/985e66362f8dc96699e2c621e4a235e8451376d6"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "57a2aecd8be6d1a85fed50c988892804e2d4833a", "filename": "src/libcore/any.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0ae4a19cf3f0f8a9b1e5ea9e9307d6968eabf71e/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae4a19cf3f0f8a9b1e5ea9e9307d6968eabf71e/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=0ae4a19cf3f0f8a9b1e5ea9e9307d6968eabf71e", "patch": "@@ -452,7 +452,7 @@ impl TypeId {\n /// The current implementation uses the same infrastructure as compiler\n /// diagnostics and debuginfo, but this is not guaranteed.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// assert_eq!(\n@@ -465,3 +465,42 @@ impl TypeId {\n pub const fn type_name<T: ?Sized>() -> &'static str {\n     intrinsics::type_name::<T>()\n }\n+\n+/// Returns the name of the type of the pointed-to value as a string slice.\n+/// This is the same as `type_name::<T>()`, but can be used where the type of a\n+/// variable is not easily available.\n+///\n+/// # Note\n+///\n+/// This is intended for diagnostic use. The exact contents and format of the\n+/// string are not specified, other than being a best-effort description of the\n+/// type. For example, `type_name_of::<Option<String>>(None)` could return the\n+/// `\"Option<String>\"` or `\"std::option::Option<std::string::String>\"`, but not\n+/// `\"foobar\"`. In addition, the output may change between versions of the\n+/// compiler.\n+///\n+/// The type name should not be considered a unique identifier of a type;\n+/// multiple types may share the same type name.\n+///\n+/// The current implementation uses the same infrastructure as compiler\n+/// diagnostics and debuginfo, but this is not guaranteed.\n+///\n+/// # Examples\n+///\n+/// Prints the default integer and float types.\n+///\n+/// ```rust\n+/// #![feature(type_name_of_val)]\n+/// use std::any::type_name_of_val;\n+///\n+/// let x = 1;\n+/// println!(\"{}\", type_name_of_val(&x));\n+/// let y = 1.0;\n+/// println!(\"{}\", type_name_of_val(&y));\n+/// ```\n+#[unstable(feature = \"type_name_of_val\", issue = \"66359\")]\n+#[rustc_const_unstable(feature = \"const_type_name\")]\n+pub const fn type_name_of_val<T: ?Sized>(val: &T) -> &'static str {\n+    let _ = val;\n+    type_name::<T>()\n+}"}]}