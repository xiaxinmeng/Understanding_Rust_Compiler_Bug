{"sha": "9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "node_id": "C_kwDOAAsO6NoAKDljMjBiMmE4Y2M3NTg4ZGVjYjZkZTI1YWM2YTc5MTJkY2VmMjRkNjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-17T14:49:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-17T14:49:05Z"}, "message": "Auto merge of #100677 - matthiaskrgr:rollup-au41ho1, r=matthiaskrgr\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #99474 (Rustdoc json tests: New `@hasexact` test command)\n - #99972 (interpret: only consider 1-ZST when searching for receiver)\n - #100018 (Clean up `LitKind`)\n - #100379 (triagebot: add translation-related mention groups)\n - #100389 (Do not report cycle error when inferring return type for suggestion)\n - #100489 (`is_knowable` use `Result` instead of `Option`)\n - #100532 (unwind: don't build dependency when building for Miri)\n - #100608 (needless separation of impl blocks)\n - #100621 (Pass +atomics-32 feature for {arm,thumb}v4t-none-eabi)\n - #100646 (Migrate emoji identifier diagnostics to `SessionDiagnostic` in rustc_interface)\n - #100652 (Remove deferred sized checks (make them eager))\n - #100655 (Update books)\n - #100656 (Update cargo)\n - #100660 (Fixed a few documentation errors)\n - #100661 (Fixed a few documentation errors)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "099d3858d3f4e681d153efb1761fb8951b08afa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/099d3858d3f4e681d153efb1761fb8951b08afa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "html_url": "https://github.com/rust-lang/rust/commit/9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86c6ebee8fa0a5ad1e18e375113b06bd2849b634", "url": "https://api.github.com/repos/rust-lang/rust/commits/86c6ebee8fa0a5ad1e18e375113b06bd2849b634", "html_url": "https://github.com/rust-lang/rust/commit/86c6ebee8fa0a5ad1e18e375113b06bd2849b634"}, {"sha": "1199dbdcf5f651060c1cf1ab089c3feafcd54100", "url": "https://api.github.com/repos/rust-lang/rust/commits/1199dbdcf5f651060c1cf1ab089c3feafcd54100", "html_url": "https://github.com/rust-lang/rust/commit/1199dbdcf5f651060c1cf1ab089c3feafcd54100"}], "stats": {"total": 1005, "additions": 584, "deletions": 421}, "files": [{"sha": "b8c8466ffe9b5410570de0f9271c470ffef7fd38", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -321,7 +321,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo\"\n-version = \"0.65.0\"\n+version = \"0.66.0\"\n dependencies = [\n  \"anyhow\",\n  \"atty\",\n@@ -4011,6 +4011,7 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_incremental\",\n  \"rustc_lint\",\n+ \"rustc_macros\",\n  \"rustc_metadata\",\n  \"rustc_middle\",\n  \"rustc_mir_build\",\n@@ -4359,6 +4360,7 @@ dependencies = [\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n+ \"rustc_target\",\n  \"tracing\",\n ]\n "}, {"sha": "268b0527b1cb2c438bfb5fc1cb6a432d69512d09", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1689,7 +1689,7 @@ pub enum StrStyle {\n #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n pub struct Lit {\n     /// The original literal token as written in source code.\n-    pub token: token::Lit,\n+    pub token_lit: token::Lit,\n     /// The \"semantic\" representation of the literal lowered from the original tokens.\n     /// Strings are unescaped, hexadecimal forms are eliminated, etc.\n     /// FIXME: Remove this and only create the semantic representation during lowering to HIR.\n@@ -1717,7 +1717,7 @@ impl StrLit {\n             StrStyle::Raw(n) => token::StrRaw(n),\n         };\n         Lit {\n-            token: token::Lit::new(token_kind, self.symbol, self.suffix),\n+            token_lit: token::Lit::new(token_kind, self.symbol, self.suffix),\n             span: self.span,\n             kind: LitKind::Str(self.symbol_unescaped, self.style),\n         }"}, {"sha": "0d114f1366c4d558988c980def48bad84514577e", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -184,13 +184,7 @@ impl MetaItem {\n     }\n \n     pub fn value_str(&self) -> Option<Symbol> {\n-        match self.kind {\n-            MetaItemKind::NameValue(ref v) => match v.kind {\n-                LitKind::Str(ref s, _) => Some(*s),\n-                _ => None,\n-            },\n-            _ => None,\n-        }\n+        self.kind.value_str()\n     }\n \n     pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {"}, {"sha": "e6351d89c6c31055e73608ddb392b92327dcbe2e", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -23,7 +23,7 @@ pub enum LitError {\n \n impl LitKind {\n     /// Converts literal token into a semantic literal.\n-    pub fn from_lit_token(lit: token::Lit) -> Result<LitKind, LitError> {\n+    pub fn from_token_lit(lit: token::Lit) -> Result<LitKind, LitError> {\n         let token::Lit { kind, symbol, suffix } = lit;\n         if suffix.is_some() && !kind.may_have_suffix() {\n             return Err(LitError::InvalidSuffix);\n@@ -153,7 +153,7 @@ impl LitKind {\n     /// Attempts to recover a token from semantic literal.\n     /// This function is used when the original token doesn't exist (e.g. the literal is created\n     /// by an AST-based macro) or unavailable (e.g. from HIR pretty-printing).\n-    pub fn to_lit_token(&self) -> token::Lit {\n+    pub fn to_token_lit(&self) -> token::Lit {\n         let (kind, symbol, suffix) = match *self {\n             LitKind::Str(symbol, ast::StrStyle::Cooked) => {\n                 // Don't re-intern unless the escaped string is different.\n@@ -208,8 +208,8 @@ impl LitKind {\n \n impl Lit {\n     /// Converts literal token into an AST literal.\n-    pub fn from_lit_token(token: token::Lit, span: Span) -> Result<Lit, LitError> {\n-        Ok(Lit { token, kind: LitKind::from_lit_token(token)?, span })\n+    pub fn from_token_lit(token_lit: token::Lit, span: Span) -> Result<Lit, LitError> {\n+        Ok(Lit { token_lit, kind: LitKind::from_token_lit(token_lit)?, span })\n     }\n \n     /// Converts arbitrary token into an AST literal.\n@@ -232,21 +232,21 @@ impl Lit {\n             _ => return Err(LitError::NotLiteral),\n         };\n \n-        Lit::from_lit_token(lit, token.span)\n+        Lit::from_token_lit(lit, token.span)\n     }\n \n     /// Attempts to recover an AST literal from semantic literal.\n     /// This function is used when the original token doesn't exist (e.g. the literal is created\n     /// by an AST-based macro) or unavailable (e.g. from HIR pretty-printing).\n     pub fn from_lit_kind(kind: LitKind, span: Span) -> Lit {\n-        Lit { token: kind.to_lit_token(), kind, span }\n+        Lit { token_lit: kind.to_token_lit(), kind, span }\n     }\n \n     /// Losslessly convert an AST literal into a token.\n     pub fn to_token(&self) -> Token {\n-        let kind = match self.token.kind {\n-            token::Bool => token::Ident(self.token.symbol, false),\n-            _ => token::Literal(self.token),\n+        let kind = match self.token_lit.kind {\n+            token::Bool => token::Ident(self.token_lit.symbol, false),\n+            _ => token::Literal(self.token_lit),\n         };\n         Token::new(kind, self.span)\n     }"}, {"sha": "1ac1d689efbdba0282f07ef945f76b706d01cf93", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -927,7 +927,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     lit.clone()\n                 } else {\n                     Lit {\n-                        token: token::Lit::new(token::LitKind::Err, kw::Empty, None),\n+                        token_lit: token::Lit::new(token::LitKind::Err, kw::Empty, None),\n                         kind: LitKind::Err(kw::Empty),\n                         span: DUMMY_SP,\n                     }"}, {"sha": "8749a13c5dde1ae1a6af2598bda8c8bdb14a2167", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -372,7 +372,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n \n     fn print_literal(&mut self, lit: &ast::Lit) {\n         self.maybe_print_comment(lit.span.lo());\n-        self.word(lit.token.to_string())\n+        self.word(lit.token_lit.to_string())\n     }\n \n     fn print_string(&mut self, st: &str, style: ast::StrStyle) {"}, {"sha": "c0f35d122f8e66ac294db443b4735b56654ae2de", "filename": "compiler/rustc_builtin_macros/src/concat_bytes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1,6 +1,5 @@\n use rustc_ast as ast;\n use rustc_ast::{ptr::P, tokenstream::TokenStream};\n-use rustc_data_structures::sync::Lrc;\n use rustc_errors::Applicability;\n use rustc_expand::base::{self, DummyResult};\n \n@@ -185,5 +184,5 @@ pub fn expand_concat_bytes(\n         return base::MacEager::expr(DummyResult::raw_expr(sp, true));\n     }\n     let sp = cx.with_def_site_ctxt(sp);\n-    base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::from(accumulator))))\n+    base::MacEager::expr(cx.expr_byte_str(sp, accumulator))\n }"}, {"sha": "467ac34ded942f43c6aeb788964413500d8e7778", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -126,9 +126,9 @@ fn report_bad_target(sess: &Session, item: &Annotatable, span: Span) -> bool {\n }\n \n fn report_unexpected_literal(sess: &Session, lit: &ast::Lit) {\n-    let help_msg = match lit.token.kind {\n-        token::Str if rustc_lexer::is_ident(lit.token.symbol.as_str()) => {\n-            format!(\"try using `#[derive({})]`\", lit.token.symbol)\n+    let help_msg = match lit.token_lit.kind {\n+        token::Str if rustc_lexer::is_ident(lit.token_lit.symbol.as_str()) => {\n+            format!(\"try using `#[derive({})]`\", lit.token_lit.symbol)\n         }\n         _ => \"for example, write `#[derive(Debug)]` for `Debug`\".to_string(),\n     };"}, {"sha": "5ab70e441b8149bc712d82f10c081cfd4b7c3702", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -52,7 +52,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n \n     // We want to make sure we have the ctxt set so that we can use unstable methods\n     let span = cx.with_def_site_ctxt(span);\n-    let name = cx.expr_lit(span, ast::LitKind::Str(ident.name, ast::StrStyle::Cooked));\n+    let name = cx.expr_str(span, ident.name);\n     let fmt = substr.nonselflike_args[0].clone();\n \n     // Struct and tuples are similar enough that we use the same code for both,\n@@ -89,10 +89,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n         for i in 0..fields.len() {\n             let field = &fields[i];\n             if is_struct {\n-                let name = cx.expr_lit(\n-                    field.span,\n-                    ast::LitKind::Str(field.name.unwrap().name, ast::StrStyle::Cooked),\n-                );\n+                let name = cx.expr_str(field.span, field.name.unwrap().name);\n                 args.push(name);\n             }\n             // Use an extra indirection to make sure this works for unsized types.\n@@ -108,10 +105,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n \n         for field in fields {\n             if is_struct {\n-                name_exprs.push(cx.expr_lit(\n-                    field.span,\n-                    ast::LitKind::Str(field.name.unwrap().name, ast::StrStyle::Cooked),\n-                ));\n+                name_exprs.push(cx.expr_str(field.span, field.name.unwrap().name));\n             }\n \n             // Use an extra indirection to make sure this works for unsized types."}, {"sha": "08026c9d357846cc144cf718541b240a5a7aee05", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -923,7 +923,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 }\n \n                 // Build the format\n-                let fill = self.ecx.expr_lit(sp, ast::LitKind::Char(fill));\n+                let fill = self.ecx.expr_char(sp, fill);\n                 let align = |name| {\n                     let mut p = Context::rtpath(self.ecx, sym::Alignment);\n                     p.push(Ident::new(name, sp));"}, {"sha": "d78bbc3c932269c401400588536325cf2084c95a", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -216,7 +216,7 @@ pub fn expand_include_bytes(\n         }\n     };\n     match cx.source_map().load_binary_file(&file) {\n-        Ok(bytes) => base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(bytes.into()))),\n+        Ok(bytes) => base::MacEager::expr(cx.expr_byte_str(sp, bytes)),\n         Err(e) => {\n             cx.span_err(sp, &format!(\"couldn't read {}: {}\", file.display(), e));\n             DummyResult::any(sp)"}, {"sha": "2930d09d71f1a61c8c690e24256c6cadc7ceb7e1", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -15,7 +15,7 @@ use rustc_data_structures::profiling::TimingGuard;\n use rustc_data_structures::profiling::VerboseTimingGuard;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::Emitter;\n-use rustc_errors::{DiagnosticId, FatalError, Handler, Level};\n+use rustc_errors::{translation::Translate, DiagnosticId, FatalError, Handler, Level};\n use rustc_fs_util::link_or_copy;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_incremental::{\n@@ -1740,6 +1740,16 @@ impl SharedEmitter {\n     }\n }\n \n+impl Translate for SharedEmitter {\n+    fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n+        None\n+    }\n+\n+    fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n+        panic!(\"shared emitter attempted to translate a diagnostic\");\n+    }\n+}\n+\n impl Emitter for SharedEmitter {\n     fn emit_diagnostic(&mut self, diag: &rustc_errors::Diagnostic) {\n         let fluent_args = self.to_fluent_args(diag.args());\n@@ -1761,14 +1771,6 @@ impl Emitter for SharedEmitter {\n     fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         None\n     }\n-\n-    fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n-        None\n-    }\n-\n-    fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n-        panic!(\"shared emitter attempted to translate a diagnostic\");\n-    }\n }\n \n impl SharedEmitterMain {"}, {"sha": "c8557d172ed4370cc0aaeb843b1e6ee15dcaa402", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -534,7 +534,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             let mut non_zst_field = None;\n                             for i in 0..receiver.layout.fields.count() {\n                                 let field = self.operand_field(&receiver, i)?;\n-                                if !field.layout.is_zst() {\n+                                let zst =\n+                                    field.layout.is_zst() && field.layout.align.abi.bytes() == 1;\n+                                if !zst {\n                                     assert!(\n                                         non_zst_field.is_none(),\n                                         \"multiple non-ZST fields in dyn receiver type {}\","}, {"sha": "258780ecaea269e85d53aa949ed64a92234e0339", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -56,9 +56,7 @@ cfg_if! {\n             pub fn new(v: T) -> Self {\n                 Atomic(Cell::new(v))\n             }\n-        }\n \n-        impl<T: Copy> Atomic<T> {\n             #[inline]\n             pub fn into_inner(self) -> T {\n                 self.0.into_inner()"}, {"sha": "2c05abd8c0996300b7e24dfaeb1922e013d1c6bd", "filename": "compiler/rustc_error_messages/locales/en-US/interface.ftl", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finterface.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finterface.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finterface.ftl?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -0,0 +1,6 @@\n+interface_ferris_identifier =\n+    Ferris cannot be used as an identifier\n+    .suggestion = try using their name instead\n+\n+interface_emoji_identifier =\n+    identifiers cannot contain emoji: `{$ident}`"}, {"sha": "6ae4dab3a35eb18898559beaa9dad4fe1e36eb0c", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -34,6 +34,7 @@ fluent_messages! {\n     builtin_macros => \"../locales/en-US/builtin_macros.ftl\",\n     const_eval => \"../locales/en-US/const_eval.ftl\",\n     expand => \"../locales/en-US/expand.ftl\",\n+    interface => \"../locales/en-US/interface.ftl\",\n     lint => \"../locales/en-US/lint.ftl\",\n     parser => \"../locales/en-US/parser.ftl\",\n     passes => \"../locales/en-US/passes.ftl\","}, {"sha": "b32fc3c719bbd91adbdeebe2d62cb97cfd69b7f0", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -7,6 +7,7 @@\n \n use crate::emitter::FileWithAnnotatedLines;\n use crate::snippet::Line;\n+use crate::translation::Translate;\n use crate::{\n     CodeSuggestion, Diagnostic, DiagnosticId, DiagnosticMessage, Emitter, FluentBundle,\n     LazyFallbackBundle, Level, MultiSpan, Style, SubDiagnostic,\n@@ -32,6 +33,16 @@ pub struct AnnotateSnippetEmitterWriter {\n     macro_backtrace: bool,\n }\n \n+impl Translate for AnnotateSnippetEmitterWriter {\n+    fn fluent_bundle(&self) -> Option<&Lrc<FluentBundle>> {\n+        self.fluent_bundle.as_ref()\n+    }\n+\n+    fn fallback_fluent_bundle(&self) -> &FluentBundle {\n+        &**self.fallback_bundle\n+    }\n+}\n+\n impl Emitter for AnnotateSnippetEmitterWriter {\n     /// The entry point for the diagnostics generation\n     fn emit_diagnostic(&mut self, diag: &Diagnostic) {\n@@ -63,14 +74,6 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n         self.source_map.as_ref()\n     }\n \n-    fn fluent_bundle(&self) -> Option<&Lrc<FluentBundle>> {\n-        self.fluent_bundle.as_ref()\n-    }\n-\n-    fn fallback_fluent_bundle(&self) -> &FluentBundle {\n-        &**self.fallback_bundle\n-    }\n-\n     fn should_show_explain(&self) -> bool {\n         !self.short_message\n     }"}, {"sha": "6c1bfcb9919eb9df89a3124f90bf16a655da2645", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 18, "deletions": 110, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -14,10 +14,10 @@ use rustc_span::{FileLines, SourceFile, Span};\n \n use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, Style, StyledString};\n use crate::styled_buffer::StyledBuffer;\n+use crate::translation::Translate;\n use crate::{\n-    CodeSuggestion, Diagnostic, DiagnosticArg, DiagnosticId, DiagnosticMessage, FluentBundle,\n-    Handler, LazyFallbackBundle, Level, MultiSpan, SubDiagnostic, SubstitutionHighlight,\n-    SuggestionStyle,\n+    CodeSuggestion, Diagnostic, DiagnosticId, DiagnosticMessage, FluentBundle, Handler,\n+    LazyFallbackBundle, Level, MultiSpan, SubDiagnostic, SubstitutionHighlight, SuggestionStyle,\n };\n \n use rustc_lint_defs::pluralize;\n@@ -200,7 +200,7 @@ impl Margin {\n const ANONYMIZED_LINE_NUM: &str = \"LL\";\n \n /// Emitter trait for emitting errors.\n-pub trait Emitter {\n+pub trait Emitter: Translate {\n     /// Emit a structured diagnostic.\n     fn emit_diagnostic(&mut self, diag: &Diagnostic);\n \n@@ -231,102 +231,6 @@ pub trait Emitter {\n \n     fn source_map(&self) -> Option<&Lrc<SourceMap>>;\n \n-    /// Return `FluentBundle` with localized diagnostics for the locale requested by the user. If no\n-    /// language was requested by the user then this will be `None` and `fallback_fluent_bundle`\n-    /// should be used.\n-    fn fluent_bundle(&self) -> Option<&Lrc<FluentBundle>>;\n-\n-    /// Return `FluentBundle` with localized diagnostics for the default locale of the compiler.\n-    /// Used when the user has not requested a specific language or when a localized diagnostic is\n-    /// unavailable for the requested locale.\n-    fn fallback_fluent_bundle(&self) -> &FluentBundle;\n-\n-    /// Convert diagnostic arguments (a rustc internal type that exists to implement\n-    /// `Encodable`/`Decodable`) into `FluentArgs` which is necessary to perform translation.\n-    ///\n-    /// Typically performed once for each diagnostic at the start of `emit_diagnostic` and then\n-    /// passed around as a reference thereafter.\n-    fn to_fluent_args<'arg>(&self, args: &[DiagnosticArg<'arg>]) -> FluentArgs<'arg> {\n-        FromIterator::from_iter(args.to_vec().drain(..))\n-    }\n-\n-    /// Convert `DiagnosticMessage`s to a string, performing translation if necessary.\n-    fn translate_messages(\n-        &self,\n-        messages: &[(DiagnosticMessage, Style)],\n-        args: &FluentArgs<'_>,\n-    ) -> Cow<'_, str> {\n-        Cow::Owned(\n-            messages.iter().map(|(m, _)| self.translate_message(m, args)).collect::<String>(),\n-        )\n-    }\n-\n-    /// Convert a `DiagnosticMessage` to a string, performing translation if necessary.\n-    fn translate_message<'a>(\n-        &'a self,\n-        message: &'a DiagnosticMessage,\n-        args: &'a FluentArgs<'_>,\n-    ) -> Cow<'_, str> {\n-        trace!(?message, ?args);\n-        let (identifier, attr) = match message {\n-            DiagnosticMessage::Str(msg) => return Cow::Borrowed(&msg),\n-            DiagnosticMessage::FluentIdentifier(identifier, attr) => (identifier, attr),\n-        };\n-\n-        let translate_with_bundle = |bundle: &'a FluentBundle| -> Option<(Cow<'_, str>, Vec<_>)> {\n-            let message = bundle.get_message(&identifier)?;\n-            let value = match attr {\n-                Some(attr) => message.get_attribute(attr)?.value(),\n-                None => message.value()?,\n-            };\n-            debug!(?message, ?value);\n-\n-            let mut errs = vec![];\n-            let translated = bundle.format_pattern(value, Some(&args), &mut errs);\n-            debug!(?translated, ?errs);\n-            Some((translated, errs))\n-        };\n-\n-        self.fluent_bundle()\n-            .and_then(|bundle| translate_with_bundle(bundle))\n-            // If `translate_with_bundle` returns `None` with the primary bundle, this is likely\n-            // just that the primary bundle doesn't contain the message being translated, so\n-            // proceed to the fallback bundle.\n-            //\n-            // However, when errors are produced from translation, then that means the translation\n-            // is broken (e.g. `{$foo}` exists in a translation but `foo` isn't provided).\n-            //\n-            // In debug builds, assert so that compiler devs can spot the broken translation and\n-            // fix it..\n-            .inspect(|(_, errs)| {\n-                debug_assert!(\n-                    errs.is_empty(),\n-                    \"identifier: {:?}, attr: {:?}, args: {:?}, errors: {:?}\",\n-                    identifier,\n-                    attr,\n-                    args,\n-                    errs\n-                );\n-            })\n-            // ..otherwise, for end users, an error about this wouldn't be useful or actionable, so\n-            // just hide it and try with the fallback bundle.\n-            .filter(|(_, errs)| errs.is_empty())\n-            .or_else(|| translate_with_bundle(self.fallback_fluent_bundle()))\n-            .map(|(translated, errs)| {\n-                // Always bail out for errors with the fallback bundle.\n-                assert!(\n-                    errs.is_empty(),\n-                    \"identifier: {:?}, attr: {:?}, args: {:?}, errors: {:?}\",\n-                    identifier,\n-                    attr,\n-                    args,\n-                    errs\n-                );\n-                translated\n-            })\n-            .expect(\"failed to find message in primary or fallback fluent bundles\")\n-    }\n-\n     /// Formats the substitutions of the primary_span\n     ///\n     /// There are a lot of conditions to this method, but in short:\n@@ -616,18 +520,20 @@ pub trait Emitter {\n     }\n }\n \n-impl Emitter for EmitterWriter {\n-    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n-        self.sm.as_ref()\n-    }\n-\n+impl Translate for EmitterWriter {\n     fn fluent_bundle(&self) -> Option<&Lrc<FluentBundle>> {\n         self.fluent_bundle.as_ref()\n     }\n \n     fn fallback_fluent_bundle(&self) -> &FluentBundle {\n         &**self.fallback_bundle\n     }\n+}\n+\n+impl Emitter for EmitterWriter {\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n+        self.sm.as_ref()\n+    }\n \n     fn emit_diagnostic(&mut self, diag: &Diagnostic) {\n         let fluent_args = self.to_fluent_args(diag.args());\n@@ -672,18 +578,20 @@ pub struct SilentEmitter {\n     pub fatal_note: Option<String>,\n }\n \n-impl Emitter for SilentEmitter {\n-    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n-        None\n-    }\n-\n+impl Translate for SilentEmitter {\n     fn fluent_bundle(&self) -> Option<&Lrc<FluentBundle>> {\n         None\n     }\n \n     fn fallback_fluent_bundle(&self) -> &FluentBundle {\n         panic!(\"silent emitter attempted to translate message\")\n     }\n+}\n+\n+impl Emitter for SilentEmitter {\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n+        None\n+    }\n \n     fn emit_diagnostic(&mut self, d: &Diagnostic) {\n         if d.level == Level::Fatal {"}, {"sha": "1680c6accd78c8fc018581f4d1f955e0eda3bcc8", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -13,6 +13,7 @@ use rustc_span::source_map::{FilePathMapping, SourceMap};\n \n use crate::emitter::{Emitter, HumanReadableErrorType};\n use crate::registry::Registry;\n+use crate::translation::Translate;\n use crate::DiagnosticId;\n use crate::{\n     CodeSuggestion, FluentBundle, LazyFallbackBundle, MultiSpan, SpanLabel, SubDiagnostic,\n@@ -122,6 +123,16 @@ impl JsonEmitter {\n     }\n }\n \n+impl Translate for JsonEmitter {\n+    fn fluent_bundle(&self) -> Option<&Lrc<FluentBundle>> {\n+        self.fluent_bundle.as_ref()\n+    }\n+\n+    fn fallback_fluent_bundle(&self) -> &FluentBundle {\n+        &**self.fallback_bundle\n+    }\n+}\n+\n impl Emitter for JsonEmitter {\n     fn emit_diagnostic(&mut self, diag: &crate::Diagnostic) {\n         let data = Diagnostic::from_errors_diagnostic(diag, self);\n@@ -189,14 +200,6 @@ impl Emitter for JsonEmitter {\n         Some(&self.sm)\n     }\n \n-    fn fluent_bundle(&self) -> Option<&Lrc<FluentBundle>> {\n-        self.fluent_bundle.as_ref()\n-    }\n-\n-    fn fallback_fluent_bundle(&self) -> &FluentBundle {\n-        &**self.fallback_bundle\n-    }\n-\n     fn should_show_explain(&self) -> bool {\n         !matches!(self.json_rendered, HumanReadableErrorType::Short(_))\n     }"}, {"sha": "6555b93ac0b1b7d63ca4fddbbd34705761ab5f4f", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -58,6 +58,7 @@ mod lock;\n pub mod registry;\n mod snippet;\n mod styled_buffer;\n+pub mod translation;\n \n pub use snippet::Style;\n "}, {"sha": "65338f56d9ccb5ea545c607095c61966e8191f4e", "filename": "compiler/rustc_errors/src/translation.rs", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -0,0 +1,103 @@\n+use crate::snippet::Style;\n+use crate::{DiagnosticArg, DiagnosticMessage, FluentBundle};\n+use rustc_data_structures::sync::Lrc;\n+use rustc_error_messages::FluentArgs;\n+use std::borrow::Cow;\n+\n+pub trait Translate {\n+    /// Return `FluentBundle` with localized diagnostics for the locale requested by the user. If no\n+    /// language was requested by the user then this will be `None` and `fallback_fluent_bundle`\n+    /// should be used.\n+    fn fluent_bundle(&self) -> Option<&Lrc<FluentBundle>>;\n+\n+    /// Return `FluentBundle` with localized diagnostics for the default locale of the compiler.\n+    /// Used when the user has not requested a specific language or when a localized diagnostic is\n+    /// unavailable for the requested locale.\n+    fn fallback_fluent_bundle(&self) -> &FluentBundle;\n+\n+    /// Convert diagnostic arguments (a rustc internal type that exists to implement\n+    /// `Encodable`/`Decodable`) into `FluentArgs` which is necessary to perform translation.\n+    ///\n+    /// Typically performed once for each diagnostic at the start of `emit_diagnostic` and then\n+    /// passed around as a reference thereafter.\n+    fn to_fluent_args<'arg>(&self, args: &[DiagnosticArg<'arg>]) -> FluentArgs<'arg> {\n+        FromIterator::from_iter(args.to_vec().drain(..))\n+    }\n+\n+    /// Convert `DiagnosticMessage`s to a string, performing translation if necessary.\n+    fn translate_messages(\n+        &self,\n+        messages: &[(DiagnosticMessage, Style)],\n+        args: &FluentArgs<'_>,\n+    ) -> Cow<'_, str> {\n+        Cow::Owned(\n+            messages.iter().map(|(m, _)| self.translate_message(m, args)).collect::<String>(),\n+        )\n+    }\n+\n+    /// Convert a `DiagnosticMessage` to a string, performing translation if necessary.\n+    fn translate_message<'a>(\n+        &'a self,\n+        message: &'a DiagnosticMessage,\n+        args: &'a FluentArgs<'_>,\n+    ) -> Cow<'_, str> {\n+        trace!(?message, ?args);\n+        let (identifier, attr) = match message {\n+            DiagnosticMessage::Str(msg) => return Cow::Borrowed(&msg),\n+            DiagnosticMessage::FluentIdentifier(identifier, attr) => (identifier, attr),\n+        };\n+\n+        let translate_with_bundle = |bundle: &'a FluentBundle| -> Option<(Cow<'_, str>, Vec<_>)> {\n+            let message = bundle.get_message(&identifier)?;\n+            let value = match attr {\n+                Some(attr) => message.get_attribute(attr)?.value(),\n+                None => message.value()?,\n+            };\n+            debug!(?message, ?value);\n+\n+            let mut errs = vec![];\n+            let translated = bundle.format_pattern(value, Some(&args), &mut errs);\n+            debug!(?translated, ?errs);\n+            Some((translated, errs))\n+        };\n+\n+        self.fluent_bundle()\n+            .and_then(|bundle| translate_with_bundle(bundle))\n+            // If `translate_with_bundle` returns `None` with the primary bundle, this is likely\n+            // just that the primary bundle doesn't contain the message being translated, so\n+            // proceed to the fallback bundle.\n+            //\n+            // However, when errors are produced from translation, then that means the translation\n+            // is broken (e.g. `{$foo}` exists in a translation but `foo` isn't provided).\n+            //\n+            // In debug builds, assert so that compiler devs can spot the broken translation and\n+            // fix it..\n+            .inspect(|(_, errs)| {\n+                debug_assert!(\n+                    errs.is_empty(),\n+                    \"identifier: {:?}, attr: {:?}, args: {:?}, errors: {:?}\",\n+                    identifier,\n+                    attr,\n+                    args,\n+                    errs\n+                );\n+            })\n+            // ..otherwise, for end users, an error about this wouldn't be useful or actionable, so\n+            // just hide it and try with the fallback bundle.\n+            .filter(|(_, errs)| errs.is_empty())\n+            .or_else(|| translate_with_bundle(self.fallback_fluent_bundle()))\n+            .map(|(translated, errs)| {\n+                // Always bail out for errors with the fallback bundle.\n+                assert!(\n+                    errs.is_empty(),\n+                    \"identifier: {:?}, attr: {:?}, args: {:?}, errors: {:?}\",\n+                    identifier,\n+                    attr,\n+                    args,\n+                    errs\n+                );\n+                translated\n+            })\n+            .expect(\"failed to find message in primary or fallback fluent bundles\")\n+    }\n+}"}, {"sha": "b971a63ec8977d303f1b37425137626c230c4230", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -3,6 +3,7 @@ use crate::base::ExtCtxt;\n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, AttrVec, BlockCheckMode, Expr, LocalKind, PatKind, UnOp};\n+use rustc_data_structures::sync::Lrc;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n \n@@ -330,23 +331,38 @@ impl<'a> ExtCtxt<'a> {\n         self.expr_struct(span, self.path_ident(span, id), fields)\n     }\n \n-    pub fn expr_lit(&self, span: Span, lit_kind: ast::LitKind) -> P<ast::Expr> {\n+    fn expr_lit(&self, span: Span, lit_kind: ast::LitKind) -> P<ast::Expr> {\n         let lit = ast::Lit::from_lit_kind(lit_kind, span);\n         self.expr(span, ast::ExprKind::Lit(lit))\n     }\n+\n     pub fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr> {\n         self.expr_lit(\n             span,\n             ast::LitKind::Int(i as u128, ast::LitIntType::Unsigned(ast::UintTy::Usize)),\n         )\n     }\n+\n     pub fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitKind::Int(u as u128, ast::LitIntType::Unsigned(ast::UintTy::U32)))\n     }\n+\n     pub fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitKind::Bool(value))\n     }\n \n+    pub fn expr_str(&self, sp: Span, s: Symbol) -> P<ast::Expr> {\n+        self.expr_lit(sp, ast::LitKind::Str(s, ast::StrStyle::Cooked))\n+    }\n+\n+    pub fn expr_char(&self, sp: Span, ch: char) -> P<ast::Expr> {\n+        self.expr_lit(sp, ast::LitKind::Char(ch))\n+    }\n+\n+    pub fn expr_byte_str(&self, sp: Span, bytes: Vec<u8>) -> P<ast::Expr> {\n+        self.expr_lit(sp, ast::LitKind::ByteStr(Lrc::from(bytes)))\n+    }\n+\n     /// `[expr1, expr2, ...]`\n     pub fn expr_array(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n         self.expr(sp, ast::ExprKind::Array(exprs))\n@@ -357,10 +373,6 @@ impl<'a> ExtCtxt<'a> {\n         self.expr_addr_of(sp, self.expr_array(sp, exprs))\n     }\n \n-    pub fn expr_str(&self, sp: Span, s: Symbol) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitKind::Str(s, ast::StrStyle::Cooked))\n-    }\n-\n     pub fn expr_cast(&self, sp: Span, expr: P<ast::Expr>, ty: P<ast::Ty>) -> P<ast::Expr> {\n         self.expr(sp, ast::ExprKind::Cast(expr, ty))\n     }"}, {"sha": "99fe474541e9d03b72fad276e2b0e6fd163391d3", "filename": "compiler/rustc_expand/src/mbe/metavar_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -112,7 +112,7 @@ fn parse_depth<'sess>(\n             \"meta-variable expression depth must be a literal\"\n         ));\n     };\n-    if let Ok(lit_kind) = LitKind::from_lit_token(*lit)\n+    if let Ok(lit_kind) = LitKind::from_token_lit(*lit)\n         && let LitKind::Int(n_u128, LitIntType::Unsuffixed) = lit_kind\n         && let Ok(n_usize) = usize::try_from(n_u128)\n     {"}, {"sha": "beb33c05913cf8c9e5ee81c064db5f1dd729c9c9", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -486,20 +486,26 @@ impl server::TokenStream for Rustc<'_, '_> {\n         // We don't use `TokenStream::from_ast` as the tokenstream currently cannot\n         // be recovered in the general case.\n         match &expr.kind {\n-            ast::ExprKind::Lit(l) if l.token.kind == token::Bool => Ok(\n-                tokenstream::TokenStream::token_alone(token::Ident(l.token.symbol, false), l.span),\n-            ),\n+            ast::ExprKind::Lit(l) if l.token_lit.kind == token::Bool => {\n+                Ok(tokenstream::TokenStream::token_alone(\n+                    token::Ident(l.token_lit.symbol, false),\n+                    l.span,\n+                ))\n+            }\n             ast::ExprKind::Lit(l) => {\n-                Ok(tokenstream::TokenStream::token_alone(token::Literal(l.token), l.span))\n+                Ok(tokenstream::TokenStream::token_alone(token::Literal(l.token_lit), l.span))\n             }\n             ast::ExprKind::Unary(ast::UnOp::Neg, e) => match &e.kind {\n-                ast::ExprKind::Lit(l) => match l.token {\n+                ast::ExprKind::Lit(l) => match l.token_lit {\n                     token::Lit { kind: token::Integer | token::Float, .. } => {\n                         Ok(Self::TokenStream::from_iter([\n                             // FIXME: The span of the `-` token is lost when\n                             // parsing, so we cannot faithfully recover it here.\n                             tokenstream::TokenTree::token_alone(token::BinOp(token::Minus), e.span),\n-                            tokenstream::TokenTree::token_alone(token::Literal(l.token), l.span),\n+                            tokenstream::TokenTree::token_alone(\n+                                token::Literal(l.token_lit),\n+                                l.span,\n+                            ),\n                         ]))\n                     }\n                     _ => Err(()),"}, {"sha": "0f754dddbec845c0b350ae3cf82b721ac1445aa6", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1247,7 +1247,7 @@ impl<'a> State<'a> {\n \n     fn print_literal(&mut self, lit: &hir::Lit) {\n         self.maybe_print_comment(lit.span.lo());\n-        self.word(lit.node.to_lit_token().to_string())\n+        self.word(lit.node.to_token_lit().to_string())\n     }\n \n     fn print_inline_asm(&mut self, asm: &hir::InlineAsm<'_>) {"}, {"sha": "da4002d09ad029db6f397df74f946a333b4a6a26", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -17,6 +17,7 @@ rustc_attr = { path = \"../rustc_attr\" }\n rustc_borrowck = { path = \"../rustc_borrowck\" }\n rustc_builtin_macros = { path = \"../rustc_builtin_macros\" }\n rustc_expand = { path = \"../rustc_expand\" }\n+rustc_macros = { path = \"../rustc_macros\" }\n rustc_parse = { path = \"../rustc_parse\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }"}, {"sha": "e00d0b7d0d82fc51653becf3be09135a50de9f27", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -8,11 +8,12 @@ use rustc_borrowck as mir_borrowck;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n-use rustc_errors::{Applicability, ErrorGuaranteed, MultiSpan, PResult};\n+use rustc_errors::{ErrorGuaranteed, PResult};\n use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n use rustc_hir::def_id::StableCrateId;\n use rustc_hir::definitions::Definitions;\n use rustc_lint::{BufferedEarlyLint, EarlyCheckNode, LintStore};\n+use rustc_macros::SessionDiagnostic;\n use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n@@ -30,7 +31,7 @@ use rustc_session::output::filename_for_input;\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::FileName;\n+use rustc_span::{FileName, Span};\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n use tracing::{info, warn};\n@@ -263,6 +264,23 @@ impl LintStoreExpand for LintStoreExpandImpl<'_> {\n     }\n }\n \n+#[derive(SessionDiagnostic)]\n+#[error(interface::ferris_identifier)]\n+struct FerrisIdentifier {\n+    #[primary_span]\n+    spans: Vec<Span>,\n+    #[suggestion(code = \"ferris\", applicability = \"maybe-incorrect\")]\n+    first_span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(interface::emoji_identifier)]\n+struct EmojiIdentifier {\n+    #[primary_span]\n+    spans: Vec<Span>,\n+    ident: Symbol,\n+}\n+\n /// Runs the \"early phases\" of the compiler: initial `cfg` processing, loading compiler plugins,\n /// syntax expansion, secondary `cfg` expansion, synthesis of a test\n /// harness if one is to be provided, injection of a dependency on the\n@@ -443,23 +461,9 @@ pub fn configure_and_expand(\n             spans.sort();\n             if ident == sym::ferris {\n                 let first_span = spans[0];\n-                sess.diagnostic()\n-                    .struct_span_err(\n-                        MultiSpan::from(spans),\n-                        \"Ferris cannot be used as an identifier\",\n-                    )\n-                    .span_suggestion(\n-                        first_span,\n-                        \"try using their name instead\",\n-                        \"ferris\",\n-                        Applicability::MaybeIncorrect,\n-                    )\n-                    .emit();\n+                sess.emit_err(FerrisIdentifier { spans, first_span });\n             } else {\n-                sess.diagnostic().span_err(\n-                    MultiSpan::from(spans),\n-                    &format!(\"identifiers cannot contain emoji: `{}`\", ident),\n-                );\n+                sess.emit_err(EmojiIdentifier { spans, ident });\n             }\n         }\n     });"}, {"sha": "8f22221324a6e64343208b0bc84987485fffd145", "filename": "compiler/rustc_lint/src/hidden_unicode_codepoints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -120,8 +120,8 @@ impl EarlyLintPass for HiddenUnicodeCodepoints {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n         // byte strings are already handled well enough by `EscapeError::NonAsciiCharInByteString`\n         let (text, span, padding) = match &expr.kind {\n-            ast::ExprKind::Lit(ast::Lit { token, kind, span }) => {\n-                let text = token.symbol;\n+            ast::ExprKind::Lit(ast::Lit { token_lit, kind, span }) => {\n+                let text = token_lit.symbol;\n                 if !contains_text_flow_control_chars(text.as_str()) {\n                     return;\n                 }"}, {"sha": "8a727d9a1825ad7f724f04b2ab095d96c116c57e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -770,6 +770,7 @@ rustc_queries! {\n         desc { |tcx| \"computing function signature of `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        cycle_delay_bug\n     }\n \n     /// Performs lint checking for the module."}, {"sha": "c824566c35ff47789bc57f9977a02f531068f0e0", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1750,8 +1750,8 @@ impl<'a> Parser<'a> {\n             Some(lit) => match lit.kind {\n                 ast::LitKind::Str(symbol_unescaped, style) => Ok(ast::StrLit {\n                     style,\n-                    symbol: lit.token.symbol,\n-                    suffix: lit.token.suffix,\n+                    symbol: lit.token_lit.symbol,\n+                    suffix: lit.token_lit.suffix,\n                     span: lit.span,\n                     symbol_unescaped,\n                 }),\n@@ -1828,7 +1828,7 @@ impl<'a> Parser<'a> {\n                 let suffixless_lit = token::Lit::new(lit.kind, lit.symbol, None);\n                 let symbol = Symbol::intern(&suffixless_lit.to_string());\n                 let lit = token::Lit::new(token::Err, symbol, lit.suffix);\n-                Some(Lit::from_lit_token(lit, span).unwrap_or_else(|_| unreachable!()))\n+                Some(Lit::from_token_lit(lit, span).unwrap_or_else(|_| unreachable!()))\n             }\n         }\n     }"}, {"sha": "c37ae4f32536bd3bc8a41d0f8dadac8b21b01522", "filename": "compiler/rustc_query_impl/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_query_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_query_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2FCargo.toml?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -20,6 +20,7 @@ rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n+rustc_target = { path = \"../rustc_target\" }\n tracing = \"0.1\"\n \n [features]"}, {"sha": "0ed48f8d4a051a7f29f770c9d0eb60709d280766", "filename": "compiler/rustc_query_impl/src/values.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_query_impl%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_query_impl%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fvalues.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -43,3 +43,23 @@ impl<'tcx> Value<'tcx> for AdtSizedConstraint<'_> {\n         }\n     }\n }\n+\n+impl<'tcx> Value<'tcx> for ty::Binder<'_, ty::FnSig<'_>> {\n+    fn from_cycle_error(tcx: QueryCtxt<'tcx>) -> Self {\n+        let err = tcx.ty_error();\n+        // FIXME(compiler-errors): It would be nice if we could get the\n+        // query key, so we could at least generate a fn signature that\n+        // has the right arity.\n+        let fn_sig = ty::Binder::dummy(tcx.mk_fn_sig(\n+            [].into_iter(),\n+            err,\n+            false,\n+            rustc_hir::Unsafety::Normal,\n+            rustc_target::spec::abi::Abi::Rust,\n+        ));\n+\n+        // SAFETY: This is never called when `Self` is not `ty::Binder<'tcx, ty::FnSig<'tcx>>`.\n+        // FIXME: Represent the above fact in the trait system somehow.\n+        unsafe { std::mem::transmute::<ty::PolyFnSig<'tcx>, ty::Binder<'_, ty::FnSig<'_>>>(fn_sig) }\n+    }\n+}"}, {"sha": "797dfe52bd149fb258872994d8a8401604b663cc", "filename": "compiler/rustc_target/src/spec/armv4t_none_eabi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -38,7 +38,9 @@ pub fn target() -> Target {\n             linker_flavor: LinkerFlavor::Ld,\n             linker: Some(\"arm-none-eabi-ld\".into()),\n             asm_args: cvs![\"-mthumb-interwork\", \"-march=armv4t\", \"-mlittle-endian\",],\n-            features: \"+soft-float,+strict-align\".into(),\n+            // Force-enable 32-bit atomics, which allows the use of atomic load/store only.\n+            // The resulting atomics are ABI incompatible with atomics backed by libatomic.\n+            features: \"+soft-float,+strict-align,+atomics-32\".into(),\n             main_needs_argc_argv: false,\n             atomic_cas: false,\n             has_thumb_interworking: true,"}, {"sha": "bdaaed8b5d0e8b6c20d34568ab9a8a869e8fd59d", "filename": "compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -47,7 +47,9 @@ pub fn target() -> Target {\n             asm_args: cvs![\"-mthumb-interwork\", \"-march=armv4t\", \"-mlittle-endian\",],\n \n             // minimum extra features, these cannot be disabled via -C\n-            features: \"+soft-float,+strict-align\".into(),\n+            // Also force-enable 32-bit atomics, which allows the use of atomic load/store only.\n+            // The resulting atomics are ABI incompatible with atomics backed by libatomic.\n+            features: \"+soft-float,+strict-align,+atomics-32\".into(),\n \n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,"}, {"sha": "985600d9ebcc2228638bec7a03a42d4699858e5e", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -404,12 +404,12 @@ fn resolve_negative_obligation<'cx, 'tcx>(\n pub fn trait_ref_is_knowable<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_ref: ty::TraitRef<'tcx>,\n-) -> Option<Conflict> {\n+) -> Result<(), Conflict> {\n     debug!(\"trait_ref_is_knowable(trait_ref={:?})\", trait_ref);\n     if orphan_check_trait_ref(tcx, trait_ref, InCrate::Remote).is_ok() {\n         // A downstream or cousin crate is allowed to implement some\n         // substitution of this trait-ref.\n-        return Some(Conflict::Downstream);\n+        return Err(Conflict::Downstream);\n     }\n \n     if trait_ref_is_local_or_fundamental(tcx, trait_ref) {\n@@ -418,7 +418,7 @@ pub fn trait_ref_is_knowable<'tcx>(\n         // allowed to implement a substitution of this trait ref, which\n         // means impls could only come from dependencies of this crate,\n         // which we already know about.\n-        return None;\n+        return Ok(());\n     }\n \n     // This is a remote non-fundamental trait, so if another crate\n@@ -431,10 +431,10 @@ pub fn trait_ref_is_knowable<'tcx>(\n     // we are an owner.\n     if orphan_check_trait_ref(tcx, trait_ref, InCrate::Local).is_ok() {\n         debug!(\"trait_ref_is_knowable: orphan check passed\");\n-        None\n+        Ok(())\n     } else {\n         debug!(\"trait_ref_is_knowable: nonlocal, nonfundamental, unowned\");\n-        Some(Conflict::Upstream)\n+        Err(Conflict::Upstream)\n     }\n }\n "}, {"sha": "d67bd6292b434534556ea19f1896f3597294e377", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -75,7 +75,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         stack: &TraitObligationStack<'o, 'tcx>,\n     ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {\n-        if let Some(conflict) = self.is_knowable(stack) {\n+        if let Err(conflict) = self.is_knowable(stack) {\n             debug!(\"coherence stage: not knowable\");\n             if self.intercrate_ambiguity_causes.is_some() {\n                 debug!(\"evaluate_stack: intercrate_ambiguity_causes is some\");"}, {"sha": "46b50dd92f1ef7a3ed17fa20b66ccaf9b7b7657b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1265,11 +1265,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         Ok(Some(candidate))\n     }\n \n-    fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Option<Conflict> {\n+    fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Result<(), Conflict> {\n         debug!(\"is_knowable(intercrate={:?})\", self.intercrate);\n \n         if !self.intercrate || stack.obligation.polarity() == ty::ImplPolarity::Negative {\n-            return None;\n+            return Ok(());\n         }\n \n         let obligation = &stack.obligation;"}, {"sha": "5ff62f36b4527deb0572e7aa62ee62969d9b7ca9", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -561,16 +561,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // We just want to check sizedness, so instead of introducing\n                     // placeholder lifetimes with probing, we just replace higher lifetimes\n                     // with fresh vars.\n-                    let span = args.get(i).map(|a| a.span).unwrap_or(expr.span);\n+                    let arg_span = args.get(i).map(|a| a.span);\n+                    let span = arg_span.unwrap_or(expr.span);\n                     let input = self.replace_bound_vars_with_fresh_vars(\n                         span,\n                         infer::LateBoundRegionConversionTime::FnCall,\n                         fn_sig.input(i),\n                     );\n-                    self.require_type_is_sized_deferred(\n-                        input,\n+                    self.require_type_is_sized(\n+                        self.normalize_associated_types_in(span, input),\n                         span,\n-                        traits::SizedArgumentType(None),\n+                        traits::SizedArgumentType(arg_span),\n                     );\n                 }\n             }\n@@ -585,7 +586,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 infer::LateBoundRegionConversionTime::FnCall,\n                 fn_sig.output(),\n             );\n-            self.require_type_is_sized_deferred(output, expr.span, traits::SizedReturnType);\n+            self.require_type_is_sized(\n+                self.normalize_associated_types_in(expr.span, output),\n+                expr.span,\n+                traits::SizedReturnType,\n+            );\n         }\n \n         // We always require that the type provided as the value for"}, {"sha": "1d9d04ceec0d76fc44caa13553895848bcba437f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -442,17 +442,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub fn require_type_is_sized_deferred(\n-        &self,\n-        ty: Ty<'tcx>,\n-        span: Span,\n-        code: traits::ObligationCauseCode<'tcx>,\n-    ) {\n-        if !ty.references_error() {\n-            self.deferred_sized_obligations.borrow_mut().push((ty, span, code));\n-        }\n-    }\n-\n     pub fn register_bound(\n         &self,\n         ty: Ty<'tcx>,"}, {"sha": "f3115fc5c023219cf73c42313b329bcbc4bbec75", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -35,11 +35,6 @@ pub struct Inherited<'a, 'tcx> {\n \n     pub(super) fulfillment_cx: RefCell<Box<dyn TraitEngine<'tcx>>>,\n \n-    // Some additional `Sized` obligations badly affect type inference.\n-    // These obligations are added in a later stage of typeck.\n-    pub(super) deferred_sized_obligations:\n-        RefCell<Vec<(Ty<'tcx>, Span, traits::ObligationCauseCode<'tcx>)>>,\n-\n     // When we process a call like `c()` where `c` is a closure type,\n     // we may not have decided yet whether `c` is a `Fn`, `FnMut`, or\n     // `FnOnce` closure. In that case, we defer full resolution of the\n@@ -117,7 +112,6 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n             infcx,\n             fulfillment_cx: RefCell::new(<dyn TraitEngine<'_>>::new(tcx)),\n             locals: RefCell::new(Default::default()),\n-            deferred_sized_obligations: RefCell::new(Vec::new()),\n             deferred_call_resolutions: RefCell::new(Default::default()),\n             deferred_cast_checks: RefCell::new(Vec::new()),\n             deferred_transmute_checks: RefCell::new(Vec::new()),"}, {"sha": "dfbef544b1d28835fe0100009824f3c23581fe12", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -467,11 +467,6 @@ fn typeck_with_fallback<'tcx>(\n         fcx.resolve_rvalue_scopes(def_id.to_def_id());\n         fcx.resolve_generator_interiors(def_id.to_def_id());\n \n-        for (ty, span, code) in fcx.deferred_sized_obligations.borrow_mut().drain(..) {\n-            let ty = fcx.normalize_ty(span, ty);\n-            fcx.require_type_is_sized(ty, span, code);\n-        }\n-\n         fcx.select_all_obligations_or_error();\n \n         if !fcx.infcx.is_tainted_by_errors() {"}, {"sha": "23c46f1a74a314f9fc9f5b2fe21aaee46564b130", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -394,7 +394,7 @@ impl f32 {\n \n     /// Not a Number (NaN).\n     ///\n-    /// Note that IEEE-745 doesn't define just a single NaN value;\n+    /// Note that IEEE-754 doesn't define just a single NaN value;\n     /// a plethora of bit patterns are considered to be NaN.\n     /// Furthermore, the standard makes a difference\n     /// between a \"signaling\" and a \"quiet\" NaN,\n@@ -632,7 +632,7 @@ impl f32 {\n     }\n \n     /// Returns `true` if `self` has a positive sign, including `+0.0`, NaNs with\n-    /// positive sign bit and positive infinity. Note that IEEE-745 doesn't assign any\n+    /// positive sign bit and positive infinity. Note that IEEE-754 doesn't assign any\n     /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n     /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n     /// `is_sign_positive` on a NaN might produce an unexpected result in some cases.\n@@ -654,7 +654,7 @@ impl f32 {\n     }\n \n     /// Returns `true` if `self` has a negative sign, including `-0.0`, NaNs with\n-    /// negative sign bit and negative infinity. Note that IEEE-745 doesn't assign any\n+    /// negative sign bit and negative infinity. Note that IEEE-754 doesn't assign any\n     /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n     /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n     /// `is_sign_negative` on a NaN might produce an unexpected result in some cases."}, {"sha": "b5c8241d2943dedebb6f21393cfb49502aadaf3b", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -393,7 +393,7 @@ impl f64 {\n \n     /// Not a Number (NaN).\n     ///\n-    /// Note that IEEE-745 doesn't define just a single NaN value;\n+    /// Note that IEEE-754 doesn't define just a single NaN value;\n     /// a plethora of bit patterns are considered to be NaN.\n     /// Furthermore, the standard makes a difference\n     /// between a \"signaling\" and a \"quiet\" NaN,\n@@ -624,7 +624,7 @@ impl f64 {\n     }\n \n     /// Returns `true` if `self` has a positive sign, including `+0.0`, NaNs with\n-    /// positive sign bit and positive infinity. Note that IEEE-745 doesn't assign any\n+    /// positive sign bit and positive infinity. Note that IEEE-754 doesn't assign any\n     /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n     /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n     /// `is_sign_positive` on a NaN might produce an unexpected result in some cases.\n@@ -655,7 +655,7 @@ impl f64 {\n     }\n \n     /// Returns `true` if `self` has a negative sign, including `-0.0`, NaNs with\n-    /// negative sign bit and negative infinity. Note that IEEE-745 doesn't assign any\n+    /// negative sign bit and negative infinity. Note that IEEE-754 doesn't assign any\n     /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n     /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n     /// `is_sign_negative` on a NaN might produce an unexpected result in some cases."}, {"sha": "31af390253b6f108c64d26c057295a482b992b84", "filename": "library/unwind/build.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/library%2Funwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/library%2Funwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fbuild.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -2,8 +2,14 @@ use std::env;\n \n fn main() {\n     println!(\"cargo:rerun-if-changed=build.rs\");\n-    let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n+    println!(\"cargo:rerun-if-env-changed=CARGO_CFG_MIRI\");\n+\n+    if env::var_os(\"CARGO_CFG_MIRI\").is_some() {\n+        // Miri doesn't need the linker flags or a libunwind build.\n+        return;\n+    }\n \n+    let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     if target.contains(\"android\") {\n         let build = cc::Build::new();\n "}, {"sha": "42ca0ef484fcc8437a0682cee23abe4b7c407d52", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1 +1 @@\n-Subproject commit 36383b4da21dbd0a0781473bc8ad7ef0ed1b6751\n+Subproject commit 42ca0ef484fcc8437a0682cee23abe4b7c407d52"}, {"sha": "6038be9d37d7251c966b486154af621d1794d7af", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1 +1 @@\n-Subproject commit c55611dd6c58bdeb52423b5c52fd0f3c93615ba8\n+Subproject commit 6038be9d37d7251c966b486154af621d1794d7af"}, {"sha": "8e6aa3448515a0654e347b5e2510f1d4bc4d5a64", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1 +1 @@\n-Subproject commit 8d1e4dccf71114ff56f328f671f2026d8e6b62a2\n+Subproject commit 8e6aa3448515a0654e347b5e2510f1d4bc4d5a64"}, {"sha": "e647eb102890e8927f488bea12672b079eff8d9d", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1 +1 @@\n-Subproject commit f3d3953bf3b158d596c96d55ce5366f9f3f972e9\n+Subproject commit e647eb102890e8927f488bea12672b079eff8d9d"}, {"sha": "03301f8ae55fa6f20f7ea152a517598e6db2cdb7", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1 +1 @@\n-Subproject commit ee342dc91e1ba1bb1e1f1318f84bbe3bfac04798\n+Subproject commit 03301f8ae55fa6f20f7ea152a517598e6db2cdb7"}, {"sha": "d3daa1f28e169087becbc5e2b49ac91ca0405a44", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1 +1 @@\n-Subproject commit 04f3cf0bb2f5a6ee2bfc4b1a6a6cd8c11d1c5531\n+Subproject commit d3daa1f28e169087becbc5e2b49ac91ca0405a44"}, {"sha": "381ac7a5deef1ad580d4d7237f1ee2d72a91736e", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1,7 +1,8 @@\n //! Validates syntax inside Rust code blocks (\\`\\`\\`rust).\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{\n-    emitter::Emitter, Applicability, Diagnostic, Handler, LazyFallbackBundle, LintDiagnosticBuilder,\n+    emitter::Emitter, translation::Translate, Applicability, Diagnostic, Handler,\n+    LazyFallbackBundle, LintDiagnosticBuilder,\n };\n use rustc_parse::parse_stream_from_source_str;\n use rustc_session::parse::ParseSess;\n@@ -181,6 +182,16 @@ struct BufferEmitter {\n     fallback_bundle: LazyFallbackBundle,\n }\n \n+impl Translate for BufferEmitter {\n+    fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n+        None\n+    }\n+\n+    fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n+        &**self.fallback_bundle\n+    }\n+}\n+\n impl Emitter for BufferEmitter {\n     fn emit_diagnostic(&mut self, diag: &Diagnostic) {\n         let mut buffer = self.buffer.borrow_mut();\n@@ -194,12 +205,4 @@ impl Emitter for BufferEmitter {\n     fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         None\n     }\n-\n-    fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n-        None\n-    }\n-\n-    fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n-        &**self.fallback_bundle\n-    }\n }"}, {"sha": "53358b183cbf527ad6d6476088aa71fc6e7ed6ec", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -9,7 +9,6 @@ where\n     use std::convert::TryFrom;\n     <[T; N.get()]>::try_from(())\n     //~^ error: the trait bound\n-    //~| error: the trait bound\n     //~| error: mismatched types\n }\n "}, {"sha": "9ff1f60c0d5c7d96df05ac1e0aab365b1b7a1689", "filename": "src/test/rustdoc-json/nested.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -4,27 +4,28 @@\n // @is nested.json \"$.crate_version\" \\\"1.0.0\\\"\n // @is - \"$.index[*][?(@.name=='nested')].kind\" \\\"module\\\"\n // @is - \"$.index[*][?(@.name=='nested')].inner.is_crate\" true\n-// @count - \"$.index[*][?(@.name=='nested')].inner.items[*]\" 1\n+\n+// @set l1_id = - \"$.index[*][?(@.name=='l1')].id\"\n+// @ismany - \"$.index[*][?(@.name=='nested')].inner.items[*]\" $l1_id\n \n // @is nested.json \"$.index[*][?(@.name=='l1')].kind\" \\\"module\\\"\n // @is - \"$.index[*][?(@.name=='l1')].inner.is_crate\" false\n-// @count - \"$.index[*][?(@.name=='l1')].inner.items[*]\" 2\n pub mod l1 {\n-\n     // @is nested.json \"$.index[*][?(@.name=='l3')].kind\" \\\"module\\\"\n     // @is - \"$.index[*][?(@.name=='l3')].inner.is_crate\" false\n-    // @count - \"$.index[*][?(@.name=='l3')].inner.items[*]\" 1\n     // @set l3_id = - \"$.index[*][?(@.name=='l3')].id\"\n-    // @has - \"$.index[*][?(@.name=='l1')].inner.items[*]\" $l3_id\n     pub mod l3 {\n \n         // @is nested.json \"$.index[*][?(@.name=='L4')].kind\" \\\"struct\\\"\n         // @is - \"$.index[*][?(@.name=='L4')].inner.struct_type\" \\\"unit\\\"\n         // @set l4_id = - \"$.index[*][?(@.name=='L4')].id\"\n-        // @has - \"$.index[*][?(@.name=='l3')].inner.items[*]\" $l4_id\n+        // @ismany - \"$.index[*][?(@.name=='l3')].inner.items[*]\" $l4_id\n         pub struct L4;\n     }\n     // @is nested.json \"$.index[*][?(@.inner.source=='l3::L4')].kind\" \\\"import\\\"\n     // @is - \"$.index[*][?(@.inner.source=='l3::L4')].inner.glob\" false\n+    // @is - \"$.index[*][?(@.inner.source=='l3::L4')].inner.id\" $l4_id\n+    // @set l4_use_id = - \"$.index[*][?(@.inner.source=='l3::L4')].id\"\n     pub use l3::L4;\n }\n+// @ismany - \"$.index[*][?(@.name=='l1')].inner.items[*]\" $l3_id $l4_use_id"}, {"sha": "4fe25904423ed2023480ac84ace93aecf2fe99e0", "filename": "src/test/rustdoc-json/reexport/glob_extern.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_extern.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -4,15 +4,20 @@\n #![feature(no_core)]\n \n // @is glob_extern.json \"$.index[*][?(@.name=='mod1')].kind\" \\\"module\\\"\n-// @is glob_extern.json \"$.index[*][?(@.name=='mod1')].inner.is_stripped\" \"true\"\n+// @is - \"$.index[*][?(@.name=='mod1')].inner.is_stripped\" \"true\"\n mod mod1 {\n     extern \"C\" {\n-        // @has - \"$.index[*][?(@.name=='public_fn')].id\"\n+        // @set public_fn_id = - \"$.index[*][?(@.name=='public_fn')].id\"\n         pub fn public_fn();\n         // @!has - \"$.index[*][?(@.name=='private_fn')]\"\n         fn private_fn();\n     }\n+    // @ismany - \"$.index[*][?(@.name=='mod1')].inner.items[*]\" $public_fn_id\n+    // @set mod1_id = - \"$.index[*][?(@.name=='mod1')].id\"\n }\n \n // @is - \"$.index[*][?(@.kind=='import')].inner.glob\" true\n+// @is - \"$.index[*][?(@.kind=='import')].inner.id\" $mod1_id\n+// @set use_id = - \"$.index[*][?(@.kind=='import')].id\"\n+// @ismany - \"$.index[*][?(@.name=='glob_extern')].inner.items[*]\" $use_id\n pub use mod1::*;"}, {"sha": "04460a817f1308d91cca16d7dde8688550e08337", "filename": "src/test/rustdoc-json/reexport/glob_private.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_private.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -16,7 +16,7 @@ mod mod1 {\n         struct Mod2Private;\n     }\n \n-    // @has - \"$.index[*][?(@.kind=='import' && @.inner.name=='mod2')]\"\n+    // @set mod2_use_id = - \"$.index[*][?(@.kind=='import' && @.inner.name=='mod2')].id\"\n     pub use self::mod2::*;\n \n     // @set m1pub_id = - \"$.index[*][?(@.name=='Mod1Public')].id\"\n@@ -25,8 +25,9 @@ mod mod1 {\n     struct Mod1Private;\n }\n \n-// @has - \"$.index[*][?(@.kind=='import' && @.inner.name=='mod1')]\"\n+// @set mod1_use_id = - \"$.index[*][?(@.kind=='import' && @.inner.name=='mod1')].id\"\n pub use mod1::*;\n \n-// @has - \"$.index[*][?(@.name=='mod2')].inner.items[*]\" $m2pub_id\n-// @has - \"$.index[*][?(@.name=='mod1')].inner.items[*]\" $m1pub_id\n+// @ismany - \"$.index[*][?(@.name=='mod2')].inner.items[*]\" $m2pub_id\n+// @ismany - \"$.index[*][?(@.name=='mod1')].inner.items[*]\" $m1pub_id $mod2_use_id\n+// @ismany - \"$.index[*][?(@.name=='glob_private')].inner.items[*]\" $mod1_use_id"}, {"sha": "09302ee3acb2daaa82807dfd18db4b8482f3b46a", "filename": "src/test/rustdoc-json/reexport/in_root_and_mod_pub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -3,7 +3,7 @@\n \n pub mod foo {\n     // @set bar_id = in_root_and_mod_pub.json \"$.index[*][?(@.name=='Bar')].id\"\n-    // @has - \"$.index[*][?(@.name=='foo')].inner.items[*]\" $bar_id\n+    // @ismany - \"$.index[*][?(@.name=='foo')].inner.items[*]\" $bar_id\n     pub struct Bar;\n }\n \n@@ -15,6 +15,6 @@ pub use foo::Bar;\n pub mod baz {\n     // @set baz_import_id = - \"$.index[*][?(@.inner.source=='crate::foo::Bar')].id\"\n     // @is - \"$.index[*][?(@.inner.source=='crate::foo::Bar')].inner.id\" $bar_id\n-    // @has - \"$.index[*][?(@.name=='baz')].inner.items[*]\" $baz_import_id\n+    // @ismany - \"$.index[*][?(@.name=='baz')].inner.items[*]\" $baz_import_id\n     pub use crate::foo::Bar;\n }"}, {"sha": "0959736f309887f5b0c8da8817fd9ce1e52d057e", "filename": "src/test/rustdoc-json/reexport/macro.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fmacro.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -3,15 +3,13 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @count macro.json \"$.index[*][?(@.name=='macro')].inner.items[*]\" 2\n-\n // @set repro_id = macro.json \"$.index[*][?(@.name=='repro')].id\"\n-// @has - \"$.index[*][?(@.name=='macro')].inner.items[*]\" $repro_id\n #[macro_export]\n macro_rules! repro {\n     () => {};\n }\n \n // @set repro2_id = macro.json \"$.index[*][?(@.inner.name=='repro2')].id\"\n-// @has - \"$.index[*][?(@.name=='macro')].inner.items[*]\" $repro2_id\n pub use crate::repro as repro2;\n+\n+// @ismany macro.json \"$.index[*][?(@.name=='macro')].inner.items[*]\" $repro_id $repro2_id"}, {"sha": "a76d352b28ba4a855191858575b6b2b09ec42668", "filename": "src/test/rustdoc-json/reexport/private_twice_one_inline.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_twice_one_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_twice_one_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_twice_one_inline.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1,18 +1,28 @@\n // aux-build:pub-struct.rs\n+// ignore-tidy-linelength\n \n-// Test for the ICE in rust/83057\n-// Am external type re-exported with different attributes shouldn't cause an error\n+// Test for the ICE in https://github.com/rust-lang/rust/issues/83057\n+// An external type re-exported with different attributes shouldn't cause an error\n \n #![no_core]\n #![feature(no_core)]\n \n extern crate pub_struct as foo;\n-\n #[doc(inline)]\n+\n+// @set crate_use_id = private_twice_one_inline.json \"$.index[*][?(@.docs=='Hack A')].id\"\n+// @set foo_id = - \"$.index[*][?(@.docs=='Hack A')].inner.id\"\n+/// Hack A\n pub use foo::Foo;\n \n+// @set bar_id = - \"$.index[*][?(@.name=='bar')].id\"\n pub mod bar {\n+    // @is - \"$.index[*][?(@.docs=='Hack B')].inner.id\" $foo_id\n+    // @set bar_use_id = - \"$.index[*][?(@.docs=='Hack B')].id\"\n+    // @ismany - \"$.index[*][?(@.name=='bar')].inner.items[*]\" $bar_use_id\n+    /// Hack B\n     pub use foo::Foo;\n }\n \n-// @count private_twice_one_inline.json \"$.index[*][?(@.kind=='import')]\" 2\n+// @ismany - \"$.index[*][?(@.kind=='import')].id\" $crate_use_id $bar_use_id\n+// @ismany - \"$.index[*][?(@.name=='private_twice_one_inline')].inner.items[*]\" $bar_id $crate_use_id"}, {"sha": "cd8212cf34419d5bf4ec47081ff4ea7b6403f62b", "filename": "src/test/rustdoc-json/reexport/private_two_names.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_two_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_two_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fprivate_two_names.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1,4 +1,6 @@\n-// Test for the ICE in rust/83720\n+// ignore-tidy-linelength\n+\n+// Test for the ICE in https://github.com/rust-lang/rust/issues/83720\n // A pub-in-private type re-exported under two different names shouldn't cause an error\n \n #![no_core]\n@@ -7,11 +9,15 @@\n // @is private_two_names.json \"$.index[*][?(@.name=='style')].kind\" \\\"module\\\"\n // @is private_two_names.json \"$.index[*][?(@.name=='style')].inner.is_stripped\" \"true\"\n mod style {\n-    // @has - \"$.index[*](?(@.name=='Color'))\"\n+    // @set color_struct_id = - \"$.index[*][?(@.kind=='struct' && @.name=='Color')].id\"\n     pub struct Color;\n }\n \n-// @has - \"$.index[*][?(@.kind=='import' && @.inner.name=='Color')]\"\n+// @is - \"$.index[*][?(@.kind=='import' && @.inner.name=='Color')].inner.id\" $color_struct_id\n+// @set color_export_id = - \"$.index[*][?(@.kind=='import' && @.inner.name=='Color')].id\"\n pub use style::Color;\n-// @has - \"$.index[*][?(@.kind=='import' && @.inner.name=='Colour')]\"\n+// @is - \"$.index[*][?(@.kind=='import' && @.inner.name=='Colour')].inner.id\" $color_struct_id\n+// @set colour_export_id = - \"$.index[*][?(@.kind=='import' && @.inner.name=='Colour')].id\"\n pub use style::Color as Colour;\n+\n+// @ismany - \"$.index[*][?(@.name=='private_two_names')].inner.items[*]\" $color_export_id $colour_export_id"}, {"sha": "d41556974b43b5886003c133f7be5c3198802748", "filename": "src/test/rustdoc-json/reexport/rename_public.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_public.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -4,14 +4,14 @@\n #![feature(no_core)]\n \n // @set inner_id = rename_public.json \"$.index[*][?(@.name=='inner')].id\"\n-// @has - \"$.index[*][?(@.name=='rename_public')].inner.items[*]\" $inner_id\n pub mod inner {\n     // @set public_id = - \"$.index[*][?(@.name=='Public')].id\"\n-    // @has - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n+    // @ismany - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n     pub struct Public;\n }\n // @set import_id = - \"$.index[*][?(@.inner.name=='NewName')].id\"\n // @!has - \"$.index[*][?(@.inner.name=='Public')]\"\n-// @has - \"$.index[*][?(@.name=='rename_public')].inner.items[*]\" $import_id\n // @is - \"$.index[*][?(@.inner.name=='NewName')].inner.source\" \\\"inner::Public\\\"\n pub use inner::Public as NewName;\n+\n+// @ismany - \"$.index[*][?(@.name=='rename_public')].inner.items[*]\" $inner_id $import_id"}, {"sha": "1d76c7e139bdb8814b1b1f20c5fcee85c5e919ab", "filename": "src/test/rustdoc-json/reexport/same_type_reexported_more_than_once.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1,15 +1,23 @@\n+// ignore-tidy-linelength\n+\n // Regression test for <https://github.com/rust-lang/rust/issues/97432>.\n \n #![feature(no_core)]\n #![no_std]\n #![no_core]\n \n // @has same_type_reexported_more_than_once.json\n-// @has - \"$.index[*][?(@.name=='Trait')]\"\n-pub use inner::Trait;\n-// @has - \"$.index[*].inner[?(@.name=='Reexport')].id\"\n-pub use inner::Trait as Reexport;\n \n mod inner {\n+    // @set trait_id = - \"$.index[*][?(@.name=='Trait')].id\"\n     pub trait Trait {}\n }\n+\n+// @set export_id = - \"$.index[*][?(@.inner.name=='Trait')].id\"\n+// @is - \"$.index[*][?(@.inner.name=='Trait')].inner.id\" $trait_id\n+pub use inner::Trait;\n+// @set reexport_id = - \"$.index[*][?(@.inner.name=='Reexport')].id\"\n+// @is - \"$.index[*][?(@.inner.name=='Reexport')].inner.id\" $trait_id\n+pub use inner::Trait as Reexport;\n+\n+// @ismany - \"$.index[*][?(@.name=='same_type_reexported_more_than_once')].inner.items[*]\" $reexport_id $export_id"}, {"sha": "55523bcd1deef48754a76831190d00c37925bafa", "filename": "src/test/rustdoc-json/reexport/simple_private.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_private.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -10,6 +10,8 @@ mod inner {\n }\n \n // @is - \"$.index[*][?(@.kind=='import')].inner.name\" \\\"Public\\\"\n+// @set use_id = - \"$.index[*][?(@.kind=='import')].id\"\n pub use inner::Public;\n \n-// @has - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $pub_id\n+// @ismany - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $pub_id\n+// @ismany - \"$.index[*][?(@.name=='simple_private')].inner.items[*]\" $use_id"}, {"sha": "a3156a2b33a8e02f8834501a178dcd74c8812ac4", "filename": "src/test/rustdoc-json/reexport/simple_public.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_public.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -4,15 +4,15 @@\n #![feature(no_core)]\n \n // @set inner_id = simple_public.json \"$.index[*][?(@.name=='inner')].id\"\n-// @has - \"$.index[*][?(@.name=='simple_public')].inner.items[*]\" $inner_id\n pub mod inner {\n \n     // @set public_id = - \"$.index[*][?(@.name=='Public')].id\"\n-    // @has - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n+    // @ismany - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n     pub struct Public;\n }\n \n // @set import_id = - \"$.index[*][?(@.inner.name=='Public')].id\"\n-// @has - \"$.index[*][?(@.name=='simple_public')].inner.items[*]\" $import_id\n // @is - \"$.index[*][?(@.inner.name=='Public')].inner.source\" \\\"inner::Public\\\"\n pub use inner::Public;\n+\n+// @ismany - \"$.index[*][?(@.name=='simple_public')].inner.items[*]\" $import_id $inner_id"}, {"sha": "fd49a0890c0df7d6090a1f7f16588fe9000635e0", "filename": "src/test/rustdoc-json/type/fn_lifetime.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -2,8 +2,7 @@\n \n // @is fn_lifetime.json \"$.index[*][?(@.name=='GenericFn')].kind\" \\\"typedef\\\"\n \n-// @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*]\" 1\n-// @is    - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].name\" \\\"\\'a\\\"\n+// @ismany    - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].name\" \\\"\\'a\\\"\n // @has   - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime\"\n // @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime.outlives[*]\" 0\n // @count - \"$.index[*][?(@.name=='GenericFn')].inner.generics.where_predicates[*]\" 0"}, {"sha": "66f1ab726922df37cef4c10b0653d4f3fe08d849", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -33,7 +33,9 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:14\n    |\n LL |     f1(2u32, 4u32);\n-   |              ^^^^ the trait `Foo` is not implemented for `u32`\n+   |     --       ^^^^ the trait `Foo` is not implemented for `u32`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Foo` is implemented for `i32`\n "}, {"sha": "0557340f792fd21292d8fb7aae82683ce9ab4dbc", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -15,11 +15,16 @@ error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known\n   --> $DIR/feature-gate-unsized_fn_params.rs:24:9\n    |\n LL |     foo(*x);\n-   |         ^^ doesn't have a size known at compile-time\n+   |     --- ^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`\n-   = note: all function arguments must have a statically known size\n    = help: unsized fn params are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL |     foo(&*x);\n+   |         +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c4addaccefc1045ec2045563331e1dd0e7fc5326", "filename": "src/test/ui/iterators/issue-28098.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1,7 +1,6 @@\n fn main() {\n     let _ = Iterator::next(&mut ());\n     //~^ ERROR `()` is not an iterator\n-    //~| ERROR `()` is not an iterator\n \n     for _ in false {}\n     //~^ ERROR `bool` is not an iterator\n@@ -17,7 +16,6 @@ pub fn other() {\n \n     let _ = Iterator::next(&mut ());\n     //~^ ERROR `()` is not an iterator\n-    //~| ERROR `()` is not an iterator\n \n     let _ = Iterator::next(&mut ());\n     //~^ ERROR `()` is not an iterator"}, {"sha": "e7128248f93414dfd00e11be7db33bd4ef1eaaf6", "filename": "src/test/ui/iterators/issue-28098.stderr", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -9,7 +9,7 @@ LL |     let _ = Iterator::next(&mut ());\n    = help: the trait `Iterator` is not implemented for `()`\n \n error[E0277]: `bool` is not an iterator\n-  --> $DIR/issue-28098.rs:6:14\n+  --> $DIR/issue-28098.rs:5:14\n    |\n LL |     for _ in false {}\n    |              ^^^^^ `bool` is not an iterator\n@@ -18,7 +18,7 @@ LL |     for _ in false {}\n    = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n \n error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:9:28\n+  --> $DIR/issue-28098.rs:8:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n    |             -------------- ^^^^^^^ `()` is not an iterator\n@@ -28,15 +28,7 @@ LL |     let _ = Iterator::next(&mut ());\n    = help: the trait `Iterator` is not implemented for `()`\n \n error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:2:13\n-   |\n-LL |     let _ = Iterator::next(&mut ());\n-   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `()`\n-\n-error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:18:28\n+  --> $DIR/issue-28098.rs:17:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n    |             -------------- ^^^^^^^ `()` is not an iterator\n@@ -46,7 +38,7 @@ LL |     let _ = Iterator::next(&mut ());\n    = help: the trait `Iterator` is not implemented for `()`\n \n error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:22:28\n+  --> $DIR/issue-28098.rs:20:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n    |             -------------- ^^^^^^^ `()` is not an iterator\n@@ -56,22 +48,14 @@ LL |     let _ = Iterator::next(&mut ());\n    = help: the trait `Iterator` is not implemented for `()`\n \n error[E0277]: `bool` is not an iterator\n-  --> $DIR/issue-28098.rs:25:14\n+  --> $DIR/issue-28098.rs:23:14\n    |\n LL |     for _ in false {}\n    |              ^^^^^ `bool` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n    = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n \n-error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:18:13\n-   |\n-LL |     let _ = Iterator::next(&mut ());\n-   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `()`\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "79c40f650db810daf1f9197fdcd46d4a2f05311e", "filename": "src/test/ui/on-unimplemented/multiple-impls.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -32,11 +32,8 @@ impl Index<Bar<usize>> for [i32] {\n fn main() {\n     Index::index(&[] as &[i32], 2u32);\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n     Index::index(&[] as &[i32], Foo(2u32));\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n     Index::index(&[] as &[i32], Bar(2u32));\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n }"}, {"sha": "6e3601d7bf4b53463496cca851371bd0b073e8ba", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -12,7 +12,7 @@ LL |     Index::index(&[] as &[i32], 2u32);\n              <[i32] as Index<Foo<usize>>>\n \n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:36:18\n+  --> $DIR/multiple-impls.rs:35:18\n    |\n LL |     Index::index(&[] as &[i32], Foo(2u32));\n    |     ------------ ^^^^^^^^^^^^^ on impl for Foo\n@@ -25,7 +25,7 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n              <[i32] as Index<Foo<usize>>>\n \n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:39:18\n+  --> $DIR/multiple-impls.rs:37:18\n    |\n LL |     Index::index(&[] as &[i32], Bar(2u32));\n    |     ------------ ^^^^^^^^^^^^^ on impl for Bar\n@@ -37,39 +37,6 @@ LL |     Index::index(&[] as &[i32], Bar(2u32));\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n-error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n-  --> $DIR/multiple-impls.rs:33:5\n-   |\n-LL |     Index::index(&[] as &[i32], 2u32);\n-   |     ^^^^^^^^^^^^ trait message\n-   |\n-   = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = help: the following other types implement trait `Index<Idx>`:\n-             <[i32] as Index<Bar<usize>>>\n-             <[i32] as Index<Foo<usize>>>\n-\n-error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:36:5\n-   |\n-LL |     Index::index(&[] as &[i32], Foo(2u32));\n-   |     ^^^^^^^^^^^^ on impl for Foo\n-   |\n-   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-   = help: the following other types implement trait `Index<Idx>`:\n-             <[i32] as Index<Bar<usize>>>\n-             <[i32] as Index<Foo<usize>>>\n-\n-error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:39:5\n-   |\n-LL |     Index::index(&[] as &[i32], Bar(2u32));\n-   |     ^^^^^^^^^^^^ on impl for Bar\n-   |\n-   = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-   = help: the following other types implement trait `Index<Idx>`:\n-             <[i32] as Index<Bar<usize>>>\n-             <[i32] as Index<Foo<usize>>>\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "b03e1f7c6a8dfbb8d76b0865b245e48301d5cb18", "filename": "src/test/ui/on-unimplemented/on-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -21,5 +21,4 @@ impl Index<usize> for [i32] {\n fn main() {\n     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n }"}, {"sha": "396c062cfe2acfe26cc67ba8c1246802b16ee562", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -9,15 +9,6 @@ LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n    = help: the trait `Index<usize>` is implemented for `[i32]`\n \n-error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n-  --> $DIR/on-impl.rs:22:5\n-   |\n-LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n-   |     ^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n-   |\n-   = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = help: the trait `Index<usize>` is implemented for `[i32]`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "d6d24be1b8dc43361d9fd15187c8b9de8a71be74", "filename": "src/test/ui/suggestions/return-cycle-2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle-2.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -0,0 +1,14 @@\n+use std::marker::PhantomData;\n+\n+struct Token<T>(PhantomData<T>);\n+\n+impl<T> Token<T> {\n+    fn as_ref(_: i32, _: i32) -> _ {\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+        //~| NOTE not allowed in type signatures\n+        //~| HELP replace with the correct return type\n+        Token(PhantomData::<&T>)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "3a1a0f7f4f543c686b43c632c885e987f90366fc", "filename": "src/test/ui/suggestions/return-cycle-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle-2.stderr?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -0,0 +1,12 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/return-cycle-2.rs:6:34\n+   |\n+LL |     fn as_ref(_: i32, _: i32) -> _ {\n+   |                                  ^\n+   |                                  |\n+   |                                  not allowed in type signatures\n+   |                                  help: replace with the correct return type: `Token<&'static T>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "60b80e35a20b892eee29a85ae05d9b067b3f0bb9", "filename": "src/test/ui/suggestions/return-cycle.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -0,0 +1,14 @@\n+use std::marker::PhantomData;\n+\n+struct Token<T>(PhantomData<T>);\n+\n+impl<T> Token<T> {\n+    fn new() -> _ {\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+        //~| NOTE not allowed in type signatures\n+        //~| HELP replace with the correct return type\n+        Token(PhantomData::<()>)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "63fa9e040874de8c5e0df73f90046876961877d1", "filename": "src/test/ui/suggestions/return-cycle.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-cycle.stderr?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -0,0 +1,12 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/return-cycle.rs:6:17\n+   |\n+LL |     fn new() -> _ {\n+   |                 ^\n+   |                 |\n+   |                 not allowed in type signatures\n+   |                 help: replace with the correct return type: `Token<()>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "d7af558eef42aa45ecd9469b3b6a71016935ba90", "filename": "src/test/ui/unsized/issue-30355.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -2,11 +2,16 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n   --> $DIR/issue-30355.rs:5:8\n    |\n LL |     &X(*Y)\n-   |        ^^ doesn't have a size known at compile-time\n+   |      - ^^ doesn't have a size known at compile-time\n+   |      |\n+   |      required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n-   = note: all function arguments must have a statically known size\n    = help: unsized fn params are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL |     &X(&*Y)\n+   |        +\n \n error: aborting due to previous error\n "}, {"sha": "9809f8ff33c2b998919fd0432c626f0f7323697a", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -1 +1 @@\n-Subproject commit efd4ca3dc0b89929dc8c5f5c023d25978d76cb61\n+Subproject commit 9809f8ff33c2b998919fd0432c626f0f7323697a"}, {"sha": "bffbf20b4d289982288b8a9ffb2e7eb81d39bc97", "filename": "src/tools/clippy/clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foctal_escapes.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -57,10 +57,10 @@ impl EarlyLintPass for OctalEscapes {\n         }\n \n         if let ExprKind::Lit(lit) = &expr.kind {\n-            if matches!(lit.token.kind, LitKind::Str) {\n-                check_lit(cx, &lit.token, lit.span, true);\n-            } else if matches!(lit.token.kind, LitKind::ByteStr) {\n-                check_lit(cx, &lit.token, lit.span, false);\n+            if matches!(lit.token_lit.kind, LitKind::Str) {\n+                check_lit(cx, &lit.token_lit, lit.span, true);\n+            } else if matches!(lit.token_lit.kind, LitKind::ByteStr) {\n+                check_lit(cx, &lit.token_lit, lit.span, false);\n             }\n         }\n     }"}, {"sha": "fa2383066f3f622af5353b45d5431fe33d7df445", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -589,12 +589,12 @@ impl Write {\n                 },\n             };\n \n-            let replacement: String = match lit.token.kind {\n+            let replacement: String = match lit.token_lit.kind {\n                 LitKind::StrRaw(_) | LitKind::ByteStrRaw(_) if matches!(fmtstr.style, StrStyle::Raw(_)) => {\n-                    lit.token.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n+                    lit.token_lit.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n                 },\n                 LitKind::Str | LitKind::ByteStr if matches!(fmtstr.style, StrStyle::Cooked) => {\n-                    lit.token.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n+                    lit.token_lit.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n                 },\n                 LitKind::StrRaw(_)\n                 | LitKind::Str\n@@ -603,7 +603,7 @@ impl Write {\n                 | LitKind::Integer\n                 | LitKind::Float\n                 | LitKind::Err => continue,\n-                LitKind::Byte | LitKind::Char => match lit.token.symbol.as_str() {\n+                LitKind::Byte | LitKind::Char => match lit.token_lit.symbol.as_str() {\n                     \"\\\"\" if matches!(fmtstr.style, StrStyle::Cooked) => \"\\\\\\\"\",\n                     \"\\\"\" if matches!(fmtstr.style, StrStyle::Raw(0)) => continue,\n                     \"\\\\\\\\\" if matches!(fmtstr.style, StrStyle::Raw(_)) => \"\\\\\",\n@@ -614,7 +614,7 @@ impl Write {\n                     x => x,\n                 }\n                 .into(),\n-                LitKind::Bool => lit.token.symbol.as_str().deref().into(),\n+                LitKind::Bool => lit.token_lit.symbol.as_str().deref().into(),\n             };\n \n             if !fmt_spans.is_empty() {"}, {"sha": "022f7eb8e02d0da25ba1426bfdc6d9a581f18a49", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -50,13 +50,15 @@ pub enum CommandKind {\n     Has,\n     Count,\n     Is,\n+    IsMany,\n     Set,\n }\n \n impl CommandKind {\n     fn validate(&self, args: &[String], command_num: usize, lineno: usize) -> bool {\n         let count = match self {\n             CommandKind::Has => (1..=3).contains(&args.len()),\n+            CommandKind::IsMany => args.len() >= 3,\n             CommandKind::Count | CommandKind::Is => 3 == args.len(),\n             CommandKind::Set => 4 == args.len(),\n         };\n@@ -89,6 +91,7 @@ impl fmt::Display for CommandKind {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let text = match self {\n             CommandKind::Has => \"has\",\n+            CommandKind::IsMany => \"ismany\",\n             CommandKind::Count => \"count\",\n             CommandKind::Is => \"is\",\n             CommandKind::Set => \"set\",\n@@ -137,6 +140,7 @@ fn get_commands(template: &str) -> Result<Vec<Command>, ()> {\n             \"has\" => CommandKind::Has,\n             \"count\" => CommandKind::Count,\n             \"is\" => CommandKind::Is,\n+            \"ismany\" => CommandKind::IsMany,\n             \"set\" => CommandKind::Set,\n             _ => {\n                 print_err(&format!(\"Unrecognized command name `@{}`\", cmd), lineno);\n@@ -227,6 +231,44 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n                 _ => unreachable!(),\n             }\n         }\n+        CommandKind::IsMany => {\n+            // @ismany <path> <jsonpath> <value>...\n+            let (path, query, values) = if let [path, query, values @ ..] = &command.args[..] {\n+                (path, query, values)\n+            } else {\n+                unreachable!(\"Checked in CommandKind::validate\")\n+            };\n+            let val = cache.get_value(path)?;\n+            let got_values = select(&val, &query).unwrap();\n+            assert!(!command.negated, \"`@!ismany` is not supported\");\n+\n+            // Serde json doesn't implement Ord or Hash for Value, so we must\n+            // use a Vec here. While in theory that makes setwize equality\n+            // O(n^2), in practice n will never be large enought to matter.\n+            let expected_values =\n+                values.iter().map(|v| string_to_value(v, cache)).collect::<Vec<_>>();\n+            if expected_values.len() != got_values.len() {\n+                return Err(CkError::FailedCheck(\n+                    format!(\n+                        \"Expected {} values, but `{}` matched to {} values ({:?})\",\n+                        expected_values.len(),\n+                        query,\n+                        got_values.len(),\n+                        got_values\n+                    ),\n+                    command,\n+                ));\n+            };\n+            for got_value in got_values {\n+                if !expected_values.iter().any(|exp| &**exp == got_value) {\n+                    return Err(CkError::FailedCheck(\n+                        format!(\"`{}` has match {:?}, which was not expected\", query, got_value),\n+                        command,\n+                    ));\n+                }\n+            }\n+            true\n+        }\n         CommandKind::Count => {\n             // @count <path> <jsonpath> <count> = Check that the jsonpath matches exactly [count] times\n             assert_eq!(command.args.len(), 3);"}, {"sha": "3105882e2d308085a6e0f8ab2269e47594a0d8b2", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -79,7 +79,7 @@ pub(crate) fn format_expr(\n             if let Some(expr_rw) = rewrite_literal(context, l, shape) {\n                 Some(expr_rw)\n             } else {\n-                if let LitKind::StrRaw(_) = l.token.kind {\n+                if let LitKind::StrRaw(_) = l.token_lit.kind {\n                     Some(context.snippet(l.span).trim().into())\n                 } else {\n                     None\n@@ -1226,7 +1226,7 @@ fn rewrite_string_lit(context: &RewriteContext<'_>, span: Span, shape: Shape) ->\n \n fn rewrite_int_lit(context: &RewriteContext<'_>, lit: &ast::Lit, shape: Shape) -> Option<String> {\n     let span = lit.span;\n-    let symbol = lit.token.symbol.as_str();\n+    let symbol = lit.token_lit.symbol.as_str();\n \n     if let Some(symbol_stripped) = symbol.strip_prefix(\"0x\") {\n         let hex_lit = match context.config.hex_literal_case() {\n@@ -1239,7 +1239,9 @@ fn rewrite_int_lit(context: &RewriteContext<'_>, lit: &ast::Lit, shape: Shape) -\n                 format!(\n                     \"0x{}{}\",\n                     hex_lit,\n-                    lit.token.suffix.map_or(String::new(), |s| s.to_string())\n+                    lit.token_lit\n+                        .suffix\n+                        .map_or(String::new(), |s| s.to_string())\n                 ),\n                 context.config.max_width(),\n                 shape,"}, {"sha": "6efeee98fea6c2671446bd45e03216a2a55bbdf0", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -3,6 +3,7 @@ use std::sync::atomic::{AtomicBool, Ordering};\n \n use rustc_data_structures::sync::{Lrc, Send};\n use rustc_errors::emitter::{Emitter, EmitterWriter};\n+use rustc_errors::translation::Translate;\n use rustc_errors::{ColorConfig, Diagnostic, Handler, Level as DiagnosticLevel};\n use rustc_session::parse::ParseSess as RawParseSess;\n use rustc_span::{\n@@ -28,19 +29,24 @@ pub(crate) struct ParseSess {\n /// Emitter which discards every error.\n struct SilentEmitter;\n \n-impl Emitter for SilentEmitter {\n-    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n-        None\n-    }\n-    fn emit_diagnostic(&mut self, _db: &Diagnostic) {}\n+impl Translate for SilentEmitter {\n     fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n         None\n     }\n+\n     fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n         panic!(\"silent emitter attempted to translate a diagnostic\");\n     }\n }\n \n+impl Emitter for SilentEmitter {\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n+        None\n+    }\n+\n+    fn emit_diagnostic(&mut self, _db: &Diagnostic) {}\n+}\n+\n fn silent_emitter() -> Box<dyn Emitter + Send> {\n     Box::new(SilentEmitter {})\n }\n@@ -62,10 +68,21 @@ impl SilentOnIgnoredFilesEmitter {\n     }\n }\n \n+impl Translate for SilentOnIgnoredFilesEmitter {\n+    fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n+        self.emitter.fluent_bundle()\n+    }\n+\n+    fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n+        self.emitter.fallback_fluent_bundle()\n+    }\n+}\n+\n impl Emitter for SilentOnIgnoredFilesEmitter {\n     fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         None\n     }\n+\n     fn emit_diagnostic(&mut self, db: &Diagnostic) {\n         if db.level() == DiagnosticLevel::Fatal {\n             return self.handle_non_ignoreable_error(db);\n@@ -88,14 +105,6 @@ impl Emitter for SilentOnIgnoredFilesEmitter {\n         }\n         self.handle_non_ignoreable_error(db);\n     }\n-\n-    fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n-        self.emitter.fluent_bundle()\n-    }\n-\n-    fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n-        self.emitter.fallback_fluent_bundle()\n-    }\n }\n \n fn default_handler(\n@@ -340,19 +349,24 @@ mod tests {\n             num_emitted_errors: Lrc<AtomicU32>,\n         }\n \n+        impl Translate for TestEmitter {\n+            fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n+                None\n+            }\n+\n+            fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n+                panic!(\"test emitter attempted to translate a diagnostic\");\n+            }\n+        }\n+\n         impl Emitter for TestEmitter {\n             fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n                 None\n             }\n+\n             fn emit_diagnostic(&mut self, _db: &Diagnostic) {\n                 self.num_emitted_errors.fetch_add(1, Ordering::Release);\n             }\n-            fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n-                None\n-            }\n-            fn fallback_fluent_bundle(&self) -> &rustc_errors::FluentBundle {\n-                panic!(\"test emitter attempted to translate a diagnostic\");\n-            }\n         }\n \n         fn build_diagnostic(level: DiagnosticLevel, span: Option<MultiSpan>) -> Diagnostic {"}, {"sha": "b7532e016b68ea0a443cf80f8d60e2c331585fdc", "filename": "triagebot.toml", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9c20b2a8cc7588decb6de25ac6a7912dcef24d65/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=9c20b2a8cc7588decb6de25ac6a7912dcef24d65", "patch": "@@ -178,6 +178,13 @@ trigger_files = [\n     \"src/tools/bump-stage0\",\n ]\n \n+[autolabel.\"A-translation\"]\n+trigger_files = [\n+    \"compiler/rustc_error_messages\",\n+    \"compiler/rustc_errors/src/translation.rs\",\n+    \"compiler/rustc_macros/src/diagnostics\"\n+]\n+\n [notify-zulip.\"I-prioritize\"]\n zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n topic = \"#{number} {title}\"\n@@ -342,3 +349,15 @@ cc = [\"@rust-lang/rustfmt\"]\n [mentions.\"compiler/rustc_middle/src/mir/syntax.rs\"]\n message = \"This PR changes MIR\"\n cc = [\"@oli-obk\", \"@RalfJung\", \"@JakobDegen\", \"@davidtwco\", \"@celinval\", \"@vakaras\"]\n+\n+[mentions.\"compiler/rustc_error_messages\"]\n+message = \"`rustc_error_messages` was changed\"\n+cc = [\"@davidtwco\", \"@compiler-errors\", \"@JohnTitor\", \"@estebank\"]\n+\n+[mentions.\"compiler/rustc_errors/src/translation.rs\"]\n+message = \"`rustc_errors::translation` was changed\"\n+cc = [\"@davidtwco\", \"@compiler-errors\", \"@JohnTitor\", \"@estebank\"]\n+\n+[mentions.\"compiler/rustc_macros/src/diagnostics\"]\n+message = \"`rustc_macros::diagnostics` was changed\"\n+cc = [\"@davidtwco\", \"@compiler-errors\", \"@JohnTitor\", \"@estebank\"]"}]}