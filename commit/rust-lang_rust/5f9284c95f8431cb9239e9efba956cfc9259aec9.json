{"sha": "5f9284c95f8431cb9239e9efba956cfc9259aec9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOTI4NGM5NWY4NDMxY2I5MjM5ZTllZmJhOTU2Y2ZjOTI1OWFlYzk=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-01-27T11:50:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-27T11:50:52Z"}, "message": "Rollup merge of #68562 - hjung4:spell, r=jonas-schievink\n\nFix spelling errors", "tree": {"sha": "93e3dfd56efc4854b98209c42ab8b122cf4512f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93e3dfd56efc4854b98209c42ab8b122cf4512f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f9284c95f8431cb9239e9efba956cfc9259aec9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeLs6cCRBK7hj4Ov3rIwAAdHIIACyn29mFt5IEEfyASiwHQg7S\n5YBXLD7HwWNirLD3c7pJRYOR0Ynw4EuusiHntAXUppIARAnDh4+Z54Z6n7hG+d0h\nUsemjlY5hwXWe0FIQ6aLqwwyQVGxlo7ZR6nl/0agTw+lnMDhoOxkWe2ed9OqzlWU\nl7LAk/CR33w8VvMXY2tuV6DnJE/N3o1uabYt9+0ktqnxkCqG0MPSxqwtw4fI5dUT\nbJufiS68FnIUjJMJSBMw5FapoesbWiekMb6fcFdUivmWMqBdE/mKqWnd6Jm4Y1ws\nTlP5xHkiH9jbWRL7rnpsl5NdQqVPbKq24989XWTw3c+dWJeJpXhGaJw8TRYxmzo=\n=wfHm\n-----END PGP SIGNATURE-----\n", "payload": "tree 93e3dfd56efc4854b98209c42ab8b122cf4512f1\nparent 9188bab4dbe6a644c2019de25c4c207f02e60a31\nparent 9a78c2b11d50fc1ed60c92eec7cb59ae74516e89\nauthor Pietro Albini <pietro@pietroalbini.org> 1580125852 +0100\ncommitter GitHub <noreply@github.com> 1580125852 +0100\n\nRollup merge of #68562 - hjung4:spell, r=jonas-schievink\n\nFix spelling errors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9284c95f8431cb9239e9efba956cfc9259aec9", "html_url": "https://github.com/rust-lang/rust/commit/5f9284c95f8431cb9239e9efba956cfc9259aec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f9284c95f8431cb9239e9efba956cfc9259aec9/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9188bab4dbe6a644c2019de25c4c207f02e60a31", "url": "https://api.github.com/repos/rust-lang/rust/commits/9188bab4dbe6a644c2019de25c4c207f02e60a31", "html_url": "https://github.com/rust-lang/rust/commit/9188bab4dbe6a644c2019de25c4c207f02e60a31"}, {"sha": "9a78c2b11d50fc1ed60c92eec7cb59ae74516e89", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a78c2b11d50fc1ed60c92eec7cb59ae74516e89", "html_url": "https://github.com/rust-lang/rust/commit/9a78c2b11d50fc1ed60c92eec7cb59ae74516e89"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "4c3c4ddac78ee40c115889de8d50ded11ff9cbdb", "filename": "src/librustc_ast_lowering/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f9284c95f8431cb9239e9efba956cfc9259aec9/src%2Flibrustc_ast_lowering%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9284c95f8431cb9239e9efba956cfc9259aec9/src%2Flibrustc_ast_lowering%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpat.rs?ref=5f9284c95f8431cb9239e9efba956cfc9259aec9", "patch": "@@ -129,7 +129,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let mut prev_rest_span = None;\n \n         let mut iter = pats.iter();\n-        // Lower all the patterns until the first occurence of a sub-slice pattern.\n+        // Lower all the patterns until the first occurrence of a sub-slice pattern.\n         for pat in iter.by_ref() {\n             match pat.kind {\n                 // Found a sub-slice pattern `..`. Record, lower it to `_`, and stop here."}, {"sha": "1ab8f05db126632f6679699fba86fd43827596ae", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f9284c95f8431cb9239e9efba956cfc9259aec9/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9284c95f8431cb9239e9efba956cfc9259aec9/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=5f9284c95f8431cb9239e9efba956cfc9259aec9", "patch": "@@ -477,7 +477,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// If one of the types is an uncalled function and calling it would yield the other type,\n-    /// suggest calling the function. Returns wether a suggestion was given.\n+    /// suggest calling the function. Returns whether a suggestion was given.\n     fn add_type_neq_err_label(\n         &self,\n         err: &mut rustc_errors::DiagnosticBuilder<'_>,"}, {"sha": "56fc84b4a3fcac372b714f3d4d16d85ec357f9d7", "filename": "src/libstd/sys/sgx/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f9284c95f8431cb9239e9efba956cfc9259aec9/src%2Flibstd%2Fsys%2Fsgx%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9284c95f8431cb9239e9efba956cfc9259aec9/src%2Flibstd%2Fsys%2Fsgx%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fos.rs?ref=5f9284c95f8431cb9239e9efba956cfc9259aec9", "patch": "@@ -19,7 +19,7 @@ pub fn errno() -> i32 {\n \n pub fn error_string(errno: i32) -> String {\n     if errno == RESULT_SUCCESS {\n-        \"operation succesful\".into()\n+        \"operation successful\".into()\n     } else if ((Error::UserRangeStart as _)..=(Error::UserRangeEnd as _)).contains(&errno) {\n         format!(\"user-specified error {:08x}\", errno)\n     } else {"}, {"sha": "a3023ee906de83496c756d1d7dfe4191fb3c3f84", "filename": "src/test/ui/issues/issue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f9284c95f8431cb9239e9efba956cfc9259aec9/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9284c95f8431cb9239e9efba956cfc9259aec9/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs?ref=5f9284c95f8431cb9239e9efba956cfc9259aec9", "patch": "@@ -10,7 +10,7 @@\n // However, we did not account for the expected type being different than the tuple pattern type.\n // This caused an issue when the tuple pattern type (`P<T>`) was generic.\n // Specifically, we tried deriving the 0th field's type using the `substs` of the expected type.\n-// When attempting to substitute `T`, there was no such substitution, so \"out of range\" occured.\n+// When attempting to substitute `T`, there was no such substitution, so \"out of range\" occurred.\n \n struct U {} // 0 type parameters offered\n struct P<T>(T); // 1 type parameter wanted"}, {"sha": "be66c9ab2db6775f07509813059da27350b14206", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f9284c95f8431cb9239e9efba956cfc9259aec9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9284c95f8431cb9239e9efba956cfc9259aec9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=5f9284c95f8431cb9239e9efba956cfc9259aec9", "patch": "@@ -2949,7 +2949,7 @@ impl<'test> TestCx<'test> {\n             };\n             if run_output_errors > 0 {\n                 self.fatal_proc_rec(\n-                    &format!(\"{} errors occured comparing run output.\", run_output_errors),\n+                    &format!(\"{} errors occurred comparing run output.\", run_output_errors),\n                     &proc_res,\n                 );\n             }"}]}