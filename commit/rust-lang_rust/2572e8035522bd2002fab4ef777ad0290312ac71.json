{"sha": "2572e8035522bd2002fab4ef777ad0290312ac71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NzJlODAzNTUyMmJkMjAwMmZhYjRlZjc3N2FkMDI5MDMxMmFjNzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-07T02:40:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-07T21:02:33Z"}, "message": "Remove 'let' syntax for struct fields", "tree": {"sha": "ab5750fd1c01aaf9db992ab807b9cbb8a88dec3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab5750fd1c01aaf9db992ab807b9cbb8a88dec3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2572e8035522bd2002fab4ef777ad0290312ac71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2572e8035522bd2002fab4ef777ad0290312ac71", "html_url": "https://github.com/rust-lang/rust/commit/2572e8035522bd2002fab4ef777ad0290312ac71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2572e8035522bd2002fab4ef777ad0290312ac71/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14303bad89a049b5ca54ad49b4f4ccff7a06b85f", "url": "https://api.github.com/repos/rust-lang/rust/commits/14303bad89a049b5ca54ad49b4f4ccff7a06b85f", "html_url": "https://github.com/rust-lang/rust/commit/14303bad89a049b5ca54ad49b4f4ccff7a06b85f"}], "stats": {"total": 647, "additions": 322, "deletions": 325}, "files": [{"sha": "f9d689759444482918a444bd7b66888a894cb40a", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -98,7 +98,7 @@ fn listen<T: send, U>(f: fn(Chan<T>) -> U) -> U {\n }\n \n struct PortPtr<T:send> {\n-  let po: *rust_port;\n+    po: *rust_port,\n   drop unsafe {\n       do task::unkillable {\n         // Once the port is detached it's guaranteed not to receive further\n@@ -138,7 +138,7 @@ fn PortPtr<T: send>(po: *rust_port) -> PortPtr<T> {\n fn as_raw_port<T: send, U>(ch: comm::Chan<T>, f: fn(*rust_port) -> U) -> U {\n \n     struct PortRef {\n-       let p: *rust_port;\n+        p: *rust_port,\n        drop {\n          if !ptr::is_null(self.p) {\n            rustrt::rust_port_drop(self.p);"}, {"sha": "d12062f827ad65b9b64b3008198c91bba8962ab8", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -36,9 +36,9 @@ export cleanup_stack_for_failure;\n \n // Mirrors rust_stack.h stk_seg\n struct StackSegment {\n-    let prev: *StackSegment;\n-    let next: *StackSegment;\n-    let end: uintptr_t;\n+    prev: *StackSegment,\n+    next: *StackSegment,\n+    end: uintptr_t,\n     // And other fields which we don't care about...\n }\n "}, {"sha": "d16abb26ae36c7f215920e23ce65ad49507bc0ae", "filename": "src/libcore/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -246,7 +246,7 @@ impl<T: Reader, C> {base: T, cleanup: C}: Reader {\n }\n \n struct FILERes {\n-    let f: *libc::FILE;\n+    f: *libc::FILE,\n     drop { libc::fclose(self.f); }\n }\n \n@@ -422,7 +422,7 @@ impl fd_t: Writer {\n }\n \n struct FdRes {\n-    let fd: fd_t;\n+    fd: fd_t,\n     drop { libc::close(self.fd); }\n }\n \n@@ -778,7 +778,7 @@ mod fsync {\n \n     // Artifacts that need to fsync on destruction\n     struct Res<t> {\n-        let arg: Arg<t>;\n+        arg: Arg<t>,\n         drop {\n           match self.arg.opt_level {\n             option::None => (),"}, {"sha": "5b7aee4d74c5611cf1a3da16052b45d204eb62cd", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -292,7 +292,7 @@ fn test_unwrap_str() {\n #[test]\n fn test_unwrap_resource() {\n     struct R {\n-       let i: @mut int;\n+       i: @mut int,\n        drop { *(self.i) += 1; }\n     }\n "}, {"sha": "f74e4bca40c0972df7b1bb4117cad3723a35c676", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -134,7 +134,7 @@ impl State: Eq {\n struct BufferHeader {\n     // Tracks whether this buffer needs to be freed. We can probably\n     // get away with restricting it to 0 or 1, if we're careful.\n-    let mut ref_count: int;\n+    mut ref_count: int,\n \n     // We may want a drop, and to be careful about stringing this\n     // thing along.\n@@ -158,12 +158,12 @@ type Buffer<T: send> = {\n };\n \n struct PacketHeader {\n-    let mut state: State;\n-    let mut blocked_task: *rust_task;\n+    mut state: State,\n+    mut blocked_task: *rust_task,\n \n     // This is a reinterpret_cast of a ~buffer, that can also be cast\n     // to a buffer_header if need be.\n-    let mut buffer: *libc::c_void;\n+    mut buffer: *libc::c_void,\n \n     // Returns the old state.\n     unsafe fn mark_blocked(this: *rust_task) -> State {\n@@ -374,7 +374,7 @@ unsafe fn get_buffer<T: send>(p: *PacketHeader) -> ~Buffer<T> {\n \n // This could probably be done with SharedMutableState to avoid move_it!().\n struct BufferResource<T: send> {\n-    let buffer: ~Buffer<T>;\n+    buffer: ~Buffer<T>,\n \n     drop unsafe {\n         let b = move_it!(self.buffer);\n@@ -779,8 +779,8 @@ fn send_packet<T: send>(p: *packet<T>) -> SendPacket<T> {\n }\n \n struct SendPacketBuffered<T: send, Tbuffer: send> {\n-    let mut p: Option<*Packet<T>>;\n-    let mut buffer: Option<BufferResource<Tbuffer>>;\n+    mut p: Option<*Packet<T>>,\n+    mut buffer: Option<BufferResource<Tbuffer>>,\n     drop {\n         //if self.p != none {\n         //    debug!(\"drop send %?\", option::get(self.p));\n@@ -860,8 +860,8 @@ fn recv_packet<T: send>(p: *packet<T>) -> RecvPacket<T> {\n }\n \n struct RecvPacketBuffered<T: send, Tbuffer: send> : Selectable {\n-    let mut p: Option<*Packet<T>>;\n-    let mut buffer: Option<BufferResource<Tbuffer>>;\n+    mut p: Option<*Packet<T>>,\n+    mut buffer: Option<BufferResource<Tbuffer>>,\n     drop {\n         //if self.p != none {\n         //    debug!(\"drop recv %?\", option::get(self.p));\n@@ -1098,7 +1098,7 @@ impl<T: send> Port<T>: Recv<T> {\n \n /// Treat many ports as one.\n struct PortSet<T: send> : Recv<T> {\n-    let mut ports: ~[pipes::Port<T>];\n+    mut ports: ~[pipes::Port<T>],\n \n     fn add(+port: pipes::Port<T>) {\n         vec::push(self.ports, port)"}, {"sha": "9330d376cad9503721eafafdde2dbaffcaa4635c", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -195,7 +195,7 @@ unsafe fn weaken_task(f: fn(comm::Port<()>)) {\n     f(po);\n \n     struct Unweaken {\n-      let ch: comm::Chan<()>;\n+      ch: comm::Chan<()>,\n       drop unsafe {\n         rustrt::rust_task_unweaken(unsafe::reinterpret_cast(&self.ch));\n       }"}, {"sha": "35135b1fd2330f3d14e7a2b337a0826687d3e4f6", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -244,7 +244,7 @@ impl Rng {\n }\n \n struct RandRes {\n-    let c: *rctx;\n+    c: *rctx,\n     drop { rustrt::rand_free(self.c); }\n }\n "}, {"sha": "c1dc656c69fb8c8f77ccbeb807386d0aea08ce75", "filename": "src/libcore/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -227,7 +227,7 @@ fn start_program(prog: &str, args: &[~str]) -> Program {\n        libc::fclose(r.err_file);\n     }\n     struct ProgRes {\n-        let r: ProgRepr;\n+        r: ProgRepr,\n         drop { destroy_repr(&self.r); }\n     }\n "}, {"sha": "6248fa46ff8d2dda76db039958fc52b7d217890a", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -7,7 +7,7 @@ use sys::size_of;\n type Word = uint;\n \n struct Frame {\n-    let fp: *Word;\n+    fp: *Word\n }\n \n fn Frame(fp: *Word) -> Frame {"}, {"sha": "6db50291b95f35b9a7f99a2a53486742c3c09d04", "filename": "src/libcore/task.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -610,7 +610,7 @@ fn get_task() -> Task {\n  */\n unsafe fn unkillable<U>(f: fn() -> U) -> U {\n     struct AllowFailure {\n-        let t: *rust_task;\n+        t: *rust_task,\n         drop { rustrt::rust_task_allow_kill(self.t); }\n     }\n \n@@ -629,7 +629,7 @@ unsafe fn unkillable<U>(f: fn() -> U) -> U {\n /// The inverse of unkillable. Only ever to be used nested in unkillable().\n unsafe fn rekillable<U>(f: fn() -> U) -> U {\n     struct DisallowFailure {\n-        let t: *rust_task;\n+        t: *rust_task,\n         drop { rustrt::rust_task_inhibit_kill(self.t); }\n     }\n \n@@ -651,7 +651,7 @@ unsafe fn rekillable<U>(f: fn() -> U) -> U {\n  */\n unsafe fn atomically<U>(f: fn() -> U) -> U {\n     struct DeferInterrupts {\n-        let t: *rust_task;\n+        t: *rust_task,\n         drop {\n             rustrt::rust_task_allow_yield(self.t);\n             rustrt::rust_task_allow_kill(self.t);\n@@ -948,13 +948,13 @@ fn each_ancestor(list:        &mut AncestorList,\n \n // One of these per task.\n struct TCB {\n-    let me:            *rust_task;\n+    me:            *rust_task,\n     // List of tasks with whose fates this one's is intertwined.\n-    let tasks:         TaskGroupArc; // 'none' means the group has failed.\n+    tasks:         TaskGroupArc, // 'none' means the group has failed.\n     // Lists of tasks who will kill us if they fail, but whom we won't kill.\n-    let mut ancestors: AncestorList;\n-    let is_main:       bool;\n-    let notifier:      Option<AutoNotify>;\n+    mut ancestors: AncestorList,\n+    is_main:       bool,\n+    notifier:      Option<AutoNotify>,\n     // Runs on task exit.\n     drop {\n         // If we are failing, the whole taskgroup needs to die.\n@@ -995,8 +995,8 @@ fn TCB(me: *rust_task, +tasks: TaskGroupArc, +ancestors: AncestorList,\n }\n \n struct AutoNotify {\n-    let notify_chan: comm::Chan<Notification>;\n-    let mut failed:  bool;\n+    notify_chan: comm::Chan<Notification>,\n+    mut failed:  bool,\n     drop {\n         let result = if self.failed { Failure } else { Success };\n         comm::send(self.notify_chan, Exit(get_task(), result));"}, {"sha": "4cf6ec97466f829039c82ed985a3ddac68db4de8", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -280,7 +280,7 @@ extern mod rustrt {\n }\n \n struct LittleLock {\n-    let l: rust_little_lock;\n+    l: rust_little_lock,\n     drop { rustrt::rust_destroy_little_lock(self.l); }\n }\n \n@@ -294,7 +294,7 @@ impl LittleLock {\n     #[inline(always)]\n     unsafe fn lock<T>(f: fn() -> T) -> T {\n         struct Unlock {\n-            let l: rust_little_lock;\n+            l: rust_little_lock,\n             drop { rustrt::rust_unlock_little_lock(self.l); }\n         }\n "}, {"sha": "5b0e9b0ffddeab89314a9851aa4e5d5ab9c5b857", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -43,7 +43,7 @@ enum CVec<T> {\n }\n \n struct DtorRes {\n-  let dtor: Option<fn@()>;\n+  dtor: Option<fn@()>,\n   drop {\n     match self.dtor {\n       option::None => (),"}, {"sha": "b9f982f270adbdba6d62c9ea3b80a35fef2005d6", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -39,7 +39,7 @@ extern mod rustrt {\n  * data structure that is used for read/write operations over a TCP stream.\n  */\n struct TcpSocket {\n-  let socket_data: @TcpSocketData;\n+  socket_data: @TcpSocketData,\n   drop {\n     unsafe {\n         tear_down_socket_data(self.socket_data)\n@@ -60,7 +60,7 @@ fn TcpSocket(socket_data: @TcpSocketData) -> TcpSocket {\n  * satisfy both the `io::reader` and `io::writer` traits.\n  */\n struct TcpSocketBuf {\n-  let data: @TcpBufferedSocketData;\n+    data: @TcpBufferedSocketData,\n }\n \n fn TcpSocketBuf(data: @TcpBufferedSocketData) -> TcpSocketBuf {"}, {"sha": "4065c8cf2baad81ce1f46ad657c8739adcc19b34", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -129,11 +129,11 @@ fn protocol_(name: ~str, span: span) -> protocol_ {\n }\n \n struct protocol_ {\n-    let name: ~str;\n-    let span: span;\n-    let states: DVec<state>;\n+    name: ~str,\n+    span: span,\n+    states: DVec<state>,\n \n-    let mut bounded: Option<bool>;\n+    mut bounded: Option<bool>,\n \n     /// Get a state.\n     fn get_state(name: ~str) -> state {"}, {"sha": "1425831fa6ebb38e6ca0b87b1ffef48c298b0a1f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -213,21 +213,21 @@ fn parser(sess: parse_sess, cfg: ast::crate_cfg,\n }\n \n struct parser {\n-    let sess: parse_sess;\n-    let cfg: crate_cfg;\n-    let file_type: file_type;\n-    let mut token: token::token;\n-    let mut span: span;\n-    let mut last_span: span;\n-    let mut buffer: [mut {tok: token::token, sp: span}]/4;\n-    let mut buffer_start: int;\n-    let mut buffer_end: int;\n-    let mut restriction: restriction;\n-    let mut quote_depth: uint; // not (yet) related to the quasiquoter\n-    let reader: reader;\n-    let interner: interner<@~str>;\n-    let keywords: hashmap<~str, ()>;\n-    let restricted_keywords: hashmap<~str, ()>;\n+    sess: parse_sess,\n+    cfg: crate_cfg,\n+    file_type: file_type,\n+    mut token: token::token,\n+    mut span: span,\n+    mut last_span: span,\n+    mut buffer: [mut {tok: token::token, sp: span}]/4,\n+    mut buffer_start: int,\n+    mut buffer_end: int,\n+    mut restriction: restriction,\n+    mut quote_depth: uint, // not (yet) related to the quasiquoter\n+    reader: reader,\n+    interner: interner<@~str>,\n+    keywords: hashmap<~str, ()>,\n+    restricted_keywords: hashmap<~str, ()>,\n \n     drop {} /* do not copy the parser; its state is tied to outside state */\n \n@@ -2726,8 +2726,7 @@ struct parser {\n     }\n \n     fn parse_single_class_item(vis: visibility) -> @class_member {\n-        if (self.eat_keyword(~\"let\") ||\n-                self.token_is_keyword(~\"mut\", copy self.token) ||\n+        if (self.token_is_keyword(~\"mut\", copy self.token) ||\n                 !self.is_any_keyword(copy self.token)) &&\n                 !self.token_is_pound_or_doc_comment(self.token) {\n             let a_var = self.parse_instance_var(vis);"}, {"sha": "148a735221e555dbdb5c6952cbb076ad9420ee4e", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -241,7 +241,7 @@ fn monitor(+f: fn~(diagnostic::emitter)) {\n         };\n \n         struct finally {\n-            let ch: comm::Chan<monitor_msg>;\n+            ch: comm::Chan<monitor_msg>,\n             drop { comm::send(self.ch, done); }\n         }\n "}, {"sha": "cad0429e9b63a99599c46d77a56012ff54db0455", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1175,7 +1175,7 @@ fn fn_ty_param_tys(fn_ty: TypeRef) -> ~[TypeRef] unsafe {\n /* Memory-managed interface to target data. */\n \n struct target_data_res {\n-    let TD: TargetDataRef;\n+    TD: TargetDataRef,\n     drop { llvm::LLVMDisposeTargetData(self.TD); }\n }\n \n@@ -1196,7 +1196,7 @@ fn mk_target_data(string_rep: ~str) -> target_data {\n /* Memory-managed interface to pass managers. */\n \n struct pass_manager_res {\n-    let PM: PassManagerRef;\n+    PM: PassManagerRef,\n     drop { llvm::LLVMDisposePassManager(self.PM); }\n }\n \n@@ -1216,7 +1216,7 @@ fn mk_pass_manager() -> pass_manager {\n /* Memory-managed interface to object files. */\n \n struct object_file_res {\n-    let ObjectFile: ObjectFileRef;\n+    ObjectFile: ObjectFileRef,\n     drop { llvm::LLVMDisposeObjectFile(self.ObjectFile); }\n }\n \n@@ -1237,7 +1237,7 @@ fn mk_object_file(llmb: MemoryBufferRef) -> Option<object_file> {\n /* Memory-managed interface to section iterators. */\n \n struct section_iter_res {\n-    let SI: SectionIteratorRef;\n+    SI: SectionIteratorRef,\n     drop { llvm::LLVMDisposeSectionIterator(self.SI); }\n }\n "}, {"sha": "fc158feffad4338e74cfbe46e911ee7595ba8c59", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -440,9 +440,9 @@ fn def_like_to_def(def_like: def_like) -> ast::def {\n // A path.\n struct path_entry {\n     // The full path, separated by '::'.\n-    let path_string: ~str;\n+    path_string: ~str,\n     // The definition, implementation, or field that this path corresponds to.\n-    let def_like: def_like;\n+    def_like: def_like,\n }\n \n fn path_entry(path_string: ~str, def_like: def_like) -> path_entry {"}, {"sha": "033a1c0f0a80d06b7d4497fbb5994c7508985690", "filename": "src/rustc/middle/lang_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -108,12 +108,12 @@ fn LanguageItemCollector(crate: @crate, session: session,\n }\n \n struct LanguageItemCollector {\n-    let items: &LanguageItems;\n+    items: &LanguageItems,\n \n-    let crate: @crate;\n-    let session: session;\n+    crate: @crate,\n+    session: session,\n \n-    let item_refs: hashmap<~str,&mut Option<def_id>>;\n+    item_refs: hashmap<~str,&mut Option<def_id>>,\n \n     fn match_and_collect_meta_item(item_def_id: def_id,\n                                    meta_item: meta_item) {"}, {"sha": "bb3d1d26d65140973f5ef9d7d5ccc73b080ec673", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -604,13 +604,13 @@ const ACC_WRITE: uint = 2u;\n const ACC_USE: uint = 4u;\n \n struct Liveness {\n-    let tcx: ty::ctxt;\n-    let ir: @IrMaps;\n-    let s: Specials;\n-    let successors: ~[mut LiveNode];\n-    let users: ~[mut users];\n-    let mut break_ln: LiveNode;\n-    let mut cont_ln: LiveNode;\n+    tcx: ty::ctxt,\n+    ir: @IrMaps,\n+    s: Specials,\n+    successors: ~[mut LiveNode],\n+    users: ~[mut users],\n+    mut break_ln: LiveNode,\n+    mut cont_ln: LiveNode,\n }\n \n fn Liveness(ir: @IrMaps, specials: Specials) -> Liveness {"}, {"sha": "375d0c958098cfdd03bf22e8b2345634ef59de67", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -314,8 +314,8 @@ fn atom_hashmap<V:copy>() -> hashmap<Atom,V> {\n \n /// One local scope.\n struct Rib {\n-    let bindings: hashmap<Atom,def_like>;\n-    let kind: RibKind;\n+    bindings: hashmap<Atom,def_like>,\n+    kind: RibKind,\n }\n \n fn Rib(kind: RibKind) -> Rib {\n@@ -328,9 +328,9 @@ fn Rib(kind: RibKind) -> Rib {\n \n /// One import directive.\n struct ImportDirective {\n-    let module_path: @DVec<Atom>;\n-    let subclass: @ImportDirectiveSubclass;\n-    let span: span;\n+    module_path: @DVec<Atom>,\n+    subclass: @ImportDirectiveSubclass,\n+    span: span,\n }\n \n fn ImportDirective(module_path: @DVec<Atom>,\n@@ -345,8 +345,8 @@ fn ImportDirective(module_path: @DVec<Atom>,\n \n /// The item that an import resolves to.\n struct Target {\n-    let target_module: @Module;\n-    let bindings: @NameBindings;\n+    target_module: @Module,\n+    bindings: @NameBindings,\n }\n \n fn Target(target_module: @Module, bindings: @NameBindings) -> Target {\n@@ -357,19 +357,19 @@ fn Target(target_module: @Module, bindings: @NameBindings) -> Target {\n }\n \n struct ImportResolution {\n-    let span: span;\n+    span: span,\n \n     // The number of outstanding references to this name. When this reaches\n     // zero, outside modules can count on the targets being correct. Before\n     // then, all bets are off; future imports could override this name.\n \n-    let mut outstanding_references: uint;\n+    mut outstanding_references: uint,\n \n-    let mut module_target: Option<Target>;\n-    let mut value_target: Option<Target>;\n-    let mut type_target: Option<Target>;\n+    mut module_target: Option<Target>,\n+    mut value_target: Option<Target>,\n+    mut type_target: Option<Target>,\n \n-    let mut used: bool;\n+    mut used: bool,\n \n     fn target_for_namespace(namespace: Namespace) -> Option<Target> {\n         match namespace {\n@@ -400,11 +400,11 @@ enum ParentLink {\n \n /// One node in the tree of modules.\n struct Module {\n-    let parent_link: ParentLink;\n-    let mut def_id: Option<def_id>;\n+    parent_link: ParentLink,\n+    mut def_id: Option<def_id>,\n \n-    let children: hashmap<Atom,@NameBindings>;\n-    let imports: DVec<@ImportDirective>;\n+    children: hashmap<Atom,@NameBindings>,\n+    imports: DVec<@ImportDirective>,\n \n     // The anonymous children of this node. Anonymous children are pseudo-\n     // modules that are implicitly created around items contained within\n@@ -421,24 +421,24 @@ struct Module {\n     // There will be an anonymous module created around `g` with the ID of the\n     // entry block for `f`.\n \n-    let anonymous_children: hashmap<node_id,@Module>;\n+    anonymous_children: hashmap<node_id,@Module>,\n \n     // XXX: This is about to be reworked so that exports are on individual\n     // items, not names.\n     //\n     // The atom is the name of the exported item, while the node ID is the\n     // ID of the export path.\n \n-    let exported_names: hashmap<Atom,node_id>;\n+    exported_names: hashmap<Atom,node_id>,\n \n     // The status of resolving each import in this module.\n-    let import_resolutions: hashmap<Atom,@ImportResolution>;\n+    import_resolutions: hashmap<Atom,@ImportResolution>,\n \n     // The number of unresolved globs that this module exports.\n-    let mut glob_count: uint;\n+    mut glob_count: uint,\n \n     // The index of the import we're resolving.\n-    let mut resolved_import_count: uint;\n+    mut resolved_import_count: uint,\n \n     fn all_imports_resolved() -> bool {\n         return self.imports.len() == self.resolved_import_count;\n@@ -500,15 +500,15 @@ struct Definition {\n // Records the definitions (at most one for each namespace) that a name is\n // bound to.\n struct NameBindings {\n-    let mut module_def: ModuleDef;         //< Meaning in module namespace.\n-    let mut type_def: Option<Definition>;  //< Meaning in type namespace.\n-    let mut value_def: Option<Definition>; //< Meaning in value namespace.\n+    mut module_def: ModuleDef,         //< Meaning in module namespace.\n+    mut type_def: Option<Definition>,  //< Meaning in type namespace.\n+    mut value_def: Option<Definition>, //< Meaning in value namespace.\n \n     // For error reporting\n     // XXX: Merge me into Definition.\n-    let mut module_span: Option<span>;\n-    let mut type_span: Option<span>;\n-    let mut value_span: Option<span>;\n+    mut module_span: Option<span>,\n+    mut type_span: Option<span>,\n+    mut value_span: Option<span>,\n \n     /// Creates a new module in this set of name bindings.\n     fn define_module(parent_link: ParentLink, def_id: Option<def_id>,\n@@ -612,7 +612,7 @@ fn NameBindings() -> NameBindings {\n \n /// Interns the names of the primitive types.\n struct PrimitiveTypeTable {\n-    let primitive_types: hashmap<Atom,prim_ty>;\n+    primitive_types: hashmap<Atom,prim_ty>,\n \n     fn intern(intr: ident_interner, string: @~str,\n               primitive_type: prim_ty) {\n@@ -710,55 +710,55 @@ fn Resolver(session: session, lang_items: LanguageItems,\n \n /// The main resolver class.\n struct Resolver {\n-    let session: session;\n-    let lang_items: LanguageItems;\n-    let crate: @crate;\n+    session: session,\n+    lang_items: LanguageItems,\n+    crate: @crate,\n \n-    let intr: ident_interner;\n+    intr: ident_interner,\n \n-    let graph_root: @NameBindings;\n+    graph_root: @NameBindings,\n \n-    let unused_import_lint_level: level;\n+    unused_import_lint_level: level,\n \n-    let trait_info: hashmap<def_id,@hashmap<Atom,()>>;\n-    let structs: hashmap<def_id,bool>;\n+    trait_info: hashmap<def_id,@hashmap<Atom,()>>,\n+    structs: hashmap<def_id,bool>,\n \n     // The number of imports that are currently unresolved.\n-    let mut unresolved_imports: uint;\n+    mut unresolved_imports: uint,\n \n     // The module that represents the current item scope.\n-    let mut current_module: @Module;\n+    mut current_module: @Module,\n \n     // The current set of local scopes, for values.\n     // XXX: Reuse ribs to avoid allocation.\n-    let value_ribs: @DVec<@Rib>;\n+    value_ribs: @DVec<@Rib>,\n \n     // The current set of local scopes, for types.\n-    let type_ribs: @DVec<@Rib>;\n+    type_ribs: @DVec<@Rib>,\n \n     // The current set of local scopes, for labels.\n-    let label_ribs: @DVec<@Rib>;\n+    label_ribs: @DVec<@Rib>,\n \n     // Whether the current context is an X-ray context. An X-ray context is\n     // allowed to access private names of any module.\n-    let mut xray_context: XrayFlag;\n+    mut xray_context: XrayFlag,\n \n     // The trait that the current context can refer to.\n-    let mut current_trait_refs: Option<@DVec<def_id>>;\n+    mut current_trait_refs: Option<@DVec<def_id>>,\n \n     // The atom for the keyword \"self\".\n-    let self_atom: Atom;\n+    self_atom: Atom,\n \n     // The atoms for the primitive types.\n-    let primitive_type_table: @PrimitiveTypeTable;\n+    primitive_type_table: @PrimitiveTypeTable,\n \n     // The four namespaces.\n-    let namespaces: ~[Namespace];\n+    namespaces: ~[Namespace],\n \n-    let def_map: DefMap;\n-    let export_map: ExportMap;\n-    let export_map2: ExportMap2;\n-    let trait_map: TraitMap;\n+    def_map: DefMap,\n+    export_map: ExportMap,\n+    export_map2: ExportMap2,\n+    trait_map: TraitMap,\n \n     /// The main name resolution procedure.\n     fn resolve(@self, this: @Resolver) {"}, {"sha": "f9eb3f737b468f9c0d7e72e0feba0923238acce4", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -55,7 +55,7 @@ use std::smallintmap;\n use option::{is_none, is_some};\n \n struct icx_popper {\n-    let ccx: @crate_ctxt;\n+    ccx: @crate_ctxt,\n     drop {\n       if self.ccx.sess.count_llvm_insns() {\n           vec::pop(*(self.ccx.stats.llvm_insn_ctxt));"}, {"sha": "dd82707fb27a6a924cfcdb83465059379927e562", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -94,7 +94,7 @@ type stats =\n      fn_times: @mut ~[{ident: ~str, time: int}]};\n \n struct BuilderRef_res {\n-    let B: BuilderRef;\n+    B: BuilderRef,\n     drop { llvm::LLVMDisposeBuilder(self.B); }\n }\n \n@@ -482,19 +482,19 @@ struct block_ {\n     // block to the function pointed to by llfn.  We insert\n     // instructions into that block by way of this block context.\n     // The block pointing to this one in the function's digraph.\n-    let llbb: BasicBlockRef;\n-    let mut terminated: bool;\n-    let mut unreachable: bool;\n-    let parent: Option<block>;\n+    llbb: BasicBlockRef,\n+    mut terminated: bool,\n+    mut unreachable: bool,\n+    parent: Option<block>,\n     // The 'kind' of basic block this is.\n-    let kind: block_kind;\n+    kind: block_kind,\n     // Is this block part of a landing pad?\n-    let is_lpad: bool;\n+    is_lpad: bool,\n     // info about the AST node this block originated from, if any\n-    let node_info: Option<node_info>;\n+    node_info: Option<node_info>,\n     // The function context for the function to which this block is\n     // attached.\n-    let fcx: fn_ctxt;\n+    fcx: fn_ctxt\n }\n \n fn block_(llbb: BasicBlockRef, parent: Option<block>, -kind: block_kind,"}, {"sha": "258287e9fe20b32677725d8781098d760d73b6e7", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -93,18 +93,18 @@ fn lookup(fcx: @fn_ctxt,\n }\n \n struct lookup {\n-    let fcx: @fn_ctxt;\n-    let expr: @ast::expr;\n-    let self_expr: @ast::expr;\n-    let borrow_lb: ast::node_id;\n-    let node_id: ast::node_id;\n-    let m_name: ast::ident;\n-    let mut self_ty: ty::t;\n-    let mut derefs: uint;\n-    let candidates: DVec<candidate>;\n-    let candidate_impls: hashmap<def_id, ()>;\n-    let supplied_tps: ~[ty::t];\n-    let include_private: bool;\n+    fcx: @fn_ctxt,\n+    expr: @ast::expr,\n+    self_expr: @ast::expr,\n+    borrow_lb: ast::node_id,\n+    node_id: ast::node_id,\n+    m_name: ast::ident,\n+    mut self_ty: ty::t,\n+    mut derefs: uint,\n+    candidates: DVec<candidate>,\n+    candidate_impls: hashmap<def_id, ()>,\n+    supplied_tps: ~[ty::t],\n+    include_private: bool,\n \n     // Entrypoint:\n     fn method() -> Option<method_map_entry> {"}, {"sha": "768431ce4fbb1db149ce82e26136e5864034eff4", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -121,11 +121,11 @@ fn method_to_MethodInfo(ast_method: @method) -> @MethodInfo {\n struct CoherenceInfo {\n     // Contains implementations of methods that are inherent to a type.\n     // Methods in these implementations don't need to be exported.\n-    let inherent_methods: hashmap<def_id,@DVec<@Impl>>;\n+    inherent_methods: hashmap<def_id,@DVec<@Impl>>,\n \n     // Contains implementations of methods associated with a trait. For these,\n     // the associated trait must be imported at the call site.\n-    let extension_methods: hashmap<def_id,@DVec<@Impl>>;\n+    extension_methods: hashmap<def_id,@DVec<@Impl>>,\n }\n \n fn CoherenceInfo() -> CoherenceInfo {\n@@ -146,18 +146,18 @@ fn CoherenceChecker(crate_context: @crate_ctxt) -> CoherenceChecker {\n }\n \n struct CoherenceChecker {\n-    let crate_context: @crate_ctxt;\n-    let inference_context: infer_ctxt;\n+    crate_context: @crate_ctxt,\n+    inference_context: infer_ctxt,\n \n     // A mapping from implementations to the corresponding base type\n     // definition ID.\n \n-    let base_type_def_ids: hashmap<def_id,def_id>;\n+    base_type_def_ids: hashmap<def_id,def_id>,\n \n     // A set of implementations in privileged scopes; i.e. those\n     // implementations that are defined in the same scope as their base types.\n \n-    let privileged_implementations: hashmap<node_id,()>;\n+    privileged_implementations: hashmap<node_id,()>,\n \n     // Create a mapping containing a MethodInfo for every provided\n     // method in every trait."}, {"sha": "9c1576107776cd89b37440d9130f21b598aeb2fc", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -15,7 +15,7 @@ fn indent<R>(op: fn() -> R) -> R {\n }\n \n struct _indenter {\n-    let _i: ();\n+    _i: (),\n     drop { debug!(\"<<\"); }\n }\n "}, {"sha": "0bc7d61e4a63d748efee69faf2cacce9b4c287a8", "filename": "src/rustdoc/demo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Frustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdemo.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -112,7 +112,7 @@ mod blade_runner {\n  * condimentum lacinia tincidunt.\n  */\n struct bored {\n-  let bored: bool;\n+  bored: bool,\n   drop { log(error, self.bored); }\n }\n "}, {"sha": "d6700f79600ccff9343ecbba2efe264ffce59363", "filename": "src/test/auxiliary/cci_class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -2,10 +2,10 @@ mod kitties {\n \n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n }\n "}, {"sha": "b0fffc06cb5443dfdcfacd2cae07d09f96f426e2", "filename": "src/test/auxiliary/cci_class_2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -2,10 +2,10 @@ mod kitties {\n \n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n   fn speak() {}\n }"}, {"sha": "3395de71e8a909281b0e6cfb2fd5392771b81d63", "filename": "src/test/auxiliary/cci_class_3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -2,10 +2,10 @@ mod kitties {\n \n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n   fn speak() { self.meows += 1u; }\n   fn meow_count() -> uint { self.meows }"}, {"sha": "3fab6722da4a28899d388022baf8c570e4bcba5b", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -2,7 +2,7 @@ mod kitties {\n \n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n     fn meow() {\n       error!(\"Meow\");\n       self.meows += 1u;\n@@ -12,8 +12,8 @@ struct cat {\n     }\n   }\n \n-  let mut how_hungry : int;\n-  let name : ~str;\n+  mut how_hungry : int,\n+  name : ~str,\n \n   fn speak() { self.meow(); }\n "}, {"sha": "4f758e74ed8e13101403ccd9054296b7ed698d20", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -2,11 +2,11 @@ mod kitties {\n \n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n       fn nap() { for uint::range(1u, 10000u) |_i|{}}\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n }\n "}, {"sha": "31506550099e48bcfb7eab1b45bd1f526c90fd46", "filename": "src/test/auxiliary/cci_class_6.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -2,11 +2,11 @@ mod kitties {\n \n struct cat<U> {\n   priv {\n-    let mut info : ~[U];\n-    let mut meows : uint;\n+    mut info : ~[U],\n+    mut meows : uint,\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n   fn speak<T>(stuff: ~[T]) {\n     self.meows += stuff.len();"}, {"sha": "0385ea991a230ac5aa141f1b964568071d8fe995", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -5,7 +5,7 @@ mod kitty {\n \n struct cat : ToStr {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n     fn meow() {\n       error!(\"Meow\");\n       self.meows += 1u;\n@@ -15,8 +15,8 @@ struct cat : ToStr {\n     }\n   }\n \n-  let mut how_hungry : int;\n-  let name : ~str;\n+  mut how_hungry : int,\n+  name : ~str,\n \n   fn speak() { self.meow(); }\n "}, {"sha": "14fe2b8fee9798d46480ac592ed1699e9ebb3e9a", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -8,7 +8,7 @@ use std;\n export context;\n \n struct arc_destruct<T:const> {\n-  let _data: int;\n+  _data: int,\n   drop {}\n }\n \n@@ -27,7 +27,7 @@ fn init() -> arc_destruct<context_res> unsafe {\n }\n \n struct context_res {\n-    let ctx : int;\n+    ctx : int,\n \n     drop { }\n }"}, {"sha": "258f681a9c61afa229a99c267805b5cb9af1d978", "filename": "src/test/auxiliary/issue-3012-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -6,7 +6,7 @@ mod socket {\n export socket_handle;\n \n struct socket_handle {\n-    let sockfd: libc::c_int;\n+    sockfd: libc::c_int,\n     drop { /* c::close(self.sockfd); */ }\n }\n "}, {"sha": "50af402a12c8492eabaf18ce2431e825a37753cf", "filename": "src/test/auxiliary/issue2170lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -4,7 +4,7 @@ fn foo(_x: i32) {\n }\n \n struct rsrc {\n-  let x: i32;\n+  x: i32,\n   drop { foo(self.x); }\n }\n "}, {"sha": "20c5579e42774e25d52a21b7f2adadb63c47567c", "filename": "src/test/auxiliary/test_comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftest_comm.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -28,7 +28,7 @@ fn port<T: send>() -> port<T> {\n }\n \n struct port_ptr<T:send> {\n-   let po: *rust_port;\n+   po: *rust_port,\n    drop unsafe {\n     debug!(\"in the port_ptr destructor\");\n        do task::unkillable {"}, {"sha": "243d853916933bec4f4fc0b40cbcc3f56cabcc9e", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -41,7 +41,7 @@ enum st {\n }\n \n struct r {\n-  let _l: @nillist;\n+  _l: @nillist,\n   drop {}\n }\n "}, {"sha": "646488c61c8b7003d56f9bfd633bffc741f00ac8", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -97,7 +97,7 @@ fn reduce(&&word: ~str, get: map_reduce::getter<int>) {\n }\n \n struct box<T> {\n-    let mut contents: Option<T>;\n+    mut contents: Option<T>,\n \n     fn swap(f: fn(+T) -> T) {\n         let mut tmp = None;\n@@ -348,8 +348,8 @@ fn is_word_char(c: char) -> bool {\n }\n \n struct random_word_reader: word_reader {\n-    let mut remaining: uint;\n-    let rng: rand::Rng;\n+    mut remaining: uint,\n+    rng: rand::Rng,\n \n     fn read_word() -> Option<~str> {\n         if self.remaining > 0 {"}, {"sha": "d59a1c8448e79af713b0a3839d17e7b11605422b", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,9 +1,9 @@\n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n   fn speak() { self.meows += 1u; }\n }"}, {"sha": "c5c3ff034dfc64de0e751c240f15b25f65880247", "filename": "src/test/compile-fail/cap-clause-illegal-cap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: copying a noncopyable value\n \n-struct foo { let x: int; drop { } }\n+struct foo { x: int, drop { } }\n \n fn foo(x: int) -> foo {\n     foo {"}, {"sha": "fa81909198553a560cf3b88a2aadfa9938808e55", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -5,7 +5,7 @@ trait noisy {\n \n struct cat : noisy {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n     fn meow() {\n       error!(\"Meow\");\n       self.meows += 1u;\n@@ -15,8 +15,8 @@ struct cat : noisy {\n     }\n   }\n \n-  let mut how_hungry : int;\n-  let name : str;\n+  mut how_hungry : int,\n+  name : str,\n \n   fn speak() { self.meow(); }\n "}, {"sha": "53fa8d886bbbca27e920a4cb42c08e85db746a3b", "filename": "src/test/compile-fail/class-implements-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct cat : int { //~ ERROR trait\n-  let meows: uint;\n+  meows: uint,\n }\n \n fn cat(in_x : uint) -> cat {"}, {"sha": "955c3e8aa46b9aa344ec271de0affe126ba4ee02", "filename": "src/test/compile-fail/class-method-missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -4,7 +4,7 @@ trait animal {\n }\n \n struct cat : animal {\n-  let meows: uint;\n+  meows: uint,\n }\n \n fn cat(in_x : uint) -> cat {"}, {"sha": "440152a92885b9758b0c7ab37042978a1bd588be", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,6 +1,6 @@\n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n     fn sleep() { loop{} }\n     fn meow() {\n       error!(\"Meow\");"}, {"sha": "3bfdaa8566688804e6160b772e4c807897c0cd15", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: copying a noncopyable value\n \n struct foo {\n-  let i: int;\n+  i: int,\n   drop {}\n }\n "}, {"sha": "37e366be04491f2aaf6b6b8267fd637246f8d18d", "filename": "src/test/compile-fail/issue-2063-resource.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -2,8 +2,8 @@\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed.\n struct t { //~ ERROR this type cannot be instantiated\n-  let x: x;\n-  let to_str: ();\n+  x: x,\n+  to_str: (),\n }\n \n enum x = @t; //~ ERROR this type cannot be instantiated"}, {"sha": "011c573b9b000a0e39044e20afa42a4aa0522f23", "filename": "src/test/compile-fail/issue-2487-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct socket {\n-    let sock: int;\n+    sock: int,\n \n     drop { }\n "}, {"sha": "0feaa9b857e46faa0475615a8f63bd7a7eca7afe", "filename": "src/test/compile-fail/issue-2718-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct send_packet<T: copy> {\n-  let p: T;\n+  p: T\n }\n \n "}, {"sha": "5ddb6b5f7041b26b6985f93760ba239a0e4bb23f", "filename": "src/test/compile-fail/issue-2825-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fissue-2825-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fissue-2825-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2825-b.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct example {\n-    let x: int;\n+    x: int,\n     drop {} //~ ERROR First destructor declared\n     drop {\n         debug!(\"Goodbye, cruel world\");"}, {"sha": "32b50b4385e138c8a8ecb9301762d50a185b5fa8", "filename": "src/test/compile-fail/issue-3021-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -3,7 +3,7 @@ use std;\n fn siphash(k0 : u64) {\n \n     struct siphash {\n-        let mut v0: u64;\n+        mut v0: u64,\n         fn reset() {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture\n            //~^ ERROR unresolved name: k0"}, {"sha": "f11ebc05735b22f71afc2a1119dcef65d48fa8a8", "filename": "src/test/compile-fail/lint-non-camel-case-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-class.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,6 +1,6 @@\n #[forbid(non_camel_case_types)]\n struct foo { //~ ERROR type, variant, or trait must be camel case\n-    let bar: int;\n+    bar: int,\n }\n \n fn main() {"}, {"sha": "7db02897112df6ac751930fb86f19da3a681a300", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -49,7 +49,7 @@ fn f4b() -> int {\n \n // leave this in here just to trigger compile-fail:\n struct r {\n-    let x: ();\n+    x: (),\n     drop {}\n }\n fn main() {"}, {"sha": "f2917044e708f1f765282e80b9a5c198e2ec3264", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,10 +1,10 @@\n // error-pattern:assigning to immutable field\n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n   fn eat() {\n     self.how_hungry -= 5;"}, {"sha": "a78ad6aa23bc7fbe63ab37c263648b52eaf1cd50", "filename": "src/test/compile-fail/mutable-class-fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,10 +1,10 @@\n // error-pattern:assigning to immutable field\n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n }\n "}, {"sha": "d0455f4d8a98b92d0cf89aa00e61ddcb3f6181a5", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     struct foo {\n-      let _x: comm::Port<()>;\n+      _x: comm::Port<()>,\n       drop {}\n     }\n "}, {"sha": "37ba5830b10c452ff4b51b4cc7932865c174473f", "filename": "src/test/compile-fail/non-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-const.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -3,7 +3,7 @@\n fn foo<T: const>(_x: T) { }\n \n struct r {\n-  let x:int;\n+  x:int,\n   drop {}\n }\n \n@@ -14,7 +14,7 @@ fn r(x:int) -> r {\n }\n \n struct r2 {\n-  let x:@mut int;\n+  x:@mut int,\n   drop {}\n }\n "}, {"sha": "33aef1c0a724391dc9ac8f883867cb088b863a30", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -3,7 +3,7 @@\n // Test that a class with a non-copyable field can't be\n // copied\n struct bar {\n-  let x: int;\n+  x: int,\n   drop {}\n }\n \n@@ -14,8 +14,8 @@ fn bar(x:int) -> bar {\n }\n \n struct foo {\n-  let i: int;\n-  let j: bar;\n+  i: int,\n+  j: bar,\n }\n \n fn foo(i:int) -> foo {"}, {"sha": "d17d0c7e911cbe95c38c8f6d4fb127bc38b82c4c", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: copying a noncopyable value\n \n struct r {\n-  let i: @mut int;\n+  i: @mut int,\n   drop { *(self.i) = *(self.i) + 1; }\n }\n "}, {"sha": "545843762be1ce317799b3f4f58695516ba27a63", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,11 +1,11 @@\n // error-pattern:call to private method not allowed\n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n       fn nap() { uint::range(1u, 10000u, |_i|{})}\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n }\n "}, {"sha": "15821b21c4d335790abf7e9d39b2458b7f2ed01b", "filename": "src/test/compile-fail/record-with-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: copying a noncopyable value\n \n struct my_resource {\n-  let x: int;\n+  x: int,\n   drop { log(error, self.x); }\n }\n "}, {"sha": "54fad53190eeedd90838a660b1380028318d1241", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct dog {\n-    let mut cats_chased: uint;\n+    mut cats_chased: uint,\n \n     fn chase_cat() {\n         let p: &static/mut uint = &mut self.cats_chased; //~ ERROR illegal borrow"}, {"sha": "4e51301827d8eaee2cabd8603d6fa9eef6b38fc4", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct dog {\n-    let mut food: uint;\n+    mut food: uint,\n \n     fn chase_cat() {\n         for uint::range(0u, 10u) |_i| {"}, {"sha": "46e92517dc77c7129a0c0a0f22ddff0dcba1c1a9", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -4,7 +4,7 @@\n \n enum an_enum = &int;\n trait a_trait { fn foo() -> &self/int; }\n-struct a_class { let x:&self/int; }\n+struct a_class { x:&self/int }\n \n fn a_fn1(e: an_enum/&a) -> an_enum/&b {\n     return e; //~ ERROR mismatched types: expected `an_enum/&b` but found `an_enum/&a`"}, {"sha": "1380eed2fe911044e843f0722f23419e4bca8458", "filename": "src/test/compile-fail/regions-in-rsrcs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,15 +1,15 @@\n struct yes0 {\n-  let x: &uint;\n+  x: &uint,\n   drop {}\n }\n \n struct yes1 {\n-  let x: &self/uint;\n+  x: &self/uint,\n   drop {}\n }\n \n struct yes2 {\n-  let x: &foo/uint; //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n+  x: &foo/uint, //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n   drop {}\n }\n "}, {"sha": "8e9b0e17ffc0df2e82b9c1b003fac6fcce24a2e1", "filename": "src/test/compile-fail/tps-invariant-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct box_impl<T> {\n-    let mut f: T;\n+    mut f: T,\n }\n \n fn box_impl<T>(f: T) -> box_impl<T> {"}, {"sha": "1a6680af381665675d1faf4d1c89da91ec421f4e", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: copying a noncopyable value\n \n struct r {\n-  let b:bool;\n+  b:bool,\n   drop {}\n }\n "}, {"sha": "d5211906f89be0ae7ba9bca689139e34527ad24f", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: copying a noncopyable value\n \n struct r {\n-  let i: @mut int;\n+  i: @mut int,\n   drop { *(self.i) = *(self.i) + 1; }\n }\n "}, {"sha": "a954f6e6e3b254e47eb8149b0bc9ccc366cb04ba", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -2,8 +2,8 @@\n // sent\n \n struct foo {\n-  let i: int;\n-  let j: @~str;\n+  i: int,\n+  j: @~str,\n }\n \n fn foo(i:int, j: @~str) -> foo {"}, {"sha": "276f6678169f7139e12e9acee85639fc6a07d194", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -21,7 +21,7 @@ fn getbig_call_c_and_fail(i: int) {\n }\n \n struct and_then_get_big_again {\n-  let x:int;\n+  x:int,\n   drop {\n     fn getbig(i: int) {\n         if i != 0 {"}, {"sha": "76239ffec0951512299de98ae0f12f61c5672b0f", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -14,7 +14,7 @@ fn getbig_and_fail(&&i: int) {\n }\n \n struct and_then_get_big_again {\n-  let x:int;\n+  x:int,\n   drop {\n     fn getbig(i: int) {\n         if i != 0 {"}, {"sha": "4e4b13409cddfbb51fcb225d5494e4beb392dad8", "filename": "src/test/run-fail/morestack4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack4.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -14,7 +14,7 @@ fn getbig_and_fail(&&i: int) {\n }\n \n struct and_then_get_big_again {\n-  let x:int;\n+  x:int,\n   drop {}\n }\n "}, {"sha": "4551830f5fab5bb4eac5577537573760eadd2379", "filename": "src/test/run-fail/rt-set-exit-status-fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:whatever\n \n struct r {\n-  let x:int;\n+  x:int,\n             // Setting the exit status after the runtime has already\n             // failed has no effect and the process exits with the\n             // runtime's exit code"}, {"sha": "77db30c8e5b648b3e9e28f0a7d9a3c5f60d6ed72", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -5,7 +5,7 @@ fn failfn() {\n }\n \n struct r {\n-  let v: *int;\n+  v: *int,\n   drop unsafe {\n     let _v2: ~int = unsafe::reinterpret_cast(&self.v);\n   }"}, {"sha": "a32514e213d89280c2280f3145465ad625e5d8c9", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -78,8 +78,8 @@ extern mod test {\n }\n \n struct p {\n-  let mut x: int;\n-  let mut y: int;\n+  mut x: int,\n+  mut y: int,\n }\n \n fn p(x: int, y: int) -> p {"}, {"sha": "ea529709e66478e02d9961b94d19d0676605b2f5", "filename": "src/test/run-pass/boxed-class-type-substitution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -8,7 +8,7 @@ type Tree<T> = {\n fn empty<T>() -> Tree<T> { fail }\n \n struct Box {\n-    let tree: Tree<@Box>;\n+    tree: Tree<@Box>\n }\n \n fn Box() -> Box {"}, {"sha": "4709b2c5b5b9d830ec3430a3fc1ee1f66feb7823", "filename": "src/test/run-pass/class-attributes-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct cat {\n-  let name: ~str;\n+  name: ~str,\n   #[cat_dropper]\n   /**\n      Actually, cats don't always land on their feet when you drop them."}, {"sha": "aa0268afbedc52d06af45f5f3ab22edb8a070330", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -4,7 +4,7 @@ trait noisy {\n \n struct dog : noisy {\n   priv {\n-    let barks : @mut uint;\n+    barks : @mut uint,\n     fn bark() -> int {\n       debug!(\"Woof %u %d\", *self.barks, *self.volume);\n       *self.barks += 1u;\n@@ -19,7 +19,7 @@ struct dog : noisy {\n     }\n   }\n \n-  let volume : @mut int;\n+  volume : @mut int,\n \n   fn speak() -> int { self.bark() }\n }\n@@ -33,7 +33,7 @@ fn dog() -> dog {\n \n struct cat : noisy {\n   priv {\n-    let meows : @mut uint;\n+    meows : @mut uint,\n     fn meow() -> uint {\n       debug!(\"Meow\");\n       *self.meows += 1u;\n@@ -44,8 +44,8 @@ struct cat : noisy {\n     }\n   }\n \n-  let how_hungry : @mut int;\n-  let name : ~str;\n+  how_hungry : @mut int,\n+  name : ~str,\n \n   fn speak() -> int { self.meow() as int }\n   fn meow_count() -> uint { *self.meows }"}, {"sha": "5be8454d65b5282377cdee4a15fdf931c2c23a33", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -4,7 +4,7 @@ trait noisy {\n \n struct cat : noisy {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n     fn meow() {\n       error!(\"Meow\");\n       self.meows += 1u;\n@@ -14,8 +14,8 @@ struct cat : noisy {\n     }\n   }\n \n-  let mut how_hungry : int;\n-  let name : ~str;\n+  mut how_hungry : int,\n+  name : ~str,\n \n   fn speak() { self.meow(); }\n "}, {"sha": "5fa8a71aa54f4d6d05e5f3ac2d296558dd655253", "filename": "src/test/run-pass/class-dtor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-dtor.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,6 +1,6 @@\n struct cat {\n-  let done : extern fn(uint);\n-  let meows : uint;\n+  done : extern fn(uint),\n+  meows : uint,\n   drop { self.done(self.meows); }\n }\n "}, {"sha": "46b93b2f524af5a61de49bfee079023e98992659", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -6,8 +6,8 @@ use kitty::*;\n mod kitty {\n   export cat;\n   struct cat {\n-    let meows: uint;\n-    let name: ~str;\n+    meows: uint,\n+    name: ~str,\n \n     fn get_name() -> ~str {  self.name }\n   }"}, {"sha": "6cbc112875ef535217779a16f24473fa22148b70", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -17,7 +17,7 @@ impl cat_type : cmp::Eq {\n struct cat<T: copy> : map<int, T> {\n   priv {\n     // Yes, you can have negative meows\n-    let mut meows : int;\n+    mut meows : int,\n     fn meow() {\n       self.meows += 1;\n       error!(\"Meow %d\", self.meows);\n@@ -27,8 +27,8 @@ struct cat<T: copy> : map<int, T> {\n     }\n   }\n \n-  let mut how_hungry : int;\n-  let name : T;\n+  mut how_hungry : int,\n+  name : T,\n \n   fn speak() { self.meow(); }\n "}, {"sha": "0551ebc62d44e5c2747d671f30ab55202b082a6f", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -5,7 +5,7 @@ use cci_class_trait::animals::*;\n \n struct cat : noisy {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n     fn meow() {\n       error!(\"Meow\");\n       self.meows += 1u;\n@@ -15,8 +15,8 @@ struct cat : noisy {\n     }\n   }\n \n-  let mut how_hungry : int;\n-  let name : ~str;\n+  mut how_hungry : int,\n+  name : ~str,\n \n   fn speak() { self.meow(); }\n "}, {"sha": "1e40ae872ad16afc0a14de6c942c722bbaa09189", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -4,7 +4,7 @@ trait noisy {\n \n struct cat : noisy {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n     fn meow() {\n       error!(\"Meow\");\n       self.meows += 1u;\n@@ -14,8 +14,8 @@ struct cat : noisy {\n     }\n   }\n \n-  let mut how_hungry : int;\n-  let name : ~str;\n+  mut how_hungry : int,\n+  name : ~str,\n \n   fn speak() { self.meow(); }\n "}, {"sha": "e95b1dbc91ce7545342b7d86378799724fbc2f00", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,9 +1,9 @@\n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n   fn speak() { self.meows += 1u; }\n   fn meow_count() -> uint { self.meows }"}, {"sha": "586dd3e736108bb6b0b0f0bebfa2f62084ed7512", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,10 +1,10 @@\n struct cat<U> {\n   priv {\n-    let mut info : ~[U];\n-    let mut meows : uint;\n+    mut info : ~[U],\n+    mut meows : uint,\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n   fn speak<T>(stuff: ~[T]) {\n     self.meows += stuff.len();"}, {"sha": "dcbaffc2c3029e98dcb71c1415ba1dbdabd747a1", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -4,7 +4,7 @@ use to_str::ToStr;\n \n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n     fn meow() {\n       error!(\"Meow\");\n       self.meows += 1u;\n@@ -14,8 +14,8 @@ struct cat {\n     }\n   }\n \n-  let mut how_hungry : int;\n-  let name : ~str;\n+  mut how_hungry : int,\n+  name : ~str,\n \n   fn speak() { self.meow(); }\n "}, {"sha": "21b8bdea2d302258505fb9ee4a6b39713303f777", "filename": "src/test/run-pass/class-str-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-str-field.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,6 +1,6 @@\n struct cat {\n \n-  let name : ~str;\n+  name : ~str,\n \n }\n "}, {"sha": "e736ac7308add3a1ea518a226816117f4952b2c5", "filename": "src/test/run-pass/class-typarams.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-typarams.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,9 +1,9 @@\n struct cat<U> {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n   fn speak() {\n     self.meows += 1u;"}, {"sha": "be9b54c0b8721cda98f40eb5f7d3a7dd8c976645", "filename": "src/test/run-pass/classes-self-referential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct kitten {\n-    let cat: Option<cat>;\n+    cat: Option<cat>,\n }\n \n fn kitten(cat: Option<cat>) -> kitten {"}, {"sha": "f1dc265c953e759ae07fb7b3dda1f0fdb58d5bbe", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,9 +1,9 @@\n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n   fn speak() {}\n }"}, {"sha": "af30fd44982e5b6d0368d4f06f56e96edff96c89", "filename": "src/test/run-pass/classes-simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,9 +1,9 @@\n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n }\n "}, {"sha": "bf58e9fe35f3440775be39b5046fb829d2238298", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,6 +1,6 @@\n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n     fn meow() {\n       error!(\"Meow\");\n       self.meows += 1u;\n@@ -10,8 +10,8 @@ struct cat {\n     }\n   }\n \n-  let mut how_hungry : int;\n-  let name : ~str;\n+  mut how_hungry : int,\n+  name : ~str,\n \n   fn speak() { self.meow(); }\n "}, {"sha": "e0e0a3ef37424a4c6328c7b6a820300abbc51a1a", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -26,7 +26,7 @@ enum tg { bar, }\n \n #[cfg(bogus)]\n struct r {\n-  let i: int;\n+  i: int,\n }\n \n #[cfg(bogus)]\n@@ -37,7 +37,7 @@ fn r(i:int) -> r {\n }\n \n struct r {\n-  let i: int;\n+  i: int,\n }\n \n fn r(i:int) -> r {"}, {"sha": "5b317d9b26d92929b1bd0780d677f99fe14b97b5", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -2,7 +2,7 @@\n // as a move unless the stored thing is used afterwards.\n \n struct r {\n-  let i: @mut int;\n+  i: @mut int,\n   drop { *(self.i) = *(self.i) + 1; }\n }\n "}, {"sha": "a01b55f50c623e8320408129b5307b284c420ed5", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -2,7 +2,7 @@ trait clam<A: copy> {\n   fn chowder(y: A);\n }\n struct foo<A: copy> : clam<A> {\n-  let x: A;\n+  x: A,\n   fn chowder(y: A) {\n   }\n }"}, {"sha": "20c9b9ad947c6863adb75f57c4c7134d61aca803", "filename": "src/test/run-pass/issue-2311-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,6 +1,6 @@\n trait clam<A: copy> { }\n struct foo<A: copy> {\n-  let x: A;\n+    x: A,\n    fn bar<B,C:clam<A>>(c: C) -> B {\n      fail;\n    }"}, {"sha": "2318691aebe1c0930b7e9571f9affe150bb63d79", "filename": "src/test/run-pass/issue-2445-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct c1<T: copy> {\n-  let x: T;\n+    x: T,\n     fn f1(x: int) {\n     }\n }"}, {"sha": "edb0fdf16ae264fb65b0df9aa728523c1adf6455", "filename": "src/test/run-pass/issue-2445.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,7 +1,7 @@\n use dvec::DVec;\n \n struct c1<T: copy> {\n-  let x: T;\n+    x: T,\n     fn f1(x: T) {}\n }\n "}, {"sha": "a8c6e5b1a0de49cd30ed58ce43418553a0f0fbc7", "filename": "src/test/run-pass/issue-2487-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct socket {\n-    let sock: int;\n+    sock: int,\n \n     drop { }\n "}, {"sha": "d58f5a8ecb2b96f34ea81bc244ca7e3649b973f6", "filename": "src/test/run-pass/issue-2502.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2502.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct font {\n-    let fontbuf: &self/~[u8];\n+    fontbuf: &self/~[u8],\n \n     fn buf() -> &self/~[u8] {\n         self.fontbuf"}, {"sha": "989818ef5948deed97fb46ce38ef60522cac7dd9", "filename": "src/test/run-pass/issue-2550.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2550.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,6 +1,5 @@\n struct C {\n-    let x: uint;\n-\n+    x: uint,\n }\n \n fn C(x: uint) -> C {"}, {"sha": "916db5b71cb53e9f31e24bc2ef0c5c2ae86666f8", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct cat {\n-    let mut meow: fn@();\n+    mut meow: fn@(),\n }\n \n fn cat() -> cat {"}, {"sha": "b2651045e52995762b086ca516450c99ea468c1c", "filename": "src/test/run-pass/issue-2708.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2708.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,7 +1,7 @@\n struct Font {\n-    let fontbuf: uint;\n-    let cairo_font: uint;\n-    let font_dtor: uint;\n+    fontbuf: uint,\n+    cairo_font: uint,\n+    font_dtor: uint,\n \n     drop { }\n }"}, {"sha": "856e8c2c1740c66947ac4dbacb6d35952c380172", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -137,7 +137,7 @@ mod pipes {\n     }\n \n     struct send_packet<T: send> {\n-        let mut p: Option<*packet<T>>;\n+        mut p: Option<*packet<T>>,\n         drop {\n             if self.p != None {\n                 let mut p = None;\n@@ -159,7 +159,7 @@ mod pipes {\n     }\n \n     struct recv_packet<T: send> {\n-        let mut p: Option<*packet<T>>;\n+        mut p: Option<*packet<T>>,\n         drop {\n             if self.p != None {\n                 let mut p = None;"}, {"sha": "a0406d2735f3572dce51ab40fc69f3996f95348d", "filename": "src/test/run-pass/issue-2735-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,6 +1,6 @@\n // This test should behave exactly like issue-2735-3\n struct defer {\n-    let b: &mut bool;\n+    b: &mut bool,\n     drop { *(self.b) = true; }\n }\n "}, {"sha": "8e4fea93491236746ef856f6d648840a76df864f", "filename": "src/test/run-pass/issue-2735-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,6 +1,6 @@\n // This test should behave exactly like issue-2735-2\n struct defer {\n-    let b: &mut bool;\n+    b: &mut bool,\n     drop { *(self.b) = true; }\n }\n "}, {"sha": "f47938fb8ad5906f7c8ba2685d53891e3d46be31", "filename": "src/test/run-pass/issue-2748-a.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2748-a.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,6 +1,5 @@\n struct CMap {\n-    let buf: &[u8];\n-\n+    buf: &[u8],\n }\n \n fn CMap(buf: &r/[u8]) -> CMap/&r {"}, {"sha": "fe0f646e07d99933d5c337714709cb594de1608d", "filename": "src/test/run-pass/issue-3149.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-3149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-3149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3149.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -13,10 +13,10 @@ pure fn Matrix4<T:copy Num>(m11: T, m12: T, m13: T, m14: T,\n }\n \n struct Matrix4<T:copy Num> {\n-    let m11: T; let m12: T; let m13: T; let m14: T;\n-    let m21: T; let m22: T; let m23: T; let m24: T;\n-    let m31: T; let m32: T; let m33: T; let m34: T;\n-    let m41: T; let m42: T; let m43: T; let m44: T;\n+    m11: T, m12: T, m13: T, m14: T,\n+    m21: T, m22: T, m23: T, m24: T,\n+    m31: T, m32: T, m33: T, m34: T,\n+    m41: T, m42: T, m43: T, m44: T,\n }\n \n fn main() {}"}, {"sha": "9b1aa574e91295133868e1c108d822303d0e6fd7", "filename": "src/test/run-pass/issue-979.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fissue-979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-979.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct r {\n-  let b: @mut int;\n+  b: @mut int,\n   drop { *(self.b) += 1; }\n }\n "}, {"sha": "6c30ee106d4241341027fe3dc5d3e6e88038c5c3", "filename": "src/test/run-pass/nested-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fnested-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fnested-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-class.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n   \n   struct b {\n-    let i: int;\n+    i: int,\n     fn do_stuff() -> int { return 37; }\n   }\n "}, {"sha": "4b54a473faaa5d1981428ccda79d3efc366c6545", "filename": "src/test/run-pass/private-class-field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,9 +1,9 @@\n struct cat {\n   priv {\n-    let mut meows : uint;\n+    mut meows : uint,\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n   fn meow_count() -> uint { self.meows }\n }"}, {"sha": "ba11df9425658a0708681e3d42ca2a9a3dfcab26", "filename": "src/test/run-pass/private-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-method.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,10 +1,10 @@\n struct cat {\n   priv {\n-    let mut meows : uint;\n+      mut meows : uint,\n       fn nap() { for uint::range(1u, 10u) |_i| { }}\n   }\n \n-  let how_hungry : int;\n+  how_hungry : int,\n \n   fn play() {\n     self.meows += 1u;"}, {"sha": "7f3bc016a6adf7427cf84d51286ae2b9e6bfca5a", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct r {\n-  let i: @mut int;\n+  i: @mut int,\n   drop { *(self.i) += 1; }\n }\n "}, {"sha": "61ff40c39dc4122e07de32290c86bc16bdcffc89", "filename": "src/test/run-pass/resource-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,7 +1,7 @@\n // Don't leak the unique pointers\n \n struct r {\n-  let v: *int;\n+  v: *int,\n   drop unsafe {\n     debug!(\"r's dtor: self = %x, self.v = %x, self.v's value = %x\",\n            unsafe::reinterpret_cast::<*r, uint>(&ptr::addr_of(self)),"}, {"sha": "15657a213a344249f85b2907a7d58398ae76863e", "filename": "src/test/run-pass/resource-cycle2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -7,7 +7,7 @@ type u = {\n };\n \n struct r {\n-  let v: u;\n+  v: u,\n   drop unsafe {\n     let v2: ~int = unsafe::reinterpret_cast(&self.v.c);\n   }"}, {"sha": "6b2511271e43fb636d07067b3dd59f072d7e7960", "filename": "src/test/run-pass/resource-cycle3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -9,9 +9,9 @@ type u = {\n };\n \n struct r {\n-  let v: u;\n-  let w: int;\n-  let x: *int;\n+  v: u,\n+  w: int,\n+  x: *int,\n   drop unsafe {\n     let _v2: ~int = unsafe::reinterpret_cast(&self.v.c);\n     // let _v3: ~int = unsafe::reinterpret_cast(self.x);"}, {"sha": "4d51f1f554167e21bf02dca4fe1d8f2a26cb4625", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct shrinky_pointer {\n-  let i: @@mut int;\n+  i: @@mut int,\n   fn look_at() -> int { return **(self.i); }\n   drop { log(error, ~\"Hello!\"); **(self.i) -= 1; }\n }"}, {"sha": "1d01de738b563b355465de4513f56e8553ecc7f9", "filename": "src/test/run-pass/resource-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-generic.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct finish<T: copy> {\n-  let arg: {val: T, fin: extern fn(T)};\n+  arg: {val: T, fin: extern fn(T)},\n   drop { self.arg.fin(self.arg.val); }\n }\n "}, {"sha": "9c14bd462abaca5753608fb892dab72a7b473150", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -4,7 +4,7 @@\n type closable = @mut bool;\n \n struct close_res {\n-  let i: closable;\n+  i: closable,\n  \n   drop { *(self.i) = false; }\n }"}, {"sha": "3fc3afb12dabeab24790b72b9d05f708a4da92e3", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -2,7 +2,7 @@ use task::*;\n use comm::*;\n \n struct test {\n-  let f: int;\n+  f: int,\n   drop {}\n }\n "}, {"sha": "ecaa9238b27728140e235b63632861ad8da6fc92", "filename": "src/test/run-pass/sendable-class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendable-class.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,8 +1,8 @@\n // Test that a class with only sendable fields can be sent\n \n struct foo {\n-  let i: int;\n-  let j: char;\n+  i: int,\n+  j: char,\n }\n \n fn foo(i:int, j: char) -> foo {"}, {"sha": "551a3ede728df06d7976eff62c44e7e28e530c90", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -6,7 +6,7 @@\n use std;\n \n struct notify {\n-    let ch: comm::Chan<bool>; let v: @mut bool;\n+    ch: comm::Chan<bool>, v: @mut bool,\n     drop {\n         error!(\"notify: task=%? v=%x unwinding=%b b=%b\",\n                task::get_task(),"}, {"sha": "f9174598cce937c16b4b2c8b21e787217de4b677", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -3,7 +3,7 @@ fn s_foo<T: copy>(shared: T) { }\n fn u_foo<T: send>(unique: T) { }\n \n struct r {\n-  let i: int;\n+  i: int,\n   drop {}\n }\n "}, {"sha": "194b74d09d1c86b96615746442963b8b219fdc50", "filename": "src/test/run-pass/unique-pinned-nocopy-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,5 +1,5 @@\n struct r {\n-  let i: @mut int;\n+  i: @mut int,\n   drop { *(self.i) = *(self.i) + 1; }\n }\n "}, {"sha": "3b24480fcb60449e50c9ef08b10bcd6ba231d2c3", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -2,7 +2,7 @@\n use std;\n \n struct complainer {\n-  let c: comm::Chan<bool>;\n+  c: comm::Chan<bool>,\n   drop { error!(\"About to send!\");\n     comm::send(self.c, true);\n     error!(\"Sent!\"); }"}, {"sha": "c92cb756f5fecc97fef69b17678b739df7b77224", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -2,7 +2,7 @@\n use std;\n \n struct complainer {\n-  let c: @int;\n+  c: @int,\n   drop {}\n }\n "}, {"sha": "5587193cc51573fe9486094894e3a0158587ca62", "filename": "src/test/run-pass/vec-slice-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2572e8035522bd2002fab4ef777ad0290312ac71/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs?ref=2572e8035522bd2002fab4ef777ad0290312ac71", "patch": "@@ -1,6 +1,6 @@\n // Make sure that destructors get run on slice literals\n struct foo {\n-    let x: @mut int;\n+    x: @mut int,\n     drop { *self.x += 1; }\n }\n "}]}