{"sha": "bcfd15b09c4f30ea1451440b65359902d702b3e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZmQxNWIwOWM0ZjMwZWExNDUxNDQwYjY1MzU5OTAyZDcwMmIzZTU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-04T20:24:03Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-04T20:24:03Z"}, "message": "Remove unused duplicated `trivial_dropck_outlives`", "tree": {"sha": "f6ca3f8748a0e740765a4d55a649a8e8fee4c36a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6ca3f8748a0e740765a4d55a649a8e8fee4c36a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcfd15b09c4f30ea1451440b65359902d702b3e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcfd15b09c4f30ea1451440b65359902d702b3e5", "html_url": "https://github.com/rust-lang/rust/commit/bcfd15b09c4f30ea1451440b65359902d702b3e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcfd15b09c4f30ea1451440b65359902d702b3e5/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2454643e137bde519786ee9e650c455d7ad6f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2454643e137bde519786ee9e650c455d7ad6f34", "html_url": "https://github.com/rust-lang/rust/commit/d2454643e137bde519786ee9e650c455d7ad6f34"}], "stats": {"total": 68, "additions": 0, "deletions": 68}, "files": [{"sha": "f9cadb3bb2dbc03948e2c413a13c103d5e3abe0d", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bcfd15b09c4f30ea1451440b65359902d702b3e5/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcfd15b09c4f30ea1451440b65359902d702b3e5/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=bcfd15b09c4f30ea1451440b65359902d702b3e5", "patch": "@@ -190,74 +190,6 @@ impl<'tcx> FromIterator<DtorckConstraint<'tcx>> for DtorckConstraint<'tcx> {\n     }\n }\n \n-/// This returns true if the type `ty` is \"trivial\" for\n-/// dropck-outlives -- that is, if it doesn't require any types to\n-/// outlive. This is similar but not *quite* the same as the\n-/// `needs_drop` test in the compiler already -- that is, for every\n-/// type T for which this function return true, needs-drop would\n-/// return `false`. But the reverse does not hold: in particular,\n-/// `needs_drop` returns false for `PhantomData`, but it is not\n-/// trivial for dropck-outlives.\n-///\n-/// Note also that `needs_drop` requires a \"global\" type (i.e., one\n-/// with erased regions), but this function does not.\n-pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    match ty.kind() {\n-        // None of these types have a destructor and hence they do not\n-        // require anything in particular to outlive the dtor's\n-        // execution.\n-        ty::Infer(ty::FreshIntTy(_))\n-        | ty::Infer(ty::FreshFloatTy(_))\n-        | ty::Bool\n-        | ty::Int(_)\n-        | ty::Uint(_)\n-        | ty::Float(_)\n-        | ty::Never\n-        | ty::FnDef(..)\n-        | ty::FnPtr(_)\n-        | ty::Char\n-        | ty::GeneratorWitness(..)\n-        | ty::RawPtr(_)\n-        | ty::Ref(..)\n-        | ty::Str\n-        | ty::Foreign(..)\n-        | ty::Error(_) => true,\n-\n-        // [T; N] and [T] have same properties as T.\n-        ty::Array(ty, _) | ty::Slice(ty) => trivial_dropck_outlives(tcx, ty),\n-\n-        // (T1..Tn) and closures have same properties as T1..Tn --\n-        // check if *any* of those are trivial.\n-        ty::Tuple(ref tys) => tys.iter().all(|t| trivial_dropck_outlives(tcx, t.expect_ty())),\n-        ty::Closure(_, ref substs) => {\n-            substs.as_closure().upvar_tys().all(|t| trivial_dropck_outlives(tcx, t))\n-        }\n-\n-        ty::Adt(def, _) => {\n-            if Some(def.did) == tcx.lang_items().manually_drop() {\n-                // `ManuallyDrop` never has a dtor.\n-                true\n-            } else {\n-                // Other types might. Moreover, PhantomData doesn't\n-                // have a dtor, but it is considered to own its\n-                // content, so it is non-trivial. Unions can have `impl Drop`,\n-                // and hence are non-trivial as well.\n-                false\n-            }\n-        }\n-\n-        // The following *might* require a destructor: needs deeper inspection.\n-        ty::Dynamic(..)\n-        | ty::Projection(..)\n-        | ty::Param(_)\n-        | ty::Opaque(..)\n-        | ty::Placeholder(..)\n-        | ty::Infer(_)\n-        | ty::Bound(..)\n-        | ty::Generator(..) => false,\n-    }\n-}\n-\n #[derive(Debug, HashStable)]\n pub struct CandidateStep<'tcx> {\n     pub self_ty: Canonical<'tcx, QueryResponse<'tcx, Ty<'tcx>>>,"}]}