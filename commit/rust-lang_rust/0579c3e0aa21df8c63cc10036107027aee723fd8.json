{"sha": "0579c3e0aa21df8c63cc10036107027aee723fd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NzljM2UwYWEyMWRmOGM2M2NjMTAwMzYxMDcwMjdhZWU3MjNmZDg=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-07-06T17:06:49Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-07-06T17:06:49Z"}, "message": "Fix breakage due to rust-lang/rust#61988", "tree": {"sha": "74ed18099c97586c17f526081a4f6d38b2c7536c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74ed18099c97586c17f526081a4f6d38b2c7536c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0579c3e0aa21df8c63cc10036107027aee723fd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0579c3e0aa21df8c63cc10036107027aee723fd8", "html_url": "https://github.com/rust-lang/rust/commit/0579c3e0aa21df8c63cc10036107027aee723fd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0579c3e0aa21df8c63cc10036107027aee723fd8/comments", "author": null, "committer": null, "parents": [{"sha": "5d7f6a10aecca6fda575c6168775b664e0fa8fde", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d7f6a10aecca6fda575c6168775b664e0fa8fde", "html_url": "https://github.com/rust-lang/rust/commit/5d7f6a10aecca6fda575c6168775b664e0fa8fde"}], "stats": {"total": 86, "additions": 25, "deletions": 61}, "files": [{"sha": "cd36afba6af435ffa7babacd9fba612b22d55f38", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0579c3e0aa21df8c63cc10036107027aee723fd8/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0579c3e0aa21df8c63cc10036107027aee723fd8/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=0579c3e0aa21df8c63cc10036107027aee723fd8", "patch": "@@ -481,17 +481,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Loops {\n         }\n \n         // check for never_loop\n-        match expr.node {\n-            ExprKind::While(_, ref block, _) | ExprKind::Loop(ref block, _, _) => {\n-                match never_loop_block(block, expr.hir_id) {\n-                    NeverLoopResult::AlwaysBreak => {\n-                        span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\")\n-                    },\n-                    NeverLoopResult::MayContinueMainLoop | NeverLoopResult::Otherwise => (),\n-                }\n-            },\n-            _ => (),\n-        }\n+        if let ExprKind::Loop(ref block, _, _) = expr.node {\n+            match never_loop_block(block, expr.hir_id) {\n+                NeverLoopResult::AlwaysBreak => {\n+                    span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\")\n+                },\n+                NeverLoopResult::MayContinueMainLoop | NeverLoopResult::Otherwise => (),\n+            }\n+        };\n \n         // check for `loop { if let {} else break }` that could be `while let`\n         // (also matches an explicit \"match\" instead of \"if let\")\n@@ -590,9 +587,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Loops {\n             }\n         }\n \n-        // check for while loops which conditions never change\n-        if let ExprKind::While(ref cond, _, _) = expr.node {\n-            check_infinite_loop(cx, cond, expr);\n+        if_chain! {\n+            if let ExprKind::Loop(block, _, LoopSource::While) = &expr.node;\n+            if let Block { expr: Some(expr), .. } = &**block;\n+            if let ExprKind::Match(cond, arms, MatchSource::WhileDesugar) = &expr.node;\n+            if let ExprKind::DropTemps(cond) = &cond.node;\n+            if let [arm, ..] = &arms[..];\n+            if let Arm { body, .. } = arm;\n+            then {\n+                check_infinite_loop(cx, cond, body);\n+            }\n         }\n \n         check_needless_collect(expr, cx);\n@@ -701,12 +705,6 @@ fn never_loop_expr(expr: &Expr, main_loop_id: HirId) -> NeverLoopResult {\n             // Break can come from the inner loop so remove them.\n             absorb_break(&never_loop_block(b, main_loop_id))\n         },\n-        ExprKind::While(ref e, ref b, _) => {\n-            let e = never_loop_expr(e, main_loop_id);\n-            let result = never_loop_block(b, main_loop_id);\n-            // Break can come from the inner loop so remove them.\n-            combine_seq(e, absorb_break(&result))\n-        },\n         ExprKind::Match(ref e, ref arms, _) => {\n             let e = never_loop_expr(e, main_loop_id);\n             if arms.is_empty() {\n@@ -2202,7 +2200,7 @@ fn var_def_id(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<HirId> {\n \n fn is_loop(expr: &Expr) -> bool {\n     match expr.node {\n-        ExprKind::Loop(..) | ExprKind::While(..) => true,\n+        ExprKind::Loop(..) => true,\n         _ => false,\n     }\n }\n@@ -2239,11 +2237,10 @@ fn is_loop_nested(cx: &LateContext<'_, '_>, loop_expr: &Expr, iter_expr: &Expr)\n             return false;\n         }\n         match cx.tcx.hir().find(parent) {\n-            Some(Node::Expr(expr)) => match expr.node {\n-                ExprKind::Loop(..) | ExprKind::While(..) => {\n+            Some(Node::Expr(expr)) => {\n+                if let ExprKind::Loop(..) = expr.node {\n                     return true;\n-                },\n-                _ => (),\n+                };\n             },\n             Some(Node::Block(block)) => {\n                 let mut block_visitor = LoopNestVisitor {"}, {"sha": "c75e33e8406ca0bf725d05acd506f9aa3a533046", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0579c3e0aa21df8c63cc10036107027aee723fd8/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0579c3e0aa21df8c63cc10036107027aee723fd8/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=0579c3e0aa21df8c63cc10036107027aee723fd8", "patch": "@@ -319,10 +319,6 @@ fn check_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, bindings:\n                 check_expr(cx, e, bindings)\n             }\n         },\n-        ExprKind::While(ref cond, ref block, _) => {\n-            check_expr(cx, cond, bindings);\n-            check_block(cx, block, bindings);\n-        },\n         ExprKind::Match(ref init, ref arms, _) => {\n             check_expr(cx, init, bindings);\n             let len = bindings.len();"}, {"sha": "9c02c1c31042abf6f5ffad5293d6ee29fe5877d6", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0579c3e0aa21df8c63cc10036107027aee723fd8/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0579c3e0aa21df8c63cc10036107027aee723fd8/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=0579c3e0aa21df8c63cc10036107027aee723fd8", "patch": "@@ -68,7 +68,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnusedLabelVisitor<'a, 'tcx> {\n                     self.labels.remove(&label.ident.as_str());\n                 }\n             },\n-            hir::ExprKind::Loop(_, Some(label), _) | hir::ExprKind::While(_, _, Some(label)) => {\n+            hir::ExprKind::Loop(_, Some(label), _) => {\n                 self.labels.insert(label.ident.as_str(), expr.span);\n             },\n             _ => (),"}, {"sha": "a00eee67166ebcdf235f1cf25cd744a83b6c208e", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0579c3e0aa21df8c63cc10036107027aee723fd8/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0579c3e0aa21df8c63cc10036107027aee723fd8/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=0579c3e0aa21df8c63cc10036107027aee723fd8", "patch": "@@ -322,19 +322,6 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 self.current = cast_pat;\n                 self.visit_expr(expr);\n             },\n-            ExprKind::While(ref cond, ref body, _) => {\n-                let cond_pat = self.next(\"cond\");\n-                let body_pat = self.next(\"body\");\n-                let label_pat = self.next(\"label\");\n-                println!(\n-                    \"While(ref {}, ref {}, ref {}) = {};\",\n-                    cond_pat, body_pat, label_pat, current\n-                );\n-                self.current = cond_pat;\n-                self.visit_expr(cond);\n-                self.current = body_pat;\n-                self.visit_block(body);\n-            },\n             ExprKind::Loop(ref body, _, desugaring) => {\n                 let body_pat = self.next(\"body\");\n                 let des = loop_desugaring_name(desugaring);\n@@ -696,6 +683,7 @@ fn desugaring_name(des: hir::MatchSource) -> String {\n     match des {\n         hir::MatchSource::ForLoopDesugar => \"MatchSource::ForLoopDesugar\".to_string(),\n         hir::MatchSource::TryDesugar => \"MatchSource::TryDesugar\".to_string(),\n+        hir::MatchSource::WhileDesugar => \"MatchSource::WhileDesugar\".to_string(),\n         hir::MatchSource::WhileLetDesugar => \"MatchSource::WhileLetDesugar\".to_string(),\n         hir::MatchSource::Normal => \"MatchSource::Normal\".to_string(),\n         hir::MatchSource::IfLetDesugar { contains_else_clause } => format!(\n@@ -714,6 +702,7 @@ fn loop_desugaring_name(des: hir::LoopSource) -> &'static str {\n     match des {\n         hir::LoopSource::ForLoop => \"LoopSource::ForLoop\",\n         hir::LoopSource::Loop => \"LoopSource::Loop\",\n+        hir::LoopSource::While => \"LoopSource::WhileDesugar\",\n         hir::LoopSource::WhileLet => \"LoopSource::WhileLet\",\n     }\n }"}, {"sha": "e9b5cee430e7cdb373c6dc0882f73981e67ef57f", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0579c3e0aa21df8c63cc10036107027aee723fd8/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0579c3e0aa21df8c63cc10036107027aee723fd8/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=0579c3e0aa21df8c63cc10036107027aee723fd8", "patch": "@@ -148,11 +148,6 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             (&ExprKind::Tup(ref l_tup), &ExprKind::Tup(ref r_tup)) => self.eq_exprs(l_tup, r_tup),\n             (&ExprKind::Unary(l_op, ref le), &ExprKind::Unary(r_op, ref re)) => l_op == r_op && self.eq_expr(le, re),\n             (&ExprKind::Array(ref l), &ExprKind::Array(ref r)) => self.eq_exprs(l, r),\n-            (&ExprKind::While(ref lc, ref lb, ref ll), &ExprKind::While(ref rc, ref rb, ref rl)) => {\n-                self.eq_expr(lc, rc)\n-                    && self.eq_block(lb, rb)\n-                    && both(ll, rl, |l, r| l.ident.as_str() == r.ident.as_str())\n-            },\n             (&ExprKind::DropTemps(ref le), &ExprKind::DropTemps(ref re)) => self.eq_expr(le, re),\n             _ => false,\n         }\n@@ -524,13 +519,6 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 lop.hash(&mut self.s);\n                 self.hash_expr(le);\n             },\n-            ExprKind::While(ref cond, ref b, l) => {\n-                self.hash_expr(cond);\n-                self.hash_block(b);\n-                if let Some(l) = l {\n-                    self.hash_name(l.ident.name);\n-                }\n-            },\n         }\n     }\n "}, {"sha": "ea169481ac6b39bebee6482bf9ce8582d8fabdd1", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0579c3e0aa21df8c63cc10036107027aee723fd8/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0579c3e0aa21df8c63cc10036107027aee723fd8/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=0579c3e0aa21df8c63cc10036107027aee723fd8", "patch": "@@ -209,11 +209,6 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr, indent: usize) {\n             print_expr(cx, e, indent + 1);\n             println!(\"{}target type: {:?}\", ind, target);\n         },\n-        hir::ExprKind::While(ref cond, _, _) => {\n-            println!(\"{}While\", ind);\n-            println!(\"{}condition:\", ind);\n-            print_expr(cx, cond, indent + 1);\n-        },\n         hir::ExprKind::Loop(..) => {\n             println!(\"{}Loop\", ind);\n         },"}, {"sha": "0e45750e94df2327b41aeeb9d4b459acd25bc563", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0579c3e0aa21df8c63cc10036107027aee723fd8/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0579c3e0aa21df8c63cc10036107027aee723fd8/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=0579c3e0aa21df8c63cc10036107027aee723fd8", "patch": "@@ -113,7 +113,6 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Ret(..)\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Tup(..)\n-            | hir::ExprKind::While(..)\n             | hir::ExprKind::DropTemps(_)\n             | hir::ExprKind::Err => Sugg::NonParen(snippet),\n             hir::ExprKind::Assign(..) => Sugg::BinOp(AssocOp::Assign, snippet),"}]}