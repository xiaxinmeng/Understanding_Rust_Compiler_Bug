{"sha": "f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "node_id": "C_kwDOAAsO6NoAKGY2ZTZkZGMwOWQ2NjBmYmZiNGQ0ODNhOTY3N2Q4MDc2OGNjNGUzMWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-26T05:15:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-26T05:15:11Z"}, "message": "Auto merge of #88680 - ehuss:more-attr-validation, r=petrochenkov\n\nValidate builtin attributes for macro args.\n\nThis adds some validation for `path`, `crate_type`, and `recursion_limit` attributes so that they will now return an error if you attempt to pass a macro into them (such as `#[path = foo!()]`). Previously, the attribute would be completely ignored. These attributes are special because their values need to be known before/during expansion.\n\ncc #87681", "tree": {"sha": "61b3e7fda85f83fa96d221012da392502e7d1cf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61b3e7fda85f83fa96d221012da392502e7d1cf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "html_url": "https://github.com/rust-lang/rust/commit/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "url": "https://api.github.com/repos/rust-lang/rust/commits/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "html_url": "https://github.com/rust-lang/rust/commit/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696"}, {"sha": "75f058dbfd1c02daa191efb6eb53dc91fda8add6", "url": "https://api.github.com/repos/rust-lang/rust/commits/75f058dbfd1c02daa191efb6eb53dc91fda8add6", "html_url": "https://github.com/rust-lang/rust/commit/75f058dbfd1c02daa191efb6eb53dc91fda8add6"}], "stats": {"total": 287, "additions": 211, "deletions": 76}, "files": [{"sha": "1c0b2a9b487611a17a15a272975b7dd293ea47b3", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -3,6 +3,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::{token, Attribute, Inline, Item};\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_parse::new_parser_from_file;\n+use rustc_parse::validate_attr;\n use rustc_session::parse::ParseSess;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Ident};\n@@ -168,7 +169,25 @@ fn mod_file_path_from_attr(\n     dir_path: &Path,\n ) -> Option<PathBuf> {\n     // Extract path string from first `#[path = \"path_string\"]` attribute.\n-    let path_string = sess.first_attr_value_str_by_name(attrs, sym::path)?.as_str();\n+    let first_path = attrs.iter().find(|at| at.has_name(sym::path))?;\n+    let path_string = match first_path.value_str() {\n+        Some(s) => s.as_str(),\n+        None => {\n+            // This check is here mainly to catch attempting to use a macro,\n+            // such as #[path = concat!(...)]. This isn't currently supported\n+            // because otherwise the InvocationCollector would need to defer\n+            // loading a module until the #[path] attribute was expanded, and\n+            // it doesn't support that (and would likely add a bit of\n+            // complexity). Usually bad forms are checked in AstValidator (via\n+            // `check_builtin_attribute`), but by the time that runs the macro\n+            // is expanded, and it doesn't give an error.\n+            validate_attr::emit_fatal_malformed_builtin_attribute(\n+                &sess.parse_sess,\n+                first_path,\n+                sym::path,\n+            );\n+        }\n+    };\n \n     // On windows, the base path might have the form\n     // `\\\\?\\foo\\bar` in which case it does not tolerate"}, {"sha": "0a6d76c99b77a0636650a62682a56210ab9a2deb", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::middle::cstore::{MetadataLoader, MetadataLoaderDyn};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc_mir_build as mir_build;\n-use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n+use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str, validate_attr};\n use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_query_impl::{OnDiskCache, Queries as TcxQueries};\n@@ -33,8 +33,8 @@ use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType, PpMod\n use rustc_session::lint;\n use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n-use rustc_session::Session;\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_session::{Limit, Session};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::FileName;\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n@@ -311,8 +311,7 @@ pub fn configure_and_expand(\n \n         // Create the config for macro expansion\n         let features = sess.features_untracked();\n-        let recursion_limit =\n-            rustc_middle::middle::limits::get_recursion_limit(&krate.attrs, &sess);\n+        let recursion_limit = get_recursion_limit(&krate.attrs, &sess);\n         let cfg = rustc_expand::expand::ExpansionConfig {\n             features: Some(&features),\n             recursion_limit,\n@@ -1070,3 +1069,24 @@ pub fn start_codegen<'tcx>(\n \n     codegen\n }\n+\n+fn get_recursion_limit(krate_attrs: &[ast::Attribute], sess: &Session) -> Limit {\n+    if let Some(attr) = krate_attrs\n+        .iter()\n+        .find(|attr| attr.has_name(sym::recursion_limit) && attr.value_str().is_none())\n+    {\n+        // This is here mainly to check for using a macro, such as\n+        // #![recursion_limit = foo!()]. That is not supported since that\n+        // would require expanding this while in the middle of expansion,\n+        // which needs to know the limit before expanding. Otherwise,\n+        // validation would normally be caught in AstValidator (via\n+        // `check_builtin_attribute`), but by the time that runs the macro\n+        // is expanded, and it doesn't give an error.\n+        validate_attr::emit_fatal_malformed_builtin_attribute(\n+            &sess.parse_sess,\n+            attr,\n+            sym::recursion_limit,\n+        );\n+    }\n+    rustc_middle::middle::limits::get_recursion_limit(krate_attrs, sess)\n+}"}, {"sha": "a1d1b63c8fafe8a034bbb721fb5a1b20f8e80fe7", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -10,6 +10,7 @@ use rustc_errors::registry::Registry;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n #[cfg(parallel_compiler)]\n use rustc_middle::ty::tls;\n+use rustc_parse::validate_attr;\n #[cfg(parallel_compiler)]\n use rustc_query_impl::QueryCtxt;\n use rustc_resolve::{self, Resolver};\n@@ -475,7 +476,7 @@ pub fn get_codegen_sysroot(\n }\n \n pub(crate) fn check_attr_crate_type(\n-    _sess: &Session,\n+    sess: &Session,\n     attrs: &[ast::Attribute],\n     lint_buffer: &mut LintBuffer,\n ) {\n@@ -515,6 +516,19 @@ pub(crate) fn check_attr_crate_type(\n                         );\n                     }\n                 }\n+            } else {\n+                // This is here mainly to check for using a macro, such as\n+                // #![crate_type = foo!()]. That is not supported since the\n+                // crate type needs to be known very early in compilation long\n+                // before expansion. Otherwise, validation would normally be\n+                // caught in AstValidator (via `check_builtin_attribute`), but\n+                // by the time that runs the macro is expanded, and it doesn't\n+                // give an error.\n+                validate_attr::emit_fatal_malformed_builtin_attribute(\n+                    &sess.parse_sess,\n+                    a,\n+                    sym::crate_type,\n+                );\n             }\n         }\n     }"}, {"sha": "2aa20d02c8830cd38437848b9de82b00040e1bf5", "filename": "compiler/rustc_parse/src/validate_attr.rs", "status": "modified", "additions": 73, "deletions": 60, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -4,7 +4,7 @@ use crate::parse_in;\n \n use rustc_ast::tokenstream::{DelimSpan, TokenTree};\n use rustc_ast::{self as ast, Attribute, MacArgs, MacDelimiter, MetaItem, MetaItemKind};\n-use rustc_errors::{Applicability, PResult};\n+use rustc_errors::{Applicability, FatalError, PResult};\n use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n use rustc_session::lint::builtin::ILL_FORMED_ATTRIBUTE_INPUT;\n use rustc_session::parse::ParseSess;\n@@ -91,73 +91,86 @@ pub fn check_builtin_attribute(\n     // Some special attributes like `cfg` must be checked\n     // before the generic check, so we skip them here.\n     let should_skip = |name| name == sym::cfg;\n-    // Some of previously accepted forms were used in practice,\n-    // report them as warnings for now.\n-    let should_warn = |name| {\n-        name == sym::doc\n-            || name == sym::ignore\n-            || name == sym::inline\n-            || name == sym::link\n-            || name == sym::test\n-            || name == sym::bench\n-    };\n \n     match parse_meta(sess, attr) {\n         Ok(meta) => {\n             if !should_skip(name) && !is_attr_template_compatible(&template, &meta.kind) {\n-                let error_msg = format!(\"malformed `{}` attribute input\", name);\n-                let mut msg = \"attribute must be of the form \".to_owned();\n-                let mut suggestions = vec![];\n-                let mut first = true;\n-                if template.word {\n-                    first = false;\n-                    let code = format!(\"#[{}]\", name);\n-                    msg.push_str(&format!(\"`{}`\", &code));\n-                    suggestions.push(code);\n-                }\n-                if let Some(descr) = template.list {\n-                    if !first {\n-                        msg.push_str(\" or \");\n-                    }\n-                    first = false;\n-                    let code = format!(\"#[{}({})]\", name, descr);\n-                    msg.push_str(&format!(\"`{}`\", &code));\n-                    suggestions.push(code);\n-                }\n-                if let Some(descr) = template.name_value_str {\n-                    if !first {\n-                        msg.push_str(\" or \");\n-                    }\n-                    let code = format!(\"#[{} = \\\"{}\\\"]\", name, descr);\n-                    msg.push_str(&format!(\"`{}`\", &code));\n-                    suggestions.push(code);\n-                }\n-                if should_warn(name) {\n-                    sess.buffer_lint(\n-                        &ILL_FORMED_ATTRIBUTE_INPUT,\n-                        meta.span,\n-                        ast::CRATE_NODE_ID,\n-                        &msg,\n-                    );\n-                } else {\n-                    sess.span_diagnostic\n-                        .struct_span_err(meta.span, &error_msg)\n-                        .span_suggestions(\n-                            meta.span,\n-                            if suggestions.len() == 1 {\n-                                \"must be of the form\"\n-                            } else {\n-                                \"the following are the possible correct uses\"\n-                            },\n-                            suggestions.into_iter(),\n-                            Applicability::HasPlaceholders,\n-                        )\n-                        .emit();\n-                }\n+                emit_malformed_attribute(sess, attr, name, template);\n             }\n         }\n         Err(mut err) => {\n             err.emit();\n         }\n     }\n }\n+\n+fn emit_malformed_attribute(\n+    sess: &ParseSess,\n+    attr: &Attribute,\n+    name: Symbol,\n+    template: AttributeTemplate,\n+) {\n+    // Some of previously accepted forms were used in practice,\n+    // report them as warnings for now.\n+    let should_warn = |name| {\n+        matches!(name, sym::doc | sym::ignore | sym::inline | sym::link | sym::test | sym::bench)\n+    };\n+\n+    let error_msg = format!(\"malformed `{}` attribute input\", name);\n+    let mut msg = \"attribute must be of the form \".to_owned();\n+    let mut suggestions = vec![];\n+    let mut first = true;\n+    let inner = if attr.style == ast::AttrStyle::Inner { \"!\" } else { \"\" };\n+    if template.word {\n+        first = false;\n+        let code = format!(\"#{}[{}]\", inner, name);\n+        msg.push_str(&format!(\"`{}`\", &code));\n+        suggestions.push(code);\n+    }\n+    if let Some(descr) = template.list {\n+        if !first {\n+            msg.push_str(\" or \");\n+        }\n+        first = false;\n+        let code = format!(\"#{}[{}({})]\", inner, name, descr);\n+        msg.push_str(&format!(\"`{}`\", &code));\n+        suggestions.push(code);\n+    }\n+    if let Some(descr) = template.name_value_str {\n+        if !first {\n+            msg.push_str(\" or \");\n+        }\n+        let code = format!(\"#{}[{} = \\\"{}\\\"]\", inner, name, descr);\n+        msg.push_str(&format!(\"`{}`\", &code));\n+        suggestions.push(code);\n+    }\n+    if should_warn(name) {\n+        sess.buffer_lint(&ILL_FORMED_ATTRIBUTE_INPUT, attr.span, ast::CRATE_NODE_ID, &msg);\n+    } else {\n+        sess.span_diagnostic\n+            .struct_span_err(attr.span, &error_msg)\n+            .span_suggestions(\n+                attr.span,\n+                if suggestions.len() == 1 {\n+                    \"must be of the form\"\n+                } else {\n+                    \"the following are the possible correct uses\"\n+                },\n+                suggestions.into_iter(),\n+                Applicability::HasPlaceholders,\n+            )\n+            .emit();\n+    }\n+}\n+\n+pub fn emit_fatal_malformed_builtin_attribute(\n+    sess: &ParseSess,\n+    attr: &Attribute,\n+    name: Symbol,\n+) -> ! {\n+    let template = BUILTIN_ATTRIBUTE_MAP.get(&name).expect(\"builtin attr defined\").2;\n+    emit_malformed_attribute(sess, attr, name, template);\n+    // This is fatal, otherwise it will likely cause a cascade of other errors\n+    // (and an error here is expected to be very rare).\n+    FatalError.raise()\n+}"}, {"sha": "8f6977cb55f25b06db7444c53432a4be153359ed", "filename": "src/test/ui/attributes/register-attr-tool-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.stderr?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -30,13 +30,13 @@ error: malformed `register_attr` attribute input\n   --> $DIR/register-attr-tool-fail.rs:4:1\n    |\n LL | #![register_attr]\n-   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[register_attr(attr1, attr2, ...)]`\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#![register_attr(attr1, attr2, ...)]`\n \n error: malformed `register_tool` attribute input\n   --> $DIR/register-attr-tool-fail.rs:5:1\n    |\n LL | #![register_tool]\n-   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[register_tool(tool1, tool2, ...)]`\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#![register_tool(tool1, tool2, ...)]`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "a8ec9391523c7e1b2c2143e4052507dd2543e789", "filename": "src/test/ui/gated-bad-feature.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fgated-bad-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fgated-bad-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgated-bad-feature.stderr?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -20,13 +20,13 @@ error: malformed `feature` attribute input\n   --> $DIR/gated-bad-feature.rs:5:1\n    |\n LL | #![feature]\n-   | ^^^^^^^^^^^ help: must be of the form: `#[feature(name1, name1, ...)]`\n+   | ^^^^^^^^^^^ help: must be of the form: `#![feature(name1, name1, ...)]`\n \n error: malformed `feature` attribute input\n   --> $DIR/gated-bad-feature.rs:6:1\n    |\n LL | #![feature = \"foo\"]\n-   | ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[feature(name1, name1, ...)]`\n+   | ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#![feature(name1, name1, ...)]`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "9ba5e79ba947ae44a0d404eadb2607db5d5b45d2", "filename": "src/test/ui/invalid/invalid-crate-type-macro.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type-macro.rs?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -0,0 +1,7 @@\n+#![crate_type = foo!()] //~ ERROR malformed `crate_type` attribute\n+\n+macro_rules! foo {\n+    () => {\"rlib\"};\n+}\n+\n+fn main() {}"}, {"sha": "c196d4278a277896a08078e050464aae918a6eb5", "filename": "src/test/ui/invalid/invalid-crate-type-macro.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type-macro.stderr?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -0,0 +1,8 @@\n+error: malformed `crate_type` attribute input\n+  --> $DIR/invalid-crate-type-macro.rs:1:1\n+   |\n+LL | #![crate_type = foo!()]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#![crate_type = \"bin|lib|...\"]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4072a2fa1624a1ebac5b71982fbab5f7a00f6709", "filename": "src/test/ui/invalid_crate_type_syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.stderr?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -2,7 +2,7 @@ error: malformed `crate_type` attribute input\n   --> $DIR/invalid_crate_type_syntax.rs:2:1\n    |\n LL | #![crate_type(lib)]\n-   | ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[crate_type = \"bin|lib|...\"]`\n+   | ^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#![crate_type = \"bin|lib|...\"]`\n \n error: aborting due to previous error\n "}, {"sha": "91b4e509b269efd791789ebcfd645c8dd48b15da", "filename": "src/test/ui/lint/lint-malformed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Flint%2Flint-malformed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Flint%2Flint-malformed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-malformed.stderr?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -14,7 +14,7 @@ error: malformed `deny` attribute input\n   --> $DIR/lint-malformed.rs:1:1\n    |\n LL | #![deny = \"foo\"]\n-   | ^^^^^^^^^^^^^^^^ help: must be of the form: `#[deny(lint1, lint2, ..., /*opt*/ reason = \"...\")]`\n+   | ^^^^^^^^^^^^^^^^ help: must be of the form: `#![deny(lint1, lint2, ..., /*opt*/ reason = \"...\")]`\n \n error[E0452]: malformed lint attribute input\n   --> $DIR/lint-malformed.rs:2:10"}, {"sha": "505f6b6f140baa8e9e3578997c9b1076254f756d", "filename": "src/test/ui/malformed/malformed-plugin-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -2,7 +2,7 @@ error: malformed `plugin` attribute input\n   --> $DIR/malformed-plugin-1.rs:2:1\n    |\n LL | #![plugin]\n-   | ^^^^^^^^^^ help: must be of the form: `#[plugin(name)]`\n+   | ^^^^^^^^^^ help: must be of the form: `#![plugin(name)]`\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-1.rs:2:1"}, {"sha": "52bbd82a3892b15f2c5b07656bf6c078af09bf31", "filename": "src/test/ui/malformed/malformed-plugin-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -2,7 +2,7 @@ error: malformed `plugin` attribute input\n   --> $DIR/malformed-plugin-2.rs:2:1\n    |\n LL | #![plugin=\"bleh\"]\n-   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[plugin(name)]`\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#![plugin(name)]`\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-2.rs:2:1"}, {"sha": "713ef4a795d88956d46981fbbb6cadc64c247b67", "filename": "src/test/ui/modules/path-invalid-form.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fmodules%2Fpath-invalid-form.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fmodules%2Fpath-invalid-form.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fpath-invalid-form.rs?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -0,0 +1,4 @@\n+#[path = 123]  //~ ERROR malformed `path` attribute\n+mod foo;\n+\n+fn main() {}"}, {"sha": "7e8aa44ef8be6b4029c0c03d312497ed94753b10", "filename": "src/test/ui/modules/path-invalid-form.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fmodules%2Fpath-invalid-form.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fmodules%2Fpath-invalid-form.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fpath-invalid-form.stderr?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -0,0 +1,8 @@\n+error: malformed `path` attribute input\n+  --> $DIR/path-invalid-form.rs:1:1\n+   |\n+LL | #[path = 123]\n+   | ^^^^^^^^^^^^^ help: must be of the form: `#[path = \"file\"]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ce2d1e2da2659fe921c31cdf71f4e4960b1cb3b3", "filename": "src/test/ui/modules/path-macro.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fmodules%2Fpath-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fmodules%2Fpath-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fpath-macro.rs?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -0,0 +1,8 @@\n+macro_rules! foo {\n+    () => {\"bar.rs\"};\n+}\n+\n+#[path = foo!()] //~ ERROR malformed `path` attribute\n+mod abc;\n+\n+fn main() {}"}, {"sha": "9a2e01ea264517ac90b19df4f5b84af995dfbe6d", "filename": "src/test/ui/modules/path-macro.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fmodules%2Fpath-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fmodules%2Fpath-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fpath-macro.stderr?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -0,0 +1,8 @@\n+error: malformed `path` attribute input\n+  --> $DIR/path-macro.rs:5:1\n+   |\n+LL | #[path = foo!()]\n+   | ^^^^^^^^^^^^^^^^ help: must be of the form: `#[path = \"file\"]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "93da7c3e0ddd65ca368fa9a4c65cd88ffaff5bca", "filename": "src/test/ui/no_crate_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fno_crate_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Fno_crate_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_crate_type.stderr?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -2,7 +2,7 @@ error: malformed `crate_type` attribute input\n   --> $DIR/no_crate_type.rs:2:1\n    |\n LL | #![crate_type]\n-   | ^^^^^^^^^^^^^^ help: must be of the form: `#[crate_type = \"bin|lib|...\"]`\n+   | ^^^^^^^^^^^^^^ help: must be of the form: `#![crate_type = \"bin|lib|...\"]`\n \n error: aborting due to previous error\n "}, {"sha": "e408109b3682c3ad12d6e8dfc2026ee25ca669f7", "filename": "src/test/ui/recursion_limit/invalid_digit_type.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit_type.rs?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -0,0 +1,3 @@\n+#![recursion_limit = 123] //~ ERROR malformed `recursion_limit` attribute\n+\n+fn main() {}"}, {"sha": "6d1409bb39065632f55180a462e8950bcdfb2e7f", "filename": "src/test/ui/recursion_limit/invalid_digit_type.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_digit_type.stderr?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -0,0 +1,8 @@\n+error: malformed `recursion_limit` attribute input\n+  --> $DIR/invalid_digit_type.rs:1:1\n+   |\n+LL | #![recursion_limit = 123]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#![recursion_limit = \"N\"]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7db67a8d1628428d7fd821941b0f1a4a65408937", "filename": "src/test/ui/recursion_limit/invalid_macro.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_macro.rs?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -0,0 +1,7 @@\n+#![recursion_limit = foo!()] //~ ERROR malformed `recursion_limit` attribute\n+\n+macro_rules! foo {\n+    () => {\"128\"};\n+}\n+\n+fn main() {}"}, {"sha": "0189e99da3714f5145469ad8e8590aedc440d4b8", "filename": "src/test/ui/recursion_limit/invalid_macro.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6e6ddc09d660fbfb4d483a9677d80768cc4e31c/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion_limit%2Finvalid_macro.stderr?ref=f6e6ddc09d660fbfb4d483a9677d80768cc4e31c", "patch": "@@ -0,0 +1,8 @@\n+error: malformed `recursion_limit` attribute input\n+  --> $DIR/invalid_macro.rs:1:1\n+   |\n+LL | #![recursion_limit = foo!()]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#![recursion_limit = \"N\"]`\n+\n+error: aborting due to previous error\n+"}]}