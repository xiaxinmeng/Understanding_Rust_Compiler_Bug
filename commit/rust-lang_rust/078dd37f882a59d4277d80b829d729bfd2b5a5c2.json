{"sha": "078dd37f882a59d4277d80b829d729bfd2b5a5c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3OGRkMzdmODgyYTU5ZDQyNzdkODBiODI5ZDcyOWJmZDJiNWE1YzI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-06-25T18:43:04Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-17T17:41:02Z"}, "message": "Use LocalExpnId where possible.", "tree": {"sha": "c37f60b600f91081c276d467c1e5839a7be39eee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c37f60b600f91081c276d467c1e5839a7be39eee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/078dd37f882a59d4277d80b829d729bfd2b5a5c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/078dd37f882a59d4277d80b829d729bfd2b5a5c2", "html_url": "https://github.com/rust-lang/rust/commit/078dd37f882a59d4277d80b829d729bfd2b5a5c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/078dd37f882a59d4277d80b829d729bfd2b5a5c2/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e78d6c9d697217998322ab626cbeee24cdfe228", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e78d6c9d697217998322ab626cbeee24cdfe228", "html_url": "https://github.com/rust-lang/rust/commit/6e78d6c9d697217998322ab626cbeee24cdfe228"}], "stats": {"total": 316, "additions": 169, "deletions": 147}, "files": [{"sha": "7f928cb5761808ff3079bdbfe999ee5ed18ff1a2", "filename": "compiler/rustc_ast/src/node_id.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -1,4 +1,4 @@\n-use rustc_span::{ExpnId, LocalExpnId};\n+use rustc_span::LocalExpnId;\n use std::fmt;\n \n rustc_index::newtype_index! {\n@@ -24,12 +24,12 @@ pub const CRATE_NODE_ID: NodeId = NodeId::from_u32(0);\n pub const DUMMY_NODE_ID: NodeId = NodeId::MAX;\n \n impl NodeId {\n-    pub fn placeholder_from_expn_id(expn_id: ExpnId) -> Self {\n-        NodeId::from_u32(expn_id.expect_local().as_u32())\n+    pub fn placeholder_from_expn_id(expn_id: LocalExpnId) -> Self {\n+        NodeId::from_u32(expn_id.as_u32())\n     }\n \n-    pub fn placeholder_to_expn_id(self) -> ExpnId {\n-        LocalExpnId::from_u32(self.as_u32()).to_expn_id()\n+    pub fn placeholder_to_expn_id(self) -> LocalExpnId {\n+        LocalExpnId::from_u32(self.as_u32())\n     }\n }\n "}, {"sha": "90cdd62144d7246d5f5b5226786ea5865113b599", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -36,8 +36,9 @@ pub fn expand_deriving_clone(\n         Annotatable::Item(ref annitem) => match annitem.kind {\n             ItemKind::Struct(_, Generics { ref params, .. })\n             | ItemKind::Enum(_, Generics { ref params, .. }) => {\n-                let container_id = cx.current_expansion.id.expn_data().parent;\n-                if cx.resolver.has_derive_copy(container_id)\n+                let container_id = cx.current_expansion.id.expn_data().parent.expect_local();\n+                let has_derive_copy = cx.resolver.has_derive_copy(container_id);\n+                if has_derive_copy\n                     && !params\n                         .iter()\n                         .any(|param| matches!(param.kind, ast::GenericParamKind::Type { .. }))"}, {"sha": "417dedab60d08a0771668c7b0164d90964cc912d", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -410,7 +410,7 @@ impl<'a> TraitDef<'a> {\n                         .any(|param| matches!(param.kind, ast::GenericParamKind::Type { .. })),\n                     _ => unreachable!(),\n                 };\n-                let container_id = cx.current_expansion.id.expn_data().parent;\n+                let container_id = cx.current_expansion.id.expn_data().parent.expect_local();\n                 let always_copy = has_no_type_params && cx.resolver.has_derive_copy(container_id);\n                 let use_temporaries = is_packed && always_copy;\n "}, {"sha": "f83329ecba8241dd0fb97dd9a1d4684ed47acd85", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -304,7 +304,7 @@ fn mk_decls(\n         &[sym::rustc_attrs, sym::proc_macro_internals],\n         None,\n     );\n-    let span = DUMMY_SP.with_def_site_ctxt(expn_id);\n+    let span = DUMMY_SP.with_def_site_ctxt(expn_id.to_expn_id());\n \n     let proc_macro = Ident::new(sym::proc_macro, span);\n     let krate = cx.item(span, proc_macro, Vec::new(), ast::ItemKind::ExternCrate(None));"}, {"sha": "e0d57267525d9e12980e44b076f81fd688095466", "filename": "compiler/rustc_builtin_macros/src/standard_library_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -34,8 +34,8 @@ pub fn inject(\n         &[sym::prelude_import],\n         None,\n     );\n-    let span = DUMMY_SP.with_def_site_ctxt(expn_id);\n-    let call_site = DUMMY_SP.with_call_site_ctxt(expn_id);\n+    let span = DUMMY_SP.with_def_site_ctxt(expn_id.to_expn_id());\n+    let call_site = DUMMY_SP.with_call_site_ctxt(expn_id.to_expn_id());\n \n     let ecfg = ExpansionConfig::default(\"std_lib_injection\".to_string());\n     let cx = ExtCtxt::new(sess, ecfg, resolver, None);"}, {"sha": "74a97a4058fac41dc3abef27402d7160c45f1786", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -126,7 +126,8 @@ impl<'a> MutVisitor for TestHarnessGenerator<'a> {\n                 for test in &mut tests {\n                     // See the comment on `mk_main` for why we're using\n                     // `apply_mark` directly.\n-                    test.ident.span = test.ident.span.apply_mark(expn_id, Transparency::Opaque);\n+                    test.ident.span =\n+                        test.ident.span.apply_mark(expn_id.to_expn_id(), Transparency::Opaque);\n                 }\n                 self.cx.test_cases.extend(tests);\n             }\n@@ -223,7 +224,7 @@ fn generate_test_harness(\n         &[sym::test, sym::rustc_attrs],\n         None,\n     );\n-    let def_site = DUMMY_SP.with_def_site_ctxt(expn_id);\n+    let def_site = DUMMY_SP.with_def_site_ctxt(expn_id.to_expn_id());\n \n     // Remove the entry points\n     let mut cleaner = EntryPointCleaner { sess, depth: 0, def_site };"}, {"sha": "497be2d931872e2fd2d435089b365af6bdddfb27", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -16,7 +16,7 @@ use rustc_parse::{self, nt_to_tokenstream, parser, MACRO_ARGUMENTS};\n use rustc_session::{parse::ParseSess, Limit, Session};\n use rustc_span::def_id::{CrateNum, DefId};\n use rustc_span::edition::Edition;\n-use rustc_span::hygiene::{AstPass, ExpnData, ExpnId, ExpnKind};\n+use rustc_span::hygiene::{AstPass, ExpnData, ExpnKind, LocalExpnId};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{FileName, MultiSpan, Span, DUMMY_SP};\n@@ -813,15 +813,15 @@ impl SyntaxExtension {\n \n     pub fn expn_data(\n         &self,\n-        parent: ExpnId,\n+        parent: LocalExpnId,\n         call_site: Span,\n         descr: Symbol,\n         macro_def_id: Option<DefId>,\n         parent_module: Option<DefId>,\n     ) -> ExpnData {\n         ExpnData::new(\n             ExpnKind::Macro(self.macro_kind(), descr),\n-            parent,\n+            parent.to_expn_id(),\n             call_site,\n             self.span,\n             self.allow_internal_unstable.clone(),\n@@ -843,7 +843,11 @@ pub trait ResolverExpand {\n     fn next_node_id(&mut self) -> NodeId;\n \n     fn resolve_dollar_crates(&mut self);\n-    fn visit_ast_fragment_with_placeholders(&mut self, expn_id: ExpnId, fragment: &AstFragment);\n+    fn visit_ast_fragment_with_placeholders(\n+        &mut self,\n+        expn_id: LocalExpnId,\n+        fragment: &AstFragment,\n+    );\n     fn register_builtin_macro(&mut self, name: Symbol, ext: SyntaxExtensionKind);\n \n     fn expansion_for_ast_pass(\n@@ -852,37 +856,41 @@ pub trait ResolverExpand {\n         pass: AstPass,\n         features: &[Symbol],\n         parent_module_id: Option<NodeId>,\n-    ) -> ExpnId;\n+    ) -> LocalExpnId;\n \n     fn resolve_imports(&mut self);\n \n     fn resolve_macro_invocation(\n         &mut self,\n         invoc: &Invocation,\n-        eager_expansion_root: ExpnId,\n+        eager_expansion_root: LocalExpnId,\n         force: bool,\n     ) -> Result<Lrc<SyntaxExtension>, Indeterminate>;\n \n     fn check_unused_macros(&mut self);\n \n     /// Some parent node that is close enough to the given macro call.\n-    fn lint_node_id(&self, expn_id: ExpnId) -> NodeId;\n+    fn lint_node_id(&self, expn_id: LocalExpnId) -> NodeId;\n \n     // Resolver interfaces for specific built-in macros.\n     /// Does `#[derive(...)]` attribute with the given `ExpnId` have built-in `Copy` inside it?\n-    fn has_derive_copy(&self, expn_id: ExpnId) -> bool;\n+    fn has_derive_copy(&self, expn_id: LocalExpnId) -> bool;\n     /// Resolve paths inside the `#[derive(...)]` attribute with the given `ExpnId`.\n     fn resolve_derives(\n         &mut self,\n-        expn_id: ExpnId,\n+        expn_id: LocalExpnId,\n         force: bool,\n         derive_paths: &dyn Fn() -> DeriveResolutions,\n     ) -> Result<(), Indeterminate>;\n     /// Take resolutions for paths inside the `#[derive(...)]` attribute with the given `ExpnId`\n     /// back from resolver.\n-    fn take_derive_resolutions(&mut self, expn_id: ExpnId) -> Option<DeriveResolutions>;\n+    fn take_derive_resolutions(&mut self, expn_id: LocalExpnId) -> Option<DeriveResolutions>;\n     /// Path resolution logic for `#[cfg_accessible(path)]`.\n-    fn cfg_accessible(&mut self, expn_id: ExpnId, path: &ast::Path) -> Result<bool, Indeterminate>;\n+    fn cfg_accessible(\n+        &mut self,\n+        expn_id: LocalExpnId,\n+        path: &ast::Path,\n+    ) -> Result<bool, Indeterminate>;\n \n     /// Decodes the proc-macro quoted span in the specified crate, with the specified id.\n     /// No caching is performed.\n@@ -913,7 +921,7 @@ impl ModuleData {\n \n #[derive(Clone)]\n pub struct ExpansionData {\n-    pub id: ExpnId,\n+    pub id: LocalExpnId,\n     pub depth: usize,\n     pub module: Rc<ModuleData>,\n     pub dir_ownership: DirOwnership,\n@@ -958,7 +966,7 @@ impl<'a> ExtCtxt<'a> {\n             extern_mod_loaded,\n             root_path: PathBuf::new(),\n             current_expansion: ExpansionData {\n-                id: ExpnId::root(),\n+                id: LocalExpnId::ROOT,\n                 depth: 0,\n                 module: Default::default(),\n                 dir_ownership: DirOwnership::Owned { relative: None },\n@@ -995,19 +1003,19 @@ impl<'a> ExtCtxt<'a> {\n     /// Equivalent of `Span::def_site` from the proc macro API,\n     /// except that the location is taken from the span passed as an argument.\n     pub fn with_def_site_ctxt(&self, span: Span) -> Span {\n-        span.with_def_site_ctxt(self.current_expansion.id)\n+        span.with_def_site_ctxt(self.current_expansion.id.to_expn_id())\n     }\n \n     /// Equivalent of `Span::call_site` from the proc macro API,\n     /// except that the location is taken from the span passed as an argument.\n     pub fn with_call_site_ctxt(&self, span: Span) -> Span {\n-        span.with_call_site_ctxt(self.current_expansion.id)\n+        span.with_call_site_ctxt(self.current_expansion.id.to_expn_id())\n     }\n \n     /// Equivalent of `Span::mixed_site` from the proc macro API,\n     /// except that the location is taken from the span passed as an argument.\n     pub fn with_mixed_site_ctxt(&self, span: Span) -> Span {\n-        span.with_mixed_site_ctxt(self.current_expansion.id)\n+        span.with_mixed_site_ctxt(self.current_expansion.id.to_expn_id())\n     }\n \n     /// Returns span for the macro which originally caused the current expansion to happen."}, {"sha": "b9d40962411428850b0252b20faddbc981594b47", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -31,7 +31,7 @@ use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::{feature_err, ParseSess};\n use rustc_session::Limit;\n use rustc_span::symbol::{sym, Ident};\n-use rustc_span::{ExpnId, FileName, Span};\n+use rustc_span::{FileName, LocalExpnId, Span};\n \n use smallvec::{smallvec, SmallVec};\n use std::ops::DerefMut;\n@@ -508,7 +508,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                 .map(|(path, item, _exts)| {\n                                     // FIXME: Consider using the derive resolutions (`_exts`)\n                                     // instead of enqueuing the derives to be resolved again later.\n-                                    let expn_id = ExpnId::fresh_empty();\n+                                    let expn_id = LocalExpnId::fresh_empty();\n                                     derive_invocations.push((\n                                         Invocation {\n                                             kind: InvocationKind::Derive { path, item },\n@@ -993,7 +993,7 @@ struct InvocationCollector<'a, 'b> {\n \n impl<'a, 'b> InvocationCollector<'a, 'b> {\n     fn collect(&mut self, fragment_kind: AstFragmentKind, kind: InvocationKind) -> AstFragment {\n-        let expn_id = ExpnId::fresh_empty();\n+        let expn_id = LocalExpnId::fresh_empty();\n         let vis = kind.placeholder_visibility();\n         self.invocations.push((\n             Invocation {"}, {"sha": "9ed5c8b8ffba5c814d4177fe50772285d1f36ec8", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -8,23 +8,23 @@ use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndSpacing};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{pluralize, PResult};\n-use rustc_span::hygiene::{ExpnId, Transparency};\n+use rustc_span::hygiene::{LocalExpnId, Transparency};\n use rustc_span::symbol::MacroRulesNormalizedIdent;\n use rustc_span::Span;\n \n use smallvec::{smallvec, SmallVec};\n use std::mem;\n \n // A Marker adds the given mark to the syntax context.\n-struct Marker(ExpnId, Transparency);\n+struct Marker(LocalExpnId, Transparency);\n \n impl MutVisitor for Marker {\n     fn token_visiting_enabled(&self) -> bool {\n         true\n     }\n \n     fn visit_span(&mut self, span: &mut Span) {\n-        *span = span.apply_mark(self.0, self.1)\n+        *span = span.apply_mark(self.0.to_expn_id(), self.1)\n     }\n }\n "}, {"sha": "178d727418d7426405a2ac8b24b09bf310ec931d", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -31,7 +31,7 @@ use rustc_middle::bug;\n use rustc_middle::hir::exports::Export;\n use rustc_middle::middle::cstore::CrateStore;\n use rustc_middle::ty;\n-use rustc_span::hygiene::{ExpnId, MacroKind};\n+use rustc_span::hygiene::{ExpnId, LocalExpnId, MacroKind};\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n@@ -42,7 +42,7 @@ use tracing::debug;\n \n type Res = def::Res<NodeId>;\n \n-impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, ExpnId) {\n+impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, LocalExpnId) {\n     fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n         arenas.alloc_name_binding(NameBinding {\n             kind: NameBindingKind::Module(self.0),\n@@ -54,7 +54,7 @@ impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, ExpnId) {\n     }\n }\n \n-impl<'a> ToNameBinding<'a> for (Res, ty::Visibility, Span, ExpnId) {\n+impl<'a> ToNameBinding<'a> for (Res, ty::Visibility, Span, LocalExpnId) {\n     fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n         arenas.alloc_name_binding(NameBinding {\n             kind: NameBindingKind::Res(self.0, false),\n@@ -68,7 +68,7 @@ impl<'a> ToNameBinding<'a> for (Res, ty::Visibility, Span, ExpnId) {\n \n struct IsMacroExport;\n \n-impl<'a> ToNameBinding<'a> for (Res, ty::Visibility, Span, ExpnId, IsMacroExport) {\n+impl<'a> ToNameBinding<'a> for (Res, ty::Visibility, Span, LocalExpnId, IsMacroExport) {\n     fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n         arenas.alloc_name_binding(NameBinding {\n             kind: NameBindingKind::Res(self.0, true),\n@@ -157,7 +157,12 @@ impl<'a> Resolver<'a> {\n     crate fn macro_def_scope(&mut self, expn_id: ExpnId) -> Module<'a> {\n         let def_id = match expn_id.expn_data().macro_def_id {\n             Some(def_id) => def_id,\n-            None => return self.ast_transform_scopes.get(&expn_id).unwrap_or(&self.graph_root),\n+            None => {\n+                return expn_id\n+                    .as_local()\n+                    .and_then(|expn_id| self.ast_transform_scopes.get(&expn_id))\n+                    .unwrap_or(&self.graph_root);\n+            }\n         };\n         self.macro_def_scope_from_def_id(def_id)\n     }\n@@ -739,7 +744,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 if ptr::eq(parent, self.r.graph_root) {\n                     if let Some(entry) = self.r.extern_prelude.get(&ident.normalize_to_macros_2_0())\n                     {\n-                        if expansion != ExpnId::root()\n+                        if expansion != LocalExpnId::ROOT\n                             && orig_name.is_some()\n                             && entry.extern_crate_item.is_none()\n                         {\n@@ -769,7 +774,13 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     no_implicit_prelude: parent.no_implicit_prelude || {\n                         self.r.session.contains_name(&item.attrs, sym::no_implicit_prelude)\n                     },\n-                    ..ModuleData::new(Some(parent), module_kind, def_id, expansion, item.span)\n+                    ..ModuleData::new(\n+                        Some(parent),\n+                        module_kind,\n+                        def_id,\n+                        expansion.to_expn_id(),\n+                        item.span,\n+                    )\n                 });\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n                 self.r.module_map.insert(local_def_id, module);\n@@ -808,7 +819,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     parent,\n                     module_kind,\n                     parent.nearest_parent_mod,\n-                    expansion,\n+                    expansion.to_expn_id(),\n                     item.span,\n                 );\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n@@ -883,7 +894,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     parent,\n                     module_kind,\n                     parent.nearest_parent_mod,\n-                    expansion,\n+                    expansion.to_expn_id(),\n                     item.span,\n                 );\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n@@ -926,7 +937,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 parent,\n                 ModuleKind::Block(block.id),\n                 parent.nearest_parent_mod,\n-                expansion,\n+                expansion.to_expn_id(),\n                 block.span,\n             );\n             self.r.block_map.insert(block.id, module);\n@@ -946,7 +957,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     parent,\n                     ModuleKind::Def(kind, def_id, ident.name),\n                     def_id,\n-                    expansion,\n+                    expansion.to_expn_id(),\n                     span,\n                 );\n                 self.r.define(parent, ident, TypeNS, (module, vis, span, expansion));\n@@ -1112,7 +1123,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             })\n         };\n \n-        let allow_shadowing = self.parent_scope.expansion == ExpnId::root();\n+        let allow_shadowing = self.parent_scope.expansion == LocalExpnId::ROOT;\n         if let Some(span) = import_all {\n             let import = macro_use_import(self, span);\n             self.r.potentially_unused_imports.push(import);\n@@ -1175,7 +1186,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         false\n     }\n \n-    fn visit_invoc(&mut self, id: NodeId) -> ExpnId {\n+    fn visit_invoc(&mut self, id: NodeId) -> LocalExpnId {\n         let invoc_id = id.placeholder_to_expn_id();\n         let old_parent_scope = self.r.invocation_parent_scopes.insert(invoc_id, self.parent_scope);\n         assert!(old_parent_scope.is_none(), \"invocation data is reset for an invocation\");"}, {"sha": "6f4f1bdaea1b7a97929bea82a63ad24c867f4637", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -6,15 +6,15 @@ use rustc_ast_lowering::ResolverAstLowering;\n use rustc_expand::expand::AstFragment;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::definitions::*;\n-use rustc_span::hygiene::ExpnId;\n+use rustc_span::hygiene::LocalExpnId;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use tracing::debug;\n \n crate fn collect_definitions(\n     resolver: &mut Resolver<'_>,\n     fragment: &AstFragment,\n-    expansion: ExpnId,\n+    expansion: LocalExpnId,\n ) {\n     let (parent_def, impl_trait_context) = resolver.invocation_parents[&expansion];\n     fragment.visit_with(&mut DefCollector { resolver, parent_def, expansion, impl_trait_context });\n@@ -25,14 +25,14 @@ struct DefCollector<'a, 'b> {\n     resolver: &'a mut Resolver<'b>,\n     parent_def: LocalDefId,\n     impl_trait_context: ImplTraitContext,\n-    expansion: ExpnId,\n+    expansion: LocalExpnId,\n }\n \n impl<'a, 'b> DefCollector<'a, 'b> {\n     fn create_def(&mut self, node_id: NodeId, data: DefPathData, span: Span) -> LocalDefId {\n         let parent_def = self.parent_def;\n         debug!(\"create_def(node_id={:?}, data={:?}, parent_def={:?})\", node_id, data, parent_def);\n-        self.resolver.create_def(parent_def, node_id, data, self.expansion, span)\n+        self.resolver.create_def(parent_def, node_id, data, self.expansion.to_expn_id(), span)\n     }\n \n     fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_def: LocalDefId, f: F) {\n@@ -285,7 +285,7 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n                         item_def,\n                         node_id,\n                         DefPathData::ImplTrait,\n-                        self.expansion,\n+                        self.expansion.to_expn_id(),\n                         ty.span,\n                     ),\n                     ImplTraitContext::Existential => {"}, {"sha": "acfa389fed58abc32f6398d76b1121e642a9cc86", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::span_bug;\n use rustc_middle::ty;\n use rustc_session::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n-use rustc_span::hygiene::ExpnId;\n+use rustc_span::hygiene::LocalExpnId;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{MultiSpan, Span};\n@@ -237,8 +237,9 @@ impl<'a> Resolver<'a> {\n                 if ns == TypeNS {\n                     if ident.name == kw::Crate || ident.name == kw::DollarCrate {\n                         let module = self.resolve_crate_root(ident);\n-                        let binding = (module, ty::Visibility::Public, module.span, ExpnId::root())\n-                            .to_name_binding(self.arenas);\n+                        let binding =\n+                            (module, ty::Visibility::Public, module.span, LocalExpnId::ROOT)\n+                                .to_name_binding(self.arenas);\n                         return Ok(binding);\n                     } else if ident.name == kw::Super || ident.name == kw::SelfLower {\n                         // FIXME: Implement these with renaming requirements so that e.g.\n@@ -265,7 +266,7 @@ impl<'a> Resolver<'a> {\n             self.resolution(module, key).try_borrow_mut().map_err(|_| (Determined, Weak::No))?; // This happens when there is a cycle of imports.\n \n         if let Some(binding) = resolution.binding {\n-            if !restricted_shadowing && binding.expansion != ExpnId::root() {\n+            if !restricted_shadowing && binding.expansion != LocalExpnId::ROOT {\n                 if let NameBindingKind::Res(_, true) = binding.kind {\n                     self.macro_expanded_macro_export_errors.insert((path_span, binding.span));\n                 }\n@@ -307,7 +308,7 @@ impl<'a> Resolver<'a> {\n                         if let Some(shadowed_glob) = resolution.shadowed_glob {\n                             // Forbid expanded shadowing to avoid time travel.\n                             if restricted_shadowing\n-                                && binding.expansion != ExpnId::root()\n+                                && binding.expansion != LocalExpnId::ROOT\n                                 && binding.res() != shadowed_glob.res()\n                             {\n                                 self.ambiguity_errors.push(AmbiguityError {\n@@ -521,7 +522,7 @@ impl<'a> Resolver<'a> {\n                             if old_glob { (old_binding, binding) } else { (binding, old_binding) };\n                         if glob_binding.res() != nonglob_binding.res()\n                             && key.ns == MacroNS\n-                            && nonglob_binding.expansion != ExpnId::root()\n+                            && nonglob_binding.expansion != LocalExpnId::ROOT\n                         {\n                             resolution.binding = Some(this.ambiguity(\n                                 AmbiguityKind::GlobVsExpanded,\n@@ -1271,7 +1272,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         target: Ident,\n     ) {\n         // Skip if the import was produced by a macro.\n-        if import.parent_scope.expansion != ExpnId::root() {\n+        if import.parent_scope.expansion != LocalExpnId::ROOT {\n             return;\n         }\n "}, {"sha": "7114fd33188d972c1fa035deb83b16ed50084987", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -53,7 +53,7 @@ use rustc_session::lint;\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n-use rustc_span::hygiene::{ExpnId, ExpnKind, MacroKind, SyntaxContext, Transparency};\n+use rustc_span::hygiene::{ExpnId, ExpnKind, LocalExpnId, MacroKind, SyntaxContext, Transparency};\n use rustc_span::source_map::{CachingSourceMapView, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -103,7 +103,7 @@ impl Determinacy {\n /// but not for late resolution yet.\n #[derive(Clone, Copy)]\n enum Scope<'a> {\n-    DeriveHelpers(ExpnId),\n+    DeriveHelpers(LocalExpnId),\n     DeriveHelpersCompat,\n     MacroRules(MacroRulesScopeRef<'a>),\n     CrateRoot,\n@@ -143,7 +143,7 @@ enum ScopeSet<'a> {\n #[derive(Clone, Copy, Debug)]\n pub struct ParentScope<'a> {\n     module: Module<'a>,\n-    expansion: ExpnId,\n+    expansion: LocalExpnId,\n     macro_rules: MacroRulesScopeRef<'a>,\n     derives: &'a [ast::Path],\n }\n@@ -154,7 +154,7 @@ impl<'a> ParentScope<'a> {\n     pub fn module(module: Module<'a>, resolver: &Resolver<'a>) -> ParentScope<'a> {\n         ParentScope {\n             module,\n-            expansion: ExpnId::root(),\n+            expansion: LocalExpnId::ROOT,\n             macro_rules: resolver.arenas.alloc_macro_rules_scope(MacroRulesScope::Empty),\n             derives: &[],\n         }\n@@ -515,7 +515,7 @@ pub struct ModuleData<'a> {\n     populate_on_access: Cell<bool>,\n \n     /// Macro invocations that can expand into items in this module.\n-    unexpanded_invocations: RefCell<FxHashSet<ExpnId>>,\n+    unexpanded_invocations: RefCell<FxHashSet<LocalExpnId>>,\n \n     /// Whether `#[no_implicit_prelude]` is active.\n     no_implicit_prelude: bool,\n@@ -645,7 +645,7 @@ impl<'a> fmt::Debug for ModuleData<'a> {\n pub struct NameBinding<'a> {\n     kind: NameBindingKind<'a>,\n     ambiguity: Option<(&'a NameBinding<'a>, AmbiguityKind)>,\n-    expansion: ExpnId,\n+    expansion: LocalExpnId,\n     span: Span,\n     vis: ty::Visibility,\n }\n@@ -829,7 +829,11 @@ impl<'a> NameBinding<'a> {\n     // in some later round and screw up our previously found resolution.\n     // See more detailed explanation in\n     // https://github.com/rust-lang/rust/pull/53778#issuecomment-419224049\n-    fn may_appear_after(&self, invoc_parent_expansion: ExpnId, binding: &NameBinding<'_>) -> bool {\n+    fn may_appear_after(\n+        &self,\n+        invoc_parent_expansion: LocalExpnId,\n+        binding: &NameBinding<'_>,\n+    ) -> bool {\n         // self > max(invoc, binding) => !(self <= invoc || self <= binding)\n         // Expansions are partially ordered, so \"may appear after\" is an inversion of\n         // \"certainly appears before or simultaneously\" and includes unordered cases.\n@@ -966,7 +970,7 @@ pub struct Resolver<'a> {\n     dummy_ext_derive: Lrc<SyntaxExtension>,\n     non_macro_attrs: [Lrc<SyntaxExtension>; 2],\n     local_macro_def_scopes: FxHashMap<LocalDefId, Module<'a>>,\n-    ast_transform_scopes: FxHashMap<ExpnId, Module<'a>>,\n+    ast_transform_scopes: FxHashMap<LocalExpnId, Module<'a>>,\n     unused_macros: FxHashMap<LocalDefId, (NodeId, Span)>,\n     proc_macro_stubs: FxHashSet<LocalDefId>,\n     /// Traces collected during macro resolution and validated when it's complete.\n@@ -978,18 +982,18 @@ pub struct Resolver<'a> {\n     /// `derive(Copy)` marks items they are applied to so they are treated specially later.\n     /// Derive macros cannot modify the item themselves and have to store the markers in the global\n     /// context, so they attach the markers to derive container IDs using this resolver table.\n-    containers_deriving_copy: FxHashSet<ExpnId>,\n+    containers_deriving_copy: FxHashSet<LocalExpnId>,\n     /// Parent scopes in which the macros were invoked.\n     /// FIXME: `derives` are missing in these parent scopes and need to be taken from elsewhere.\n-    invocation_parent_scopes: FxHashMap<ExpnId, ParentScope<'a>>,\n+    invocation_parent_scopes: FxHashMap<LocalExpnId, ParentScope<'a>>,\n     /// `macro_rules` scopes *produced* by expanding the macro invocations,\n     /// include all the `macro_rules` items and other invocations generated by them.\n-    output_macro_rules_scopes: FxHashMap<ExpnId, MacroRulesScopeRef<'a>>,\n+    output_macro_rules_scopes: FxHashMap<LocalExpnId, MacroRulesScopeRef<'a>>,\n     /// Helper attributes that are in scope for the given expansion.\n-    helper_attrs: FxHashMap<ExpnId, Vec<Ident>>,\n+    helper_attrs: FxHashMap<LocalExpnId, Vec<Ident>>,\n     /// Ready or in-progress results of resolving paths inside the `#[derive(...)]` attribute\n     /// with the given `ExpnId`.\n-    derive_data: FxHashMap<ExpnId, DeriveData>,\n+    derive_data: FxHashMap<LocalExpnId, DeriveData>,\n \n     /// Avoid duplicated errors for \"name already defined\".\n     name_already_seen: FxHashMap<Symbol, Span>,\n@@ -1018,7 +1022,7 @@ pub struct Resolver<'a> {\n     /// When collecting definitions from an AST fragment produced by a macro invocation `ExpnId`\n     /// we know what parent node that fragment should be attached to thanks to this table,\n     /// and how the `impl Trait` fragments were introduced.\n-    invocation_parents: FxHashMap<ExpnId, (LocalDefId, ImplTraitContext)>,\n+    invocation_parents: FxHashMap<LocalExpnId, (LocalDefId, ImplTraitContext)>,\n \n     next_disambiguator: FxHashMap<(LocalDefId, DefPathData), u32>,\n     /// Some way to know that we are in a *trait* impl in `visit_assoc_item`.\n@@ -1268,7 +1272,7 @@ impl<'a> Resolver<'a> {\n         node_id_to_def_id.insert(CRATE_NODE_ID, root);\n \n         let mut invocation_parents = FxHashMap::default();\n-        invocation_parents.insert(ExpnId::root(), (root, ImplTraitContext::Existential));\n+        invocation_parents.insert(LocalExpnId::ROOT, (root, ImplTraitContext::Existential));\n \n         let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> = session\n             .opts\n@@ -1342,7 +1346,7 @@ impl<'a> Resolver<'a> {\n             dummy_binding: arenas.alloc_name_binding(NameBinding {\n                 kind: NameBindingKind::Res(Res::Err, false),\n                 ambiguity: None,\n-                expansion: ExpnId::root(),\n+                expansion: LocalExpnId::ROOT,\n                 span: DUMMY_SP,\n                 vis: ty::Visibility::Public,\n             }),\n@@ -1392,7 +1396,7 @@ impl<'a> Resolver<'a> {\n         };\n \n         let root_parent_scope = ParentScope::module(graph_root, &resolver);\n-        resolver.invocation_parent_scopes.insert(ExpnId::root(), root_parent_scope);\n+        resolver.invocation_parent_scopes.insert(LocalExpnId::ROOT, root_parent_scope);\n \n         resolver\n     }\n@@ -1810,18 +1814,18 @@ impl<'a> Resolver<'a> {\n             }\n \n             scope = match scope {\n-                Scope::DeriveHelpers(expn_id) if expn_id != ExpnId::root() => {\n+                Scope::DeriveHelpers(LocalExpnId::ROOT) => Scope::DeriveHelpersCompat,\n+                Scope::DeriveHelpers(expn_id) => {\n                     // Derive helpers are not visible to code generated by bang or derive macros.\n                     let expn_data = expn_id.expn_data();\n                     match expn_data.kind {\n                         ExpnKind::Root\n                         | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {\n                             Scope::DeriveHelpersCompat\n                         }\n-                        _ => Scope::DeriveHelpers(expn_data.parent),\n+                        _ => Scope::DeriveHelpers(expn_data.parent.expect_local()),\n                     }\n                 }\n-                Scope::DeriveHelpers(..) => Scope::DeriveHelpersCompat,\n                 Scope::DeriveHelpersCompat => Scope::MacroRules(parent_scope.macro_rules),\n                 Scope::MacroRules(macro_rules_scope) => match macro_rules_scope.get() {\n                     MacroRulesScope::Binding(binding) => {\n@@ -3248,7 +3252,7 @@ impl<'a> Resolver<'a> {\n                 };\n                 let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                 Some(\n-                    (crate_root, ty::Visibility::Public, DUMMY_SP, ExpnId::root())\n+                    (crate_root, ty::Visibility::Public, DUMMY_SP, LocalExpnId::ROOT)\n                         .to_name_binding(self.arenas),\n                 )\n             }"}, {"sha": "86f271fdeceb8796a61a5be8c72c23162f597cd8", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -30,7 +30,7 @@ use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n-use rustc_span::hygiene::{self, ExpnData, ExpnId, ExpnKind};\n+use rustc_span::hygiene::{self, ExpnData, ExpnKind, LocalExpnId};\n use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -62,7 +62,7 @@ pub enum MacroRulesScope<'a> {\n     Binding(&'a MacroRulesBinding<'a>),\n     /// The scope introduced by a macro invocation that can potentially\n     /// create a `macro_rules!` macro definition.\n-    Invocation(ExpnId),\n+    Invocation(LocalExpnId),\n }\n \n /// `macro_rules!` scopes are always kept by reference and inside a cell.\n@@ -190,7 +190,11 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         });\n     }\n \n-    fn visit_ast_fragment_with_placeholders(&mut self, expansion: ExpnId, fragment: &AstFragment) {\n+    fn visit_ast_fragment_with_placeholders(\n+        &mut self,\n+        expansion: LocalExpnId,\n+        fragment: &AstFragment,\n+    ) {\n         // Integrate the new AST fragment into all the definition and module structures.\n         // We are inside the `expansion` now, but other parent scope components are still the same.\n         let parent_scope = ParentScope { expansion, ..self.invocation_parent_scopes[&expansion] };\n@@ -216,9 +220,9 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         pass: AstPass,\n         features: &[Symbol],\n         parent_module_id: Option<NodeId>,\n-    ) -> ExpnId {\n+    ) -> LocalExpnId {\n         let parent_module = parent_module_id.map(|module_id| self.local_def_id(module_id));\n-        let expn_id = ExpnId::fresh(\n+        let expn_id = LocalExpnId::fresh(\n             ExpnData::allow_unstable(\n                 ExpnKind::AstPass(pass),\n                 call_site,\n@@ -244,7 +248,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n     fn resolve_macro_invocation(\n         &mut self,\n         invoc: &Invocation,\n-        eager_expansion_root: ExpnId,\n+        eager_expansion_root: LocalExpnId,\n         force: bool,\n     ) -> Result<Lrc<SyntaxExtension>, Indeterminate> {\n         let invoc_id = invoc.expansion_data.id;\n@@ -328,7 +332,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                             | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {\n                                 break;\n                             }\n-                            _ => expn_id = expn_data.parent,\n+                            _ => expn_id = expn_data.parent.expect_local(),\n                         }\n                     }\n                 }\n@@ -344,21 +348,21 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         }\n     }\n \n-    fn lint_node_id(&self, expn_id: ExpnId) -> NodeId {\n+    fn lint_node_id(&self, expn_id: LocalExpnId) -> NodeId {\n         // FIXME - make this more precise. This currently returns the NodeId of the\n         // nearest closing item - we should try to return the closest parent of the ExpnId\n         self.invocation_parents\n             .get(&expn_id)\n             .map_or(ast::CRATE_NODE_ID, |id| self.def_id_to_node_id[id.0])\n     }\n \n-    fn has_derive_copy(&self, expn_id: ExpnId) -> bool {\n+    fn has_derive_copy(&self, expn_id: LocalExpnId) -> bool {\n         self.containers_deriving_copy.contains(&expn_id)\n     }\n \n     fn resolve_derives(\n         &mut self,\n-        expn_id: ExpnId,\n+        expn_id: LocalExpnId,\n         force: bool,\n         derive_paths: &dyn Fn() -> DeriveResolutions,\n     ) -> Result<(), Indeterminate> {\n@@ -423,15 +427,19 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         Ok(())\n     }\n \n-    fn take_derive_resolutions(&mut self, expn_id: ExpnId) -> Option<DeriveResolutions> {\n+    fn take_derive_resolutions(&mut self, expn_id: LocalExpnId) -> Option<DeriveResolutions> {\n         self.derive_data.remove(&expn_id).map(|data| data.resolutions)\n     }\n \n     // The function that implements the resolution logic of `#[cfg_accessible(path)]`.\n     // Returns true if the path can certainly be resolved in one of three namespaces,\n     // returns false if the path certainly cannot be resolved in any of the three namespaces.\n     // Returns `Indeterminate` if we cannot give a certain answer yet.\n-    fn cfg_accessible(&mut self, expn_id: ExpnId, path: &ast::Path) -> Result<bool, Indeterminate> {\n+    fn cfg_accessible(\n+        &mut self,\n+        expn_id: LocalExpnId,\n+        path: &ast::Path,\n+    ) -> Result<bool, Indeterminate> {\n         let span = path.span;\n         let path = &Segment::from_path(path);\n         let parent_scope = self.invocation_parent_scopes[&expn_id];\n@@ -714,7 +722,8 @@ impl<'a> Resolver<'a> {\n                 let ident = Ident::new(orig_ident.name, orig_ident.span.with_ctxt(ctxt));\n                 let ok = |res, span, arenas| {\n                     Ok((\n-                        (res, ty::Visibility::Public, span, ExpnId::root()).to_name_binding(arenas),\n+                        (res, ty::Visibility::Public, span, LocalExpnId::ROOT)\n+                            .to_name_binding(arenas),\n                         Flags::empty(),\n                     ))\n                 };"}, {"sha": "138ec061423bd650dc88c8ed92af86b18885b30c", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -198,19 +198,6 @@ impl ExpnId {\n         ExpnId { krate: LOCAL_CRATE, local_id: ExpnIndex::from_u32(0) }\n     }\n \n-    pub fn fresh_empty() -> ExpnId {\n-        LocalExpnId::fresh_empty().to_expn_id()\n-    }\n-\n-    pub fn fresh(expn_data: ExpnData, ctx: impl HashStableContext) -> ExpnId {\n-        LocalExpnId::fresh(expn_data, ctx).to_expn_id()\n-    }\n-\n-    #[inline]\n-    pub fn set_expn_data(self, expn_data: ExpnData, ctx: impl HashStableContext) {\n-        self.expect_local().set_expn_data(expn_data, ctx)\n-    }\n-\n     #[inline]\n     pub fn expn_hash(self) -> ExpnHash {\n         HygieneData::with(|data| data.expn_hash(self))\n@@ -819,7 +806,7 @@ impl Span {\n         transparency: Transparency,\n         ctx: impl HashStableContext,\n     ) -> Span {\n-        let expn_id = ExpnId::fresh(expn_data, ctx);\n+        let expn_id = LocalExpnId::fresh(expn_data, ctx).to_expn_id();\n         HygieneData::with(|data| {\n             self.with_ctxt(data.apply_mark(SyntaxContext::root(), expn_id, transparency))\n         })"}, {"sha": "ffb9f9eed41fb92a1f20c322c893dff491fbf900", "filename": "src/test/ui/hygiene/unpretty-debug.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -19,10 +19,10 @@ fn y /* 0#0 */() { }\n \n /*\n Expansions:\n-0: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n-1: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"foo\")\n+crate0::{{expn0}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n+crate0::{{expn1}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"foo\")\n \n SyntaxContexts:\n-#0: parent: #0, outer_mark: (ExpnId(0), Opaque)\n-#1: parent: #0, outer_mark: (ExpnId(1), SemiTransparent)\n+#0: parent: #0, outer_mark: (crate0::{{expn0}}, Opaque)\n+#1: parent: #0, outer_mark: (crate0::{{expn1}}, SemiTransparent)\n */"}, {"sha": "2524d8273b705163512b431191dbee7ac7d4654e", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -43,23 +43,23 @@ fn main /* 0#0 */() { ; }\n \n /*\n Expansions:\n-0: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n-1: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n-2: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"produce_it\")\n-3: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n-4: parent: ExpnId(2), call_site_ctxt: #4, def_site_ctxt: #0, kind: Macro(Bang, \"meta_macro::print_def_site\")\n-5: parent: ExpnId(4), call_site_ctxt: #5, def_site_ctxt: #0, kind: Macro(Bang, \"$crate::dummy\")\n+crate0::{{expn0}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n+crate0::{{expn1}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n+crate0::{{expn2}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"produce_it\")\n+crate0::{{expn3}}: parent: crate0::{{expn2}}, call_site_ctxt: #4, def_site_ctxt: #0, kind: Macro(Bang, \"meta_macro::print_def_site\")\n+crate0::{{expn4}}: parent: crate0::{{expn3}}, call_site_ctxt: #5, def_site_ctxt: #0, kind: Macro(Bang, \"$crate::dummy\")\n+crate2::{{expn1}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n \n SyntaxContexts:\n-#0: parent: #0, outer_mark: (ExpnId(0), Opaque)\n-#1: parent: #0, outer_mark: (ExpnId(1), Opaque)\n-#2: parent: #0, outer_mark: (ExpnId(1), Transparent)\n-#3: parent: #0, outer_mark: (ExpnId(3), Opaque)\n-#4: parent: #0, outer_mark: (ExpnId(2), SemiTransparent)\n-#5: parent: #0, outer_mark: (ExpnId(4), Opaque)\n-#6: parent: #4, outer_mark: (ExpnId(4), Transparent)\n-#7: parent: #0, outer_mark: (ExpnId(4), SemiTransparent)\n-#8: parent: #0, outer_mark: (ExpnId(5), Opaque)\n-#9: parent: #5, outer_mark: (ExpnId(5), Transparent)\n-#10: parent: #5, outer_mark: (ExpnId(5), SemiTransparent)\n+#0: parent: #0, outer_mark: (crate0::{{expn0}}, Opaque)\n+#1: parent: #0, outer_mark: (crate0::{{expn1}}, Opaque)\n+#2: parent: #0, outer_mark: (crate0::{{expn1}}, Transparent)\n+#3: parent: #0, outer_mark: (crate2::{{expn1}}, Opaque)\n+#4: parent: #0, outer_mark: (crate0::{{expn2}}, SemiTransparent)\n+#5: parent: #0, outer_mark: (crate0::{{expn3}}, Opaque)\n+#6: parent: #4, outer_mark: (crate0::{{expn3}}, Transparent)\n+#7: parent: #0, outer_mark: (crate0::{{expn3}}, SemiTransparent)\n+#8: parent: #0, outer_mark: (crate0::{{expn4}}, Opaque)\n+#9: parent: #5, outer_mark: (crate0::{{expn4}}, Transparent)\n+#10: parent: #5, outer_mark: (crate0::{{expn4}}, SemiTransparent)\n */"}, {"sha": "b5ab82737e9b615acf22b524892f1bd223eeb0bd", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.stdout", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -67,22 +67,22 @@ fn main /* 0#0 */() { }\n \n /*\n Expansions:\n-0: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n-1: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n-2: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"outer\")\n-3: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n-4: parent: ExpnId(2), call_site_ctxt: #4, def_site_ctxt: #4, kind: Macro(Bang, \"inner\")\n-5: parent: ExpnId(4), call_site_ctxt: #6, def_site_ctxt: #0, kind: Macro(Bang, \"print_bang\")\n+crate0::{{expn0}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n+crate0::{{expn1}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n+crate0::{{expn2}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"outer\")\n+crate0::{{expn3}}: parent: crate0::{{expn2}}, call_site_ctxt: #4, def_site_ctxt: #4, kind: Macro(Bang, \"inner\")\n+crate0::{{expn4}}: parent: crate0::{{expn3}}, call_site_ctxt: #6, def_site_ctxt: #0, kind: Macro(Bang, \"print_bang\")\n+crate2::{{expn1}}: parent: crate0::{{expn0}}, call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n \n SyntaxContexts:\n-#0: parent: #0, outer_mark: (ExpnId(0), Opaque)\n-#1: parent: #0, outer_mark: (ExpnId(1), Opaque)\n-#2: parent: #0, outer_mark: (ExpnId(1), Transparent)\n-#3: parent: #0, outer_mark: (ExpnId(3), Opaque)\n-#4: parent: #0, outer_mark: (ExpnId(2), SemiTransparent)\n-#5: parent: #0, outer_mark: (ExpnId(4), Opaque)\n-#6: parent: #4, outer_mark: (ExpnId(4), Opaque)\n-#7: parent: #0, outer_mark: (ExpnId(5), Opaque)\n-#8: parent: #6, outer_mark: (ExpnId(5), Transparent)\n-#9: parent: #5, outer_mark: (ExpnId(5), SemiTransparent)\n+#0: parent: #0, outer_mark: (crate0::{{expn0}}, Opaque)\n+#1: parent: #0, outer_mark: (crate0::{{expn1}}, Opaque)\n+#2: parent: #0, outer_mark: (crate0::{{expn1}}, Transparent)\n+#3: parent: #0, outer_mark: (crate2::{{expn1}}, Opaque)\n+#4: parent: #0, outer_mark: (crate0::{{expn2}}, SemiTransparent)\n+#5: parent: #0, outer_mark: (crate0::{{expn3}}, Opaque)\n+#6: parent: #4, outer_mark: (crate0::{{expn3}}, Opaque)\n+#7: parent: #0, outer_mark: (crate0::{{expn4}}, Opaque)\n+#8: parent: #6, outer_mark: (crate0::{{expn4}}, Transparent)\n+#9: parent: #5, outer_mark: (crate0::{{expn4}}, SemiTransparent)\n */"}, {"sha": "614cda5f911c2354bcb5e9ebac60d78e44941d2d", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/078dd37f882a59d4277d80b829d729bfd2b5a5c2/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078dd37f882a59d4277d80b829d729bfd2b5a5c2/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=078dd37f882a59d4277d80b829d729bfd2b5a5c2", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::ast::{\n };\n use rustc_ast::ptr;\n use rustc_ast_pretty::pprust;\n-use rustc_span::{sym, symbol, BytePos, ExpnId, Span, Symbol, SyntaxContext};\n+use rustc_span::{sym, symbol, BytePos, LocalExpnId, Span, Symbol, SyntaxContext};\n use unicode_width::UnicodeWidthStr;\n \n use crate::comment::{filter_normal_code, CharClasses, FullCodeCharKind, LineClasses};\n@@ -675,7 +675,7 @@ pub(crate) trait NodeIdExt {\n \n impl NodeIdExt for NodeId {\n     fn root() -> NodeId {\n-        NodeId::placeholder_from_expn_id(ExpnId::root())\n+        NodeId::placeholder_from_expn_id(LocalExpnId::ROOT)\n     }\n }\n "}]}