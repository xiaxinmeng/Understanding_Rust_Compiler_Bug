{"sha": "5dce719520a49b305b668a00ad25cb4731048670", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkY2U3MTk1MjBhNDliMzA1YjY2OGEwMGFkMjVjYjQ3MzEwNDg2NzA=", "commit": {"author": {"name": "Simon Heath", "email": "icefox@dreamquest.io", "date": "2019-02-27T14:54:37Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-02-27T15:03:11Z"}, "message": "Vastly simplify TryFrom docs.", "tree": {"sha": "87bc1bb7810a1aef76941ab2879f9ae4ab3e0b23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87bc1bb7810a1aef76941ab2879f9ae4ab3e0b23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dce719520a49b305b668a00ad25cb4731048670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dce719520a49b305b668a00ad25cb4731048670", "html_url": "https://github.com/rust-lang/rust/commit/5dce719520a49b305b668a00ad25cb4731048670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dce719520a49b305b668a00ad25cb4731048670/comments", "author": {"login": "icefoxen", "id": 1335133, "node_id": "MDQ6VXNlcjEzMzUxMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1335133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/icefoxen", "html_url": "https://github.com/icefoxen", "followers_url": "https://api.github.com/users/icefoxen/followers", "following_url": "https://api.github.com/users/icefoxen/following{/other_user}", "gists_url": "https://api.github.com/users/icefoxen/gists{/gist_id}", "starred_url": "https://api.github.com/users/icefoxen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/icefoxen/subscriptions", "organizations_url": "https://api.github.com/users/icefoxen/orgs", "repos_url": "https://api.github.com/users/icefoxen/repos", "events_url": "https://api.github.com/users/icefoxen/events{/privacy}", "received_events_url": "https://api.github.com/users/icefoxen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60cf413a20392ae38ffbf945e3d77f892655a74f", "url": "https://api.github.com/repos/rust-lang/rust/commits/60cf413a20392ae38ffbf945e3d77f892655a74f", "html_url": "https://github.com/rust-lang/rust/commit/60cf413a20392ae38ffbf945e3d77f892655a74f"}], "stats": {"total": 36, "additions": 8, "deletions": 28}, "files": [{"sha": "d08aa079dbd11f2586300890c3cf367eb64fbd6e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5dce719520a49b305b668a00ad25cb4731048670/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dce719520a49b305b668a00ad25cb4731048670/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=5dce719520a49b305b668a00ad25cb4731048670", "patch": "@@ -4545,13 +4545,8 @@ macro_rules! try_from_unbounded {\n             type Error = TryFromIntError;\n \n             /// Try to create the target number type from a source\n-            /// number type.  If the source type has a larger range\n-            /// than the target, or their ranges are disjoint (such\n-            /// as converting a signed to unsigned number or vice \n-            /// versa), this will return `None` if the source value\n-            /// doesn't fit into the range of the destination value.\n-            /// If the conversion can never fail, this is still\n-            /// implemented for completeness's sake.\n+            /// number type. This returns an error if the source value\n+            /// is outside of the range of the target type.\n             #[inline]\n             fn try_from(value: $source) -> Result<Self, Self::Error> {\n                 Ok(value as $target)\n@@ -4568,13 +4563,8 @@ macro_rules! try_from_lower_bounded {\n             type Error = TryFromIntError;\n \n             /// Try to create the target number type from a source\n-            /// number type.  If the source type has a larger range\n-            /// than the target, or their ranges are disjoint (such\n-            /// as converting a signed to unsigned number or vice \n-            /// versa), this will return `None` if the source value\n-            /// doesn't fit into the range of the destination value.\n-            /// If the conversion can never fail, this is still\n-            /// implemented for completeness's sake.\n+            /// number type. This returns an error if the source value\n+            /// is outside of the range of the target type.\n             #[inline]\n             fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n                 if u >= 0 {\n@@ -4595,13 +4585,8 @@ macro_rules! try_from_upper_bounded {\n             type Error = TryFromIntError;\n \n             /// Try to create the target number type from a source\n-            /// number type.  If the source type has a larger range\n-            /// than the target, or their ranges are disjoint (such\n-            /// as converting a signed to unsigned number or vice \n-            /// versa), this will return `None` if the source value\n-            /// doesn't fit into the range of the destination value.\n-            /// If the conversion can never fail, this is still\n-            /// implemented for completeness's sake.\n+            /// number type. This returns an error if the source value\n+            /// is outside of the range of the target type.\n             #[inline]\n             fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n                 if u > (<$target>::max_value() as $source) {\n@@ -4622,13 +4607,8 @@ macro_rules! try_from_both_bounded {\n             type Error = TryFromIntError;\n \n             /// Try to create the target number type from a source\n-            /// number type.  If the source type has a larger range\n-            /// than the target, or their ranges are disjoint (such\n-            /// as converting a signed to unsigned number or vice \n-            /// versa), this will return `None` if the source value\n-            /// doesn't fit into the range of the destination value.\n-            /// If the conversion can never fail, this is still\n-            /// implemented for completeness's sake.\n+            /// number type. This returns an error if the source value\n+            /// is outside of the range of the target type.\n             #[inline]\n             fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n                 let min = <$target>::min_value() as $source;"}]}