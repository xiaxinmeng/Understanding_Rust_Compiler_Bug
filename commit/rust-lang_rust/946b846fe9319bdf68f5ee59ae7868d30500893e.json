{"sha": "946b846fe9319bdf68f5ee59ae7868d30500893e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NmI4NDZmZTkzMTliZGY2OGY1ZWU1OWFlNzg2OGQzMDUwMDg5M2U=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-05-29T09:51:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-29T09:51:55Z"}, "message": "Merge pull request #2817 from mati865/rustup\n\nUpdate to nightly 2018-05-28", "tree": {"sha": "01b1f3b14c5e4484c80199e9dfb15287a8950122", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01b1f3b14c5e4484c80199e9dfb15287a8950122"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/946b846fe9319bdf68f5ee59ae7868d30500893e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbDSK7CRBK7hj4Ov3rIwAAdHIIACfZo3E36A5etqfd6M6EBESm\noE7JPjbasJZkpVBdxSv0kvi5nI95uyNp+XecCsBFaF3x+JN+XzJsqMf3ToqbS4FV\n5ySRVSPp97sA6OiRrHXanhAAzm31uiIFP4sHXI/URi0fjRuzDQK6dZfEqZK17Kkw\neYVNBLV9Sxf7l0/bVG5PNWKb7zVXxUm1A3bK1KRhdH82iARJbEbKU6NbNNEa2jvG\n4zJ4nCxKo8vpSEldQ5euPUiQarUvZubXMMf0iqMCNVMK2D3Zc/pkrXICMWoelfim\n4dyDJj7vmTNgRKu9tVS9k/L817ZydwjQSFzweCjyZ5dj+zkEMPJbeWrGE4JfEAY=\n=K+Bh\n-----END PGP SIGNATURE-----\n", "payload": "tree 01b1f3b14c5e4484c80199e9dfb15287a8950122\nparent 0d1e06d638ccd369eb3fda74cc862de828877b4d\nparent 8ed8ee895aab89add6101233e3cbceb19f7d6d79\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1527587515 +0200\ncommitter GitHub <noreply@github.com> 1527587515 +0200\n\nMerge pull request #2817 from mati865/rustup\n\nUpdate to nightly 2018-05-28"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/946b846fe9319bdf68f5ee59ae7868d30500893e", "html_url": "https://github.com/rust-lang/rust/commit/946b846fe9319bdf68f5ee59ae7868d30500893e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/946b846fe9319bdf68f5ee59ae7868d30500893e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d1e06d638ccd369eb3fda74cc862de828877b4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1e06d638ccd369eb3fda74cc862de828877b4d", "html_url": "https://github.com/rust-lang/rust/commit/0d1e06d638ccd369eb3fda74cc862de828877b4d"}, {"sha": "8ed8ee895aab89add6101233e3cbceb19f7d6d79", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed8ee895aab89add6101233e3cbceb19f7d6d79", "html_url": "https://github.com/rust-lang/rust/commit/8ed8ee895aab89add6101233e3cbceb19f7d6d79"}], "stats": {"total": 285, "additions": 141, "deletions": 144}, "files": [{"sha": "f418681cfb23b390774cdbf2776704fcbf34cd9b", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -147,9 +147,9 @@ fn check_unformatted(expr: &Expr) -> bool {\n         if let ExprArray(ref exprs) = expr.node;\n         if exprs.len() == 1;\n         if let ExprStruct(_, ref fields, _) = exprs[0].node;\n-        if let Some(format_field) = fields.iter().find(|f| f.name.node == \"format\");\n+        if let Some(format_field) = fields.iter().find(|f| f.ident.name == \"format\");\n         if let ExprStruct(_, ref fields, _) = format_field.expr.node;\n-        if let Some(align_field) = fields.iter().find(|f| f.name.node == \"width\");\n+        if let Some(align_field) = fields.iter().find(|f| f.ident.name == \"width\");\n         if let ExprPath(ref qpath) = align_field.expr.node;\n         if last_path_segment(qpath).name == \"Implied\";\n         then {"}, {"sha": "1e75d42dd6176c8c925c12907cf1b428a62766e1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -10,13 +10,13 @@\n #![recursion_limit = \"256\"]\n #![allow(stable_features)]\n #![feature(iterator_find_map)]\n-\n+#![feature(macro_at_most_once_rep)]\n \n extern crate cargo_metadata;\n #[macro_use]\n extern crate rustc;\n-extern crate rustc_typeck;\n extern crate rustc_target;\n+extern crate rustc_typeck;\n extern crate syntax;\n extern crate syntax_pos;\n "}, {"sha": "2654def1385f16486dbaffce3151c32f811a1345", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -392,8 +392,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     None\n                 }\n             },\n-            ExprField(_, spanned) => {\n-                let name = spanned.node.as_str();\n+            ExprField(_, ident) => {\n+                let name = ident.as_str();\n                 if name.starts_with('_') && !name.starts_with(\"__\") {\n                     Some(name)\n                 } else {"}, {"sha": "a0465f21105182f433bb77003e51ccf3a5cb1870", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantFieldNames {\n \n         if let ExprStruct(_, ref fields, _) = expr.node {\n             for field in fields {\n-                let name = field.name.node;\n+                let name = field.ident.name;\n \n                 if match_var(&field.expr, name) && !field.is_shorthand {\n                     span_lint_and_sugg ("}, {"sha": "59f18d21534253901aecb5772a95d7ea7fefe60e", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -187,10 +187,10 @@ fn check_pat<'a, 'tcx>(\n         PatKind::Struct(_, ref pfields, _) => if let Some(init_struct) = init {\n             if let ExprStruct(_, ref efields, _) = init_struct.node {\n                 for field in pfields {\n-                    let name = field.node.name;\n+                    let name = field.node.ident.name;\n                     let efield = efields\n                         .iter()\n-                        .find(|f| f.name.node == name)\n+                        .find(|f| f.ident.name == name)\n                         .map(|f| &*f.expr);\n                     check_pat(cx, &field.node.pat, efield, span, bindings);\n                 }"}, {"sha": "79fde40b4489b6c73b593ff82d8395770c14b277", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -383,11 +383,11 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 self.current = value_pat;\n                 self.visit_expr(value);\n             },\n-            Expr_::ExprField(ref object, ref field_name) => {\n+            Expr_::ExprField(ref object, ref field_ident) => {\n                 let obj_pat = self.next(\"object\");\n                 let field_name_pat = self.next(\"field_name\");\n                 println!(\"Field(ref {}, ref {}) = {};\", obj_pat, field_name_pat, current);\n-                println!(\"    if {}.node.as_str() == {:?}\", field_name_pat, field_name.node.as_str());\n+                println!(\"    if {}.node.as_str() == {:?}\", field_name_pat, field_ident.name.as_str());\n                 self.current = obj_pat;\n                 self.visit_expr(object);\n             },"}, {"sha": "5a20bfc81431b4d2106bad4ab5fd2f956aed5bf8", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -77,7 +77,7 @@ pub fn range<'a, 'b, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'b hir::Expr) -> O\n     /// Find the field named `name` in the field. Always return `Some` for\n     /// convenience.\n     fn get_field<'a>(name: &str, fields: &'a [hir::Field]) -> Option<&'a hir::Expr> {\n-        let expr = &fields.iter().find(|field| field.name.node == name)?.expr;\n+        let expr = &fields.iter().find(|field| field.ident.name == name)?.expr;\n \n         Some(expr)\n     }"}, {"sha": "0b70d61da1f685b78789239f142513c462665e1d", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&ExprCast(ref lx, ref lt), &ExprCast(ref rx, ref rt)) |\n             (&ExprType(ref lx, ref lt), &ExprType(ref rx, ref rt)) => self.eq_expr(lx, rx) && self.eq_ty(lt, rt),\n             (&ExprField(ref l_f_exp, ref l_f_ident), &ExprField(ref r_f_exp, ref r_f_ident)) => {\n-                l_f_ident.node == r_f_ident.node && self.eq_expr(l_f_exp, r_f_exp)\n+                l_f_ident.name == r_f_ident.name && self.eq_expr(l_f_exp, r_f_exp)\n             },\n             (&ExprIndex(ref la, ref li), &ExprIndex(ref ra, ref ri)) => self.eq_expr(la, ra) && self.eq_expr(li, ri),\n             (&ExprIf(ref lc, ref lt, ref le), &ExprIf(ref rc, ref rt, ref re)) => {\n@@ -149,7 +149,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     }\n \n     fn eq_field(&mut self, left: &Field, right: &Field) -> bool {\n-        left.name.node == right.name.node && self.eq_expr(&left.expr, &right.expr)\n+        left.ident.name == right.ident.name && self.eq_expr(&left.expr, &right.expr)\n     }\n \n     fn eq_lifetime(&mut self, left: &Lifetime, right: &Lifetime) -> bool {\n@@ -419,7 +419,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 let c: fn(_, _) -> _ = ExprField;\n                 c.hash(&mut self.s);\n                 self.hash_expr(e);\n-                self.hash_name(&f.node);\n+                self.hash_name(&f.name);\n             },\n             ExprIndex(ref a, ref i) => {\n                 let c: fn(_, _) -> _ = ExprIndex;\n@@ -502,7 +502,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 self.hash_qpath(path);\n \n                 for f in fields {\n-                    self.hash_name(&f.name.node);\n+                    self.hash_name(&f.ident.name);\n                     self.hash_expr(&f.expr);\n                 }\n "}, {"sha": "03682a1972525103db92b75027e8ecb982013883", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -268,9 +268,9 @@ fn print_expr(cx: &LateContext, expr: &hir::Expr, indent: usize) {\n             println!(\"{}rhs:\", ind);\n             print_expr(cx, rhs, indent + 1);\n         },\n-        hir::ExprField(ref e, ref name) => {\n+        hir::ExprField(ref e, ref ident) => {\n             println!(\"{}Field\", ind);\n-            println!(\"{}field name: {}\", ind, name.node);\n+            println!(\"{}field name: {}\", ind, ident.name);\n             println!(\"{}struct expr:\", ind);\n             print_expr(cx, e, indent + 1);\n         },\n@@ -322,7 +322,7 @@ fn print_expr(cx: &LateContext, expr: &hir::Expr, indent: usize) {\n             println!(\"{}Struct\", ind);\n             println!(\"{}path: {:?}\", ind, path);\n             for field in fields {\n-                println!(\"{}field \\\"{}\\\":\", ind, field.name.node);\n+                println!(\"{}field \\\"{}\\\":\", ind, field.ident.name);\n                 print_expr(cx, &field.expr, indent + 1);\n             }\n             if let Some(ref base) = *base {\n@@ -433,7 +433,7 @@ fn print_pat(cx: &LateContext, pat: &hir::Pat, indent: usize) {\n             println!(\"{}ignore leftover fields: {}\", ind, ignore);\n             println!(\"{}fields:\", ind);\n             for field in fields {\n-                println!(\"{}  field name: {}\", ind, field.node.name);\n+                println!(\"{}  field name: {}\", ind, field.node.ident.name);\n                 if field.node.is_shorthand {\n                     println!(\"{}  in shorthand notation\", ind);\n                 }"}, {"sha": "e7f63bb9a72fd1367c7a4fb081bd88060cad0be4", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -97,6 +97,7 @@ impl<'a> Sugg<'a> {\n             ast::ExprKind::Closure(..) |\n             ast::ExprKind::If(..) |\n             ast::ExprKind::IfLet(..) |\n+            ast::ExprKind::ObsoleteInPlace(..) |\n             ast::ExprKind::Unary(..) |\n             ast::ExprKind::Match(..) => Sugg::MaybeParen(snippet),\n             ast::ExprKind::Block(..) |\n@@ -320,6 +321,7 @@ pub fn make_assoc(op: AssocOp, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n         AssocOp::ShiftRight |\n         AssocOp::Subtract => format!(\"{} {} {}\", lhs, op.to_ast_binop().expect(\"Those are AST ops\").to_string(), rhs),\n         AssocOp::Assign => format!(\"{} = {}\", lhs, rhs),\n+        AssocOp::ObsoleteInPlace => format!(\"in ({}) {}\", lhs, rhs),\n         AssocOp::AssignOp(op) => format!(\"{} {}= {}\", lhs, token_to_string(&token::BinOp(op)), rhs),\n         AssocOp::As => format!(\"{} as {}\", lhs, rhs),\n         AssocOp::DotDot => format!(\"{}..{}\", lhs, rhs),\n@@ -360,7 +362,7 @@ fn associativity(op: &AssocOp) -> Associativity {\n     use syntax::util::parser::AssocOp::*;\n \n     match *op {\n-        Assign | AssignOp(_) => Associativity::Right,\n+        ObsoleteInPlace | Assign | AssignOp(_) => Associativity::Right,\n         Add | BitAnd | BitOr | BitXor | LAnd | LOr | Multiply | As | Colon => Associativity::Both,\n         Divide |\n         Equal |"}, {"sha": "fdd4f8ced9ad81bd67a9238e9b227e0d66d3b500", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -375,7 +375,7 @@ where\n                             if let ExprArray(ref format_exprs) = format_expr.node;\n                             if format_exprs.len() >= 1;\n                             if let ExprStruct(_, ref fields, _) = format_exprs[idx].node;\n-                            if let Some(format_field) = fields.iter().find(|f| f.name.node == \"format\");\n+                            if let Some(format_field) = fields.iter().find(|f| f.ident.name == \"format\");\n                             if check_unformatted(&format_field.expr);\n                             then {\n                                 lint_fn(tup_val.span);\n@@ -469,13 +469,13 @@ fn is_in_debug_impl(cx: &LateContext, expr: &Expr) -> bool {\n pub fn check_unformatted(format_field: &Expr) -> bool {\n     if_chain! {\n         if let ExprStruct(_, ref fields, _) = format_field.node;\n-        if let Some(width_field) = fields.iter().find(|f| f.name.node == \"width\");\n+        if let Some(width_field) = fields.iter().find(|f| f.ident.name == \"width\");\n         if let ExprPath(ref qpath) = width_field.expr.node;\n         if last_path_segment(qpath).name == \"Implied\";\n-        if let Some(align_field) = fields.iter().find(|f| f.name.node == \"align\");\n+        if let Some(align_field) = fields.iter().find(|f| f.ident.name == \"align\");\n         if let ExprPath(ref qpath) = align_field.expr.node;\n         if last_path_segment(qpath).name == \"Unknown\";\n-        if let Some(precision_field) = fields.iter().find(|f| f.name.node == \"precision\");\n+        if let Some(precision_field) = fields.iter().find(|f| f.ident.name == \"precision\");\n         if let ExprPath(ref qpath_precision) = precision_field.expr.node;\n         if last_path_segment(qpath_precision).name == \"Implied\";\n         then {"}, {"sha": "582ca84b1339387e56f9d9328a1b75be08b0a4db", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -78,7 +78,7 @@ error: the loop variable `i` is only used to index `vec`.\n help: consider using an iterator\n    |\n 86 |     for <item> in &vec {\n-   |\n+   |         ^^^^^^    ^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n   --> $DIR/for_loop.rs:95:14\n@@ -88,7 +88,7 @@ error: the loop variable `i` is only used to index `vec`.\n help: consider using an iterator\n    |\n 95 |     for <item> in &vec {\n-   |\n+   |         ^^^^^^    ^^^^\n \n error: the loop variable `j` is only used to index `STATIC`.\n    --> $DIR/for_loop.rs:100:14\n@@ -98,7 +98,7 @@ error: the loop variable `j` is only used to index `STATIC`.\n help: consider using an iterator\n     |\n 100 |     for <item> in STATIC.iter().take(4) {\n-    |\n+    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `j` is only used to index `CONST`.\n    --> $DIR/for_loop.rs:104:14\n@@ -108,7 +108,7 @@ error: the loop variable `j` is only used to index `CONST`.\n help: consider using an iterator\n     |\n 104 |     for <item> in CONST.iter().take(4) {\n-    |\n+    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is used to index `vec`\n    --> $DIR/for_loop.rs:108:14\n@@ -118,7 +118,7 @@ error: the loop variable `i` is used to index `vec`\n help: consider using an iterator\n     |\n 108 |     for (i, <item>) in vec.iter().enumerate() {\n-    |\n+    |         ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is only used to index `vec2`.\n    --> $DIR/for_loop.rs:116:14\n@@ -128,7 +128,7 @@ error: the loop variable `i` is only used to index `vec2`.\n help: consider using an iterator\n     |\n 116 |     for <item> in vec2.iter().take(vec.len()) {\n-    |\n+    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n    --> $DIR/for_loop.rs:120:14\n@@ -138,7 +138,7 @@ error: the loop variable `i` is only used to index `vec`.\n help: consider using an iterator\n     |\n 120 |     for <item> in vec.iter().skip(5) {\n-    |\n+    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n    --> $DIR/for_loop.rs:124:14\n@@ -148,7 +148,7 @@ error: the loop variable `i` is only used to index `vec`.\n help: consider using an iterator\n     |\n 124 |     for <item> in vec.iter().take(MAX_LEN) {\n-    |\n+    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n    --> $DIR/for_loop.rs:128:14\n@@ -158,7 +158,7 @@ error: the loop variable `i` is only used to index `vec`.\n help: consider using an iterator\n     |\n 128 |     for <item> in vec.iter().take(MAX_LEN + 1) {\n-    |\n+    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n    --> $DIR/for_loop.rs:132:14\n@@ -168,7 +168,7 @@ error: the loop variable `i` is only used to index `vec`.\n help: consider using an iterator\n     |\n 132 |     for <item> in vec.iter().take(10).skip(5) {\n-    |\n+    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is only used to index `vec`.\n    --> $DIR/for_loop.rs:136:14\n@@ -178,7 +178,7 @@ error: the loop variable `i` is only used to index `vec`.\n help: consider using an iterator\n     |\n 136 |     for <item> in vec.iter().take(10 + 1).skip(5) {\n-    |\n+    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is used to index `vec`\n    --> $DIR/for_loop.rs:140:14\n@@ -188,7 +188,7 @@ error: the loop variable `i` is used to index `vec`\n help: consider using an iterator\n     |\n 140 |     for (i, <item>) in vec.iter().enumerate().skip(5) {\n-    |\n+    |         ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is used to index `vec`\n    --> $DIR/for_loop.rs:144:14\n@@ -198,7 +198,7 @@ error: the loop variable `i` is used to index `vec`\n help: consider using an iterator\n     |\n 144 |     for (i, <item>) in vec.iter().enumerate().take(10).skip(5) {\n-    |\n+    |         ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n    --> $DIR/for_loop.rs:148:14\n@@ -384,7 +384,7 @@ error: you seem to want to iterate on a map's values\n help: use the corresponding method\n     |\n 385 |     for v in m.values() {\n-    |\n+    |         ^    ^^^^^^^^^^\n \n error: you seem to want to iterate on a map's values\n    --> $DIR/for_loop.rs:390:19\n@@ -394,7 +394,7 @@ error: you seem to want to iterate on a map's values\n help: use the corresponding method\n     |\n 390 |     for v in (*m).values() {\n-    |\n+    |         ^    ^^^^^^^^^^^^^\n \n error: you seem to want to iterate on a map's values\n    --> $DIR/for_loop.rs:398:19\n@@ -404,7 +404,7 @@ error: you seem to want to iterate on a map's values\n help: use the corresponding method\n     |\n 398 |     for v in m.values_mut() {\n-    |\n+    |         ^    ^^^^^^^^^^^^^^\n \n error: you seem to want to iterate on a map's values\n    --> $DIR/for_loop.rs:403:19\n@@ -414,7 +414,7 @@ error: you seem to want to iterate on a map's values\n help: use the corresponding method\n     |\n 403 |     for v in (*m).values_mut() {\n-    |\n+    |         ^    ^^^^^^^^^^^^^^^^^\n \n error: you seem to want to iterate on a map's keys\n    --> $DIR/for_loop.rs:409:24\n@@ -424,7 +424,7 @@ error: you seem to want to iterate on a map's keys\n help: use the corresponding method\n     |\n 409 |     for k in rm.keys() {\n-    |\n+    |         ^    ^^^^^^^^^\n \n error: it looks like you're manually copying between slices\n    --> $DIR/for_loop.rs:462:14"}, {"sha": "f41ce40519f21638040f5da634521e20b6510991", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -8,11 +8,11 @@ error: impl for `HashMap` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 11 | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<i8> for HashMap<K, V, S> {\n-   |\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^             ^^^^^^^^^^^^^^^^\n help: ...and use generic constructor\n    |\n 17 |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n-   |\n+   |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:20:36\n@@ -22,11 +22,11 @@ error: impl for `HashMap` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 20 | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<i8> for (HashMap<K, V, S>,) {\n-   |\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^              ^^^^^^^^^^^^^^^^\n help: ...and use generic constructor\n    |\n 22 |         ((HashMap::default(),), (HashMap::with_capacity_and_hasher(10, Default::default()),))\n-   |\n+   |           ^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:25:19\n@@ -36,11 +36,11 @@ error: impl for `HashMap` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 25 | impl<S: ::std::hash::BuildHasher + Default> Foo<i16> for HashMap<String, String, S> {\n-   |\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: ...and use generic constructor\n    |\n 27 |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n-   |\n+   |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:43:32\n@@ -50,11 +50,11 @@ error: impl for `HashSet` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 43 | impl<T: Hash + Eq, S: ::std::hash::BuildHasher + Default> Foo<i8> for HashSet<T, S> {\n-   |\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^             ^^^^^^^^^^^^^\n help: ...and use generic constructor\n    |\n 45 |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default::default()))\n-   |\n+   |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:48:19\n@@ -64,11 +64,11 @@ error: impl for `HashSet` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 48 | impl<S: ::std::hash::BuildHasher + Default> Foo<i16> for HashSet<String, S> {\n-   |\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^              ^^^^^^^^^^^^^^^^^^\n help: ...and use generic constructor\n    |\n 50 |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default::default()))\n-   |\n+   |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:65:23\n@@ -78,7 +78,7 @@ error: parameter of type `HashMap` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 65 | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {\n-   |\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:65:53\n@@ -88,7 +88,7 @@ error: parameter of type `HashSet` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 65 | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {\n-   |\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                          ^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:70:43\n@@ -101,11 +101,11 @@ error: impl for `HashMap` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 70 |         impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<u8> for HashMap<K, V, S> {\n-   |\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^             ^^^^^^^^^^^^^^^^\n help: ...and use generic constructor\n    |\n 72 |                 (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n-   |\n+   |                  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:78:33\n@@ -118,7 +118,7 @@ error: parameter of type `HashMap` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 78 |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {\n-   |\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:78:63\n@@ -131,7 +131,7 @@ error: parameter of type `HashSet` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 78 |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {\n-   |\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                          ^^^^^^^^^^^^^^^\n \n error: aborting due to 10 previous errors\n "}, {"sha": "e0afc939b42673102a2dfd61add0476f2269d0a4", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -65,7 +65,7 @@ error: you don't need to add `&` to all patterns\n help: instead of prefixing all patterns with `&`, you can dereference the expression\n    |\n 57 |     if let None = *a {\n-   |\n+   |            ^^^^   ^^\n \n error: you don't need to add `&` to both the expression and the patterns\n   --> $DIR/matches.rs:62:5\n@@ -77,7 +77,7 @@ error: you don't need to add `&` to both the expression and the patterns\n help: try\n    |\n 62 |     if let None = b {\n-   |\n+   |            ^^^^   ^\n \n error: some ranges overlap\n   --> $DIR/matches.rs:71:9"}, {"sha": "322df0b879800a0d2eaf351da01326d8f04aeae4", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -1,11 +1,6 @@\n-\n-\n-\n #![warn(needless_pass_by_value)]\n #![allow(dead_code, single_match, if_let_redundant_pattern_matching, many_single_char_names, option_option)]\n \n-#![feature(collections_range)]\n-\n use std::borrow::Borrow;\n use std::convert::AsRef;\n \n@@ -116,8 +111,8 @@ trait FalsePositive {\n extern \"C\" fn ext(x: String) -> usize { x.len() }\n \n // whitelist RangeArgument\n-fn range<T: ::std::collections::range::RangeArgument<usize>>(range: T) {\n-    let _ = range.start();\n+fn range<T: ::std::ops::RangeBounds<usize>>(range: T) {\n+    let _ = range.start_bound();\n }\n \n struct CopyWrapper(u32);"}, {"sha": "2fef0595cb3abe3798c3412da528b3161699955f", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -1,187 +1,187 @@\n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:14:23\n-   |\n-14 | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n-   |                       ^^^^^^ help: consider changing the type to: `&[T]`\n-   |\n-   = note: `-D needless-pass-by-value` implied by `-D warnings`\n+ --> $DIR/needless_pass_by_value.rs:9:23\n+  |\n+9 | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n+  |                       ^^^^^^ help: consider changing the type to: `&[T]`\n+  |\n+  = note: `-D needless-pass-by-value` implied by `-D warnings`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:28:11\n+  --> $DIR/needless_pass_by_value.rs:23:11\n    |\n-28 | fn bar(x: String, y: Wrapper) {\n+23 | fn bar(x: String, y: Wrapper) {\n    |           ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:28:22\n+  --> $DIR/needless_pass_by_value.rs:23:22\n    |\n-28 | fn bar(x: String, y: Wrapper) {\n+23 | fn bar(x: String, y: Wrapper) {\n    |                      ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:34:71\n+  --> $DIR/needless_pass_by_value.rs:29:71\n    |\n-34 | fn test_borrow_trait<T: Borrow<str>, U: AsRef<str>, V>(t: T, u: U, v: V) {\n+29 | fn test_borrow_trait<T: Borrow<str>, U: AsRef<str>, V>(t: T, u: U, v: V) {\n    |                                                                       ^ help: consider taking a reference instead: `&V`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:46:18\n+  --> $DIR/needless_pass_by_value.rs:41:18\n    |\n-46 | fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n+41 | fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n    |                  ^^^^^^^^^^^^^^^^^^^^^^\n help: consider taking a reference instead\n    |\n-46 | fn test_match(x: &Option<Option<String>>, y: Option<Option<String>>) {\n-47 |     match *x {\n+41 | fn test_match(x: &Option<Option<String>>, y: Option<Option<String>>) {\n+42 |     match *x {\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:59:24\n+  --> $DIR/needless_pass_by_value.rs:54:24\n    |\n-59 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n+54 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                        ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:59:36\n+  --> $DIR/needless_pass_by_value.rs:54:36\n    |\n-59 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n+54 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                                    ^^^^^^^\n help: consider taking a reference instead\n    |\n-59 | fn test_destructure(x: Wrapper, y: &Wrapper, z: Wrapper) {\n-60 |     let Wrapper(s) = z; // moved\n-61 |     let Wrapper(ref t) = *y; // not moved\n-62 |     let Wrapper(_) = *y; // still not moved\n+54 | fn test_destructure(x: Wrapper, y: &Wrapper, z: Wrapper) {\n+55 |     let Wrapper(s) = z; // moved\n+56 |     let Wrapper(ref t) = *y; // not moved\n+57 |     let Wrapper(_) = *y; // still not moved\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:75:49\n+  --> $DIR/needless_pass_by_value.rs:70:49\n    |\n-75 | fn test_blanket_ref<T: Foo, S: Serialize>(_foo: T, _serializable: S) {}\n+70 | fn test_blanket_ref<T: Foo, S: Serialize>(_foo: T, _serializable: S) {}\n    |                                                 ^ help: consider taking a reference instead: `&T`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:77:18\n+  --> $DIR/needless_pass_by_value.rs:72:18\n    |\n-77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+72 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                  ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:77:29\n+  --> $DIR/needless_pass_by_value.rs:72:29\n    |\n-77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+72 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                             ^^^^^^\n help: consider changing the type to\n    |\n-77 | fn issue_2114(s: String, t: &str, u: Vec<i32>, v: Vec<i32>) {\n+72 | fn issue_2114(s: String, t: &str, u: Vec<i32>, v: Vec<i32>) {\n    |                             ^^^^\n help: change `t.clone()` to\n    |\n-79 |     let _ = t.to_string();\n+74 |     let _ = t.to_string();\n    |             ^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:77:40\n+  --> $DIR/needless_pass_by_value.rs:72:40\n    |\n-77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+72 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                        ^^^^^^^^ help: consider taking a reference instead: `&Vec<i32>`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:77:53\n+  --> $DIR/needless_pass_by_value.rs:72:53\n    |\n-77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+72 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                                     ^^^^^^^^\n help: consider changing the type to\n    |\n-77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: &[i32]) {\n+72 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: &[i32]) {\n    |                                                     ^^^^^^\n help: change `v.clone()` to\n    |\n-81 |     let _ = v.to_owned();\n+76 |     let _ = v.to_owned();\n    |             ^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:89:12\n+  --> $DIR/needless_pass_by_value.rs:84:12\n    |\n-89 |         s: String,\n+84 |         s: String,\n    |            ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:90:12\n+  --> $DIR/needless_pass_by_value.rs:85:12\n    |\n-90 |         t: String,\n+85 |         t: String,\n    |            ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-   --> $DIR/needless_pass_by_value.rs:102:13\n-    |\n-102 |         _u: U,\n-    |             ^ help: consider taking a reference instead: `&U`\n+  --> $DIR/needless_pass_by_value.rs:97:13\n+   |\n+97 |         _u: U,\n+   |             ^ help: consider taking a reference instead: `&U`\n \n error: this argument is passed by value, but not consumed in the function body\n-   --> $DIR/needless_pass_by_value.rs:103:13\n-    |\n-103 |         _s: Self,\n-    |             ^^^^ help: consider taking a reference instead: `&Self`\n+  --> $DIR/needless_pass_by_value.rs:98:13\n+   |\n+98 |         _s: Self,\n+   |             ^^^^ help: consider taking a reference instead: `&Self`\n \n error: this argument is passed by value, but not consumed in the function body\n-   --> $DIR/needless_pass_by_value.rs:125:24\n+   --> $DIR/needless_pass_by_value.rs:120:24\n     |\n-125 | fn bar_copy(x: u32, y: CopyWrapper) {\n+120 | fn bar_copy(x: u32, y: CopyWrapper) {\n     |                        ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n     |\n help: consider marking this type as Copy\n-   --> $DIR/needless_pass_by_value.rs:123:1\n+   --> $DIR/needless_pass_by_value.rs:118:1\n     |\n-123 | struct CopyWrapper(u32);\n+118 | struct CopyWrapper(u32);\n     | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-   --> $DIR/needless_pass_by_value.rs:131:29\n+   --> $DIR/needless_pass_by_value.rs:126:29\n     |\n-131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n+126 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n     |                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n     |\n help: consider marking this type as Copy\n-   --> $DIR/needless_pass_by_value.rs:123:1\n+   --> $DIR/needless_pass_by_value.rs:118:1\n     |\n-123 | struct CopyWrapper(u32);\n+118 | struct CopyWrapper(u32);\n     | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-   --> $DIR/needless_pass_by_value.rs:131:45\n+   --> $DIR/needless_pass_by_value.rs:126:45\n     |\n-131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n+126 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n     |                                             ^^^^^^^^^^^\n     |\n help: consider marking this type as Copy\n-   --> $DIR/needless_pass_by_value.rs:123:1\n+   --> $DIR/needless_pass_by_value.rs:118:1\n     |\n-123 | struct CopyWrapper(u32);\n+118 | struct CopyWrapper(u32);\n     | ^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider taking a reference instead\n     |\n-131 | fn test_destructure_copy(x: CopyWrapper, y: &CopyWrapper, z: CopyWrapper) {\n-132 |     let CopyWrapper(s) = z; // moved\n-133 |     let CopyWrapper(ref t) = *y; // not moved\n-134 |     let CopyWrapper(_) = *y; // still not moved\n+126 | fn test_destructure_copy(x: CopyWrapper, y: &CopyWrapper, z: CopyWrapper) {\n+127 |     let CopyWrapper(s) = z; // moved\n+128 |     let CopyWrapper(ref t) = *y; // not moved\n+129 |     let CopyWrapper(_) = *y; // still not moved\n     |\n \n error: this argument is passed by value, but not consumed in the function body\n-   --> $DIR/needless_pass_by_value.rs:131:61\n+   --> $DIR/needless_pass_by_value.rs:126:61\n     |\n-131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n+126 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n     |                                                             ^^^^^^^^^^^\n     |\n help: consider marking this type as Copy\n-   --> $DIR/needless_pass_by_value.rs:123:1\n+   --> $DIR/needless_pass_by_value.rs:118:1\n     |\n-123 | struct CopyWrapper(u32);\n+118 | struct CopyWrapper(u32);\n     | ^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider taking a reference instead\n     |\n-131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: &CopyWrapper) {\n-132 |     let CopyWrapper(s) = *z; // moved\n+126 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: &CopyWrapper) {\n+127 |     let CopyWrapper(s) = *z; // moved\n     |\n \n error: aborting due to 20 previous errors"}, {"sha": "c394469c17bc59bf5f70ce4fb29564fa52c57668", "filename": "tests/ui/needless_range_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/tests%2Fui%2Fneedless_range_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/tests%2Fui%2Fneedless_range_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.stderr?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -8,7 +8,7 @@ error: the loop variable `i` is only used to index `ns`.\n help: consider using an iterator\n   |\n 8 |     for <item> in ns.iter().take(10).skip(3) {\n-  |\n+  |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the loop variable `i` is only used to index `ms`.\n   --> $DIR/needless_range_loop.rs:29:14\n@@ -18,7 +18,7 @@ error: the loop variable `i` is only used to index `ms`.\n help: consider using an iterator\n    |\n 29 |     for <item> in &mut ms {\n-   |\n+   |         ^^^^^^    ^^^^^^^\n \n error: the loop variable `i` is only used to index `ms`.\n   --> $DIR/needless_range_loop.rs:35:14\n@@ -28,7 +28,7 @@ error: the loop variable `i` is only used to index `ms`.\n help: consider using an iterator\n    |\n 35 |     for <item> in &mut ms {\n-   |\n+   |         ^^^^^^    ^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4a6ff6fe6dca5419f6c3185942476a6fd32cdd29", "filename": "tests/ui/op_ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/946b846fe9319bdf68f5ee59ae7868d30500893e/tests%2Fui%2Fop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/946b846fe9319bdf68f5ee59ae7868d30500893e/tests%2Fui%2Fop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fop_ref.stderr?ref=946b846fe9319bdf68f5ee59ae7868d30500893e", "patch": "@@ -8,7 +8,7 @@ error: needlessly taken reference of both operands\n help: use the values directly\n    |\n 13 |     let foo = 5 - 6;\n-   |\n+   |               ^   ^\n \n error: taken reference of right operand\n   --> $DIR/op_ref.rs:21:8"}]}