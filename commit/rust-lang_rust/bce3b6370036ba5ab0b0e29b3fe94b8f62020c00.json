{"sha": "bce3b6370036ba5ab0b0e29b3fe94b8f62020c00", "node_id": "C_kwDOAAsO6NoAKGJjZTNiNjM3MDAzNmJhNWFiMGIwZTI5YjNmZTk0YjhmNjIwMjBjMDA", "commit": {"author": {"name": "Allan Brondum Rasmussen", "email": "allan@keyrock.eu", "date": "2022-12-02T22:50:39Z"}, "committer": {"name": "Allan Brondum Rasmussen", "email": "allan@keyrock.eu", "date": "2022-12-02T22:50:39Z"}, "message": "check reference is a NameRef (and not Name)", "tree": {"sha": "8f882bac03e4bb5686b24bbbe77fea9de8f36560", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f882bac03e4bb5686b24bbbe77fea9de8f36560"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bce3b6370036ba5ab0b0e29b3fe94b8f62020c00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bce3b6370036ba5ab0b0e29b3fe94b8f62020c00", "html_url": "https://github.com/rust-lang/rust/commit/bce3b6370036ba5ab0b0e29b3fe94b8f62020c00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bce3b6370036ba5ab0b0e29b3fe94b8f62020c00/comments", "author": {"login": "allanbrondumkr", "id": 110611023, "node_id": "U_kgDOBpfKTw", "avatar_url": "https://avatars.githubusercontent.com/u/110611023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allanbrondumkr", "html_url": "https://github.com/allanbrondumkr", "followers_url": "https://api.github.com/users/allanbrondumkr/followers", "following_url": "https://api.github.com/users/allanbrondumkr/following{/other_user}", "gists_url": "https://api.github.com/users/allanbrondumkr/gists{/gist_id}", "starred_url": "https://api.github.com/users/allanbrondumkr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allanbrondumkr/subscriptions", "organizations_url": "https://api.github.com/users/allanbrondumkr/orgs", "repos_url": "https://api.github.com/users/allanbrondumkr/repos", "events_url": "https://api.github.com/users/allanbrondumkr/events{/privacy}", "received_events_url": "https://api.github.com/users/allanbrondumkr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "allanbrondumkr", "id": 110611023, "node_id": "U_kgDOBpfKTw", "avatar_url": "https://avatars.githubusercontent.com/u/110611023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allanbrondumkr", "html_url": "https://github.com/allanbrondumkr", "followers_url": "https://api.github.com/users/allanbrondumkr/followers", "following_url": "https://api.github.com/users/allanbrondumkr/following{/other_user}", "gists_url": "https://api.github.com/users/allanbrondumkr/gists{/gist_id}", "starred_url": "https://api.github.com/users/allanbrondumkr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allanbrondumkr/subscriptions", "organizations_url": "https://api.github.com/users/allanbrondumkr/orgs", "repos_url": "https://api.github.com/users/allanbrondumkr/repos", "events_url": "https://api.github.com/users/allanbrondumkr/events{/privacy}", "received_events_url": "https://api.github.com/users/allanbrondumkr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "398a71affb05aeeea1991044ec9ca1229e68f0f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/398a71affb05aeeea1991044ec9ca1229e68f0f3", "html_url": "https://github.com/rust-lang/rust/commit/398a71affb05aeeea1991044ec9ca1229e68f0f3"}], "stats": {"total": 147, "additions": 146, "deletions": 1}, "files": [{"sha": "1506e44a718079753f5d835c85ca562cc84f1587", "filename": "crates/ide/src/call_hierarchy.rs", "status": "modified", "additions": 146, "deletions": 1, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/bce3b6370036ba5ab0b0e29b3fe94b8f62020c00/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bce3b6370036ba5ab0b0e29b3fe94b8f62020c00/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs?ref=bce3b6370036ba5ab0b0e29b3fe94b8f62020c00", "patch": "@@ -57,7 +57,8 @@ pub(crate) fn incoming_calls(\n         .flat_map(|func| func.usages(sema).all());\n \n     for (_, references) in references {\n-        let references = references.into_iter().map(|FileReference { name, .. }| name);\n+        let references =\n+            references.iter().filter_map(|FileReference { name, .. }| name.as_name_ref());\n         for name in references {\n             // This target is the containing function\n             let nav = sema.ancestors_with_macros(name.syntax().clone()).find_map(|node| {\n@@ -457,4 +458,148 @@ fn caller$0() {\n             expect![[]],\n         );\n     }\n+\n+    #[test]\n+    fn test_trait_method_call_hierarchy_on_def() {\n+        check_hierarchy(\n+            r#\"\n+trait T1 {\n+    fn call$0ee();\n+}\n+\n+struct S1;\n+\n+impl T1 for S1 {\n+    fn callee() {}\n+}\n+\n+fn caller() {\n+    S1::callee();\n+}\n+\"#,\n+            expect![[\"callee Function FileId(0) 15..27 18..24\"]],\n+            expect![[\"caller Function FileId(0) 82..115 85..91 : [104..110]\"]],\n+            expect![[]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_trait_method_call_hierarchy_on_impl() {\n+        check_hierarchy(\n+            r#\"\n+trait T1 {\n+    fn callee();\n+}\n+\n+struct S1;\n+\n+impl T1 for S1 {\n+    fn call$0ee() {}\n+}\n+\n+fn caller() {\n+    S1::callee();\n+}\n+\"#,\n+            expect![[\"callee Function FileId(0) 64..78 67..73\"]],\n+            expect![[\"caller Function FileId(0) 82..115 85..91 : [104..110]\"]],\n+            expect![[]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_trait_method_call_hierarchy_on_ref() {\n+        check_hierarchy(\n+            r#\"\n+trait T1 {\n+    fn callee();\n+}\n+\n+struct S1;\n+\n+impl T1 for S1 {\n+    fn callee() {}\n+}\n+\n+fn caller() {\n+    S1::call$0ee();\n+}\n+\"#,\n+            expect![[\"callee Function FileId(0) 64..78 67..73\"]],\n+            expect![[\"caller Function FileId(0) 82..115 85..91 : [104..110]\"]],\n+            expect![[]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_trait_method_generic_call_hierarchy_on_def() {\n+        check_hierarchy(\n+            r#\"\n+trait T1 {\n+    fn call$0ee();\n+}\n+\n+struct S1;\n+\n+impl T1 for S1 {\n+    fn callee() {}\n+}\n+\n+fn caller<T: T1>() {\n+    T::callee();\n+}\n+\"#,\n+            expect![[\"callee Function FileId(0) 15..27 18..24\"]],\n+            expect![[\"caller Function FileId(0) 82..121 85..91 : [110..116]\"]],\n+            expect![[]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_trait_method_generic_call_hierarchy_on_impl() {\n+        check_hierarchy(\n+            r#\"\n+trait T1 {\n+    fn callee();\n+}\n+\n+struct S1;\n+\n+impl T1 for S1 {\n+    fn call$0ee() {}\n+}\n+\n+fn caller<T: T1>() {\n+    T::callee();\n+}\n+\"#,\n+            expect![[\"callee Function FileId(0) 64..78 67..73\"]],\n+            expect![[\"caller Function FileId(0) 82..121 85..91 : [110..116]\"]],\n+            expect![[]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_trait_method_generic_call_hierarchy_on_ref() {\n+        check_hierarchy(\n+            r#\"\n+trait T1 {\n+    fn callee();\n+}\n+\n+struct S1;\n+\n+impl T1 for S1 {\n+    fn callee() {}\n+}\n+\n+fn caller<T: T1>() {\n+    T::call$0ee();\n+}\n+\"#,\n+            expect![[\"callee Function FileId(0) 15..27 18..24\"]],\n+            expect![[\"caller Function FileId(0) 82..121 85..91 : [110..116]\"]],\n+            expect![[]],\n+        );\n+    }\n }"}]}