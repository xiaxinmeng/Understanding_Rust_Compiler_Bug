{"sha": "189dc5f30b2f4198a6ddbe917e2dd6644799f44e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OWRjNWYzMGIyZjQxOThhNmRkYmU5MTdlMmRkNjY0NDc5OWY0NGU=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-04T01:20:35Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-08T19:06:21Z"}, "message": "Move slice::raw::from_buf_raw() to vec::raw::from_buf()\n\nChange from_buf_raw() to return a Vec<T> instead of a ~[T]. As such, it\nbelongs in vec, in the newly-created vec::raw module.", "tree": {"sha": "7903bdd527384354c2c45e8bdf6f80d57b5e5081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7903bdd527384354c2c45e8bdf6f80d57b5e5081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/189dc5f30b2f4198a6ddbe917e2dd6644799f44e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/189dc5f30b2f4198a6ddbe917e2dd6644799f44e", "html_url": "https://github.com/rust-lang/rust/commit/189dc5f30b2f4198a6ddbe917e2dd6644799f44e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/189dc5f30b2f4198a6ddbe917e2dd6644799f44e/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3296bd7e4686bf4b76d9b9ac5c9c7f61ef4eb9e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3296bd7e4686bf4b76d9b9ac5c9c7f61ef4eb9e7", "html_url": "https://github.com/rust-lang/rust/commit/3296bd7e4686bf4b76d9b9ac5c9c7f61ef4eb9e7"}], "stats": {"total": 98, "additions": 39, "deletions": 59}, "files": [{"sha": "42e5ad062ee84b078fc6372c351da52c71f84c85", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/189dc5f30b2f4198a6ddbe917e2dd6644799f44e/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189dc5f30b2f4198a6ddbe917e2dd6644799f44e/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=189dc5f30b2f4198a6ddbe917e2dd6644799f44e", "patch": "@@ -22,7 +22,7 @@ use std::ptr;\n use std::rt::rtio;\n use std::str;\n use std::sync::arc::UnsafeArc;\n-use std::slice;\n+use std::vec;\n \n use io::IoResult;\n \n@@ -368,8 +368,8 @@ pub fn readdir(p: &CString) -> IoResult<Vec<Path>> {\n                 if fp_buf as uint == 0 {\n                     fail!(\"os::list_dir() failure: got null ptr from wfd\");\n                 } else {\n-                    let fp_vec = slice::from_buf(fp_buf, libc::wcslen(fp_buf) as uint);\n-                    let fp_trimmed = str::truncate_utf16_at_nul(fp_vec);\n+                    let fp_vec = vec::raw::from_buf(fp_buf, libc::wcslen(fp_buf) as uint);\n+                    let fp_trimmed = str::truncate_utf16_at_nul(fp_vec.as_slice());\n                     let fp_str = str::from_utf16(fp_trimmed)\n                             .expect(\"rust_list_dir_wfd_fp_buf returned invalid UTF-16\");\n                     paths.push(Path::new(fp_str));"}, {"sha": "7dc42a75dff88db76cf30fdc63379d47b5802ad0", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/189dc5f30b2f4198a6ddbe917e2dd6644799f44e/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189dc5f30b2f4198a6ddbe917e2dd6644799f44e/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=189dc5f30b2f4198a6ddbe917e2dd6644799f44e", "patch": "@@ -722,19 +722,6 @@ impl<'a, T: TotalOrd> MutableTotalOrdVector<T> for &'a mut [T] {\n     }\n }\n \n-/**\n-* Constructs a vector from an unsafe pointer to a buffer\n-*\n-* # Arguments\n-*\n-* * ptr - An unsafe pointer to a buffer of `T`\n-* * elts - The number of elements in the buffer\n-*/\n-// Wrapper for fn in raw: needs to be called by net_tcp::on_tcp_read_cb\n-pub unsafe fn from_buf<T>(ptr: *T, elts: uint) -> ~[T] {\n-    raw::from_buf_raw(ptr, elts)\n-}\n-\n /// Unsafe operations\n pub mod raw {\n     use iter::Iterator;\n@@ -744,23 +731,6 @@ pub mod raw {\n \n     pub use core::slice::raw::{buf_as_slice, mut_buf_as_slice};\n     pub use core::slice::raw::{shift_ptr, pop_ptr};\n-\n-    /**\n-    * Constructs a vector from an unsafe pointer to a buffer\n-    *\n-    * # Arguments\n-    *\n-    * * ptr - An unsafe pointer to a buffer of `T`\n-    * * elts - The number of elements in the buffer\n-    */\n-    // Was in raw, but needs to be called by net_tcp::on_tcp_read_cb\n-    #[inline]\n-    pub unsafe fn from_buf_raw<T>(ptr: *T, elts: uint) -> ~[T] {\n-        let mut dst = Vec::with_capacity(elts);\n-        dst.set_len(elts);\n-        ptr::copy_memory(dst.as_mut_ptr(), ptr, elts);\n-        dst.move_iter().collect()\n-    }\n }\n \n /// An iterator that moves out of a vector.\n@@ -820,31 +790,6 @@ mod tests {\n \n     fn is_odd(n: &uint) -> bool { *n % 2u == 1u }\n \n-    #[test]\n-    fn test_unsafe_ptrs() {\n-        unsafe {\n-            // Test on-stack copy-from-buf.\n-            let a = box [1, 2, 3];\n-            let mut ptr = a.as_ptr();\n-            let b = from_buf(ptr, 3u);\n-            assert_eq!(b.len(), 3u);\n-            assert_eq!(b[0], 1);\n-            assert_eq!(b[1], 2);\n-            assert_eq!(b[2], 3);\n-\n-            // Test on-heap copy-from-buf.\n-            let c = box [1, 2, 3, 4, 5];\n-            ptr = c.as_ptr();\n-            let d = from_buf(ptr, 5u);\n-            assert_eq!(d.len(), 5u);\n-            assert_eq!(d[0], 1);\n-            assert_eq!(d[1], 2);\n-            assert_eq!(d[2], 3);\n-            assert_eq!(d[3], 4);\n-            assert_eq!(d[4], 5);\n-        }\n-    }\n-\n     #[test]\n     fn test_from_fn() {\n         // Test on-stack from_fn."}, {"sha": "d220ebd0d1e525318d31fe396742157edf7b496c", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/189dc5f30b2f4198a6ddbe917e2dd6644799f44e/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189dc5f30b2f4198a6ddbe917e2dd6644799f44e/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=189dc5f30b2f4198a6ddbe917e2dd6644799f44e", "patch": "@@ -1455,12 +1455,30 @@ pub fn unzip<T, U, V: Iterator<(T, U)>>(mut iter: V) -> (Vec<T>, Vec<U>) {\n     (ts, us)\n }\n \n+/// Unsafe operations\n+pub mod raw {\n+    use super::Vec;\n+    use ptr;\n+\n+    /// Constructs a vector from an unsafe pointer to a buffer.\n+    ///\n+    /// The elements of the buffer are copied into the vector without cloning,\n+    /// as if `ptr::read()` were called on them.\n+    #[inline]\n+    pub unsafe fn from_buf<T>(ptr: *T, elts: uint) -> Vec<T> {\n+        let mut dst = Vec::with_capacity(elts);\n+        dst.set_len(elts);\n+        ptr::copy_nonoverlapping_memory(dst.as_mut_ptr(), ptr, elts);\n+        dst\n+    }\n+}\n+\n \n #[cfg(test)]\n mod tests {\n     use prelude::*;\n     use mem::size_of;\n-    use super::unzip;\n+    use super::{unzip, raw};\n \n     #[test]\n     fn test_small_vec_struct() {\n@@ -1720,4 +1738,21 @@ mod tests {\n         assert_eq!((2, 5), (left[1], right[1]));\n         assert_eq!((3, 6), (left[2], right[2]));\n     }\n+\n+    #[test]\n+    fn test_unsafe_ptrs() {\n+        unsafe {\n+            // Test on-stack copy-from-buf.\n+            let a = [1, 2, 3];\n+            let ptr = a.as_ptr();\n+            let b = raw::from_buf(ptr, 3u);\n+            assert_eq!(b, vec![1, 2, 3]);\n+\n+            // Test on-heap copy-from-buf.\n+            let c = box [1, 2, 3, 4, 5];\n+            let ptr = c.as_ptr();\n+            let d = raw::from_buf(ptr, 5u);\n+            assert_eq!(d, vec![1, 2, 3, 4, 5]);\n+        }\n+    }\n }"}]}