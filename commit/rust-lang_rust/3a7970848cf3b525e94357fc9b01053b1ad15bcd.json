{"sha": "3a7970848cf3b525e94357fc9b01053b1ad15bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNzk3MDg0OGNmM2I1MjVlOTQzNTdmYzliMDEwNTNiMWFkMTViY2Q=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-10-29T13:30:47Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-11-04T10:10:44Z"}, "message": "Fix cranelift build", "tree": {"sha": "7d78ff20ac91a1d8f1af386909cc9d51fd5becaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d78ff20ac91a1d8f1af386909cc9d51fd5becaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a7970848cf3b525e94357fc9b01053b1ad15bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7970848cf3b525e94357fc9b01053b1ad15bcd", "html_url": "https://github.com/rust-lang/rust/commit/3a7970848cf3b525e94357fc9b01053b1ad15bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a7970848cf3b525e94357fc9b01053b1ad15bcd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c47857478628445730af1d464e55a7f980c01837", "url": "https://api.github.com/repos/rust-lang/rust/commits/c47857478628445730af1d464e55a7f980c01837", "html_url": "https://github.com/rust-lang/rust/commit/c47857478628445730af1d464e55a7f980c01837"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "2097f9d288705b822a4eab86fd7bb33cd3269859", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a7970848cf3b525e94357fc9b01053b1ad15bcd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a7970848cf3b525e94357fc9b01053b1ad15bcd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=3a7970848cf3b525e94357fc9b01053b1ad15bcd", "patch": "@@ -499,7 +499,7 @@ fn codegen_stmt<'tcx>(\n                         UnOp::Neg => match layout.ty.kind() {\n                             ty::Int(IntTy::I128) => {\n                                 // FIXME remove this case once ineg.i128 works\n-                                let zero = CValue::const_val(fx, layout, 0);\n+                                let zero = CValue::const_val(fx, layout, ty::ScalarInt::null(layout.size));\n                                 crate::num::codegen_int_binop(fx, BinOp::Sub, zero, operand)\n                             }\n                             ty::Int(_) => CValue::by_val(fx.bcx.ins().ineg(val), layout),\n@@ -592,6 +592,7 @@ fn codegen_stmt<'tcx>(\n                                 } else {\n                                     discr.val\n                                 };\n+                                let discr = discr.into();\n \n                                 let discr = CValue::const_val(fx, fx.layout_of(to_ty), discr);\n                                 lval.write_cvalue(fx, discr);"}, {"sha": "d362a0273730e53b175b74e759de4346551582e7", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a7970848cf3b525e94357fc9b01053b1ad15bcd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a7970848cf3b525e94357fc9b01053b1ad15bcd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=3a7970848cf3b525e94357fc9b01053b1ad15bcd", "patch": "@@ -186,9 +186,8 @@ pub(crate) fn codegen_const_value<'tcx>(\n             }\n \n             match x {\n-                Scalar::Raw { data, size } => {\n-                    assert_eq!(u64::from(size), layout.size.bytes());\n-                    CValue::const_val(fx, layout, data)\n+                Scalar::Raw(int) => {\n+                    CValue::const_val(fx, layout, int)\n                 }\n                 Scalar::Ptr(ptr) => {\n                     let alloc_kind = fx.tcx.get_global_alloc(ptr.alloc_id);"}, {"sha": "6c9fb8e051b3c23ab88a0c94ea6cdde402881499", "filename": "compiler/rustc_codegen_cranelift/src/discriminant.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a7970848cf3b525e94357fc9b01053b1ad15bcd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a7970848cf3b525e94357fc9b01053b1ad15bcd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs?ref=3a7970848cf3b525e94357fc9b01053b1ad15bcd", "patch": "@@ -30,7 +30,8 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n                 .ty\n                 .discriminant_for_variant(fx.tcx, variant_index)\n                 .unwrap()\n-                .val;\n+                .val\n+                .into();\n             let discr = CValue::const_val(fx, ptr.layout(), to);\n             ptr.write_cvalue(fx, discr);\n         }\n@@ -49,7 +50,7 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n                 let niche = place.place_field(fx, mir::Field::new(tag_field));\n                 let niche_value = variant_index.as_u32() - niche_variants.start().as_u32();\n                 let niche_value = u128::from(niche_value).wrapping_add(niche_start);\n-                let niche_llval = CValue::const_val(fx, niche.layout(), niche_value);\n+                let niche_llval = CValue::const_val(fx, niche.layout(), niche_value.into());\n                 niche.write_cvalue(fx, niche_llval);\n             }\n         }\n@@ -77,7 +78,7 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n                 .ty\n                 .discriminant_for_variant(fx.tcx, *index)\n                 .map_or(u128::from(index.as_u32()), |discr| discr.val);\n-            return CValue::const_val(fx, dest_layout, discr_val);\n+            return CValue::const_val(fx, dest_layout, discr_val.into());\n         }\n         Variants::Multiple {\n             tag,"}, {"sha": "ab16fabd348a540d04a12b0f2bcdfb60dae441c0", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a7970848cf3b525e94357fc9b01053b1ad15bcd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a7970848cf3b525e94357fc9b01053b1ad15bcd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=3a7970848cf3b525e94357fc9b01053b1ad15bcd", "patch": "@@ -1064,7 +1064,8 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n \n             fx.bcx.ins().call_indirect(f_sig, f, &[data]);\n \n-            let ret_val = CValue::const_val(fx, ret.layout(), 0);\n+            let layout = ret.layout();\n+            let ret_val = CValue::const_val(fx, layout, ty::ScalarInt::null(layout.size));\n             ret.write_cvalue(fx, ret_val);\n         };\n "}, {"sha": "a40686b193197ab9f6fb59b59a77761e9bb47121", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a7970848cf3b525e94357fc9b01053b1ad15bcd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a7970848cf3b525e94357fc9b01053b1ad15bcd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=3a7970848cf3b525e94357fc9b01053b1ad15bcd", "patch": "@@ -231,22 +231,24 @@ impl<'tcx> CValue<'tcx> {\n     pub(crate) fn const_val(\n         fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n         layout: TyAndLayout<'tcx>,\n-        const_val: u128,\n+        const_val: ty::ScalarInt,\n     ) -> CValue<'tcx> {\n+        assert_eq!(const_val.size(), layout.size);\n         use cranelift_codegen::ir::immediates::{Ieee32, Ieee64};\n \n         let clif_ty = fx.clif_type(layout.ty).unwrap();\n \n         if let ty::Bool = layout.ty.kind() {\n             assert!(\n-                const_val == 0 || const_val == 1,\n+                const_val == ty::ScalarInt::FALSE || const_val == ty::ScalarInt::TRUE,\n                 \"Invalid bool 0x{:032X}\",\n                 const_val\n             );\n         }\n \n         let val = match layout.ty.kind() {\n             ty::Uint(UintTy::U128) | ty::Int(IntTy::I128) => {\n+                let const_val = const_val.to_bits(layout.size).unwrap();\n                 let lsb = fx.bcx.ins().iconst(types::I64, const_val as u64 as i64);\n                 let msb = fx\n                     .bcx"}, {"sha": "32e0eac00a741d6cd346801f9bd4f426313ee5e1", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a7970848cf3b525e94357fc9b01053b1ad15bcd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a7970848cf3b525e94357fc9b01053b1ad15bcd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=3a7970848cf3b525e94357fc9b01053b1ad15bcd", "patch": "@@ -353,3 +353,17 @@ impl fmt::LowerHex for ScalarInt {\n         write!(f, \"{:01$x}\", { self.data }, self.size as usize * 2)\n     }\n }\n+\n+impl fmt::UpperHex for ScalarInt {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.check_data();\n+        // Format as hex number wide enough to fit any value of the given `size`.\n+        // So data=20, size=1 will be \"0x14\", but with size=4 it'll be \"0x00000014\".\n+        // Using a block `{self.data}` here to force a copy instead of using `self.data`\n+        // directly, because `write!` takes references to its formatting arguments and\n+        // would thus borrow `self.data`. Since `Self`\n+        // is a packed struct, that would create a possibly unaligned reference, which\n+        // is UB on a lot of platforms.\n+        write!(f, \"{:01$X}\", { self.data }, self.size as usize * 2)\n+    }\n+}"}]}