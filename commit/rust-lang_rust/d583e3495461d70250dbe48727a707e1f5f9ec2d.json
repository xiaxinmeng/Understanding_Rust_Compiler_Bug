{"sha": "d583e3495461d70250dbe48727a707e1f5f9ec2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ODNlMzQ5NTQ2MWQ3MDI1MGRiZTQ4NzI3YTcwN2UxZjVmOWVjMmQ=", "commit": {"author": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-13T08:48:39Z"}, "committer": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-13T08:48:39Z"}, "message": "Remove accidentally added adoc file", "tree": {"sha": "516b777d02f17157c9935ad7e7935748d60d590f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/516b777d02f17157c9935ad7e7935748d60d590f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d583e3495461d70250dbe48727a707e1f5f9ec2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d583e3495461d70250dbe48727a707e1f5f9ec2d", "html_url": "https://github.com/rust-lang/rust/commit/d583e3495461d70250dbe48727a707e1f5f9ec2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d583e3495461d70250dbe48727a707e1f5f9ec2d/comments", "author": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "912f38200fb6c8c6cea750a84c04de810992dec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/912f38200fb6c8c6cea750a84c04de810992dec7", "html_url": "https://github.com/rust-lang/rust/commit/912f38200fb6c8c6cea750a84c04de810992dec7"}], "stats": {"total": 298, "additions": 0, "deletions": 298}, "files": [{"sha": "23a071cf1b423c39310a5fd0a5add77ac81b05f4", "filename": "docs/user/generated_features.adoc", "status": "removed", "additions": 0, "deletions": 298, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/912f38200fb6c8c6cea750a84c04de810992dec7/docs%2Fuser%2Fgenerated_features.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/912f38200fb6c8c6cea750a84c04de810992dec7/docs%2Fuser%2Fgenerated_features.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_features.adoc?ref=912f38200fb6c8c6cea750a84c04de810992dec7", "patch": "@@ -1,298 +0,0 @@\n-=== Expand Macro Recursively\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/expand_macro.rs#L15[expand_macro.rs]\n-\n-Shows the full macro expansion of the macro at current cursor.\n-\n-|===\n-| Editor  | Action Name\n-\n-| VS Code | **Rust Analyzer: Expand macro recursively**\n-|===\n-\n-\n-=== Extend Selection\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/extend_selection.rs#L15[extend_selection.rs]\n-\n-Extends the current selection to the encompassing syntactic construct\n-(expression, statement, item, module, etc). It works with multiple cursors.\n-\n-|===\n-| Editor  | Shortcut\n-\n-| VS Code | kbd:[Ctrl+Shift+\u2192]\n-|===\n-\n-\n-=== File Structure\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/display/structure.rs#L17[structure.rs]\n-\n-Provides a tree of the symbols defined in the file. Can be used to\n-\n-* fuzzy search symbol in a file (super useful)\n-* draw breadcrumbs to describe the context around the cursor\n-* draw outline of the file\n-\n-|===\n-| Editor  | Shortcut\n-\n-| VS Code | kbd:[Ctrl+Shift+O]\n-|===\n-\n-\n-=== Go to Definition\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/goto_definition.rs#L18[goto_definition.rs]\n-\n-Navigates to the definition of an identifier.\n-\n-|===\n-| Editor  | Shortcut\n-\n-| VS Code | kbd:[F12]\n-|===\n-\n-\n-=== Go to Implementation\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/goto_implementation.rs#L7[goto_implementation.rs]\n-\n-Navigates to the impl block of structs, enums or traits. Also implemented as a code lens.\n-\n-|===\n-| Editor  | Shortcut\n-\n-| VS Code | kbd:[Ctrl+F12]\n-|===\n-\n-\n-=== Go to Type Definition\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/goto_type_definition.rs#L6[goto_type_definition.rs]\n-\n-Navigates to the type of an identifier.\n-\n-|===\n-| Editor  | Action Name\n-\n-| VS Code | **Go to Type Definition*\n-|===\n-\n-\n-=== Hover\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/hover.rs#L106[hover.rs]\n-\n-Shows additional information, like type of an expression or documentation for definition when \"focusing\" code.\n-Focusing is usually hovering with a mouse, but can also be triggered with a shortcut.\n-\n-\n-=== Inlay Hints\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/inlay_hints.rs#L40[inlay_hints.rs]\n-\n-rust-analyzer shows additional information inline with the source code.\n-Editors usually render this using read-only virtual text snippets interspersed with code.\n-\n-rust-analyzer shows hits for\n-\n-* types of local variables\n-* names of function arguments\n-* types of chained expressions\n-\n-**Note:** VS Code does not have native support for inlay hints https://github.com/microsoft/vscode/issues/16221[yet] and the hints are implemented using decorations.\n-This approach has limitations, the caret movement and bracket highlighting near the edges of the hint may be weird:\n-https://github.com/rust-analyzer/rust-analyzer/issues/1623[1], https://github.com/rust-analyzer/rust-analyzer/issues/3453[2].\n-\n-|===\n-| Editor  | Action Name\n-\n-| VS Code | **Rust Analyzer: Toggle inlay hints*\n-|===\n-\n-\n-=== Join Lines\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/join_lines.rs#L12[join_lines.rs]\n-\n-Join selected lines into one, smartly fixing up whitespace, trailing commas, and braces.\n-\n-|===\n-| Editor  | Action Name\n-\n-| VS Code | **Rust Analyzer: Join lines**\n-|===\n-\n-\n-=== Magic Completions\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/completion.rs#L39[completion.rs]\n-\n-In addition to usual reference completion, rust-analyzer provides some \u2728magic\u2728\n-completions as well:\n-\n-Keywords like `if`, `else` `while`, `loop` are completed with braces, and cursor\n-is placed at the appropriate position. Even though `if` is easy to type, you\n-still want to complete it, to get ` { }` for free! `return` is inserted with a\n-space or `;` depending on the return type of the function.\n-\n-When completing a function call, `()` are automatically inserted. If a function\n-takes arguments, the cursor is positioned inside the parenthesis.\n-\n-There are postfix completions, which can be triggered by typing something like\n-`foo().if`. The word after `.` determines postfix completion. Possible variants are:\n-\n-- `expr.if` -> `if expr {}` or `if let ... {}` for `Option` or `Result`\n-- `expr.match` -> `match expr {}`\n-- `expr.while` -> `while expr {}` or `while let ... {}` for `Option` or `Result`\n-- `expr.ref` -> `&expr`\n-- `expr.refm` -> `&mut expr`\n-- `expr.not` -> `!expr`\n-- `expr.dbg` -> `dbg!(expr)`\n-\n-There also snippet completions:\n-\n-.Expressions\n-- `pd` -> `println!(\"{:?}\")`\n-- `ppd` -> `println!(\"{:#?}\")`\n-\n-.Items\n-- `tfn` -> `#[test] fn f(){}`\n-- `tmod` ->\n-```rust\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    #[test]\n-    fn test_fn() {}\n-}\n-```\n-\n-\n-=== Matching Brace\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/matching_brace.rs#L3[matching_brace.rs]\n-\n-If the cursor is on any brace (`<>(){}[]`) which is a part of a brace-pair,\n-moves cursor to the matching brace. It uses the actual parser to determine\n-braces, so it won't confuse generics with comparisons.\n-\n-|===\n-| Editor  | Action Name\n-\n-| VS Code | **Rust Analyzer: Find matching brace**\n-|===\n-\n-\n-=== On Typing Assists\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/typing.rs#L37[typing.rs]\n-\n-Some features trigger on typing certain characters:\n-\n-- typing `let =` tries to smartly add `;` if `=` is followed by an existing expression\n-- Enter inside comments automatically inserts `///`\n-- typing `.` in a chain method call auto-indents\n-\n-\n-=== Parent Module\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/parent_module.rs#L12[parent_module.rs]\n-\n-Navigates to the parent module of the current module.\n-\n-|===\n-| Editor  | Action Name\n-\n-| VS Code | **Rust Analyzer: Locate parent module**\n-|===\n-\n-\n-=== Run\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/runnables.rs#L81[runnables.rs]\n-\n-Shows a popup suggesting to run a test/benchmark/binary **at the current cursor\n-location**. Super useful for repeatedly running just a single test. Do bind this\n-to a shortcut!\n-\n-|===\n-| Editor  | Action Name\n-\n-| VS Code | **Rust Analyzer: Run**\n-|===\n-\n-\n-=== Semantic Syntax Highlighting\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/syntax_highlighting.rs#L34[syntax_highlighting.rs]\n-\n-rust-analyzer highlights the code semantically.\n-For example, `bar` in `foo::Bar` might be colored differently depending on whether `Bar` is an enum or a trait.\n-rust-analyzer does not specify colors directly, instead it assigns tag (like `struct`) and a set of modifiers (like `declaration`) to each token.\n-It's up to the client to map those to specific colors.\n-\n-The general rule is that a reference to an entity gets colored the same way as the entity itself.\n-We also give special modifier for `mut` and `&mut` local variables.\n-\n-\n-=== Show Syntax Tree\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/syntax_tree.rs#L9[syntax_tree.rs]\n-\n-Shows the parse tree of the current file. It exists mostly for debugging\n-rust-analyzer itself.\n-\n-|===\n-| Editor  | Action Name\n-\n-| VS Code | **Rust Analyzer: Show Syntax Tree**\n-|===\n-\n-\n-=== Status\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/status.rs#L27[status.rs]\n-\n-Shows internal statistic about memory usage of rust-analyzer.\n-\n-|===\n-| Editor  | Action Name\n-\n-| VS Code | **Rust Analyzer: Status**\n-|===\n-\n-\n-=== Structural Seach and Replace\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/ssr.rs#L26[ssr.rs]\n-\n-Search and replace with named wildcards that will match any expression.\n-The syntax for a structural search replace command is `<search_pattern> ==>> <replace_pattern>`.\n-A `$<name>:expr` placeholder in the search pattern will match any expression and `$<name>` will reference it in the replacement.\n-Available via the command `rust-analyzer.ssr`.\n-\n-```rust\n-// Using structural search replace command [foo($a:expr, $b:expr) ==>> ($a).foo($b)]\n-\n-// BEFORE\n-String::from(foo(y + 5, z))\n-\n-// AFTER\n-String::from((y + 5).foo(z))\n-```\n-\n-|===\n-| Editor  | Action Name\n-\n-| VS Code | **Rust Analyzer: Structural Search Replace**\n-|===\n-\n-\n-=== Workspace Symbol\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide_db/src/symbol_index.rs#L122[symbol_index.rs]\n-\n-Uses fuzzy-search to find types, modules and functions by name across your\n-project and dependencies. This is **the** most useful feature, which improves code\n-navigation tremendously. It mostly works on top of the built-in LSP\n-functionality, however `#` and `*` symbols can be used to narrow down the\n-search. Specifically,\n-\n-- `Foo` searches for `Foo` type in the current workspace\n-- `foo#` searches for `foo` function in the current workspace\n-- `Foo*` searches for `Foo` type among dependencies, including `stdlib`\n-- `foo#*` searches for `foo` function among dependencies\n-\n-That is, `#` switches from \"types\" to all symbols, `*` switches from the current\n-workspace to dependencies.\n-\n-|===\n-| Editor  | Shortcut\n-\n-| VS Code | kbd:[Ctrl+T]\n-|==="}]}