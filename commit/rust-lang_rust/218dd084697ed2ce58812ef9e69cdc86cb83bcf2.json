{"sha": "218dd084697ed2ce58812ef9e69cdc86cb83bcf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOGRkMDg0Njk3ZWQyY2U1ODgxMmVmOWU2OWNkYzg2Y2I4M2JjZjI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-30T20:54:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-01T02:51:29Z"}, "message": "rt: Introduce rust_sched_reaper\n\nThis just moves the responsibility for joining with scheduler threads\noff to a worker thread. This will be needed when we allow tasks to be\nscheduled on the main thread.", "tree": {"sha": "171eaf77a6e1d8c4af168bcb17d2ba02d9f41f83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/171eaf77a6e1d8c4af168bcb17d2ba02d9f41f83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/218dd084697ed2ce58812ef9e69cdc86cb83bcf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/218dd084697ed2ce58812ef9e69cdc86cb83bcf2", "html_url": "https://github.com/rust-lang/rust/commit/218dd084697ed2ce58812ef9e69cdc86cb83bcf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/218dd084697ed2ce58812ef9e69cdc86cb83bcf2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "771c1be6a64225d416ad99a860f1c8d34ce3a18b", "url": "https://api.github.com/repos/rust-lang/rust/commits/771c1be6a64225d416ad99a860f1c8d34ce3a18b", "html_url": "https://github.com/rust-lang/rust/commit/771c1be6a64225d416ad99a860f1c8d34ce3a18b"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "5e01c158d7d153e18ced35f90b2b5d9a651e4659", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/218dd084697ed2ce58812ef9e69cdc86cb83bcf2/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/218dd084697ed2ce58812ef9e69cdc86cb83bcf2/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=218dd084697ed2ce58812ef9e69cdc86cb83bcf2", "patch": "@@ -53,6 +53,7 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_sched_loop.cpp \\\n               rt/rust_sched_launcher.cpp \\\n               rt/rust_scheduler.cpp \\\n+              rt/rust_sched_reaper.cpp \\\n               rt/rust_task.cpp \\\n               rt/rust_stack.cpp \\\n               rt/rust_port.cpp \\"}, {"sha": "00657f8ec0aadd9e58c3660869b3dce23e92cce5", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/218dd084697ed2ce58812ef9e69cdc86cb83bcf2/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/218dd084697ed2ce58812ef9e69cdc86cb83bcf2/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=218dd084697ed2ce58812ef9e69cdc86cb83bcf2", "patch": "@@ -93,7 +93,7 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     root_task->start((spawn_fn)main_fn, NULL, args->args);\n     root_task = NULL;\n \n-    int ret = kernel->wait_for_schedulers();\n+    int ret = kernel->wait_for_exit();\n     delete args;\n     delete kernel;\n     delete srv;"}, {"sha": "0c7ec5c64b667a5329a8d291f80d23077c87a6b0", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/218dd084697ed2ce58812ef9e69cdc86cb83bcf2/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/218dd084697ed2ce58812ef9e69cdc86cb83bcf2/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=218dd084697ed2ce58812ef9e69cdc86cb83bcf2", "patch": "@@ -17,6 +17,7 @@ rust_kernel::rust_kernel(rust_srv *srv) :\n     max_port_id(0),\n     rval(0),\n     max_sched_id(0),\n+    sched_reaper(this),\n     env(srv->env)\n {\n }\n@@ -62,13 +63,19 @@ rust_kernel::create_scheduler(size_t num_threads) {\n     rust_scheduler *sched;\n     {\n         scoped_lock with(sched_lock);\n+        // If this is the first scheduler then we need to launch\n+        // the scheduler reaper.\n+        bool start_reaper = sched_table.empty();\n         id = max_sched_id++;\n         K(srv, id != INTPTR_MAX, \"Hit the maximum scheduler id\");\n         sched = new (this, \"rust_scheduler\")\n             rust_scheduler(this, srv, num_threads, id);\n         bool is_new = sched_table\n             .insert(std::pair<rust_sched_id, rust_scheduler*>(id, sched)).second;\n         A(this, is_new, \"Reusing a sched id?\");\n+        if (start_reaper) {\n+            sched_reaper.start();\n+        }\n     }\n     sched->start_task_threads();\n     return id;\n@@ -96,12 +103,12 @@ rust_kernel::release_scheduler_id(rust_sched_id id) {\n }\n \n /*\n-Called on the main thread to wait for the kernel to exit. This function is\n-also used to join on every terminating scheduler thread, so that we can be\n-sure they have completely exited before the process exits.  If we don't join\n-them then we can see valgrind errors due to un-freed pthread memory.\n+Called by rust_sched_reaper to join every every terminating scheduler thread,\n+so that we can be sure they have completely exited before the process exits.\n+If we don't join them then we can see valgrind errors due to un-freed pthread\n+memory.\n  */\n-int\n+void\n rust_kernel::wait_for_schedulers()\n {\n     scoped_lock with(sched_lock);\n@@ -120,6 +127,12 @@ rust_kernel::wait_for_schedulers()\n             sched_lock.wait();\n         }\n     }\n+}\n+\n+/* Called on the main thread to wait for the kernel to exit */\n+int\n+rust_kernel::wait_for_exit() {\n+    sched_reaper.join();\n     return rval;\n }\n "}, {"sha": "78548917ee5e5cf88e0ffbdddf078e1f378d1f31", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/218dd084697ed2ce58812ef9e69cdc86cb83bcf2/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/218dd084697ed2ce58812ef9e69cdc86cb83bcf2/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=218dd084697ed2ce58812ef9e69cdc86cb83bcf2", "patch": "@@ -6,6 +6,7 @@\n #include <vector>\n #include \"memory_region.h\"\n #include \"rust_log.h\"\n+#include \"rust_sched_reaper.h\"\n \n struct rust_task_thread;\n class rust_scheduler;\n@@ -46,6 +47,8 @@ class rust_kernel {\n     // A list of scheduler ids that are ready to exit\n     std::vector<rust_sched_id> join_list;\n \n+    rust_sched_reaper sched_reaper;\n+\n public:\n \n     struct rust_env *env;\n@@ -66,7 +69,8 @@ class rust_kernel {\n     rust_scheduler* get_scheduler_by_id(rust_sched_id id);\n     // Called by a scheduler to indicate that it is terminating\n     void release_scheduler_id(rust_sched_id id);\n-    int wait_for_schedulers();\n+    void wait_for_schedulers();\n+    int wait_for_exit();\n \n #ifdef __WIN32__\n     void win32_require(LPCTSTR fn, BOOL ok);"}, {"sha": "f2897859f231c3c29e2a3c6dddbcc81b51049237", "filename": "src/rt/rust_sched_reaper.cpp", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/218dd084697ed2ce58812ef9e69cdc86cb83bcf2/src%2Frt%2Frust_sched_reaper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/218dd084697ed2ce58812ef9e69cdc86cb83bcf2/src%2Frt%2Frust_sched_reaper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_reaper.cpp?ref=218dd084697ed2ce58812ef9e69cdc86cb83bcf2", "patch": "@@ -0,0 +1,15 @@\n+#include \"rust_internal.h\"\n+#include \"rust_kernel.h\"\n+#include \"rust_sched_reaper.h\"\n+\n+// NB: We're using a very small stack here\n+const size_t STACK_SIZE = 1024*20;\n+\n+rust_sched_reaper::rust_sched_reaper(rust_kernel *kernel)\n+    : rust_thread(STACK_SIZE), kernel(kernel) {\n+}\n+\n+void\n+rust_sched_reaper::run() {\n+    kernel->wait_for_schedulers();\n+}"}, {"sha": "6b43038312d4f53fc763bccf80e77bdf516cca64", "filename": "src/rt/rust_sched_reaper.h", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/218dd084697ed2ce58812ef9e69cdc86cb83bcf2/src%2Frt%2Frust_sched_reaper.h", "raw_url": "https://github.com/rust-lang/rust/raw/218dd084697ed2ce58812ef9e69cdc86cb83bcf2/src%2Frt%2Frust_sched_reaper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_reaper.h?ref=218dd084697ed2ce58812ef9e69cdc86cb83bcf2", "patch": "@@ -0,0 +1,17 @@\n+#ifndef RUST_SCHED_REAPER_H\n+#define RUST_SCHED_REAPER_H\n+\n+#include \"sync/rust_thread.h\"\n+\n+class rust_kernel;\n+\n+/* Responsible for joining with rust_schedulers */\n+class rust_sched_reaper : public rust_thread {\n+private:\n+    rust_kernel *kernel;\n+public:\n+    rust_sched_reaper(rust_kernel *kernel);\n+    virtual void run();\n+};\n+\n+#endif /* RUST_SCHED_REAPER_H */"}]}