{"sha": "83771c524225176616db45ebe67045a6f89b7117", "node_id": "C_kwDOAAsO6NoAKDgzNzcxYzUyNDIyNTE3NjYxNmRiNDVlYmU2NzA0NWE2Zjg5YjcxMTc", "commit": {"author": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-26T23:31:01Z"}, "committer": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-26T23:34:53Z"}, "message": "Fix `needless_borrow` false positive", "tree": {"sha": "f63a118a6f9ae85d5ccab9ce244277a1cbceb634", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f63a118a6f9ae85d5ccab9ce244277a1cbceb634"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83771c524225176616db45ebe67045a6f89b7117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83771c524225176616db45ebe67045a6f89b7117", "html_url": "https://github.com/rust-lang/rust/commit/83771c524225176616db45ebe67045a6f89b7117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83771c524225176616db45ebe67045a6f89b7117/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70187c7d112414e40f877aed9787258e5770467d", "url": "https://api.github.com/repos/rust-lang/rust/commits/70187c7d112414e40f877aed9787258e5770467d", "html_url": "https://github.com/rust-lang/rust/commit/70187c7d112414e40f877aed9787258e5770467d"}], "stats": {"total": 93, "additions": 90, "deletions": 3}, "files": [{"sha": "7e2e32a20d4fc3d2d074fb6e57a1a8d5d591866d", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/83771c524225176616db45ebe67045a6f89b7117/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83771c524225176616db45ebe67045a6f89b7117/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=83771c524225176616db45ebe67045a6f89b7117", "patch": "@@ -1049,7 +1049,7 @@ fn ty_contains_infer(ty: &hir::Ty<'_>) -> bool {\n // If the conditions are met, returns `Some(Position::ImplArg(..))`; otherwise, returns `None`.\n //   The \"is copyable\" condition is to avoid the case where removing the `&` means `e` would have to\n // be moved, but it cannot be.\n-#[expect(clippy::too_many_arguments)]\n+#[expect(clippy::too_many_arguments, clippy::too_many_lines)]\n fn needless_borrow_impl_arg_position<'tcx>(\n     cx: &LateContext<'tcx>,\n     possible_borrowers: &mut Vec<(LocalDefId, PossibleBorrowerMap<'tcx, 'tcx>)>,\n@@ -1092,7 +1092,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n         .iter()\n         .filter_map(|predicate| {\n             if let PredicateKind::Trait(trait_predicate) = predicate.kind().skip_binder()\n-                && trait_predicate.trait_ref.self_ty() == param_ty.to_ty(cx.tcx)\n+                && trait_predicate.self_ty() == param_ty.to_ty(cx.tcx)\n             {\n                 Some(trait_predicate.trait_ref.def_id)\n             } else {\n@@ -1111,6 +1111,16 @@ fn needless_borrow_impl_arg_position<'tcx>(\n         return Position::Other(precedence);\n     }\n \n+    // See:\n+    // - https://github.com/rust-lang/rust-clippy/pull/9674#issuecomment-1289294201\n+    // - https://github.com/rust-lang/rust-clippy/pull/9674#issuecomment-1292225232\n+    if projection_predicates\n+        .iter()\n+        .any(|projection_predicate| is_mixed_projection_predicate(cx, callee_def_id, projection_predicate))\n+    {\n+        return Position::Other(precedence);\n+    }\n+\n     // `substs_with_referent_ty` can be constructed outside of `check_referent` because the same\n     // elements are modified each time `check_referent` is called.\n     let mut substs_with_referent_ty = substs_with_expr_ty.to_vec();\n@@ -1190,8 +1200,39 @@ fn has_ref_mut_self_method(cx: &LateContext<'_>, trait_def_id: DefId) -> bool {\n         })\n }\n \n-fn referent_used_exactly_once<'tcx>(\n+fn is_mixed_projection_predicate<'tcx>(\n     cx: &LateContext<'tcx>,\n+    callee_def_id: DefId,\n+    projection_predicate: &ProjectionPredicate<'tcx>,\n+) -> bool {\n+    let generics = cx.tcx.generics_of(callee_def_id);\n+    // The predicate requires the projected type to equal a type parameter from the parent context.\n+    if let Some(term_ty) = projection_predicate.term.ty()\n+        && let ty::Param(term_param_ty) = term_ty.kind()\n+        && (term_param_ty.index as usize) < generics.parent_count\n+    {\n+        // The inner-most self type is a type parameter from the current function.\n+        let mut projection_ty = projection_predicate.projection_ty;\n+        loop {\n+            match projection_ty.self_ty().kind() {\n+                ty::Projection(inner_projection_ty) => {\n+                    projection_ty = *inner_projection_ty;\n+                }\n+                ty::Param(param_ty) => {\n+                    return (param_ty.index as usize) >= generics.parent_count;\n+                }\n+                _ => {\n+                    return false;\n+                }\n+            }\n+        }\n+    } else {\n+        false\n+    }\n+}\n+\n+fn referent_used_exactly_once<'a, 'tcx>(\n+    cx: &'a LateContext<'tcx>,\n     possible_borrowers: &mut Vec<(LocalDefId, PossibleBorrowerMap<'tcx, 'tcx>)>,\n     reference: &Expr<'tcx>,\n ) -> bool {"}, {"sha": "57a682d62c0c0f30c0836eea62f2e6cab31b15e9", "filename": "tests/ui/needless_borrow.fixed", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/83771c524225176616db45ebe67045a6f89b7117/tests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/83771c524225176616db45ebe67045a6f89b7117/tests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.fixed?ref=83771c524225176616db45ebe67045a6f89b7117", "patch": "@@ -385,3 +385,26 @@ mod used_more_than_once {\n     fn use_x(_: impl AsRef<str>) {}\n     fn use_x_again(_: impl AsRef<str>) {}\n }\n+\n+// https://github.com/rust-lang/rust-clippy/issues/9111#issuecomment-1277114280\n+#[allow(dead_code)]\n+mod issue_9111 {\n+    struct A;\n+\n+    impl Extend<u8> for A {\n+        fn extend<T: IntoIterator<Item = u8>>(&mut self, _: T) {\n+            unimplemented!()\n+        }\n+    }\n+\n+    impl<'a> Extend<&'a u8> for A {\n+        fn extend<T: IntoIterator<Item = &'a u8>>(&mut self, _: T) {\n+            unimplemented!()\n+        }\n+    }\n+\n+    fn main() {\n+        let mut a = A;\n+        a.extend(&[]); // vs a.extend([]);\n+    }\n+}"}, {"sha": "0d325b48ab8109822c735bf10a2c07a1d14f7a2a", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/83771c524225176616db45ebe67045a6f89b7117/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83771c524225176616db45ebe67045a6f89b7117/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=83771c524225176616db45ebe67045a6f89b7117", "patch": "@@ -385,3 +385,26 @@ mod used_more_than_once {\n     fn use_x(_: impl AsRef<str>) {}\n     fn use_x_again(_: impl AsRef<str>) {}\n }\n+\n+// https://github.com/rust-lang/rust-clippy/issues/9111#issuecomment-1277114280\n+#[allow(dead_code)]\n+mod issue_9111 {\n+    struct A;\n+\n+    impl Extend<u8> for A {\n+        fn extend<T: IntoIterator<Item = u8>>(&mut self, _: T) {\n+            unimplemented!()\n+        }\n+    }\n+\n+    impl<'a> Extend<&'a u8> for A {\n+        fn extend<T: IntoIterator<Item = &'a u8>>(&mut self, _: T) {\n+            unimplemented!()\n+        }\n+    }\n+\n+    fn main() {\n+        let mut a = A;\n+        a.extend(&[]); // vs a.extend([]);\n+    }\n+}"}]}