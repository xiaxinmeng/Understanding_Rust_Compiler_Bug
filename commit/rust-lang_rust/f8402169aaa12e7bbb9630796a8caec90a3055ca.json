{"sha": "f8402169aaa12e7bbb9630796a8caec90a3055ca", "node_id": "C_kwDOAAsO6NoAKGY4NDAyMTY5YWFhMTJlN2JiYjk2MzA3OTZhOGNhZWM5MGEzMDU1Y2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-16T11:35:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-16T11:35:37Z"}, "message": "Auto merge of #91996 - matthiaskrgr:rollup-8pdt8x7, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #91901 (Remove `in_band_lifetimes` from `rustc_symbol_mangling`)\n - #91904 (Remove `in_band_lifetimes` from `rustc_trait_selection`)\n - #91951 (update stdarch)\n - #91958 (Apply rust-logo class only on default logo)\n - #91972 (link to pref_align_of tracking issue)\n - #91986 (Bump compiler-builtins to 0.1.66)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3c203c2ebaf0f11cb6cacfe15af322bdc4735119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c203c2ebaf0f11cb6cacfe15af322bdc4735119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8402169aaa12e7bbb9630796a8caec90a3055ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8402169aaa12e7bbb9630796a8caec90a3055ca", "html_url": "https://github.com/rust-lang/rust/commit/f8402169aaa12e7bbb9630796a8caec90a3055ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8402169aaa12e7bbb9630796a8caec90a3055ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a090c8659c3be0cbc7dc93c4b2c11a9cdbf8b980", "url": "https://api.github.com/repos/rust-lang/rust/commits/a090c8659c3be0cbc7dc93c4b2c11a9cdbf8b980", "html_url": "https://github.com/rust-lang/rust/commit/a090c8659c3be0cbc7dc93c4b2c11a9cdbf8b980"}, {"sha": "7391962e31b712d2fb15f5424309b58b8181798d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7391962e31b712d2fb15f5424309b58b8181798d", "html_url": "https://github.com/rust-lang/rust/commit/7391962e31b712d2fb15f5424309b58b8181798d"}], "stats": {"total": 201, "additions": 110, "deletions": 91}, "files": [{"sha": "980b362c0509aecb56258afbd23b3380c66eb5d2", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -680,9 +680,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.65\"\n+version = \"0.1.66\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ed37ea958309f2451e1cea7fd2b37aa56b1894c9a9fbdbbe6a194f7b78f0362d\"\n+checksum = \"191424db7756bbed2c4996959a0fbda94388abcf4f5a2728a8af17481ad9c4f7\"\n dependencies = [\n  \"cc\",\n  \"rustc-std-workspace-core\","}, {"sha": "cdea84a8d60f7ae54a43dae4c24abdbef6972fae", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -13,7 +13,7 @@ use tracing::debug;\n use std::fmt::{self, Write};\n use std::mem::{self, discriminant};\n \n-pub(super) fn mangle(\n+pub(super) fn mangle<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: Instance<'tcx>,\n     instantiating_crate: Option<CrateNum>,\n@@ -199,7 +199,7 @@ struct SymbolPrinter<'tcx> {\n // `PrettyPrinter` aka pretty printing of e.g. types in paths,\n // symbol names should have their own printing machinery.\n \n-impl Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n+impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n     type Error = fmt::Error;\n \n     type Path = Self;\n@@ -345,7 +345,7 @@ impl Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n     }\n }\n \n-impl PrettyPrinter<'tcx> for &mut SymbolPrinter<'tcx> {\n+impl<'tcx> PrettyPrinter<'tcx> for &mut SymbolPrinter<'tcx> {\n     fn region_should_not_be_omitted(&self, _region: ty::Region<'_>) -> bool {\n         false\n     }"}, {"sha": "65b5852bc39839caf06fa128dce5533222d383bd", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -90,7 +90,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(never_type)]\n #![feature(nll)]\n-#![feature(in_band_lifetimes)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]\n@@ -116,7 +115,7 @@ pub mod test;\n /// This function computes the symbol name for the given `instance` and the\n /// given instantiating crate. That is, if you know that instance X is\n /// instantiated in crate Y, this is the symbol name this instance would have.\n-pub fn symbol_name_for_instance_in_crate(\n+pub fn symbol_name_for_instance_in_crate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: Instance<'tcx>,\n     instantiating_crate: CrateNum,\n@@ -131,7 +130,7 @@ pub fn provide(providers: &mut Providers) {\n // The `symbol_name` query provides the symbol name for calling a given\n // instance from the local crate. In particular, it will also look up the\n // correct symbol name of instances from upstream crates.\n-fn symbol_name_provider(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::SymbolName<'tcx> {\n+fn symbol_name_provider<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::SymbolName<'tcx> {\n     let symbol_name = compute_symbol_name(tcx, instance, || {\n         // This closure determines the instantiating crate for instances that\n         // need an instantiating-crate-suffix for their symbol name, in order\n@@ -151,14 +150,14 @@ fn symbol_name_provider(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::Symb\n }\n \n /// This function computes the typeid for the given function ABI.\n-pub fn typeid_for_fnabi(tcx: TyCtxt<'tcx>, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> String {\n+pub fn typeid_for_fnabi<'tcx>(tcx: TyCtxt<'tcx>, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> String {\n     v0::mangle_typeid_for_fnabi(tcx, fn_abi)\n }\n \n /// Computes the symbol name for the given instance. This function will call\n /// `compute_instantiating_crate` if it needs to factor the instantiating crate\n /// into the symbol name.\n-fn compute_symbol_name(\n+fn compute_symbol_name<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: Instance<'tcx>,\n     compute_instantiating_crate: impl FnOnce() -> CrateNum,"}, {"sha": "700765a351ce18f17e33b3f8d63de3d1da76d159", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -31,7 +31,7 @@ struct SymbolNamesTest<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl SymbolNamesTest<'tcx> {\n+impl SymbolNamesTest<'_> {\n     fn process_attrs(&mut self, def_id: LocalDefId) {\n         let tcx = self.tcx;\n         for attr in tcx.get_attrs(def_id.to_def_id()).iter() {\n@@ -59,7 +59,7 @@ impl SymbolNamesTest<'tcx> {\n     }\n }\n \n-impl hir::itemlikevisit::ItemLikeVisitor<'tcx> for SymbolNamesTest<'tcx> {\n+impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for SymbolNamesTest<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         self.process_attrs(item.def_id);\n     }"}, {"sha": "167ff758f34801b4429f212e53684976c2bc35f4", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -17,7 +17,7 @@ use std::fmt::Write;\n use std::iter;\n use std::ops::Range;\n \n-pub(super) fn mangle(\n+pub(super) fn mangle<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: Instance<'tcx>,\n     instantiating_crate: Option<CrateNum>,\n@@ -56,7 +56,7 @@ pub(super) fn mangle(\n     std::mem::take(&mut cx.out)\n }\n \n-pub(super) fn mangle_typeid_for_fnabi(\n+pub(super) fn mangle_typeid_for_fnabi<'tcx>(\n     _tcx: TyCtxt<'tcx>,\n     fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n ) -> String {\n@@ -118,7 +118,7 @@ struct SymbolMangler<'tcx> {\n     consts: FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n }\n \n-impl SymbolMangler<'tcx> {\n+impl<'tcx> SymbolMangler<'tcx> {\n     fn push(&mut self, s: &str) {\n         self.out.push_str(s);\n     }\n@@ -250,7 +250,7 @@ impl SymbolMangler<'tcx> {\n     }\n }\n \n-impl Printer<'tcx> for &mut SymbolMangler<'tcx> {\n+impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n     type Error = !;\n \n     type Path = Self;"}, {"sha": "2f9f4b071ec065e0ff9d486e28449fa7cb635226", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -16,7 +16,6 @@\n #![feature(drain_filter)]\n #![feature(derive_default_enum)]\n #![feature(hash_drain_filter)]\n-#![feature(in_band_lifetimes)]\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "ea0ac6318bc9a71ff736d9d986b1825010a89eb6", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -97,7 +97,7 @@ struct ReverseMapper<'tcx> {\n     span: Span,\n }\n \n-impl ReverseMapper<'tcx> {\n+impl<'tcx> ReverseMapper<'tcx> {\n     fn new(\n         tcx: TyCtxt<'tcx>,\n         tainted_by_errors: bool,\n@@ -134,7 +134,7 @@ impl ReverseMapper<'tcx> {\n     }\n }\n \n-impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n+impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -338,7 +338,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n /// Requires that trait definitions have been processed so that we can\n /// elaborate predicates and walk supertraits.\n #[instrument(skip(tcx, predicates), level = \"debug\")]\n-crate fn required_region_bounds(\n+crate fn required_region_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     erased_self_ty: Ty<'tcx>,\n     predicates: impl Iterator<Item = ty::Predicate<'tcx>>,"}, {"sha": "53ff911ea0cdacfc0e767ffe8db77999f394d198", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -219,7 +219,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n     }\n }\n \n-impl AutoTraitFinder<'tcx> {\n+impl<'tcx> AutoTraitFinder<'tcx> {\n     /// The core logic responsible for computing the bounds for our synthesized impl.\n     ///\n     /// To calculate the bounds, we call `SelectionContext.select` in a loop. Like"}, {"sha": "34fc4ca8fead7d6ecaf9ad7cda1caa3b2e2880e0", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -16,7 +16,7 @@ pub struct FulfillmentContext<'tcx> {\n     relationships: FxHashMap<ty::TyVid, ty::FoundRelationships>,\n }\n \n-impl FulfillmentContext<'tcx> {\n+impl FulfillmentContext<'_> {\n     crate fn new() -> Self {\n         FulfillmentContext {\n             obligations: FxIndexSet::default(),\n@@ -25,7 +25,7 @@ impl FulfillmentContext<'tcx> {\n     }\n }\n \n-impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n+impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     fn normalize_projection_type(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,"}, {"sha": "848aba7c912896dead92698357967eca538b9080", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -107,7 +107,7 @@ pub fn codegen_fulfill_obligation<'tcx>(\n /// type inference variables that appear in `result` to be\n /// unified, and hence we need to process those obligations to get\n /// the complete picture of the type.\n-fn drain_fulfillment_cx_or_panic<T>(\n+fn drain_fulfillment_cx_or_panic<'tcx, T>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     fulfill_cx: &mut FulfillmentContext<'tcx>,\n     result: T,"}, {"sha": "290426aa8278704b7b886fd299317e5c74a21eb6", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -154,18 +154,24 @@ fn overlap<'cx, 'tcx>(\n     })\n }\n \n-fn overlap_within_probe(\n+fn overlap_within_probe<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     skip_leak_check: SkipLeakCheck,\n     a_def_id: DefId,\n     b_def_id: DefId,\n     snapshot: &CombinedSnapshot<'_, 'tcx>,\n ) -> Option<OverlapResult<'tcx>> {\n-    fn loose_check(selcx: &mut SelectionContext<'cx, 'tcx>, o: &PredicateObligation<'tcx>) -> bool {\n+    fn loose_check<'cx, 'tcx>(\n+        selcx: &mut SelectionContext<'cx, 'tcx>,\n+        o: &PredicateObligation<'tcx>,\n+    ) -> bool {\n         !selcx.predicate_may_hold_fatal(o)\n     }\n \n-    fn strict_check(selcx: &SelectionContext<'cx, 'tcx>, o: &PredicateObligation<'tcx>) -> bool {\n+    fn strict_check<'cx, 'tcx>(\n+        selcx: &SelectionContext<'cx, 'tcx>,\n+        o: &PredicateObligation<'tcx>,\n+    ) -> bool {\n         let infcx = selcx.infcx();\n         let tcx = infcx.tcx;\n         o.flip_polarity(tcx)\n@@ -518,7 +524,11 @@ fn orphan_check_trait_ref<'tcx>(\n /// - for `Foo<u32>`, where `Foo` is a local type, this returns `[]`.\n /// - `&mut u32` returns `[u32]`, as `&mut` is a fundamental type, similar to `Box`.\n /// - `Box<Foo<u32>>` returns `[]`, as `Box` is a fundamental type and `Foo` is local.\n-fn contained_non_local_types(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, in_crate: InCrate) -> Vec<Ty<'tcx>> {\n+fn contained_non_local_types<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+    in_crate: InCrate,\n+) -> Vec<Ty<'tcx>> {\n     if ty_is_local_constructor(ty, in_crate) {\n         Vec::new()\n     } else {\n@@ -534,7 +544,7 @@ fn contained_non_local_types(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, in_crate: InCrate)\n /// For `#[fundamental]` ADTs and `&T` / `&mut T`, returns `Some` with the\n /// type parameters of the ADT, or `T`, respectively. For non-fundamental\n /// types, returns `None`.\n-fn fundamental_ty_inner_tys(\n+fn fundamental_ty_inner_tys<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n ) -> Option<impl Iterator<Item = Ty<'tcx>>> {"}, {"sha": "8833805d35c7d57a6062792767a231cf9fd8083d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -1063,7 +1063,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     }\n }\n \n-trait InferCtxtPrivExt<'tcx> {\n+trait InferCtxtPrivExt<'hir, 'tcx> {\n     // returns if `cond` not occurring implies that `error` does not occur - i.e., that\n     // `error` occurring implies that `cond` occurs.\n     fn error_implies(&self, cond: ty::Predicate<'tcx>, error: ty::Predicate<'tcx>) -> bool;\n@@ -1174,7 +1174,7 @@ trait InferCtxtPrivExt<'tcx> {\n     ) -> bool;\n }\n \n-impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n+impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n     // returns if `cond` not occurring implies that `error` does not occur - i.e., that\n     // `error` occurring implies that `cond` occurs.\n     fn error_implies(&self, cond: ty::Predicate<'tcx>, error: ty::Predicate<'tcx>) -> bool {\n@@ -2042,7 +2042,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         self.maybe_suggest_unsized_generics(err, span, node);\n     }\n \n-    fn maybe_suggest_unsized_generics(\n+    fn maybe_suggest_unsized_generics<'hir>(\n         &self,\n         err: &mut DiagnosticBuilder<'tcx>,\n         span: Span,\n@@ -2109,7 +2109,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         );\n     }\n \n-    fn maybe_indirection_for_unsized(\n+    fn maybe_indirection_for_unsized<'hir>(\n         &self,\n         err: &mut DiagnosticBuilder<'tcx>,\n         item: &'hir Item<'hir>,\n@@ -2223,7 +2223,7 @@ impl<'v> Visitor<'v> for FindTypeParam {\n }\n \n pub fn recursive_type_with_infinite_size_error(\n-    tcx: TyCtxt<'tcx>,\n+    tcx: TyCtxt<'_>,\n     type_def_id: DefId,\n     spans: Vec<Span>,\n ) {"}, {"sha": "9c10823a844ded5121be7f3c8ec9e5fddf840ddb", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -198,7 +198,7 @@ fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, St\n /// Type parameter needs more bounds. The trivial case is `T` `where T: Bound`, but\n /// it can also be an `impl Trait` param that needs to be decomposed to a type\n /// param for cleaner code.\n-fn suggest_restriction(\n+fn suggest_restriction<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     generics: &hir::Generics<'tcx>,\n     msg: &str,"}, {"sha": "2b5dae1d751f802b192d88fec015557d180ae866", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -252,7 +252,7 @@ struct FulfillProcessor<'a, 'b, 'tcx> {\n     register_region_obligations: bool,\n }\n \n-fn mk_pending(os: Vec<PredicateObligation<'tcx>>) -> Vec<PendingPredicateObligation<'tcx>> {\n+fn mk_pending(os: Vec<PredicateObligation<'_>>) -> Vec<PendingPredicateObligation<'_>> {\n     os.into_iter()\n         .map(|o| PendingPredicateObligation { obligation: o, stalled_on: vec![] })\n         .collect()"}, {"sha": "b23dce8a58130acea04938ab50be2327b58bd6a4", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -16,7 +16,7 @@ pub enum CopyImplementationError<'tcx> {\n     HasDestructor,\n }\n \n-pub fn can_type_implement_copy(\n+pub fn can_type_implement_copy<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     self_type: Ty<'tcx>,"}, {"sha": "a8f26982d2e42096f5eb99adff5a5bada34cd0ae", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -801,7 +801,7 @@ fn vtable_trait_first_method_offset<'tcx>(\n }\n \n /// Find slot offset for trait vptr within vtable entries of another trait\n-pub fn vtable_trait_upcasting_coercion_new_vptr_slot(\n+pub fn vtable_trait_upcasting_coercion_new_vptr_slot<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: (\n         Ty<'tcx>, // trait object type whose trait owning vtable"}, {"sha": "4e84849bc1e235572e035a64ca201afa9eb42bf6", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -50,10 +50,7 @@ pub fn astconv_object_safety_violations(\n     violations\n }\n \n-fn object_safety_violations(\n-    tcx: TyCtxt<'tcx>,\n-    trait_def_id: DefId,\n-) -> &'tcx [ObjectSafetyViolation] {\n+fn object_safety_violations(tcx: TyCtxt<'_>, trait_def_id: DefId) -> &'_ [ObjectSafetyViolation] {\n     debug_assert!(tcx.generics_of(trait_def_id).has_self);\n     debug!(\"object_safety_violations: {:?}\", trait_def_id);\n \n@@ -272,7 +269,7 @@ fn bounds_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SmallVec<[Span\n         .collect()\n }\n \n-fn predicate_references_self(\n+fn predicate_references_self<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (predicate, sp): (ty::Predicate<'tcx>, Span),\n ) -> Option<Span> {"}, {"sha": "b32fb616e12bead4198a394c7b4c43c18265cc42", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -570,7 +570,7 @@ impl<'me, 'tcx> BoundVarReplacer<'me, 'tcx> {\n     }\n }\n \n-impl TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n+impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n@@ -678,7 +678,7 @@ impl<'me, 'tcx> PlaceholderReplacer<'me, 'tcx> {\n     }\n }\n \n-impl TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n+impl<'tcx> TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n@@ -1937,14 +1937,14 @@ fn assoc_ty_def(\n     }\n }\n \n-crate trait ProjectionCacheKeyExt<'tcx>: Sized {\n+crate trait ProjectionCacheKeyExt<'cx, 'tcx>: Sized {\n     fn from_poly_projection_predicate(\n         selcx: &mut SelectionContext<'cx, 'tcx>,\n         predicate: ty::PolyProjectionPredicate<'tcx>,\n     ) -> Option<Self>;\n }\n \n-impl<'tcx> ProjectionCacheKeyExt<'tcx> for ProjectionCacheKey<'tcx> {\n+impl<'cx, 'tcx> ProjectionCacheKeyExt<'cx, 'tcx> for ProjectionCacheKey<'tcx> {\n     fn from_poly_projection_predicate(\n         selcx: &mut SelectionContext<'cx, 'tcx>,\n         predicate: ty::PolyProjectionPredicate<'tcx>,"}, {"sha": "e92ca7325d3490a054dc6943918d7f9ebc4babc0", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/normalize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -31,7 +31,7 @@ pub trait Normalizable<'tcx>: fmt::Debug + TypeFoldable<'tcx> + Lift<'tcx> + Cop\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self>>;\n }\n \n-impl Normalizable<'tcx> for Ty<'tcx> {\n+impl<'tcx> Normalizable<'tcx> for Ty<'tcx> {\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n@@ -40,7 +40,7 @@ impl Normalizable<'tcx> for Ty<'tcx> {\n     }\n }\n \n-impl Normalizable<'tcx> for ty::Predicate<'tcx> {\n+impl<'tcx> Normalizable<'tcx> for ty::Predicate<'tcx> {\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n@@ -49,7 +49,7 @@ impl Normalizable<'tcx> for ty::Predicate<'tcx> {\n     }\n }\n \n-impl Normalizable<'tcx> for ty::PolyFnSig<'tcx> {\n+impl<'tcx> Normalizable<'tcx> for ty::PolyFnSig<'tcx> {\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n@@ -58,7 +58,7 @@ impl Normalizable<'tcx> for ty::PolyFnSig<'tcx> {\n     }\n }\n \n-impl Normalizable<'tcx> for ty::FnSig<'tcx> {\n+impl<'tcx> Normalizable<'tcx> for ty::FnSig<'tcx> {\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,"}, {"sha": "82f147f8143d31fda847b535bca65b78ed8eb2ec", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -14,7 +14,7 @@ impl<'tcx> DropckOutlives<'tcx> {\n     }\n }\n \n-impl super::QueryTypeOp<'tcx> for DropckOutlives<'tcx> {\n+impl<'tcx> super::QueryTypeOp<'tcx> for DropckOutlives<'tcx> {\n     type QueryResponse = DropckOutlivesResult<'tcx>;\n \n     fn try_fast_path("}, {"sha": "3ac273fd19b68d5ef54a99bdf9705ca6e79b2aaa", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -32,7 +32,7 @@ enum Inserted {\n     ShouldRecurseOn(DefId),\n }\n \n-trait ChildrenExt {\n+trait ChildrenExt<'tcx> {\n     fn insert_blindly(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId);\n     fn remove_existing(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId);\n \n@@ -44,9 +44,9 @@ trait ChildrenExt {\n     ) -> Result<Inserted, OverlapError>;\n }\n \n-impl ChildrenExt for Children {\n+impl ChildrenExt<'_> for Children {\n     /// Insert an impl into this set of children without comparing to any existing impls.\n-    fn insert_blindly(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId) {\n+    fn insert_blindly(&mut self, tcx: TyCtxt<'_>, impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         if let Some(st) = fast_reject::simplify_type(\n             tcx,\n@@ -65,7 +65,7 @@ impl ChildrenExt for Children {\n     /// Removes an impl from this set of children. Used when replacing\n     /// an impl with a parent. The impl must be present in the list of\n     /// children already.\n-    fn remove_existing(&mut self, tcx: TyCtxt<'tcx>, impl_def_id: DefId) {\n+    fn remove_existing(&mut self, tcx: TyCtxt<'_>, impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let vec: &mut Vec<DefId>;\n         if let Some(st) = fast_reject::simplify_type(\n@@ -89,7 +89,7 @@ impl ChildrenExt for Children {\n     /// specialization relationships.\n     fn insert(\n         &mut self,\n-        tcx: TyCtxt<'tcx>,\n+        tcx: TyCtxt<'_>,\n         impl_def_id: DefId,\n         simplified_self: Option<SimplifiedType>,\n     ) -> Result<Inserted, OverlapError> {\n@@ -271,12 +271,12 @@ pub trait GraphExt {\n     /// information about the area of overlap is returned in the `Err`.\n     fn insert(\n         &mut self,\n-        tcx: TyCtxt<'tcx>,\n+        tcx: TyCtxt<'_>,\n         impl_def_id: DefId,\n     ) -> Result<Option<FutureCompatOverlapError>, OverlapError>;\n \n     /// Insert cached metadata mapping from a child impl back to its parent.\n-    fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'tcx>, parent: DefId, child: DefId);\n+    fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'_>, parent: DefId, child: DefId);\n }\n \n impl GraphExt for Graph {\n@@ -285,7 +285,7 @@ impl GraphExt for Graph {\n     /// information about the area of overlap is returned in the `Err`.\n     fn insert(\n         &mut self,\n-        tcx: TyCtxt<'tcx>,\n+        tcx: TyCtxt<'_>,\n         impl_def_id: DefId,\n     ) -> Result<Option<FutureCompatOverlapError>, OverlapError> {\n         assert!(impl_def_id.is_local());\n@@ -385,7 +385,7 @@ impl GraphExt for Graph {\n     }\n \n     /// Insert cached metadata mapping from a child impl back to its parent.\n-    fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'tcx>, parent: DefId, child: DefId) {\n+    fn record_impl_from_cstore(&mut self, tcx: TyCtxt<'_>, parent: DefId, child: DefId) {\n         if self.parent.insert(child, parent).is_some() {\n             bug!(\n                 \"When recording an impl from the crate store, information about its parent \\"}, {"sha": "55feb3c1de17d356ec0d6ccb917d58cf4d805ddb", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -66,7 +66,7 @@ pub fn search_for_structural_match_violation<'tcx>(\n ///\n /// Note that this does *not* recursively check if the substructure of `adt_ty`\n /// implements the traits.\n-fn type_marked_structural(\n+fn type_marked_structural<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     adt_ty: Ty<'tcx>,\n     cause: ObligationCause<'tcx>,\n@@ -119,7 +119,7 @@ struct Search<'a, 'tcx> {\n     seen: FxHashSet<hir::def_id::DefId>,\n }\n \n-impl Search<'a, 'tcx> {\n+impl<'a, 'tcx> Search<'a, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }"}, {"sha": "3090e8a04285db41acf83444e6712af0d50f3e01", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -172,7 +172,7 @@ pub fn supertrait_def_ids(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SupertraitDef\n     }\n }\n \n-impl Iterator for SupertraitDefIds<'tcx> {\n+impl Iterator for SupertraitDefIds<'_> {\n     type Item = DefId;\n \n     fn next(&mut self) -> Option<DefId> {\n@@ -259,7 +259,7 @@ pub fn predicate_for_trait_ref<'tcx>(\n     }\n }\n \n-pub fn predicate_for_trait_def(\n+pub fn predicate_for_trait_def<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     cause: ObligationCause<'tcx>,\n@@ -276,7 +276,7 @@ pub fn predicate_for_trait_def(\n /// Casts a trait reference into a reference to one of its super\n /// traits; returns `None` if `target_trait_def_id` is not a\n /// supertrait.\n-pub fn upcast_choices(\n+pub fn upcast_choices<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     source_trait_ref: ty::PolyTraitRef<'tcx>,\n     target_trait_def_id: DefId,\n@@ -291,7 +291,10 @@ pub fn upcast_choices(\n /// Given a trait `trait_ref`, returns the number of vtable entries\n /// that come from `trait_ref`, excluding its supertraits. Used in\n /// computing the vtable base for an upcast trait of a trait object.\n-pub fn count_own_vtable_entries(tcx: TyCtxt<'tcx>, trait_ref: ty::PolyTraitRef<'tcx>) -> usize {\n+pub fn count_own_vtable_entries<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    trait_ref: ty::PolyTraitRef<'tcx>,\n+) -> usize {\n     let existential_trait_ref =\n         trait_ref.map_bound(|trait_ref| ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref));\n     let existential_trait_ref = tcx.erase_regions(existential_trait_ref);\n@@ -301,7 +304,7 @@ pub fn count_own_vtable_entries(tcx: TyCtxt<'tcx>, trait_ref: ty::PolyTraitRef<'\n /// Given an upcast trait object described by `object`, returns the\n /// index of the method `method_def_id` (which should be part of\n /// `object.upcast_trait_ref`) within the vtable for `object`.\n-pub fn get_vtable_index_of_object_method<N>(\n+pub fn get_vtable_index_of_object_method<'tcx, N>(\n     tcx: TyCtxt<'tcx>,\n     object: &super::ImplSourceObjectData<'tcx, N>,\n     method_def_id: DefId,\n@@ -323,7 +326,7 @@ pub fn get_vtable_index_of_object_method<N>(\n     object.vtable_base + index\n }\n \n-pub fn closure_trait_ref_and_return_type(\n+pub fn closure_trait_ref_and_return_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     fn_trait_def_id: DefId,\n     self_ty: Ty<'tcx>,\n@@ -342,7 +345,7 @@ pub fn closure_trait_ref_and_return_type(\n     sig.map_bound(|sig| (trait_ref, sig.output()))\n }\n \n-pub fn generator_trait_ref_and_outputs(\n+pub fn generator_trait_ref_and_outputs<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     fn_trait_def_id: DefId,\n     self_ty: Ty<'tcx>,"}, {"sha": "46370f76e7ced48d5c89c0c4376587b63d89b3f3", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -811,7 +811,8 @@ extern \"rust-intrinsic\" {\n     /// The preferred alignment of a type.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n-    #[rustc_const_unstable(feature = \"const_pref_align_of\", issue = \"none\")]\n+    /// It's \"tracking issue\" is [#91971](https://github.com/rust-lang/rust/issues/91971).\n+    #[rustc_const_unstable(feature = \"const_pref_align_of\", issue = \"91971\")]\n     pub fn pref_align_of<T>() -> usize;\n \n     /// The size of the referenced value in bytes."}, {"sha": "b7a45121525216b92d8c18be364d603d8f3ad076", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -16,7 +16,7 @@ panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n libc = { version = \"0.2.108\", default-features = false, features = ['rustc-dep-of-std'] }\n-compiler_builtins = { version = \"0.1.65\" }\n+compiler_builtins = { version = \"0.1.66\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }\n hashbrown = { version = \"0.11\", default-features = false, features = ['rustc-dep-of-std'] }"}, {"sha": "0716b22e902207efabe46879cbf28d0189ab7924", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -1 +1 @@\n-Subproject commit d219ad63c5075098fc224a57deb4852b9734327d\n+Subproject commit 0716b22e902207efabe46879cbf28d0189ab7924"}, {"sha": "00b46b1ba918b79d9f1c9d21be11c3f8b8916820", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -74,30 +74,26 @@\n     {{- layout.external_html.before_content | safe -}}\n     <nav class=\"sidebar\"> {#- -#}\n         <div class=\"sidebar-menu\" role=\"button\">&#9776;</div> {#- -#}\n-        <a class=\"sidebar-logo\" href='{{page.root_path | safe}}{{krate_with_trailing_slash | safe}}index.html'> {#- -#}\n-            <div class='logo-container rust-logo'> {#- -#}\n-                <img src='\n-                    {%- if layout.logo -%}\n-                    {{layout.logo}}\n-                    {%- else -%}\n-                    {{static_root_path | safe}}rust-logo{{page.resource_suffix}}.png\n-                    {%- endif -%}\n-                    ' alt='logo'> {#- -#}\n-            </div> {#- -#}\n+        <a class=\"sidebar-logo\" href=\"{{page.root_path | safe}}{{krate_with_trailing_slash | safe}}index.html\"> {#- -#}\n+            <div class=\"logo-container\"> {#- -#}\n+            {%- if layout.logo -%}\n+                <img src=\"{{layout.logo}}\" alt=\"logo\"> {#- -#}\n+            {%- else -%}\n+                <img class=\"rust-logo\" src=\"{{static_root_path | safe}}rust-logo{{page.resource_suffix}}.png\" alt=\"logo\"> {#- -#}\n+            {%- endif -%}\n+            </div>\n         </a> {#- -#}\n         {{- sidebar | safe -}}\n     </nav> {#- -#}\n     <main> {#- -#}\n         <div class=\"width-limiter\"> {#- -#}\n             <div class=\"sub-container\"> {#- -#}\n-                <a class=\"sub-logo-container rust-logo\" href='{{page.root_path | safe}}{{krate_with_trailing_slash | safe}}index.html'> {#- -#}\n-                    <img src='\n-                        {%- if layout.logo -%}\n-                        {{layout.logo}}\n-                        {%- else -%}\n-                        {{static_root_path | safe}}rust-logo{{page.resource_suffix}}.png\n-                        {%- endif -%}\n-                        ' alt='logo'> {#- -#}\n+                <a class=\"sub-logo-container\" href=\"{{page.root_path | safe}}{{krate_with_trailing_slash | safe}}index.html\"> {#- -#}\n+                    {%- if layout.logo -%}\n+                    <img src=\"{{layout.logo}}\" alt=\"logo\">\n+                    {%- else -%}\n+                    <img class=\"rust-logo\" src=\"{{static_root_path | safe}}rust-logo{{page.resource_suffix}}.png\" alt=\"logo\">\n+                    {%- endif -%}\n                 </a> {#- -#}\n                 <nav class=\"sub\"> {#- -#}\n                     <div class=\"theme-picker\"> {#- -#}"}, {"sha": "a7016d227b158027ca872a8760d9c17dd3102676", "filename": "src/test/rustdoc/logo-class-default.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/src%2Ftest%2Frustdoc%2Flogo-class-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/src%2Ftest%2Frustdoc%2Flogo-class-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Flogo-class-default.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -0,0 +1,4 @@\n+// Note: this test is paired with logo-class.rs.\n+// @has logo_class_default/struct.SomeStruct.html '//*[@class=\"logo-container\"]/img[@class=\"rust-logo\"]' ''\n+// @has logo_class_default/struct.SomeStruct.html '//*[@class=\"sub-logo-container\"]/img[@class=\"rust-logo\"]' ''\n+pub struct SomeStruct;"}, {"sha": "f071f356a6d38a60f3d57ae6058832f4415f4117", "filename": "src/test/rustdoc/logo-class.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8402169aaa12e7bbb9630796a8caec90a3055ca/src%2Ftest%2Frustdoc%2Flogo-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8402169aaa12e7bbb9630796a8caec90a3055ca/src%2Ftest%2Frustdoc%2Flogo-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Flogo-class.rs?ref=f8402169aaa12e7bbb9630796a8caec90a3055ca", "patch": "@@ -0,0 +1,10 @@\n+#![doc(html_logo_url =\n+    \"https://raw.githubusercontent.com/sagebind/isahc/master/media/isahc.svg.png\")]\n+// Note: this test is paired with logo-class-default.rs.\n+\n+// @has logo_class/struct.SomeStruct.html '//*[@class=\"logo-container\"]/img[@src=\"https://raw.githubusercontent.com/sagebind/isahc/master/media/isahc.svg.png\"]' ''\n+// @!has logo_class/struct.SomeStruct.html '//*[@class=\"logo-container\"]/img[@class=\"rust-logo\"]' ''\n+//\n+// @has logo_class/struct.SomeStruct.html '//*[@class=\"sub-logo-container\"]/img[@src=\"https://raw.githubusercontent.com/sagebind/isahc/master/media/isahc.svg.png\"]' ''\n+// @!has logo_class/struct.SomeStruct.html '//*[@class=\"sub-logo-container\"]/img[@class=\"rust-logo\"]' ''\n+pub struct SomeStruct;"}]}