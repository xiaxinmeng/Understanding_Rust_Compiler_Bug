{"sha": "4567f22578e02d4eaca21b7662233ef2dc43a007", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NjdmMjI1NzhlMDJkNGVhY2EyMWI3NjYyMjMzZWYyZGM0M2EwMDc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-08T10:30:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-08T10:30:52Z"}, "message": "remove useless ident() functions in const tests and replace the useful ones by black_box (with a comment)", "tree": {"sha": "9964d1f04d973e670e8da14c9e5c8c321ef22557", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9964d1f04d973e670e8da14c9e5c8c321ef22557"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4567f22578e02d4eaca21b7662233ef2dc43a007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4567f22578e02d4eaca21b7662233ef2dc43a007", "html_url": "https://github.com/rust-lang/rust/commit/4567f22578e02d4eaca21b7662233ef2dc43a007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4567f22578e02d4eaca21b7662233ef2dc43a007/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6312b89fdabce0aedf613391266e08c0deef2324", "url": "https://api.github.com/repos/rust-lang/rust/commits/6312b89fdabce0aedf613391266e08c0deef2324", "html_url": "https://github.com/rust-lang/rust/commit/6312b89fdabce0aedf613391266e08c0deef2324"}], "stats": {"total": 129, "additions": 57, "deletions": 72}, "files": [{"sha": "1d3123d216ebfb53ae63ebe190c6961c5f30c6de", "filename": "src/test/run-pass/const-int-conversion.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4567f22578e02d4eaca21b7662233ef2dc43a007/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4567f22578e02d4eaca21b7662233ef2dc43a007/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs?ref=4567f22578e02d4eaca21b7662233ef2dc43a007", "patch": "@@ -8,16 +8,12 @@ const TO_BE_BYTES: [u8; 4] = 0x12_34_56_78_i32.to_be_bytes();\n const TO_LE_BYTES: [u8; 4] = 0x12_34_56_78_i32.to_le_bytes();\n const TO_NE_BYTES: [u8; 4] = i32::min_value().to_be().to_ne_bytes();\n \n-fn ident<T>(ident: T) -> T {\n-    ident\n-}\n-\n fn main() {\n-    assert_eq!(REVERSE, ident(0x1e6a2c48));\n-    assert_eq!(FROM_BE_BYTES, ident(0x12_34_56_78));\n-    assert_eq!(FROM_LE_BYTES, ident(0x78_56_34_12));\n-    assert_eq!(FROM_NE_BYTES, ident(i32::min_value()));\n-    assert_eq!(TO_BE_BYTES, ident([0x12, 0x34, 0x56, 0x78]));\n-    assert_eq!(TO_LE_BYTES, ident([0x78, 0x56, 0x34, 0x12]));\n-    assert_eq!(TO_NE_BYTES, ident([0x80, 0, 0, 0]));\n+    assert_eq!(REVERSE, 0x1e6a2c48);\n+    assert_eq!(FROM_BE_BYTES, 0x12_34_56_78);\n+    assert_eq!(FROM_LE_BYTES, 0x78_56_34_12);\n+    assert_eq!(FROM_NE_BYTES, i32::min_value());\n+    assert_eq!(TO_BE_BYTES, [0x12, 0x34, 0x56, 0x78]);\n+    assert_eq!(TO_LE_BYTES, [0x78, 0x56, 0x34, 0x12]);\n+    assert_eq!(TO_NE_BYTES, [0x80, 0, 0, 0]);\n }"}, {"sha": "9597393df72d27940010170a42fc6edcdbf61584", "filename": "src/test/run-pass/const-int-overflowing.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4567f22578e02d4eaca21b7662233ef2dc43a007/src%2Ftest%2Frun-pass%2Fconst-int-overflowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4567f22578e02d4eaca21b7662233ef2dc43a007/src%2Ftest%2Frun-pass%2Fconst-int-overflowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-overflowing.rs?ref=4567f22578e02d4eaca21b7662233ef2dc43a007", "patch": "@@ -16,26 +16,22 @@ const SHR_B: (u32, bool) = 0x10u32.overflowing_shr(132);\n const NEG_A: (u32, bool) = 0u32.overflowing_neg();\n const NEG_B: (u32, bool) = core::u32::MAX.overflowing_neg();\n \n-fn ident<T>(ident: T) -> T {\n-    ident\n-}\n-\n fn main() {\n-    assert_eq!(ADD_A, ident((7, false)));\n-    assert_eq!(ADD_B, ident((0, true)));\n+    assert_eq!(ADD_A, (7, false));\n+    assert_eq!(ADD_B, (0, true));\n \n-    assert_eq!(SUB_A, ident((3, false)));\n-    assert_eq!(SUB_B, ident((u32::max_value(), true)));\n+    assert_eq!(SUB_A, (3, false));\n+    assert_eq!(SUB_B, (u32::max_value(), true));\n \n-    assert_eq!(MUL_A, ident((10, false)));\n-    assert_eq!(MUL_B, ident((1410065408, true)));\n+    assert_eq!(MUL_A, (10, false));\n+    assert_eq!(MUL_B, (1410065408, true));\n \n-    assert_eq!(SHL_A, ident((0x10, false)));\n-    assert_eq!(SHL_B, ident((0x10, true)));\n+    assert_eq!(SHL_A, (0x10, false));\n+    assert_eq!(SHL_B, (0x10, true));\n \n-    assert_eq!(SHR_A, ident((0x1, false)));\n-    assert_eq!(SHR_B, ident((0x1, true)));\n+    assert_eq!(SHR_A, (0x1, false));\n+    assert_eq!(SHR_B, (0x1, true));\n \n-    assert_eq!(NEG_A, ident((0, false)));\n-    assert_eq!(NEG_B, ident((1, true)));\n+    assert_eq!(NEG_A, (0, false));\n+    assert_eq!(NEG_B, (1, true));\n }"}, {"sha": "16946eadd632aeb7c6dd1d652c729ab47b8fd9cc", "filename": "src/test/run-pass/const-int-rotate.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4567f22578e02d4eaca21b7662233ef2dc43a007/src%2Ftest%2Frun-pass%2Fconst-int-rotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4567f22578e02d4eaca21b7662233ef2dc43a007/src%2Ftest%2Frun-pass%2Fconst-int-rotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-rotate.rs?ref=4567f22578e02d4eaca21b7662233ef2dc43a007", "patch": "@@ -21,25 +21,21 @@ const ZERO_ROTATE_RIGHT: i8 = 0b0111_1001i8.rotate_right(0);\n const MULTIPLE_ROTATE_LEFT: i32 = 0b0010_0001i32.rotate_left(128);\n const MULTIPLE_ROTATE_RIGHT: i32 = 0b0010_0001i32.rotate_right(128);\n \n-fn ident<T>(ident: T) -> T {\n-    ident\n-}\n-\n fn main() {\n-    assert_eq!(LEFT, ident(0xb301));\n-    assert_eq!(RIGHT, ident(0x0100_00b3));\n+    assert_eq!(LEFT, 0xb301);\n+    assert_eq!(RIGHT, 0x0100_00b3);\n \n-    assert_eq!(LEFT_OVERFLOW, ident(0));\n-    assert_eq!(RIGHT_OVERFLOW, ident(0));\n-    assert_eq!(ONE_LEFT_OVERFLOW, ident(0b0001_0000_0000_0000));\n-    assert_eq!(ONE_RIGHT_OVERFLOW, ident(0b0001_0000));\n+    assert_eq!(LEFT_OVERFLOW, 0);\n+    assert_eq!(RIGHT_OVERFLOW, 0);\n+    assert_eq!(ONE_LEFT_OVERFLOW, 0b0001_0000_0000_0000);\n+    assert_eq!(ONE_RIGHT_OVERFLOW, 0b0001_0000);\n \n-    assert_eq!(NON_ZERO_LEFT_OVERFLOW, ident(0b0010_0000_0000_0000));\n-    assert_eq!(NON_ZERO_RIGHT_OVERFLOW, ident(0b0000_0000_0010_0000));\n+    assert_eq!(NON_ZERO_LEFT_OVERFLOW, 0b0010_0000_0000_0000);\n+    assert_eq!(NON_ZERO_RIGHT_OVERFLOW, 0b0000_0000_0010_0000);\n \n-    assert_eq!(ZERO_ROTATE_LEFT, ident(0b0010_0001));\n-    assert_eq!(ZERO_ROTATE_RIGHT, ident(0b0111_1001));\n+    assert_eq!(ZERO_ROTATE_LEFT, 0b0010_0001);\n+    assert_eq!(ZERO_ROTATE_RIGHT, 0b0111_1001);\n \n-    assert_eq!(MULTIPLE_ROTATE_LEFT, ident(0b0010_0001));\n-    assert_eq!(MULTIPLE_ROTATE_RIGHT, ident(0b0010_0001));\n+    assert_eq!(MULTIPLE_ROTATE_LEFT, 0b0010_0001);\n+    assert_eq!(MULTIPLE_ROTATE_RIGHT, 0b0010_0001);\n }"}, {"sha": "db86c25194f08585d3e6824242a0dd807531461e", "filename": "src/test/run-pass/const-int-wrapping.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4567f22578e02d4eaca21b7662233ef2dc43a007/src%2Ftest%2Frun-pass%2Fconst-int-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4567f22578e02d4eaca21b7662233ef2dc43a007/src%2Ftest%2Frun-pass%2Fconst-int-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-wrapping.rs?ref=4567f22578e02d4eaca21b7662233ef2dc43a007", "patch": "@@ -16,26 +16,22 @@ const SHR_B: u32 = 128u32.wrapping_shr(128);\n const NEG_A: u32 = 5u32.wrapping_neg();\n const NEG_B: u32 = 1234567890u32.wrapping_neg();\n \n-fn ident<T>(ident: T) -> T {\n-    ident\n-}\n-\n fn main() {\n-    assert_eq!(ADD_A, ident(255));\n-    assert_eq!(ADD_B, ident(199));\n+    assert_eq!(ADD_A, 255);\n+    assert_eq!(ADD_B, 199);\n \n-    assert_eq!(SUB_A, ident(0));\n-    assert_eq!(SUB_B, ident(101));\n+    assert_eq!(SUB_A, 0);\n+    assert_eq!(SUB_B, 101);\n \n-    assert_eq!(MUL_A, ident(120));\n-    assert_eq!(MUL_B, ident(44));\n+    assert_eq!(MUL_A, 120);\n+    assert_eq!(MUL_B, 44);\n \n-    assert_eq!(SHL_A, ident(128));\n-    assert_eq!(SHL_B, ident(1));\n+    assert_eq!(SHL_A, 128);\n+    assert_eq!(SHL_B, 1);\n \n-    assert_eq!(SHR_A, ident(1));\n-    assert_eq!(SHR_B, ident(128));\n+    assert_eq!(SHR_A, 1);\n+    assert_eq!(SHR_B, 128);\n \n-    assert_eq!(NEG_A, ident(4294967291));\n-    assert_eq!(NEG_B, ident(3060399406));\n+    assert_eq!(NEG_A, 4294967291);\n+    assert_eq!(NEG_B, 3060399406);\n }"}, {"sha": "936f31954d3dd446b8b000f43def12caf4e93df8", "filename": "src/test/run-pass/consts/const-endianess.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4567f22578e02d4eaca21b7662233ef2dc43a007/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-endianess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4567f22578e02d4eaca21b7662233ef2dc43a007/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-endianess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-endianess.rs?ref=4567f22578e02d4eaca21b7662233ef2dc43a007", "patch": "@@ -2,7 +2,7 @@\n #![feature(test)]\n \n extern crate test;\n-use test::black_box as b;\n+use test::black_box as b; // prevent promotion of the argument and const-propagation of the result\n \n const BE_U32: u32 = 55u32.to_be();\n const LE_U32: u32 = 55u32.to_le();"}, {"sha": "4cdc8c7942359d02744b7e8d32166966dbc9573d", "filename": "src/test/run-pass/consts/const-ptr-nonnull.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4567f22578e02d4eaca21b7662233ef2dc43a007/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4567f22578e02d4eaca21b7662233ef2dc43a007/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-nonnull.rs?ref=4567f22578e02d4eaca21b7662233ef2dc43a007", "patch": "@@ -1,15 +1,16 @@\n // run-pass\n \n+#![feature(ptr_internals, test)]\n+\n+extern crate test;\n+use test::black_box as b; // prevent promotion of the argument and const-propagation of the result\n+\n use std::ptr::NonNull;\n \n const DANGLING: NonNull<u32> = NonNull::dangling();\n const CASTED: NonNull<u32> = NonNull::cast(NonNull::<i32>::dangling());\n \n-fn ident<T>(ident: T) -> T {\n-    ident\n-}\n-\n pub fn main() {\n-    assert_eq!(DANGLING, ident(NonNull::dangling()));\n-    assert_eq!(CASTED, ident(NonNull::dangling()));\n+    assert_eq!(DANGLING, b(NonNull::dangling()));\n+    assert_eq!(CASTED, b(NonNull::dangling()));\n }"}, {"sha": "b5cc78d4b71885002bc2f6a0532345d87322d819", "filename": "src/test/run-pass/consts/const-ptr-unique.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4567f22578e02d4eaca21b7662233ef2dc43a007/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4567f22578e02d4eaca21b7662233ef2dc43a007/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-unique.rs?ref=4567f22578e02d4eaca21b7662233ef2dc43a007", "patch": "@@ -1,15 +1,15 @@\n // run-pass\n \n-#![feature(ptr_internals)]\n+#![feature(ptr_internals, test)]\n+\n+extern crate test;\n+use test::black_box as b; // prevent promotion of the argument and const-propagation of the result\n \n use std::ptr::Unique;\n \n-const PTR: *mut u32 = Unique::empty().as_ptr();\n \n-fn ident<T>(ident: T) -> T {\n-    ident\n-}\n+const PTR: *mut u32 = Unique::empty().as_ptr();\n \n pub fn main() {\n-    assert_eq!(PTR, ident(Unique::<u32>::empty().as_ptr()));\n+    assert_eq!(PTR, b(Unique::<u32>::empty()).as_ptr());\n }"}]}