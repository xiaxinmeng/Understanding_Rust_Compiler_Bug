{"sha": "c217e07ea8a09eb28d5f6d8137594ada8775320c", "node_id": "C_kwDOAAsO6NoAKGMyMTdlMDdlYThhMDllYjI4ZDVmNmQ4MTM3NTk0YWRhODc3NTMyMGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-24T14:06:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-24T14:06:10Z"}, "message": "Auto merge of #2537 - saethlin:dont-back-up-too-far, r=RalfJung\n\nDon't back up past the caller when looking for an FnEntry span\n\nFixes https://github.com/rust-lang/miri/issues/2536\n\nThis adds a fix for the logic as well as a regression test. In the new test `tests/fail/stacked_borrows/fnentry_invalidation2.rs`, before this PR, we display this diagnostic:\n```\nhelp: <3278> was later invalidated at offsets [0x0..0xc] by a Unique FnEntry retag\n  --> tests/fail/stacked_borrows/fnentry_invalidation2.rs:13:5\n   |\n13 |     inner(&mut t);\n   |     ^^^^^^^^^^^^^\n```\nWhich is very misleading. It is not this call itself, but what happens within the call that invalidates the tag we want. With this PR, we get:\n```\nhelp: <2798> was later invalidated at offsets [0x0..0xc] by a Unique FnEntry retag inside this call\n  --> tests/fail/stacked_borrows/fnentry_invalidation2.rs:20:13\n   |\n20 |     let _ = t.sli.as_mut_ptr();\n   |             ^^^^^^^^^^^^^^^^^^\n```\nWhich is much better.", "tree": {"sha": "fdd95183e2a48cd3c1a56f2c3c4eb5861bfcaca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdd95183e2a48cd3c1a56f2c3c4eb5861bfcaca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c217e07ea8a09eb28d5f6d8137594ada8775320c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c217e07ea8a09eb28d5f6d8137594ada8775320c", "html_url": "https://github.com/rust-lang/rust/commit/c217e07ea8a09eb28d5f6d8137594ada8775320c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c217e07ea8a09eb28d5f6d8137594ada8775320c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6872a70343fd2e1dd5cc4a2710fae8373427bd3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6872a70343fd2e1dd5cc4a2710fae8373427bd3f", "html_url": "https://github.com/rust-lang/rust/commit/6872a70343fd2e1dd5cc4a2710fae8373427bd3f"}, {"sha": "5f498cab13800da77be7f6450a8d5264d31b0d1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f498cab13800da77be7f6450a8d5264d31b0d1f", "html_url": "https://github.com/rust-lang/rust/commit/5f498cab13800da77be7f6450a8d5264d31b0d1f"}], "stats": {"total": 96, "additions": 77, "deletions": 19}, "files": [{"sha": "15833fe42adc9b66baa3df938f8a2c94c4b56095", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c217e07ea8a09eb28d5f6d8137594ada8775320c/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217e07ea8a09eb28d5f6d8137594ada8775320c/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=c217e07ea8a09eb28d5f6d8137594ada8775320c", "patch": "@@ -1,5 +1,6 @@\n pub mod convert;\n \n+use std::cmp;\n use std::mem;\n use std::num::NonZeroUsize;\n use std::time::Duration;\n@@ -908,24 +909,25 @@ impl<'a, 'mir: 'a, 'tcx: 'a + 'mir> CurrentSpan<'a, 'mir, 'tcx> {\n     /// This function is backed by a cache, and can be assumed to be very fast.\n     pub fn get(&mut self) -> Span {\n         let idx = self.current_frame_idx();\n-        Self::frame_span(self.machine, idx)\n+        self.stack().get(idx).map(Frame::current_span).unwrap_or(rustc_span::DUMMY_SP)\n     }\n \n-    /// Similar to `CurrentSpan::get`, but retrieves the parent frame of the first non-local frame.\n+    /// Returns the span of the *caller* of the current operation, again\n+    /// walking down the stack to find the closest frame in a local crate, if the caller of the\n+    /// current operation is not in a local crate.\n     /// This is useful when we are processing something which occurs on function-entry and we want\n     /// to point at the call to the function, not the function definition generally.\n-    pub fn get_parent(&mut self) -> Span {\n-        let idx = self.current_frame_idx();\n-        Self::frame_span(self.machine, idx.wrapping_sub(1))\n+    pub fn get_caller(&mut self) -> Span {\n+        // We need to go down at least to the caller (len - 2), or however\n+        // far we have to go to find a frame in a local crate.\n+        let local_frame_idx = self.current_frame_idx();\n+        let stack = self.stack();\n+        let idx = cmp::min(local_frame_idx, stack.len().saturating_sub(2));\n+        stack.get(idx).map(Frame::current_span).unwrap_or(rustc_span::DUMMY_SP)\n     }\n \n-    fn frame_span(machine: &MiriMachine<'_, '_>, idx: usize) -> Span {\n-        machine\n-            .threads\n-            .active_thread_stack()\n-            .get(idx)\n-            .map(Frame::current_span)\n-            .unwrap_or(rustc_span::DUMMY_SP)\n+    fn stack(&self) -> &[Frame<'mir, 'tcx, Provenance, machine::FrameData<'tcx>>] {\n+        self.machine.threads.active_thread_stack()\n     }\n \n     fn current_frame_idx(&mut self) -> usize {"}, {"sha": "2cc7a88704ea39497adb6ef9811cf0419f14e28e", "filename": "src/tools/miri/src/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c217e07ea8a09eb28d5f6d8137594ada8775320c/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217e07ea8a09eb28d5f6d8137594ada8775320c/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fdiagnostics.rs?ref=c217e07ea8a09eb28d5f6d8137594ada8775320c", "patch": "@@ -66,13 +66,20 @@ enum InvalidationCause {\n \n impl Invalidation {\n     fn generate_diagnostic(&self) -> (String, SpanData) {\n-        (\n+        let message = if let InvalidationCause::Retag(_, RetagCause::FnEntry) = self.cause {\n+            // For a FnEntry retag, our Span points at the caller.\n+            // See `DiagnosticCx::log_invalidation`.\n+            format!(\n+                \"{:?} was later invalidated at offsets {:?} by a {} inside this call\",\n+                self.tag, self.range, self.cause\n+            )\n+        } else {\n             format!(\n                 \"{:?} was later invalidated at offsets {:?} by a {}\",\n                 self.tag, self.range, self.cause\n-            ),\n-            self.span.data(),\n-        )\n+            )\n+        };\n+        (message, self.span.data())\n     }\n }\n \n@@ -275,7 +282,7 @@ impl<'span, 'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'span, 'history, 'ecx, 'mir\n         let (range, cause) = match &self.operation {\n             Operation::Retag(RetagOp { cause, range, permission, .. }) => {\n                 if *cause == RetagCause::FnEntry {\n-                    span = self.current_span.get_parent();\n+                    span = self.current_span.get_caller();\n                 }\n                 (*range, InvalidationCause::Retag(permission.unwrap(), *cause))\n             }"}, {"sha": "eb6b01fc6b12bfa02690ee435ce24717923aecd6", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c217e07ea8a09eb28d5f6d8137594ada8775320c/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c217e07ea8a09eb28d5f6d8137594ada8775320c/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr?ref=c217e07ea8a09eb28d5f6d8137594ada8775320c", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x4]\n    |\n LL |     safe_raw(xraw, xshr);\n    |                    ^^^^\n-help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry retag\n+help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry retag inside this call\n   --> $DIR/aliasing_mut3.rs:LL:CC\n    |\n LL |     safe_raw(xraw, xshr);"}, {"sha": "e81411bbdd86cf86122907b831d9bf7fa4bedfff", "filename": "src/tools/miri/tests/fail/stacked_borrows/fnentry_invalidation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c217e07ea8a09eb28d5f6d8137594ada8775320c/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c217e07ea8a09eb28d5f6d8137594ada8775320c/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr?ref=c217e07ea8a09eb28d5f6d8137594ada8775320c", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadWrite retag at offsets [0x0..0x4]\n    |\n LL |     let z = &mut x as *mut i32;\n    |             ^^^^^^\n-help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry retag\n+help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry retag inside this call\n   --> $DIR/fnentry_invalidation.rs:LL:CC\n    |\n LL |     x.do_bad();"}, {"sha": "dc51a8a8ac6c70d4ad0bd82ac65c05fe61b2bbb9", "filename": "src/tools/miri/tests/fail/stacked_borrows/fnentry_invalidation2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c217e07ea8a09eb28d5f6d8137594ada8775320c/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217e07ea8a09eb28d5f6d8137594ada8775320c/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.rs?ref=c217e07ea8a09eb28d5f6d8137594ada8775320c", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for https://github.com/rust-lang/miri/issues/2536\n+// This tests that we don't try to back too far up the stack when selecting a span to report.\n+// We should display the as_mut_ptr() call as the location of the invalidation, not the call to\n+// inner\n+\n+struct Thing<'a> {\n+    sli: &'a mut [i32],\n+}\n+\n+fn main() {\n+    let mut t = Thing { sli: &mut [0, 1, 2] };\n+    let ptr = t.sli.as_ptr();\n+    inner(&mut t);\n+    unsafe {\n+        let _oof = *ptr; //~ ERROR: /read access .* tag does not exist in the borrow stack/\n+    }\n+}\n+\n+fn inner(t: &mut Thing) {\n+    let _ = t.sli.as_mut_ptr();\n+}"}, {"sha": "d6d0084fa2a77cf49dd6dad50fa703b9fa7aebb8", "filename": "src/tools/miri/tests/fail/stacked_borrows/fnentry_invalidation2.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c217e07ea8a09eb28d5f6d8137594ada8775320c/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c217e07ea8a09eb28d5f6d8137594ada8775320c/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr?ref=c217e07ea8a09eb28d5f6d8137594ada8775320c", "patch": "@@ -0,0 +1,28 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/fnentry_invalidation2.rs:LL:CC\n+   |\n+LL |         let _oof = *ptr;\n+   |                    ^^^^\n+   |                    |\n+   |                    attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                    this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0xc]\n+  --> $DIR/fnentry_invalidation2.rs:LL:CC\n+   |\n+LL |     let ptr = t.sli.as_ptr();\n+   |               ^^^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0xc] by a Unique FnEntry retag inside this call\n+  --> $DIR/fnentry_invalidation2.rs:LL:CC\n+   |\n+LL |     let _ = t.sli.as_mut_ptr();\n+   |             ^^^^^^^^^^^^^^^^^^\n+   = note: BACKTRACE:\n+   = note: inside `main` at $DIR/fnentry_invalidation2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}]}