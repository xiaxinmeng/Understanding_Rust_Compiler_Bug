{"sha": "d643ae1bbf4da44c00c2aff87cb3081a93ec44bb", "node_id": "C_kwDOAAsO6NoAKGQ2NDNhZTFiYmY0ZGE0NGMwMGMyYWZmODdjYjMwODFhOTNlYzQ0YmI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-27T11:14:14Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-07T19:36:32Z"}, "message": "Remove some dead code", "tree": {"sha": "0923d359aa60bf839d45359a85e4fe67b55cdba8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0923d359aa60bf839d45359a85e4fe67b55cdba8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d643ae1bbf4da44c00c2aff87cb3081a93ec44bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d643ae1bbf4da44c00c2aff87cb3081a93ec44bb", "html_url": "https://github.com/rust-lang/rust/commit/d643ae1bbf4da44c00c2aff87cb3081a93ec44bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d643ae1bbf4da44c00c2aff87cb3081a93ec44bb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a", "html_url": "https://github.com/rust-lang/rust/commit/5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a"}], "stats": {"total": 26, "additions": 1, "deletions": 25}, "files": [{"sha": "b2914d234496e53237577dbf0b22e004d759af4a", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d643ae1bbf4da44c00c2aff87cb3081a93ec44bb/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643ae1bbf4da44c00c2aff87cb3081a93ec44bb/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=d643ae1bbf4da44c00c2aff87cb3081a93ec44bb", "patch": "@@ -2,7 +2,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::OpaqueTyOrigin;\n-use rustc_infer::infer::error_reporting::unexpected_hidden_region_diagnostic;\n use rustc_infer::infer::TyCtxtInferExt as _;\n use rustc_infer::infer::{DefiningAnchor, InferCtxt};\n use rustc_infer::traits::{Obligation, ObligationCause, TraitEngine};\n@@ -248,9 +247,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         // after producing an error for each of them.\n         let definition_ty = instantiated_ty.ty.fold_with(&mut ReverseMapper::new(\n             self.tcx,\n-            opaque_type_key,\n             map,\n-            instantiated_ty.ty,\n             instantiated_ty.span,\n         ));\n         debug!(?definition_ty);\n@@ -427,27 +424,20 @@ fn check_opaque_type_parameter_valid(\n \n struct ReverseMapper<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-\n-    key: ty::OpaqueTypeKey<'tcx>,\n     map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>>,\n     do_not_error: bool,\n \n-    /// initially `Some`, set to `None` once error has been reported\n-    hidden_ty: Option<Ty<'tcx>>,\n-\n     /// Span of function being checked.\n     span: Span,\n }\n \n impl<'tcx> ReverseMapper<'tcx> {\n     fn new(\n         tcx: TyCtxt<'tcx>,\n-        key: ty::OpaqueTypeKey<'tcx>,\n         map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>>,\n-        hidden_ty: Ty<'tcx>,\n         span: Span,\n     ) -> Self {\n-        Self { tcx, key, map, do_not_error: false, hidden_ty: Some(hidden_ty), span }\n+        Self { tcx, map, do_not_error: false, span }\n     }\n \n     fn fold_kind_no_missing_regions_error(&mut self, kind: GenericArg<'tcx>) -> GenericArg<'tcx> {\n@@ -493,24 +483,10 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n             }\n         }\n \n-        let generics = self.tcx().generics_of(self.key.def_id);\n         match self.map.get(&r.into()).map(|k| k.unpack()) {\n             Some(GenericArgKind::Lifetime(r1)) => r1,\n             Some(u) => panic!(\"region mapped to unexpected kind: {:?}\", u),\n             None if self.do_not_error => self.tcx.lifetimes.re_static,\n-            None if generics.parent.is_some() => {\n-                if let Some(hidden_ty) = self.hidden_ty.take() {\n-                    unexpected_hidden_region_diagnostic(\n-                        self.tcx,\n-                        self.tcx.def_span(self.key.def_id),\n-                        hidden_ty,\n-                        r,\n-                        self.key,\n-                    )\n-                    .emit();\n-                }\n-                self.tcx.lifetimes.re_static\n-            }\n             None => {\n                 self.tcx\n                     .sess"}]}