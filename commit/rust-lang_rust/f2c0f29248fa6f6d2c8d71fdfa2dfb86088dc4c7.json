{"sha": "f2c0f29248fa6f6d2c8d71fdfa2dfb86088dc4c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYzBmMjkyNDhmYTZmNmQyYzhkNzFmZGZhMmRmYjg2MDg4ZGM0Yzc=", "commit": {"author": {"name": "Aris Merchant", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-06-09T07:40:31Z"}, "committer": {"name": "Aris Merchant", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-07-06T05:13:38Z"}, "message": "Change env var getters to error recoverably\n\nBefore this, `std`'s env var getter functions would panic on\nreceiving certain invalid inputs. This commit makes them\nreturn a `None` or `Err` instead.", "tree": {"sha": "34379bc05439a360e054954946625e22dc8b2aa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34379bc05439a360e054954946625e22dc8b2aa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2c0f29248fa6f6d2c8d71fdfa2dfb86088dc4c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c0f29248fa6f6d2c8d71fdfa2dfb86088dc4c7", "html_url": "https://github.com/rust-lang/rust/commit/f2c0f29248fa6f6d2c8d71fdfa2dfb86088dc4c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2c0f29248fa6f6d2c8d71fdfa2dfb86088dc4c7/comments", "author": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5a406bb665213a0ceb6980921a39617d35a2e2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a406bb665213a0ceb6980921a39617d35a2e2d", "html_url": "https://github.com/rust-lang/rust/commit/d5a406bb665213a0ceb6980921a39617d35a2e2d"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "c0f9cc1f64e9f2cbf8afe4034057ee6918453b27", "filename": "library/std/src/env.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f2c0f29248fa6f6d2c8d71fdfa2dfb86088dc4c7/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c0f29248fa6f6d2c8d71fdfa2dfb86088dc4c7/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=f2c0f29248fa6f6d2c8d71fdfa2dfb86088dc4c7", "patch": "@@ -188,12 +188,8 @@ impl fmt::Debug for VarsOs {\n /// Errors if the environment variable is not present.\n /// Errors if the environment variable is not valid Unicode. If this is not desired, consider using\n /// [`var_os`].\n-///\n-/// # Panics\n-///\n-/// This function may panic if `key` is empty, contains an ASCII equals sign\n-/// `'='` or the NUL character `'\\0'`, or when the value contains the NUL\n-/// character.\n+/// May error if the `key` is empty, contains an ASCII equals sign `'='`, or contains the NUL character `'\\0'`.\n+/// May error when the value contains the NUL character.\n ///\n /// # Examples\n ///\n@@ -219,18 +215,18 @@ fn _var(key: &OsStr) -> Result<String, VarError> {\n }\n \n /// Fetches the environment variable `key` from the current process, returning\n-/// [`None`] if the variable isn't set.\n-///\n-/// # Panics\n-///\n-/// This function may panic if `key` is empty, contains an ASCII equals sign\n-/// `'='` or the NUL character `'\\0'`, or when the value contains the NUL\n-/// character.\n+/// [`None`] if the variable isn't set or there's another error.\n ///\n /// Note that the method will not check if the environment variable\n /// is valid Unicode. If you want to have an error on invalid UTF-8,\n /// use the [`var`] function instead.\n ///\n+/// # Errors\n+///\n+/// Errors if the variable isn't set.\n+/// May error if the `key` is empty, contains an ASCII equals sign `'='`, or contains the NUL character `'\\0'`.\n+/// May error when the value contains the NUL character.\n+///\n /// # Examples\n ///\n /// ```\n@@ -248,8 +244,7 @@ pub fn var_os<K: AsRef<OsStr>>(key: K) -> Option<OsString> {\n }\n \n fn _var_os(key: &OsStr) -> Option<OsString> {\n-    os_imp::getenv(key)\n-        .unwrap_or_else(|e| panic!(\"failed to get environment variable `{:?}`: {}\", key, e))\n+    os_imp::getenv(key).ok()?\n }\n \n /// The error type for operations interacting with environment variables."}]}