{"sha": "73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZmE5YjJkYTJlZTgyYzkxYTVjOGQ2MDViOTFmMjJmMTllNGQ3NGI=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-09T16:44:47Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::Mutablity variants", "tree": {"sha": "c860b482cbc076ac8a87745b5b8f23b88c49d25d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c860b482cbc076ac8a87745b5b8f23b88c49d25d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "html_url": "https://github.com/rust-lang/rust/commit/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14e09ad4686bb20a98acfd7d930386f6330d2b4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/14e09ad4686bb20a98acfd7d930386f6330d2b4d", "html_url": "https://github.com/rust-lang/rust/commit/14e09ad4686bb20a98acfd7d930386f6330d2b4d"}], "stats": {"total": 160, "additions": 87, "deletions": 73}, "files": [{"sha": "974b5c4bc6c2a4db0aebf93035bc4ebaf416a1d0", "filename": "src/librustc/middle/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Frelate.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -105,8 +105,8 @@ impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::TypeAndMut<'tcx> {\n         } else {\n             let mutbl = a.mutbl;\n             let variance = match mutbl {\n-                ast::MutImmutable => ty::Covariant,\n-                ast::MutMutable => ty::Invariant,\n+                ast::Mutability::MutImmutable => ty::Covariant,\n+                ast::Mutability::MutMutable => ty::Invariant,\n             };\n             let ty = try!(relation.relate_with_variance(variance, &a.ty, &b.ty));\n             Ok(ty::TypeAndMut {ty: ty, mutbl: mutbl})"}, {"sha": "e9dfa1bd164dc4e526e8f2bc3ba5c9c44c27621d", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -427,8 +427,8 @@ pub fn lower_explicit_self_underscore(lctx: &LoweringContext,\n \n pub fn lower_mutability(_lctx: &LoweringContext, m: Mutability) -> hir::Mutability {\n     match m {\n-        MutMutable => hir::MutMutable,\n-        MutImmutable => hir::MutImmutable,\n+        Mutability::Mutable => hir::MutMutable,\n+        Mutability::Immutable => hir::MutImmutable,\n     }\n }\n "}, {"sha": "edbc6424ccd90dcc64e45ffb062550ef5f623739", "filename": "src/librustc_passes/const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibrustc_passes%2Fconst_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibrustc_passes%2Fconst_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconst_fn.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'v> Visitor<'v> for CheckConstFn<'a> {\n         for arg in &fd.inputs {\n             match arg.pat.node {\n                 ast::PatWild => {}\n-                ast::PatIdent(ast::BindingMode::ByValue(ast::MutImmutable), _, None) => {}\n+                ast::PatIdent(ast::BindingMode::ByValue(ast::Mutability::Immutable), _, None) => {}\n                 _ => {\n                     span_err!(self.sess, arg.pat.span, E0022,\n                               \"arguments of constant functions can only \\"}, {"sha": "68c04427c65f32c2825a6093234f3d8c0741f3a4", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -807,7 +807,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         self.visit_pat(&p);\n \n         for &(id, ref p, immut, _) in &collector.collected_paths {\n-            let value = if immut == ast::MutImmutable {\n+            let value = if immut == ast::Mutability::Immutable {\n                 value.to_string()\n             } else {\n                 \"<mutable>\".to_string()\n@@ -1200,7 +1200,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n             let def = def_map.get(&id).unwrap().full_def();\n             match def {\n                 Def::Local(_, id) => {\n-                    let value = if immut == ast::MutImmutable {\n+                    let value = if immut == ast::Mutability::Immutable {\n                         self.span.snippet(p.span).to_string()\n                     } else {\n                         \"<mutable>\".to_string()"}, {"sha": "ff19640d645073579dad0de711c8d6195dec61bd", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -248,8 +248,10 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n                 // If the variable is immutable, save the initialising expression.\n                 let (value, keyword) = match mt {\n-                    ast::MutMutable => (String::from(\"<mutable>\"), keywords::Mut),\n-                    ast::MutImmutable => (self.span_utils.snippet(expr.span), keywords::Static),\n+                    ast::Mutability::Mutable => (String::from(\"<mutable>\"), keywords::Mut),\n+                    ast::Mutability::Immutable => {\n+                        (self.span_utils.snippet(expr.span), keywords::Static)\n+                    },\n                 };\n \n                 let sub_span = self.span_utils.sub_span_after_keyword(item.span, keyword);\n@@ -758,12 +760,12 @@ impl<'v> Visitor<'v> for PathCollector {\n         match p.node {\n             ast::PatStruct(ref path, _, _) => {\n                 self.collected_paths.push((p.id, path.clone(),\n-                                           ast::MutMutable, recorder::TypeRef));\n+                                           ast::Mutability::Mutable, recorder::TypeRef));\n             }\n             ast::PatEnum(ref path, _) |\n             ast::PatQPath(_, ref path) => {\n                 self.collected_paths.push((p.id, path.clone(),\n-                                           ast::MutMutable, recorder::VarRef));\n+                                           ast::Mutability::Mutable, recorder::VarRef));\n             }\n             ast::PatIdent(bm, ref path1, _) => {\n                 debug!(\"PathCollector, visit ident in pat {}: {:?} {:?}\",\n@@ -774,7 +776,7 @@ impl<'v> Visitor<'v> for PathCollector {\n                     // Even if the ref is mut, you can't change the ref, only\n                     // the data pointed at, so showing the initialising expression\n                     // is still worthwhile.\n-                    ast::BindingMode::ByRef(_) => ast::MutImmutable,\n+                    ast::BindingMode::ByRef(_) => ast::Mutability::Immutable,\n                     ast::BindingMode::ByValue(mt) => mt,\n                 };\n                 // collect path for either visit_local or visit_arm"}, {"sha": "cfaa5fc4a96fb91fcb7b3b55fb990011b0095d1e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -10,7 +10,6 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::Mutability::*;\n pub use self::Pat_::*;\n pub use self::PathListItem_::*;\n pub use self::StrStyle::*;\n@@ -602,8 +601,8 @@ pub enum Pat_ {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum Mutability {\n-    MutMutable,\n-    MutImmutable,\n+    Mutable,\n+    Immutable,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]"}, {"sha": "e22cdab97e8ed5ac119d2f8413ed049c2af673c9", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -66,9 +66,10 @@ pub fn path_to_ident(path: &Path) -> Option<Ident> {\n }\n \n pub fn ident_to_pat(id: NodeId, s: Span, i: Ident) -> P<Pat> {\n+    let spanned = codemap::Spanned{ span: s, node: i };\n     P(Pat {\n         id: id,\n-        node: PatIdent(BindingMode::ByValue(MutImmutable), codemap::Spanned{span:s, node:i}, None),\n+        node: PatIdent(BindingMode::ByValue(Mutability::Immutable), spanned, None),\n         span: s\n     })\n }"}, {"sha": "2e343948c42b78c84b143548b5232870a634f414", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -207,7 +207,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n         span,\n         ecx.ty_ident(span, ecx.ident_of(\"str\")),\n         Some(static_),\n-        ast::MutImmutable,\n+        ast::Mutability::Immutable,\n     );\n \n     let ty = ecx.ty("}, {"sha": "e32dcc99a0e5c7f4062f15b3ca375493b52baff3", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -512,7 +512,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn stmt_let(&self, sp: Span, mutbl: bool, ident: ast::Ident,\n                 ex: P<ast::Expr>) -> P<ast::Stmt> {\n         let pat = if mutbl {\n-            self.pat_ident_binding_mode(sp, ident, ast::BindingMode::ByValue(ast::MutMutable))\n+            let binding_mode = ast::BindingMode::ByValue(ast::Mutability::Mutable);\n+            self.pat_ident_binding_mode(sp, ident, binding_mode)\n         } else {\n             self.pat_ident(sp, ident)\n         };\n@@ -536,7 +537,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                       ex: P<ast::Expr>)\n                       -> P<ast::Stmt> {\n         let pat = if mutbl {\n-            self.pat_ident_binding_mode(sp, ident, ast::BindingMode::ByValue(ast::MutMutable))\n+            let binding_mode = ast::BindingMode::ByValue(ast::Mutability::Mutable);\n+            self.pat_ident_binding_mode(sp, ident, binding_mode)\n         } else {\n             self.pat_ident(sp, ident)\n         };\n@@ -636,10 +638,10 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(sp, ast::ExprKind::TupField(expr, id))\n     }\n     fn expr_addr_of(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr> {\n-        self.expr(sp, ast::ExprKind::AddrOf(ast::MutImmutable, e))\n+        self.expr(sp, ast::ExprKind::AddrOf(ast::Mutability::Immutable, e))\n     }\n     fn expr_mut_addr_of(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr> {\n-        self.expr(sp, ast::ExprKind::AddrOf(ast::MutMutable, e))\n+        self.expr(sp, ast::ExprKind::AddrOf(ast::Mutability::Mutable, e))\n     }\n \n     fn expr_call(&self, span: Span, expr: P<ast::Expr>, args: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n@@ -813,7 +815,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.pat(span, ast::PatLit(expr))\n     }\n     fn pat_ident(&self, span: Span, ident: ast::Ident) -> P<ast::Pat> {\n-        self.pat_ident_binding_mode(span, ident, ast::BindingMode::ByValue(ast::MutImmutable))\n+        let binding_mode = ast::BindingMode::ByValue(ast::Mutability::Immutable);\n+        self.pat_ident_binding_mode(span, ident, binding_mode)\n     }\n \n     fn pat_ident_binding_mode(&self,"}, {"sha": "850b4365256d8fbec97b97e5338e6285f724fff5", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -896,7 +896,7 @@ mod tests {\n         assert!(panictry!(parser.parse_pat())\n                 == P(ast::Pat{\n                 id: ast::DUMMY_NODE_ID,\n-                node: ast::PatIdent(ast::BindingMode::ByValue(ast::MutImmutable),\n+                node: ast::PatIdent(ast::BindingMode::ByValue(ast::Mutability::Immutable),\n                                     Spanned{ span:sp(0, 1),\n                                              node: str_to_ident(\"b\")\n                     },\n@@ -932,7 +932,7 @@ mod tests {\n                                     pat: P(ast::Pat {\n                                         id: ast::DUMMY_NODE_ID,\n                                         node: ast::PatIdent(\n-                                            ast::BindingMode::ByValue(ast::MutImmutable),\n+                                            ast::BindingMode::ByValue(ast::Mutability::Immutable),\n                                                 Spanned{\n                                                     span: sp(6,7),\n                                                     node: str_to_ident(\"b\")},"}, {"sha": "11638a3d4247b2d40a04fa7999a5856fb78e0023", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -27,7 +27,7 @@ use ast::{Ident, Inherited, ImplItem, Item, ItemKind};\n use ast::{Lit, LitKind, UintTy};\n use ast::Local;\n use ast::MacStmtStyle;\n-use ast::{MutImmutable, MutMutable, Mac_};\n+use ast::Mac_;\n use ast::{MutTy, Mutability};\n use ast::NamedField;\n use ast::{Pat, PatBox, PatEnum, PatIdent, PatLit, PatQPath, PatMac, PatRange};\n@@ -1417,16 +1417,16 @@ impl<'a> Parser<'a> {\n \n     pub fn parse_ptr(&mut self) -> PResult<'a, MutTy> {\n         let mutbl = if self.eat_keyword(keywords::Mut) {\n-            MutMutable\n+            Mutability::Mutable\n         } else if self.eat_keyword(keywords::Const) {\n-            MutImmutable\n+            Mutability::Immutable\n         } else {\n             let span = self.last_span;\n             self.span_err(span,\n                           \"bare raw pointers are no longer allowed, you should \\\n                            likely use `*mut T`, but otherwise `*T` is now \\\n                            known as `*const T`\");\n-            MutImmutable\n+            Mutability::Immutable\n         };\n         let t = try!(self.parse_ty());\n         Ok(MutTy { ty: t, mutbl: mutbl })\n@@ -1924,9 +1924,9 @@ impl<'a> Parser<'a> {\n     /// Parse mutability declaration (mut/const/imm)\n     pub fn parse_mutability(&mut self) -> PResult<'a, Mutability> {\n         if self.eat_keyword(keywords::Mut) {\n-            Ok(MutMutable)\n+            Ok(Mutability::Mutable)\n         } else {\n-            Ok(MutImmutable)\n+            Ok(Mutability::Immutable)\n         }\n     }\n \n@@ -3350,10 +3350,10 @@ impl<'a> Parser<'a> {\n                 hi = self.last_span.hi;\n \n                 let bind_type = match (is_ref, is_mut) {\n-                    (true, true) => BindingMode::ByRef(MutMutable),\n-                    (true, false) => BindingMode::ByRef(MutImmutable),\n-                    (false, true) => BindingMode::ByValue(MutMutable),\n-                    (false, false) => BindingMode::ByValue(MutImmutable),\n+                    (true, true) => BindingMode::ByRef(Mutability::Mutable),\n+                    (true, false) => BindingMode::ByRef(Mutability::Immutable),\n+                    (false, true) => BindingMode::ByValue(Mutability::Mutable),\n+                    (false, false) => BindingMode::ByValue(Mutability::Immutable),\n                 };\n                 let fieldpath = codemap::Spanned{span:self.last_span, node:fieldname};\n                 let fieldpat = P(ast::Pat{\n@@ -3448,7 +3448,7 @@ impl<'a> Parser<'a> {\n             // At this point, token != _, &, &&, (, [\n             if self.eat_keyword(keywords::Mut) {\n                 // Parse mut ident @ pat\n-                pat = try!(self.parse_pat_ident(BindingMode::ByValue(MutMutable)));\n+                pat = try!(self.parse_pat_ident(BindingMode::ByValue(Mutability::Mutable)));\n             } else if self.eat_keyword(keywords::Ref) {\n                 // Parse ref ident @ pat / ref mut ident @ pat\n                 let mutbl = try!(self.parse_mutability());\n@@ -3481,7 +3481,8 @@ impl<'a> Parser<'a> {\n                         // Parse ident @ pat\n                         // This can give false positives and parse nullary enums,\n                         // they are dealt with later in resolve\n-                        pat = try!(self.parse_pat_ident(BindingMode::ByValue(MutImmutable)));\n+                        let binding_mode = BindingMode::ByValue(Mutability::Immutable);\n+                        pat = try!(self.parse_pat_ident(binding_mode));\n                     }\n                 } else {\n                     let (qself, path) = if self.eat_lt() {\n@@ -4408,7 +4409,7 @@ impl<'a> Parser<'a> {\n \n             if this.look_ahead(1, |t| t.is_keyword(keywords::SelfValue)) {\n                 this.bump();\n-                Ok(SelfKind::Region(None, MutImmutable, try!(this.expect_self_ident())))\n+                Ok(SelfKind::Region(None, Mutability::Immutable, try!(this.expect_self_ident())))\n             } else if this.look_ahead(1, |t| t.is_mutability()) &&\n                       this.look_ahead(2, |t| t.is_keyword(keywords::SelfValue)) {\n                 this.bump();\n@@ -4418,7 +4419,8 @@ impl<'a> Parser<'a> {\n                       this.look_ahead(2, |t| t.is_keyword(keywords::SelfValue)) {\n                 this.bump();\n                 let lifetime = try!(this.parse_lifetime());\n-                Ok(SelfKind::Region(Some(lifetime), MutImmutable, try!(this.expect_self_ident())))\n+                let ident = try!(this.expect_self_ident());\n+                Ok(SelfKind::Region(Some(lifetime), Mutability::Immutable, ident))\n             } else if this.look_ahead(1, |t| t.is_lifetime()) &&\n                       this.look_ahead(2, |t| t.is_mutability()) &&\n                       this.look_ahead(3, |t| t.is_keyword(keywords::SelfValue)) {\n@@ -4439,7 +4441,7 @@ impl<'a> Parser<'a> {\n         let mut self_ident_lo = self.span.lo;\n         let mut self_ident_hi = self.span.hi;\n \n-        let mut mutbl_self = MutImmutable;\n+        let mut mutbl_self = Mutability::Immutable;\n         let explicit_self = match self.token {\n             token::BinOp(token::And) => {\n                 let eself = try!(maybe_parse_borrowed_explicit_self(self));\n@@ -4454,7 +4456,7 @@ impl<'a> Parser<'a> {\n                 let _mutability = if self.token.is_mutability() {\n                     try!(self.parse_mutability())\n                 } else {\n-                    MutImmutable\n+                    Mutability::Immutable\n                 };\n                 if self.is_self_ident() {\n                     let span = self.span;\n@@ -5527,7 +5529,11 @@ impl<'a> Parser<'a> {\n \n         if self.eat_keyword(keywords::Static) {\n             // STATIC ITEM\n-            let m = if self.eat_keyword(keywords::Mut) {MutMutable} else {MutImmutable};\n+            let m = if self.eat_keyword(keywords::Mut) {\n+                Mutability::Mutable\n+            } else {\n+                Mutability::Immutable\n+            };\n             let (ident, item_, extra_attrs) = try!(self.parse_item_const(Some(m)));\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,"}, {"sha": "b14117c9704fb0356d54d15e568e68af7e81088b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -417,7 +417,7 @@ pub fn lit_to_string(l: &ast::Lit) -> String {\n }\n \n pub fn explicit_self_to_string(explicit_self: &ast::SelfKind) -> String {\n-    to_string(|s| s.print_explicit_self(explicit_self, ast::MutImmutable).map(|_| {}))\n+    to_string(|s| s.print_explicit_self(explicit_self, ast::Mutability::Immutable).map(|_| {}))\n }\n \n pub fn variant_to_string(var: &ast::Variant) -> String {\n@@ -965,8 +965,8 @@ impl<'a> State<'a> {\n             ast::TyKind::Ptr(ref mt) => {\n                 try!(word(&mut self.s, \"*\"));\n                 match mt.mutbl {\n-                    ast::MutMutable => try!(self.word_nbsp(\"mut\")),\n-                    ast::MutImmutable => try!(self.word_nbsp(\"const\")),\n+                    ast::Mutability::Mutable => try!(self.word_nbsp(\"mut\")),\n+                    ast::Mutability::Immutable => try!(self.word_nbsp(\"const\")),\n                 }\n                 try!(self.print_type(&*mt.ty));\n             }\n@@ -1147,7 +1147,7 @@ impl<'a> State<'a> {\n             ast::ItemKind::Static(ref ty, m, ref expr) => {\n                 try!(self.head(&visibility_qualified(item.vis,\n                                                     \"static\")));\n-                if m == ast::MutMutable {\n+                if m == ast::Mutability::Mutable {\n                     try!(self.word_space(\"mut\"));\n                 }\n                 try!(self.print_ident(item.ident));\n@@ -2464,8 +2464,8 @@ impl<'a> State<'a> {\n                         try!(self.word_nbsp(\"ref\"));\n                         try!(self.print_mutability(mutbl));\n                     }\n-                    ast::BindingMode::ByValue(ast::MutImmutable) => {}\n-                    ast::BindingMode::ByValue(ast::MutMutable) => {\n+                    ast::BindingMode::ByValue(ast::Mutability::Immutable) => {}\n+                    ast::BindingMode::ByValue(ast::Mutability::Mutable) => {\n                         try!(self.word_nbsp(\"mut\"));\n                     }\n                 }\n@@ -2534,7 +2534,7 @@ impl<'a> State<'a> {\n             }\n             ast::PatRegion(ref inner, mutbl) => {\n                 try!(word(&mut self.s, \"&\"));\n-                if mutbl == ast::MutMutable {\n+                if mutbl == ast::Mutability::Mutable {\n                     try!(word(&mut self.s, \"mut \"));\n                 }\n                 try!(self.print_pat(&**inner));\n@@ -2669,10 +2669,10 @@ impl<'a> State<'a> {\n         let mut first = true;\n         if let Some(explicit_self) = opt_explicit_self {\n             let m = match *explicit_self {\n-                ast::SelfKind::Static => ast::MutImmutable,\n+                ast::SelfKind::Static => ast::Mutability::Immutable,\n                 _ => match decl.inputs[0].pat.node {\n                     ast::PatIdent(ast::BindingMode::ByValue(m), _, _) => m,\n-                    _ => ast::MutImmutable\n+                    _ => ast::Mutability::Immutable\n                 }\n             };\n             first = !try!(self.print_explicit_self(explicit_self, m));\n@@ -2946,8 +2946,8 @@ impl<'a> State<'a> {\n     pub fn print_mutability(&mut self,\n                             mutbl: ast::Mutability) -> io::Result<()> {\n         match mutbl {\n-            ast::MutMutable => self.word_nbsp(\"mut\"),\n-            ast::MutImmutable => Ok(()),\n+            ast::Mutability::Mutable => self.word_nbsp(\"mut\"),\n+            ast::Mutability::Immutable => Ok(()),\n         }\n     }\n "}, {"sha": "92ecadd7ae811b2d5ee264c84e5a03f33b63596b", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -593,7 +593,7 @@ fn mk_tests(cx: &TestCtxt) -> P<ast::Item> {\n     let static_type = ecx.ty_rptr(sp,\n                                   ecx.ty(sp, ast::TyKind::Vec(struct_type)),\n                                   Some(static_lt),\n-                                  ast::MutImmutable);\n+                                  ast::Mutability::Immutable);\n     // static TESTS: $static_type = &[...];\n     ecx.item_const(sp,\n                    ecx.ident_of(\"TESTS\"),\n@@ -613,7 +613,7 @@ fn mk_test_descs(cx: &TestCtxt) -> P<ast::Expr> {\n \n     P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n-        node: ast::ExprKind::AddrOf(ast::MutImmutable,\n+        node: ast::ExprKind::AddrOf(ast::Mutability::Immutable,\n             P(ast::Expr {\n                 id: ast::DUMMY_NODE_ID,\n                 node: ast::ExprKind::Vec(cx.testfns.iter().map(|test| {"}, {"sha": "6e769cd38106210e58234b5cc158df7478a3cb09", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -27,7 +27,7 @@ pub fn expand_deriving_debug(cx: &mut ExtCtxt,\n {\n     // &mut ::std::fmt::Formatter\n     let fmtr = Ptr(Box::new(Literal(path_std!(cx, core::fmt::Formatter))),\n-                   Borrowed(None, ast::MutMutable));\n+                   Borrowed(None, ast::Mutability::Mutable));\n \n     let trait_def = TraitDef {\n         span: span,"}, {"sha": "092f8548966dabcbf7201f42380f84581a60f757", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -14,7 +14,7 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast;\n-use syntax::ast::{MetaItem, Expr, MutMutable};\n+use syntax::ast::{MetaItem, Expr, Mutability};\n use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n@@ -72,7 +72,7 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n                 },\n                 explicit_self: None,\n                 args: vec!(Ptr(Box::new(Literal(Path::new_local(\"__D\"))),\n-                            Borrowed(None, MutMutable))),\n+                            Borrowed(None, Mutability::Mutable))),\n                 ret_ty: Literal(Path::new_(\n                     pathvec_std!(cx, core::result::Result),\n                     None,"}, {"sha": "614a6381962384a2a7d5570f4dc43949a9a18feb", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -91,7 +91,7 @@\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n-use syntax::ast::{MetaItem, Expr, ExprKind, MutMutable};\n+use syntax::ast::{MetaItem, Expr, ExprKind, Mutability};\n use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt,Annotatable};\n use syntax::ext::build::AstBuilder;\n@@ -148,7 +148,7 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n                 },\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec!(Ptr(Box::new(Literal(Path::new_local(\"__S\"))),\n-                            Borrowed(None, MutMutable))),\n+                            Borrowed(None, Mutability::Mutable))),\n                 ret_ty: Literal(Path::new_(\n                     pathvec_std!(cx, core::result::Result),\n                     None,"}, {"sha": "b316b1e7d868ab851dfc247f199dba70438bb1f0", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -864,7 +864,9 @@ impl<'a> MethodDef<'a> {\n         let self_arg = match explicit_self.node {\n             ast::SelfKind::Static => None,\n             // creating fresh self id\n-            _ => Some(ast::Arg::new_self(trait_.span, ast::MutImmutable, special_idents::self_))\n+            _ => Some(ast::Arg::new_self(trait_.span,\n+                                         ast::Mutability::Immutable,\n+                                         special_idents::self_))\n         };\n         let args = {\n             let args = arg_types.into_iter().map(|(name, ty)| {\n@@ -942,7 +944,7 @@ impl<'a> MethodDef<'a> {\n                                              struct_def,\n                                              &format!(\"__self_{}\",\n                                                      i),\n-                                             ast::MutImmutable);\n+                                             ast::Mutability::Immutable);\n             patterns.push(pat);\n             raw_fields.push(ident_expr);\n         }\n@@ -1135,11 +1137,12 @@ impl<'a> MethodDef<'a> {\n         let mut match_arms: Vec<ast::Arm> = variants.iter().enumerate()\n             .map(|(index, variant)| {\n                 let mk_self_pat = |cx: &mut ExtCtxt, self_arg_name: &str| {\n-                    let (p, idents) = trait_.create_enum_variant_pattern(cx, type_ident,\n-                                                                         &**variant,\n-                                                                         self_arg_name,\n-                                                                         ast::MutImmutable);\n-                    (cx.pat(sp, ast::PatRegion(p, ast::MutImmutable)), idents)\n+                    let (p, idents) = trait_.create_enum_variant_pattern(\n+                        cx, type_ident,\n+                        &**variant,\n+                        self_arg_name,\n+                        ast::Mutability::Immutable);\n+                    (cx.pat(sp, ast::PatRegion(p, ast::Mutability::Immutable)), idents)\n                 };\n \n                 // A single arm has form (&VariantK, &VariantK, ...) => BodyK"}, {"sha": "a924cc0695377f8bc02d9257c93a649926c48aea", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -98,7 +98,7 @@ pub enum Ty<'a> {\n }\n \n pub fn borrowed_ptrty<'r>() -> PtrTy<'r> {\n-    Borrowed(None, ast::MutImmutable)\n+    Borrowed(None, ast::Mutability::Immutable)\n }\n pub fn borrowed<'r>(ty: Box<Ty<'r>>) -> Ty<'r> {\n     Ptr(ty, borrowed_ptrty())"}, {"sha": "371ba732b48965aac9905e83aa3ee1016b560043", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -11,7 +11,7 @@\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n-use syntax::ast::{MetaItem, Expr, MutMutable};\n+use syntax::ast::{MetaItem, Expr, Mutability};\n use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n@@ -43,7 +43,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                                   vec![path_std!(cx, core::hash::Hasher)])],\n                 },\n                 explicit_self: borrowed_explicit_self(),\n-                args: vec!(Ptr(Box::new(Literal(arg)), Borrowed(None, MutMutable))),\n+                args: vec!(Ptr(Box::new(Literal(arg)), Borrowed(None, Mutability::Mutable))),\n                 ret_ty: nil_ty(),\n                 attributes: vec![],\n                 is_unsafe: false,"}, {"sha": "63ec9cac07317d9f0a3eb8766b0ff7c42123f534", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -42,7 +42,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenT\n                                                    Some(cx.lifetime(sp,\n                                                         cx.ident_of(\n                                                             \"'static\").name)),\n-                                                   ast::MutImmutable)),\n+                                                   ast::Mutability::Immutable)),\n                                    Vec::new()))\n       }\n       Ok(s) => {"}, {"sha": "4e24eb9f6d7a33283d6e015e7d0e7c8524af7885", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=73fa9b2da2ee82c91a5c8d605b91f22f19e4d74b", "patch": "@@ -450,10 +450,10 @@ impl<'a, 'b> Context<'a, 'b> {\n         let ty = ecx.ty_rptr(sp,\n             ecx.ty(sp, ast::TyKind::Vec(piece_ty)),\n             Some(ecx.lifetime(sp, special_idents::static_lifetime.name)),\n-            ast::MutImmutable);\n+            ast::Mutability::Immutable);\n         let slice = ecx.expr_vec_slice(sp, pieces);\n         // static instead of const to speed up codegen by not requiring this to be inlined\n-        let st = ast::ItemKind::Static(ty, ast::MutImmutable, slice);\n+        let st = ast::ItemKind::Static(ty, ast::Mutability::Immutable, slice);\n \n         let name = ecx.ident_of(name);\n         let item = ecx.item(sp, name, vec![], st);\n@@ -480,7 +480,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 self.fmtsp,\n                 self.ecx.ty_ident(self.fmtsp, self.ecx.ident_of(\"str\")),\n                 Some(static_lifetime),\n-                ast::MutImmutable);\n+                ast::Mutability::Immutable);\n         let pieces = Context::static_array(self.ecx,\n                                            \"__STATIC_FMTSTR\",\n                                            piece_ty,"}]}