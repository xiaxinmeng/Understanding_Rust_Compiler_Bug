{"sha": "dbedf4003f6b8402f42cd079fa82b046a32d2845", "node_id": "C_kwDOAAsO6NoAKGRiZWRmNDAwM2Y2Yjg0MDJmNDJjZDA3OWZhODJiMDQ2YTMyZDI4NDU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-19T23:44:37Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-19T23:46:09Z"}, "message": "Reformat type_of", "tree": {"sha": "faccf6bcfa343f431b9d024f7edfad2eaf582ce6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faccf6bcfa343f431b9d024f7edfad2eaf582ce6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbedf4003f6b8402f42cd079fa82b046a32d2845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbedf4003f6b8402f42cd079fa82b046a32d2845", "html_url": "https://github.com/rust-lang/rust/commit/dbedf4003f6b8402f42cd079fa82b046a32d2845", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbedf4003f6b8402f42cd079fa82b046a32d2845/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "252fa782836785d947ec67ef915553b30b32ce68", "url": "https://api.github.com/repos/rust-lang/rust/commits/252fa782836785d947ec67ef915553b30b32ce68", "html_url": "https://github.com/rust-lang/rust/commit/252fa782836785d947ec67ef915553b30b32ce68"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "4bbea87890429237bec62a80acd1499de5125b08", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/dbedf4003f6b8402f42cd079fa82b046a32d2845/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbedf4003f6b8402f42cd079fa82b046a32d2845/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=dbedf4003f6b8402f42cd079fa82b046a32d2845", "patch": "@@ -278,8 +278,11 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n             }\n             TraitItemKind::Const(ty, body_id) => body_id\n                 .and_then(|body_id| {\n-                    is_suggestable_infer_ty(ty)\n-                        .then(|| infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident, \"constant\",))\n+                    is_suggestable_infer_ty(ty).then(|| {\n+                        infer_placeholder_type(\n+                            tcx, def_id, body_id, ty.span, item.ident, \"constant\",\n+                        )\n+                    })\n                 })\n                 .unwrap_or_else(|| icx.to_ty(ty)),\n             TraitItemKind::Type(_, Some(ty)) => icx.to_ty(ty),\n@@ -335,14 +338,15 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n                     }\n                 }\n                 ItemKind::TyAlias(self_ty, _) => icx.to_ty(self_ty),\n-                ItemKind::Impl(hir::Impl { self_ty, .. }) => {\n-                    match self_ty.find_self_aliases() {\n-                        spans if spans.len() > 0 => {\n-                            let guar = tcx.sess.emit_err(crate::errors::SelfInImplSelf { span: spans.into(), note: () });\n-                            tcx.ty_error(guar)\n-                        },\n-                        _ => icx.to_ty(*self_ty),\n+                ItemKind::Impl(hir::Impl { self_ty, .. }) => match self_ty.find_self_aliases() {\n+                    spans if spans.len() > 0 => {\n+                        let guar = tcx.sess.emit_err(crate::errors::SelfInImplSelf {\n+                            span: spans.into(),\n+                            note: (),\n+                        });\n+                        tcx.ty_error(guar)\n                     }\n+                    _ => icx.to_ty(*self_ty),\n                 },\n                 ItemKind::Fn(..) => {\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n@@ -364,7 +368,10 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n                     ..\n                 }) => {\n                     if in_trait && !tcx.impl_defaultness(owner).has_value() {\n-                        span_bug!(tcx.def_span(def_id), \"tried to get type of this RPITIT with no definition\");\n+                        span_bug!(\n+                            tcx.def_span(def_id),\n+                            \"tried to get type of this RPITIT with no definition\"\n+                        );\n                     }\n                     find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n                 }\n@@ -453,15 +460,12 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n                     tcx.adt_def(tcx.hir().get_parent_item(hir_id)).repr().discr_type().to_ty(tcx)\n                 }\n \n-                Node::TypeBinding(\n-                    TypeBinding {\n-                        hir_id: binding_id,\n-                        kind: TypeBindingKind::Equality { term: Term::Const(e) },\n-                        ident,\n-                        ..\n-                    },\n-                ) if let Node::TraitRef(trait_ref) =\n-                    tcx.hir().get_parent(*binding_id)\n+                Node::TypeBinding(TypeBinding {\n+                    hir_id: binding_id,\n+                    kind: TypeBindingKind::Equality { term: Term::Const(e) },\n+                    ident,\n+                    ..\n+                }) if let Node::TraitRef(trait_ref) = tcx.hir().get_parent(*binding_id)\n                     && e.hir_id == hir_id =>\n                 {\n                     let Some(trait_def_id) = trait_ref.trait_def_id() else {\n@@ -487,10 +491,13 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>>\n                     }\n                 }\n \n-                Node::TypeBinding(\n-                    TypeBinding { hir_id: binding_id, gen_args, kind, ident, .. },\n-                ) if let Node::TraitRef(trait_ref) =\n-                    tcx.hir().get_parent(*binding_id)\n+                Node::TypeBinding(TypeBinding {\n+                    hir_id: binding_id,\n+                    gen_args,\n+                    kind,\n+                    ident,\n+                    ..\n+                }) if let Node::TraitRef(trait_ref) = tcx.hir().get_parent(*binding_id)\n                     && let Some((idx, _)) =\n                         gen_args.args.iter().enumerate().find(|(_, arg)| {\n                             if let GenericArg::Const(ct) = arg {"}]}