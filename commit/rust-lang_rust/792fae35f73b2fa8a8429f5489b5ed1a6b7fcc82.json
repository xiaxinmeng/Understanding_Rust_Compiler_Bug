{"sha": "792fae35f73b2fa8a8429f5489b5ed1a6b7fcc82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MmZhZTM1ZjczYjJmYThhODQyOWY1NDg5YjVlZDFhNmI3ZmNjODI=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2014-06-05T19:31:57Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2014-06-05T19:31:57Z"}, "message": "Purged \"record\" from the manual.\n\nAlso updated/corrected a few other details in the tuple and struct sections.", "tree": {"sha": "f23115f2dfcff8c78d7d63e5fab24c6435d06540", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f23115f2dfcff8c78d7d63e5fab24c6435d06540"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/792fae35f73b2fa8a8429f5489b5ed1a6b7fcc82", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/792fae35f73b2fa8a8429f5489b5ed1a6b7fcc82", "html_url": "https://github.com/rust-lang/rust/commit/792fae35f73b2fa8a8429f5489b5ed1a6b7fcc82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/792fae35f73b2fa8a8429f5489b5ed1a6b7fcc82/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e7147f3ef69ea7b5dd7eb1e3f621f0938672cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e7147f3ef69ea7b5dd7eb1e3f621f0938672cc", "html_url": "https://github.com/rust-lang/rust/commit/57e7147f3ef69ea7b5dd7eb1e3f621f0938672cc"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "f17f63012bc70c9003017edc62e2cc8856926b01", "filename": "src/doc/rust.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/792fae35f73b2fa8a8429f5489b5ed1a6b7fcc82/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/792fae35f73b2fa8a8429f5489b5ed1a6b7fcc82/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=792fae35f73b2fa8a8429f5489b5ed1a6b7fcc82", "patch": "@@ -2524,10 +2524,10 @@ Note that for a given *unit-like* structure type, this will always be the same v\n \n A structure expression can terminate with the syntax `..` followed by an expression to denote a functional update.\n The expression following `..` (the base) must have the same structure type as the new structure type being formed.\n-The entire expression denotes the result of allocating a new structure\n+The entire expression denotes the result of constructing a new structure\n (with the same type as the base expression)\n with the given values for the fields that were explicitly specified\n-and the values in the base record for all other fields.\n+and the values in the base expression for all other fields.\n \n ~~~~\n # struct Point3d { x: int, y: int, z: int }\n@@ -2575,15 +2575,15 @@ when not immediately followed by a parenthesized expression-list (the latter is\n A field expression denotes a field of a [structure](#structure-types).\n \n ~~~~ {.ignore .field}\n-myrecord.myfield;\n+mystruct.myfield;\n foo().x;\n (Struct {a: 10, b: 20}).a;\n ~~~~\n \n-A field access on a record is an [lvalue](#lvalues-rvalues-and-temporaries) referring to the value of that field.\n-When the field is mutable, it can be [assigned](#assignment-expressions) to.\n+A field access is an [lvalue](#lvalues-rvalues-and-temporaries) referring to the value of that field.\n+When the type providing the field inherits mutabilty, it can be [assigned](#assignment-expressions) to.\n \n-When the type of the expression to the left of the dot is a pointer to a record or structure,\n+Also, if the type of the expression to the left of the dot is a pointer,\n it is automatically dereferenced to make the field access possible.\n \n ### Vector expressions\n@@ -3038,7 +3038,7 @@ match_pat : pat [ '|' pat ] * [ \"if\" expr ] ? ;\n \n A `match` expression branches on a *pattern*. The exact form of matching that\n occurs depends on the pattern. Patterns consist of some combination of\n-literals, destructured vectors or enum constructors, structures, records and\n+literals, destructured vectors or enum constructors, structures and\n tuples, variable binding specifications, wildcards (`..`), and placeholders\n (`_`). A `match` expression has a *head expression*, which is the value to\n compare to the patterns. The type of the patterns must equal the type of the\n@@ -3315,17 +3315,16 @@ such as `&str` or `String`.\n \n ### Tuple types\n \n-The tuple type-constructor forms a new heterogeneous product of values similar\n-to the record type-constructor. The differences are as follows:\n-\n-* tuple elements cannot be mutable, unlike record fields\n-* tuple elements are not named and can be accessed only by pattern-matching\n+A tuple *type* is a heterogeneous product of other types, called the *elements*\n+of the tuple. It has no nominal name and is instead structurally typed.\n \n Tuple types and values are denoted by listing the types or values of their\n elements, respectively, in a parenthesized, comma-separated\n list.\n \n-The members of a tuple are laid out in memory contiguously, like a record, in\n+Because tuple elements don't have a name, they can only be accessed by pattern-matching.\n+\n+The members of a tuple are laid out in memory contiguously, in\n order specified by the tuple type.\n \n An example of a tuple type and its use:\n@@ -3377,12 +3376,13 @@ of the type.[^structtype]\n \n New instances of a `struct` can be constructed with a [struct expression](#structure-expressions).\n \n-The memory order of fields in a `struct` is given by the item defining it.\n-Fields may be given in any order in a corresponding struct *expression*;\n-the resulting `struct` value will always be laid out in memory in the order specified by the corresponding *item*.\n+The memory layout of a `struct` is undefined by default to allow for compiler optimziations like\n+field reordering, but it can be fixed with the `#[repr(...)]` attribute.\n+In either case, fields may be given in any order in a corresponding struct *expression*;\n+the resulting `struct` value will always have the same memory layout.\n \n The fields of a `struct` may be qualified by [visibility modifiers](#re-exporting-and-visibility),\n-to restrict access to implementation-private data in a structure.\n+to allow access to data in a structure outside a module.\n \n A _tuple struct_ type is just like a structure type, except that the fields are anonymous.\n \n@@ -3933,7 +3933,7 @@ The runtime provides C and Rust code to assist with various built-in types,\n such as vectors, strings, and the low level communication system (ports,\n channels, tasks).\n \n-Support for other built-in types such as simple types, tuples, records, and\n+Support for other built-in types such as simple types, tuples and\n enums is open-coded by the Rust compiler.\n \n ### Task scheduling and communication"}]}