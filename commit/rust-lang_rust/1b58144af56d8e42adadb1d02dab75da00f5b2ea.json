{"sha": "1b58144af56d8e42adadb1d02dab75da00f5b2ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNTgxNDRhZjU2ZDhlNDJhZGFkYjFkMDJkYWI3NWRhMDBmNWIyZWE=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-28T21:05:40Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-28T21:05:40Z"}, "message": "Merge remote-tracking branch 'upstream/master' into rustup", "tree": {"sha": "3d758b9a65dae3c591c70952214f3a7b8337facf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d758b9a65dae3c591c70952214f3a7b8337facf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b58144af56d8e42adadb1d02dab75da00f5b2ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b58144af56d8e42adadb1d02dab75da00f5b2ea", "html_url": "https://github.com/rust-lang/rust/commit/1b58144af56d8e42adadb1d02dab75da00f5b2ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b58144af56d8e42adadb1d02dab75da00f5b2ea/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "952ec7d06660277dedf3436a9f50952a9caa6523", "url": "https://api.github.com/repos/rust-lang/rust/commits/952ec7d06660277dedf3436a9f50952a9caa6523", "html_url": "https://github.com/rust-lang/rust/commit/952ec7d06660277dedf3436a9f50952a9caa6523"}, {"sha": "db6fb90bc0d9cbf4ddf1bfa560b9e8db10851a84", "url": "https://api.github.com/repos/rust-lang/rust/commits/db6fb90bc0d9cbf4ddf1bfa560b9e8db10851a84", "html_url": "https://github.com/rust-lang/rust/commit/db6fb90bc0d9cbf4ddf1bfa560b9e8db10851a84"}], "stats": {"total": 572, "additions": 302, "deletions": 270}, "files": [{"sha": "575cbd60792fb96511e5e7432ee0fc980620e751", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1559,6 +1559,7 @@ Released 2018-09-13\n [`deref_addrof`]: https://rust-lang.github.io/rust-clippy/master/index.html#deref_addrof\n [`derive_hash_xor_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_hash_xor_eq\n [`derive_ord_xor_partial_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_ord_xor_partial_ord\n+[`disallowed_method`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_method\n [`diverging_sub_expression`]: https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n [`doc_markdown`]: https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown\n [`double_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_comparisons"}, {"sha": "62a8be0abf22c5a08743aa5e4092eaf612927bf6", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -5,7 +5,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are over 350 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are over 400 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "581c3242e3745c81ee8202db7a28bf7601d5f9ac", "filename": "clippy_lints/src/disallowed_method.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_method.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -0,0 +1,73 @@\n+use crate::utils::span_lint;\n+\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::Symbol;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Lints for specific trait methods defined in clippy.toml\n+    ///\n+    /// **Why is this bad?** Some methods are undesirable in certain contexts,\n+    /// and it would be beneficial to lint for them as needed.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// // example code where clippy issues a warning\n+    /// foo.bad_method(); // Foo::bad_method is disallowed in the configuration\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// // example code which does not raise clippy warning\n+    /// goodStruct.bad_method(); // GoodStruct::bad_method is not disallowed\n+    /// ```\n+    pub DISALLOWED_METHOD,\n+    nursery,\n+    \"use of a disallowed method call\"\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct DisallowedMethod {\n+    disallowed: FxHashSet<Vec<Symbol>>,\n+}\n+\n+impl DisallowedMethod {\n+    pub fn new(disallowed: &FxHashSet<String>) -> Self {\n+        Self {\n+            disallowed: disallowed\n+                .iter()\n+                .map(|s| s.split(\"::\").map(|seg| Symbol::intern(seg)).collect::<Vec<_>>())\n+                .collect(),\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(DisallowedMethod => [DISALLOWED_METHOD]);\n+\n+impl<'tcx> LateLintPass<'tcx> for DisallowedMethod {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if let ExprKind::MethodCall(_path, _, _args, _) = &expr.kind {\n+            let def_id = cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();\n+\n+            let method_call = cx.get_def_path(def_id);\n+            if self.disallowed.contains(&method_call) {\n+                let method = method_call\n+                    .iter()\n+                    .map(|s| s.to_ident_string())\n+                    .collect::<Vec<_>>()\n+                    .join(\"::\");\n+\n+                span_lint(\n+                    cx,\n+                    DISALLOWED_METHOD,\n+                    expr.span,\n+                    &format!(\"use of a disallowed method `{}`\", method),\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "529c2450541d714c3eadeec39fe14bf8d26f4b7c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -176,6 +176,7 @@ mod dbg_macro;\n mod default_trait_access;\n mod dereference;\n mod derive;\n+mod disallowed_method;\n mod doc;\n mod double_comparison;\n mod double_parens;\n@@ -526,6 +527,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &derive::DERIVE_ORD_XOR_PARTIAL_ORD,\n         &derive::EXPL_IMPL_CLONE_ON_COPY,\n         &derive::UNSAFE_DERIVE_DESERIALIZE,\n+        &disallowed_method::DISALLOWED_METHOD,\n         &doc::DOC_MARKDOWN,\n         &doc::MISSING_ERRORS_DOC,\n         &doc::MISSING_SAFETY_DOC,\n@@ -1119,6 +1121,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n     store.register_late_pass(|| box manual_strip::ManualStrip);\n     store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n+    let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n+    store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n+\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1808,6 +1813,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n         LintId::of(&attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n         LintId::of(&cognitive_complexity::COGNITIVE_COMPLEXITY),\n+        LintId::of(&disallowed_method::DISALLOWED_METHOD),\n         LintId::of(&fallible_impl_from::FALLIBLE_IMPL_FROM),\n         LintId::of(&floating_point_arithmetic::IMPRECISE_FLOPS),\n         LintId::of(&floating_point_arithmetic::SUBOPTIMAL_FLOPS),"}, {"sha": "7f998c63f497b6eb336e06b505b55490560a8cc9", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -2134,7 +2134,7 @@ enum VarState {\n     DontWarn,\n }\n \n-/// Scan a for loop for variables that are incremented exactly once.\n+/// Scan a for loop for variables that are incremented exactly once and not used after that.\n struct IncrementVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,          // context reference\n     states: FxHashMap<HirId, VarState>, // incremented variables\n@@ -2154,6 +2154,10 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n         if let Some(def_id) = var_def_id(self.cx, expr) {\n             if let Some(parent) = get_parent_expr(self.cx, expr) {\n                 let state = self.states.entry(def_id).or_insert(VarState::Initial);\n+                if *state == VarState::IncrOnce {\n+                    *state = VarState::DontWarn;\n+                    return;\n+                }\n \n                 match parent.kind {\n                     ExprKind::AssignOp(op, ref lhs, ref rhs) => {"}, {"sha": "3e786da28dfe84224ba1cb9784b47e596c135a5d", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,10 +1,10 @@\n+use crate::utils::qualify_min_const_fn::is_min_const_fn;\n use crate::utils::{fn_has_unsatisfiable_preds, has_drop, is_entrypoint_fn, span_lint, trait_ref_of_method};\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n-use crate::utils::qualify_min_const_fn::is_min_const_fn;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n use rustc_typeck::hir_ty_to_ty;"}, {"sha": "17d950169fd3e77f2e7855e37adb083d65d6e562", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -216,18 +216,19 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for Rc<T> and Arc<T> when T is a mutable buffer type such as String or Vec\n+    /// **What it does:** Checks for `Rc<T>` and `Arc<T>` when `T` is a mutable buffer type such as `String` or `Vec`.\n     ///\n-    /// **Why is this bad?** Expressions such as Rc<String> have no advantage over Rc<str>, since\n-    /// it is larger and involves an extra level of indirection, and doesn't implement Borrow<str>.\n+    /// **Why is this bad?** Expressions such as `Rc<String>` usually have no advantage over `Rc<str>`, since\n+    /// it is larger and involves an extra level of indirection, and doesn't implement `Borrow<str>`.\n     ///\n-    /// While mutating a buffer type would still be possible with Rc::get_mut(), it only\n-    /// works if there are no additional references yet, which defeats the purpose of\n+    /// While mutating a buffer type would still be possible with `Rc::get_mut()`, it only\n+    /// works if there are no additional references yet, which usually defeats the purpose of\n     /// enclosing it in a shared ownership type. Instead, additionally wrapping the inner\n-    /// type with an interior mutable container (such as RefCell or Mutex) would normally\n+    /// type with an interior mutable container (such as `RefCell` or `Mutex`) would normally\n     /// be used.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** This pattern can be desirable to avoid the overhead of a `RefCell` or `Mutex` for\n+    /// cases where mutation only happens before there are any additional references.\n     ///\n     /// **Example:**\n     /// ```rust,ignore"}, {"sha": "03f8c5a2c075ebee7e3194c380b25b1243a25af8", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -164,6 +164,8 @@ define_Conf! {\n     (max_fn_params_bools, \"max_fn_params_bools\": u64, 3),\n     /// Lint: WILDCARD_IMPORTS. Whether to allow certain wildcard imports (prelude, super in tests).\n     (warn_on_all_wildcard_imports, \"warn_on_all_wildcard_imports\": bool, false),\n+    /// Lint: DISALLOWED_METHOD. The list of blacklisted methods to lint about. NB: `bar` is not here since it has legitimate uses\n+    (disallowed_methods, \"disallowed_methods\": Vec<String>, Vec::<String>::new()),\n }\n \n impl Default for Conf {"}, {"sha": "dfe2aadffc04d6757454d2f262182d70aa8b6048", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -18,9 +18,9 @@ pub mod internal_lints;\n pub mod numeric_literal;\n pub mod paths;\n pub mod ptr;\n+pub mod qualify_min_const_fn;\n pub mod sugg;\n pub mod usage;\n-pub mod qualify_min_const_fn;\n \n pub use self::attrs::*;\n pub use self::diagnostics::*;\n@@ -47,7 +47,6 @@ use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, layout::IntegerExt, Ty, TyCtxt, TypeFoldable};\n-use rustc_mir::const_eval;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::symbol::{self, kw, Symbol};\n@@ -884,19 +883,11 @@ pub fn is_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n \n /// Checks if an expression is constructing a tuple-like enum variant or struct\n pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    fn has_no_arguments(cx: &LateContext<'_>, def_id: DefId) -> bool {\n-        cx.tcx.fn_sig(def_id).skip_binder().inputs().is_empty()\n-    }\n-\n     if let ExprKind::Call(ref fun, _) = expr.kind {\n         if let ExprKind::Path(ref qp) = fun.kind {\n             let res = cx.qpath_res(qp, fun.hir_id);\n             return match res {\n                 def::Res::Def(DefKind::Variant | DefKind::Ctor(..), ..) => true,\n-                // FIXME: check the constness of the arguments, see https://github.com/rust-lang/rust-clippy/pull/5682#issuecomment-638681210\n-                def::Res::Def(DefKind::Fn | DefKind::AssocFn, def_id) if has_no_arguments(cx, def_id) => {\n-                    const_eval::is_const_fn(cx.tcx, def_id)\n-                },\n                 def::Res::Def(_, def_id) => cx.tcx.is_promotable_const_fn(def_id),\n                 _ => false,\n             };"}, {"sha": "3773b9d9a2ee9ad8e0c19798439efd3d6745d71c", "filename": "clippy_lints/src/utils/qualify_min_const_fn.rs", "status": "modified", "additions": 75, "deletions": 118, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,9 +1,12 @@\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::mir::*;\n+use rustc_middle::mir::{\n+    Body, CastKind, NullOp, Operand, Place, ProjectionElem, Rvalue, Statement, StatementKind, Terminator,\n+    TerminatorKind,\n+};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, adjustment::PointerCast, Ty, TyCtxt};\n-use rustc_span::symbol::{sym};\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use std::borrow::Cow;\n@@ -23,15 +26,9 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n                 | ty::PredicateAtom::ConstEvaluatable(..)\n                 | ty::PredicateAtom::ConstEquate(..)\n                 | ty::PredicateAtom::TypeWellFormedFromEnv(..) => continue,\n-                ty::PredicateAtom::ObjectSafe(_) => {\n-                    panic!(\"object safe predicate on function: {:#?}\", predicate)\n-                }\n-                ty::PredicateAtom::ClosureKind(..) => {\n-                    panic!(\"closure kind predicate on function: {:#?}\", predicate)\n-                }\n-                ty::PredicateAtom::Subtype(_) => {\n-                    panic!(\"subtype predicate on function: {:#?}\", predicate)\n-                }\n+                ty::PredicateAtom::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n+                ty::PredicateAtom::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),\n+                ty::PredicateAtom::Subtype(_) => panic!(\"subtype predicate on function: {:#?}\", predicate),\n                 ty::PredicateAtom::Trait(pred, _) => {\n                     if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n                         continue;\n@@ -47,12 +44,12 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n                                  on const fn parameters are unstable\"\n                                     .into(),\n                             ));\n-                        }\n+                        },\n                         // other kinds of bounds are either tautologies\n                         // or cause errors in other passes\n                         _ => continue,\n                     }\n-                }\n+                },\n             }\n         }\n         match predicates.parent {\n@@ -92,24 +89,23 @@ fn check_ty(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n \n         match ty.kind() {\n             ty::Ref(_, _, hir::Mutability::Mut) => {\n-                    return Err((span, \"mutable references in const fn are unstable\".into()));\n-            }\n+                return Err((span, \"mutable references in const fn are unstable\".into()));\n+            },\n             ty::Opaque(..) => return Err((span, \"`impl Trait` in const fn is unstable\".into())),\n             ty::FnPtr(..) => {\n-                    return Err((span, \"function pointers in const fn are unstable\".into()));\n-            }\n+                return Err((span, \"function pointers in const fn are unstable\".into()));\n+            },\n             ty::Dynamic(preds, _) => {\n                 for pred in preds.iter() {\n                     match pred.skip_binder() {\n-                        ty::ExistentialPredicate::AutoTrait(_)\n-                        | ty::ExistentialPredicate::Projection(_) => {\n+                        ty::ExistentialPredicate::AutoTrait(_) | ty::ExistentialPredicate::Projection(_) => {\n                             return Err((\n                                 span,\n                                 \"trait bounds other than `Sized` \\\n                                  on const fn parameters are unstable\"\n                                     .into(),\n                             ));\n-                        }\n+                        },\n                         ty::ExistentialPredicate::Trait(trait_ref) => {\n                             if Some(trait_ref.def_id) != tcx.lang_items().sized_trait() {\n                                 return Err((\n@@ -119,55 +115,40 @@ fn check_ty(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n                                         .into(),\n                                 ));\n                             }\n-                        }\n+                        },\n                     }\n                 }\n-            }\n-            _ => {}\n+            },\n+            _ => {},\n         }\n     }\n     Ok(())\n }\n \n-fn check_rvalue(\n-    tcx: TyCtxt<'tcx>,\n-    body: &Body<'tcx>,\n-    def_id: DefId,\n-    rvalue: &Rvalue<'tcx>,\n-    span: Span,\n-) -> McfResult {\n+fn check_rvalue(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, rvalue: &Rvalue<'tcx>, span: Span) -> McfResult {\n     match rvalue {\n-        Rvalue::ThreadLocalRef(_) => {\n-            Err((span, \"cannot access thread local storage in const fn\".into()))\n-        }\n-        Rvalue::Repeat(operand, _) | Rvalue::Use(operand) => {\n-            check_operand(tcx, operand, span, body)\n-        }\n-        Rvalue::Len(place)\n-        | Rvalue::Discriminant(place)\n-        | Rvalue::Ref(_, _, place)\n-        | Rvalue::AddressOf(_, place) => check_place(tcx, *place, span,  body),\n+        Rvalue::ThreadLocalRef(_) => Err((span, \"cannot access thread local storage in const fn\".into())),\n+        Rvalue::Repeat(operand, _) | Rvalue::Use(operand) => check_operand(tcx, operand, span, body),\n+        Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n+            check_place(tcx, *place, span, body)\n+        },\n         Rvalue::Cast(CastKind::Misc, operand, cast_ty) => {\n             use rustc_middle::ty::cast::CastTy;\n             let cast_in = CastTy::from_ty(operand.ty(body, tcx)).expect(\"bad input type for cast\");\n             let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n             match (cast_in, cast_out) {\n                 (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) => {\n                     Err((span, \"casting pointers to ints is unstable in const fn\".into()))\n-                }\n+                },\n                 _ => check_operand(tcx, operand, span, body),\n             }\n-        }\n-        Rvalue::Cast(\n-            CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer),\n-            operand,\n-            _,\n-        ) => check_operand(tcx, operand, span, body),\n+        },\n+        Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer), operand, _) => {\n+            check_operand(tcx, operand, span, body)\n+        },\n         Rvalue::Cast(\n             CastKind::Pointer(\n-                PointerCast::UnsafeFnPointer\n-                | PointerCast::ClosureFnPointer(_)\n-                | PointerCast::ReifyFnPointer,\n+                PointerCast::UnsafeFnPointer | PointerCast::ClosureFnPointer(_) | PointerCast::ReifyFnPointer,\n             ),\n             _,\n             _,\n@@ -177,10 +158,7 @@ fn check_rvalue(\n                 deref_ty.ty\n             } else {\n                 // We cannot allow this for now.\n-                return Err((\n-                    span,\n-                    \"unsizing casts are only allowed for references right now\".into(),\n-                ));\n+                return Err((span, \"unsizing casts are only allowed for references right now\".into()));\n             };\n             let unsized_ty = tcx.struct_tail_erasing_lifetimes(pointee_ty, tcx.param_env(def_id));\n             if let ty::Slice(_) | ty::Str = unsized_ty.kind() {\n@@ -191,7 +169,7 @@ fn check_rvalue(\n                 // We just can't allow trait objects until we have figured out trait method calls.\n                 Err((span, \"unsizing casts are not allowed in const fn\".into()))\n             }\n-        }\n+        },\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, lhs, rhs) | Rvalue::CheckedBinaryOp(_, lhs, rhs) => {\n             check_operand(tcx, lhs, span, body)?;\n@@ -200,53 +178,44 @@ fn check_rvalue(\n             if ty.is_integral() || ty.is_bool() || ty.is_char() {\n                 Ok(())\n             } else {\n-                Err((span, \"only int, `bool` and `char` operations are stable in const fn\".into()))\n+                Err((\n+                    span,\n+                    \"only int, `bool` and `char` operations are stable in const fn\".into(),\n+                ))\n             }\n-        }\n+        },\n         Rvalue::NullaryOp(NullOp::SizeOf, _) => Ok(()),\n-        Rvalue::NullaryOp(NullOp::Box, _) => {\n-            Err((span, \"heap allocations are not allowed in const fn\".into()))\n-        }\n+        Rvalue::NullaryOp(NullOp::Box, _) => Err((span, \"heap allocations are not allowed in const fn\".into())),\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() {\n                 check_operand(tcx, operand, span, body)\n             } else {\n                 Err((span, \"only int and `bool` operations are stable in const fn\".into()))\n             }\n-        }\n+        },\n         Rvalue::Aggregate(_, operands) => {\n             for operand in operands {\n                 check_operand(tcx, operand, span, body)?;\n             }\n             Ok(())\n-        }\n+        },\n     }\n }\n \n-fn check_statement(\n-    tcx: TyCtxt<'tcx>,\n-    body: &Body<'tcx>,\n-    def_id: DefId,\n-    statement: &Statement<'tcx>,\n-) -> McfResult {\n+fn check_statement(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, statement: &Statement<'tcx>) -> McfResult {\n     let span = statement.source_info.span;\n     match &statement.kind {\n         StatementKind::Assign(box (place, rval)) => {\n-            check_place(tcx, *place, span,  body)?;\n+            check_place(tcx, *place, span, body)?;\n             check_rvalue(tcx, body, def_id, rval, span)\n-        }\n-\n-        StatementKind::FakeRead(_, place) => check_place(tcx, **place, span, body),\n+        },\n \n+        StatementKind::FakeRead(_, place) |\n         // just an assignment\n-        StatementKind::SetDiscriminant { place, .. } => {\n-            check_place(tcx, **place, span,  body)\n-        }\n+        StatementKind::SetDiscriminant { place, .. } => check_place(tcx, **place, span, body),\n \n-        StatementKind::LlvmInlineAsm { .. } => {\n-            Err((span, \"cannot use inline assembly in const fn\".into()))\n-        }\n+        StatementKind::LlvmInlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),\n \n         // These are all NOPs\n         StatementKind::StorageLive(_)\n@@ -258,12 +227,7 @@ fn check_statement(\n     }\n }\n \n-fn check_operand(\n-    tcx: TyCtxt<'tcx>,\n-    operand: &Operand<'tcx>,\n-    span: Span,\n-    body: &Body<'tcx>,\n-) -> McfResult {\n+fn check_operand(tcx: TyCtxt<'tcx>, operand: &Operand<'tcx>, span: Span, body: &Body<'tcx>) -> McfResult {\n     match operand {\n         Operand::Move(place) | Operand::Copy(place) => check_place(tcx, *place, span, body),\n         Operand::Constant(c) => match c.check_static_ptr(tcx) {\n@@ -273,41 +237,32 @@ fn check_operand(\n     }\n }\n \n-fn check_place(\n-    tcx: TyCtxt<'tcx>,\n-    place: Place<'tcx>,\n-    span: Span,\n-    body: &Body<'tcx>,\n-) -> McfResult {\n+fn check_place(tcx: TyCtxt<'tcx>, place: Place<'tcx>, span: Span, body: &Body<'tcx>) -> McfResult {\n     let mut cursor = place.projection.as_ref();\n-    while let &[ref proj_base @ .., elem] = cursor {\n+    while let [ref proj_base @ .., elem] = *cursor {\n         cursor = proj_base;\n         match elem {\n             ProjectionElem::Field(..) => {\n                 let base_ty = Place::ty_from(place.local, &proj_base, body, tcx).ty;\n                 if let Some(def) = base_ty.ty_adt_def() {\n                     // No union field accesses in `const fn`\n                     if def.is_union() {\n-                            return Err((span, \"accessing union fields is unstable\".into()));\n+                        return Err((span, \"accessing union fields is unstable\".into()));\n                     }\n                 }\n-            }\n+            },\n             ProjectionElem::ConstantIndex { .. }\n             | ProjectionElem::Downcast(..)\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Deref\n-            | ProjectionElem::Index(_) => {}\n+            | ProjectionElem::Index(_) => {},\n         }\n     }\n \n     Ok(())\n }\n \n-fn check_terminator(\n-    tcx: TyCtxt<'tcx>,\n-    body: &'a Body<'tcx>,\n-    terminator: &Terminator<'tcx>,\n-) -> McfResult {\n+fn check_terminator(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, terminator: &Terminator<'tcx>) -> McfResult {\n     let span = terminator.source_info.span;\n     match &terminator.kind {\n         TerminatorKind::FalseEdge { .. }\n@@ -317,20 +272,23 @@ fn check_terminator(\n         | TerminatorKind::Resume\n         | TerminatorKind::Unreachable => Ok(()),\n \n-        TerminatorKind::Drop { place, .. } => check_place(tcx, *place, span,  body),\n+        TerminatorKind::Drop { place, .. } => check_place(tcx, *place, span, body),\n         TerminatorKind::DropAndReplace { place, value, .. } => {\n-            check_place(tcx, *place, span,  body)?;\n+            check_place(tcx, *place, span, body)?;\n             check_operand(tcx, value, span, body)\n-        }\n+        },\n \n-        TerminatorKind::SwitchInt { discr, switch_ty: _, values: _, targets: _ } => {\n-            check_operand(tcx, discr, span, body)\n-        }\n+        TerminatorKind::SwitchInt {\n+            discr,\n+            switch_ty: _,\n+            values: _,\n+            targets: _,\n+        } => check_operand(tcx, discr, span, body),\n \n         TerminatorKind::Abort => Err((span, \"abort is not stable in const fn\".into())),\n         TerminatorKind::GeneratorDrop | TerminatorKind::Yield { .. } => {\n             Err((span, \"const fn generators are unstable\".into()))\n-        }\n+        },\n \n         TerminatorKind::Call {\n             func,\n@@ -342,8 +300,7 @@ fn check_terminator(\n         } => {\n             let fn_ty = func.ty(body, tcx);\n             if let ty::FnDef(fn_def_id, _) = *fn_ty.kind() {\n-                if !rustc_mir::const_eval::is_min_const_fn(tcx, fn_def_id)\n-                {\n+                if !rustc_mir::const_eval::is_min_const_fn(tcx, fn_def_id) {\n                     return Err((\n                         span,\n                         format!(\n@@ -359,9 +316,7 @@ fn check_terminator(\n                 // within const fns. `transmute` is allowed in all other const contexts.\n                 // This won't really scale to more intrinsics or functions. Let's allow const\n                 // transmutes in const fn before we add more hacks to this.\n-                if tcx.fn_sig(fn_def_id).abi() == RustIntrinsic\n-                    && tcx.item_name(fn_def_id) == sym::transmute\n-                {\n+                if tcx.fn_sig(fn_def_id).abi() == RustIntrinsic && tcx.item_name(fn_def_id) == sym::transmute {\n                     return Err((\n                         span,\n                         \"can only call `transmute` from const items, not `const fn`\".into(),\n@@ -377,14 +332,16 @@ fn check_terminator(\n             } else {\n                 Err((span, \"can only call other const fns within const fn\".into()))\n             }\n-        }\n+        },\n \n-        TerminatorKind::Assert { cond, expected: _, msg: _, target: _, cleanup: _ } => {\n-            check_operand(tcx, cond, span, body)\n-        }\n+        TerminatorKind::Assert {\n+            cond,\n+            expected: _,\n+            msg: _,\n+            target: _,\n+            cleanup: _,\n+        } => check_operand(tcx, cond, span, body),\n \n-        TerminatorKind::InlineAsm { .. } => {\n-            Err((span, \"cannot use inline assembly in const fn\".into()))\n-        }\n+        TerminatorKind::InlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),\n     }\n }"}, {"sha": "d9d60fffcd7ae79238566aa251c46b8ade76eaf1", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -235,8 +235,19 @@ impl EarlyLintPass for Write {\n     }\n \n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &MacCall) {\n+        fn is_build_script(cx: &EarlyContext<'_>) -> bool {\n+            // Cargo sets the crate name for build scripts to `build_script_build`\n+            cx.sess\n+                .opts\n+                .crate_name\n+                .as_ref()\n+                .map_or(false, |crate_name| crate_name == \"build_script_build\")\n+        }\n+\n         if mac.path == sym!(println) {\n-            span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `println!`\");\n+            if !is_build_script(cx) {\n+                span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `println!`\");\n+            }\n             if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n                 if fmt_str.symbol == Symbol::intern(\"\") {\n                     span_lint_and_sugg(\n@@ -251,7 +262,9 @@ impl EarlyLintPass for Write {\n                 }\n             }\n         } else if mac.path == sym!(print) {\n-            span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `print!`\");\n+            if !is_build_script(cx) {\n+                span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `print!`\");\n+            }\n             if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n                 if check_newlines(&fmt_str) {\n                     span_lint_and_then("}, {"sha": "3507168a3a96452abe013ab42094028e10d8db6a", "filename": "clippy_workspace_tests/build.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_workspace_tests%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/clippy_workspace_tests%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_workspace_tests%2Fbuild.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -0,0 +1,7 @@\n+#![deny(clippy::print_stdout)]\n+\n+fn main() {\n+    // Test for #6041\n+    println!(\"Hello\");\n+    print!(\"Hello\");\n+}"}, {"sha": "76e655ad60305a7a6c3c4e05c11af15ca7db5ece", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -381,6 +381,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"derive\",\n     },\n+    Lint {\n+        name: \"disallowed_method\",\n+        group: \"nursery\",\n+        desc: \"use of a disallowed method call\",\n+        deprecation: None,\n+        module: \"disallowed_method\",\n+    },\n     Lint {\n         name: \"diverging_sub_expression\",\n         group: \"complexity\","}, {"sha": "f0d73e9b0e2a340980f9cc3e339f372325328a84", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -71,7 +71,7 @@ fn default_config() -> compiletest::Config {\n     }\n \n     config.target_rustcflags = Some(format!(\n-        \"-L {0} -L {1} -Dwarnings -Zui-testing {2}\",\n+        \"--emit=metadata -L {0} -L {1} -Dwarnings -Zui-testing {2}\",\n         host_lib().join(\"deps\").display(),\n         cargo::TARGET_LIB.join(\"deps\").display(),\n         third_party_crates(),"}, {"sha": "a1f515e443dc57f5ec57d94eedadc227e1baf97b", "filename": "tests/ui-toml/toml_disallowed_method/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -0,0 +1 @@\n+disallowed-methods = [\"core::iter::traits::iterator::Iterator::sum\", \"regex::re_unicode::Regex::is_match\"]"}, {"sha": "3d3f0729abd85a82a9dcc5bf9541ba7a1fc29105", "filename": "tests/ui-toml/toml_disallowed_method/conf_disallowed_method.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -0,0 +1,13 @@\n+#![warn(clippy::disallowed_method)]\n+\n+extern crate regex;\n+use regex::Regex;\n+\n+fn main() {\n+    let a = vec![1, 2, 3, 4];\n+    let re = Regex::new(r\"ab.*c\").unwrap();\n+\n+    re.is_match(\"abc\");\n+\n+    a.iter().sum::<i32>();\n+}"}, {"sha": "ed91b5a6796d8a674ce82e8f54bb6e635a26ca79", "filename": "tests/ui-toml/toml_disallowed_method/conf_disallowed_method.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -0,0 +1,16 @@\n+error: use of a disallowed method `regex::re_unicode::Regex::is_match`\n+  --> $DIR/conf_disallowed_method.rs:10:5\n+   |\n+LL |     re.is_match(\"abc\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::disallowed-method` implied by `-D warnings`\n+\n+error: use of a disallowed method `core::iter::traits::iterator::Iterator::sum`\n+  --> $DIR/conf_disallowed_method.rs:12:5\n+   |\n+LL |     a.iter().sum::<i32>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "103ec27e7d7559c1c9ac20a336c466fa7767f259", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "01796d45f138a5495d6990bc9922cc156f0af3d6", "filename": "tests/ui/auxiliary/proc_macro_attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: --emit=link\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]"}, {"sha": "3df8be6c23230eb6bc8d0d49cc877efbf97ad172", "filename": "tests/ui/auxiliary/proc_macro_derive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: --emit=link\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]"}, {"sha": "948deba3ea6e3cb766a37360eba6816ed5ddfd0a", "filename": "tests/ui/crashes/associated-constant-ice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fassociated-constant-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fassociated-constant-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fassociated-constant-ice.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n /// Test for https://github.com/rust-lang/rust-clippy/issues/1698\n \n pub trait Trait {"}, {"sha": "619d11cefc46d165531cd8f7292f3d59ec1eacc3", "filename": "tests/ui/crashes/auxiliary/proc_macro_crash.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fauxiliary%2Fproc_macro_crash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fauxiliary%2Fproc_macro_crash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fauxiliary%2Fproc_macro_crash.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: --emit=link\n // no-prefer-dynamic\n // ^ compiletest by default builds all aux files as dylibs, but we don't want that for proc-macro\n // crates. If we don't set this, compiletest will override the `crate_type` attribute below and"}, {"sha": "98588be9cf82939cf9e924ac63ad1e305dd0b90d", "filename": "tests/ui/crashes/cc_seme.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fcc_seme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fcc_seme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fcc_seme.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #[allow(dead_code)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/478"}, {"sha": "dca32aa3b5615e25a2b5987fa56a02ef4bbc2e3d", "filename": "tests/ui/crashes/enum-glob-import-crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fenum-glob-import-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fenum-glob-import-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fenum-glob-import-crate.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![deny(clippy::all)]\n #![allow(unused_imports)]\n "}, {"sha": "b0a3d11bce4635a1d0745a07912566b986a62544", "filename": "tests/ui/crashes/ice-1588.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-1588.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-1588.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-1588.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(clippy::all)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/1588"}, {"sha": "81af88962a64d67b70e232c1010151c382f91944", "filename": "tests/ui/crashes/ice-1782.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-1782.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-1782.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-1782.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(dead_code, unused_variables)]\n \n /// Should not trigger an ICE in `SpanlessEq` / `consts::constant`"}, {"sha": "96a8fe6c24d5610f8a16df06f98df43020e8c4a2", "filename": "tests/ui/crashes/ice-1969.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-1969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-1969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-1969.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(clippy::all)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/1969"}, {"sha": "45b3b1869dde614e98273f1ea6b890561eaa363f", "filename": "tests/ui/crashes/ice-2499.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-2499.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-2499.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2499.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(dead_code, clippy::char_lit_as_u8, clippy::needless_bool)]\n \n /// Should not trigger an ICE in `SpanlessHash` / `consts::constant`"}, {"sha": "3f3986b6fc69294feb25ed0aed8076648b48d500", "filename": "tests/ui/crashes/ice-2594.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-2594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-2594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2594.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(dead_code, unused_variables)]\n \n /// Should not trigger an ICE in `SpanlessHash` / `consts::constant`"}, {"sha": "56024abc8f58dff58cc2141a06522c6dc1a3a737", "filename": "tests/ui/crashes/ice-2727.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-2727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-2727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2727.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n /// Test for https://github.com/rust-lang/rust-clippy/issues/2727\n \n pub fn f(new: fn()) {"}, {"sha": "f1a229f3f4faf3a706ee0e721ad6c26b973b6135", "filename": "tests/ui/crashes/ice-2760.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-2760.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-2760.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2760.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(\n     unused_variables,\n     clippy::blacklisted_name,"}, {"sha": "d44b0fae82001b3824b2a83c8d44e74eddacb0d8", "filename": "tests/ui/crashes/ice-2774.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-2774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-2774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2774.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n use std::collections::HashSet;\n \n // See rust-lang/rust-clippy#2774."}, {"sha": "8326e3663b054a8319c5ce2df2fe2b544e29dd09", "filename": "tests/ui/crashes/ice-2862.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-2862.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-2862.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2862.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n /// Test for https://github.com/rust-lang/rust-clippy/issues/2862\n \n pub trait FooMap {"}, {"sha": "6b1ceb5056933df6ee6bc782f118fcad3c1a7e72", "filename": "tests/ui/crashes/ice-2865.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-2865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-2865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2865.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #[allow(dead_code)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/2865"}, {"sha": "fef4d7db84ddf0d23a5671dab0d0791b6bf90db5", "filename": "tests/ui/crashes/ice-3151.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-3151.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-3151.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3151.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n /// Test for https://github.com/rust-lang/rust-clippy/issues/2865\n \n #[derive(Clone)]"}, {"sha": "7d62e315da2fca1912c2c12a3651c4c8c59d1bac", "filename": "tests/ui/crashes/ice-3462.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-3462.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-3462.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3462.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![warn(clippy::all)]\n #![allow(clippy::blacklisted_name)]\n #![allow(unused)]"}, {"sha": "1253ddcfaeb3bdb1c7f3daf2a4959064a81b2f89", "filename": "tests/ui/crashes/ice-3741.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-3741.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-3741.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3741.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,4 @@\n // aux-build:proc_macro_crash.rs\n-// run-pass\n \n #![warn(clippy::suspicious_else_formatting)]\n "}, {"sha": "cdf018cbc88d8426193b2951d64734312df50dc2", "filename": "tests/ui/crashes/ice-3747.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-3747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-3747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3747.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n /// Test for https://github.com/rust-lang/rust-clippy/issues/3747\n \n macro_rules! a {"}, {"sha": "2a4bc83f58a55508b19f0815ce3c3af4e5fadd86", "filename": "tests/ui/crashes/ice-4727.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-4727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-4727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-4727.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![warn(clippy::use_self)]\n \n #[path = \"auxiliary/ice-4727-aux.rs\"]"}, {"sha": "08b06961760ffea769f92b9f65a71b993a73699c", "filename": "tests/ui/crashes/ice-4760.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-4760.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-4760.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-4760.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,4 +1,3 @@\n-// run-pass\n const COUNT: usize = 2;\n struct Thing;\n trait Dummy {}"}, {"sha": "0cbceedbd6bdb195dd421a919eef50131c20ccb6", "filename": "tests/ui/crashes/ice-700.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice-700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-700.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![deny(clippy::all)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/700"}, {"sha": "30e4b11ec0bd450bcebc7c57465649e037f45e21", "filename": "tests/ui/crashes/ice_exacte_size.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice_exacte_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fice_exacte_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice_exacte_size.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![deny(clippy::all)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/1336"}, {"sha": "2f913292995eae24e5fe19af0f13aae65a5afb9e", "filename": "tests/ui/crashes/if_same_then_else.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fif_same_then_else.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(clippy::comparison_chain)]\n #![deny(clippy::if_same_then_else)]\n "}, {"sha": "05696e3d7d56f65050b3ca486145e04ca7717f38", "filename": "tests/ui/crashes/issue-825.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fissue-825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fissue-825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fissue-825.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(warnings)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/825"}, {"sha": "bb238c81ebc05376a3a60ffe49442101d5202b00", "filename": "tests/ui/crashes/issues_loop_mut_cond.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fissues_loop_mut_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fissues_loop_mut_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fissues_loop_mut_cond.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(dead_code)]\n \n /// Issue: https://github.com/rust-lang/rust-clippy/issues/2596"}, {"sha": "94c939665e6168a4e168e3f6cd3be91a3d0b7273", "filename": "tests/ui/crashes/match_same_arms_const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fmatch_same_arms_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fmatch_same_arms_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fmatch_same_arms_const.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![deny(clippy::match_same_arms)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/2427"}, {"sha": "a238e7896fc6b06357f24f358e03c01d28a4e648", "filename": "tests/ui/crashes/mut_mut_macro.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fmut_mut_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fmut_mut_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fmut_mut_macro.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![deny(clippy::mut_mut, clippy::zero_ptr, clippy::cmp_nan)]\n #![allow(dead_code)]\n "}, {"sha": "4f61c76828db8a00d57382a6f744ea49d856d781", "filename": "tests/ui/crashes/needless_borrow_fp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fneedless_borrow_fp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fneedless_borrow_fp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fneedless_borrow_fp.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #[deny(clippy::all)]\n #[derive(Debug)]\n pub enum Error {"}, {"sha": "676564b2445d506185bb5d9bafe68c15ab3538a9", "filename": "tests/ui/crashes/needless_lifetimes_impl_trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![deny(clippy::needless_lifetimes)]\n #![allow(dead_code)]\n "}, {"sha": "c7468493380c8eb3f994279c32102242fd477fc3", "filename": "tests/ui/crashes/procedural_macro.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fprocedural_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fprocedural_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fprocedural_macro.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #[macro_use]\n extern crate clippy_mini_macro_test;\n "}, {"sha": "a41bcb33b4460bf386f714057c377e50ea54ba14", "filename": "tests/ui/crashes/regressions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fregressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fregressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fregressions.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(clippy::blacklisted_name)]\n \n pub fn foo(bar: *const u8) {"}, {"sha": "8021ed4607dde798fea85e4031c9ae33a6710924", "filename": "tests/ui/crashes/returns.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Freturns.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n /// Test for https://github.com/rust-lang/rust-clippy/issues/1346\n \n #[deny(warnings)]"}, {"sha": "1ba7ac082132ff46c8087f940666cda16f4705c5", "filename": "tests/ui/crashes/single-match-else.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fsingle-match-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fsingle-match-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fsingle-match-else.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![warn(clippy::single_match_else)]\n \n //! Test for https://github.com/rust-lang/rust-clippy/issues/1588"}, {"sha": "60105a8213feb4f70e6395b983532972874087f0", "filename": "tests/ui/crashes/trivial_bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Ftrivial_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Ftrivial_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Ftrivial_bounds.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![feature(trivial_bounds)]\n #![allow(unused, trivial_bounds)]\n "}, {"sha": "6d2124c12fe98addb011233f1b737aa6077c341c", "filename": "tests/ui/crashes/used_underscore_binding_macro.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fused_underscore_binding_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fcrashes%2Fused_underscore_binding_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fused_underscore_binding_macro.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![allow(clippy::useless_attribute)] //issue #2910\n \n #[macro_use]"}, {"sha": "81d8221bd13e01d01e15ed5b35bdbea61867c6c7", "filename": "tests/ui/explicit_counter_loop.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -38,54 +38,54 @@ mod issue_1219 {\n         let text = \"banana\";\n         let mut count = 0;\n         for ch in text.chars() {\n+            println!(\"{}\", count);\n             if ch == 'a' {\n                 continue;\n             }\n             count += 1;\n-            println!(\"{}\", count);\n         }\n \n         // should not trigger the lint because the count is conditional\n         let text = \"banana\";\n         let mut count = 0;\n         for ch in text.chars() {\n+            println!(\"{}\", count);\n             if ch == 'a' {\n                 count += 1;\n             }\n-            println!(\"{}\", count);\n         }\n \n         // should trigger the lint because the count is not conditional\n         let text = \"banana\";\n         let mut count = 0;\n         for ch in text.chars() {\n+            println!(\"{}\", count);\n             count += 1;\n             if ch == 'a' {\n                 continue;\n             }\n-            println!(\"{}\", count);\n         }\n \n         // should trigger the lint because the count is not conditional\n         let text = \"banana\";\n         let mut count = 0;\n         for ch in text.chars() {\n+            println!(\"{}\", count);\n             count += 1;\n             for i in 0..2 {\n                 let _ = 123;\n             }\n-            println!(\"{}\", count);\n         }\n \n         // should not trigger the lint because the count is incremented multiple times\n         let text = \"banana\";\n         let mut count = 0;\n         for ch in text.chars() {\n+            println!(\"{}\", count);\n             count += 1;\n             for i in 0..2 {\n                 count += 1;\n             }\n-            println!(\"{}\", count);\n         }\n     }\n }\n@@ -96,30 +96,30 @@ mod issue_3308 {\n         let mut skips = 0;\n         let erasures = vec![];\n         for i in 0..10 {\n+            println!(\"{}\", skips);\n             while erasures.contains(&(i + skips)) {\n                 skips += 1;\n             }\n-            println!(\"{}\", skips);\n         }\n \n         // should not trigger the lint because the count is incremented multiple times\n         let mut skips = 0;\n         for i in 0..10 {\n+            println!(\"{}\", skips);\n             let mut j = 0;\n             while j < 5 {\n                 skips += 1;\n                 j += 1;\n             }\n-            println!(\"{}\", skips);\n         }\n \n         // should not trigger the lint because the count is incremented multiple times\n         let mut skips = 0;\n         for i in 0..10 {\n+            println!(\"{}\", skips);\n             for j in 0..5 {\n                 skips += 1;\n             }\n-            println!(\"{}\", skips);\n         }\n     }\n }\n@@ -145,3 +145,16 @@ mod issue_4732 {\n         let _closure = || println!(\"index: {}\", index);\n     }\n }\n+\n+mod issue_4677 {\n+    pub fn test() {\n+        let slice = &[1, 2, 3];\n+\n+        // should not trigger the lint because the count is used after incremented\n+        let mut count = 0;\n+        for _i in slice {\n+            count += 1;\n+            println!(\"{}\", count);\n+        }\n+    }\n+}"}, {"sha": "2045ffdb5f09d38996c36d57ffc9c56967859d96", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -58,6 +58,12 @@ fn or_fun_call() {\n     let without_default = Some(Foo);\n     without_default.unwrap_or_else(Foo::new);\n \n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert_with(String::new);\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert_with(String::new);\n+\n     let stringy = Some(String::from(\"\"));\n     let _ = stringy.unwrap_or_else(|| \"\".to_owned());\n \n@@ -110,23 +116,4 @@ fn f() -> Option<()> {\n     Some(())\n }\n \n-// Issue 5886 - const fn (with no arguments)\n-pub fn skip_const_fn_with_no_args() {\n-    const fn foo() -> Option<i32> {\n-        Some(42)\n-    }\n-    let _ = None.or(foo());\n-\n-    // See issue #5693.\n-    let mut map = std::collections::HashMap::new();\n-    map.insert(1, vec![1]);\n-    map.entry(1).or_insert(vec![]);\n-\n-    let mut map = HashMap::<u64, String>::new();\n-    map.entry(42).or_insert(String::new());\n-\n-    let mut btree = BTreeMap::<u64, String>::new();\n-    btree.entry(42).or_insert(String::new());\n-}\n-\n fn main() {}"}, {"sha": "522f31b72d01f4d94a590dd179a86c287d1c6db4", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -58,6 +58,12 @@ fn or_fun_call() {\n     let without_default = Some(Foo);\n     without_default.unwrap_or(Foo::new());\n \n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert(String::new());\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert(String::new());\n+\n     let stringy = Some(String::from(\"\"));\n     let _ = stringy.unwrap_or(\"\".to_owned());\n \n@@ -110,23 +116,4 @@ fn f() -> Option<()> {\n     Some(())\n }\n \n-// Issue 5886 - const fn (with no arguments)\n-pub fn skip_const_fn_with_no_args() {\n-    const fn foo() -> Option<i32> {\n-        Some(42)\n-    }\n-    let _ = None.or(foo());\n-\n-    // See issue #5693.\n-    let mut map = std::collections::HashMap::new();\n-    map.insert(1, vec![1]);\n-    map.entry(1).or_insert(vec![]);\n-\n-    let mut map = HashMap::<u64, String>::new();\n-    map.entry(42).or_insert(String::new());\n-\n-    let mut btree = BTreeMap::<u64, String>::new();\n-    btree.entry(42).or_insert(String::new());\n-}\n-\n fn main() {}"}, {"sha": "bc5978b538f16f69901c7d59576e840a95f95e23", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -60,23 +60,35 @@ error: use of `unwrap_or` followed by a function call\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n+error: use of `or_insert` followed by a function call\n+  --> $DIR/or_fun_call.rs:62:19\n+   |\n+LL |     map.entry(42).or_insert(String::new());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n+\n+error: use of `or_insert` followed by a function call\n+  --> $DIR/or_fun_call.rs:65:21\n+   |\n+LL |     btree.entry(42).or_insert(String::new());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n+\n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:62:21\n+  --> $DIR/or_fun_call.rs:68:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:87:35\n+  --> $DIR/or_fun_call.rs:93:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:91:10\n+  --> $DIR/or_fun_call.rs:97:10\n    |\n LL |         .or(Some(Bar(b, Duration::from_secs(2))));\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(Bar(b, Duration::from_secs(2))))`\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 15 previous errors\n "}, {"sha": "997ebef8a699226eb46fe04ba72c078534a17adf", "filename": "tests/ui/print_stdout_build_script.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fprint_stdout_build_script.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Fprint_stdout_build_script.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_stdout_build_script.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: --crate-name=build_script_build\n+\n+#![warn(clippy::print_stdout)]\n+\n+fn main() {\n+    // Fix #6041\n+    //\n+    // The `print_stdout` lint shouldn't emit in `build.rs`\n+    // as these methods are used for the build script.\n+    println!(\"Hello\");\n+    print!(\"Hello\");\n+}"}, {"sha": "ac4c1bc65979fb5f38661d3f8ac37487ef802e89", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::temporary_assignment)]\n-#![allow(const_item_mutation)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "7d79901a28d1be70a17f22f33806278c09b0e340", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b58144af56d8e42adadb1d02dab75da00f5b2ea/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=1b58144af56d8e42adadb1d02dab75da00f5b2ea", "patch": "@@ -1,13 +1,13 @@\n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:48:5\n+  --> $DIR/temporary_assignment.rs:47:5\n    |\n LL |     Struct { field: 0 }.field = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::temporary-assignment` implied by `-D warnings`\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:49:5\n+  --> $DIR/temporary_assignment.rs:48:5\n    |\n LL | /     MultiStruct {\n LL | |         structure: Struct { field: 0 },\n@@ -17,13 +17,13 @@ LL | |     .field = 1;\n    | |______________^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:54:5\n+  --> $DIR/temporary_assignment.rs:53:5\n    |\n LL |     ArrayStruct { array: [0] }.array[0] = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:55:5\n+  --> $DIR/temporary_assignment.rs:54:5\n    |\n LL |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^"}, {"sha": "319de217e0d90170c1bcf7545aef25e1caff11d5", "filename": "util/dev", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/952ec7d06660277dedf3436a9f50952a9caa6523/util%2Fdev", "raw_url": "https://github.com/rust-lang/rust/raw/952ec7d06660277dedf3436a9f50952a9caa6523/util%2Fdev", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdev?ref=952ec7d06660277dedf3436a9f50952a9caa6523", "patch": "@@ -1,7 +0,0 @@\n-#!/bin/sh\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n-echo 'Deprecated! `util/dev` usage is deprecated, please use `cargo dev` instead.'\n-\n-cd clippy_dev && cargo run -- \"$@\""}]}