{"sha": "b9bc431bd22e8e53398281d1c800fd78fe91e613", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YmM0MzFiZDIyZThlNTMzOTgyODFkMWM4MDBmZDc4ZmU5MWU2MTM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-14T20:49:47Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-14T21:05:07Z"}, "message": "Rename serial_join and serial_scope to join and scope", "tree": {"sha": "7ac0b97020260c4f02de34803337ae51e1b2eb5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ac0b97020260c4f02de34803337ae51e1b2eb5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9bc431bd22e8e53398281d1c800fd78fe91e613", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl2k4wMACgkQiMlBzaHU\nZDJDjg/+JJ3b3LQ+OmdYX86k5rAWmciaptmp9Rra4+AUHYZQHz4H8WpV58LoxieO\nhQzJawRGZswPlYk3Om8md7KgwB0kk7hWT9T1ABINXyH4fotIsO25tvNES/31xxKm\nH9BFGY0PFyenjNfae67exwcF2ls8kJE1XO6LyLF9DPsxE021z1K2RhKJk3iXhMkQ\nZycZn8B6LeWdw78P3AuTr30V4tAZWr0tUE+ti+KjTkCN8ZXquPicscC67h9vJFz3\nINBw1efYg06P/U8YUC1kubky1IWKnghC7cchMKCYHIK1T3DMtWppKcTM8Rn9gogZ\n91vkAHkbCzp0V6cmeQYfObZHH5lP2gZtGlrlaaW6m3JVtNN+lVDZSOHeIwSZbZ0k\n+50NuAeh54+9iycOKiyLBf0BlBp4Z3GoG/EBUsx1DNwvzs/5CKvF8mK2RPFXVr9U\n2tDMi0GZaHaymk5gxdEyKUXl2hpHEjo26MDsBEst+3LpYkYfjYjc4V3YkGyuT0eJ\nZNuNOXsR7pviO7Gcasic8mAPUt6uuFI7VnVZCBt6UaWdzqU1ADuHXZ24cZIN60sE\nf0CqWsS+VQ4X80cGBXSsap1VLgcVawnwL1G6b2YZyZC3NSRthLCjIQ8hD+3bltmp\nHYjnTLQ4PlniRsYiwQw5rJht7tbmLMcrg5eyYgz+e8nB7P3OqxM=\n=8JPY\n-----END PGP SIGNATURE-----", "payload": "tree 7ac0b97020260c4f02de34803337ae51e1b2eb5a\nparent 83560225adf05461e181f5dde303ae8a93a95aba\nauthor Santiago Pastorino <spastorino@gmail.com> 1571086187 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1571087107 -0300\n\nRename serial_join and serial_scope to join and scope\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9bc431bd22e8e53398281d1c800fd78fe91e613", "html_url": "https://github.com/rust-lang/rust/commit/b9bc431bd22e8e53398281d1c800fd78fe91e613", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9bc431bd22e8e53398281d1c800fd78fe91e613/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83560225adf05461e181f5dde303ae8a93a95aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/83560225adf05461e181f5dde303ae8a93a95aba", "html_url": "https://github.com/rust-lang/rust/commit/83560225adf05461e181f5dde303ae8a93a95aba"}], "stats": {"total": 47, "additions": 22, "deletions": 25}, "files": [{"sha": "9622c290039d5ddac11616b97714f55a47d8abe4", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b9bc431bd22e8e53398281d1c800fd78fe91e613/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bc431bd22e8e53398281d1c800fd78fe91e613/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=b9bc431bd22e8e53398281d1c800fd78fe91e613", "patch": "@@ -41,29 +41,6 @@ cfg_if! {\n             }\n         }\n \n-        pub fn serial_join<A, B, RA, RB>(oper_a: A, oper_b: B) -> (RA, RB)\n-            where A: FnOnce() -> RA,\n-                  B: FnOnce() -> RB\n-        {\n-            (oper_a(), oper_b())\n-        }\n-\n-        pub struct SerialScope;\n-\n-        impl SerialScope {\n-            pub fn spawn<F>(&self, f: F)\n-                where F: FnOnce(&SerialScope)\n-            {\n-                f(self)\n-            }\n-        }\n-\n-        pub fn serial_scope<F, R>(f: F) -> R\n-            where F: FnOnce(&SerialScope) -> R\n-        {\n-            f(&SerialScope)\n-        }\n-\n         use std::ops::Add;\n         use std::panic::{resume_unwind, catch_unwind, AssertUnwindSafe};\n \n@@ -176,8 +153,28 @@ cfg_if! {\n         pub type AtomicU32 = Atomic<u32>;\n         pub type AtomicU64 = Atomic<u64>;\n \n-        pub use self::serial_join as join;\n-        pub use self::serial_scope as scope;\n+        pub fn join<A, B, RA, RB>(oper_a: A, oper_b: B) -> (RA, RB)\n+            where A: FnOnce() -> RA,\n+                  B: FnOnce() -> RB\n+        {\n+            (oper_a(), oper_b())\n+        }\n+\n+        pub struct SerialScope;\n+\n+        impl SerialScope {\n+            pub fn spawn<F>(&self, f: F)\n+                where F: FnOnce(&SerialScope)\n+            {\n+                f(self)\n+            }\n+        }\n+\n+        pub fn scope<F, R>(f: F) -> R\n+            where F: FnOnce(&SerialScope) -> R\n+        {\n+            f(&SerialScope)\n+        }\n \n         #[macro_export]\n         macro_rules! parallel {"}]}