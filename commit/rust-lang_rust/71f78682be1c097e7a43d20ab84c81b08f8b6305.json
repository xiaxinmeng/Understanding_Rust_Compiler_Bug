{"sha": "71f78682be1c097e7a43d20ab84c81b08f8b6305", "node_id": "C_kwDOAAsO6NoAKDcxZjc4NjgyYmUxYzA5N2U3YTQzZDIwYWI4NGM4MWIwOGY4YjYzMDU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-22T19:02:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-22T19:02:19Z"}, "message": "Rollup merge of #111756 - Urgau:rename_drop_forget_copy_ref_lints, r=fee1-dead\n\nRename `{drop,forget}_{copy,ref}` lints to more consistent naming\n\nThis PR renames previous uplifted lints in https://github.com/rust-lang/rust/pull/109732 to more consistent naming.\n\nI followed the renaming done [here](https://github.com/rust-lang/rust/issues/53224) and also advocated in this [clippy issue](https://github.com/rust-lang/rust-clippy/issues/2845):\n   - `drop_copy` to `dropping_copy_types`\n   - `forget_copy` to `forgetting_copy_types`\n   - `drop_ref` to `dropping_references`\n   - `forget_ref` to `forgetting_references`", "tree": {"sha": "e9e85345558bf9b44497d929ccb195f9d6aceeb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9e85345558bf9b44497d929ccb195f9d6aceeb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71f78682be1c097e7a43d20ab84c81b08f8b6305", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJka7w7CRBK7hj4Ov3rIwAARWkIABU0SMxnvazmfOuQHN46VOQX\nfpzVTBvevOJFKbGsOwne9pxP7TG1TnzEW37frW7ZzxMBObma0hFBonRcbQOsEDwx\nEyPI6haLS4ytdlKjap/s0h/jXDVkdCvg2ZuUSz8jGS9fKBgLK/+SCHBsYXV9LJTn\nMQErcM81GGPh8Q9N7cs9nBScZI23IziOW2jWbvlsfXVLy9ZzLZrjK4nGRFsWpWa9\nYLlVwAs6bAqj1tXijYP11IBuCleDP54P6gVuWadXYR7zO4WXIZp+l6EZKn7MVWHN\n7YEWyiYexu8tDX8Pcgwj2/iIGFXAlgULnlHmuj1zBvL26Tr3xj1MdAkhT8el8YA=\n=NeXY\n-----END PGP SIGNATURE-----\n", "payload": "tree e9e85345558bf9b44497d929ccb195f9d6aceeb8\nparent df8b0dfc277e302882d5052e20b7eb7b725d2bdf\nparent 6b08a745a4d59e9bf51d2d591c569c9e758bd02a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1684782139 +0530\ncommitter GitHub <noreply@github.com> 1684782139 +0530\n\nRollup merge of #111756 - Urgau:rename_drop_forget_copy_ref_lints, r=fee1-dead\n\nRename `{drop,forget}_{copy,ref}` lints to more consistent naming\n\nThis PR renames previous uplifted lints in https://github.com/rust-lang/rust/pull/109732 to more consistent naming.\n\nI followed the renaming done [here](https://github.com/rust-lang/rust/issues/53224) and also advocated in this [clippy issue](https://github.com/rust-lang/rust-clippy/issues/2845):\n   - `drop_copy` to `dropping_copy_types`\n   - `forget_copy` to `forgetting_copy_types`\n   - `drop_ref` to `dropping_references`\n   - `forget_ref` to `forgetting_references`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71f78682be1c097e7a43d20ab84c81b08f8b6305", "html_url": "https://github.com/rust-lang/rust/commit/71f78682be1c097e7a43d20ab84c81b08f8b6305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71f78682be1c097e7a43d20ab84c81b08f8b6305/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df8b0dfc277e302882d5052e20b7eb7b725d2bdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/df8b0dfc277e302882d5052e20b7eb7b725d2bdf", "html_url": "https://github.com/rust-lang/rust/commit/df8b0dfc277e302882d5052e20b7eb7b725d2bdf"}, {"sha": "6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "html_url": "https://github.com/rust-lang/rust/commit/6b08a745a4d59e9bf51d2d591c569c9e758bd02a"}], "stats": {"total": 310, "additions": 155, "deletions": 155}, "files": [{"sha": "e1658d3ff82b7fe2f56cc37d855b32bd98431601", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -521,18 +521,18 @@ lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its ass\n \n lint_opaque_hidden_inferred_bound_sugg = add this bound\n \n-lint_drop_ref = calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+lint_dropping_references = calls to `std::mem::drop` with a reference instead of an owned value does nothing\n     .label = argument has type `{$arg_ty}`\n     .note = use `let _ = ...` to ignore the expression or result\n \n-lint_drop_copy = calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+lint_dropping_copy_types = calls to `std::mem::drop` with a value that implements `Copy` does nothing\n     .label = argument has type `{$arg_ty}`\n     .note = use `let _ = ...` to ignore the expression or result\n \n-lint_forget_ref = calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+lint_forgetting_references = calls to `std::mem::forget` with a reference instead of an owned value does nothing\n     .label = argument has type `{$arg_ty}`\n     .note = use `let _ = ...` to ignore the expression or result\n \n-lint_forget_copy = calls to `std::mem::forget` with a value that implements `Copy` does nothing\n+lint_forgetting_copy_types = calls to `std::mem::forget` with a value that implements `Copy` does nothing\n     .label = argument has type `{$arg_ty}`\n     .note = use `let _ = ...` to ignore the expression or result"}, {"sha": "ed2b384805e056a9a0d2c605e8a5af74972f86bc", "filename": "compiler/rustc_lint/src/drop_forget_useless.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -7,7 +7,7 @@ use crate::{\n };\n \n declare_lint! {\n-    /// The `drop_ref` lint checks for calls to `std::mem::drop` with a reference\n+    /// The `dropping_references` lint checks for calls to `std::mem::drop` with a reference\n     /// instead of an owned value.\n     ///\n     /// ### Example\n@@ -29,13 +29,13 @@ declare_lint! {\n     /// reference itself, which is a no-op. It will not call the `drop` method (from\n     /// the `Drop` trait implementation) on the underlying referenced value, which\n     /// is likely what was intended.\n-    pub DROP_REF,\n+    pub DROPPING_REFERENCES,\n     Warn,\n     \"calls to `std::mem::drop` with a reference instead of an owned value\"\n }\n \n declare_lint! {\n-    /// The `forget_ref` lint checks for calls to `std::mem::forget` with a reference\n+    /// The `forgetting_references` lint checks for calls to `std::mem::forget` with a reference\n     /// instead of an owned value.\n     ///\n     /// ### Example\n@@ -52,13 +52,13 @@ declare_lint! {\n     /// Calling `forget` on a reference will only forget the\n     /// reference itself, which is a no-op. It will not forget the underlying\n     /// referenced value, which is likely what was intended.\n-    pub FORGET_REF,\n+    pub FORGETTING_REFERENCES,\n     Warn,\n     \"calls to `std::mem::forget` with a reference instead of an owned value\"\n }\n \n declare_lint! {\n-    /// The `drop_copy` lint checks for calls to `std::mem::drop` with a value\n+    /// The `dropping_copy_types` lint checks for calls to `std::mem::drop` with a value\n     /// that derives the Copy trait.\n     ///\n     /// ### Example\n@@ -76,13 +76,13 @@ declare_lint! {\n     /// Calling `std::mem::drop` [does nothing for types that\n     /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html), since the\n     /// value will be copied and moved into the function on invocation.\n-    pub DROP_COPY,\n+    pub DROPPING_COPY_TYPES,\n     Warn,\n     \"calls to `std::mem::drop` with a value that implements Copy\"\n }\n \n declare_lint! {\n-    /// The `forget_copy` lint checks for calls to `std::mem::forget` with a value\n+    /// The `forgetting_copy_types` lint checks for calls to `std::mem::forget` with a value\n     /// that derives the Copy trait.\n     ///\n     /// ### Example\n@@ -104,12 +104,12 @@ declare_lint! {\n     /// An alternative, but also valid, explanation is that Copy types do not\n     /// implement the Drop trait, which means they have no destructors. Without a\n     /// destructor, there is nothing for `std::mem::forget` to ignore.\n-    pub FORGET_COPY,\n+    pub FORGETTING_COPY_TYPES,\n     Warn,\n     \"calls to `std::mem::forget` with a value that implements Copy\"\n }\n \n-declare_lint_pass!(DropForgetUseless => [DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY]);\n+declare_lint_pass!(DropForgetUseless => [DROPPING_REFERENCES, FORGETTING_REFERENCES, DROPPING_COPY_TYPES, FORGETTING_COPY_TYPES]);\n \n impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n@@ -123,16 +123,16 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n             let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             match fn_name {\n                 sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => {\n-                    cx.emit_spanned_lint(DROP_REF, expr.span, DropRefDiag { arg_ty, label: arg.span });\n+                    cx.emit_spanned_lint(DROPPING_REFERENCES, expr.span, DropRefDiag { arg_ty, label: arg.span });\n                 },\n                 sym::mem_forget if arg_ty.is_ref() => {\n-                    cx.emit_spanned_lint(FORGET_REF, expr.span, ForgetRefDiag { arg_ty, label: arg.span });\n+                    cx.emit_spanned_lint(FORGETTING_REFERENCES, expr.span, ForgetRefDiag { arg_ty, label: arg.span });\n                 },\n                 sym::mem_drop if is_copy && !drop_is_single_call_in_arm => {\n-                    cx.emit_spanned_lint(DROP_COPY, expr.span, DropCopyDiag { arg_ty, label: arg.span });\n+                    cx.emit_spanned_lint(DROPPING_COPY_TYPES, expr.span, DropCopyDiag { arg_ty, label: arg.span });\n                 }\n                 sym::mem_forget if is_copy => {\n-                    cx.emit_spanned_lint(FORGET_COPY, expr.span, ForgetCopyDiag { arg_ty, label: arg.span });\n+                    cx.emit_spanned_lint(FORGETTING_COPY_TYPES, expr.span, ForgetCopyDiag { arg_ty, label: arg.span });\n                 }\n                 _ => return,\n             };"}, {"sha": "de1c2be287576287cac7cc59358c40aded7d9851", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -662,9 +662,9 @@ pub struct ForLoopsOverFalliblesSuggestion<'a> {\n     pub end_span: Span,\n }\n \n-// drop_ref.rs\n+// drop_forget_useless.rs\n #[derive(LintDiagnostic)]\n-#[diag(lint_drop_ref)]\n+#[diag(lint_dropping_references)]\n #[note]\n pub struct DropRefDiag<'a> {\n     pub arg_ty: Ty<'a>,\n@@ -673,7 +673,7 @@ pub struct DropRefDiag<'a> {\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(lint_drop_copy)]\n+#[diag(lint_dropping_copy_types)]\n #[note]\n pub struct DropCopyDiag<'a> {\n     pub arg_ty: Ty<'a>,\n@@ -682,7 +682,7 @@ pub struct DropCopyDiag<'a> {\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(lint_forget_ref)]\n+#[diag(lint_forgetting_references)]\n #[note]\n pub struct ForgetRefDiag<'a> {\n     pub arg_ty: Ty<'a>,\n@@ -691,7 +691,7 @@ pub struct ForgetRefDiag<'a> {\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(lint_forget_copy)]\n+#[diag(lint_forgetting_copy_types)]\n #[note]\n pub struct ForgetCopyDiag<'a> {\n     pub arg_ty: Ty<'a>,"}, {"sha": "afbfd6d362dc9c2d7092bcf445efb37ef6669751", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -968,7 +968,7 @@ pub const fn replace<T>(dest: &mut T, src: T) -> T {\n /// Integers and other types implementing [`Copy`] are unaffected by `drop`.\n ///\n /// ```\n-/// # #![cfg_attr(not(bootstrap), allow(drop_copy))]\n+/// # #![cfg_attr(not(bootstrap), allow(dropping_copy_types))]\n /// #[derive(Copy, Clone)]\n /// struct Foo(u8);\n ///"}, {"sha": "9c60edb179415b62140008d8f9f60e4347d1fc4d", "filename": "src/tools/clippy/clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n             let is_copy = is_copy(cx, arg_ty);\n             let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             let (lint, msg) = match fn_name {\n-                // early return for uplifted lints: drop_ref, drop_copy, forget_ref, forget_copy\n+                // early return for uplifted lints: dropping_references, dropping_copy_types, forgetting_references, forgetting_copy_types\n                 sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => return,\n                 sym::mem_forget if arg_ty.is_ref() => return,\n                 sym::mem_drop if is_copy && !drop_is_single_call_in_arm => return,"}, {"sha": "b0db56bb417ea37a6d2fb04413ade1ebe686ed6a", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -33,13 +33,13 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n     (\"clippy::clone_double_ref\", \"suspicious_double_ref_op\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n-    (\"clippy::drop_copy\", \"drop_copy\"),\n-    (\"clippy::drop_ref\", \"drop_ref\"),\n+    (\"clippy::drop_copy\", \"dropping_copy_types\"),\n+    (\"clippy::drop_ref\", \"dropping_references\"),\n     (\"clippy::for_loop_over_option\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loop_over_result\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loops_over_fallibles\", \"for_loops_over_fallibles\"),\n-    (\"clippy::forget_copy\", \"forget_copy\"),\n-    (\"clippy::forget_ref\", \"forget_ref\"),\n+    (\"clippy::forget_copy\", \"forgetting_copy_types\"),\n+    (\"clippy::forget_ref\", \"forgetting_references\"),\n     (\"clippy::into_iter_on_array\", \"array_into_iter\"),\n     (\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\"),\n     (\"clippy::invalid_ref\", \"invalid_value\"),"}, {"sha": "edb9d87d032ec9e7bb6958e08983bb30adff5891", "filename": "src/tools/clippy/tests/ui/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_forget.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -5,7 +5,7 @@ use std::mem as memstuff;\n use std::mem::forget as forgetSomething;\n \n #[warn(clippy::mem_forget)]\n-#[allow(forget_copy)]\n+#[allow(forgetting_copy_types)]\n fn main() {\n     let five: i32 = 5;\n     forgetSomething(five);"}, {"sha": "4ef6f0ca92f2dae22939a1ab32a22efa426b1908", "filename": "src/tools/clippy/tests/ui/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmultiple_unsafe_ops_per_block.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused)]\n #![allow(deref_nullptr)]\n #![allow(clippy::unnecessary_operation)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n #![warn(clippy::multiple_unsafe_ops_per_block)]\n \n extern crate proc_macros;"}, {"sha": "dfe45dec8a7456f33b7f70bcb4f1c0260a31d27c", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -30,11 +30,11 @@\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n-#![allow(drop_copy)]\n-#![allow(drop_ref)]\n+#![allow(dropping_copy_types)]\n+#![allow(dropping_references)]\n #![allow(for_loops_over_fallibles)]\n-#![allow(forget_copy)]\n-#![allow(forget_ref)]\n+#![allow(forgetting_copy_types)]\n+#![allow(forgetting_references)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n@@ -77,13 +77,13 @@\n #![warn(clippy::invisible_characters)]\n #![warn(suspicious_double_ref_op)]\n #![warn(drop_bounds)]\n-#![warn(drop_copy)]\n-#![warn(drop_ref)]\n+#![warn(dropping_copy_types)]\n+#![warn(dropping_references)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]\n-#![warn(forget_copy)]\n-#![warn(forget_ref)]\n+#![warn(forgetting_copy_types)]\n+#![warn(forgetting_references)]\n #![warn(array_into_iter)]\n #![warn(invalid_atomic_ordering)]\n #![warn(invalid_value)]"}, {"sha": "ce8eca5a3081c8959f027c105ea89651614c55f3", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -30,11 +30,11 @@\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n-#![allow(drop_copy)]\n-#![allow(drop_ref)]\n+#![allow(dropping_copy_types)]\n+#![allow(dropping_references)]\n #![allow(for_loops_over_fallibles)]\n-#![allow(forget_copy)]\n-#![allow(forget_ref)]\n+#![allow(forgetting_copy_types)]\n+#![allow(forgetting_references)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]"}, {"sha": "3fca60aa2ebd33baaa438e14b3e2f371805fc6ec", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -186,17 +186,17 @@ error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n-error: lint `clippy::drop_copy` has been renamed to `drop_copy`\n+error: lint `clippy::drop_copy` has been renamed to `dropping_copy_types`\n   --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::drop_copy)]\n-   |         ^^^^^^^^^^^^^^^^^ help: use the new name: `drop_copy`\n+   |         ^^^^^^^^^^^^^^^^^ help: use the new name: `dropping_copy_types`\n \n-error: lint `clippy::drop_ref` has been renamed to `drop_ref`\n+error: lint `clippy::drop_ref` has been renamed to `dropping_references`\n   --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::drop_ref)]\n-   |         ^^^^^^^^^^^^^^^^ help: use the new name: `drop_ref`\n+   |         ^^^^^^^^^^^^^^^^ help: use the new name: `dropping_references`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n   --> $DIR/rename.rs:82:9\n@@ -216,17 +216,17 @@ error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_ov\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n-error: lint `clippy::forget_copy` has been renamed to `forget_copy`\n+error: lint `clippy::forget_copy` has been renamed to `forgetting_copy_types`\n   --> $DIR/rename.rs:85:9\n    |\n LL | #![warn(clippy::forget_copy)]\n-   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forget_copy`\n+   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_copy_types`\n \n-error: lint `clippy::forget_ref` has been renamed to `forget_ref`\n+error: lint `clippy::forget_ref` has been renamed to `forgetting_references`\n   --> $DIR/rename.rs:86:9\n    |\n LL | #![warn(clippy::forget_ref)]\n-   |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forget_ref`\n+   |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_references`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n   --> $DIR/rename.rs:87:9"}, {"sha": "a5a1930ed65bb5304172dd6d162f57ed2ab1431e", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,4 +1,4 @@\n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n fn main() {\n     let target = &mut 42;"}, {"sha": "d622b2fa7d81207576d4b5dda90548f7beb254e7", "filename": "src/tools/miri/tests/fail/uninit_buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,6 +1,6 @@\n //@error-in-other-file: memory is uninitialized at [0x4..0x10]\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n use std::alloc::{alloc, dealloc, Layout};\n use std::slice::from_raw_parts;"}, {"sha": "ca825901372c5eb05b5d6ea1e80297ea1ce7a89b", "filename": "src/tools/miri/tests/fail/uninit_buffer_with_provenance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,7 +1,7 @@\n //@error-in-other-file: memory is uninitialized at [0x4..0x8]\n //@normalize-stderr-test: \"a[0-9]+\" -> \"ALLOC\"\n #![feature(strict_provenance)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n // Test printing allocations that contain single-byte provenance.\n "}, {"sha": "6e13a9ea8369bdd7124cbfcb1ff8cd0ade8b4ce7", "filename": "src/tools/miri/tests/pass/stacked-borrows/zst-field-retagging-terminates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,7 +1,7 @@\n //@compile-flags: -Zmiri-retag-fields\n // Checks that the test does not run forever (which relies on a fast path).\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n fn main() {\n     let array = [(); usize::MAX];"}, {"sha": "ebd8e1d55945f9bea073c9e71519b14898824086", "filename": "tests/ui/associated-inherent-types/inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fassociated-inherent-types%2Finference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fassociated-inherent-types%2Finference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Finference.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -3,7 +3,7 @@\n \n #![feature(inherent_associated_types)]\n #![allow(incomplete_features)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n use std::convert::identity;\n "}, {"sha": "60128c9419d11e52e55b0f9b48fbe8bb8d209fcc", "filename": "tests/ui/borrowck/borrowck-closures-slice-patterns-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,7 +1,7 @@\n // Check that closure captures for slice patterns are inferred correctly\n \n #![allow(unused_variables)]\n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n // run-pass\n "}, {"sha": "78e965cc4bc7b577ee3513301d5aa191e389df14", "filename": "tests/ui/borrowck/borrowck-field-sensitivity-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #![allow(unused_mut)]\n #![allow(unused_variables)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n // pretty-expanded FIXME #23616\n \n struct A { a: isize, b: Box<isize> }"}, {"sha": "9acb1ec5e43a68ff52945fc9c46cf220c1dfc970", "filename": "tests/ui/borrowck/borrowck-use-mut-borrow-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n struct A { a: isize, b: Box<isize> }\n "}, {"sha": "98f8d5d473380adbbc72c40f72cf36447d804cfe", "filename": "tests/ui/closures/2229_closure_analysis/migrations/issue-78720.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![warn(rust_2021_incompatible_closure_captures)]\n-#![allow(drop_ref, drop_copy)]\n+#![allow(dropping_references, dropping_copy_types)]\n \n fn main() {\n     if let a = \"\" {"}, {"sha": "5496d0e5fc7e3f1236b381d00ec58fbd54e686e9", "filename": "tests/ui/closures/2229_closure_analysis/optimization/edge_case_run_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Foptimization%2Fedge_case_run_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Foptimization%2Fedge_case_run_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Foptimization%2Fedge_case_run_pass.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -3,7 +3,7 @@\n \n #![allow(unused)]\n #![allow(dead_code)]\n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n struct Int(i32);\n struct B<'a>(&'a i32);"}, {"sha": "b5e97ec1c1b8dc191cbb27612dcf59d2aaab4ff2", "filename": "tests/ui/closures/2229_closure_analysis/run_pass/drop_then_use_fake_reads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -2,7 +2,7 @@\n // check-pass\n \n #![feature(rustc_attrs)]\n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n fn main() {\n     let mut x = 1;"}, {"sha": "f06149f2cb9947799d461e291980ef96ed2fd496", "filename": "tests/ui/consts/const_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fconsts%2Fconst_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fconsts%2Fconst_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_forget.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![allow(forget_copy)]\n+#![allow(forgetting_copy_types)]\n \n use std::mem::forget;\n "}, {"sha": "7b375dc05667532ab354dc7e3646c59d6f85db7f", "filename": "tests/ui/consts/issue-104155.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fconsts%2Fissue-104155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fconsts%2Fissue-104155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-104155.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![allow(forget_copy)]\n+#![allow(forgetting_copy_types)]\n \n const _: () = core::mem::forget(Box::<u32>::default);\n const _: () = core::mem::forget(|| Box::<u32>::default());"}, {"sha": "fce97d9ba2370ddbc859b666f4181bf0cf661bce", "filename": "tests/ui/crate-leading-sep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fcrate-leading-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fcrate-leading-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate-leading-sep.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n fn main() {\n     use ::std::mem;"}, {"sha": "0afb4bb11bc89ec4c40fd3f6222fcd1401737afe", "filename": "tests/ui/drop/repeat-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fdrop%2Frepeat-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fdrop%2Frepeat-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop%2Frepeat-drop.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // needs-unwind\n \n-#![allow(drop_ref, drop_copy)]\n+#![allow(dropping_references, dropping_copy_types)]\n \n static mut CHECK: usize = 0;\n "}, {"sha": "bb093a4af4a3eec242a5f37de416199c0417b988", "filename": "tests/ui/explicit/explicit-call-to-supertrait-dtor.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n struct Foo {\n     x: isize"}, {"sha": "1a9f89c054f396bfecde674c5447a1796846db5a", "filename": "tests/ui/explicit/explicit-call-to-supertrait-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n struct Foo {\n     x: isize"}, {"sha": "137a407931a1761fdf537afd28add1c82d305ad9", "filename": "tests/ui/generator/drop-env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fgenerator%2Fdrop-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fgenerator%2Fdrop-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-env.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -4,7 +4,7 @@\n //[nomiropt]compile-flags: -Z mir-opt-level=0\n \n #![feature(generators, generator_trait)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n use std::ops::Generator;\n use std::pin::Pin;"}, {"sha": "381897c77a5c35822809cae1f1e011728ef3a88c", "filename": "tests/ui/generator/issue-57017.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -5,7 +5,7 @@\n // [drop_tracking_mir] build-pass\n \n #![feature(generators, negative_impls)]\n-#![allow(drop_ref, drop_copy)]\n+#![allow(dropping_references, dropping_copy_types)]\n \n macro_rules! type_combinations {\n     ("}, {"sha": "a5dde3912cc00efb54f2952971a5a5beadf3c5fd", "filename": "tests/ui/generator/non-static-is-unpin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -3,7 +3,7 @@\n // run-pass\n \n #![feature(generators, generator_trait)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n use std::marker::{PhantomPinned, Unpin};\n "}, {"sha": "195166f975b638dc0352f87f7279cd3f36537829", "filename": "tests/ui/generator/resume-arg-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,5 +1,5 @@\n #![feature(generators)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n // run-pass\n "}, {"sha": "721bb7281c0ffee5eddcbcc46a4b9bbf76651fb7", "filename": "tests/ui/hygiene/stdlib-prelude-from-opaque-late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![feature(decl_macro)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n macro mac() {\n     mod m {"}, {"sha": "c088c82791b4dd35fd4d5f94054c3ce953a36e09", "filename": "tests/ui/illegal-ufcs-drop.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fillegal-ufcs-drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fillegal-ufcs-drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fillegal-ufcs-drop.fixed?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n struct Foo;\n "}, {"sha": "1389b112188657578e699c1a9fe5a995002787f0", "filename": "tests/ui/illegal-ufcs-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fillegal-ufcs-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fillegal-ufcs-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fillegal-ufcs-drop.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n struct Foo;\n "}, {"sha": "2937320e5d833b05776b2ed0e0103a2369191803", "filename": "tests/ui/lint/dropping_copy_types.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fdropping_copy_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fdropping_copy_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdropping_copy_types.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![warn(drop_copy)]\n+#![warn(dropping_copy_types)]\n \n use std::mem::drop;\n use std::vec::Vec;", "previous_filename": "tests/ui/lint/drop_copy.rs"}, {"sha": "b6291aa5ed6346680c8574d974039c78e8a05095", "filename": "tests/ui/lint/dropping_copy_types.stderr", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fdropping_copy_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fdropping_copy_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdropping_copy_types.stderr?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,5 +1,5 @@\n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:34:5\n+  --> $DIR/dropping_copy_types.rs:34:5\n    |\n LL |     drop(s1);\n    |     ^^^^^--^\n@@ -8,13 +8,13 @@ LL |     drop(s1);\n    |\n    = note: use `let _ = ...` to ignore the expression or result\n note: the lint level is defined here\n-  --> $DIR/drop_copy.rs:3:9\n+  --> $DIR/dropping_copy_types.rs:3:9\n    |\n-LL | #![warn(drop_copy)]\n-   |         ^^^^^^^^^\n+LL | #![warn(dropping_copy_types)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:35:5\n+  --> $DIR/dropping_copy_types.rs:35:5\n    |\n LL |     drop(s2);\n    |     ^^^^^--^\n@@ -24,18 +24,18 @@ LL |     drop(s2);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_copy.rs:36:5\n+  --> $DIR/dropping_copy_types.rs:36:5\n    |\n LL |     drop(s3);\n    |     ^^^^^--^\n    |          |\n    |          argument has type `&SomeStruct`\n    |\n    = note: use `let _ = ...` to ignore the expression or result\n-   = note: `#[warn(drop_ref)]` on by default\n+   = note: `#[warn(dropping_references)]` on by default\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:37:5\n+  --> $DIR/dropping_copy_types.rs:37:5\n    |\n LL |     drop(s4);\n    |     ^^^^^--^\n@@ -45,7 +45,7 @@ LL |     drop(s4);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_copy.rs:38:5\n+  --> $DIR/dropping_copy_types.rs:38:5\n    |\n LL |     drop(s5);\n    |     ^^^^^--^\n@@ -55,7 +55,7 @@ LL |     drop(s5);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_copy.rs:50:5\n+  --> $DIR/dropping_copy_types.rs:50:5\n    |\n LL |     drop(a2);\n    |     ^^^^^--^\n@@ -65,7 +65,7 @@ LL |     drop(a2);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_copy.rs:52:5\n+  --> $DIR/dropping_copy_types.rs:52:5\n    |\n LL |     drop(a4);\n    |     ^^^^^--^\n@@ -75,7 +75,7 @@ LL |     drop(a4);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:71:13\n+  --> $DIR/dropping_copy_types.rs:71:13\n    |\n LL |             drop(println_and(13));\n    |             ^^^^^---------------^\n@@ -85,7 +85,7 @@ LL |             drop(println_and(13));\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:74:14\n+  --> $DIR/dropping_copy_types.rs:74:14\n    |\n LL |         3 if drop(println_and(14)) == () => (),\n    |              ^^^^^---------------^\n@@ -95,7 +95,7 @@ LL |         3 if drop(println_and(14)) == () => (),\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n-  --> $DIR/drop_copy.rs:76:14\n+  --> $DIR/dropping_copy_types.rs:76:14\n    |\n LL |         4 => drop(2),\n    |              ^^^^^-^", "previous_filename": "tests/ui/lint/drop_copy.stderr"}, {"sha": "0d5d484f4517fae6b02abf9b1e42329a5339eedb", "filename": "tests/ui/lint/dropping_references.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fdropping_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fdropping_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdropping_references.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![warn(drop_ref)]\n+#![warn(dropping_references)]\n \n struct SomeStruct;\n ", "previous_filename": "tests/ui/lint/drop_ref.rs"}, {"sha": "7e25a46216ecf013c8696765f1e232fa944a2728", "filename": "tests/ui/lint/dropping_references.stderr", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fdropping_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fdropping_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdropping_references.stderr?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,5 +1,5 @@\n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:8:5\n+  --> $DIR/dropping_references.rs:8:5\n    |\n LL |     drop(&SomeStruct);\n    |     ^^^^^-----------^\n@@ -8,13 +8,13 @@ LL |     drop(&SomeStruct);\n    |\n    = note: use `let _ = ...` to ignore the expression or result\n note: the lint level is defined here\n-  --> $DIR/drop_ref.rs:3:9\n+  --> $DIR/dropping_references.rs:3:9\n    |\n-LL | #![warn(drop_ref)]\n-   |         ^^^^^^^^\n+LL | #![warn(dropping_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:11:5\n+  --> $DIR/dropping_references.rs:11:5\n    |\n LL |     drop(&owned1);\n    |     ^^^^^-------^\n@@ -24,7 +24,7 @@ LL |     drop(&owned1);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:12:5\n+  --> $DIR/dropping_references.rs:12:5\n    |\n LL |     drop(&&owned1);\n    |     ^^^^^--------^\n@@ -34,7 +34,7 @@ LL |     drop(&&owned1);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:13:5\n+  --> $DIR/dropping_references.rs:13:5\n    |\n LL |     drop(&mut owned1);\n    |     ^^^^^-----------^\n@@ -44,7 +44,7 @@ LL |     drop(&mut owned1);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:17:5\n+  --> $DIR/dropping_references.rs:17:5\n    |\n LL |     drop(reference1);\n    |     ^^^^^----------^\n@@ -54,7 +54,7 @@ LL |     drop(reference1);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:20:5\n+  --> $DIR/dropping_references.rs:20:5\n    |\n LL |     drop(reference2);\n    |     ^^^^^----------^\n@@ -64,7 +64,7 @@ LL |     drop(reference2);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:23:5\n+  --> $DIR/dropping_references.rs:23:5\n    |\n LL |     drop(reference3);\n    |     ^^^^^----------^\n@@ -74,7 +74,7 @@ LL |     drop(reference3);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:28:5\n+  --> $DIR/dropping_references.rs:28:5\n    |\n LL |     drop(&val);\n    |     ^^^^^----^\n@@ -84,7 +84,7 @@ LL |     drop(&val);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:36:5\n+  --> $DIR/dropping_references.rs:36:5\n    |\n LL |     std::mem::drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^-----------^\n@@ -94,7 +94,7 @@ LL |     std::mem::drop(&SomeStruct);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:91:13\n+  --> $DIR/dropping_references.rs:91:13\n    |\n LL |             drop(println_and(&13));\n    |             ^^^^^----------------^\n@@ -104,7 +104,7 @@ LL |             drop(println_and(&13));\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:94:14\n+  --> $DIR/dropping_references.rs:94:14\n    |\n LL |         3 if drop(println_and(&14)) == () => (),\n    |              ^^^^^----------------^\n@@ -114,7 +114,7 @@ LL |         3 if drop(println_and(&14)) == () => (),\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n-  --> $DIR/drop_ref.rs:96:14\n+  --> $DIR/dropping_references.rs:96:14\n    |\n LL |         4 => drop(&2),\n    |              ^^^^^--^", "previous_filename": "tests/ui/lint/drop_ref.stderr"}, {"sha": "224c7bcd5f63e765a0eee74ff3e18e6ab0677096", "filename": "tests/ui/lint/forgetting_copy_types.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fforgetting_copy_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fforgetting_copy_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforgetting_copy_types.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![warn(forget_copy)]\n+#![warn(forgetting_copy_types)]\n \n use std::mem::forget;\n use std::vec::Vec;", "previous_filename": "tests/ui/lint/forget_copy.rs"}, {"sha": "36d1ef5c53e930fcd8cb0dbc05b0bc1dc02cd76e", "filename": "tests/ui/lint/forgetting_copy_types.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fforgetting_copy_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fforgetting_copy_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforgetting_copy_types.stderr?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,5 +1,5 @@\n warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n-  --> $DIR/forget_copy.rs:34:5\n+  --> $DIR/forgetting_copy_types.rs:34:5\n    |\n LL |     forget(s1);\n    |     ^^^^^^^--^\n@@ -8,13 +8,13 @@ LL |     forget(s1);\n    |\n    = note: use `let _ = ...` to ignore the expression or result\n note: the lint level is defined here\n-  --> $DIR/forget_copy.rs:3:9\n+  --> $DIR/forgetting_copy_types.rs:3:9\n    |\n-LL | #![warn(forget_copy)]\n-   |         ^^^^^^^^^^^\n+LL | #![warn(forgetting_copy_types)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n \n warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n-  --> $DIR/forget_copy.rs:35:5\n+  --> $DIR/forgetting_copy_types.rs:35:5\n    |\n LL |     forget(s2);\n    |     ^^^^^^^--^\n@@ -24,18 +24,18 @@ LL |     forget(s2);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_copy.rs:36:5\n+  --> $DIR/forgetting_copy_types.rs:36:5\n    |\n LL |     forget(s3);\n    |     ^^^^^^^--^\n    |            |\n    |            argument has type `&SomeStruct`\n    |\n    = note: use `let _ = ...` to ignore the expression or result\n-   = note: `#[warn(forget_ref)]` on by default\n+   = note: `#[warn(forgetting_references)]` on by default\n \n warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n-  --> $DIR/forget_copy.rs:37:5\n+  --> $DIR/forgetting_copy_types.rs:37:5\n    |\n LL |     forget(s4);\n    |     ^^^^^^^--^\n@@ -45,7 +45,7 @@ LL |     forget(s4);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_copy.rs:38:5\n+  --> $DIR/forgetting_copy_types.rs:38:5\n    |\n LL |     forget(s5);\n    |     ^^^^^^^--^\n@@ -55,7 +55,7 @@ LL |     forget(s5);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_copy.rs:50:5\n+  --> $DIR/forgetting_copy_types.rs:50:5\n    |\n LL |     forget(a2);\n    |     ^^^^^^^--^\n@@ -65,7 +65,7 @@ LL |     forget(a2);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_copy.rs:52:5\n+  --> $DIR/forgetting_copy_types.rs:52:5\n    |\n LL |     forget(a3);\n    |     ^^^^^^^--^\n@@ -75,7 +75,7 @@ LL |     forget(a3);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_copy.rs:53:5\n+  --> $DIR/forgetting_copy_types.rs:53:5\n    |\n LL |     forget(a4);\n    |     ^^^^^^^--^", "previous_filename": "tests/ui/lint/forget_copy.stderr"}, {"sha": "bd51e98003159df98c4bddd9867118f283aa5509", "filename": "tests/ui/lint/forgetting_references.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fforgetting_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fforgetting_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforgetting_references.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![warn(forget_ref)]\n+#![warn(forgetting_references)]\n \n use std::mem::forget;\n ", "previous_filename": "tests/ui/lint/forget_ref.rs"}, {"sha": "5624b690789f88d257cff55a16a3ad5b05fcd4c9", "filename": "tests/ui/lint/forgetting_references.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fforgetting_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Flint%2Fforgetting_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforgetting_references.stderr?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,5 +1,5 @@\n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:10:5\n+  --> $DIR/forgetting_references.rs:10:5\n    |\n LL |     forget(&SomeStruct);\n    |     ^^^^^^^-----------^\n@@ -8,13 +8,13 @@ LL |     forget(&SomeStruct);\n    |\n    = note: use `let _ = ...` to ignore the expression or result\n note: the lint level is defined here\n-  --> $DIR/forget_ref.rs:3:9\n+  --> $DIR/forgetting_references.rs:3:9\n    |\n-LL | #![warn(forget_ref)]\n-   |         ^^^^^^^^^^\n+LL | #![warn(forgetting_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:13:5\n+  --> $DIR/forgetting_references.rs:13:5\n    |\n LL |     forget(&owned);\n    |     ^^^^^^^------^\n@@ -24,7 +24,7 @@ LL |     forget(&owned);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:14:5\n+  --> $DIR/forgetting_references.rs:14:5\n    |\n LL |     forget(&&owned);\n    |     ^^^^^^^-------^\n@@ -34,7 +34,7 @@ LL |     forget(&&owned);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:15:5\n+  --> $DIR/forgetting_references.rs:15:5\n    |\n LL |     forget(&mut owned);\n    |     ^^^^^^^----------^\n@@ -44,7 +44,7 @@ LL |     forget(&mut owned);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:19:5\n+  --> $DIR/forgetting_references.rs:19:5\n    |\n LL |     forget(&*reference1);\n    |     ^^^^^^^------------^\n@@ -54,7 +54,7 @@ LL |     forget(&*reference1);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:22:5\n+  --> $DIR/forgetting_references.rs:22:5\n    |\n LL |     forget(reference2);\n    |     ^^^^^^^----------^\n@@ -64,7 +64,7 @@ LL |     forget(reference2);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:25:5\n+  --> $DIR/forgetting_references.rs:25:5\n    |\n LL |     forget(reference3);\n    |     ^^^^^^^----------^\n@@ -74,7 +74,7 @@ LL |     forget(reference3);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:30:5\n+  --> $DIR/forgetting_references.rs:30:5\n    |\n LL |     forget(&val);\n    |     ^^^^^^^----^\n@@ -84,7 +84,7 @@ LL |     forget(&val);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:38:5\n+  --> $DIR/forgetting_references.rs:38:5\n    |\n LL |     std::mem::forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^-----------^", "previous_filename": "tests/ui/lint/forget_ref.stderr"}, {"sha": "ba635e6638c8c13c3426bb3b4971638019bd71a4", "filename": "tests/ui/liveness/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fliveness%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fliveness%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliveness%2Fliveness-unused.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,7 +1,7 @@\n #![warn(unused)]\n #![deny(unused_variables)]\n #![deny(unused_assignments)]\n-#![allow(dead_code, non_camel_case_types, trivial_numeric_casts, drop_copy)]\n+#![allow(dead_code, non_camel_case_types, trivial_numeric_casts, dropping_copy_types)]\n \n use std::ops::AddAssign;\n "}, {"sha": "10810388d2033ba1b37c5b2e8b52dc7ab6cd8b93", "filename": "tests/ui/macros/parse-complex-macro-invoc-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -4,7 +4,7 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n #![allow(stable_features)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n // Test parsing binary operators after macro invocations.\n "}, {"sha": "39df7de5a7fbb9dc51322ada7f290032a7cd7c51", "filename": "tests/ui/never_type/never-assign-dead-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -3,7 +3,7 @@\n // check-pass\n \n #![feature(never_type)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n #![warn(unused)]\n \n fn main() {"}, {"sha": "2e9eff59386de53497a70c29ff598deba9873caf", "filename": "tests/ui/nll/relate_tys/hr-fn-aba-as-aaa.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -5,7 +5,7 @@\n // check-pass\n // compile-flags:-Zno-leak-check\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n fn make_it() -> for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 {\n     panic!()"}, {"sha": "722d6747102fc7ceb4db33a10e0115b0788f3535", "filename": "tests/ui/nll/ty-outlives/projection-body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -3,7 +3,7 @@\n //\n // check-pass\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n trait MyTrait<'a> {\n     type Output;"}, {"sha": "df6aab0e6a88501b23b41a073534bca54b8d2775", "filename": "tests/ui/or-patterns/or-patterns-default-binding-modes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -3,8 +3,8 @@\n // check-pass\n \n #![allow(irrefutable_let_patterns)]\n-#![allow(drop_copy)]\n-#![allow(drop_ref)]\n+#![allow(dropping_copy_types)]\n+#![allow(dropping_references)]\n \n fn main() {\n     // A regression test for a mistake we made at one point:"}, {"sha": "43b53b7cf1f17d2e451d6962df31fac319e6d2c6", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-at-and-box-pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -2,8 +2,8 @@\n \n // Test `@` patterns combined with `box` patterns.\n \n-#![allow(drop_ref)]\n-#![allow(drop_copy)]\n+#![allow(dropping_references)]\n+#![allow(dropping_copy_types)]\n \n #![feature(box_patterns)]\n "}, {"sha": "1df51c0edd911538647b301d6d21068ca4342311", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -2,7 +2,7 @@\n \n // Test `Copy` bindings in the rhs of `@` patterns.\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n #[derive(Copy, Clone)]\n struct C;"}, {"sha": "204cd3e665762fc40751ac951478b0666be4c4b7", "filename": "tests/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n fn main() {}\n "}, {"sha": "4de1f653db03abdd9ffb6b6ef716254e253b390d", "filename": "tests/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n fn main() {\n     struct U;"}, {"sha": "f38a6e674da99513460ea819594329fa6efee88a", "filename": "tests/ui/print_type_sizes/async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fprint_type_sizes%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fprint_type_sizes%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fasync.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -3,7 +3,7 @@\n // build-pass\n // ignore-pass\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n async fn wait() {}\n "}, {"sha": "6adc14f9b99e1cb1857fc292f119079ae56a9d54", "filename": "tests/ui/print_type_sizes/generator_discr_placement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -6,7 +6,7 @@\n \n // Avoid emitting panic handlers, like the rest of these tests...\n #![feature(generators)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n pub fn foo() {\n     let a = || {"}, {"sha": "0c1e931444162034e05a5bef42913c1e0f9a871d", "filename": "tests/ui/regions/type-param-outlives-reempty-issue-74429.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -3,7 +3,7 @@\n \n // check-pass\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n use std::marker::PhantomData;\n "}, {"sha": "b9ff24c7624dc017ba67d28e96eb03b18ca09530", "filename": "tests/ui/rfc-2008-non-exhaustive/borrowck-exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -3,7 +3,7 @@\n \n // check-pass\n \n-#![allow(drop_ref)]\n+#![allow(dropping_references)]\n \n // aux-build:monovariants.rs\n extern crate monovariants;"}, {"sha": "542be3942b7eecd380cc983bb27bfb7ffd380cb8", "filename": "tests/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -4,7 +4,7 @@\n // Tests ensuring that `dbg!(expr)` has the expected run-time behavior.\n // as well as some compile time properties we expect.\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n #[derive(Copy, Clone, Debug)]\n struct Unit;"}, {"sha": "209b91af1ddfb6a023cf86969511c4e463478d2c", "filename": "tests/ui/rust-2018/remove-extern-crate.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -5,7 +5,7 @@\n // compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n  //~ WARNING unused extern crate\n // Shouldn't suggest changing to `use`, as `another_name`"}, {"sha": "ef3c2db696af2d5186ab26ff135519b857cefc7a", "filename": "tests/ui/rust-2018/remove-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -5,7 +5,7 @@\n // compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n extern crate core; //~ WARNING unused extern crate\n // Shouldn't suggest changing to `use`, as `another_name`"}, {"sha": "c6268dba567f73f74f5af0f254181b70324dc9a3", "filename": "tests/ui/statics/issue-91050-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fstatics%2Fissue-91050-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Fstatics%2Fissue-91050-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatics%2Fissue-91050-1.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -12,7 +12,7 @@\n //\n // In regular builds, the bad cast was UB, like \"Invalid LLVMRustVisibility value!\"\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n pub mod before {\n     #[no_mangle]"}, {"sha": "af25010e3bd282bb9907f05112625152a62c9168", "filename": "tests/ui/traits/copy-guessing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Ftraits%2Fcopy-guessing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Ftraits%2Fcopy-guessing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcopy-guessing.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -1,5 +1,5 @@\n #![allow(dead_code)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n // \"guessing\" in trait selection can affect `copy_or_move`. Check that this\n // is correctly handled. I am not sure what is the \"correct\" behaviour,"}, {"sha": "2ce0b6b0df8f06423f4ba2d5a3b2e54f23606184", "filename": "tests/ui/traits/impl-evaluation-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -6,7 +6,7 @@\n \n // check-pass\n \n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n \n trait A {\n     type B;"}, {"sha": "e311a4af2f4ea165e99ed8df53ef851caf9424b4", "filename": "tests/ui/traits/new-solver/auto-with-drop_tracking_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -14,7 +14,7 @@ async fn foo() {\n     #[cfg(fail)]\n     let x = &NotSync;\n     bar().await;\n-    #[allow(drop_ref)]\n+    #[allow(dropping_references)]\n     drop(x);\n }\n "}, {"sha": "f98c3164d7eb59776e3f6a6af51361e210154a39", "filename": "tests/ui/trivial-bounds/trivial-bounds-inconsistent-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f78682be1c097e7a43d20ab84c81b08f8b6305/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs?ref=71f78682be1c097e7a43d20ab84c81b08f8b6305", "patch": "@@ -2,7 +2,7 @@\n // Check tautalogically false `Copy` bounds\n \n #![feature(trivial_bounds)]\n-#![allow(drop_ref, drop_copy)]\n+#![allow(dropping_references, dropping_copy_types)]\n \n fn copy_string(t: String) -> String where String: Copy { //~ WARNING trivial_bounds\n     is_copy(&t);"}]}