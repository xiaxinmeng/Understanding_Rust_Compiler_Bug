{"sha": "f807ccd6c0cce77c86cf0f21267e70f9ee89e0a4", "node_id": "C_kwDOAAsO6NoAKGY4MDdjY2Q2YzBjY2U3N2M4NmNmMGYyMTI2N2U3MGY5ZWU4OWUwYTQ", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-02-24T19:44:26Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-02-25T10:45:44Z"}, "message": "Add CSV output to analysis-stats\n\nFor easy diffing.", "tree": {"sha": "a328fd91a1b6027fcd8be96823412acc0167631e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a328fd91a1b6027fcd8be96823412acc0167631e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f807ccd6c0cce77c86cf0f21267e70f9ee89e0a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f807ccd6c0cce77c86cf0f21267e70f9ee89e0a4", "html_url": "https://github.com/rust-lang/rust/commit/f807ccd6c0cce77c86cf0f21267e70f9ee89e0a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f807ccd6c0cce77c86cf0f21267e70f9ee89e0a4/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6901c952ec3847ca522c69d4c854e9e0e51d5fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6901c952ec3847ca522c69d4c854e9e0e51d5fe", "html_url": "https://github.com/rust-lang/rust/commit/f6901c952ec3847ca522c69d4c854e9e0e51d5fe"}], "stats": {"total": 80, "additions": 74, "deletions": 6}, "files": [{"sha": "f52e1e7512788d7828d4bba26d09d6b58c8df422", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f807ccd6c0cce77c86cf0f21267e70f9ee89e0a4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f807ccd6c0cce77c86cf0f21267e70f9ee89e0a4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=f807ccd6c0cce77c86cf0f21267e70f9ee89e0a4", "patch": "@@ -10,7 +10,11 @@ use hir::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     AssocItem, Crate, Function, HasSource, HirDisplay, ModuleDef,\n };\n-use hir_def::{body::BodySourceMap, expr::ExprId, FunctionId};\n+use hir_def::{\n+    body::{BodySourceMap, SyntheticSyntax},\n+    expr::ExprId,\n+    FunctionId,\n+};\n use hir_ty::{TyExt, TypeWalk};\n use ide::{Analysis, AnalysisHost, LineCol, RootDatabase};\n use ide_db::base_db::{\n@@ -28,7 +32,7 @@ use syntax::{AstNode, SyntaxNode};\n use vfs::{AbsPathBuf, Vfs, VfsPath};\n \n use crate::cli::{\n-    flags,\n+    flags::{self, OutputFormat},\n     load_cargo::{load_workspace, LoadCargoConfig},\n     print_memory_usage,\n     progress_report::ProgressReport,\n@@ -191,7 +195,7 @@ impl flags::AnalysisStats {\n     ) {\n         let mut bar = match verbosity {\n             Verbosity::Quiet | Verbosity::Spammy => ProgressReport::hidden(),\n-            _ if self.parallel => ProgressReport::hidden(),\n+            _ if self.parallel || self.output.is_some() => ProgressReport::hidden(),\n             _ => ProgressReport::new(funcs.len() as u64),\n         };\n \n@@ -252,7 +256,7 @@ impl flags::AnalysisStats {\n             for (expr_id, _) in body.exprs.iter() {\n                 let ty = &inference_result[expr_id];\n                 num_exprs += 1;\n-                if ty.is_unknown() {\n+                let unknown_or_partial = if ty.is_unknown() {\n                     num_exprs_unknown += 1;\n                     if verbosity.is_spammy() {\n                         if let Some((path, start, end)) =\n@@ -270,6 +274,7 @@ impl flags::AnalysisStats {\n                             bar.println(format!(\"{}: Unknown type\", name,));\n                         }\n                     }\n+                    true\n                 } else {\n                     let mut is_partially_unknown = false;\n                     ty.walk(&mut |ty| {\n@@ -280,7 +285,8 @@ impl flags::AnalysisStats {\n                     if is_partially_unknown {\n                         num_exprs_partially_unknown += 1;\n                     }\n-                }\n+                    is_partially_unknown\n+                };\n                 if self.only.is_some() && verbosity.is_spammy() {\n                     // in super-verbose mode for just one function, we print every single expression\n                     if let Some((_, start, end)) =\n@@ -298,6 +304,13 @@ impl flags::AnalysisStats {\n                         bar.println(format!(\"unknown location: {}\", ty.display(db)));\n                     }\n                 }\n+                if unknown_or_partial && self.output == Some(OutputFormat::Csv) {\n+                    println!(\n+                        r#\"{},type,\"{}\"\"#,\n+                        location_csv(db, &analysis, vfs, &sm, expr_id),\n+                        ty.display(db)\n+                    );\n+                }\n                 if let Some(mismatch) = inference_result.type_mismatch_for_expr(expr_id) {\n                     num_type_mismatches += 1;\n                     if verbosity.is_verbose() {\n@@ -323,6 +336,14 @@ impl flags::AnalysisStats {\n                             ));\n                         }\n                     }\n+                    if self.output == Some(OutputFormat::Csv) {\n+                        println!(\n+                            r#\"{},mismatch,\"{}\",\"{}\"\"#,\n+                            location_csv(db, &analysis, vfs, &sm, expr_id),\n+                            mismatch.expected.display(db),\n+                            mismatch.actual.display(db)\n+                        );\n+                    }\n                 }\n             }\n             if verbosity.is_spammy() {\n@@ -358,6 +379,28 @@ impl flags::AnalysisStats {\n     }\n }\n \n+fn location_csv(\n+    db: &RootDatabase,\n+    analysis: &Analysis,\n+    vfs: &Vfs,\n+    sm: &BodySourceMap,\n+    expr_id: ExprId,\n+) -> String {\n+    let src = match sm.expr_syntax(expr_id) {\n+        Ok(s) => s,\n+        Err(SyntheticSyntax) => return \"synthetic,,\".to_string(),\n+    };\n+    let root = db.parse_or_expand(src.file_id).unwrap();\n+    let node = src.map(|e| e.to_node(&root).syntax().clone());\n+    let original_range = node.as_ref().original_file_range(db);\n+    let path = vfs.file_path(original_range.file_id);\n+    let line_index = analysis.file_line_index(original_range.file_id).unwrap();\n+    let text_range = original_range.range;\n+    let (start, end) =\n+        (line_index.line_col(text_range.start()), line_index.line_col(text_range.end()));\n+    format!(\"{},{}:{},{}:{}\", path, start.line + 1, start.col, end.line + 1, end.col)\n+}\n+\n fn expr_syntax_range(\n     db: &RootDatabase,\n     analysis: &Analysis,"}, {"sha": "19907ebddb6adda8011ab5fdf2d23cc6ae83f81b", "filename": "crates/rust-analyzer/src/cli/flags.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f807ccd6c0cce77c86cf0f21267e70f9ee89e0a4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f807ccd6c0cce77c86cf0f21267e70f9ee89e0a4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs?ref=f807ccd6c0cce77c86cf0f21267e70f9ee89e0a4", "patch": "@@ -1,6 +1,6 @@\n //! Grammar for the command-line arguments.\n #![allow(unreachable_pub)]\n-use std::path::PathBuf;\n+use std::{path::PathBuf, str::FromStr};\n \n use ide_ssr::{SsrPattern, SsrRule};\n \n@@ -54,6 +54,8 @@ xflags::xflags! {\n             /// Directory with Cargo.toml.\n             required path: PathBuf\n         {\n+            optional --output format: OutputFormat\n+\n             /// Randomize order in which crates, modules, and items are processed.\n             optional --randomize\n             /// Run type inference in parallel.\n@@ -160,6 +162,7 @@ pub struct Highlight {\n pub struct AnalysisStats {\n     pub path: PathBuf,\n \n+    pub output: Option<OutputFormat>,\n     pub randomize: bool,\n     pub parallel: bool,\n     pub memory_usage: bool,\n@@ -215,6 +218,11 @@ impl RustAnalyzer {\n }\n // generated end\n \n+#[derive(Debug, PartialEq, Eq)]\n+pub enum OutputFormat {\n+    Csv,\n+}\n+\n impl RustAnalyzer {\n     pub fn verbosity(&self) -> Verbosity {\n         if self.quiet {\n@@ -227,3 +235,14 @@ impl RustAnalyzer {\n         }\n     }\n }\n+\n+impl FromStr for OutputFormat {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"csv\" => Ok(Self::Csv),\n+            _ => Err(format!(\"unknown output format `{}`\", s)),\n+        }\n+    }\n+}"}, {"sha": "993c64cceaf0162a7562d7469db472a8a9bb2106", "filename": "xtask/src/flags.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f807ccd6c0cce77c86cf0f21267e70f9ee89e0a4/xtask%2Fsrc%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f807ccd6c0cce77c86cf0f21267e70f9ee89e0a4/xtask%2Fsrc%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fflags.rs?ref=f807ccd6c0cce77c86cf0f21267e70f9ee89e0a4", "patch": "@@ -113,9 +113,15 @@ pub struct Bb {\n impl Xtask {\n     pub const HELP: &'static str = Self::HELP_;\n \n+    #[allow(dead_code)]\n     pub fn from_env() -> xflags::Result<Self> {\n         Self::from_env_()\n     }\n+\n+    #[allow(dead_code)]\n+    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {\n+        Self::from_vec_(args)\n+    }\n }\n // generated end\n "}]}