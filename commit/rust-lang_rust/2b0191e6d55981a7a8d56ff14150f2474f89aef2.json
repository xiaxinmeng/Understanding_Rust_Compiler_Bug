{"sha": "2b0191e6d55981a7a8d56ff14150f2474f89aef2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMDE5MWU2ZDU1OTgxYTdhOGQ1NmZmMTQxNTBmMjQ3NGY4OWFlZjI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-11T14:28:58Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-11T14:28:58Z"}, "message": "Rollup merge of #25297 - carols10cents:grammar-todos, r=steveklabnik\n\nHiiii, I've got another chunk of updates to the grammar documentation! :star: :star2: :stars: \r\n\r\nChipping away at #22445, still have some more to go. I'm learning so much!!!", "tree": {"sha": "58542ee8299b1e8c911712c499e825aabbf5020b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58542ee8299b1e8c911712c499e825aabbf5020b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b0191e6d55981a7a8d56ff14150f2474f89aef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b0191e6d55981a7a8d56ff14150f2474f89aef2", "html_url": "https://github.com/rust-lang/rust/commit/2b0191e6d55981a7a8d56ff14150f2474f89aef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b0191e6d55981a7a8d56ff14150f2474f89aef2/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec422541ba8f325c63f6fe139efb14e0f6f69a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec422541ba8f325c63f6fe139efb14e0f6f69a0", "html_url": "https://github.com/rust-lang/rust/commit/dec422541ba8f325c63f6fe139efb14e0f6f69a0"}, {"sha": "218d38fb94379feca89eb858b309890d513c35da", "url": "https://api.github.com/repos/rust-lang/rust/commits/218d38fb94379feca89eb858b309890d513c35da", "html_url": "https://github.com/rust-lang/rust/commit/218d38fb94379feca89eb858b309890d513c35da"}], "stats": {"total": 134, "additions": 68, "deletions": 66}, "files": [{"sha": "fb7562e7bdf8b28b8ebcb3537d66016d120efe5c", "filename": "src/doc/grammar.md", "status": "modified", "additions": 68, "deletions": 66, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/2b0191e6d55981a7a8d56ff14150f2474f89aef2/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/2b0191e6d55981a7a8d56ff14150f2474f89aef2/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=2b0191e6d55981a7a8d56ff14150f2474f89aef2", "patch": "@@ -253,7 +253,7 @@ The two values of the boolean type are written `true` and `false`.\n ### Symbols\n \n ```antlr\n-symbol : \"::\" \"->\"\n+symbol : \"::\" | \"->\"\n        | '#' | '[' | ']' | '(' | ')' | '{' | '}'\n        | ',' | ';' ;\n ```\n@@ -304,7 +304,7 @@ transcriber : '(' transcriber * ')' | '[' transcriber * ']'\n ## Items\n \n ```antlr\n-item : mod_item | fn_item | type_item | struct_item | enum_item\n+item : vis ? mod_item | fn_item | type_item | struct_item | enum_item\n      | const_item | static_item | trait_item | impl_item | extern_block ;\n ```\n \n@@ -322,7 +322,7 @@ mod : [ view_item | item ] * ;\n #### View items\n \n ```antlr\n-view_item : extern_crate_decl | use_decl ;\n+view_item : extern_crate_decl | use_decl ';' ;\n ```\n \n ##### Extern crate declarations\n@@ -335,14 +335,14 @@ crate_name: ident | ( ident \"as\" ident )\n ##### Use declarations\n \n ```antlr\n-use_decl : \"pub\" ? \"use\" [ path \"as\" ident\n-                          | path_glob ] ;\n+use_decl : vis ? \"use\" [ path \"as\" ident\n+                        | path_glob ] ;\n \n path_glob : ident [ \"::\" [ path_glob\n                           | '*' ] ] ?\n           | '{' path_item [ ',' path_item ] * '}' ;\n \n-path_item : ident | \"mod\" ;\n+path_item : ident | \"self\" ;\n ```\n \n ### Functions\n@@ -414,16 +414,17 @@ extern_block : [ foreign_fn ] * ;\n \n ## Visibility and Privacy\n \n-**FIXME:** grammar?\n-\n+```antlr\n+vis : \"pub\" ;\n+```\n ### Re-exporting and Visibility\n \n-**FIXME:** grammar?\n+See [Use declarations](#use-declarations).\n \n ## Attributes\n \n ```antlr\n-attribute : \"#!\" ? '[' meta_item ']' ;\n+attribute : '#' '!' ? '[' meta_item ']' ;\n meta_item : ident [ '=' literal\n                   | '(' meta_seq ')' ] ? ;\n meta_seq : meta_item [ ',' meta_seq ] ? ;\n@@ -433,26 +434,19 @@ meta_seq : meta_item [ ',' meta_seq ] ? ;\n \n ## Statements\n \n-**FIXME:** grammar?\n+```antlr\n+stmt : decl_stmt | expr_stmt ;\n+```\n \n ### Declaration statements\n \n-**FIXME:** grammar?\n-\n-A _declaration statement_ is one that introduces one or more *names* into the\n-enclosing statement block. The declared names may denote new variables or new\n-items.\n+```antlr\n+decl_stmt : item | let_decl ;\n+```\n \n #### Item declarations\n \n-**FIXME:** grammar?\n-\n-An _item declaration statement_ has a syntactic form identical to an\n-[item](#items) declaration within a module. Declaring an item &mdash; a\n-function, enumeration, structure, type, static, trait, implementation or module\n-&mdash; locally within a statement block is simply a way of restricting its\n-scope to a narrow region containing all of its uses; it is otherwise identical\n-in meaning to declaring the item outside the statement block.\n+See [Items](#items).\n \n #### Variable declarations\n \n@@ -463,11 +457,21 @@ init : [ '=' ] expr ;\n \n ### Expression statements\n \n-**FIXME:** grammar?\n+```antlr\n+expr_stmt : expr ';' ;\n+```\n \n ## Expressions\n \n-**FIXME:** grammar?\n+```antlr\n+expr : literal | path | tuple_expr | unit_expr | struct_expr\n+     | block_expr | method_call_expr | field_expr | array_expr\n+     | idx_expr | range_expr | unop_expr | binop_expr\n+     | paren_expr | call_expr | lambda_expr | while_expr\n+     | loop_expr | break_expr | continue_expr | for_expr\n+     | if_expr | match_expr | if_let_expr | while_let_expr\n+     | return_expr ;\n+```\n \n #### Lvalues, rvalues and temporaries\n \n@@ -479,19 +483,23 @@ init : [ '=' ] expr ;\n \n ### Literal expressions\n \n-**FIXME:** grammar?\n+See [Literals](#literals).\n \n ### Path expressions\n \n-**FIXME:** grammar?\n+See [Paths](#paths).\n \n ### Tuple expressions\n \n-**FIXME:** grammar?\n+```antlr\n+tuple_expr : '(' [ expr [ ',' expr ] * | expr ',' ] ? ')' ;\n+```\n \n ### Unit expressions\n \n-**FIXME:** grammar?\n+```antlr\n+unit_expr : \"()\" ;\n+```\n \n ### Structure expressions\n \n@@ -507,8 +515,7 @@ struct_expr : expr_path '{' ident ':' expr\n ### Block expressions\n \n ```antlr\n-block_expr : '{' [ view_item ] *\n-                 [ stmt ';' | item ] *\n+block_expr : '{' [ stmt ';' | item ] *\n                  [ expr ] '}' ;\n ```\n \n@@ -529,7 +536,7 @@ field_expr : expr '.' ident ;\n ```antlr\n array_expr : '[' \"mut\" ? array_elems? ']' ;\n \n-array_elems : [expr [',' expr]*] | [expr ',' \"..\" expr] ;\n+array_elems : [expr [',' expr]*] | [expr ';' expr] ;\n ```\n \n ### Index expressions\n@@ -549,65 +556,60 @@ range_expr : expr \"..\" expr |\n \n ### Unary operator expressions\n \n-**FIXME:** grammar?\n+```antlr\n+unop_expr : unop expr ;\n+unop : '-' | '*' | '!' ;\n+```\n \n ### Binary operator expressions\n \n ```antlr\n-binop_expr : expr binop expr ;\n+binop_expr : expr binop expr | type_cast_expr\n+           | assignment_expr | compound_assignment_expr ;\n+binop : arith_op | bitwise_op | lazy_bool_op | comp_op\n ```\n \n #### Arithmetic operators\n \n-**FIXME:** grammar?\n+```antlr\n+arith_op : '+' | '-' | '*' | '/' | '%' ;\n+```\n \n #### Bitwise operators\n \n-**FIXME:** grammar?\n+```antlr\n+bitwise_op : '&' | '|' | '^' | \"<<\" | \">>\" ;\n+```\n \n #### Lazy boolean operators\n \n-**FIXME:** grammar?\n+```antlr\n+lazy_bool_op : \"&&\" | \"||\" ;\n+```\n \n #### Comparison operators\n \n-**FIXME:** grammar?\n+```antlr\n+comp_op : \"==\" | \"!=\" | '<' | '>' | \"<=\" | \">=\" ;\n+```\n \n #### Type cast expressions\n \n-**FIXME:** grammar?\n+```antlr\n+type_cast_expr : value \"as\" type ;\n+```\n \n #### Assignment expressions\n \n-**FIXME:** grammar?\n+```antlr\n+assignment_expr : expr '=' expr ;\n+```\n \n #### Compound assignment expressions\n \n-**FIXME:** grammar?\n-\n-#### Operator precedence\n-\n-The precedence of Rust binary operators is ordered as follows, going from\n-strong to weak:\n-\n-```text\n-* / %\n-as\n-+ -\n-<< >>\n-&\n-^\n-|\n-< > <= >=\n-== !=\n-&&\n-||\n-=\n-```\n-\n-Operators at the same precedence level are evaluated left-to-right. [Unary\n-operators](#unary-operator-expressions) have the same precedence level and it\n-is stronger than any of the binary operators'.\n+```antlr\n+compound_assignment_expr : expr [ arith_op | bitwise_op ] '=' expr ;\n+```\n \n ### Grouped expressions\n "}]}