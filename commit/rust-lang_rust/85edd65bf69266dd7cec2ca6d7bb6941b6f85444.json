{"sha": "85edd65bf69266dd7cec2ca6d7bb6941b6f85444", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZWRkNjViZjY5MjY2ZGQ3Y2VjMmNhNmQ3YmI2OTQxYjZmODU0NDQ=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-01-14T19:26:26Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-01-14T19:26:26Z"}, "message": "Address review comments\n\nAdd: attempt to remove address of expressions from the scrutinee expression before adding references to the pattern", "tree": {"sha": "8b5412fc5ff437fd39ba60dabc3910a4aec0bc20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b5412fc5ff437fd39ba60dabc3910a4aec0bc20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85edd65bf69266dd7cec2ca6d7bb6941b6f85444", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmAAmuYACgkQ2lnoZDo37QZYpwD/Q1hModpbMh5/iH7Pv8EHQN+U\nzqBL/pamqiJLxdg77HwA/iNs5W7TKNDwQOmDFqsCC0HcB7mKFHpcIRIdN9KvHokJ\n=/yEM\n-----END PGP SIGNATURE-----", "payload": "tree 8b5412fc5ff437fd39ba60dabc3910a4aec0bc20\nparent 8d7417d8079b7f942e3a116ede6d36dc7a219e71\nauthor Jason Newcomb <jsnewcomb@pm.me> 1610652386 -0500\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1610652386 -0500\n\nAddress review comments\n\nAdd: attempt to remove address of expressions from the scrutinee expression before adding references to the pattern\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85edd65bf69266dd7cec2ca6d7bb6941b6f85444", "html_url": "https://github.com/rust-lang/rust/commit/85edd65bf69266dd7cec2ca6d7bb6941b6f85444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85edd65bf69266dd7cec2ca6d7bb6941b6f85444/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d7417d8079b7f942e3a116ede6d36dc7a219e71", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d7417d8079b7f942e3a116ede6d36dc7a219e71", "html_url": "https://github.com/rust-lang/rust/commit/8d7417d8079b7f942e3a116ede6d36dc7a219e71"}], "stats": {"total": 152, "additions": 104, "deletions": 48}, "files": [{"sha": "6ecd738d2f0b18466cb5c8c6413dbb1e3f040dd8", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/85edd65bf69266dd7cec2ca6d7bb6941b6f85444/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85edd65bf69266dd7cec2ca6d7bb6941b6f85444/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=85edd65bf69266dd7cec2ca6d7bb6941b6f85444", "patch": "@@ -4,8 +4,8 @@ use crate::utils::usage::is_unused;\n use crate::utils::{\n     expr_block, get_arg_name, get_parent_expr, implements_trait, in_macro, indent_of, is_allowed, is_expn_of,\n     is_refutable, is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, meets_msrv, multispan_sugg,\n-    remove_blocks, snippet, snippet_block, snippet_opt, snippet_with_applicability, span_lint_and_help,\n-    span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n+    peel_hir_pat_refs, peel_mid_ty_refs, peeln_hir_expr_refs, remove_blocks, snippet, snippet_block, snippet_opt,\n+    snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n };\n use crate::utils::{paths, search_same, SpanlessEq, SpanlessHash};\n use if_chain::if_chain;\n@@ -717,28 +717,6 @@ fn check_single_match_single_pattern(\n     }\n }\n \n-fn peel_pat_refs(pat: &'a Pat<'a>) -> (&'a Pat<'a>, usize) {\n-    fn peel(pat: &'a Pat<'a>, count: usize) -> (&'a Pat<'a>, usize) {\n-        if let PatKind::Ref(pat, _) = pat.kind {\n-            peel(pat, count + 1)\n-        } else {\n-            (pat, count)\n-        }\n-    }\n-    peel(pat, 0)\n-}\n-\n-fn peel_ty_refs(ty: Ty<'_>) -> (Ty<'_>, usize) {\n-    fn peel(ty: Ty<'_>, count: usize) -> (Ty<'_>, usize) {\n-        if let ty::Ref(_, ty, _) = ty.kind() {\n-            peel(ty, count + 1)\n-        } else {\n-            (ty, count)\n-        }\n-    }\n-    peel(ty, 0)\n-}\n-\n fn report_single_match_single_pattern(\n     cx: &LateContext<'_>,\n     ex: &Expr<'_>,\n@@ -752,9 +730,9 @@ fn report_single_match_single_pattern(\n     });\n \n     let (msg, sugg) = if_chain! {\n-        let (pat, pat_ref_count) = peel_pat_refs(arms[0].pat);\n+        let (pat, pat_ref_count) = peel_hir_pat_refs(arms[0].pat);\n         if let PatKind::Path(_) | PatKind::Lit(_) = pat.kind;\n-        let (ty, ty_ref_count) = peel_ty_refs(cx.typeck_results().expr_ty(ex));\n+        let (ty, ty_ref_count) = peel_mid_ty_refs(cx.typeck_results().expr_ty(ex));\n         if let Some(trait_id) = cx.tcx.lang_items().structural_peq_trait();\n         if ty.is_integral() || ty.is_char() || ty.is_str() || implements_trait(cx, ty, trait_id, &[]);\n         then {\n@@ -764,19 +742,28 @@ fn report_single_match_single_pattern(\n                 PatKind::Lit(Expr { kind: ExprKind::Lit(lit), .. }) if lit.node.is_str() => pat_ref_count + 1,\n                 _ => pat_ref_count,\n             };\n-            let msg = \"you seem to be trying to use match for an equality check. Consider using `if`\";\n+            // References are only implicitly added to the pattern, so no overflow here.\n+            // e.g. will work: match &Some(_) { Some(_) => () }\n+            // will not: match Some(_) { &Some(_) => () }\n+            let ref_count_diff = ty_ref_count - pat_ref_count;\n+\n+            // Try to remove address of expressions first.\n+            let (ex, removed) = peeln_hir_expr_refs(ex, ref_count_diff);\n+            let ref_count_diff = ref_count_diff - removed;\n+\n+            let msg = \"you seem to be trying to use `match` for an equality check. Consider using `if`\";\n             let sugg = format!(\n                 \"if {} == {}{} {}{}\",\n                 snippet(cx, ex.span, \"..\"),\n                 // PartialEq for different reference counts may not exist.\n-                \"&\".repeat(ty_ref_count - pat_ref_count),\n+                \"&\".repeat(ref_count_diff),\n                 snippet(cx, arms[0].pat.span, \"..\"),\n                 expr_block(cx, &arms[0].body, None, \"..\", Some(expr.span)),\n                 els_str,\n             );\n             (msg, sugg)\n         } else {\n-            let msg = \"you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\";\n+            let msg = \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\";\n             let sugg = format!(\n                 \"if let {} = {} {}{}\",\n                 snippet(cx, arms[0].pat.span, \"..\"),"}, {"sha": "8f8c681ecb71362796266252e29bd3f76c6994c1", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/85edd65bf69266dd7cec2ca6d7bb6941b6f85444/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85edd65bf69266dd7cec2ca6d7bb6941b6f85444/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=85edd65bf69266dd7cec2ca6d7bb6941b6f85444", "patch": "@@ -1668,6 +1668,44 @@ where\n     match_expr_list\n }\n \n+/// Peels off all references on the pattern. Returns the underlying pattern and the number of\n+/// references removed.\n+pub fn peel_hir_pat_refs(pat: &'a Pat<'a>) -> (&'a Pat<'a>, usize) {\n+    fn peel(pat: &'a Pat<'a>, count: usize) -> (&'a Pat<'a>, usize) {\n+        if let PatKind::Ref(pat, _) = pat.kind {\n+            peel(pat, count + 1)\n+        } else {\n+            (pat, count)\n+        }\n+    }\n+    peel(pat, 0)\n+}\n+\n+/// Peels off up to the given number of references on the expression. Returns the underlying\n+/// expression and the number of references removed.\n+pub fn peeln_hir_expr_refs(expr: &'a Expr<'a>, count: usize) -> (&'a Expr<'a>, usize) {\n+    fn f(expr: &'a Expr<'a>, count: usize, target: usize) -> (&'a Expr<'a>, usize) {\n+        match expr.kind {\n+            ExprKind::AddrOf(_, _, expr) if count != target => f(expr, count + 1, target),\n+            _ => (expr, count),\n+        }\n+    }\n+    f(expr, 0, count)\n+}\n+\n+/// Peels off all references on the type. Returns the underlying type and the number of references\n+/// removed.\n+pub fn peel_mid_ty_refs(ty: Ty<'_>) -> (Ty<'_>, usize) {\n+    fn peel(ty: Ty<'_>, count: usize) -> (Ty<'_>, usize) {\n+        if let ty::Ref(_, ty, _) = ty.kind() {\n+            peel(ty, count + 1)\n+        } else {\n+            (ty, count)\n+        }\n+    }\n+    peel(ty, 0)\n+}\n+\n #[macro_export]\n macro_rules! unwrap_cargo_metadata {\n     ($cx: ident, $lint: ident, $deps: expr) => {{"}, {"sha": "ca884b41c45792ae0a6a16d39802b06b3c6fb070", "filename": "tests/ui/single_match.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85edd65bf69266dd7cec2ca6d7bb6941b6f85444/tests%2Fui%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85edd65bf69266dd7cec2ca6d7bb6941b6f85444/tests%2Fui%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.rs?ref=85edd65bf69266dd7cec2ca6d7bb6941b6f85444", "patch": "@@ -81,7 +81,8 @@ fn single_match_know_enum() {\n     }\n }\n \n-fn issue_173() {\n+// issue #173\n+fn if_suggestion() {\n     let x = \"test\";\n     match x {\n         \"test\" => println!(),\n@@ -106,6 +107,18 @@ fn issue_173() {\n         FOO_C => println!(),\n         _ => (),\n     }\n+\n+    match &&x {\n+        Foo::A => println!(),\n+        _ => (),\n+    }\n+\n+    let x = &x;\n+    match &x {\n+        Foo::A => println!(),\n+        _ => (),\n+    }\n+\n     enum Bar {\n         A,\n         B,"}, {"sha": "7ea6955b7401e4ecb17ca4995b820a10bf4bb5c3", "filename": "tests/ui/single_match.stderr", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/85edd65bf69266dd7cec2ca6d7bb6941b6f85444/tests%2Fui%2Fsingle_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85edd65bf69266dd7cec2ca6d7bb6941b6f85444/tests%2Fui%2Fsingle_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.stderr?ref=85edd65bf69266dd7cec2ca6d7bb6941b6f85444", "patch": "@@ -1,4 +1,4 @@\n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match.rs:8:5\n    |\n LL | /     match x {\n@@ -17,7 +17,7 @@ LL |         println!(\"{:?}\", y);\n LL |     };\n    |\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match.rs:16:5\n    |\n LL | /     match x {\n@@ -29,7 +29,7 @@ LL | |         _ => (),\n LL | |     }\n    | |_____^ help: try this: `if let Some(y) = x { println!(\"{:?}\", y) }`\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match.rs:25:5\n    |\n LL | /     match z {\n@@ -38,7 +38,7 @@ LL | |         _ => {},\n LL | |     };\n    | |_____^ help: try this: `if let (2..=3, 7..=9) = z { dummy() }`\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match.rs:54:5\n    |\n LL | /     match x {\n@@ -47,7 +47,7 @@ LL | |         None => (),\n LL | |     };\n    | |_____^ help: try this: `if let Some(y) = x { dummy() }`\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match.rs:59:5\n    |\n LL | /     match y {\n@@ -56,7 +56,7 @@ LL | |         Err(..) => (),\n LL | |     };\n    | |_____^ help: try this: `if let Ok(y) = y { dummy() }`\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match.rs:66:5\n    |\n LL | /     match c {\n@@ -65,41 +65,59 @@ LL | |         Cow::Owned(..) => (),\n LL | |     };\n    | |_____^ help: try this: `if let Cow::Borrowed(..) = c { dummy() }`\n \n-error: you seem to be trying to use match for an equality check. Consider using `if`\n-  --> $DIR/single_match.rs:86:5\n+error: you seem to be trying to use `match` for an equality check. Consider using `if`\n+  --> $DIR/single_match.rs:87:5\n    |\n LL | /     match x {\n LL | |         \"test\" => println!(),\n LL | |         _ => (),\n LL | |     }\n    | |_____^ help: try this: `if x == \"test\" { println!() }`\n \n-error: you seem to be trying to use match for an equality check. Consider using `if`\n-  --> $DIR/single_match.rs:99:5\n+error: you seem to be trying to use `match` for an equality check. Consider using `if`\n+  --> $DIR/single_match.rs:100:5\n    |\n LL | /     match x {\n LL | |         Foo::A => println!(),\n LL | |         _ => (),\n LL | |     }\n    | |_____^ help: try this: `if x == Foo::A { println!() }`\n \n-error: you seem to be trying to use match for an equality check. Consider using `if`\n-  --> $DIR/single_match.rs:105:5\n+error: you seem to be trying to use `match` for an equality check. Consider using `if`\n+  --> $DIR/single_match.rs:106:5\n    |\n LL | /     match x {\n LL | |         FOO_C => println!(),\n LL | |         _ => (),\n LL | |     }\n    | |_____^ help: try this: `if x == FOO_C { println!() }`\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n-  --> $DIR/single_match.rs:121:5\n+error: you seem to be trying to use `match` for an equality check. Consider using `if`\n+  --> $DIR/single_match.rs:111:5\n+   |\n+LL | /     match &&x {\n+LL | |         Foo::A => println!(),\n+LL | |         _ => (),\n+LL | |     }\n+   | |_____^ help: try this: `if x == Foo::A { println!() }`\n+\n+error: you seem to be trying to use `match` for an equality check. Consider using `if`\n+  --> $DIR/single_match.rs:117:5\n+   |\n+LL | /     match &x {\n+LL | |         Foo::A => println!(),\n+LL | |         _ => (),\n+LL | |     }\n+   | |_____^ help: try this: `if x == &Foo::A { println!() }`\n+\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match.rs:134:5\n    |\n LL | /     match x {\n LL | |         Bar::A => println!(),\n LL | |         _ => (),\n LL | |     }\n    | |_____^ help: try this: `if let Bar::A = x { println!() }`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "20be4fa226cf154f1de72a8dcb6ab2f71285a79b", "filename": "tests/ui/single_match_else.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85edd65bf69266dd7cec2ca6d7bb6941b6f85444/tests%2Fui%2Fsingle_match_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85edd65bf69266dd7cec2ca6d7bb6941b6f85444/tests%2Fui%2Fsingle_match_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match_else.stderr?ref=85edd65bf69266dd7cec2ca6d7bb6941b6f85444", "patch": "@@ -1,4 +1,4 @@\n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match_else.rs:14:5\n    |\n LL | /     match ExprNode::Butterflies {\n@@ -19,7 +19,7 @@ LL |         None\n LL |     }\n    |\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match_else.rs:70:5\n    |\n LL | /     match Some(1) {\n@@ -39,7 +39,7 @@ LL |         return\n LL |     }\n    |\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match_else.rs:79:5\n    |\n LL | /     match Some(1) {"}]}