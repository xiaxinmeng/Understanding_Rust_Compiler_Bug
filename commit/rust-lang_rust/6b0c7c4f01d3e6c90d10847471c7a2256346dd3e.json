{"sha": "6b0c7c4f01d3e6c90d10847471c7a2256346dd3e", "node_id": "C_kwDOAAsO6NoAKDZiMGM3YzRmMDFkM2U2YzkwZDEwODQ3NDcxYzdhMjI1NjM0NmRkM2U", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-06-09T14:49:19Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-06-09T15:00:47Z"}, "message": "Change format of rustdoc-js tests by putting `query` and `correction` directly alongside the expected values", "tree": {"sha": "1263e4148b6a92a1d2a92d71e027e46d69645131", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1263e4148b6a92a1d2a92d71e027e46d69645131"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b0c7c4f01d3e6c90d10847471c7a2256346dd3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b0c7c4f01d3e6c90d10847471c7a2256346dd3e", "html_url": "https://github.com/rust-lang/rust/commit/6b0c7c4f01d3e6c90d10847471c7a2256346dd3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b0c7c4f01d3e6c90d10847471c7a2256346dd3e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a77659a1e1807ba567f513afe59115af2604dc30", "url": "https://api.github.com/repos/rust-lang/rust/commits/a77659a1e1807ba567f513afe59115af2604dc30", "html_url": "https://github.com/rust-lang/rust/commit/a77659a1e1807ba567f513afe59115af2604dc30"}], "stats": {"total": 90, "additions": 49, "deletions": 41}, "files": [{"sha": "416517d15f5db9468b18d7e207910de2f4b085d1", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 49, "deletions": 41, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/6b0c7c4f01d3e6c90d10847471c7a2256346dd3e/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/6b0c7c4f01d3e6c90d10847471c7a2256346dd3e/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=6b0c7c4f01d3e6c90d10847471c7a2256346dd3e", "patch": "@@ -22,6 +22,10 @@ function contentToDiffLine(key, value) {\n     return `\"${key}\": \"${value}\",`;\n }\n \n+function shouldIgnoreField(fieldName) {\n+    return fieldName === \"query\" || fieldName === \"correction\";\n+}\n+\n // This function is only called when no matching result was found and therefore will only display\n // the diff between the two items.\n function betterLookingDiff(entry, data) {\n@@ -135,6 +139,9 @@ function valueCheck(fullPath, expected, result, error_text, queryName) {\n     } else if (expected !== null && typeof expected !== \"undefined\" &&\n                expected.constructor == Object) { // eslint-disable-line eqeqeq\n         for (const key in expected) {\n+            if (shouldIgnoreField(key)) {\n+                continue;\n+            }\n             if (!Object.prototype.hasOwnProperty.call(expected, key)) {\n                 continue;\n             }\n@@ -184,6 +191,9 @@ function runSearch(query, expected, doSearch, loadedFile, queryName) {\n     const error_text = [];\n \n     for (const key in expected) {\n+        if (shouldIgnoreField(key)) {\n+            continue;\n+        }\n         if (!Object.prototype.hasOwnProperty.call(expected, key)) {\n             continue;\n         }\n@@ -260,84 +270,83 @@ function checkResult(error_text, loadedFile, displaySuccess) {\n     return 1;\n }\n \n-function runCheck(loadedFile, key, callback) {\n-    const expected = loadedFile[key];\n-    const query = loadedFile.QUERY;\n-\n-    if (Array.isArray(query)) {\n-        if (!Array.isArray(expected)) {\n-            console.log(\"FAILED\");\n-            console.log(`==> If QUERY variable is an array, ${key} should be an array too`);\n-            return 1;\n-        } else if (query.length !== expected.length) {\n-            console.log(\"FAILED\");\n-            console.log(`==> QUERY variable should have the same length as ${key}`);\n-            return 1;\n+function runCheckInner(callback, loadedFile, entry, getCorrections, extra) {\n+    if (typeof entry.query !== \"string\") {\n+        console.log(\"FAILED\");\n+        console.log(\"==> Missing `query` field\");\n+        return false;\n+    }\n+    let error_text = callback(entry.query, entry, extra ? \"[ query `\" + entry.query + \"`]\" : \"\");\n+    if (checkResult(error_text, loadedFile, false) !== 0) {\n+        return false;\n+    }\n+    if (entry.correction !== undefined) {\n+        error_text = runCorrections(entry.query, entry.correction, getCorrections, loadedFile);\n+        if (checkResult(error_text, loadedFile, false) !== 0) {\n+            return false;\n         }\n-        for (let i = 0; i < query.length; ++i) {\n-            const error_text = callback(query[i], expected[i], \"[ query `\" + query[i] + \"`]\");\n-            if (checkResult(error_text, loadedFile, false) !== 0) {\n+    }\n+    return true;\n+}\n+\n+function runCheck(loadedFile, key, getCorrections, callback) {\n+    const expected = loadedFile[key];\n+\n+    if (Array.isArray(expected)) {\n+        for (const entry of expected) {\n+            if (!runCheckInner(callback, loadedFile, entry, getCorrections, true)) {\n                 return 1;\n             }\n         }\n-        console.log(\"OK\");\n-    } else {\n-        const error_text = callback(query, expected, \"\");\n-        if (checkResult(error_text, loadedFile, true) !== 0) {\n-            return 1;\n-        }\n+    } else if (!runCheckInner(callback, loadedFile, expected, getCorrections, false)) {\n+        return 1;\n     }\n+    console.log(\"OK\");\n     return 0;\n }\n \n+function hasCheck(content, checkName) {\n+    return content.startsWith(`const ${checkName}`) || content.includes(`\\nconst ${checkName}`);\n+}\n+\n function runChecks(testFile, doSearch, parseQuery, getCorrections) {\n     let checkExpected = false;\n     let checkParsed = false;\n-    let checkCorrections = false;\n-    let testFileContent = readFile(testFile) + \"exports.QUERY = QUERY;\";\n+    let testFileContent = readFile(testFile);\n \n     if (testFileContent.indexOf(\"FILTER_CRATE\") !== -1) {\n         testFileContent += \"exports.FILTER_CRATE = FILTER_CRATE;\";\n     } else {\n         testFileContent += \"exports.FILTER_CRATE = null;\";\n     }\n \n-    if (testFileContent.indexOf(\"\\nconst EXPECTED\") !== -1) {\n+    if (hasCheck(testFileContent, \"EXPECTED\")) {\n         testFileContent += \"exports.EXPECTED = EXPECTED;\";\n         checkExpected = true;\n     }\n-    if (testFileContent.indexOf(\"\\nconst PARSED\") !== -1) {\n+    if (hasCheck(testFileContent, \"PARSED\")) {\n         testFileContent += \"exports.PARSED = PARSED;\";\n         checkParsed = true;\n     }\n-    if (testFileContent.indexOf(\"\\nconst CORRECTIONS\") !== -1) {\n-        testFileContent += \"exports.CORRECTIONS = CORRECTIONS;\";\n-        checkCorrections = true;\n-    }\n-    if (!checkParsed && !checkExpected && !checkCorrections) {\n+    if (!checkParsed && !checkExpected) {\n         console.log(\"FAILED\");\n-        console.log(\"==> At least `PARSED`, `EXPECTED`, or `CORRECTIONS` is needed!\");\n+        console.log(\"==> At least `PARSED` or `EXPECTED` is needed!\");\n         return 1;\n     }\n \n     const loadedFile = loadContent(testFileContent);\n     let res = 0;\n \n     if (checkExpected) {\n-        res += runCheck(loadedFile, \"EXPECTED\", (query, expected, text) => {\n+        res += runCheck(loadedFile, \"EXPECTED\", getCorrections, (query, expected, text) => {\n             return runSearch(query, expected, doSearch, loadedFile, text);\n         });\n     }\n     if (checkParsed) {\n-        res += runCheck(loadedFile, \"PARSED\", (query, expected, text) => {\n+        res += runCheck(loadedFile, \"PARSED\", getCorrections, (query, expected, text) => {\n             return runParser(query, expected, parseQuery, text);\n         });\n     }\n-    if (checkCorrections) {\n-        res += runCheck(loadedFile, \"CORRECTIONS\", (query, expected) => {\n-            return runCorrections(query, expected, getCorrections, loadedFile);\n-        });\n-    }\n     return res;\n }\n \n@@ -367,8 +376,7 @@ function loadSearchJS(doc_folder, resource_suffix) {\n         },\n         getCorrections: function(queryStr, filterCrate, currentCrate) {\n             const parsedQuery = searchModule.parseQuery(queryStr);\n-            searchModule.execQuery(parsedQuery, searchWords,\n-                filterCrate, currentCrate);\n+            searchModule.execQuery(parsedQuery, searchWords, filterCrate, currentCrate);\n             return parsedQuery.correction;\n         },\n         parseQuery: searchModule.parseQuery,"}]}