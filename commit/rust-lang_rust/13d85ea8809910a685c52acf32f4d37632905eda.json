{"sha": "13d85ea8809910a685c52acf32f4d37632905eda", "node_id": "C_kwDOAAsO6NoAKDEzZDg1ZWE4ODA5OTEwYTY4NWM1MmFjZjMyZjRkMzc2MzI5MDVlZGE", "commit": {"author": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2021-05-18T07:51:20Z"}, "committer": {"name": "gilescope", "email": "gilescope@gmail.com", "date": "2022-03-26T14:25:29Z"}, "message": "add likely and clearer comments", "tree": {"sha": "f68ba5d2d4a8b63b9225f9bc34ff4de9bc911047", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f68ba5d2d4a8b63b9225f9bc34ff4de9bc911047"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13d85ea8809910a685c52acf32f4d37632905eda", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0hoVRXRPubZAqGkYx9jUtSpSe8FAmI/IlkACgkQYx9jUtSp\nSe9VuQ/+IWgljK9/kMZBelB2XlqxD+AvreuV9tFbeJqd8Vaf0HoNNvfqs35gtQhM\nzlxGDfatrjWt/PjqsiAbC2V/KvMlAPOUKT5m2wvUA+d5W/4YFo7E6G1/mBhVO9sN\nejIZMo719oT/5EXuIsU3J+rZ8xQBooguk25rkUlgwIf6HiQnPifVBFLdvxzMHBXU\nLAT5PCqPG07b+6tkgNNjaV9mRyzgpjK4WXgUQcAYswmNaAvdFlCvVOXBUxYtsSK4\nNQZBEn3nmAbFKR7SUxzzmU9trZWufYPbqGpOIPKjLAo5UK/zNRdA1ZQ3KhrM3nrq\n/U2GXVkxIASV9jctcWrcISNxYiSIJyXZYU2cvp6v9eC3BxiqVK7hCRJG8q07XSev\n3u+4L9Wq8n3ulYqm4g6VQrjNw38GPAEAOpFz1II+9ntgOiP/0GkJ2uheCV8fZpRP\nHO0lsP4fZZna4qhJRNK57lBVr5bpTqUYyXH0fPBDfpSYh6dpP0dj48SxFZgM0U2O\n1A83Uxr7UOZX+TUBJJc+22l2gojRBo8aqoxv/Lf1rPyHG2/5LV4ytxAd5VBea07E\nnf2jM7WDKd4IbRx/Ftpc8o+SDnkAtfOfBiNYF9/luxv/cHxjG/q7vksm0XAxfBli\nG44uoXEIFmzOVmyqJPcmjj69mIvQ/emrPbpgrrkIM9ihRf4RudI=\n=0fb6\n-----END PGP SIGNATURE-----", "payload": "tree f68ba5d2d4a8b63b9225f9bc34ff4de9bc911047\nparent 0a11090053d73af94de3c1a96d125c4980a16626\nauthor Giles Cope <gilescope@gmail.com> 1621324280 +0100\ncommitter gilescope <gilescope@gmail.com> 1648304729 +0000\n\nadd likely and clearer comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13d85ea8809910a685c52acf32f4d37632905eda", "html_url": "https://github.com/rust-lang/rust/commit/13d85ea8809910a685c52acf32f4d37632905eda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13d85ea8809910a685c52acf32f4d37632905eda/comments", "author": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a11090053d73af94de3c1a96d125c4980a16626", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a11090053d73af94de3c1a96d125c4980a16626", "html_url": "https://github.com/rust-lang/rust/commit/0a11090053d73af94de3c1a96d125c4980a16626"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "1941933483925e293ce7cd8e62aab5b17821650a", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/13d85ea8809910a685c52acf32f4d37632905eda/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d85ea8809910a685c52acf32f4d37632905eda/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=13d85ea8809910a685c52acf32f4d37632905eda", "patch": "@@ -1068,8 +1068,13 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n \n     let mut result = T::from_u32(0);\n \n-    if radix <= 16 && digits.len() <= mem::size_of::<T>() * 2 - is_signed_ty as usize {\n-        // SAFETY: Consider the highest radix of 16:\n+    if intrinsics::likely(\n+        radix <= 16 && digits.len() <= mem::size_of::<T>() * 2 - is_signed_ty as usize,\n+    ) {\n+        // SAFETY: We can take this fast path when `radix.pow(digits.len()) - 1 <= T::MAX`\n+        // but the condition above is a faster (conservative) approximation of this.\n+        //\n+        // Consider the highest radix of 16:\n         // `u8::MAX` is `ff` (2 characters), `u16::MAX` is `ffff` (4 characters)\n         // We can be sure that any src len of 2 would fit in a u8 so we don't need\n         // to check for overflow.\n@@ -1088,9 +1093,14 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n         let overflow_err = || PIE { kind: if is_positive { PosOverflow } else { NegOverflow } };\n \n         for &c in digits {\n+            // When `radix` is passed in as a literal, rather than doing a slow `imul`\n+            // then the compiler can use a shift if `radix` is a power of 2.\n+            // (*10 can also be turned into *8 + *2).\n+            // When the compiler can't use these optimisations,\n+            // there is a latency of several cycles so doing the\n+            // multiply before we need to use the result helps.\n             let mul = result.checked_mul(radix);\n             let x = (c as char).to_digit(radix).ok_or(PIE { kind: InvalidDigit })?;\n-            // multiply done early for performance reasons.\n             result = mul.ok_or_else(overflow_err)?;\n             result = additive_op(&result, x).ok_or_else(overflow_err)?;\n         }"}]}