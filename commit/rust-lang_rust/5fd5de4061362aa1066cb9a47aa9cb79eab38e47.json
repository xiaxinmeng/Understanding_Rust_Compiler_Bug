{"sha": "5fd5de4061362aa1066cb9a47aa9cb79eab38e47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZDVkZTQwNjEzNjJhYTEwNjZjYjlhNDdhYTljYjc5ZWFiMzhlNDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-24T00:26:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-24T00:26:38Z"}, "message": "Make sure that adding a snippet requires corresponding capability", "tree": {"sha": "2b3d64141d9797715914e2d26496eee7adb38a11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b3d64141d9797715914e2d26496eee7adb38a11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fd5de4061362aa1066cb9a47aa9cb79eab38e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd5de4061362aa1066cb9a47aa9cb79eab38e47", "html_url": "https://github.com/rust-lang/rust/commit/5fd5de4061362aa1066cb9a47aa9cb79eab38e47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fd5de4061362aa1066cb9a47aa9cb79eab38e47/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3050bded1e7a874da265d94dc32c4a98bc98390", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3050bded1e7a874da265d94dc32c4a98bc98390", "html_url": "https://github.com/rust-lang/rust/commit/b3050bded1e7a874da265d94dc32c4a98bc98390"}], "stats": {"total": 151, "additions": 107, "deletions": 44}, "files": [{"sha": "adefb290e81d98dd09c11a7ffa7c09edf64c1ef6", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fd5de4061362aa1066cb9a47aa9cb79eab38e47/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd5de4061362aa1066cb9a47aa9cb79eab38e47/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=5fd5de4061362aa1066cb9a47aa9cb79eab38e47", "patch": "@@ -42,10 +42,14 @@ pub(super) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionC\n }\n \n fn keyword(ctx: &CompletionContext, kw: &str, snippet: &str) -> CompletionItem {\n-    CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), kw)\n-        .kind(CompletionItemKind::Keyword)\n-        .insert_snippet(snippet)\n-        .build()\n+    let res = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), kw)\n+        .kind(CompletionItemKind::Keyword);\n+\n+    match ctx.config.snippet_cap {\n+        Some(cap) => res.insert_snippet(cap, snippet),\n+        _ => res.insert_text(if snippet.contains('$') { kw } else { snippet }),\n+    }\n+    .build()\n }\n \n pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {"}, {"sha": "8d397b0feafb316e76f83764634a70ab0d6b6451", "filename": "crates/ra_ide/src/completion/complete_postfix.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5fd5de4061362aa1066cb9a47aa9cb79eab38e47/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd5de4061362aa1066cb9a47aa9cb79eab38e47/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=5fd5de4061362aa1066cb9a47aa9cb79eab38e47", "patch": "@@ -6,6 +6,7 @@ use ra_syntax::{\n };\n use ra_text_edit::TextEdit;\n \n+use super::completion_config::SnippetCap;\n use crate::{\n     completion::{\n         completion_context::CompletionContext,\n@@ -32,9 +33,15 @@ pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         None => return,\n     };\n \n+    let cap = match ctx.config.snippet_cap {\n+        Some(it) => it,\n+        None => return,\n+    };\n+\n     if receiver_ty.is_bool() || receiver_ty.is_unknown() {\n         postfix_snippet(\n             ctx,\n+            cap,\n             &dot_receiver,\n             \"if\",\n             \"if expr {}\",\n@@ -43,6 +50,7 @@ pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         .add_to(acc);\n         postfix_snippet(\n             ctx,\n+            cap,\n             &dot_receiver,\n             \"while\",\n             \"while expr {}\",\n@@ -52,11 +60,20 @@ pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n     }\n \n     // !&&&42 is a compiler error, ergo process it before considering the references\n-    postfix_snippet(ctx, &dot_receiver, \"not\", \"!expr\", &format!(\"!{}\", receiver_text)).add_to(acc);\n+    postfix_snippet(ctx, cap, &dot_receiver, \"not\", \"!expr\", &format!(\"!{}\", receiver_text))\n+        .add_to(acc);\n \n-    postfix_snippet(ctx, &dot_receiver, \"ref\", \"&expr\", &format!(\"&{}\", receiver_text)).add_to(acc);\n-    postfix_snippet(ctx, &dot_receiver, \"refm\", \"&mut expr\", &format!(\"&mut {}\", receiver_text))\n+    postfix_snippet(ctx, cap, &dot_receiver, \"ref\", \"&expr\", &format!(\"&{}\", receiver_text))\n         .add_to(acc);\n+    postfix_snippet(\n+        ctx,\n+        cap,\n+        &dot_receiver,\n+        \"refm\",\n+        \"&mut expr\",\n+        &format!(\"&mut {}\", receiver_text),\n+    )\n+    .add_to(acc);\n \n     // The rest of the postfix completions create an expression that moves an argument,\n     // so it's better to consider references now to avoid breaking the compilation\n@@ -66,6 +83,7 @@ pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n \n     postfix_snippet(\n         ctx,\n+        cap,\n         &dot_receiver,\n         \"match\",\n         \"match expr {}\",\n@@ -75,15 +93,23 @@ pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n \n     postfix_snippet(\n         ctx,\n+        cap,\n         &dot_receiver,\n         \"box\",\n         \"Box::new(expr)\",\n         &format!(\"Box::new({})\", receiver_text),\n     )\n     .add_to(acc);\n \n-    postfix_snippet(ctx, &dot_receiver, \"dbg\", \"dbg!(expr)\", &format!(\"dbg!({})\", receiver_text))\n-        .add_to(acc);\n+    postfix_snippet(\n+        ctx,\n+        cap,\n+        &dot_receiver,\n+        \"dbg\",\n+        \"dbg!(expr)\",\n+        &format!(\"dbg!({})\", receiver_text),\n+    )\n+    .add_to(acc);\n }\n \n fn get_receiver_text(receiver: &ast::Expr, receiver_is_ambiguous_float_literal: bool) -> String {\n@@ -108,6 +134,7 @@ fn include_references(initial_element: &ast::Expr) -> ast::Expr {\n \n fn postfix_snippet(\n     ctx: &CompletionContext,\n+    cap: SnippetCap,\n     receiver: &ast::Expr,\n     label: &str,\n     detail: &str,\n@@ -121,7 +148,7 @@ fn postfix_snippet(\n     };\n     CompletionItem::new(CompletionKind::Postfix, ctx.source_range(), label)\n         .detail(detail)\n-        .snippet_edit(edit)\n+        .snippet_edit(cap, edit)\n }\n \n #[cfg(test)]"}, {"sha": "4bccfbfed26f68ec5961d86f1db7dc4a8d25dec0", "filename": "crates/ra_ide/src/completion/complete_snippet.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5fd5de4061362aa1066cb9a47aa9cb79eab38e47/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd5de4061362aa1066cb9a47aa9cb79eab38e47/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs?ref=5fd5de4061362aa1066cb9a47aa9cb79eab38e47", "patch": "@@ -1,31 +1,41 @@\n //! FIXME: write short doc here\n \n use crate::completion::{\n-    completion_item::Builder, CompletionContext, CompletionItem, CompletionItemKind,\n-    CompletionKind, Completions,\n+    completion_config::SnippetCap, completion_item::Builder, CompletionContext, CompletionItem,\n+    CompletionItemKind, CompletionKind, Completions,\n };\n \n-fn snippet(ctx: &CompletionContext, label: &str, snippet: &str) -> Builder {\n+fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str) -> Builder {\n     CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), label)\n-        .insert_snippet(snippet)\n+        .insert_snippet(cap, snippet)\n         .kind(CompletionItemKind::Snippet)\n }\n \n pub(super) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n     if !(ctx.is_trivial_path && ctx.function_syntax.is_some()) {\n         return;\n     }\n+    let cap = match ctx.config.snippet_cap {\n+        Some(it) => it,\n+        None => return,\n+    };\n \n-    snippet(ctx, \"pd\", \"eprintln!(\\\"$0 = {:?}\\\", $0);\").add_to(acc);\n-    snippet(ctx, \"ppd\", \"eprintln!(\\\"$0 = {:#?}\\\", $0);\").add_to(acc);\n+    snippet(ctx, cap, \"pd\", \"eprintln!(\\\"$0 = {:?}\\\", $0);\").add_to(acc);\n+    snippet(ctx, cap, \"ppd\", \"eprintln!(\\\"$0 = {:#?}\\\", $0);\").add_to(acc);\n }\n \n pub(super) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_new_item {\n         return;\n     }\n+    let cap = match ctx.config.snippet_cap {\n+        Some(it) => it,\n+        None => return,\n+    };\n+\n     snippet(\n         ctx,\n+        cap,\n         \"Test function\",\n         \"\\\n #[test]\n@@ -36,8 +46,8 @@ fn ${1:feature}() {\n     .lookup_by(\"tfn\")\n     .add_to(acc);\n \n-    snippet(ctx, \"macro_rules\", \"macro_rules! $1 {\\n\\t($2) => {\\n\\t\\t$0\\n\\t};\\n}\").add_to(acc);\n-    snippet(ctx, \"pub(crate)\", \"pub(crate) $0\").add_to(acc);\n+    snippet(ctx, cap, \"macro_rules\", \"macro_rules! $1 {\\n\\t($2) => {\\n\\t\\t$0\\n\\t};\\n}\").add_to(acc);\n+    snippet(ctx, cap, \"pub(crate)\", \"pub(crate) $0\").add_to(acc);\n }\n \n #[cfg(test)]"}, {"sha": "c39943252428df1b57663671f1747129ea7455a3", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5fd5de4061362aa1066cb9a47aa9cb79eab38e47/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd5de4061362aa1066cb9a47aa9cb79eab38e47/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=5fd5de4061362aa1066cb9a47aa9cb79eab38e47", "patch": "@@ -122,7 +122,7 @@ fn add_function_impl(\n     ctx: &CompletionContext,\n     func: &hir::Function,\n ) {\n-    let display = FunctionSignature::from_hir(ctx.db, *func);\n+    let signature = FunctionSignature::from_hir(ctx.db, *func);\n \n     let fn_name = func.name(ctx.db).to_string();\n \n@@ -141,12 +141,20 @@ fn add_function_impl(\n     } else {\n         CompletionItemKind::Function\n     };\n-\n-    let snippet = format!(\"{} {{\\n    $0\\n}}\", display);\n-\n     let range = TextRange::from_to(fn_def_node.text_range().start(), ctx.source_range().end());\n \n-    builder.snippet_edit(TextEdit::replace(range, snippet)).kind(completion_kind).add_to(acc);\n+    match ctx.config.snippet_cap {\n+        Some(cap) => {\n+            let snippet = format!(\"{} {{\\n    $0\\n}}\", signature);\n+            builder.snippet_edit(cap, TextEdit::replace(range, snippet))\n+        }\n+        None => {\n+            let header = format!(\"{} {{\", signature);\n+            builder.text_edit(TextEdit::replace(range, header))\n+        }\n+    }\n+    .kind(completion_kind)\n+    .add_to(acc);\n }\n \n fn add_type_alias_impl("}, {"sha": "fb06cc1257d2d9b6d6be02991d1d6d812beca8a9", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5fd5de4061362aa1066cb9a47aa9cb79eab38e47/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd5de4061362aa1066cb9a47aa9cb79eab38e47/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=5fd5de4061362aa1066cb9a47aa9cb79eab38e47", "patch": "@@ -2,6 +2,7 @@\n \n use std::fmt;\n \n+use super::completion_config::SnippetCap;\n use hir::Documentation;\n use ra_syntax::TextRange;\n use ra_text_edit::TextEdit;\n@@ -270,7 +271,11 @@ impl Builder {\n         self.insert_text = Some(insert_text.into());\n         self\n     }\n-    pub(crate) fn insert_snippet(mut self, snippet: impl Into<String>) -> Builder {\n+    pub(crate) fn insert_snippet(\n+        mut self,\n+        _cap: SnippetCap,\n+        snippet: impl Into<String>,\n+    ) -> Builder {\n         self.insert_text_format = InsertTextFormat::Snippet;\n         self.insert_text(snippet)\n     }\n@@ -282,7 +287,7 @@ impl Builder {\n         self.text_edit = Some(edit);\n         self\n     }\n-    pub(crate) fn snippet_edit(mut self, edit: TextEdit) -> Builder {\n+    pub(crate) fn snippet_edit(mut self, _cap: SnippetCap, edit: TextEdit) -> Builder {\n         self.insert_text_format = InsertTextFormat::Snippet;\n         self.text_edit(edit)\n     }"}, {"sha": "5e2b8b920ae95c691dfed97d7ec72cca73fac1e6", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5fd5de4061362aa1066cb9a47aa9cb79eab38e47/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd5de4061362aa1066cb9a47aa9cb79eab38e47/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=5fd5de4061362aa1066cb9a47aa9cb79eab38e47", "patch": "@@ -114,17 +114,19 @@ impl Completions {\n \n         // Add `<>` for generic types\n         if ctx.is_path_type && !ctx.has_type_args && ctx.config.add_call_parenthesis {\n-            let has_non_default_type_params = match resolution {\n-                ScopeDef::ModuleDef(Adt(it)) => it.has_non_default_type_params(ctx.db),\n-                ScopeDef::ModuleDef(TypeAlias(it)) => it.has_non_default_type_params(ctx.db),\n-                _ => false,\n-            };\n-            if has_non_default_type_params {\n-                tested_by!(inserts_angle_brackets_for_generics);\n-                completion_item = completion_item\n-                    .lookup_by(local_name.clone())\n-                    .label(format!(\"{}<\u2026>\", local_name))\n-                    .insert_snippet(format!(\"{}<$0>\", local_name));\n+            if let Some(cap) = ctx.config.snippet_cap {\n+                let has_non_default_type_params = match resolution {\n+                    ScopeDef::ModuleDef(Adt(it)) => it.has_non_default_type_params(ctx.db),\n+                    ScopeDef::ModuleDef(TypeAlias(it)) => it.has_non_default_type_params(ctx.db),\n+                    _ => false,\n+                };\n+                if has_non_default_type_params {\n+                    tested_by!(inserts_angle_brackets_for_generics);\n+                    completion_item = completion_item\n+                        .lookup_by(local_name.clone())\n+                        .label(format!(\"{}<\u2026>\", local_name))\n+                        .insert_snippet(cap, format!(\"{}<$0>\", local_name));\n+                }\n             }\n         }\n \n@@ -184,13 +186,16 @@ impl Completions {\n                 .set_deprecated(is_deprecated(macro_, ctx.db))\n                 .detail(detail);\n \n-        builder = if ctx.use_item_syntax.is_some() || ctx.is_macro_call {\n-            tested_by!(dont_insert_macro_call_parens_unncessary);\n-            builder.insert_text(name)\n-        } else {\n-            let macro_braces_to_insert =\n-                self.guess_macro_braces(&name, docs.as_ref().map_or(\"\", |s| s.as_str()));\n-            builder.insert_snippet(macro_declaration + macro_braces_to_insert)\n+        builder = match ctx.config.snippet_cap {\n+            Some(cap) if ctx.use_item_syntax.is_none() && !ctx.is_macro_call => {\n+                let macro_braces_to_insert =\n+                    self.guess_macro_braces(&name, docs.as_ref().map_or(\"\", |s| s.as_str()));\n+                builder.insert_snippet(cap, macro_declaration + macro_braces_to_insert)\n+            }\n+            _ => {\n+                tested_by!(dont_insert_macro_call_parens_unncessary);\n+                builder.insert_text(name)\n+            }\n         };\n \n         self.add(builder);\n@@ -366,6 +371,10 @@ impl Builder {\n         if ctx.use_item_syntax.is_some() || ctx.is_call {\n             return self;\n         }\n+        let cap = match ctx.config.snippet_cap {\n+            Some(it) => it,\n+            None => return self,\n+        };\n         // If not an import, add parenthesis automatically.\n         tested_by!(inserts_parens_for_function_calls);\n \n@@ -387,7 +396,7 @@ impl Builder {\n \n             (snippet, format!(\"{}(\u2026)\", name))\n         };\n-        self.lookup_by(name).label(label).insert_snippet(snippet)\n+        self.lookup_by(name).label(label).insert_snippet(cap, snippet)\n     }\n }\n "}]}