{"sha": "a6180ede5cd3e2c471831ead520c4ac3e7ef6b68", "node_id": "C_kwDOAAsO6NoAKGE2MTgwZWRlNWNkM2UyYzQ3MTgzMWVhZDUyMGM0YWMzZTdlZjZiNjg", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-26T21:19:07Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-29T21:04:10Z"}, "message": "Simplify lang item groups", "tree": {"sha": "54fb11ff299811e3b19b7695618a9f7b7172410b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54fb11ff299811e3b19b7695618a9f7b7172410b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6180ede5cd3e2c471831ead520c4ac3e7ef6b68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6180ede5cd3e2c471831ead520c4ac3e7ef6b68", "html_url": "https://github.com/rust-lang/rust/commit/a6180ede5cd3e2c471831ead520c4ac3e7ef6b68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6180ede5cd3e2c471831ead520c4ac3e7ef6b68/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6621279a756909a55624a19f39abc9675eff3d0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6621279a756909a55624a19f39abc9675eff3d0c", "html_url": "https://github.com/rust-lang/rust/commit/6621279a756909a55624a19f39abc9675eff3d0c"}], "stats": {"total": 155, "additions": 73, "deletions": 82}, "files": [{"sha": "5446ccb1a47307e7608a7f28b78a27c50b12237d", "filename": "compiler/rustc_const_eval/src/util/call_kind.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a6180ede5cd3e2c471831ead520c4ac3e7ef6b68/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6180ede5cd3e2c471831ead520c4ac3e7ef6b68/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs?ref=a6180ede5cd3e2c471831ead520c4ac3e7ef6b68", "patch": "@@ -3,7 +3,7 @@\n //! context.\n \n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items::LangItemGroup;\n+use rustc_hir::lang_items;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AssocItemContainer, DefIdTree, Instance, ParamEnv, Ty, TyCtxt};\n use rustc_span::symbol::Ident;\n@@ -74,22 +74,24 @@ pub fn call_kind<'tcx>(\n         }\n     });\n \n-    let fn_call = parent\n-        .and_then(|p| tcx.lang_items().group(LangItemGroup::Fn).iter().find(|did| **did == p));\n+    let fn_call = parent.and_then(|p| {\n+        lang_items::FN_TRAITS.iter().filter_map(|&l| tcx.lang_items().get(l)).find(|&id| id == p)\n+    });\n \n-    let operator = (!from_hir_call)\n-        .then(|| parent)\n-        .flatten()\n-        .and_then(|p| tcx.lang_items().group(LangItemGroup::Op).iter().find(|did| **did == p));\n+    let operator = if !from_hir_call && let Some(p) = parent {\n+        lang_items::OPERATORS.iter().filter_map(|&l| tcx.lang_items().get(l)).find(|&id| id == p)\n+    } else {\n+        None\n+    };\n \n     let is_deref = !from_hir_call && tcx.is_diagnostic_item(sym::deref_method, method_did);\n \n     // Check for a 'special' use of 'self' -\n     // an FnOnce call, an operator (e.g. `<<`), or a\n     // deref coercion.\n-    let kind = if let Some(&trait_id) = fn_call {\n+    let kind = if let Some(trait_id) = fn_call {\n         Some(CallKind::FnCall { fn_trait_id: trait_id, self_ty: method_substs.type_at(0) })\n-    } else if let Some(&trait_id) = operator {\n+    } else if let Some(trait_id) = operator {\n         Some(CallKind::Operator { self_arg, trait_id, self_ty: method_substs.type_at(0) })\n     } else if is_deref {\n         let deref_target = tcx.get_diagnostic_item(sym::deref_target).and_then(|deref_target| {"}, {"sha": "72ed73e81b42bda0dc7fea1e95caf8782f1035ae", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 62, "deletions": 70, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/a6180ede5cd3e2c471831ead520c4ac3e7ef6b68/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6180ede5cd3e2c471831ead520c4ac3e7ef6b68/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=a6180ede5cd3e2c471831ead520c4ac3e7ef6b68", "patch": "@@ -17,22 +17,6 @@ use rustc_macros::HashStable_Generic;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n-pub enum LangItemGroup {\n-    Op,\n-    Fn,\n-}\n-\n-const NUM_GROUPS: usize = 2;\n-\n-macro_rules! expand_group {\n-    () => {\n-        None\n-    };\n-    ($group:expr) => {\n-        Some($group)\n-    };\n-}\n-\n /// All of the language items, defined or not.\n /// Defined lang items can come from the current crate or its dependencies.\n #[derive(HashStable_Generic, Debug)]\n@@ -42,21 +26,12 @@ pub struct LanguageItems {\n     items: [Option<DefId>; std::mem::variant_count::<LangItem>()],\n     /// Lang items that were not found during collection.\n     pub missing: Vec<LangItem>,\n-    /// Mapping from [`LangItemGroup`] discriminants to all\n-    /// [`DefId`]s of lang items in that group.\n-    pub groups: [Vec<DefId>; NUM_GROUPS],\n }\n \n impl LanguageItems {\n     /// Construct an empty collection of lang items and no missing ones.\n     pub fn new() -> Self {\n-        const EMPTY: Vec<DefId> = Vec::new();\n-\n-        Self {\n-            items: [None; std::mem::variant_count::<LangItem>()],\n-            missing: Vec::new(),\n-            groups: [EMPTY; NUM_GROUPS],\n-        }\n+        Self { items: [None; std::mem::variant_count::<LangItem>()], missing: Vec::new() }\n     }\n \n     pub fn get(&self, item: LangItem) -> Option<DefId> {\n@@ -86,7 +61,7 @@ impl LanguageItems {\n // So you probably just want to nip down to the end.\n macro_rules! language_item_table {\n     (\n-        $( $(#[$attr:meta])* $variant:ident $($group:expr)?, $module:ident :: $name:ident, $method:ident, $target:expr, $generics:expr; )*\n+        $( $(#[$attr:meta])* $variant:ident, $module:ident :: $name:ident, $method:ident, $target:expr, $generics:expr; )*\n     ) => {\n \n         enum_from_u32! {\n@@ -120,15 +95,6 @@ macro_rules! language_item_table {\n                 }\n             }\n \n-            /// The [group](LangItemGroup) that this lang item belongs to,\n-            /// or `None` if it doesn't belong to a group.\n-            pub fn group(self) -> Option<LangItemGroup> {\n-                use LangItemGroup::*;\n-                match self {\n-                    $( LangItem::$variant => expand_group!($($group)*), )*\n-                }\n-            }\n-\n             pub fn target(self) -> Target {\n                 match self {\n                     $( LangItem::$variant => $target, )*\n@@ -143,11 +109,6 @@ macro_rules! language_item_table {\n         }\n \n         impl LanguageItems {\n-            /// Returns the [`DefId`]s of all lang items in a group.\n-            pub fn group(&self, group: LangItemGroup) -> &[DefId] {\n-                self.groups[group as usize].as_ref()\n-            }\n-\n             $(\n                 #[doc = concat!(\"Returns the [`DefId`] of the `\", stringify!($name), \"` lang item if it is defined.\")]\n                 pub fn $method(&self) -> Option<DefId> {\n@@ -209,30 +170,30 @@ language_item_table! {\n     TransmuteOpts,           sym::transmute_opts,      transmute_opts,             Target::Struct,         GenericRequirement::Exact(0);\n     TransmuteTrait,          sym::transmute_trait,     transmute_trait,            Target::Trait,          GenericRequirement::Exact(3);\n \n-    Add(Op),                 sym::add,                 add_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Sub(Op),                 sym::sub,                 sub_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Mul(Op),                 sym::mul,                 mul_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Div(Op),                 sym::div,                 div_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Rem(Op),                 sym::rem,                 rem_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Neg(Op),                 sym::neg,                 neg_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n-    Not(Op),                 sym::not,                 not_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n-    BitXor(Op),              sym::bitxor,              bitxor_trait,               Target::Trait,          GenericRequirement::Exact(1);\n-    BitAnd(Op),              sym::bitand,              bitand_trait,               Target::Trait,          GenericRequirement::Exact(1);\n-    BitOr(Op),               sym::bitor,               bitor_trait,                Target::Trait,          GenericRequirement::Exact(1);\n-    Shl(Op),                 sym::shl,                 shl_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Shr(Op),                 sym::shr,                 shr_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    AddAssign(Op),           sym::add_assign,          add_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    SubAssign(Op),           sym::sub_assign,          sub_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    MulAssign(Op),           sym::mul_assign,          mul_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    DivAssign(Op),           sym::div_assign,          div_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    RemAssign(Op),           sym::rem_assign,          rem_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    BitXorAssign(Op),        sym::bitxor_assign,       bitxor_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n-    BitAndAssign(Op),        sym::bitand_assign,       bitand_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n-    BitOrAssign(Op),         sym::bitor_assign,        bitor_assign_trait,         Target::Trait,          GenericRequirement::Exact(1);\n-    ShlAssign(Op),           sym::shl_assign,          shl_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    ShrAssign(Op),           sym::shr_assign,          shr_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    Index(Op),               sym::index,               index_trait,                Target::Trait,          GenericRequirement::Exact(1);\n-    IndexMut(Op),            sym::index_mut,           index_mut_trait,            Target::Trait,          GenericRequirement::Exact(1);\n+    Add,                     sym::add,                 add_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Sub,                     sym::sub,                 sub_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Mul,                     sym::mul,                 mul_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Div,                     sym::div,                 div_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Rem,                     sym::rem,                 rem_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Neg,                     sym::neg,                 neg_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n+    Not,                     sym::not,                 not_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n+    BitXor,                  sym::bitxor,              bitxor_trait,               Target::Trait,          GenericRequirement::Exact(1);\n+    BitAnd,                  sym::bitand,              bitand_trait,               Target::Trait,          GenericRequirement::Exact(1);\n+    BitOr,                   sym::bitor,               bitor_trait,                Target::Trait,          GenericRequirement::Exact(1);\n+    Shl,                     sym::shl,                 shl_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Shr,                     sym::shr,                 shr_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    AddAssign,               sym::add_assign,          add_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    SubAssign,               sym::sub_assign,          sub_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    MulAssign,               sym::mul_assign,          mul_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    DivAssign,               sym::div_assign,          div_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    RemAssign,               sym::rem_assign,          rem_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    BitXorAssign,            sym::bitxor_assign,       bitxor_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n+    BitAndAssign,            sym::bitand_assign,       bitand_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n+    BitOrAssign,             sym::bitor_assign,        bitor_assign_trait,         Target::Trait,          GenericRequirement::Exact(1);\n+    ShlAssign,               sym::shl_assign,          shl_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    ShrAssign,               sym::shr_assign,          shr_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    Index,                   sym::index,               index_trait,                Target::Trait,          GenericRequirement::Exact(1);\n+    IndexMut,                sym::index_mut,           index_mut_trait,            Target::Trait,          GenericRequirement::Exact(1);\n \n     UnsafeCell,              sym::unsafe_cell,         unsafe_cell_type,           Target::Struct,         GenericRequirement::None;\n     VaList,                  sym::va_list,             va_list,                    Target::Struct,         GenericRequirement::None;\n@@ -242,9 +203,9 @@ language_item_table! {\n     DerefTarget,             sym::deref_target,        deref_target,               Target::AssocTy,        GenericRequirement::None;\n     Receiver,                sym::receiver,            receiver_trait,             Target::Trait,          GenericRequirement::None;\n \n-    Fn(Fn),                  kw::Fn,                   fn_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n-    FnMut(Fn),               sym::fn_mut,              fn_mut_trait,               Target::Trait,          GenericRequirement::Exact(1);\n-    FnOnce(Fn),              sym::fn_once,             fn_once_trait,              Target::Trait,          GenericRequirement::Exact(1);\n+    Fn,                      kw::Fn,                   fn_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n+    FnMut,                   sym::fn_mut,              fn_mut_trait,               Target::Trait,          GenericRequirement::Exact(1);\n+    FnOnce,                  sym::fn_once,             fn_once_trait,              Target::Trait,          GenericRequirement::Exact(1);\n \n     FnOnceOutput,            sym::fn_once_output,      fn_once_output,             Target::AssocTy,        GenericRequirement::None;\n \n@@ -254,8 +215,8 @@ language_item_table! {\n     Unpin,                   sym::unpin,               unpin_trait,                Target::Trait,          GenericRequirement::None;\n     Pin,                     sym::pin,                 pin_type,                   Target::Struct,         GenericRequirement::None;\n \n-    PartialEq(Op),           sym::eq,                  eq_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n-    PartialOrd(Op),          sym::partial_ord,         partial_ord_trait,          Target::Trait,          GenericRequirement::Exact(1);\n+    PartialEq,               sym::eq,                  eq_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n+    PartialOrd,              sym::partial_ord,         partial_ord_trait,          Target::Trait,          GenericRequirement::Exact(1);\n \n     // A number of panic-related lang items. The `panic` item corresponds to divide-by-zero and\n     // various panic cases with `match`. The `panic_bounds_check` item is for indexing arrays.\n@@ -351,3 +312,34 @@ pub enum GenericRequirement {\n     Minimum(usize),\n     Exact(usize),\n }\n+\n+pub static FN_TRAITS: &'static [LangItem] = &[LangItem::Fn, LangItem::FnMut, LangItem::FnOnce];\n+\n+pub static OPERATORS: &'static [LangItem] = &[\n+    LangItem::Add,\n+    LangItem::Sub,\n+    LangItem::Mul,\n+    LangItem::Div,\n+    LangItem::Rem,\n+    LangItem::Neg,\n+    LangItem::Not,\n+    LangItem::BitXor,\n+    LangItem::BitAnd,\n+    LangItem::BitOr,\n+    LangItem::Shl,\n+    LangItem::Shr,\n+    LangItem::AddAssign,\n+    LangItem::SubAssign,\n+    LangItem::MulAssign,\n+    LangItem::DivAssign,\n+    LangItem::RemAssign,\n+    LangItem::BitXorAssign,\n+    LangItem::BitAndAssign,\n+    LangItem::BitOrAssign,\n+    LangItem::ShlAssign,\n+    LangItem::ShrAssign,\n+    LangItem::Index,\n+    LangItem::IndexMut,\n+    LangItem::PartialEq,\n+    LangItem::PartialOrd,\n+];"}, {"sha": "188efc528ef82361b6800fca4cb86a6956dd661a", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6180ede5cd3e2c471831ead520c4ac3e7ef6b68/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6180ede5cd3e2c471831ead520c4ac3e7ef6b68/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=a6180ede5cd3e2c471831ead520c4ac3e7ef6b68", "patch": "@@ -140,9 +140,6 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n \n         // Matched.\n         self.items.set(lang_item, item_def_id);\n-        if let Some(group) = lang_item.group() {\n-            self.items.groups[group as usize].push(item_def_id);\n-        }\n     }\n \n     // Like collect_item() above, but also checks whether the lang item is declared"}]}