{"sha": "3dbb2cc864db144154a5f4c349bcbc017533ee07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYmIyY2M4NjRkYjE0NDE1NGE1ZjRjMzQ5YmNiYzAxNzUzM2VlMDc=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-06T09:49:03Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-11-10T18:25:22Z"}, "message": "codegen_llvm_back: improve common patterns", "tree": {"sha": "b5448c1c4f2e3ba8dc37d3cb270759f5bbcf63a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5448c1c4f2e3ba8dc37d3cb270759f5bbcf63a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dbb2cc864db144154a5f4c349bcbc017533ee07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbb2cc864db144154a5f4c349bcbc017533ee07", "html_url": "https://github.com/rust-lang/rust/commit/3dbb2cc864db144154a5f4c349bcbc017533ee07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dbb2cc864db144154a5f4c349bcbc017533ee07/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4286c3c1b0a4eb508483c915120a875966ac27c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4286c3c1b0a4eb508483c915120a875966ac27c9", "html_url": "https://github.com/rust-lang/rust/commit/4286c3c1b0a4eb508483c915120a875966ac27c9"}], "stats": {"total": 87, "additions": 30, "deletions": 57}, "files": [{"sha": "daddae42db2be38a6c11270e738be242fc0c604b", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3dbb2cc864db144154a5f4c349bcbc017533ee07/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbb2cc864db144154a5f4c349bcbc017533ee07/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=3dbb2cc864db144154a5f4c349bcbc017533ee07", "patch": "@@ -185,13 +185,8 @@ impl<'a> ArchiveBuilder<'a> {\n     /// Combine the provided files, rlibs, and native libraries into a single\n     /// `Archive`.\n     pub fn build(&mut self) {\n-        let kind = match self.llvm_archive_kind() {\n-            Ok(kind) => kind,\n-            Err(kind) => {\n-                self.config.sess.fatal(&format!(\"Don't know how to build archive of type: {}\",\n-                                                kind));\n-            }\n-        };\n+        let kind = self.llvm_archive_kind().unwrap_or_else(|kind|\n+            self.config.sess.fatal(&format!(\"Don't know how to build archive of type: {}\", kind)));\n \n         if let Err(e) = self.build_with_llvm(kind) {\n             self.config.sess.fatal(&format!(\"failed to build archive: {}\", e));"}, {"sha": "acb0bbe8f67404a1c5e309bb3907f0030972a32d", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3dbb2cc864db144154a5f4c349bcbc017533ee07/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbb2cc864db144154a5f4c349bcbc017533ee07/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=3dbb2cc864db144154a5f4c349bcbc017533ee07", "patch": "@@ -107,13 +107,10 @@ pub fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> (PathB\n }\n \n pub fn remove(sess: &Session, path: &Path) {\n-    match fs::remove_file(path) {\n-        Ok(..) => {}\n-        Err(e) => {\n-            sess.err(&format!(\"failed to remove {}: {}\",\n-                             path.display(),\n-                             e));\n-        }\n+    if let Err(e) = fs::remove_file(path) {\n+        sess.err(&format!(\"failed to remove {}: {}\",\n+                          path.display(),\n+                          e));\n     }\n }\n \n@@ -184,7 +181,7 @@ fn preserve_objects_for_their_debuginfo(sess: &Session) -> bool {\n     // the objects as they're losslessly contained inside the archives.\n     let output_linked = sess.crate_types.borrow()\n         .iter()\n-        .any(|x| *x != config::CrateType::Rlib && *x != config::CrateType::Staticlib);\n+        .any(|&x| x != config::CrateType::Rlib && x != config::CrateType::Staticlib);\n     if !output_linked {\n         return false\n     }\n@@ -289,24 +286,19 @@ fn link_binary_output(sess: &Session,\n         // final destination, with a `fs::rename` call. In order for the rename to\n         // always succeed, the temporary file needs to be on the same filesystem,\n         // which is why we create it inside the output directory specifically.\n-        let metadata_tmpdir = match TempFileBuilder::new()\n+        let metadata_tmpdir = TempFileBuilder::new()\n             .prefix(\"rmeta\")\n             .tempdir_in(out_filename.parent().unwrap())\n-        {\n-            Ok(tmpdir) => tmpdir,\n-            Err(err) => sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)),\n-        };\n+            .unwrap_or_else(|err| sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)));\n         let metadata = emit_metadata(sess, codegen_results, &metadata_tmpdir);\n         if let Err(e) = fs::rename(metadata, &out_filename) {\n             sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n         }\n         out_filenames.push(out_filename);\n     }\n \n-    let tmpdir = match TempFileBuilder::new().prefix(\"rustc\").tempdir() {\n-        Ok(tmpdir) => tmpdir,\n-        Err(err) => sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)),\n-    };\n+    let tmpdir = TempFileBuilder::new().prefix(\"rustc\").tempdir().unwrap_or_else(|err|\n+        sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)));\n \n     if outputs.outputs.should_codegen() {\n         let out_filename = out_filename(sess, crate_type, outputs, crate_name);\n@@ -869,9 +861,8 @@ fn link_natively(sess: &Session,\n         sess.opts.debuginfo != DebugInfo::None &&\n         !preserve_objects_for_their_debuginfo(sess)\n     {\n-        match Command::new(\"dsymutil\").arg(out_filename).output() {\n-            Ok(..) => {}\n-            Err(e) => sess.fatal(&format!(\"failed to run dsymutil: {}\", e)),\n+        if let Err(e) = Command::new(\"dsymutil\").arg(out_filename).output() {\n+            sess.fatal(&format!(\"failed to run dsymutil: {}\", e))\n         }\n     }\n "}, {"sha": "76faffa25216af79e9aad8667ab8e97d3deaee80", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3dbb2cc864db144154a5f4c349bcbc017533ee07/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbb2cc864db144154a5f4c349bcbc017533ee07/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=3dbb2cc864db144154a5f4c349bcbc017533ee07", "patch": "@@ -919,12 +919,6 @@ impl ThinLTOImports {\n }\n \n fn module_name_to_str(c_str: &CStr) -> &str {\n-    match c_str.to_str() {\n-        Ok(s) => s,\n-        Err(e) => {\n-            bug!(\"Encountered non-utf8 LLVM module name `{}`: {}\",\n-                c_str.to_string_lossy(),\n-                e)\n-        }\n-    }\n+    c_str.to_str().unwrap_or_else(|e|\n+        bug!(\"Encountered non-utf8 LLVM module name `{}`: {}\", c_str.to_string_lossy(), e))\n }"}, {"sha": "7101255173cafd08d5bd88aecb4237b57dbc8530", "filename": "src/librustc_codegen_llvm/back/wasm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dbb2cc864db144154a5f4c349bcbc017533ee07/src%2Flibrustc_codegen_llvm%2Fback%2Fwasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbb2cc864db144154a5f4c349bcbc017533ee07/src%2Flibrustc_codegen_llvm%2Fback%2Fwasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwasm.rs?ref=3dbb2cc864db144154a5f4c349bcbc017533ee07", "patch": "@@ -42,7 +42,7 @@ const WASM_EXTERNAL_KIND_GLOBAL: u8 = 3;\n /// https://github.com/llvm-mirror/llvm/commit/0f32e1365, although support still\n /// needs to be added, tracked at https://bugs.llvm.org/show_bug.cgi?id=37168\n pub fn rewrite_imports(path: &Path, import_map: &FxHashMap<String, String>) {\n-    if import_map.len() == 0 {\n+    if import_map.is_empty() {\n         return\n     }\n \n@@ -127,7 +127,7 @@ impl<'a> Iterator for WasmSections<'a> {\n     type Item = (u8, &'a [u8]);\n \n     fn next(&mut self) -> Option<(u8, &'a [u8])> {\n-        if self.0.data.len() == 0 {\n+        if self.0.data.is_empty() {\n             return None\n         }\n "}, {"sha": "9ce1130c77ecc9af4a492d1021594303746b2b42", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3dbb2cc864db144154a5f4c349bcbc017533ee07/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbb2cc864db144154a5f4c349bcbc017533ee07/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=3dbb2cc864db144154a5f4c349bcbc017533ee07", "patch": "@@ -1440,15 +1440,12 @@ fn execute_copy_from_cache_work_item(cgcx: &CodegenContext,\n                module.name,\n                source_file,\n                obj_out.display());\n-        match link_or_copy(&source_file, &obj_out) {\n-            Ok(_) => { }\n-            Err(err) => {\n-                let diag_handler = cgcx.create_diag_handler();\n-                diag_handler.err(&format!(\"unable to copy {} to {}: {}\",\n-                                          source_file.display(),\n-                                          obj_out.display(),\n-                                          err));\n-            }\n+        if let Err(err) = link_or_copy(&source_file, &obj_out) {\n+            let diag_handler = cgcx.create_diag_handler();\n+            diag_handler.err(&format!(\"unable to copy {} to {}: {}\",\n+                                      source_file.display(),\n+                                      obj_out.display(),\n+                                      err));\n         }\n     }\n "}, {"sha": "8485ccd8f3d94261f893a8f8b1708ffa5fbbf22d", "filename": "src/librustc_codegen_utils/linker.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3dbb2cc864db144154a5f4c349bcbc017533ee07/src%2Flibrustc_codegen_utils%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbb2cc864db144154a5f4c349bcbc017533ee07/src%2Flibrustc_codegen_utils%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flinker.rs?ref=3dbb2cc864db144154a5f4c349bcbc017533ee07", "patch": "@@ -343,17 +343,13 @@ impl<'a> Linker for GccLinker<'a> {\n     }\n \n     fn debuginfo(&mut self) {\n-        match self.sess.opts.debuginfo {\n-            DebugInfo::None => {\n-                // If we are building without debuginfo enabled and we were called with\n-                // `-Zstrip-debuginfo-if-disabled=yes`, tell the linker to strip any debuginfo\n-                // found when linking to get rid of symbols from libstd.\n-                match self.sess.opts.debugging_opts.strip_debuginfo_if_disabled {\n-                    Some(true) => { self.linker_arg(\"-S\"); },\n-                    _ => {},\n-                }\n-            },\n-            _ => {},\n+        if let DebugInfo::None = self.sess.opts.debuginfo {\n+            // If we are building without debuginfo enabled and we were called with\n+            // `-Zstrip-debuginfo-if-disabled=yes`, tell the linker to strip any debuginfo\n+            // found when linking to get rid of symbols from libstd.\n+            if let Some(true) = self.sess.opts.debugging_opts.strip_debuginfo_if_disabled {\n+                self.linker_arg(\"-S\");\n+            }\n         };\n     }\n "}]}