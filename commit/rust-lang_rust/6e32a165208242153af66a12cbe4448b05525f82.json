{"sha": "6e32a165208242153af66a12cbe4448b05525f82", "node_id": "C_kwDOAAsO6NoAKDZlMzJhMTY1MjA4MjQyMTUzYWY2NmExMmNiZTQ0NDhiMDU1MjVmODI", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2022-06-26T20:58:37Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2022-06-26T20:58:37Z"}, "message": "fix box with custom allocator in miri", "tree": {"sha": "0de9e3c85d1255cc84058d8f2c7b35bd37c97126", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0de9e3c85d1255cc84058d8f2c7b35bd37c97126"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e32a165208242153af66a12cbe4448b05525f82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e32a165208242153af66a12cbe4448b05525f82", "html_url": "https://github.com/rust-lang/rust/commit/6e32a165208242153af66a12cbe4448b05525f82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e32a165208242153af66a12cbe4448b05525f82/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aab472d52ba7314dc193c73abcd384e2586123c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aab472d52ba7314dc193c73abcd384e2586123c", "html_url": "https://github.com/rust-lang/rust/commit/8aab472d52ba7314dc193c73abcd384e2586123c"}], "stats": {"total": 21, "additions": 4, "deletions": 17}, "files": [{"sha": "076415b2d1b2f3b8f4df9267488db7b82dbffd8b", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e32a165208242153af66a12cbe4448b05525f82/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e32a165208242153af66a12cbe4448b05525f82/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=6e32a165208242153af66a12cbe4448b05525f82", "patch": "@@ -366,22 +366,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n             (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) => {\n                 assert_eq!(def_a, def_b);\n-                if def_a.is_box() || def_b.is_box() {\n-                    if !def_a.is_box() || !def_b.is_box() {\n-                        span_bug!(\n-                            self.cur_span(),\n-                            \"invalid unsizing between {:?} -> {:?}\",\n-                            src.layout.ty,\n-                            cast_ty.ty\n-                        );\n-                    }\n-                    return self.unsize_into_ptr(\n-                        src,\n-                        dest,\n-                        src.layout.ty.boxed_ty(),\n-                        cast_ty.ty.boxed_ty(),\n-                    );\n-                }\n \n                 // unsizing of generic struct with pointer fields\n                 // Example: `Arc<T>` -> `Arc<Trait>`"}, {"sha": "3809030b5156040cf40f2106136bd4360a1dea5d", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e32a165208242153af66a12cbe4448b05525f82/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e32a165208242153af66a12cbe4448b05525f82/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=6e32a165208242153af66a12cbe4448b05525f82", "patch": "@@ -594,7 +594,10 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 Ok(true)\n             }\n             ty::Adt(def, ..) if def.is_box() => {\n-                self.check_safe_pointer(value, \"box\")?;\n+                let unique = self.ecx.operand_field(value, 0)?;\n+                let nonnull = self.ecx.operand_field(&unique, 0)?;\n+                let ptr = self.ecx.operand_field(&nonnull, 0)?;\n+                self.check_safe_pointer(&ptr, \"box\")?;\n                 Ok(true)\n             }\n             ty::FnPtr(_sig) => {"}]}