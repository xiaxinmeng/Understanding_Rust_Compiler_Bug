{"sha": "0a5640b55f4a34a1f96859663449b0cabfb08c87", "node_id": "C_kwDOAAsO6NoAKDBhNTY0MGI1NWY0YTM0YTFmOTY4NTk2NjM0NDliMGNhYmZiMDhjODc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-06T00:31:32Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-06T15:13:14Z"}, "message": "use matches!() macro in more places", "tree": {"sha": "1f0a58a14a6c4cb31551ff0e3baf868ddcf17743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f0a58a14a6c4cb31551ff0e3baf868ddcf17743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a5640b55f4a34a1f96859663449b0cabfb08c87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5640b55f4a34a1f96859663449b0cabfb08c87", "html_url": "https://github.com/rust-lang/rust/commit/0a5640b55f4a34a1f96859663449b0cabfb08c87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a5640b55f4a34a1f96859663449b0cabfb08c87/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cd3bbecc5e498465e89be8a33d2936aaebed0bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd3bbecc5e498465e89be8a33d2936aaebed0bf", "html_url": "https://github.com/rust-lang/rust/commit/3cd3bbecc5e498465e89be8a33d2936aaebed0bf"}], "stats": {"total": 135, "additions": 49, "deletions": 86}, "files": [{"sha": "742a7d1d2df70907fa087b4221fffbf816b835bf", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -212,7 +212,8 @@ impl AssocOp {\n     /// parentheses while having a high degree of confidence on the correctness of the suggestion.\n     pub fn can_continue_expr_unambiguously(&self) -> bool {\n         use AssocOp::*;\n-        match self {\n+        matches!(\n+            self,\n             BitXor | // `{ 42 } ^ 3`\n             Assign | // `{ 42 } = { 42 }`\n             Divide | // `{ 42 } / 42`\n@@ -225,9 +226,8 @@ impl AssocOp {\n             As | // `{ 42 } as usize`\n             // Equal | // `{ 42 } == { 42 }`    Accepting these here would regress incorrect\n             // NotEqual | // `{ 42 } != { 42 }  struct literals parser recovery.\n-            Colon => true, // `{ 42 }: usize`\n-            _ => false,\n-        }\n+            Colon, // `{ 42 }: usize`\n+        )\n     }\n }\n "}, {"sha": "79973ab170cad8e362dd85199181b79b2e4c24ff", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -53,10 +53,7 @@ pub(crate) enum LaterUseKind {\n \n impl BorrowExplanation {\n     pub(crate) fn is_explained(&self) -> bool {\n-        match self {\n-            BorrowExplanation::Unexplained => false,\n-            _ => true,\n-        }\n+        !matches!(self, BorrowExplanation::Unexplained)\n     }\n     pub(crate) fn add_explanation_to_diagnostic<'tcx>(\n         &self,"}, {"sha": "f4a5da1fe36fa8d0f6d2c9465c9f56f65f6b5784", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -2110,14 +2110,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     _ => constraint_sup_scc != target_scc,\n                 }\n             } else {\n-                match categorized_path[*i].category {\n+                !matches!(\n+                    categorized_path[*i].category,\n                     ConstraintCategory::OpaqueType\n-                    | ConstraintCategory::Boring\n-                    | ConstraintCategory::BoringNoLocation\n-                    | ConstraintCategory::Internal\n-                    | ConstraintCategory::Predicate(_) => false,\n-                    _ => true,\n-                }\n+                        | ConstraintCategory::Boring\n+                        | ConstraintCategory::BoringNoLocation\n+                        | ConstraintCategory::Internal\n+                        | ConstraintCategory::Predicate(_)\n+                )\n             }\n         };\n "}, {"sha": "147e2aead648db509356fe9e77b8cd02f6f72c12", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -138,17 +138,11 @@ impl<'tcx> DefiningTy<'tcx> {\n     }\n \n     pub fn is_fn_def(&self) -> bool {\n-        match *self {\n-            DefiningTy::FnDef(..) => true,\n-            _ => false,\n-        }\n+        matches!(*self, DefiningTy::FnDef(..))\n     }\n \n     pub fn is_const(&self) -> bool {\n-        match *self {\n-            DefiningTy::Const(..) => true,\n-            _ => false,\n-        }\n+        matches!(*self, DefiningTy::Const(..))\n     }\n \n     pub fn def_id(&self) -> DefId {"}, {"sha": "ab119ae25f5e89d496b69388ce65ab9058b4131b", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -124,10 +124,7 @@ fn push_debuginfo_type_name<'tcx>(\n             // info for MSVC debugger. However, wrapping these types' names in a synthetic type\n             // causes the .natvis engine for WinDbg to fail to display their data, so we opt these\n             // types out to aid debugging in MSVC.\n-            let is_slice_or_str = match *inner_type.kind() {\n-                ty::Slice(_) | ty::Str => true,\n-                _ => false,\n-            };\n+            let is_slice_or_str = matches!(*inner_type.kind(), ty::Slice(_) | ty::Str);\n \n             if !cpp_like_names {\n                 output.push('&');"}, {"sha": "87298023980ed8c2ff2ccde238122e1a7556fb53", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -25,10 +25,7 @@ pub enum ConstEvalErrKind {\n \n impl MachineStopType for ConstEvalErrKind {\n     fn is_hard_err(&self) -> bool {\n-        match self {\n-            Self::Panic { .. } => true,\n-            _ => false,\n-        }\n+        matches!(self, Self::Panic { .. })\n     }\n }\n "}, {"sha": "821b048eb9bcfc80331ce6f46616bcd3b42babc1", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -51,10 +51,8 @@ fn is_const_fn_raw(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         // If the function itself is not annotated with `const`, it may still be a `const fn`\n         // if it resides in a const trait impl.\n         is_parent_const_impl_raw(tcx, hir_id)\n-    } else if let hir::Node::Ctor(_) = node {\n-        true\n     } else {\n-        false\n+        matches!(node, hir::Node::Ctor(_))\n     }\n }\n "}, {"sha": "5b4a5ac3577224722763b872f6ede27acbac6b2d", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -138,10 +138,8 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n         args: &[GenericArg<'tcx>],\n     ) -> Result<Self::Path, Self::Error> {\n         self = print_prefix(self)?;\n-        let args = args.iter().cloned().filter(|arg| match arg.unpack() {\n-            GenericArgKind::Lifetime(_) => false,\n-            _ => true,\n-        });\n+        let args =\n+            args.iter().cloned().filter(|arg| !matches!(arg.unpack(), GenericArgKind::Lifetime(_)));\n         if args.clone().next().is_some() {\n             self.generic_delimiters(|cx| cx.comma_sep(args))\n         } else {"}, {"sha": "00208574c555e9b77207dbb063a7041b2fba3427", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -345,10 +345,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                     // Figure out how to pass which arguments.\n                     // The Rust ABI is special: ZST get skipped.\n-                    let rust_abi = match caller_abi {\n-                        Abi::Rust | Abi::RustCall => true,\n-                        _ => false,\n-                    };\n+                    let rust_abi = matches!(caller_abi, Abi::Rust | Abi::RustCall);\n+\n                     // We have two iterators: Where the arguments come from,\n                     // and where they go to.\n "}, {"sha": "3785c170f6b2b9a931f2eb93143b7c6a6cb2a953", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -131,10 +131,7 @@ impl Qualifs<'mir, 'tcx> {\n             .body\n             .basic_blocks()\n             .iter_enumerated()\n-            .find(|(_, block)| match block.terminator().kind {\n-                TerminatorKind::Return => true,\n-                _ => false,\n-            })\n+            .find(|(_, block)| matches!(block.terminator().kind, TerminatorKind::Return))\n             .map(|(bb, _)| bb);\n \n         let return_block = match return_block {"}, {"sha": "abc5a3c6a5206b352fe017a1f5dbef97b286d265", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -170,11 +170,12 @@ impl Qualif for NeedsNonConstDrop {\n             let mut selcx = SelectionContext::with_constness(&infcx, hir::Constness::Const);\n             selcx.select(&obligation)\n         });\n-        match implsrc {\n-            Ok(Some(ImplSource::ConstDrop(_)))\n-            | Ok(Some(ImplSource::Param(_, ty::BoundConstness::ConstIfConst))) => false,\n-            _ => true,\n-        }\n+        !matches!(\n+            implsrc,\n+            Ok(Some(\n+                ImplSource::ConstDrop(_) | ImplSource::Param(_, ty::BoundConstness::ConstIfConst)\n+            ))\n+        )\n     }\n \n     fn in_adt_inherently(cx: &ConstCx<'_, 'tcx>, adt: &'tcx AdtDef, _: SubstsRef<'tcx>) -> bool {"}, {"sha": "d789237e692d2beea5f514ee6f41b89080674be4", "filename": "compiler/rustc_lexer/src/unescape.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -68,11 +68,10 @@ pub enum EscapeError {\n impl EscapeError {\n     /// Returns true for actual errors, as opposed to warnings.\n     pub fn is_fatal(&self) -> bool {\n-        match self {\n-            EscapeError::UnskippedWhitespaceWarning => false,\n-            EscapeError::MultipleSkippedLinesWarning => false,\n-            _ => true,\n-        }\n+        !matches!(\n+            self,\n+            EscapeError::UnskippedWhitespaceWarning | EscapeError::MultipleSkippedLinesWarning\n+        )\n     }\n }\n "}, {"sha": "7a51bb4a1f32ae828f9de259450a815ba37981c1", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -538,12 +538,12 @@ impl InterpError<'_> {\n     /// To avoid performance issues, there are places where we want to be sure to never raise these formatting errors,\n     /// so this method lets us detect them and `bug!` on unexpected errors.\n     pub fn formatted_string(&self) -> bool {\n-        match self {\n+        matches!(\n+            self,\n             InterpError::Unsupported(UnsupportedOpInfo::Unsupported(_))\n-            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::ValidationFailure { .. })\n-            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_)) => true,\n-            _ => false,\n-        }\n+                | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::ValidationFailure { .. })\n+                | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_))\n+        )\n     }\n \n     /// Should this error be reported as a hard error, preventing compilation, or a soft error,"}, {"sha": "6807d02519e2b3305f46278f1b33f861fafb14bd", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -485,7 +485,7 @@ fn inject_statement(\n \n // Non-code expressions are injected into the coverage map, without generating executable code.\n fn inject_intermediate_expression(mir_body: &mut mir::Body<'tcx>, expression: CoverageKind) {\n-    debug_assert!(if let CoverageKind::Expression { .. } = expression { true } else { false });\n+    debug_assert!(matches!(expression, CoverageKind::Expression { .. }));\n     debug!(\"  injecting non-code expression {:?}\", expression);\n     let inject_in_bb = mir::START_BLOCK;\n     let data = &mut mir_body[inject_in_bb];"}, {"sha": "d13fa0729cd9562a0306ef1be170dd3a302fb3a4", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -94,10 +94,9 @@ impl CoverageSpan {\n         stmt_index: usize,\n     ) -> Self {\n         let is_closure = match statement.kind {\n-            StatementKind::Assign(box (_, Rvalue::Aggregate(box ref kind, _))) => match kind {\n-                AggregateKind::Closure(_, _) | AggregateKind::Generator(_, _, _) => true,\n-                _ => false,\n-            },\n+            StatementKind::Assign(box (_, Rvalue::Aggregate(box ref kind, _))) => {\n+                matches!(kind, AggregateKind::Closure(_, _) | AggregateKind::Generator(_, _, _))\n+            }\n             _ => false,\n         };\n "}, {"sha": "64cd6f56a9ffa0a15d254c302587bb0f4e9cccc6", "filename": "compiler/rustc_mir_transform/src/unreachable_prop.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -27,9 +27,8 @@ impl MirPass<'_> for UnreachablePropagation {\n             // This is a temporary solution that handles possibly diverging asm statements.\n             // Accompanying testcases: mir-opt/unreachable_asm.rs and mir-opt/unreachable_asm_2.rs\n             let asm_stmt_in_block = || {\n-                bb_data.statements.iter().any(|stmt: &Statement<'_>| match stmt.kind {\n-                    StatementKind::LlvmInlineAsm(..) => true,\n-                    _ => false,\n+                bb_data.statements.iter().any(|stmt: &Statement<'_>| {\n+                    matches!(stmt.kind, StatementKind::LlvmInlineAsm(..))\n                 })\n             };\n "}, {"sha": "481bfa4a26b36f6c79b1ce3db2833bebdcd8f085", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -320,10 +320,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     /// Returns `true` if the trait predicate is considerd `const` to this selection context.\n     pub fn is_trait_predicate_const(&self, pred: ty::TraitPredicate<'_>) -> bool {\n-        match pred.constness {\n-            ty::BoundConstness::ConstIfConst if self.is_in_const_context => true,\n-            _ => false,\n-        }\n+        matches!(pred.constness, ty::BoundConstness::ConstIfConst) && self.is_in_const_context\n     }\n \n     /// Returns `true` if the predicate is considered `const` to"}, {"sha": "511a2d7ddacf96e42f453690267c1094f0e995ef", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -436,11 +436,8 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     // Very crude check to see whether the expression must be wrapped\n                     // in parentheses for the suggestion to work (issue #89497).\n                     // Can/should be extended in the future.\n-                    let needs_parens = !has_parens\n-                        && match self.expr.kind {\n-                            hir::ExprKind::Cast(..) => true,\n-                            _ => false,\n-                        };\n+                    let needs_parens =\n+                        !has_parens && matches!(self.expr.kind, hir::ExprKind::Cast(..));\n \n                     let mut suggestion = vec![(self.expr.span.shrink_to_lo(), sugg)];\n                     if needs_parens {"}, {"sha": "a1c2945770920c1f73dfa6743523e6ebfaa87148", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -300,7 +300,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                     hir::TyKind::Path(hir::QPath::Resolved(\n                         None,\n                         hir::Path { res: hir::def::Res::Def(_, id), .. },\n-                    )) if *id == def_id => true,\n+                    )) => *id == def_id,\n                     _ => false,\n                 })\n             })"}, {"sha": "da95fe21ac9af8706e3d371d8b63382c1268efa7", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -878,12 +878,7 @@ impl Ipv4Addr {\n     #[must_use]\n     #[inline]\n     pub const fn is_documentation(&self) -> bool {\n-        match self.octets() {\n-            [192, 0, 2, _] => true,\n-            [198, 51, 100, _] => true,\n-            [203, 0, 113, _] => true,\n-            _ => false,\n-        }\n+        matches!(self.octets(), [192, 0, 2, _] | [198, 51, 100, _] | [203, 0, 113, _])\n     }\n \n     /// Converts this address to an [IPv4-compatible] [`IPv6` address]."}, {"sha": "f450e41bfea1e539a0c7d0a2e476164b68dba909", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a5640b55f4a34a1f96859663449b0cabfb08c87/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5640b55f4a34a1f96859663449b0cabfb08c87/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=0a5640b55f4a34a1f96859663449b0cabfb08c87", "patch": "@@ -159,7 +159,7 @@ impl SocketAddr {\n     #[must_use]\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn is_unnamed(&self) -> bool {\n-        if let AddressKind::Unnamed = self.address() { true } else { false }\n+        matches!(self.address(), AddressKind::Unnamed)\n     }\n \n     /// Returns the contents of this address if it is a `pathname` address."}]}