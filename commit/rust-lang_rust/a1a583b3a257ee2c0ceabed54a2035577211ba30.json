{"sha": "a1a583b3a257ee2c0ceabed54a2035577211ba30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYTU4M2IzYTI1N2VlMmMwY2VhYmVkNTRhMjAzNTU3NzIxMWJhMzA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-30T20:54:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-30T20:54:15Z"}, "message": "stop unnecessarily passing around span argument for Miri function calls", "tree": {"sha": "9565de427b1572e6f2888341305d2802bae34745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9565de427b1572e6f2888341305d2802bae34745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1a583b3a257ee2c0ceabed54a2035577211ba30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a583b3a257ee2c0ceabed54a2035577211ba30", "html_url": "https://github.com/rust-lang/rust/commit/a1a583b3a257ee2c0ceabed54a2035577211ba30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1a583b3a257ee2c0ceabed54a2035577211ba30/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abe143abf19c676469ad1b6b9204a251ed5feada", "url": "https://api.github.com/repos/rust-lang/rust/commits/abe143abf19c676469ad1b6b9204a251ed5feada", "html_url": "https://github.com/rust-lang/rust/commit/abe143abf19c676469ad1b6b9204a251ed5feada"}], "stats": {"total": 67, "additions": 25, "deletions": 42}, "files": [{"sha": "e92634714789495b383426a3d58b654235544f9d", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a1a583b3a257ee2c0ceabed54a2035577211ba30/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a583b3a257ee2c0ceabed54a2035577211ba30/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=a1a583b3a257ee2c0ceabed54a2035577211ba30", "patch": "@@ -8,9 +8,9 @@ use std::hash::Hash;\n use rustc_data_structures::fx::FxHashMap;\n \n use rustc_ast::ast::Mutability;\n+use rustc_hir::def_id::DefId;\n use rustc_middle::mir::AssertMessage;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{def_id::DefId, Span};\n \n use crate::interpret::{\n     self, AllocId, Allocation, GlobalId, ImmTy, InterpCx, InterpResult, Memory, MemoryKind, OpTy,\n@@ -64,7 +64,6 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter> {\n     /// If this returns successfully (`Ok`), the function should just be evaluated normally.\n     fn hook_panic_fn(\n         &mut self,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n     ) -> InterpResult<'tcx> {\n@@ -77,7 +76,7 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter> {\n \n             let msg_place = self.deref_operand(args[0])?;\n             let msg = Symbol::intern(self.read_str(msg_place)?);\n-            let span = self.find_closest_untracked_caller_location().unwrap_or(span);\n+            let span = self.find_closest_untracked_caller_location();\n             let (file, line, col) = self.location_triple_for_span(span);\n             Err(ConstEvalErrKind::Panic { msg, file, line, col }.into())\n         } else {\n@@ -191,7 +190,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n \n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n         ret: Option<(PlaceTy<'tcx>, mir::BasicBlock)>,\n@@ -213,7 +211,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n             } else {\n                 // Some functions we support even if they are non-const -- but avoid testing\n                 // that for const fn!\n-                ecx.hook_panic_fn(span, instance, args)?;\n+                ecx.hook_panic_fn(instance, args)?;\n                 // We certainly do *not* want to actually call the fn\n                 // though, so be sure we return here.\n                 throw_unsup_format!(\"calling non-const function `{}`\", instance)\n@@ -248,13 +246,12 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n \n     fn call_intrinsic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n         ret: Option<(PlaceTy<'tcx>, mir::BasicBlock)>,\n         _unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        if ecx.emulate_intrinsic(span, instance, args, ret)? {\n+        if ecx.emulate_intrinsic(instance, args, ret)? {\n             return Ok(());\n         }\n         // An intrinsic that we do not support"}, {"sha": "b60377fbcd69a261dfb4a0d3b0b5499a58220d89", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1a583b3a257ee2c0ceabed54a2035577211ba30/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a583b3a257ee2c0ceabed54a2035577211ba30/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=a1a583b3a257ee2c0ceabed54a2035577211ba30", "patch": "@@ -15,7 +15,6 @@ use rustc_middle::ty::layout::{LayoutOf, Primitive, Size};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::Span;\n \n use super::{ImmTy, InterpCx, Machine, OpTy, PlaceTy};\n \n@@ -78,7 +77,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Returns `true` if emulation happened.\n     pub fn emulate_intrinsic(\n         &mut self,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, M::PointerTag>],\n         ret: Option<(PlaceTy<'tcx, M::PointerTag>, mir::BasicBlock)>,\n@@ -101,7 +99,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // `src/librustc_middle/ty/constness.rs`\n         match intrinsic_name {\n             sym::caller_location => {\n-                let span = self.find_closest_untracked_caller_location().unwrap_or(span);\n+                let span = self.find_closest_untracked_caller_location();\n                 let location = self.alloc_caller_location_for_span(span);\n                 self.write_scalar(location.ptr, dest)?;\n             }\n@@ -118,7 +116,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     sym::needs_drop => self.tcx.types.bool,\n                     sym::type_id => self.tcx.types.u64,\n                     sym::type_name => self.tcx.mk_static_str(),\n-                    _ => span_bug!(span, \"Already checked for nullary intrinsics\"),\n+                    _ => bug!(\"already checked for nullary intrinsics\"),\n                 };\n                 let val = self.const_eval(gid, ty)?;\n                 self.copy_op(val, dest)?;"}, {"sha": "e5307a8d65d2ccfa59c3b4b2aaf4ecd530840817", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a1a583b3a257ee2c0ceabed54a2035577211ba30/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a583b3a257ee2c0ceabed54a2035577211ba30/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=a1a583b3a257ee2c0ceabed54a2035577211ba30", "patch": "@@ -14,16 +14,19 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Walks up the callstack from the intrinsic's callsite, searching for the first callsite in a\n     /// frame which is not `#[track_caller]`. If the first frame found lacks `#[track_caller]`, then\n     /// `None` is returned and the callsite of the function invocation itself should be used.\n-    crate fn find_closest_untracked_caller_location(&self) -> Option<Span> {\n-        let mut caller_span = None;\n-        for next_caller in self.stack.iter().rev() {\n-            caller_span = next_caller.current_source_info().map(|si| si.span).or_else(|| caller_span);\n-            if !next_caller.instance.def.requires_caller_location(*self.tcx) {\n-                return caller_span;\n-            }\n-        }\n-\n-        caller_span\n+    crate fn find_closest_untracked_caller_location(&self) -> Span {\n+        self.stack\n+            .iter()\n+            .rev()\n+            // Skip `#[track_caller]` frames.\n+            .skip_while(|frame| frame.instance.def.requires_caller_location(*self.tcx))\n+            // Find next frame with source info.\n+            .find_map(|frame| frame.current_source_info())\n+            .map(|si| si.span)\n+            // Fallback to current frame. That one has to have source_info as only\n+            // currently unwinding frames without cleanup do *not* have it -- and those\n+            // frames do not call this intrinsic.\n+            .unwrap_or_else(|| self.frame().current_source_info().unwrap().span)\n     }\n \n     /// Allocate a `const core::panic::Location` with the provided filename and line/column numbers."}, {"sha": "48082a1e3469680126ecbb62ad9da812ada31cdb", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1a583b3a257ee2c0ceabed54a2035577211ba30/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a583b3a257ee2c0ceabed54a2035577211ba30/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=a1a583b3a257ee2c0ceabed54a2035577211ba30", "patch": "@@ -7,7 +7,7 @@ use std::hash::Hash;\n \n use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty};\n-use rustc_span::{def_id::DefId, Span};\n+use rustc_span::def_id::DefId;\n \n use super::{\n     AllocId, Allocation, AllocationExtra, Frame, ImmTy, InterpCx, InterpResult, Memory, MemoryKind,\n@@ -135,7 +135,6 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// was used.\n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         ret: Option<(PlaceTy<'tcx, Self::PointerTag>, mir::BasicBlock)>,\n@@ -156,7 +155,6 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// responsibility to advance the instruction pointer as appropriate.\n     fn call_intrinsic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         ret: Option<(PlaceTy<'tcx, Self::PointerTag>, mir::BasicBlock)>,"}, {"sha": "4abb33c9745c178c948c8bef8252454e948b97df", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a1a583b3a257ee2c0ceabed54a2035577211ba30/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a583b3a257ee2c0ceabed54a2035577211ba30/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=a1a583b3a257ee2c0ceabed54a2035577211ba30", "patch": "@@ -4,7 +4,6 @@ use std::convert::TryFrom;\n use rustc_middle::ty::layout::{self, LayoutOf, TyAndLayout};\n use rustc_middle::ty::Instance;\n use rustc_middle::{mir, ty};\n-use rustc_span::source_map::Span;\n use rustc_target::spec::abi::Abi;\n \n use super::{\n@@ -71,14 +70,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     Some((dest, ret)) => Some((self.eval_place(dest)?, *ret)),\n                     None => None,\n                 };\n-                self.eval_fn_call(\n-                    fn_val,\n-                    terminator.source_info.span,\n-                    abi,\n-                    &args[..],\n-                    ret,\n-                    *cleanup,\n-                )?;\n+                self.eval_fn_call(fn_val, abi, &args[..], ret, *cleanup)?;\n             }\n \n             Drop { ref location, target, unwind } => {\n@@ -88,7 +80,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 trace!(\"TerminatorKind::drop: {:?}, type {}\", location, ty);\n \n                 let instance = Instance::resolve_drop_in_place(*self.tcx, ty);\n-                self.drop_in_place(place, instance, terminator.source_info.span, target, unwind)?;\n+                self.drop_in_place(place, instance, target, unwind)?;\n             }\n \n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n@@ -196,7 +188,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     fn eval_fn_call(\n         &mut self,\n         fn_val: FnVal<'tcx, M::ExtraFnVal>,\n-        span: Span,\n         caller_abi: Abi,\n         args: &[OpTy<'tcx, M::PointerTag>],\n         ret: Option<(PlaceTy<'tcx, M::PointerTag>, mir::BasicBlock)>,\n@@ -242,7 +233,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n                 assert!(caller_abi == Abi::RustIntrinsic || caller_abi == Abi::PlatformIntrinsic);\n-                M::call_intrinsic(self, span, instance, args, ret, unwind)\n+                M::call_intrinsic(self, instance, args, ret, unwind)\n             }\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n@@ -252,7 +243,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | ty::InstanceDef::CloneShim(..)\n             | ty::InstanceDef::Item(_) => {\n                 // We need MIR for this fn\n-                let body = match M::find_mir_or_eval_fn(self, span, instance, args, ret, unwind)? {\n+                let body = match M::find_mir_or_eval_fn(self, instance, args, ret, unwind)? {\n                     Some(body) => body,\n                     None => return Ok(()),\n                 };\n@@ -406,7 +397,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     OpTy::from(ImmTy { layout: this_receiver_ptr, imm: receiver_place.ptr.into() });\n                 trace!(\"Patched self operand to {:#?}\", args[0]);\n                 // recurse with concrete function\n-                self.eval_fn_call(drop_fn, span, caller_abi, &args, ret, unwind)\n+                self.eval_fn_call(drop_fn, caller_abi, &args, ret, unwind)\n             }\n         }\n     }\n@@ -415,7 +406,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &mut self,\n         place: PlaceTy<'tcx, M::PointerTag>,\n         instance: ty::Instance<'tcx>,\n-        span: Span,\n         target: mir::BasicBlock,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n@@ -443,7 +433,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         self.eval_fn_call(\n             FnVal::Instance(instance),\n-            span,\n             Abi::Rust,\n             &[arg.into()],\n             Some((dest.into(), target)),"}, {"sha": "91507e7c01e5633c739c23a5975f4f21b52c1980", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1a583b3a257ee2c0ceabed54a2035577211ba30/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a583b3a257ee2c0ceabed54a2035577211ba30/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=a1a583b3a257ee2c0ceabed54a2035577211ba30", "patch": "@@ -183,7 +183,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n \n     fn find_mir_or_eval_fn(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _span: Span,\n         _instance: ty::Instance<'tcx>,\n         _args: &[OpTy<'tcx>],\n         _ret: Option<(PlaceTy<'tcx>, BasicBlock)>,\n@@ -204,7 +203,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n \n     fn call_intrinsic(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _span: Span,\n         _instance: ty::Instance<'tcx>,\n         _args: &[OpTy<'tcx>],\n         _ret: Option<(PlaceTy<'tcx>, BasicBlock)>,"}]}