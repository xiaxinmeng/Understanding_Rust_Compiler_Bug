{"sha": "22cbdd4b8908b1f47532403e42df951f49d67ebd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyY2JkZDRiODkwOGIxZjQ3NTMyNDAzZTQyZGY5NTFmNDlkNjdlYmQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-15T11:58:29Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-15T11:58:29Z"}, "message": "Rollup merge of #30864 - jseyfried:no_record_exports, r=nrc", "tree": {"sha": "ff77ada0363d05ce88a40a1bf8aa9d10aa9061df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff77ada0363d05ce88a40a1bf8aa9d10aa9061df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22cbdd4b8908b1f47532403e42df951f49d67ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22cbdd4b8908b1f47532403e42df951f49d67ebd", "html_url": "https://github.com/rust-lang/rust/commit/22cbdd4b8908b1f47532403e42df951f49d67ebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22cbdd4b8908b1f47532403e42df951f49d67ebd/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9d902ef990f6f3f0ce7738cbd262d4dbdad6981", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d902ef990f6f3f0ce7738cbd262d4dbdad6981", "html_url": "https://github.com/rust-lang/rust/commit/d9d902ef990f6f3f0ce7738cbd262d4dbdad6981"}, {"sha": "a353490e6f7916bf4022b79870aed5395ba9b77d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a353490e6f7916bf4022b79870aed5395ba9b77d", "html_url": "https://github.com/rust-lang/rust/commit/a353490e6f7916bf4022b79870aed5395ba9b77d"}], "stats": {"total": 183, "additions": 22, "deletions": 161}, "files": [{"sha": "d3da93a3e080d53508928af23f0c8b0068568b03", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22cbdd4b8908b1f47532403e42df951f49d67ebd/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22cbdd4b8908b1f47532403e42df951f49d67ebd/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=22cbdd4b8908b1f47532403e42df951f49d67ebd", "patch": "@@ -329,9 +329,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n         // This code is here instead of in visit_item so that the\n         // crate module gets processed as well.\n         if self.prev_level.is_some() {\n-            for export in self.export_map.get(&id).expect(\"module isn't found in export map\") {\n-                if let Some(node_id) = self.tcx.map.as_local_node_id(export.def_id) {\n-                    self.update(node_id, Some(AccessLevel::Exported));\n+            if let Some(exports) = self.export_map.get(&id) {\n+                for export in exports {\n+                    if let Some(node_id) = self.tcx.map.as_local_node_id(export.def_id) {\n+                        self.update(node_id, Some(AccessLevel::Exported));\n+                    }\n                 }\n             }\n         }"}, {"sha": "8464d3ef298708187449cd32d5cd78b6ff86b477", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22cbdd4b8908b1f47532403e42df951f49d67ebd/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22cbdd4b8908b1f47532403e42df951f49d67ebd/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=22cbdd4b8908b1f47532403e42df951f49d67ebd", "patch": "@@ -101,7 +101,6 @@ use resolve_imports::Shadowable;\n pub mod diagnostics;\n \n mod check_unused;\n-mod record_exports;\n mod build_reduced_graph;\n mod resolve_imports;\n \n@@ -4014,9 +4013,6 @@ pub fn create_resolver<'a, 'tcx>(session: &'a Session,\n     resolve_imports::resolve_imports(&mut resolver);\n     session.abort_if_errors();\n \n-    record_exports::record(&mut resolver);\n-    session.abort_if_errors();\n-\n     resolver\n }\n "}, {"sha": "13f4348f79522052aa2b735df00d24be3f055798", "filename": "src/librustc_resolve/record_exports.rs", "status": "removed", "additions": 0, "deletions": 154, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/d9d902ef990f6f3f0ce7738cbd262d4dbdad6981/src%2Flibrustc_resolve%2Frecord_exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d902ef990f6f3f0ce7738cbd262d4dbdad6981/src%2Flibrustc_resolve%2Frecord_exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Frecord_exports.rs?ref=d9d902ef990f6f3f0ce7738cbd262d4dbdad6981", "patch": "@@ -1,154 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-// Export recording\n-//\n-// This pass simply determines what all \"export\" keywords refer to and\n-// writes the results into the export map.\n-//\n-// FIXME #4953 This pass will be removed once exports change to per-item.\n-// Then this operation can simply be performed as part of item (or import)\n-// processing.\n-\n-use {Module, NameBinding, Resolver};\n-use Namespace::{TypeNS, ValueNS};\n-\n-use build_reduced_graph;\n-use module_to_string;\n-\n-use rustc::middle::def::Export;\n-use syntax::ast;\n-\n-use std::ops::{Deref, DerefMut};\n-\n-struct ExportRecorder<'a, 'b: 'a, 'tcx: 'b> {\n-    resolver: &'a mut Resolver<'b, 'tcx>,\n-}\n-\n-// Deref and DerefMut impls allow treating ExportRecorder as Resolver.\n-impl<'a, 'b, 'tcx:'b> Deref for ExportRecorder<'a, 'b, 'tcx> {\n-    type Target = Resolver<'b, 'tcx>;\n-\n-    fn deref<'c>(&'c self) -> &'c Resolver<'b, 'tcx> {\n-        &*self.resolver\n-    }\n-}\n-\n-impl<'a, 'b, 'tcx:'b> DerefMut for ExportRecorder<'a, 'b, 'tcx> {\n-    fn deref_mut<'c>(&'c mut self) -> &'c mut Resolver<'b, 'tcx> {\n-        &mut *self.resolver\n-    }\n-}\n-\n-impl<'a, 'b, 'tcx> ExportRecorder<'a, 'b, 'tcx> {\n-    fn record_exports_for_module_subtree(&mut self, module_: Module<'b>) {\n-        // If this isn't a local krate, then bail out. We don't need to record\n-        // exports for nonlocal crates.\n-\n-        match module_.def_id() {\n-            Some(def_id) if def_id.is_local() => {\n-                // OK. Continue.\n-                debug!(\"(recording exports for module subtree) recording exports for local \\\n-                        module `{}`\",\n-                       module_to_string(module_));\n-            }\n-            None => {\n-                // Record exports for the root module.\n-                debug!(\"(recording exports for module subtree) recording exports for root module \\\n-                        `{}`\",\n-                       module_to_string(module_));\n-            }\n-            Some(_) => {\n-                // Bail out.\n-                debug!(\"(recording exports for module subtree) not recording exports for `{}`\",\n-                       module_to_string(module_));\n-                return;\n-            }\n-        }\n-\n-        self.record_exports_for_module(module_);\n-        build_reduced_graph::populate_module_if_necessary(self.resolver, &module_);\n-\n-        for (_, child_name_bindings) in module_.children.borrow().iter() {\n-            match child_name_bindings.type_ns.module() {\n-                None => {\n-                    // Nothing to do.\n-                }\n-                Some(child_module) => {\n-                    self.record_exports_for_module_subtree(child_module);\n-                }\n-            }\n-        }\n-\n-        for (_, child_module) in module_.anonymous_children.borrow().iter() {\n-            self.record_exports_for_module_subtree(child_module);\n-        }\n-    }\n-\n-    fn record_exports_for_module(&mut self, module_: Module<'b>) {\n-        let mut exports = Vec::new();\n-\n-        self.add_exports_for_module(&mut exports, module_);\n-        match module_.def_id() {\n-            Some(def_id) => {\n-                let node_id = self.ast_map.as_local_node_id(def_id).unwrap();\n-                self.export_map.insert(node_id, exports);\n-                debug!(\"(computing exports) writing exports for {} (some)\", node_id);\n-            }\n-            None => {}\n-        }\n-    }\n-\n-    fn add_export_of_namebinding(&mut self,\n-                                 exports: &mut Vec<Export>,\n-                                 name: ast::Name,\n-                                 namebinding: &NameBinding) {\n-        match namebinding.def() {\n-            Some(d) => {\n-                debug!(\"(computing exports) YES: export '{}' => {:?}\",\n-                       name,\n-                       d.def_id());\n-                exports.push(Export {\n-                    name: name,\n-                    def_id: d.def_id(),\n-                });\n-            }\n-            d_opt => {\n-                debug!(\"(computing exports) NO: {:?}\", d_opt);\n-            }\n-        }\n-    }\n-\n-    fn add_exports_for_module(&mut self, exports: &mut Vec<Export>, module_: Module<'b>) {\n-        for (name, import_resolution) in module_.import_resolutions.borrow().iter() {\n-            let xs = [TypeNS, ValueNS];\n-            for &ns in &xs {\n-                if !import_resolution[ns].is_public {\n-                    continue;\n-                }\n-\n-                match import_resolution[ns].target {\n-                    Some(ref target) => {\n-                        debug!(\"(computing exports) maybe export '{}'\", name);\n-                        self.add_export_of_namebinding(exports, *name, &target.binding)\n-                    }\n-                    _ => (),\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-pub fn record(resolver: &mut Resolver) {\n-    let mut recorder = ExportRecorder { resolver: resolver };\n-    let root_module = recorder.graph_root;\n-    recorder.record_exports_for_module_subtree(root_module);\n-}"}, {"sha": "abaf45cb1704d0abcf2ecf756f9306e2673b277d", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/22cbdd4b8908b1f47532403e42df951f49d67ebd/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22cbdd4b8908b1f47532403e42df951f49d67ebd/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=22cbdd4b8908b1f47532403e42df951f49d67ebd", "patch": "@@ -688,6 +688,8 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                             id: directive.id,\n                             is_public: directive.is_public\n                         };\n+\n+                        self.add_export(module_, target, &import_resolution[namespace]);\n                         *used_public = name_binding.is_public();\n                     }\n                     UnboundResult => {\n@@ -827,6 +829,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                         dest_import_resolution[ns] = ImportResolution {\n                             id: id, is_public: is_public, target: Some(target.clone())\n                         };\n+                        self.add_export(module_, *name, &dest_import_resolution[ns]);\n                     }\n                     _ => {}\n                 }\n@@ -919,6 +922,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                             id: id,\n                             is_public: is_public\n                         };\n+                        self.add_export(module_, name, &dest_import_resolution[namespace]);\n                     }\n                 } else {\n                     // FIXME #30159: This is required for backwards compatability.\n@@ -935,6 +939,19 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                                                            name);\n     }\n \n+    fn add_export(&mut self, module: Module<'b>, name: Name, resolution: &ImportResolution<'b>) {\n+        if !resolution.is_public { return }\n+        let node_id = match module.def_id() {\n+            Some(def_id) => self.resolver.ast_map.as_local_node_id(def_id).unwrap(),\n+            None => return,\n+        };\n+        let export = match resolution.target.as_ref().unwrap().binding.def() {\n+            Some(def) => Export { name: name, def_id: def.def_id() },\n+            None => return,\n+        };\n+        self.resolver.export_map.entry(node_id).or_insert(Vec::new()).push(export);\n+    }\n+\n     /// Checks that imported names and items don't have the same name.\n     fn check_for_conflicting_import(&mut self,\n                                     import_resolution: &ImportResolutionPerNamespace,"}]}