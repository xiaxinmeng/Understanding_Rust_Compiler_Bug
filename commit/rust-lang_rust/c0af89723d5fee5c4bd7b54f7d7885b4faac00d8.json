{"sha": "c0af89723d5fee5c4bd7b54f7d7885b4faac00d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYWY4OTcyM2Q1ZmVlNWM0YmQ3YjU0ZjdkNzg4NWI0ZmFhYzAwZDg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-03T06:03:04Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:54:29Z"}, "message": "Fix tidy", "tree": {"sha": "847afa112e56f74748d7677e6fd41f2d5e798767", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/847afa112e56f74748d7677e6fd41f2d5e798767"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0af89723d5fee5c4bd7b54f7d7885b4faac00d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0af89723d5fee5c4bd7b54f7d7885b4faac00d8", "html_url": "https://github.com/rust-lang/rust/commit/c0af89723d5fee5c4bd7b54f7d7885b4faac00d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0af89723d5fee5c4bd7b54f7d7885b4faac00d8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "191e5b0b78eae71ed9d59d03f2292501dd6d488a", "url": "https://api.github.com/repos/rust-lang/rust/commits/191e5b0b78eae71ed9d59d03f2292501dd6d488a", "html_url": "https://github.com/rust-lang/rust/commit/191e5b0b78eae71ed9d59d03f2292501dd6d488a"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "6b7ad8394601904e91d041416f73247a7b5389c7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0af89723d5fee5c4bd7b54f7d7885b4faac00d8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0af89723d5fee5c4bd7b54f7d7885b4faac00d8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c0af89723d5fee5c4bd7b54f7d7885b4faac00d8", "patch": "@@ -1440,7 +1440,8 @@ impl<'a> Resolver<'a> {\n     /// isn't something that can be returned because it can't be made to live that long,\n     /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,\n     /// just that an error occured.\n-    pub fn resolve_str_path_error(&mut self, span: Span, path_str: &str, is_value: bool) -> Result<hir::Path, ()> {\n+    pub fn resolve_str_path_error(&mut self, span: Span, path_str: &str, is_value: bool)\n+        -> Result<hir::Path, ()> {\n         use std::iter;\n         let mut errored = false;\n "}, {"sha": "59a797b55d0626d3577891347143156280b17562", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0af89723d5fee5c4bd7b54f7d7885b4faac00d8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0af89723d5fee5c4bd7b54f7d7885b4faac00d8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c0af89723d5fee5c4bd7b54f7d7885b4faac00d8", "patch": "@@ -834,8 +834,9 @@ impl Clean<Attributes> for [ast::Attribute] {\n                 let path = {\n                     let is_value;\n                     let path_str = if let Some(prefix) =\n-                        [\"struct\", \"enum\", \"type\", \"trait\", \"union\"].iter()\n-                                                                    .find(|p| link.starts_with(**p)) {\n+                        [\"struct\", \"enum\", \"type\",\n+                         \"trait\", \"union\"].iter()\n+                                          .find(|p| link.starts_with(**p)) {\n                         is_value = Some(false);\n                         link.trim_left_matches(prefix).trim()\n                     } else if let Some(prefix) =\n@@ -857,7 +858,8 @@ impl Clean<Attributes> for [ast::Attribute] {\n                     // avoid resolving things (i.e. regular links) which aren't like paths\n                     // FIXME(Manishearth) given that most links have slashes in them might be worth\n                     // doing a check for slashes first\n-                    if path_str.contains(|ch: char| !(ch.is_alphanumeric() || ch == ':' || ch == '_')) {\n+                    if path_str.contains(|ch: char| !(ch.is_alphanumeric() ||\n+                                                      ch == ':' || ch == '_')) {\n                         continue;\n                     }\n \n@@ -867,7 +869,8 @@ impl Clean<Attributes> for [ast::Attribute] {\n                         if let Some(id) = cx.mod_ids.borrow().last() {\n                             cx.resolver.borrow_mut()\n                                        .with_scope(*id, |resolver| {\n-                                            resolver.resolve_str_path_error(DUMMY_SP, &path_str, is_val)\n+                                            resolver.resolve_str_path_error(DUMMY_SP,\n+                                                                            &path_str, is_val)\n                                         })\n                         } else {\n                             // FIXME(Manishearth) this branch doesn't seem to ever be hit, really"}]}