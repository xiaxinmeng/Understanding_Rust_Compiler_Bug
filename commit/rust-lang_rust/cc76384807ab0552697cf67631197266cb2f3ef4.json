{"sha": "cc76384807ab0552697cf67631197266cb2f3ef4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNzYzODQ4MDdhYjA1NTI2OTdjZjY3NjMxMTk3MjY2Y2IyZjNlZjQ=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-12-31T11:12:50Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-12-31T11:12:50Z"}, "message": "Some improvements to util documentation", "tree": {"sha": "e7048c31e652b31f0b9e32ed3a924f3e5dbb685e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7048c31e652b31f0b9e32ed3a924f3e5dbb685e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc76384807ab0552697cf67631197266cb2f3ef4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlwp+c8ACgkQtvoGpuDi\nZlu/uQ//cmDLDYL2GBuZhkYYyG/BTRImxxKcod0HYmO1mpLAhJdlkZiEdxUZJj74\nhBrX9M0raTDuC/v0e1Q1nE0OHuvnuMKlhEdQ6QiA1CQkrM4FV49aSkonRWd9dDA7\nAjsyXDK4D8Z3jEX1gi3UId8PFwvfyGG/31UOQ092uT5px1o/ez3r4gIbX+7DZpiD\n4QbrcW6zeZ5g/pM5V2U+N7ppInY2wyrlJHShkYxhlGicq6UVKfsYHPvt1AxKWIjb\nfTxaw3KbzjPb03UU2r2CvsCgAL7B+TTZlRNhybRTG1XGy0osGbAn/TJYDOSMBXjU\nl/nv5UwK+S7jAL8h4qrAvSAoggGBskccQ70s/H6zMWdfPDkZZp6dmAYvQNIB/PJL\naWifb9UbZTHv7X6J1zQqCkwuCzKkiFaIViQBlVhOtc/L+BKy+c8omqdlOpnVO/VL\njRzowrpKa+Odzlo1qYORXjgSRrCfdL/1lHJJsPcnzZwNX/L7byAUmJLQNlu6c4je\nwAbTN2W1QPBf0UYEvwWWOyb+dVuhKc9i592+6dVp5cg4GQpsF6rs3x4PsGv3J7Dc\nTbd3BRE3fUw8Wdl9nEbqAcDoUu9cVMWbvceNwZZ2pm2Yp8FTYdfJjEUSGcjCM078\nY/eKFzVGK5p2Aez299ERQpjkpd3ttv+JG9obRS72305Qv+wc3Yc=\n=HYZW\n-----END PGP SIGNATURE-----", "payload": "tree e7048c31e652b31f0b9e32ed3a924f3e5dbb685e\nparent 61bfb39e3feaeff417c77155849697a4da039252\nauthor Philipp Hansch <dev@phansch.net> 1546254770 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1546254770 +0100\n\nSome improvements to util documentation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc76384807ab0552697cf67631197266cb2f3ef4", "html_url": "https://github.com/rust-lang/rust/commit/cc76384807ab0552697cf67631197266cb2f3ef4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc76384807ab0552697cf67631197266cb2f3ef4/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61bfb39e3feaeff417c77155849697a4da039252", "url": "https://api.github.com/repos/rust-lang/rust/commits/61bfb39e3feaeff417c77155849697a4da039252", "html_url": "https://github.com/rust-lang/rust/commit/61bfb39e3feaeff417c77155849697a4da039252"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "647bae1ae6bd5742a4e0f55607f0240315870285", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cc76384807ab0552697cf67631197266cb2f3ef4/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc76384807ab0552697cf67631197266cb2f3ef4/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=cc76384807ab0552697cf67631197266cb2f3ef4", "patch": "@@ -62,6 +62,15 @@ pub fn differing_macro_contexts(lhs: Span, rhs: Span) -> bool {\n     rhs.ctxt() != lhs.ctxt()\n }\n \n+/// Returns `true` if the given `NodeId` is inside a constant context\n+///\n+/// # Example\n+///\n+/// ```rust,ignore\n+/// if in_constant(cx, expr.id) {\n+///     // Do something\n+/// }\n+/// ```\n pub fn in_constant(cx: &LateContext<'_, '_>, id: NodeId) -> bool {\n     let parent_id = cx.tcx.hir().get_parent(id);\n     match cx.tcx.hir().body_owner_kind(parent_id) {\n@@ -377,6 +386,9 @@ pub fn contains_name(name: Name, expr: &Expr) -> bool {\n \n /// Convert a span to a code snippet if available, otherwise use default.\n ///\n+/// This is useful if you want to provide suggestions for your lint or more generally, if you want\n+/// to convert a given `Span` to a `str`.\n+///\n /// # Example\n /// ```rust,ignore\n /// snippet(cx, expr.span, \"..\")\n@@ -430,7 +442,7 @@ pub fn snippet_opt<'a, T: LintContext<'a>>(cx: &T, span: Span) -> Option<String>\n ///\n /// # Example\n /// ```rust,ignore\n-/// snippet(cx, expr.span, \"..\")\n+/// snippet_block(cx, expr.span, \"..\")\n /// ```\n pub fn snippet_block<'a, 'b, T: LintContext<'b>>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {\n     let snip = snippet(cx, span, default);\n@@ -741,6 +753,13 @@ pub fn is_integer_literal(expr: &Expr, value: u128) -> bool {\n     false\n }\n \n+/// Returns `true` if the given `Expr` has been coerced before.\n+///\n+/// Examples of coercions can be found in the Nomicon at\n+/// <https://doc.rust-lang.org/nomicon/coercions.html>.\n+///\n+/// See `rustc::ty::adjustment::Adjustment` and `rustc_typeck::check::coercion` for more\n+/// information on adjustments and coercions.\n pub fn is_adjusted(cx: &LateContext<'_, '_>, e: &Expr) -> bool {\n     cx.tables.adjustments().get(e.hir_id).is_some()\n }"}]}