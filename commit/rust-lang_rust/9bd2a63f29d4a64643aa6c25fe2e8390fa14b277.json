{"sha": "9bd2a63f29d4a64643aa6c25fe2e8390fa14b277", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZDJhNjNmMjlkNGE2NDY0M2FhNmMyNWZlMmU4MzkwZmExNGIyNzc=", "commit": {"author": {"name": "Eh2406", "email": "YeomanYaacov@gmail.com", "date": "2018-06-27T21:47:55Z"}, "committer": {"name": "Eh2406", "email": "YeomanYaacov@gmail.com", "date": "2018-06-28T14:18:31Z"}, "message": "remove inner_mut as it can mess up invariants", "tree": {"sha": "237bdeac9da7d7ba9b066a1e12701f96016aaa8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/237bdeac9da7d7ba9b066a1e12701f96016aaa8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bd2a63f29d4a64643aa6c25fe2e8390fa14b277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bd2a63f29d4a64643aa6c25fe2e8390fa14b277", "html_url": "https://github.com/rust-lang/rust/commit/9bd2a63f29d4a64643aa6c25fe2e8390fa14b277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bd2a63f29d4a64643aa6c25fe2e8390fa14b277/comments", "author": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497a3b4fd5d0b9d773f40dd7acef952a7acd4ce5", "url": "https://api.github.com/repos/rust-lang/rust/commits/497a3b4fd5d0b9d773f40dd7acef952a7acd4ce5", "html_url": "https://github.com/rust-lang/rust/commit/497a3b4fd5d0b9d773f40dd7acef952a7acd4ce5"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "c927aa871fc5e7490760e0ef5a6e6ca3f9017c5b", "filename": "src/librustc_mir/borrow_check/nll/constraint_set.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9bd2a63f29d4a64643aa6c25fe2e8390fa14b277/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bd2a63f29d4a64643aa6c25fe2e8390fa14b277/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs?ref=9bd2a63f29d4a64643aa6c25fe2e8390fa14b277", "patch": "@@ -23,29 +23,39 @@ crate struct ConstraintSet {\n }\n \n impl ConstraintSet {\n-    pub fn push(&mut self, outlives_constraint: OutlivesConstraint) {\n+    pub fn new() -> Self {\n+        Default::default()\n+    }\n+\n+    pub fn push(&mut self, constraint: OutlivesConstraint) {\n         debug!(\"add_outlives({:?}: {:?} @ {:?}\",\n-               outlives_constraint.sup,\n-               outlives_constraint.sub,\n-               outlives_constraint.point);\n-        if outlives_constraint.sup == outlives_constraint.sub {\n+               constraint.sup,\n+               constraint.sub,\n+               constraint.point);\n+        if constraint.sup == constraint.sub {\n             // 'a: 'a is pretty uninteresting\n             return;\n         }\n-        if self.seen_constraints.insert(outlives_constraint.dedup_key()) {\n-            self.constraints.push(outlives_constraint);\n+        if self.seen_constraints.insert(constraint.dedup_key()) {\n+            self.constraints.push(constraint);\n         }\n     }\n \n     pub fn inner(&self) -> &IndexVec<ConstraintIndex, OutlivesConstraint> {\n         &self.constraints\n     }\n \n-    /// Do Not use this to add nor remove items to the Vec,\n-    /// nor change the `sup`,\n-    /// nor `sub` of the data.\n-    pub fn inner_mut(&mut self) -> &mut IndexVec<ConstraintIndex, OutlivesConstraint> {\n-        &mut self.constraints\n+    pub fn link(&mut self, len: usize) -> IndexVec<RegionVid, Option<ConstraintIndex>> {\n+        let mut map = IndexVec::from_elem_n(None, len);\n+\n+        for (idx, constraint) in self.constraints.iter_enumerated_mut().rev() {\n+            let mut head = &mut map[constraint.sub];\n+            debug_assert!(constraint.next.is_none());\n+            constraint.next = *head;\n+            *head = Some(idx);\n+        }\n+\n+        map\n     }\n }\n "}, {"sha": "ef61b162e9cf6ded7cd7c9ef1c248c2424938b3e", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bd2a63f29d4a64643aa6c25fe2e8390fa14b277/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bd2a63f29d4a64643aa6c25fe2e8390fa14b277/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=9bd2a63f29d4a64643aa6c25fe2e8390fa14b277", "patch": "@@ -486,16 +486,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// These are constraints like Y: X @ P -- so if X changed, we may\n     /// need to grow Y.\n     fn build_dependency_map(&mut self) -> IndexVec<RegionVid, Option<ConstraintIndex>> {\n-        let mut map = IndexVec::from_elem(None, &self.definitions);\n-\n-        for (idx, constraint) in self.constraints.inner_mut().iter_enumerated_mut().rev() {\n-            let mut head = &mut map[constraint.sub];\n-            debug_assert!(constraint.next.is_none());\n-            constraint.next = *head;\n-            *head = Some(idx);\n-        }\n-\n-        map\n+        self.constraints.link(self.definitions.len())\n     }\n \n     /// Once regions have been propagated, this method is used to see"}]}