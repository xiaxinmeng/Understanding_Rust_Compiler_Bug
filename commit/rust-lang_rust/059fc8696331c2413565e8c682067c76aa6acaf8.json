{"sha": "059fc8696331c2413565e8c682067c76aa6acaf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1OWZjODY5NjMzMWMyNDEzNTY1ZThjNjgyMDY3Yzc2YWE2YWNhZjg=", "commit": {"author": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2020-05-05T12:53:18Z"}, "committer": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2020-05-05T12:53:18Z"}, "message": "Merge heavy tests", "tree": {"sha": "88452437cd815a578b22402eda79b0714de11d6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88452437cd815a578b22402eda79b0714de11d6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/059fc8696331c2413565e8c682067c76aa6acaf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/059fc8696331c2413565e8c682067c76aa6acaf8", "html_url": "https://github.com/rust-lang/rust/commit/059fc8696331c2413565e8c682067c76aa6acaf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/059fc8696331c2413565e8c682067c76aa6acaf8/comments", "author": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2980ba1fde50a6fc8863750b9dd7f09e3c1227ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/2980ba1fde50a6fc8863750b9dd7f09e3c1227ce", "html_url": "https://github.com/rust-lang/rust/commit/2980ba1fde50a6fc8863750b9dd7f09e3c1227ce"}], "stats": {"total": 239, "additions": 105, "deletions": 134}, "files": [{"sha": "2e52a29a8eecc60ce7eadaea3e90b06e4952dc57", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 105, "deletions": 134, "changes": 239, "blob_url": "https://github.com/rust-lang/rust/blob/059fc8696331c2413565e8c682067c76aa6acaf8/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059fc8696331c2413565e8c682067c76aa6acaf8/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=059fc8696331c2413565e8c682067c76aa6acaf8", "patch": "@@ -575,7 +575,7 @@ version = \\\"0.0.0\\\"\n }\n \n #[test]\n-fn resolve_include_concat_env() {\n+fn out_dirs_check() {\n     if skip_slow_tests() {\n         return;\n     }\n@@ -598,11 +598,28 @@ fn main() {\n         r#\"pub fn message() -> &'static str { \"Hello, World!\" }\"#,\n     )\n     .unwrap();\n+    println!(\"cargo:rustc-cfg=atom_cfg\");\n+    println!(\"cargo:rustc-cfg=featlike=\\\"set\\\"\");\n     println!(\"cargo:rerun-if-changed=build.rs\");\n }\n //- src/main.rs\n include!(concat!(env!(\"OUT_DIR\"), \"/hello.rs\"));\n \n+#[cfg(atom_cfg)]\n+struct A;\n+#[cfg(bad_atom_cfg)]\n+struct A;\n+#[cfg(featlike = \"set\")]\n+struct B;\n+#[cfg(featlike = \"not_set\")]\n+struct B;\n+\n+fn main() {\n+    let va = A;\n+    let vb = B;\n+    message();\n+}\n+\n fn main() { message(); }\n \"###,\n     )\n@@ -614,12 +631,98 @@ fn main() { message(); }\n     let res = server.send_request::<GotoDefinition>(GotoDefinitionParams {\n         text_document_position_params: TextDocumentPositionParams::new(\n             server.doc_id(\"src/main.rs\"),\n-            Position::new(2, 15),\n+            Position::new(14, 8),\n         ),\n         work_done_progress_params: Default::default(),\n         partial_result_params: Default::default(),\n     });\n     assert!(format!(\"{}\", res).contains(\"hello.rs\"));\n+    server.request::<GotoTypeDefinition>(\n+        GotoDefinitionParams {\n+            text_document_position_params: TextDocumentPositionParams::new(\n+                server.doc_id(\"src/main.rs\"),\n+                Position::new(12, 9),\n+            ),\n+            work_done_progress_params: Default::default(),\n+            partial_result_params: Default::default(),\n+        },\n+        json!([{\n+            \"originSelectionRange\": {\n+                \"end\": {\n+                    \"character\": 10,\n+                    \"line\": 12\n+                },\n+                \"start\": {\n+                    \"character\": 8,\n+                    \"line\": 12\n+                }\n+            },\n+            \"targetRange\": {\n+                \"end\": {\n+                    \"character\": 9,\n+                    \"line\": 3\n+                },\n+                \"start\": {\n+                    \"character\": 0,\n+                    \"line\": 2\n+                }\n+            },\n+            \"targetSelectionRange\": {\n+                \"end\": {\n+                    \"character\": 8,\n+                    \"line\": 3\n+                },\n+                \"start\": {\n+                    \"character\": 7,\n+                    \"line\": 3\n+                }\n+            },\n+            \"targetUri\": \"file:///[..]src/main.rs\"\n+        }]),\n+    );\n+    server.request::<GotoTypeDefinition>(\n+        GotoDefinitionParams {\n+            text_document_position_params: TextDocumentPositionParams::new(\n+                server.doc_id(\"src/main.rs\"),\n+                Position::new(13, 9),\n+            ),\n+            work_done_progress_params: Default::default(),\n+            partial_result_params: Default::default(),\n+        },\n+        json!([{\n+            \"originSelectionRange\": {\n+                \"end\": {\n+                    \"character\": 10,\n+                    \"line\": 13\n+                },\n+                \"start\": {\n+                    \"character\": 8,\n+                    \"line\":13\n+                }\n+            },\n+            \"targetRange\": {\n+                \"end\": {\n+                    \"character\": 9,\n+                    \"line\": 7\n+                },\n+                \"start\": {\n+                    \"character\": 0,\n+                    \"line\":6\n+                }\n+            },\n+            \"targetSelectionRange\": {\n+                \"end\": {\n+                    \"character\": 8,\n+                    \"line\": 7\n+                },\n+                \"start\": {\n+                    \"character\": 7,\n+                    \"line\": 7\n+                }\n+            },\n+            \"targetUri\": \"file:///[..]src/main.rs\"\n+        }]),\n+    );\n }\n \n #[test]\n@@ -708,135 +811,3 @@ pub fn foo(_input: TokenStream) -> TokenStream {\n     let value = res.get(\"contents\").unwrap().get(\"value\").unwrap().to_string();\n     assert_eq!(value, r#\"\"```rust\\nfoo::Bar\\nfn bar()\\n```\"\"#)\n }\n-\n-#[test]\n-fn build_rs_cfgs() {\n-    if skip_slow_tests() {\n-        return;\n-    }\n-\n-    let server = Project::with_fixture(\n-        r###\"\n-//- Cargo.toml\n-[package]\n-name = \"foo\"\n-version = \"0.0.0\"\n-\n-//- build.rs\n-\n-fn main() {\n-    println!(\"cargo:rustc-cfg=atom_cfg\");\n-    println!(\"cargo:rustc-cfg=featlike=\\\"set\\\"\");\n-    println!(\"cargo:rerun-if-changed=build.rs\");\n-}\n-//- src/main.rs\n-#[cfg(atom_cfg)]\n-struct A;\n-\n-#[cfg(bad_atom_cfg)]\n-struct A;\n-\n-#[cfg(featlike = \"set\")]\n-struct B;\n-\n-#[cfg(featlike = \"not_set\")]\n-struct B;\n-\n-fn main() {\n-    let va = A;\n-    let vb = B;\n-}\n-\"###,\n-    )\n-    .with_config(|config| {\n-        config.cargo.load_out_dirs_from_check = true;\n-    })\n-    .server();\n-    server.wait_until_workspace_is_loaded();\n-    server.request::<GotoTypeDefinition>(\n-        GotoDefinitionParams {\n-            text_document_position_params: TextDocumentPositionParams::new(\n-                server.doc_id(\"src/main.rs\"),\n-                Position::new(13, 9),\n-            ),\n-            work_done_progress_params: Default::default(),\n-            partial_result_params: Default::default(),\n-        },\n-        json!([{\n-            \"originSelectionRange\": {\n-                \"end\": {\n-                    \"character\": 10,\n-                    \"line\": 13\n-                },\n-                \"start\": {\n-                    \"character\": 8,\n-                    \"line\":13\n-                }\n-            },\n-            \"targetRange\": {\n-                \"end\": {\n-                    \"character\": 9,\n-                    \"line\": 1\n-                },\n-                \"start\": {\n-                    \"character\": 0,\n-                    \"line\":0\n-                }\n-            },\n-            \"targetSelectionRange\": {\n-                \"end\": {\n-                    \"character\": 8,\n-                    \"line\": 1\n-                },\n-                \"start\": {\n-                    \"character\": 7,\n-                    \"line\": 1\n-                }\n-            },\n-            \"targetUri\": \"file:///[..]src/main.rs\"\n-        }]),\n-    );\n-    server.request::<GotoTypeDefinition>(\n-        GotoDefinitionParams {\n-            text_document_position_params: TextDocumentPositionParams::new(\n-                server.doc_id(\"src/main.rs\"),\n-                Position::new(14, 9),\n-            ),\n-            work_done_progress_params: Default::default(),\n-            partial_result_params: Default::default(),\n-        },\n-        json!([{\n-            \"originSelectionRange\": {\n-                \"end\": {\n-                    \"character\": 10,\n-                    \"line\": 14\n-                },\n-                \"start\": {\n-                    \"character\": 8,\n-                    \"line\":14\n-                }\n-            },\n-            \"targetRange\": {\n-                \"end\": {\n-                    \"character\": 9,\n-                    \"line\": 7\n-                },\n-                \"start\": {\n-                    \"character\": 0,\n-                    \"line\":6\n-                }\n-            },\n-            \"targetSelectionRange\": {\n-                \"end\": {\n-                    \"character\": 8,\n-                    \"line\": 7\n-                },\n-                \"start\": {\n-                    \"character\": 7,\n-                    \"line\": 7\n-                }\n-            },\n-            \"targetUri\": \"file:///[..]src/main.rs\"\n-        }]),\n-    );\n-}"}]}