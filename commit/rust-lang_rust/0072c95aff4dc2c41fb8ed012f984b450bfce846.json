{"sha": "0072c95aff4dc2c41fb8ed012f984b450bfce846", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNzJjOTVhZmY0ZGMyYzQxZmI4ZWQwMTJmOTg0YjQ1MGJmY2U4NDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-06T08:59:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-06T08:59:22Z"}, "message": "Auto merge of #51953 - japaric:atomic-load-store, r=alexcrichton\n\nenable Atomic*.{load,store} for ARMv6-M / MSP430\n\ncloses #45085\n\nas proposed in https://github.com/rust-lang/rust/issues/45085#issuecomment-384825434\n\nthis commit adds an `atomic_cas` target option and extends the `#[cfg(target_has_atomic)]`\nattribute to enable a subset of the `Atomic*` API on architectures that don't support atomic CAS\nnatively, like MSP430 and ARMv6-M.\n\nr? @alexcrichton", "tree": {"sha": "fba380cd17444258e3ed86e2bdd3f139eb26f8b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fba380cd17444258e3ed86e2bdd3f139eb26f8b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0072c95aff4dc2c41fb8ed012f984b450bfce846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0072c95aff4dc2c41fb8ed012f984b450bfce846", "html_url": "https://github.com/rust-lang/rust/commit/0072c95aff4dc2c41fb8ed012f984b450bfce846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0072c95aff4dc2c41fb8ed012f984b450bfce846/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d9fa2326e184314749ccf79203f5ecc35e6225c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d9fa2326e184314749ccf79203f5ecc35e6225c", "html_url": "https://github.com/rust-lang/rust/commit/4d9fa2326e184314749ccf79203f5ecc35e6225c"}, {"sha": "f9145d01e16d98b7dc969b66ffb6068df9cdd01d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9145d01e16d98b7dc969b66ffb6068df9cdd01d", "html_url": "https://github.com/rust-lang/rust/commit/f9145d01e16d98b7dc969b66ffb6068df9cdd01d"}], "stats": {"total": 65, "additions": 52, "deletions": 13}, "files": [{"sha": "35bf8d1b792f9605aa5c4764e154c5e92bbce165", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=0072c95aff4dc2c41fb8ed012f984b450bfce846", "patch": "@@ -162,7 +162,10 @@ mod boxed {\n #[cfg(test)]\n mod boxed_test;\n pub mod collections;\n-#[cfg(target_has_atomic = \"ptr\")]\n+#[cfg(any(\n+    all(stage0, target_has_atomic = \"ptr\"),\n+    all(not(stage0), target_has_atomic = \"ptr\", target_has_atomic = \"cas\")\n+))]\n pub mod sync;\n pub mod rc;\n pub mod raw_vec;"}, {"sha": "9792d52dd66d26c658bc5e3fbcb380f0f5022081", "filename": "src/liballoc/task.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Fliballoc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Fliballoc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftask.rs?ref=0072c95aff4dc2c41fb8ed012f984b450bfce846", "patch": "@@ -12,10 +12,16 @@\n \n pub use core::task::*;\n \n-#[cfg(target_has_atomic = \"ptr\")]\n+#[cfg(any(\n+    all(stage0, target_has_atomic = \"ptr\"),\n+    all(not(stage0), target_has_atomic = \"ptr\", target_has_atomic = \"cas\")\n+))]\n pub use self::if_arc::*;\n \n-#[cfg(target_has_atomic = \"ptr\")]\n+#[cfg(any(\n+    all(stage0, target_has_atomic = \"ptr\"),\n+    all(not(stage0), target_has_atomic = \"ptr\", target_has_atomic = \"cas\")\n+))]\n mod if_arc {\n     use super::*;\n     use core::marker::PhantomData;\n@@ -47,7 +53,10 @@ mod if_arc {\n         }\n     }\n \n-    #[cfg(target_has_atomic = \"ptr\")]\n+    #[cfg(any(\n+        all(stage0, target_has_atomic = \"ptr\"),\n+        all(not(stage0), target_has_atomic = \"ptr\", target_has_atomic = \"cas\")\n+    ))]\n     struct ArcWrapped<T>(PhantomData<T>);\n \n     unsafe impl<T: Wake + 'static> UnsafeWake for ArcWrapped<T> {"}, {"sha": "e9d1fb89115041c858b8b88b18310eda7c478046", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=0072c95aff4dc2c41fb8ed012f984b450bfce846", "patch": "@@ -371,6 +371,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(any(stage0, target_has_atomic = \"cas\"))]\n     pub fn swap(&self, val: bool, order: Ordering) -> bool {\n         unsafe { atomic_swap(self.v.get(), val as u8, order) != 0 }\n     }\n@@ -401,6 +402,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(any(stage0, target_has_atomic = \"cas\"))]\n     pub fn compare_and_swap(&self, current: bool, new: bool, order: Ordering) -> bool {\n         match self.compare_exchange(current, new, order, strongest_failure_ordering(order)) {\n             Ok(x) => x,\n@@ -446,6 +448,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\")]\n+    #[cfg(any(stage0, target_has_atomic = \"cas\"))]\n     pub fn compare_exchange(&self,\n                             current: bool,\n                             new: bool,\n@@ -537,6 +540,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(any(stage0, target_has_atomic = \"cas\"))]\n     pub fn fetch_and(&self, val: bool, order: Ordering) -> bool {\n         unsafe { atomic_and(self.v.get(), val as u8, order) != 0 }\n     }\n@@ -568,6 +572,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(any(stage0, target_has_atomic = \"cas\"))]\n     pub fn fetch_nand(&self, val: bool, order: Ordering) -> bool {\n         // We can't use atomic_nand here because it can result in a bool with\n         // an invalid value. This happens because the atomic operation is done\n@@ -610,6 +615,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(any(stage0, target_has_atomic = \"cas\"))]\n     pub fn fetch_or(&self, val: bool, order: Ordering) -> bool {\n         unsafe { atomic_or(self.v.get(), val as u8, order) != 0 }\n     }\n@@ -640,6 +646,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(any(stage0, target_has_atomic = \"cas\"))]\n     pub fn fetch_xor(&self, val: bool, order: Ordering) -> bool {\n         unsafe { atomic_xor(self.v.get(), val as u8, order) != 0 }\n     }\n@@ -786,6 +793,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(any(stage0, target_has_atomic = \"cas\"))]\n     pub fn swap(&self, ptr: *mut T, order: Ordering) -> *mut T {\n         unsafe { atomic_swap(self.p.get() as *mut usize, ptr as usize, order) as *mut T }\n     }\n@@ -815,6 +823,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(any(stage0, target_has_atomic = \"cas\"))]\n     pub fn compare_and_swap(&self, current: *mut T, new: *mut T, order: Ordering) -> *mut T {\n         match self.compare_exchange(current, new, order, strongest_failure_ordering(order)) {\n             Ok(x) => x,\n@@ -853,6 +862,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\")]\n+    #[cfg(any(stage0, target_has_atomic = \"cas\"))]\n     pub fn compare_exchange(&self,\n                             current: *mut T,\n                             new: *mut T,\n@@ -1138,6 +1148,7 @@ assert_eq!(some_var.swap(10, Ordering::Relaxed), 5);\n ```\"),\n                 #[inline]\n                 #[$stable]\n+                #[cfg(any(stage0, target_has_atomic = \"cas\"))]\n                 pub fn swap(&self, val: $int_type, order: Ordering) -> $int_type {\n                     unsafe { atomic_swap(self.v.get(), val, order) }\n                 }\n@@ -1170,6 +1181,7 @@ assert_eq!(some_var.load(Ordering::Relaxed), 10);\n ```\"),\n                 #[inline]\n                 #[$stable]\n+                #[cfg(any(stage0, target_has_atomic = \"cas\"))]\n                 pub fn compare_and_swap(&self,\n                                         current: $int_type,\n                                         new: $int_type,\n@@ -1223,6 +1235,7 @@ assert_eq!(some_var.load(Ordering::Relaxed), 10);\n ```\"),\n                 #[inline]\n                 #[$stable_cxchg]\n+                #[cfg(any(stage0, target_has_atomic = \"cas\"))]\n                 pub fn compare_exchange(&self,\n                                         current: $int_type,\n                                         new: $int_type,\n@@ -1677,6 +1690,7 @@ atomic_int!{\n }\n \n #[inline]\n+#[cfg(any(stage0, target_has_atomic = \"cas\"))]\n fn strongest_failure_ordering(order: Ordering) -> Ordering {\n     match order {\n         Release => Relaxed,\n@@ -1713,6 +1727,7 @@ unsafe fn atomic_load<T>(dst: *const T, order: Ordering) -> T {\n }\n \n #[inline]\n+#[cfg(any(stage0, target_has_atomic = \"cas\"))]\n unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xchg_acq(dst, val),\n@@ -1751,6 +1766,7 @@ unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n+#[cfg(any(stage0, target_has_atomic = \"cas\"))]\n unsafe fn atomic_compare_exchange<T>(dst: *mut T,\n                                      old: T,\n                                      new: T,"}, {"sha": "3d7aaf1b2d8b5f23fb51afa55cdd1ceaccd83420", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=0072c95aff4dc2c41fb8ed012f984b450bfce846", "patch": "@@ -1369,6 +1369,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     let vendor = &sess.target.target.target_vendor;\n     let min_atomic_width = sess.target.target.min_atomic_width();\n     let max_atomic_width = sess.target.target.max_atomic_width();\n+    let atomic_cas = sess.target.target.options.atomic_cas;\n \n     let mut ret = HashSet::new();\n     // Target bindings.\n@@ -1408,6 +1409,9 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n             }\n         }\n     }\n+    if atomic_cas {\n+        ret.insert((Symbol::intern(\"target_has_atomic\"), Some(Symbol::intern(\"cas\"))));\n+    }\n     if sess.opts.debug_assertions {\n         ret.insert((Symbol::intern(\"debug_assertions\"), None));\n     }"}, {"sha": "19e353c6a942d67211d8e0c4e68af8cb6a7073ef", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=0072c95aff4dc2c41fb8ed012f984b450bfce846", "patch": "@@ -573,6 +573,9 @@ pub struct TargetOptions {\n     /// Don't use this field; instead use the `.max_atomic_width()` method.\n     pub max_atomic_width: Option<u64>,\n \n+    /// Whether the target supports atomic CAS operations natively\n+    pub atomic_cas: bool,\n+\n     /// Panic strategy: \"unwind\" or \"abort\"\n     pub panic_strategy: PanicStrategy,\n \n@@ -691,6 +694,7 @@ impl Default for TargetOptions {\n             no_integrated_as: false,\n             min_atomic_width: None,\n             max_atomic_width: None,\n+            atomic_cas: true,\n             panic_strategy: PanicStrategy::Unwind,\n             abi_blacklist: vec![],\n             crt_static_allows_dylibs: false,\n@@ -947,6 +951,7 @@ impl Target {\n         key!(no_integrated_as, bool);\n         key!(max_atomic_width, Option<u64>);\n         key!(min_atomic_width, Option<u64>);\n+        key!(atomic_cas, bool);\n         try!(key!(panic_strategy, PanicStrategy));\n         key!(crt_static_allows_dylibs, bool);\n         key!(crt_static_default, bool);\n@@ -1155,6 +1160,7 @@ impl ToJson for Target {\n         target_option_val!(no_integrated_as);\n         target_option_val!(min_atomic_width);\n         target_option_val!(max_atomic_width);\n+        target_option_val!(atomic_cas);\n         target_option_val!(panic_strategy);\n         target_option_val!(crt_static_allows_dylibs);\n         target_option_val!(crt_static_default);"}, {"sha": "3ac4c459c63841dcbff1eafea39f8c2e6c4e783b", "filename": "src/librustc_target/spec/msp430_none_elf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs?ref=0072c95aff4dc2c41fb8ed012f984b450bfce846", "patch": "@@ -34,9 +34,10 @@ pub fn target() -> TargetResult {\n             linker: Some(\"msp430-elf-gcc\".to_string()),\n             no_integrated_as: true,\n \n-            // There are no atomic instructions available in the MSP430\n+            // There are no atomic CAS instructions available in the MSP430\n             // instruction set\n-            max_atomic_width: Some(0),\n+            max_atomic_width: Some(16),\n+            atomic_cas: false,\n \n             // Because these devices have very little resources having an\n             // unwinder is too onerous so we default to \"abort\" because the"}, {"sha": "26812501814f535b863a24fbea689124de91ab27", "filename": "src/librustc_target/spec/thumbv6m_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs?ref=0072c95aff4dc2c41fb8ed012f984b450bfce846", "patch": "@@ -29,9 +29,9 @@ pub fn target() -> TargetResult {\n             // The ARMv6-M architecture doesn't support unaligned loads/stores so we disable them\n             // with +strict-align.\n             features: \"+strict-align\".to_string(),\n-            // There are no atomic instructions available in the instruction set of the ARMv6-M\n+            // There are no atomic CAS instructions available in the instruction set of the ARMv6-M\n             // architecture\n-            max_atomic_width: Some(0),\n+            atomic_cas: false,\n             .. super::thumb_base::opts()\n         }\n     })"}, {"sha": "c2eb4caea26358b4a66e03fac7653e2ae3eab9b8", "filename": "src/test/run-make-fulldeps/target-without-atomic-cas/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Ftest%2Frun-make-fulldeps%2Ftarget-without-atomic-cas%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0072c95aff4dc2c41fb8ed012f984b450bfce846/src%2Ftest%2Frun-make-fulldeps%2Ftarget-without-atomic-cas%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftarget-without-atomic-cas%2FMakefile?ref=0072c95aff4dc2c41fb8ed012f984b450bfce846", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+# The target used below doesn't support atomic CAS operations. Verify that's the case\n+all:\n+\t$(RUSTC) --print cfg --target thumbv6m-none-eabi | $(CGREP) -v 'target_has_atomic=\"cas\"'"}, {"sha": "c5f575ddf84c694c9e5ba8257a4ae88f2ecc7e31", "filename": "src/test/run-make-fulldeps/target-without-atomics/Makefile", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftest%2Frun-make-fulldeps%2Ftarget-without-atomics%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4d9fa2326e184314749ccf79203f5ecc35e6225c/src%2Ftest%2Frun-make-fulldeps%2Ftarget-without-atomics%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftarget-without-atomics%2FMakefile?ref=4d9fa2326e184314749ccf79203f5ecc35e6225c", "patch": "@@ -1,5 +0,0 @@\n--include ../tools.mk\n-\n-# The target used below doesn't support atomic operations. Verify that's the case\n-all:\n-\t$(RUSTC) --print cfg --target thumbv6m-none-eabi | $(CGREP) -v target_has_atomic"}]}