{"sha": "130fb243bd9e559fa2cb51037aa82a9433b360da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMGZiMjQzYmQ5ZTU1OWZhMmNiNTEwMzdhYTgyYTk0MzNiMzYwZGE=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-02-07T14:50:31Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-02-08T23:37:37Z"}, "message": "specialize slice::clone_from_slice() for T: Copy", "tree": {"sha": "d617e44b16970ebaaf9b4045bc4231ad12ce2088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d617e44b16970ebaaf9b4045bc4231ad12ce2088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/130fb243bd9e559fa2cb51037aa82a9433b360da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/130fb243bd9e559fa2cb51037aa82a9433b360da", "html_url": "https://github.com/rust-lang/rust/commit/130fb243bd9e559fa2cb51037aa82a9433b360da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/130fb243bd9e559fa2cb51037aa82a9433b360da/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43e1ea29c4e92dfa2ba716fc878984605897fb13", "url": "https://api.github.com/repos/rust-lang/rust/commits/43e1ea29c4e92dfa2ba716fc878984605897fb13", "html_url": "https://github.com/rust-lang/rust/commit/43e1ea29c4e92dfa2ba716fc878984605897fb13"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "cb914afe5be9fdbcb1a17fdf62b89d156e799a4c", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/130fb243bd9e559fa2cb51037aa82a9433b360da/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130fb243bd9e559fa2cb51037aa82a9433b360da/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=130fb243bd9e559fa2cb51037aa82a9433b360da", "patch": "@@ -2927,15 +2927,7 @@ impl<T> [T] {\n     where\n         T: Clone,\n     {\n-        assert!(self.len() == src.len(), \"destination and source slices have different lengths\");\n-        // NOTE: We need to explicitly slice them to the same length\n-        // for bounds checking to be elided, and the optimizer will\n-        // generate memcpy for simple cases (for example T = u8).\n-        let len = self.len();\n-        let src = &src[..len];\n-        for i in 0..len {\n-            self[i].clone_from(&src[i]);\n-        }\n+        self.spec_clone_from(src);\n     }\n \n     /// Copies all elements from `src` into `self`, using a memcpy.\n@@ -3440,6 +3432,36 @@ impl<T> [T] {\n     }\n }\n \n+trait CloneFromSpec<T> {\n+    fn spec_clone_from(&mut self, src: &[T]);\n+}\n+\n+impl<T> CloneFromSpec<T> for [T]\n+where\n+    T: Clone,\n+{\n+    default fn spec_clone_from(&mut self, src: &[T]) {\n+        assert!(self.len() == src.len(), \"destination and source slices have different lengths\");\n+        // NOTE: We need to explicitly slice them to the same length\n+        // to make it easier for the optimizer to elide bounds checking.\n+        // But since it can't be relied on we also have an explicit specialization for T: Copy.\n+        let len = self.len();\n+        let src = &src[..len];\n+        for i in 0..len {\n+            self[i].clone_from(&src[i]);\n+        }\n+    }\n+}\n+\n+impl<T> CloneFromSpec<T> for [T]\n+where\n+    T: Copy,\n+{\n+    fn spec_clone_from(&mut self, src: &[T]) {\n+        self.copy_from_slice(src);\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for &[T] {\n     /// Creates an empty slice."}]}