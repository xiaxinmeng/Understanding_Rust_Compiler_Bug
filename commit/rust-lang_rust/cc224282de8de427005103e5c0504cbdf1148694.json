{"sha": "cc224282de8de427005103e5c0504cbdf1148694", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMjI0MjgyZGU4ZGU0MjcwMDUxMDNlNWMwNTA0Y2JkZjExNDg2OTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-28T09:40:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-28T09:40:05Z"}, "message": "Auto merge of #52802 - kennytm:rollup, r=kennytm\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #52702 (Suggest fix when encountering different mutability from impl to trait)\n - #52703 (Improve a few vectors - calculate capacity or build from iterators)\n - #52740 (Suggest underscore when using dashes in crate namet push fork)\n - #52759 (Impl Send & Sync for JoinHandle)\n - #52760 (rustc_metadata: test loading atoi instead of cos)\n - #52763 (Omit the vendor component in Fuchsia triple)\n - #52765 (Remove unused \"-Zenable_nonzeroing_move_hints\" flag)\n - #52769 (Incorporate a stray test)\n - #52777 (Fix doc comment for 'ptr::copy_to' method)\n - #52779 (revert accidental atty downgrade)\n - #52781 (Use a slice where a vector is not necessary)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9061d4e1ab49458fe2ab7c56c3e94ba8d650b6f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9061d4e1ab49458fe2ab7c56c3e94ba8d650b6f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc224282de8de427005103e5c0504cbdf1148694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc224282de8de427005103e5c0504cbdf1148694", "html_url": "https://github.com/rust-lang/rust/commit/cc224282de8de427005103e5c0504cbdf1148694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc224282de8de427005103e5c0504cbdf1148694/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05607476521732c5c71bc063c8be5056aa573b15", "url": "https://api.github.com/repos/rust-lang/rust/commits/05607476521732c5c71bc063c8be5056aa573b15", "html_url": "https://github.com/rust-lang/rust/commit/05607476521732c5c71bc063c8be5056aa573b15"}, {"sha": "59f8422a17c136582aeecf0c975deb6896df3595", "url": "https://api.github.com/repos/rust-lang/rust/commits/59f8422a17c136582aeecf0c975deb6896df3595", "html_url": "https://github.com/rust-lang/rust/commit/59f8422a17c136582aeecf0c975deb6896df3595"}], "stats": {"total": 298, "additions": 185, "deletions": 113}, "files": [{"sha": "8594e4ff1306d4c3f436b09ba58589eafce4430a", "filename": "src/Cargo.lock", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -87,7 +87,7 @@ dependencies = [\n \n [[package]]\n name = \"atty\"\n-version = \"0.2.10\"\n+version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -187,7 +187,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"cargo\"\n version = \"0.30.0\"\n dependencies = [\n- \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core-foundation 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -303,7 +303,7 @@ version = \"2.32.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"textwrap 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -622,7 +622,7 @@ name = \"env_logger\"\n version = \"0.5.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"humantime 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1844,7 +1844,7 @@ name = \"rustc-ap-rustc_errors\"\n version = \"182.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-rustc_data_structures 182.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-serialize 182.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-syntax_pos 182.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2097,7 +2097,7 @@ dependencies = [\n name = \"rustc_errors\"\n version = \"0.0.0\"\n dependencies = [\n- \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax_pos 0.0.0\",\n@@ -3056,7 +3056,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n \"checksum arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1e964f9e24d588183fcb43503abda40d288c8657dfc27311516ce2f05675aef\"\n \"checksum assert_cli 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"98589b0e465a6c510d95fceebd365bb79bedece7f6e18a480897f2015f85ec51\"\n-\"checksum atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fc4a1aa4c24c0718a250f0681885c1af91419d242f29eb8f2ab28502d80dbd1\"\n+\"checksum atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652\"\n \"checksum backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89a47830402e9981c5c41223151efcced65a0510c13097c769cede7efb34782a\"\n \"checksum backtrace-sys 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bff67d0c06556c0b8e6b5f090f0eac52d950d9dfd1d35ba04e4ca3543eaf6a7e\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\""}, {"sha": "7adb32efa1d414ef8daa1f1030fd7d92bcd51f24", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -34,21 +34,21 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV \\\n-    AR_x86_64_unknown_fuchsia=x86_64-unknown-fuchsia-ar \\\n-    CC_x86_64_unknown_fuchsia=x86_64-unknown-fuchsia-clang \\\n-    CXX_x86_64_unknown_fuchsia=x86_64-unknown-fuchsia-clang++ \\\n-    AR_aarch64_unknown_fuchsia=aarch64-unknown-fuchsia-ar \\\n-    CC_aarch64_unknown_fuchsia=aarch64-unknown-fuchsia-clang \\\n-    CXX_aarch64_unknown_fuchsia=aarch64-unknown-fuchsia-clang++ \\\n+    AR_x86_64_fuchsia=x86_64-fuchsia-ar \\\n+    CC_x86_64_fuchsia=x86_64-fuchsia-clang \\\n+    CXX_x86_64_fuchsia=x86_64-fuchsia-clang++ \\\n+    AR_aarch64_fuchsia=aarch64-fuchsia-ar \\\n+    CC_aarch64_fuchsia=aarch64-fuchsia-clang \\\n+    CXX_aarch64_fuchsia=aarch64-fuchsia-clang++ \\\n     AR_sparcv9_sun_solaris=sparcv9-sun-solaris2.10-ar \\\n     CC_sparcv9_sun_solaris=sparcv9-sun-solaris2.10-gcc \\\n     CXX_sparcv9_sun_solaris=sparcv9-sun-solaris2.10-g++ \\\n     AR_x86_64_sun_solaris=x86_64-sun-solaris2.10-ar \\\n     CC_x86_64_sun_solaris=x86_64-sun-solaris2.10-gcc \\\n     CXX_x86_64_sun_solaris=x86_64-sun-solaris2.10-g++\n \n-ENV TARGETS=x86_64-unknown-fuchsia\n-ENV TARGETS=$TARGETS,aarch64-unknown-fuchsia\n+ENV TARGETS=x86_64-fuchsia\n+ENV TARGETS=$TARGETS,aarch64-fuchsia\n ENV TARGETS=$TARGETS,sparcv9-sun-solaris\n ENV TARGETS=$TARGETS,wasm32-unknown-unknown\n ENV TARGETS=$TARGETS,x86_64-sun-solaris"}, {"sha": "ec19f7c4f45d972aaa5dac84c5f11da455ad7c17", "filename": "src/ci/docker/dist-various-2/build-fuchsia-toolchain.sh", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-fuchsia-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-fuchsia-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-fuchsia-toolchain.sh?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -39,7 +39,7 @@ build() {\n   esac\n \n   hide_output make -j$(getconf _NPROCESSORS_ONLN) $tgt\n-  dst=/usr/local/${arch}-unknown-fuchsia\n+  dst=/usr/local/${arch}-fuchsia\n   mkdir -p $dst\n   cp -a build-${tgt}/sysroot/include $dst/\n   cp -a build-${tgt}/sysroot/lib $dst/\n@@ -55,11 +55,11 @@ rm -rf zircon\n \n for arch in x86_64 aarch64; do\n   for tool in clang clang++; do\n-    cat >/usr/local/bin/${arch}-unknown-fuchsia-${tool} <<EOF\n+    cat >/usr/local/bin/${arch}-fuchsia-${tool} <<EOF\n #!/bin/sh\n-${tool} --target=${arch}-unknown-fuchsia --sysroot=/usr/local/${arch}-unknown-fuchsia \"\\$@\"\n+${tool} --target=${arch}-fuchsia --sysroot=/usr/local/${arch}-fuchsia \"\\$@\"\n EOF\n-    chmod +x /usr/local/bin/${arch}-unknown-fuchsia-${tool}\n+    chmod +x /usr/local/bin/${arch}-fuchsia-${tool}\n   done\n-  ln -s /usr/local/bin/llvm-ar /usr/local/bin/${arch}-unknown-fuchsia-ar\n+  ln -s /usr/local/bin/llvm-ar /usr/local/bin/${arch}-fuchsia-ar\n done"}, {"sha": "618aff963f22dd59bc8d549bd4fc585ecd4d8847", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -24,6 +24,7 @@\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(exact_chunks)]\n+#![feature(repeat_generic_slice)]\n \n extern crate alloc_system;\n extern crate core;"}, {"sha": "df5e18a9a184ecc60a9afa90c19cf4a508109d28", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -1529,3 +1529,14 @@ fn panic_safe() {\n         }\n     }\n }\n+\n+#[test]\n+fn repeat_generic_slice() {\n+    assert_eq!([1, 2].repeat(2), vec![1, 2, 1, 2]);\n+    assert_eq!([1, 2, 3, 4].repeat(0), vec![]);\n+    assert_eq!([1, 2, 3, 4].repeat(1), vec![1, 2, 3, 4]);\n+    assert_eq!(\n+        [1, 2, 3, 4].repeat(3),\n+        vec![1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n+    );\n+}"}, {"sha": "fe5914c72e1ac27c3760e64c26b6ec4824e4524b", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -1162,8 +1162,8 @@ impl<T: ?Sized> *const T {\n     ///\n     /// Care must be taken with the ownership of `self` and `dest`.\n     /// This method semantically moves the values of `self` into `dest`.\n-    /// However it does not drop the contents of `self`, or prevent the contents\n-    /// of `dest` from being dropped or used.\n+    /// However it does not drop the contents of `dest`, or prevent the contents\n+    /// of `self` from being dropped or used.\n     ///\n     /// # Examples\n     ///"}, {"sha": "7e2c5d03d6b2430d9cc2017d02531a0644a469da", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -746,7 +746,7 @@ impl<'a> LoweringContext<'a> {\n     // This is used to track which lifetimes have already been defined, and\n     // which are new in-band lifetimes that need to have a definition created\n     // for them.\n-    fn with_in_scope_lifetime_defs<T, F>(&mut self, params: &Vec<GenericParam>, f: F) -> T\n+    fn with_in_scope_lifetime_defs<T, F>(&mut self, params: &[GenericParam], f: F) -> T\n     where\n         F: FnOnce(&mut LoweringContext) -> T,\n     {\n@@ -2237,7 +2237,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_generic_params(\n         &mut self,\n-        params: &Vec<GenericParam>,\n+        params: &[GenericParam],\n         add_bounds: &NodeMap<Vec<GenericBound>>,\n         mut itctx: ImplTraitContext,\n     ) -> hir::HirVec<hir::GenericParam> {"}, {"sha": "a17c160c4d03e5340051d6597dd69ab1a7ed59cf", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n               .collect();\n \n             // Try to map those to something more useful\n-            let mut missing_items = vec![];\n+            let mut missing_items = Vec::with_capacity(missing.len());\n \n             for local_id in missing {\n                 let hir_id = HirId {"}, {"sha": "05361b6564170dff4f501217eb13baf8384bc164", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -396,7 +396,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for Span {\n pub fn hash_stable_trait_impls<'a, 'gcx, W, R>(\n     hcx: &mut StableHashingContext<'a>,\n     hasher: &mut StableHasher<W>,\n-    blanket_impls: &Vec<DefId>,\n+    blanket_impls: &[DefId],\n     non_blanket_impls: &HashMap<fast_reject::SimplifiedType, Vec<DefId>, R>)\n     where W: StableHasherResult,\n           R: std_hash::BuildHasher,"}, {"sha": "b8991a0366a61d0672e3ff214bcfa682a8b24b72", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -505,11 +505,7 @@ where\n     }\n \n     fn recursive_type_bound(&self, ty: Ty<'tcx>) -> VerifyBound<'tcx> {\n-        let mut bounds = vec![];\n-\n-        for subty in ty.walk_shallow() {\n-            bounds.push(self.type_bound(subty));\n-        }\n+        let mut bounds = ty.walk_shallow().map(|subty| self.type_bound(subty)).collect::<Vec<_>>();\n \n         let mut regions = ty.regions();\n         regions.retain(|r| !r.is_late_bound()); // ignore late-bound regions"}, {"sha": "14cfaa8153377d76f1adbdcc6c5acac35ffc2a66", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -219,7 +219,7 @@ impl LintStore {\n             }\n         }\n \n-        let mut future_incompatible = vec![];\n+        let mut future_incompatible = Vec::with_capacity(lints.len());\n         for lint in lints {\n             future_incompatible.push(lint.id);\n             self.future_incompatible.insert(lint.id, lint);"}, {"sha": "9fbf4e7c6a0f4fb965ded3488bf3a840aea73564", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -1247,8 +1247,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"for every macro invocation, print its name and arguments\"),\n     debug_macros: bool = (false, parse_bool, [TRACKED],\n           \"emit line numbers debug info inside macros\"),\n-    enable_nonzeroing_move_hints: bool = (false, parse_bool, [TRACKED],\n-          \"force nonzeroing move optimization on\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n           \"don't clear the hygiene data after analysis\"),\n     keep_ast: bool = (false, parse_bool, [UNTRACKED],\n@@ -3168,10 +3166,6 @@ mod tests {\n         opts.debugging_opts.force_overflow_checks = Some(true);\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n-        opts = reference.clone();\n-        opts.debugging_opts.enable_nonzeroing_move_hints = true;\n-        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n         opts = reference.clone();\n         opts.debugging_opts.show_span = Some(String::from(\"abc\"));\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "7b8bbbf4a10e061eb83becc03886f980e460ff5f", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -624,9 +624,6 @@ impl Session {\n     pub fn unstable_options(&self) -> bool {\n         self.opts.debugging_opts.unstable_options\n     }\n-    pub fn nonzeroing_move_hints(&self) -> bool {\n-        self.opts.debugging_opts.enable_nonzeroing_move_hints\n-    }\n     pub fn overflow_checks(&self) -> bool {\n         self.opts\n             .cg"}, {"sha": "5f8a2208bb04001f07f33dc235ea37614e19505c", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -48,7 +48,7 @@ use syntax_pos::{DUMMY_SP, Span};\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn report_fulfillment_errors(&self,\n-                                     errors: &Vec<FulfillmentError<'tcx>>,\n+                                     errors: &[FulfillmentError<'tcx>],\n                                      body_id: Option<hir::BodyId>,\n                                      fallback_has_occurred: bool) {\n         #[derive(Debug)]\n@@ -1015,7 +1015,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ) -> DiagnosticBuilder<'tcx> {\n         let kind = if is_closure { \"closure\" } else { \"function\" };\n \n-        let args_str = |arguments: &Vec<ArgKind>, other: &Vec<ArgKind>| {\n+        let args_str = |arguments: &[ArgKind], other: &[ArgKind]| {\n             let arg_length = arguments.len();\n             let distinct = match &other[..] {\n                 &[ArgKind::Tuple(..)] => true,"}, {"sha": "aa4f63675d7341dbab16834fc61ecf64c88fc3f5", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -98,13 +98,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn astconv_object_safety_violations(self, trait_def_id: DefId)\n                                             -> Vec<ObjectSafetyViolation>\n     {\n-        let mut violations = vec![];\n-\n-        for def_id in traits::supertrait_def_ids(self, trait_def_id) {\n-            if self.predicates_reference_self(def_id, true) {\n-                violations.push(ObjectSafetyViolation::SupertraitSelf);\n-            }\n-        }\n+        let violations = traits::supertrait_def_ids(self, trait_def_id)\n+            .filter(|&def_id| self.predicates_reference_self(def_id, true))\n+            .map(|_| ObjectSafetyViolation::SupertraitSelf)\n+            .collect();\n \n         debug!(\"astconv_object_safety_violations(trait_def_id={:?}) = {:?}\",\n                trait_def_id,"}, {"sha": "b217e6a856471bea7389271c13c1e9d755ba3b17", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -68,7 +68,7 @@ pub struct GroupedMoveErrors<'tcx> {\n     move_to_places: Vec<MovePlace<'tcx>>\n }\n \n-fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &Vec<MoveError<'tcx>>) {\n+fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &[MoveError<'tcx>]) {\n     let grouped_errors = group_errors_with_same_origin(errors);\n     for error in &grouped_errors {\n         let mut err = report_cannot_move_out_of(bccx, error.move_from.clone());\n@@ -103,7 +103,7 @@ fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &Vec<Move\n     }\n }\n \n-fn group_errors_with_same_origin<'tcx>(errors: &Vec<MoveError<'tcx>>)\n+fn group_errors_with_same_origin<'tcx>(errors: &[MoveError<'tcx>])\n                                        -> Vec<GroupedMoveErrors<'tcx>> {\n     let mut grouped_errors = Vec::new();\n     for error in errors {"}, {"sha": "13f0c90e8855e7efd5d20c5e8a4a27da47af6433", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -40,6 +40,7 @@ use std::env;\n use std::fmt;\n use std::fs;\n use std::io;\n+use std::iter;\n use std::path::{Path, PathBuf};\n use std::process::{Output, Stdio};\n use std::str;\n@@ -885,9 +886,9 @@ fn exec_linker(sess: &Session, cmd: &mut Command, out_filename: &Path, tmpdir: &\n     }\n     let file = tmpdir.join(\"linker-arguments\");\n     let bytes = if sess.target.target.options.is_like_msvc {\n-        let mut out = vec![];\n+        let mut out = Vec::with_capacity((1 + args.len()) * 2);\n         // start the stream with a UTF-16 BOM\n-        for c in vec![0xFEFF].into_iter().chain(args.encode_utf16()) {\n+        for c in iter::once(0xFEFF).chain(args.encode_utf16()) {\n             // encode in little endian\n             out.push(c as u8);\n             out.push((c >> 8) as u8);"}, {"sha": "1592722a0b2132397afaab2c8be94517eb3ea979", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -1395,7 +1395,7 @@ fn generated_output_paths(\n \n // Runs `f` on every output file path and returns the first non-None result, or None if `f`\n // returns None for every file path.\n-fn check_output<F, T>(output_paths: &Vec<PathBuf>, f: F) -> Option<T>\n+fn check_output<F, T>(output_paths: &[PathBuf], f: F) -> Option<T>\n where\n     F: Fn(&PathBuf) -> Option<T>,\n {\n@@ -1407,7 +1407,7 @@ where\n     None\n }\n \n-pub fn output_contains_path(output_paths: &Vec<PathBuf>, input_path: &PathBuf) -> bool {\n+pub fn output_contains_path(output_paths: &[PathBuf], input_path: &PathBuf) -> bool {\n     let input_path = input_path.canonicalize().ok();\n     if input_path.is_none() {\n         return false;\n@@ -1422,7 +1422,7 @@ pub fn output_contains_path(output_paths: &Vec<PathBuf>, input_path: &PathBuf) -\n     check_output(output_paths, check).is_some()\n }\n \n-pub fn output_conflicts_with_dir(output_paths: &Vec<PathBuf>) -> Option<PathBuf> {\n+pub fn output_conflicts_with_dir(output_paths: &[PathBuf]) -> Option<PathBuf> {\n     let check = |output_path: &PathBuf| {\n         if output_path.is_dir() {\n             Some(output_path.clone())\n@@ -1433,7 +1433,7 @@ pub fn output_conflicts_with_dir(output_paths: &Vec<PathBuf>) -> Option<PathBuf>\n     check_output(output_paths, check)\n }\n \n-fn write_out_deps(sess: &Session, outputs: &OutputFilenames, out_filenames: &Vec<PathBuf>) {\n+fn write_out_deps(sess: &Session, outputs: &OutputFilenames, out_filenames: &[PathBuf]) {\n     // Write out dependency rules to the dep-info file if requested\n     if !sess.opts.output_types.contains_key(&OutputType::DepInfo) {\n         return;"}, {"sha": "2ec85e1c27f1d7c12db973183ada1ff7e0fd65e0", "filename": "src/librustc_driver/profile/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Fmod.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -62,7 +62,7 @@ struct StackFrame {\n     pub traces:   Vec<trace::Rec>,\n }\n \n-fn total_duration(traces: &Vec<trace::Rec>) -> Duration {\n+fn total_duration(traces: &[trace::Rec]) -> Duration {\n     let mut sum : Duration = Duration::new(0,0);\n     for t in traces.iter() { sum += t.dur_total; }\n     return sum"}, {"sha": "ecd2f4d916d15ff1844a8c49ae07564fd5248aa2", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -107,7 +107,7 @@ fn html_of_fraction(frac: f64) -> (String, String) {\n     else { (format!(\"< 0.1%\", ), css) }\n }\n \n-fn total_duration(traces: &Vec<Rec>) -> Duration {\n+fn total_duration(traces: &[Rec]) -> Duration {\n     let mut sum : Duration = Duration::new(0,0);\n     for t in traces.iter() {\n         sum += t.dur_total;\n@@ -123,7 +123,7 @@ fn duration_div(nom: Duration, den: Duration) -> f64 {\n     to_nanos(nom) as f64 / to_nanos(den) as f64\n }\n \n-fn write_traces_rec(file: &mut File, traces: &Vec<Rec>, total: Duration, depth: usize) {\n+fn write_traces_rec(file: &mut File, traces: &[Rec], total: Duration, depth: usize) {\n     for t in traces {\n         let (eff_text, eff_css_classes) = html_of_effect(&t.effect);\n         let (dur_text, dur_css_classes) = html_of_duration(&t.start, &t.dur_total);\n@@ -149,7 +149,7 @@ fn write_traces_rec(file: &mut File, traces: &Vec<Rec>, total: Duration, depth:\n     }\n }\n \n-fn compute_counts_rec(counts: &mut HashMap<String,QueryMetric>, traces: &Vec<Rec>) {\n+fn compute_counts_rec(counts: &mut HashMap<String,QueryMetric>, traces: &[Rec]) {\n     for t in traces.iter() {\n         match t.effect {\n             Effect::TimeBegin(ref msg) => {\n@@ -218,7 +218,7 @@ pub fn write_counts(count_file: &mut File, counts: &mut HashMap<String,QueryMetr\n     }\n }\n \n-pub fn write_traces(html_file: &mut File, counts_file: &mut File, traces: &Vec<Rec>) {\n+pub fn write_traces(html_file: &mut File, counts_file: &mut File, traces: &[Rec]) {\n     let capacity = traces.iter().fold(0, |acc, t| acc + 1 + t.extent.len());\n     let mut counts : HashMap<String, QueryMetric> = HashMap::with_capacity(capacity);\n     compute_counts_rec(&mut counts, traces);"}, {"sha": "f54626d6a202427840aa8c811d3a2dbd7fcc2bc2", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -749,7 +749,7 @@ impl EmitterWriter {\n         max\n     }\n \n-    fn get_max_line_num(&mut self, span: &MultiSpan, children: &Vec<SubDiagnostic>) -> usize {\n+    fn get_max_line_num(&mut self, span: &MultiSpan, children: &[SubDiagnostic]) -> usize {\n         let mut max = 0;\n \n         let primary = self.get_multispan_max_line_num(span);\n@@ -954,7 +954,7 @@ impl EmitterWriter {\n \n     fn emit_message_default(&mut self,\n                             msp: &MultiSpan,\n-                            msg: &Vec<(String, Style)>,\n+                            msg: &[(String, Style)],\n                             code: &Option<DiagnosticId>,\n                             level: &Level,\n                             max_line_num_len: usize,\n@@ -1317,10 +1317,10 @@ impl EmitterWriter {\n \n     fn emit_messages_default(&mut self,\n                              level: &Level,\n-                             message: &Vec<(String, Style)>,\n+                             message: &[(String, Style)],\n                              code: &Option<DiagnosticId>,\n                              span: &MultiSpan,\n-                             children: &Vec<SubDiagnostic>,\n+                             children: &[SubDiagnostic],\n                              suggestions: &[CodeSuggestion]) {\n         let max_line_num_len = if self.ui_testing {\n             ANONYMIZED_LINE_NUM.len()\n@@ -1433,7 +1433,7 @@ fn overlaps(a1: &Annotation, a2: &Annotation, padding: usize) -> bool {\n     num_overlap(a1.start_col, a1.end_col + padding, a2.start_col, a2.end_col, false)\n }\n \n-fn emit_to_destination(rendered_buffer: &Vec<Vec<StyledString>>,\n+fn emit_to_destination(rendered_buffer: &[Vec<StyledString>],\n                        lvl: &Level,\n                        dst: &mut Destination,\n                        short_message: bool)"}, {"sha": "182a071277ece97d193ec156af5951745a649c3d", "filename": "src/librustc_metadata/dynamic_lib.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdynamic_lib.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -90,30 +90,29 @@ mod tests {\n     use std::mem;\n \n     #[test]\n-    fn test_loading_cosine() {\n+    fn test_loading_atoi() {\n         if cfg!(windows) {\n             return\n         }\n \n-        // The math library does not need to be loaded since it is already\n-        // statically linked in\n-        let libm = match DynamicLibrary::open(None) {\n+        // The C library does not need to be loaded since it is already linked in\n+        let lib = match DynamicLibrary::open(None) {\n             Err(error) => panic!(\"Could not load self as module: {}\", error),\n-            Ok(libm) => libm\n+            Ok(lib) => lib\n         };\n \n-        let cosine: extern fn(libc::c_double) -> libc::c_double = unsafe {\n-            match libm.symbol(\"cos\") {\n-                Err(error) => panic!(\"Could not load function cos: {}\", error),\n-                Ok(cosine) => mem::transmute::<*mut u8, _>(cosine)\n+        let atoi: extern fn(*const libc::c_char) -> libc::c_int = unsafe {\n+            match lib.symbol(\"atoi\") {\n+                Err(error) => panic!(\"Could not load function atoi: {}\", error),\n+                Ok(atoi) => mem::transmute::<*mut u8, _>(atoi)\n             }\n         };\n \n-        let argument = 0.0;\n-        let expected_result = 1.0;\n-        let result = cosine(argument);\n+        let argument = CString::new(\"1383428980\").unwrap();\n+        let expected_result = 0x52757374;\n+        let result = atoi(argument.as_ptr());\n         if result != expected_result {\n-            panic!(\"cos({}) != {} but equaled {} instead\", argument,\n+            panic!(\"atoi({:?}) != {} but equaled {} instead\", argument,\n                    expected_result, result)\n         }\n     }"}, {"sha": "8eb052f88e124c5902c02f90953488a840d9349d", "filename": "src/librustc_mir/borrow_check/nll/facts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -120,7 +120,7 @@ struct FactWriter<'w> {\n impl<'w> FactWriter<'w> {\n     fn write_facts_to_path<T>(\n         &self,\n-        rows: &Vec<T>,\n+        rows: &[T],\n         file_name: &str,\n     ) -> Result<(), Box<dyn Error>>\n     where"}, {"sha": "d750c1f47a662f5deb968d4289755e4d96f1f2d3", "filename": "src/librustc_mir/interpret/terminator/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         self.eval_fn_call(\n             instance,\n             Some((Place::undef(), target)),\n-            &vec![valty],\n+            &[valty],\n             span,\n             fn_sig,\n         )"}, {"sha": "7a8c35e7b96f5fec18117b675fa9ed8075fc5b6e", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -222,7 +222,7 @@ impl RestoreSubsliceArrayMoveOut {\n     // indices is an integer interval. If all checks pass do the replacent.\n     // items are Vec<Option<LocalUse, index in source array, source place for init local>>\n     fn check_and_patch<'tcx>(candidate: Location,\n-                             items: &Vec<Option<(&LocalUse, u32, &Place<'tcx>)>>,\n+                             items: &[Option<(&LocalUse, u32, &Place<'tcx>)>],\n                              opt_size: Option<u64>,\n                              patch: &mut MirPatch<'tcx>,\n                              dst_place: &Place<'tcx>) {"}, {"sha": "c6bad9e1980fb8b9627b3137da0409d57f376ff9", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -147,7 +147,7 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_late_bound_lifetime_defs(&self, params: &Vec<GenericParam>) {\n+    fn check_late_bound_lifetime_defs(&self, params: &[GenericParam]) {\n         // Check only lifetime parameters are present and that the lifetime\n         // parameters that are present have no bounds.\n         let non_lt_param_spans: Vec<_> = params.iter().filter_map(|param| match param.kind {"}, {"sha": "29b6f958cc119c64719964bafcf04f50b569ec55", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -783,7 +783,7 @@ impl<'a> Resolver<'a> {\n                 }\n             };\n             let ident = Ident::new(Symbol::intern(name), span);\n-            self.lookup_typo_candidate(&vec![ident], MacroNS, is_macro, span)\n+            self.lookup_typo_candidate(&[ident], MacroNS, is_macro, span)\n         });\n \n         if let Some(suggestion) = suggestion {"}, {"sha": "28baf6f66e7a1dab79f5c6206dbc98bcf1a40753", "filename": "src/librustc_target/spec/aarch64_fuchsia.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_fuchsia.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -15,15 +15,15 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(128);\n \n     Ok(Target {\n-        llvm_target: \"aarch64-unknown-fuchsia\".to_string(),\n+        llvm_target: \"aarch64-fuchsia\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         target_os: \"fuchsia\".to_string(),\n         target_env: \"\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n+        target_vendor: \"\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),", "previous_filename": "src/librustc_target/spec/aarch64_unknown_fuchsia.rs"}, {"sha": "b593b83532614b4801a0f9ecc8755aafb36d0588", "filename": "src/librustc_target/spec/fuchsia_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -33,7 +33,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         target_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n-        has_rpath: true,\n+        has_rpath: false,\n         pre_link_args: args,\n         position_independent_executables: true,\n         has_elf_tls: true,"}, {"sha": "c5d21cdc46adb3fe589987b48a0cbe82ed358154", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -332,8 +332,8 @@ supported_targets! {\n     (\"x86_64-apple-darwin\", x86_64_apple_darwin),\n     (\"i686-apple-darwin\", i686_apple_darwin),\n \n-    (\"aarch64-unknown-fuchsia\", aarch64_unknown_fuchsia),\n-    (\"x86_64-unknown-fuchsia\", x86_64_unknown_fuchsia),\n+    (\"aarch64-fuchsia\", aarch64_fuchsia),\n+    (\"x86_64-fuchsia\", x86_64_fuchsia),\n \n     (\"x86_64-unknown-l4re-uclibc\", x86_64_unknown_l4re_uclibc),\n "}, {"sha": "e8fa179887c8762cad24244104a6476398f372c9", "filename": "src/librustc_target/spec/x86_64_fuchsia.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_target%2Fspec%2Fx86_64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_target%2Fspec%2Fx86_64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fuchsia.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -18,15 +18,15 @@ pub fn target() -> TargetResult {\n     base.stack_probes = true;\n \n     Ok(Target {\n-        llvm_target: \"x86_64-unknown-fuchsia\".to_string(),\n+        llvm_target: \"x86_64-fuchsia\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n         target_os: \"fuchsia\".to_string(),\n         target_env: \"\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n+        target_vendor: \"\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     })", "previous_filename": "src/librustc_target/spec/x86_64_unknown_fuchsia.rs"}, {"sha": "55aa38d942efb64abbcc12b699238be66d41ec17", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -319,6 +319,17 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                             E0053,\n                                             \"method `{}` has an incompatible type for trait\",\n                                             trait_m.ident);\n+            if let TypeError::Mutability = terr {\n+                if let Some(trait_err_span) = trait_err_span {\n+                    if let Ok(trait_err_str) = tcx.sess.codemap().span_to_snippet(trait_err_span) {\n+                        diag.span_suggestion(\n+                            impl_err_span,\n+                            \"consider change the type to match the mutability in trait\",\n+                            format!(\"{}\", trait_err_str),\n+                        );\n+                    }\n+                }\n+            }\n \n             infcx.note_type_err(&mut diag,\n                                 &cause,"}, {"sha": "81fef9bf83e400a8498df0b5d182da0a20de8001", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -2690,7 +2690,7 @@ fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter,\n     for it in &implementor.inner_impl().items {\n         if let clean::TypedefItem(ref tydef, _) = it.inner {\n             write!(w, \"<span class=\\\"where fmt-newline\\\">  \")?;\n-            assoc_type(w, it, &vec![], Some(&tydef.type_), AssocItemLink::Anchor(None))?;\n+            assoc_type(w, it, &[], Some(&tydef.type_), AssocItemLink::Anchor(None))?;\n             write!(w, \";</span>\")?;\n         }\n     }\n@@ -3040,7 +3040,7 @@ fn assoc_const(w: &mut fmt::Formatter,\n }\n \n fn assoc_type<W: fmt::Write>(w: &mut W, it: &clean::Item,\n-                             bounds: &Vec<clean::GenericBound>,\n+                             bounds: &[clean::GenericBound],\n                              default: Option<&clean::Type>,\n                              link: AssocItemLink) -> fmt::Result {\n     write!(w, \"type <a href='{}' class=\\\"type\\\">{}</a>\",\n@@ -3749,7 +3749,7 @@ fn spotlight_decl(decl: &clean::FnDecl) -> Result<String, fmt::Error> {\n                     for it in &impl_.items {\n                         if let clean::TypedefItem(ref tydef, _) = it.inner {\n                             out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n-                            assoc_type(&mut out, it, &vec![],\n+                            assoc_type(&mut out, it, &[],\n                                        Some(&tydef.type_),\n                                        AssocItemLink::GotoSource(t_did, &FxHashSet()))?;\n                             out.push_str(\";</span>\");"}, {"sha": "ae804ad409ee311fdbb73b7b582cd9b2176b1974", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -1276,6 +1276,11 @@ impl<T> JoinInner<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct JoinHandle<T>(JoinInner<T>);\n \n+#[stable(feature = \"joinhandle_impl_send_sync\", since = \"1.29.0\")]\n+unsafe impl<T> Send for JoinHandle<T> {}\n+#[stable(feature = \"joinhandle_impl_send_sync\", since = \"1.29.0\")]\n+unsafe impl<T> Sync for JoinHandle<T> {}\n+\n impl<T> JoinHandle<T> {\n     /// Extracts a handle to the underlying thread.\n     ///"}, {"sha": "56760546c50881e9f9df63e8b385629eb979c9f5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -6514,6 +6514,39 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    fn parse_crate_name_with_dashes(&mut self) -> PResult<'a, ast::Ident> {\n+        let error_msg = \"crate name using dashes are not valid in `extern crate` statements\";\n+        let suggestion_msg = \"if the original crate name uses dashes you need to use underscores \\\n+                              in the code\";\n+        let mut ident = self.parse_ident()?;\n+        let mut idents = vec![];\n+        let mut replacement = vec![];\n+        let mut fixed_crate_name = false;\n+        // Accept `extern crate name-like-this` for better diagnostics\n+        let dash = token::Token::BinOp(token::BinOpToken::Minus);\n+        if self.token == dash {  // Do not include `-` as part of the expected tokens list\n+            while self.eat(&dash) {\n+                fixed_crate_name = true;\n+                replacement.push((self.prev_span, \"_\".to_string()));\n+                idents.push(self.parse_ident()?);\n+            }\n+        }\n+        if fixed_crate_name {\n+            let fixed_name_sp = ident.span.to(idents.last().unwrap().span);\n+            let mut fixed_name = format!(\"{}\", ident.name);\n+            for part in idents {\n+                fixed_name.push_str(&format!(\"_{}\", part.name));\n+            }\n+            ident = Ident::from_str(&fixed_name).with_span_pos(fixed_name_sp);\n+\n+            let mut err = self.struct_span_err(fixed_name_sp, error_msg);\n+            err.span_label(fixed_name_sp, \"dash-separated idents are not valid\");\n+            err.multipart_suggestion(suggestion_msg, replacement);\n+            err.emit();\n+        }\n+        Ok(ident)\n+    }\n+\n     /// Parse extern crate links\n     ///\n     /// # Examples\n@@ -6525,7 +6558,8 @@ impl<'a> Parser<'a> {\n                                visibility: Visibility,\n                                attrs: Vec<Attribute>)\n                                -> PResult<'a, P<Item>> {\n-        let orig_name = self.parse_ident()?;\n+        // Accept `extern crate name-like-this` for better diagnostics\n+        let orig_name = self.parse_crate_name_with_dashes()?;\n         let (item_name, orig_name) = if let Some(rename) = self.parse_rename()? {\n             (rename, Some(orig_name.name))\n         } else {"}, {"sha": "0e9b0718b217ed7306f296689b84f215c66f100a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -3065,7 +3065,7 @@ impl<'a> State<'a> {\n                        unsafety: ast::Unsafety,\n                        decl: &ast::FnDecl,\n                        name: Option<ast::Ident>,\n-                       generic_params: &Vec<ast::GenericParam>)\n+                       generic_params: &[ast::GenericParam])\n                        -> io::Result<()> {\n         self.ibox(INDENT_UNIT)?;\n         if !generic_params.is_empty() {"}, {"sha": "734f76e499908b172899792e527b540d8877fde7", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -632,15 +632,14 @@ impl MultiSpan {\n     /// `SpanLabel` instances with empty labels.\n     pub fn span_labels(&self) -> Vec<SpanLabel> {\n         let is_primary = |span| self.primary_spans.contains(&span);\n-        let mut span_labels = vec![];\n \n-        for &(span, ref label) in &self.span_labels {\n-            span_labels.push(SpanLabel {\n+        let mut span_labels = self.span_labels.iter().map(|&(span, ref label)|\n+            SpanLabel {\n                 span,\n                 is_primary: is_primary(span),\n                 label: Some(label.clone())\n-            });\n-        }\n+            }\n+        ).collect::<Vec<_>>();\n \n         for &span in &self.primary_spans {\n             if !span_labels.iter().any(|sl| sl.span == span) {"}, {"sha": "70e1806a20b54acddbc58f1344367e3d7d1cd6b2", "filename": "src/test/ui/bad-crate-name.rs", "status": "renamed", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Ftest%2Fui%2Fbad-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Ftest%2Fui%2Fbad-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad-crate-name.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -8,12 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(repeat_generic_slice)]\n+extern crate krate-name-here;\n+//~^ ERROR crate name using dashes are not valid in `extern crate` statements\n+//~| ERROR can't find crate for `krate_name_here`\n \n-fn main() {\n-    assert_eq!([1, 2].repeat(2), vec![1, 2, 1, 2]);\n-    assert_eq!([1, 2, 3, 4].repeat(0), vec![]);\n-    assert_eq!([1, 2, 3, 4].repeat(1), vec![1, 2, 3, 4]);\n-    assert_eq!([1, 2, 3, 4].repeat(3),\n-               vec![1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n-}\n+fn main() {}", "previous_filename": "src/liballoc/repeat-generic-slice.rs"}, {"sha": "8348badeeeb175338fcb22ee4d2ef9c662267e18", "filename": "src/test/ui/bad-crate-name.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Ftest%2Fui%2Fbad-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Ftest%2Fui%2Fbad-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad-crate-name.stderr?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -0,0 +1,19 @@\n+error: crate name using dashes are not valid in `extern crate` statements\n+  --> $DIR/bad-crate-name.rs:11:14\n+   |\n+LL | extern crate krate-name-here;\n+   |              ^^^^^^^^^^^^^^^ dash-separated idents are not valid\n+help: if the original crate name uses dashes you need to use underscores in the code\n+   |\n+LL | extern crate krate_name_here;\n+   |                   ^    ^\n+\n+error[E0463]: can't find crate for `krate_name_here`\n+  --> $DIR/bad-crate-name.rs:11:1\n+   |\n+LL | extern crate krate-name-here;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't find crate\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0463`."}, {"sha": "f06d7360d85b09cdb5efe8deaedcf878e755c995", "filename": "src/test/ui/issue-13033.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Ftest%2Fui%2Fissue-13033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Ftest%2Fui%2Fissue-13033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13033.stderr?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -9,6 +9,10 @@ LL |     fn bar(&mut self, other: &Foo) {}\n    |\n    = note: expected type `fn(&mut Baz, &mut dyn Foo)`\n               found type `fn(&mut Baz, &dyn Foo)`\n+help: consider change the type to match the mutability in trait\n+   |\n+LL |     fn bar(&mut self, other: &mut Foo) {}\n+   |                              ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f707a600f29e34d989996198e46f123e74fcd614", "filename": "src/test/ui/mismatched_types/E0053.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -21,6 +21,10 @@ LL |     fn bar(&mut self) { }\n    |\n    = note: expected type `fn(&Bar)`\n               found type `fn(&mut Bar)`\n+help: consider change the type to match the mutability in trait\n+   |\n+LL |     fn bar(&self) { }\n+   |            ^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "631af21cac5ca893ffdbd862766d943bbcb3512e", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -21,6 +21,10 @@ LL |     fn bar(&mut self, bar: &Bar) { } //~ ERROR incompatible type\n    |\n    = note: expected type `fn(&mut Bar, &mut Bar)`\n               found type `fn(&mut Bar, &Bar)`\n+help: consider change the type to match the mutability in trait\n+   |\n+LL |     fn bar(&mut self, bar: &mut Bar) { } //~ ERROR incompatible type\n+   |                            ^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "83b2895e1d65d6ea866a090cca3202dbf9d7d8fc", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc224282de8de427005103e5c0504cbdf1148694/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc224282de8de427005103e5c0504cbdf1148694/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=cc224282de8de427005103e5c0504cbdf1148694", "patch": "@@ -46,9 +46,9 @@ static HOSTS: &'static [&'static str] = &[\n \n static TARGETS: &'static [&'static str] = &[\n     \"aarch64-apple-ios\",\n+    \"aarch64-fuchsia\",\n     \"aarch64-linux-android\",\n     \"aarch64-unknown-cloudabi\",\n-    \"aarch64-unknown-fuchsia\",\n     \"aarch64-unknown-linux-gnu\",\n     \"aarch64-unknown-linux-musl\",\n     \"arm-linux-androideabi\",\n@@ -101,14 +101,14 @@ static TARGETS: &'static [&'static str] = &[\n     \"wasm32-unknown-unknown\",\n     \"x86_64-apple-darwin\",\n     \"x86_64-apple-ios\",\n+    \"x86_64-fuchsia\",\n     \"x86_64-linux-android\",\n     \"x86_64-pc-windows-gnu\",\n     \"x86_64-pc-windows-msvc\",\n     \"x86_64-rumprun-netbsd\",\n     \"x86_64-sun-solaris\",\n     \"x86_64-unknown-cloudabi\",\n     \"x86_64-unknown-freebsd\",\n-    \"x86_64-unknown-fuchsia\",\n     \"x86_64-unknown-linux-gnu\",\n     \"x86_64-unknown-linux-gnux32\",\n     \"x86_64-unknown-linux-musl\","}]}