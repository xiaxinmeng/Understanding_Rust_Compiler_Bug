{"sha": "0876f59b975a67ce79b0d83750f0d153f119b790", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NzZmNTliOTc1YTY3Y2U3OWIwZDgzNzUwZjBkMTUzZjExOWI3OTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-02T01:31:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-02T01:31:03Z"}, "message": "Auto merge of #77832 - camelid:remove-manual-link-resolves, r=jyn514\n\nRemove many unnecessary manual link resolves from library\n\nNow that #76934 has merged, we can remove a lot of these! E.g, this is\nno longer necessary:\n\n    [`Vec<T>`]: Vec\n\ncc `@jyn514`", "tree": {"sha": "f2810d2dfb872feaf03f9312082dc4c9724954bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2810d2dfb872feaf03f9312082dc4c9724954bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0876f59b975a67ce79b0d83750f0d153f119b790", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0876f59b975a67ce79b0d83750f0d153f119b790", "html_url": "https://github.com/rust-lang/rust/commit/0876f59b975a67ce79b0d83750f0d153f119b790", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0876f59b975a67ce79b0d83750f0d153f119b790/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "417fe4706595db10380fe989e77db431293f3155", "url": "https://api.github.com/repos/rust-lang/rust/commits/417fe4706595db10380fe989e77db431293f3155", "html_url": "https://github.com/rust-lang/rust/commit/417fe4706595db10380fe989e77db431293f3155"}, {"sha": "0506789014f9aef9ffac7d7d1e22fa72c7b85ab7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0506789014f9aef9ffac7d7d1e22fa72c7b85ab7", "html_url": "https://github.com/rust-lang/rust/commit/0506789014f9aef9ffac7d7d1e22fa72c7b85ab7"}], "stats": {"total": 37, "additions": 0, "deletions": 37}, "files": [{"sha": "33b812ec59ff916f347ed01e91dec5cd1433b4be", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=0876f59b975a67ce79b0d83750f0d153f119b790", "patch": "@@ -126,9 +126,7 @@\n //!\n //! [ucg#198]: https://github.com/rust-lang/unsafe-code-guidelines/issues/198\n //! [dereferencing]: core::ops::Deref\n-//! [`Box<T>`]: Box\n //! [`Box::<T>::from_raw(value)`]: Box::from_raw\n-//! [`Box::<T>::into_raw`]: Box::into_raw\n //! [`Global`]: crate::alloc::Global\n //! [`Layout`]: crate::alloc::Layout\n //! [`Layout::for_value(&*value)`]: crate::alloc::Layout::for_value"}, {"sha": "70e0c7dba5eab43128ea97a75ac75ee6b5110048", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=0876f59b975a67ce79b0d83750f0d153f119b790", "patch": "@@ -451,8 +451,6 @@ impl str {\n \n     /// Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n     ///\n-    /// [`Box<str>`]: Box\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:"}, {"sha": "c9040cd0a1670af8954f37e7ae3e965b3708aea0", "filename": "library/core/src/borrow.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fcore%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fcore%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fborrow.rs?ref=0876f59b975a67ce79b0d83750f0d153f119b790", "patch": "@@ -40,7 +40,6 @@\n /// provide a reference to related type `T`, it is often better to use\n /// [`AsRef<T>`] as more types can safely implement it.\n ///\n-/// [`BorrowMut<T>`]: BorrowMut\n /// [`Box<T>`]: ../../std/boxed/struct.Box.html\n /// [`Mutex<T>`]: ../../std/sync/struct.Mutex.html\n /// [`Rc<T>`]: ../../std/rc/struct.Rc.html\n@@ -183,8 +182,6 @@ pub trait Borrow<Borrowed: ?Sized> {\n /// As a companion to [`Borrow<T>`] this trait allows a type to borrow as\n /// an underlying type by providing a mutable reference. See [`Borrow<T>`]\n /// for more information on borrowing as another type.\n-///\n-/// [`Borrow<T>`]: Borrow\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait BorrowMut<Borrowed: ?Sized>: Borrow<Borrowed> {\n     /// Mutably borrows from an owned value."}, {"sha": "041f40f2cbcf5ae30099309238bfe4a03afaa6c7", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=0876f59b975a67ce79b0d83750f0d153f119b790", "patch": "@@ -135,8 +135,6 @@ pub const fn identity<T>(x: T) -> T {\n /// Since both [`String`] and [`&str`] implement `AsRef<str>` we can accept both as input argument.\n ///\n /// [`&str`]: primitive@str\n-/// [`Option<T>`]: Option\n-/// [`Result<T, E>`]: Result\n /// [`Borrow`]: crate::borrow::Borrow\n /// [`Eq`]: crate::cmp::Eq\n /// [`Ord`]: crate::cmp::Ord\n@@ -169,9 +167,6 @@ pub trait AsRef<T: ?Sized> {\n /// **Note: This trait must not fail**. If the conversion can fail, use a\n /// dedicated method which returns an [`Option<T>`] or a [`Result<T, E>`].\n ///\n-/// [`Option<T>`]: Option\n-/// [`Result<T, E>`]: Result\n-///\n /// # Generic Implementations\n ///\n /// - `AsMut` auto-dereferences if the inner type is a mutable reference\n@@ -270,8 +265,6 @@ pub trait AsMut<T: ?Sized> {\n /// is_hello(s);\n /// ```\n ///\n-/// [`Option<T>`]: Option\n-/// [`Result<T, E>`]: Result\n /// [`String`]: ../../std/string/struct.String.html\n /// [`Vec`]: ../../std/vec/struct.Vec.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -359,8 +352,6 @@ pub trait Into<T>: Sized {\n /// }\n /// ```\n ///\n-/// [`Option<T>`]: Option\n-/// [`Result<T, E>`]: Result\n /// [`String`]: ../../std/string/struct.String.html\n /// [`from`]: From::from\n /// [book]: ../../book/ch09-00-error-handling.html"}, {"sha": "0023de65d2b3b2eec2ef2e10d7e19eddf087c374", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=0876f59b975a67ce79b0d83750f0d153f119b790", "patch": "@@ -805,8 +805,6 @@ pub trait Iterator {\n     /// assert_eq!(iter.next(), Some(5));\n     /// assert_eq!(iter.next(), None);\n     /// ```\n-    ///\n-    /// [`Option<T>`]: Option\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>"}, {"sha": "971ec5d9c8d6472cdd6a0d88952b65afdd23ea51", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=0876f59b975a67ce79b0d83750f0d153f119b790", "patch": "@@ -650,7 +650,6 @@ pub unsafe fn zeroed<T>() -> T {\n /// (Notice that the rules around uninitialized integers are not finalized yet, but\n /// until they are, it is advisable to avoid them.)\n ///\n-/// [`MaybeUninit<T>`]: MaybeUninit\n /// [uninit]: MaybeUninit::uninit\n /// [assume_init]: MaybeUninit::assume_init\n /// [inv]: MaybeUninit#initialization-invariant"}, {"sha": "0051c9eede070644a6be104e15628abf01c1d095", "filename": "library/core/src/option.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=0876f59b975a67ce79b0d83750f0d153f119b790", "patch": "@@ -512,7 +512,6 @@ impl<T> Option<T> {\n     /// result of a function call, it is recommended to use [`ok_or_else`], which is\n     /// lazily evaluated.\n     ///\n-    /// [`Result<T, E>`]: Result\n     /// [`Ok(v)`]: Ok\n     /// [`Err(err)`]: Err\n     /// [`Some(v)`]: Some\n@@ -539,7 +538,6 @@ impl<T> Option<T> {\n     /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to\n     /// [`Ok(v)`] and [`None`] to [`Err(err())`].\n     ///\n-    /// [`Result<T, E>`]: Result\n     /// [`Ok(v)`]: Ok\n     /// [`Err(err())`]: Err\n     /// [`Some(v)`]: Some"}, {"sha": "b2de0e16a17bbfb3423e89f8b77fec8e98e68a76", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=0876f59b975a67ce79b0d83750f0d153f119b790", "patch": "@@ -349,7 +349,6 @@\n //! mutable reference even when you just have [`Pin`]`<&mut Self>` (such as in your own\n //! [`poll`] implementation).\n //!\n-//! [`Pin<P>`]: Pin\n //! [`Deref`]: crate::ops::Deref\n //! [`DerefMut`]: crate::ops::DerefMut\n //! [`mem::swap`]: crate::mem::swap\n@@ -364,7 +363,6 @@\n //! [`RefCell<T>`]: crate::cell::RefCell\n //! [`drop`]: Drop::drop\n //! [`VecDeque<T>`]: ../../std/collections/struct.VecDeque.html\n-//! [`Option<T>`]: Option\n //! [`Some(v)`]: Some\n //! [`ptr::write`]: crate::ptr::write\n //! [`Future`]: crate::future::Future"}, {"sha": "d6d1762572928dfa22e9ef3a91b3581edf155126", "filename": "library/core/src/result.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=0876f59b975a67ce79b0d83750f0d153f119b790", "patch": "@@ -368,8 +368,6 @@ impl<T, E> Result<T, E> {\n     /// Converts `self` into an [`Option<T>`], consuming `self`,\n     /// and discarding the error, if any.\n     ///\n-    /// [`Option<T>`]: Option\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -395,8 +393,6 @@ impl<T, E> Result<T, E> {\n     /// Converts `self` into an [`Option<E>`], consuming `self`,\n     /// and discarding the success value, if any.\n     ///\n-    /// [`Option<E>`]: Option\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1009,8 +1005,6 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     /// Panics if the value is an [`Ok`], with a custom panic message provided\n     /// by the [`Ok`]'s value.\n     ///\n-    ///\n-    ///\n     /// # Examples\n     ///\n     /// ```{.should_panic}"}, {"sha": "ca83c409822fc19f832224f09308435f7005097e", "filename": "library/std/src/error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=0876f59b975a67ce79b0d83750f0d153f119b790", "patch": "@@ -42,8 +42,6 @@ use crate::string;\n /// via [`Error::source()`]. This makes it possible for the high-level\n /// module to provide its own errors while also revealing some of the\n /// implementation for debugging via `source` chains.\n-///\n-/// [`Result<T, E>`]: Result\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Error: Debug + Display {\n     /// The lower-level source of this error, if any."}, {"sha": "7ad9e446c5997404a82d51320064b9d5dbeeb929", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=0876f59b975a67ce79b0d83750f0d153f119b790", "patch": "@@ -240,7 +240,6 @@\n //!\n //! [`File`]: crate::fs::File\n //! [`TcpStream`]: crate::net::TcpStream\n-//! [`Vec<T>`]: Vec\n //! [`io::stdout`]: stdout\n //! [`io::Result`]: self::Result\n //! [`?` operator]: ../../book/appendix-02-operators.html\n@@ -1984,7 +1983,6 @@ pub trait BufRead: Read {\n     /// also yielded an error.\n     ///\n     /// [`io::Result`]: self::Result\n-    /// [`Vec<u8>`]: Vec\n     /// [`read_until`]: BufRead::read_until\n     ///\n     /// # Examples"}, {"sha": "243761e38978431a45f1ad5a74a4ca93e38b87c1", "filename": "library/std/src/path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=0876f59b975a67ce79b0d83750f0d153f119b790", "patch": "@@ -1775,7 +1775,6 @@ impl Path {\n     /// Any non-Unicode sequences are replaced with\n     /// [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD].\n     ///\n-    /// [`Cow<str>`]: Cow\n     /// [U+FFFD]: super::char::REPLACEMENT_CHARACTER\n     ///\n     /// # Examples"}, {"sha": "0677a5f67159298d05fd94e3dadd1aae4e69576e", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0876f59b975a67ce79b0d83750f0d153f119b790/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=0876f59b975a67ce79b0d83750f0d153f119b790", "patch": "@@ -184,9 +184,6 @@ mod prim_bool {}\n /// because `!` coerces to `Result<!, ConnectionError>` automatically.\n ///\n /// [`String::from_str`]: str::FromStr::from_str\n-/// [`Result<String, !>`]: Result\n-/// [`Result<T, !>`]: Result\n-/// [`Result<!, E>`]: Result\n /// [`String`]: string::String\n /// [`FromStr`]: str::FromStr\n ///"}]}