{"sha": "16e635cdfbb6b041886d1bccd28fa5e7e34c9f47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZTYzNWNkZmJiNmIwNDE4ODZkMWJjY2QyOGZhNWU3ZTM0YzlmNDc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-22T23:56:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-25T05:22:26Z"}, "message": "std: make .swap_remove return Option<T>.\n\nThis is one of the last raw \"indexing\" method on vectors that returns\n`T` instead of the Option.", "tree": {"sha": "eae398f604ca7c7798707ec1fd935fef79a0a493", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eae398f604ca7c7798707ec1fd935fef79a0a493"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16e635cdfbb6b041886d1bccd28fa5e7e34c9f47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16e635cdfbb6b041886d1bccd28fa5e7e34c9f47", "html_url": "https://github.com/rust-lang/rust/commit/16e635cdfbb6b041886d1bccd28fa5e7e34c9f47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16e635cdfbb6b041886d1bccd28fa5e7e34c9f47/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ca01676bcbd092b04608cc0eee843b7031e46cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ca01676bcbd092b04608cc0eee843b7031e46cb", "html_url": "https://github.com/rust-lang/rust/commit/3ca01676bcbd092b04608cc0eee843b7031e46cb"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "053d73c010e392f1345d85a305d0c012021702fe", "filename": "src/libgreen/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16e635cdfbb6b041886d1bccd28fa5e7e34c9f47/src%2Flibgreen%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e635cdfbb6b041886d1bccd28fa5e7e34c9f47/src%2Flibgreen%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fstack.rs?ref=16e635cdfbb6b041886d1bccd28fa5e7e34c9f47", "patch": "@@ -139,7 +139,7 @@ impl StackPool {\n     pub fn take_stack(&mut self, min_size: uint) -> Stack {\n         // Ideally this would be a binary search\n         match self.stacks.iter().position(|s| min_size <= s.min_size) {\n-            Some(idx) => self.stacks.swap_remove(idx),\n+            Some(idx) => self.stacks.swap_remove(idx).unwrap(),\n             None => Stack::new(min_size)\n         }\n     }"}, {"sha": "cf49ea535623d3b0304ea550233dd3ff61b1cc1f", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/16e635cdfbb6b041886d1bccd28fa5e7e34c9f47/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e635cdfbb6b041886d1bccd28fa5e7e34c9f47/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=16e635cdfbb6b041886d1bccd28fa5e7e34c9f47", "patch": "@@ -1368,13 +1368,24 @@ pub trait OwnedVector<T> {\n     /// ```\n     fn remove(&mut self, i: uint) -> Option<T>;\n \n-    /**\n-     * Remove an element from anywhere in the vector and return it, replacing it\n-     * with the last element. This does not preserve ordering, but is O(1).\n-     *\n-     * Fails if index >= length.\n-     */\n-    fn swap_remove(&mut self, index: uint) -> T;\n+    /// Remove an element from anywhere in the vector and return it, replacing it\n+    /// with the last element. This does not preserve ordering, but is O(1).\n+    ///\n+    /// Returns `None` if `index` is out of bounds.\n+    ///\n+    /// # Example\n+    /// ```rust\n+    /// let mut v = ~[~\"foo\", ~\"bar\", ~\"baz\", ~\"qux\"];\n+    ///\n+    /// assert_eq!(v.swap_remove(1), Some(~\"bar\"));\n+    /// assert_eq!(v, ~[~\"foo\", ~\"qux\", ~\"baz\"]);\n+    ///\n+    /// assert_eq!(v.swap_remove(0), Some(~\"foo\"));\n+    /// assert_eq!(v, ~[~\"baz\", ~\"qux\"]);\n+    ///\n+    /// assert_eq!(v.swap_remove(2), None);\n+    /// ```\n+    fn swap_remove(&mut self, index: uint) -> Option<T>;\n \n     /// Shorten a vector, dropping excess elements.\n     fn truncate(&mut self, newlen: uint);\n@@ -1580,15 +1591,14 @@ impl<T> OwnedVector<T> for ~[T] {\n             None\n         }\n     }\n-    fn swap_remove(&mut self, index: uint) -> T {\n+    fn swap_remove(&mut self, index: uint) -> Option<T> {\n         let ln = self.len();\n-        if index >= ln {\n-            fail!(\"vec::swap_remove - index {} >= length {}\", index, ln);\n-        }\n         if index < ln - 1 {\n             self.swap(index, ln - 1);\n+        } else if index >= ln {\n+            return None\n         }\n-        self.pop().unwrap()\n+        self.pop()\n     }\n     fn truncate(&mut self, newlen: uint) {\n         let oldlen = self.len();\n@@ -3194,15 +3204,15 @@ mod tests {\n     fn test_swap_remove() {\n         let mut v = ~[1, 2, 3, 4, 5];\n         let mut e = v.swap_remove(0);\n-        assert_eq!(v.len(), 4);\n-        assert_eq!(e, 1);\n-        assert_eq!(v[0], 5);\n+        assert_eq!(e, Some(1));\n+        assert_eq!(v, ~[5, 2, 3, 4]);\n         e = v.swap_remove(3);\n-        assert_eq!(v.len(), 3);\n-        assert_eq!(e, 4);\n-        assert_eq!(v[0], 5);\n-        assert_eq!(v[1], 2);\n-        assert_eq!(v[2], 3);\n+        assert_eq!(e, Some(4));\n+        assert_eq!(v, ~[5, 2, 3]);\n+\n+        e = v.swap_remove(3);\n+        assert_eq!(e, None);\n+        assert_eq!(v, ~[5, 2, 3]);\n     }\n \n     #[test]"}, {"sha": "2f39adc25d341c4d453ba5d68d46c427e478aa6f", "filename": "src/libstd/vec_ng.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16e635cdfbb6b041886d1bccd28fa5e7e34c9f47/src%2Flibstd%2Fvec_ng.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e635cdfbb6b041886d1bccd28fa5e7e34c9f47/src%2Flibstd%2Fvec_ng.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec_ng.rs?ref=16e635cdfbb6b041886d1bccd28fa5e7e34c9f47", "patch": "@@ -277,15 +277,14 @@ impl<T> Vec<T> {\n     }\n \n     #[inline]\n-    pub fn swap_remove(&mut self, index: uint) -> T {\n+    pub fn swap_remove(&mut self, index: uint) -> Option<T> {\n         let length = self.len();\n-        if index >= length {\n-            fail!(\"Vec::swap_remove - index {} >= length {}\", index, length);\n-        }\n         if index < length - 1 {\n             self.as_mut_slice().swap(index, length - 1);\n+        } else if index >= length {\n+            return None\n         }\n-        self.pop().unwrap()\n+        self.pop()\n     }\n \n     #[inline]\n@@ -392,4 +391,3 @@ impl<T> Drop for MoveItems<T> {\n         }\n     }\n }\n-"}]}