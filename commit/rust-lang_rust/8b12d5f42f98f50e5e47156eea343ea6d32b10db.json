{"sha": "8b12d5f42f98f50e5e47156eea343ea6d32b10db", "node_id": "C_kwDOAAsO6NoAKDhiMTJkNWY0MmY5OGY1MGU1ZTQ3MTU2ZWVhMzQzZWE2ZDMyYjEwZGI", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2023-01-22T17:06:23Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2023-01-25T13:58:27Z"}, "message": "suggest qualifying bare associated constants", "tree": {"sha": "5fcafd7d216aa923908129790490e8a95c61003b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fcafd7d216aa923908129790490e8a95c61003b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b12d5f42f98f50e5e47156eea343ea6d32b10db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAmPRNYUWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdINTB/9S151961bGTwAHNyIcq6BGftue\nd5PrwMJxgmrlKEeAEi94BOTekUPjH+71n5zpDSx4Em0XEDrNvjqONC4pdMOz2/ZF\nKGVVvpI7VfqYxakaZFtv1wANAmdVf6UvOjFTWrtGtaGdW018jYzzQjcu38bHNIeF\n6aEw0R/Czwg7qpxaNDOt90vRSo9hNh7qRIM1pDE2s2XJfrmuSZiV00aIhfqA/95Z\nExJCoK7GZNrhqJJgQq5dHqMasNLZNxNl8A69rjht9AWthiztFVpOHRyIPV9YjAdP\n1H1pbrPiSSAL5jyTGnA2l/YsDDAzFOFGEg9Z7hvQ2KZO178K1mDuiuZi4o5e\n=kS6u\n-----END PGP SIGNATURE-----", "payload": "tree 5fcafd7d216aa923908129790490e8a95c61003b\nparent 8e6809072304b147f9e98d55c87f42c0f3959679\nauthor Andy Russell <arussell123@gmail.com> 1674407183 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1674655107 -0500\n\nsuggest qualifying bare associated constants\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b12d5f42f98f50e5e47156eea343ea6d32b10db", "html_url": "https://github.com/rust-lang/rust/commit/8b12d5f42f98f50e5e47156eea343ea6d32b10db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b12d5f42f98f50e5e47156eea343ea6d32b10db/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e6809072304b147f9e98d55c87f42c0f3959679", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e6809072304b147f9e98d55c87f42c0f3959679", "html_url": "https://github.com/rust-lang/rust/commit/8e6809072304b147f9e98d55c87f42c0f3959679"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "37beff37c1fb9d988c33ae968afa86fb96370603", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8b12d5f42f98f50e5e47156eea343ea6d32b10db/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b12d5f42f98f50e5e47156eea343ea6d32b10db/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=8b12d5f42f98f50e5e47156eea343ea6d32b10db", "patch": "@@ -227,20 +227,27 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     && let Some(FnCtxt::Assoc(_)) = fn_kind.ctxt()\n                     && let Some(items) = self.diagnostic_metadata.current_impl_items\n                     && let Some(item) = items.iter().find(|i| {\n-                        if let AssocItemKind::Fn(_) = &i.kind && i.ident.name == item_str.name\n+                        if let AssocItemKind::Fn(..) | AssocItemKind::Const(..) = &i.kind\n+                            && i.ident.name == item_str.name\n                         {\n                             debug!(?item_str.name);\n                             return true\n                         }\n                         false\n                     })\n-                    && let AssocItemKind::Fn(fn_) = &item.kind\n                 {\n-                    debug!(?fn_);\n-                    let self_sugg = if fn_.sig.decl.has_self() { \"self.\" } else { \"Self::\" };\n+                    let self_sugg = match &item.kind {\n+                        AssocItemKind::Fn(fn_) if fn_.sig.decl.has_self() => \"self.\",\n+                        _ => \"Self::\",\n+                    };\n+\n                     Some((\n                         item_span.shrink_to_lo(),\n-                        \"consider using the associated function\",\n+                        match &item.kind {\n+                            AssocItemKind::Fn(..) => \"consider using the associated function\",\n+                            AssocItemKind::Const(..) => \"consider using the associated constant\",\n+                            _ => unreachable!(\"item kind was filtered above\"),\n+                        },\n                         self_sugg.to_string()\n                     ))\n                 } else {"}, {"sha": "95070ec601cd49cad61b522cc23db1849c97e5b6", "filename": "tests/ui/suggestions/assoc-const-without-self.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b12d5f42f98f50e5e47156eea343ea6d32b10db/tests%2Fui%2Fsuggestions%2Fassoc-const-without-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b12d5f42f98f50e5e47156eea343ea6d32b10db/tests%2Fui%2Fsuggestions%2Fassoc-const-without-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fassoc-const-without-self.rs?ref=8b12d5f42f98f50e5e47156eea343ea6d32b10db", "patch": "@@ -0,0 +1,11 @@\n+struct Foo;\n+\n+impl Foo {\n+    const A_CONST: usize = 1;\n+\n+    fn foo() -> usize {\n+        A_CONST //~ ERROR cannot find value `A_CONST` in this scope\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "88d72da70cb9b99789b546e7ae53b235c5afa71a", "filename": "tests/ui/suggestions/assoc-const-without-self.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b12d5f42f98f50e5e47156eea343ea6d32b10db/tests%2Fui%2Fsuggestions%2Fassoc-const-without-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b12d5f42f98f50e5e47156eea343ea6d32b10db/tests%2Fui%2Fsuggestions%2Fassoc-const-without-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fassoc-const-without-self.stderr?ref=8b12d5f42f98f50e5e47156eea343ea6d32b10db", "patch": "@@ -0,0 +1,14 @@\n+error[E0425]: cannot find value `A_CONST` in this scope\n+  --> $DIR/assoc-const-without-self.rs:7:9\n+   |\n+LL |         A_CONST\n+   |         ^^^^^^^ not found in this scope\n+   |\n+help: consider using the associated constant\n+   |\n+LL |         Self::A_CONST\n+   |         ++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}