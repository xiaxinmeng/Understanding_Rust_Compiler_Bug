{"sha": "e0f08fcc20ba18a8225b5c591b8b5429090d1943", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZjA4ZmNjMjBiYTE4YTgyMjViNWM1OTFiOGI1NDI5MDkwZDE5NDM=", "commit": {"author": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-14T17:26:37Z"}, "committer": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-27T10:06:00Z"}, "message": "add generate_enum_as_method assist", "tree": {"sha": "6c1a95fe7873db8dc44ff624ac2cba70325da383", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c1a95fe7873db8dc44ff624ac2cba70325da383"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0f08fcc20ba18a8225b5c591b8b5429090d1943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f08fcc20ba18a8225b5c591b8b5429090d1943", "html_url": "https://github.com/rust-lang/rust/commit/e0f08fcc20ba18a8225b5c591b8b5429090d1943", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0f08fcc20ba18a8225b5c591b8b5429090d1943/comments", "author": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "642786986ff21f33d3a08191d7c19cccf97d25e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/642786986ff21f33d3a08191d7c19cccf97d25e2", "html_url": "https://github.com/rust-lang/rust/commit/642786986ff21f33d3a08191d7c19cccf97d25e2"}], "stats": {"total": 154, "additions": 154, "deletions": 0}, "files": [{"sha": "45a08acad7d01262ecd691ad6f2c15301b9ac3cc", "filename": "crates/ide_assists/src/handlers/generate_enum_match_method.rs", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/e0f08fcc20ba18a8225b5c591b8b5429090d1943/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f08fcc20ba18a8225b5c591b8b5429090d1943/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs?ref=e0f08fcc20ba18a8225b5c591b8b5429090d1943", "patch": "@@ -145,6 +145,79 @@ pub(crate) fn generate_enum_into_method(acc: &mut Assists, ctx: &AssistContext)\n     )\n }\n \n+// Assist: generate_enum_as_method\n+//\n+// Generate an `as_` method for an enum variant.\n+//\n+// ```\n+// enum Value {\n+//  Number(i32),\n+//  Text(String)$0,\n+// }\n+// ```\n+// ->\n+// ```\n+// enum Value {\n+//  Number(i32),\n+//  Text(String),\n+// }\n+//\n+// impl Value {\n+//     fn as_text(&self) -> Option<&String> {\n+//         if let Self::Text(v) = self {\n+//             Some(v)\n+//         } else {\n+//             None\n+//         }\n+//     }\n+// }\n+// ```\n+pub(crate) fn generate_enum_as_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n+    let variant_name = variant.name()?;\n+    let parent_enum = ast::Adt::Enum(variant.parent_enum());\n+    let variant_kind = variant_kind(&variant);\n+\n+    let fn_name = format!(\"as_{}\", &to_lower_snake_case(variant_name.text()));\n+\n+    // Return early if we've found an existing new fn\n+    let impl_def = find_struct_impl(\n+        &ctx,\n+        &parent_enum,\n+        &fn_name,\n+    )?;\n+\n+    let field_type = variant_kind.single_field_type()?;\n+    let (pattern_suffix, bound_name) = variant_kind.binding_pattern()?;\n+\n+    let target = variant.syntax().text_range();\n+    acc.add(\n+        AssistId(\"generate_enum_as_method\", AssistKind::Generate),\n+        \"Generate an `as_` method for an enum variant\",\n+        target,\n+        |builder| {\n+            let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+            let method = format!(\n+                \"    {}fn {}(&self) -> Option<&{}> {{\n+        if let Self::{}{} = self {{\n+            Some({})\n+        }} else {{\n+            None\n+        }}\n+    }}\",\n+                vis,\n+                fn_name,\n+                field_type.syntax(),\n+                variant_name,\n+                pattern_suffix,\n+                bound_name,\n+            );\n+\n+            add_method_to_adt(builder, &parent_enum, impl_def, &method);\n+        },\n+    )\n+}\n+\n fn add_method_to_adt(\n     builder: &mut AssistBuilder,\n     adt: &ast::Adt,\n@@ -527,6 +600,57 @@ impl Value {\n             None\n         }\n     }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_enum_as_tuple_variant() {\n+        check_assist(\n+            generate_enum_as_method,\n+            r#\"\n+enum Value {\n+    Number(i32),\n+    Text(String)$0,\n+}\"#,\n+            r#\"enum Value {\n+    Number(i32),\n+    Text(String),\n+}\n+\n+impl Value {\n+    fn as_text(&self) -> Option<&String> {\n+        if let Self::Text(v) = self {\n+            Some(v)\n+        } else {\n+            None\n+        }\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_enum_as_record_variant() {\n+        check_assist(\n+            generate_enum_as_method,\n+            r#\"enum Value {\n+    Number(i32),\n+    Text { text: String }$0,\n+}\"#,\n+            r#\"enum Value {\n+    Number(i32),\n+    Text { text: String },\n+}\n+\n+impl Value {\n+    fn as_text(&self) -> Option<&String> {\n+        if let Self::Text { text } = self {\n+            Some(text)\n+        } else {\n+            None\n+        }\n+    }\n }\"#,\n         );\n     }"}, {"sha": "84ac928e975a7943901bd4330bce359f4c1e8a72", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0f08fcc20ba18a8225b5c591b8b5429090d1943/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f08fcc20ba18a8225b5c591b8b5429090d1943/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=e0f08fcc20ba18a8225b5c591b8b5429090d1943", "patch": "@@ -191,6 +191,7 @@ mod handlers {\n             generate_derive::generate_derive,\n             generate_enum_match_method::generate_enum_is_method,\n             generate_enum_match_method::generate_enum_into_method,\n+            generate_enum_match_method::generate_enum_as_method,\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n             generate_getter::generate_getter,"}, {"sha": "14b372c622a6c57566ad5fa2f154bc41c453b3f0", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e0f08fcc20ba18a8225b5c591b8b5429090d1943/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f08fcc20ba18a8225b5c591b8b5429090d1943/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=e0f08fcc20ba18a8225b5c591b8b5429090d1943", "patch": "@@ -482,6 +482,35 @@ struct Point {\n     )\n }\n \n+#[test]\n+fn doctest_generate_enum_as_method() {\n+    check_doc_test(\n+        \"generate_enum_as_method\",\n+        r#####\"\n+enum Value {\n+ Number(i32),\n+ Text(String)$0,\n+}\n+\"#####,\n+        r#####\"\n+enum Value {\n+ Number(i32),\n+ Text(String),\n+}\n+\n+impl Value {\n+    fn as_text(&self) -> Option<&String> {\n+        if let Self::Text(v) = self {\n+            Some(v)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_generate_enum_into_method() {\n     check_doc_test("}]}