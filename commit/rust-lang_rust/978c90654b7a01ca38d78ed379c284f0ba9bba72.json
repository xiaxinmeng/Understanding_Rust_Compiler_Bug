{"sha": "978c90654b7a01ca38d78ed379c284f0ba9bba72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3OGM5MDY1NGI3YTAxY2EzOGQ3OGVkMzc5YzI4NGYwYmE5YmJhNzI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-29T12:57:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-29T12:57:03Z"}, "message": "Rollup merge of #40720 - mitsuhiko:feature/rev-key, r=BurntSushi\n\nAdded core::cmp::Reverse for sort_by_key reverse sorting\n\nI'm not sure if this is the best way to go about proposing this feature but it's pretty useful. It allows you to use `sort_by_key` and return tuples where a single item is then reversed to how it normally sorts.\n\nI quite miss something like this in Rust currently though I'm not sure if this is the best way to implement it.", "tree": {"sha": "3cebcd9006644f0475e26e001b64f6d57d47b461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cebcd9006644f0475e26e001b64f6d57d47b461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/978c90654b7a01ca38d78ed379c284f0ba9bba72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/978c90654b7a01ca38d78ed379c284f0ba9bba72", "html_url": "https://github.com/rust-lang/rust/commit/978c90654b7a01ca38d78ed379c284f0ba9bba72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/978c90654b7a01ca38d78ed379c284f0ba9bba72/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abf5592510156e08b4de3830afaabbc0b65ce054", "url": "https://api.github.com/repos/rust-lang/rust/commits/abf5592510156e08b4de3830afaabbc0b65ce054", "html_url": "https://github.com/rust-lang/rust/commit/abf5592510156e08b4de3830afaabbc0b65ce054"}, {"sha": "5d3695362f795a45947e92c77f910dcacba575ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d3695362f795a45947e92c77f910dcacba575ea", "html_url": "https://github.com/rust-lang/rust/commit/5d3695362f795a45947e92c77f910dcacba575ea"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "dc2398b22acec67e6dbd98f1c94a9698a266c4ef", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/978c90654b7a01ca38d78ed379c284f0ba9bba72/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978c90654b7a01ca38d78ed379c284f0ba9bba72/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=978c90654b7a01ca38d78ed379c284f0ba9bba72", "patch": "@@ -322,6 +322,41 @@ impl Ordering {\n     }\n }\n \n+/// A helper struct for reverse ordering.\n+///\n+/// This struct is a helper to be used with functions like `Vec::sort_by_key` and\n+/// can be used to reverse order a part of a key.\n+///\n+/// Example usage:\n+///\n+/// ```\n+/// #![feature(reverse_cmp_key)]\n+/// use std::cmp::Reverse;\n+///\n+/// let mut v = vec![1, 2, 3, 4, 5, 6];\n+/// v.sort_by_key(|&num| (num > 3, Reverse(num)));\n+/// assert_eq!(v, vec![3, 2, 1, 6, 5, 4]);\n+/// ```\n+#[derive(PartialEq, Eq, Debug)]\n+#[unstable(feature = \"reverse_cmp_key\", issue = \"40893\")]\n+pub struct Reverse<T>(pub T);\n+\n+#[unstable(feature = \"reverse_cmp_key\", issue = \"40893\")]\n+impl<T: PartialOrd> PartialOrd for Reverse<T> {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Reverse<T>) -> Option<Ordering> {\n+        other.0.partial_cmp(&self.0)\n+    }\n+}\n+\n+#[unstable(feature = \"reverse_cmp_key\", issue = \"40893\")]\n+impl<T: Ord> Ord for Reverse<T> {\n+    #[inline]\n+    fn cmp(&self, other: &Reverse<T>) -> Ordering {\n+        other.0.cmp(&self.0)\n+    }\n+}\n+\n /// Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).\n ///\n /// An order is a total order if it is (for all `a`, `b` and `c`):"}]}