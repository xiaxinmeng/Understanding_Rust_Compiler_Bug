{"sha": "9a146243d0ad2ee4d8501d699398783b05949d15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMTQ2MjQzZDBhZDJlZTRkODUwMWQ2OTkzOTg3ODNiMDU5NDlkMTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-14T11:44:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-14T11:44:01Z"}, "message": "Auto merge of #949 - RalfJung:ask-to-run, r=RalfJung\n\nfactor ask-to-run-command into helper function", "tree": {"sha": "2c2c416dcb6a1fb577888a4c986ad36ded129fd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c2c416dcb6a1fb577888a4c986ad36ded129fd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a146243d0ad2ee4d8501d699398783b05949d15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a146243d0ad2ee4d8501d699398783b05949d15", "html_url": "https://github.com/rust-lang/rust/commit/9a146243d0ad2ee4d8501d699398783b05949d15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a146243d0ad2ee4d8501d699398783b05949d15/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7847f793832f5a8addb44b447def52ac91f57dd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7847f793832f5a8addb44b447def52ac91f57dd7", "html_url": "https://github.com/rust-lang/rust/commit/7847f793832f5a8addb44b447def52ac91f57dd7"}, {"sha": "b245cb616e7ef75b6a1381d3b432e4e856922bd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b245cb616e7ef75b6a1381d3b432e4e856922bd8", "html_url": "https://github.com/rust-lang/rust/commit/b245cb616e7ef75b6a1381d3b432e4e856922bd8"}], "stats": {"total": 62, "additions": 28, "deletions": 34}, "files": [{"sha": "d92fc344e8ada672a11cf3070f2e74abdc59a63c", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 28, "deletions": 34, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9a146243d0ad2ee4d8501d699398783b05949d15/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a146243d0ad2ee4d8501d699398783b05949d15/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=9a146243d0ad2ee4d8501d699398783b05949d15", "patch": "@@ -218,17 +218,28 @@ fn xargo_version() -> Option<(u32, u32, u32)> {\n     Some((major, minor, patch))\n }\n \n-fn ask(question: &str) {\n-    let mut buf = String::new();\n-    print!(\"{} [Y/n] \", question);\n-    io::stdout().flush().unwrap();\n-    io::stdin().read_line(&mut buf).unwrap();\n-    match buf.trim().to_lowercase().as_ref() {\n-        // Proceed.\n-        \"\" | \"y\" | \"yes\" => {},\n-        \"n\" | \"no\" => show_error(format!(\"Aborting as per your request\")),\n-        a => show_error(format!(\"I do not understand `{}`\", a))\n-    };\n+fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n+    if ask {\n+        let mut buf = String::new();\n+        print!(\"I will run `{:?}` to {}. Proceed? [Y/n] \", cmd, text);\n+        io::stdout().flush().unwrap();\n+        io::stdin().read_line(&mut buf).unwrap();\n+        match buf.trim().to_lowercase().as_ref() {\n+            // Proceed.\n+            \"\" | \"y\" | \"yes\" => {},\n+            \"n\" | \"no\" => show_error(format!(\"Aborting as per your request\")),\n+            a => show_error(format!(\"I do not understand `{}`\", a))\n+        };\n+    } else {\n+        println!(\"Running `{:?}` to {}.\", cmd, text);\n+    }\n+\n+    if cmd.status()\n+        .expect(&format!(\"failed to execute {:?}\", cmd))\n+        .success().not()\n+    {\n+        show_error(format!(\"Failed to {}\", text));\n+    }\n }\n \n /// Performs the setup required to make `cargo miri` work: Getting a custom-built libstd. Then sets\n@@ -244,18 +255,9 @@ fn setup(ask_user: bool) {\n \n     // First, we need xargo.\n     if xargo_version().map_or(true, |v| v < (0, 3, 16)) {\n-        if ask_user {\n-            ask(\"It seems you do not have a recent enough xargo installed. I will run `cargo install xargo -f`. Proceed?\");\n-        } else {\n-            println!(\"Installing xargo: `cargo install xargo -f`\");\n-        }\n-\n-        if cargo().args(&[\"install\", \"xargo\", \"-f\"]).status()\n-            .expect(\"failed to install xargo\")\n-            .success().not()\n-        {\n-            show_error(format!(\"Failed to install xargo\"));\n-        }\n+        let mut cmd = cargo();\n+        cmd.args(&[\"install\", \"xargo\", \"-f\"]);\n+        ask_to_run(cmd, ask_user, \"install a recent enough xargo\");\n     }\n \n     // Then, unless `XARGO_RUST_SRC` is set, we also need rust-src.\n@@ -267,17 +269,9 @@ fn setup(ask_user: bool) {\n         let sysroot = std::str::from_utf8(&sysroot).unwrap();\n         let src = Path::new(sysroot.trim_end_matches('\\n')).join(\"lib\").join(\"rustlib\").join(\"src\");\n         if !src.exists() {\n-            if ask_user {\n-                ask(\"It seems you do not have the rust-src component installed. I will run `rustup component add rust-src` for the selected toolchain. Proceed?\");\n-            } else {\n-                println!(\"Installing rust-src component: `rustup component add rust-src`\");\n-            }\n-            if !Command::new(\"rustup\").args(&[\"component\", \"add\", \"rust-src\"]).status()\n-                .expect(\"failed to install rust-src component\")\n-                .success()\n-            {\n-                show_error(format!(\"Failed to install rust-src component\"));\n-            }\n+            let mut cmd = Command::new(\"rustup\");\n+            cmd.args(&[\"component\", \"add\", \"rust-src\"]);\n+            ask_to_run(cmd, ask_user, \"install the rustc-src component for the selected toolchain\");\n         }\n     }\n "}]}