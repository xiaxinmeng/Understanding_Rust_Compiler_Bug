{"sha": "e990239a3ae9bafc22e1fa363110ec125dc0be09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OTAyMzlhM2FlOWJhZmMyMmUxZmEzNjMxMTBlYzEyNWRjMGJlMDk=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-06-14T02:37:20Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-06-14T19:37:53Z"}, "message": "Don't require &mut [Param] with terminfo::parm::expand()", "tree": {"sha": "4b339a5ee167384a5293489f35ed094fec279688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b339a5ee167384a5293489f35ed094fec279688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e990239a3ae9bafc22e1fa363110ec125dc0be09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e990239a3ae9bafc22e1fa363110ec125dc0be09", "html_url": "https://github.com/rust-lang/rust/commit/e990239a3ae9bafc22e1fa363110ec125dc0be09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e990239a3ae9bafc22e1fa363110ec125dc0be09/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9e234a1ae7b631ca058f2331a3986630b5d1b64", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e234a1ae7b631ca058f2331a3986630b5d1b64", "html_url": "https://github.com/rust-lang/rust/commit/c9e234a1ae7b631ca058f2331a3986630b5d1b64"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "61a31bdd12a2498b2e876d3f703efc062e282c0d", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e990239a3ae9bafc22e1fa363110ec125dc0be09/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e990239a3ae9bafc22e1fa363110ec125dc0be09/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=e990239a3ae9bafc22e1fa363110ec125dc0be09", "patch": "@@ -12,6 +12,7 @@\n \n use core::prelude::*;\n use core::{char, int, vec};\n+use core::iterator::IteratorUtil;\n \n #[deriving(Eq)]\n enum States {\n@@ -60,15 +61,12 @@ impl Variables {\n   To be compatible with ncurses, `vars` should be the same between calls to `expand` for\n   multiple capabilities for the same terminal.\n   */\n-pub fn expand(cap: &[u8], params: &mut [Param], vars: &mut Variables)\n+pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n     -> Result<~[u8], ~str> {\n-    assert!(cap.len() != 0, \"expanding an empty capability makes no sense\");\n-    assert!(params.len() <= 9, \"only 9 parameters are supported by capability strings\");\n-\n     let mut state = Nothing;\n     let mut i = 0;\n \n-    // expanded cap will only rarely be smaller than the cap itself\n+    // expanded cap will only rarely be larger than the cap itself\n     let mut output = vec::with_capacity(cap.len());\n \n     let mut cur;\n@@ -77,6 +75,12 @@ pub fn expand(cap: &[u8], params: &mut [Param], vars: &mut Variables)\n \n     let mut intstate = ~[];\n \n+    // Copy parameters into a local vector for mutability\n+    let mut mparams = [Number(0), ..9];\n+    for mparams.mut_iter().zip(params.iter()).advance |(dst, &src)| {\n+        *dst = src;\n+    }\n+\n     while i < cap.len() {\n         cur = cap[i] as char;\n         let mut old_state = state;\n@@ -163,7 +167,7 @@ pub fn expand(cap: &[u8], params: &mut [Param], vars: &mut Variables)\n                         Number(x) => stack.push(Number(!x)),\n                         _         => return Err(~\"non-number on stack with %~\")\n                     },\n-                    'i' => match (copy params[0], copy params[1]) {\n+                    'i' => match (copy mparams[0], copy mparams[1]) {\n                         (Number(ref mut x), Number(ref mut y)) => {\n                             *x += 1;\n                             *y += 1;\n@@ -176,7 +180,7 @@ pub fn expand(cap: &[u8], params: &mut [Param], vars: &mut Variables)\n             },\n             PushParam => {\n                 // params are 1-indexed\n-                stack.push(copy params[char::to_digit(cur, 10).expect(\"bad param number\") - 1]);\n+                stack.push(copy mparams[char::to_digit(cur, 10).expect(\"bad param number\") - 1]);\n             },\n             SetVar => {\n                 if cur >= 'A' && cur <= 'Z' {"}]}