{"sha": "a9509eb5984c1bb14fbba687cba7117a4aee8b02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NTA5ZWI1OTg0YzFiYjE0ZmJiYTY4N2NiYTcxMTdhNGFlZThiMDI=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-12-14T09:15:56Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-12-14T20:42:01Z"}, "message": "Revert \"Merge pull request #3257 from o01eg/remove-sysroot\"\n\nThis reverts commit 041c49c1ed11b016d6ab9379643bb1da2adf5bfe, reversing\nchanges made to 1df5766cbb559aab0ad5c2296d8b768182b5186c.", "tree": {"sha": "74f2f6d0b4720b7fc1e8e45778ee880edd499e28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74f2f6d0b4720b7fc1e8e45778ee880edd499e28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9509eb5984c1bb14fbba687cba7117a4aee8b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9509eb5984c1bb14fbba687cba7117a4aee8b02", "html_url": "https://github.com/rust-lang/rust/commit/a9509eb5984c1bb14fbba687cba7117a4aee8b02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9509eb5984c1bb14fbba687cba7117a4aee8b02/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "html_url": "https://github.com/rust-lang/rust/commit/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d"}], "stats": {"total": 100, "additions": 39, "deletions": 61}, "files": [{"sha": "fd9c8693c95a63bbafdb99e04c968a7c5b976556", "filename": "src/driver.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a9509eb5984c1bb14fbba687cba7117a4aee8b02/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9509eb5984c1bb14fbba687cba7117a4aee8b02/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=a9509eb5984c1bb14fbba687cba7117a4aee8b02", "patch": "@@ -23,7 +23,7 @@ use self::rustc_driver::{driver::CompileController, Compilation};\n \n use std::convert::TryInto;\n use std::path::Path;\n-use std::process::exit;\n+use std::process::{exit, Command};\n \n fn show_version() {\n     println!(env!(\"CARGO_PKG_VERSION\"));\n@@ -40,22 +40,54 @@ pub fn main() {\n                 exit(0);\n             }\n \n+            let sys_root = option_env!(\"SYSROOT\")\n+                .map(String::from)\n+                .or_else(|| std::env::var(\"SYSROOT\").ok())\n+                .or_else(|| {\n+                    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n+                    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n+                    home.and_then(|home| toolchain.map(|toolchain| format!(\"{}/toolchains/{}\", home, toolchain)))\n+                })\n+                .or_else(|| {\n+                    Command::new(\"rustc\")\n+                        .arg(\"--print\")\n+                        .arg(\"sysroot\")\n+                        .output()\n+                        .ok()\n+                        .and_then(|out| String::from_utf8(out.stdout).ok())\n+                        .map(|s| s.trim().to_owned())\n+                })\n+                .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n+\n             // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n             // We're invoking the compiler programmatically, so we ignore this/\n-            let mut args: Vec<String> = env::args().collect();\n-            if args.len() <= 1 {\n+            let mut orig_args: Vec<String> = env::args().collect();\n+            if orig_args.len() <= 1 {\n                 std::process::exit(1);\n             }\n-            if Path::new(&args[1]).file_stem() == Some(\"rustc\".as_ref()) {\n+            if Path::new(&orig_args[1]).file_stem() == Some(\"rustc\".as_ref()) {\n                 // we still want to be able to invoke it normally though\n-                args.remove(1);\n+                orig_args.remove(1);\n             }\n+            // this conditional check for the --sysroot flag is there so users can call\n+            // `clippy_driver` directly\n+            // without having to pass --sysroot or anything\n+            let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n+                orig_args.clone()\n+            } else {\n+                orig_args\n+                    .clone()\n+                    .into_iter()\n+                    .chain(Some(\"--sysroot\".to_owned()))\n+                    .chain(Some(sys_root))\n+                    .collect()\n+            };\n \n             // this check ensures that dependencies are built but not linted and the final\n             // crate is\n             // linted but not built\n             let clippy_enabled = env::var(\"CLIPPY_TESTS\").ok().map_or(false, |val| val == \"true\")\n-                || args.iter().any(|s| s == \"--emit=dep-info,metadata\");\n+                || orig_args.iter().any(|s| s == \"--emit=dep-info,metadata\");\n \n             if clippy_enabled {\n                 args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);"}, {"sha": "5cb37b6b6fdab27ab6a8fde6b11665aa19e8c81c", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a9509eb5984c1bb14fbba687cba7117a4aee8b02/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9509eb5984c1bb14fbba687cba7117a4aee8b02/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=a9509eb5984c1bb14fbba687cba7117a4aee8b02", "patch": "@@ -17,7 +17,6 @@ use std::ffi::OsStr;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n-use std::process::Command;\n \n fn clippy_driver_path() -> PathBuf {\n     if let Some(path) = option_env!(\"CLIPPY_DRIVER_PATH\") {\n@@ -43,28 +42,6 @@ fn rustc_lib_path() -> PathBuf {\n     option_env!(\"RUSTC_LIB_PATH\").unwrap().into()\n }\n \n-fn rustc_sysroot_path() -> PathBuf {\n-    option_env!(\"SYSROOT\")\n-        .map(String::from)\n-        .or_else(|| std::env::var(\"SYSROOT\").ok())\n-        .or_else(|| {\n-            let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-            let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-            home.and_then(|home| toolchain.map(|toolchain| format!(\"{}/toolchains/{}\", home, toolchain)))\n-        })\n-        .or_else(|| {\n-            Command::new(\"rustc\")\n-                .arg(\"--print\")\n-                .arg(\"sysroot\")\n-                .output()\n-                .ok()\n-                .and_then(|out| String::from_utf8(out.stdout).ok())\n-                .map(|s| s.trim().to_owned())\n-        })\n-        .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\")\n-        .into()\n-}\n-\n fn config(mode: &str, dir: PathBuf) -> compiletest::Config {\n     let mut config = compiletest::Config::default();\n \n@@ -78,11 +55,7 @@ fn config(mode: &str, dir: PathBuf) -> compiletest::Config {\n         config.run_lib_path = rustc_lib_path();\n         config.compile_lib_path = rustc_lib_path();\n     }\n-    config.target_rustcflags = Some(format!(\n-        \"-L {0} -L {0}/deps -Dwarnings --sysroot {1}\",\n-        host_libs().display(),\n-        rustc_sysroot_path().display()\n-    ));\n+    config.target_rustcflags = Some(format!(\"-L {0} -L {0}/deps -Dwarnings\", host_libs().display()));\n \n     config.mode = cfg_mode;\n     config.build_base = if rustc_test_suite().is_some() {"}, {"sha": "c1f02b9fcefe355cfa9d4b43c2a6eb2f85e8a828", "filename": "tests/dogfood.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a9509eb5984c1bb14fbba687cba7117a4aee8b02/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9509eb5984c1bb14fbba687cba7117a4aee8b02/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=a9509eb5984c1bb14fbba687cba7117a4aee8b02", "patch": "@@ -7,31 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::path::PathBuf;\n-use std::process::Command;\n-\n-fn rustc_sysroot_path() -> PathBuf {\n-    option_env!(\"SYSROOT\")\n-        .map(String::from)\n-        .or_else(|| std::env::var(\"SYSROOT\").ok())\n-        .or_else(|| {\n-            let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-            let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-            home.and_then(|home| toolchain.map(|toolchain| format!(\"{}/toolchains/{}\", home, toolchain)))\n-        })\n-        .or_else(|| {\n-            Command::new(\"rustc\")\n-                .arg(\"--print\")\n-                .arg(\"sysroot\")\n-                .output()\n-                .ok()\n-                .and_then(|out| String::from_utf8(out.stdout).ok())\n-                .map(|s| s.trim().to_owned())\n-        })\n-        .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\")\n-        .into()\n-}\n-\n #[test]\n fn dogfood() {\n     if option_env!(\"RUSTC_TEST_SUITE\").is_some() || cfg!(windows) {\n@@ -46,7 +21,6 @@ fn dogfood() {\n     let output = std::process::Command::new(clippy_cmd)\n         .current_dir(root_dir)\n         .env(\"CLIPPY_DOGFOOD\", \"1\")\n-        .env(\"RUSTFLAGS\", format!(\"--sysroot {}\", rustc_sysroot_path().display()))\n         .arg(\"clippy\")\n         .arg(\"--all-targets\")\n         .arg(\"--all-features\")\n@@ -85,7 +59,6 @@ fn dogfood_tests() {\n         let output = std::process::Command::new(&clippy_cmd)\n             .current_dir(root_dir.join(d))\n             .env(\"CLIPPY_DOGFOOD\", \"1\")\n-            .env(\"RUSTFLAGS\", format!(\"--sysroot {}\", rustc_sysroot_path().display()))\n             .arg(\"clippy\")\n             .arg(\"--\")\n             .args(&[\"-D\", \"clippy::all\"])"}]}