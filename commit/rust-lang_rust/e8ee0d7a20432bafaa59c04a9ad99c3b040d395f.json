{"sha": "e8ee0d7a20432bafaa59c04a9ad99c3b040d395f", "node_id": "C_kwDOAAsO6NoAKGU4ZWUwZDdhMjA0MzJiYWZhYTU5YzA0YTlhZDk5YzNiMDQwZDM5NWY", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-27T04:24:31Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-29T01:12:10Z"}, "message": "macros: add more documentation comments\n\nDocumentation comments are always good.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "7245e833f146358edacc57c14652904f6083f641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7245e833f146358edacc57c14652904f6083f641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8ee0d7a20432bafaa59c04a9ad99c3b040d395f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ee0d7a20432bafaa59c04a9ad99c3b040d395f", "html_url": "https://github.com/rust-lang/rust/commit/e8ee0d7a20432bafaa59c04a9ad99c3b040d395f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8ee0d7a20432bafaa59c04a9ad99c3b040d395f/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2647a4812c87c1fd9535d0c26db2b5f6433075d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2647a4812c87c1fd9535d0c26db2b5f6433075d0", "html_url": "https://github.com/rust-lang/rust/commit/2647a4812c87c1fd9535d0c26db2b5f6433075d0"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "032e0cecbc7845687649345299954c5f0dd801ef", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8ee0d7a20432bafaa59c04a9ad99c3b040d395f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ee0d7a20432bafaa59c04a9ad99c3b040d395f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=e8ee0d7a20432bafaa59c04a9ad99c3b040d395f", "patch": "@@ -14,7 +14,7 @@ use std::collections::HashMap;\n use syn::{spanned::Spanned, Attribute, Meta, MetaList, MetaNameValue, Type};\n use synstructure::Structure;\n \n-/// The central struct for constructing the `as_error` method from an annotated struct.\n+/// The central struct for constructing the `into_diagnostic` method from an annotated struct.\n pub(crate) struct SessionDiagnosticDerive<'a> {\n     structure: Structure<'a>,\n     builder: SessionDiagnosticDeriveBuilder,"}, {"sha": "e8c0bfd66514eba5bb731646c57cc1b505a02ba1", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8ee0d7a20432bafaa59c04a9ad99c3b040d395f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ee0d7a20432bafaa59c04a9ad99c3b040d395f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=e8ee0d7a20432bafaa59c04a9ad99c3b040d395f", "patch": "@@ -16,6 +16,8 @@ use std::str::FromStr;\n use syn::{spanned::Spanned, Meta, MetaList, MetaNameValue};\n use synstructure::{BindingInfo, Structure, VariantInfo};\n \n+/// `Applicability` of a suggestion - mirrors `rustc_errors::Applicability` - and used to represent\n+/// the user's selection of applicability if specified in an attribute.\n enum Applicability {\n     MachineApplicable,\n     MaybeIncorrect,\n@@ -56,6 +58,7 @@ impl quote::ToTokens for Applicability {\n     }\n }\n \n+/// Which kind of suggestion is being created?\n #[derive(Clone, Copy)]\n enum SubdiagnosticSuggestionKind {\n     /// `#[suggestion]`\n@@ -68,6 +71,7 @@ enum SubdiagnosticSuggestionKind {\n     Verbose,\n }\n \n+/// Which kind of subdiagnostic is being created from a variant?\n #[derive(Clone, Copy)]\n enum SubdiagnosticKind {\n     /// `#[label(...)]`\n@@ -129,6 +133,7 @@ impl quote::IdentFragment for SubdiagnosticKind {\n     }\n }\n \n+/// The central struct for constructing the `add_to_diagnostic` method from an annotated struct.\n pub(crate) struct SessionSubdiagnosticDerive<'a> {\n     structure: Structure<'a>,\n     diag: syn::Ident,\n@@ -210,6 +215,10 @@ impl<'a> SessionSubdiagnosticDerive<'a> {\n     }\n }\n \n+/// Tracks persistent information required for building up the call to add to the diagnostic\n+/// for the final generated method. This is a separate struct to `SessionSubdiagnosticDerive`\n+/// only to be able to destructure and split `self.builder` and the `self.structure` up to avoid a\n+/// double mut borrow later on.\n struct SessionSubdiagnosticDeriveBuilder<'a> {\n     /// The identifier to use for the generated `DiagnosticBuilder` instance.\n     diag: &'a syn::Ident,"}, {"sha": "6791a9e35b8396c5d1453ce38a81ec7f1e03b277", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8ee0d7a20432bafaa59c04a9ad99c3b040d395f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ee0d7a20432bafaa59c04a9ad99c3b040d395f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=e8ee0d7a20432bafaa59c04a9ad99c3b040d395f", "patch": "@@ -102,6 +102,8 @@ pub(crate) struct FieldInfo<'a> {\n     pub(crate) span: &'a proc_macro2::Span,\n }\n \n+/// Small helper trait for abstracting over `Option` fields that contain a value and a `Span`\n+/// for error reporting if they are set more than once.\n pub(crate) trait SetOnce<T> {\n     fn set_once(&mut self, value: T);\n }\n@@ -122,6 +124,7 @@ impl<T> SetOnce<(T, Span)> for Option<(T, Span)> {\n }\n \n pub(crate) trait HasFieldMap {\n+    /// Returns the binding for the field with the given name, if it exists on the type.\n     fn get_field_binding(&self, field: &String) -> Option<&TokenStream>;\n \n     /// In the strings in the attributes supplied to this macro, we want callers to be able to"}]}