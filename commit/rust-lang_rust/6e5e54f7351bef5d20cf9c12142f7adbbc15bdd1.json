{"sha": "6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNWU1NGY3MzUxYmVmNWQyMGNmOWMxMjE0MmY3YWRiYmMxNWJkZDE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-10-18T15:58:10Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-12-11T11:18:55Z"}, "message": "Use unions for uninhabitedness checking rather than mem::transmute", "tree": {"sha": "1130d241a483f0ca04e1fe94bd87434539573974", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1130d241a483f0ca04e1fe94bd87434539573974"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1", "html_url": "https://github.com/rust-lang/rust/commit/6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e1c6437e64cdf7fa6c75a3bfb2bb3f57d7313b", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e1c6437e64cdf7fa6c75a3bfb2bb3f57d7313b", "html_url": "https://github.com/rust-lang/rust/commit/51e1c6437e64cdf7fa6c75a3bfb2bb3f57d7313b"}], "stats": {"total": 44, "additions": 18, "deletions": 26}, "files": [{"sha": "3ebdd44aba9f8e1039e15d3cf2c0c12ec7975032", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1", "patch": "@@ -557,7 +557,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 let size = element.size.checked_mul(count, dl)\n                     .ok_or(LayoutError::SizeOverflow(ty))?;\n \n-                let abi = if size != Size::ZERO && ty.conservative_is_uninhabited(tcx) {\n+                let abi = if count != 0 && ty.conservative_is_uninhabited(tcx) {\n                     Abi::Uninhabited\n                 } else {\n                     Abi::Aggregate { sized: true }"}, {"sha": "ba083df4bee25cd7bd1450cee287e9e551fed4df", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs?ref=6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![feature(const_transmute)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n@@ -16,14 +6,18 @@ use std::mem;\n #[derive(Copy, Clone)]\n enum Bar {}\n \n-const BAD_BAD_BAD: Bar = unsafe { mem::transmute(()) };\n-//~^ ERROR it is undefined behavior to use this value\n+union TransmuteUnion<A: Clone + Copy, B: Clone + Copy> {\n+    a: A,\n+    b: B,\n+}\n+\n+const BAD_BAD_BAD: Bar = unsafe { (TransmuteUnion::<(), Bar> { a: () }).b };\n+//~^ ERROR this constant likely exhibits undefined behavior\n \n const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n //~^ ERROR it is undefined behavior to use this value\n \n-const BAD_BAD_ARRAY: [Bar; 1] = unsafe { mem::transmute(()) };\n-//~^ ERROR it is undefined behavior to use this value\n+const BAD_BAD_ARRAY: [Bar; 1] = unsafe { (TransmuteUnion::<(), [Bar; 1]> { a: () }).b };\n+//~^ ERROR this constant likely exhibits undefined behavior\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "c4ed503635a547b6da201c857c7c936ba0059376", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr?ref=6e5e54f7351bef5d20cf9c12142f7adbbc15bdd1", "patch": "@@ -1,12 +1,10 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:19:1\n    |\n-LL | const BAD_BAD_BAD: Bar = unsafe { mem::transmute(()) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------^^^\n-   |                                   |\n-   |                                   entered unreachable code\n+LL | const BAD_BAD_BAD: Bar = unsafe { (TransmuteUnion::<(), Bar> { a: () }).b };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:22:1\n@@ -19,10 +17,10 @@ LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:25:1\n    |\n-LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { mem::transmute(()) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------^^^\n-   |                                          |\n-   |                                          entered unreachable code\n+LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { (TransmuteUnion::<(), [Bar; 1]> { a: () }).b };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error: aborting due to 3 previous errors\n "}]}