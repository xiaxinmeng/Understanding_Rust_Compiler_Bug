{"sha": "28f6d4a63786a7e63bc5d3b66b1754a02b1b564d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZjZkNGE2Mzc4NmE3ZTYzYmM1ZDNiNjZiMTc1NGEwMmIxYjU2NGQ=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-01-01T22:06:57Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-01-04T18:05:27Z"}, "message": "Add test for i128 ffi usage", "tree": {"sha": "ccaa1c92ffa4cd5171e7c41b62cb270f6a0ff8cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccaa1c92ffa4cd5171e7c41b62cb270f6a0ff8cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28f6d4a63786a7e63bc5d3b66b1754a02b1b564d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28f6d4a63786a7e63bc5d3b66b1754a02b1b564d", "html_url": "https://github.com/rust-lang/rust/commit/28f6d4a63786a7e63bc5d3b66b1754a02b1b564d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28f6d4a63786a7e63bc5d3b66b1754a02b1b564d/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fefa3cc91b6b2f8a0830d13d2955a9840431f31", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fefa3cc91b6b2f8a0830d13d2955a9840431f31", "html_url": "https://github.com/rust-lang/rust/commit/1fefa3cc91b6b2f8a0830d13d2955a9840431f31"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "f2d9119a7d15697c4db85ed47af161cec86c2e9a", "filename": "src/rt/rust_test_helpers.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/28f6d4a63786a7e63bc5d3b66b1754a02b1b564d/src%2Frt%2Frust_test_helpers.c", "raw_url": "https://github.com/rust-lang/rust/raw/28f6d4a63786a7e63bc5d3b66b1754a02b1b564d/src%2Frt%2Frust_test_helpers.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_test_helpers.c?ref=28f6d4a63786a7e63bc5d3b66b1754a02b1b564d", "patch": "@@ -268,3 +268,22 @@ LARGE_INTEGER increment_all_parts(LARGE_INTEGER li) {\n     li.QuadPart += 1;\n     return li;\n }\n+\n+#define DO_INT128_TEST !(defined(WIN32) || defined(_WIN32) || defined(__WIN32)) && \\\n+    defined(__amd64__)\n+\n+#if DO_INT128_TEST\n+\n+unsigned __int128 identity(unsigned __int128 a) {\n+    return a;\n+}\n+\n+__int128 square(__int128 a) {\n+    return a * a;\n+}\n+\n+__int128 sub(__int128 a, __int128 b) {\n+    return a - b;\n+}\n+\n+#endif"}, {"sha": "3b5f4884d21e7215a087e241cc6fd7e96a40c608", "filename": "src/test/run-pass/i128-ffi.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/28f6d4a63786a7e63bc5d3b66b1754a02b1b564d/src%2Ftest%2Frun-pass%2Fi128-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f6d4a63786a7e63bc5d3b66b1754a02b1b564d/src%2Ftest%2Frun-pass%2Fi128-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi128-ffi.rs?ref=28f6d4a63786a7e63bc5d3b66b1754a02b1b564d", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-stage0\n+// ignore-stage1\n+\n+// MSVC doesn't support 128 bit integers, and other Windows\n+// C compilers have very inconsistent views on how the ABI\n+// should look like.\n+\n+// ignore-windows\n+\n+// Ignore 32 bit targets:\n+// ignore-x86, ignore-arm\n+\n+#![feature(i128_type)]\n+\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n+extern \"C\" {\n+    fn identity(f: u128) -> u128;\n+    fn square(f: i128) -> i128;\n+    fn sub(f: i128, f: i128) -> i128;\n+}\n+\n+fn main() {\n+    unsafe {\n+        let a = 0x734C_C2F2_A521;\n+        let b = 0x33EE_0E2A_54E2_59DA_A0E7_8E41;\n+        let b_out = identity(b);\n+        assert_eq!(b, b_out);\n+        let a_square = square(a);\n+        assert_eq!(b, a_square as u128);\n+        let k = 0x1234_5678_9ABC_DEFF_EDCB_A987_6543_210;\n+        let k_d = 0x2468_ACF1_3579_BDFF_DB97_530E_CA86_420;\n+        let k_out = sub(k_d, k);\n+        assert_eq!(k, k_out);\n+    }\n+}"}]}