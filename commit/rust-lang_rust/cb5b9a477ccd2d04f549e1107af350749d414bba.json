{"sha": "cb5b9a477ccd2d04f549e1107af350749d414bba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNWI5YTQ3N2NjZDJkMDRmNTQ5ZTExMDdhZjM1MDc0OWQ0MTRiYmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-10T00:25:28Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-10T00:39:49Z"}, "message": "Rename local_data methods/types for less keystrokes", "tree": {"sha": "3ff1cd70a4786c9dafc3b7d301bd40d5db119994", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ff1cd70a4786c9dafc3b7d301bd40d5db119994"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb5b9a477ccd2d04f549e1107af350749d414bba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb5b9a477ccd2d04f549e1107af350749d414bba", "html_url": "https://github.com/rust-lang/rust/commit/cb5b9a477ccd2d04f549e1107af350749d414bba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb5b9a477ccd2d04f549e1107af350749d414bba/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c3a2e7eeb1e553c7fc06a012862d99094faa03f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3a2e7eeb1e553c7fc06a012862d99094faa03f", "html_url": "https://github.com/rust-lang/rust/commit/5c3a2e7eeb1e553c7fc06a012862d99094faa03f"}], "stats": {"total": 178, "additions": 94, "deletions": 84}, "files": [{"sha": "210c6593a184f13457918bb0312a2dd37a4ccf50", "filename": "src/libextra/rl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibextra%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibextra%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frl.rs?ref=cb5b9a477ccd2d04f549e1107af350749d414bba", "patch": "@@ -72,11 +72,11 @@ fn complete_key(_v: @CompletionCb) {}\n \n /// Bind to the main completion callback\n pub unsafe fn complete(cb: CompletionCb) {\n-    local_data::local_data_set(complete_key, @(cb));\n+    local_data::set(complete_key, @(cb));\n \n     extern fn callback(line: *c_char, completions: *()) {\n         unsafe {\n-            let cb = *local_data::local_data_get(complete_key)\n+            let cb = *local_data::get(complete_key)\n                 .get();\n \n             do cb(str::raw::from_c_str(line)) |suggestion| {"}, {"sha": "50fa9c35d7e9304088f213a1b55e716ce9a5e7bb", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=cb5b9a477ccd2d04f549e1107af350749d414bba", "patch": "@@ -1204,11 +1204,11 @@ mod big_tests {\n     #[unsafe_destructor]\n     impl<'self> Drop for LVal<'self> {\n         fn drop(&self) {\n-            let x = unsafe { local_data::local_data_get(self.key) };\n+            let x = unsafe { local_data::get(self.key) };\n             match x {\n                 Some(@y) => {\n                     unsafe {\n-                        local_data::local_data_set(self.key, @(y+1));\n+                        local_data::set(self.key, @(y+1));\n                     }\n                 }\n                 _ => fail!(\"Expected key to work\"),"}, {"sha": "bc22f89da7e633b1a9add4f5b03e989b5fcf7ce7", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=cb5b9a477ccd2d04f549e1107af350749d414bba", "patch": "@@ -92,7 +92,7 @@ fn task_local_insn_key(_v: @~[&'static str]) {}\n \n pub fn with_insn_ctxt(blk: &fn(&[&'static str])) {\n     unsafe {\n-        let opt = local_data::local_data_get(task_local_insn_key);\n+        let opt = local_data::get(task_local_insn_key);\n         if opt.is_some() {\n             blk(*opt.unwrap());\n         }\n@@ -101,7 +101,7 @@ pub fn with_insn_ctxt(blk: &fn(&[&'static str])) {\n \n pub fn init_insn_ctxt() {\n     unsafe {\n-        local_data::local_data_set(task_local_insn_key, @~[]);\n+        local_data::set(task_local_insn_key, @~[]);\n     }\n }\n \n@@ -111,7 +111,7 @@ pub struct _InsnCtxt { _x: () }\n impl Drop for _InsnCtxt {\n     fn drop(&self) {\n         unsafe {\n-            do local_data::local_data_modify(task_local_insn_key) |c| {\n+            do local_data::modify(task_local_insn_key) |c| {\n                 do c.map_consume |ctx| {\n                     let mut ctx = copy *ctx;\n                     ctx.pop();\n@@ -125,7 +125,7 @@ impl Drop for _InsnCtxt {\n pub fn push_ctxt(s: &'static str) -> _InsnCtxt {\n     debug!(\"new InsnCtxt: %s\", s);\n     unsafe {\n-        do local_data::local_data_modify(task_local_insn_key) |c| {\n+        do local_data::modify(task_local_insn_key) |c| {\n             do c.map_consume |ctx| {\n                 let mut ctx = copy *ctx;\n                 ctx.push(s);"}, {"sha": "dff365d79d2ef487aa47d9981acdd3ac62c443e8", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=cb5b9a477ccd2d04f549e1107af350749d414bba", "patch": "@@ -241,14 +241,14 @@ impl Drop for CrateContext {\n \n fn task_local_llcx_key(_v: @ContextRef) {}\n pub fn task_llcx() -> ContextRef {\n-    let opt = unsafe { local_data::local_data_get(task_local_llcx_key) };\n+    let opt = unsafe { local_data::get(task_local_llcx_key) };\n     *opt.expect(\"task-local LLVMContextRef wasn't ever set!\")\n }\n \n unsafe fn set_task_llcx(c: ContextRef) {\n-    local_data::local_data_set(task_local_llcx_key, @c);\n+    local_data::set(task_local_llcx_key, @c);\n }\n \n unsafe fn unset_task_llcx() {\n-    local_data::local_data_pop(task_local_llcx_key);\n+    local_data::pop(task_local_llcx_key);\n }"}, {"sha": "3af5e98ebaf32e73b6975d0c669af3d9686afd4d", "filename": "src/librusti/program.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibrusti%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibrusti%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Fprogram.rs?ref=cb5b9a477ccd2d04f549e1107af350749d414bba", "patch": "@@ -144,7 +144,7 @@ impl Program {\n                 let key = ::std::sys::Closure{ code: %? as *(),\n                                                env: ::std::ptr::null() };\n                 let key = ::std::cast::transmute(key);\n-                *::std::local_data::local_data_get(key).unwrap()\n+                *::std::local_data::get(key).unwrap()\n             };\\n\", key.code as uint));\n \n         // Using this __tls_map handle, deserialize each variable binding that\n@@ -227,7 +227,7 @@ impl Program {\n             map.insert(copy *name, @copy value.data);\n         }\n         unsafe {\n-            local_data::local_data_set(tls_key, @map);\n+            local_data::set(tls_key, @map);\n         }\n     }\n \n@@ -236,7 +236,7 @@ impl Program {\n     /// it updates this cache with the new values of each local variable.\n     pub fn consume_cache(&mut self) {\n         let map = unsafe {\n-            local_data::local_data_pop(tls_key).expect(\"tls is empty\")\n+            local_data::pop(tls_key).expect(\"tls is empty\")\n         };\n         do map.consume |name, value| {\n             match self.local_vars.find_mut(&name) {"}, {"sha": "10900b7172a93e6a70981854ad0dbbf0da8d4408", "filename": "src/libstd/condition.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=cb5b9a477ccd2d04f549e1107af350749d414bba", "patch": "@@ -12,7 +12,6 @@\n \n #[allow(missing_doc)];\n \n-use local_data::{local_data_pop, local_data_set};\n use local_data;\n use prelude::*;\n \n@@ -26,14 +25,14 @@ pub struct Handler<T, U> {\n \n pub struct Condition<'self, T, U> {\n     name: &'static str,\n-    key: local_data::LocalDataKey<'self, @Handler<T, U>>\n+    key: local_data::Key<'self, @Handler<T, U>>\n }\n \n impl<'self, T, U> Condition<'self, T, U> {\n     pub fn trap(&'self self, h: &'self fn(T) -> U) -> Trap<'self, T, U> {\n         unsafe {\n             let p : *RustClosure = ::cast::transmute(&h);\n-            let prev = local_data::local_data_get(self.key);\n+            let prev = local_data::get(self.key);\n             let h = @Handler { handle: *p, prev: prev };\n             Trap { cond: self, handler: h }\n         }\n@@ -46,7 +45,7 @@ impl<'self, T, U> Condition<'self, T, U> {\n \n     pub fn raise_default(&self, t: T, default: &fn() -> U) -> U {\n         unsafe {\n-            match local_data_pop(self.key) {\n+            match local_data::pop(self.key) {\n                 None => {\n                     debug!(\"Condition.raise: found no handler\");\n                     default()\n@@ -55,12 +54,12 @@ impl<'self, T, U> Condition<'self, T, U> {\n                     debug!(\"Condition.raise: found handler\");\n                     match handler.prev {\n                         None => {}\n-                        Some(hp) => local_data_set(self.key, hp)\n+                        Some(hp) => local_data::set(self.key, hp)\n                     }\n                     let handle : &fn(T) -> U =\n                         ::cast::transmute(handler.handle);\n                     let u = handle(t);\n-                    local_data_set(self.key, handler);\n+                    local_data::set(self.key, handler);\n                     u\n                 }\n             }\n@@ -78,7 +77,7 @@ impl<'self, T, U> Trap<'self, T, U> {\n         unsafe {\n             let _g = Guard { cond: self.cond };\n             debug!(\"Trap: pushing handler to TLS\");\n-            local_data_set(self.cond.key, self.handler);\n+            local_data::set(self.cond.key, self.handler);\n             inner()\n         }\n     }\n@@ -93,12 +92,12 @@ impl<'self, T, U> Drop for Guard<'self, T, U> {\n     fn drop(&self) {\n         unsafe {\n             debug!(\"Guard: popping handler from TLS\");\n-            let curr = local_data_pop(self.cond.key);\n+            let curr = local_data::pop(self.cond.key);\n             match curr {\n                 None => {}\n                 Some(h) => match h.prev {\n                     None => {}\n-                    Some(hp) => local_data_set(self.cond.key, hp)\n+                    Some(hp) => local_data::set(self.cond.key, hp)\n                 }\n             }\n         }"}, {"sha": "d7ab7236b5c83c689da68cc46ba869028eeb5542", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 59, "deletions": 48, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=cb5b9a477ccd2d04f549e1107af350749d414bba", "patch": "@@ -12,14 +12,28 @@\n \n Task local data management\n \n-Allows storing boxes with arbitrary types inside, to be accessed\n-anywhere within a task, keyed by a pointer to a global finaliser\n-function. Useful for dynamic variables, singletons, and interfacing\n-with foreign code with bad callback interfaces.\n+Allows storing boxes with arbitrary types inside, to be accessed anywhere within\n+a task, keyed by a pointer to a global finaliser function. Useful for dynamic\n+variables, singletons, and interfacing with foreign code with bad callback\n+interfaces.\n \n-To use, declare a monomorphic global function at the type to store,\n-and use it as the 'key' when accessing. See the 'tls' tests below for\n-examples.\n+To use, declare a monomorphic (no type parameters) global function at the type\n+to store, and use it as the 'key' when accessing.\n+\n+~~~{.rust}\n+use std::local_data;\n+\n+fn key_int(_: @int) {}\n+fn key_vector(_: @~[int]) {}\n+\n+unsafe {\n+    local_data::set(key_int, @3);\n+    assert!(local_data::get(key_int) == Some(@3));\n+\n+    local_data::set(key_vector, @~[3]);\n+    assert!(local_data::get(key_vector).unwrap()[0] == 3);\n+}\n+~~~\n \n Casting 'Arcane Sight' reveals an overwhelming aura of Transmutation\n magic.\n@@ -46,40 +60,37 @@ use task::local_data_priv::{local_get, local_pop, local_set, Handle};\n  *\n  * These two cases aside, the interface is safe.\n  */\n-pub type LocalDataKey<'self,T> = &'self fn:Copy(v: T);\n+pub type Key<'self,T> = &'self fn:Copy(v: T);\n \n /**\n  * Remove a task-local data value from the table, returning the\n  * reference that was originally created to insert it.\n  */\n-pub unsafe fn local_data_pop<T: 'static>(key: LocalDataKey<T>) -> Option<T> {\n+pub unsafe fn pop<T: 'static>(key: Key<T>) -> Option<T> {\n     local_pop(Handle::new(), key)\n }\n /**\n  * Retrieve a task-local data value. It will also be kept alive in the\n  * table until explicitly removed.\n  */\n-pub unsafe fn local_data_get<T: 'static>(key: LocalDataKey<@T>) -> Option<@T> {\n+pub unsafe fn get<T: 'static>(key: Key<@T>) -> Option<@T> {\n     local_get(Handle::new(), key, |loc| loc.map(|&x| *x))\n }\n /**\n  * Store a value in task-local data. If this key already has a value,\n  * that value is overwritten (and its destructor is run).\n  */\n-pub unsafe fn local_data_set<T: 'static>(key: LocalDataKey<@T>, data: @T) {\n+pub unsafe fn set<T: 'static>(key: Key<@T>, data: @T) {\n     local_set(Handle::new(), key, data)\n }\n /**\n  * Modify a task-local data value. If the function returns 'None', the\n  * data is removed (and its reference dropped).\n  */\n-pub unsafe fn local_data_modify<T: 'static>(\n-    key: LocalDataKey<@T>,\n-    modify_fn: &fn(Option<@T>) -> Option<@T>) {\n-\n-    let cur = local_data_pop(key);\n-    match modify_fn(cur) {\n-        Some(next) => { local_data_set(key, next); }\n+pub unsafe fn modify<T: 'static>(key: Key<@T>,\n+                                 f: &fn(Option<@T>) -> Option<@T>) {\n+    match f(pop(key)) {\n+        Some(next) => { set(key, next); }\n         None => {}\n     }\n }\n@@ -88,61 +99,61 @@ pub unsafe fn local_data_modify<T: 'static>(\n fn test_tls_multitask() {\n     unsafe {\n         fn my_key(_x: @~str) { }\n-        local_data_set(my_key, @~\"parent data\");\n+        set(my_key, @~\"parent data\");\n         do task::spawn {\n             // TLS shouldn't carry over.\n-            assert!(local_data_get(my_key).is_none());\n-            local_data_set(my_key, @~\"child data\");\n-            assert!(*(local_data_get(my_key).get()) ==\n+            assert!(get(my_key).is_none());\n+            set(my_key, @~\"child data\");\n+            assert!(*(get(my_key).get()) ==\n                     ~\"child data\");\n             // should be cleaned up for us\n         }\n         // Must work multiple times\n-        assert!(*(local_data_get(my_key).get()) == ~\"parent data\");\n-        assert!(*(local_data_get(my_key).get()) == ~\"parent data\");\n-        assert!(*(local_data_get(my_key).get()) == ~\"parent data\");\n+        assert!(*(get(my_key).get()) == ~\"parent data\");\n+        assert!(*(get(my_key).get()) == ~\"parent data\");\n+        assert!(*(get(my_key).get()) == ~\"parent data\");\n     }\n }\n \n #[test]\n fn test_tls_overwrite() {\n     unsafe {\n         fn my_key(_x: @~str) { }\n-        local_data_set(my_key, @~\"first data\");\n-        local_data_set(my_key, @~\"next data\"); // Shouldn't leak.\n-        assert!(*(local_data_get(my_key).get()) == ~\"next data\");\n+        set(my_key, @~\"first data\");\n+        set(my_key, @~\"next data\"); // Shouldn't leak.\n+        assert!(*(get(my_key).get()) == ~\"next data\");\n     }\n }\n \n #[test]\n fn test_tls_pop() {\n     unsafe {\n         fn my_key(_x: @~str) { }\n-        local_data_set(my_key, @~\"weasel\");\n-        assert!(*(local_data_pop(my_key).get()) == ~\"weasel\");\n+        set(my_key, @~\"weasel\");\n+        assert!(*(pop(my_key).get()) == ~\"weasel\");\n         // Pop must remove the data from the map.\n-        assert!(local_data_pop(my_key).is_none());\n+        assert!(pop(my_key).is_none());\n     }\n }\n \n #[test]\n fn test_tls_modify() {\n     unsafe {\n         fn my_key(_x: @~str) { }\n-        local_data_modify(my_key, |data| {\n+        modify(my_key, |data| {\n             match data {\n                 Some(@ref val) => fail!(\"unwelcome value: %s\", *val),\n                 None           => Some(@~\"first data\")\n             }\n         });\n-        local_data_modify(my_key, |data| {\n+        modify(my_key, |data| {\n             match data {\n                 Some(@~\"first data\") => Some(@~\"next data\"),\n                 Some(@ref val)       => fail!(\"wrong value: %s\", *val),\n                 None                 => fail!(\"missing value\")\n             }\n         });\n-        assert!(*(local_data_pop(my_key).get()) == ~\"next data\");\n+        assert!(*(pop(my_key).get()) == ~\"next data\");\n     }\n }\n \n@@ -156,7 +167,7 @@ fn test_tls_crust_automorestack_memorial_bug() {\n     // a stack smaller than 1 MB.\n     fn my_key(_x: @~str) { }\n     do task::spawn {\n-        unsafe { local_data_set(my_key, @~\"hax\"); }\n+        unsafe { set(my_key, @~\"hax\"); }\n     }\n }\n \n@@ -167,9 +178,9 @@ fn test_tls_multiple_types() {\n     fn int_key(_x: @int) { }\n     do task::spawn {\n         unsafe {\n-            local_data_set(str_key, @~\"string data\");\n-            local_data_set(box_key, @@());\n-            local_data_set(int_key, @42);\n+            set(str_key, @~\"string data\");\n+            set(box_key, @@());\n+            set(int_key, @42);\n         }\n     }\n }\n@@ -181,12 +192,12 @@ fn test_tls_overwrite_multiple_types() {\n     fn int_key(_x: @int) { }\n     do task::spawn {\n         unsafe {\n-            local_data_set(str_key, @~\"string data\");\n-            local_data_set(int_key, @42);\n+            set(str_key, @~\"string data\");\n+            set(int_key, @42);\n             // This could cause a segfault if overwriting-destruction is done\n             // with the crazy polymorphic transmute rather than the provided\n             // finaliser.\n-            local_data_set(int_key, @31337);\n+            set(int_key, @31337);\n         }\n     }\n }\n@@ -199,17 +210,17 @@ fn test_tls_cleanup_on_failure() {\n         fn str_key(_x: @~str) { }\n         fn box_key(_x: @@()) { }\n         fn int_key(_x: @int) { }\n-        local_data_set(str_key, @~\"parent data\");\n-        local_data_set(box_key, @@());\n+        set(str_key, @~\"parent data\");\n+        set(box_key, @@());\n         do task::spawn {\n             // spawn_linked\n-            local_data_set(str_key, @~\"string data\");\n-            local_data_set(box_key, @@());\n-            local_data_set(int_key, @42);\n+            set(str_key, @~\"string data\");\n+            set(box_key, @@());\n+            set(int_key, @42);\n             fail!();\n         }\n         // Not quite nondeterministic.\n-        local_data_set(int_key, @31337);\n+        set(int_key, @31337);\n         fail!();\n     }\n }\n@@ -219,6 +230,6 @@ fn test_static_pointer() {\n     unsafe {\n         fn key(_x: @&'static int) { }\n         static VALUE: int = 0;\n-        local_data_set(key, @&VALUE);\n+        set(key, @&VALUE);\n     }\n }"}, {"sha": "3c8294bdfd119a23bbb50982b6fc7a46e09e138f", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=cb5b9a477ccd2d04f549e1107af350749d414bba", "patch": "@@ -1230,7 +1230,7 @@ fn overridden_arg_key(_v: @OverriddenArgs) {}\n /// `os::set_args` function.\n pub fn args() -> ~[~str] {\n     unsafe {\n-        match local_data::local_data_get(overridden_arg_key) {\n+        match local_data::get(overridden_arg_key) {\n             None => real_args(),\n             Some(args) => copy args.val\n         }\n@@ -1243,7 +1243,7 @@ pub fn args() -> ~[~str] {\n pub fn set_args(new_args: ~[~str]) {\n     unsafe {\n         let overridden_args = @OverriddenArgs { val: copy new_args };\n-        local_data::local_data_set(overridden_arg_key, overridden_args);\n+        local_data::set(overridden_arg_key, overridden_args);\n     }\n }\n "}, {"sha": "860a69bd1e08b63091fd261b4c08e4bf61ce980a", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=cb5b9a477ccd2d04f549e1107af350749d414bba", "patch": "@@ -850,13 +850,13 @@ fn tls_rng_state(_v: @@mut IsaacRng) {}\n pub fn task_rng() -> @mut IsaacRng {\n     let r : Option<@@mut IsaacRng>;\n     unsafe {\n-        r = local_data::local_data_get(tls_rng_state);\n+        r = local_data::get(tls_rng_state);\n     }\n     match r {\n         None => {\n             unsafe {\n                 let rng = @@mut IsaacRng::new_seeded(seed());\n-                local_data::local_data_set(tls_rng_state, rng);\n+                local_data::set(tls_rng_state, rng);\n                 *rng\n             }\n         }"}, {"sha": "17d534cfd03de3eed2b2fabc246b47393bcde6a4", "filename": "src/libstd/task/local_data_priv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibstd%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibstd%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Flocal_data_priv.rs?ref=cb5b9a477ccd2d04f549e1107af350749d414bba", "patch": "@@ -12,7 +12,7 @@\n \n use cast;\n use libc;\n-use local_data::LocalDataKey;\n+use local_data;\n use managed::raw::BoxRepr;\n use prelude::*;\n use ptr;\n@@ -131,7 +131,7 @@ unsafe fn get_local_map(handle: Handle) -> &mut TaskLocalMap {\n     }\n }\n \n-unsafe fn key_to_key_value<T: 'static>(key: LocalDataKey<T>) -> *libc::c_void {\n+unsafe fn key_to_key_value<T: 'static>(key: local_data::Key<T>) -> *libc::c_void {\n     let pair: sys::Closure = cast::transmute(key);\n     return pair.code as *libc::c_void;\n }\n@@ -155,7 +155,7 @@ unsafe fn transmute_back<'a, T>(data: &'a TLSValue) -> (*BoxRepr, &'a T) {\n }\n \n pub unsafe fn local_pop<T: 'static>(handle: Handle,\n-                                    key: LocalDataKey<T>) -> Option<T> {\n+                                    key: local_data::Key<T>) -> Option<T> {\n     // If you've never seen horrendously unsafe code written in rust before,\n     // just feel free to look a bit farther...\n     let map = get_local_map(handle);\n@@ -203,7 +203,7 @@ pub unsafe fn local_pop<T: 'static>(handle: Handle,\n }\n \n pub unsafe fn local_get<T: 'static, U>(handle: Handle,\n-                                       key: LocalDataKey<T>,\n+                                       key: local_data::Key<T>,\n                                        f: &fn(Option<&T>) -> U) -> U {\n     // This does in theory take multiple mutable loans on the tls map, but the\n     // references returned are never removed because the map is only increasing\n@@ -227,7 +227,7 @@ pub unsafe fn local_get<T: 'static, U>(handle: Handle,\n \n // FIXME(#7673): This shouldn't require '@', it should use '~'\n pub unsafe fn local_set<T: 'static>(handle: Handle,\n-                                    key: LocalDataKey<@T>,\n+                                    key: local_data::Key<@T>,\n                                     data: @T) {\n     let map = get_local_map(handle);\n     let keyval = key_to_key_value(key);"}, {"sha": "a224d686cea5d367b3d526b7157c307a33d89c49", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=cb5b9a477ccd2d04f549e1107af350749d414bba", "patch": "@@ -698,10 +698,10 @@ pub fn get_sctable() -> @mut SCTable {\n         let sctable_key = (cast::transmute::<(uint, uint),\n                            &fn:Copy(v: @@mut SCTable)>(\n                                (-4 as uint, 0u)));\n-        match local_data::local_data_get(sctable_key) {\n+        match local_data::get(sctable_key) {\n             None => {\n                 let new_table = @@mut new_sctable_internal();\n-                local_data::local_data_set(sctable_key,new_table);\n+                local_data::set(sctable_key,new_table);\n                 *new_table\n             },\n             Some(intr) => *intr"}, {"sha": "1ddc42b4a4ef26869d64a047e3e9e76f23cba888", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5b9a477ccd2d04f549e1107af350749d414bba/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=cb5b9a477ccd2d04f549e1107af350749d414bba", "patch": "@@ -490,11 +490,11 @@ pub fn get_ident_interner() -> @ident_interner {\n             (cast::transmute::<(uint, uint),\n              &fn:Copy(v: @@::parse::token::ident_interner)>(\n                  (-3 as uint, 0u)));\n-        match local_data::local_data_get(key) {\n+        match local_data::get(key) {\n             Some(interner) => *interner,\n             None => {\n                 let interner = mk_fresh_ident_interner();\n-                local_data::local_data_set(key, @interner);\n+                local_data::set(key, @interner);\n                 interner\n             }\n         }"}]}