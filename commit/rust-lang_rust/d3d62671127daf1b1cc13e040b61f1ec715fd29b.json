{"sha": "d3d62671127daf1b1cc13e040b61f1ec715fd29b", "node_id": "C_kwDOAAsO6NoAKGQzZDYyNjcxMTI3ZGFmMWIxY2MxM2UwNDBiNjFmMWVjNzE1ZmQyOWI", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2022-04-08T10:20:21Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2022-04-08T11:10:24Z"}, "message": "Switch to LSP inlay hints", "tree": {"sha": "19c50cd2d58d59403771d2812897f7d60fcbe2be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19c50cd2d58d59403771d2812897f7d60fcbe2be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3d62671127daf1b1cc13e040b61f1ec715fd29b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d62671127daf1b1cc13e040b61f1ec715fd29b", "html_url": "https://github.com/rust-lang/rust/commit/d3d62671127daf1b1cc13e040b61f1ec715fd29b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3d62671127daf1b1cc13e040b61f1ec715fd29b/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc56920757c248229c341fb90d44fe3d4767c491", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc56920757c248229c341fb90d44fe3d4767c491", "html_url": "https://github.com/rust-lang/rust/commit/bc56920757c248229c341fb90d44fe3d4767c491"}], "stats": {"total": 299, "additions": 76, "deletions": 223}, "files": [{"sha": "ca42bf321e5d6711c105cc910065287a12cba694", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3d62671127daf1b1cc13e040b61f1ec715fd29b/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d62671127daf1b1cc13e040b61f1ec715fd29b/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=d3d62671127daf1b1cc13e040b61f1ec715fd29b", "patch": "@@ -112,11 +112,10 @@ pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n             .into(),\n         ),\n         moniker_provider: None,\n-        inlay_hint_provider: None,\n+        inlay_hint_provider: Some(OneOf::Left(true)),\n         experimental: Some(json!({\n             \"externalDocs\": true,\n             \"hoverRange\": true,\n-            \"inlayHints\": true,\n             \"joinLines\": true,\n             \"matchingBrace\": true,\n             \"moveItem\": true,"}, {"sha": "fb64eeea4f657d2aa88049dd26676930fa8399c9", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d3d62671127daf1b1cc13e040b61f1ec715fd29b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d62671127daf1b1cc13e040b61f1ec715fd29b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=d3d62671127daf1b1cc13e040b61f1ec715fd29b", "patch": "@@ -19,11 +19,11 @@ use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n     CallHierarchyOutgoingCall, CallHierarchyOutgoingCallsParams, CallHierarchyPrepareParams,\n     CodeLens, CompletionItem, Diagnostic, DiagnosticTag, DocumentFormattingParams, FoldingRange,\n-    FoldingRangeParams, HoverContents, Location, LocationLink, NumberOrString, Position,\n-    PrepareRenameResponse, Range, RenameParams, SemanticTokensDeltaParams,\n-    SemanticTokensFullDeltaResult, SemanticTokensParams, SemanticTokensRangeParams,\n-    SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation, SymbolTag,\n-    TextDocumentIdentifier, Url, WorkspaceEdit,\n+    FoldingRangeParams, HoverContents, InlayHint, InlayHintParams, Location, LocationLink,\n+    NumberOrString, Position, PrepareRenameResponse, Range, RenameParams,\n+    SemanticTokensDeltaParams, SemanticTokensFullDeltaResult, SemanticTokensParams,\n+    SemanticTokensRangeParams, SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation,\n+    SymbolTag, TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n use project_model::{ManifestPath, ProjectWorkspace, TargetKind};\n use serde_json::json;\n@@ -38,10 +38,7 @@ use crate::{\n     from_proto,\n     global_state::{GlobalState, GlobalStateSnapshot},\n     line_index::LineEndings,\n-    lsp_ext::{\n-        self, InlayHint, InlayHintsParams, PositionOrRange, ViewCrateGraphParams,\n-        WorkspaceSymbolParams,\n-    },\n+    lsp_ext::{self, PositionOrRange, ViewCrateGraphParams, WorkspaceSymbolParams},\n     lsp_utils::{all_edits_are_disjoint, invalid_params_error},\n     to_proto, LspError, Result,\n };\n@@ -1322,29 +1319,25 @@ pub(crate) fn publish_diagnostics(\n \n pub(crate) fn handle_inlay_hints(\n     snap: GlobalStateSnapshot,\n-    params: InlayHintsParams,\n-) -> Result<Vec<InlayHint>> {\n+    params: InlayHintParams,\n+) -> Result<Option<Vec<InlayHint>>> {\n     let _p = profile::span(\"handle_inlay_hints\");\n     let document_uri = &params.text_document.uri;\n     let file_id = from_proto::file_id(&snap, document_uri)?;\n     let line_index = snap.file_line_index(file_id)?;\n-    let range = params\n-        .range\n-        .map(|range| {\n-            from_proto::file_range(\n-                &snap,\n-                TextDocumentIdentifier::new(document_uri.to_owned()),\n-                range,\n-            )\n-        })\n-        .transpose()?;\n+    let range = from_proto::file_range(\n+        &snap,\n+        TextDocumentIdentifier::new(document_uri.to_owned()),\n+        params.range,\n+    )?;\n     let inlay_hints_config = snap.config.inlay_hints();\n-    Ok(snap\n-        .analysis\n-        .inlay_hints(&inlay_hints_config, file_id, range)?\n-        .into_iter()\n-        .map(|it| to_proto::inlay_hint(inlay_hints_config.render_colons, &line_index, it))\n-        .collect())\n+    Ok(Some(\n+        snap.analysis\n+            .inlay_hints(&inlay_hints_config, file_id, Some(range))?\n+            .into_iter()\n+            .map(|it| to_proto::inlay_hint(inlay_hints_config.render_colons, &line_index, it))\n+            .collect(),\n+    ))\n }\n \n pub(crate) fn handle_call_hierarchy_prepare("}, {"sha": "489a233a0a4d17c4b03ec71f6bddfb397c57053f", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d3d62671127daf1b1cc13e040b61f1ec715fd29b/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d62671127daf1b1cc13e040b61f1ec715fd29b/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=d3d62671127daf1b1cc13e040b61f1ec715fd29b", "patch": "@@ -236,59 +236,13 @@ pub struct TestInfo {\n     pub runnable: Runnable,\n }\n \n-pub enum InlayHints {}\n-\n-impl Request for InlayHints {\n-    type Params = InlayHintsParams;\n-    type Result = Vec<InlayHint>;\n-    const METHOD: &'static str = \"experimental/inlayHints\";\n-}\n-\n #[derive(Serialize, Deserialize, Debug)]\n #[serde(rename_all = \"camelCase\")]\n pub struct InlayHintsParams {\n     pub text_document: TextDocumentIdentifier,\n     pub range: Option<lsp_types::Range>,\n }\n \n-#[derive(Eq, PartialEq, Debug, Copy, Clone, Serialize, Deserialize)]\n-#[serde(transparent)]\n-pub struct InlayHintKind(u8);\n-\n-impl InlayHintKind {\n-    pub const TYPE: InlayHintKind = InlayHintKind(1);\n-    pub const PARAMETER: InlayHintKind = InlayHintKind(2);\n-}\n-\n-#[derive(Debug, Deserialize, Serialize)]\n-#[serde(rename_all = \"camelCase\")]\n-pub struct InlayHint {\n-    pub label: InlayHintLabel,\n-    pub position: Position,\n-    pub kind: Option<InlayHintKind>,\n-    pub tooltip: Option<String>,\n-    pub padding_left: Option<bool>,\n-    pub padding_right: Option<bool>,\n-}\n-\n-#[derive(Debug, Deserialize, Serialize)]\n-#[serde(untagged)]\n-pub enum InlayHintLabel {\n-    String(String),\n-    Parts(Vec<InlayHintLabelPart>),\n-}\n-\n-#[derive(Debug, Deserialize, Serialize)]\n-#[serde(rename_all = \"camelCase\")]\n-pub struct InlayHintLabelPart {\n-    pub value: String,\n-    #[serde(skip_serializing_if = \"Option::is_none\")]\n-    pub tooltip: Option<String>,\n-    #[serde(skip_serializing_if = \"Option::is_none\")]\n-    pub location: Option<lsp_types::LocationLink>,\n-    #[serde(skip_serializing_if = \"Option::is_none\")]\n-    pub command: Option<lsp_types::Command>,\n-}\n pub enum Ssr {}\n \n impl Request for Ssr {"}, {"sha": "27ec32b1f41b47296caf99157755d855b7a4bf71", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3d62671127daf1b1cc13e040b61f1ec715fd29b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d62671127daf1b1cc13e040b61f1ec715fd29b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=d3d62671127daf1b1cc13e040b61f1ec715fd29b", "patch": "@@ -597,7 +597,6 @@ impl GlobalState {\n             .on::<lsp_ext::ParentModule>(handlers::handle_parent_module)\n             .on::<lsp_ext::Runnables>(handlers::handle_runnables)\n             .on::<lsp_ext::RelatedTests>(handlers::handle_related_tests)\n-            .on::<lsp_ext::InlayHints>(handlers::handle_inlay_hints)\n             .on::<lsp_ext::CodeActionRequest>(handlers::handle_code_action)\n             .on::<lsp_ext::CodeActionResolveRequest>(handlers::handle_code_action_resolve)\n             .on::<lsp_ext::HoverRequest>(handlers::handle_hover)\n@@ -611,6 +610,7 @@ impl GlobalState {\n             .on::<lsp_types::request::GotoDeclaration>(handlers::handle_goto_declaration)\n             .on::<lsp_types::request::GotoImplementation>(handlers::handle_goto_implementation)\n             .on::<lsp_types::request::GotoTypeDefinition>(handlers::handle_goto_type_definition)\n+            .on::<lsp_types::request::InlayHintRequest>(handlers::handle_inlay_hints)\n             .on::<lsp_types::request::Completion>(handlers::handle_completion)\n             .on::<lsp_types::request::ResolveCompletionItem>(handlers::handle_completion_resolve)\n             .on::<lsp_types::request::CodeLensRequest>(handlers::handle_code_lens)"}, {"sha": "0588f00678a2599e9304c46a3c44c9a85c205980", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d3d62671127daf1b1cc13e040b61f1ec715fd29b/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d62671127daf1b1cc13e040b61f1ec715fd29b/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=d3d62671127daf1b1cc13e040b61f1ec715fd29b", "patch": "@@ -418,14 +418,8 @@ pub(crate) fn inlay_hint(\n     render_colons: bool,\n     line_index: &LineIndex,\n     inlay_hint: InlayHint,\n-) -> lsp_ext::InlayHint {\n-    lsp_ext::InlayHint {\n-        label: lsp_ext::InlayHintLabel::String(match inlay_hint.kind {\n-            InlayKind::ParameterHint if render_colons => format!(\"{}:\", inlay_hint.label),\n-            InlayKind::TypeHint if render_colons => format!(\": {}\", inlay_hint.label),\n-            InlayKind::ClosureReturnTypeHint => format!(\" -> {}\", inlay_hint.label),\n-            _ => inlay_hint.label.to_string(),\n-        }),\n+) -> lsp_types::InlayHint {\n+    lsp_types::InlayHint {\n         position: match inlay_hint.kind {\n             // before annotated thing\n             InlayKind::ParameterHint | InlayKind::ImplicitReborrow => {\n@@ -438,10 +432,16 @@ pub(crate) fn inlay_hint(\n             | InlayKind::GenericParamListHint\n             | InlayKind::LifetimeHint => position(line_index, inlay_hint.range.end()),\n         },\n+        label: lsp_types::InlayHintLabel::String(match inlay_hint.kind {\n+            InlayKind::ParameterHint if render_colons => format!(\"{}:\", inlay_hint.label),\n+            InlayKind::TypeHint if render_colons => format!(\": {}\", inlay_hint.label),\n+            InlayKind::ClosureReturnTypeHint => format!(\" -> {}\", inlay_hint.label),\n+            _ => inlay_hint.label.to_string(),\n+        }),\n         kind: match inlay_hint.kind {\n-            InlayKind::ParameterHint => Some(lsp_ext::InlayHintKind::PARAMETER),\n+            InlayKind::ParameterHint => Some(lsp_types::InlayHintKind::PARAMETER),\n             InlayKind::ClosureReturnTypeHint | InlayKind::TypeHint | InlayKind::ChainingHint => {\n-                Some(lsp_ext::InlayHintKind::TYPE)\n+                Some(lsp_types::InlayHintKind::TYPE)\n             }\n             InlayKind::GenericParamListHint\n             | InlayKind::LifetimeHint\n@@ -465,6 +465,7 @@ pub(crate) fn inlay_hint(\n             InlayKind::GenericParamListHint => false,\n             InlayKind::ImplicitReborrow => false,\n         }),\n+        text_edits: None,\n     }\n }\n "}, {"sha": "46193a6ff3beda7b63a21511bb200d49e00d1404", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d3d62671127daf1b1cc13e040b61f1ec715fd29b/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3d62671127daf1b1cc13e040b61f1ec715fd29b/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=d3d62671127daf1b1cc13e040b61f1ec715fd29b", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: a61de7db4504a4d1\n+lsp_ext.rs hash: 326ad62235135223\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:\n@@ -571,36 +571,6 @@ interface ExpandedMacro {\n \n Expands macro call at a given position.\n \n-## Inlay Hints\n-\n-**Method:** `experimental/inlayHints`\n-\n-This request is sent from client to server to render \"inlay hints\" -- virtual text inserted into editor to show things like inferred types.\n-Generally, the client should re-query inlay hints after every modification.\n-Until it gets upstreamed, this follows the VS Code API.\n-Upstream issues: https://github.com/microsoft/language-server-protocol/issues/956 , https://github.com/rust-analyzer/rust-analyzer/issues/2797\n-\n-**Request:**\n-\n-```typescript\n-interface InlayHintsParams {\n-    textDocument: TextDocumentIdentifier,\n-}\n-```\n-\n-**Response:** `InlayHint[]`\n-\n-```typescript\n-interface InlayHint {\n-    position: Position;\n-    label: string | InlayHintLabelPart[];\n-    tooltip?: string | MarkdownString | undefined;\n-    kind?: InlayHintKind;\n-    paddingLeft?: boolean;\n-    paddingRight?: boolean;\n-}\n-```\n-\n ## Hover Actions\n \n **Experimental Client Capability:** `{ \"hoverActions\": boolean }`"}, {"sha": "3c7c643798efd90a0b6753c358d6581d8aa78a7d", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d3d62671127daf1b1cc13e040b61f1ec715fd29b/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/d3d62671127daf1b1cc13e040b61f1ec715fd29b/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=d3d62671127daf1b1cc13e040b61f1ec715fd29b", "patch": "@@ -11,11 +11,11 @@\n             \"dependencies\": {\n                 \"d3\": \"^7.3.0\",\n                 \"d3-graphviz\": \"^4.1.0\",\n-                \"vscode-languageclient\": \"8.0.0-next.12\"\n+                \"vscode-languageclient\": \"8.0.0-next.14\"\n             },\n             \"devDependencies\": {\n                 \"@types/node\": \"~14.17.5\",\n-                \"@types/vscode\": \"~1.65.0\",\n+                \"@types/vscode\": \"~1.66.0\",\n                 \"@typescript-eslint/eslint-plugin\": \"^5.16.0\",\n                 \"@typescript-eslint/parser\": \"^5.16.0\",\n                 \"@vscode/test-electron\": \"^2.1.3\",\n@@ -138,9 +138,9 @@\n             \"dev\": true\n         },\n         \"node_modules/@types/vscode\": {\n-            \"version\": \"1.65.0\",\n-            \"resolved\": \"https://registry.npmjs.org/@types/vscode/-/vscode-1.65.0.tgz\",\n-            \"integrity\": \"sha512-wQhExnh2nEzpjDMSKhUvnNmz3ucpd3E+R7wJkOhBNK3No6fG3VUdmVmMOKD0A8NDZDDDiQcLNxe3oGmX5SjJ5w==\",\n+            \"version\": \"1.66.0\",\n+            \"resolved\": \"https://registry.npmjs.org/@types/vscode/-/vscode-1.66.0.tgz\",\n+            \"integrity\": \"sha512-ZfJck4M7nrGasfs4A4YbUoxis3Vu24cETw3DERsNYtDZmYSYtk6ljKexKFKhImO/ZmY6ZMsmegu2FPkXoUFImA==\",\n             \"dev\": true\n         },\n         \"node_modules/@typescript-eslint/eslint-plugin\": {\n@@ -3915,39 +3915,39 @@\n             }\n         },\n         \"node_modules/vscode-jsonrpc\": {\n-            \"version\": \"8.0.0-next.6\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-jsonrpc/-/vscode-jsonrpc-8.0.0-next.6.tgz\",\n-            \"integrity\": \"sha512-6Ld3RYjygn5Ih7CkAtcAwiDQC+rakj2O+PnASfNyYv3sLmm44eJpEKzuPUN30Iy2UB09AZg8T6LBKWTJTEJDVw==\",\n+            \"version\": \"8.0.0-next.7\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-jsonrpc/-/vscode-jsonrpc-8.0.0-next.7.tgz\",\n+            \"integrity\": \"sha512-JX/F31LEsims0dAlOTKFE4E+AJMiJvdRSRViifFJSqSN7EzeYyWlfuDchF7g91oRNPZOIWfibTkDf3/UMsQGzQ==\",\n             \"engines\": {\n                 \"node\": \">=14.0.0\"\n             }\n         },\n         \"node_modules/vscode-languageclient\": {\n-            \"version\": \"8.0.0-next.12\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-languageclient/-/vscode-languageclient-8.0.0-next.12.tgz\",\n-            \"integrity\": \"sha512-4+kr1BQcoh+sA5/4XJDJXrQXGQ5Yz/x+WpsVGGzK/TOB7RwQ63ooxG6Ej7i/+aOQM4/QdmcYWmipDtG7vqcOiw==\",\n+            \"version\": \"8.0.0-next.14\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-languageclient/-/vscode-languageclient-8.0.0-next.14.tgz\",\n+            \"integrity\": \"sha512-NqjkOuDTMu8uo+PhoMsV72VO9Gd3wBi/ZpOrkRUOrWKQo7yUdiIw183g8wjH8BImgbK9ZP51HM7TI0ZhCnI1Mw==\",\n             \"dependencies\": {\n                 \"minimatch\": \"^3.0.4\",\n                 \"semver\": \"^7.3.5\",\n-                \"vscode-languageserver-protocol\": \"3.17.0-next.14\"\n+                \"vscode-languageserver-protocol\": \"3.17.0-next.16\"\n             },\n             \"engines\": {\n-                \"vscode\": \"^1.63.0\"\n+                \"vscode\": \"^1.66.0\"\n             }\n         },\n         \"node_modules/vscode-languageserver-protocol\": {\n-            \"version\": \"3.17.0-next.14\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-protocol/-/vscode-languageserver-protocol-3.17.0-next.14.tgz\",\n-            \"integrity\": \"sha512-iangobY8dL6sFZkOx4OhRPJM9gN0I1caUsOVR+MnPozsqQUtwMXmbIcfaIf0Akp0pd3KhJDPf/tdwRX68QGeeA==\",\n+            \"version\": \"3.17.0-next.16\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-protocol/-/vscode-languageserver-protocol-3.17.0-next.16.tgz\",\n+            \"integrity\": \"sha512-tx4DnXw9u3N7vw+bx6n2NKp6FoxoNwiP/biH83AS30I2AnTGyLd7afSeH6Oewn2E8jvB7K15bs12sMppkKOVeQ==\",\n             \"dependencies\": {\n-                \"vscode-jsonrpc\": \"8.0.0-next.6\",\n-                \"vscode-languageserver-types\": \"3.17.0-next.7\"\n+                \"vscode-jsonrpc\": \"8.0.0-next.7\",\n+                \"vscode-languageserver-types\": \"3.17.0-next.9\"\n             }\n         },\n         \"node_modules/vscode-languageserver-types\": {\n-            \"version\": \"3.17.0-next.7\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-types/-/vscode-languageserver-types-3.17.0-next.7.tgz\",\n-            \"integrity\": \"sha512-KH4zdG1qBXxoso61ChgpeoZYyHGJo8bV7Jv4I+fwQ1Ryy59JAxoZ9GAbhR5TeeafHctLcg6RFvY3m8Jqfu17cg==\"\n+            \"version\": \"3.17.0-next.9\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-types/-/vscode-languageserver-types-3.17.0-next.9.tgz\",\n+            \"integrity\": \"sha512-9/PeDNPYduaoXRUzYpqmu4ZV9L01HGo0wH9FUt+sSHR7IXwA7xoXBfNUlv8gB9H0D2WwEmMomSy1NmhjKQyn3A==\"\n         },\n         \"node_modules/which\": {\n             \"version\": \"2.0.2\",\n@@ -4214,9 +4214,9 @@\n             \"dev\": true\n         },\n         \"@types/vscode\": {\n-            \"version\": \"1.65.0\",\n-            \"resolved\": \"https://registry.npmjs.org/@types/vscode/-/vscode-1.65.0.tgz\",\n-            \"integrity\": \"sha512-wQhExnh2nEzpjDMSKhUvnNmz3ucpd3E+R7wJkOhBNK3No6fG3VUdmVmMOKD0A8NDZDDDiQcLNxe3oGmX5SjJ5w==\",\n+            \"version\": \"1.66.0\",\n+            \"resolved\": \"https://registry.npmjs.org/@types/vscode/-/vscode-1.66.0.tgz\",\n+            \"integrity\": \"sha512-ZfJck4M7nrGasfs4A4YbUoxis3Vu24cETw3DERsNYtDZmYSYtk6ljKexKFKhImO/ZmY6ZMsmegu2FPkXoUFImA==\",\n             \"dev\": true\n         },\n         \"@typescript-eslint/eslint-plugin\": {\n@@ -6958,33 +6958,33 @@\n             }\n         },\n         \"vscode-jsonrpc\": {\n-            \"version\": \"8.0.0-next.6\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-jsonrpc/-/vscode-jsonrpc-8.0.0-next.6.tgz\",\n-            \"integrity\": \"sha512-6Ld3RYjygn5Ih7CkAtcAwiDQC+rakj2O+PnASfNyYv3sLmm44eJpEKzuPUN30Iy2UB09AZg8T6LBKWTJTEJDVw==\"\n+            \"version\": \"8.0.0-next.7\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-jsonrpc/-/vscode-jsonrpc-8.0.0-next.7.tgz\",\n+            \"integrity\": \"sha512-JX/F31LEsims0dAlOTKFE4E+AJMiJvdRSRViifFJSqSN7EzeYyWlfuDchF7g91oRNPZOIWfibTkDf3/UMsQGzQ==\"\n         },\n         \"vscode-languageclient\": {\n-            \"version\": \"8.0.0-next.12\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-languageclient/-/vscode-languageclient-8.0.0-next.12.tgz\",\n-            \"integrity\": \"sha512-4+kr1BQcoh+sA5/4XJDJXrQXGQ5Yz/x+WpsVGGzK/TOB7RwQ63ooxG6Ej7i/+aOQM4/QdmcYWmipDtG7vqcOiw==\",\n+            \"version\": \"8.0.0-next.14\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-languageclient/-/vscode-languageclient-8.0.0-next.14.tgz\",\n+            \"integrity\": \"sha512-NqjkOuDTMu8uo+PhoMsV72VO9Gd3wBi/ZpOrkRUOrWKQo7yUdiIw183g8wjH8BImgbK9ZP51HM7TI0ZhCnI1Mw==\",\n             \"requires\": {\n                 \"minimatch\": \"^3.0.4\",\n                 \"semver\": \"^7.3.5\",\n-                \"vscode-languageserver-protocol\": \"3.17.0-next.14\"\n+                \"vscode-languageserver-protocol\": \"3.17.0-next.16\"\n             }\n         },\n         \"vscode-languageserver-protocol\": {\n-            \"version\": \"3.17.0-next.14\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-protocol/-/vscode-languageserver-protocol-3.17.0-next.14.tgz\",\n-            \"integrity\": \"sha512-iangobY8dL6sFZkOx4OhRPJM9gN0I1caUsOVR+MnPozsqQUtwMXmbIcfaIf0Akp0pd3KhJDPf/tdwRX68QGeeA==\",\n+            \"version\": \"3.17.0-next.16\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-protocol/-/vscode-languageserver-protocol-3.17.0-next.16.tgz\",\n+            \"integrity\": \"sha512-tx4DnXw9u3N7vw+bx6n2NKp6FoxoNwiP/biH83AS30I2AnTGyLd7afSeH6Oewn2E8jvB7K15bs12sMppkKOVeQ==\",\n             \"requires\": {\n-                \"vscode-jsonrpc\": \"8.0.0-next.6\",\n-                \"vscode-languageserver-types\": \"3.17.0-next.7\"\n+                \"vscode-jsonrpc\": \"8.0.0-next.7\",\n+                \"vscode-languageserver-types\": \"3.17.0-next.9\"\n             }\n         },\n         \"vscode-languageserver-types\": {\n-            \"version\": \"3.17.0-next.7\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-types/-/vscode-languageserver-types-3.17.0-next.7.tgz\",\n-            \"integrity\": \"sha512-KH4zdG1qBXxoso61ChgpeoZYyHGJo8bV7Jv4I+fwQ1Ryy59JAxoZ9GAbhR5TeeafHctLcg6RFvY3m8Jqfu17cg==\"\n+            \"version\": \"3.17.0-next.9\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-types/-/vscode-languageserver-types-3.17.0-next.9.tgz\",\n+            \"integrity\": \"sha512-9/PeDNPYduaoXRUzYpqmu4ZV9L01HGo0wH9FUt+sSHR7IXwA7xoXBfNUlv8gB9H0D2WwEmMomSy1NmhjKQyn3A==\"\n         },\n         \"which\": {\n             \"version\": \"2.0.2\","}, {"sha": "bbc7feef7ec7c325d1997a383d1d3731a42f44ef", "filename": "editors/code/package.json", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3d62671127daf1b1cc13e040b61f1ec715fd29b/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/d3d62671127daf1b1cc13e040b61f1ec715fd29b/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=d3d62671127daf1b1cc13e040b61f1ec715fd29b", "patch": "@@ -21,7 +21,7 @@\n         \"Programming Languages\"\n     ],\n     \"engines\": {\n-        \"vscode\": \"^1.65.0\"\n+        \"vscode\": \"^1.66.0\"\n     },\n     \"enabledApiProposals\": [],\n     \"scripts\": {\n@@ -36,13 +36,13 @@\n         \"test\": \"node ./out/tests/runTests.js\"\n     },\n     \"dependencies\": {\n-        \"vscode-languageclient\": \"8.0.0-next.12\",\n+        \"vscode-languageclient\": \"8.0.0-next.14\",\n         \"d3\": \"^7.3.0\",\n         \"d3-graphviz\": \"^4.1.0\"\n     },\n     \"devDependencies\": {\n         \"@types/node\": \"~14.17.5\",\n-        \"@types/vscode\": \"~1.65.0\",\n+        \"@types/vscode\": \"~1.66.0\",\n         \"@typescript-eslint/eslint-plugin\": \"^5.16.0\",\n         \"@typescript-eslint/parser\": \"^5.16.0\",\n         \"@vscode/test-electron\": \"^2.1.3\","}, {"sha": "3f7ddedddf3f724f4b65ba378496e367b1fa6030", "filename": "editors/code/src/inlay_hints.ts", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/bc56920757c248229c341fb90d44fe3d4767c491/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bc56920757c248229c341fb90d44fe3d4767c491/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=bc56920757c248229c341fb90d44fe3d4767c491", "patch": "@@ -1,55 +0,0 @@\n-import * as vscode from 'vscode';\n-import * as ra from './lsp_ext';\n-\n-import { Ctx, Disposable } from './ctx';\n-import { sendRequestWithRetry, isRustDocument } from './util';\n-\n-export function activateInlayHints(ctx: Ctx) {\n-    const maybeUpdater = {\n-        hintsProvider: null as Disposable | null,\n-        updateHintsEventEmitter: new vscode.EventEmitter<void>(),\n-\n-        async onConfigChange() {\n-            this.dispose();\n-\n-            const anyEnabled = ctx.config.inlayHints.typeHints\n-                || ctx.config.inlayHints.parameterHints\n-                || ctx.config.inlayHints.chainingHints\n-                || ctx.config.inlayHints.closureReturnTypeHints;\n-            const enabled = ctx.config.inlayHints.enable && anyEnabled;\n-            if (!enabled) return;\n-\n-            const event = this.updateHintsEventEmitter.event;\n-            this.hintsProvider = vscode.languages.registerInlayHintsProvider({ scheme: 'file', language: 'rust' }, new class implements vscode.InlayHintsProvider {\n-                onDidChangeInlayHints = event;\n-                async provideInlayHints(document: vscode.TextDocument, range: vscode.Range, token: vscode.CancellationToken): Promise<vscode.InlayHint[]> {\n-                    const request = { textDocument: { uri: document.uri.toString() }, range: { start: range.start, end: range.end } };\n-                    const hints = await sendRequestWithRetry(ctx.client, ra.inlayHints, request, token).catch(_ => null);\n-                    if (hints == null) {\n-                        return [];\n-                    } else {\n-                        return hints;\n-                    }\n-                }\n-            });\n-        },\n-\n-        onDidChangeTextDocument({ contentChanges, document }: vscode.TextDocumentChangeEvent) {\n-            if (contentChanges.length === 0 || !isRustDocument(document)) return;\n-            this.updateHintsEventEmitter.fire();\n-        },\n-\n-        dispose() {\n-            this.hintsProvider?.dispose();\n-            this.hintsProvider = null;\n-            this.updateHintsEventEmitter.dispose();\n-        },\n-    };\n-\n-    ctx.pushCleanup(maybeUpdater);\n-\n-    vscode.workspace.onDidChangeConfiguration(maybeUpdater.onConfigChange, maybeUpdater, ctx.subscriptions);\n-    vscode.workspace.onDidChangeTextDocument(maybeUpdater.onDidChangeTextDocument, maybeUpdater, ctx.subscriptions);\n-\n-    maybeUpdater.onConfigChange().catch(console.error);\n-}"}, {"sha": "61078b58c7a68420afca2c71561233b929a9ab03", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3d62671127daf1b1cc13e040b61f1ec715fd29b/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d3d62671127daf1b1cc13e040b61f1ec715fd29b/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=d3d62671127daf1b1cc13e040b61f1ec715fd29b", "patch": "@@ -2,7 +2,6 @@\n  * This file mirrors `crates/rust-analyzer/src/lsp_ext.rs` declarations.\n  */\n \n-import { InlayHint } from \"vscode\";\n import * as lc from \"vscode-languageclient\";\n \n export interface AnalyzerStatusParams {\n@@ -102,12 +101,6 @@ export interface TestInfo {\n \n export const relatedTests = new lc.RequestType<lc.TextDocumentPositionParams, TestInfo[], void>(\"rust-analyzer/relatedTests\");\n \n-export interface InlayHintsParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    range: lc.Range;\n-}\n-export const inlayHints = new lc.RequestType<InlayHintsParams, InlayHint[], void>(\"experimental/inlayHints\");\n-\n export interface SsrParams {\n     query: string;\n     parseOnly: boolean;"}, {"sha": "0451e4c3d6ea99c7aa5a23e035361f8dee63eac8", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3d62671127daf1b1cc13e040b61f1ec715fd29b/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d3d62671127daf1b1cc13e040b61f1ec715fd29b/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=d3d62671127daf1b1cc13e040b61f1ec715fd29b", "patch": "@@ -2,7 +2,6 @@ import * as vscode from 'vscode';\n import * as os from \"os\";\n \n import * as commands from './commands';\n-import { activateInlayHints } from './inlay_hints';\n import { Ctx } from './ctx';\n import { Config } from './config';\n import { log, isValidExecutable, isRustDocument } from './util';\n@@ -54,7 +53,6 @@ async function tryActivate(context: vscode.ExtensionContext) {\n     }\n     await initCommonContext(context, ctx);\n \n-    activateInlayHints(ctx);\n     warnAboutExtensionConflicts();\n \n     ctx.pushCleanup(configureLanguage());"}]}