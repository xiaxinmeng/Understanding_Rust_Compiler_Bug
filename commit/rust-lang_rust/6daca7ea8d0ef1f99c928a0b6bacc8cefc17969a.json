{"sha": "6daca7ea8d0ef1f99c928a0b6bacc8cefc17969a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYWNhN2VhOGQwZWYxZjk5YzkyOGEwYjZiYWNjOGNlZmMxNzk2OWE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-28T18:24:16Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-28T18:24:29Z"}, "message": "Actually perform take/drop on args (oh my!)", "tree": {"sha": "bf9232da53c0e4219648a8a8517848c5e1995c57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf9232da53c0e4219648a8a8517848c5e1995c57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6daca7ea8d0ef1f99c928a0b6bacc8cefc17969a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6daca7ea8d0ef1f99c928a0b6bacc8cefc17969a", "html_url": "https://github.com/rust-lang/rust/commit/6daca7ea8d0ef1f99c928a0b6bacc8cefc17969a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6daca7ea8d0ef1f99c928a0b6bacc8cefc17969a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91fe4ae0900c1ef361952a6c8e0647e70598741c", "url": "https://api.github.com/repos/rust-lang/rust/commits/91fe4ae0900c1ef361952a6c8e0647e70598741c", "html_url": "https://github.com/rust-lang/rust/commit/91fe4ae0900c1ef361952a6c8e0647e70598741c"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "75c7aa8448bb74acfdfabb0c76fdac7f7bb04dca", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6daca7ea8d0ef1f99c928a0b6bacc8cefc17969a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6daca7ea8d0ef1f99c928a0b6bacc8cefc17969a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=6daca7ea8d0ef1f99c928a0b6bacc8cefc17969a", "patch": "@@ -4317,7 +4317,9 @@ fn trans_bind_thunk(@local_ctxt cx,\n                              abi.closure_elt_ty_params,\n                              (i as int)));\n         bcx = lltyparam_ptr.bcx;\n-        llargs += vec(bcx.build.Load(lltyparam_ptr.val));\n+        auto td = bcx.build.Load(lltyparam_ptr.val);\n+        llargs += vec(td);\n+        fcx.lltydescs += vec(td);\n         i += 1u;\n     }\n \n@@ -4335,7 +4337,8 @@ fn trans_bind_thunk(@local_ctxt cx,\n         alt (arg) {\n \n             // Arg provided at binding time; thunk copies it from closure.\n-            case (some[@ast.expr](_)) {\n+            case (some[@ast.expr](?e)) {\n+                auto e_ty = ty.expr_ty(cx.ccx.tcx, e);\n                 auto bound_arg =\n                     GEP_tup_like(bcx, closure_ty, llclosure,\n                                  vec(0,\n@@ -4347,7 +4350,13 @@ fn trans_bind_thunk(@local_ctxt cx,\n                 auto val = bound_arg.val;\n \n                 if (out_arg.mode == ast.val) {\n-                    val = bcx.build.Load(val);\n+                    if (type_is_immediate(cx.ccx, e_ty)) {\n+                        val = bcx.build.Load(val);\n+                        bcx = take_ty(bcx, val, e_ty).bcx;\n+                    } else {\n+                        bcx = take_ty(bcx, val, e_ty).bcx;\n+                        val = bcx.build.Load(val);\n+                    }\n                 } else if (ty.type_contains_params(cx.ccx.tcx,\n                                                    out_arg.ty)) {\n                     check (out_arg.mode == ast.alias);\n@@ -4630,6 +4639,10 @@ fn trans_arg_expr(@block_ctxt cx,\n         bcx = re.bcx;\n     }\n \n+    if (arg.mode != ast.alias) {\n+        bcx = take_ty(bcx, val, e_ty).bcx;\n+    }\n+\n     if (ty.type_contains_params(cx.fcx.lcx.ccx.tcx, arg.ty)) {\n         auto lldestty = lldestty0;\n         if (arg.mode == ast.val) {\n@@ -5957,6 +5970,21 @@ fn copy_args_to_allocas(@fn_ctxt fcx,\n     fcx.llallocas = bcx.llbb;\n }\n \n+fn add_cleanups_for_args(@block_ctxt bcx,\n+                         vec[ast.arg] args,\n+                         vec[ty.arg] arg_tys) {\n+    let uint arg_n = 0u;\n+    for (ast.arg aarg in args) {\n+        if (aarg.mode != ast.alias) {\n+            auto argval = bcx.fcx.llargs.get(aarg.id);\n+            find_scope_cx(bcx).cleanups +=\n+                vec(clean(bind drop_slot(_, argval, arg_tys.(arg_n).ty)));\n+        }\n+        arg_n += 1u;\n+    }\n+}\n+\n+\n fn is_terminated(@block_ctxt cx) -> bool {\n     auto inst = llvm.LLVMGetLastInstruction(cx.llbb);\n     ret llvm.LLVMIsATerminatorInst(inst) as int != 0;\n@@ -6075,9 +6103,13 @@ fn trans_fn(@local_ctxt cx, &ast._fn f, ast.def_id fid,\n         }\n     }\n \n-    copy_args_to_allocas(fcx, f.decl.inputs, arg_tys_of_fn(fcx.lcx.ccx, ann));\n+    auto arg_tys = arg_tys_of_fn(fcx.lcx.ccx, ann);\n+    copy_args_to_allocas(fcx, f.decl.inputs, arg_tys);\n \n     auto bcx = new_top_block_ctxt(fcx);\n+\n+    add_cleanups_for_args(bcx, f.decl.inputs, arg_tys);\n+\n     auto lltop = bcx.llbb;\n \n     auto res = trans_block(bcx, f.body);"}]}