{"sha": "d04ca008e1c8ade73ec22976ff6a2a6a13ceabec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNGNhMDA4ZTFjOGFkZTczZWMyMjk3NmZmNmEyYTZhMTNjZWFiZWM=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-15T04:08:37Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-16T12:51:42Z"}, "message": "Remove unnecessary `clone()`s in bootstrap\n\nThe performance difference is negligible, but it makes me feel better.\n\nNote that this does not remove some clones in `config`, because it would\nrequire changing the logic around (and performance doesn't matter\nfor bootstrap).", "tree": {"sha": "6479dc44883bc4b5dd02cd4290871f713f5d7a8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6479dc44883bc4b5dd02cd4290871f713f5d7a8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d04ca008e1c8ade73ec22976ff6a2a6a13ceabec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d04ca008e1c8ade73ec22976ff6a2a6a13ceabec", "html_url": "https://github.com/rust-lang/rust/commit/d04ca008e1c8ade73ec22976ff6a2a6a13ceabec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d04ca008e1c8ade73ec22976ff6a2a6a13ceabec/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fae56971d8487088c0099c82c0a5ce1638b5f62", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fae56971d8487088c0099c82c0a5ce1638b5f62", "html_url": "https://github.com/rust-lang/rust/commit/5fae56971d8487088c0099c82c0a5ce1638b5f62"}], "stats": {"total": 79, "additions": 39, "deletions": 40}, "files": [{"sha": "319f81c4ebb046185105f602fc6e94e347189c00", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d04ca008e1c8ade73ec22976ff6a2a6a13ceabec/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04ca008e1c8ade73ec22976ff6a2a6a13ceabec/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=d04ca008e1c8ade73ec22976ff6a2a6a13ceabec", "patch": "@@ -1209,7 +1209,7 @@ impl<'a> Builder<'a> {\n             cargo.env(format!(\"CC_{}\", target.triple), &cc);\n \n             let cflags = self.cflags(target, GitRepo::Rustc).join(\" \");\n-            cargo.env(format!(\"CFLAGS_{}\", target.triple), cflags.clone());\n+            cargo.env(format!(\"CFLAGS_{}\", target.triple), &cflags);\n \n             if let Some(ar) = self.ar(target) {\n                 let ranlib = format!(\"{} s\", ar.display());"}, {"sha": "7e2cb7721865e512034a64f6fc6725a62639e391", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/d04ca008e1c8ade73ec22976ff6a2a6a13ceabec/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04ca008e1c8ade73ec22976ff6a2a6a13ceabec/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=d04ca008e1c8ade73ec22976ff6a2a6a13ceabec", "patch": "@@ -500,6 +500,7 @@ impl Config {\n \n     pub fn parse(args: &[String]) -> Config {\n         let flags = Flags::parse(&args);\n+\n         let mut config = Config::default_opts();\n         config.exclude = flags.exclude;\n         config.rustc_error_format = flags.rustc_error_format;\n@@ -551,14 +552,14 @@ impl Config {\n         let has_targets = build.target.is_some() || flags.target.is_some();\n         config.skip_only_host_steps = !has_hosts && has_targets;\n \n-        config.hosts = if let Some(arg_host) = flags.host.clone() {\n+        config.hosts = if let Some(arg_host) = flags.host {\n             arg_host\n         } else if let Some(file_host) = build.host {\n             file_host.iter().map(|h| TargetSelection::from_user(h)).collect()\n         } else {\n             vec![config.build]\n         };\n-        config.targets = if let Some(arg_target) = flags.target.clone() {\n+        config.targets = if let Some(arg_target) = flags.target {\n             arg_target\n         } else if let Some(file_target) = build.target {\n             file_target.iter().map(|h| TargetSelection::from_user(h)).collect()\n@@ -628,14 +629,14 @@ impl Config {\n \n         config.verbose = cmp::max(config.verbose, flags.verbose);\n \n-        if let Some(ref install) = toml.install {\n-            config.prefix = install.prefix.clone().map(PathBuf::from);\n-            config.sysconfdir = install.sysconfdir.clone().map(PathBuf::from);\n-            config.datadir = install.datadir.clone().map(PathBuf::from);\n-            config.docdir = install.docdir.clone().map(PathBuf::from);\n-            set(&mut config.bindir, install.bindir.clone().map(PathBuf::from));\n-            config.libdir = install.libdir.clone().map(PathBuf::from);\n-            config.mandir = install.mandir.clone().map(PathBuf::from);\n+        if let Some(install) = toml.install {\n+            config.prefix = install.prefix.map(PathBuf::from);\n+            config.sysconfdir = install.sysconfdir.map(PathBuf::from);\n+            config.datadir = install.datadir.map(PathBuf::from);\n+            config.docdir = install.docdir.map(PathBuf::from);\n+            set(&mut config.bindir, install.bindir.map(PathBuf::from));\n+            config.libdir = install.libdir.map(PathBuf::from);\n+            config.mandir = install.mandir.map(PathBuf::from);\n         }\n \n         // We want the llvm-skip-rebuild flag to take precedence over the\n@@ -658,7 +659,7 @@ impl Config {\n         let mut optimize = None;\n         let mut ignore_git = None;\n \n-        if let Some(ref llvm) = toml.llvm {\n+        if let Some(llvm) = toml.llvm {\n             match llvm.ccache {\n                 Some(StringOrBool::String(ref s)) => config.ccache = Some(s.to_string()),\n                 Some(StringOrBool::Bool(true)) => {\n@@ -726,7 +727,7 @@ impl Config {\n             }\n         }\n \n-        if let Some(ref rust) = toml.rust {\n+        if let Some(rust) = toml.rust {\n             debug = rust.debug;\n             debug_assertions = rust.debug_assertions;\n             debug_assertions_std = rust.debug_assertions_std;\n@@ -746,7 +747,7 @@ impl Config {\n             set(&mut config.test_compare_mode, rust.test_compare_mode);\n             set(&mut config.llvm_libunwind, rust.llvm_libunwind);\n             set(&mut config.backtrace, rust.backtrace);\n-            set(&mut config.channel, rust.channel.clone());\n+            set(&mut config.channel, rust.channel);\n             set(&mut config.rust_dist_src, rust.dist_src);\n             set(&mut config.verbose_tests, rust.verbose_tests);\n             // in the case \"false\" is set explicitly, do not overwrite the command line args\n@@ -757,9 +758,9 @@ impl Config {\n             set(&mut config.lld_enabled, rust.lld);\n             set(&mut config.llvm_tools_enabled, rust.llvm_tools);\n             config.rustc_parallel = rust.parallel_compiler.unwrap_or(false);\n-            config.rustc_default_linker = rust.default_linker.clone();\n-            config.musl_root = rust.musl_root.clone().map(PathBuf::from);\n-            config.save_toolstates = rust.save_toolstates.clone().map(PathBuf::from);\n+            config.rustc_default_linker = rust.default_linker;\n+            config.musl_root = rust.musl_root.map(PathBuf::from);\n+            config.save_toolstates = rust.save_toolstates.map(PathBuf::from);\n             set(&mut config.deny_warnings, flags.deny_warnings.or(rust.deny_warnings));\n             set(&mut config.backtrace_on_ice, rust.backtrace_on_ice);\n             set(&mut config.rust_verify_llvm_ir, rust.verify_llvm_ir);\n@@ -776,9 +777,9 @@ impl Config {\n             config.rust_codegen_units_std = rust.codegen_units_std.map(threads_from_config);\n         }\n \n-        if let Some(ref t) = toml.target {\n+        if let Some(t) = toml.target {\n             for (triple, cfg) in t {\n-                let mut target = Target::from_triple(triple);\n+                let mut target = Target::from_triple(&triple);\n \n                 if let Some(ref s) = cfg.llvm_config {\n                     target.llvm_config = Some(config.src.join(s));\n@@ -792,18 +793,18 @@ impl Config {\n                 if let Some(s) = cfg.no_std {\n                     target.no_std = s;\n                 }\n-                target.cc = cfg.cc.clone().map(PathBuf::from);\n-                target.cxx = cfg.cxx.clone().map(PathBuf::from);\n-                target.ar = cfg.ar.clone().map(PathBuf::from);\n-                target.ranlib = cfg.ranlib.clone().map(PathBuf::from);\n-                target.linker = cfg.linker.clone().map(PathBuf::from);\n+                target.cc = cfg.cc.map(PathBuf::from);\n+                target.cxx = cfg.cxx.map(PathBuf::from);\n+                target.ar = cfg.ar.map(PathBuf::from);\n+                target.ranlib = cfg.ranlib.map(PathBuf::from);\n+                target.linker = cfg.linker.map(PathBuf::from);\n                 target.crt_static = cfg.crt_static;\n-                target.musl_root = cfg.musl_root.clone().map(PathBuf::from);\n-                target.musl_libdir = cfg.musl_libdir.clone().map(PathBuf::from);\n-                target.wasi_root = cfg.wasi_root.clone().map(PathBuf::from);\n-                target.qemu_rootfs = cfg.qemu_rootfs.clone().map(PathBuf::from);\n+                target.musl_root = cfg.musl_root.map(PathBuf::from);\n+                target.musl_libdir = cfg.musl_libdir.map(PathBuf::from);\n+                target.wasi_root = cfg.wasi_root.map(PathBuf::from);\n+                target.qemu_rootfs = cfg.qemu_rootfs.map(PathBuf::from);\n \n-                config.target_config.insert(TargetSelection::from_user(triple), target);\n+                config.target_config.insert(TargetSelection::from_user(&triple), target);\n             }\n         }\n \n@@ -821,10 +822,10 @@ impl Config {\n             build_target.llvm_filecheck = Some(ci_llvm_bin.join(exe(\"FileCheck\", config.build)));\n         }\n \n-        if let Some(ref t) = toml.dist {\n-            config.dist_sign_folder = t.sign_folder.clone().map(PathBuf::from);\n-            config.dist_gpg_password_file = t.gpg_password_file.clone().map(PathBuf::from);\n-            config.dist_upload_addr = t.upload_addr.clone();\n+        if let Some(t) = toml.dist {\n+            config.dist_sign_folder = t.sign_folder.map(PathBuf::from);\n+            config.dist_gpg_password_file = t.gpg_password_file.map(PathBuf::from);\n+            config.dist_upload_addr = t.upload_addr;\n             set(&mut config.rust_dist_src, t.src_tarball);\n             set(&mut config.missing_tools, t.missing_tools);\n         }"}, {"sha": "0ae9f9712d569bb2dc55e65462c7d437ddf1552e", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d04ca008e1c8ade73ec22976ff6a2a6a13ceabec/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04ca008e1c8ade73ec22976ff6a2a6a13ceabec/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=d04ca008e1c8ade73ec22976ff6a2a6a13ceabec", "patch": "@@ -105,15 +105,13 @@ pub fn format(build: &Build, check: bool) {\n         eprintln!(\"./x.py fmt is not supported on this channel\");\n         std::process::exit(1);\n     });\n-    let src = build.src.clone();\n-    let walker = WalkBuilder::new(&build.src).types(matcher).overrides(ignore_fmt).build_parallel();\n+    let src = &build.src;\n+    let walker = WalkBuilder::new(src).types(matcher).overrides(ignore_fmt).build_parallel();\n     walker.run(|| {\n-        let src = src.clone();\n-        let rustfmt_path = rustfmt_path.clone();\n         Box::new(move |entry| {\n             let entry = t!(entry);\n             if entry.file_type().map_or(false, |t| t.is_file()) {\n-                rustfmt(&src, &rustfmt_path, &entry.path(), check);\n+                rustfmt(src, &rustfmt_path, &entry.path(), check);\n             }\n             ignore::WalkState::Continue\n         })"}, {"sha": "6826d177a4adeac4e73d74db025b48919240fc38", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d04ca008e1c8ade73ec22976ff6a2a6a13ceabec/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04ca008e1c8ade73ec22976ff6a2a6a13ceabec/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=d04ca008e1c8ade73ec22976ff6a2a6a13ceabec", "patch": "@@ -30,8 +30,8 @@ impl Finder {\n         Self { cache: HashMap::new(), path: env::var_os(\"PATH\").unwrap_or_default() }\n     }\n \n-    pub fn maybe_have<S: AsRef<OsStr>>(&mut self, cmd: S) -> Option<PathBuf> {\n-        let cmd: OsString = cmd.as_ref().into();\n+    pub fn maybe_have<S: Into<OsString>>(&mut self, cmd: S) -> Option<PathBuf> {\n+        let cmd: OsString = cmd.into();\n         let path = &self.path;\n         self.cache\n             .entry(cmd.clone())"}]}