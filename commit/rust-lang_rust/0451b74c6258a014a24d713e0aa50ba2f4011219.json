{"sha": "0451b74c6258a014a24d713e0aa50ba2f4011219", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NTFiNzRjNjI1OGEwMTRhMjRkNzEzZTBhYTUwYmEyZjQwMTEyMTk=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-03T23:47:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-03T23:47:47Z"}, "message": "Merge pull request #108 from oli-obk/packd\n\nimplement packed struct field access", "tree": {"sha": "350cca9b457af4756dceb4f14837dd4075ece8fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/350cca9b457af4756dceb4f14837dd4075ece8fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0451b74c6258a014a24d713e0aa50ba2f4011219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0451b74c6258a014a24d713e0aa50ba2f4011219", "html_url": "https://github.com/rust-lang/rust/commit/0451b74c6258a014a24d713e0aa50ba2f4011219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0451b74c6258a014a24d713e0aa50ba2f4011219/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29afc84f041d9e0f9682439c8c18589c6acc226e", "url": "https://api.github.com/repos/rust-lang/rust/commits/29afc84f041d9e0f9682439c8c18589c6acc226e", "html_url": "https://github.com/rust-lang/rust/commit/29afc84f041d9e0f9682439c8c18589c6acc226e"}, {"sha": "74d1a9a26c8a5aa3f2471ee784a2a0d12628c69b", "url": "https://api.github.com/repos/rust-lang/rust/commits/74d1a9a26c8a5aa3f2471ee784a2a0d12628c69b", "html_url": "https://github.com/rust-lang/rust/commit/74d1a9a26c8a5aa3f2471ee784a2a0d12628c69b"}], "stats": {"total": 261, "additions": 191, "deletions": 70}, "files": [{"sha": "e3708fd1bc662ec8d4fa81c0b533c886931df871", "filename": "Cargo.lock", "status": "modified", "additions": 46, "deletions": 55, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/0451b74c6258a014a24d713e0aa50ba2f4011219/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0451b74c6258a014a24d713e0aa50ba2f4011219/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0451b74c6258a014a24d713e0aa50ba2f4011219", "patch": "@@ -3,7 +3,7 @@ name = \"miri\"\n version = \"0.1.0\"\n dependencies = [\n  \"byteorder 1.0.0 (git+https://github.com/quininer/byteorder.git?branch=i128)\",\n- \"cargo_metadata 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo_metadata 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"compiletest_rs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -25,12 +25,12 @@ source = \"git+https://github.com/quininer/byteorder.git?branch=i128#ef51df297aa8\n \n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.1.0\"\n+version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 0.9.0-rc3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 0.9.0-rc3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 0.9.0-rc2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -39,12 +39,12 @@ version = \"0.2.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"dtoa\"\n-version = \"0.3.0\"\n+version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -53,12 +53,12 @@ version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 0.1.77 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"itoa\"\n-version = \"0.2.0\"\n+version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -72,12 +72,12 @@ dependencies = [\n \n [[package]]\n name = \"lazy_static\"\n-version = \"0.2.1\"\n+version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.16\"\n+version = \"0.2.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -90,15 +90,15 @@ name = \"log_settings\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"memchr\"\n version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -113,75 +113,67 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"regex\"\n-version = \"0.1.77\"\n+version = \"0.1.80\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex-syntax 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.3.5\"\n+version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-serialize\"\n-version = \"0.3.19\"\n+version = \"0.3.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"0.9.0-rc3\"\n+version = \"0.9.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"serde_codegen\"\n-version = \"0.9.0-rc3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"quote 0.3.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_codegen_internals 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.10.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"serde_codegen_internals\"\n-version = \"0.11.3\"\n+version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"syn 0.10.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.11.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"0.9.0-rc3\"\n+version = \"0.9.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde_codegen 0.9.0-rc3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.3.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_codegen_internals 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.11.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_json\"\n-version = \"0.9.0-rc2\"\n+version = \"0.9.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"dtoa 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itoa 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dtoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 0.9.0-rc3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"syn\"\n-version = \"0.10.6\"\n+version = \"0.11.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"quote 0.3.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -190,7 +182,7 @@ version = \"2.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -203,7 +195,7 @@ dependencies = [\n \n [[package]]\n name = \"unicode-xid\"\n-version = \"0.0.3\"\n+version = \"0.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -224,31 +216,30 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [metadata]\n \"checksum aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca972c2ea5f742bfce5687b9aef75506a764f61d37f8f649047846a9686ddb66\"\n \"checksum byteorder 1.0.0 (git+https://github.com/quininer/byteorder.git?branch=i128)\" = \"<none>\"\n-\"checksum cargo_metadata 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb382367db7c8eb427e622e46b99eff500fb63d8cf22dc2df6bcc5587112a993\"\n+\"checksum cargo_metadata 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"84e3b2d1646a740bb5aae05f7c0a7afd8ae40ea244f78bc36ac25fc8043a54a5\"\n \"checksum compiletest_rs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f3f344389765ad7bec166f64c1b39ed6dd2b54d81c4c5dd8af789169351d380c\"\n-\"checksum dtoa 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80e5dc7a4b2bbf348fb0afe68b3994daf1126223d2d9770221b8213c5e4565af\"\n+\"checksum dtoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87a527ff375a9761c677bb24a677ce48af8035ba260e01e831e4e4b04f945d2a\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n-\"checksum itoa 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff8f9e7653c775f2ef8016f4181eb3ad62fe8a710e5dd73d4060a5903a58022f\"\n+\"checksum itoa 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5537accdedeaa51526addad01e989bdaeb690e8e5fcca8dce893350912778636\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum lazy_static 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49247ec2a285bb3dcb23cbd9c35193c025e7251bfce77c1d5da97e6362dffe7f\"\n-\"checksum libc 0.2.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"408014cace30ee0f767b1c4517980646a573ec61a57957aeeabcac8ac0a02e8d\"\n+\"checksum lazy_static 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6abe0ee2e758cd6bc8a2cd56726359007748fbf4128da998b65d0b70f881e19b\"\n+\"checksum libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"684f330624d8c3784fb9558ca46c4ce488073a8d22450415c5eb4f4cfb0d11b5\"\n \"checksum log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab83497bf8bf4ed2a74259c1c802351fcd67a65baa86394b6ba73c36f4838054\"\n \"checksum log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d382732ea0fbc09790c4899db3255bdea0fc78b54bf234bd18a63bb603915b6\"\n \"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n \"checksum num-traits 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a16a42856a256b39c6d3484f097f6713e14feacd9bfb02290917904fae46c81c\"\n \"checksum quote 0.3.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e7b44fd83db28b83c1c58187159934906e5e955c812e211df413b76b03c909a5\"\n-\"checksum regex 0.1.77 (registry+https://github.com/rust-lang/crates.io-index)\" = \"64b03446c466d35b42f2a8b203c8e03ed8b91c0f17b56e1f84f7210a257aa665\"\n-\"checksum regex-syntax 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"279401017ae31cf4e15344aa3f085d0e2e5c1e70067289ef906906fdbe92c8fd\"\n-\"checksum rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6159e4e6e559c81bd706afe9c8fd68f547d3e851ce12e76b1de7914bab61691b\"\n-\"checksum serde 0.9.0-rc3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bfeedfddd5db4465d96959431d7f3d8d618a6052cdaf3fddb2e981e86a7ad04c\"\n-\"checksum serde_codegen 0.9.0-rc3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c89a070576ea7af4c609e72fcdd3d283e9c4c77946bd3fd7a07c43ee15b9c144\"\n-\"checksum serde_codegen_internals 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afad7924a009f859f380e4a2e3a509a845c2ac66435fcead74a4d983b21ae806\"\n-\"checksum serde_derive 0.9.0-rc3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1651978181e36fc90e1faaf91ae21fe74ffba77bc4ce4baf18b20fbb00e24cd4\"\n-\"checksum serde_json 0.9.0-rc2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6efad3dc934e5032a92ea163adb13c8414359da950a0f304c1897214f28d9444\"\n-\"checksum syn 0.10.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"17134635792e6a2361f53efbee798701796d8b5842c1c21b7cdb875e2950c8fc\"\n+\"checksum regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4fd4ace6a8cf7860714a2c2280d6c1f7e6a413486c13298bbc86fd3da019402f\"\n+\"checksum regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9ec002c35e86791825ed294b50008eea9ddfc8def4420124fbc6b08db834957\"\n+\"checksum rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"237546c689f20bb44980270c73c3b9edd0891c1be49cc1274406134a66d3957b\"\n+\"checksum serde 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff246881a798936bb630947e77add6c4b031fbf28312aca8e3d7c8949429e5f0\"\n+\"checksum serde_codegen_internals 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fbca5cba592a2874e48fb67a61479f5b86c0b84a86cf82fa81f947ea538e1449\"\n+\"checksum serde_derive 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7278d46eaf402b063c25288d0e4232029e9fb2f20e272a932b2c15a9fed7f32d\"\n+\"checksum serde_json 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d30dd31e5b6b2752ba87da4bb34edc01391bbab71563fc1e95cdd1e30dce16b8\"\n+\"checksum syn 0.11.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f4f94368aae82bb29656c98443a7026ca931a659e8d19dcdc41d6e273054e820\"\n \"checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03\"\n \"checksum thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5\"\n-\"checksum unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36dff09cafb4ec7c8cf0023eb0b686cb6ce65499116a12201c9e11840ca01beb\"\n+\"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n \"checksum utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1ca13c08c41c9c3e04224ed9ff80461d97e121589ff27c753a16cb10830ae0f\"\n \"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\""}, {"sha": "ff3f947e2d9648beca54e5783e9b5f6fe7165d4b", "filename": "src/eval_context.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0451b74c6258a014a24d713e0aa50ba2f4011219/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0451b74c6258a014a24d713e0aa50ba2f4011219/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=0451b74c6258a014a24d713e0aa50ba2f4011219", "patch": "@@ -443,6 +443,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 match *dest_layout {\n                     Univariant { ref variant, .. } => {\n                         let offsets = variant.offsets.iter().map(|s| s.bytes());\n+                        if variant.packed {\n+                            let ptr = self.force_allocation(dest)?.to_ptr_and_extra().0;\n+                            self.memory.mark_packed(ptr, variant.stride().bytes());\n+                        }\n                         self.assign_fields(dest, offsets, operands)?;\n                     }\n \n@@ -460,6 +464,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         if let mir::AggregateKind::Adt(adt_def, variant, _, _) = *kind {\n                             let discr_val = adt_def.variants[variant].disr_val.to_u128_unchecked();\n                             let discr_size = discr.size().bytes();\n+                            if variants[variant].packed {\n+                                let ptr = self.force_allocation(dest)?.to_ptr_and_extra().0;\n+                                self.memory.mark_packed(ptr, variants[variant].stride().bytes());\n+                            }\n \n                             self.assign_discr_and_fields(\n                                 dest,\n@@ -496,6 +504,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                     StructWrappedNullablePointer { nndiscr, ref nonnull, ref discrfield, .. } => {\n                         if let mir::AggregateKind::Adt(_, variant, _, _) = *kind {\n+                            if nonnull.packed {\n+                                let ptr = self.force_allocation(dest)?.to_ptr_and_extra().0;\n+                                self.memory.mark_packed(ptr, nonnull.stride().bytes());\n+                            }\n                             if nndiscr == variant as u64 {\n                                 let offsets = nonnull.offsets.iter().map(|s| s.bytes());\n                                 self.assign_fields(dest, offsets, operands)?;"}, {"sha": "df1f166c074e9cd3461297ac07409ec95ef3420a", "filename": "src/lvalue.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0451b74c6258a014a24d713e0aa50ba2f4011219/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0451b74c6258a014a24d713e0aa50ba2f4011219/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=0451b74c6258a014a24d713e0aa50ba2f4011219", "patch": "@@ -173,13 +173,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let field = field.index();\n \n                 use rustc::ty::layout::Layout::*;\n-                let offset = match *base_layout {\n-                    Univariant { ref variant, .. } => variant.offsets[field],\n+                let (offset, packed) = match *base_layout {\n+                    Univariant { ref variant, .. } => {\n+                        (variant.offsets[field], variant.packed)\n+                    },\n \n                     General { ref variants, .. } => {\n                         if let LvalueExtra::DowncastVariant(variant_idx) = base_extra {\n                             // +1 for the discriminant, which is field 0\n-                            variants[variant_idx].offsets[field + 1]\n+                            (variants[variant_idx].offsets[field + 1], variants[variant_idx].packed)\n                         } else {\n                             bug!(\"field access on enum had no variant index\");\n                         }\n@@ -191,7 +193,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n \n                     StructWrappedNullablePointer { ref nonnull, .. } => {\n-                        nonnull.offsets[field]\n+                        (nonnull.offsets[field], nonnull.packed)\n                     }\n \n                     UntaggedUnion { .. } => return Ok(base),\n@@ -200,13 +202,19 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let field = field as u64;\n                         assert!(field < count);\n                         let elem_size = element.size(&self.tcx.data_layout).bytes();\n-                        Size::from_bytes(field * elem_size)\n+                        (Size::from_bytes(field * elem_size), false)\n                     }\n \n                     _ => bug!(\"field access on non-product type: {:?}\", base_layout),\n                 };\n \n                 let ptr = base_ptr.offset(offset.bytes());\n+\n+                if packed {\n+                    let size = self.type_size(field_ty)?.expect(\"packed struct must be sized\");\n+                    self.memory.mark_packed(ptr, size);\n+                }\n+\n                 let extra = if self.type_is_sized(field_ty) {\n                     LvalueExtra::None\n                 } else {"}, {"sha": "cbfd881526815865596feb1b0232eb7aaa052a8b", "filename": "src/memory.rs", "status": "modified", "additions": 67, "deletions": 10, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/0451b74c6258a014a24d713e0aa50ba2f4011219/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0451b74c6258a014a24d713e0aa50ba2f4011219/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=0451b74c6258a014a24d713e0aa50ba2f4011219", "patch": "@@ -1,5 +1,5 @@\n use byteorder::{ReadBytesExt, WriteBytesExt, LittleEndian, BigEndian};\n-use std::collections::{btree_map, BTreeMap, HashMap, HashSet, VecDeque};\n+use std::collections::{btree_map, BTreeMap, HashMap, HashSet, VecDeque, BTreeSet};\n use std::{fmt, iter, ptr, mem, io};\n \n use rustc::hir::def_id::DefId;\n@@ -120,6 +120,16 @@ pub struct Memory<'a, 'tcx> {\n     function_alloc_cache: HashMap<FunctionDefinition<'tcx>, AllocId>,\n     next_id: AllocId,\n     pub layout: &'a TargetDataLayout,\n+    /// List of memory regions containing packed structures\n+    /// We mark memory as \"packed\" or \"unaligned\" for a single statement, and clear the marking afterwards.\n+    /// In the case where no packed structs are present, it's just a single emptyness check of a set\n+    /// instead of heavily influencing all memory access code as other solutions would.\n+    ///\n+    /// One disadvantage of this solution is the fact that you can cast a pointer to a packed struct\n+    /// to a pointer to a normal struct and if you access a field of both in the same MIR statement,\n+    /// the normal struct access will succeed even though it shouldn't.\n+    /// But even with mir optimizations, that situation is hard/impossible to produce.\n+    packed: BTreeSet<Entry>,\n }\n \n const ZST_ALLOC_ID: AllocId = AllocId(0);\n@@ -135,6 +145,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             layout,\n             memory_size: max_memory,\n             memory_usage: 0,\n+            packed: BTreeSet::new(),\n         }\n     }\n \n@@ -280,8 +291,28 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         self.layout.endian\n     }\n \n-    pub fn check_align(&self, ptr: Pointer, align: u64) -> EvalResult<'tcx, ()> {\n+    pub fn check_align(&self, ptr: Pointer, align: u64, len: u64) -> EvalResult<'tcx, ()> {\n         let alloc = self.get(ptr.alloc_id)?;\n+        // check whether the memory was marked as packed\n+        // we select all elements that have the correct alloc_id and are within\n+        // the range given by the offset into the allocation and the length\n+        let start = Entry {\n+            alloc_id: ptr.alloc_id,\n+            packed_start: 0,\n+            packed_end: ptr.offset + len,\n+        };\n+        let end = Entry {\n+            alloc_id: ptr.alloc_id,\n+            packed_start: ptr.offset + len,\n+            packed_end: 0,\n+        };\n+        for &Entry { packed_start, packed_end, .. } in self.packed.range(start..end) {\n+            // if the region we are checking is covered by a region in `packed`\n+            // ignore the actual alignment\n+            if packed_start <= ptr.offset && (ptr.offset + len) <= packed_end {\n+                return Ok(());\n+            }\n+        }\n         if alloc.align < align {\n             return Err(EvalError::AlignmentCheckFailed {\n                 has: alloc.align,\n@@ -297,6 +328,32 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             })\n         }\n     }\n+\n+    pub(crate) fn mark_packed(&mut self, ptr: Pointer, len: u64) {\n+        self.packed.insert(Entry {\n+            alloc_id: ptr.alloc_id,\n+            packed_start: ptr.offset,\n+            packed_end: ptr.offset + len,\n+        });\n+    }\n+\n+    pub(crate) fn clear_packed(&mut self) {\n+        self.packed.clear();\n+    }\n+}\n+\n+// The derived `Ord` impl sorts first by the first field, then, if the fields are the same\n+// by the second field, and if those are the same, too, then by the third field.\n+// This is exactly what we need for our purposes, since a range within an allocation\n+// will give us all `Entry`s that have that `AllocId`, and whose `packed_start` is <= than\n+// the one we're looking for, but not > the end of the range we're checking.\n+// At the same time the `packed_end` is irrelevant for the sorting and range searching, but used for the check.\n+// This kind of search breaks, if `packed_end < packed_start`, so don't do that!\n+#[derive(Eq, PartialEq, Ord, PartialOrd)]\n+struct Entry {\n+    alloc_id: AllocId,\n+    packed_start: u64,\n+    packed_end: u64,\n }\n \n /// Allocation accessors\n@@ -417,10 +474,11 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n \n /// Byte accessors\n impl<'a, 'tcx> Memory<'a, 'tcx> {\n-    fn get_bytes_unchecked(&self, ptr: Pointer, size: u64) -> EvalResult<'tcx, &[u8]> {\n+    fn get_bytes_unchecked(&self, ptr: Pointer, size: u64, align: u64) -> EvalResult<'tcx, &[u8]> {\n         if size == 0 {\n             return Ok(&[]);\n         }\n+        self.check_align(ptr, align, size)?;\n         let alloc = self.get(ptr.alloc_id)?;\n         let allocation_size = alloc.bytes.len() as u64;\n         if ptr.offset + size > allocation_size {\n@@ -432,10 +490,11 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         Ok(&alloc.bytes[offset..offset + size as usize])\n     }\n \n-    fn get_bytes_unchecked_mut(&mut self, ptr: Pointer, size: u64) -> EvalResult<'tcx, &mut [u8]> {\n+    fn get_bytes_unchecked_mut(&mut self, ptr: Pointer, size: u64, align: u64) -> EvalResult<'tcx, &mut [u8]> {\n         if size == 0 {\n             return Ok(&mut []);\n         }\n+        self.check_align(ptr, align, size)?;\n         let alloc = self.get_mut(ptr.alloc_id)?;\n         let allocation_size = alloc.bytes.len() as u64;\n         if ptr.offset + size > allocation_size {\n@@ -451,22 +510,20 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         if size == 0 {\n             return Ok(&[]);\n         }\n-        self.check_align(ptr, align)?;\n         if self.relocations(ptr, size)?.count() != 0 {\n             return Err(EvalError::ReadPointerAsBytes);\n         }\n         self.check_defined(ptr, size)?;\n-        self.get_bytes_unchecked(ptr, size)\n+        self.get_bytes_unchecked(ptr, size, align)\n     }\n \n     fn get_bytes_mut(&mut self, ptr: Pointer, size: u64, align: u64) -> EvalResult<'tcx, &mut [u8]> {\n         if size == 0 {\n             return Ok(&mut []);\n         }\n-        self.check_align(ptr, align)?;\n         self.clear_relocations(ptr, size)?;\n         self.mark_definedness(ptr, size, true)?;\n-        self.get_bytes_unchecked_mut(ptr, size)\n+        self.get_bytes_unchecked_mut(ptr, size, align)\n     }\n }\n \n@@ -501,7 +558,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         }\n         self.check_relocation_edges(src, size)?;\n \n-        let src_bytes = self.get_bytes_unchecked(src, size)?.as_ptr();\n+        let src_bytes = self.get_bytes_unchecked(src, size, align)?.as_ptr();\n         let dest_bytes = self.get_bytes_mut(dest, size, align)?.as_mut_ptr();\n \n         // SAFE: The above indexing would have panicked if there weren't at least `size` bytes\n@@ -558,7 +615,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         let size = self.pointer_size();\n         self.check_defined(ptr, size)?;\n         let endianess = self.endianess();\n-        let bytes = self.get_bytes_unchecked(ptr, size)?;\n+        let bytes = self.get_bytes_unchecked(ptr, size, size)?;\n         let offset = read_target_uint(endianess, bytes).unwrap();\n         assert_eq!(offset as u64 as u128, offset);\n         let offset = offset as u64;"}, {"sha": "5b0e648d591d0dcb7fe94a1ba034c519190ac8b0", "filename": "src/step.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0451b74c6258a014a24d713e0aa50ba2f4011219/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0451b74c6258a014a24d713e0aa50ba2f4011219/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=0451b74c6258a014a24d713e0aa50ba2f4011219", "patch": "@@ -28,6 +28,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     /// Returns true as long as there are more things to do.\n     pub fn step(&mut self) -> EvalResult<'tcx, bool> {\n+        // see docs on the `Memory::packed` field for why we do this\n+        self.memory.clear_packed();\n         self.inc_step_counter_and_check_limit(1)?;\n         if self.stack.is_empty() {\n             return Ok(false);"}, {"sha": "119225f3e369d1cd679f9b9099bed7e4806588bc", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0451b74c6258a014a24d713e0aa50ba2f4011219/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0451b74c6258a014a24d713e0aa50ba2f4011219/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=0451b74c6258a014a24d713e0aa50ba2f4011219", "patch": "@@ -0,0 +1,16 @@\n+#![allow(dead_code, unused_variables)]\n+\n+#[repr(packed)]\n+struct Foo {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn main() {\n+    let foo = Foo {\n+        x: 42,\n+        y: 99,\n+    };\n+    let p = &foo.x;\n+    let i = *p; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n+}\n\\ No newline at end of file"}, {"sha": "5761f23b7dd41a6dc8b4648b58a13df1e9fb0b69", "filename": "tests/compile-fail/reference_to_packed_unsafe.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0451b74c6258a014a24d713e0aa50ba2f4011219/tests%2Fcompile-fail%2Freference_to_packed_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0451b74c6258a014a24d713e0aa50ba2f4011219/tests%2Fcompile-fail%2Freference_to_packed_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed_unsafe.rs?ref=0451b74c6258a014a24d713e0aa50ba2f4011219", "patch": "@@ -0,0 +1,16 @@\n+#![allow(dead_code, unused_variables)]\n+\n+#[repr(packed)]\n+struct Foo {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn main() {\n+    let foo = Foo {\n+        x: 42,\n+        y: 99,\n+    };\n+    let p: *const i32 = &foo.x;\n+    let x = unsafe { *p + foo.x }; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n+}"}, {"sha": "5b3f09c0dd096bfd264939d5e6d799a53f663699", "filename": "tests/run-pass/packed_struct.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0451b74c6258a014a24d713e0aa50ba2f4011219/tests%2Frun-pass%2Fpacked_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0451b74c6258a014a24d713e0aa50ba2f4011219/tests%2Frun-pass%2Fpacked_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpacked_struct.rs?ref=0451b74c6258a014a24d713e0aa50ba2f4011219", "patch": "@@ -0,0 +1,19 @@\n+#[repr(packed)]\n+struct S {\n+    a: i32,\n+    b: i64,\n+}\n+\n+fn main() {\n+    let x = S {\n+        a: 42,\n+        b: 99,\n+    };\n+    let a = x.a;\n+    let b = x.b;\n+    assert_eq!(a, 42);\n+    assert_eq!(b, 99);\n+    // can't do `assert_eq!(x.a, 42)`, because `assert_eq!` takes a reference\n+    assert_eq!({x.a}, 42);\n+    assert_eq!({x.b}, 99);\n+}"}]}