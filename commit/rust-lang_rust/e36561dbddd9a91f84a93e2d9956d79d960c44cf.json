{"sha": "e36561dbddd9a91f84a93e2d9956d79d960c44cf", "node_id": "C_kwDOAAsO6NoAKGUzNjU2MWRiZGRkOWE5MWY4NGE5M2UyZDk5NTZkNzlkOTYwYzQ0Y2Y", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T21:58:17Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T22:05:42Z"}, "message": "Remove a Clean impl for a tuple (9)\n\nThis was the last one!", "tree": {"sha": "91a63a1e4ab1e79c5a46d747e63cfd96aa21fe0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91a63a1e4ab1e79c5a46d747e63cfd96aa21fe0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e36561dbddd9a91f84a93e2d9956d79d960c44cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e36561dbddd9a91f84a93e2d9956d79d960c44cf", "html_url": "https://github.com/rust-lang/rust/commit/e36561dbddd9a91f84a93e2d9956d79d960c44cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e36561dbddd9a91f84a93e2d9956d79d960c44cf/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de5ea80437fbeb5fe0c80547f53bc5a48bc129be", "url": "https://api.github.com/repos/rust-lang/rust/commits/de5ea80437fbeb5fe0c80547f53bc5a48bc129be", "html_url": "https://github.com/rust-lang/rust/commit/de5ea80437fbeb5fe0c80547f53bc5a48bc129be"}], "stats": {"total": 91, "additions": 48, "deletions": 43}, "files": [{"sha": "f11fa0295c52220c9f7d9546973245dfff3d6d12", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 48, "deletions": 43, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/e36561dbddd9a91f84a93e2d9956d79d960c44cf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36561dbddd9a91f84a93e2d9956d79d960c44cf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e36561dbddd9a91f84a93e2d9956d79d960c44cf", "patch": "@@ -52,7 +52,11 @@ crate trait Clean<T> {\n impl Clean<Item> for DocModule<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n         let mut items: Vec<Item> = vec![];\n-        items.extend(self.foreigns.iter().map(|x| x.clean(cx)));\n+        items.extend(\n+            self.foreigns\n+                .iter()\n+                .map(|(item, renamed)| clean_maybe_renamed_foreign_item(cx, item, *renamed)),\n+        );\n         items.extend(self.mods.iter().map(|x| x.clean(cx)));\n         items.extend(\n             self.items\n@@ -2030,50 +2034,51 @@ fn clean_use_statement(\n     vec![Item::from_def_id_and_parts(import.def_id.to_def_id(), None, ImportItem(inner), cx)]\n }\n \n-impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Symbol>) {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n-        let (item, renamed) = self;\n-        let def_id = item.def_id.to_def_id();\n-        cx.with_param_env(def_id, |cx| {\n-            let kind = match item.kind {\n-                hir::ForeignItemKind::Fn(decl, names, ref generics) => {\n-                    let abi = cx.tcx.hir().get_foreign_abi(item.hir_id());\n-                    let (generics, decl) = enter_impl_trait(cx, |cx| {\n-                        // NOTE: generics must be cleaned before args\n-                        let generics = generics.clean(cx);\n-                        let args = clean_args_from_types_and_names(cx, decl.inputs, names);\n-                        let decl = clean_fn_decl_with_args(cx, decl, args);\n-                        (generics, decl)\n-                    });\n-                    ForeignFunctionItem(Function {\n-                        decl,\n-                        generics,\n-                        header: hir::FnHeader {\n-                            unsafety: if abi == Abi::RustIntrinsic {\n-                                intrinsic_operation_unsafety(item.ident.name)\n-                            } else {\n-                                hir::Unsafety::Unsafe\n-                            },\n-                            abi,\n-                            constness: hir::Constness::NotConst,\n-                            asyncness: hir::IsAsync::NotAsync,\n+fn clean_maybe_renamed_foreign_item(\n+    cx: &mut DocContext<'_>,\n+    item: &hir::ForeignItem<'_>,\n+    renamed: Option<Symbol>,\n+) -> Item {\n+    let def_id = item.def_id.to_def_id();\n+    cx.with_param_env(def_id, |cx| {\n+        let kind = match item.kind {\n+            hir::ForeignItemKind::Fn(decl, names, ref generics) => {\n+                let abi = cx.tcx.hir().get_foreign_abi(item.hir_id());\n+                let (generics, decl) = enter_impl_trait(cx, |cx| {\n+                    // NOTE: generics must be cleaned before args\n+                    let generics = generics.clean(cx);\n+                    let args = clean_args_from_types_and_names(cx, decl.inputs, names);\n+                    let decl = clean_fn_decl_with_args(cx, decl, args);\n+                    (generics, decl)\n+                });\n+                ForeignFunctionItem(Function {\n+                    decl,\n+                    generics,\n+                    header: hir::FnHeader {\n+                        unsafety: if abi == Abi::RustIntrinsic {\n+                            intrinsic_operation_unsafety(item.ident.name)\n+                        } else {\n+                            hir::Unsafety::Unsafe\n                         },\n-                    })\n-                }\n-                hir::ForeignItemKind::Static(ref ty, mutability) => {\n-                    ForeignStaticItem(Static { type_: ty.clean(cx), mutability, expr: None })\n-                }\n-                hir::ForeignItemKind::Type => ForeignTypeItem,\n-            };\n+                        abi,\n+                        constness: hir::Constness::NotConst,\n+                        asyncness: hir::IsAsync::NotAsync,\n+                    },\n+                })\n+            }\n+            hir::ForeignItemKind::Static(ref ty, mutability) => {\n+                ForeignStaticItem(Static { type_: ty.clean(cx), mutability, expr: None })\n+            }\n+            hir::ForeignItemKind::Type => ForeignTypeItem,\n+        };\n \n-            Item::from_hir_id_and_parts(\n-                item.hir_id(),\n-                Some(renamed.unwrap_or(item.ident.name)),\n-                kind,\n-                cx,\n-            )\n-        })\n-    }\n+        Item::from_hir_id_and_parts(\n+            item.hir_id(),\n+            Some(renamed.unwrap_or(item.ident.name)),\n+            kind,\n+            cx,\n+        )\n+    })\n }\n \n impl Clean<TypeBinding> for hir::TypeBinding<'_> {"}]}