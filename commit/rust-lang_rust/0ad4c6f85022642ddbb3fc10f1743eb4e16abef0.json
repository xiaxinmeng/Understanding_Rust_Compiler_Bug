{"sha": "0ad4c6f85022642ddbb3fc10f1743eb4e16abef0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZDRjNmY4NTAyMjY0MmRkYmIzZmMxMGYxNzQzZWI0ZTE2YWJlZjA=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-09-10T13:54:48Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-10-24T12:59:06Z"}, "message": "Add InstanceDef::VtableShim.", "tree": {"sha": "811a0fcefcef0ecbb3e04f2727c536c41461144e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/811a0fcefcef0ecbb3e04f2727c536c41461144e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0", "html_url": "https://github.com/rust-lang/rust/commit/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f99911a4a0bead7dd1f9ef2f90442844434cc391", "url": "https://api.github.com/repos/rust-lang/rust/commits/f99911a4a0bead7dd1f9ef2f90442844434cc391", "html_url": "https://github.com/rust-lang/rust/commit/f99911a4a0bead7dd1f9ef2f90442844434cc391"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "e65f4fc57e632f7bc16d9d1c8e1c8b05f9d3066a", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=0ad4c6f85022642ddbb3fc10f1743eb4e16abef0", "patch": "@@ -1011,6 +1011,9 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for ty::InstanceDef<'gcx> {\n             ty::InstanceDef::Item(def_id) => {\n                 def_id.hash_stable(hcx, hasher);\n             }\n+            ty::InstanceDef::VtableShim(def_id) => {\n+                def_id.hash_stable(hcx, hasher);\n+            }\n             ty::InstanceDef::Intrinsic(def_id) => {\n                 def_id.hash_stable(hcx, hasher);\n             }"}, {"sha": "9410bea2182bec8e942d6424ddc3263b0d983634", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=0ad4c6f85022642ddbb3fc10f1743eb4e16abef0", "patch": "@@ -27,6 +27,9 @@ pub enum InstanceDef<'tcx> {\n     Item(DefId),\n     Intrinsic(DefId),\n \n+    /// `<T as Trait>::method` where `method` receives unsizeable `self: Self`.\n+    VtableShim(DefId),\n+\n     /// \\<fn() as FnTrait>::call_*\n     /// def-id is FnTrait::call_*\n     FnPtrShim(DefId, Ty<'tcx>),\n@@ -63,6 +66,7 @@ impl<'tcx> InstanceDef<'tcx> {\n     pub fn def_id(&self) -> DefId {\n         match *self {\n             InstanceDef::Item(def_id) |\n+            InstanceDef::VtableShim(def_id) |\n             InstanceDef::FnPtrShim(def_id, _) |\n             InstanceDef::Virtual(def_id, _) |\n             InstanceDef::Intrinsic(def_id, ) |\n@@ -120,6 +124,9 @@ impl<'tcx> fmt::Display for Instance<'tcx> {\n         ppaux::parameterized(f, self.substs, self.def_id(), &[])?;\n         match self.def {\n             InstanceDef::Item(_) => Ok(()),\n+            InstanceDef::VtableShim(_) => {\n+                write!(f, \" - shim(vtable)\")\n+            }\n             InstanceDef::Intrinsic(_) => {\n                 write!(f, \" - intrinsic\")\n             }"}, {"sha": "4f3d96006fcc82e30d6134288452a7c007d184d7", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=0ad4c6f85022642ddbb3fc10f1743eb4e16abef0", "patch": "@@ -2759,6 +2759,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::InstanceDef::Item(did) => {\n                 self.optimized_mir(did)\n             }\n+            ty::InstanceDef::VtableShim(..) |\n             ty::InstanceDef::Intrinsic(..) |\n             ty::InstanceDef::FnPtrShim(..) |\n             ty::InstanceDef::Virtual(..) |"}, {"sha": "46fe4e57c1e6eb4392c1b75e740d2f379e3c6789", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=0ad4c6f85022642ddbb3fc10f1743eb4e16abef0", "patch": "@@ -624,6 +624,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n         match *self {\n             ty::InstanceDef::Item(def_id) =>\n                 Some(ty::InstanceDef::Item(def_id)),\n+            ty::InstanceDef::VtableShim(def_id) =>\n+                Some(ty::InstanceDef::VtableShim(def_id)),\n             ty::InstanceDef::Intrinsic(def_id) =>\n                 Some(ty::InstanceDef::Intrinsic(def_id)),\n             ty::InstanceDef::FnPtrShim(def_id, ref ty) =>\n@@ -793,6 +795,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n             substs: self.substs.fold_with(folder),\n             def: match self.def {\n                 Item(did) => Item(did.fold_with(folder)),\n+                VtableShim(did) => VtableShim(did.fold_with(folder)),\n                 Intrinsic(did) => Intrinsic(did.fold_with(folder)),\n                 FnPtrShim(did, ty) => FnPtrShim(\n                     did.fold_with(folder),\n@@ -821,7 +824,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n         use ty::InstanceDef::*;\n         self.substs.visit_with(visitor) ||\n         match self.def {\n-            Item(did) | Intrinsic(did) | Virtual(did, _) => {\n+            Item(did) | VtableShim(did) | Intrinsic(did) | Virtual(did, _) => {\n                 did.visit_with(visitor)\n             },\n             FnPtrShim(did, ty) | CloneShim(did, ty) => {"}, {"sha": "ee84e49022f1b9cfe6cafd12f93078dbe4ce4b00", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=0ad4c6f85022642ddbb3fc10f1743eb4e16abef0", "patch": "@@ -256,6 +256,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 self.dump_place(*dest);\n                 Ok(())\n             }\n+            ty::InstanceDef::VtableShim(..) |\n             ty::InstanceDef::ClosureOnceShim { .. } |\n             ty::InstanceDef::FnPtrShim(..) |\n             ty::InstanceDef::DropGlue(..) |"}, {"sha": "66bf1b628ce5b5327991253379df739c16075baa", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=0ad4c6f85022642ddbb3fc10f1743eb4e16abef0", "patch": "@@ -705,6 +705,7 @@ fn visit_instance_use<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 bug!(\"intrinsic {:?} being reified\", def_id);\n             }\n         }\n+        ty::InstanceDef::VtableShim(..) |\n         ty::InstanceDef::Virtual(..) |\n         ty::InstanceDef::DropGlue(_, None) => {\n             // don't need to emit shim if we are calling directly.\n@@ -731,6 +732,7 @@ fn should_monomorphize_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance:\n                                          -> bool {\n     let def_id = match instance.def {\n         ty::InstanceDef::Item(def_id) => def_id,\n+        ty::InstanceDef::VtableShim(..) |\n         ty::InstanceDef::ClosureOnceShim { .. } |\n         ty::InstanceDef::Virtual(..) |\n         ty::InstanceDef::FnPtrShim(..) |"}, {"sha": "f0a35ca7adbd21a02f15b97316bab98d80988dc8", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=0ad4c6f85022642ddbb3fc10f1743eb4e16abef0", "patch": "@@ -180,6 +180,7 @@ pub trait CodegenUnitExt<'tcx> {\n                         InstanceDef::Item(def_id) => {\n                             tcx.hir.as_local_node_id(def_id)\n                         }\n+                        InstanceDef::VtableShim(..) |\n                         InstanceDef::Intrinsic(..) |\n                         InstanceDef::FnPtrShim(..) |\n                         InstanceDef::Virtual(..) |\n@@ -422,6 +423,7 @@ fn mono_item_visibility(\n         InstanceDef::Item(def_id) => def_id,\n \n         // These are all compiler glue and such, never exported, always hidden.\n+        InstanceDef::VtableShim(..) |\n         InstanceDef::FnPtrShim(..) |\n         InstanceDef::Virtual(..) |\n         InstanceDef::Intrinsic(..) |\n@@ -756,6 +758,7 @@ fn characteristic_def_id_of_mono_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         MonoItem::Fn(instance) => {\n             let def_id = match instance.def {\n                 ty::InstanceDef::Item(def_id) => def_id,\n+                ty::InstanceDef::VtableShim(..) |\n                 ty::InstanceDef::FnPtrShim(..) |\n                 ty::InstanceDef::ClosureOnceShim { .. } |\n                 ty::InstanceDef::Intrinsic(..) |"}, {"sha": "867b630bb666b0347b1b1db1fb02d7010fbf290f", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad4c6f85022642ddbb3fc10f1743eb4e16abef0/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=0ad4c6f85022642ddbb3fc10f1743eb4e16abef0", "patch": "@@ -43,6 +43,9 @@ fn make_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut result = match instance {\n         ty::InstanceDef::Item(..) =>\n             bug!(\"item {:?} passed to make_shim\", instance),\n+        ty::InstanceDef::VtableShim(..) => {\n+            unimplemented!(\"make_shim({:?})\", instance);\n+        }\n         ty::InstanceDef::FnPtrShim(def_id, ty) => {\n             let trait_ = tcx.trait_of_item(def_id).unwrap();\n             let adjustment = match tcx.lang_items().fn_trait_kind(trait_) {"}]}