{"sha": "a29a6e0db9f2cd702c8bf3157234e5410c905c70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyOWE2ZTBkYjlmMmNkNzAyYzhiZjMxNTcyMzRlNTQxMGM5MDVjNzA=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-05T06:45:54Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-05T06:45:54Z"}, "message": "Refactor integer reading and writing.", "tree": {"sha": "6c5acb2721337fe7480ecc0993ccc584e16e8227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c5acb2721337fe7480ecc0993ccc584e16e8227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a29a6e0db9f2cd702c8bf3157234e5410c905c70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a29a6e0db9f2cd702c8bf3157234e5410c905c70", "html_url": "https://github.com/rust-lang/rust/commit/a29a6e0db9f2cd702c8bf3157234e5410c905c70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a29a6e0db9f2cd702c8bf3157234e5410c905c70/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6686944ded5a3a2a436ddcdb2da5b39ea9debf9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6686944ded5a3a2a436ddcdb2da5b39ea9debf9d", "html_url": "https://github.com/rust-lang/rust/commit/6686944ded5a3a2a436ddcdb2da5b39ea9debf9d"}], "stats": {"total": 67, "additions": 36, "deletions": 31}, "files": [{"sha": "9dc35703c7b30212c9aedd8cd95ee07009da2826", "filename": "src/interpreter.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a29a6e0db9f2cd702c8bf3157234e5410c905c70/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29a6e0db9f2cd702c8bf3157234e5410c905c70/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=a29a6e0db9f2cd702c8bf3157234e5410c905c70", "patch": "@@ -87,12 +87,6 @@ mod memory {\n             }\n         }\n \n-        pub fn allocate_int(&mut self, n: i64) -> AllocId {\n-            let id = self.allocate_raw(mem::size_of::<i64>());\n-            byteorder::NativeEndian::write_i64(&mut self.get_mut(id).unwrap().bytes, n);\n-            id\n-        }\n-\n         pub fn get(&self, id: AllocId) -> EvalResult<&Allocation> {\n             self.alloc_map.get(&id.0).ok_or(EvalError::DanglingPointerDeref)\n         }\n@@ -130,6 +124,16 @@ mod memory {\n \n             Ok(())\n         }\n+\n+        pub fn read_int(&self, ptr: &Pointer) -> EvalResult<i64> {\n+            let bytes = try!(self.get_bytes(ptr, Repr::Int.size()));\n+            Ok(byteorder::NativeEndian::read_i64(bytes))\n+        }\n+\n+        pub fn write_int(&mut self, ptr: &Pointer, n: i64) -> EvalResult<()> {\n+            let bytes = try!(self.get_bytes_mut(ptr, Repr::Int.size()));\n+            Ok(byteorder::NativeEndian::write_i64(bytes, n))\n+        }\n     }\n \n     impl Allocation {\n@@ -170,7 +174,7 @@ mod memory {\n \n         pub fn size(&self) -> usize {\n             match *self {\n-                Repr::Int => 8,\n+                Repr::Int => mem::size_of::<i64>(),\n                 Repr::Aggregate { size, .. } => size,\n             }\n         }\n@@ -470,11 +474,12 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n         // }\n     }\n \n-    fn eval_binary_op(&mut self, bin_op: mir::BinOp, left: Pointer, right: Pointer, dest: &Pointer) {\n-        match (left.repr, right.repr, &dest.repr) {\n-            (Repr::Int, Repr::Int, &Repr::Int) => {\n-                let l = byteorder::NativeEndian::read_i64(&self.memory.get(left.alloc_id).unwrap().bytes);\n-                let r = byteorder::NativeEndian::read_i64(&self.memory.get(right.alloc_id).unwrap().bytes);\n+    fn eval_binary_op(&mut self, bin_op: mir::BinOp, left: Pointer, right: Pointer, dest: &Pointer)\n+            -> EvalResult<()> {\n+        match (&left.repr, &right.repr, &dest.repr) {\n+            (&Repr::Int, &Repr::Int, &Repr::Int) => {\n+                let l = try!(self.memory.read_int(&left));\n+                let r = try!(self.memory.read_int(&right));\n                 let n = match bin_op {\n                     mir::BinOp::Add    => l + r,\n                     mir::BinOp::Sub    => l - r,\n@@ -494,9 +499,9 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                     // mir::BinOp::Ge     => Value::Bool(l >= r),\n                     // mir::BinOp::Gt     => Value::Bool(l > r),\n                 };\n-                byteorder::NativeEndian::write_i64(&mut self.memory.get_mut(dest.alloc_id).unwrap().bytes, n);\n+                self.memory.write_int(dest, n)\n             }\n-            (ref l, ref r, ref o) =>\n+            (l, r, o) =>\n                 panic!(\"unhandled binary operation: {:?}({:?}, {:?}) into {:?}\", bin_op, l, r, o),\n         }\n     }\n@@ -511,18 +516,18 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n             mir::Rvalue::BinaryOp(bin_op, ref left, ref right) => {\n                 let left_ptr = try!(self.operand_to_ptr(left));\n                 let right_ptr = try!(self.operand_to_ptr(right));\n-                self.eval_binary_op(bin_op, left_ptr, right_ptr, dest);\n+                try!(self.eval_binary_op(bin_op, left_ptr, right_ptr, dest));\n             }\n \n             mir::Rvalue::UnaryOp(un_op, ref operand) => {\n                 let ptr = try!(self.operand_to_ptr(operand));\n-                let m = byteorder::NativeEndian::read_i64(&self.memory.get(ptr.alloc_id).unwrap().bytes);\n+                let m = try!(self.memory.read_int(&ptr));\n                 let n = match (un_op, ptr.repr) {\n                     (mir::UnOp::Not, Repr::Int) => !m,\n                     (mir::UnOp::Neg, Repr::Int) => -m,\n                     (_, ref p) => panic!(\"unhandled binary operation: {:?}({:?})\", un_op, p),\n                 };\n-                byteorder::NativeEndian::write_i64(&mut self.memory.get_mut(dest.alloc_id).unwrap().bytes, n);\n+                try!(self.memory.write_int(dest, n));\n             }\n \n             mir::Rvalue::Aggregate(mir::AggregateKind::Tuple, ref operands) => {\n@@ -573,7 +578,7 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n \n             mir::Operand::Constant(ref constant) => {\n                 match constant.literal {\n-                    mir::Literal::Value { ref value } => Ok(self.const_to_ptr(value)),\n+                    mir::Literal::Value { ref value } => self.const_to_ptr(value),\n \n                     mir::Literal::Item { def_id, kind, .. } => match kind {\n                         // mir::ItemKind::Function | mir::ItemKind::Method => Value::Func(def_id),\n@@ -584,14 +589,14 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n         }\n     }\n \n-    fn const_to_ptr(&mut self, const_val: &const_eval::ConstVal) -> Pointer {\n+    fn const_to_ptr(&mut self, const_val: &const_eval::ConstVal) -> EvalResult<Pointer> {\n         match *const_val {\n             const_eval::ConstVal::Float(_f)         => unimplemented!(),\n-            const_eval::ConstVal::Int(i)            => Pointer {\n-                alloc_id: self.memory.allocate_int(i),\n-                offset: 0,\n-                repr: Repr::Int,\n-            },\n+            const_eval::ConstVal::Int(n) => {\n+                let ptr = self.memory.allocate(Repr::Int);\n+                try!(self.memory.write_int(&ptr, n));\n+                Ok(ptr)\n+            }\n             const_eval::ConstVal::Uint(_u)          => unimplemented!(),\n             const_eval::ConstVal::Str(ref _s)       => unimplemented!(),\n             const_eval::ConstVal::ByteStr(ref _bs)  => unimplemented!(),"}, {"sha": "68f639b9965e629397e4fbbe8c552285b86752ad", "filename": "test/new_values.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a29a6e0db9f2cd702c8bf3157234e5410c905c70/test%2Fnew_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29a6e0db9f2cd702c8bf3157234e5410c905c70/test%2Fnew_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fnew_values.rs?ref=a29a6e0db9f2cd702c8bf3157234e5410c905c70", "patch": "@@ -1,35 +1,35 @@\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n-#[miri_run(expected = \"Int(1)\")]\n+#[miri_run]\n fn ret() -> i32 {\n     1\n }\n \n-#[miri_run(expected = \"Int(-1)\")]\n+#[miri_run]\n fn neg() -> i32 {\n     -1\n }\n \n-#[miri_run(expected = \"Int(3)\")]\n+#[miri_run]\n fn add() -> i32 {\n     1 + 2\n }\n \n-#[miri_run(expected = \"Int(3)\")]\n+#[miri_run]\n fn empty() {}\n \n-#[miri_run(expected = \"Int(3)\")]\n+#[miri_run]\n fn tuple() -> (i32,) {\n     (1,)\n }\n \n-#[miri_run(expected = \"Int(3)\")]\n+#[miri_run]\n fn tuple_2() -> (i32, i32) {\n     (1, 2)\n }\n \n-#[miri_run(expected = \"Int(3)\")]\n+#[miri_run]\n fn tuple_5() -> (i32, i32, i32, i32, i32) {\n     (1, 2, 3, 4, 5)\n }"}]}