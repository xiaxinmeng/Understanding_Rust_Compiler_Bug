{"sha": "ddd544856ecd181ee02490d12f723be549d3ecb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZDU0NDg1NmVjZDE4MWVlMDI0OTBkMTJmNzIzYmU1NDlkM2VjYjM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-14T23:24:12Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-18T04:03:56Z"}, "message": "Compute a better `lint_node_id` during expansion\n\nWhen we need to emit a lint at a macro invocation, we currently use the\n`NodeId` of its parent definition (e.g. the enclosing function). This\nmeans that any `#[allow]` / `#[deny]` attributes placed 'closer' to the\nmacro (e.g. on an enclosing block or statement) will have no effect.\n\nThis commit computes a better `lint_node_id` in `InvocationCollector`.\nWhen we visit/flat_map an AST node, we assign it a `NodeId` (earlier\nthan we normally would), and store than `NodeId` in current\n`ExpansionData`. When we collect a macro invocation, the current\n`lint_node_id` gets cloned along with our `ExpansionData`, allowing it\nto be used if we need to emit a lint later on.\n\nThis improves the handling of `#[allow]` / `#[deny]` for\n`SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` and some `asm!`-related lints.\nThe 'legacy derive helpers' lint retains its current behavior\n(I've inlined the now-removed `lint_node_id` function), since\nthere isn't an `ExpansionData` readily available.", "tree": {"sha": "36bec16c3a8132f356fdb4713a63aac33e0471a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36bec16c3a8132f356fdb4713a63aac33e0471a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddd544856ecd181ee02490d12f723be549d3ecb3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmDzqC0ACgkQtAh+UQ6Y\nsWRSMQ/+OrztmUqYEtZ1mRFeTjCTeFBKJ5X9s7dDaMhbyfOK7KkZrLpxA1gDgcwy\nUZZe63K9Xvw6D4+JebDNDXnwTbKJjqedvoTtiwfWuZ7CTE6/+xqU1XDTJ3oAUFdw\nlbNvsW8+V9TujslCUlCVRgV8v+JHWWVt6f7XC04VL20xsDP4j3paV2GEBJprFrR1\ni2FC7hbujcbKtmcvOTUd58ASlZwzxtDdD8Sj04AhXi8lFVMUt3R8+WcI5FUgRMs0\nUuFphcac7hfkIoaDa11EaVcdiBR1AoUrucUbOT9LivcUyhgTlA8f4x/3p4AdzjtK\nAqMtERcCN0zKoF33bFspzIGV/qcWrLbRul4WGb+h8kJjLalgJ3FtkLSl0qvsKgfJ\n+Ho1oQM0nsisYxpLGXZA5I+RdB5Eb3QInEGhgYJOfa9lNFW1SKasUbHcAhKtVfbV\nHR++qF/5mj8dnJXhk/78AYMOen2u862pti3eS+EU3aJT2MFbFBOofO2QIbDlEFWU\nKpwU/HyS91Psz434QRyMzRppN+fiwxx1IkcdhUHKd9eE81nTKzOKDICVp7XkYfLY\nsiuMaZYfkdJRNIv4uLgi58zTNgpa69/cbAw4aUrlR2LVDFQKoGywbpeVrGeXiqNS\nBPw32wVr5RzSQpaImaMnFvhzfNG+qwo3ERuA+6BV+hu6fBYydus=\n=C0V3\n-----END PGP SIGNATURE-----", "payload": "tree 36bec16c3a8132f356fdb4713a63aac33e0471a9\nparent eb0b95b55a0b38d91e834dd30902b67627ed2eb0\nauthor Aaron Hill <aa1ronham@gmail.com> 1626305052 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1626581036 -0500\n\nCompute a better `lint_node_id` during expansion\n\nWhen we need to emit a lint at a macro invocation, we currently use the\n`NodeId` of its parent definition (e.g. the enclosing function). This\nmeans that any `#[allow]` / `#[deny]` attributes placed 'closer' to the\nmacro (e.g. on an enclosing block or statement) will have no effect.\n\nThis commit computes a better `lint_node_id` in `InvocationCollector`.\nWhen we visit/flat_map an AST node, we assign it a `NodeId` (earlier\nthan we normally would), and store than `NodeId` in current\n`ExpansionData`. When we collect a macro invocation, the current\n`lint_node_id` gets cloned along with our `ExpansionData`, allowing it\nto be used if we need to emit a lint later on.\n\nThis improves the handling of `#[allow]` / `#[deny]` for\n`SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` and some `asm!`-related lints.\nThe 'legacy derive helpers' lint retains its current behavior\n(I've inlined the now-removed `lint_node_id` function), since\nthere isn't an `ExpansionData` readily available.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddd544856ecd181ee02490d12f723be549d3ecb3", "html_url": "https://github.com/rust-lang/rust/commit/ddd544856ecd181ee02490d12f723be549d3ecb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddd544856ecd181ee02490d12f723be549d3ecb3/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "html_url": "https://github.com/rust-lang/rust/commit/eb0b95b55a0b38d91e834dd30902b67627ed2eb0"}], "stats": {"total": 204, "additions": 139, "deletions": 65}, "files": [{"sha": "ff13f0d4e42079ee7d784a9f0f2517333ed86c10", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddd544856ecd181ee02490d12f723be549d3ecb3/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd544856ecd181ee02490d12f723be549d3ecb3/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=ddd544856ecd181ee02490d12f723be549d3ecb3", "patch": "@@ -455,15 +455,15 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                 ecx.parse_sess().buffer_lint(\n                     lint::builtin::BAD_ASM_STYLE,\n                     find_span(\".intel_syntax\"),\n-                    ecx.resolver.lint_node_id(ecx.current_expansion.id),\n+                    ecx.current_expansion.lint_node_id,\n                     \"avoid using `.intel_syntax`, Intel syntax is the default\",\n                 );\n             }\n             if template_str.contains(\".att_syntax\") {\n                 ecx.parse_sess().buffer_lint(\n                     lint::builtin::BAD_ASM_STYLE,\n                     find_span(\".att_syntax\"),\n-                    ecx.resolver.lint_node_id(ecx.current_expansion.id),\n+                    ecx.current_expansion.lint_node_id,\n                     \"avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\",\n                 );\n             }"}, {"sha": "1ea2c8843d6d7b3cdd4eaf7898a5fef05df98600", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddd544856ecd181ee02490d12f723be549d3ecb3/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd544856ecd181ee02490d12f723be549d3ecb3/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=ddd544856ecd181ee02490d12f723be549d3ecb3", "patch": "@@ -159,7 +159,7 @@ pub fn expand_include<'cx>(\n         }\n     }\n \n-    Box::new(ExpandResult { p, node_id: cx.resolver.lint_node_id(cx.current_expansion.id) })\n+    Box::new(ExpandResult { p, node_id: cx.current_expansion.lint_node_id })\n }\n \n // include_str! : read the given file, insert it as a literal string expr"}, {"sha": "03ded6465d079db700a02e77223896ae8a113dfa", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddd544856ecd181ee02490d12f723be549d3ecb3/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd544856ecd181ee02490d12f723be549d3ecb3/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=ddd544856ecd181ee02490d12f723be549d3ecb3", "patch": "@@ -869,9 +869,6 @@ pub trait ResolverExpand {\n \n     fn check_unused_macros(&mut self);\n \n-    /// Some parent node that is close enough to the given macro call.\n-    fn lint_node_id(&self, expn_id: LocalExpnId) -> NodeId;\n-\n     // Resolver interfaces for specific built-in macros.\n     /// Does `#[derive(...)]` attribute with the given `ExpnId` have built-in `Copy` inside it?\n     fn has_derive_copy(&self, expn_id: LocalExpnId) -> bool;\n@@ -926,6 +923,8 @@ pub struct ExpansionData {\n     pub module: Rc<ModuleData>,\n     pub dir_ownership: DirOwnership,\n     pub prior_type_ascription: Option<(Span, bool)>,\n+    /// Some parent node that is close to this macro call\n+    pub lint_node_id: NodeId,\n }\n \n type OnExternModLoaded<'a> =\n@@ -971,6 +970,7 @@ impl<'a> ExtCtxt<'a> {\n                 module: Default::default(),\n                 dir_ownership: DirOwnership::Owned { relative: None },\n                 prior_type_ascription: None,\n+                lint_node_id: ast::CRATE_NODE_ID,\n             },\n             force_mode: false,\n             expansions: FxHashMap::default(),"}, {"sha": "f79e9648ab66e3d939b4269cddc404e19a2a15d5", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 78, "deletions": 22, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/ddd544856ecd181ee02490d12f723be549d3ecb3/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd544856ecd181ee02490d12f723be549d3ecb3/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=ddd544856ecd181ee02490d12f723be549d3ecb3", "patch": "@@ -1098,6 +1098,41 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n     }\n }\n \n+/// Wraps a call to `noop_visit_*` / `noop_flat_map_*`\n+/// This method assigns a `NodeId`, and sets that `NodeId`\n+/// as our current 'lint node id'. If a macro call is found\n+/// inside this AST node, we will use this AST node's `NodeId`\n+/// to emit lints associated with that macro (allowing\n+/// `#[allow]` / `#[deny]` to be applied close to\n+/// the macro invocation).\n+///\n+/// Do *not* call this for a macro AST node\n+/// (e.g. `ExprKind::MacCall`) - we cannot emit lints\n+/// at these AST nodes, since they are removed and\n+/// replaced with the result of macro expansion.\n+///\n+/// All other `NodeId`s are assigned by `visit_id`.\n+/// * `self` is the 'self' parameter for the current method,\n+/// * `id` is a mutable reference to the `NodeId` field\n+///    of the current AST node.\n+/// * `closure` is a closure that executes the\n+///   `noop_visit_*` / `noop_flat_map_*` method\n+///   for the current AST node.\n+macro_rules! assign_id {\n+    ($self:ident, $id:expr, $closure:expr) => {{\n+        let old_id = $self.cx.current_expansion.lint_node_id;\n+        if $self.monotonic {\n+            debug_assert_eq!(*$id, ast::DUMMY_NODE_ID);\n+            let new_id = $self.cx.resolver.next_node_id();\n+            *$id = new_id;\n+            $self.cx.current_expansion.lint_node_id = new_id;\n+        }\n+        let ret = ($closure)();\n+        $self.cx.current_expansion.lint_node_id = old_id;\n+        ret\n+    }};\n+}\n+\n impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     fn visit_expr(&mut self, expr: &mut P<ast::Expr>) {\n         self.cfg.configure_expr(expr);\n@@ -1118,7 +1153,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 self.check_attributes(&expr.attrs);\n                 self.collect_bang(mac, expr.span, AstFragmentKind::Expr).make_expr().into_inner()\n             } else {\n-                ensure_sufficient_stack(|| noop_visit_expr(&mut expr, self));\n+                assign_id!(self, &mut expr.id, || {\n+                    ensure_sufficient_stack(|| noop_visit_expr(&mut expr, self));\n+                });\n                 expr\n             }\n         });\n@@ -1133,7 +1170,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 .make_arms();\n         }\n \n-        noop_flat_map_arm(arm, self)\n+        assign_id!(self, &mut arm.id, || noop_flat_map_arm(arm, self))\n     }\n \n     fn flat_map_expr_field(&mut self, field: ast::ExprField) -> SmallVec<[ast::ExprField; 1]> {\n@@ -1145,7 +1182,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 .make_expr_fields();\n         }\n \n-        noop_flat_map_expr_field(field, self)\n+        assign_id!(self, &mut field.id, || noop_flat_map_expr_field(field, self))\n     }\n \n     fn flat_map_pat_field(&mut self, fp: ast::PatField) -> SmallVec<[ast::PatField; 1]> {\n@@ -1157,7 +1194,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 .make_pat_fields();\n         }\n \n-        noop_flat_map_pat_field(fp, self)\n+        assign_id!(self, &mut fp.id, || noop_flat_map_pat_field(fp, self))\n     }\n \n     fn flat_map_param(&mut self, p: ast::Param) -> SmallVec<[ast::Param; 1]> {\n@@ -1169,7 +1206,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 .make_params();\n         }\n \n-        noop_flat_map_param(p, self)\n+        assign_id!(self, &mut p.id, || noop_flat_map_param(p, self))\n     }\n \n     fn flat_map_field_def(&mut self, sf: ast::FieldDef) -> SmallVec<[ast::FieldDef; 1]> {\n@@ -1181,7 +1218,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 .make_field_defs();\n         }\n \n-        noop_flat_map_field_def(sf, self)\n+        assign_id!(self, &mut sf.id, || noop_flat_map_field_def(sf, self))\n     }\n \n     fn flat_map_variant(&mut self, variant: ast::Variant) -> SmallVec<[ast::Variant; 1]> {\n@@ -1193,7 +1230,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 .make_variants();\n         }\n \n-        noop_flat_map_variant(variant, self)\n+        assign_id!(self, &mut variant.id, || noop_flat_map_variant(variant, self))\n     }\n \n     fn filter_map_expr(&mut self, expr: P<ast::Expr>) -> Option<P<ast::Expr>> {\n@@ -1214,9 +1251,11 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     .make_opt_expr()\n                     .map(|expr| expr.into_inner())\n             } else {\n-                Some({\n-                    noop_visit_expr(&mut expr, self);\n-                    expr\n+                assign_id!(self, &mut expr.id, || {\n+                    Some({\n+                        noop_visit_expr(&mut expr, self);\n+                        expr\n+                    })\n                 })\n             }\n         })\n@@ -1225,7 +1264,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     fn visit_pat(&mut self, pat: &mut P<ast::Pat>) {\n         match pat.kind {\n             PatKind::MacCall(_) => {}\n-            _ => return noop_visit_pat(pat, self),\n+            _ => {\n+                return assign_id!(self, &mut pat.id, || noop_visit_pat(pat, self));\n+            }\n         }\n \n         visit_clobber(pat, |mut pat| match mem::replace(&mut pat.kind, PatKind::Wild) {\n@@ -1278,7 +1319,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             &mut self.cx.current_expansion.dir_ownership,\n             DirOwnership::UnownedViaBlock,\n         );\n-        noop_visit_block(block, self);\n+        assign_id!(self, &mut block.id, || noop_visit_block(block, self));\n         self.cx.current_expansion.dir_ownership = orig_dir_ownership;\n     }\n \n@@ -1377,7 +1418,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 let orig_dir_ownership =\n                     mem::replace(&mut self.cx.current_expansion.dir_ownership, dir_ownership);\n \n-                let result = noop_flat_map_item(item, self);\n+                let result = assign_id!(self, &mut item.id, || noop_flat_map_item(item, self));\n \n                 // Restore the module info.\n                 self.cx.current_expansion.dir_ownership = orig_dir_ownership;\n@@ -1387,7 +1428,12 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             }\n             _ => {\n                 item.attrs = attrs;\n-                noop_flat_map_item(item, self)\n+                // The crate root is special - don't assign an ID to it.\n+                if !(matches!(item.kind, ast::ItemKind::Mod(..)) && ident == Ident::invalid()) {\n+                    assign_id!(self, &mut item.id, || noop_flat_map_item(item, self))\n+                } else {\n+                    noop_flat_map_item(item, self)\n+                }\n             }\n         }\n     }\n@@ -1411,7 +1457,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     _ => unreachable!(),\n                 })\n             }\n-            _ => noop_flat_map_assoc_item(item, self),\n+            _ => {\n+                assign_id!(self, &mut item.id, || noop_flat_map_assoc_item(item, self))\n+            }\n         }\n     }\n \n@@ -1434,14 +1482,16 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     _ => unreachable!(),\n                 })\n             }\n-            _ => noop_flat_map_assoc_item(item, self),\n+            _ => {\n+                assign_id!(self, &mut item.id, || noop_flat_map_assoc_item(item, self))\n+            }\n         }\n     }\n \n     fn visit_ty(&mut self, ty: &mut P<ast::Ty>) {\n         match ty.kind {\n             ast::TyKind::MacCall(_) => {}\n-            _ => return noop_visit_ty(ty, self),\n+            _ => return assign_id!(self, &mut ty.id, || noop_visit_ty(ty, self)),\n         };\n \n         visit_clobber(ty, |mut ty| match mem::replace(&mut ty.kind, ast::TyKind::Err) {\n@@ -1478,7 +1528,12 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     _ => unreachable!(),\n                 })\n             }\n-            _ => noop_flat_map_foreign_item(foreign_item, self),\n+            _ => {\n+                assign_id!(self, &mut foreign_item.id, || noop_flat_map_foreign_item(\n+                    foreign_item,\n+                    self\n+                ))\n+            }\n         }\n     }\n \n@@ -1498,13 +1553,14 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 .make_generic_params();\n         }\n \n-        noop_flat_map_generic_param(param, self)\n+        assign_id!(self, &mut param.id, || noop_flat_map_generic_param(param, self))\n     }\n \n     fn visit_id(&mut self, id: &mut ast::NodeId) {\n-        if self.monotonic {\n-            debug_assert_eq!(*id, ast::DUMMY_NODE_ID);\n-            *id = self.cx.resolver.next_node_id()\n+        // We may have already assigned a `NodeId`\n+        // by calling `assign_id`\n+        if self.monotonic && *id == ast::DUMMY_NODE_ID {\n+            *id = self.cx.resolver.next_node_id();\n         }\n     }\n }"}, {"sha": "7f985af364d7dbf34369be8461e25bb690d69a91", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddd544856ecd181ee02490d12f723be549d3ecb3/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd544856ecd181ee02490d12f723be549d3ecb3/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=ddd544856ecd181ee02490d12f723be549d3ecb3", "patch": "@@ -289,7 +289,6 @@ fn generic_extension<'cx>(\n \n                 let mut p = Parser::new(sess, tts, false, None);\n                 p.last_type_ascription = cx.current_expansion.prior_type_ascription;\n-                let lint_node_id = cx.resolver.lint_node_id(cx.current_expansion.id);\n \n                 // Let the context choose how to interpret the result.\n                 // Weird, but useful for X-macros.\n@@ -301,7 +300,7 @@ fn generic_extension<'cx>(\n                     // macro leaves unparsed tokens.\n                     site_span: sp,\n                     macro_ident: name,\n-                    lint_node_id,\n+                    lint_node_id: cx.current_expansion.lint_node_id,\n                     arm_span,\n                 });\n             }"}, {"sha": "4d85bf6b499d950ca010bc312b95781738615ea8", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddd544856ecd181ee02490d12f723be549d3ecb3/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd544856ecd181ee02490d12f723be549d3ecb3/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=ddd544856ecd181ee02490d12f723be549d3ecb3", "patch": "@@ -274,15 +274,15 @@ impl<HCX> ToStableHashKey<HCX> for LintId {\n }\n \n // Duplicated from rustc_session::config::ExternDepSpec to avoid cyclic dependency\n-#[derive(PartialEq)]\n+#[derive(PartialEq, Debug)]\n pub enum ExternDepSpec {\n     Json(Json),\n     Raw(String),\n }\n \n // This could be a closure, but then implementing derive trait\n // becomes hacky (and it gets allocated).\n-#[derive(PartialEq)]\n+#[derive(PartialEq, Debug)]\n pub enum BuiltinLintDiagnostics {\n     Normal,\n     BareTraitObject(Span, /* is_global */ bool),"}, {"sha": "b2a8aa0ceccaaee3770dcad0259166f37ba7ad3f", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ddd544856ecd181ee02490d12f723be549d3ecb3/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd544856ecd181ee02490d12f723be549d3ecb3/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=ddd544856ecd181ee02490d12f723be549d3ecb3", "patch": "@@ -281,7 +281,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         // Derives are not included when `invocations` are collected, so we have to add them here.\n         let parent_scope = &ParentScope { derives, ..parent_scope };\n         let supports_macro_expansion = invoc.fragment_kind.supports_macro_expansion();\n-        let node_id = self.lint_node_id(eager_expansion_root);\n+        let node_id = invoc.expansion_data.lint_node_id;\n         let (ext, res) = self.smart_resolve_macro_path(\n             path,\n             kind,\n@@ -348,14 +348,6 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         }\n     }\n \n-    fn lint_node_id(&self, expn_id: LocalExpnId) -> NodeId {\n-        // FIXME - make this more precise. This currently returns the NodeId of the\n-        // nearest closing item - we should try to return the closest parent of the ExpnId\n-        self.invocation_parents\n-            .get(&expn_id)\n-            .map_or(ast::CRATE_NODE_ID, |id| self.def_id_to_node_id[id.0])\n-    }\n-\n     fn has_derive_copy(&self, expn_id: LocalExpnId) -> bool {\n         self.containers_deriving_copy.contains(&expn_id)\n     }\n@@ -1105,9 +1097,13 @@ impl<'a> Resolver<'a> {\n                     let seg = Segment::from_ident(ident);\n                     check_consistency(self, &[seg], ident.span, kind, initial_res, res);\n                     if res == Res::NonMacroAttr(NonMacroAttrKind::DeriveHelperCompat) {\n+                        let node_id = self\n+                            .invocation_parents\n+                            .get(&parent_scope.expansion)\n+                            .map_or(ast::CRATE_NODE_ID, |id| self.def_id_to_node_id[id.0]);\n                         self.lint_buffer.buffer_lint_with_diagnostic(\n                             LEGACY_DERIVE_HELPERS,\n-                            self.lint_node_id(parent_scope.expansion),\n+                            node_id,\n                             ident.span,\n                             \"derive helper attribute is used before it is introduced\",\n                             BuiltinLintDiagnostics::LegacyDeriveHelpers(binding.span),"}, {"sha": "a0e2a5ea0ef97deb1d556b1c2c7e5ad582a80522", "filename": "src/test/ui/asm/inline-syntax.x86_64.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ddd544856ecd181ee02490d12f723be549d3ecb3/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddd544856ecd181ee02490d12f723be549d3ecb3/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr?ref=ddd544856ecd181ee02490d12f723be549d3ecb3", "patch": "@@ -1,16 +1,10 @@\n-warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:57:14\n-   |\n-LL | global_asm!(\".intel_syntax noprefix\", \"nop\");\n-   |              ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(bad_asm_style)]` on by default\n-\n warning: avoid using `.intel_syntax`, Intel syntax is the default\n   --> $DIR/inline-syntax.rs:31:15\n    |\n LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(bad_asm_style)]` on by default\n \n warning: avoid using `.intel_syntax`, Intel syntax is the default\n   --> $DIR/inline-syntax.rs:34:15\n@@ -42,5 +36,11 @@ warning: avoid using `.intel_syntax`, Intel syntax is the default\n LL |             .intel_syntax noprefix\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n+warning: avoid using `.intel_syntax`, Intel syntax is the default\n+  --> $DIR/inline-syntax.rs:57:14\n+   |\n+LL | global_asm!(\".intel_syntax noprefix\", \"nop\");\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n+\n warning: 7 warnings emitted\n "}, {"sha": "fff380934e8e9be3f682b211f087d1576ae8f79b", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/semicolon-in-expressions-from-macros.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ddd544856ecd181ee02490d12f723be549d3ecb3/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd544856ecd181ee02490d12f723be549d3ecb3/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.rs?ref=ddd544856ecd181ee02490d12f723be549d3ecb3", "patch": "@@ -1,14 +1,17 @@\n // check-pass\n // edition:2018\n+#![feature(stmt_expr_attributes)]\n #![warn(semicolon_in_expressions_from_macros)]\n \n #[allow(dead_code)]\n macro_rules! foo {\n     ($val:ident) => {\n-        true; //~ WARN trailing\n-              //~| WARN this was previously\n-              //~| WARN trailing\n-              //~| WARN this was previously\n+        true; //~  WARN trailing semicolon in macro\n+              //~| WARN this was previously accepted\n+              //~| WARN trailing semicolon in macro\n+              //~| WARN this was previously accepted\n+              //~| WARN trailing semicolon in macro\n+              //~| WARN this was previously accepted\n     }\n }\n \n@@ -18,17 +21,14 @@ async fn bar() {\n }\n \n fn main() {\n-    // This `allow` doesn't work\n     #[allow(semicolon_in_expressions_from_macros)]\n     let _ = {\n         foo!(first)\n     };\n \n-    // This 'allow' doesn't work either\n     #[allow(semicolon_in_expressions_from_macros)]\n     let _ = foo!(second);\n \n-    // But this 'allow' does\n     #[allow(semicolon_in_expressions_from_macros)]\n     fn inner() {\n         let _ = foo!(third);\n@@ -38,4 +38,14 @@ fn main() {\n     async {\n         let _ = foo!(fourth);\n     };\n+\n+    let _ = {\n+        foo!(warn_in_block)\n+    };\n+\n+    let _ = foo!(warn_in_expr);\n+\n+    // This `#[allow]` does not work, since the attribute gets dropped\n+    // when we expand the macro\n+    let _ = #[allow(semicolon_in_expressions_from_macros)] foo!(allow_does_not_work);\n }"}, {"sha": "c00c3d77dcedc8bd961f165d6a7551b2b001374b", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/semicolon-in-expressions-from-macros.stderr", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ddd544856ecd181ee02490d12f723be549d3ecb3/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddd544856ecd181ee02490d12f723be549d3ecb3/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr?ref=ddd544856ecd181ee02490d12f723be549d3ecb3", "patch": "@@ -1,14 +1,14 @@\n warning: trailing semicolon in macro used in expression position\n-  --> $DIR/semicolon-in-expressions-from-macros.rs:8:13\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n    |\n LL |         true;\n    |             ^\n ...\n-LL |         foo!(first)\n-   |         ----------- in this macro invocation\n+LL |         foo!(warn_in_block)\n+   |         ------------------- in this macro invocation\n    |\n note: the lint level is defined here\n-  --> $DIR/semicolon-in-expressions-from-macros.rs:3:9\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:4:9\n    |\n LL | #![warn(semicolon_in_expressions_from_macros)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,17 +17,30 @@ LL | #![warn(semicolon_in_expressions_from_macros)]\n    = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: trailing semicolon in macro used in expression position\n-  --> $DIR/semicolon-in-expressions-from-macros.rs:8:13\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n    |\n LL |         true;\n    |             ^\n ...\n-LL |     let _ = foo!(second);\n-   |             ------------ in this macro invocation\n+LL |     let _ = foo!(warn_in_expr);\n+   |             ------------------ in this macro invocation\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n    = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: 2 warnings emitted\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:9:13\n+   |\n+LL |         true;\n+   |             ^\n+...\n+LL |     let _ = #[allow(semicolon_in_expressions_from_macros)] foo!(allow_does_not_work);\n+   |                                                            ------------------------- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: 3 warnings emitted\n "}]}