{"sha": "c1061254317ac747d2bf5901329545f4cec5ebcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMDYxMjU0MzE3YWM3NDdkMmJmNTkwMTMyOTU0NWY0Y2VjNWViY2I=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-13T21:01:56Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-15T20:54:08Z"}, "message": "Represent lifetimes as two joint tokens in proc macros", "tree": {"sha": "4abe39c1bf4c5db072c168ce019c195763e0920b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4abe39c1bf4c5db072c168ce019c195763e0920b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1061254317ac747d2bf5901329545f4cec5ebcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1061254317ac747d2bf5901329545f4cec5ebcb", "html_url": "https://github.com/rust-lang/rust/commit/c1061254317ac747d2bf5901329545f4cec5ebcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1061254317ac747d2bf5901329545f4cec5ebcb/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b820a694c0fd8392092c3f0301537aafe92cce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b820a694c0fd8392092c3f0301537aafe92cce2", "html_url": "https://github.com/rust-lang/rust/commit/5b820a694c0fd8392092c3f0301537aafe92cce2"}], "stats": {"total": 179, "additions": 158, "deletions": 21}, "files": [{"sha": "267922bf4a1fb4ce788f4e3205719a325c220af5", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=c1061254317ac747d2bf5901329545f4cec5ebcb", "patch": "@@ -487,7 +487,7 @@ impl PartialEq<FileName> for SourceFile {\n pub enum TokenTree {\n     /// A token stream surrounded by bracket delimiters.\n     Group(Group),\n-    /// An identifier or lifetime identifier.\n+    /// An identifier.\n     Ident(Ident),\n     /// A single punctuation character (`+`, `,`, `$`, etc.).\n     Punct(Punct),\n@@ -702,9 +702,10 @@ impl !Sync for Punct {}\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n pub enum Spacing {\n-    /// e.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.\n+    /// E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.\n     Alone,\n-    /// e.g. `+` is `Joint` in `+=` or `+#`.\n+    /// E.g. `+` is `Joint` in `+=` or `'#`.\n+    /// Additionally, single quote `'` can join with identifiers to form lifetimes `'ident`.\n     Joint,\n }\n \n@@ -717,8 +718,8 @@ impl Punct {\n     /// which can be further configured with the `set_span` method below.\n     #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n     pub fn new(ch: char, spacing: Spacing) -> Punct {\n-        const LEGAL_CHARS: &[char] = &['=', '<', '>', '!', '~', '+', '-', '*', '/', '%',\n-                                       '^', '&', '|', '@', '.', ',', ';', ':', '#', '$', '?'];\n+        const LEGAL_CHARS: &[char] = &['=', '<', '>', '!', '~', '+', '-', '*', '/', '%', '^',\n+                                       '&', '|', '@', '.', ',', ';', ':', '#', '$', '?', '\\''];\n         if !LEGAL_CHARS.contains(&ch) {\n             panic!(\"unsupported character `{:?}`\", ch)\n         }\n@@ -766,7 +767,7 @@ impl fmt::Display for Punct {\n     }\n }\n \n-/// An identifier (`ident`) or lifetime identifier (`'ident`).\n+/// An identifier (`ident`).\n #[derive(Clone, Debug)]\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n pub struct Ident {\n@@ -783,7 +784,7 @@ impl !Sync for Ident {}\n impl Ident {\n     /// Creates a new `Ident` with the given `string` as well as the specified\n     /// `span`.\n-    /// The `string` argument must be a valid identifier or lifetime identifier permitted by the\n+    /// The `string` argument must be a valid identifier permitted by the\n     /// language, otherwise the function will panic.\n     ///\n     /// Note that `span`, currently in rustc, configures the hygiene information\n@@ -817,8 +818,7 @@ impl Ident {\n     pub fn new_raw(string: &str, span: Span) -> Ident {\n         let mut ident = Ident::new(string, span);\n         if ident.sym == keywords::Underscore.name() ||\n-           token::is_path_segment_keyword(ast::Ident::with_empty_ctxt(ident.sym)) ||\n-           ident.sym.as_str().starts_with(\"\\'\") {\n+           token::is_path_segment_keyword(ast::Ident::with_empty_ctxt(ident.sym)) {\n             panic!(\"`{:?}` is not a valid raw identifier\", string)\n         }\n         ident.is_raw = true;\n@@ -1211,13 +1211,19 @@ impl TokenTree {\n             Pound => op!('#'),\n             Dollar => op!('$'),\n             Question => op!('?'),\n+            SingleQuote => op!('\\''),\n \n-            Ident(ident, false) | Lifetime(ident) => {\n+            Ident(ident, false) => {\n                 tt!(self::Ident::new(&ident.name.as_str(), Span(span)))\n             }\n             Ident(ident, true) => {\n                 tt!(self::Ident::new_raw(&ident.name.as_str(), Span(span)))\n             }\n+            Lifetime(ident) => {\n+                let ident = ident.without_first_quote();\n+                stack.push(tt!(self::Ident::new(&ident.name.as_str(), Span(span))));\n+                tt!(Punct::new('\\'', Spacing::Joint))\n+            }\n             Literal(lit, suffix) => tt!(self::Literal { lit, suffix, span: Span(span) }),\n             DocComment(c) => {\n                 let style = comments::doc_comment_style(&c.as_str());\n@@ -1260,12 +1266,7 @@ impl TokenTree {\n                 }).into();\n             },\n             self::TokenTree::Ident(tt) => {\n-                let ident = ast::Ident::new(tt.sym, tt.span.0);\n-                let token = if tt.sym.as_str().starts_with(\"'\") {\n-                    Lifetime(ident)\n-                } else {\n-                    Ident(ident, tt.is_raw)\n-                };\n+                let token = Ident(ast::Ident::new(tt.sym, tt.span.0), tt.is_raw);\n                 return TokenTree::Token(tt.span.0, token).into();\n             }\n             self::TokenTree::Literal(self::Literal {\n@@ -1324,6 +1325,7 @@ impl TokenTree {\n             '#' => Pound,\n             '$' => Dollar,\n             '?' => Question,\n+            '\\'' => SingleQuote,\n             _ => unreachable!(),\n         };\n "}, {"sha": "f56d701b028794fc629569d6529896db43eab697", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=c1061254317ac747d2bf5901329545f4cec5ebcb", "patch": "@@ -314,6 +314,7 @@ fn hash_token<'a, 'gcx, W: StableHasherResult>(\n         token::Token::Pound |\n         token::Token::Dollar |\n         token::Token::Question |\n+        token::Token::SingleQuote |\n         token::Token::Whitespace |\n         token::Token::Comment |\n         token::Token::Eof => {}"}, {"sha": "cff89b03e3d8b3532638c76f40aa45e3dea46357", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=c1061254317ac747d2bf5901329545f4cec5ebcb", "patch": "@@ -353,7 +353,7 @@ impl<'a> Classifier<'a> {\n             token::Lifetime(..) => Class::Lifetime,\n \n             token::Eof | token::Interpolated(..) |\n-            token::Tilde | token::At | token::DotEq => Class::None,\n+            token::Tilde | token::At | token::DotEq | token::SingleQuote => Class::None,\n         };\n \n         // Anything that didn't return above is the simple case where we the"}, {"sha": "a6e6ccde72c9f46b2b0a54b0fbf82d7c9497a9e8", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=c1061254317ac747d2bf5901329545f4cec5ebcb", "patch": "@@ -711,6 +711,7 @@ fn expr_mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> P<ast::Expr> {\n         token::Pound        => \"Pound\",\n         token::Dollar       => \"Dollar\",\n         token::Question     => \"Question\",\n+        token::SingleQuote  => \"SingleQuote\",\n         token::Eof          => \"Eof\",\n \n         token::Whitespace | token::Comment | token::Shebang(_) => {"}, {"sha": "3e22598043a3ed1cfef9adf8c5d17626ef778357", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=c1061254317ac747d2bf5901329545f4cec5ebcb", "patch": "@@ -1773,10 +1773,7 @@ fn ident_continue(c: Option<char>) -> bool {\n // The string is a valid identifier or a lifetime identifier.\n pub fn is_valid_ident(s: &str) -> bool {\n     let mut chars = s.chars();\n-    match chars.next() {\n-        Some('\\'') => ident_start(chars.next()) && chars.all(|ch| ident_continue(Some(ch))),\n-        ch => ident_start(ch) && chars.all(|ch| ident_continue(Some(ch)))\n-    }\n+    ident_start(chars.next()) && chars.all(|ch| ident_continue(Some(ch)))\n }\n \n #[cfg(test)]"}, {"sha": "a1c056cbb2ccbbb368627aedf17af5dff840ad16", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=c1061254317ac747d2bf5901329545f4cec5ebcb", "patch": "@@ -210,6 +210,8 @@ pub enum Token {\n     Pound,\n     Dollar,\n     Question,\n+    /// Used by proc macros for representing lifetimes, not generated by lexer right now.\n+    SingleQuote,\n     /// An opening delimiter, eg. `{`\n     OpenDelim(DelimToken),\n     /// A closing delimiter, eg. `}`\n@@ -513,6 +515,10 @@ impl Token {\n                 Colon => ModSep,\n                 _ => return None,\n             },\n+            SingleQuote => match joint {\n+                Ident(ident, false) => Lifetime(ident),\n+                _ => return None,\n+            },\n \n             Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot | DotEq |\n             DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar |"}, {"sha": "8e33fa08083967689644a66c597c54ff761098ef", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c1061254317ac747d2bf5901329545f4cec5ebcb", "patch": "@@ -224,6 +224,7 @@ pub fn token_to_string(tok: &Token) -> String {\n         token::Pound                => \"#\".to_string(),\n         token::Dollar               => \"$\".to_string(),\n         token::Question             => \"?\".to_string(),\n+        token::SingleQuote          => \"'\".to_string(),\n \n         /* Literals */\n         token::Literal(lit, suf) => {"}, {"sha": "f31f57b442a6e502fc1f22bede636c3db08607ce", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/lifetimes.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Flifetimes.rs?ref=c1061254317ac747d2bf5901329545f4cec5ebcb", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn lifetimes_bang(input: TokenStream) -> TokenStream {\n+    // Roundtrip through token trees\n+    input.into_iter().collect()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn lifetimes_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n+    // Roundtrip through AST\n+    input\n+}\n+\n+#[proc_macro_derive(Lifetimes)]\n+pub fn lifetimes_derive(input: TokenStream) -> TokenStream {\n+    // Roundtrip through a string\n+    format!(\"mod m {{ {} }}\", input).parse().unwrap()\n+}"}, {"sha": "0bcb23cc8bb7dea7c5a96b2bbd87499063ecdb30", "filename": "src/test/run-pass-fulldeps/proc-macro/lifetimes.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Flifetimes.rs?ref=c1061254317ac747d2bf5901329545f4cec5ebcb", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:lifetimes.rs\n+// ignore-stage1\n+\n+#![feature(proc_macro)]\n+\n+extern crate lifetimes;\n+use lifetimes::*;\n+\n+lifetimes_bang! {\n+    fn bang<'a>() -> &'a u8 { &0 }\n+}\n+\n+#[lifetimes_attr]\n+fn attr<'a>() -> &'a u8 { &1 }\n+\n+#[derive(Lifetimes)]\n+pub struct Lifetimes<'a> {\n+    pub field: &'a u8,\n+}\n+\n+fn main() {\n+    assert_eq!(bang::<'static>(), &0);\n+    assert_eq!(attr::<'static>(), &1);\n+    let l1 = Lifetimes { field: &0 };\n+    let l2 = m::Lifetimes { field: &1 };\n+}"}, {"sha": "ecf0a56edf7661d30162915e469b4fdf9d732948", "filename": "src/test/ui-fulldeps/auxiliary/lifetimes.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flifetimes.rs?ref=c1061254317ac747d2bf5901329545f4cec5ebcb", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn single_quote_alone(_: TokenStream) -> TokenStream {\n+    // `&'a u8`, but the `'` token is not joint\n+    let trees: Vec<TokenTree> = vec![\n+        Punct::new('&', Spacing::Alone).into(),\n+        Punct::new('\\'', Spacing::Alone).into(),\n+        Ident::new(\"a\", Span::call_site()).into(),\n+        Ident::new(\"u8\", Span::call_site()).into(),\n+    ];\n+    trees.into_iter().collect()\n+}"}, {"sha": "6e88143d637f142b6d65a5546181d7164cf751a1", "filename": "src/test/ui-fulldeps/lifetimes.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Ftest%2Fui-fulldeps%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Ftest%2Fui-fulldeps%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flifetimes.rs?ref=c1061254317ac747d2bf5901329545f4cec5ebcb", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:lifetimes.rs\n+\n+#![feature(proc_macro, proc_macro_non_items)]\n+\n+extern crate lifetimes;\n+\n+use lifetimes::*;\n+\n+type A = single_quote_alone!(); //~ ERROR expected type, found `'`"}, {"sha": "6baf2b16998f17e62b27c12e3862a11dede4f989", "filename": "src/test/ui-fulldeps/lifetimes.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Ftest%2Fui-fulldeps%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1061254317ac747d2bf5901329545f4cec5ebcb/src%2Ftest%2Fui-fulldeps%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flifetimes.stderr?ref=c1061254317ac747d2bf5901329545f4cec5ebcb", "patch": "@@ -0,0 +1,8 @@\n+error: expected type, found `'`\n+  --> $DIR/lifetimes.rs:19:10\n+   |\n+LL | type A = single_quote_alone!(); //~ ERROR expected type, found `'`\n+   |          ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}