{"sha": "7c823cabab1c2a0b4ad723b49338e04b60b14ae5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjODIzY2FiYWIxYzJhMGI0YWQ3MjNiNDkzMzhlMDRiNjBiMTRhZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-12T18:11:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-12T18:11:13Z"}, "message": "Auto merge of #3450 - phansch:structured_sugg_for_explicit_write, r=flip1995\n\nAdd suggestion for explicit_write lint\n\nCloses #2083", "tree": {"sha": "c847517ef7cb466fd36d2fc8dbf673443912c0fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c847517ef7cb466fd36d2fc8dbf673443912c0fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c823cabab1c2a0b4ad723b49338e04b60b14ae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c823cabab1c2a0b4ad723b49338e04b60b14ae5", "html_url": "https://github.com/rust-lang/rust/commit/7c823cabab1c2a0b4ad723b49338e04b60b14ae5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c823cabab1c2a0b4ad723b49338e04b60b14ae5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f467ac6f0e29af425b3e0b020272ff8c7e0024c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f467ac6f0e29af425b3e0b020272ff8c7e0024c", "html_url": "https://github.com/rust-lang/rust/commit/2f467ac6f0e29af425b3e0b020272ff8c7e0024c"}, {"sha": "194acaf8e725619ed350ced85c480909003111d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/194acaf8e725619ed350ced85c480909003111d6", "html_url": "https://github.com/rust-lang/rust/commit/194acaf8e725619ed350ced85c480909003111d6"}], "stats": {"total": 147, "additions": 109, "deletions": 38}, "files": [{"sha": "a0db3ae8df355185b71eec50793490a35e098652", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 79, "deletions": 25, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/7c823cabab1c2a0b4ad723b49338e04b60b14ae5/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c823cabab1c2a0b4ad723b49338e04b60b14ae5/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=7c823cabab1c2a0b4ad723b49338e04b60b14ae5", "patch": "@@ -10,8 +10,9 @@\n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::utils::opt_def_id;\n-use crate::utils::{is_expn_of, match_def_path, resolve_node, span_lint};\n+use crate::rustc_errors::Applicability;\n+use crate::syntax::ast::LitKind;\n+use crate::utils::{is_expn_of, match_def_path, opt_def_id, resolve_node, span_lint, span_lint_and_sugg};\n use if_chain::if_chain;\n \n /// **What it does:** Checks for usage of `write!()` / `writeln()!` which can be\n@@ -81,32 +82,85 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 } else {\n                     \"\"\n                 };\n-                if let Some(macro_name) = calling_macro {\n-                    span_lint(\n-                        cx,\n-                        EXPLICIT_WRITE,\n-                        expr.span,\n-                        &format!(\n-                            \"use of `{}!({}(), ...).unwrap()`. Consider using `{}{}!` instead\",\n-                            macro_name,\n-                            dest_name,\n-                            prefix,\n-                            macro_name.replace(\"write\", \"print\")\n-                        )\n-                    );\n+\n+                // We need to remove the last trailing newline from the string because the\n+                // underlying `fmt::write` function doesn't know whether `println!` or `print!` was\n+                // used.\n+                if let Some(mut write_output) = write_output_string(write_args) {\n+                    if write_output.ends_with('\\n') {\n+                        write_output.pop();\n+                    }\n+\n+                    if let Some(macro_name) = calling_macro {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            EXPLICIT_WRITE,\n+                            expr.span,\n+                            &format!(\n+                                \"use of `{}!({}(), ...).unwrap()`\",\n+                                macro_name,\n+                                dest_name\n+                            ),\n+                            \"try this\",\n+                            format!(\"{}{}!(\\\"{}\\\")\", prefix, macro_name.replace(\"write\", \"print\"), write_output.escape_default()),\n+                            Applicability::MachineApplicable\n+                        );\n+                    } else {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            EXPLICIT_WRITE,\n+                            expr.span,\n+                            &format!(\"use of `{}().write_fmt(...).unwrap()`\", dest_name),\n+                            \"try this\",\n+                            format!(\"{}print!(\\\"{}\\\")\", prefix, write_output.escape_default()),\n+                            Applicability::MachineApplicable\n+                        );\n+                    }\n                 } else {\n-                    span_lint(\n-                        cx,\n-                        EXPLICIT_WRITE,\n-                        expr.span,\n-                        &format!(\n-                            \"use of `{}().write_fmt(...).unwrap()`. Consider using `{}print!` instead\",\n-                            dest_name,\n-                            prefix,\n-                        )\n-                    );\n+                    // We don't have a proper suggestion\n+                    if let Some(macro_name) = calling_macro {\n+                        span_lint(\n+                            cx,\n+                            EXPLICIT_WRITE,\n+                            expr.span,\n+                            &format!(\n+                                \"use of `{}!({}(), ...).unwrap()`. Consider using `{}{}!` instead\",\n+                                macro_name,\n+                                dest_name,\n+                                prefix,\n+                                macro_name.replace(\"write\", \"print\")\n+                            )\n+                        );\n+                    } else {\n+                        span_lint(\n+                            cx,\n+                            EXPLICIT_WRITE,\n+                            expr.span,\n+                            &format!(\"use of `{}().write_fmt(...).unwrap()`. Consider using `{}print!` instead\", dest_name, prefix),\n+                        );\n+                    }\n                 }\n+\n             }\n         }\n     }\n }\n+\n+// Extract the output string from the given `write_args`.\n+fn write_output_string(write_args: &HirVec<Expr>) -> Option<String> {\n+    if_chain! {\n+        // Obtain the string that should be printed\n+        if write_args.len() > 1;\n+        if let ExprKind::Call(_, ref output_args) = write_args[1].node;\n+        if output_args.len() > 0;\n+        if let ExprKind::AddrOf(_, ref output_string_expr) = output_args[0].node;\n+        if let ExprKind::Array(ref string_exprs) = output_string_expr.node;\n+        if string_exprs.len() > 0;\n+        if let ExprKind::Lit(ref lit) = string_exprs[0].node;\n+        if let LitKind::Str(ref write_output, _) = lit.node;\n+        then {\n+            return Some(write_output.to_string())\n+        }\n+    }\n+    None\n+}"}, {"sha": "a862d774174bd353baedcc9d4c4f63245bc4190e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c823cabab1c2a0b4ad723b49338e04b60b14ae5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c823cabab1c2a0b4ad723b49338e04b60b14ae5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7c823cabab1c2a0b4ad723b49338e04b60b14ae5", "patch": "@@ -14,6 +14,7 @@\n #![feature(slice_patterns)]\n #![feature(stmt_expr_attributes)]\n #![feature(range_contains)]\n+#![feature(str_escape)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![recursion_limit = \"256\"]\n #![warn(rust_2018_idioms, trivial_casts, trivial_numeric_casts)]"}, {"sha": "01a63b3a95f28e92aa5b26730ce76fcad5260352", "filename": "tests/ui/explicit_write.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c823cabab1c2a0b4ad723b49338e04b60b14ae5/tests%2Fui%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c823cabab1c2a0b4ad723b49338e04b60b14ae5/tests%2Fui%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.rs?ref=7c823cabab1c2a0b4ad723b49338e04b60b14ae5", "patch": "@@ -27,6 +27,10 @@ fn main() {\n         writeln!(std::io::stderr(), \"test\").unwrap();\n         std::io::stdout().write_fmt(format_args!(\"test\")).unwrap();\n         std::io::stderr().write_fmt(format_args!(\"test\")).unwrap();\n+\n+        // including newlines\n+        writeln!(std::io::stdout(), \"test\\ntest\").unwrap();\n+        writeln!(std::io::stderr(), \"test\\ntest\").unwrap();\n     }\n     // these should not warn, different destination\n     {"}, {"sha": "1a11dbc169bd204b2298084643e3bec9a718aea4", "filename": "tests/ui/explicit_write.stderr", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7c823cabab1c2a0b4ad723b49338e04b60b14ae5/tests%2Fui%2Fexplicit_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c823cabab1c2a0b4ad723b49338e04b60b14ae5/tests%2Fui%2Fexplicit_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.stderr?ref=7c823cabab1c2a0b4ad723b49338e04b60b14ae5", "patch": "@@ -1,40 +1,52 @@\n-error: use of `write!(stdout(), ...).unwrap()`. Consider using `print!` instead\n+error: use of `write!(stdout(), ...).unwrap()`\n   --> $DIR/explicit_write.rs:24:9\n    |\n 24 |         write!(std::io::stdout(), \"test\").unwrap();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `print!(\"test\")`\n    |\n    = note: `-D clippy::explicit-write` implied by `-D warnings`\n \n-error: use of `write!(stderr(), ...).unwrap()`. Consider using `eprint!` instead\n+error: use of `write!(stderr(), ...).unwrap()`\n   --> $DIR/explicit_write.rs:25:9\n    |\n 25 |         write!(std::io::stderr(), \"test\").unwrap();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprint!(\"test\")`\n \n-error: use of `writeln!(stdout(), ...).unwrap()`. Consider using `println!` instead\n+error: use of `writeln!(stdout(), ...).unwrap()`\n   --> $DIR/explicit_write.rs:26:9\n    |\n 26 |         writeln!(std::io::stdout(), \"test\").unwrap();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `println!(\"test\")`\n \n-error: use of `writeln!(stderr(), ...).unwrap()`. Consider using `eprintln!` instead\n+error: use of `writeln!(stderr(), ...).unwrap()`\n   --> $DIR/explicit_write.rs:27:9\n    |\n 27 |         writeln!(std::io::stderr(), \"test\").unwrap();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprintln!(\"test\")`\n \n-error: use of `stdout().write_fmt(...).unwrap()`. Consider using `print!` instead\n+error: use of `stdout().write_fmt(...).unwrap()`\n   --> $DIR/explicit_write.rs:28:9\n    |\n 28 |         std::io::stdout().write_fmt(format_args!(\"test\")).unwrap();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `print!(\"test\")`\n \n-error: use of `stderr().write_fmt(...).unwrap()`. Consider using `eprint!` instead\n+error: use of `stderr().write_fmt(...).unwrap()`\n   --> $DIR/explicit_write.rs:29:9\n    |\n 29 |         std::io::stderr().write_fmt(format_args!(\"test\")).unwrap();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprint!(\"test\")`\n \n-error: aborting due to 6 previous errors\n+error: use of `writeln!(stdout(), ...).unwrap()`\n+  --> $DIR/explicit_write.rs:32:9\n+   |\n+32 |         writeln!(std::io::stdout(), \"test/ntest\").unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `println!(\"test/ntest\")`\n+\n+error: use of `writeln!(stderr(), ...).unwrap()`\n+  --> $DIR/explicit_write.rs:33:9\n+   |\n+33 |         writeln!(std::io::stderr(), \"test/ntest\").unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprintln!(\"test/ntest\")`\n+\n+error: aborting due to 8 previous errors\n "}]}