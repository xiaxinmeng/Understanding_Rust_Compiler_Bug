{"sha": "fd53445d05874d7662682b00d81cf073cfdbe505", "node_id": "C_kwDOAAsO6NoAKGZkNTM0NDVkMDU4NzRkNzY2MjY4MmIwMGQ4MWNmMDczY2ZkYmU1MDU", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-11-12T00:48:27Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-11-12T00:48:27Z"}, "message": "Add pointer scatter/gather", "tree": {"sha": "5ffc1e6ab8d152ce35f35cf3238225cabe938075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ffc1e6ab8d152ce35f35cf3238225cabe938075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd53445d05874d7662682b00d81cf073cfdbe505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd53445d05874d7662682b00d81cf073cfdbe505", "html_url": "https://github.com/rust-lang/rust/commit/fd53445d05874d7662682b00d81cf073cfdbe505", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd53445d05874d7662682b00d81cf073cfdbe505/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecc28752e871af8886a49fdefdf4733a2dae8aac", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecc28752e871af8886a49fdefdf4733a2dae8aac", "html_url": "https://github.com/rust-lang/rust/commit/ecc28752e871af8886a49fdefdf4733a2dae8aac"}], "stats": {"total": 68, "additions": 65, "deletions": 3}, "files": [{"sha": "850a517c7990c4aeb55414289aeb1a66f35a832c", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 65, "deletions": 3, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/fd53445d05874d7662682b00d81cf073cfdbe505/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd53445d05874d7662682b00d81cf073cfdbe505/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=fd53445d05874d7662682b00d81cf073cfdbe505", "patch": "@@ -364,8 +364,44 @@ where\n         let base_ptr = Simd::<*const T, LANES>::splat(slice.as_ptr());\n         // Ferris forgive me, I have done pointer arithmetic here.\n         let ptrs = base_ptr.wrapping_add(idxs);\n-        // Safety: The ptrs have been bounds-masked to prevent memory-unsafe reads insha'allah\n-        unsafe { intrinsics::simd_gather(or, ptrs, enable.to_int()) }\n+        // Safety: The caller is responsible for determining the indices are okay to read\n+        unsafe { Self::gather_select_ptr(ptrs, enable, or) }\n+    }\n+\n+    /// Read pointers elementwise into a SIMD vector vector.\n+    ///\n+    /// # Safety\n+    ///\n+    /// Each read must satisfy the same conditions as [`core::ptr::read`].\n+    #[must_use]\n+    #[inline]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n+    pub unsafe fn gather_ptr(source: Simd<*const T, LANES>) -> Self\n+    where\n+        T: Default,\n+    {\n+        // TODO: add an intrinsic that doesn't use a passthru vector, and remove the T: Default bound\n+        // Safety: The caller is responsible for upholding all invariants\n+        unsafe { Self::gather_select_ptr(source, Mask::splat(true), Self::default()) }\n+    }\n+\n+    /// Conditionally read pointers elementwise into a SIMD vector vector.\n+    /// The mask `enable`s all `true` lanes and disables all `false` lanes.\n+    /// If a lane is disabled, the lane is selected from the `or` vector and no read is performed.\n+    ///\n+    /// # Safety\n+    ///\n+    /// Enabled lanes must satisfy the same conditions as [`core::ptr::read`].\n+    #[must_use]\n+    #[inline]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n+    pub unsafe fn gather_select_ptr(\n+        source: Simd<*const T, LANES>,\n+        enable: Mask<isize, LANES>,\n+        or: Self,\n+    ) -> Self {\n+        // Safety: The caller is responsible for upholding all invariants\n+        unsafe { intrinsics::simd_gather(or, source, enable.to_int()) }\n     }\n \n     /// Writes the values in a SIMD vector to potentially discontiguous indices in `slice`.\n@@ -473,10 +509,36 @@ where\n             // Ferris forgive me, I have done pointer arithmetic here.\n             let ptrs = base_ptr.wrapping_add(idxs);\n             // The ptrs have been bounds-masked to prevent memory-unsafe writes insha'allah\n-            intrinsics::simd_scatter(self, ptrs, enable.to_int())\n+            self.scatter_select_ptr(ptrs, enable);\n             // Cleared \u2622\ufe0f *mut T Zone\n         }\n     }\n+\n+    /// Write pointers elementwise into a SIMD vector vector.\n+    ///\n+    /// # Safety\n+    ///\n+    /// Each write must satisfy the same conditions as [`core::ptr::write`].\n+    #[inline]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n+    pub unsafe fn scatter_ptr(self, dest: Simd<*mut T, LANES>) {\n+        // Safety: The caller is responsible for upholding all invariants\n+        unsafe { self.scatter_select_ptr(dest, Mask::splat(true)) }\n+    }\n+\n+    /// Conditionally write pointers elementwise into a SIMD vector vector.\n+    /// The mask `enable`s all `true` lanes and disables all `false` lanes.\n+    /// If a lane is disabled, the writing that lane is skipped.\n+    ///\n+    /// # Safety\n+    ///\n+    /// Enabled lanes must satisfy the same conditions as [`core::ptr::write`].\n+    #[inline]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n+    pub unsafe fn scatter_select_ptr(self, dest: Simd<*mut T, LANES>, enable: Mask<isize, LANES>) {\n+        // Safety: The caller is responsible for upholding all invariants\n+        unsafe { intrinsics::simd_scatter(self, dest, enable.to_int()) }\n+    }\n }\n \n impl<T, const LANES: usize> Copy for Simd<T, LANES>"}]}