{"sha": "39b3a0561f06b1ea01a12d8fc3372334116a7833", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YjNhMDU2MWYwNmIxZWEwMWExMmQ4ZmMzMzcyMzM0MTE2YTc4MzM=", "commit": {"author": {"name": "Steven Stewart-Gallus", "email": "sstewartgallus00@mylangara.bc.ca", "date": "2013-07-22T21:43:30Z"}, "committer": {"name": "Steven Stewart-Gallus", "email": "sstewartgallus00@mylangara.bc.ca", "date": "2013-07-28T05:06:29Z"}, "message": "Fix nits.", "tree": {"sha": "f28193aa80d78d16efd25cf319fbd8b604125173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f28193aa80d78d16efd25cf319fbd8b604125173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39b3a0561f06b1ea01a12d8fc3372334116a7833", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39b3a0561f06b1ea01a12d8fc3372334116a7833", "html_url": "https://github.com/rust-lang/rust/commit/39b3a0561f06b1ea01a12d8fc3372334116a7833", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39b3a0561f06b1ea01a12d8fc3372334116a7833/comments", "author": {"login": "mstewartgallus", "id": 4070335, "node_id": "MDQ6VXNlcjQwNzAzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4070335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mstewartgallus", "html_url": "https://github.com/mstewartgallus", "followers_url": "https://api.github.com/users/mstewartgallus/followers", "following_url": "https://api.github.com/users/mstewartgallus/following{/other_user}", "gists_url": "https://api.github.com/users/mstewartgallus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mstewartgallus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mstewartgallus/subscriptions", "organizations_url": "https://api.github.com/users/mstewartgallus/orgs", "repos_url": "https://api.github.com/users/mstewartgallus/repos", "events_url": "https://api.github.com/users/mstewartgallus/events{/privacy}", "received_events_url": "https://api.github.com/users/mstewartgallus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mstewartgallus", "id": 4070335, "node_id": "MDQ6VXNlcjQwNzAzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4070335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mstewartgallus", "html_url": "https://github.com/mstewartgallus", "followers_url": "https://api.github.com/users/mstewartgallus/followers", "following_url": "https://api.github.com/users/mstewartgallus/following{/other_user}", "gists_url": "https://api.github.com/users/mstewartgallus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mstewartgallus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mstewartgallus/subscriptions", "organizations_url": "https://api.github.com/users/mstewartgallus/orgs", "repos_url": "https://api.github.com/users/mstewartgallus/repos", "events_url": "https://api.github.com/users/mstewartgallus/events{/privacy}", "received_events_url": "https://api.github.com/users/mstewartgallus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0b7515aedcaa161bb206e651a374d7ff27e52a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b7515aedcaa161bb206e651a374d7ff27e52a7", "html_url": "https://github.com/rust-lang/rust/commit/d0b7515aedcaa161bb206e651a374d7ff27e52a7"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "9479e47ed8c9db45719ed725bba0cb2dd6c78797", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39b3a0561f06b1ea01a12d8fc3372334116a7833/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b3a0561f06b1ea01a12d8fc3372334116a7833/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=39b3a0561f06b1ea01a12d8fc3372334116a7833", "patch": "@@ -182,11 +182,11 @@ impl<T:Send> MutexArc<T> {\n      * Create a mutex-protected Arc with the supplied data and a specified number\n      * of condvars (as sync::Mutex::new_with_condvars).\n      */\n-    pub fn new_with_condvars(user_data: T,\n-                             num_condvars: uint) -> MutexArc<T> {\n-        let data =\n-            MutexArcInner { lock: Mutex::new_with_condvars(num_condvars),\n-                           failed: false, data: user_data };\n+    pub fn new_with_condvars(user_data: T, num_condvars: uint) -> MutexArc<T> {\n+        let data = MutexArcInner {\n+            lock: Mutex::new_with_condvars(num_condvars),\n+            failed: false, data: user_data\n+        };\n         MutexArc { x: UnsafeAtomicRcBox::new(data) }\n     }\n \n@@ -333,9 +333,10 @@ impl<T:Freeze + Send> RWArc<T> {\n      * of condvars (as sync::RWLock::new_with_condvars).\n      */\n     pub fn new_with_condvars(user_data: T, num_condvars: uint) -> RWArc<T> {\n-        let data =\n-            RWArcInner { lock: RWLock::new_with_condvars(num_condvars),\n-                        failed: false, data: user_data };\n+        let data = RWArcInner {\n+            lock: RWLock::new_with_condvars(num_condvars),\n+            failed: false, data: user_data\n+        };\n         RWArc { x: UnsafeAtomicRcBox::new(data), }\n     }\n "}, {"sha": "b6fc5b1f66257d91b43d2a7840e6a6f079e886db", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39b3a0561f06b1ea01a12d8fc3372334116a7833/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b3a0561f06b1ea01a12d8fc3372334116a7833/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=39b3a0561f06b1ea01a12d8fc3372334116a7833", "patch": "@@ -236,13 +236,11 @@ impl<T> Drop for UnsafeAtomicRcBox<T>{\n \n /****************************************************************************/\n \n-enum RTLittleLock {\n-    // We know nothing about the runtime's representation of the\n-    // little lock so we leave the definition empty.\n-}\n+#[allow(non_camel_case_types)] // runtime type\n+type rust_little_lock = *libc::c_void;\n \n pub struct LittleLock {\n-    l: *RTLittleLock,\n+    l: rust_little_lock,\n }\n \n impl Drop for LittleLock {\n@@ -351,10 +349,10 @@ impl<T:Send> Exclusive<T> {\n }\n \n extern {\n-    fn rust_create_little_lock() -> *RTLittleLock;\n-    fn rust_destroy_little_lock(lock: *RTLittleLock);\n-    fn rust_lock_little_lock(lock: *RTLittleLock);\n-    fn rust_unlock_little_lock(lock: *RTLittleLock);\n+    fn rust_create_little_lock() -> rust_little_lock;\n+    fn rust_destroy_little_lock(lock: rust_little_lock);\n+    fn rust_lock_little_lock(lock: rust_little_lock);\n+    fn rust_unlock_little_lock(lock: rust_little_lock);\n }\n \n #[cfg(test)]"}]}