{"sha": "346560b31809e2ca5459eb221f093fd0ab1abea1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NjU2MGIzMTgwOWUyY2E1NDU5ZWIyMjFmMDkzZmQwYWIxYWJlYTE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-03T14:57:47Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-03T14:57:47Z"}, "message": "factor out the statement index into the stackframe", "tree": {"sha": "a0a3f87b4f511d270bc14515c26b6e5b2b5ba865", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0a3f87b4f511d270bc14515c26b6e5b2b5ba865"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/346560b31809e2ca5459eb221f093fd0ab1abea1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXUZrrAAoJEFbW7qD8Z6xGi9gP/2lTPDPwjVATySfpCEsiG9Gd\n1VdahO8MehfYmnD6S5qLbwoOc5hQ82gkxfV2x0mozpKZ63GNIZqGa9NQTZSmPkJ4\nvXVl9jqVb9XCBCavl8p8z78ABUWpR1O13kzB/1RBOAl1q4MUoJUvnmY9AKzZt/ry\nmQVFWqxrJusNffeYFRp1/YdLsCRo7p2r1GaTdOMkaYMSL43E9xjQ3MT3awCGd+s6\nPKZdR9m7lHZI9xXuZ09gJQAUodR2Ufq/I8tPPBZEHizZKwvK4LlT7upE2R92ydbp\n8eIlVRZ8n005Qs/yzg61hwyh7P7ZRY2ER1KrpjMysNid9IarGFxSSaHpcNvVhIT+\nG+tv4pxAWDXCQiI4Ob+sAUrmclLeu7iQw8I0pz1JeIqplIBjW6uzc9OCkD9fHzSk\n03R7rOS3TR3udFAvGDSQkxFDXDgv/gJkJ+Us+mP99eLJPZnnEjpS6TW4NrgBwV5e\nDf6D5GHMXBWcE27ATFoLH331oNYiJgIbATi8qOcPgyzppNAFGaYKKRAWjUwKJKS0\nqw7FV/VbV0Cs8OT4X8R+V5E2WMyuiQ6TbSwHePNdkJnKPa36BlZ2brX9OJ2Tk139\nNhlLXDnkpwPtneqvZJHOBUYYftFZriTuAlDStgjlEhJKnu+IsMgUK3o8sGSMqfmu\nmF96HrBMhWWXHCkNIZKZ\n=IA4N\n-----END PGP SIGNATURE-----", "payload": "tree a0a3f87b4f511d270bc14515c26b6e5b2b5ba865\nparent f995db9ffba925590e4c78917362998be02fcbc1\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464965867 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464965867 +0200\n\nfactor out the statement index into the stackframe"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/346560b31809e2ca5459eb221f093fd0ab1abea1", "html_url": "https://github.com/rust-lang/rust/commit/346560b31809e2ca5459eb221f093fd0ab1abea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/346560b31809e2ca5459eb221f093fd0ab1abea1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f995db9ffba925590e4c78917362998be02fcbc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f995db9ffba925590e4c78917362998be02fcbc1", "html_url": "https://github.com/rust-lang/rust/commit/f995db9ffba925590e4c78917362998be02fcbc1"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "079ed6cf59af9ffdb63bc9b66040047f7d89bd33", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/346560b31809e2ca5459eb221f093fd0ab1abea1/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346560b31809e2ca5459eb221f093fd0ab1abea1/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=346560b31809e2ca5459eb221f093fd0ab1abea1", "patch": "@@ -94,6 +94,9 @@ struct Frame<'a, 'tcx: 'a> {\n \n     /// List of precomputed promoted constants\n     promoted: HashMap<usize, Pointer>,\n+\n+    /// The index of the currently evaluated statment\n+    stmt: usize,\n }\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n@@ -246,6 +249,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n             span: span,\n             def_id: def_id,\n             substs: substs,\n+            stmt: 0,\n         });\n \n         let locals: Vec<Pointer> = arg_tys.chain(var_tys).chain(temp_tys).map(|ty| {"}, {"sha": "448fa83fa676683ba19f8474c24a5c4f42799416", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/346560b31809e2ca5459eb221f093fd0ab1abea1/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346560b31809e2ca5459eb221f093fd0ab1abea1/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=346560b31809e2ca5459eb221f093fd0ab1abea1", "patch": "@@ -22,8 +22,6 @@ pub enum Event {\n \n pub struct Stepper<'fncx, 'a: 'fncx, 'b: 'a + 'mir, 'mir: 'fncx, 'tcx: 'b>{\n     fncx: &'fncx mut FnEvalContext<'a, 'b, 'mir, 'tcx>,\n-    // a stack of statement positions\n-    stmt: Vec<usize>,\n     mir: CachedMir<'mir, 'tcx>,\n     process: fn (&mut Stepper<'fncx, 'a, 'b, 'mir, 'tcx>) -> EvalResult<()>,\n     // a stack of constants\n@@ -35,7 +33,6 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n         Stepper {\n             mir: fncx.mir(),\n             fncx: fncx,\n-            stmt: vec![0],\n             process: Self::dummy,\n             constants: vec![Vec::new()],\n         }\n@@ -45,16 +42,17 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n \n     fn statement(&mut self) -> EvalResult<()> {\n         let block_data = self.mir.basic_block_data(self.fncx.frame().next_block);\n-        let stmt = &block_data.statements[*self.stmt.last().unwrap()];\n+        let stmt = &block_data.statements[self.fncx.frame().stmt];\n         let mir::StatementKind::Assign(ref lvalue, ref rvalue) = stmt.kind;\n         let result = self.fncx.eval_assignment(lvalue, rvalue);\n         self.fncx.maybe_report(stmt.span, result)?;\n-        *self.stmt.last_mut().unwrap() += 1;\n+        self.fncx.frame_mut().stmt += 1;\n         Ok(())\n     }\n \n     fn terminator(&mut self) -> EvalResult<()> {\n-        *self.stmt.last_mut().unwrap() = 0;\n+        // after a terminator we go to a new block\n+        self.fncx.frame_mut().stmt = 0;\n         let term = {\n             let block_data = self.mir.basic_block_data(self.fncx.frame().next_block);\n             let terminator = block_data.terminator();\n@@ -65,7 +63,6 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n             TerminatorTarget::Block => {},\n             TerminatorTarget::Return => {\n                 self.fncx.pop_stack_frame();\n-                self.stmt.pop();\n                 assert!(self.constants.last().unwrap().is_empty());\n                 self.constants.pop();\n                 if !self.fncx.stack.is_empty() {\n@@ -74,7 +71,6 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n             },\n             TerminatorTarget::Call => {\n                 self.mir = self.fncx.mir();\n-                self.stmt.push(0);\n                 self.constants.push(Vec::new());\n             },\n         }\n@@ -89,15 +85,13 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n                 // FIXME: somehow encode that this is a promoted constant's frame\n                 let def_id = self.fncx.frame().def_id;\n                 self.fncx.push_stack_frame(def_id, span, mir, substs, Some(return_ptr));\n-                self.stmt.push(0);\n                 self.constants.push(Vec::new());\n                 self.mir = self.fncx.mir();\n             },\n             Some((ConstantId::Static { def_id, substs }, span, return_ptr, mir)) => {\n                 trace!(\"adding static {:?}, {:?}\", def_id, span);\n                 self.fncx.gecx.statics.insert(def_id, return_ptr);\n                 self.fncx.push_stack_frame(def_id, span, mir, substs, Some(return_ptr));\n-                self.stmt.push(0);\n                 self.constants.push(Vec::new());\n                 self.mir = self.fncx.mir();\n             },\n@@ -121,9 +115,10 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n         }\n \n         let block = self.fncx.frame().next_block;\n+        let stmt = self.fncx.frame().stmt;\n         let basic_block = self.mir.basic_block_data(block);\n \n-        if let Some(ref stmt) = basic_block.statements.get(*self.stmt.last().unwrap()) {\n+        if let Some(ref stmt) = basic_block.statements.get(stmt) {\n             assert!(self.constants.last().unwrap().is_empty());\n             ConstantExtractor {\n                 constants: &mut self.constants.last_mut().unwrap(),\n@@ -158,7 +153,7 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n \n     /// returns the statement that will be processed next\n     pub fn stmt(&self) -> &mir::Statement {\n-        &self.fncx.basic_block().statements[*self.stmt.last().unwrap()]\n+        &self.fncx.basic_block().statements[self.fncx.frame().stmt]\n     }\n \n     /// returns the terminator of the current block"}]}