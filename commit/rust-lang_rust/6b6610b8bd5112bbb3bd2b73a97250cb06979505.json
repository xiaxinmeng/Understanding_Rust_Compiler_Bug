{"sha": "6b6610b8bd5112bbb3bd2b73a97250cb06979505", "node_id": "C_kwDOAAsO6NoAKDZiNjYxMGI4YmQ1MTEyYmJiM2JkMmI3M2E5NzI1MGNiMDY5Nzk1MDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-06T08:58:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-06T08:58:01Z"}, "message": "Auto merge of #102707 - fmease:rustdoc-render-more-cross-crate-hrtbs-properly, r=GuillaumeGomez\n\nrustdoc: render more cross-crate HRTBs properly\n\nFollow-up to #102439.\nRender the `for<>` parameter lists of cross-crate higher-rank trait bounds (in where-clauses and in `impl Trait`).\n\nI've added a new field `bound_params` to `clean::WherePredicate::EqPredicate` (mirroring its sibling variant `BoundPredicate`). However, I had to box the existing fields since `EqPredicate` used to be the largest variant (128 bytes on 64-bit systems) and it would only have gotten bigger).\nNot sure if you like that approach. As an alternative, I could pass the uncleaned `ty::Predicate` alongside the cleaned `WherePredicate` to the various re-sugaring methods (similar to what `clean::AutoTraitFinder::param_env_to_generics` does).\n\nI haven't yet added the HTML & JSON rendering code for the newly added `bound_params` field since I am waiting for your opinion. Those two rendering code paths should actually be unreachable in practice given we re-sugar all(?) equality predicates to associated type bindings (and arbitrary equality predicates are not part of the Rust surface language at the time of this writing).\n\nIf you agree with storing `bound_params` in `EqPredicate`, I think I can use it to greatly simplify the `clean::auto_trait` module (by also using `simplify::merge_bounds`). Maybe I can do that in any case though.\n\n`@rustbot` label T-rustdoc A-cross-crate-reexports\nr? `@GuillaumeGomez`", "tree": {"sha": "7fe780937de98c96b708abee07f1b954d658d3c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fe780937de98c96b708abee07f1b954d658d3c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b6610b8bd5112bbb3bd2b73a97250cb06979505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b6610b8bd5112bbb3bd2b73a97250cb06979505", "html_url": "https://github.com/rust-lang/rust/commit/6b6610b8bd5112bbb3bd2b73a97250cb06979505", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b6610b8bd5112bbb3bd2b73a97250cb06979505/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bd30785eb6e55f317b41b7c278f438807eeb174", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd30785eb6e55f317b41b7c278f438807eeb174", "html_url": "https://github.com/rust-lang/rust/commit/4bd30785eb6e55f317b41b7c278f438807eeb174"}, {"sha": "73c239e5eb0b3197ee6d0faeaf85a8eaccb8a491", "url": "https://api.github.com/repos/rust-lang/rust/commits/73c239e5eb0b3197ee6d0faeaf85a8eaccb8a491", "html_url": "https://github.com/rust-lang/rust/commit/73c239e5eb0b3197ee6d0faeaf85a8eaccb8a491"}], "stats": {"total": 165, "additions": 124, "deletions": 41}, "files": [{"sha": "efa9242a46784c9d8105d26074784796c7c94a39", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=6b6610b8bd5112bbb3bd2b73a97250cb06979505", "patch": "@@ -475,6 +475,12 @@ where\n \n         let mut ty_to_fn: FxHashMap<Type, (PolyTrait, Option<Type>)> = Default::default();\n \n+        // FIXME: This code shares much of the logic found in `clean_ty_generics` and\n+        //        `simplify::where_clause`. Consider deduplicating it to avoid diverging\n+        //        implementations.\n+        //        Further, the code below does not merge (partially re-sugared) bounds like\n+        //        `Tr<A = T>` & `Tr<B = U>` and it does not render higher-ranked parameters\n+        //        originating from equality predicates.\n         for p in clean_where_predicates {\n             let (orig_p, p) = (p, clean_predicate(p, self.cx));\n             if p.is_none() {\n@@ -549,8 +555,8 @@ where\n                 WherePredicate::RegionPredicate { lifetime, bounds } => {\n                     lifetime_to_bounds.entry(lifetime).or_default().extend(bounds);\n                 }\n-                WherePredicate::EqPredicate { lhs, rhs } => {\n-                    match lhs {\n+                WherePredicate::EqPredicate { lhs, rhs, bound_params } => {\n+                    match *lhs {\n                         Type::QPath(box QPathData {\n                             ref assoc, ref self_type, ref trait_, ..\n                         }) => {\n@@ -585,13 +591,14 @@ where\n                                 GenericArgs::AngleBracketed { ref mut bindings, .. } => {\n                                     bindings.push(TypeBinding {\n                                         assoc: assoc.clone(),\n-                                        kind: TypeBindingKind::Equality { term: rhs },\n+                                        kind: TypeBindingKind::Equality { term: *rhs },\n                                     });\n                                 }\n                                 GenericArgs::Parenthesized { .. } => {\n                                     existing_predicates.push(WherePredicate::EqPredicate {\n                                         lhs: lhs.clone(),\n                                         rhs,\n+                                        bound_params,\n                                     });\n                                     continue; // If something other than a Fn ends up\n                                     // with parentheses, leave it alone"}, {"sha": "11834a53afb372d2a35de56d3bc5942790e796fa", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 45, "deletions": 17, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6b6610b8bd5112bbb3bd2b73a97250cb06979505", "patch": "@@ -292,8 +292,9 @@ fn clean_where_predicate<'tcx>(\n         },\n \n         hir::WherePredicate::EqPredicate(ref wrp) => WherePredicate::EqPredicate {\n-            lhs: clean_ty(wrp.lhs_ty, cx),\n-            rhs: clean_ty(wrp.rhs_ty, cx).into(),\n+            lhs: Box::new(clean_ty(wrp.lhs_ty, cx)),\n+            rhs: Box::new(clean_ty(wrp.rhs_ty, cx).into()),\n+            bound_params: Vec::new(),\n         },\n     })\n }\n@@ -309,7 +310,9 @@ pub(crate) fn clean_predicate<'tcx>(\n         }\n         ty::PredicateKind::RegionOutlives(pred) => clean_region_outlives_predicate(pred),\n         ty::PredicateKind::TypeOutlives(pred) => clean_type_outlives_predicate(pred, cx),\n-        ty::PredicateKind::Projection(pred) => Some(clean_projection_predicate(pred, cx)),\n+        ty::PredicateKind::Projection(pred) => {\n+            Some(clean_projection_predicate(bound_predicate.rebind(pred), cx))\n+        }\n         ty::PredicateKind::ConstEvaluatable(..) => None,\n         ty::PredicateKind::WellFormed(..) => None,\n \n@@ -387,13 +390,25 @@ fn clean_hir_term<'tcx>(term: &hir::Term<'tcx>, cx: &mut DocContext<'tcx>) -> Te\n }\n \n fn clean_projection_predicate<'tcx>(\n-    pred: ty::ProjectionPredicate<'tcx>,\n+    pred: ty::Binder<'tcx, ty::ProjectionPredicate<'tcx>>,\n     cx: &mut DocContext<'tcx>,\n ) -> WherePredicate {\n-    let ty::ProjectionPredicate { projection_ty, term } = pred;\n+    let late_bound_regions = cx\n+        .tcx\n+        .collect_referenced_late_bound_regions(&pred)\n+        .into_iter()\n+        .filter_map(|br| match br {\n+            ty::BrNamed(_, name) if name != kw::UnderscoreLifetime => Some(Lifetime(name)),\n+            _ => None,\n+        })\n+        .collect();\n+\n+    let ty::ProjectionPredicate { projection_ty, term } = pred.skip_binder();\n+\n     WherePredicate::EqPredicate {\n-        lhs: clean_projection(projection_ty, cx, None),\n-        rhs: clean_middle_term(term, cx),\n+        lhs: Box::new(clean_projection(projection_ty, cx, None)),\n+        rhs: Box::new(clean_middle_term(term, cx)),\n+        bound_params: late_bound_regions,\n     }\n }\n \n@@ -655,8 +670,9 @@ fn clean_ty_generics<'tcx>(\n         })\n         .collect::<Vec<GenericParamDef>>();\n \n-    // param index -> [(DefId of trait, associated type name and generics, type)]\n-    let mut impl_trait_proj = FxHashMap::<u32, Vec<(DefId, PathSegment, Ty<'_>)>>::default();\n+    // param index -> [(trait DefId, associated type name & generics, type, higher-ranked params)]\n+    let mut impl_trait_proj =\n+        FxHashMap::<u32, Vec<(DefId, PathSegment, Ty<'_>, Vec<GenericParamDef>)>>::default();\n \n     let where_predicates = preds\n         .predicates\n@@ -715,6 +731,14 @@ fn clean_ty_generics<'tcx>(\n                             trait_did,\n                             name,\n                             rhs.ty().unwrap(),\n+                            p.get_bound_params()\n+                                .into_iter()\n+                                .flatten()\n+                                .map(|param| GenericParamDef {\n+                                    name: param.0,\n+                                    kind: GenericParamDefKind::Lifetime { outlives: Vec::new() },\n+                                })\n+                                .collect(),\n                         ));\n                     }\n \n@@ -730,15 +754,19 @@ fn clean_ty_generics<'tcx>(\n         // Move trait bounds to the front.\n         bounds.sort_by_key(|b| !matches!(b, GenericBound::TraitBound(..)));\n \n-        if let crate::core::ImplTraitParam::ParamIndex(idx) = param {\n-            if let Some(proj) = impl_trait_proj.remove(&idx) {\n-                for (trait_did, name, rhs) in proj {\n-                    let rhs = clean_middle_ty(rhs, cx, None);\n-                    simplify::merge_bounds(cx, &mut bounds, trait_did, name, &Term::Type(rhs));\n-                }\n+        let crate::core::ImplTraitParam::ParamIndex(idx) = param else { unreachable!() };\n+        if let Some(proj) = impl_trait_proj.remove(&idx) {\n+            for (trait_did, name, rhs, bound_params) in proj {\n+                let rhs = clean_middle_ty(rhs, cx, None);\n+                simplify::merge_bounds(\n+                    cx,\n+                    &mut bounds,\n+                    bound_params,\n+                    trait_did,\n+                    name,\n+                    &Term::Type(rhs),\n+                );\n             }\n-        } else {\n-            unreachable!();\n         }\n \n         cx.impl_trait_bounds.insert(param, bounds);"}, {"sha": "1bcb9fcd5a45ffc7e5f1ace808e9095b726f2780", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=6b6610b8bd5112bbb3bd2b73a97250cb06979505", "patch": "@@ -39,23 +39,23 @@ pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n             WP::RegionPredicate { lifetime, bounds } => {\n                 lifetimes.push((lifetime, bounds));\n             }\n-            WP::EqPredicate { lhs, rhs } => equalities.push((lhs, rhs)),\n+            WP::EqPredicate { lhs, rhs, bound_params } => equalities.push((lhs, rhs, bound_params)),\n         }\n     }\n \n     // Look for equality predicates on associated types that can be merged into\n     // general bound predicates.\n-    equalities.retain(|&(ref lhs, ref rhs)| {\n+    equalities.retain(|&(ref lhs, ref rhs, ref bound_params)| {\n         let Some((ty, trait_did, name)) = lhs.projection() else { return true; };\n-        // FIXME(fmease): We don't handle HRTBs correctly here.\n-        //                Pass `_bound_params` (higher-rank lifetimes) to a modified version of\n-        //                `merge_bounds`. That vector is currently always empty though since we\n-        //                don't keep track of late-bound lifetimes when cleaning projection\n-        //                predicates to cleaned equality predicates while we should first query\n-        //                them with `collect_referenced_late_bound_regions` and then store them\n-        //                (or something similar). For prior art, see `clean::auto_trait`.\n-        let Some((bounds, _bound_params)) = tybounds.get_mut(ty) else { return true };\n-        merge_bounds(cx, bounds, trait_did, name, rhs)\n+        let Some((bounds, _)) = tybounds.get_mut(ty) else { return true };\n+        let bound_params = bound_params\n+            .into_iter()\n+            .map(|param| clean::GenericParamDef {\n+                name: param.0,\n+                kind: clean::GenericParamDefKind::Lifetime { outlives: Vec::new() },\n+            })\n+            .collect();\n+        merge_bounds(cx, bounds, bound_params, trait_did, name, rhs)\n     });\n \n     // And finally, let's reassemble everything\n@@ -68,13 +68,18 @@ pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n         bounds,\n         bound_params,\n     }));\n-    clauses.extend(equalities.into_iter().map(|(lhs, rhs)| WP::EqPredicate { lhs, rhs }));\n+    clauses.extend(equalities.into_iter().map(|(lhs, rhs, bound_params)| WP::EqPredicate {\n+        lhs,\n+        rhs,\n+        bound_params,\n+    }));\n     clauses\n }\n \n pub(crate) fn merge_bounds(\n     cx: &clean::DocContext<'_>,\n     bounds: &mut Vec<clean::GenericBound>,\n+    mut bound_params: Vec<clean::GenericParamDef>,\n     trait_did: DefId,\n     assoc: clean::PathSegment,\n     rhs: &clean::Term,\n@@ -91,6 +96,14 @@ pub(crate) fn merge_bounds(\n             return false;\n         }\n         let last = trait_ref.trait_.segments.last_mut().expect(\"segments were empty\");\n+\n+        trait_ref.generic_params.append(&mut bound_params);\n+        // Since the parameters (probably) originate from `tcx.collect_*_late_bound_regions` which\n+        // returns a hash set, sort them alphabetically to guarantee a stable and deterministic\n+        // output (and to fully deduplicate them).\n+        trait_ref.generic_params.sort_unstable_by(|p, q| p.name.as_str().cmp(q.name.as_str()));\n+        trait_ref.generic_params.dedup_by_key(|p| p.name);\n+\n         match last.args {\n             PP::AngleBracketed { ref mut bindings, .. } => {\n                 bindings.push(clean::TypeBinding {"}, {"sha": "7e0533800694ecc51650cb694b5842bc8136a776", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6b6610b8bd5112bbb3bd2b73a97250cb06979505", "patch": "@@ -1350,7 +1350,7 @@ impl Lifetime {\n pub(crate) enum WherePredicate {\n     BoundPredicate { ty: Type, bounds: Vec<GenericBound>, bound_params: Vec<Lifetime> },\n     RegionPredicate { lifetime: Lifetime, bounds: Vec<GenericBound> },\n-    EqPredicate { lhs: Type, rhs: Term },\n+    EqPredicate { lhs: Box<Type>, rhs: Box<Term>, bound_params: Vec<Lifetime> },\n }\n \n impl WherePredicate {\n@@ -1361,6 +1361,15 @@ impl WherePredicate {\n             _ => None,\n         }\n     }\n+\n+    pub(crate) fn get_bound_params(&self) -> Option<&[Lifetime]> {\n+        match self {\n+            Self::BoundPredicate { bound_params, .. } | Self::EqPredicate { bound_params, .. } => {\n+                Some(bound_params)\n+            }\n+            _ => None,\n+        }\n+    }\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]"}, {"sha": "943a074366e8e765639485fb2a1e906b2f9310af", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=6b6610b8bd5112bbb3bd2b73a97250cb06979505", "patch": "@@ -331,7 +331,8 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n                         bounds_display.truncate(bounds_display.len() - \" + \".len());\n                         write!(f, \"{}: {bounds_display}\", lifetime.print())\n                     }\n-                    clean::WherePredicate::EqPredicate { lhs, rhs } => {\n+                    // FIXME(fmease): Render bound params.\n+                    clean::WherePredicate::EqPredicate { lhs, rhs, bound_params: _ } => {\n                         if f.alternate() {\n                             write!(f, \"{:#} == {:#}\", lhs.print(cx), rhs.print(cx))\n                         } else {"}, {"sha": "cdf59cdd3284576423f033bc801c988498e5d019", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=6b6610b8bd5112bbb3bd2b73a97250cb06979505", "patch": "@@ -432,8 +432,9 @@ impl FromWithTcx<clean::WherePredicate> for WherePredicate {\n                 lifetime: convert_lifetime(lifetime),\n                 bounds: bounds.into_tcx(tcx),\n             },\n-            EqPredicate { lhs, rhs } => {\n-                WherePredicate::EqPredicate { lhs: lhs.into_tcx(tcx), rhs: rhs.into_tcx(tcx) }\n+            // FIXME(fmease): Convert bound parameters as well.\n+            EqPredicate { lhs, rhs, bound_params: _ } => {\n+                WherePredicate::EqPredicate { lhs: (*lhs).into_tcx(tcx), rhs: (*rhs).into_tcx(tcx) }\n             }\n         }\n     }"}, {"sha": "00976aa74420fec8a1533b6e1c065ba275dc4a8f", "filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds_with_bindings.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.rs?ref=6b6610b8bd5112bbb3bd2b73a97250cb06979505", "patch": "@@ -8,8 +8,6 @@ extern crate assoc_item_trait_bounds_with_bindings as aux;\n \n // FIXME(fmease): Don't render an incorrect `T: ?Sized` where-clause for parameters\n //                of GATs like `Main::Out{2,4}`. Add a snapshot test once it's fixed.\n-// FIXME(fmease): Print the `for<>` parameter list in the bounds of\n-//                `Main::Out{6,11,12}`.\n \n // @has main/trait.Main.html\n // @has - '//*[@id=\"associatedtype.Out0\"]' 'type Out0: Support<Item = ()>'\n@@ -18,13 +16,14 @@ extern crate assoc_item_trait_bounds_with_bindings as aux;\n // @has - '//*[@id=\"associatedtype.Out3\"]' 'type Out3: Support<Produce<()> = bool>'\n // @has - '//*[@id=\"associatedtype.Out4\"]' 'type Out4<T>: Support<Produce<T> = T>'\n // @has - '//*[@id=\"associatedtype.Out5\"]' \"type Out5: Support<Output<'static> = &'static ()>\"\n-// @has - '//*[@id=\"associatedtype.Out6\"]' \"type Out6: Support<Output<'a> = &'a ()>\"\n+// @has - '//*[@id=\"associatedtype.Out6\"]' \"type Out6: for<'a> Support<Output<'a> = &'a ()>\"\n // @has - '//*[@id=\"associatedtype.Out7\"]' \"type Out7: Support<Item = String, Produce<i32> = u32> + Unrelated\"\n // @has - '//*[@id=\"associatedtype.Out8\"]' \"type Out8: Unrelated + Protocol<i16, Q1 = u128, Q0 = ()>\"\n // @has - '//*[@id=\"associatedtype.Out9\"]' \"type Out9: FnMut(i32) -> bool + Clone\"\n // @has - '//*[@id=\"associatedtype.Out10\"]' \"type Out10<'q>: Support<Output<'q> = ()>\"\n-// @has - '//*[@id=\"associatedtype.Out11\"]' \"type Out11: Helper<A<'s> = &'s (), B<'r> = ()>\"\n-// @has - '//*[@id=\"associatedtype.Out12\"]' \"type Out12: Helper<B<'w> = Cow<'w, str>, A<'w> = bool>\"\n+// @has - '//*[@id=\"associatedtype.Out11\"]' \"type Out11: for<'r, 's> Helper<A<'s> = &'s (), B<'r> = ()>\"\n+// @has - '//*[@id=\"associatedtype.Out12\"]' \"type Out12: for<'w> Helper<B<'w> = Cow<'w, str>, A<'w> = bool>\"\n+// @has - '//*[@id=\"associatedtype.Out13\"]' \"type Out13: for<'fst, 'snd> Aid<'snd, Result<'fst> = &'fst mut str>\"\n //\n // Snapshots: Check that we do not render any where-clauses for those associated types since all of\n // the trait bounds contained within were moved to the bounds of the respective item."}, {"sha": "f451b1a0e99200cb1a18e071209c1e74529b5727", "filename": "src/test/rustdoc/inline_cross/auxiliary/assoc_item_trait_bounds_with_bindings.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds_with_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds_with_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds_with_bindings.rs?ref=6b6610b8bd5112bbb3bd2b73a97250cb06979505", "patch": "@@ -14,6 +14,7 @@ pub trait Main {\n     type Out10<'q>: Support<Output<'q> = ()>;\n     type Out11: for<'r, 's> Helper<A<'s> = &'s (), B<'r> = ()>;\n     type Out12: for<'w> Helper<B<'w> = std::borrow::Cow<'w, str>, A<'w> = bool>;\n+    type Out13: for<'fst, 'snd> Aid<'snd, Result<'fst> = &'fst mut str>;\n \n     fn make<F>(_: F, _: impl FnMut(&str) -> bool)\n     where\n@@ -38,3 +39,7 @@ pub trait Helper {\n     type A<'q>;\n     type B<'q>;\n }\n+\n+pub trait Aid<'src> {\n+    type Result<'inter>;\n+}"}, {"sha": "19433c9682bb0e273c2fb145ac2a202fd595211c", "filename": "src/test/rustdoc/inline_cross/auxiliary/impl_trait_aux.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimpl_trait_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimpl_trait_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimpl_trait_aux.rs?ref=6b6610b8bd5112bbb3bd2b73a97250cb06979505", "patch": "@@ -13,6 +13,19 @@ pub fn func3(_x: impl Iterator<Item = impl Iterator<Item = u8>> + Clone) {}\n \n pub fn func4<T: Iterator<Item = impl Clone>>(_x: T) {}\n \n+pub fn func5(\n+    _f: impl for<'any> Fn(&'any str, &'any str) -> bool + for<'r> Other<T<'r> = ()>,\n+    _a: impl for<'alpha, 'beta> Auxiliary<'alpha, Item<'beta> = fn(&'beta ())>,\n+) {}\n+\n+pub trait Other {\n+    type T<'dependency>;\n+}\n+\n+pub trait Auxiliary<'arena> {\n+    type Item<'input>;\n+}\n+\n pub async fn async_fn() {}\n \n pub struct Foo;"}, {"sha": "6c1cf8252a9d6c8e1395d6db9bf7e261439a683a", "filename": "src/test/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b6610b8bd5112bbb3bd2b73a97250cb06979505/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=6b6610b8bd5112bbb3bd2b73a97250cb06979505", "patch": "@@ -26,6 +26,13 @@ pub use impl_trait_aux::func3;\n // @has - '//pre[@class=\"rust fn\"]' \"T: Iterator<Item = impl Clone>,\"\n pub use impl_trait_aux::func4;\n \n+// @has impl_trait/fn.func5.html\n+// @has - '//pre[@class=\"rust fn\"]' \"func5(\"\n+// @has - '//pre[@class=\"rust fn\"]' \"_f: impl for<'any> Fn(&'any str, &'any str) -> bool + for<'r> Other<T<'r> = ()>,\"\n+// @has - '//pre[@class=\"rust fn\"]' \"_a: impl for<'alpha, 'beta> Auxiliary<'alpha, Item<'beta> = fn(&'beta ())>\"\n+// @!has - '//pre[@class=\"rust fn\"]' 'where'\n+pub use impl_trait_aux::func5;\n+\n // @has impl_trait/fn.async_fn.html\n // @has - '//pre[@class=\"rust fn\"]' \"pub async fn async_fn()\"\n pub use impl_trait_aux::async_fn;"}]}