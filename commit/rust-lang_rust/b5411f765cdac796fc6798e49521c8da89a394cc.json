{"sha": "b5411f765cdac796fc6798e49521c8da89a394cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NDExZjc2NWNkYWM3OTZmYzY3OThlNDk1MjFjOGRhODlhMzk0Y2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-22T00:14:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-22T03:15:22Z"}, "message": "add tests to manage, fix test breakage I inadvertently introduced", "tree": {"sha": "bd7d50712aabb73a3ac8164340fb171be90b23b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd7d50712aabb73a3ac8164340fb171be90b23b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5411f765cdac796fc6798e49521c8da89a394cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5411f765cdac796fc6798e49521c8da89a394cc", "html_url": "https://github.com/rust-lang/rust/commit/b5411f765cdac796fc6798e49521c8da89a394cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5411f765cdac796fc6798e49521c8da89a394cc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b489f6fff4aa07bea2db9457ece5f77c211e016", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b489f6fff4aa07bea2db9457ece5f77c211e016", "html_url": "https://github.com/rust-lang/rust/commit/9b489f6fff4aa07bea2db9457ece5f77c211e016"}], "stats": {"total": 85, "additions": 82, "deletions": 3}, "files": [{"sha": "47d5d7f7cddf267112192d6762a7046842145a36", "filename": "src/libcore/managed.rs", "status": "modified", "additions": 82, "deletions": 3, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/b5411f765cdac796fc6798e49521c8da89a394cc/src%2Flibcore%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5411f765cdac796fc6798e49521c8da89a394cc/src%2Flibcore%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmanaged.rs?ref=b5411f765cdac796fc6798e49521c8da89a394cc", "patch": "@@ -3,7 +3,7 @@\n Module for wrapping freezable data structures in managed boxes.\n Normally freezable data structures require an unaliased reference,\n such as `T` or `~T`, so that the compiler can track when they are\n-being mutated.  The `rw<T>` type converts these static checks into\n+being mutated.  The `managed<T>` type converts these static checks into\n dynamic checks: your program will fail if you attempt to perform\n mutation when the data structure should be immutable.\n \n@@ -21,8 +21,8 @@ export Managed;\n enum Mode { ReadOnly, Mutable, Immutable }\n \n struct Data<T> {\n-    mut value: T;\n-    mut mode: Mode;\n+    priv mut value: T;\n+    priv mut mode: Mode;\n }\n \n type Managed<T> = @Data<T>;\n@@ -60,3 +60,82 @@ impl<T> Data<T> {\n         }\n     }\n }\n+\n+#[test]\n+#[should_fail]\n+fn test_mut_in_imm() {\n+    let m = Managed(1);\n+    do m.borrow_imm |_p| {\n+        do m.borrow_mut |_q| {\n+            // should not be permitted\n+        }\n+    }\n+}\n+\n+#[test]\n+#[should_fail]\n+fn test_imm_in_mut() {\n+    let m = Managed(1);\n+    do m.borrow_mut |_p| {\n+        do m.borrow_imm |_q| {\n+            // should not be permitted\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_const_in_mut() {\n+    let m = Managed(1);\n+    do m.borrow_mut |p| {\n+        do m.borrow_const |q| {\n+            assert *p == *q;\n+            *p += 1;\n+            assert *p == *q;\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_mut_in_const() {\n+    let m = Managed(1);\n+    do m.borrow_const |p| {\n+        do m.borrow_mut |q| {\n+            assert *p == *q;\n+            *q += 1;\n+            assert *p == *q;\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_imm_in_const() {\n+    let m = Managed(1);\n+    do m.borrow_const |p| {\n+        do m.borrow_imm |q| {\n+            assert *p == *q;\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_const_in_imm() {\n+    let m = Managed(1);\n+    do m.borrow_imm |p| {\n+        do m.borrow_const |q| {\n+            assert *p == *q;\n+        }\n+    }\n+}\n+\n+\n+#[test]\n+#[should_fail]\n+fn test_mut_in_imm_in_const() {\n+    let m = Managed(1);\n+    do m.borrow_const |_p| {\n+        do m.borrow_imm |_q| {\n+            do m.borrow_mut |_r| {\n+            }\n+        }\n+    }\n+}"}]}