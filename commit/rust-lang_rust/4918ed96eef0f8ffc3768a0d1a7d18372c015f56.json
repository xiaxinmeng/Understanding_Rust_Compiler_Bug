{"sha": "4918ed96eef0f8ffc3768a0d1a7d18372c015f56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MThlZDk2ZWVmMGY4ZmZjMzc2OGEwZDFhN2QxODM3MmMwMTVmNTY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-03T00:22:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-03T00:22:10Z"}, "message": "Rollup merge of #76238 - denisvasilik:intra-doc-links-core-iterator, r=jyn514\n\nMove to intra-doc links for library/core/src/iter/traits/iterator.rs\n\nHelps with #75080.\n\n@jyn514 We're almost finished with this issue. Thanks for mentoring. If you have other topics to work on just let me know, I will be around in Discord.\n\n@rustbot modify labels: T-doc, A-intra-doc-links\n\nKnown issues:\n\n* Link from `core` to `std` (#74481):\n\n    [`OsStr`]\n    [`String`]\n    [`VecDeque<T>`]", "tree": {"sha": "4d3f34d43706453100211b7ac3f324cfbaaa3150", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d3f34d43706453100211b7ac3f324cfbaaa3150"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4918ed96eef0f8ffc3768a0d1a7d18372c015f56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfUDcyCRBK7hj4Ov3rIwAAdHIIAKQ3/HCsWt/j0nMHZusNME4V\nN3ssBVC4OSmNpsqJcU19/qlbOi8fu/4r59c2YfSRH7Ou4lUcOVYgFsCjKnQfPKG1\ncuVO9NgXoijRE6OOECHqbVzaViaEmtPzXnIukjPEfbeJEtYj+hbgn3B/4CvWLMNf\nvRBeVki9xejQSbGHDo1oFZO3tRkzrGza4oijVRFR3eHC7jJl9eyAC7GX8783+aKA\nLB3T3egVc+02Hae+4PQML3Gi8EBUdv0d6WRQxg0M3UchOmwMUebHrcugog0hFSiE\nfKV+hDxChyyobXlI3iqk3Cu7YPlZ01AadVlFiVKggoE+8KCwiaves4TWg9VEPQw=\n=umoq\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d3f34d43706453100211b7ac3f324cfbaaa3150\nparent d059f2619fa5d09844c1b66e351cf2cdbf781fa5\nparent 89e7fb3bbdef31769a4d5183f871c13c21e21d1f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1599092530 +0200\ncommitter GitHub <noreply@github.com> 1599092530 +0200\n\nRollup merge of #76238 - denisvasilik:intra-doc-links-core-iterator, r=jyn514\n\nMove to intra-doc links for library/core/src/iter/traits/iterator.rs\n\nHelps with #75080.\n\n@jyn514 We're almost finished with this issue. Thanks for mentoring. If you have other topics to work on just let me know, I will be around in Discord.\n\n@rustbot modify labels: T-doc, A-intra-doc-links\n\nKnown issues:\n\n* Link from `core` to `std` (#74481):\n\n    [`OsStr`]\n    [`String`]\n    [`VecDeque<T>`]\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4918ed96eef0f8ffc3768a0d1a7d18372c015f56", "html_url": "https://github.com/rust-lang/rust/commit/4918ed96eef0f8ffc3768a0d1a7d18372c015f56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4918ed96eef0f8ffc3768a0d1a7d18372c015f56/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d059f2619fa5d09844c1b66e351cf2cdbf781fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d059f2619fa5d09844c1b66e351cf2cdbf781fa5", "html_url": "https://github.com/rust-lang/rust/commit/d059f2619fa5d09844c1b66e351cf2cdbf781fa5"}, {"sha": "89e7fb3bbdef31769a4d5183f871c13c21e21d1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/89e7fb3bbdef31769a4d5183f871c13c21e21d1f", "html_url": "https://github.com/rust-lang/rust/commit/89e7fb3bbdef31769a4d5183f871c13c21e21d1f"}], "stats": {"total": 75, "additions": 35, "deletions": 40}, "files": [{"sha": "46ef12cd938b33e6f2fd25b0a912fd3765b3d321", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 35, "deletions": 40, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/4918ed96eef0f8ffc3768a0d1a7d18372c015f56/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4918ed96eef0f8ffc3768a0d1a7d18372c015f56/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=4918ed96eef0f8ffc3768a0d1a7d18372c015f56", "patch": "@@ -21,8 +21,8 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n /// generally, please see the [module-level documentation]. In particular, you\n /// may want to know how to [implement `Iterator`][impl].\n ///\n-/// [module-level documentation]: index.html\n-/// [impl]: index.html#implementing-iterator\n+/// [module-level documentation]: crate::iter\n+/// [impl]: crate::iter#implementing-iterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n     on(\n@@ -211,7 +211,7 @@ pub trait Iterator {\n     /// returning the number of times it saw [`Some`]. Note that [`next`] has to be\n     /// called at least once even if the iterator does not have any elements.\n     ///\n-    /// [`next`]: #tymethod.next\n+    /// [`next`]: Iterator::next\n     ///\n     /// # Overflow Behavior\n     ///\n@@ -448,9 +448,7 @@ pub trait Iterator {\n     /// }\n     /// ```\n     ///\n-    /// [`once`]: fn.once.html\n-    /// [`Iterator`]: trait.Iterator.html\n-    /// [`IntoIterator`]: trait.IntoIterator.html\n+    /// [`once`]: crate::iter::once\n     /// [`OsStr`]: ../../std/ffi/struct.OsStr.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -495,9 +493,6 @@ pub trait Iterator {\n     /// [`Iterator`] itself. For example, slices (`&[T]`) implement\n     /// [`IntoIterator`], and so can be passed to `zip()` directly:\n     ///\n-    /// [`IntoIterator`]: trait.IntoIterator.html\n-    /// [`Iterator`]: trait.Iterator.html\n-    ///\n     /// ```\n     /// let s1 = &[1, 2, 3];\n     /// let s2 = &[4, 5, 6];\n@@ -529,8 +524,8 @@ pub trait Iterator {\n     /// assert_eq!((2, 'o'), zipper[2]);\n     /// ```\n     ///\n-    /// [`enumerate`]: #method.enumerate\n-    /// [`next`]: #tymethod.next\n+    /// [`enumerate`]: Iterator::enumerate\n+    /// [`next`]: Iterator::next\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter>\n@@ -733,8 +728,8 @@ pub trait Iterator {\n     /// Why `filter_map` and not just [`filter`] and [`map`]? The key is in this\n     /// part:\n     ///\n-    /// [`filter`]: #method.filter\n-    /// [`map`]: #method.map\n+    /// [`filter`]: Iterator::filter\n+    /// [`map`]: Iterator::map\n     ///\n     /// > If the closure returns [`Some(element)`][`Some`], then that element is returned.\n     ///\n@@ -801,7 +796,7 @@ pub trait Iterator {\n     ///\n     /// [`usize`]: type@usize\n     /// [`usize::MAX`]: crate::usize::MAX\n-    /// [`zip`]: #method.zip\n+    /// [`zip`]: Iterator::zip\n     ///\n     /// # Examples\n     ///\n@@ -836,8 +831,8 @@ pub trait Iterator {\n     /// anything other than fetching the next value) of the [`next`] method\n     /// will occur.\n     ///\n-    /// [`peek`]: crate::iter::Peekable::peek\n-    /// [`next`]: #tymethod.next\n+    /// [`peek`]: Peekable::peek\n+    /// [`next`]: Iterator::next\n     ///\n     /// # Examples\n     ///\n@@ -875,7 +870,7 @@ pub trait Iterator {\n \n     /// Creates an iterator that [`skip`]s elements based on a predicate.\n     ///\n-    /// [`skip`]: #method.skip\n+    /// [`skip`]: Iterator::skip\n     ///\n     /// `skip_while()` takes a closure as an argument. It will call this\n     /// closure on each element of the iterator, and ignore elements\n@@ -1042,8 +1037,8 @@ pub trait Iterator {\n     ///\n     /// Here's the same example, but with [`take_while`] and [`map`]:\n     ///\n-    /// [`take_while`]: #method.take_while\n-    /// [`map`]: #method.map\n+    /// [`take_while`]: Iterator::take_while\n+    /// [`map`]: Iterator::map\n     ///\n     /// ```\n     /// let a = [-1i32, 4, 0, 1];\n@@ -1103,7 +1098,7 @@ pub trait Iterator {\n     /// It is also not specified what this iterator returns after the first` None` is returned.\n     /// If you need fused iterator, use [`fuse`].\n     ///\n-    /// [`fuse`]: #method.fuse\n+    /// [`fuse`]: Iterator::fuse\n     #[inline]\n     #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n     fn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P>\n@@ -1189,7 +1184,7 @@ pub trait Iterator {\n     /// An iterator adaptor similar to [`fold`] that holds internal state and\n     /// produces a new iterator.\n     ///\n-    /// [`fold`]: #method.fold\n+    /// [`fold`]: Iterator::fold\n     ///\n     /// `scan()` takes two arguments: an initial value which seeds the internal\n     /// state, and a closure with two arguments, the first being a mutable\n@@ -1245,8 +1240,8 @@ pub trait Iterator {\n     /// one item for each element, and `flat_map()`'s closure returns an\n     /// iterator for each element.\n     ///\n-    /// [`map`]: #method.map\n-    /// [`flatten`]: #method.flatten\n+    /// [`map`]: Iterator::map\n+    /// [`flatten`]: Iterator::flatten\n     ///\n     /// # Examples\n     ///\n@@ -1332,7 +1327,7 @@ pub trait Iterator {\n     /// two-dimensional and not one-dimensional. To get a one-dimensional\n     /// structure, you have to `flatten()` again.\n     ///\n-    /// [`flat_map()`]: #method.flat_map\n+    /// [`flat_map()`]: Iterator::flat_map\n     #[inline]\n     #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n     fn flatten(self) -> Flatten<Self>\n@@ -1639,7 +1634,7 @@ pub trait Iterator {\n     /// assert_eq!(Ok(vec![1, 3]), result);\n     /// ```\n     ///\n-    /// [`iter`]: #tymethod.next\n+    /// [`iter`]: Iterator::next\n     /// [`String`]: ../../std/string/struct.String.html\n     /// [`char`]: type@char\n     #[inline]\n@@ -1660,8 +1655,8 @@ pub trait Iterator {\n     ///\n     /// See also [`is_partitioned()`] and [`partition_in_place()`].\n     ///\n-    /// [`is_partitioned()`]: #method.is_partitioned\n-    /// [`partition_in_place()`]: #method.partition_in_place\n+    /// [`is_partitioned()`]: Iterator::is_partitioned\n+    /// [`partition_in_place()`]: Iterator::partition_in_place\n     ///\n     /// # Examples\n     ///\n@@ -1715,8 +1710,8 @@ pub trait Iterator {\n     ///\n     /// See also [`is_partitioned()`] and [`partition()`].\n     ///\n-    /// [`is_partitioned()`]: #method.is_partitioned\n-    /// [`partition()`]: #method.partition\n+    /// [`is_partitioned()`]: Iterator::is_partitioned\n+    /// [`partition()`]: Iterator::partition\n     ///\n     /// # Examples\n     ///\n@@ -1778,8 +1773,8 @@ pub trait Iterator {\n     ///\n     /// See also [`partition()`] and [`partition_in_place()`].\n     ///\n-    /// [`partition()`]: #method.partition\n-    /// [`partition_in_place()`]: #method.partition_in_place\n+    /// [`partition()`]: Iterator::partition\n+    /// [`partition_in_place()`]: Iterator::partition_in_place\n     ///\n     /// # Examples\n     ///\n@@ -1878,8 +1873,8 @@ pub trait Iterator {\n     /// This can also be thought of as the fallible form of [`for_each()`]\n     /// or as the stateless version of [`try_fold()`].\n     ///\n-    /// [`for_each()`]: #method.for_each\n-    /// [`try_fold()`]: #method.try_fold\n+    /// [`for_each()`]: Iterator::for_each\n+    /// [`try_fold()`]: Iterator::try_fold\n     ///\n     /// # Examples\n     ///\n@@ -2005,11 +2000,13 @@ pub trait Iterator {\n         accum\n     }\n \n-    /// The same as [`fold()`](#method.fold), but uses the first element in the\n+    /// The same as [`fold()`], but uses the first element in the\n     /// iterator as the initial value, folding every subsequent element into it.\n     /// If the iterator is empty, return `None`; otherwise, return the result\n     /// of the fold.\n     ///\n+    /// [`fold()`]: Iterator::fold\n+    ///\n     /// # Example\n     ///\n     /// Find the maximum value:\n@@ -2607,8 +2604,6 @@ pub trait Iterator {\n     /// This is only possible if the iterator has an end, so `rev()` only\n     /// works on [`DoubleEndedIterator`]s.\n     ///\n-    /// [`DoubleEndedIterator`]: trait.DoubleEndedIterator.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2639,7 +2634,7 @@ pub trait Iterator {\n     ///\n     /// This function is, in some sense, the opposite of [`zip`].\n     ///\n-    /// [`zip`]: #method.zip\n+    /// [`zip`]: Iterator::zip\n     ///\n     /// # Examples\n     ///\n@@ -2718,7 +2713,7 @@ pub trait Iterator {\n     /// This is useful when you have an iterator over `&T`, but you need an\n     /// iterator over `T`.\n     ///\n-    /// [`clone`]: crate::clone::Clone::clone\n+    /// [`clone`]: Clone::clone\n     ///\n     /// # Examples\n     ///\n@@ -3206,7 +3201,7 @@ pub trait Iterator {\n     /// assert!(![0.0, 1.0, f32::NAN].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n     /// ```\n     ///\n-    /// [`is_sorted`]: #method.is_sorted\n+    /// [`is_sorted`]: Iterator::is_sorted\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n     fn is_sorted_by<F>(mut self, mut compare: F) -> bool\n     where\n@@ -3235,7 +3230,7 @@ pub trait Iterator {\n     /// the elements, as determined by `f`. Apart from that, it's equivalent to [`is_sorted`]; see\n     /// its documentation for more information.\n     ///\n-    /// [`is_sorted`]: #method.is_sorted\n+    /// [`is_sorted`]: Iterator::is_sorted\n     ///\n     /// # Examples\n     ///"}]}