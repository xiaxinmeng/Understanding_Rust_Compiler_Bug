{"sha": "124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNGY2ZWY3Y2RlYTEwODNiMGNiZTAzNzFlM2Y3ZmJlMTE1MmE5ZDE=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "matti@marinelayer.io", "date": "2019-07-18T12:22:22Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2019-07-18T13:14:56Z"}, "message": "Fix clippy::len_zero warnings", "tree": {"sha": "f02efe11ba10b432de359b192f4575b52e9d28f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f02efe11ba10b432de359b192f4575b52e9d28f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1", "html_url": "https://github.com/rust-lang/rust/commit/124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f93032c818da6482777e6fa35a535a494241a0f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f93032c818da6482777e6fa35a535a494241a0f1", "html_url": "https://github.com/rust-lang/rust/commit/f93032c818da6482777e6fa35a535a494241a0f1"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "8bd1a3f44a311ef83cb3ce113c3630fe7a128559", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1", "patch": "@@ -200,7 +200,7 @@ impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {\n             }\n         }\n \n-        if self.len() == 0 {\n+        if self.is_empty() {\n             // Ideally we'd call `BTreeMap::new` here, but that has the `K:\n             // Ord` constraint, which this method lacks.\n             BTreeMap {\n@@ -759,12 +759,12 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     #[stable(feature = \"btree_append\", since = \"1.11.0\")]\n     pub fn append(&mut self, other: &mut Self) {\n         // Do we have to append anything at all?\n-        if other.len() == 0 {\n+        if other.is_empty() {\n             return;\n         }\n \n         // We can just swap `self` and `other` if `self` is empty.\n-        if self.len() == 0 {\n+        if self.is_empty() {\n             mem::swap(self, other);\n             return;\n         }"}, {"sha": "e8f747f1a67d5fc8c73070b4959c63787893f07e", "filename": "src/libcore/str/lossy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1/src%2Flibcore%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1/src%2Flibcore%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Flossy.rs?ref=124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1", "patch": "@@ -46,7 +46,7 @@ impl<'a> Iterator for Utf8LossyChunksIter<'a> {\n     type Item = Utf8LossyChunk<'a>;\n \n     fn next(&mut self) -> Option<Utf8LossyChunk<'a>> {\n-        if self.source.len() == 0 {\n+        if self.source.is_empty() {\n             return None;\n         }\n \n@@ -141,7 +141,7 @@ impl fmt::Display for Utf8Lossy {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // If we're the empty string then our iterator won't actually yield\n         // anything, so perform the formatting manually\n-        if self.bytes.len() == 0 {\n+        if self.bytes.is_empty() {\n             return \"\".fmt(f)\n         }\n "}, {"sha": "3fbe9f3125fbe753b818fcf1867f967d73614b99", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1", "patch": "@@ -1923,7 +1923,7 @@ impl<T: Read, U: Read> Read for Chain<T, U> {\n     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {\n         if !self.done_first {\n             match self.first.read(buf)? {\n-                0 if buf.len() != 0 => self.done_first = true,\n+                0 if !buf.is_empty() => self.done_first = true,\n                 n => return Ok(n),\n             }\n         }\n@@ -1955,7 +1955,7 @@ impl<T: BufRead, U: BufRead> BufRead for Chain<T, U> {\n     fn fill_buf(&mut self) -> Result<&[u8]> {\n         if !self.done_first {\n             match self.first.fill_buf()? {\n-                buf if buf.len() == 0 => { self.done_first = true; }\n+                buf if buf.is_empty() => { self.done_first = true; }\n                 buf => return Ok(buf),\n             }\n         }"}, {"sha": "fc1e33137c8a9a0e3e9ee0bbc4565dfbdd8e30f0", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1", "patch": "@@ -277,7 +277,7 @@ impl Command {\n         if self.get_gid().is_some() ||\n             self.get_uid().is_some() ||\n             self.env_saw_path() ||\n-            self.get_closures().len() != 0 {\n+            !self.get_closures().is_empty() {\n             return Ok(None)\n         }\n "}]}