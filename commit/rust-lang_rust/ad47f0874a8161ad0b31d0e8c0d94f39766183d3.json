{"sha": "ad47f0874a8161ad0b31d0e8c0d94f39766183d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNDdmMDg3NGE4MTYxYWQwYjMxZDBlOGMwZDk0ZjM5NzY2MTgzZDM=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2019-02-26T15:47:33Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-07-08T07:34:25Z"}, "message": "Add float conversions to and from bytes\n\nUse the same API as for integers.\n\nFixes #57492.", "tree": {"sha": "e8b77fdb1c0fab67d7137b3111057871bea5d635", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8b77fdb1c0fab67d7137b3111057871bea5d635"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad47f0874a8161ad0b31d0e8c0d94f39766183d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad47f0874a8161ad0b31d0e8c0d94f39766183d3", "html_url": "https://github.com/rust-lang/rust/commit/ad47f0874a8161ad0b31d0e8c0d94f39766183d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad47f0874a8161ad0b31d0e8c0d94f39766183d3/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db592f4627251cfd8571a05cf8e06a56be9470c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/db592f4627251cfd8571a05cf8e06a56be9470c2", "html_url": "https://github.com/rust-lang/rust/commit/db592f4627251cfd8571a05cf8e06a56be9470c2"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "aa447aa8930086ba2c3883b94acb7353f33b9ed6", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ad47f0874a8161ad0b31d0e8c0d94f39766183d3/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad47f0874a8161ad0b31d0e8c0d94f39766183d3/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=ad47f0874a8161ad0b31d0e8c0d94f39766183d3", "patch": "@@ -461,4 +461,74 @@ impl f32 {\n         // It turns out the safety issues with sNaN were overblown! Hooray!\n         unsafe { mem::transmute(v) }\n     }\n+\n+    /// Return the floating point value as a byte array in big-endian byte order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(0.0f32.to_be_bytes(), [0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000]);\n+    /// assert_eq!(1.0f32.to_be_bytes(), [0b0111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000]);\n+    /// ```\n+    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[inline]\n+    pub fn to_be_bytes(self) -> [u8; 4] {\n+        self.to_bits().to_be_bytes()\n+    }\n+\n+    /// Return the floating point value as a byte array in little-endian byte order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(0.0f32.to_le_bytes(), [0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000]);\n+    /// assert_eq!(1.0f32.to_le_bytes(), [0b0000_0000, 0b0000_0000, 0b1000_0000, 0b0111_1111]);\n+    /// ```\n+    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[inline]\n+    pub fn to_le_bytes(self) -> [u8; 4] {\n+        self.to_bits().to_le_bytes()\n+    }\n+\n+    /// Return the floating point value as a byte array in native byte order.\n+    ///\n+    ///\n+    /// As the target platform's native endianness is used, portable code\n+    /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate, instead.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(\n+    ///     u32::from_ne_bytes(0.0f32.to_ne_bytes()),\n+    ///     0b0000_0000_0000_0000_0000_0000_0000_0000,\n+    /// );\n+    /// assert_eq!(\n+    ///     u32::from_ne_bytes(1.0f32.to_ne_bytes()),\n+    ///     0b0111_1111_1000_0000_0000_0000_0000_0000,\n+    /// );\n+    /// ```\n+    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[inline]\n+    pub fn to_ne_bytes(self) -> [u8; 4] {\n+        self.to_bits().to_ne_bytes()\n+    }\n+\n+    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[inline]\n+    pub fn from_be_bytes(bytes: [u8; 4]) -> Self {\n+        Self::from_bits(u32::from_be_bytes(bytes))\n+    }\n+\n+    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[inline]\n+    pub fn from_le_bytes(bytes: [u8; 4]) -> Self {\n+        Self::from_bits(u32::from_le_bytes(bytes))\n+    }\n+\n+    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[inline]\n+    pub fn from_ne_bytes(bytes: [u8; 4]) -> Self {\n+        Self::from_bits(u32::from_ne_bytes(bytes))\n+    }\n }"}, {"sha": "8c886db03ad609cc2f1811d2372f1f829a1205de", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ad47f0874a8161ad0b31d0e8c0d94f39766183d3/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad47f0874a8161ad0b31d0e8c0d94f39766183d3/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=ad47f0874a8161ad0b31d0e8c0d94f39766183d3", "patch": "@@ -474,4 +474,40 @@ impl f64 {\n         // It turns out the safety issues with sNaN were overblown! Hooray!\n         unsafe { mem::transmute(v) }\n     }\n+\n+    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[inline]\n+    pub fn to_be_bytes(self) -> [u8; 8] {\n+        self.to_bits().to_be_bytes()\n+    }\n+\n+    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[inline]\n+    pub fn to_le_bytes(self) -> [u8; 8] {\n+        self.to_bits().to_le_bytes()\n+    }\n+\n+    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[inline]\n+    pub fn to_ne_bytes(self) -> [u8; 8] {\n+        self.to_bits().to_ne_bytes()\n+    }\n+\n+    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[inline]\n+    pub fn from_be_bytes(bytes: [u8; 8]) -> Self {\n+        Self::from_bits(u64::from_be_bytes(bytes))\n+    }\n+\n+    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[inline]\n+    pub fn from_le_bytes(bytes: [u8; 8]) -> Self {\n+        Self::from_bits(u64::from_le_bytes(bytes))\n+    }\n+\n+    #[unstable(feature = \"float_to_from_bytes\", issue = \"60446\")]\n+    #[inline]\n+    pub fn from_ne_bytes(bytes: [u8; 8]) -> Self {\n+        Self::from_bits(u64::from_ne_bytes(bytes))\n+    }\n }"}]}