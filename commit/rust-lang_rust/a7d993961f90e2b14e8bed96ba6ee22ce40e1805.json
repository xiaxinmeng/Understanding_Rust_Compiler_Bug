{"sha": "a7d993961f90e2b14e8bed96ba6ee22ce40e1805", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZDk5Mzk2MWY5MGUyYjE0ZThiZWQ5NmJhNmVlMjJjZTQwZTE4MDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-24T14:13:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-24T14:13:09Z"}, "message": "Rollup merge of #62716 - RalfJung:unsafe-cell, r=Centril\n\nstate also in the intro that UnsafeCell has no effect on &mut\n\nJust to be extra sure.", "tree": {"sha": "2cd498d5e2030ac66b9c6ea438a3b3e88f209069", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cd498d5e2030ac66b9c6ea438a3b3e88f209069"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7d993961f90e2b14e8bed96ba6ee22ce40e1805", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdOGd1CRBK7hj4Ov3rIwAAdHIIAD0tXsXK4eP7gMqg8zGEmmuD\nk4B9YqjqJAruOvvl3Gc87eKHh5dvLU9jQKINXda9Cg2eLVb+N8EVd7WPuHEfsC8B\nSUEU2/g7zhU7iOU0JsrCHKeZJutw0FDP5VYjko8a2ZsRRKAh0FBAHNwuwPhJF8su\nd2TAfvtQlKOSaU5Dzvp14hwfLIHm9acv1AqWNU6BIfxBcHnL4CyIxyK2lxOgfLuY\nESqdTTNGz3E7JafEqOQ1Ky/SdIlSJDvWsSKieP3JzNCc61GJCb+wB+H1TUMwCjHW\nvMlzS2Tryn+lqsrfoPY7fHgvBFjyQU0USibtKlOuR3xmZZJltvELFjAVA9xXTAQ=\n=DNNw\n-----END PGP SIGNATURE-----\n", "payload": "tree 2cd498d5e2030ac66b9c6ea438a3b3e88f209069\nparent 21caaba2bcf69c9003827b114ebcb86bb6740aa5\nparent d30b36efc528e7391357d8d2f599c6cf2e427fd2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1563977589 +0200\ncommitter GitHub <noreply@github.com> 1563977589 +0200\n\nRollup merge of #62716 - RalfJung:unsafe-cell, r=Centril\n\nstate also in the intro that UnsafeCell has no effect on &mut\n\nJust to be extra sure.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d993961f90e2b14e8bed96ba6ee22ce40e1805", "html_url": "https://github.com/rust-lang/rust/commit/a7d993961f90e2b14e8bed96ba6ee22ce40e1805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7d993961f90e2b14e8bed96ba6ee22ce40e1805/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21caaba2bcf69c9003827b114ebcb86bb6740aa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/21caaba2bcf69c9003827b114ebcb86bb6740aa5", "html_url": "https://github.com/rust-lang/rust/commit/21caaba2bcf69c9003827b114ebcb86bb6740aa5"}, {"sha": "d30b36efc528e7391357d8d2f599c6cf2e427fd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d30b36efc528e7391357d8d2f599c6cf2e427fd2", "html_url": "https://github.com/rust-lang/rust/commit/d30b36efc528e7391357d8d2f599c6cf2e427fd2"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "0aaf5269a3d47c81e52fad46b7bb3640689fffc2", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7d993961f90e2b14e8bed96ba6ee22ce40e1805/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d993961f90e2b14e8bed96ba6ee22ce40e1805/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=a7d993961f90e2b14e8bed96ba6ee22ce40e1805", "patch": "@@ -1412,8 +1412,9 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n /// If you have a reference `&SomeStruct`, then normally in Rust all fields of `SomeStruct` are\n /// immutable. The compiler makes optimizations based on the knowledge that `&T` is not mutably\n /// aliased or mutated, and that `&mut T` is unique. `UnsafeCell<T>` is the only core language\n-/// feature to work around this restriction. All other types that allow internal mutability, such as\n-/// `Cell<T>` and `RefCell<T>`, use `UnsafeCell` to wrap their internal data.\n+/// feature to work around the restriction that `&T` may not be mutated. All other types that\n+/// allow internal mutability, such as `Cell<T>` and `RefCell<T>`, use `UnsafeCell` to wrap their\n+/// internal data. There is *no* legal way to obtain aliasing `&mut`, not even with `UnsafeCell<T>`.\n ///\n /// The `UnsafeCell` API itself is technically very simple: it gives you a raw pointer `*mut T` to\n /// its contents. It is up to _you_ as the abstraction designer to use that raw pointer correctly."}]}