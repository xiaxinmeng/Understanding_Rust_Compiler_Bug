{"sha": "643a223f7123ee832d67732370faffb023ab3ed9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0M2EyMjNmNzEyM2VlODMyZDY3NzMyMzcwZmFmZmIwMjNhYjNlZDk=", "commit": {"author": {"name": "Joshua Holmer", "email": "holmerj@uindy.edu", "date": "2016-02-15T14:10:31Z"}, "committer": {"name": "Joshua Holmer", "email": "holmerj@uindy.edu", "date": "2016-02-15T14:10:31Z"}, "message": "Address nits", "tree": {"sha": "ffaf54878913347d08cf2344f162a50a60d1c51c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffaf54878913347d08cf2344f162a50a60d1c51c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/643a223f7123ee832d67732370faffb023ab3ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/643a223f7123ee832d67732370faffb023ab3ed9", "html_url": "https://github.com/rust-lang/rust/commit/643a223f7123ee832d67732370faffb023ab3ed9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/643a223f7123ee832d67732370faffb023ab3ed9/comments", "author": null, "committer": null, "parents": [{"sha": "7eea67605a92864530600bde3776c80ce08e790e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eea67605a92864530600bde3776c80ce08e790e", "html_url": "https://github.com/rust-lang/rust/commit/7eea67605a92864530600bde3776c80ce08e790e"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "f1aaaf633ddde0eb41f209ad50bb985150f1c0f3", "filename": "src/methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/643a223f7123ee832d67732370faffb023ab3ed9/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a223f7123ee832d67732370faffb023ab3ed9/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=643a223f7123ee832d67732370faffb023ab3ed9", "patch": "@@ -297,11 +297,11 @@ declare_lint! {\n     pub NEW_RET_NO_SELF, Warn, \"not returning `Self` in a `new` method\"\n }\n \n-/// **What it does:** This lint checks for string methods that receive a single-character `str` as an argument, e.g. `_.split(\"x\")`\n+/// **What it does:** This lint checks for string methods that receive a single-character `str` as an argument, e.g. `_.split(\"x\")`.\n ///\n-/// **Why is this bad?** Performing these methods using a `str` may be slower than using a `char`\n+/// **Why is this bad?** Performing these methods using a `str` may be slower than using a `char`.\n ///\n-/// **Known problems:** Does not catch multi-byte unicode characters\n+/// **Known problems:** Does not catch multi-byte unicode characters.\n ///\n /// **Example:** `_.split(\"x\")` could be `_.split('x')`\n declare_lint! {\n@@ -846,7 +846,7 @@ fn lint_single_char_pattern(cx: &LateContext, expr: &Expr, arg: &Expr) {\n             let hint = snippet(cx, expr.span, \"..\").replace(&format!(\"\\\"{}\\\"\", r), &format!(\"'{}'\", r));\n             span_lint_and_then(cx,\n                                SINGLE_CHAR_PATTERN,\n-                               expr.span,\n+                               arg.span,\n                                \"single-character string constant used as pattern\",\n                                |db| {\n                                    db.span_suggestion(expr.span, \"try using a char instead:\", hint);"}]}