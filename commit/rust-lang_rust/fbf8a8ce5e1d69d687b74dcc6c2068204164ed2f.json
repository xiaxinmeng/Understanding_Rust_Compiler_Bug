{"sha": "fbf8a8ce5e1d69d687b74dcc6c2068204164ed2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZjhhOGNlNWUxZDY5ZDY4N2I3NGRjYzZjMjA2ODIwNDE2NGVkMmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-14T12:58:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-14T12:58:25Z"}, "message": "Auto merge of #32892 - brson:relnotes19, r=alexcrichton\n\nRelease notes for 1.9", "tree": {"sha": "2f1916b3e4d87089638e682eef6fd0bc3d079567", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f1916b3e4d87089638e682eef6fd0bc3d079567"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbf8a8ce5e1d69d687b74dcc6c2068204164ed2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbf8a8ce5e1d69d687b74dcc6c2068204164ed2f", "html_url": "https://github.com/rust-lang/rust/commit/fbf8a8ce5e1d69d687b74dcc6c2068204164ed2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbf8a8ce5e1d69d687b74dcc6c2068204164ed2f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9f15013e0edc80989bf40b358bcefee14be5050", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f15013e0edc80989bf40b358bcefee14be5050", "html_url": "https://github.com/rust-lang/rust/commit/c9f15013e0edc80989bf40b358bcefee14be5050"}, {"sha": "bbcfcfc61d3d5480d234036740fd5e7837411459", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcfcfc61d3d5480d234036740fd5e7837411459", "html_url": "https://github.com/rust-lang/rust/commit/bbcfcfc61d3d5480d234036740fd5e7837411459"}], "stats": {"total": 288, "additions": 288, "deletions": 0}, "files": [{"sha": "b19f4b07a316124680bafa155e23bf8cd2619dd8", "filename": "RELEASES.md", "status": "modified", "additions": 288, "deletions": 0, "changes": 288, "blob_url": "https://github.com/rust-lang/rust/blob/fbf8a8ce5e1d69d687b74dcc6c2068204164ed2f/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/fbf8a8ce5e1d69d687b74dcc6c2068204164ed2f/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=fbf8a8ce5e1d69d687b74dcc6c2068204164ed2f", "patch": "@@ -1,3 +1,291 @@\n+Version 1.9.0 (2016-05-26)\n+==========================\n+\n+Language\n+--------\n+\n+* The `#[deprecated]` attribute when applied to an API will generate\n+  warnings when used. The warnings may be suppressed with\n+  `#[allow(deprecated)]`. [RFC 1270].\n+* [`fn` item types are zero sized, and each `fn` names a unique\n+  type][1.9fn]. This will break code that transmutes `fn`s, so calling\n+  `transmute` on a `fn` type will generate a warning for a few cycles,\n+  then will be converted to an error.\n+* [Field and method resolution understand visibility, so private\n+  fields and methods cannot prevent the proper use of public fields\n+  and methods][1.9fv].\n+* [The parser considers unicode codepoints in the\n+  `PATTERN_WHITE_SPACE` category to be whitespace][1.9ws].\n+\n+Stabilized APIs\n+---------------\n+\n+* [`std::panic`]\n+* [`std::panic::catch_unwind`][] (renamed from `recover`)\n+* [`std::panic::resume_unwind`][] (renamed from `propagate`)\n+* [`std::panic::AssertUnwindSafe`][] (renamed from `AssertRecoverSafe`)\n+* [`std::panic::UnwindSafe`][] (renamed from `RecoverSafe`)\n+* [`str::is_char_boundary`]\n+* [`<*const T>::as_ref`]\n+* [`<*mut T>::as_ref`]\n+* [`<*mut T>::as_mut`]\n+* [`AsciiExt::make_ascii_uppercase`]\n+* [`AsciiExt::make_ascii_lowercase`]\n+* [`char::decode_utf16`]\n+* [`char::DecodeUtf16`]\n+* [`char::DecodeUtf16Error`]\n+* [`char::DecodeUtf16Error::unpaired_surrogate`]\n+* [`BTreeSet::take`]\n+* [`BTreeSet::replace`]\n+* [`BTreeSet::get`]\n+* [`HashSet::take`]\n+* [`HashSet::replace`]\n+* [`HashSet::get`]\n+* [`OsString::with_capacity`]\n+* [`OsString::clear`]\n+* [`OsString::capacity`]\n+* [`OsString::reserve`]\n+* [`OsString::reserve_exact`]\n+* [`OsStr::is_empty`]\n+* [`OsStr::len`]\n+* [`std::os::unix::thread`]\n+* [`RawPthread`]\n+* [`JoinHandleExt`]\n+* [`JoinHandleExt::as_pthread_t`]\n+* [`JoinHandleExt::into_pthread_t`]\n+* [`HashSet::hasher`]\n+* [`HashMap::hasher`]\n+* [`CommandExt::exec`]\n+* [`File::try_clone`]\n+* [`SocketAddr::set_ip`]\n+* [`SocketAddr::set_port`]\n+* [`SocketAddrV4::set_ip`]\n+* [`SocketAddrV4::set_port`]\n+* [`SocketAddrV6::set_ip`]\n+* [`SocketAddrV6::set_port`]\n+* [`SocketAddrV6::set_flowinfo`]\n+* [`SocketAddrV6::set_scope_id`]\n+* [`slice::copy_from_slice`]\n+* [`ptr::read_volatile`]\n+* [`ptr::write_volatile`]\n+* [`OpenOptions::create_new`]\n+* [`TcpStream::set_nodelay`]\n+* [`TcpStream::nodelay`]\n+* [`TcpStream::set_ttl`]\n+* [`TcpStream::ttl`]\n+* [`TcpStream::set_only_v6`]\n+* [`TcpStream::only_v6`]\n+* [`TcpStream::take_error`]\n+* [`TcpStream::set_nonblocking`]\n+* [`TcpListener::set_ttl`]\n+* [`TcpListener::ttl`]\n+* [`TcpListener::set_only_v6`]\n+* [`TcpListener::only_v6`]\n+* [`TcpListener::take_error`]\n+* [`TcpListener::set_nonblocking`]\n+* [`UdpSocket::set_broadcast`]\n+* [`UdpSocket::broadcast`]\n+* [`UdpSocket::set_multicast_loop_v4`]\n+* [`UdpSocket::multicast_loop_v4`]\n+* [`UdpSocket::set_multicast_ttl_v4`]\n+* [`UdpSocket::multicast_ttl_v4`]\n+* [`UdpSocket::set_multicast_loop_v6`]\n+* [`UdpSocket::multicast_loop_v6`]\n+* [`UdpSocket::set_multicast_ttl_v6`]\n+* [`UdpSocket::multicast_ttl_v6`]\n+* [`UdpSocket::set_ttl`]\n+* [`UdpSocket::ttl`]\n+* [`UdpSocket::set_only_v6`]\n+* [`UdpSocket::only_v6`]\n+* [`UdpSocket::join_multicast_v4`]\n+* [`UdpSocket::join_multicast_v6`]\n+* [`UdpSocket::leave_multicast_v4`]\n+* [`UdpSocket::leave_multicast_v6`]\n+* [`UdpSocket::take_error`]\n+* [`UdpSocket::connect`]\n+* [`UdpSocket::send`]\n+* [`UdpSocket::recv`]\n+* [`UdpSocket::set_nonblocking`]\n+\n+Libraries\n+---------\n+\n+* [`std::sync::Once` is poisoned if its initialization function\n+  fails][1.9o].\n+* [`cell::Ref` and `cell::RefMut` can contain unsized types][1.9cu].\n+* [Most types implement `fmt::Debug`][1.9db].\n+* [The default buffer size used by `BufReader` and `BufWriter` was\n+  reduced to 8K, from 64K][1.9bf]. This is in line with the buffer size\n+  used by other languages.\n+* [`Instant`, `SystemTime` and `Duration` implement `+=` and `-=`.\n+  `Duration` additionally implements `*=` and `/=`][1.9ta].\n+* [`Skip` is a `DoubleEndedIterator`][1.9sk].\n+* [`From<[u8; 4]>` is implemented for `Ipv4Addr`][1.9fi].\n+* [`Chain` implements `BufRead`][1.9ch].\n+* [`HashMap`, `HashSet` and iterators are covariant][1.9hc].\n+\n+Cargo\n+-----\n+\n+* [Cargo can now run concurrently][1.9cc].\n+* [Top-level overrides allow specific revisions of crates to be\n+  overridden through the entire crate graph][1.9ct].  This is intended\n+  to make upgrades easier for large projects, by allowing crates to be\n+  forked temporarily until they've been upgraded and republished.\n+* [Cargo exports a `CARGO_PKG_AUTHORS` environment variable][1.9cp].\n+* [Cargo will pass the contents of the `RUSTFLAGS` variable to `rustc`\n+  on the commandline][1.9cf]. `rustc` arguments can also be specified\n+  in the `build.rustflags` configuration key.\n+\n+Performance\n+-----------\n+\n+* [During type unification, the complexity of comparing variables for\n+  equivalance was reduced from `O(n!)` to `O(n)`][1.9tu]. This leads\n+  to major compile-time improvements in some scenarios.\n+* [`ToString` is specialized for `str`, giving it the same performance\n+  as `to_owned`][1.9ts].\n+* [Spawning processes with `Command::output` no longer creates extra\n+  threads][1.9sp].\n+* [`#[derive(PartialEq)]` and `#[derive(PartialOrd)]` emit less code\n+  for C-like enums][1.9cl].\n+\n+Misc\n+----\n+\n+* [Passing the `--quiet` flag to a test runner will produce\n+  much-abbreviated output][1.9q].\n+* The Rust Project now publishes std binaries for the\n+  `mips-unknown-linux-musl`, `mipsel-unknown-linux-musl`, and\n+  `i586-pc-windows-msvc` targets.\n+\n+Compatibility Notes\n+-------------------\n+\n+* [`std::sync::Once` is poisoned if its initialization function\n+  fails][1.9o].\n+* [It is illegal to define methods with the same name in overlapping\n+  inherent `impl` blocks][1.9sn].\n+* [`fn` item types are zero sized, and each `fn` names a unique\n+  type][1.9fn]. This will break code that transmutes `fn`s, so calling\n+  `transmute` on a `fn` type will generate a warning for a few cycles,\n+  then will be converted to an error.\n+* [Improvements to const evaluation may trigger new errors when integer\n+  literals are out of range][1.9ce].\n+\n+\n+[1.9bf]: https://github.com/rust-lang/rust/pull/32695\n+[1.9cc]: https://github.com/rust-lang/cargo/pull/2486\n+[1.9ce]: https://github.com/rust-lang/rust/pull/30587\n+[1.9cf]: https://github.com/rust-lang/cargo/pull/2241\n+[1.9ch]: https://github.com/rust-lang/rust/pull/32541\n+[1.9cl]: https://github.com/rust-lang/rust/pull/31977\n+[1.9cp]: https://github.com/rust-lang/cargo/pull/2465\n+[1.9ct]: https://github.com/rust-lang/cargo/pull/2385\n+[1.9cu]: https://github.com/rust-lang/rust/pull/32652\n+[1.9db]: https://github.com/rust-lang/rust/pull/32054\n+[1.9fi]: https://github.com/rust-lang/rust/pull/32050\n+[1.9fn]: https://github.com/rust-lang/rust/pull/31710\n+[1.9fv]: https://github.com/rust-lang/rust/pull/31938\n+[1.9hc]: https://github.com/rust-lang/rust/pull/32635\n+[1.9o]: https://github.com/rust-lang/rust/pull/32325\n+[1.9q]: https://github.com/rust-lang/rust/pull/31887\n+[1.9sk]: https://github.com/rust-lang/rust/pull/31700\n+[1.9sn]: https://github.com/rust-lang/rust/pull/31925\n+[1.9sp]: https://github.com/rust-lang/rust/pull/31618\n+[1.9ta]: https://github.com/rust-lang/rust/pull/32448\n+[1.9ts]: https://github.com/rust-lang/rust/pull/32586\n+[1.9tu]: https://github.com/rust-lang/rust/pull/32062\n+[1.9ws]: https://github.com/rust-lang/rust/pull/29734\n+[RFC 1270]: https://github.com/rust-lang/rfcs/blob/master/text/1270-deprecation.md\n+[`<*const T>::as_ref`]: http://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.as_ref\n+[`<*mut T>::as_mut`]: http://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.as_mut\n+[`<*mut T>::as_ref`]: http://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.as_ref\n+[`slice::copy_from_slice`]: http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.copy_from_slice\n+[`AsciiExt::make_ascii_lowercase`]: http://doc.rust-lang.org/nightly/std/ascii/trait.AsciiExt.html#tymethod.make_ascii_lowercase\n+[`AsciiExt::make_ascii_uppercase`]: http://doc.rust-lang.org/nightly/std/ascii/trait.AsciiExt.html#tymethod.make_ascii_uppercase\n+[`BTreeSet::get`]: http://doc.rust-lang.org/nightly/collections/btree/set/struct.BTreeSet.html#method.get\n+[`BTreeSet::replace`]: http://doc.rust-lang.org/nightly/collections/btree/set/struct.BTreeSet.html#method.replace\n+[`BTreeSet::take`]: http://doc.rust-lang.org/nightly/collections/btree/set/struct.BTreeSet.html#method.take\n+[`CommandExt::exec`]: http://doc.rust-lang.org/nightly/std/os/unix/process/trait.CommandExt.html#tymethod.exec\n+[`File::try_clone`]: http://doc.rust-lang.org/nightly/std/fs/struct.File.html#method.try_clone\n+[`HashMap::hasher`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashMap.html#method.hasher\n+[`HashSet::get`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.get\n+[`HashSet::hasher`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.hasher\n+[`HashSet::replace`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.replace\n+[`HashSet::take`]: http://doc.rust-lang.org/nightly/std/collections/struct.HashSet.html#method.take\n+[`JoinHandleExt::as_pthread_t`]: http://doc.rust-lang.org/nightly/std/os/unix/thread/trait.JoinHandleExt.html#tymethod.as_pthread_t\n+[`JoinHandleExt::into_pthread_t`]: http://doc.rust-lang.org/nightly/std/os/unix/thread/trait.JoinHandleExt.html#tymethod.into_pthread_t\n+[`JoinHandleExt`]: http://doc.rust-lang.org/nightly/std/os/unix/thread/trait.JoinHandleExt.html\n+[`OpenOptions::create_new`]: http://doc.rust-lang.org/nightly/std/fs/struct.OpenOptions.html#method.create_new\n+[`OsStr::is_empty`]: http://doc.rust-lang.org/nightly/std/ffi/struct.OsStr.html#method.is_empty\n+[`OsStr::len`]: http://doc.rust-lang.org/nightly/std/ffi/struct.OsStr.html#method.len\n+[`OsString::capacity`]: http://doc.rust-lang.org/nightly/std/ffi/struct.OsString.html#method.capacity\n+[`OsString::clear`]: http://doc.rust-lang.org/nightly/std/ffi/struct.OsString.html#method.clear\n+[`OsString::reserve_exact`]: http://doc.rust-lang.org/nightly/std/ffi/struct.OsString.html#method.reserve_exact\n+[`OsString::reserve`]: http://doc.rust-lang.org/nightly/std/ffi/struct.OsString.html#method.reserve\n+[`OsString::with_capacity`]: http://doc.rust-lang.org/nightly/std/ffi/struct.OsString.html#method.with_capacity\n+[`RawPthread`]: http://doc.rust-lang.org/nightly/std/os/unix/thread/type.RawPthread.html\n+[`SocketAddr::set_ip`]: http://doc.rust-lang.org/nightly/std/net/enum.SocketAddr.html#method.set_ip\n+[`SocketAddr::set_port`]: http://doc.rust-lang.org/nightly/std/net/enum.SocketAddr.html#method.set_port\n+[`SocketAddrV4::set_ip`]: http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV4.html#method.set_ip\n+[`SocketAddrV4::set_port`]: http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV4.html#method.set_port\n+[`SocketAddrV6::set_flowinfo`]: http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV6.html#method.set_flowinfo\n+[`SocketAddrV6::set_ip`]: http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV6.html#method.set_ip\n+[`SocketAddrV6::set_port`]: http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV6.html#method.set_port\n+[`SocketAddrV6::set_scope_id`]: http://doc.rust-lang.org/nightly/std/net/struct.SocketAddrV6.html#method.set_scope_id\n+[`TcpListener::only_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.only_v6\n+[`TcpListener::set_nonblocking`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_nonblocking\n+[`TcpListener::set_only_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_only_v6\n+[`TcpListener::set_ttl`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_ttl\n+[`TcpListener::take_error`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.take_error\n+[`TcpListener::ttl`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.ttl\n+[`TcpStream::nodelay`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.nodelay\n+[`TcpStream::only_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.only_v6\n+[`TcpStream::set_nodelay`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_nodelay\n+[`TcpStream::set_nonblocking`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_nonblocking\n+[`TcpStream::set_only_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_only_v6\n+[`TcpStream::set_ttl`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.set_ttl\n+[`TcpStream::take_error`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.take_error\n+[`TcpStream::ttl`]: http://doc.rust-lang.org/nightly/std/net/struct.TcpStream.html#method.ttl\n+[`UdpSocket::broadcast`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.broadcast\n+[`UdpSocket::connect`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.connect\n+[`UdpSocket::join_multicast_v4`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.join_multicast_v4\n+[`UdpSocket::join_multicast_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.join_multicast_v6\n+[`UdpSocket::leave_multicast_v4`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.leave_multicast_v4\n+[`UdpSocket::leave_multicast_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.leave_multicast_v6\n+[`UdpSocket::multicast_loop_v4`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.multicast_loop_v4\n+[`UdpSocket::multicast_loop_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.multicast_loop_v6\n+[`UdpSocket::multicast_ttl_v4`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.multicast_ttl_v4\n+[`UdpSocket::multicast_ttl_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.multicast_ttl_v6\n+[`UdpSocket::only_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.only_v6\n+[`UdpSocket::recv`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.recv\n+[`UdpSocket::send`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.send\n+[`UdpSocket::set_broadcast`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_broadcast\n+[`UdpSocket::set_multicast_loop_v4`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_multicast_loop_v4\n+[`UdpSocket::set_multicast_loop_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_multicast_loop_v6\n+[`UdpSocket::set_multicast_ttl_v4`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_multicast_ttl_v4\n+[`UdpSocket::set_multicast_ttl_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_multicast_ttl_v6\n+[`UdpSocket::set_nonblocking`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_nonblocking\n+[`UdpSocket::set_only_v6`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_only_v6\n+[`UdpSocket::set_ttl`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.set_ttl\n+[`UdpSocket::take_error`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.take_error\n+[`UdpSocket::ttl`]: http://doc.rust-lang.org/nightly/std/net/struct.UdpSocket.html#method.ttl\n+[`char::DecodeUtf16Error::unpaired_surrogate`]: http://doc.rust-lang.org/nightly/std/char/struct.DecodeUtf16Error.html#method.unpaired_surrogate\n+[`char::DecodeUtf16Error`]: http://doc.rust-lang.org/nightly/std/char/struct.DecodeUtf16Error.html\n+[`char::DecodeUtf16`]: http://doc.rust-lang.org/nightly/std/char/struct.DecodeUtf16.html\n+[`char::decode_utf16`]: http://doc.rust-lang.org/nightly/std/char/fn.decode_utf16.html\n+[`ptr::read_volatile`]: http://doc.rust-lang.org/nightly/std/ptr/fn.read_volatile.html\n+[`ptr::write_volatile`]: http://doc.rust-lang.org/nightly/std/ptr/fn.write_volatile.html\n+[`std::os::unix::thread`]: http://doc.rust-lang.org/nightly/std/os/unix/thread/index.html\n+[`std::panic::AssertUnwindSafe`]: http://doc.rust-lang.org/nightly/std/panic/struct.AssertUnwindSafe.html\n+[`std::panic::UnwindSafe`]: http://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html\n+[`std::panic::catch_unwind`]: http://doc.rust-lang.org/nightly/std/panic/fn.catch_unwind.html\n+[`std::panic::resume_unwind`]: http://doc.rust-lang.org/nightly/std/panic/fn.resume_unwind.html\n+[`std::panic`]: http://doc.rust-lang.org/nightly/std/panic/index.html\n+[`str::is_char_boundary`]: http://doc.rust-lang.org/nightly/std/primitive.str.html#method.is_char_boundary\n+\n+\n Version 1.8.0 (2016-04-14)\n ==========================\n "}]}