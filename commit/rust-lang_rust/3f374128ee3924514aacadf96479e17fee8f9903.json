{"sha": "3f374128ee3924514aacadf96479e17fee8f9903", "node_id": "C_kwDOAAsO6NoAKDNmMzc0MTI4ZWUzOTI0NTE0YWFjYWRmOTY0NzllMTdmZWU4Zjk5MDM", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-21T21:11:08Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-22T15:40:47Z"}, "message": "diagnostics: update test cases to refer to assoc fn with `self` as method", "tree": {"sha": "2b0e58a547768a464864cec072eac77be620c1c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b0e58a547768a464864cec072eac77be620c1c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f374128ee3924514aacadf96479e17fee8f9903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f374128ee3924514aacadf96479e17fee8f9903", "html_url": "https://github.com/rust-lang/rust/commit/3f374128ee3924514aacadf96479e17fee8f9903", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f374128ee3924514aacadf96479e17fee8f9903/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d056c31257cc26760b7e65c5dfdae069f7ddc74", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d056c31257cc26760b7e65c5dfdae069f7ddc74", "html_url": "https://github.com/rust-lang/rust/commit/3d056c31257cc26760b7e65c5dfdae069f7ddc74"}], "stats": {"total": 1286, "additions": 650, "deletions": 636}, "files": [{"sha": "bb6f06a35c6c55059572de2303448db6ece4eadc", "filename": "tests/ui/argument-suggestions/too-long.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fargument-suggestions%2Ftoo-long.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fargument-suggestions%2Ftoo-long.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Ftoo-long.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,7 +6,7 @@ LL |     qux.foo(a, b, c, d, e, f, g, h, i, j, k, l);\n    |         |\n    |         arguments to this method are incorrect\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/too-long.rs:4:8\n    |\n LL |     fn foo("}, {"sha": "3f3bf22b0c49f4885cb18ead871a4c38a5768fca", "filename": "tests/ui/associated-types/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -34,7 +34,7 @@ LL | fn f() { ModelT.chip_paint(Blue); }\n    |                 |\n    |                 arguments to this method are incorrect\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/associated-type-projection-from-supertrait.rs:12:8\n    |\n LL |     fn chip_paint(&self, c: Self::Color) { }\n@@ -48,7 +48,7 @@ LL | fn g() { ModelU.chip_paint(Black); }\n    |                 |\n    |                 arguments to this method are incorrect\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/associated-type-projection-from-supertrait.rs:12:8\n    |\n LL |     fn chip_paint(&self, c: Self::Color) { }"}, {"sha": "13c72abb136393521784c5295edde3d89f8800ab", "filename": "tests/ui/async-await/issues/issue-62097.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-62097.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -12,7 +12,7 @@ impl Struct {\n     pub async fn run_dummy_fn(&self) {\n         foo(|| self.bar()).await;\n         //~^ ERROR closure may outlive the current function\n-        //~| ERROR borrowed data escapes outside of associated function\n+        //~| ERROR borrowed data escapes outside of method\n     }\n \n     pub fn bar(&self) {}"}, {"sha": "21a61548d01e34c99c61ef6673b65db9a31a85f0", "filename": "tests/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -16,18 +16,18 @@ help: to force the closure to take ownership of `self` (and any other referenced\n LL |         foo(move || self.bar()).await;\n    |             ++++\n \n-error[E0521]: borrowed data escapes outside of associated function\n+error[E0521]: borrowed data escapes outside of method\n   --> $DIR/issue-62097.rs:13:9\n    |\n LL |     pub async fn run_dummy_fn(&self) {\n    |                               -----\n    |                               |\n-   |                               `self` is a reference that is only valid in the associated function body\n+   |                               `self` is a reference that is only valid in the method body\n    |                               let's call the lifetime of this reference `'1`\n LL |         foo(|| self.bar()).await;\n    |         ^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         `self` escapes the associated function body here\n+   |         `self` escapes the method body here\n    |         argument requires that `'1` must outlive `'static`\n \n error: aborting due to 2 previous errors"}, {"sha": "679272858bdee5d0cd55a147494d8f223cf3a1a4", "filename": "tests/ui/async-await/issues/issue-72312.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,10 +1,10 @@\n-error[E0521]: borrowed data escapes outside of associated function\n+error[E0521]: borrowed data escapes outside of method\n   --> $DIR/issue-72312.rs:12:9\n    |\n LL |       pub async fn start(&self) {\n    |                          -----\n    |                          |\n-   |                          `self` is a reference that is only valid in the associated function body\n+   |                          `self` is a reference that is only valid in the method body\n    |                          let's call the lifetime of this reference `'1`\n ...\n LL | /         require_static(async move {\n@@ -15,7 +15,7 @@ LL | |             &self;\n LL | |         });\n    | |          ^\n    | |          |\n-   | |__________`self` escapes the associated function body here\n+   | |__________`self` escapes the method body here\n    |            argument requires that `'1` must outlive `'static`\n \n error: aborting due to previous error"}, {"sha": "d95a40bd4a019f06404e8174294dda57ca7c88b1", "filename": "tests/ui/borrowck/issue-103624.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fborrowck%2Fissue-103624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fborrowck%2Fissue-103624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-103624.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -12,7 +12,7 @@ impl StructA {\n     async fn foo(&self) {\n         let bar = self.b.bar().await;\n         spawn_blocking(move || {\n-            //~^ ERROR borrowed data escapes outside of associated function\n+            //~^ ERROR borrowed data escapes outside of method\n             self.b;\n             //~^ ERROR cannot move out of `self.b`, as `self` is a captured variable in an `Fn` closure\n         })"}, {"sha": "7a281e8aa30ca726985674549969706badf59e95", "filename": "tests/ui/borrowck/issue-103624.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fborrowck%2Fissue-103624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fborrowck%2Fissue-103624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-103624.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -10,13 +10,13 @@ LL |\n LL |             self.b;\n    |             ^^^^^^ move occurs because `self.b` has type `StructB`, which does not implement the `Copy` trait\n \n-error[E0521]: borrowed data escapes outside of associated function\n+error[E0521]: borrowed data escapes outside of method\n   --> $DIR/issue-103624.rs:14:9\n    |\n LL |       async fn foo(&self) {\n    |                    -----\n    |                    |\n-   |                    `self` is a reference that is only valid in the associated function body\n+   |                    `self` is a reference that is only valid in the method body\n    |                    let's call the lifetime of this reference `'1`\n LL |           let bar = self.b.bar().await;\n LL | /         spawn_blocking(move || {\n@@ -26,7 +26,7 @@ LL | |\n LL | |         })\n    | |          ^\n    | |          |\n-   | |__________`self` escapes the associated function body here\n+   | |__________`self` escapes the method body here\n    |            argument requires that `'1` must outlive `'static`\n \n error: aborting due to 2 previous errors"}, {"sha": "827dd59d9ad33581f431c2131462b96f91ec5468", "filename": "tests/ui/const-generics/generic_const_exprs/issue-105608.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105608.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105608.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105608.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-105608.rs:13:22\n    |\n LL |     Combination::<0>.and::<_>().and::<_>();\n-   |                      ^^^ cannot infer type of the type parameter `M` declared on the associated function `and`\n+   |                      ^^^ cannot infer type of the type parameter `M` declared on the method `and`\n    |\n help: consider specifying the generic argument\n    |"}, {"sha": "f527ee6e4f5567c6ccc5d0b1f7b5a324275b5553", "filename": "tests/ui/const-generics/infer/method-chain.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/method-chain.rs:15:33\n    |\n LL |     Foo.bar().bar().bar().bar().baz();\n-   |                                 ^^^ cannot infer the value of the const parameter `N` declared on the associated function `baz`\n+   |                                 ^^^ cannot infer the value of the const parameter `N` declared on the method `baz`\n    |\n help: consider specifying the generic argument\n    |"}, {"sha": "20daf45706bf8f833cd6706d62c1863f3deddf50", "filename": "tests/ui/const-generics/infer/uninferred-consts.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/uninferred-consts.rs:9:9\n    |\n LL |     Foo.foo();\n-   |         ^^^ cannot infer the value of the const parameter `A` declared on the associated function `foo`\n+   |         ^^^ cannot infer the value of the const parameter `A` declared on the method `foo`\n    |\n help: consider specifying the generic arguments\n    |"}, {"sha": "cdc54b214a84c4ef39e67cee2b479ce008e19c78", "filename": "tests/ui/const-generics/invalid-const-arg-for-type-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -4,7 +4,7 @@ struct S;\n \n fn main() {\n     let _: u32 = 5i32.try_into::<32>().unwrap();\n-    //~^ ERROR this associated function takes\n+    //~^ ERROR this method takes\n \n     S.f::<0>();\n     //~^ ERROR no method named `f`"}, {"sha": "a9754bc46d728e954a1f85f7dd42294b6bcfcb33", "filename": "tests/ui/const-generics/invalid-const-arg-for-type-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,4 +1,4 @@\n-error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/invalid-const-arg-for-type-param.rs:6:23\n    |\n LL |     let _: u32 = 5i32.try_into::<32>().unwrap();"}, {"sha": "83056feaf274915d68e5af4e9a64aadc93781908", "filename": "tests/ui/deprecation/deprecation-lint.rs", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fdeprecation%2Fdeprecation-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fdeprecation%2Fdeprecation-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecation%2Fdeprecation-lint.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -14,22 +14,22 @@ mod cross_crate {\n         let foo = MethodTester;\n \n         deprecated(); //~ ERROR use of deprecated function `deprecation_lint::deprecated`\n-        foo.method_deprecated(); //~ ERROR use of deprecated associated function `deprecation_lint::MethodTester::method_deprecated`\n-        Foo::method_deprecated(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::MethodTester::method_deprecated`\n-        <Foo>::method_deprecated(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::MethodTester::method_deprecated`\n-        foo.trait_deprecated(); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`\n-        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`\n-        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`\n-        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`\n+        foo.method_deprecated(); //~ ERROR use of deprecated method `deprecation_lint::MethodTester::method_deprecated`\n+        Foo::method_deprecated(&foo); //~ ERROR use of deprecated method `deprecation_lint::MethodTester::method_deprecated`\n+        <Foo>::method_deprecated(&foo); //~ ERROR use of deprecated method `deprecation_lint::MethodTester::method_deprecated`\n+        foo.trait_deprecated(); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated`\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated`\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated`\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated`\n \n         deprecated_text(); //~ ERROR use of deprecated function `deprecation_lint::deprecated_text`: text\n-        foo.method_deprecated_text(); //~ ERROR use of deprecated associated function `deprecation_lint::MethodTester::method_deprecated_text`: text\n-        Foo::method_deprecated_text(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::MethodTester::method_deprecated_text`: text\n-        <Foo>::method_deprecated_text(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::MethodTester::method_deprecated_text`: text\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n-        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n-        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n+        foo.method_deprecated_text(); //~ ERROR use of deprecated method `deprecation_lint::MethodTester::method_deprecated_text`: text\n+        Foo::method_deprecated_text(&foo); //~ ERROR use of deprecated method `deprecation_lint::MethodTester::method_deprecated_text`: text\n+        <Foo>::method_deprecated_text(&foo); //~ ERROR use of deprecated method `deprecation_lint::MethodTester::method_deprecated_text`: text\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n \n         let _ = DeprecatedStruct { //~ ERROR use of deprecated struct `deprecation_lint::DeprecatedStruct`: text\n             i: 0 //~ ERROR use of deprecated field `deprecation_lint::DeprecatedStruct::i`: text\n@@ -61,19 +61,19 @@ mod cross_crate {\n     }\n \n     fn test_method_param<Foo: Trait>(foo: Foo) {\n-        foo.trait_deprecated(); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`\n-        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`\n-        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`\n-        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n-        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n-        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n+        foo.trait_deprecated(); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated`\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated`\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated`\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated`\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n     }\n \n     fn test_method_object(foo: &Trait) {\n-        foo.trait_deprecated(); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n+        foo.trait_deprecated(); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated`\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n     }\n \n     struct S;\n@@ -243,22 +243,22 @@ mod this_crate {\n         let foo = MethodTester;\n \n         deprecated(); //~ ERROR use of deprecated function `this_crate::deprecated`\n-        foo.method_deprecated(); //~ ERROR use of deprecated associated function `this_crate::MethodTester::method_deprecated`\n-        Foo::method_deprecated(&foo); //~ ERROR use of deprecated associated function `this_crate::MethodTester::method_deprecated`\n-        <Foo>::method_deprecated(&foo); //~ ERROR use of deprecated associated function `this_crate::MethodTester::method_deprecated`\n-        foo.trait_deprecated(); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated`\n+        foo.method_deprecated(); //~ ERROR use of deprecated method `this_crate::MethodTester::method_deprecated`\n+        Foo::method_deprecated(&foo); //~ ERROR use of deprecated method `this_crate::MethodTester::method_deprecated`\n+        <Foo>::method_deprecated(&foo); //~ ERROR use of deprecated method `this_crate::MethodTester::method_deprecated`\n+        foo.trait_deprecated(); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated`\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated`\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated`\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated`\n \n         deprecated_text(); //~ ERROR use of deprecated function `this_crate::deprecated_text`: text\n-        foo.method_deprecated_text(); //~ ERROR use of deprecated associated function `this_crate::MethodTester::method_deprecated_text`: text\n-        Foo::method_deprecated_text(&foo); //~ ERROR use of deprecated associated function `this_crate::MethodTester::method_deprecated_text`: text\n-        <Foo>::method_deprecated_text(&foo); //~ ERROR use of deprecated associated function `this_crate::MethodTester::method_deprecated_text`: text\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n-        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n-        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+        foo.method_deprecated_text(); //~ ERROR use of deprecated method `this_crate::MethodTester::method_deprecated_text`: text\n+        Foo::method_deprecated_text(&foo); //~ ERROR use of deprecated method `this_crate::MethodTester::method_deprecated_text`: text\n+        <Foo>::method_deprecated_text(&foo); //~ ERROR use of deprecated method `this_crate::MethodTester::method_deprecated_text`: text\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n \n         // Future deprecations are only permitted with `#![feature(staged_api)]`\n         deprecated_future(); //~ ERROR use of deprecated function\n@@ -289,19 +289,19 @@ mod this_crate {\n     }\n \n     fn test_method_param<Foo: Trait>(foo: Foo) {\n-        foo.trait_deprecated(); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n-        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n-        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+        foo.trait_deprecated(); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated`\n+        Trait::trait_deprecated(&foo); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated`\n+        <Foo>::trait_deprecated(&foo); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated`\n+        <Foo as Trait>::trait_deprecated(&foo); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated`\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n+        Trait::trait_deprecated_text(&foo); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n+        <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n     }\n \n     fn test_method_object(foo: &Trait) {\n-        foo.trait_deprecated(); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        foo.trait_deprecated_text(); //~ ERROR use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+        foo.trait_deprecated(); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated`\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n     }\n \n     #[deprecated(since = \"1.0.0\", note = \"text\")]"}, {"sha": "2098073409da52b125bc06a8ebdb969e3f898f3f", "filename": "tests/ui/deprecation/deprecation-lint.stderr", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fdeprecation%2Fdeprecation-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fdeprecation%2Fdeprecation-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecation%2Fdeprecation-lint.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -10,13 +10,13 @@ note: the lint level is defined here\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:21:16\n    |\n LL |         Trait::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:23:25\n    |\n LL |         <Foo as Trait>::trait_deprecated(&foo);\n@@ -28,13 +28,13 @@ error: use of deprecated function `deprecation_lint::deprecated_text`: text\n LL |         deprecated_text();\n    |         ^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:30:16\n    |\n-LL | ...   Trait::trait_deprecated_text(&foo);\n-   |              ^^^^^^^^^^^^^^^^^^^^^\n+LL |         Trait::trait_deprecated_text(&foo);\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:32:25\n    |\n LL | ...   <Foo as Trait>::trait_deprecated_text(&foo);\n@@ -100,25 +100,25 @@ error: use of deprecated function `deprecation_lint::deprecated_text`: text\n LL |         macro_test_arg!(macro_test_arg!(deprecated_text()));\n    |                                         ^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:65:16\n    |\n LL |         Trait::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:67:25\n    |\n LL |         <Foo as Trait>::trait_deprecated(&foo);\n    |                         ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:69:16\n    |\n-LL | ...   Trait::trait_deprecated_text(&foo);\n-   |              ^^^^^^^^^^^^^^^^^^^^^\n+LL |         Trait::trait_deprecated_text(&foo);\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:71:25\n    |\n LL | ...   <Foo as Trait>::trait_deprecated_text(&foo);\n@@ -184,13 +184,13 @@ error: use of deprecated function `this_crate::deprecated`: text\n LL |         deprecated();\n    |         ^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:250:16\n    |\n LL |         Trait::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:252:25\n    |\n LL |         <Foo as Trait>::trait_deprecated(&foo);\n@@ -202,17 +202,17 @@ error: use of deprecated function `this_crate::deprecated_text`: text\n LL |         deprecated_text();\n    |         ^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:259:16\n    |\n LL |         Trait::trait_deprecated_text(&foo);\n    |                ^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:261:25\n    |\n-LL | ...   <Foo as Trait>::trait_deprecated_text(&foo);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^\n+LL |         <Foo as Trait>::trait_deprecated_text(&foo);\n+   |                         ^^^^^^^^^^^^^^^^^^^^^\n \n error: use of deprecated function `this_crate::deprecated_future`: text\n   --> $DIR/deprecation-lint.rs:264:9\n@@ -274,29 +274,29 @@ error: use of deprecated tuple struct `this_crate::nested::DeprecatedTupleStruct\n LL | ...   let _ = nested::DeprecatedTupleStruct (1);\n    |                       ^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:293:16\n    |\n LL |         Trait::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:295:25\n    |\n LL |         <Foo as Trait>::trait_deprecated(&foo);\n    |                         ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:297:16\n    |\n LL |         Trait::trait_deprecated_text(&foo);\n    |                ^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:299:25\n    |\n-LL | ...   <Foo as Trait>::trait_deprecated_text(&foo);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^\n+LL |         <Foo as Trait>::trait_deprecated_text(&foo);\n+   |                         ^^^^^^^^^^^^^^^^^^^^^\n \n error: use of deprecated function `this_crate::test_fn_closure_body::{closure#0}::bar`\n   --> $DIR/deprecation-lint.rs:317:13\n@@ -352,65 +352,65 @@ error: use of deprecated tuple struct `this_crate2::Deprecated2`: text\n LL |         let Deprecated2\n    |             ^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::MethodTester::method_deprecated`: text\n+error: use of deprecated method `deprecation_lint::MethodTester::method_deprecated`: text\n   --> $DIR/deprecation-lint.rs:17:13\n    |\n LL |         foo.method_deprecated();\n    |             ^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::MethodTester::method_deprecated`: text\n+error: use of deprecated method `deprecation_lint::MethodTester::method_deprecated`: text\n   --> $DIR/deprecation-lint.rs:18:14\n    |\n LL |         Foo::method_deprecated(&foo);\n    |              ^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::MethodTester::method_deprecated`: text\n+error: use of deprecated method `deprecation_lint::MethodTester::method_deprecated`: text\n   --> $DIR/deprecation-lint.rs:19:16\n    |\n LL |         <Foo>::method_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:20:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:22:16\n    |\n LL |         <Foo>::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::MethodTester::method_deprecated_text`: text\n+error: use of deprecated method `deprecation_lint::MethodTester::method_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:26:13\n    |\n-LL | ...   foo.method_deprecated_text();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^\n+LL |         foo.method_deprecated_text();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::MethodTester::method_deprecated_text`: text\n+error: use of deprecated method `deprecation_lint::MethodTester::method_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:27:14\n    |\n-LL | ...   Foo::method_deprecated_text(&foo);\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n+LL |         Foo::method_deprecated_text(&foo);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::MethodTester::method_deprecated_text`: text\n+error: use of deprecated method `deprecation_lint::MethodTester::method_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:28:16\n    |\n LL | ...   <Foo>::method_deprecated_text(&foo);\n    |              ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:29:13\n    |\n LL |         foo.trait_deprecated_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:31:16\n    |\n-LL | ...   <Foo>::trait_deprecated_text(&foo);\n-   |              ^^^^^^^^^^^^^^^^^^^^^\n+LL |         <Foo>::trait_deprecated_text(&foo);\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n \n error: use of deprecated field `deprecation_lint::DeprecatedStruct::i`: text\n   --> $DIR/deprecation-lint.rs:35:13\n@@ -424,37 +424,37 @@ error: use of deprecated field `deprecation_lint::nested::DeprecatedStruct::i`:\n LL |             i: 0\n    |             ^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:64:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:66:16\n    |\n LL |         <Foo>::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:68:13\n    |\n LL |         foo.trait_deprecated_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:70:16\n    |\n-LL | ...   <Foo>::trait_deprecated_text(&foo);\n-   |              ^^^^^^^^^^^^^^^^^^^^^\n+LL |         <Foo>::trait_deprecated_text(&foo);\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:75:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `deprecation_lint::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `deprecation_lint::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:76:13\n    |\n LL |         foo.trait_deprecated_text();\n@@ -544,61 +544,61 @@ error: use of deprecated field `deprecation_lint::Deprecated2::2`: text\n LL |              _)\n    |              ^\n \n-error: use of deprecated associated function `this_crate::MethodTester::method_deprecated`: text\n+error: use of deprecated method `this_crate::MethodTester::method_deprecated`: text\n   --> $DIR/deprecation-lint.rs:246:13\n    |\n LL |         foo.method_deprecated();\n    |             ^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::MethodTester::method_deprecated`: text\n+error: use of deprecated method `this_crate::MethodTester::method_deprecated`: text\n   --> $DIR/deprecation-lint.rs:247:14\n    |\n LL |         Foo::method_deprecated(&foo);\n    |              ^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::MethodTester::method_deprecated`: text\n+error: use of deprecated method `this_crate::MethodTester::method_deprecated`: text\n   --> $DIR/deprecation-lint.rs:248:16\n    |\n LL |         <Foo>::method_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:249:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:251:16\n    |\n LL |         <Foo>::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::MethodTester::method_deprecated_text`: text\n+error: use of deprecated method `this_crate::MethodTester::method_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:255:13\n    |\n-LL | ...   foo.method_deprecated_text();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^\n+LL |         foo.method_deprecated_text();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::MethodTester::method_deprecated_text`: text\n+error: use of deprecated method `this_crate::MethodTester::method_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:256:14\n    |\n-LL | ...   Foo::method_deprecated_text(&foo);\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n+LL |         Foo::method_deprecated_text(&foo);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::MethodTester::method_deprecated_text`: text\n+error: use of deprecated method `this_crate::MethodTester::method_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:257:16\n    |\n-LL | ...   <Foo>::method_deprecated_text(&foo);\n-   |              ^^^^^^^^^^^^^^^^^^^^^^\n+LL |         <Foo>::method_deprecated_text(&foo);\n+   |                ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:258:13\n    |\n LL |         foo.trait_deprecated_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:260:16\n    |\n LL |         <Foo>::trait_deprecated_text(&foo);\n@@ -616,37 +616,37 @@ error: use of deprecated field `this_crate::nested::DeprecatedStruct::i`: text\n LL |             i: 0\n    |             ^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:292:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:294:16\n    |\n LL |         <Foo>::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:296:13\n    |\n LL |         foo.trait_deprecated_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:298:16\n    |\n LL |         <Foo>::trait_deprecated_text(&foo);\n    |                ^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/deprecation-lint.rs:303:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n-error: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+error: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/deprecation-lint.rs:304:13\n    |\n LL |         foo.trait_deprecated_text();"}, {"sha": "85e882870946b43fa3f55c7582b6cb746d15f199", "filename": "tests/ui/deprecation/issue-84637-deprecated-associated-function.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fdeprecation%2Fissue-84637-deprecated-associated-function.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fdeprecation%2Fissue-84637-deprecated-associated-function.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecation%2Fissue-84637-deprecated-associated-function.fixed?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -3,7 +3,7 @@\n #![deny(deprecated)]\n \n fn main() {\n-    let _foo = str::trim_start(\"   aoeu\"); //~ ERROR use of deprecated associated function `core::str::<impl str>::trim_left`: superseded by `trim_start` [deprecated]\n+    let _foo = str::trim_start(\"   aoeu\"); //~ ERROR use of deprecated method `core::str::<impl str>::trim_left`: superseded by `trim_start` [deprecated]\n \n-    let _bar = \"   aoeu\".trim_start(); //~ ERROR use of deprecated associated function `core::str::<impl str>::trim_left`: superseded by `trim_start` [deprecated]\n+    let _bar = \"   aoeu\".trim_start(); //~ ERROR use of deprecated method `core::str::<impl str>::trim_left`: superseded by `trim_start` [deprecated]\n }"}, {"sha": "246de2f5e4bfe384c788ce3cedbb5641410b1672", "filename": "tests/ui/deprecation/issue-84637-deprecated-associated-function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fdeprecation%2Fissue-84637-deprecated-associated-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fdeprecation%2Fissue-84637-deprecated-associated-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecation%2Fissue-84637-deprecated-associated-function.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -3,7 +3,7 @@\n #![deny(deprecated)]\n \n fn main() {\n-    let _foo = str::trim_left(\"   aoeu\"); //~ ERROR use of deprecated associated function `core::str::<impl str>::trim_left`: superseded by `trim_start` [deprecated]\n+    let _foo = str::trim_left(\"   aoeu\"); //~ ERROR use of deprecated method `core::str::<impl str>::trim_left`: superseded by `trim_start` [deprecated]\n \n-    let _bar = \"   aoeu\".trim_left(); //~ ERROR use of deprecated associated function `core::str::<impl str>::trim_left`: superseded by `trim_start` [deprecated]\n+    let _bar = \"   aoeu\".trim_left(); //~ ERROR use of deprecated method `core::str::<impl str>::trim_left`: superseded by `trim_start` [deprecated]\n }"}, {"sha": "3b518d1802bc8ff4838fa72a7b00c110a6c884a3", "filename": "tests/ui/deprecation/issue-84637-deprecated-associated-function.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fdeprecation%2Fissue-84637-deprecated-associated-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fdeprecation%2Fissue-84637-deprecated-associated-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecation%2Fissue-84637-deprecated-associated-function.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,4 +1,4 @@\n-error: use of deprecated associated function `core::str::<impl str>::trim_left`: superseded by `trim_start`\n+error: use of deprecated method `core::str::<impl str>::trim_left`: superseded by `trim_start`\n   --> $DIR/issue-84637-deprecated-associated-function.rs:6:21\n    |\n LL |     let _foo = str::trim_left(\"   aoeu\");\n@@ -9,18 +9,18 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-help: replace the use of the deprecated associated function\n+help: replace the use of the deprecated method\n    |\n LL |     let _foo = str::trim_start(\"   aoeu\");\n    |                     ~~~~~~~~~~\n \n-error: use of deprecated associated function `core::str::<impl str>::trim_left`: superseded by `trim_start`\n+error: use of deprecated method `core::str::<impl str>::trim_left`: superseded by `trim_start`\n   --> $DIR/issue-84637-deprecated-associated-function.rs:8:26\n    |\n LL |     let _bar = \"   aoeu\".trim_left();\n    |                          ^^^^^^^^^\n    |\n-help: replace the use of the deprecated associated function\n+help: replace the use of the deprecated method\n    |\n LL |     let _bar = \"   aoeu\".trim_start();\n    |                          ~~~~~~~~~~"}, {"sha": "5584b6d2f8ffb31aa5bcb55e2eb345b1bff9d0df", "filename": "tests/ui/deprecation/suggestion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fdeprecation%2Fsuggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fdeprecation%2Fsuggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecation%2Fsuggestion.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -14,13 +14,13 @@ help: replace the use of the deprecated function\n LL |     bar::replacement();\n    |          ~~~~~~~~~~~\n \n-error: use of deprecated associated function `Foo::deprecated`: replaced by `replacement`\n+error: use of deprecated method `Foo::deprecated`: replaced by `replacement`\n   --> $DIR/suggestion.rs:40:9\n    |\n LL |     foo.deprecated();\n    |         ^^^^^^^^^^\n    |\n-help: replace the use of the deprecated associated function\n+help: replace the use of the deprecated method\n    |\n LL |     foo.replacement();\n    |         ~~~~~~~~~~~"}, {"sha": "45f72a565ca1bc53adfc3130d0e769ea4e030404", "filename": "tests/ui/error-codes/E0624.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ferror-codes%2FE0624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ferror-codes%2FE0624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0624.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -8,5 +8,5 @@ mod inner {\n \n fn main() {\n     let foo = inner::Foo;\n-    foo.method(); //~ ERROR associated function `method` is private [E0624]\n+    foo.method(); //~ ERROR method `method` is private [E0624]\n }"}, {"sha": "23a8ea8a8c98eb356f71da624b6fdbe9cd76ca3c", "filename": "tests/ui/error-codes/E0624.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ferror-codes%2FE0624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ferror-codes%2FE0624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0624.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,11 +1,11 @@\n-error[E0624]: associated function `method` is private\n+error[E0624]: method `method` is private\n   --> $DIR/E0624.rs:11:9\n    |\n LL |         fn method(&self) {}\n-   |         ---------------- private associated function defined here\n+   |         ---------------- private method defined here\n ...\n LL |     foo.method();\n-   |         ^^^^^^ private associated function\n+   |         ^^^^^^ private method\n \n error: aborting due to previous error\n "}, {"sha": "d8b485c9dc3447a8349b8f0d867d35d383387082", "filename": "tests/ui/explore-issue-38412.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fexplore-issue-38412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fexplore-issue-38412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplore-issue-38412.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -79,38 +79,38 @@ LL |     r.unstable_undeclared();\n    = note: see issue #38412 <https://github.com/rust-lang/rust/issues/38412> for more information\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n-error[E0624]: associated function `pub_crate` is private\n+error[E0624]: method `pub_crate` is private\n   --> $DIR/explore-issue-38412.rs:48:7\n    |\n LL |     r.pub_crate();\n-   |       ^^^^^^^^^ private associated function\n+   |       ^^^^^^^^^ private method\n    |\n   ::: $DIR/auxiliary/pub-and-stability.rs:114:9\n    |\n LL |         pub(crate) fn pub_crate(&self) -> i32 { self.d_priv }\n-   |         ------------------------------------- private associated function defined here\n+   |         ------------------------------------- private method defined here\n \n-error[E0624]: associated function `pub_mod` is private\n+error[E0624]: method `pub_mod` is private\n   --> $DIR/explore-issue-38412.rs:49:7\n    |\n LL |     r.pub_mod();\n-   |       ^^^^^^^ private associated function\n+   |       ^^^^^^^ private method\n    |\n   ::: $DIR/auxiliary/pub-and-stability.rs:116:9\n    |\n LL |         pub(in m) fn pub_mod(&self) -> i32 { self.d_priv }\n-   |         ---------------------------------- private associated function defined here\n+   |         ---------------------------------- private method defined here\n \n-error[E0624]: associated function `private` is private\n+error[E0624]: method `private` is private\n   --> $DIR/explore-issue-38412.rs:50:7\n    |\n LL |     r.private();\n-   |       ^^^^^^^ private associated function\n+   |       ^^^^^^^ private method\n    |\n   ::: $DIR/auxiliary/pub-and-stability.rs:118:9\n    |\n LL |         fn private(&self) -> i32 { self.d_priv }\n-   |         ------------------------ private associated function defined here\n+   |         ------------------------ private method defined here\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n   --> $DIR/explore-issue-38412.rs:55:7\n@@ -130,38 +130,38 @@ LL |     t.unstable_undeclared();\n    = note: see issue #38412 <https://github.com/rust-lang/rust/issues/38412> for more information\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n-error[E0624]: associated function `pub_crate` is private\n+error[E0624]: method `pub_crate` is private\n   --> $DIR/explore-issue-38412.rs:61:7\n    |\n LL |     t.pub_crate();\n-   |       ^^^^^^^^^ private associated function\n+   |       ^^^^^^^^^ private method\n    |\n   ::: $DIR/auxiliary/pub-and-stability.rs:129:9\n    |\n LL |         pub(crate) fn pub_crate(&self) -> i32 { self.0 }\n-   |         ------------------------------------- private associated function defined here\n+   |         ------------------------------------- private method defined here\n \n-error[E0624]: associated function `pub_mod` is private\n+error[E0624]: method `pub_mod` is private\n   --> $DIR/explore-issue-38412.rs:62:7\n    |\n LL |     t.pub_mod();\n-   |       ^^^^^^^ private associated function\n+   |       ^^^^^^^ private method\n    |\n   ::: $DIR/auxiliary/pub-and-stability.rs:130:9\n    |\n LL |         pub(in m) fn pub_mod(&self) -> i32 { self.0 }\n-   |         ---------------------------------- private associated function defined here\n+   |         ---------------------------------- private method defined here\n \n-error[E0624]: associated function `private` is private\n+error[E0624]: method `private` is private\n   --> $DIR/explore-issue-38412.rs:63:7\n    |\n LL |     t.private();\n-   |       ^^^^^^^ private associated function\n+   |       ^^^^^^^ private method\n    |\n   ::: $DIR/auxiliary/pub-and-stability.rs:131:9\n    |\n LL |         fn private(&self) -> i32 { self.0 }\n-   |         ------------------------ private associated function defined here\n+   |         ------------------------ private method defined here\n \n error: aborting due to 19 previous errors\n "}, {"sha": "219029e2afd6c42706b8cbe326b8f24518a998a9", "filename": "tests/ui/fn/issue-3044.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ffn%2Fissue-3044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ffn%2Fissue-3044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Fissue-3044.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -7,7 +7,7 @@ LL | |\n LL | |     });\n    | |______- an argument is missing\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n help: provide the argument\n    |"}, {"sha": "3f9a4c2f3c5077deb3862b76c2262a84ee5eaa28", "filename": "tests/ui/generator/issue-102645.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fgenerator%2Fissue-102645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fgenerator%2Fissue-102645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-102645.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -4,7 +4,7 @@ error[E0061]: this method takes 1 argument but 0 arguments were supplied\n LL |     Pin::new(&mut b).resume();\n    |                      ^^^^^^-- an argument of type `()` is missing\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $SRC_DIR/core/src/ops/generator.rs:LL:COL\n help: provide the argument\n    |"}, {"sha": "ad76499591c1f23682ed85dc7e3014c785c3f848", "filename": "tests/ui/inference/inference_unstable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Finference%2Finference_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Finference%2Finference_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Finference_unstable.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -14,16 +14,16 @@ use inference_unstable_itertools::IpuItertools;\n \n fn main() {\n     assert_eq!('x'.ipu_flatten(), 1);\n-//~^ WARN an associated function with this name may be added to the standard library in the future\n+//~^ WARN a method with this name may be added to the standard library in the future\n //~| WARN once this associated item is added to the standard library, the ambiguity may cause an\n     assert_eq!('x'.ipu_by_value_vs_by_ref(), 1);\n-//~^ WARN an associated function with this name may be added to the standard library in the future\n+//~^ WARN a method with this name may be added to the standard library in the future\n //~| WARN once this associated item is added to the standard library, the ambiguity may cause an\n     assert_eq!('x'.ipu_by_ref_vs_by_ref_mut(), 1);\n-//~^ WARN an associated function with this name may be added to the standard library in the future\n+//~^ WARN a method with this name may be added to the standard library in the future\n //~| WARN once this associated item is added to the standard library, the ambiguity may cause an\n     assert_eq!((&mut 'x' as *mut char).ipu_by_mut_ptr_vs_by_const_ptr(), 1);\n-//~^ WARN an associated function with this name may be added to the standard library in the future\n+//~^ WARN a method with this name may be added to the standard library in the future\n //~| WARN once this associated item is added to the standard library, the ambiguity may cause an\n     assert_eq!(char::C, 1);\n //~^ WARN an associated constant with this name may be added to the standard library in the future"}, {"sha": "c48aaf9f495286861a86db37112f9aa2a6969f99", "filename": "tests/ui/inference/inference_unstable.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Finference%2Finference_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Finference%2Finference_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Finference_unstable.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,4 +1,4 @@\n-warning: an associated function with this name may be added to the standard library in the future\n+warning: a method with this name may be added to the standard library in the future\n   --> $DIR/inference_unstable.rs:16:20\n    |\n LL |     assert_eq!('x'.ipu_flatten(), 1);\n@@ -10,7 +10,7 @@ LL |     assert_eq!('x'.ipu_flatten(), 1);\n    = help: add `#![feature(ipu_flatten)]` to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_flatten`\n    = note: `#[warn(unstable_name_collisions)]` on by default\n \n-warning: an associated function with this name may be added to the standard library in the future\n+warning: a method with this name may be added to the standard library in the future\n   --> $DIR/inference_unstable.rs:19:20\n    |\n LL |     assert_eq!('x'.ipu_by_value_vs_by_ref(), 1);\n@@ -21,7 +21,7 @@ LL |     assert_eq!('x'.ipu_by_value_vs_by_ref(), 1);\n    = help: call with fully qualified syntax `inference_unstable_itertools::IpuItertools::ipu_by_value_vs_by_ref(...)` to keep using the current method\n    = help: add `#![feature(ipu_flatten)]` to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_by_value_vs_by_ref`\n \n-warning: an associated function with this name may be added to the standard library in the future\n+warning: a method with this name may be added to the standard library in the future\n   --> $DIR/inference_unstable.rs:22:20\n    |\n LL |     assert_eq!('x'.ipu_by_ref_vs_by_ref_mut(), 1);\n@@ -32,7 +32,7 @@ LL |     assert_eq!('x'.ipu_by_ref_vs_by_ref_mut(), 1);\n    = help: call with fully qualified syntax `inference_unstable_itertools::IpuItertools::ipu_by_ref_vs_by_ref_mut(...)` to keep using the current method\n    = help: add `#![feature(ipu_flatten)]` to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_by_ref_vs_by_ref_mut`\n \n-warning: an associated function with this name may be added to the standard library in the future\n+warning: a method with this name may be added to the standard library in the future\n   --> $DIR/inference_unstable.rs:25:40\n    |\n LL |     assert_eq!((&mut 'x' as *mut char).ipu_by_mut_ptr_vs_by_const_ptr(), 1);"}, {"sha": "dc43abf52c650fd49c5a1e29d12fb28c5a0ff683", "filename": "tests/ui/inference/inference_unstable_featured.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Finference%2Finference_unstable_featured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Finference%2Finference_unstable_featured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Finference_unstable_featured.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,11 +6,11 @@ LL |     assert_eq!('x'.ipu_flatten(), 0);\n    |\n    = note: candidate #1 is defined in an impl of the trait `IpuIterator` for the type `char`\n    = note: candidate #2 is defined in an impl of the trait `IpuItertools` for the type `char`\n-help: disambiguate the associated function for candidate #1\n+help: disambiguate the method for candidate #1\n    |\n LL |     assert_eq!(IpuIterator::ipu_flatten(&'x'), 0);\n    |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-help: disambiguate the associated function for candidate #2\n+help: disambiguate the method for candidate #2\n    |\n LL |     assert_eq!(IpuItertools::ipu_flatten(&'x'), 0);\n    |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}, {"sha": "e89e4dca61917325e94b755fc0873af90d539eef", "filename": "tests/ui/inference/issue-71732.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Finference%2Fissue-71732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Finference%2Fissue-71732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-71732.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -4,7 +4,7 @@ error[E0283]: type annotations needed\n LL |         .get(&\"key\".into())\n    |          ^^^ ------------- type must be known at this point\n    |          |\n-   |          cannot infer type of the type parameter `Q` declared on the associated function `get`\n+   |          cannot infer type of the type parameter `Q` declared on the method `get`\n    |\n    = note: multiple `impl`s satisfying `String: Borrow<_>` found in the following crates: `alloc`, `core`:\n            - impl Borrow<str> for String;"}, {"sha": "7a1e850d157fe7f4f5b2505794fc3d38c96cdeb1", "filename": "tests/ui/inference/question-mark-type-infer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Finference%2Fquestion-mark-type-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Finference%2Fquestion-mark-type-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fquestion-mark-type-infer.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/question-mark-type-infer.rs:10:21\n    |\n LL |     l.iter().map(f).collect()?\n-   |                     ^^^^^^^ cannot infer type of the type parameter `B` declared on the associated function `collect`\n+   |                     ^^^^^^^ cannot infer type of the type parameter `B` declared on the method `collect`\n    |\n help: consider specifying the generic argument\n    |"}, {"sha": "6e1fb1540bb15d5961d5e2e98201427e00e4d82b", "filename": "tests/ui/issues/issue-11374.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-11374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-11374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-11374.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -10,7 +10,7 @@ LL |     c.read_to(v);\n    |\n    = note: expected mutable reference `&mut [u8]`\n                          found struct `Vec<_>`\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/issue-11374.rs:13:12\n    |\n LL |     pub fn read_to(&mut self, vec: &mut [u8]) {"}, {"sha": "55e51e566d981ed36d6a7d65f21954874d4eafb1", "filename": "tests/ui/issues/issue-17337.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-17337.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-17337.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-17337.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,4 +1,4 @@\n-error: use of deprecated associated function `Foo::foo`: text\n+error: use of deprecated method `Foo::foo`: text\n   --> $DIR/issue-17337.rs:16:6\n    |\n LL |     .foo();"}, {"sha": "602b80c6824f7f6884e4f81791d39e1f1cd89100", "filename": "tests/ui/issues/issue-18446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-18446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-18446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-18446.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -14,7 +14,7 @@ note: candidate #2 is defined in the trait `T`\n    |\n LL |     fn foo(&self);\n    |     ^^^^^^^^^^^^^^\n-help: disambiguate the associated function for candidate #2\n+help: disambiguate the method for candidate #2\n    |\n LL |     T::foo(&x);\n    |     ~~~~~~~~~~"}, {"sha": "2c5f1394449b46c7dbc0203103afe0cd1116c8f2", "filename": "tests/ui/issues/issue-21202.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-21202.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-21202.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-21202.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -8,7 +8,7 @@ mod B {\n     use crate1::A::Foo;\n     fn bar(f: Foo) {\n         Foo::foo(&f);\n-        //~^ ERROR: associated function `foo` is private\n+        //~^ ERROR: method `foo` is private\n     }\n }\n "}, {"sha": "e7c3f2f9a071c247267b7b9bbb30e3d70d133f4e", "filename": "tests/ui/issues/issue-21202.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-21202.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-21202.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-21202.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,13 +1,13 @@\n-error[E0624]: associated function `foo` is private\n+error[E0624]: method `foo` is private\n   --> $DIR/issue-21202.rs:10:14\n    |\n LL |         Foo::foo(&f);\n-   |              ^^^ private associated function\n+   |              ^^^ private method\n    |\n   ::: $DIR/auxiliary/issue-21202.rs:4:9\n    |\n LL |         fn foo(&self) { }\n-   |         ------------- private associated function defined here\n+   |         ------------- private method defined here\n \n error: aborting due to previous error\n "}, {"sha": "4271c67c3bcf3ecbea35fbed154104e591a7f83a", "filename": "tests/ui/issues/issue-23041.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-23041.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-23041.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-23041.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-23041.rs:6:7\n    |\n LL |     b.downcast_ref::<fn(_)->_>();\n-   |       ^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the associated function `downcast_ref`\n+   |       ^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the method `downcast_ref`\n    |\n help: consider specifying the generic argument\n    |"}, {"sha": "0b94c3135a106dbc0fc55e41cc33b098b106e912", "filename": "tests/ui/issues/issue-3702-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-3702-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-3702-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-3702-2.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in an impl of the trait `Add` for the type `isize`\n    |\n LL |     fn to_int(&self) -> isize { *self }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: disambiguate the associated function for candidate #1\n+help: disambiguate the method for candidate #1\n    |\n LL |         ToPrimitive::to_int(&self) + other.to_int()\n    |         ~~~~~~~~~~~~~~~~~~~~~~~~~~\n-help: disambiguate the associated function for candidate #2\n+help: disambiguate the method for candidate #2\n    |\n LL |         Add::to_int(&self) + other.to_int()\n    |         ~~~~~~~~~~~~~~~~~~"}, {"sha": "893009a2cd9d2e04f849883ad8a7310a5bccee62", "filename": "tests/ui/issues/issue-3763.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-3763.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -20,9 +20,9 @@ fn main() {\n     let _woohoo = (Box::new(my_struct)).priv_field;\n     //~^ ERROR field `priv_field` of struct `MyStruct` is private\n \n-    (&my_struct).happyfun();               //~ ERROR associated function `happyfun` is private\n+    (&my_struct).happyfun();               //~ ERROR method `happyfun` is private\n \n-    (Box::new(my_struct)).happyfun();          //~ ERROR associated function `happyfun` is private\n+    (Box::new(my_struct)).happyfun();          //~ ERROR method `happyfun` is private\n     let nope = my_struct.priv_field;\n     //~^ ERROR field `priv_field` of struct `MyStruct` is private\n }"}, {"sha": "d101e4c33add77a01cc8affaf698050fecc847ff", "filename": "tests/ui/issues/issue-3763.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-3763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-3763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-3763.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -10,23 +10,23 @@ error[E0616]: field `priv_field` of struct `MyStruct` is private\n LL |     let _woohoo = (Box::new(my_struct)).priv_field;\n    |                                         ^^^^^^^^^^ private field\n \n-error[E0624]: associated function `happyfun` is private\n+error[E0624]: method `happyfun` is private\n   --> $DIR/issue-3763.rs:23:18\n    |\n LL |         fn happyfun(&self) {}\n-   |         ------------------ private associated function defined here\n+   |         ------------------ private method defined here\n ...\n LL |     (&my_struct).happyfun();\n-   |                  ^^^^^^^^ private associated function\n+   |                  ^^^^^^^^ private method\n \n-error[E0624]: associated function `happyfun` is private\n+error[E0624]: method `happyfun` is private\n   --> $DIR/issue-3763.rs:25:27\n    |\n LL |         fn happyfun(&self) {}\n-   |         ------------------ private associated function defined here\n+   |         ------------------ private method defined here\n ...\n LL |     (Box::new(my_struct)).happyfun();\n-   |                           ^^^^^^^^ private associated function\n+   |                           ^^^^^^^^ private method\n \n error[E0616]: field `priv_field` of struct `MyStruct` is private\n   --> $DIR/issue-3763.rs:26:26"}, {"sha": "cac4af6a7f3c83e0043ebcea8b8821388dcadd02", "filename": "tests/ui/issues/issue-48364.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-48364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-48364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-48364.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -8,7 +8,7 @@ LL |     b\"\".starts_with(stringify!(foo))\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`\n-note: associated function defined here\n+note: method defined here\n   --> $SRC_DIR/core/src/slice/mod.rs:LL:COL\n    = note: this error originates in the macro `stringify` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "7347957906c0a1449276daa623c47380c5477710", "filename": "tests/ui/issues/issue-60622.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-60622.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-60622.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-60622.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -9,7 +9,7 @@ impl Borked {\n fn run_wild<T>(b: &Borked) {\n     b.a::<'_, T>();\n     //~^ ERROR cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-    //~| ERROR this associated function takes 0 generic arguments but 1 generic argument\n+    //~| ERROR this method takes 0 generic arguments but 1 generic argument\n     //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n }\n "}, {"sha": "69b532b8f97e16285962cacf024fb6b9b9228b80", "filename": "tests/ui/issues/issue-60622.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-60622.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-60622.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-60622.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -16,15 +16,15 @@ LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(late_bound_lifetime_arguments)]` implied by `#[deny(warnings)]`\n \n-error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-60622.rs:10:7\n    |\n LL |     b.a::<'_, T>();\n    |       ^       - help: remove this generic argument\n    |       |\n    |       expected 0 generic arguments\n    |\n-note: associated function defined here, with 0 generic parameters\n+note: method defined here, with 0 generic parameters\n   --> $DIR/issue-60622.rs:6:8\n    |\n LL |     fn a(&self) {}"}, {"sha": "4af3672ef72b9c668a06ea418010e62baa7fbc33", "filename": "tests/ui/issues/issue-65634-raw-ident-suggestion.edition2015.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.edition2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.edition2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.edition2015.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in an impl of the trait `await` for the type `r#fn\n    |\n LL |     fn r#struct(&self) {\n    |     ^^^^^^^^^^^^^^^^^^\n-help: disambiguate the associated function for candidate #1\n+help: disambiguate the method for candidate #1\n    |\n LL |     async::r#struct(&r#fn {});\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~\n-help: disambiguate the associated function for candidate #2\n+help: disambiguate the method for candidate #2\n    |\n LL |     await::r#struct(&r#fn {});\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~"}, {"sha": "2b96a0fb5e554ba22eacf263bbe8c3ee8992cd13", "filename": "tests/ui/issues/issue-65634-raw-ident-suggestion.edition2018.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.edition2018.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in an impl of the trait `r#await` for the type `r#\n    |\n LL |     fn r#struct(&self) {\n    |     ^^^^^^^^^^^^^^^^^^\n-help: disambiguate the associated function for candidate #1\n+help: disambiguate the method for candidate #1\n    |\n LL |     r#async::r#struct(&r#fn {});\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-help: disambiguate the associated function for candidate #2\n+help: disambiguate the method for candidate #2\n    |\n LL |     r#await::r#struct(&r#fn {});\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~"}, {"sha": "d3e307fba2ce91bf28df07637954bb7027b3a01f", "filename": "tests/ui/issues/issue-69455.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-69455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fissues%2Fissue-69455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-69455.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -2,7 +2,7 @@ error[E0284]: type annotations needed\n   --> $DIR/issue-69455.rs:29:41\n    |\n LL |     println!(\"{}\", 23u64.test(xs.iter().sum()));\n-   |                          ----           ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n+   |                          ----           ^^^ cannot infer type of the type parameter `S` declared on the method `sum`\n    |                          |\n    |                          type must be known at this point\n    |\n@@ -16,7 +16,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-69455.rs:29:41\n    |\n LL |     println!(\"{}\", 23u64.test(xs.iter().sum()));\n-   |                          ----           ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n+   |                          ----           ^^^ cannot infer type of the type parameter `S` declared on the method `sum`\n    |                          |\n    |                          required by a bound introduced by this call\n    |"}, {"sha": "6fd7f67d15ea6d5129fdaad13ab5c185dacc1cff", "filename": "tests/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -7,7 +7,7 @@ LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n    |          lifetime `'a` defined here\n LL |\n LL |     x\n-   |     ^ associated function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n+   |     ^ method was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n \n error: aborting due to previous error\n "}, {"sha": "2687266e0986273156547c174a564f5995590683", "filename": "tests/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -7,7 +7,7 @@ LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n    |            lifetime `'a` defined here\n LL |\n LL |         if true { x } else { self }\n-   |                              ^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+   |                              ^^^^ method was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "9ff5e42d732cc7cc457270be927b8862a151e256", "filename": "tests/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,7 +6,7 @@ LL |   fn foo<'a>(&self, x: &i32) -> &i32 {\n    |              |\n    |              let's call the lifetime of this reference `'2`\n LL |     x\n-   |     ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |     ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |"}, {"sha": "e4c855e11fe28edb446399ed190522a77b2ee847", "filename": "tests/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,7 +6,7 @@ LL |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n    |                |\n    |                let's call the lifetime of this reference `'2`\n LL |         if true { x } else { self }\n-   |                   ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                   ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |"}, {"sha": "1978bd4e82474ad4229be3a680305939261ce65e", "filename": "tests/ui/lint/dead-code/issue-85255.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -11,8 +11,8 @@ struct Foo {\n struct Bar;\n \n impl Bar {\n-    fn a(&self) -> i32 { 5 } //~ WARNING: associated function `a` is never used\n-    pub fn b(&self) -> i32 { 6 } //~ WARNING: associated function `b` is never used\n+    fn a(&self) -> i32 { 5 } //~ WARNING: method `a` is never used\n+    pub fn b(&self) -> i32 { 6 } //~ WARNING: method `b` is never used\n }\n \n pub(crate) struct Foo1 {\n@@ -23,8 +23,8 @@ pub(crate) struct Foo1 {\n pub(crate) struct Bar1;\n \n impl Bar1 {\n-    fn a(&self) -> i32 { 5 } //~ WARNING: associated function `a` is never used\n-    pub fn b(&self) -> i32 { 6 } //~ WARNING: associated function `b` is never used\n+    fn a(&self) -> i32 { 5 } //~ WARNING: method `a` is never used\n+    pub fn b(&self) -> i32 { 6 } //~ WARNING: method `b` is never used\n }\n \n pub(crate) struct Foo2 {\n@@ -35,8 +35,8 @@ pub(crate) struct Foo2 {\n pub(crate) struct Bar2;\n \n impl Bar2 {\n-    fn a(&self) -> i32 { 5 } //~ WARNING: associated function `a` is never used\n-    pub fn b(&self) -> i32 { 6 } //~ WARNING: associated function `b` is never used\n+    fn a(&self) -> i32 { 5 } //~ WARNING: method `a` is never used\n+    pub fn b(&self) -> i32 { 6 } //~ WARNING: method `b` is never used\n }\n \n "}, {"sha": "58a19cf3c99ad0fad01cf9acabae0d5014f26035", "filename": "tests/ui/lint/dead-code/issue-85255.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -34,37 +34,37 @@ LL |     a: i32,\n LL |     pub b: i32,\n    |         ^\n \n-warning: associated function `a` is never used\n+warning: method `a` is never used\n   --> $DIR/issue-85255.rs:14:8\n    |\n LL |     fn a(&self) -> i32 { 5 }\n    |        ^\n \n-warning: associated function `b` is never used\n+warning: method `b` is never used\n   --> $DIR/issue-85255.rs:15:12\n    |\n LL |     pub fn b(&self) -> i32 { 6 }\n    |            ^\n \n-warning: associated function `a` is never used\n+warning: method `a` is never used\n   --> $DIR/issue-85255.rs:26:8\n    |\n LL |     fn a(&self) -> i32 { 5 }\n    |        ^\n \n-warning: associated function `b` is never used\n+warning: method `b` is never used\n   --> $DIR/issue-85255.rs:27:12\n    |\n LL |     pub fn b(&self) -> i32 { 6 }\n    |            ^\n \n-warning: associated function `a` is never used\n+warning: method `a` is never used\n   --> $DIR/issue-85255.rs:38:8\n    |\n LL |     fn a(&self) -> i32 { 5 }\n    |        ^\n \n-warning: associated function `b` is never used\n+warning: method `b` is never used\n   --> $DIR/issue-85255.rs:39:12\n    |\n LL |     pub fn b(&self) -> i32 { 6 }"}, {"sha": "20b568054dfb77acad430b0bb7828d0ddd04f3e6", "filename": "tests/ui/lint/dead-code/lint-dead-code-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -13,7 +13,7 @@ extern \"C\" {\n \n struct Foo; //~ ERROR: struct `Foo` is never constructed\n impl Foo {\n-    fn foo(&self) { //~ ERROR: associated function `foo` is never used\n+    fn foo(&self) { //~ ERROR: method `foo` is never used\n         bar()\n     }\n }"}, {"sha": "797b7559c01b2e37232991e0d9a80936ab297dc8", "filename": "tests/ui/lint/dead-code/lint-dead-code-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -34,7 +34,7 @@ error: function `blah` is never used\n LL |         fn blah() {}\n    |            ^^^^\n \n-error: associated function `foo` is never used\n+error: method `foo` is never used\n   --> $DIR/lint-dead-code-3.rs:16:8\n    |\n LL |     fn foo(&self) {"}, {"sha": "4a234d2651ae3017cdd7ddf82a3a512848a43fd5", "filename": "tests/ui/lint/lint-missing-doc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-missing-doc.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -50,8 +50,10 @@ trait B {\n }\n \n pub trait C { //~ ERROR: missing documentation for a trait\n-    fn foo(&self); //~ ERROR: missing documentation for an associated function\n-    fn foo_with_impl(&self) {} //~ ERROR: missing documentation for an associated function\n+    fn foo(&self); //~ ERROR: missing documentation for a method\n+    fn foo_with_impl(&self) {} //~ ERROR: missing documentation for a method\n+    fn foo_no_self(); //~ ERROR: missing documentation for an associated function\n+    fn foo_no_self_with_impl() {} //~ ERROR: missing documentation for an associated function\n }\n \n #[allow(missing_docs)]"}, {"sha": "733d062a08ba0995edb53e2a104aac3be62c053e", "filename": "tests/ui/lint/lint-missing-doc.stderr", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Flint-missing-doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Flint-missing-doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-missing-doc.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -40,101 +40,113 @@ error: missing documentation for a trait\n LL | pub trait C {\n    | ^^^^^^^^^^^\n \n-error: missing documentation for an associated function\n+error: missing documentation for a method\n   --> $DIR/lint-missing-doc.rs:53:5\n    |\n LL |     fn foo(&self);\n    |     ^^^^^^^^^^^^^^\n \n-error: missing documentation for an associated function\n+error: missing documentation for a method\n   --> $DIR/lint-missing-doc.rs:54:5\n    |\n LL |     fn foo_with_impl(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: missing documentation for an associated function\n+  --> $DIR/lint-missing-doc.rs:55:5\n+   |\n+LL |     fn foo_no_self();\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for an associated function\n+  --> $DIR/lint-missing-doc.rs:56:5\n+   |\n+LL |     fn foo_no_self_with_impl() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: missing documentation for an associated type\n-  --> $DIR/lint-missing-doc.rs:64:5\n+  --> $DIR/lint-missing-doc.rs:66:5\n    |\n LL |     type AssociatedType;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated type\n-  --> $DIR/lint-missing-doc.rs:65:5\n+  --> $DIR/lint-missing-doc.rs:67:5\n    |\n LL |     type AssociatedTypeDef = Self;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/lint-missing-doc.rs:81:5\n+  --> $DIR/lint-missing-doc.rs:83:5\n    |\n LL |     pub fn foo() {}\n    |     ^^^^^^^^^^^^\n \n error: missing documentation for an enum\n-  --> $DIR/lint-missing-doc.rs:118:1\n+  --> $DIR/lint-missing-doc.rs:120:1\n    |\n LL | pub enum PubBaz {\n    | ^^^^^^^^^^^^^^^\n \n error: missing documentation for a variant\n-  --> $DIR/lint-missing-doc.rs:119:5\n+  --> $DIR/lint-missing-doc.rs:121:5\n    |\n LL |     PubBazA {\n    |     ^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/lint-missing-doc.rs:120:9\n+  --> $DIR/lint-missing-doc.rs:122:9\n    |\n LL |         a: isize,\n    |         ^^^^^^^^\n \n error: missing documentation for a constant\n-  --> $DIR/lint-missing-doc.rs:151:1\n+  --> $DIR/lint-missing-doc.rs:153:1\n    |\n LL | pub const FOO4: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a static\n-  --> $DIR/lint-missing-doc.rs:161:1\n+  --> $DIR/lint-missing-doc.rs:163:1\n    |\n LL | pub static BAR4: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/lint-missing-doc.rs:167:5\n+  --> $DIR/lint-missing-doc.rs:169:5\n    |\n LL |     pub fn undocumented1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/lint-missing-doc.rs:168:5\n+  --> $DIR/lint-missing-doc.rs:170:5\n    |\n LL |     pub fn undocumented2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/lint-missing-doc.rs:174:9\n+  --> $DIR/lint-missing-doc.rs:176:9\n    |\n LL |         pub fn also_undocumented1() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/lint-missing-doc.rs:189:5\n+  --> $DIR/lint-missing-doc.rs:191:5\n    |\n LL |     pub fn extern_fn_undocumented(f: f32) -> f32;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a static\n-  --> $DIR/lint-missing-doc.rs:194:5\n+  --> $DIR/lint-missing-doc.rs:196:5\n    |\n LL |     pub static EXTERN_STATIC_UNDOCUMENTED: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a foreign type\n-  --> $DIR/lint-missing-doc.rs:199:5\n+  --> $DIR/lint-missing-doc.rs:201:5\n    |\n LL |     pub type ExternTyUndocumented;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 24 previous errors\n "}, {"sha": "a56a37228e533cd74e1310e3011067a5de34fac6", "filename": "tests/ui/lint/lint-stability-deprecated.rs", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-stability-deprecated.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -22,40 +22,40 @@ mod cross_crate {\n         let foo = MethodTester;\n \n         deprecated(); //~ WARN use of deprecated function `lint_stability::deprecated`\n-        foo.method_deprecated(); //~ WARN use of deprecated associated function `lint_stability::MethodTester::method_deprecated`\n-        Foo::method_deprecated(&foo); //~ WARN use of deprecated associated function `lint_stability::MethodTester::method_deprecated`\n-        <Foo>::method_deprecated(&foo); //~ WARN use of deprecated associated function `lint_stability::MethodTester::method_deprecated`\n-        foo.trait_deprecated(); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated`\n-        Trait::trait_deprecated(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated`\n-        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated`\n-        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated`\n+        foo.method_deprecated(); //~ WARN use of deprecated method `lint_stability::MethodTester::method_deprecated`\n+        Foo::method_deprecated(&foo); //~ WARN use of deprecated method `lint_stability::MethodTester::method_deprecated`\n+        <Foo>::method_deprecated(&foo); //~ WARN use of deprecated method `lint_stability::MethodTester::method_deprecated`\n+        foo.trait_deprecated(); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated`\n+        Trait::trait_deprecated(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated`\n+        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated`\n+        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated`\n \n         deprecated_text(); //~ WARN use of deprecated function `lint_stability::deprecated_text`: text\n-        foo.method_deprecated_text(); //~ WARN use of deprecated associated function `lint_stability::MethodTester::method_deprecated_text`: text\n-        Foo::method_deprecated_text(&foo); //~ WARN use of deprecated associated function `lint_stability::MethodTester::method_deprecated_text`: text\n-        <Foo>::method_deprecated_text(&foo); //~ WARN use of deprecated associated function `lint_stability::MethodTester::method_deprecated_text`: text\n-        foo.trait_deprecated_text(); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n-        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n-        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n+        foo.method_deprecated_text(); //~ WARN use of deprecated method `lint_stability::MethodTester::method_deprecated_text`: text\n+        Foo::method_deprecated_text(&foo); //~ WARN use of deprecated method `lint_stability::MethodTester::method_deprecated_text`: text\n+        <Foo>::method_deprecated_text(&foo); //~ WARN use of deprecated method `lint_stability::MethodTester::method_deprecated_text`: text\n+        foo.trait_deprecated_text(); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n+        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n+        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n \n         deprecated_unstable(); //~ WARN use of deprecated function `lint_stability::deprecated_unstable`\n-        foo.method_deprecated_unstable(); //~ WARN use of deprecated associated function `lint_stability::MethodTester::method_deprecated_unstable`\n-        Foo::method_deprecated_unstable(&foo); //~ WARN use of deprecated associated function `lint_stability::MethodTester::method_deprecated_unstable`\n-        <Foo>::method_deprecated_unstable(&foo); //~ WARN use of deprecated associated function `lint_stability::MethodTester::method_deprecated_unstable`\n-        foo.trait_deprecated_unstable(); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`\n-        Trait::trait_deprecated_unstable(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`\n-        <Foo>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`\n-        <Foo as Trait>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`\n+        foo.method_deprecated_unstable(); //~ WARN use of deprecated method `lint_stability::MethodTester::method_deprecated_unstable`\n+        Foo::method_deprecated_unstable(&foo); //~ WARN use of deprecated method `lint_stability::MethodTester::method_deprecated_unstable`\n+        <Foo>::method_deprecated_unstable(&foo); //~ WARN use of deprecated method `lint_stability::MethodTester::method_deprecated_unstable`\n+        foo.trait_deprecated_unstable(); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`\n+        Trait::trait_deprecated_unstable(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`\n+        <Foo>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`\n+        <Foo as Trait>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`\n \n         deprecated_unstable_text(); //~ WARN use of deprecated function `lint_stability::deprecated_unstable_text`: text\n-        foo.method_deprecated_unstable_text(); //~ WARN use of deprecated associated function `lint_stability::MethodTester::method_deprecated_unstable_text`: text\n-        Foo::method_deprecated_unstable_text(&foo); //~ WARN use of deprecated associated function `lint_stability::MethodTester::method_deprecated_unstable_text`: text\n-        <Foo>::method_deprecated_unstable_text(&foo); //~ WARN use of deprecated associated function `lint_stability::MethodTester::method_deprecated_unstable_text`: text\n-        foo.trait_deprecated_unstable_text(); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n-        Trait::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n-        <Foo>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n-        <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+        foo.method_deprecated_unstable_text(); //~ WARN use of deprecated method `lint_stability::MethodTester::method_deprecated_unstable_text`: text\n+        Foo::method_deprecated_unstable_text(&foo); //~ WARN use of deprecated method `lint_stability::MethodTester::method_deprecated_unstable_text`: text\n+        <Foo>::method_deprecated_unstable_text(&foo); //~ WARN use of deprecated method `lint_stability::MethodTester::method_deprecated_unstable_text`: text\n+        foo.trait_deprecated_unstable_text(); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+        Trait::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+        <Foo>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+        <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n \n         unstable();\n         foo.method_unstable();\n@@ -141,22 +141,22 @@ mod cross_crate {\n     }\n \n     fn test_method_param<Foo: Trait>(foo: Foo) {\n-        foo.trait_deprecated(); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated`\n-        Trait::trait_deprecated(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated`\n-        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated`\n-        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated`\n-        foo.trait_deprecated_text(); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n-        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n-        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n-        foo.trait_deprecated_unstable(); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`\n-        Trait::trait_deprecated_unstable(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`\n-        <Foo>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`\n-        <Foo as Trait>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`\n-        foo.trait_deprecated_unstable_text(); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n-        Trait::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n-        <Foo>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n-        <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+        foo.trait_deprecated(); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated`\n+        Trait::trait_deprecated(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated`\n+        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated`\n+        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated`\n+        foo.trait_deprecated_text(); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n+        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n+        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n+        foo.trait_deprecated_unstable(); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`\n+        Trait::trait_deprecated_unstable(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`\n+        <Foo>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`\n+        <Foo as Trait>::trait_deprecated_unstable(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`\n+        foo.trait_deprecated_unstable_text(); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+        Trait::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+        <Foo>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+        <Foo as Trait>::trait_deprecated_unstable_text(&foo); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n         foo.trait_unstable();\n         Trait::trait_unstable(&foo);\n         <Foo>::trait_unstable(&foo);\n@@ -172,10 +172,10 @@ mod cross_crate {\n     }\n \n     fn test_method_object(foo: &dyn Trait) {\n-        foo.trait_deprecated(); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated`\n-        foo.trait_deprecated_text(); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n-        foo.trait_deprecated_unstable(); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`\n-        foo.trait_deprecated_unstable_text(); //~ WARN use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+        foo.trait_deprecated(); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated`\n+        foo.trait_deprecated_text(); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n+        foo.trait_deprecated_unstable(); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`\n+        foo.trait_deprecated_unstable_text(); //~ WARN use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n         foo.trait_unstable();\n         foo.trait_unstable_text();\n         foo.trait_stable();\n@@ -328,22 +328,22 @@ mod this_crate {\n         let foo = MethodTester;\n \n         deprecated(); //~ WARN use of deprecated function `this_crate::deprecated`\n-        foo.method_deprecated(); //~ WARN use of deprecated associated function `this_crate::MethodTester::method_deprecated`\n-        Foo::method_deprecated(&foo); //~ WARN use of deprecated associated function `this_crate::MethodTester::method_deprecated`\n-        <Foo>::method_deprecated(&foo); //~ WARN use of deprecated associated function `this_crate::MethodTester::method_deprecated`\n-        foo.trait_deprecated(); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        Trait::trait_deprecated(&foo); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated`\n+        foo.method_deprecated(); //~ WARN use of deprecated method `this_crate::MethodTester::method_deprecated`\n+        Foo::method_deprecated(&foo); //~ WARN use of deprecated method `this_crate::MethodTester::method_deprecated`\n+        <Foo>::method_deprecated(&foo); //~ WARN use of deprecated method `this_crate::MethodTester::method_deprecated`\n+        foo.trait_deprecated(); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated`\n+        Trait::trait_deprecated(&foo); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated`\n+        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated`\n+        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated`\n \n         deprecated_text(); //~ WARN use of deprecated function `this_crate::deprecated_text`: text\n-        foo.method_deprecated_text(); //~ WARN use of deprecated associated function `this_crate::MethodTester::method_deprecated_text`: text\n-        Foo::method_deprecated_text(&foo); //~ WARN use of deprecated associated function `this_crate::MethodTester::method_deprecated_text`: text\n-        <Foo>::method_deprecated_text(&foo); //~ WARN use of deprecated associated function `this_crate::MethodTester::method_deprecated_text`: text\n-        foo.trait_deprecated_text(); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n-        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n-        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+        foo.method_deprecated_text(); //~ WARN use of deprecated method `this_crate::MethodTester::method_deprecated_text`: text\n+        Foo::method_deprecated_text(&foo); //~ WARN use of deprecated method `this_crate::MethodTester::method_deprecated_text`: text\n+        <Foo>::method_deprecated_text(&foo); //~ WARN use of deprecated method `this_crate::MethodTester::method_deprecated_text`: text\n+        foo.trait_deprecated_text(); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n+        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n+        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n \n         unstable();\n         foo.method_unstable();\n@@ -402,14 +402,14 @@ mod this_crate {\n     }\n \n     fn test_method_param<Foo: Trait>(foo: Foo) {\n-        foo.trait_deprecated(); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        Trait::trait_deprecated(&foo); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        foo.trait_deprecated_text(); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n-        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n-        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n-        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+        foo.trait_deprecated(); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated`\n+        Trait::trait_deprecated(&foo); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated`\n+        <Foo>::trait_deprecated(&foo); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated`\n+        <Foo as Trait>::trait_deprecated(&foo); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated`\n+        foo.trait_deprecated_text(); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n+        Trait::trait_deprecated_text(&foo); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n+        <Foo>::trait_deprecated_text(&foo); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n+        <Foo as Trait>::trait_deprecated_text(&foo); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n         foo.trait_unstable();\n         Trait::trait_unstable(&foo);\n         <Foo>::trait_unstable(&foo);\n@@ -425,8 +425,8 @@ mod this_crate {\n     }\n \n     fn test_method_object(foo: &dyn Trait) {\n-        foo.trait_deprecated(); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated`\n-        foo.trait_deprecated_text(); //~ WARN use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+        foo.trait_deprecated(); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated`\n+        foo.trait_deprecated_text(); //~ WARN use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n         foo.trait_unstable();\n         foo.trait_unstable_text();\n         foo.trait_stable();"}, {"sha": "19a4649e1680438054c437e506cb7c7c0ed60fd8", "filename": "tests/ui/lint/lint-stability-deprecated.stderr", "status": "modified", "additions": 112, "deletions": 112, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Flint-stability-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Flint%2Flint-stability-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-stability-deprecated.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -10,13 +10,13 @@ note: the lint level is defined here\n LL | #![warn(deprecated)]\n    |         ^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:29:16\n    |\n LL |         Trait::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:31:25\n    |\n LL |         <Foo as Trait>::trait_deprecated(&foo);\n@@ -28,31 +28,31 @@ warning: use of deprecated function `lint_stability::deprecated_text`: text\n LL |         deprecated_text();\n    |         ^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:38:16\n    |\n-LL | ...   Trait::trait_deprecated_text(&foo);\n-   |              ^^^^^^^^^^^^^^^^^^^^^\n+LL |         Trait::trait_deprecated_text(&foo);\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:40:25\n    |\n-LL | ...   <Foo as Trait>::trait_deprecated_text(&foo);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^\n+LL |         <Foo as Trait>::trait_deprecated_text(&foo);\n+   |                         ^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated function `lint_stability::deprecated_unstable`: text\n   --> $DIR/lint-stability-deprecated.rs:42:9\n    |\n LL |         deprecated_unstable();\n    |         ^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`: text\n   --> $DIR/lint-stability-deprecated.rs:47:16\n    |\n-LL | ...   Trait::trait_deprecated_unstable(&foo);\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         Trait::trait_deprecated_unstable(&foo);\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`: text\n   --> $DIR/lint-stability-deprecated.rs:49:25\n    |\n LL | ...   <Foo as Trait>::trait_deprecated_unstable(&foo);\n@@ -64,13 +64,13 @@ warning: use of deprecated function `lint_stability::deprecated_unstable_text`:\n LL |         deprecated_unstable_text();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n   --> $DIR/lint-stability-deprecated.rs:56:16\n    |\n LL | ...   Trait::trait_deprecated_unstable_text(&foo);\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n   --> $DIR/lint-stability-deprecated.rs:58:25\n    |\n LL | ...   <Foo as Trait>::trait_deprecated_unstable_text(&foo);\n@@ -142,49 +142,49 @@ warning: use of deprecated function `lint_stability::deprecated_text`: text\n LL |         macro_test_arg!(macro_test_arg!(deprecated_text()));\n    |                                         ^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:145:16\n    |\n LL |         Trait::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:147:25\n    |\n LL |         <Foo as Trait>::trait_deprecated(&foo);\n    |                         ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:149:16\n    |\n-LL | ...   Trait::trait_deprecated_text(&foo);\n-   |              ^^^^^^^^^^^^^^^^^^^^^\n+LL |         Trait::trait_deprecated_text(&foo);\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:151:25\n    |\n-LL | ...   <Foo as Trait>::trait_deprecated_text(&foo);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^\n+LL |         <Foo as Trait>::trait_deprecated_text(&foo);\n+   |                         ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`: text\n   --> $DIR/lint-stability-deprecated.rs:153:16\n    |\n-LL | ...   Trait::trait_deprecated_unstable(&foo);\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         Trait::trait_deprecated_unstable(&foo);\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`: text\n   --> $DIR/lint-stability-deprecated.rs:155:25\n    |\n LL | ...   <Foo as Trait>::trait_deprecated_unstable(&foo);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n   --> $DIR/lint-stability-deprecated.rs:157:16\n    |\n LL | ...   Trait::trait_deprecated_unstable_text(&foo);\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n   --> $DIR/lint-stability-deprecated.rs:159:25\n    |\n LL | ...   <Foo as Trait>::trait_deprecated_unstable_text(&foo);\n@@ -214,13 +214,13 @@ warning: use of deprecated function `this_crate::deprecated`: text\n LL |         deprecated();\n    |         ^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:335:16\n    |\n LL |         Trait::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:337:25\n    |\n LL |         <Foo as Trait>::trait_deprecated(&foo);\n@@ -232,17 +232,17 @@ warning: use of deprecated function `this_crate::deprecated_text`: text\n LL |         deprecated_text();\n    |         ^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:344:16\n    |\n LL |         Trait::trait_deprecated_text(&foo);\n    |                ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:346:25\n    |\n-LL | ...   <Foo as Trait>::trait_deprecated_text(&foo);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^\n+LL |         <Foo as Trait>::trait_deprecated_text(&foo);\n+   |                         ^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated struct `this_crate::DeprecatedStruct`: text\n   --> $DIR/lint-stability-deprecated.rs:384:17\n@@ -268,29 +268,29 @@ warning: use of deprecated tuple struct `this_crate::DeprecatedTupleStruct`: tex\n LL |         let _ = DeprecatedTupleStruct (1);\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:406:16\n    |\n LL |         Trait::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:408:25\n    |\n LL |         <Foo as Trait>::trait_deprecated(&foo);\n    |                         ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:410:16\n    |\n LL |         Trait::trait_deprecated_text(&foo);\n    |                ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:412:25\n    |\n-LL | ...   <Foo as Trait>::trait_deprecated_text(&foo);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^\n+LL |         <Foo as Trait>::trait_deprecated_text(&foo);\n+   |                         ^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated function `this_crate::test_fn_body::fn_in_body`: text\n   --> $DIR/lint-stability-deprecated.rs:439:9\n@@ -328,121 +328,121 @@ warning: use of deprecated associated type `lint_stability::TraitWithAssociatedT\n LL |             TypeDeprecated = u16,\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::MethodTester::method_deprecated`: text\n+warning: use of deprecated method `lint_stability::MethodTester::method_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:25:13\n    |\n LL |         foo.method_deprecated();\n    |             ^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::MethodTester::method_deprecated`: text\n+warning: use of deprecated method `lint_stability::MethodTester::method_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:26:14\n    |\n LL |         Foo::method_deprecated(&foo);\n    |              ^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::MethodTester::method_deprecated`: text\n+warning: use of deprecated method `lint_stability::MethodTester::method_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:27:16\n    |\n LL |         <Foo>::method_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:28:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:30:16\n    |\n LL |         <Foo>::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::MethodTester::method_deprecated_text`: text\n+warning: use of deprecated method `lint_stability::MethodTester::method_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:34:13\n    |\n-LL | ...   foo.method_deprecated_text();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^\n+LL |         foo.method_deprecated_text();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::MethodTester::method_deprecated_text`: text\n+warning: use of deprecated method `lint_stability::MethodTester::method_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:35:14\n    |\n-LL | ...   Foo::method_deprecated_text(&foo);\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n+LL |         Foo::method_deprecated_text(&foo);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::MethodTester::method_deprecated_text`: text\n+warning: use of deprecated method `lint_stability::MethodTester::method_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:36:16\n    |\n-LL | ...   <Foo>::method_deprecated_text(&foo);\n-   |              ^^^^^^^^^^^^^^^^^^^^^^\n+LL |         <Foo>::method_deprecated_text(&foo);\n+   |                ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:37:13\n    |\n LL |         foo.trait_deprecated_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:39:16\n    |\n-LL | ...   <Foo>::trait_deprecated_text(&foo);\n-   |              ^^^^^^^^^^^^^^^^^^^^^\n+LL |         <Foo>::trait_deprecated_text(&foo);\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::MethodTester::method_deprecated_unstable`: text\n+warning: use of deprecated method `lint_stability::MethodTester::method_deprecated_unstable`: text\n   --> $DIR/lint-stability-deprecated.rs:43:13\n    |\n-LL | ...   foo.method_deprecated_unstable();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         foo.method_deprecated_unstable();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::MethodTester::method_deprecated_unstable`: text\n+warning: use of deprecated method `lint_stability::MethodTester::method_deprecated_unstable`: text\n   --> $DIR/lint-stability-deprecated.rs:44:14\n    |\n-LL | ...   Foo::method_deprecated_unstable(&foo);\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         Foo::method_deprecated_unstable(&foo);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::MethodTester::method_deprecated_unstable`: text\n+warning: use of deprecated method `lint_stability::MethodTester::method_deprecated_unstable`: text\n   --> $DIR/lint-stability-deprecated.rs:45:16\n    |\n LL | ...   <Foo>::method_deprecated_unstable(&foo);\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`: text\n   --> $DIR/lint-stability-deprecated.rs:46:13\n    |\n LL |         foo.trait_deprecated_unstable();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`: text\n   --> $DIR/lint-stability-deprecated.rs:48:16\n    |\n-LL | ...   <Foo>::trait_deprecated_unstable(&foo);\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         <Foo>::trait_deprecated_unstable(&foo);\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::MethodTester::method_deprecated_unstable_text`: text\n+warning: use of deprecated method `lint_stability::MethodTester::method_deprecated_unstable_text`: text\n   --> $DIR/lint-stability-deprecated.rs:52:13\n    |\n LL | ...   foo.method_deprecated_unstable_text();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::MethodTester::method_deprecated_unstable_text`: text\n+warning: use of deprecated method `lint_stability::MethodTester::method_deprecated_unstable_text`: text\n   --> $DIR/lint-stability-deprecated.rs:53:14\n    |\n LL | ...   Foo::method_deprecated_unstable_text(&foo);\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::MethodTester::method_deprecated_unstable_text`: text\n+warning: use of deprecated method `lint_stability::MethodTester::method_deprecated_unstable_text`: text\n   --> $DIR/lint-stability-deprecated.rs:54:16\n    |\n LL | ...   <Foo>::method_deprecated_unstable_text(&foo);\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n   --> $DIR/lint-stability-deprecated.rs:55:13\n    |\n LL | ...   foo.trait_deprecated_unstable_text();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n   --> $DIR/lint-stability-deprecated.rs:57:16\n    |\n LL | ...   <Foo>::trait_deprecated_unstable_text(&foo);\n@@ -460,133 +460,133 @@ warning: use of deprecated field `lint_stability::DeprecatedUnstableStruct::i`:\n LL |             i: 0\n    |             ^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:144:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:146:16\n    |\n LL |         <Foo>::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:148:13\n    |\n LL |         foo.trait_deprecated_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:150:16\n    |\n-LL | ...   <Foo>::trait_deprecated_text(&foo);\n-   |              ^^^^^^^^^^^^^^^^^^^^^\n+LL |         <Foo>::trait_deprecated_text(&foo);\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`: text\n   --> $DIR/lint-stability-deprecated.rs:152:13\n    |\n LL |         foo.trait_deprecated_unstable();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`: text\n   --> $DIR/lint-stability-deprecated.rs:154:16\n    |\n-LL | ...   <Foo>::trait_deprecated_unstable(&foo);\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         <Foo>::trait_deprecated_unstable(&foo);\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n   --> $DIR/lint-stability-deprecated.rs:156:13\n    |\n LL | ...   foo.trait_deprecated_unstable_text();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n   --> $DIR/lint-stability-deprecated.rs:158:16\n    |\n LL | ...   <Foo>::trait_deprecated_unstable_text(&foo);\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:175:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:176:13\n    |\n LL |         foo.trait_deprecated_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable`: text\n   --> $DIR/lint-stability-deprecated.rs:177:13\n    |\n LL |         foo.trait_deprecated_unstable();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `lint_stability::Trait::trait_deprecated_unstable_text`: text\n+warning: use of deprecated method `lint_stability::Trait::trait_deprecated_unstable_text`: text\n   --> $DIR/lint-stability-deprecated.rs:178:13\n    |\n LL | ...   foo.trait_deprecated_unstable_text();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::MethodTester::method_deprecated`: text\n+warning: use of deprecated method `this_crate::MethodTester::method_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:331:13\n    |\n LL |         foo.method_deprecated();\n    |             ^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::MethodTester::method_deprecated`: text\n+warning: use of deprecated method `this_crate::MethodTester::method_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:332:14\n    |\n LL |         Foo::method_deprecated(&foo);\n    |              ^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::MethodTester::method_deprecated`: text\n+warning: use of deprecated method `this_crate::MethodTester::method_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:333:16\n    |\n LL |         <Foo>::method_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:334:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:336:16\n    |\n LL |         <Foo>::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::MethodTester::method_deprecated_text`: text\n+warning: use of deprecated method `this_crate::MethodTester::method_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:340:13\n    |\n-LL | ...   foo.method_deprecated_text();\n-   |           ^^^^^^^^^^^^^^^^^^^^^^\n+LL |         foo.method_deprecated_text();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::MethodTester::method_deprecated_text`: text\n+warning: use of deprecated method `this_crate::MethodTester::method_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:341:14\n    |\n-LL | ...   Foo::method_deprecated_text(&foo);\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n+LL |         Foo::method_deprecated_text(&foo);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::MethodTester::method_deprecated_text`: text\n+warning: use of deprecated method `this_crate::MethodTester::method_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:342:16\n    |\n-LL | ...   <Foo>::method_deprecated_text(&foo);\n-   |              ^^^^^^^^^^^^^^^^^^^^^^\n+LL |         <Foo>::method_deprecated_text(&foo);\n+   |                ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:343:13\n    |\n LL |         foo.trait_deprecated_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:345:16\n    |\n LL |         <Foo>::trait_deprecated_text(&foo);\n@@ -598,37 +598,37 @@ warning: use of deprecated field `this_crate::DeprecatedStruct::i`: text\n LL |             i: 0\n    |             ^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:405:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:407:16\n    |\n LL |         <Foo>::trait_deprecated(&foo);\n    |                ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:409:13\n    |\n LL |         foo.trait_deprecated_text();\n    |             ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:411:16\n    |\n LL |         <Foo>::trait_deprecated_text(&foo);\n    |                ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated`: text\n   --> $DIR/lint-stability-deprecated.rs:428:13\n    |\n LL |         foo.trait_deprecated();\n    |             ^^^^^^^^^^^^^^^^\n \n-warning: use of deprecated associated function `this_crate::Trait::trait_deprecated_text`: text\n+warning: use of deprecated method `this_crate::Trait::trait_deprecated_text`: text\n   --> $DIR/lint-stability-deprecated.rs:429:13\n    |\n LL |         foo.trait_deprecated_text();"}, {"sha": "b353d3514febb512913881c5fe00882f0b119118", "filename": "tests/ui/match/match-ref-mut-invariance.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,7 +6,7 @@ LL | impl<'b> S<'b> {\n LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n    |            -- lifetime `'a` defined here\n LL |         match self.0 { ref mut x => x }\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n    = note: requirement occurs because of a mutable reference to `&i32`"}, {"sha": "bb0fcdb99905c28e149271bffc2b8e1f416fd782", "filename": "tests/ui/match/match-ref-mut-let-invariance.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -7,7 +7,7 @@ LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n    |            -- lifetime `'a` defined here\n LL |         let ref mut x = self.0;\n LL |         x\n-   |         ^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |         ^ method was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n    = note: requirement occurs because of a mutable reference to `&i32`"}, {"sha": "a8afdeb84012f5834c454d5315b4db987f599e81", "filename": "tests/ui/methods/issues/issue-61525.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -27,7 +27,7 @@ LL |         1.query::<dyn ToString>(\"\")\n    |\n    = note: expected trait object `dyn ToString`\n                  found reference `&'static str`\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/issue-61525.rs:2:8\n    |\n LL |     fn query<Q>(self, q: Q);"}, {"sha": "5132d92777bd611c466e3559992824b520362174", "filename": "tests/ui/methods/method-ambig-two-traits-cross-crate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -10,11 +10,11 @@ note: candidate #2 is defined in an impl of the trait `Me2` for the type `usize`\n    |\n LL | impl Me2 for usize { fn me(&self) -> usize { *self } }\n    |                      ^^^^^^^^^^^^^^^^^^^^^\n-help: disambiguate the associated function for candidate #1\n+help: disambiguate the method for candidate #1\n    |\n LL | fn main() { Me::me(&1_usize); }\n    |             ~~~~~~~~~~~~~~~~\n-help: disambiguate the associated function for candidate #2\n+help: disambiguate the method for candidate #2\n    |\n LL | fn main() { Me2::me(&1_usize); }\n    |             ~~~~~~~~~~~~~~~~~"}, {"sha": "601e6bbb006f73cbef0c6a6b69209ac15f4f122e", "filename": "tests/ui/methods/method-ambig-two-traits-from-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-bounds.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in the trait `B`\n    |\n LL | trait B { fn foo(&self); }\n    |           ^^^^^^^^^^^^^^\n-help: disambiguate the associated function for candidate #1\n+help: disambiguate the method for candidate #1\n    |\n LL |     A::foo(t);\n    |     ~~~~~~~~~\n-help: disambiguate the associated function for candidate #2\n+help: disambiguate the method for candidate #2\n    |\n LL |     B::foo(t);\n    |     ~~~~~~~~~"}, {"sha": "313591433918ff864579c9ca4975e37dc8a71109", "filename": "tests/ui/methods/method-ambig-two-traits-from-impls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in an impl of the trait `B` for the type `AB`\n    |\n LL |     fn foo(self) {}\n    |     ^^^^^^^^^^^^\n-help: disambiguate the associated function for candidate #1\n+help: disambiguate the method for candidate #1\n    |\n LL |     A::foo(AB {});\n    |     ~~~~~~~~~~~~~\n-help: disambiguate the associated function for candidate #2\n+help: disambiguate the method for candidate #2\n    |\n LL |     B::foo(AB {});\n    |     ~~~~~~~~~~~~~"}, {"sha": "df01966b3a2cc0dc55d6617ca4d614569d294ec0", "filename": "tests/ui/methods/method-ambig-two-traits-with-default-method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-ambig-two-traits-with-default-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-ambig-two-traits-with-default-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-ambig-two-traits-with-default-method.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in an impl of the trait `Bar` for the type `usize`\n    |\n LL | trait Bar { fn method(&self) {} }\n    |             ^^^^^^^^^^^^^^^^\n-help: disambiguate the associated function for candidate #1\n+help: disambiguate the method for candidate #1\n    |\n LL |     Foo::method(&1_usize);\n    |     ~~~~~~~~~~~~~~~~~~~~~\n-help: disambiguate the associated function for candidate #2\n+help: disambiguate the method for candidate #2\n    |\n LL |     Bar::method(&1_usize);\n    |     ~~~~~~~~~~~~~~~~~~~~~"}, {"sha": "c340c2d32b319616f6a7b529be590c1b6f2dd070", "filename": "tests/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -7,7 +7,7 @@ LL |     x.zero(0)\n    |            unexpected argument of type `{integer}`\n    |            help: remove the extra argument\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/method-call-err-msg.rs:5:8\n    |\n LL |     fn zero(self) -> Foo { self }\n@@ -19,7 +19,7 @@ error[E0061]: this method takes 1 argument but 0 arguments were supplied\n LL |      .one()\n    |       ^^^-- an argument of type `isize` is missing\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/method-call-err-msg.rs:6:8\n    |\n LL |     fn one(self, _: isize) -> Foo { self }\n@@ -35,7 +35,7 @@ error[E0061]: this method takes 2 arguments but 1 argument was supplied\n LL |      .two(0);\n    |       ^^^--- an argument of type `isize` is missing\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/method-call-err-msg.rs:7:8\n    |\n LL |     fn two(self, _: isize, _: isize) -> Foo { self }\n@@ -72,7 +72,7 @@ error[E0061]: this method takes 3 arguments but 0 arguments were supplied\n LL |     y.three::<usize>();\n    |       ^^^^^^^^^^^^^^-- three arguments of type `usize`, `usize`, and `usize` are missing\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/method-call-err-msg.rs:8:8\n    |\n LL |     fn three<T>(self, _: T, _: T, _: T) -> Foo { self }"}, {"sha": "2e5c9a0b891d44a9a94bae4d2c2fa0aeb1c1ebad", "filename": "tests/ui/methods/method-call-lifetime-args-fail.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -14,9 +14,9 @@ impl S {\n fn method_call() {\n     S.early(); // OK\n     S.early::<'static>();\n-    //~^ ERROR this associated function takes 2 lifetime arguments but 1 lifetime argument\n+    //~^ ERROR this method takes 2 lifetime arguments but 1 lifetime argument\n     S.early::<'static, 'static, 'static>();\n-    //~^ ERROR this associated function takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+    //~^ ERROR this method takes 2 lifetime arguments but 3 lifetime arguments were supplied\n     let _: &u8 = S.life_and_type::<'static>();\n     S.life_and_type::<u8>();\n     S.life_and_type::<'static, u8>();\n@@ -61,9 +61,9 @@ fn ufcs() {\n \n     S::early(S); // OK\n     S::early::<'static>(S);\n-    //~^ ERROR this associated function takes 2 lifetime arguments but 1 lifetime argument\n+    //~^ ERROR this method takes 2 lifetime arguments but 1 lifetime argument\n     S::early::<'static, 'static, 'static>(S);\n-    //~^ ERROR this associated function takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+    //~^ ERROR this method takes 2 lifetime arguments but 3 lifetime arguments were supplied\n     let _: &u8 = S::life_and_type::<'static>(S);\n     S::life_and_type::<u8>(S);\n     S::life_and_type::<'static, u8>(S);"}, {"sha": "45ff32bdd4cab1c99b40f7b055256a048a30d97a", "filename": "tests/ui/methods/method-call-lifetime-args-fail.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,12 +1,12 @@\n-error[E0107]: this associated function takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: this method takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/method-call-lifetime-args-fail.rs:16:7\n    |\n LL |     S.early::<'static>();\n    |       ^^^^^   ------- supplied 1 lifetime argument\n    |       |\n    |       expected 2 lifetime arguments\n    |\n-note: associated function defined here, with 2 lifetime parameters: `'a`, `'b`\n+note: method defined here, with 2 lifetime parameters: `'a`, `'b`\n   --> $DIR/method-call-lifetime-args-fail.rs:6:8\n    |\n LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n@@ -16,15 +16,15 @@ help: add missing lifetime argument\n LL |     S.early::<'static, 'static>();\n    |                      +++++++++\n \n-error[E0107]: this associated function takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+error[E0107]: this method takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/method-call-lifetime-args-fail.rs:18:7\n    |\n LL |     S.early::<'static, 'static, 'static>();\n    |       ^^^^^                     ------- help: remove this lifetime argument\n    |       |\n    |       expected 2 lifetime arguments\n    |\n-note: associated function defined here, with 2 lifetime parameters: `'a`, `'b`\n+note: method defined here, with 2 lifetime parameters: `'a`, `'b`\n   --> $DIR/method-call-lifetime-args-fail.rs:6:8\n    |\n LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n@@ -198,15 +198,15 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_unused_early<'a, 'b>(self) -> &'b u8 { loop {} }\n    |                          ^^\n \n-error[E0107]: this associated function takes 2 lifetime arguments but 1 lifetime argument was supplied\n+error[E0107]: this method takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/method-call-lifetime-args-fail.rs:63:8\n    |\n LL |     S::early::<'static>(S);\n    |        ^^^^^   ------- supplied 1 lifetime argument\n    |        |\n    |        expected 2 lifetime arguments\n    |\n-note: associated function defined here, with 2 lifetime parameters: `'a`, `'b`\n+note: method defined here, with 2 lifetime parameters: `'a`, `'b`\n   --> $DIR/method-call-lifetime-args-fail.rs:6:8\n    |\n LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n@@ -216,15 +216,15 @@ help: add missing lifetime argument\n LL |     S::early::<'static, 'static>(S);\n    |                       +++++++++\n \n-error[E0107]: this associated function takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+error[E0107]: this method takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/method-call-lifetime-args-fail.rs:65:8\n    |\n LL |     S::early::<'static, 'static, 'static>(S);\n    |        ^^^^^                     ------- help: remove this lifetime argument\n    |        |\n    |        expected 2 lifetime arguments\n    |\n-note: associated function defined here, with 2 lifetime parameters: `'a`, `'b`\n+note: method defined here, with 2 lifetime parameters: `'a`, `'b`\n   --> $DIR/method-call-lifetime-args-fail.rs:6:8\n    |\n LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }"}, {"sha": "4e83e4b77f10e14e083e22ca6e7b51e6ce59e705", "filename": "tests/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -44,15 +44,15 @@ note: candidate #3 is defined in the trait `FinalFoo`\n    |\n LL |     fn foo(&self) -> u8;\n    |     ^^^^^^^^^^^^^^^^^^^^\n-help: disambiguate the associated function for candidate #1\n+help: disambiguate the method for candidate #1\n    |\n LL |     let z = X::foo(x);\n    |             ~~~~~~~~~\n-help: disambiguate the associated function for candidate #2\n+help: disambiguate the method for candidate #2\n    |\n LL |     let z = NuisanceFoo::foo(x);\n    |             ~~~~~~~~~~~~~~~~~~~\n-help: disambiguate the associated function for candidate #3\n+help: disambiguate the method for candidate #3\n    |\n LL |     let z = FinalFoo::foo(x);\n    |             ~~~~~~~~~~~~~~~~"}, {"sha": "9241a8be58f262a8dc7114690582d3a2bfd2e171", "filename": "tests/ui/methods/method-self-arg-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -8,7 +8,7 @@ LL |     Foo::bar(x);\n    |     |        help: consider borrowing here: `&x`\n    |     arguments to this function are incorrect\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/method-self-arg-1.rs:6:8\n    |\n LL |     fn bar(&self) {}\n@@ -24,7 +24,7 @@ LL |     Foo::bar(&42);\n    |\n    = note: expected reference `&Foo`\n               found reference `&{integer}`\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/method-self-arg-1.rs:6:8\n    |\n LL |     fn bar(&self) {}"}, {"sha": "bcffd575aed486d8c5a32269db65d6391929a904", "filename": "tests/ui/nll/outlives-suggestion-simple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -73,7 +73,7 @@ LL | impl<'a> Bar<'a> {\n LL |     pub fn get<'b>(&self) -> &'b usize {\n    |                -- lifetime `'b` defined here\n LL |         self.x\n-   |         ^^^^^^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |         ^^^^^^ method was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n \n@@ -85,7 +85,7 @@ LL | impl<'a> Baz<'a> {\n LL |     fn get<'b>(&'b self) -> &'a i32 {\n    |            -- lifetime `'b` defined here\n LL |         self.x\n-   |         ^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+   |         ^^^^^^ method was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}, {"sha": "fcb2108ab5fece17f331392bf684f126be9378f8", "filename": "tests/ui/privacy/privacy1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivacy1.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -106,7 +106,7 @@ mod foo {\n                                 //~^ ERROR: associated function `bar` is private\n         ::bar::baz::A.foo2();   //~ ERROR: module `baz` is private\n         ::bar::baz::A.bar2();   //~ ERROR: module `baz` is private\n-                                //~^ ERROR: associated function `bar2` is private\n+                                //~^ ERROR: method `bar2` is private\n \n         let _: isize =\n         ::bar::B::foo();        //~ ERROR: trait `B` is private"}, {"sha": "6ebed8ee062ef85cef232119011ee350dd666330", "filename": "tests/ui/privacy/privacy1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivacy1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivacy1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivacy1.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -190,14 +190,14 @@ LL |             fn bar() {}\n LL |         ::bar::baz::A::bar();\n    |                        ^^^ private associated function\n \n-error[E0624]: associated function `bar2` is private\n+error[E0624]: method `bar2` is private\n   --> $DIR/privacy1.rs:108:23\n    |\n LL |             fn bar2(&self) {}\n-   |             -------------- private associated function defined here\n+   |             -------------- private method defined here\n ...\n LL |         ::bar::baz::A.bar2();\n-   |                       ^^^^ private associated function\n+   |                       ^^^^ private method\n \n error: aborting due to 18 previous errors\n "}, {"sha": "b5587920f1cc9d0b86c735cbffe22544438f36bb", "filename": "tests/ui/privacy/private-impl-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-impl-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-impl-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-impl-method.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -17,5 +17,5 @@ fn f() {\n fn main() {\n     let s = a::Foo { x: 1 };\n     s.bar();\n-    s.foo();    //~ ERROR associated function `foo` is private\n+    s.foo();    //~ ERROR method `foo` is private\n }"}, {"sha": "18e4531d11256d0ef188f6f2fb3531e3a7ad520b", "filename": "tests/ui/privacy/private-impl-method.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-impl-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-impl-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-impl-method.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,11 +1,11 @@\n-error[E0624]: associated function `foo` is private\n+error[E0624]: method `foo` is private\n   --> $DIR/private-impl-method.rs:20:7\n    |\n LL |         fn foo(&self) {}\n-   |         ------------- private associated function defined here\n+   |         ------------- private method defined here\n ...\n LL |     s.foo();\n-   |       ^^^ private associated function\n+   |       ^^^ private method\n \n error: aborting due to previous error\n "}, {"sha": "4da44e0682be909d9eb9c2e6f48a2b6f3919defa", "filename": "tests/ui/privacy/private-method-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-method-cross-crate.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -4,5 +4,5 @@ use cci_class_5::kitties::cat;\n \n fn main() {\n   let nyan : cat = cat(52, 99);\n-  nyan.nap();   //~ ERROR associated function `nap` is private\n+  nyan.nap();   //~ ERROR method `nap` is private\n }"}, {"sha": "e644440c827ab2b4e5273822400208abf36db394", "filename": "tests/ui/privacy/private-method-cross-crate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,13 +1,13 @@\n-error[E0624]: associated function `nap` is private\n+error[E0624]: method `nap` is private\n   --> $DIR/private-method-cross-crate.rs:7:8\n    |\n LL |   nyan.nap();\n-   |        ^^^ private associated function\n+   |        ^^^ private method\n    |\n   ::: $DIR/auxiliary/cci_class_5.rs:8:9\n    |\n LL |         fn nap(&self) {}\n-   |         ------------- private associated function defined here\n+   |         ------------- private method defined here\n \n error: aborting due to previous error\n "}, {"sha": "bc27027e886ba5e8393f4b0c476c01e8754c5104", "filename": "tests/ui/privacy/private-method-inherited.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-method-inherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-method-inherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-method-inherited.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -10,5 +10,5 @@ mod a {\n \n fn main() {\n     let x = a::Foo;\n-    x.f();  //~ ERROR associated function `f` is private\n+    x.f();  //~ ERROR method `f` is private\n }"}, {"sha": "0104a1b27e4853fa55f50ef456d3428b0e3ed117", "filename": "tests/ui/privacy/private-method-inherited.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-method-inherited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-method-inherited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-method-inherited.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,11 +1,11 @@\n-error[E0624]: associated function `f` is private\n+error[E0624]: method `f` is private\n   --> $DIR/private-method-inherited.rs:13:7\n    |\n LL |         fn f(self) {}\n-   |         ---------- private associated function defined here\n+   |         ---------- private method defined here\n ...\n LL |     x.f();\n-   |       ^ private associated function\n+   |       ^ private method\n \n error: aborting due to previous error\n "}, {"sha": "a9bea520e75735191009d99473f342ee33709c57", "filename": "tests/ui/privacy/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-method.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -19,5 +19,5 @@ mod kitties {\n \n fn main() {\n   let nyan : kitties::Cat = kitties::cat(52, 99);\n-  nyan.nap(); //~ ERROR associated function `nap` is private\n+  nyan.nap(); //~ ERROR method `nap` is private\n }"}, {"sha": "42fec76226584f2546ff9b0dabe4c6da3a4fb264", "filename": "tests/ui/privacy/private-method.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Fprivate-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-method.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,11 +1,11 @@\n-error[E0624]: associated function `nap` is private\n+error[E0624]: method `nap` is private\n   --> $DIR/private-method.rs:22:8\n    |\n LL |         fn nap(&self) {}\n-   |         ------------- private associated function defined here\n+   |         ------------- private method defined here\n ...\n LL |   nyan.nap();\n-   |        ^^^ private associated function\n+   |        ^^^ private method\n \n error: aborting due to previous error\n "}, {"sha": "76f19525df5321dc20d3343f3cf4755adf8c7228", "filename": "tests/ui/privacy/restricted/test.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -54,14 +54,14 @@ error[E0616]: field `x` of struct `S` is private\n LL |     S::default().x;\n    |                  ^ private field\n \n-error[E0624]: associated function `f` is private\n+error[E0624]: method `f` is private\n   --> $DIR/test.rs:32:18\n    |\n LL |             pub(super) fn f(&self) {}\n-   |             ---------------------- private associated function defined here\n+   |             ---------------------- private method defined here\n ...\n LL |     S::default().f();\n-   |                  ^ private associated function\n+   |                  ^ private method\n \n error[E0624]: associated function `g` is private\n   --> $DIR/test.rs:33:8\n@@ -84,27 +84,27 @@ error[E0616]: field `z` of struct `Universe` is private\n LL |     let _ = u.z;\n    |               ^ private field\n \n-error[E0624]: associated function `g` is private\n+error[E0624]: method `g` is private\n   --> $DIR/test.rs:45:7\n    |\n LL |     u.g();\n-   |       ^ private associated function\n+   |       ^ private method\n    |\n   ::: $DIR/auxiliary/pub_restricted.rs:12:5\n    |\n LL |     pub(crate) fn g(&self) {}\n-   |     ---------------------- private associated function defined here\n+   |     ---------------------- private method defined here\n \n-error[E0624]: associated function `h` is private\n+error[E0624]: method `h` is private\n   --> $DIR/test.rs:46:7\n    |\n LL |     u.h();\n-   |       ^ private associated function\n+   |       ^ private method\n    |\n   ::: $DIR/auxiliary/pub_restricted.rs:13:5\n    |\n LL |     pub(crate) fn h(&self) {}\n-   |     ---------------------- private associated function defined here\n+   |     ---------------------- private method defined here\n \n error: aborting due to 12 previous errors\n "}, {"sha": "a7746d8981e830354c7d51da24823c29af1fd939", "filename": "tests/ui/regions/regions-early-bound-error-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fregions%2Fregions-early-bound-error-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fregions%2Fregions-early-bound-error-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-early-bound-error-method.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,7 +6,7 @@ LL | impl<'a> Box<'a> {\n LL |     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {\n    |           -- lifetime `'b` defined here\n LL |         g2.get()\n-   |         ^^^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+   |         ^^^^^^^^ method was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}, {"sha": "d0ceaec3b67d5e9fd30fa4f5f46d98bc69737bf5", "filename": "tests/ui/regions/regions-free-region-ordering-incorrect.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -9,7 +9,7 @@ LL | /         match self.next {\n LL | |             Some(ref next) => next.get(),\n LL | |             None => &self.val\n LL | |         }\n-   | |_________^ associated function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   | |_________^ method was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}, {"sha": "0b4c0a7fecec419631092a504dc8768ac8920b22", "filename": "tests/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -2,7 +2,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                          -         -               ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                          -         -               ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                          |         |\n    |                          |         let's call the lifetime of this reference `'1`\n    |                          let's call the lifetime of this reference `'2`\n@@ -16,7 +16,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:75\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          -          -                                     ^^^^^^^^^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                          -          -                                     ^^^^^^^^^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                          |          |\n    |                          |          let's call the lifetime of this reference `'1`\n    |                          let's call the lifetime of this reference `'2`\n@@ -30,7 +30,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                  --              -                             ^^^ associated function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n+   |                  --              -                             ^^^ method was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n    |                  |               |\n    |                  |               let's call the lifetime of this reference `'1`\n    |                  lifetime `'a` defined here"}, {"sha": "209dae9c1b3e864dc2cd3ad72caffbc2b770cb88", "filename": "tests/ui/self/arbitrary_self_types_pin_lifetime_mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -2,7 +2,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:6:46\n    |\n LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                    -         -               ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                    -         -               ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                    |         |\n    |                    |         let's call the lifetime of this reference `'1`\n    |                    let's call the lifetime of this reference `'2`\n@@ -16,7 +16,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:9:69\n    |\n LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                    -          -                                     ^^^^^^^^^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                    -          -                                     ^^^^^^^^^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |                    |          |\n    |                    |          let's call the lifetime of this reference `'1`\n    |                    let's call the lifetime of this reference `'2`\n@@ -30,7 +30,7 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:15:58\n    |\n LL |     fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |            --  ---- has type `Pin<&'1 Foo>`              ^^^ associated function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n+   |            --  ---- has type `Pin<&'1 Foo>`              ^^^ method was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n    |            |\n    |            lifetime `'a` defined here\n "}, {"sha": "29d60ed6635233cdd178d27d066527d4e95b1ddc", "filename": "tests/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,7 +6,7 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -21,7 +21,7 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             |\n    |                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -36,7 +36,7 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -51,7 +51,7 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -66,7 +66,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             |\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -81,7 +81,7 @@ LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                         |\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |"}, {"sha": "216737a2c7330991199954174b9e2443a48422f7", "filename": "tests/ui/self/elision/lt-ref-self.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Felision%2Flt-ref-self.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,7 +6,7 @@ LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                 |\n    |                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -21,7 +21,7 @@ LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -36,7 +36,7 @@ LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -51,7 +51,7 @@ LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -66,7 +66,7 @@ LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -81,7 +81,7 @@ LL |     fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                   |\n    |                                   let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |"}, {"sha": "62543ba533955bd9379f7016ba98b8dabbb3d610", "filename": "tests/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,7 +6,7 @@ LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -21,7 +21,7 @@ LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             |\n    |                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -36,7 +36,7 @@ LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -51,7 +51,7 @@ LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -66,7 +66,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             |\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -81,7 +81,7 @@ LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             |\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |"}, {"sha": "12b64a3f6dcb5c9f668d1c8dac38ddff7412d956", "filename": "tests/ui/self/elision/ref-mut-self.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Felision%2Fref-mut-self.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,7 +6,7 @@ LL |     fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                 |\n    |                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -21,7 +21,7 @@ LL |     fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -36,7 +36,7 @@ LL |     fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -51,7 +51,7 @@ LL |     fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -66,7 +66,7 @@ LL |     fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -81,7 +81,7 @@ LL |     fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |"}, {"sha": "f8fb2e4a1383bd388f918a6b97797d05ef9c68e1", "filename": "tests/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,7 +6,7 @@ LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -21,7 +21,7 @@ LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -36,7 +36,7 @@ LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -51,7 +51,7 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u\n    |                                               |\n    |                                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -66,7 +66,7 @@ LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u\n    |                                               |\n    |                                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |"}, {"sha": "cde16ce8ba4149a9b3323b0870c84c004c7d10f1", "filename": "tests/ui/self/elision/ref-mut-struct.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,7 +6,7 @@ LL |     fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                         |\n    |                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -21,7 +21,7 @@ LL |     fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                 |\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -36,7 +36,7 @@ LL |     fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                 |\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -51,7 +51,7 @@ LL |     fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                         |\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -66,7 +66,7 @@ LL |     fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                         |\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |"}, {"sha": "010d281b002246580437672fe102929351e1be6d", "filename": "tests/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,7 +6,7 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -21,7 +21,7 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             |\n    |                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -36,7 +36,7 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -51,7 +51,7 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -66,7 +66,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             |\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -81,7 +81,7 @@ LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             |\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -96,7 +96,7 @@ LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                            |\n    |                                            let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |"}, {"sha": "35693257c9919e454eb325d6a37d194ad4eddfb4", "filename": "tests/ui/self/elision/ref-self.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Felision%2Fref-self.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,7 +6,7 @@ LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                 |\n    |                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -21,7 +21,7 @@ LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                       |\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -36,7 +36,7 @@ LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -51,7 +51,7 @@ LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -66,7 +66,7 @@ LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -81,7 +81,7 @@ LL |     fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -96,7 +96,7 @@ LL |     fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                      |\n    |                                      let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |"}, {"sha": "c9376d58f9096918817c1bcafc4769d27e07d4ff", "filename": "tests/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,7 +6,7 @@ LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               |\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -21,7 +21,7 @@ LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -36,7 +36,7 @@ LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       |\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -51,7 +51,7 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               |\n    |                                               let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -66,7 +66,7 @@ LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                           |\n    |                                           let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |"}, {"sha": "a3d3cebeba9c591039d16fa360a1fded362fcef7", "filename": "tests/ui/self/elision/ref-struct.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fself%2Felision%2Fref-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Felision%2Fref-struct.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -6,7 +6,7 @@ LL |     fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                         |\n    |                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -21,7 +21,7 @@ LL |     fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                 |\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -36,7 +36,7 @@ LL |     fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                 |\n    |                                 let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -51,7 +51,7 @@ LL |     fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                         |\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |\n@@ -66,7 +66,7 @@ LL |     fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                     |\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n-   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |         ^ method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n    |\n help: consider introducing a named lifetime parameter and update trait if needed\n    |"}, {"sha": "b612fdf16fc8c3955dfc5a6c46287f93456cb72a", "filename": "tests/ui/span/issue-37767.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fspan%2Fissue-37767.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fspan%2Fissue-37767.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-37767.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in the trait `B`\n    |\n LL |     fn foo(&mut self) {}\n    |     ^^^^^^^^^^^^^^^^^\n-help: disambiguate the associated function for candidate #1\n+help: disambiguate the method for candidate #1\n    |\n LL |     A::foo(&a)\n    |     ~~~~~~~~~~\n-help: disambiguate the associated function for candidate #2\n+help: disambiguate the method for candidate #2\n    |\n LL |     B::foo(&a)\n    |     ~~~~~~~~~~\n@@ -39,11 +39,11 @@ note: candidate #2 is defined in the trait `D`\n    |\n LL |     fn foo(&self) {}\n    |     ^^^^^^^^^^^^^\n-help: disambiguate the associated function for candidate #1\n+help: disambiguate the method for candidate #1\n    |\n LL |     C::foo(&a)\n    |     ~~~~~~~~~~\n-help: disambiguate the associated function for candidate #2\n+help: disambiguate the method for candidate #2\n    |\n LL |     D::foo(&a)\n    |     ~~~~~~~~~~\n@@ -64,11 +64,11 @@ note: candidate #2 is defined in the trait `F`\n    |\n LL |     fn foo(self) {}\n    |     ^^^^^^^^^^^^\n-help: disambiguate the associated function for candidate #1\n+help: disambiguate the method for candidate #1\n    |\n LL |     E::foo(a)\n    |     ~~~~~~~~~\n-help: disambiguate the associated function for candidate #2\n+help: disambiguate the method for candidate #2\n    |\n LL |     F::foo(a)\n    |     ~~~~~~~~~"}, {"sha": "e01e1edab5aa63f3eb2ebb771117c81a8c43f713", "filename": "tests/ui/span/issue-42234-unknown-receiver-type.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.full.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -15,7 +15,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-42234-unknown-receiver-type.rs:15:10\n    |\n LL |         .sum::<_>()\n-   |          ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n+   |          ^^^ cannot infer type of the type parameter `S` declared on the method `sum`\n    |\n help: consider specifying the generic argument\n    |"}, {"sha": "a4b652565740601640db333c818cdd059fead93d", "filename": "tests/ui/span/issue-42234-unknown-receiver-type.generic_arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.generic_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.generic_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.generic_arg.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -15,7 +15,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-42234-unknown-receiver-type.rs:15:10\n    |\n LL |         .sum::<_>()\n-   |          ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n+   |          ^^^ cannot infer type of the type parameter `S` declared on the method `sum`\n    |\n help: consider specifying the generic argument\n    |"}, {"sha": "ff89f775334156a8a9efb7e1de9c290f66088631", "filename": "tests/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -65,7 +65,7 @@ error[E0061]: this method takes 1 argument but 0 arguments were supplied\n LL |     S.baz();\n    |       ^^^-- an argument of type `()` is missing\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/missing-unit-argument.rs:6:8\n    |\n LL |     fn baz(self, (): ()) { }\n@@ -81,7 +81,7 @@ error[E0061]: this method takes 1 argument but 0 arguments were supplied\n LL |     S.generic::<()>();\n    |       ^^^^^^^^^^^^^-- an argument of type `()` is missing\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/missing-unit-argument.rs:7:8\n    |\n LL |     fn generic<T>(self, _: T) { }"}, {"sha": "65a90318a3c254ba53365d9cbfa36652993c22eb", "filename": "tests/ui/span/type-annotations-needed-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/type-annotations-needed-expr.rs:2:39\n    |\n LL |     let _ = (vec![1,2,3]).into_iter().sum() as f64;\n-   |                                       ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n+   |                                       ^^^ cannot infer type of the type parameter `S` declared on the method `sum`\n    |\n help: consider specifying the generic argument\n    |"}, {"sha": "211cb1584ad7b56f0e39241aad4ef600471d3e97", "filename": "tests/ui/suggestions/assoc-ct-for-assoc-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fassoc-ct-for-assoc-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fassoc-ct-for-assoc-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fassoc-ct-for-assoc-method.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -36,7 +36,7 @@ LL |     let y: i32 = i32::max - 42;\n    |                  |\n    |                  fn(i32, i32) -> i32 {<i32 as Ord>::max}\n    |\n-help: use parentheses to call this associated function\n+help: use parentheses to call this method\n    |\n LL |     let y: i32 = i32::max(/* i32 */, /* i32 */) - 42;\n    |                          ++++++++++++++++++++++"}, {"sha": "a137db8cdee667f58b8aa33eb3dcd6fb0e53342a", "filename": "tests/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -206,7 +206,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:41:20\n    |\n LL |     fn ban(&self) -> usize { 42 }\n-   |     ---------------------- associated function `ban` defined here\n+   |     ---------------------- method `ban` defined here\n ...\n LL |     let _: usize = X::ban;\n    |            -----   ^^^^^^ expected `usize`, found fn item\n@@ -215,7 +215,7 @@ LL |     let _: usize = X::ban;\n    |\n    = note: expected type `usize`\n            found fn item `for<'a> fn(&'a X) -> usize {<X as T>::ban}`\n-help: use parentheses to call this associated function\n+help: use parentheses to call this method\n    |\n LL |     let _: usize = X::ban(/* &X */);\n    |                          ++++++++++\n@@ -224,7 +224,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:42:20\n    |\n LL |     fn bal(&self) -> usize;\n-   |     ----------------------- associated function `bal` defined here\n+   |     ----------------------- method `bal` defined here\n ...\n LL |     let _: usize = X::bal;\n    |            -----   ^^^^^^ expected `usize`, found fn item\n@@ -233,7 +233,7 @@ LL |     let _: usize = X::bal;\n    |\n    = note: expected type `usize`\n            found fn item `for<'a> fn(&'a X) -> usize {<X as T>::bal}`\n-help: use parentheses to call this associated function\n+help: use parentheses to call this method\n    |\n LL |     let _: usize = X::bal(/* &X */);\n    |                          ++++++++++"}, {"sha": "53b1e88573776c82a6b8a4b37740ad3a2198baa2", "filename": "tests/ui/suggestions/issue-101421.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fissue-101421.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fissue-101421.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-101421.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -8,5 +8,5 @@ impl Ice for () {\n \n fn main() {\n     ().f::<()>(());\n-    //~^ ERROR this associated function takes 0 generic arguments but 1 generic argument was supplied\n+    //~^ ERROR this method takes 0 generic arguments but 1 generic argument was supplied\n }"}, {"sha": "8362f02bbe434054eaec585446aa4d514f84187f", "filename": "tests/ui/suggestions/issue-101421.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fissue-101421.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fissue-101421.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-101421.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,12 +1,12 @@\n-error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-101421.rs:10:8\n    |\n LL |     ().f::<()>(());\n    |        ^------ help: remove these generics\n    |        |\n    |        expected 0 generic arguments\n    |\n-note: associated function defined here, with 0 generic parameters\n+note: method defined here, with 0 generic parameters\n   --> $DIR/issue-101421.rs:2:8\n    |\n LL |     fn f(&self, _: ());"}, {"sha": "752282e065d3d7d407a0a6abd49f0602d9e199d4", "filename": "tests/ui/suggestions/issue-104287.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fissue-104287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fissue-104287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-104287.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -8,6 +8,6 @@ impl S {\n fn main() {\n     let x = S;\n     foo::<()>(x);\n-    //~^ ERROR this associated function takes 0 generic arguments but 1 generic argument was supplied\n+    //~^ ERROR this method takes 0 generic arguments but 1 generic argument was supplied\n     //~| ERROR cannot find function `foo` in this scope\n }"}, {"sha": "d363601e9523443b6c9c6273ce33321d3ab29a3a", "filename": "tests/ui/suggestions/issue-104287.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fissue-104287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fissue-104287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-104287.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,12 +1,12 @@\n-error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-104287.rs:10:5\n    |\n LL |     foo::<()>(x);\n    |     ^^^------ help: remove these generics\n    |     |\n    |     expected 0 generic arguments\n    |\n-note: associated function defined here, with 0 generic parameters\n+note: method defined here, with 0 generic parameters\n   --> $DIR/issue-104287.rs:6:8\n    |\n LL |     fn foo(&self) {}"}, {"sha": "b238c1804ee919e054a3cd2e849af2b88c46694a", "filename": "tests/ui/suggestions/issue-89064.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fissue-89064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fissue-89064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-89064.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -56,7 +56,7 @@ note: associated function defined here, with 0 generic parameters\n LL |     fn foo() {}\n    |        ^^^\n \n-error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-89064.rs:31:16\n    |\n LL |     let _ = 42.into::<Option<_>>();"}, {"sha": "5e1f9361b3929f53f5a9db009dd8fe988e98be19", "filename": "tests/ui/suggestions/move-generic-to-trait-in-method-with-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -12,7 +12,7 @@ impl Foo<i32> for i32 {\n \n fn main() {\n     1.bar::<i32>(0);\n-    //~^ ERROR this associated function takes 0 generic arguments but 1 generic argument was supplied\n+    //~^ ERROR this method takes 0 generic arguments but 1 generic argument was supplied\n     //~| HELP consider moving this generic argument to the `Foo` trait, which takes up to 1 argument\n     //~| HELP remove these generics\n }"}, {"sha": "8ebff75c135730bf3ccd4ed97d74e42f7038de3d", "filename": "tests/ui/suggestions/move-generic-to-trait-in-method-with-params.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmove-generic-to-trait-in-method-with-params.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,10 +1,10 @@\n-error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/move-generic-to-trait-in-method-with-params.rs:14:7\n    |\n LL |     1.bar::<i32>(0);\n    |       ^^^ expected 0 generic arguments\n    |\n-note: associated function defined here, with 0 generic parameters\n+note: method defined here, with 0 generic parameters\n   --> $DIR/move-generic-to-trait-in-method-with-params.rs:4:8\n    |\n LL |     fn bar(&self, _: T);"}, {"sha": "09553b93c45ef1c0e87d0433d89be73ede86f019", "filename": "tests/ui/suggestions/sugg-else-for-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -15,7 +15,7 @@ LL |     let _s = y.unwrap_or(|| x.split('.').nth(1).unwrap());\n    |              ^^^^^^^^^^^^-------------------------------^\n    |                          |\n    |                          this argument influences the return type of `unwrap_or`\n-note: associated function defined here\n+note: method defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n help: try calling `unwrap_or_else` instead\n    |"}, {"sha": "7deb9a4342d922793fe367ffaec7911ae0a4f2a3", "filename": "tests/ui/suggestions/trait-with-missing-associated-type-restriction.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -90,7 +90,7 @@ LL |     fn func(&self) -> Self::A;\n LL |     fn funk(&self, _: Self::A);\n LL |     fn funq(&self) -> Self::A {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ consider calling `Trait::funq`\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/trait-with-missing-associated-type-restriction.rs:9:8\n    |\n LL |     fn funk(&self, _: Self::A);"}, {"sha": "203bdc526f6ddf338052c00ad0a81b5edcf7b7ac", "filename": "tests/ui/traits/alias/ambiguous.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Falias%2Fambiguous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Falias%2Fambiguous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Falias%2Fambiguous.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in an impl of the trait `B` for the type `u8`\n    |\n LL |         fn foo(&self) {}\n    |         ^^^^^^^^^^^^^\n-help: disambiguate the associated function for candidate #1\n+help: disambiguate the method for candidate #1\n    |\n LL |     A::foo(&t);\n    |     ~~~~~~~~~~\n-help: disambiguate the associated function for candidate #2\n+help: disambiguate the method for candidate #2\n    |\n LL |     B::foo(&t);\n    |     ~~~~~~~~~~"}, {"sha": "db807a38830ab333879eb6712508c31c177ca5ba", "filename": "tests/ui/traits/issue-52893.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Fissue-52893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Fissue-52893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-52893.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -18,7 +18,7 @@ LL |         builder.push(output);\n    |         ^^^^^^^^^^^^^------^\n    |                      |\n    |                      this argument influences the return type of `push`\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/issue-52893.rs:11:8\n    |\n LL |     fn push(self, other: T) -> Self::PushRes;"}, {"sha": "a397b0accc8898c5972b72b1f7cccbdffaf2c934", "filename": "tests/ui/traits/issue-77982.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-77982.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -4,7 +4,7 @@ error[E0283]: type annotations needed\n LL |     opts.get(opt.as_ref());\n    |          ^^^ ------------ type must be known at this point\n    |          |\n-   |          cannot infer type of the type parameter `Q` declared on the associated function `get`\n+   |          cannot infer type of the type parameter `Q` declared on the method `get`\n    |\n    = note: multiple `impl`s satisfying `String: Borrow<_>` found in the following crates: `alloc`, `core`:\n            - impl Borrow<str> for String;\n@@ -23,7 +23,7 @@ error[E0283]: type annotations needed\n LL |     opts.get(opt.as_ref());\n    |          ^^^     ------ type must be known at this point\n    |          |\n-   |          cannot infer type of the type parameter `Q` declared on the associated function `get`\n+   |          cannot infer type of the type parameter `Q` declared on the method `get`\n    |\n    = note: multiple `impl`s satisfying `String: AsRef<_>` found in the following crates: `alloc`, `std`:\n            - impl AsRef<OsStr> for String;"}, {"sha": "a3e1a22e7a83d4d16a4c45d9910bb04b4baef8ce", "filename": "tests/ui/traits/item-privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Fitem-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Fitem-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fitem-privacy.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -69,7 +69,7 @@ fn check_method() {\n     S.c(); // OK\n     // a, b, c are resolved as inherent items, their traits don't need to be in scope\n     let c = &S as &dyn C;\n-    c.a(); //~ ERROR associated function `a` is private\n+    c.a(); //~ ERROR method `a` is private\n     c.b(); // OK\n     c.c(); // OK\n \n@@ -81,7 +81,7 @@ fn check_method() {\n     //~^ ERROR no function or associated item named `b` found\n     S::c(&S); // OK\n     // a, b, c are resolved as inherent items, their traits don't need to be in scope\n-    <dyn C>::a(&S); //~ ERROR associated function `a` is private\n+    <dyn C>::a(&S); //~ ERROR method `a` is private\n     <dyn C>::b(&S); // OK\n     C::c(&S); // OK\n }"}, {"sha": "04995b3a17b292b4cc6e094789be0e49cf68c3b2", "filename": "tests/ui/traits/item-privacy.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Fitem-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Fitem-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fitem-privacy.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -32,14 +32,14 @@ help: the following trait is implemented but not in scope; perhaps add a `use` f\n LL | use method::B;\n    |\n \n-error[E0624]: associated function `a` is private\n+error[E0624]: method `a` is private\n   --> $DIR/item-privacy.rs:72:7\n    |\n LL |         fn a(&self) { }\n-   |         ----------- private associated function defined here\n+   |         ----------- private method defined here\n ...\n LL |     c.a();\n-   |       ^ private associated function\n+   |       ^ private method\n \n error[E0599]: no function or associated item named `a` found for struct `S` in the current scope\n   --> $DIR/item-privacy.rs:78:8\n@@ -72,14 +72,14 @@ help: the following trait is implemented but not in scope; perhaps add a `use` f\n LL | use method::B;\n    |\n \n-error[E0624]: associated function `a` is private\n+error[E0624]: method `a` is private\n   --> $DIR/item-privacy.rs:84:14\n    |\n LL |         fn a(&self) { }\n-   |         ----------- private associated function defined here\n+   |         ----------- private method defined here\n ...\n LL |     <dyn C>::a(&S);\n-   |              ^ private associated function\n+   |              ^ private method\n \n error[E0599]: no associated item named `A` found for struct `S` in the current scope\n   --> $DIR/item-privacy.rs:97:8"}, {"sha": "55656f21e00ca841522f6b8e4b7cafc29d984ffa", "filename": "tests/ui/traits/method-private.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Fmethod-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Fmethod-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fmethod-private.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,11 +1,11 @@\n-error[E0624]: associated function `method` is private\n+error[E0624]: method `method` is private\n   --> $DIR/method-private.rs:19:9\n    |\n LL |         fn method(&self) {}\n-   |         ---------------- private associated function defined here\n+   |         ---------------- private method defined here\n ...\n LL |     foo.method();\n-   |         ^^^^^^ private associated function\n+   |         ^^^^^^ private method\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:"}, {"sha": "3fb0cec6a3b77cd9117ecd635c0dff56cd353155", "filename": "tests/ui/traits/test-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Ftest-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Ftest-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftest-2.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -7,9 +7,9 @@ impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n \n fn main() {\n     10.dup::<i32>();\n-    //~^ ERROR this associated function takes 0 generic arguments but 1\n+    //~^ ERROR this method takes 0 generic arguments but 1\n     10.blah::<i32, i32>();\n-    //~^ ERROR this associated function takes 1 generic argument but 2\n+    //~^ ERROR this method takes 1 generic argument but 2\n     (Box::new(10) as Box<dyn bar>).dup();\n     //~^ ERROR E0038\n     //~| ERROR E0038"}, {"sha": "2219ba9c333932e9186d7604148234ae4e72dd04", "filename": "tests/ui/traits/test-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Ftest-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftraits%2Ftest-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftest-2.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,26 +1,26 @@\n-error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/test-2.rs:9:8\n    |\n LL |     10.dup::<i32>();\n    |        ^^^------- help: remove these generics\n    |        |\n    |        expected 0 generic arguments\n    |\n-note: associated function defined here, with 0 generic parameters\n+note: method defined here, with 0 generic parameters\n   --> $DIR/test-2.rs:4:16\n    |\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |                ^^^\n \n-error[E0107]: this associated function takes 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: this method takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/test-2.rs:11:8\n    |\n LL |     10.blah::<i32, i32>();\n    |        ^^^^        --- help: remove this generic argument\n    |        |\n    |        expected 1 generic argument\n    |\n-note: associated function defined here, with 1 generic parameter: `X`\n+note: method defined here, with 1 generic parameter: `X`\n   --> $DIR/test-2.rs:4:39\n    |\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }"}, {"sha": "8b9dac6e291e23500172ec2afe79130944b22806", "filename": "tests/ui/tuple/wrong_argument_ice-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -11,7 +11,7 @@ LL |         groups.push(new_group, vec![process]);\n    |                     ^^^^^^^^^\n    = note: expected tuple `(Vec<String>, Vec<Process>)`\n              found struct `Vec<String>`\n-note: associated function defined here\n+note: method defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n help: remove the extra argument\n    |"}, {"sha": "213ca8f885cf27ac6051cea31bc17e5a75832935", "filename": "tests/ui/tuple/wrong_argument_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftuple%2Fwrong_argument_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftuple%2Fwrong_argument_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftuple%2Fwrong_argument_ice.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -4,7 +4,7 @@ error[E0061]: method takes 1 argument but 2 arguments were supplied\n LL |         self.acc.push_back(self.current_provides, self.current_requires);\n    |                  ^^^^^^^^^\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $SRC_DIR/alloc/src/collections/vec_deque/mod.rs:LL:COL\n help: wrap these arguments in parentheses to construct a tuple\n    |"}, {"sha": "de7b4b248996ab9e9638ae6c49100786f96963bc", "filename": "tests/ui/type-inference/sort_by_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftype-inference%2Fsort_by_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftype-inference%2Fsort_by_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-inference%2Fsort_by_key.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/sort_by_key.rs:3:40\n    |\n LL |     lst.sort_by_key(|&(v, _)| v.iter().sum());\n-   |                                        ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n+   |                                        ^^^ cannot infer type of the type parameter `S` declared on the method `sum`\n    |\n help: consider specifying the generic argument\n    |"}, {"sha": "edd4adf8bd256d6b69b501b0abd875a1fbc3d95f", "filename": "tests/ui/type/type-check/point-at-inference-3.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-3.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-3.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-3.fixed?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -7,6 +7,6 @@ fn main() {\n     v.push(1i32); //~ ERROR mismatched types\n     //~^ NOTE expected `i32`, found `u32`\n     //~| NOTE arguments to this method are incorrect\n-    //~| NOTE associated function defined here\n+    //~| NOTE method defined here\n     //~| HELP change the type of the numeric literal from `u32` to `i32`\n }"}, {"sha": "49d7b50075bbcc4f995726b0b723843cb51a4bde", "filename": "tests/ui/type/type-check/point-at-inference-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-3.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -7,6 +7,6 @@ fn main() {\n     v.push(1u32); //~ ERROR mismatched types\n     //~^ NOTE expected `i32`, found `u32`\n     //~| NOTE arguments to this method are incorrect\n-    //~| NOTE associated function defined here\n+    //~| NOTE method defined here\n     //~| HELP change the type of the numeric literal from `u32` to `i32`\n }"}, {"sha": "2c4907ed263ba07bf5cde97fd30b39a46adba235", "filename": "tests/ui/type/type-check/point-at-inference-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-3.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -9,7 +9,7 @@ LL |     v.push(1u32);\n    |       |\n    |       arguments to this method are incorrect\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n help: change the type of the numeric literal from `u32` to `i32`\n    |"}, {"sha": "aea9b2c6c14eeeeeb4f927fb5ac286b3f3f1c457", "filename": "tests/ui/type/type-check/point-at-inference-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -2,7 +2,7 @@ struct S<A, B>(Option<(A, B)>);\n \n impl<A, B> S<A, B> {\n     fn infer(&self, a: A, b: B) {}\n-    //~^ NOTE associated function defined here\n+    //~^ NOTE method defined here\n     //~| NOTE\n     //~| NOTE\n }"}, {"sha": "28833d2ed1c922501639bdb337d95e0430a3fa33", "filename": "tests/ui/type/type-check/point-at-inference-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-4.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -4,7 +4,7 @@ error[E0061]: this method takes 2 arguments but 1 argument was supplied\n LL |     s.infer(0i32);\n    |       ^^^^^------ an argument is missing\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/point-at-inference-4.rs:4:8\n    |\n LL |     fn infer(&self, a: A, b: B) {}"}, {"sha": "fbe6bfeebb149b3ed5f247ff5d7ef2eee120473c", "filename": "tests/ui/type/wrong-call-return-type-due-to-generic-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftype%2Fwrong-call-return-type-due-to-generic-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftype%2Fwrong-call-return-type-due-to-generic-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fwrong-call-return-type-due-to-generic-arg.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -95,7 +95,7 @@ LL |     let x: u16 = (S {}).method(0u32);\n    |                  ^^^^^^^^^^^^^^----^\n    |                                |\n    |                                this argument influences the return type of `method`\n-note: associated function defined here\n+note: method defined here\n   --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:7:8\n    |\n LL |     fn method<T>(&self, x: T) -> T {"}, {"sha": "ae46050c91be2efe32b151b16cbf1e931881c64a", "filename": "tests/ui/typeck/bad-type-in-vec-push.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftypeck%2Fbad-type-in-vec-push.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftypeck%2Fbad-type-in-vec-push.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fbad-type-in-vec-push.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -10,7 +10,7 @@ LL |     result.push(vector);\n    |\n    = note: expected type `{integer}`\n             found struct `Vec<_>`\n-note: associated function defined here\n+note: method defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n \n error[E0308]: mismatched types\n@@ -21,7 +21,7 @@ LL |     x.push(\"\");\n    |       |\n    |       arguments to this method are incorrect\n    |\n-note: associated function defined here\n+note: method defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n \n error: aborting due to 2 previous errors"}, {"sha": "3d2d53f5c76ce08b445ea9349f57ad8d4b478085", "filename": "tests/ui/typeck/issue-84768.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftypeck%2Fissue-84768.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Ftypeck%2Fissue-84768.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-84768.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -21,7 +21,7 @@ LL |     <F as FnOnce(&mut u8)>::call_once(f, 1)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^\n    |                                          |\n    |                                          this argument influences the return type of `FnOnce`\n-note: associated function defined here\n+note: method defined here\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n \n error: aborting due to 2 previous errors"}, {"sha": "a110bec4c0f35123c6d695e9a87bd4796b670486", "filename": "tests/ui/ufcs/ufcs-qpath-missing-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fufcs%2Fufcs-qpath-missing-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fufcs%2Fufcs-qpath-missing-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fufcs%2Fufcs-qpath-missing-params.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -15,6 +15,6 @@ fn main() {\n       //~^ ERROR missing generics for\n \n     <String as IntoCow>::into_cow::<str>(\"foo\".to_string());\n-    //~^ ERROR this associated function takes 0 generic arguments but 1\n+    //~^ ERROR this method takes 0 generic arguments but 1\n     //~| ERROR missing generics for\n }"}, {"sha": "ace1c36d67457c13698bba86c0d0e67a73f34681", "filename": "tests/ui/ufcs/ufcs-qpath-missing-params.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fufcs%2Fufcs-qpath-missing-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fufcs%2Fufcs-qpath-missing-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fufcs%2Fufcs-qpath-missing-params.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -30,15 +30,15 @@ help: add missing generic argument\n LL |     <String as IntoCow<B>>::into_cow::<str>(\"foo\".to_string());\n    |                       +++\n \n-error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+error[E0107]: this method takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/ufcs-qpath-missing-params.rs:17:26\n    |\n LL |     <String as IntoCow>::into_cow::<str>(\"foo\".to_string());\n    |                          ^^^^^^^^------- help: remove these generics\n    |                          |\n    |                          expected 0 generic arguments\n    |\n-note: associated function defined here, with 0 generic parameters\n+note: method defined here, with 0 generic parameters\n   --> $DIR/ufcs-qpath-missing-params.rs:4:8\n    |\n LL |     fn into_cow(self) -> Cow<'a, B>;"}, {"sha": "96ac4321689f38d5689e92d4557acb42c64cfc0b", "filename": "tests/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -28,7 +28,7 @@ LL |     <i32 as Add<i32>>::add(1u32, 2);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^----^^^^\n    |                            |\n    |                            this argument influences the return type of `Add`\n-note: associated function defined here\n+note: method defined here\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n@@ -50,7 +50,7 @@ LL |     <i32 as Add<i32>>::add(1, 2u32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^----^\n    |                               |\n    |                               this argument influences the return type of `Add`\n-note: associated function defined here\n+note: method defined here\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n help: change the type of the numeric literal from `u32` to `i32`\n    |"}, {"sha": "f11b251082bf2ed8abea4cb1c5260ea8fd474edb", "filename": "tests/ui/xc-private-method2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fxc-private-method2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fxc-private-method2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fxc-private-method2.rs?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -4,8 +4,8 @@ extern crate xc_private_method_lib;\n \n fn main() {\n     let _ = xc_private_method_lib::Struct{ x: 10 }.meth_struct();\n-    //~^ ERROR associated function `meth_struct` is private\n+    //~^ ERROR method `meth_struct` is private\n \n     let _ = xc_private_method_lib::Enum::Variant1(20).meth_enum();\n-    //~^ ERROR associated function `meth_enum` is private\n+    //~^ ERROR method `meth_enum` is private\n }"}, {"sha": "af0c3cfcb2c88f40d18acdcf7fcac92b37ecaf86", "filename": "tests/ui/xc-private-method2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fxc-private-method2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f374128ee3924514aacadf96479e17fee8f9903/tests%2Fui%2Fxc-private-method2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fxc-private-method2.stderr?ref=3f374128ee3924514aacadf96479e17fee8f9903", "patch": "@@ -1,24 +1,24 @@\n-error[E0624]: associated function `meth_struct` is private\n+error[E0624]: method `meth_struct` is private\n   --> $DIR/xc-private-method2.rs:6:52\n    |\n LL |     let _ = xc_private_method_lib::Struct{ x: 10 }.meth_struct();\n-   |                                                    ^^^^^^^^^^^ private associated function\n+   |                                                    ^^^^^^^^^^^ private method\n    |\n   ::: $DIR/auxiliary/xc-private-method-lib.rs:12:5\n    |\n LL |     fn meth_struct(&self) -> isize {\n-   |     ------------------------------ private associated function defined here\n+   |     ------------------------------ private method defined here\n \n-error[E0624]: associated function `meth_enum` is private\n+error[E0624]: method `meth_enum` is private\n   --> $DIR/xc-private-method2.rs:9:55\n    |\n LL |     let _ = xc_private_method_lib::Enum::Variant1(20).meth_enum();\n-   |                                                       ^^^^^^^^^ private associated function\n+   |                                                       ^^^^^^^^^ private method\n    |\n   ::: $DIR/auxiliary/xc-private-method-lib.rs:27:5\n    |\n LL |     fn meth_enum(&self) -> isize {\n-   |     ---------------------------- private associated function defined here\n+   |     ---------------------------- private method defined here\n \n error: aborting due to 2 previous errors\n "}]}