{"sha": "b9478ee251d5fcb0ff003b5a4c62c50788b087f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NDc4ZWUyNTFkNWZjYjBmZjAwM2I1YTRjNjJjNTA3ODhiMDg3ZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-29T05:13:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-29T05:13:08Z"}, "message": "auto merge of #17321 : apoelstra/rust/error-on-unknown-impl, r=alexcrichton\n\nFollowup to RFC 57.\r\n\r\nFixes #7607\r\nFixes #8767\r\nFixes #12729\r\nFixes #15060", "tree": {"sha": "67267e2555858ac58dc74b7effb830d4bbb3f3ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67267e2555858ac58dc74b7effb830d4bbb3f3ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9478ee251d5fcb0ff003b5a4c62c50788b087f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9478ee251d5fcb0ff003b5a4c62c50788b087f1", "html_url": "https://github.com/rust-lang/rust/commit/b9478ee251d5fcb0ff003b5a4c62c50788b087f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9478ee251d5fcb0ff003b5a4c62c50788b087f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "496b68d485698ae230be5a06aadf5fbbbcc0fd83", "url": "https://api.github.com/repos/rust-lang/rust/commits/496b68d485698ae230be5a06aadf5fbbbcc0fd83", "html_url": "https://github.com/rust-lang/rust/commit/496b68d485698ae230be5a06aadf5fbbbcc0fd83"}, {"sha": "bb5807919a4b26ba017d2e2f14f2cc9b3d87a278", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb5807919a4b26ba017d2e2f14f2cc9b3d87a278", "html_url": "https://github.com/rust-lang/rust/commit/bb5807919a4b26ba017d2e2f14f2cc9b3d87a278"}], "stats": {"total": 175, "additions": 163, "deletions": 12}, "files": [{"sha": "5f0750d2653a17a469603cd787ae533128a781a9", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 71, "deletions": 10, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/b9478ee251d5fcb0ff003b5a4c62c50788b087f1/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9478ee251d5fcb0ff003b5a4c62c50788b087f1/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=b9478ee251d5fcb0ff003b5a4c62c50788b087f1", "patch": "@@ -2945,16 +2945,53 @@ impl<'a> Resolver<'a> {\n                 match *name_bindings.type_def.borrow() {\n                     None => {}\n                     Some(ref ty) => {\n-                        let msg = format!(\"import `{}` conflicts with type in \\\n-                                           this module\",\n-                                          token::get_name(name).get());\n-                        self.session.span_err(import_span, msg.as_slice());\n-                        match ty.type_span {\n-                            None => {}\n-                            Some(span) => {\n-                                self.session\n-                                    .span_note(span,\n-                                               \"conflicting type here\")\n+                        match ty.module_def {\n+                            None => {\n+                                let msg = format!(\"import `{}` conflicts with type in \\\n+                                                   this module\",\n+                                                  token::get_name(name).get());\n+                                self.session.span_err(import_span, msg.as_slice());\n+                                match ty.type_span {\n+                                    None => {}\n+                                    Some(span) => {\n+                                        self.session\n+                                            .span_note(span,\n+                                                       \"note conflicting type here\")\n+                                    }\n+                                }\n+                            }\n+                            Some(ref module_def) => {\n+                                match module_def.kind.get() {\n+                                    ImplModuleKind => {\n+                                        match ty.type_span {\n+                                            None => { /* this can't ever happen */ }\n+                                            Some(span) => {\n+                                                let msg = format!(\"inherent implementations \\\n+                                                                   are only allowed on types \\\n+                                                                   defined in the current module\");\n+                                                self.session\n+                                                    .span_err(span, msg.as_slice());\n+                                                self.session\n+                                                    .span_note(import_span,\n+                                                               \"import from other module here\")\n+                                            }\n+                                        }\n+                                    }\n+                                    _ => {\n+                                        let msg = format!(\"import `{}` conflicts with existing \\\n+                                                           submodule\",\n+                                                          token::get_name(name).get());\n+                                        self.session.span_err(import_span, msg.as_slice());\n+                                        match ty.type_span {\n+                                            None => {}\n+                                            Some(span) => {\n+                                                self.session\n+                                                    .span_note(span,\n+                                                               \"note conflicting module here\")\n+                                            }\n+                                        }\n+                                    }\n+                                }\n                             }\n                         }\n                     }\n@@ -4610,6 +4647,30 @@ impl<'a> Resolver<'a> {\n                 });\n             });\n         });\n+\n+        // Check that the current type is indeed a type, if we have an anonymous impl\n+        if opt_trait_reference.is_none() {\n+            match self_type.node {\n+                // TyPath is the only thing that we handled in `build_reduced_graph_for_item`,\n+                // where we created a module with the name of the type in order to implement\n+                // an anonymous trait. In the case that the path does not resolve to an actual\n+                // type, the result will be that the type name resolves to a module but not\n+                // a type (shadowing any imported modules or types with this name), leading\n+                // to weird user-visible bugs. So we ward this off here. See #15060.\n+                TyPath(ref path, _, path_id) => {\n+                    match self.def_map.borrow().find(&path_id) {\n+                        // FIXME: should we catch other options and give more precise errors?\n+                        Some(&DefMod(_)) => {\n+                            self.resolve_error(path.span, \"inherent implementations are not \\\n+                                                           allowed for types not defined in \\\n+                                                           the current module.\");\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+                _ => { }\n+            }\n+        }\n     }\n \n     fn check_trait_item(&self, ident: Ident, span: Span) {"}, {"sha": "ae033bbf38d14fec8a6204bccee8efe65d507e86", "filename": "src/test/compile-fail/issue-12729.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b9478ee251d5fcb0ff003b5a4c62c50788b087f1/src%2Ftest%2Fcompile-fail%2Fissue-12729.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9478ee251d5fcb0ff003b5a4c62c50788b087f1/src%2Ftest%2Fcompile-fail%2Fissue-12729.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12729.rs?ref=b9478ee251d5fcb0ff003b5a4c62c50788b087f1", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+pub struct Foo;\n+\n+mod bar {\n+    use Foo;\n+\n+    impl Foo { //~ERROR inherent implementations are only allowed on types defined in the current module\n+        fn baz(&self) {}\n+    }\n+}\n+fn main() {}\n+"}, {"sha": "37878084f0353d8f1285b334b5e03b0c87c40f44", "filename": "src/test/compile-fail/issue-7607-1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b9478ee251d5fcb0ff003b5a4c62c50788b087f1/src%2Ftest%2Fcompile-fail%2Fissue-7607-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9478ee251d5fcb0ff003b5a4c62c50788b087f1/src%2Ftest%2Fcompile-fail%2Fissue-7607-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7607-1.rs?ref=b9478ee251d5fcb0ff003b5a4c62c50788b087f1", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+struct Foo {\n+    x: int\n+}\n+\n+impl Fo { //~ERROR inherent implementations are not allowed for types not defined in the current module.\n+    fn foo() {}\n+}\n+\n+fn main() {}\n+"}, {"sha": "8a7022a9a32c350129554979d1cc2e4644278975", "filename": "src/test/compile-fail/issue-7607-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b9478ee251d5fcb0ff003b5a4c62c50788b087f1/src%2Ftest%2Fcompile-fail%2Fissue-7607-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9478ee251d5fcb0ff003b5a4c62c50788b087f1/src%2Ftest%2Fcompile-fail%2Fissue-7607-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7607-2.rs?ref=b9478ee251d5fcb0ff003b5a4c62c50788b087f1", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+pub mod a {\n+    pub struct Foo { a: uint }\n+}\n+\n+pub mod b {\n+    use a::Foo;\n+    impl Foo { //~ERROR inherent implementations are only allowed on types defined in the current module\n+        fn bar(&self) { }\n+    }\n+}\n+\n+pub fn main() { }\n+\n+"}, {"sha": "c6bb460382c88cf252cf4face714706685b8f390", "filename": "src/test/compile-fail/issue-8767.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b9478ee251d5fcb0ff003b5a4c62c50788b087f1/src%2Ftest%2Fcompile-fail%2Fissue-8767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9478ee251d5fcb0ff003b5a4c62c50788b087f1/src%2Ftest%2Fcompile-fail%2Fissue-8767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8767.rs?ref=b9478ee251d5fcb0ff003b5a4c62c50788b087f1", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+impl B { //~ERROR inherent implementations are not allowed for types not defined in the current module.\n+}\n+\n+fn main() {\n+}\n+"}, {"sha": "c4b4d19728362510504eacf7ff6c91f6f13579c8", "filename": "src/test/compile-fail/trait-or-new-type-instead.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b9478ee251d5fcb0ff003b5a4c62c50788b087f1/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9478ee251d5fcb0ff003b5a4c62c50788b087f1/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-or-new-type-instead.rs?ref=b9478ee251d5fcb0ff003b5a4c62c50788b087f1", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME(#8767) bad error message; Option is not a module\n-impl<T> Option<T> { //~ERROR found module name used as a type\n+// ignore-tidy-linelength\n+\n+impl<T> Option<T> { //~ERROR inherent implementations are not allowed for types not defined in the current module.\n     pub fn foo(&self) { }\n }\n "}]}