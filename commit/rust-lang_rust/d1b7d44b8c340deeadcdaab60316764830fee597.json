{"sha": "d1b7d44b8c340deeadcdaab60316764830fee597", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYjdkNDRiOGMzNDBkZWVhZGNkYWFiNjAzMTY3NjQ4MzBmZWU1OTc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-07T16:17:03Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-09T16:55:37Z"}, "message": "core: inline all vec methods and add whitespace", "tree": {"sha": "e0417230b88714001daa3ad9d5489959aabc80b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0417230b88714001daa3ad9d5489959aabc80b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1b7d44b8c340deeadcdaab60316764830fee597", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1b7d44b8c340deeadcdaab60316764830fee597", "html_url": "https://github.com/rust-lang/rust/commit/d1b7d44b8c340deeadcdaab60316764830fee597", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1b7d44b8c340deeadcdaab60316764830fee597/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93c2ebf9944274ca9d1e97589a992ff52c04f07d", "url": "https://api.github.com/repos/rust-lang/rust/commits/93c2ebf9944274ca9d1e97589a992ff52c04f07d", "html_url": "https://github.com/rust-lang/rust/commit/93c2ebf9944274ca9d1e97589a992ff52c04f07d"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "8cfbad4ec6ba229588b591b89593b03bdf7e7f14", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d1b7d44b8c340deeadcdaab60316764830fee597/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b7d44b8c340deeadcdaab60316764830fee597/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=d1b7d44b8c340deeadcdaab60316764830fee597", "patch": "@@ -1570,15 +1570,19 @@ impl<T: Copy> &[const T]: CopyableVector<T> {\n     /// Returns the first element of a vector\n     #[inline]\n     pure fn head() -> T { head(self) }\n+\n     /// Returns all but the last elemnt of a vector\n     #[inline]\n     pure fn init() -> ~[T] { init(self) }\n+\n     /// Returns the last element of a `v`, failing if the vector is empty.\n     #[inline]\n     pure fn last() -> T { last(self) }\n+\n     /// Returns a copy of the elements from [`start`..`end`) from `v`.\n     #[inline]\n     pure fn slice(start: uint, end: uint) -> ~[T] { slice(self, start, end) }\n+\n     /// Returns all but the first element of a vector\n     #[inline]\n     pure fn tail() -> ~[T] { tail(self) }\n@@ -1605,17 +1609,21 @@ pub trait ImmutableEqVector<T: Eq> {\n /// Extension methods for vectors\n impl<T> &[T]: ImmutableVector<T> {\n     /// Return a slice that points into another slice.\n+    #[inline]\n     pure fn view(start: uint, end: uint) -> &self/[T] {\n         view(self, start, end)\n     }\n+\n     /// Reduce a vector from right to left\n     #[inline]\n     pure fn foldr<U: Copy>(z: U, p: fn(t: &T, u: U) -> U) -> U {\n         foldr(self, z, p)\n     }\n+\n     /// Apply a function to each element of a vector and return the results\n     #[inline]\n     pure fn map<U>(f: fn(t: &T) -> U) -> ~[U] { map(self, f) }\n+\n     /**\n      * Apply a function to the index and value of each element in the vector\n      * and return the results\n@@ -1757,66 +1765,82 @@ trait MutableEqVector<T: Eq> {\n }\n \n impl<T> ~[T]: MutableVector<T> {\n+    #[inline]\n     fn push(&mut self, t: T) {\n         push(self, t);\n     }\n \n+    #[inline]\n     fn push_all_move(&mut self, rhs: ~[T]) {\n         push_all_move(self, rhs);\n     }\n \n+    #[inline]\n     fn pop(&mut self) -> T {\n         pop(self)\n     }\n \n+    #[inline]\n     fn shift(&mut self) -> T {\n         shift(self)\n     }\n \n+    #[inline]\n     fn unshift(&mut self, x: T) {\n         unshift(self, x)\n     }\n \n+    #[inline]\n     fn insert(&mut self, i: uint, x:T) {\n         insert(self, i, x)\n     }\n \n+    #[inline]\n     fn remove(&mut self, i: uint) -> T {\n         remove(self, i)\n     }\n \n+    #[inline]\n     fn swap_remove(&mut self, index: uint) -> T {\n         swap_remove(self, index)\n     }\n \n+    #[inline]\n     fn truncate(&mut self, newlen: uint) {\n         truncate(self, newlen);\n     }\n \n+    #[inline]\n     fn retain(&mut self, f: pure fn(t: &T) -> bool) {\n         retain(self, f);\n     }\n+\n }\n \n impl<T: Copy> ~[T]: MutableCopyableVector<T> {\n+    #[inline]\n     fn push_all(&mut self, rhs: &[const T]) {\n         push_all(self, rhs);\n     }\n \n+    #[inline]\n     fn grow(&mut self, n: uint, initval: &T) {\n         grow(self, n, initval);\n     }\n \n+    #[inline]\n     fn grow_fn(&mut self, n: uint, op: iter::InitOp<T>) {\n         grow_fn(self, n, op);\n     }\n \n+    #[inline]\n     fn grow_set(&mut self, index: uint, initval: &T, val: T) {\n         grow_set(self, index, initval, val);\n     }\n }\n \n impl<T: Eq> ~[T]: MutableEqVector<T> {\n+    #[inline]\n     fn dedup(&mut self) {\n         dedup(self)\n     }"}]}