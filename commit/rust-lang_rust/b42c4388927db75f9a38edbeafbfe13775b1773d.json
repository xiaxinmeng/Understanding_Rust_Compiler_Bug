{"sha": "b42c4388927db75f9a38edbeafbfe13775b1773d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MmM0Mzg4OTI3ZGI3NWY5YTM4ZWRiZWFmYmZlMTM3NzViMTc3M2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-26T07:02:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-26T07:02:29Z"}, "message": "auto merge of #10631 : klutzy/rust/win-fixes, r=alexcrichton\n\nThis patchset fixes some parts broken on Win64.\r\n\r\nThis also adds `--disable-pthreads` flags to llvm on mingw-w64 archs (both 32-bit and 64-bit, not mingw) due to bad performance. See #8996 for discussion.", "tree": {"sha": "b32154d494b0063b2b78902a795fbd0e92686bbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b32154d494b0063b2b78902a795fbd0e92686bbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b42c4388927db75f9a38edbeafbfe13775b1773d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b42c4388927db75f9a38edbeafbfe13775b1773d", "html_url": "https://github.com/rust-lang/rust/commit/b42c4388927db75f9a38edbeafbfe13775b1773d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b42c4388927db75f9a38edbeafbfe13775b1773d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6a87c27214142b1eac2bf21785fe5b7e885ee5c", "html_url": "https://github.com/rust-lang/rust/commit/c6a87c27214142b1eac2bf21785fe5b7e885ee5c"}, {"sha": "472b6182485c2ef8361d4675749efe377f4b6614", "url": "https://api.github.com/repos/rust-lang/rust/commits/472b6182485c2ef8361d4675749efe377f4b6614", "html_url": "https://github.com/rust-lang/rust/commit/472b6182485c2ef8361d4675749efe377f4b6614"}], "stats": {"total": 245, "additions": 60, "deletions": 185}, "files": [{"sha": "2390016b3f189e28e09cbdc14480197c44900c07", "filename": "configure", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b42c4388927db75f9a38edbeafbfe13775b1773d/configure", "raw_url": "https://github.com/rust-lang/rust/raw/b42c4388927db75f9a38edbeafbfe13775b1773d/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=b42c4388927db75f9a38edbeafbfe13775b1773d", "patch": "@@ -878,6 +878,13 @@ do\n         # Try to have LLVM pull in as few dependencies as possible (#9397)\n         LLVM_OPTS=\"$LLVM_OPTS --disable-zlib --disable-libffi\"\n \n+        # pthreads works badly on mingw-w64 systems: #8996\n+        case \"$CFG_BUILD\" in\n+            (*w64-mingw32)\n+            LLVM_OPTS=\"$LLVM_OPTS --disable-pthreads\"\n+            ;;\n+        esac\n+\n         case \"$CFG_C_COMPILER\" in\n             (\"ccache clang\")\n             LLVM_CXX_32=\"ccache clang++ -m32 -Qunused-arguments\""}, {"sha": "556009c2838967614406b40528aa7db3f50cb253", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 44, "deletions": 181, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/b42c4388927db75f9a38edbeafbfe13775b1773d/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42c4388927db75f9a38edbeafbfe13775b1773d/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=b42c4388927db75f9a38edbeafbfe13775b1773d", "patch": "@@ -663,7 +663,6 @@ pub mod types {\n             }\n         }\n \n-        #[cfg(target_arch = \"x86\")]\n         pub mod arch {\n             pub mod c95 {\n                 pub type c_char = i8;\n@@ -677,27 +676,53 @@ pub mod types {\n                 pub type c_ulong = u32;\n                 pub type c_float = f32;\n                 pub type c_double = f64;\n+\n+                #[cfg(target_arch = \"x86\")]\n                 pub type size_t = u32;\n+                #[cfg(target_arch = \"x86_64\")]\n+                pub type size_t = u64;\n+\n+                #[cfg(target_arch = \"x86\")]\n                 pub type ptrdiff_t = i32;\n+                #[cfg(target_arch = \"x86_64\")]\n+                pub type ptrdiff_t = i64;\n+\n                 pub type clock_t = i32;\n+\n+                #[cfg(target_arch = \"x86\")]\n                 pub type time_t = i32;\n+                #[cfg(target_arch = \"x86_64\")]\n+                pub type time_t = i64;\n+\n                 pub type wchar_t = u16;\n             }\n+\n             pub mod c99 {\n                 pub type c_longlong = i64;\n                 pub type c_ulonglong = u64;\n                 pub type intptr_t = int;\n                 pub type uintptr_t = uint;\n             }\n+\n             pub mod posix88 {\n                 pub type off_t = i32;\n                 pub type dev_t = u32;\n                 pub type ino_t = i16;\n+\n+                #[cfg(target_arch = \"x86\")]\n                 pub type pid_t = i32;\n+                #[cfg(target_arch = \"x86_64\")]\n+                pub type pid_t = i64;\n+\n                 pub type useconds_t = u32;\n                 pub type mode_t = u16;\n+\n+                #[cfg(target_arch = \"x86\")]\n                 pub type ssize_t = i32;\n+                #[cfg(target_arch = \"x86_64\")]\n+                pub type ssize_t = i64;\n             }\n+\n             pub mod posix01 {\n             }\n             pub mod posix08 {\n@@ -725,19 +750,23 @@ pub mod types {\n \n                 pub type LONG = c_long;\n                 pub type PLONG = *mut c_long;\n+\n+                #[cfg(target_arch = \"x86\")]\n                 pub type LONG_PTR = c_long;\n+                #[cfg(target_arch = \"x86_64\")]\n+                pub type LONG_PTR = i64;\n \n                 pub type LARGE_INTEGER = c_longlong;\n                 pub type PLARGE_INTEGER = *mut c_longlong;\n \n                 pub type LPCWSTR = *WCHAR;\n                 pub type LPCSTR = *CHAR;\n-                pub type LPCTSTR = *CHAR;\n-                pub type LPTCH = *CHAR;\n \n                 pub type LPWSTR = *mut WCHAR;\n                 pub type LPSTR = *mut CHAR;\n-                pub type LPTSTR = *mut CHAR;\n+\n+                pub type LPWCH = *mut WCHAR;\n+                pub type LPCH = *mut CHAR;\n \n                 // Not really, but opaque to us.\n                 pub type LPSECURITY_ATTRIBUTES = LPVOID;\n@@ -760,9 +789,9 @@ pub mod types {\n \n                 pub struct STARTUPINFO {\n                     cb: DWORD,\n-                    lpReserved: LPTSTR,\n-                    lpDesktop: LPTSTR,\n-                    lpTitle: LPTSTR,\n+                    lpReserved: LPWSTR,\n+                    lpDesktop: LPWSTR,\n+                    lpTitle: LPWSTR,\n                     dwX: DWORD,\n                     dwY: DWORD,\n                     dwXSize: DWORD,\n@@ -843,172 +872,6 @@ pub mod types {\n                 pub type LPOVERLAPPED = *mut OVERLAPPED;\n             }\n         }\n-\n-        #[cfg(target_arch = \"x86_64\")]\n-        pub mod arch {\n-            pub mod c95 {\n-                pub type c_char = i8;\n-                pub type c_schar = i8;\n-                pub type c_uchar = u8;\n-                pub type c_short = i16;\n-                pub type c_ushort = u16;\n-                pub type c_int = i32;\n-                pub type c_uint = u32;\n-                pub type c_long = i32;\n-                pub type c_ulong = u32;\n-                pub type c_float = f32;\n-                pub type c_double = f64;\n-                pub type size_t = u64;\n-                pub type ptrdiff_t = i64;\n-                pub type clock_t = i32;\n-                pub type time_t = i64;\n-                pub type wchar_t = u16;\n-            }\n-            pub mod c99 {\n-                pub type c_longlong = i64;\n-                pub type c_ulonglong = u64;\n-                pub type intptr_t = int;\n-                pub type uintptr_t = uint;\n-            }\n-            pub mod posix88 {\n-                pub type off_t = i32; // XXX unless _FILE_OFFSET_BITS == 64\n-                pub type dev_t = u32;\n-                pub type ino_t = i16;\n-                pub type pid_t = i64;\n-                pub type useconds_t = u32;\n-                pub type mode_t = u16;\n-                pub type ssize_t = i64;\n-            }\n-            pub mod posix01 {\n-            }\n-            pub mod posix08 {\n-            }\n-            pub mod bsd44 {\n-            }\n-            pub mod extra {\n-                use ptr;\n-                use libc::types::common::c95::c_void;\n-                use libc::types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n-                use libc::types::os::arch::c95::{c_ulong};\n-                use libc::types::os::arch::c95::{wchar_t};\n-                use libc::types::os::arch::c99::{c_ulonglong};\n-\n-                pub type BOOL = c_int;\n-                pub type BYTE = u8;\n-                pub type CCHAR = c_char;\n-                pub type CHAR = c_char;\n-\n-                pub type DWORD = c_ulong;\n-                pub type DWORDLONG = c_ulonglong;\n-\n-                pub type HANDLE = LPVOID;\n-                pub type HMODULE = c_uint;\n-\n-                pub type LONG_PTR = i64; // changed\n-\n-                pub type LPCWSTR = *WCHAR;\n-                pub type LPCSTR = *CHAR;\n-                pub type LPCTSTR = *CHAR;\n-                pub type LPTCH = *CHAR;\n-\n-                pub type LPWSTR = *mut WCHAR;\n-                pub type LPSTR = *mut CHAR;\n-                pub type LPTSTR = *mut CHAR;\n-\n-                // Not really, but opaque to us.\n-                pub type LPSECURITY_ATTRIBUTES = LPVOID;\n-\n-                pub type LPVOID = *mut c_void;\n-                pub type LPCVOID = *c_void;\n-                pub type LPBYTE = *mut BYTE;\n-                pub type LPWORD = *mut WORD;\n-                pub type LPDWORD = *mut DWORD;\n-                pub type LPHANDLE = *mut HANDLE;\n-\n-                pub type LRESULT = LONG_PTR;\n-                pub type PBOOL = *mut BOOL;\n-                pub type WCHAR = wchar_t;\n-                pub type WORD = u16;\n-                pub type SIZE_T = size_t;\n-\n-                pub type time64_t = i64;\n-                pub type int64 = i64;\n-\n-                pub struct STARTUPINFO {\n-                    cb: DWORD,\n-                    lpReserved: LPTSTR,\n-                    lpDesktop: LPTSTR,\n-                    lpTitle: LPTSTR,\n-                    dwX: DWORD,\n-                    dwY: DWORD,\n-                    dwXSize: DWORD,\n-                    dwYSize: DWORD,\n-                    dwXCountChars: DWORD,\n-                    dwYCountCharts: DWORD,\n-                    dwFillAttribute: DWORD,\n-                    dwFlags: DWORD,\n-                    wShowWindow: WORD,\n-                    cbReserved2: WORD,\n-                    lpReserved2: LPBYTE,\n-                    hStdInput: HANDLE,\n-                    hStdOutput: HANDLE,\n-                    hStdError: HANDLE\n-                }\n-                pub type LPSTARTUPINFO = *mut STARTUPINFO;\n-\n-                pub struct PROCESS_INFORMATION {\n-                    hProcess: HANDLE,\n-                    hThread: HANDLE,\n-                    dwProcessId: DWORD,\n-                    dwThreadId: DWORD\n-                }\n-                pub type LPPROCESS_INFORMATION = *mut PROCESS_INFORMATION;\n-\n-                pub struct SYSTEM_INFO {\n-                    wProcessorArchitecture: WORD,\n-                    wReserved: WORD,\n-                    dwPageSize: DWORD,\n-                    lpMinimumApplicationAddress: LPVOID,\n-                    lpMaximumApplicationAddress: LPVOID,\n-                    dwActiveProcessorMask: DWORD,\n-                    dwNumberOfProcessors: DWORD,\n-                    dwProcessorType: DWORD,\n-                    dwAllocationGranularity: DWORD,\n-                    wProcessorLevel: WORD,\n-                    wProcessorRevision: WORD\n-                }\n-                pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n-\n-                impl SYSTEM_INFO {\n-                    pub fn new() -> SYSTEM_INFO {\n-                        SYSTEM_INFO {\n-                            wProcessorArchitecture: 0,\n-                            wReserved: 0,\n-                            dwPageSize: 0,\n-                            lpMinimumApplicationAddress: ptr::mut_null(),\n-                            lpMaximumApplicationAddress: ptr::mut_null(),\n-                            dwActiveProcessorMask: 0,\n-                            dwNumberOfProcessors: 0,\n-                            dwProcessorType: 0,\n-                            dwAllocationGranularity: 0,\n-                            wProcessorLevel: 0,\n-                            wProcessorRevision: 0\n-                        }\n-                    }\n-                }\n-\n-                pub struct MEMORY_BASIC_INFORMATION {\n-                    BaseAddress: LPVOID,\n-                    AllocationBase: LPVOID,\n-                    AllocationProtect: DWORD,\n-                    RegionSize: SIZE_T,\n-                    State: DWORD,\n-                    Protect: DWORD,\n-                    Type: DWORD\n-                }\n-                pub type LPMEMORY_BASIC_INFORMATION = *mut MEMORY_BASIC_INFORMATION;\n-            }\n-        }\n     }\n \n     #[cfg(target_os = \"macos\")]\n@@ -3515,8 +3378,8 @@ pub mod funcs {\n         pub mod kernel32 {\n             use libc::types::os::arch::c95::{c_uint};\n             use libc::types::os::arch::extra::{BOOL, DWORD, SIZE_T, HMODULE};\n-            use libc::types::os::arch::extra::{LPCWSTR, LPWSTR, LPCTSTR,\n-                                               LPTSTR, LPTCH, LPDWORD, LPVOID,\n+            use libc::types::os::arch::extra::{LPCWSTR, LPWSTR, LPCSTR, LPSTR, LPCH,\n+                                               LPDWORD, LPVOID,\n                                                LPCVOID, LPOVERLAPPED};\n             use libc::types::os::arch::extra::{LPSECURITY_ATTRIBUTES, LPSTARTUPINFO,\n                                                LPPROCESS_INFORMATION,\n@@ -3532,8 +3395,8 @@ pub mod funcs {\n                                                -> DWORD;\n                 pub fn SetEnvironmentVariableW(n: LPCWSTR, v: LPCWSTR)\n                                                -> BOOL;\n-                pub fn GetEnvironmentStringsA() -> LPTCH;\n-                pub fn FreeEnvironmentStringsA(env_ptr: LPTCH) -> BOOL;\n+                pub fn GetEnvironmentStringsA() -> LPCH;\n+                pub fn FreeEnvironmentStringsA(env_ptr: LPCH) -> BOOL;\n                 pub fn GetModuleFileNameW(hModule: HMODULE,\n                                           lpFilename: LPWSTR,\n                                           nSize: DWORD)\n@@ -3572,16 +3435,16 @@ pub mod funcs {\n                                    dwProcessId: DWORD)\n                                    -> HANDLE;\n                 pub fn GetCurrentProcess() -> HANDLE;\n-                pub fn CreateProcessA(lpApplicationName: LPCTSTR,\n-                                      lpCommandLine: LPTSTR,\n+                pub fn CreateProcessA(lpApplicationName: LPCSTR,\n+                                      lpCommandLine: LPSTR,\n                                       lpProcessAttributes:\n                                       LPSECURITY_ATTRIBUTES,\n                                       lpThreadAttributes:\n                                       LPSECURITY_ATTRIBUTES,\n                                       bInheritHandles: BOOL,\n                                       dwCreationFlags: DWORD,\n                                       lpEnvironment: LPVOID,\n-                                      lpCurrentDirectory: LPCTSTR,\n+                                      lpCurrentDirectory: LPCSTR,\n                                       lpStartupInfo: LPSTARTUPINFO,\n                                       lpProcessInformation:\n                                       LPPROCESS_INFORMATION)\n@@ -3621,7 +3484,7 @@ pub mod funcs {\n                                           flProtect: DWORD,\n                                           dwMaximumSizeHigh: DWORD,\n                                           dwMaximumSizeLow: DWORD,\n-                                          lpName: LPCTSTR)\n+                                          lpName: LPCWSTR)\n                                           -> HANDLE;\n                 pub fn MapViewOfFile(hFileMappingObject: HANDLE,\n                                      dwDesiredAccess: DWORD,"}, {"sha": "8998064990a00e19c7432dec5d9b68b595519303", "filename": "src/libstd/rt/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b42c4388927db75f9a38edbeafbfe13775b1773d/src%2Flibstd%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42c4388927db75f9a38edbeafbfe13775b1773d/src%2Flibstd%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcontext.rs?ref=b42c4388927db75f9a38edbeafbfe13775b1773d", "patch": "@@ -311,8 +311,8 @@ pub unsafe fn record_stack_bounds(stack_lo: uint, stack_hi: uint) {\n         //   https://github.com/mozilla/rust/issues/3445#issuecomment-26114839\n         //\n         // stack range is at TIB: %gs:0x08 (top) and %gs:0x10 (bottom)\n-        asm!(\"mov $0, %gs:0x08\" :: \"r\"(stack_lo) :: \"volatile\");\n-        asm!(\"mov $0, %gs:0x10\" :: \"r\"(stack_hi) :: \"volatile\");\n+        asm!(\"mov $0, %gs:0x08\" :: \"r\"(stack_hi) :: \"volatile\");\n+        asm!(\"mov $0, %gs:0x10\" :: \"r\"(stack_lo) :: \"volatile\");\n     }\n }\n "}, {"sha": "76ccacb331fe768622066373fb54c7978d4ef5bb", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b42c4388927db75f9a38edbeafbfe13775b1773d/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42c4388927db75f9a38edbeafbfe13775b1773d/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=b42c4388927db75f9a38edbeafbfe13775b1773d", "patch": "@@ -56,7 +56,12 @@ pub fn get_crate_map() -> Option<&'static CrateMap<'static>> {\n \n     let sym = unsafe {\n         let module = dl::open_internal();\n-        let sym = do \"__rust_crate_map_toplevel\".with_c_str |buf| {\n+        let rust_crate_map_toplevel = if cfg!(target_arch = \"x86\") {\n+            \"__rust_crate_map_toplevel\"\n+        } else {\n+            \"_rust_crate_map_toplevel\"\n+        };\n+        let sym = do rust_crate_map_toplevel.with_c_str |buf| {\n             dl::symbol(module, buf)\n         };\n         dl::close(module);"}, {"sha": "a0e66d2fd4eb4072726c9c28166144c1cad711ce", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b42c4388927db75f9a38edbeafbfe13775b1773d/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42c4388927db75f9a38edbeafbfe13775b1773d/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=b42c4388927db75f9a38edbeafbfe13775b1773d", "patch": "@@ -48,7 +48,7 @@ impl Thread {\n                 let f: ~proc() = cast::transmute(trampoline);\n                 (*f)();\n             }\n-            unsafe { cast::transmute(0) }\n+            unsafe { cast::transmute(0 as rust_thread_return) }\n         }\n \n         let native = native_thread_create(thread_start, ~main);"}]}