{"sha": "a97ad6ae50e8ce02acaa3153312d0448e98b7d2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5N2FkNmFlNTBlOGNlMDJhY2FhMzE1MzMxMmQwNDQ4ZTk4YjdkMmY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-12T15:32:50Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-17T16:41:43Z"}, "message": "rustc: Refactor trans paritioning to use tcx\n\nThis commit refactors the the `partitioning::partition` function to operate with\na `TyCtxt` instead of a `SharedCrateContext` in preparation for making it a\nquery.", "tree": {"sha": "09da3fa2aa6fad3d19b4040e0b06ef054727f0e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09da3fa2aa6fad3d19b4040e0b06ef054727f0e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a97ad6ae50e8ce02acaa3153312d0448e98b7d2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a97ad6ae50e8ce02acaa3153312d0448e98b7d2f", "html_url": "https://github.com/rust-lang/rust/commit/a97ad6ae50e8ce02acaa3153312d0448e98b7d2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a97ad6ae50e8ce02acaa3153312d0448e98b7d2f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c72240acf7a1ea107c3d995f1ca5ceb1086e7cc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c72240acf7a1ea107c3d995f1ca5ceb1086e7cc3", "html_url": "https://github.com/rust-lang/rust/commit/c72240acf7a1ea107c3d995f1ca5ceb1086e7cc3"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "507287756b8c2f0849767966b9d8ef7763935966", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a97ad6ae50e8ce02acaa3153312d0448e98b7d2f/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97ad6ae50e8ce02acaa3153312d0448e98b7d2f/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=a97ad6ae50e8ce02acaa3153312d0448e98b7d2f", "patch": "@@ -1438,7 +1438,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a\n     };\n \n     let codegen_units = time(time_passes, \"codegen unit partitioning\", || {\n-        partitioning::partition(scx,\n+        partitioning::partition(scx.tcx(),\n                                 items.iter().cloned(),\n                                 strategy,\n                                 &inlining_map,"}, {"sha": "d436d0d8b6a27033055d72aace4cbb13b495d7b6", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a97ad6ae50e8ce02acaa3153312d0448e98b7d2f/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a97ad6ae50e8ce02acaa3153312d0448e98b7d2f/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=a97ad6ae50e8ce02acaa3153312d0448e98b7d2f", "patch": "@@ -221,20 +221,18 @@ impl<'tcx> CodegenUnit<'tcx> {\n // Anything we can't find a proper codegen unit for goes into this.\n const FALLBACK_CODEGEN_UNIT: &'static str = \"__rustc_fallback_codegen_unit\";\n \n-pub fn partition<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n+pub fn partition<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               trans_items: I,\n                               strategy: PartitioningStrategy,\n                               inlining_map: &InliningMap<'tcx>,\n                               exported_symbols: &ExportedSymbols)\n                               -> Vec<CodegenUnit<'tcx>>\n     where I: Iterator<Item = TransItem<'tcx>>\n {\n-    let tcx = scx.tcx();\n-\n     // In the first step, we place all regular translation items into their\n     // respective 'home' codegen unit. Regular translation items are all\n     // functions and statics defined in the local crate.\n-    let mut initial_partitioning = place_root_translation_items(scx,\n+    let mut initial_partitioning = place_root_translation_items(tcx,\n                                                                 exported_symbols,\n                                                                 trans_items);\n \n@@ -272,10 +270,10 @@ pub fn partition<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n         (&cgu1.name[..]).cmp(&cgu2.name[..])\n     });\n \n-    if scx.sess().opts.enable_dep_node_debug_strs() {\n+    if tcx.sess.opts.enable_dep_node_debug_strs() {\n         for cgu in &result {\n             let dep_node = cgu.work_product_dep_node();\n-            scx.tcx().dep_graph.register_dep_node_debug_str(dep_node,\n+            tcx.dep_graph.register_dep_node_debug_str(dep_node,\n                                                             || cgu.name().to_string());\n         }\n     }\n@@ -304,13 +302,12 @@ struct PostInliningPartitioning<'tcx> {\n     internalization_candidates: FxHashSet<TransItem<'tcx>>,\n }\n \n-fn place_root_translation_items<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n+fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                              exported_symbols: &ExportedSymbols,\n                                              trans_items: I)\n                                              -> PreInliningPartitioning<'tcx>\n     where I: Iterator<Item = TransItem<'tcx>>\n {\n-    let tcx = scx.tcx();\n     let exported_symbols = exported_symbols.local_exports();\n \n     let mut roots = FxHashSet();\n@@ -322,7 +319,7 @@ fn place_root_translation_items<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n         let is_root = trans_item.instantiation_mode(tcx) == InstantiationMode::GloballyShared;\n \n         if is_root {\n-            let characteristic_def_id = characteristic_def_id_of_trans_item(scx, trans_item);\n+            let characteristic_def_id = characteristic_def_id_of_trans_item(tcx, trans_item);\n             let is_volatile = is_incremental_build &&\n                               trans_item.is_generic_fn();\n \n@@ -592,10 +589,9 @@ fn internalize_symbols<'a, 'tcx>(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn characteristic_def_id_of_trans_item<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n+fn characteristic_def_id_of_trans_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                  trans_item: TransItem<'tcx>)\n                                                  -> Option<DefId> {\n-    let tcx = scx.tcx();\n     match trans_item {\n         TransItem::Fn(instance) => {\n             let def_id = match instance.def {\n@@ -621,7 +617,7 @@ fn characteristic_def_id_of_trans_item<'a, 'tcx>(scx: &SharedCrateContext<'a, 't\n             if let Some(impl_def_id) = tcx.impl_of_method(def_id) {\n                 // This is a method within an inherent impl, find out what the\n                 // self-type is:\n-                let impl_self_ty = common::def_ty(scx.tcx(), impl_def_id, instance.substs);\n+                let impl_self_ty = common::def_ty(tcx, impl_def_id, instance.substs);\n                 if let Some(def_id) = characteristic_def_id_of_type(impl_self_ty) {\n                     return Some(def_id);\n                 }"}]}