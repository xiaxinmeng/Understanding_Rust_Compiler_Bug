{"sha": "2a48b532208de413e4e5d39e81c33a4644ecaa22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNDhiNTMyMjA4ZGU0MTNlNGU1ZDM5ZTgxYzMzYTQ2NDRlY2FhMjI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T13:43:21Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T13:43:21Z"}, "message": "Correct completions in items tests", "tree": {"sha": "8c8fb1436a64a6bfd56558f41b734a966aa5725e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c8fb1436a64a6bfd56558f41b734a966aa5725e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a48b532208de413e4e5d39e81c33a4644ecaa22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a48b532208de413e4e5d39e81c33a4644ecaa22", "html_url": "https://github.com/rust-lang/rust/commit/2a48b532208de413e4e5d39e81c33a4644ecaa22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a48b532208de413e4e5d39e81c33a4644ecaa22/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9a77671f2405e0cb65160c17268beec5114e259", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a77671f2405e0cb65160c17268beec5114e259", "html_url": "https://github.com/rust-lang/rust/commit/a9a77671f2405e0cb65160c17268beec5114e259"}], "stats": {"total": 81, "additions": 57, "deletions": 24}, "files": [{"sha": "c99fdef05c0b73e2e0b935a3c99b65bbe859aace", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a48b532208de413e4e5d39e81c33a4644ecaa22/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a48b532208de413e4e5d39e81c33a4644ecaa22/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=2a48b532208de413e4e5d39e81c33a4644ecaa22", "patch": "@@ -69,6 +69,9 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n \n     if ctx.has_impl_or_trait_prev_sibling() {\n         add_keyword(\"where\", \"where \");\n+        if ctx.has_impl_prev_sibling() {\n+            add_keyword(\"for\", \"for \");\n+        }\n         return;\n     }\n     if ctx.previous_token_is(T![unsafe]) {"}, {"sha": "cbc20cc2c39717c722a460e80b6cf3ef03d36dba", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a48b532208de413e4e5d39e81c33a4644ecaa22/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a48b532208de413e4e5d39e81c33a4644ecaa22/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=2a48b532208de413e4e5d39e81c33a4644ecaa22", "patch": "@@ -36,7 +36,11 @@ pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionConte\n }\n \n pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.expects_item() || ctx.previous_token_is(T![unsafe]) || ctx.path_qual().is_some() {\n+    if !ctx.expects_item()\n+        || ctx.previous_token_is(T![unsafe])\n+        || ctx.path_qual().is_some()\n+        || ctx.has_impl_or_trait_prev_sibling()\n+    {\n         return;\n     }\n     if ctx.has_visibility_prev_sibling() {"}, {"sha": "8ea5a2d5b9b7ba0253552cbd3e0321968029fa9d", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a48b532208de413e4e5d39e81c33a4644ecaa22/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a48b532208de413e4e5d39e81c33a4644ecaa22/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=2a48b532208de413e4e5d39e81c33a4644ecaa22", "patch": "@@ -6,7 +6,7 @@ use syntax::{ast, AstNode};\n use crate::{patterns::ImmediateLocation, CompletionContext, Completions};\n \n pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if ctx.is_path_disallowed() || !ctx.is_trivial_path() {\n+    if ctx.is_path_disallowed() || !ctx.is_trivial_path() || ctx.has_impl_or_trait_prev_sibling() {\n         return;\n     }\n \n@@ -68,6 +68,9 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n             return;\n         }\n         let add_resolution = match res {\n+            ScopeDef::ImplSelfType(_) => {\n+                !ctx.previous_token_is(syntax::T![impl]) && !ctx.previous_token_is(syntax::T![for])\n+            }\n             // Don't suggest attribute macros and derives.\n             ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n             // no values in type places"}, {"sha": "d7a7e9cca84519916d9ba786fb9b09b71d70a916", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a48b532208de413e4e5d39e81c33a4644ecaa22/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a48b532208de413e4e5d39e81c33a4644ecaa22/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=2a48b532208de413e4e5d39e81c33a4644ecaa22", "patch": "@@ -305,6 +305,10 @@ impl<'a> CompletionContext<'a> {\n         )\n     }\n \n+    pub(crate) fn has_impl_prev_sibling(&self) -> bool {\n+        matches!(self.prev_sibling, Some(ImmediatePrevSibling::ImplDefType))\n+    }\n+\n     pub(crate) fn has_visibility_prev_sibling(&self) -> bool {\n         matches!(self.prev_sibling, Some(ImmediatePrevSibling::Visibility))\n     }"}, {"sha": "8dfb8221bda95c7c63f817be8eb28b501c035abe", "filename": "crates/ide_completion/src/tests/items.rs", "status": "modified", "additions": 41, "deletions": 22, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/2a48b532208de413e4e5d39e81c33a4644ecaa22/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a48b532208de413e4e5d39e81c33a4644ecaa22/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs?ref=2a48b532208de413e4e5d39e81c33a4644ecaa22", "patch": "@@ -23,13 +23,11 @@ trait Trait {}\n \n #[test]\n fn target_type_or_trait_in_impl_block() {\n-    // FIXME: should not complete `Self`\n     check(\n         r#\"\n-impl My$0\n+impl Tra$0\n \"#,\n         expect![[r##\"\n-            sp Self\n             tt Trait\n             en Enum\n             st Struct\n@@ -58,36 +56,57 @@ impl My$0\n }\n \n #[test]\n-fn after_trait_name_in_trait_def() {\n-    // FIXME: should only complete `where`\n+fn target_type_in_trait_impl_block() {\n     check(\n-        r\"trait A $0\",\n+        r#\"\n+impl Trait for Str$0\n+\"#,\n         expect![[r##\"\n-            kw where\n-            sn tmod (Test module)\n-            sn tfn (Test function)\n-            sn macro_rules\n+            tt Trait\n+            en Enum\n+            st Struct\n             md bar\n-            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n-            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n+            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+            bt u32\n+            bt bool\n+            bt u8\n+            bt isize\n+            bt u16\n+            bt u64\n+            bt u128\n+            bt f32\n+            bt i128\n+            bt i16\n+            bt str\n+            bt i64\n+            bt char\n+            bt f64\n+            bt i32\n+            bt i8\n+            bt usize\n         \"##]],\n+    )\n+}\n+\n+#[test]\n+fn after_trait_name_in_trait_def() {\n+    check(\n+        r\"trait A $0\",\n+        expect![[r#\"\n+            kw where\n+        \"#]],\n     );\n }\n \n #[test]\n fn after_trait_or_target_name_in_impl() {\n-    // FIXME: should only complete `for` and `where`\n     check(\n-        r\"impl A $0\",\n-        expect![[r##\"\n+        r\"impl Trait $0\",\n+        expect![[r#\"\n             kw where\n-            sn tmod (Test module)\n-            sn tfn (Test function)\n-            sn macro_rules\n-            md bar\n-            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n-            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n-        \"##]],\n+            kw for\n+        \"#]],\n     );\n }\n "}]}