{"sha": "c93968aee896ff2e2ccba1b195e778eb32d6d6e3", "node_id": "C_kwDOAAsO6NoAKGM5Mzk2OGFlZTg5NmZmMmUyY2NiYTFiMTk1ZTc3OGViMzJkNmQ2ZTM", "commit": {"author": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2022-01-24T00:34:46Z"}, "committer": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2022-02-14T16:27:37Z"}, "message": "Mark `unsafe_pin_internals` as `incomplete`.\n\nThis thus still makes it technically possible to enable the feature, and thus\nto trigger UB without `unsafe`, but this is fine since incomplete features are\nknown to be potentially unsound (labelled \"may not be safe\").\n\nThis follows from the discussion at https://github.com/rust-lang/rust/pull/93176#discussion_r799413561", "tree": {"sha": "1ae749275f00a6e4c4cd7d66b8d01f018aedf74e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ae749275f00a6e4c4cd7d66b8d01f018aedf74e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c93968aee896ff2e2ccba1b195e778eb32d6d6e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c93968aee896ff2e2ccba1b195e778eb32d6d6e3", "html_url": "https://github.com/rust-lang/rust/commit/c93968aee896ff2e2ccba1b195e778eb32d6d6e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c93968aee896ff2e2ccba1b195e778eb32d6d6e3/comments", "author": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6df63cc148d58fb87797f3dc1fc201b789e7fb0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6df63cc148d58fb87797f3dc1fc201b789e7fb0d", "html_url": "https://github.com/rust-lang/rust/commit/6df63cc148d58fb87797f3dc1fc201b789e7fb0d"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "ad0e1eac4b9e350e501c987aab5323bc3d7328ee", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c93968aee896ff2e2ccba1b195e778eb32d6d6e3/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93968aee896ff2e2ccba1b195e778eb32d6d6e3/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=c93968aee896ff2e2ccba1b195e778eb32d6d6e3", "patch": "@@ -161,6 +161,9 @@ declare_features! (\n     (active, staged_api, \"1.0.0\", None, None),\n     /// Added for testing E0705; perma-unstable.\n     (active, test_2018_feature, \"1.31.0\", None, Some(Edition::Edition2018)),\n+    /// Allows non-`unsafe` \u2014and thus, unsound\u2014 access to `Pin` constructions.\n+    /// Marked `incomplete` since perma-unstable and unsound.\n+    (incomplete, unsafe_pin_internals, \"1.61.0\", None, None),\n     /// Use for stable + negative coherence and strict coherence depending on trait's\n     /// rustc_strict_coherence value.\n     (active, with_negative_coherence, \"1.60.0\", None, None),"}, {"sha": "ebc0e72bba6ab6b23bf73a3ec303da7ca7a2a1b5", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c93968aee896ff2e2ccba1b195e778eb32d6d6e3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93968aee896ff2e2ccba1b195e778eb32d6d6e3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=c93968aee896ff2e2ccba1b195e778eb32d6d6e3", "patch": "@@ -1455,6 +1455,7 @@ symbols! {\n         unsafe_block_in_unsafe_fn,\n         unsafe_cell,\n         unsafe_no_drop_flag,\n+        unsafe_pin_internals,\n         unsize,\n         unsized_fn_params,\n         unsized_locals,"}, {"sha": "0680d234403047ed7d9a1c0a3f6dda1563e8624d", "filename": "src/test/ui/feature-gates/feature-gate-unsafe_pin_internals.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c93968aee896ff2e2ccba1b195e778eb32d6d6e3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_pin_internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93968aee896ff2e2ccba1b195e778eb32d6d6e3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_pin_internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_pin_internals.rs?ref=c93968aee896ff2e2ccba1b195e778eb32d6d6e3", "patch": "@@ -0,0 +1,17 @@\n+// edition:2018\n+#![forbid(incomplete_features, unsafe_code)]\n+#![feature(unsafe_pin_internals)]\n+//~^ ERROR the feature `unsafe_pin_internals` is incomplete and may not be safe to use\n+\n+use core::{marker::PhantomPinned, pin::Pin};\n+\n+/// The `unsafe_pin_internals` is indeed unsound.\n+fn non_unsafe_pin_new_unchecked<T>(pointer: &mut T) -> Pin<&mut T> {\n+    Pin { pointer }\n+}\n+\n+fn main() {\n+    let mut self_referential = PhantomPinned;\n+    let _: Pin<&mut PhantomPinned> = non_unsafe_pin_new_unchecked(&mut self_referential);\n+    core::mem::forget(self_referential); // move and disable drop glue!\n+}"}, {"sha": "4d0c931b404e6ed3a45af324da64b3f8468cf2d1", "filename": "src/test/ui/feature-gates/feature-gate-unsafe_pin_internals.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c93968aee896ff2e2ccba1b195e778eb32d6d6e3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_pin_internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93968aee896ff2e2ccba1b195e778eb32d6d6e3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_pin_internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_pin_internals.stderr?ref=c93968aee896ff2e2ccba1b195e778eb32d6d6e3", "patch": "@@ -0,0 +1,14 @@\n+error: the feature `unsafe_pin_internals` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/feature-gate-unsafe_pin_internals.rs:3:12\n+   |\n+LL | #![feature(unsafe_pin_internals)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/feature-gate-unsafe_pin_internals.rs:2:11\n+   |\n+LL | #![forbid(incomplete_features, unsafe_code)]\n+   |           ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}