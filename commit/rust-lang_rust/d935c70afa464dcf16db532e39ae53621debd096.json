{"sha": "d935c70afa464dcf16db532e39ae53621debd096", "node_id": "C_kwDOAAsO6NoAKGQ5MzVjNzBhZmE0NjRkY2YxNmRiNTMyZTM5YWU1MzYyMWRlYmQwOTY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-11T14:16:14Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-11T14:16:14Z"}, "message": "Don't allow accidental runtime-checks", "tree": {"sha": "3106e3d7a2201d779241302abb8072900cf66571", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3106e3d7a2201d779241302abb8072900cf66571"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d935c70afa464dcf16db532e39ae53621debd096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d935c70afa464dcf16db532e39ae53621debd096", "html_url": "https://github.com/rust-lang/rust/commit/d935c70afa464dcf16db532e39ae53621debd096", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d935c70afa464dcf16db532e39ae53621debd096/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8440208eb13ec1f680592b9a7793a67f2b1be15e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8440208eb13ec1f680592b9a7793a67f2b1be15e", "html_url": "https://github.com/rust-lang/rust/commit/8440208eb13ec1f680592b9a7793a67f2b1be15e"}], "stats": {"total": 101, "additions": 50, "deletions": 51}, "files": [{"sha": "865fc2ae297021033045cd14e8bbfee0fdec247c", "filename": "src/test/ui/layout/unsafe-cell-hides-niche.rs", "status": "modified", "additions": 50, "deletions": 51, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/d935c70afa464dcf16db532e39ae53621debd096/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d935c70afa464dcf16db532e39ae53621debd096/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs?ref=d935c70afa464dcf16db532e39ae53621debd096", "patch": "@@ -4,6 +4,7 @@\n // size in memory as an `Option<UnsafeCell<u32>>` (namely, 8 bytes).\n \n // check-pass\n+// compile-flags: --crate-type=lib\n \n #![feature(repr_simd)]\n \n@@ -23,59 +24,57 @@ struct Size<const S: usize>;\n \n // Overwriting the runtime assertion and making it a compile-time assertion\n macro_rules! assert_size {\n-    ($a:ty, $b:expr) => {{\n+    ($a:ty, $b:expr) => {\n         const _: Size::<{$b}> = Size::<{size_of::<$a>()}>;\n-    }};\n+    };\n }\n \n const PTR_SIZE: usize = std::mem::size_of::<*const ()>();\n \n-fn main() {\n-    assert_size!(Option<Wrapper<u32>>,     8);\n-    assert_size!(Option<Wrapper<N32>>,     4); // (\u2713 niche opt)\n-    assert_size!(Option<Transparent<u32>>, 8);\n-    assert_size!(Option<Transparent<N32>>, 4); // (\u2713 niche opt)\n-    assert_size!(Option<NoNiche<u32>>,     8);\n-    assert_size!(Option<NoNiche<N32>>,     8); // (\u2717 niche opt)\n-\n-    assert_size!(Option<UnsafeCell<u32>>,  8);\n-    assert_size!(Option<UnsafeCell<N32>>,  8); // (\u2717 niche opt)\n-\n-    assert_size!(       UnsafeCell<&()> , PTR_SIZE);\n-    assert_size!(Option<UnsafeCell<&()>>, PTR_SIZE * 2); // (\u2717 niche opt)\n-    assert_size!(             Cell<&()> , PTR_SIZE);\n-    assert_size!(Option<      Cell<&()>>, PTR_SIZE * 2); // (\u2717 niche opt)\n-    assert_size!(          RefCell<&()> , PTR_SIZE * 2);\n-    assert_size!(Option<   RefCell<&()>>, PTR_SIZE * 3); // (\u2717 niche opt)\n-    assert_size!(\n-        RwLock<&()>,\n-        if cfg!(target_pointer_width = \"32\") { 16 } else { 24 }\n-    );\n-    assert_size!(\n-        Option<RwLock<&()>>,\n-        if cfg!(target_pointer_width = \"32\") { 20 } else { 32 }\n-    ); // (\u2717 niche opt)\n-    assert_size!(\n-        Mutex<&()> ,\n-        if cfg!(target_pointer_width = \"32\") { 12 } else { 16 }\n-    );\n-    assert_size!(\n-        Option<Mutex<&()>>,\n-        if cfg!(target_pointer_width = \"32\") { 16 } else { 24 }\n-    ); // (\u2717 niche opt)\n-\n-    assert_size!(       UnsafeCell<&[i32]> , PTR_SIZE * 2);\n-    assert_size!(Option<UnsafeCell<&[i32]>>, PTR_SIZE * 3); // (\u2717 niche opt)\n-    assert_size!(       UnsafeCell<(&(), &())> , PTR_SIZE * 2);\n-    assert_size!(Option<UnsafeCell<(&(), &())>>, PTR_SIZE * 3); // (\u2717 niche opt)\n-\n-    trait Trait {}\n-    assert_size!(       UnsafeCell<&dyn Trait> , PTR_SIZE * 2);\n-    assert_size!(Option<UnsafeCell<&dyn Trait>>, PTR_SIZE * 3); // (\u2717 niche opt)\n-\n-    #[repr(simd)]\n-    pub struct Vec4<T>([T; 4]);\n-\n-    assert_size!(       UnsafeCell<Vec4<N32>> , 16);\n-    assert_size!(Option<UnsafeCell<Vec4<N32>>>, 32); // (\u2717 niche opt)\n-}\n+assert_size!(Option<Wrapper<u32>>,     8);\n+assert_size!(Option<Wrapper<N32>>,     4); // (\u2713 niche opt)\n+assert_size!(Option<Transparent<u32>>, 8);\n+assert_size!(Option<Transparent<N32>>, 4); // (\u2713 niche opt)\n+assert_size!(Option<NoNiche<u32>>,     8);\n+assert_size!(Option<NoNiche<N32>>,     8); // (\u2717 niche opt)\n+\n+assert_size!(Option<UnsafeCell<u32>>,  8);\n+assert_size!(Option<UnsafeCell<N32>>,  8); // (\u2717 niche opt)\n+\n+assert_size!(       UnsafeCell<&()> , PTR_SIZE);\n+assert_size!(Option<UnsafeCell<&()>>, PTR_SIZE * 2); // (\u2717 niche opt)\n+assert_size!(             Cell<&()> , PTR_SIZE);\n+assert_size!(Option<      Cell<&()>>, PTR_SIZE * 2); // (\u2717 niche opt)\n+assert_size!(          RefCell<&()> , PTR_SIZE * 2);\n+assert_size!(Option<   RefCell<&()>>, PTR_SIZE * 3); // (\u2717 niche opt)\n+assert_size!(\n+    RwLock<&()>,\n+    if cfg!(target_pointer_width = \"32\") { 16 } else { 24 }\n+);\n+assert_size!(\n+    Option<RwLock<&()>>,\n+    if cfg!(target_pointer_width = \"32\") { 20 } else { 32 }\n+); // (\u2717 niche opt)\n+assert_size!(\n+    Mutex<&()> ,\n+    if cfg!(target_pointer_width = \"32\") { 12 } else { 16 }\n+);\n+assert_size!(\n+    Option<Mutex<&()>>,\n+    if cfg!(target_pointer_width = \"32\") { 16 } else { 24 }\n+); // (\u2717 niche opt)\n+\n+assert_size!(       UnsafeCell<&[i32]> , PTR_SIZE * 2);\n+assert_size!(Option<UnsafeCell<&[i32]>>, PTR_SIZE * 3); // (\u2717 niche opt)\n+assert_size!(       UnsafeCell<(&(), &())> , PTR_SIZE * 2);\n+assert_size!(Option<UnsafeCell<(&(), &())>>, PTR_SIZE * 3); // (\u2717 niche opt)\n+\n+trait Trait {}\n+assert_size!(       UnsafeCell<&dyn Trait> , PTR_SIZE * 2);\n+assert_size!(Option<UnsafeCell<&dyn Trait>>, PTR_SIZE * 3); // (\u2717 niche opt)\n+\n+#[repr(simd)]\n+pub struct Vec4<T>([T; 4]);\n+\n+assert_size!(       UnsafeCell<Vec4<N32>> , 16);\n+assert_size!(Option<UnsafeCell<Vec4<N32>>>, 32); // (\u2717 niche opt)"}]}