{"sha": "5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZDdjMmJmZWY1MGUwMGZkZDZiMmY1ZGMwN2IxN2MyYzMyNGYzOTY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-11-28T23:05:53Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-05T16:05:25Z"}, "message": "trans: Rename `reachable` to `exported_symbols` where appropriate.", "tree": {"sha": "e41b627457c5a325346893a037377bb0a16f2438", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e41b627457c5a325346893a037377bb0a16f2438"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "html_url": "https://github.com/rust-lang/rust/commit/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1a6d47f943d8df9d565de835babc1e2f3e8d45a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a6d47f943d8df9d565de835babc1e2f3e8d45a", "html_url": "https://github.com/rust-lang/rust/commit/d1a6d47f943d8df9d565de835babc1e2f3e8d45a"}], "stats": {"total": 124, "additions": 62, "deletions": 62}, "files": [{"sha": "34224b924b948f2128fa6140abd9f30250ef8cd5", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "patch": "@@ -329,7 +329,7 @@ pub trait CrateStore<'tcx> {\n     fn crate_disambiguator(&self, cnum: CrateNum) -> Symbol;\n     fn plugin_registrar_fn(&self, cnum: CrateNum) -> Option<DefId>;\n     fn native_libraries(&self, cnum: CrateNum) -> Vec<NativeLibrary>;\n-    fn reachable_ids(&self, cnum: CrateNum) -> Vec<DefId>;\n+    fn exported_symbols(&self, cnum: CrateNum) -> Vec<DefId>;\n     fn is_no_builtins(&self, cnum: CrateNum) -> bool;\n \n     // resolve\n@@ -493,7 +493,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n         { bug!(\"plugin_registrar_fn\") }\n     fn native_libraries(&self, cnum: CrateNum) -> Vec<NativeLibrary>\n         { bug!(\"native_libraries\") }\n-    fn reachable_ids(&self, cnum: CrateNum) -> Vec<DefId> { bug!(\"reachable_ids\") }\n+    fn exported_symbols(&self, cnum: CrateNum) -> Vec<DefId> { bug!(\"exported_symbols\") }\n     fn is_no_builtins(&self, cnum: CrateNum) -> bool { bug!(\"is_no_builtins\") }\n \n     // resolve"}, {"sha": "2965e545eca4e1421590fa7dba4f9fdfb63d03e0", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "patch": "@@ -311,9 +311,9 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(cnum).get_native_libraries()\n     }\n \n-    fn reachable_ids(&self, cnum: CrateNum) -> Vec<DefId>\n+    fn exported_symbols(&self, cnum: CrateNum) -> Vec<DefId>\n     {\n-        self.get_crate_data(cnum).get_reachable_ids()\n+        self.get_crate_data(cnum).get_exported_symbols()\n     }\n \n     fn is_no_builtins(&self, cnum: CrateNum) -> bool {"}, {"sha": "43635eae76c0f223f37f247aa4a165b9d66d4452", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "patch": "@@ -1038,8 +1038,8 @@ impl<'a, 'tcx> CrateMetadata {\n         arg_names.decode(self).collect()\n     }\n \n-    pub fn get_reachable_ids(&self) -> Vec<DefId> {\n-        self.root.reachable_ids.decode(self).map(|index| self.local_def_id(index)).collect()\n+    pub fn get_exported_symbols(&self) -> Vec<DefId> {\n+        self.root.exported_symbols.decode(self).map(|index| self.local_def_id(index)).collect()\n     }\n \n     pub fn get_macro(&self, id: DefIndex) -> (ast::Name, MacroDef) {"}, {"sha": "01cb0f823e8efae6455f31a11bec20f9e2234661", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "patch": "@@ -50,7 +50,7 @@ pub struct EncodeContext<'a, 'tcx: 'a> {\n     reexports: &'a def::ExportMap,\n     link_meta: &'a LinkMeta,\n     cstore: &'a cstore::CStore,\n-    reachable: &'a NodeSet,\n+    exported_symbols: &'a NodeSet,\n \n     lazy_state: LazyState,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n@@ -1223,16 +1223,16 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         self.lazy_seq(all_impls)\n     }\n \n-    // Encodes all reachable symbols in this crate into the metadata.\n+    // Encodes all symbols exported from this crate into the metadata.\n     //\n     // This pass is seeded off the reachability list calculated in the\n     // middle::reachable module but filters out items that either don't have a\n     // symbol associated with them (they weren't translated) or if they're an FFI\n     // definition (as that's not defined in this crate).\n-    fn encode_reachable(&mut self) -> LazySeq<DefIndex> {\n-        let reachable = self.reachable;\n+    fn encode_exported_symbols(&mut self) -> LazySeq<DefIndex> {\n+        let exported_symbols = self.exported_symbols;\n         let tcx = self.tcx;\n-        self.lazy_seq(reachable.iter().map(|&id| tcx.map.local_def_id(id).index))\n+        self.lazy_seq(exported_symbols.iter().map(|&id| tcx.map.local_def_id(id).index))\n     }\n \n     fn encode_dylib_dependency_formats(&mut self) -> LazySeq<Option<LinkagePreference>> {\n@@ -1278,10 +1278,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let impls = self.encode_impls();\n         let impl_bytes = self.position() - i;\n \n-        // Encode reachability info.\n+        // Encode exported symbols info.\n         i = self.position();\n-        let reachable_ids = self.encode_reachable();\n-        let reachable_bytes = self.position() - i;\n+        let exported_symbols = self.encode_exported_symbols();\n+        let exported_symbols_bytes = self.position() - i;\n \n         // Encode and index the items.\n         i = self.position();\n@@ -1319,7 +1319,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             native_libraries: native_libraries,\n             codemap: codemap,\n             impls: impls,\n-            reachable_ids: reachable_ids,\n+            exported_symbols: exported_symbols,\n             index: index,\n         });\n \n@@ -1339,7 +1339,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             println!(\"          native bytes: {}\", native_lib_bytes);\n             println!(\"         codemap bytes: {}\", codemap_bytes);\n             println!(\"            impl bytes: {}\", impl_bytes);\n-            println!(\"       reachable bytes: {}\", reachable_bytes);\n+            println!(\"    exp. symbols bytes: {}\", exported_symbols_bytes);\n             println!(\"            item bytes: {}\", item_bytes);\n             println!(\"           index bytes: {}\", index_bytes);\n             println!(\"            zero bytes: {}\", zero_bytes);\n@@ -1377,7 +1377,7 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  cstore: &cstore::CStore,\n                                  reexports: &def::ExportMap,\n                                  link_meta: &LinkMeta,\n-                                 reachable: &NodeSet)\n+                                 exported_symbols: &NodeSet)\n                                  -> Vec<u8> {\n     let mut cursor = Cursor::new(vec![]);\n     cursor.write_all(METADATA_HEADER).unwrap();\n@@ -1392,7 +1392,7 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             reexports: reexports,\n             link_meta: link_meta,\n             cstore: cstore,\n-            reachable: reachable,\n+            exported_symbols: exported_symbols,\n             lazy_state: LazyState::NoNode,\n             type_shorthands: Default::default(),\n             predicate_shorthands: Default::default(),"}, {"sha": "f92051cbf1943a03338f8b3e8b1d8bcc5f4464f0", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "patch": "@@ -180,7 +180,7 @@ pub struct CrateRoot {\n     pub native_libraries: LazySeq<NativeLibrary>,\n     pub codemap: LazySeq<syntax_pos::FileMap>,\n     pub impls: LazySeq<TraitImpls>,\n-    pub reachable_ids: LazySeq<DefIndex>,\n+    pub exported_symbols: LazySeq<DefIndex>,\n     pub index: LazySeq<index::Index>,\n }\n "}, {"sha": "b8d5fc9042f10bb53cff0f138b0181917578edb5", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "patch": "@@ -34,10 +34,10 @@ pub struct LinkerInfo {\n \n impl<'a, 'tcx> LinkerInfo {\n     pub fn new(scx: &SharedCrateContext<'a, 'tcx>,\n-               reachable: &[String]) -> LinkerInfo {\n+               exports: &[String]) -> LinkerInfo {\n         LinkerInfo {\n             exports: scx.sess().crate_types.borrow().iter().map(|&c| {\n-                (c, exported_symbols(scx, reachable, c))\n+                (c, exported_symbols(scx, exports, c))\n             }).collect(),\n         }\n     }\n@@ -473,7 +473,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n }\n \n fn exported_symbols(scx: &SharedCrateContext,\n-                    reachable: &[String],\n+                    exported_symbols: &[String],\n                     crate_type: CrateType)\n                     -> Vec<String> {\n     // See explanation in GnuLinker::export_symbols, for\n@@ -485,7 +485,7 @@ fn exported_symbols(scx: &SharedCrateContext,\n         }\n     }\n \n-    let mut symbols = reachable.to_vec();\n+    let mut symbols = exported_symbols.to_vec();\n \n     // If we're producing anything other than a dylib then the `reachable` array\n     // above is the exhaustive set of symbols we should be exporting.\n@@ -507,7 +507,7 @@ fn exported_symbols(scx: &SharedCrateContext,\n             None\n         }\n     }).flat_map(|cnum| {\n-        cstore.reachable_ids(cnum)\n+        cstore.exported_symbols(cnum)\n     }).map(|did| -> String {\n         Instance::mono(scx, did).symbol_name(scx)\n     }));"}, {"sha": "46b1241de368f9bfaa992d942f5d669a5ffd74da", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "patch": "@@ -25,7 +25,7 @@ use std::ffi::CString;\n use std::path::Path;\n \n pub fn run(sess: &session::Session, llmod: ModuleRef,\n-           tm: TargetMachineRef, reachable: &[String],\n+           tm: TargetMachineRef, exported_symbols: &[String],\n            config: &ModuleConfig,\n            temp_no_opt_bc_filename: &Path) {\n     if sess.opts.cg.prefer_dynamic {\n@@ -118,8 +118,8 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n         }\n     });\n \n-    // Internalize everything but the reachable symbols of the current module\n-    let cstrs: Vec<CString> = reachable.iter().map(|s| {\n+    // Internalize everything but the exported symbols of the current module\n+    let cstrs: Vec<CString> = exported_symbols.iter().map(|s| {\n         CString::new(s.clone()).unwrap()\n     }).collect();\n     let arr: Vec<*const libc::c_char> = cstrs.iter().map(|c| c.as_ptr()).collect();"}, {"sha": "84bba64dd70b2f3813d02d83b559d08ef5a99840", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "patch": "@@ -343,9 +343,9 @@ struct CodegenContext<'a> {\n }\n \n impl<'a> CodegenContext<'a> {\n-    fn new_with_session(sess: &'a Session, reachable: &'a [String]) -> CodegenContext<'a> {\n+    fn new_with_session(sess: &'a Session, exported_symbols: &'a [String]) -> CodegenContext<'a> {\n         CodegenContext {\n-            lto_ctxt: Some((sess, reachable)),\n+            lto_ctxt: Some((sess, exported_symbols)),\n             handler: sess.diagnostic(),\n             plugin_passes: sess.plugin_llvm_passes.borrow().clone(),\n             remark: sess.opts.cg.remark.clone(),\n@@ -516,14 +516,14 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n         llvm::LLVMDisposePassManager(mpm);\n \n         match cgcx.lto_ctxt {\n-            Some((sess, reachable)) if sess.lto() =>  {\n+            Some((sess, exported_symbols)) if sess.lto() =>  {\n                 time(sess.time_passes(), \"all lto passes\", || {\n                     let temp_no_opt_bc_filename =\n                         output_names.temp_path_ext(\"no-opt.lto.bc\", module_name);\n                     lto::run(sess,\n                              llmod,\n                              tm,\n-                             reachable,\n+                             exported_symbols,\n                              &config,\n                              &temp_no_opt_bc_filename);\n                 });\n@@ -753,7 +753,7 @@ pub fn run_passes(sess: &Session,\n     //       potentially create hundreds of them).\n     let num_workers = work_items.len() - 1;\n     if num_workers == 1 {\n-        run_work_singlethreaded(sess, &trans.reachable, work_items);\n+        run_work_singlethreaded(sess, &trans.exported_symbols, work_items);\n     } else {\n         run_work_multithreaded(sess, work_items, num_workers);\n     }\n@@ -997,9 +997,9 @@ fn execute_work_item(cgcx: &CodegenContext,\n }\n \n fn run_work_singlethreaded(sess: &Session,\n-                           reachable: &[String],\n+                           exported_symbols: &[String],\n                            work_items: Vec<WorkItem>) {\n-    let cgcx = CodegenContext::new_with_session(sess, reachable);\n+    let cgcx = CodegenContext::new_with_session(sess, exported_symbols);\n \n     // Since we're running single-threaded, we can pass the session to\n     // the proc, allowing `optimize_and_codegen` to perform LTO."}, {"sha": "74e6a1dac80b172fcb921f20ba06b2b6f010deb2", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "patch": "@@ -1243,7 +1243,7 @@ fn contains_null(s: &str) -> bool {\n }\n \n fn write_metadata(cx: &SharedCrateContext,\n-                  reachable_ids: &NodeSet) -> Vec<u8> {\n+                  exported_symbols: &NodeSet) -> Vec<u8> {\n     use flate;\n \n     #[derive(PartialEq, Eq, PartialOrd, Ord)]\n@@ -1275,7 +1275,7 @@ fn write_metadata(cx: &SharedCrateContext,\n     let metadata = cstore.encode_metadata(cx.tcx(),\n                                           cx.export_map(),\n                                           cx.link_meta(),\n-                                          reachable_ids);\n+                                          exported_symbols);\n     if kind == MetadataKind::Uncompressed {\n         return metadata;\n     }\n@@ -1313,7 +1313,7 @@ fn write_metadata(cx: &SharedCrateContext,\n fn internalize_symbols<'a, 'tcx>(sess: &Session,\n                                  ccxs: &CrateContextList<'a, 'tcx>,\n                                  symbol_map: &SymbolMap<'tcx>,\n-                                 reachable: &FxHashSet<&str>) {\n+                                 exported_symbols: &FxHashSet<&str>) {\n     let scx = ccxs.shared();\n     let tcx = scx.tcx();\n \n@@ -1379,7 +1379,7 @@ fn internalize_symbols<'a, 'tcx>(sess: &Session,\n                     let name_cow = Cow::Borrowed(name_str);\n \n                     let is_referenced_somewhere = referenced_somewhere.contains(&name_cstr);\n-                    let is_reachable = reachable.contains(&name_str);\n+                    let is_reachable = exported_symbols.contains(&name_str);\n                     let has_fixed_linkage = linkage_fixed_explicitly.contains(&name_cow);\n \n                     if !is_referenced_somewhere && !is_reachable && !has_fixed_linkage {\n@@ -1481,7 +1481,7 @@ fn iter_functions(llmod: llvm::ModuleRef) -> ValueIter {\n ///\n /// This list is later used by linkers to determine the set of symbols needed to\n /// be exposed from a dynamic library and it's also encoded into the metadata.\n-pub fn filter_reachable_ids(tcx: TyCtxt, reachable: NodeSet) -> NodeSet {\n+pub fn find_exported_symbols(tcx: TyCtxt, reachable: NodeSet) -> NodeSet {\n     reachable.into_iter().filter(|&id| {\n         // Next, we want to ignore some FFI functions that are not exposed from\n         // this crate. Reachable FFI functions can be lumped into two\n@@ -1535,7 +1535,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let krate = tcx.map.krate();\n \n     let ty::CrateAnalysis { export_map, reachable, name, .. } = analysis;\n-    let reachable = filter_reachable_ids(tcx, reachable);\n+    let exported_symbols = find_exported_symbols(tcx, reachable);\n \n     let check_overflow = if let Some(v) = tcx.sess.opts.debugging_opts.force_overflow_checks {\n         v\n@@ -1548,11 +1548,11 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let shared_ccx = SharedCrateContext::new(tcx,\n                                              export_map,\n                                              link_meta.clone(),\n-                                             reachable,\n+                                             exported_symbols,\n                                              check_overflow);\n     // Translate the metadata.\n     let metadata = time(tcx.sess.time_passes(), \"write metadata\", || {\n-        write_metadata(&shared_ccx, shared_ccx.reachable())\n+        write_metadata(&shared_ccx, shared_ccx.exported_symbols())\n     });\n \n     let metadata_module = ModuleTranslation {\n@@ -1608,7 +1608,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             metadata_module: metadata_module,\n             link: link_meta,\n             metadata: metadata,\n-            reachable: vec![],\n+            exported_symbols: vec![],\n             no_builtins: no_builtins,\n             linker_info: linker_info,\n             windows_subsystem: None,\n@@ -1688,17 +1688,17 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     let sess = shared_ccx.sess();\n-    let mut reachable_symbols = shared_ccx.reachable().iter().map(|&id| {\n+    let mut exported_symbols = shared_ccx.exported_symbols().iter().map(|&id| {\n         let def_id = shared_ccx.tcx().map.local_def_id(id);\n         symbol_for_def_id(def_id, &shared_ccx, &symbol_map)\n     }).collect::<Vec<_>>();\n \n     if sess.entry_fn.borrow().is_some() {\n-        reachable_symbols.push(\"main\".to_string());\n+        exported_symbols.push(\"main\".to_string());\n     }\n \n     if sess.crate_types.borrow().contains(&config::CrateTypeDylib) {\n-        reachable_symbols.push(shared_ccx.metadata_symbol_name());\n+        exported_symbols.push(shared_ccx.metadata_symbol_name());\n     }\n \n     // For the purposes of LTO or when creating a cdylib, we add to the\n@@ -1708,10 +1708,10 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     //\n     // Note that this happens even if LTO isn't requested or we're not creating\n     // a cdylib. In those cases, though, we're not even reading the\n-    // `reachable_symbols` list later on so it should be ok.\n+    // `exported_symbols` list later on so it should be ok.\n     for cnum in sess.cstore.crates() {\n-        let syms = sess.cstore.reachable_ids(cnum);\n-        reachable_symbols.extend(syms.into_iter().filter(|&def_id| {\n+        let syms = sess.cstore.exported_symbols(cnum);\n+        exported_symbols.extend(syms.into_iter().filter(|&def_id| {\n             let applicable = match sess.cstore.describe_def(def_id) {\n                 Some(Def::Static(..)) => true,\n                 Some(Def::Fn(_)) => {\n@@ -1735,7 +1735,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         internalize_symbols(sess,\n                             &crate_context_list,\n                             &symbol_map,\n-                            &reachable_symbols.iter()\n+                            &exported_symbols.iter()\n                                               .map(|s| &s[..])\n                                               .collect())\n     });\n@@ -1749,7 +1749,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         create_imps(&crate_context_list);\n     }\n \n-    let linker_info = LinkerInfo::new(&shared_ccx, &reachable_symbols);\n+    let linker_info = LinkerInfo::new(&shared_ccx, &exported_symbols);\n \n     let subsystem = attr::first_attr_value_str_by_name(&krate.attrs,\n                                                        \"windows_subsystem\");\n@@ -1767,7 +1767,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         metadata_module: metadata_module,\n         link: link_meta,\n         metadata: metadata,\n-        reachable: reachable_symbols,\n+        exported_symbols: exported_symbols,\n         no_builtins: no_builtins,\n         linker_info: linker_info,\n         windows_subsystem: windows_subsystem,"}, {"sha": "262b83623977c6ccaccbfc962f6f003ceb0dcdc2", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "patch": "@@ -67,7 +67,7 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n     metadata_llcx: ContextRef,\n \n     export_map: ExportMap,\n-    reachable: NodeSet,\n+    exported_symbols: NodeSet,\n     link_meta: LinkMeta,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     stats: Stats,\n@@ -437,7 +437,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     pub fn new(tcx: TyCtxt<'b, 'tcx, 'tcx>,\n                export_map: ExportMap,\n                link_meta: LinkMeta,\n-               reachable: NodeSet,\n+               exported_symbols: NodeSet,\n                check_overflow: bool)\n                -> SharedCrateContext<'b, 'tcx> {\n         let (metadata_llcx, metadata_llmod) = unsafe {\n@@ -454,7 +454,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         // they're not available to be linked against. This poses a few problems\n         // for the compiler, some of which are somewhat fundamental, but we use\n         // the `use_dll_storage_attrs` variable below to attach the `dllexport`\n-        // attribute to all LLVM functions that are reachable (e.g. they're\n+        // attribute to all LLVM functions that are exported e.g. they're\n         // already tagged with external linkage). This is suboptimal for a few\n         // reasons:\n         //\n@@ -493,7 +493,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n             metadata_llmod: metadata_llmod,\n             metadata_llcx: metadata_llcx,\n             export_map: export_map,\n-            reachable: reachable,\n+            exported_symbols: exported_symbols,\n             link_meta: link_meta,\n             tcx: tcx,\n             stats: Stats {\n@@ -527,8 +527,8 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         &self.export_map\n     }\n \n-    pub fn reachable<'a>(&'a self) -> &'a NodeSet {\n-        &self.reachable\n+    pub fn exported_symbols<'a>(&'a self) -> &'a NodeSet {\n+        &self.exported_symbols\n     }\n \n     pub fn trait_cache(&self) -> &RefCell<DepTrackingMap<TraitSelectionCache<'tcx>>> {\n@@ -768,8 +768,8 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.shared.export_map\n     }\n \n-    pub fn reachable<'a>(&'a self) -> &'a NodeSet {\n-        &self.shared.reachable\n+    pub fn exported_symbols<'a>(&'a self) -> &'a NodeSet {\n+        &self.shared.exported_symbols\n     }\n \n     pub fn link_meta<'a>(&'a self) -> &'a LinkMeta {"}, {"sha": "3ee2497009f6513135438a7bb31ccd1bf75d683e", "filename": "src/librustc_trans/debuginfo/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs?ref=5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "patch": "@@ -34,7 +34,7 @@ pub fn is_node_local_to_unit(cx: &CrateContext, node_id: ast::NodeId) -> bool\n     // visible). It might better to use the `exported_items` set from\n     // `driver::CrateAnalysis` in the future, but (atm) this set is not\n     // available in the translation pass.\n-    !cx.reachable().contains(&node_id)\n+    !cx.exported_symbols().contains(&node_id)\n }\n \n #[allow(non_snake_case)]"}, {"sha": "8a7ab16ee2b01987e4f00e38e5a47793673b96ac", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=5fd7c2bfef50e00fdd6b2f5dc07b17c2c324f396", "patch": "@@ -169,7 +169,7 @@ pub struct CrateTranslation {\n     pub metadata_module: ModuleTranslation,\n     pub link: middle::cstore::LinkMeta,\n     pub metadata: Vec<u8>,\n-    pub reachable: Vec<String>,\n+    pub exported_symbols: Vec<String>,\n     pub no_builtins: bool,\n     pub windows_subsystem: Option<String>,\n     pub linker_info: back::linker::LinkerInfo"}]}