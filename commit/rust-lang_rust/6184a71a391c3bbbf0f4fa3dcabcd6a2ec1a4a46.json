{"sha": "6184a71a391c3bbbf0f4fa3dcabcd6a2ec1a4a46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxODRhNzFhMzkxYzNiYmJmMGY0ZmEzZGNhYmNkNmEyZWMxYTRhNDY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-19T17:43:01Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-26T08:22:46Z"}, "message": "Make get_query into an extension trait.", "tree": {"sha": "5b54d668943414814a00cf2eefd3370d514629e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b54d668943414814a00cf2eefd3370d514629e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6184a71a391c3bbbf0f4fa3dcabcd6a2ec1a4a46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6184a71a391c3bbbf0f4fa3dcabcd6a2ec1a4a46", "html_url": "https://github.com/rust-lang/rust/commit/6184a71a391c3bbbf0f4fa3dcabcd6a2ec1a4a46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6184a71a391c3bbbf0f4fa3dcabcd6a2ec1a4a46/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27e8a95717c9f807ea1b4fc0e85da6813433011e", "url": "https://api.github.com/repos/rust-lang/rust/commits/27e8a95717c9f807ea1b4fc0e85da6813433011e", "html_url": "https://github.com/rust-lang/rust/commit/27e8a95717c9f807ea1b4fc0e85da6813433011e"}], "stats": {"total": 84, "additions": 55, "deletions": 29}, "files": [{"sha": "65a7081bd3881422cfec1439b75321202a3fdf2c", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 55, "deletions": 29, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/6184a71a391c3bbbf0f4fa3dcabcd6a2ec1a4a46/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6184a71a391c3bbbf0f4fa3dcabcd6a2ec1a4a46/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=6184a71a391c3bbbf0f4fa3dcabcd6a2ec1a4a46", "patch": "@@ -537,28 +537,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         )\n     }\n \n-impl<'tcx> TyCtxt<'tcx> {\n-    #[inline(never)]\n-    pub(super) fn get_query<Q: QueryDescription<TyCtxt<'tcx>> + 'tcx>(\n-        self,\n-        span: Span,\n-        key: Q::Key,\n-    ) -> Q::Value {\n-        debug!(\"ty::query::get_query<{}>(key={:?}, span={:?})\", Q::NAME, key, span);\n-\n-        try_get_cached(\n-            self,\n-            Q::query_state(self),\n-            key,\n-            |value, index| {\n-                self.dep_graph.read_index(index);\n-                value.clone()\n-            },\n-            |key, lookup| try_execute_query::<Q, _, _>(self, span, key, lookup),\n-        )\n-    }\n-}\n-\n     #[inline(always)]\n     fn try_execute_query<Q, CTX, K>(\n         tcx: CTX,\n@@ -797,15 +775,64 @@ impl<'tcx> TyCtxt<'tcx> {\n         (result, dep_node_index)\n     }\n \n-impl<'tcx> TyCtxt<'tcx> {\n+pub(super) trait QueryGetter: QueryContext {\n+    fn get_query<Q: QueryDescription<Self>>(\n+        self,\n+        span: Span,\n+        key: Q::Key,\n+    ) -> Q::Value;\n+\n+    /// Ensure that either this query has all green inputs or been executed.\n+    /// Executing `query::ensure(D)` is considered a read of the dep-node `D`.\n+    ///\n+    /// This function is particularly useful when executing passes for their\n+    /// side-effects -- e.g., in order to report errors for erroneous programs.\n+    ///\n+    /// Note: The optimization is only available during incr. comp.\n+    fn ensure_query<Q: QueryDescription<Self>>(self, key: Q::Key);\n+\n+    fn force_query<Q: QueryDescription<Self>>(\n+        self,\n+        key: Q::Key,\n+        span: Span,\n+        dep_node: DepNode<Self::DepKind>,\n+    );\n+}\n+\n+impl<CTX, K> QueryGetter for CTX\n+where\n+    CTX: QueryContext<DepKind = K>,\n+    CTX: HashStableContextProvider<<CTX as DepContext>::StableHashingContext>,\n+    K: DepKind,\n+{\n+    #[inline(never)]\n+    fn get_query<Q: QueryDescription<Self>>(\n+        self,\n+        span: Span,\n+        key: Q::Key,\n+    ) -> Q::Value {\n+        debug!(\"ty::query::get_query<{}>(key={:?}, span={:?})\", Q::NAME, key, span);\n+\n+        try_get_cached(\n+            self,\n+            Q::query_state(self),\n+            key,\n+            |value, index| {\n+                self.dep_graph().read_index(index);\n+                value.clone()\n+            },\n+            |key, lookup| try_execute_query::<Q, _, _>(self, span, key, lookup),\n+        )\n+    }\n+\n     /// Ensure that either this query has all green inputs or been executed.\n     /// Executing `query::ensure(D)` is considered a read of the dep-node `D`.\n     ///\n     /// This function is particularly useful when executing passes for their\n     /// side-effects -- e.g., in order to report errors for erroneous programs.\n     ///\n     /// Note: The optimization is only available during incr. comp.\n-    pub(super) fn ensure_query<Q: QueryDescription<TyCtxt<'tcx>> + 'tcx>(self, key: Q::Key) {\n+    fn ensure_query<Q: QueryDescription<Self>>(self, key: Q::Key) {\n         if Q::EVAL_ALWAYS {\n             let _ = self.get_query::<Q>(DUMMY_SP, key);\n             return;\n@@ -816,7 +843,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let dep_node = Q::to_dep_node(self, &key);\n \n-        match self.dep_graph.try_mark_green_and_read(self, &dep_node) {\n+        match self.dep_graph().try_mark_green_and_read(self, &dep_node) {\n             None => {\n                 // A None return from `try_mark_green_and_read` means that this is either\n                 // a new dep node or that the dep node has already been marked red.\n@@ -827,17 +854,16 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let _ = self.get_query::<Q>(DUMMY_SP, key);\n             }\n             Some((_, dep_node_index)) => {\n-                self.prof.query_cache_hit(dep_node_index.into());\n+                self.profiler().query_cache_hit(dep_node_index.into());\n             }\n         }\n     }\n \n-    #[allow(dead_code)]\n-    pub(super) fn force_query<Q: QueryDescription<TyCtxt<'tcx>> + 'tcx>(\n+    fn force_query<Q: QueryDescription<Self>>(\n         self,\n         key: Q::Key,\n         span: Span,\n-        dep_node: DepNode<crate::dep_graph::DepKind>,\n+        dep_node: DepNode<Self::DepKind>,\n     ) {\n         // We may be concurrently trying both execute and force a query.\n         // Ensure that only one of them runs the query."}]}