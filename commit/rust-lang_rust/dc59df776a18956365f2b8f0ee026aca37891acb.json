{"sha": "dc59df776a18956365f2b8f0ee026aca37891acb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNTlkZjc3NmExODk1NjM2NWYyYjhmMGVlMDI2YWNhMzc4OTFhY2I=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-01T14:26:34Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-02T15:17:20Z"}, "message": "middle: mem_categorization: remove dead code", "tree": {"sha": "83bada875f1cbfa72c5df1369f3ebd3a251edfc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83bada875f1cbfa72c5df1369f3ebd3a251edfc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc59df776a18956365f2b8f0ee026aca37891acb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc59df776a18956365f2b8f0ee026aca37891acb", "html_url": "https://github.com/rust-lang/rust/commit/dc59df776a18956365f2b8f0ee026aca37891acb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc59df776a18956365f2b8f0ee026aca37891acb/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "393bc08762de9d24517bce260e2d2564074d3aa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/393bc08762de9d24517bce260e2d2564074d3aa9", "html_url": "https://github.com/rust-lang/rust/commit/393bc08762de9d24517bce260e2d2564074d3aa9"}], "stats": {"total": 65, "additions": 1, "deletions": 64}, "files": [{"sha": "e376e66ca6f90c8ba76612db0c44e5d14e8c5aab", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 64, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/dc59df776a18956365f2b8f0ee026aca37891acb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc59df776a18956365f2b8f0ee026aca37891acb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=dc59df776a18956365f2b8f0ee026aca37891acb", "patch": "@@ -64,7 +64,7 @@\n \n use middle::ty;\n use middle::typeck;\n-use util::ppaux::{ty_to_str, region_ptr_to_str, Repr};\n+use util::ppaux::{ty_to_str, Repr};\n \n use syntax::ast::{MutImmutable, MutMutable};\n use syntax::ast;\n@@ -674,20 +674,6 @@ impl<TYPER:Typer> MemCategorizationContext<TYPER> {\n         }\n     }\n \n-    /// inherited mutability: used in cases where the mutability of a\n-    /// component is inherited from the base it is a part of. For\n-    /// example, a record field is mutable if it is declared mutable\n-    /// or if the container is mutable.\n-    pub fn inherited_mutability(&mut self,\n-                                base_m: MutabilityCategory,\n-                                interior_m: ast::Mutability)\n-                                -> MutabilityCategory {\n-        match interior_m {\n-            MutImmutable => base_m.inherit(),\n-            MutMutable => McDeclared\n-        }\n-    }\n-\n     pub fn cat_field<N:ast_node>(&mut self,\n                                  node: &N,\n                                  base_cmt: cmt,\n@@ -1114,13 +1100,6 @@ impl<TYPER:Typer> MemCategorizationContext<TYPER> {\n         Ok(())\n     }\n \n-    pub fn mut_to_str(&mut self, mutbl: ast::Mutability) -> ~str {\n-        match mutbl {\n-          MutMutable => ~\"mutable\",\n-          MutImmutable => ~\"immutable\"\n-        }\n-    }\n-\n     pub fn cmt_to_str(&self, cmt: cmt) -> ~str {\n         match cmt.cat {\n           cat_static_item => {\n@@ -1174,48 +1153,6 @@ impl<TYPER:Typer> MemCategorizationContext<TYPER> {\n           }\n         }\n     }\n-\n-    pub fn region_to_str(&self, r: ty::Region) -> ~str {\n-        region_ptr_to_str(self.tcx(), r)\n-    }\n-}\n-\n-/// The node_id here is the node of the expression that references the field.\n-/// This function looks it up in the def map in case the type happens to be\n-/// an enum to determine which variant is in use.\n-pub fn field_mutbl(tcx: &ty::ctxt,\n-                   base_ty: ty::t,\n-                   // FIXME #6993: change type to Name\n-                   f_name: ast::Ident,\n-                   node_id: ast::NodeId)\n-                -> Option<ast::Mutability> {\n-    // Need to refactor so that struct/enum fields can be treated uniformly.\n-    match ty::get(base_ty).sty {\n-      ty::ty_struct(did, _) => {\n-        let r = ty::lookup_struct_fields(tcx, did);\n-        for fld in r.iter() {\n-            if fld.name == f_name.name {\n-                return Some(ast::MutImmutable);\n-            }\n-        }\n-      }\n-      ty::ty_enum(..) => {\n-        match tcx.def_map.borrow().get_copy(&node_id) {\n-          ast::DefVariant(_, variant_id, _) => {\n-            let r = ty::lookup_struct_fields(tcx, variant_id);\n-            for fld in r.iter() {\n-                if fld.name == f_name.name {\n-                    return Some(ast::MutImmutable);\n-                }\n-            }\n-          }\n-          _ => {}\n-        }\n-      }\n-      _ => { }\n-    }\n-\n-    return None;\n }\n \n pub enum InteriorSafety {"}]}