{"sha": "544ef6cf35c2fbec9e425ef67bc73d1571b54135", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NGVmNmNmMzVjMmZiZWM5ZTQyNWVmNjdiYzczZDE1NzFiNTQxMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-26T16:46:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-26T16:46:49Z"}, "message": "auto merge of #8041 : dotdash/rust/const_if_else, r=huonw", "tree": {"sha": "c87f58eab89710de954ac9a4f161bcfd0f1776ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c87f58eab89710de954ac9a4f161bcfd0f1776ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/544ef6cf35c2fbec9e425ef67bc73d1571b54135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/544ef6cf35c2fbec9e425ef67bc73d1571b54135", "html_url": "https://github.com/rust-lang/rust/commit/544ef6cf35c2fbec9e425ef67bc73d1571b54135", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/544ef6cf35c2fbec9e425ef67bc73d1571b54135/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15ab6fde7f37155385b4072f64e89d722b970fd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/15ab6fde7f37155385b4072f64e89d722b970fd3", "html_url": "https://github.com/rust-lang/rust/commit/15ab6fde7f37155385b4072f64e89d722b970fd3"}, {"sha": "7078ab7324aef0ad04b4a79a514f2c1d59b73fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7078ab7324aef0ad04b4a79a514f2c1d59b73fe5", "html_url": "https://github.com/rust-lang/rust/commit/7078ab7324aef0ad04b4a79a514f2c1d59b73fe5"}], "stats": {"total": 72, "additions": 34, "deletions": 38}, "files": [{"sha": "690e488d21973d546160bf05d1351770c707a474", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/544ef6cf35c2fbec9e425ef67bc73d1571b54135/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544ef6cf35c2fbec9e425ef67bc73d1571b54135/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=544ef6cf35c2fbec9e425ef67bc73d1571b54135", "patch": "@@ -850,6 +850,12 @@ pub fn const_get_elt(cx: &CrateContext, v: ValueRef, us: &[c_uint])\n     }\n }\n \n+pub fn is_const(v: ValueRef) -> bool {\n+    unsafe {\n+        llvm::LLVMIsConstant(v) == True\n+    }\n+}\n+\n pub fn const_to_int(v: ValueRef) -> c_longlong {\n     unsafe {\n         llvm::LLVMConstIntGetSExtValue(v)"}, {"sha": "8c87766bbbe1f025b7914eabc0919aec155ec4bc", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 28, "deletions": 38, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/544ef6cf35c2fbec9e425ef67bc73d1571b54135/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544ef6cf35c2fbec9e425ef67bc73d1571b54135/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=544ef6cf35c2fbec9e425ef67bc73d1571b54135", "patch": "@@ -65,44 +65,36 @@ pub fn trans_if(bcx: @mut Block,\n \n     let _icx = push_ctxt(\"trans_if\");\n \n-    match cond.node {\n-        // `if true` and `if false` can be trans'd more efficiently,\n-        // by dropping branches that are known to be impossible.\n-        ast::expr_lit(@ref l) => match l.node {\n-            ast::lit_bool(true) => {\n-                // if true { .. } [else { .. }]\n-                let then_bcx_in = scope_block(bcx, thn.info(), \"if_true_then\");\n-                let then_bcx_out = trans_block(then_bcx_in, thn, dest);\n-                let then_bcx_out = trans_block_cleanups(then_bcx_out,\n-                                                        block_cleanups(then_bcx_in));\n-                Br(bcx, then_bcx_in.llbb);\n-                return then_bcx_out;\n+    let Result {bcx, val: cond_val} =\n+        expr::trans_to_datum(bcx, cond).to_result();\n+\n+    let cond_val = bool_to_i1(bcx, cond_val);\n+\n+    // Drop branches that are known to be impossible\n+    if is_const(cond_val) && !is_undef(cond_val) {\n+        if const_to_uint(cond_val) == 1 {\n+            // if true { .. } [else { .. }]\n+            return do with_scope(bcx, thn.info(), \"if_true_then\") |bcx| {\n+                let bcx_out = trans_block(bcx, thn, dest);\n+                trans_block_cleanups(bcx_out, block_cleanups(bcx))\n             }\n-            ast::lit_bool(false) => {\n-                match els {\n-                    // if false { .. } else { .. }\n-                    Some(elexpr) => {\n-                        let (else_bcx_in, else_bcx_out) =\n-                            trans_if_else(bcx, elexpr, dest, \"if_false_else\");\n-                        Br(bcx, else_bcx_in.llbb);\n-                        return else_bcx_out;\n+        } else {\n+            match els {\n+                // if false { .. } else { .. }\n+                Some(elexpr) => {\n+                    return do with_scope(bcx, elexpr.info(), \"if_false_then\") |bcx| {\n+                        let bcx_out = trans_if_else(bcx, elexpr, dest);\n+                        trans_block_cleanups(bcx_out, block_cleanups(bcx))\n                     }\n-                    // if false { .. }\n-                    None => return bcx,\n                 }\n+                // if false { .. }\n+                None => return bcx,\n             }\n-            _ => {}\n-        },\n-        _ => {}\n+        }\n     }\n \n-    let Result {bcx, val: cond_val} =\n-        expr::trans_to_datum(bcx, cond).to_result();\n-\n     let then_bcx_in = scope_block(bcx, thn.info(), \"then\");\n \n-    let cond_val = bool_to_i1(bcx, cond_val);\n-\n     let then_bcx_out = trans_block(then_bcx_in, thn, dest);\n     let then_bcx_out = trans_block_cleanups(then_bcx_out,\n                                             block_cleanups(then_bcx_in));\n@@ -113,7 +105,8 @@ pub fn trans_if(bcx: @mut Block,\n     // 'else' context\n     let (else_bcx_in, next_bcx) = match els {\n       Some(elexpr) => {\n-          let (else_bcx_in, else_bcx_out) = trans_if_else(bcx, elexpr, dest, \"else\");\n+          let else_bcx_in = scope_block(bcx, elexpr.info(), \"else\");\n+          let else_bcx_out = trans_if_else(else_bcx_in, elexpr, dest);\n           (else_bcx_in, join_blocks(bcx, [then_bcx_out, else_bcx_out]))\n       }\n       _ => {\n@@ -131,9 +124,8 @@ pub fn trans_if(bcx: @mut Block,\n     return next_bcx;\n \n     // trans `else [ if { .. } ... | { .. } ]`\n-    fn trans_if_else(bcx: @mut Block, elexpr: @ast::expr,\n-                     dest: expr::Dest, scope_name: &str) -> (@mut Block, @mut Block) {\n-        let else_bcx_in = scope_block(bcx, elexpr.info(), scope_name);\n+    fn trans_if_else(else_bcx_in: @mut Block, elexpr: @ast::expr,\n+                     dest: expr::Dest) -> @mut Block {\n         let else_bcx_out = match elexpr.node {\n             ast::expr_if(_, _, _) => {\n                 let elseif_blk = ast_util::block_from_expr(elexpr);\n@@ -143,11 +135,9 @@ pub fn trans_if(bcx: @mut Block,\n                 trans_block(else_bcx_in, blk, dest)\n             }\n             // would be nice to have a constraint on ifs\n-            _ => bcx.tcx().sess.bug(\"strange alternative in if\")\n+            _ => else_bcx_in.tcx().sess.bug(\"strange alternative in if\")\n         };\n-        let else_bcx_out = trans_block_cleanups(else_bcx_out,\n-                                                block_cleanups(else_bcx_in));\n-        (else_bcx_in, else_bcx_out)\n+        trans_block_cleanups(else_bcx_out, block_cleanups(else_bcx_in))\n     }\n }\n "}]}