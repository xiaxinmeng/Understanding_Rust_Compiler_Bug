{"sha": "0c609a4c1fc182298b920c61d1b32c9a1deb5776", "node_id": "C_kwDOAAsO6NoAKDBjNjA5YTRjMWZjMTgyMjk4YjkyMGM2MWQxYjMyYzlhMWRlYjU3NzY", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-07-19T21:47:49Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-07-29T22:26:10Z"}, "message": "Change enclosing_body_owner to return LocalDefId\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "eeca8a17a68b637395d18a913b476a0f2400c766", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeca8a17a68b637395d18a913b476a0f2400c766"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c609a4c1fc182298b920c61d1b32c9a1deb5776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c609a4c1fc182298b920c61d1b32c9a1deb5776", "html_url": "https://github.com/rust-lang/rust/commit/0c609a4c1fc182298b920c61d1b32c9a1deb5776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c609a4c1fc182298b920c61d1b32c9a1deb5776/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16513d689e4fe30e58a37dd773af5be9210ebcbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/16513d689e4fe30e58a37dd773af5be9210ebcbd", "html_url": "https://github.com/rust-lang/rust/commit/16513d689e4fe30e58a37dd773af5be9210ebcbd"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "ac26bc9c7f44fb90031962673d69b601ee70e005", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c609a4c1fc182298b920c61d1b32c9a1deb5776/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c609a4c1fc182298b920c61d1b32c9a1deb5776/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=0c609a4c1fc182298b920c61d1b32c9a1deb5776", "patch": "@@ -853,7 +853,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let closure_id = self.mir_hir_id();\n         let fn_call_id = hir.get_parent_node(closure_id);\n         let node = hir.get(fn_call_id);\n-        let item_id = hir.enclosing_body_owner(fn_call_id);\n+        let def_id = hir.enclosing_body_owner(fn_call_id);\n         let mut look_at_return = true;\n         // If we can detect the expression to be an `fn` call where the closure was an argument,\n         // we point at the `fn` definition argument...\n@@ -864,7 +864,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 .filter(|(_, arg)| arg.hir_id == closure_id)\n                 .map(|(pos, _)| pos)\n                 .next();\n-            let def_id = hir.local_def_id(item_id);\n             let tables = self.infcx.tcx.typeck(def_id);\n             if let Some(ty::FnDef(def_id, _)) =\n                 tables.node_type_opt(func.hir_id).as_ref().map(|ty| ty.kind())"}, {"sha": "47b04c33ec1cd67b131be9439b977f2997b3c862", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c609a4c1fc182298b920c61d1b32c9a1deb5776/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c609a4c1fc182298b920c61d1b32c9a1deb5776/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=0c609a4c1fc182298b920c61d1b32c9a1deb5776", "patch": "@@ -396,10 +396,10 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn enclosing_body_owner(self, hir_id: HirId) -> HirId {\n+    pub fn enclosing_body_owner(self, hir_id: HirId) -> LocalDefId {\n         for (parent, _) in self.parent_iter(hir_id) {\n-            if let Some(local_did) = parent.as_owner() && let Some(body) = self.maybe_body_owned_by(local_did) {\n-                return self.body_owner(body);\n+            if let Some(body) = self.find(parent).map(associated_body).flatten() {\n+                return self.body_owner_def_id(body);\n             }\n         }\n \n@@ -671,7 +671,7 @@ impl<'hir> Map<'hir> {\n     /// Whether the expression pointed at by `hir_id` belongs to a `const` evaluation context.\n     /// Used exclusively for diagnostics, to avoid suggestion function calls.\n     pub fn is_inside_const_context(self, hir_id: HirId) -> bool {\n-        self.body_const_context(self.local_def_id(self.enclosing_body_owner(hir_id))).is_some()\n+        self.body_const_context(self.enclosing_body_owner(hir_id)).is_some()\n     }\n \n     /// Retrieves the `HirId` for `id`'s enclosing method, unless there's a"}, {"sha": "55ad83f8975841cb15713ac7054b0574c2ac9574", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c609a4c1fc182298b920c61d1b32c9a1deb5776/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c609a4c1fc182298b920c61d1b32c9a1deb5776/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=0c609a4c1fc182298b920c61d1b32c9a1deb5776", "patch": "@@ -626,7 +626,7 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n     if tcx.is_closure(def.did.to_def_id()) {\n         let hir = tcx.hir();\n         let owner = hir.enclosing_body_owner(hir.local_def_id_to_hir_id(def.did));\n-        tcx.ensure().thir_check_unsafety(hir.local_def_id(owner));\n+        tcx.ensure().thir_check_unsafety(owner);\n         return;\n     }\n "}, {"sha": "7b327812cc9ee61045fac59d5baf55b1ddd5aad5", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c609a4c1fc182298b920c61d1b32c9a1deb5776/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c609a4c1fc182298b920c61d1b32c9a1deb5776/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=0c609a4c1fc182298b920c61d1b32c9a1deb5776", "patch": "@@ -766,10 +766,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 // If this didn't hold, we would not have to report an error in\n                 // the first place.\n-                assert_ne!(hir::HirId::make_owner(encl_item_id), encl_body_owner_id);\n+                assert_ne!(encl_item_id, encl_body_owner_id);\n \n-                let encl_body_id =\n-                    self.tcx.hir().body_owned_by(self.tcx.hir().local_def_id(encl_body_owner_id));\n+                let encl_body_id = self.tcx.hir().body_owned_by(encl_body_owner_id);\n                 let encl_body = self.tcx.hir().body(encl_body_id);\n \n                 err.encl_body_span = Some(encl_body.value.span);"}, {"sha": "c1c021a6d7d9e35b5516eaf31a25ab2113f6398a", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c609a4c1fc182298b920c61d1b32c9a1deb5776/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c609a4c1fc182298b920c61d1b32c9a1deb5776/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=0c609a4c1fc182298b920c61d1b32c9a1deb5776", "patch": "@@ -58,7 +58,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(\"FnCtxt::check_asm: {} deferred checks\", deferred_asm_checks.len());\n         for (asm, hir_id) in deferred_asm_checks.drain(..) {\n             let enclosing_id = self.tcx.hir().enclosing_body_owner(hir_id);\n-            InlineAsmCtxt::new_in_fn(self).check_asm(asm, enclosing_id);\n+            InlineAsmCtxt::new_in_fn(self)\n+                .check_asm(asm, self.tcx.hir().local_def_id_to_hir_id(enclosing_id));\n         }\n     }\n "}, {"sha": "534ddfa9531c160494c75f86564078a4be572f6c", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c609a4c1fc182298b920c61d1b32c9a1deb5776/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c609a4c1fc182298b920c61d1b32c9a1deb5776/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=0c609a4c1fc182298b920c61d1b32c9a1deb5776", "patch": "@@ -100,7 +100,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 ExprKind::MethodCall(segment, ..) | ExprKind::Path(QPath::TypeRelative(_, segment)),\n             ..\n         }) => {\n-            let body_owner = tcx.hir().local_def_id(tcx.hir().enclosing_body_owner(hir_id));\n+            let body_owner = tcx.hir().enclosing_body_owner(hir_id);\n             let tables = tcx.typeck(body_owner);\n             // This may fail in case the method/path does not actually exist.\n             // As there is no relevant param for `def_id`, we simply return\n@@ -134,7 +134,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                         | ExprKind::Struct(&QPath::Resolved(_, path), ..),\n                     ..\n                 }) => {\n-                    let body_owner = tcx.hir().local_def_id(tcx.hir().enclosing_body_owner(hir_id));\n+                    let body_owner = tcx.hir().enclosing_body_owner(hir_id);\n                     let _tables = tcx.typeck(body_owner);\n                     &*path\n                 }"}, {"sha": "50bb008098dcbc16c674ee49d0cae5d2de32cfdc", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c609a4c1fc182298b920c61d1b32c9a1deb5776/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c609a4c1fc182298b920c61d1b32c9a1deb5776/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=0c609a4c1fc182298b920c61d1b32c9a1deb5776", "patch": "@@ -1353,7 +1353,7 @@ pub fn is_integer_const(cx: &LateContext<'_>, e: &Expr<'_>, value: u128) -> bool\n     if is_integer_literal(e, value) {\n         return true;\n     }\n-    let enclosing_body = cx.tcx.hir().local_def_id(cx.tcx.hir().enclosing_body_owner(e.hir_id));\n+    let enclosing_body = cx.tcx.hir().enclosing_body_owner(e.hir_id);\n     if let Some((Constant::Int(v), _)) = constant(cx, cx.tcx.typeck(enclosing_body), e) {\n         return value == v;\n     }"}]}