{"sha": "2b2318e695e85d64c6a976a810620c77b7ccba6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMjMxOGU2OTVlODVkNjRjNmE5NzZhODEwNjIwYzc3YjdjY2JhNmU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-07T16:16:50Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-07T16:16:50Z"}, "message": "Remove dummy ProcMacroClient in favor of Option", "tree": {"sha": "2ec1166251fd2791cbd77372dbae29aa51522a3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ec1166251fd2791cbd77372dbae29aa51522a3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b2318e695e85d64c6a976a810620c77b7ccba6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2318e695e85d64c6a976a810620c77b7ccba6e", "html_url": "https://github.com/rust-lang/rust/commit/2b2318e695e85d64c6a976a810620c77b7ccba6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b2318e695e85d64c6a976a810620c77b7ccba6e/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb21a215be0968d1102aba842c0fdedcd401cb15", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb21a215be0968d1102aba842c0fdedcd401cb15", "html_url": "https://github.com/rust-lang/rust/commit/fb21a215be0968d1102aba842c0fdedcd401cb15"}], "stats": {"total": 130, "additions": 59, "deletions": 71}, "files": [{"sha": "0d061fd536b2a59005dafaadd265c68b28b2c354", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 28, "deletions": 45, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/2b2318e695e85d64c6a976a810620c77b7ccba6e/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2318e695e85d64c6a976a810620c77b7ccba6e/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=2b2318e695e85d64c6a976a810620c77b7ccba6e", "patch": "@@ -57,15 +57,10 @@ impl tt::TokenExpander for ProcMacroProcessExpander {\n     }\n }\n \n-#[derive(Debug)]\n-enum ProcMacroClientKind {\n-    Process { process: Arc<ProcMacroProcessSrv>, thread: ProcMacroProcessThread },\n-    Dummy,\n-}\n-\n #[derive(Debug)]\n pub struct ProcMacroClient {\n-    kind: ProcMacroClientKind,\n+    process: Arc<ProcMacroProcessSrv>,\n+    thread: ProcMacroProcessThread,\n }\n \n impl ProcMacroClient {\n@@ -74,47 +69,35 @@ impl ProcMacroClient {\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n     ) -> io::Result<ProcMacroClient> {\n         let (thread, process) = ProcMacroProcessSrv::run(process_path, args)?;\n-        Ok(ProcMacroClient {\n-            kind: ProcMacroClientKind::Process { process: Arc::new(process), thread },\n-        })\n-    }\n-\n-    pub fn dummy() -> ProcMacroClient {\n-        ProcMacroClient { kind: ProcMacroClientKind::Dummy }\n+        Ok(ProcMacroClient { process: Arc::new(process), thread })\n     }\n \n     pub fn by_dylib_path(&self, dylib_path: &Path) -> Vec<ProcMacro> {\n-        match &self.kind {\n-            ProcMacroClientKind::Dummy => vec![],\n-            ProcMacroClientKind::Process { process, .. } => {\n-                let macros = match process.find_proc_macros(dylib_path) {\n-                    Err(err) => {\n-                        eprintln!(\"Failed to find proc macros. Error: {:#?}\", err);\n-                        return vec![];\n-                    }\n-                    Ok(macros) => macros,\n-                };\n-\n-                macros\n-                    .into_iter()\n-                    .map(|(name, kind)| {\n-                        let name = SmolStr::new(&name);\n-                        let kind = match kind {\n-                            ProcMacroKind::CustomDerive => base_db::ProcMacroKind::CustomDerive,\n-                            ProcMacroKind::FuncLike => base_db::ProcMacroKind::FuncLike,\n-                            ProcMacroKind::Attr => base_db::ProcMacroKind::Attr,\n-                        };\n-                        let expander: Arc<dyn tt::TokenExpander> =\n-                            Arc::new(ProcMacroProcessExpander {\n-                                process: process.clone(),\n-                                name: name.clone(),\n-                                dylib_path: dylib_path.into(),\n-                            });\n-\n-                        ProcMacro { name, kind, expander }\n-                    })\n-                    .collect()\n+        let macros = match self.process.find_proc_macros(dylib_path) {\n+            Err(err) => {\n+                eprintln!(\"Failed to find proc macros. Error: {:#?}\", err);\n+                return vec![];\n             }\n-        }\n+            Ok(macros) => macros,\n+        };\n+\n+        macros\n+            .into_iter()\n+            .map(|(name, kind)| {\n+                let name = SmolStr::new(&name);\n+                let kind = match kind {\n+                    ProcMacroKind::CustomDerive => base_db::ProcMacroKind::CustomDerive,\n+                    ProcMacroKind::FuncLike => base_db::ProcMacroKind::FuncLike,\n+                    ProcMacroKind::Attr => base_db::ProcMacroKind::Attr,\n+                };\n+                let expander: Arc<dyn tt::TokenExpander> = Arc::new(ProcMacroProcessExpander {\n+                    process: self.process.clone(),\n+                    name: name.clone(),\n+                    dylib_path: dylib_path.into(),\n+                });\n+\n+                ProcMacro { name, kind, expander }\n+            })\n+            .collect()\n     }\n }"}, {"sha": "ab5cbae11ea74cd4ce740ab949ddda45bdb646bb", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2b2318e695e85d64c6a976a810620c77b7ccba6e/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2318e695e85d64c6a976a810620c77b7ccba6e/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=2b2318e695e85d64c6a976a810620c77b7ccba6e", "patch": "@@ -2,10 +2,14 @@\n //! metadata` or `rust-project.json`) into representation stored in the salsa\n //! database -- `CrateGraph`.\n \n-use std::{fmt, fs, path::Component, process::Command};\n+use std::{\n+    fmt, fs,\n+    path::{Component, Path},\n+    process::Command,\n+};\n \n use anyhow::{Context, Result};\n-use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId};\n+use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId, ProcMacro};\n use cfg::CfgOptions;\n use paths::{AbsPath, AbsPathBuf};\n use proc_macro_api::ProcMacroClient;\n@@ -194,15 +198,20 @@ impl ProjectWorkspace {\n     pub fn to_crate_graph(\n         &self,\n         target: Option<&str>,\n-        proc_macro_client: &ProcMacroClient,\n+        proc_macro_client: Option<&ProcMacroClient>,\n         load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     ) -> CrateGraph {\n+        let proc_macro_loader = |path: &Path| match proc_macro_client {\n+            Some(client) => client.by_dylib_path(path),\n+            None => Vec::new(),\n+        };\n+\n         let mut crate_graph = match self {\n             ProjectWorkspace::Json { project, sysroot } => {\n-                project_json_to_crate_graph(target, proc_macro_client, load, project, sysroot)\n+                project_json_to_crate_graph(target, &proc_macro_loader, load, project, sysroot)\n             }\n             ProjectWorkspace::Cargo { cargo, sysroot, rustc } => {\n-                cargo_to_crate_graph(target, proc_macro_client, load, cargo, sysroot, rustc)\n+                cargo_to_crate_graph(target, &proc_macro_loader, load, cargo, sysroot, rustc)\n             }\n         };\n         if crate_graph.patch_cfg_if() {\n@@ -216,7 +225,7 @@ impl ProjectWorkspace {\n \n fn project_json_to_crate_graph(\n     target: Option<&str>,\n-    proc_macro_client: &ProcMacroClient,\n+    proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     project: &ProjectJson,\n     sysroot: &Option<Sysroot>,\n@@ -236,8 +245,7 @@ fn project_json_to_crate_graph(\n         })\n         .map(|(crate_id, krate, file_id)| {\n             let env = krate.env.clone().into_iter().collect();\n-            let proc_macro =\n-                krate.proc_macro_dylib_path.clone().map(|it| proc_macro_client.by_dylib_path(&it));\n+            let proc_macro = krate.proc_macro_dylib_path.clone().map(|it| proc_macro_loader(&it));\n \n             let target = krate.target.as_deref().or(target);\n             let target_cfgs =\n@@ -279,7 +287,7 @@ fn project_json_to_crate_graph(\n \n fn cargo_to_crate_graph(\n     target: Option<&str>,\n-    proc_macro_client: &ProcMacroClient,\n+    proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     cargo: &CargoWorkspace,\n     sysroot: &Sysroot,\n@@ -309,7 +317,7 @@ fn cargo_to_crate_graph(\n                     &mut crate_graph,\n                     &cargo[pkg],\n                     &cfg_options,\n-                    proc_macro_client,\n+                    proc_macro_loader,\n                     file_id,\n                 );\n                 if cargo[tgt].kind == TargetKind::Lib {\n@@ -385,7 +393,7 @@ fn cargo_to_crate_graph(\n                         &mut crate_graph,\n                         &rustc_workspace[pkg],\n                         &cfg_options,\n-                        proc_macro_client,\n+                        proc_macro_loader,\n                         file_id,\n                     );\n                     pkg_to_lib_crate.insert(pkg, crate_id);\n@@ -433,7 +441,7 @@ fn add_target_crate_root(\n     crate_graph: &mut CrateGraph,\n     pkg: &cargo_workspace::PackageData,\n     cfg_options: &CfgOptions,\n-    proc_macro_client: &ProcMacroClient,\n+    proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n     file_id: FileId,\n ) -> CrateId {\n     let edition = pkg.edition;\n@@ -452,11 +460,8 @@ fn add_target_crate_root(\n             env.set(\"OUT_DIR\", out_dir);\n         }\n     }\n-    let proc_macro = pkg\n-        .proc_macro_dylib_path\n-        .as_ref()\n-        .map(|it| proc_macro_client.by_dylib_path(&it))\n-        .unwrap_or_default();\n+    let proc_macro =\n+        pkg.proc_macro_dylib_path.as_ref().map(|it| proc_macro_loader(&it)).unwrap_or_default();\n \n     let display_name = CrateDisplayName::from_canonical_name(pkg.name.clone());\n     let crate_id = crate_graph.add_crate_root("}, {"sha": "d51f4a93ad018df8909596bac9a007adb4e6d5a5", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b2318e695e85d64c6a976a810620c77b7ccba6e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2318e695e85d64c6a976a810620c77b7ccba6e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=2b2318e695e85d64c6a976a810620c77b7ccba6e", "patch": "@@ -33,12 +33,12 @@ pub fn load_cargo(\n \n     let proc_macro_client = if with_proc_macro {\n         let path = std::env::current_exe()?;\n-        ProcMacroClient::extern_process(path, &[\"proc-macro\"]).unwrap()\n+        Some(ProcMacroClient::extern_process(path, &[\"proc-macro\"]).unwrap())\n     } else {\n-        ProcMacroClient::dummy()\n+        None\n     };\n \n-    let crate_graph = ws.to_crate_graph(None, &proc_macro_client, &mut |path: &AbsPath| {\n+    let crate_graph = ws.to_crate_graph(None, proc_macro_client.as_ref(), &mut |path: &AbsPath| {\n         let contents = loader.load_sync(path);\n         let path = vfs::VfsPath::from(path.to_path_buf());\n         vfs.set_file_contents(path.clone(), contents);"}, {"sha": "a27495d0d80a3ba7fc5a6b185e4e615e5f379543", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b2318e695e85d64c6a976a810620c77b7ccba6e/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2318e695e85d64c6a976a810620c77b7ccba6e/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=2b2318e695e85d64c6a976a810620c77b7ccba6e", "patch": "@@ -75,7 +75,7 @@ pub(crate) struct GlobalState {\n     pub(crate) shutdown_requested: bool,\n     pub(crate) status: Status,\n     pub(crate) source_root_config: SourceRootConfig,\n-    pub(crate) proc_macro_client: ProcMacroClient,\n+    pub(crate) proc_macro_client: Option<ProcMacroClient>,\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n     latest_requests: Arc<RwLock<LatestRequests>>,\n }\n@@ -127,7 +127,7 @@ impl GlobalState {\n             shutdown_requested: false,\n             status: Status::default(),\n             source_root_config: SourceRootConfig::default(),\n-            proc_macro_client: ProcMacroClient::dummy(),\n+            proc_macro_client: None,\n             workspaces: Arc::new(Vec::new()),\n             latest_requests: Default::default(),\n         }"}, {"sha": "79e39e3a5986ec3ed67fe22c63605953b532946d", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b2318e695e85d64c6a976a810620c77b7ccba6e/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2318e695e85d64c6a976a810620c77b7ccba6e/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=2b2318e695e85d64c6a976a810620c77b7ccba6e", "patch": "@@ -171,16 +171,16 @@ impl GlobalState {\n         let project_folders = ProjectFolders::new(&workspaces);\n \n         self.proc_macro_client = match &self.config.proc_macro_srv {\n-            None => ProcMacroClient::dummy(),\n+            None => None,\n             Some((path, args)) => match ProcMacroClient::extern_process(path.into(), args) {\n-                Ok(it) => it,\n+                Ok(it) => Some(it),\n                 Err(err) => {\n                     log::error!(\n                         \"Failed to run proc_macro_srv from path {}, error: {:?}\",\n                         path.display(),\n                         err\n                     );\n-                    ProcMacroClient::dummy()\n+                    None\n                 }\n             },\n         };\n@@ -212,7 +212,7 @@ impl GlobalState {\n             for ws in workspaces.iter() {\n                 crate_graph.extend(ws.to_crate_graph(\n                     self.config.cargo.target.as_deref(),\n-                    &self.proc_macro_client,\n+                    self.proc_macro_client.as_ref(),\n                     &mut load,\n                 ));\n             }"}]}