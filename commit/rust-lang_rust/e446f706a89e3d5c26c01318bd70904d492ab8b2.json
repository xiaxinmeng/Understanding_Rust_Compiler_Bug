{"sha": "e446f706a89e3d5c26c01318bd70904d492ab8b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NDZmNzA2YTg5ZTNkNWMyNmMwMTMxOGJkNzA5MDRkNDkyYWI4YjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-14T15:06:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-22T22:56:24Z"}, "message": "put the \"unit test\" logic into libtest\n\nAlso make `std::termination` module public and rename feature.\n\nThe lib feature needs a different name from the language feature.", "tree": {"sha": "c6acae38a028ee6bae2dfc6c4c2bc2ce4bcf38dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6acae38a028ee6bae2dfc6c4c2bc2ce4bcf38dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e446f706a89e3d5c26c01318bd70904d492ab8b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e446f706a89e3d5c26c01318bd70904d492ab8b2", "html_url": "https://github.com/rust-lang/rust/commit/e446f706a89e3d5c26c01318bd70904d492ab8b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e446f706a89e3d5c26c01318bd70904d492ab8b2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0625d4c282a9fa2a5ba3c6448017898baccfcf9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0625d4c282a9fa2a5ba3c6448017898baccfcf9a", "html_url": "https://github.com/rust-lang/rust/commit/0625d4c282a9fa2a5ba3c6448017898baccfcf9a"}], "stats": {"total": 101, "additions": 47, "deletions": 54}, "files": [{"sha": "b247d121648f68dc3ac042826b6e5a01005128c6", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e446f706a89e3d5c26c01318bd70904d492ab8b2/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e446f706a89e3d5c26c01318bd70904d492ab8b2/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e446f706a89e3d5c26c01318bd70904d492ab8b2", "patch": "@@ -501,11 +501,10 @@ mod memchr;\n // The runtime entry point and a few unstable public functions used by the\n // compiler\n pub mod rt;\n-// The trait to support returning arbitrary types in the main function\n-mod termination;\n \n+// The trait to support returning arbitrary types in the main function\n #[unstable(feature = \"termination_trait\", issue = \"43301\")]\n-pub use self::termination::Termination;\n+pub mod termination;\n \n // Include a number of private modules that exist solely to provide\n // the rustdoc documentation for primitive types. Using `include!`"}, {"sha": "203870766a9ab2b46bc219ee1302c68394925f57", "filename": "src/libstd/termination.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e446f706a89e3d5c26c01318bd70904d492ab8b2/src%2Flibstd%2Ftermination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e446f706a89e3d5c26c01318bd70904d492ab8b2/src%2Flibstd%2Ftermination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftermination.rs?ref=e446f706a89e3d5c26c01318bd70904d492ab8b2", "patch": "@@ -8,7 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! Defines the meaning of the return value from `main`, and hence\n+//! controls what happens in a Rust program after `main` returns.\n+\n use fmt::Debug;\n+\n #[cfg(target_arch = \"wasm32\")]\n mod exit {\n     pub const SUCCESS: i32 = 0;\n@@ -30,28 +34,21 @@ mod exit {\n /// The default implementations are returning `libc::EXIT_SUCCESS` to indicate\n /// a successful execution. In case of a failure, `libc::EXIT_FAILURE` is returned.\n #[cfg_attr(not(test), lang = \"termination\")]\n-#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n #[rustc_on_unimplemented =\n   \"`main` can only return types that implement {Termination}, not `{Self}`\"]\n pub trait Termination {\n     /// Is called to get the representation of the value as status code.\n     /// This status code is returned to the operating system.\n     fn report(self) -> i32;\n-\n-    /// Invoked when unit tests terminate. Should panic if the unit\n-    /// test is considered a failure. By default, invokes `report()`\n-    /// and checks for a `0` result.\n-    fn assert_unit_test_successful(self) where Self: Sized {\n-        assert_eq!(self.report(), 0);\n-    }\n }\n \n-#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl Termination for () {\n     fn report(self) -> i32 { exit::SUCCESS }\n }\n \n-#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl<T: Termination, E: Debug> Termination for Result<T, E> {\n     fn report(self) -> i32 {\n         match self {\n@@ -64,19 +61,19 @@ impl<T: Termination, E: Debug> Termination for Result<T, E> {\n     }\n }\n \n-#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl Termination for ! {\n     fn report(self) -> i32 { unreachable!(); }\n }\n \n-#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl Termination for bool {\n     fn report(self) -> i32 {\n         if self { exit::SUCCESS } else { exit::FAILURE }\n     }\n }\n \n-#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl Termination for i32 {\n     fn report(self) -> i32 {\n         self"}, {"sha": "b48713fcf7aa12a0f3bde054dabc388f6e9e44e3", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 24, "deletions": 36, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e446f706a89e3d5c26c01318bd70904d492ab8b2/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e446f706a89e3d5c26c01318bd70904d492ab8b2/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=e446f706a89e3d5c26c01318bd70904d492ab8b2", "patch": "@@ -746,48 +746,36 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n     };\n     visible_path.extend(path);\n \n-    // If termination feature is enabled, create a wrapper that invokes the fn\n-    // like this:\n+    // Rather than directly give the test function to the test\n+    // harness, we create a wrapper like this:\n     //\n-    //     fn wrapper() {\n-    //         assert_eq!(0, real_function().report());\n-    //     }\n+    //     || test::assert_test_result(real_function())\n     //\n-    // and then put a reference to `wrapper` into the test descriptor. Otherwise,\n-    // just put a direct reference to `real_function`.\n+    // this will coerce into a fn pointer that is specialized to the\n+    // actual return type of `real_function` (Typically `()`, but not always).\n     let fn_expr = {\n-        let base_fn_expr = ecx.expr_path(ecx.path_global(span, visible_path));\n-        if cx.features.termination_trait {\n-            // ::std::Termination::assert_unit_test_successful\n-            let assert_unit_test_successful = ecx.path_global(\n+        // construct `real_function()` (this will be inserted into the overall expr)\n+        let real_function_expr = ecx.expr_path(ecx.path_global(span, visible_path));\n+        // construct path `test::assert_test_result`\n+        let assert_test_result = test_path(\"assert_test_result\");\n+        // construct `|| {..}`\n+        ecx.lambda(\n+            span,\n+            vec![],\n+            // construct `assert_test_result(..)`\n+            ecx.expr_call(\n                 span,\n+                ecx.expr_path(assert_test_result),\n                 vec![\n-                    ecx.ident_of(\"std\"),\n-                    ecx.ident_of(\"Termination\"),\n-                    ecx.ident_of(\"assert_unit_test_successful\"),\n+                    // construct `real_function()`\n+                    ecx.expr_call(\n+                        span,\n+                        real_function_expr,\n+                        vec![],\n+                    )\n                 ],\n-            );\n-            // || {..}\n-            ecx.lambda(\n-                span,\n-                vec![],\n-                // ::std::Termination::assert_unit_test_successful(..)\n-                ecx.expr_call(\n-                    span,\n-                    ecx.expr_path(assert_unit_test_successful),\n-                    vec![\n-                        // $base_fn_expr()\n-                        ecx.expr_call(\n-                            span,\n-                            base_fn_expr,\n-                            vec![],\n-                        )\n-                    ],\n-                ),\n-            )\n-        } else {\n-            base_fn_expr\n-        }\n+            ),\n+        )\n     };\n \n     let variant_name = if test.bench { \"StaticBenchFn\" } else { \"StaticTestFn\" };"}, {"sha": "932952d649bdfd0bf5c051b3eae41eb306dcebfa", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e446f706a89e3d5c26c01318bd70904d492ab8b2/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e446f706a89e3d5c26c01318bd70904d492ab8b2/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=e446f706a89e3d5c26c01318bd70904d492ab8b2", "patch": "@@ -40,6 +40,7 @@\n #![feature(set_stdio)]\n #![feature(panic_unwind)]\n #![feature(staged_api)]\n+#![feature(termination_trait_lib)]\n \n extern crate getopts;\n extern crate term;\n@@ -69,6 +70,7 @@ use std::iter::repeat;\n use std::path::PathBuf;\n use std::sync::mpsc::{channel, Sender};\n use std::sync::{Arc, Mutex};\n+use std::termination::Termination;\n use std::thread;\n use std::time::{Instant, Duration};\n use std::borrow::Cow;\n@@ -322,6 +324,13 @@ pub fn test_main_static(tests: &[TestDescAndFn]) {\n     test_main(&args, owned_tests, Options::new())\n }\n \n+/// Invoked when unit tests terminate. Should panic if the unit\n+/// test is considered a failure. By default, invokes `report()`\n+/// and checks for a `0` result.\n+pub fn assert_test_result<T: Termination>(result: T) {\n+    assert_eq!(result.report(), 0);\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub enum ColorConfig {\n     AutoColor,"}, {"sha": "2da518519521f448c300129fbf50df97cb5fa726", "filename": "src/test/compile-fail/rfc-1937-termination-trait/termination-trait-main-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e446f706a89e3d5c26c01318bd70904d492ab8b2/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e446f706a89e3d5c26c01318bd70904d492ab8b2/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.rs?ref=e446f706a89e3d5c26c01318bd70904d492ab8b2", "patch": "@@ -10,6 +10,6 @@\n #![feature(termination_trait)]\n \n fn main() -> char {\n-//~^ ERROR: the trait bound `char: std::Termination` is not satisfied\n+//~^ ERROR: the trait bound `char: std::termination::Termination` is not satisfied\n     ' '\n }"}, {"sha": "fac60d6d39971f6d271c1192b045a4d982a806d5", "filename": "src/test/compile-fail/rfc-1937-termination-trait/termination-trait-not-satisfied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e446f706a89e3d5c26c01318bd70904d492ab8b2/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-not-satisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e446f706a89e3d5c26c01318bd70904d492ab8b2/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-not-satisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-not-satisfied.rs?ref=e446f706a89e3d5c26c01318bd70904d492ab8b2", "patch": "@@ -12,6 +12,6 @@\n \n struct ReturnType {}\n \n-fn main() -> ReturnType { //~ ERROR `ReturnType: std::Termination` is not satisfied\n+fn main() -> ReturnType { //~ ERROR `ReturnType: std::termination::Termination` is not satisfied\n     ReturnType {}\n }"}]}