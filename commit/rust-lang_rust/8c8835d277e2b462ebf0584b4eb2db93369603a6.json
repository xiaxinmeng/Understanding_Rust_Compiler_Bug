{"sha": "8c8835d277e2b462ebf0584b4eb2db93369603a6", "node_id": "C_kwDOAAsO6NoAKDhjODgzNWQyNzdlMmI0NjJlYmYwNTg0YjRlYjJkYjkzMzY5NjAzYTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-19T03:40:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-19T03:40:53Z"}, "message": "Rollup merge of #89956 - JohnTitor:suggest-case-insensitive-match-names, r=estebank\n\nSuggest a case insensitive match name regardless of levenshtein distance\n\nFixes #86170\n\nCurrently, `find_best_match_for_name` only returns a case insensitive match name depending on a Levenshtein distance. It's a bit unfortunate that that hides some suggestions for typos like `Bar` -> `BAR`. That idea is from https://github.com/rust-lang/rust/pull/46347#discussion_r153701834, but I think it still makes some sense to show a candidate when we find a case insensitive match name as it's more like a typo.\nSkipped the `candidate != lookup` check because the current (i.e, `levenshtein_match`) returns the exact same `Symbol` anyway but it doesn't seem to confuse anything on UI tests.\n\nr? ``@estebank``", "tree": {"sha": "a70d84c57f93f67b78d5762c025d9bc895ab2e4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a70d84c57f93f67b78d5762c025d9bc895ab2e4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c8835d277e2b462ebf0584b4eb2db93369603a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhbj5FCRBK7hj4Ov3rIwAANPcIAEUBUbBkXSbYehuMLtNjvDva\nZnLTQke7GVKBoOW9uAuGDnLQ8bMFLiSUqbHS8zvX1ve5qB2EN+fejmlCaBNPrGjj\ni84NBD7fO5hc/3GfAayja7SQW5qrMHMxFfBQJlvHsZghdBidNeePO6fjrbYs0v8t\nNUOEoVonIU1RgKQR7zM0dz6cZ+xTqAmKJAEx5KA5J63BtYCfPxm9UR0PfKpIKqE7\nCC1vWKggYqwddctbrVINcVM8tzxTNKYOGSsxlvz9jLAQYiOzeIaMlKO9CVh3/KLI\nL9eSuqDKtNZzHQMW05PSgA1SgRN8DGSgzZGQ9USMfzf7AfKpNeiCWQbT9ZOxLj4=\n=cbGE\n-----END PGP SIGNATURE-----\n", "payload": "tree a70d84c57f93f67b78d5762c025d9bc895ab2e4f\nparent 9dccb7bd890e456fe4a1344edd0a8b67c88a901a\nparent d4cc8774d598dd496a3dee393271c9c69a07e2fa\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1634614853 +0200\ncommitter GitHub <noreply@github.com> 1634614853 +0200\n\nRollup merge of #89956 - JohnTitor:suggest-case-insensitive-match-names, r=estebank\n\nSuggest a case insensitive match name regardless of levenshtein distance\n\nFixes #86170\n\nCurrently, `find_best_match_for_name` only returns a case insensitive match name depending on a Levenshtein distance. It's a bit unfortunate that that hides some suggestions for typos like `Bar` -> `BAR`. That idea is from https://github.com/rust-lang/rust/pull/46347#discussion_r153701834, but I think it still makes some sense to show a candidate when we find a case insensitive match name as it's more like a typo.\nSkipped the `candidate != lookup` check because the current (i.e, `levenshtein_match`) returns the exact same `Symbol` anyway but it doesn't seem to confuse anything on UI tests.\n\nr? ``@estebank``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8835d277e2b462ebf0584b4eb2db93369603a6", "html_url": "https://github.com/rust-lang/rust/commit/8c8835d277e2b462ebf0584b4eb2db93369603a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c8835d277e2b462ebf0584b4eb2db93369603a6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dccb7bd890e456fe4a1344edd0a8b67c88a901a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dccb7bd890e456fe4a1344edd0a8b67c88a901a", "html_url": "https://github.com/rust-lang/rust/commit/9dccb7bd890e456fe4a1344edd0a8b67c88a901a"}, {"sha": "d4cc8774d598dd496a3dee393271c9c69a07e2fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4cc8774d598dd496a3dee393271c9c69a07e2fa", "html_url": "https://github.com/rust-lang/rust/commit/d4cc8774d598dd496a3dee393271c9c69a07e2fa"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "c10968e06d79a66b4150c2cac6b95e9b3a06f433", "filename": "compiler/rustc_span/src/lev_distance.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8c8835d277e2b462ebf0584b4eb2db93369603a6/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8835d277e2b462ebf0584b4eb2db93369603a6/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs?ref=8c8835d277e2b462ebf0584b4eb2db93369603a6", "patch": "@@ -58,34 +58,28 @@ pub fn find_best_match_for_name(\n     let lookup = &lookup.as_str();\n     let max_dist = dist.unwrap_or_else(|| cmp::max(lookup.len(), 3) / 3);\n \n-    let (case_insensitive_match, levenshtein_match) = name_vec\n+    // Priority of matches:\n+    // 1. Exact case insensitive match\n+    // 2. Levenshtein distance match\n+    // 3. Sorted word match\n+    if let Some(case_insensitive_match) =\n+        name_vec.iter().find(|candidate| candidate.as_str().to_uppercase() == lookup.to_uppercase())\n+    {\n+        return Some(*case_insensitive_match);\n+    }\n+    let levenshtein_match = name_vec\n         .iter()\n         .filter_map(|&name| {\n             let dist = lev_distance(lookup, &name.as_str());\n             if dist <= max_dist { Some((name, dist)) } else { None }\n         })\n         // Here we are collecting the next structure:\n-        // (case_insensitive_match, (levenshtein_match, levenshtein_distance))\n-        .fold((None, None), |result, (candidate, dist)| {\n-            (\n-                if candidate.as_str().to_uppercase() == lookup.to_uppercase() {\n-                    Some(candidate)\n-                } else {\n-                    result.0\n-                },\n-                match result.1 {\n-                    None => Some((candidate, dist)),\n-                    Some((c, d)) => Some(if dist < d { (candidate, dist) } else { (c, d) }),\n-                },\n-            )\n+        // (levenshtein_match, levenshtein_distance)\n+        .fold(None, |result, (candidate, dist)| match result {\n+            None => Some((candidate, dist)),\n+            Some((c, d)) => Some(if dist < d { (candidate, dist) } else { (c, d) }),\n         });\n-    // Priority of matches:\n-    // 1. Exact case insensitive match\n-    // 2. Levenshtein distance match\n-    // 3. Sorted word match\n-    if let Some(candidate) = case_insensitive_match {\n-        Some(candidate)\n-    } else if levenshtein_match.is_some() {\n+    if levenshtein_match.is_some() {\n         levenshtein_match.map(|(candidate, _)| candidate)\n     } else {\n         find_match_by_sorted_words(name_vec, lookup)"}, {"sha": "b32f8d32c1391e0be3e54c76c7ccf351bba1745d", "filename": "compiler/rustc_span/src/lev_distance/tests.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c8835d277e2b462ebf0584b4eb2db93369603a6/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8835d277e2b462ebf0584b4eb2db93369603a6/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs?ref=8c8835d277e2b462ebf0584b4eb2db93369603a6", "patch": "@@ -31,16 +31,12 @@ fn test_find_best_match_for_name() {\n \n         assert_eq!(find_best_match_for_name(&input, Symbol::intern(\"1111111111\"), None), None);\n \n-        let input = vec![Symbol::intern(\"aAAA\")];\n+        let input = vec![Symbol::intern(\"AAAA\")];\n         assert_eq!(\n-            find_best_match_for_name(&input, Symbol::intern(\"AAAA\"), None),\n-            Some(Symbol::intern(\"aAAA\"))\n+            find_best_match_for_name(&input, Symbol::intern(\"aaaa\"), None),\n+            Some(Symbol::intern(\"AAAA\"))\n         );\n \n-        let input = vec![Symbol::intern(\"AAAA\")];\n-        // Returns None because `lev_distance > max_dist / 3`\n-        assert_eq!(find_best_match_for_name(&input, Symbol::intern(\"aaaa\"), None), None);\n-\n         let input = vec![Symbol::intern(\"AAAA\")];\n         assert_eq!(\n             find_best_match_for_name(&input, Symbol::intern(\"aaaa\"), Some(4)),"}, {"sha": "e4c1c8ad293b7162ec96057576899463ead5aef0", "filename": "src/test/ui/hygiene/rustc-macro-transparency.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8c8835d277e2b462ebf0584b4eb2db93369603a6/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c8835d277e2b462ebf0584b4eb2db93369603a6/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr?ref=8c8835d277e2b462ebf0584b4eb2db93369603a6", "patch": "@@ -2,29 +2,43 @@ error[E0425]: cannot find value `Opaque` in this scope\n   --> $DIR/rustc-macro-transparency.rs:26:5\n    |\n LL |     Opaque;\n-   |     ^^^^^^ help: a local variable with a similar name exists (notice the capitalization): `opaque`\n+   |     ^^^^^^ not found in this scope\n \n error[E0423]: expected value, found macro `semitransparent`\n   --> $DIR/rustc-macro-transparency.rs:29:5\n    |\n+LL |     struct SemiTransparent;\n+   |     ----------------------- similarly named unit struct `SemiTransparent` defined here\n+...\n LL |     semitransparent;\n    |     ^^^^^^^^^^^^^^^ not a value\n    |\n help: use `!` to invoke the macro\n    |\n LL |     semitransparent!;\n    |                    +\n+help: a unit struct with a similar name exists\n+   |\n+LL |     SemiTransparent;\n+   |     ~~~~~~~~~~~~~~~\n \n error[E0423]: expected value, found macro `opaque`\n   --> $DIR/rustc-macro-transparency.rs:30:5\n    |\n+LL |     struct Opaque;\n+   |     -------------- similarly named unit struct `Opaque` defined here\n+...\n LL |     opaque;\n    |     ^^^^^^ not a value\n    |\n help: use `!` to invoke the macro\n    |\n LL |     opaque!;\n    |           +\n+help: a unit struct with a similar name exists\n+   |\n+LL |     Opaque;\n+   |     ~~~~~~\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0bfbf538486deadd62245c4ec4f1bfd7b790c2a9", "filename": "src/test/ui/issues/issue-22933-2.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c8835d277e2b462ebf0584b4eb2db93369603a6/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c8835d277e2b462ebf0584b4eb2db93369603a6/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr?ref=8c8835d277e2b462ebf0584b4eb2db93369603a6", "patch": "@@ -5,7 +5,10 @@ LL | enum Delicious {\n    | -------------- variant or associated item `PIE` not found here\n ...\n LL |     ApplePie = Delicious::Apple as isize | Delicious::PIE as isize,\n-   |                                                       ^^^ variant or associated item not found in `Delicious`\n+   |                                                       ^^^\n+   |                                                       |\n+   |                                                       variant or associated item not found in `Delicious`\n+   |                                                       help: there is a variant with a similar name: `Pie`\n \n error: aborting due to previous error\n "}]}