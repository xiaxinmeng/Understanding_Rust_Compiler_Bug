{"sha": "90fcdafb79995f8ca6d444fac05e2291707aea1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZmNkYWZiNzk5OTVmOGNhNmQ0NDRmYWMwNWUyMjkxNzA3YWVhMWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-04-02T21:34:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-02T21:34:17Z"}, "message": "Merge pull request #2608 from mrecachinas/feature/print-string-literal\n\nCheck for literals as println! args", "tree": {"sha": "91fa1bb31a012acb73f4b216f7204c8eaa927e64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91fa1bb31a012acb73f4b216f7204c8eaa927e64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90fcdafb79995f8ca6d444fac05e2291707aea1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJawqHZCRBK7hj4Ov3rIwAAdHIIAJf2BdTGpkRpE5xPBTucSXWC\nUs1m6UPkidxc3R0zSdTRkNGKvvwOWg9HXnc0NeHNb+ygM9rT5SPgRGEjFC/wbq0g\nyJy2dtAUvIkMbdNVKv9Vg5yPw3iAM2RrsZXHfMyQurfaKXmMU8Olxre2x8RIpT1R\n49a4QBLXzK5Dnb/Vc8FNys5sjFuWfYZsu4ULER020M/jo7UMIXau2aeI9s51+v8T\nYTcrlL8f3ERAZ8Lg+0z+QHpwnbimOHJ53CUmetD5HP5Pu8Etj21SB2UBKZBkllFv\noYoXFrygwHlWkbOCexhiQVJg5EB+utEldE8vLIWFPhqVGW3hJN08rTDUgE8i9s8=\n=pnrr\n-----END PGP SIGNATURE-----\n", "payload": "tree 91fa1bb31a012acb73f4b216f7204c8eaa927e64\nparent 76d1e26fe22558e49cfbe41d529f1b47d21b7a9b\nparent fa8161ba2e36cd5ca6e17bf2b09c4307e7e4e2eb\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1522704857 +0200\ncommitter GitHub <noreply@github.com> 1522704857 +0200\n\nMerge pull request #2608 from mrecachinas/feature/print-string-literal\n\nCheck for literals as println! args"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90fcdafb79995f8ca6d444fac05e2291707aea1c", "html_url": "https://github.com/rust-lang/rust/commit/90fcdafb79995f8ca6d444fac05e2291707aea1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90fcdafb79995f8ca6d444fac05e2291707aea1c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76d1e26fe22558e49cfbe41d529f1b47d21b7a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/76d1e26fe22558e49cfbe41d529f1b47d21b7a9b", "html_url": "https://github.com/rust-lang/rust/commit/76d1e26fe22558e49cfbe41d529f1b47d21b7a9b"}, {"sha": "fa8161ba2e36cd5ca6e17bf2b09c4307e7e4e2eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa8161ba2e36cd5ca6e17bf2b09c4307e7e4e2eb", "html_url": "https://github.com/rust-lang/rust/commit/fa8161ba2e36cd5ca6e17bf2b09c4307e7e4e2eb"}], "stats": {"total": 240, "additions": 220, "deletions": 20}, "files": [{"sha": "ddfe6d68f4a0591180f627d9edc4536226566278", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/90fcdafb79995f8ca6d444fac05e2291707aea1c/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcdafb79995f8ca6d444fac05e2291707aea1c/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=90fcdafb79995f8ca6d444fac05e2291707aea1c", "patch": "@@ -78,12 +78,31 @@ declare_clippy_lint! {\n     \"use of `Debug`-based formatting\"\n }\n \n+/// **What it does:** This lint warns about the use of literals as `print!`/`println!` args.\n+///\n+/// **Why is this bad?** Using literals as `println!` args is inefficient\n+/// (c.f., https://github.com/matthiaskrgr/rust-str-bench) and unnecessary\n+/// (i.e., just put the literal in the format string)\n+///\n+/// **Known problems:** Will also warn with macro calls as arguments that expand to literals\n+/// -- e.g., `println!(\"{}\", env!(\"FOO\"))`.\n+///\n+/// **Example:**\n+/// ```rust\n+/// println!(\"{}\", \"foo\");\n+/// ```\n+declare_clippy_lint! {\n+    pub PRINT_LITERAL,\n+    style,\n+    \"printing a literal with a format string\"\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub struct Pass;\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(PRINT_WITH_NEWLINE, PRINTLN_EMPTY_STRING, PRINT_STDOUT, USE_DEBUG)\n+        lint_array!(PRINT_WITH_NEWLINE, PRINTLN_EMPTY_STRING, PRINT_STDOUT, USE_DEBUG, PRINT_LITERAL)\n     }\n }\n \n@@ -107,6 +126,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n                         span_lint(cx, PRINT_STDOUT, span, &format!(\"use of `{}!`\", name));\n \n+                        // Check for literals in the print!/println! args\n+                        // Also, ensure the format string is `{}` with no special options, like `{:X}`\n+                        check_print_args_for_literal(cx, args);\n+\n                         if_chain! {\n                             // ensure we're calling Arguments::new_v1\n                             if args.len() == 1;\n@@ -146,6 +169,49 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n }\n \n+// Check for literals in print!/println! args\n+// ensuring the format string for the literal is `DISPLAY_FMT_METHOD`\n+// e.g., `println!(\"... {} ...\", \"foo\")`\n+//                                ^ literal in `println!`\n+fn check_print_args_for_literal<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    args: &HirVec<Expr>\n+) {\n+    if_chain! {\n+        if args.len() == 1;\n+        if let ExprCall(_, ref args_args) = args[0].node;\n+        if args_args.len() > 1;\n+        if let ExprAddrOf(_, ref match_expr) = args_args[1].node;\n+        if let ExprMatch(ref matchee, ref arms, _) = match_expr.node;\n+        if let ExprTup(ref tup) = matchee.node;\n+        if arms.len() == 1;\n+        if let ExprArray(ref arm_body_exprs) = arms[0].body.node;\n+        then {\n+            // it doesn't matter how many args there are in the `print!`/`println!`,\n+            // if there's one literal, we should warn the user\n+            for (idx, tup_arg) in tup.iter().enumerate() {\n+                if_chain! {\n+                    // first, make sure we're dealing with a literal (i.e., an ExprLit)\n+                    if let ExprAddrOf(_, ref tup_val) = tup_arg.node;\n+                    if let ExprLit(_) = tup_val.node;\n+\n+                    // next, check the corresponding match arm body to ensure\n+                    // this is \"{}\", or DISPLAY_FMT_METHOD\n+                    if let ExprCall(_, ref body_args) = arm_body_exprs[idx].node;\n+                    if body_args.len() == 2;\n+                    if let ExprPath(ref body_qpath) = body_args[1].node;\n+                    if let Some(fun_def_id) = opt_def_id(resolve_node(cx, body_qpath, body_args[1].hir_id));\n+                    if match_def_path(cx.tcx, fun_def_id, &paths::DISPLAY_FMT_METHOD) ||\n+                       match_def_path(cx.tcx, fun_def_id, &paths::DEBUG_FMT_METHOD);\n+                    then {\n+                        span_lint(cx, PRINT_LITERAL, tup_val.span, \"printing a literal with an empty format string\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n // Check for print!(\"... \\n\", ...).\n fn check_print<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,"}, {"sha": "5e18b74bb2c4831ee6518c367983b4e12268cc7d", "filename": "tests/ui/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90fcdafb79995f8ca6d444fac05e2291707aea1c/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcdafb79995f8ca6d444fac05e2291707aea1c/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=90fcdafb79995f8ca6d444fac05e2291707aea1c", "patch": "@@ -1,5 +1,5 @@\n \n-\n+#![allow(print_literal)]\n #![warn(useless_format)]\n \n fn main() {"}, {"sha": "786398cfe5ed841547fb68bb2fe7e46d018a275c", "filename": "tests/ui/print.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90fcdafb79995f8ca6d444fac05e2291707aea1c/tests%2Fui%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcdafb79995f8ca6d444fac05e2291707aea1c/tests%2Fui%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint.rs?ref=90fcdafb79995f8ca6d444fac05e2291707aea1c", "patch": "@@ -1,5 +1,6 @@\n \n \n+#![allow(print_literal)]\n #![warn(print_stdout, use_debug)]\n \n use std::fmt::{Debug, Display, Formatter, Result};"}, {"sha": "457ed38a1b5f2d41c1b5faa93ef48660202c292d", "filename": "tests/ui/print.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/90fcdafb79995f8ca6d444fac05e2291707aea1c/tests%2Fui%2Fprint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90fcdafb79995f8ca6d444fac05e2291707aea1c/tests%2Fui%2Fprint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint.stderr?ref=90fcdafb79995f8ca6d444fac05e2291707aea1c", "patch": "@@ -1,53 +1,53 @@\n error: use of `Debug`-based formatting\n-  --> $DIR/print.rs:12:27\n+  --> $DIR/print.rs:13:27\n    |\n-12 |         write!(f, \"{:?}\", 43.1415)\n+13 |         write!(f, \"{:?}\", 43.1415)\n    |                           ^^^^^^^\n    |\n    = note: `-D use-debug` implied by `-D warnings`\n \n error: use of `println!`\n-  --> $DIR/print.rs:24:5\n+  --> $DIR/print.rs:25:5\n    |\n-24 |     println!(\"Hello\");\n+25 |     println!(\"Hello\");\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D print-stdout` implied by `-D warnings`\n \n error: use of `print!`\n-  --> $DIR/print.rs:25:5\n+  --> $DIR/print.rs:26:5\n    |\n-25 |     print!(\"Hello\");\n+26 |     print!(\"Hello\");\n    |     ^^^^^^^^^^^^^^^^\n \n error: use of `print!`\n-  --> $DIR/print.rs:27:5\n+  --> $DIR/print.rs:28:5\n    |\n-27 |     print!(\"Hello {}\", \"World\");\n+28 |     print!(\"Hello {}\", \"World\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: use of `print!`\n-  --> $DIR/print.rs:29:5\n+  --> $DIR/print.rs:30:5\n    |\n-29 |     print!(\"Hello {:?}\", \"World\");\n+30 |     print!(\"Hello {:?}\", \"World\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: use of `Debug`-based formatting\n-  --> $DIR/print.rs:29:26\n+  --> $DIR/print.rs:30:26\n    |\n-29 |     print!(\"Hello {:?}\", \"World\");\n+30 |     print!(\"Hello {:?}\", \"World\");\n    |                          ^^^^^^^\n \n error: use of `print!`\n-  --> $DIR/print.rs:31:5\n+  --> $DIR/print.rs:32:5\n    |\n-31 |     print!(\"Hello {:#?}\", \"#orld\");\n+32 |     print!(\"Hello {:#?}\", \"#orld\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: use of `Debug`-based formatting\n-  --> $DIR/print.rs:31:27\n+  --> $DIR/print.rs:32:27\n    |\n-31 |     print!(\"Hello {:#?}\", \"#orld\");\n+32 |     print!(\"Hello {:#?}\", \"#orld\");\n    |                           ^^^^^^^\n \n error: aborting due to 8 previous errors"}, {"sha": "c803294ab0ada31dce75fd4bde196802f0a8fd2a", "filename": "tests/ui/print_literal.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/90fcdafb79995f8ca6d444fac05e2291707aea1c/tests%2Fui%2Fprint_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcdafb79995f8ca6d444fac05e2291707aea1c/tests%2Fui%2Fprint_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.rs?ref=90fcdafb79995f8ca6d444fac05e2291707aea1c", "patch": "@@ -0,0 +1,32 @@\n+\n+\n+#![warn(print_literal)]\n+\n+fn main() {\n+    // these should be fine\n+    print!(\"Hello\");\n+    println!(\"Hello\");\n+    let world = \"world\";\n+    println!(\"Hello {}\", world);\n+    println!(\"3 in hex is {:X}\", 3);\n+\n+    // these should throw warnings\n+    print!(\"Hello {}\", \"world\");\n+    println!(\"Hello {} {}\", world, \"world\");\n+    println!(\"Hello {}\", \"world\");\n+    println!(\"10 / 4 is {}\", 2.5);\n+    println!(\"2 + 1 = {}\", 3);\n+    println!(\"2 + 1 = {:.4}\", 3);\n+    println!(\"2 + 1 = {:5.4}\", 3);\n+    println!(\"Debug test {:?}\", \"hello, world\");\n+\n+    // positional args don't change the fact\n+    // that we're using a literal -- this should\n+    // throw a warning\n+    println!(\"{0} {1}\", \"hello\", \"world\");\n+    println!(\"{1} {0}\", \"hello\", \"world\");\n+\n+    // named args shouldn't change anything either\n+    println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+    println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+}"}, {"sha": "982be7dc5373ea5591cc5dc71af8cab21f119471", "filename": "tests/ui/print_literal.stderr", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/90fcdafb79995f8ca6d444fac05e2291707aea1c/tests%2Fui%2Fprint_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90fcdafb79995f8ca6d444fac05e2291707aea1c/tests%2Fui%2Fprint_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.stderr?ref=90fcdafb79995f8ca6d444fac05e2291707aea1c", "patch": "@@ -0,0 +1,100 @@\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:14:24\n+   |\n+14 |     print!(\"Hello {}\", \"world\");\n+   |                        ^^^^^^^\n+   |\n+   = note: `-D print-literal` implied by `-D warnings`\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:15:36\n+   |\n+15 |     println!(\"Hello {} {}\", world, \"world\");\n+   |                                    ^^^^^^^\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:16:26\n+   |\n+16 |     println!(\"Hello {}\", \"world\");\n+   |                          ^^^^^^^\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:17:30\n+   |\n+17 |     println!(\"10 / 4 is {}\", 2.5);\n+   |                              ^^^\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:18:28\n+   |\n+18 |     println!(\"2 + 1 = {}\", 3);\n+   |                            ^\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:19:31\n+   |\n+19 |     println!(\"2 + 1 = {:.4}\", 3);\n+   |                               ^\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:20:32\n+   |\n+20 |     println!(\"2 + 1 = {:5.4}\", 3);\n+   |                                ^\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:21:33\n+   |\n+21 |     println!(\"Debug test {:?}\", \"hello, world\");\n+   |                                 ^^^^^^^^^^^^^^\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:26:25\n+   |\n+26 |     println!(\"{0} {1}\", \"hello\", \"world\");\n+   |                         ^^^^^^^\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:26:34\n+   |\n+26 |     println!(\"{0} {1}\", \"hello\", \"world\");\n+   |                                  ^^^^^^^\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:27:25\n+   |\n+27 |     println!(\"{1} {0}\", \"hello\", \"world\");\n+   |                         ^^^^^^^\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:27:34\n+   |\n+27 |     println!(\"{1} {0}\", \"hello\", \"world\");\n+   |                                  ^^^^^^^\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:30:33\n+   |\n+30 |     println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+   |                                 ^^^^^^^\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:30:46\n+   |\n+30 |     println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+   |                                              ^^^^^^^\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:31:33\n+   |\n+31 |     println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+   |                                 ^^^^^^^\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:31:46\n+   |\n+31 |     println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+   |                                              ^^^^^^^\n+\n+error: aborting due to 16 previous errors\n+"}, {"sha": "5445c862096f74153bc3e5ae2220ef6c63c53ebd", "filename": "tests/ui/print_with_newline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90fcdafb79995f8ca6d444fac05e2291707aea1c/tests%2Fui%2Fprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90fcdafb79995f8ca6d444fac05e2291707aea1c/tests%2Fui%2Fprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.rs?ref=90fcdafb79995f8ca6d444fac05e2291707aea1c", "patch": "@@ -1,5 +1,6 @@\n \n \n+#![allow(print_literal)]\n #![warn(print_with_newline)]\n \n fn main() {"}, {"sha": "5f2013e728e8f61d50cd1bfffd60c4d97cc6fefc", "filename": "tests/ui/print_with_newline.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90fcdafb79995f8ca6d444fac05e2291707aea1c/tests%2Fui%2Fprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90fcdafb79995f8ca6d444fac05e2291707aea1c/tests%2Fui%2Fprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.stderr?ref=90fcdafb79995f8ca6d444fac05e2291707aea1c", "patch": "@@ -1,7 +1,7 @@\n error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n- --> $DIR/print_with_newline.rs:6:5\n+ --> $DIR/print_with_newline.rs:7:5\n   |\n-6 |     print!(\"Hello/n\");\n+7 |     print!(\"Hello/n\");\n   |     ^^^^^^^^^^^^^^^^^^\n   |\n   = note: `-D print-with-newline` implied by `-D warnings`"}]}