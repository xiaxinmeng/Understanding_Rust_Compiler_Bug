{"sha": "0fabbf9713f2b81f47e32f02567952c9407a4b82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYWJiZjk3MTNmMmI4MWY0N2UzMmYwMjU2Nzk1MmM5NDA3YTRiODI=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-28T18:31:16Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-28T18:32:28Z"}, "message": "Fix typos", "tree": {"sha": "f698ea4410693c93f43e1e7de632aaa0e5a5764e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f698ea4410693c93f43e1e7de632aaa0e5a5764e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fabbf9713f2b81f47e32f02567952c9407a4b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fabbf9713f2b81f47e32f02567952c9407a4b82", "html_url": "https://github.com/rust-lang/rust/commit/0fabbf9713f2b81f47e32f02567952c9407a4b82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fabbf9713f2b81f47e32f02567952c9407a4b82/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "717eb6ccea0f9e0079eab82c047bbc1ebde725c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/717eb6ccea0f9e0079eab82c047bbc1ebde725c2", "html_url": "https://github.com/rust-lang/rust/commit/717eb6ccea0f9e0079eab82c047bbc1ebde725c2"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "6b7889c4d9e8f8e7881688baecb587a4c856b695", "filename": "compiler/rustc_mir/src/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fabbf9713f2b81f47e32f02567952c9407a4b82/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fabbf9713f2b81f47e32f02567952c9407a4b82/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs?ref=0fabbf9713f2b81f47e32f02567952c9407a4b82", "patch": "@@ -177,7 +177,7 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n         //\n         // We are careful always to call this function *before* we\n         // set up the gen-bits for the statement or\n-        // termanator. That way, if the effect of the statement or\n+        // terminator. That way, if the effect of the statement or\n         // terminator *does* introduce a new loan of the same\n         // region, then setting that gen-bit will override any\n         // potential kill introduced here."}, {"sha": "a2b0713cd7d0b6cf87dce1b3e37f00e637cbf9a8", "filename": "compiler/rustc_mir/src/dataflow/impls/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fabbf9713f2b81f47e32f02567952c9407a4b82/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fabbf9713f2b81f47e32f02567952c9407a4b82/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs?ref=0fabbf9713f2b81f47e32f02567952c9407a4b82", "patch": "@@ -8,7 +8,7 @@ use crate::dataflow::{AnalysisDomain, Backward, GenKill, GenKillAnalysis};\n ///\n /// This analysis considers references as being used only at the point of the\n /// borrow. In other words, this analysis does not track uses because of references that already\n-/// exist. See [this `mir-datalow` test][flow-test] for an example. You almost never want to use\n+/// exist. See [this `mir-dataflow` test][flow-test] for an example. You almost never want to use\n /// this analysis without also looking at the results of [`MaybeBorrowedLocals`].\n ///\n /// [`MaybeBorrowedLocals`]: ../struct.MaybeBorrowedLocals.html\n@@ -134,7 +134,7 @@ impl DefUse {\n \n             // `MutatingUseContext::Call` and `MutatingUseContext::Yield` indicate that this is the\n             // destination place for a `Call` return or `Yield` resume respectively. Since this is\n-            // only a `Def` when the function returns succesfully, we handle this case separately\n+            // only a `Def` when the function returns successfully, we handle this case separately\n             // in `call_return_effect` above.\n             PlaceContext::MutatingUse(MutatingUseContext::Call | MutatingUseContext::Yield) => None,\n "}]}