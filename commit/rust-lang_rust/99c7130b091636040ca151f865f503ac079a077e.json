{"sha": "99c7130b091636040ca151f865f503ac079a077e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YzcxMzBiMDkxNjM2MDQwY2ExNTFmODY1ZjUwM2FjMDc5YTA3N2U=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-07T01:40:42Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-07T23:53:34Z"}, "message": "Re-added accidentally-removed imports.", "tree": {"sha": "2d1fa2be27b0d589d1448e201b4563f0234bf727", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d1fa2be27b0d589d1448e201b4563f0234bf727"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99c7130b091636040ca151f865f503ac079a077e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99c7130b091636040ca151f865f503ac079a077e", "html_url": "https://github.com/rust-lang/rust/commit/99c7130b091636040ca151f865f503ac079a077e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99c7130b091636040ca151f865f503ac079a077e/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee89c088b057affb5bdb96195e107a218b64b1c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee89c088b057affb5bdb96195e107a218b64b1c5", "html_url": "https://github.com/rust-lang/rust/commit/ee89c088b057affb5bdb96195e107a218b64b1c5"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "8d91132a6db93cedf0a0d9da260eb549fd956f23", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99c7130b091636040ca151f865f503ac079a077e/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c7130b091636040ca151f865f503ac079a077e/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=99c7130b091636040ca151f865f503ac079a077e", "patch": "@@ -44,6 +44,9 @@ use ty::error::{ExpectedFound, TypeError};\n use ty::fold::{TypeFolder, TypeFoldable, TypeVisitor};\n use util::common::ErrorReported;\n \n+use std::fmt::Debug;\n+use std::rc::Rc;\n+\n pub use self::SelectionError::*;\n pub use self::FulfillmentErrorCode::*;\n pub use self::Vtable::*;"}, {"sha": "48db72c1f5615bc73dd13383997ed2ef64ea852c", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99c7130b091636040ca151f865f503ac079a077e/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c7130b091636040ca151f865f503ac079a077e/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=99c7130b091636040ca151f865f503ac079a077e", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use hir;\n use hir::def_id::DefId;\n use traits::specialize::specialization_graph::NodeItem;\n use ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n use ty::outlives::Component;\n-use ty::subst::{Kind, Subst};\n+use ty::subst::{Kind, Subst, Substs};\n use util::nodemap::FxHashSet;\n \n use super::{Obligation, ObligationCause, PredicateObligation, SelectionContext, Normalized};"}, {"sha": "5e05f7d8fce6c008355bbc50e627be59db47c853", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99c7130b091636040ca151f865f503ac079a077e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c7130b091636040ca151f865f503ac079a077e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=99c7130b091636040ca151f865f503ac079a077e", "patch": "@@ -1277,7 +1277,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         // item is declared.\n         let bound = match (&ty.sty, ty_path_def) {\n             (_, Def::SelfTy(Some(_), Some(impl_def_id))) => {\n-                // `Self` in an impl of a trait - we have a concrete `self` type and a\n+                // `Self` in an impl of a trait -- we have a concrete `self` type and a\n                 // trait reference.\n                 let trait_ref = match tcx.impl_trait_ref(impl_def_id) {\n                     Some(trait_ref) => trait_ref,"}]}