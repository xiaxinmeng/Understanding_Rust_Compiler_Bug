{"sha": "4f4f7dfc00d69b8a94638ed1d9e666ada9911217", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNGY3ZGZjMDBkNjliOGE5NDYzOGVkMWQ5ZTY2NmFkYTk5MTEyMTc=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-05-31T19:36:15Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2018-06-02T20:21:01Z"}, "message": "Generate br for all two target SwitchInts\n\nInstead of only for booleans. This means that if let also becomes\na br.\n\nApart from making the IR slightly simpler, this is supported by\nFastISel.", "tree": {"sha": "f899b10d36800d8e7a52a29e2723e4792660f67c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f899b10d36800d8e7a52a29e2723e4792660f67c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f4f7dfc00d69b8a94638ed1d9e666ada9911217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4f7dfc00d69b8a94638ed1d9e666ada9911217", "html_url": "https://github.com/rust-lang/rust/commit/4f4f7dfc00d69b8a94638ed1d9e666ada9911217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f4f7dfc00d69b8a94638ed1d9e666ada9911217/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6de4ec679d7179251bef205427d52d093c40a787", "url": "https://api.github.com/repos/rust-lang/rust/commits/6de4ec679d7179251bef205427d52d093c40a787", "html_url": "https://github.com/rust-lang/rust/commit/6de4ec679d7179251bef205427d52d093c40a787"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "14d20b6dbe2973a53597fbf2579ee9a9f473bddf", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4f4f7dfc00d69b8a94638ed1d9e666ada9911217/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4f7dfc00d69b8a94638ed1d9e666ada9911217/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=4f4f7dfc00d69b8a94638ed1d9e666ada9911217", "patch": "@@ -191,14 +191,23 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n \n             mir::TerminatorKind::SwitchInt { ref discr, switch_ty, ref values, ref targets } => {\n                 let discr = self.codegen_operand(&bx, discr);\n-                if switch_ty == bx.tcx().types.bool {\n+                if targets.len() == 2 {\n+                    // If there are two targets, emit br instead of switch\n                     let lltrue = llblock(self, targets[0]);\n                     let llfalse = llblock(self, targets[1]);\n-                    if let [0] = values[..] {\n-                        bx.cond_br(discr.immediate(), llfalse, lltrue);\n+                    if switch_ty == bx.tcx().types.bool {\n+                        // Don't generate trivial icmps when switching on bool\n+                        if let [0] = values[..] {\n+                            bx.cond_br(discr.immediate(), llfalse, lltrue);\n+                        } else {\n+                            assert_eq!(&values[..], &[1]);\n+                            bx.cond_br(discr.immediate(), lltrue, llfalse);\n+                        }\n                     } else {\n-                        assert_eq!(&values[..], &[1]);\n-                        bx.cond_br(discr.immediate(), lltrue, llfalse);\n+                        let switch_llty = bx.cx.layout_of(switch_ty).immediate_llvm_type(bx.cx);\n+                        let llval = C_uint_big(switch_llty, values[0]);\n+                        let cmp = bx.icmp(llvm::IntEQ, discr.immediate(), llval);\n+                        bx.cond_br(cmp, lltrue, llfalse);\n                     }\n                 } else {\n                     let (otherwise, targets) = targets.split_last().unwrap();"}]}