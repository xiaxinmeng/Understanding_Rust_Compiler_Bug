{"sha": "9231821c031ddada08d37547664b276d5e631f62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMzE4MjFjMDMxZGRhZGEwOGQzNzU0NzY2NGIyNzZkNWU2MzFmNjI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-17T14:45:26Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-17T14:45:26Z"}, "message": "Make `Attrs::from_attrs_owner` private", "tree": {"sha": "7077e360ba55f13a1b210d43fcef31dd73ceae70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7077e360ba55f13a1b210d43fcef31dd73ceae70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9231821c031ddada08d37547664b276d5e631f62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9231821c031ddada08d37547664b276d5e631f62", "html_url": "https://github.com/rust-lang/rust/commit/9231821c031ddada08d37547664b276d5e631f62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9231821c031ddada08d37547664b276d5e631f62/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f6077ffe75a31dd53e77719d3369605b6f8b7a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f6077ffe75a31dd53e77719d3369605b6f8b7a5", "html_url": "https://github.com/rust-lang/rust/commit/3f6077ffe75a31dd53e77719d3369605b6f8b7a5"}], "stats": {"total": 53, "additions": 13, "deletions": 40}, "files": [{"sha": "2c0e0eae04e026a156ac4a46e358c0dd95dc28bd", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9231821c031ddada08d37547664b276d5e631f62/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9231821c031ddada08d37547664b276d5e631f62/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=9231821c031ddada08d37547664b276d5e631f62", "patch": "@@ -1325,6 +1325,7 @@ impl Impl {\n         let item = src.file_id.is_builtin_derive(db.upcast())?;\n         let hygenic = hir_expand::hygiene::Hygiene::new(db.upcast(), item.file_id);\n \n+        // FIXME: handle `cfg_attr`\n         let attr = item\n             .value\n             .attrs()"}, {"sha": "45313f3355933065be2cb00544538ef1aa72855c", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9231821c031ddada08d37547664b276d5e631f62/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9231821c031ddada08d37547664b276d5e631f62/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=9231821c031ddada08d37547664b276d5e631f62", "patch": "@@ -104,7 +104,7 @@ impl Attrs {\n         }\n     }\n \n-    pub fn from_attrs_owner(db: &dyn DefDatabase, owner: InFile<&dyn AttrsOwner>) -> Attrs {\n+    fn from_attrs_owner(db: &dyn DefDatabase, owner: InFile<&dyn AttrsOwner>) -> Attrs {\n         let hygiene = Hygiene::new(db.upcast(), owner.file_id);\n         Attrs::new(owner.value, &hygiene)\n     }"}, {"sha": "8410bf5a25863f40334eaf8e54140b746ef24578", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9231821c031ddada08d37547664b276d5e631f62/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9231821c031ddada08d37547664b276d5e631f62/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=9231821c031ddada08d37547664b276d5e631f62", "patch": "@@ -1,9 +1,7 @@\n //! FIXME: write short doc here\n \n use either::Either;\n-use hir::{\n-    AssocItem, Documentation, FieldSource, HasAttrs, HasSource, HirFileId, InFile, ModuleSource,\n-};\n+use hir::{AssocItem, Documentation, FieldSource, HasAttrs, HasSource, InFile, ModuleSource};\n use ide_db::base_db::{FileId, SourceDatabase};\n use ide_db::{defs::Definition, RootDatabase};\n use syntax::{\n@@ -168,7 +166,7 @@ impl ToNav for FileSymbol {\n             focus_range: self.name_range,\n             container_name: self.container_name.clone(),\n             description: description_from_symbol(db, self),\n-            docs: docs_from_symbol(db, self),\n+            docs: None,\n         }\n     }\n }\n@@ -394,30 +392,6 @@ impl ToNav for hir::LifetimeParam {\n     }\n }\n \n-pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<Documentation> {\n-    let parse = db.parse(symbol.file_id);\n-    let node = symbol.ptr.to_node(parse.tree().syntax());\n-    let file_id = HirFileId::from(symbol.file_id);\n-\n-    let it = match_ast! {\n-        match node {\n-            ast::Fn(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n-            ast::Struct(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n-            ast::Enum(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n-            ast::Trait(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n-            ast::Module(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n-            ast::TypeAlias(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n-            ast::Const(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n-            ast::Static(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n-            ast::RecordField(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n-            ast::Variant(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n-            ast::MacroCall(it) => hir::Attrs::from_attrs_owner(db, InFile::new(file_id, &it)),\n-            _ => return None,\n-        }\n-    };\n-    it.docs()\n-}\n-\n /// Get a description of a symbol.\n ///\n /// e.g. `struct Name`, `enum Name`, `fn Name`"}, {"sha": "a2a0ad43d36ca18cc1d9105f0f53f3256d510611", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9231821c031ddada08d37547664b276d5e631f62/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9231821c031ddada08d37547664b276d5e631f62/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=9231821c031ddada08d37547664b276d5e631f62", "patch": "@@ -2,7 +2,7 @@ use std::fmt;\n \n use assists::utils::test_related_attribute;\n use cfg::CfgExpr;\n-use hir::{AsAssocItem, Attrs, HirFileId, InFile, Semantics};\n+use hir::{AsAssocItem, HasAttrs, InFile, Semantics};\n use ide_db::RootDatabase;\n use itertools::Itertools;\n use syntax::{\n@@ -105,7 +105,7 @@ pub(crate) fn runnable(\n         match item {\n             ast::Struct(it) => runnable_struct(sema, it, file_id),\n             ast::Fn(it) => runnable_fn(sema, it, file_id),\n-            ast::Module(it) => runnable_mod(sema, it, file_id),\n+            ast::Module(it) => runnable_mod(sema, it),\n             _ => None,\n         }\n     }\n@@ -116,9 +116,10 @@ fn runnable_fn(\n     fn_def: ast::Fn,\n     file_id: FileId,\n ) -> Option<Runnable> {\n+    let def = sema.to_def(&fn_def)?;\n     let name_string = fn_def.name()?.text().to_string();\n \n-    let attrs = Attrs::from_attrs_owner(sema.db, InFile::new(HirFileId::from(file_id), &fn_def));\n+    let attrs = def.attrs(sema.db);\n     let kind = if name_string == \"main\" {\n         RunnableKind::Bin\n     } else {\n@@ -189,10 +190,10 @@ fn runnable_struct(\n     struct_def: ast::Struct,\n     file_id: FileId,\n ) -> Option<Runnable> {\n+    let def = sema.to_def(&struct_def)?;\n     let name_string = struct_def.name()?.text().to_string();\n \n-    let attrs =\n-        Attrs::from_attrs_owner(sema.db, InFile::new(HirFileId::from(file_id), &struct_def));\n+    let attrs = def.attrs(sema.db);\n     if !has_runnable_doc_test(&attrs) {\n         return None;\n     }\n@@ -262,11 +263,7 @@ fn has_runnable_doc_test(attrs: &hir::Attrs) -> bool {\n     })\n }\n \n-fn runnable_mod(\n-    sema: &Semantics<RootDatabase>,\n-    module: ast::Module,\n-    file_id: FileId,\n-) -> Option<Runnable> {\n+fn runnable_mod(sema: &Semantics<RootDatabase>, module: ast::Module) -> Option<Runnable> {\n     if !has_test_function_or_multiple_test_submodules(&module) {\n         return None;\n     }\n@@ -279,7 +276,8 @@ fn runnable_mod(\n         .filter_map(|it| it.name(sema.db))\n         .join(\"::\");\n \n-    let attrs = Attrs::from_attrs_owner(sema.db, InFile::new(HirFileId::from(file_id), &module));\n+    let def = sema.to_def(&module)?;\n+    let attrs = def.attrs(sema.db);\n     let cfg = attrs.cfg();\n     let nav = module_def.to_nav(sema.db);\n     Some(Runnable { nav, kind: RunnableKind::TestMod { path }, cfg })"}]}