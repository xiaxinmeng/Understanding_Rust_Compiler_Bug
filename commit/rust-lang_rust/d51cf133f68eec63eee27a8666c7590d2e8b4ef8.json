{"sha": "d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MWNmMTMzZjY4ZWVjNjNlZWUyN2E4NjY2Yzc1OTBkMmU4YjRlZjg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-21T15:49:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-21T15:49:31Z"}, "message": "Merge #8135\n\n8135: more clippy::{perf, complexity, style} fixes r=Veykril a=matthiaskrgr\n\n\n\nCo-authored-by: Matthias Kr\u00fcger <matthias.krueger@famsik.de>", "tree": {"sha": "cd74909ed13e4a697459bf66afffcb06d89820cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd74909ed13e4a697459bf66afffcb06d89820cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgV2sLCRBK7hj4Ov3rIwAAdHIIAHD/HQ7YJWDxpNNmK427Glsn\nkpJakWi37UVc8kBcpzImrOTFkOdj/iUvr5+2FbT9U5tfY6i7HgixEfmDVb0tdDCY\nfpbL5Fo0pg5/1calTQ4xHZxBJyo791/gXk/sQr3wL1bXZx8jM0zr4c/RF1z+OkRX\nzGqcqdeKq8mnPaDrliTna7AkWB9moqrqsSrlgw0Bq3FFb1zQo2JXtL4xdH7f+74G\ntbgrxrUrAmG9QfipsQouJuIRnkMkiHEpz6MB9gENJCnZnYh3IuNC/mQunBcxiIQ2\naVTPq/kPAUFuUZSKlfaBol82+9WAjmjY6g31zodaGu/zyo84VjWAhNmgxa/u3Ug=\n=ySy5\n-----END PGP SIGNATURE-----\n", "payload": "tree cd74909ed13e4a697459bf66afffcb06d89820cd\nparent 5bb65bb4962cfad613e9744a340ae23b533f479e\nparent 202b51bc7b6999900e06ec2cfb8d72fe9aa4af29\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616341771 +0000\ncommitter GitHub <noreply@github.com> 1616341771 +0000\n\nMerge #8135\n\n8135: more clippy::{perf, complexity, style} fixes r=Veykril a=matthiaskrgr\n\n\n\nCo-authored-by: Matthias Kr\u00fcger <matthias.krueger@famsik.de>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "html_url": "https://github.com/rust-lang/rust/commit/d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bb65bb4962cfad613e9744a340ae23b533f479e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb65bb4962cfad613e9744a340ae23b533f479e", "html_url": "https://github.com/rust-lang/rust/commit/5bb65bb4962cfad613e9744a340ae23b533f479e"}, {"sha": "202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "url": "https://api.github.com/repos/rust-lang/rust/commits/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29", "html_url": "https://github.com/rust-lang/rust/commit/202b51bc7b6999900e06ec2cfb8d72fe9aa4af29"}], "stats": {"total": 298, "additions": 130, "deletions": 168}, "files": [{"sha": "e9e8dfc2e983580378337b4551cbaaf53feb7a88", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -410,7 +410,7 @@ impl CrateId {\n \n impl CrateData {\n     fn add_dep(&mut self, name: CrateName, crate_id: CrateId) {\n-        self.dependencies.push(Dependency { name, crate_id })\n+        self.dependencies.push(Dependency { crate_id, name })\n     }\n }\n "}, {"sha": "75ded9aa1fd74926be74d8860e30b1edc494cc77", "filename": "crates/cfg/src/dnf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fcfg%2Fsrc%2Fdnf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fcfg%2Fsrc%2Fdnf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Fdnf.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -255,9 +255,9 @@ impl Builder {\n fn make_dnf(expr: CfgExpr) -> CfgExpr {\n     match expr {\n         CfgExpr::Invalid | CfgExpr::Atom(_) | CfgExpr::Not(_) => expr,\n-        CfgExpr::Any(e) => CfgExpr::Any(e.into_iter().map(|expr| make_dnf(expr)).collect()),\n+        CfgExpr::Any(e) => CfgExpr::Any(e.into_iter().map(make_dnf).collect()),\n         CfgExpr::All(e) => {\n-            let e = e.into_iter().map(|expr| make_nnf(expr)).collect::<Vec<_>>();\n+            let e = e.into_iter().map(make_nnf).collect::<Vec<_>>();\n \n             CfgExpr::Any(distribute_conj(&e))\n         }\n@@ -300,8 +300,8 @@ fn distribute_conj(conj: &[CfgExpr]) -> Vec<CfgExpr> {\n fn make_nnf(expr: CfgExpr) -> CfgExpr {\n     match expr {\n         CfgExpr::Invalid | CfgExpr::Atom(_) => expr,\n-        CfgExpr::Any(expr) => CfgExpr::Any(expr.into_iter().map(|expr| make_nnf(expr)).collect()),\n-        CfgExpr::All(expr) => CfgExpr::All(expr.into_iter().map(|expr| make_nnf(expr)).collect()),\n+        CfgExpr::Any(expr) => CfgExpr::Any(expr.into_iter().map(make_nnf).collect()),\n+        CfgExpr::All(expr) => CfgExpr::All(expr.into_iter().map(make_nnf).collect()),\n         CfgExpr::Not(operand) => match *operand {\n             CfgExpr::Invalid | CfgExpr::Atom(_) => CfgExpr::Not(operand.clone()), // Original negated expr\n             CfgExpr::Not(expr) => {"}, {"sha": "44eaeffb9e6f10cbb62ff554c53a74f17217fc39", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -213,7 +213,7 @@ impl Crate {\n                 Some(TokenTree::Leaf(Leaf::Literal(Literal{ref text, ..}))) => Some(text),\n                 _ => None\n             }\n-        }).flat_map(|t| t).next();\n+        }).flatten().next();\n \n         doc_url.map(|s| s.trim_matches('\"').trim_end_matches('/').to_owned() + \"/\")\n     }"}, {"sha": "52a2bce9b10aad3a18892e1863cbe4b20e9af1ed", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -638,7 +638,7 @@ fn collect_attrs(\n     owner: &dyn ast::AttrsOwner,\n ) -> impl Iterator<Item = Either<ast::Attr, ast::Comment>> {\n     let (inner_attrs, inner_docs) = inner_attributes(owner.syntax())\n-        .map_or((None, None), |(attrs, docs)| ((Some(attrs), Some(docs))));\n+        .map_or((None, None), |(attrs, docs)| (Some(attrs), Some(docs)));\n \n     let outer_attrs = owner.attrs().filter(|attr| attr.excl_token().is_none());\n     let attrs = outer_attrs"}, {"sha": "04ea9c5d7f9635ff396c749c0920faefcecdaa41", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -472,7 +472,7 @@ impl Scope {\n             }\n             Scope::ExprScope(scope) => {\n                 if let Some((label, name)) = scope.expr_scopes.label(scope.scope_id) {\n-                    f(name.clone(), ScopeDef::Label(label))\n+                    f(name, ScopeDef::Label(label))\n                 }\n                 scope.expr_scopes.entries(scope.scope_id).iter().for_each(|e| {\n                     f(e.name().clone(), ScopeDef::Local(e.pat()));"}, {"sha": "fc73e435bfbfdcbcf8d00ca927e0b1c057c53f11", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -173,7 +173,7 @@ fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<GreenNode> {\n     };\n     let loc = db.lookup_intern_macro(id);\n     let arg = loc.kind.arg(db)?;\n-    Some(arg.green().to_owned())\n+    Some(arg.green())\n }\n \n fn macro_arg(db: &dyn AstDatabase, id: MacroCallId) -> Option<Arc<(tt::Subtree, mbe::TokenMap)>> {"}, {"sha": "0aeea48d5061b9c00bfcdf139a187be8bb10a015", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -48,9 +48,8 @@ impl Name {\n \n     /// Resolve a name from the text of token.\n     fn resolve(raw_text: &str) -> Name {\n-        let raw_start = \"r#\";\n-        if raw_text.starts_with(raw_start) {\n-            Name::new_text(SmolStr::new(&raw_text[raw_start.len()..]))\n+        if let Some(text) = raw_text.strip_prefix(\"r#\") {\n+            Name::new_text(SmolStr::new(text))\n         } else {\n             Name::new_text(raw_text.into())\n         }"}, {"sha": "ec491648fe9a33ab1c01e03c992206fdd933d726", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -38,7 +38,7 @@ impl<'a> InferenceContext<'a> {\n         let field_tys = def.map(|it| self.db.field_types(it)).unwrap_or_default();\n         let (pre, post) = match ellipsis {\n             Some(idx) => subpats.split_at(idx),\n-            None => (&subpats[..], &[][..]),\n+            None => (subpats, &[][..]),\n         };\n         let post_idx_offset = field_tys.iter().count() - post.len();\n "}, {"sha": "c914a3b8e04e5d242d9fe614cf810654f37588ab", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -946,8 +946,7 @@ pub(crate) fn trait_environment_query(\n         let substs = Substitution::type_params(db, trait_id);\n         let trait_ref = TraitRef { trait_id: to_chalk_trait_id(trait_id), substitution: substs };\n         let pred = WhereClause::Implemented(trait_ref);\n-        let program_clause: chalk_ir::ProgramClause<Interner> =\n-            pred.clone().to_chalk(db).cast(&Interner);\n+        let program_clause: chalk_ir::ProgramClause<Interner> = pred.to_chalk(db).cast(&Interner);\n         clauses.push(program_clause.into_from_env_clause(&Interner));\n     }\n "}, {"sha": "5201ce587a8570ee7ef851246680cabf10266bc6", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -263,11 +263,10 @@ fn extend_list_item(node: &SyntaxNode) -> Option<TextRange> {\n     ) -> Option<SyntaxToken> {\n         node.siblings_with_tokens(dir)\n             .skip(1)\n-            .skip_while(|node| match node {\n-                NodeOrToken::Node(_) => false,\n-                NodeOrToken::Token(it) => is_single_line_ws(it),\n+            .find(|node| match node {\n+                NodeOrToken::Node(_) => true,\n+                NodeOrToken::Token(it) => !is_single_line_ws(it),\n             })\n-            .next()\n             .and_then(|it| it.into_token())\n             .filter(|node| node.kind() == delimiter_kind)\n     }"}, {"sha": "9dc3ee28fd168b93aba734d1d6db7c2db499426d", "filename": "crates/ide_assists/src/handlers/convert_comment_block.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -1,5 +1,4 @@\n use itertools::Itertools;\n-use std::convert::identity;\n use syntax::{\n     ast::{\n         self,\n@@ -140,7 +139,7 @@ fn relevant_line_comments(comment: &ast::Comment) -> Vec<Comment> {\n         .filter(|s| !skippable(s))\n         .map(|not| not.into_token().and_then(Comment::cast).filter(same_prefix))\n         .take_while(|opt_com| opt_com.is_some())\n-        .filter_map(identity)\n+        .flatten()\n         .skip(1); // skip the first element so we don't duplicate it in next_comments\n \n     let next_comments = comment\n@@ -149,7 +148,7 @@ fn relevant_line_comments(comment: &ast::Comment) -> Vec<Comment> {\n         .filter(|s| !skippable(s))\n         .map(|not| not.into_token().and_then(Comment::cast).filter(same_prefix))\n         .take_while(|opt_com| opt_com.is_some())\n-        .filter_map(identity);\n+        .flatten();\n \n     let mut comments: Vec<_> = prev_comments.collect();\n     comments.reverse();"}, {"sha": "98389e4f7b1a990533b7137de3d691fbcb38d765", "filename": "crates/ide_assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -136,18 +136,13 @@ impl Refs {\n                 .into_iter()\n                 .filter(|r| {\n                     if let Def::ModuleDef(ModuleDef::Trait(tr)) = r.def {\n-                        if tr\n-                            .items(ctx.db())\n-                            .into_iter()\n-                            .find(|ai| {\n-                                if let AssocItem::Function(f) = *ai {\n-                                    Def::ModuleDef(ModuleDef::Function(f)).is_referenced_in(ctx)\n-                                } else {\n-                                    false\n-                                }\n-                            })\n-                            .is_some()\n-                        {\n+                        if tr.items(ctx.db()).into_iter().any(|ai| {\n+                            if let AssocItem::Function(f) = ai {\n+                                Def::ModuleDef(ModuleDef::Function(f)).is_referenced_in(ctx)\n+                            } else {\n+                                false\n+                            }\n+                        }) {\n                             return true;\n                         }\n                     }"}, {"sha": "f976e73adc30b9d95c545104e7ec10e7068a8969", "filename": "crates/ide_assists/src/handlers/reorder_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_impl.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -95,7 +95,7 @@ fn compute_method_ranks(path: &ast::Path, ctx: &AssistContext) -> Option<FxHashM\n                 _ => None,\n             })\n             .enumerate()\n-            .map(|(idx, func)| ((func.name(ctx.db()).to_string(), idx)))\n+            .map(|(idx, func)| (func.name(ctx.db()).to_string(), idx))\n             .collect(),\n     )\n }"}, {"sha": "d82564381d19def76985b2d002f73419a945eb1a", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -71,7 +71,7 @@ fn test_has_block_expr_parent() {\n }\n \n pub(crate) fn has_bind_pat_parent(element: SyntaxElement) -> bool {\n-    element.ancestors().find(|it| it.kind() == IDENT_PAT).is_some()\n+    element.ancestors().any(|it| it.kind() == IDENT_PAT)\n }\n #[test]\n fn test_has_bind_pat_parent() {"}, {"sha": "5e757e70191a1142254db6eb83ba303a08336693", "filename": "crates/ide_ssr/src/parsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fide_ssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fide_ssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fparsing.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -67,7 +67,7 @@ impl ParsedRule {\n     ) -> Result<Vec<ParsedRule>, SsrError> {\n         let raw_pattern = pattern.as_rust_code();\n         let raw_template = template.map(|t| t.as_rust_code());\n-        let raw_template = raw_template.as_ref().map(|s| s.as_str());\n+        let raw_template = raw_template.as_deref();\n         let mut builder = RuleBuilder {\n             placeholders_by_stand_in: pattern.placeholders_by_stand_in(),\n             rules: Vec::new(),"}, {"sha": "75d2f2eedf27fbab820fe40dd844dc249ba2898b", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -304,7 +304,7 @@ impl BindingsBuilder {\n         link_nodes: &'a Vec<LinkNode<Rc<BindingKind>>>,\n         nodes: &mut Vec<&'a Rc<BindingKind>>,\n     ) {\n-        link_nodes.into_iter().for_each(|it| match it {\n+        link_nodes.iter().for_each(|it| match it {\n             LinkNode::Node(it) => nodes.push(it),\n             LinkNode::Parent { idx, len } => self.collect_nodes_ref(*idx, *len, nodes),\n         });\n@@ -713,10 +713,9 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n                     .map(|ident| Some(tt::Leaf::from(ident.clone()).into()))\n                     .map_err(|()| err!(\"expected ident\")),\n                 \"tt\" => input.expect_tt().map(Some).map_err(|()| err!()),\n-                \"lifetime\" => input\n-                    .expect_lifetime()\n-                    .map(|tt| Some(tt))\n-                    .map_err(|()| err!(\"expected lifetime\")),\n+                \"lifetime\" => {\n+                    input.expect_lifetime().map(Some).map_err(|()| err!(\"expected lifetime\"))\n+                }\n                 \"literal\" => {\n                     let neg = input.eat_char('-');\n                     input"}, {"sha": "e74f8cf3f4e8cc8cc1723ad3f28b08bedaac78bb", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -356,6 +356,6 @@ impl<T> ExpandResult<T> {\n \n impl<T: Default> From<Result<T, ExpandError>> for ExpandResult<T> {\n     fn from(result: Result<T, ExpandError>) -> Self {\n-        result.map_or_else(|e| Self::only_err(e), |it| Self::ok(it))\n+        result.map_or_else(Self::only_err, Self::ok)\n     }\n }"}, {"sha": "61b2a49551f43e383b475a05b95d02ae1838dffe", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -57,7 +57,7 @@ impl<'a> Iterator for OpDelimitedIter<'a> {\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n         let len = self.inner.len() + if self.delimited.is_some() { 2 } else { 0 };\n-        let remain = len.checked_sub(self.idx).unwrap_or(0);\n+        let remain = len.saturating_sub(self.idx);\n         (remain, Some(remain))\n     }\n }"}, {"sha": "9d433b3b0bd20775c2776e4d572e912230947b95", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -362,7 +362,7 @@ trait TokenConvertor {\n             if let Some((kind, closed)) = delim {\n                 let mut subtree = tt::Subtree::default();\n                 let (id, idx) = self.id_alloc().open_delim(range);\n-                subtree.delimiter = Some(tt::Delimiter { kind, id });\n+                subtree.delimiter = Some(tt::Delimiter { id, kind });\n \n                 while self.peek().map(|it| it.kind() != closed).unwrap_or(false) {\n                     self.collect_leaf(&mut subtree.token_trees);"}, {"sha": "8951f3813759497656d9469f70a0a5452516185b", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -1225,8 +1225,7 @@ macro_rules! m {\n     )\n     .expand_statements(r#\"m!(C(\"0\"))\"#)\n     .descendants()\n-    .find(|token| token.kind() == ERROR)\n-    .is_some());\n+    .any(|token| token.kind() == ERROR));\n }\n \n #[test]"}, {"sha": "f7050be4e7f0c5fe5b6d103ed132b577335054f9", "filename": "crates/project_model/src/build_data.rs", "status": "modified", "additions": 42, "deletions": 49, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -137,60 +137,53 @@ fn collect_from_workspace(\n     let stdout = BufReader::new(child_stdout);\n \n     let mut res = BuildDataMap::default();\n-    for message in cargo_metadata::Message::parse_stream(stdout) {\n-        if let Ok(message) = message {\n-            match message {\n-                Message::BuildScriptExecuted(BuildScript {\n-                    package_id,\n-                    out_dir,\n-                    cfgs,\n-                    env,\n-                    ..\n-                }) => {\n-                    let cfgs = {\n-                        let mut acc = Vec::new();\n-                        for cfg in cfgs {\n-                            match cfg.parse::<CfgFlag>() {\n-                                Ok(it) => acc.push(it),\n-                                Err(err) => {\n-                                    anyhow::bail!(\"invalid cfg from cargo-metadata: {}\", err)\n-                                }\n-                            };\n-                        }\n-                        acc\n-                    };\n-                    let res = res.entry(package_id.repr.clone()).or_default();\n-                    // cargo_metadata crate returns default (empty) path for\n-                    // older cargos, which is not absolute, so work around that.\n-                    if !out_dir.as_str().is_empty() {\n-                        let out_dir = AbsPathBuf::assert(PathBuf::from(out_dir.into_os_string()));\n-                        res.out_dir = Some(out_dir);\n-                        res.cfgs = cfgs;\n+    for message in cargo_metadata::Message::parse_stream(stdout).flatten() {\n+        match message {\n+            Message::BuildScriptExecuted(BuildScript {\n+                package_id, out_dir, cfgs, env, ..\n+            }) => {\n+                let cfgs = {\n+                    let mut acc = Vec::new();\n+                    for cfg in cfgs {\n+                        match cfg.parse::<CfgFlag>() {\n+                            Ok(it) => acc.push(it),\n+                            Err(err) => {\n+                                anyhow::bail!(\"invalid cfg from cargo-metadata: {}\", err)\n+                            }\n+                        };\n                     }\n-\n-                    res.envs = env;\n+                    acc\n+                };\n+                let res = res.entry(package_id.repr.clone()).or_default();\n+                // cargo_metadata crate returns default (empty) path for\n+                // older cargos, which is not absolute, so work around that.\n+                if !out_dir.as_str().is_empty() {\n+                    let out_dir = AbsPathBuf::assert(PathBuf::from(out_dir.into_os_string()));\n+                    res.out_dir = Some(out_dir);\n+                    res.cfgs = cfgs;\n                 }\n-                Message::CompilerArtifact(message) => {\n-                    progress(format!(\"metadata {}\", message.target.name));\n-\n-                    if message.target.kind.contains(&\"proc-macro\".to_string()) {\n-                        let package_id = message.package_id;\n-                        // Skip rmeta file\n-                        if let Some(filename) = message.filenames.iter().find(|name| is_dylib(name))\n-                        {\n-                            let filename = AbsPathBuf::assert(PathBuf::from(&filename));\n-                            let res = res.entry(package_id.repr.clone()).or_default();\n-                            res.proc_macro_dylib_path = Some(filename);\n-                        }\n+\n+                res.envs = env;\n+            }\n+            Message::CompilerArtifact(message) => {\n+                progress(format!(\"metadata {}\", message.target.name));\n+\n+                if message.target.kind.contains(&\"proc-macro\".to_string()) {\n+                    let package_id = message.package_id;\n+                    // Skip rmeta file\n+                    if let Some(filename) = message.filenames.iter().find(|name| is_dylib(name)) {\n+                        let filename = AbsPathBuf::assert(PathBuf::from(&filename));\n+                        let res = res.entry(package_id.repr.clone()).or_default();\n+                        res.proc_macro_dylib_path = Some(filename);\n                     }\n                 }\n-                Message::CompilerMessage(message) => {\n-                    progress(message.target.name.clone());\n-                }\n-                Message::BuildFinished(_) => {}\n-                Message::TextLine(_) => {}\n-                _ => {}\n             }\n+            Message::CompilerMessage(message) => {\n+                progress(message.target.name.clone());\n+            }\n+            Message::BuildFinished(_) => {}\n+            Message::TextLine(_) => {}\n+            _ => {}\n         }\n     }\n "}, {"sha": "c63a0eaeaf2aaca1d9888955257594e5ca2080d0", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -242,11 +242,8 @@ impl GlobalState {\n                                 }\n                                 BuildDataProgress::End(collector) => {\n                                     self.fetch_build_data_completed();\n-                                    let workspaces = (*self.workspaces)\n-                                        .clone()\n-                                        .into_iter()\n-                                        .map(|it| Ok(it))\n-                                        .collect();\n+                                    let workspaces =\n+                                        (*self.workspaces).clone().into_iter().map(Ok).collect();\n                                     self.switch_workspaces(workspaces, Some(collector));\n                                     (Some(Progress::End), None)\n                                 }"}, {"sha": "76fdbcdddb54fb93981ffded9398020acbd9de22", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -237,7 +237,7 @@ impl GlobalState {\n             None => None,\n         };\n \n-        if &*self.workspaces == &workspaces && self.workspace_build_data == workspace_build_data {\n+        if *self.workspaces == workspaces && self.workspace_build_data == workspace_build_data {\n             return;\n         }\n "}, {"sha": "95bf26f01650425beadbd16f7a8844679c9cfb72", "filename": "crates/rust-analyzer/tests/rust-analyzer/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -54,7 +54,7 @@ impl<'a> Project<'a> {\n     }\n \n     pub(crate) fn server(self) -> Server {\n-        let tmp_dir = self.tmp_dir.unwrap_or_else(|| TestDir::new());\n+        let tmp_dir = self.tmp_dir.unwrap_or_else(TestDir::new);\n         static INIT: Once = Once::new();\n         INIT.call_once(|| {\n             env_logger::builder().is_test(true).parse_env(\"RA_LOG\").try_init().unwrap();"}, {"sha": "a153a9e1c38b79d0f66c6b4e1e3590385758d74a", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -567,7 +567,7 @@ impl<'a> SyntaxRewriter<'a> {\n \n fn element_to_green(element: SyntaxElement) -> NodeOrToken<rowan::GreenNode, rowan::GreenToken> {\n     match element {\n-        NodeOrToken::Node(it) => NodeOrToken::Node(it.green().to_owned()),\n+        NodeOrToken::Node(it) => NodeOrToken::Node(it.green()),\n         NodeOrToken::Token(it) => NodeOrToken::Token(it.green().to_owned()),\n     }\n }\n@@ -625,7 +625,7 @@ fn position_of_child(parent: &SyntaxNode, child: SyntaxElement) -> usize {\n \n fn to_green_element(element: SyntaxElement) -> NodeOrToken<rowan::GreenNode, rowan::GreenToken> {\n     match element {\n-        NodeOrToken::Node(it) => it.green().to_owned().into(),\n+        NodeOrToken::Node(it) => it.green().into(),\n         NodeOrToken::Token(it) => it.green().to_owned().into(),\n     }\n }"}, {"sha": "347862b8a4ccafeb3b92c6f05d9747f861d38e55", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -333,8 +333,7 @@ impl ast::Use {\n             .and_then(ast::Whitespace::cast);\n         if let Some(next_ws) = next_ws {\n             let ws_text = next_ws.syntax().text();\n-            if ws_text.starts_with('\\n') {\n-                let rest = &ws_text[1..];\n+            if let Some(rest) = ws_text.strip_prefix('\\n') {\n                 if rest.is_empty() {\n                     res.delete(next_ws.syntax())\n                 } else {\n@@ -462,8 +461,7 @@ impl ast::MatchArmList {\n         let end = if let Some(comma) = start\n             .siblings_with_tokens(Direction::Next)\n             .skip(1)\n-            .skip_while(|it| it.kind().is_trivia())\n-            .next()\n+            .find(|it| !it.kind().is_trivia())\n             .filter(|it| it.kind() == T![,])\n         {\n             comma\n@@ -597,7 +595,7 @@ impl IndentLevel {\n     pub fn from_node(node: &SyntaxNode) -> IndentLevel {\n         match node.first_token() {\n             Some(it) => Self::from_token(&it),\n-            None => return IndentLevel(0),\n+            None => IndentLevel(0),\n         }\n     }\n "}, {"sha": "6317d84ba3bb655c47aebdbcb4d579c0033a0e84", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -11,16 +11,16 @@ impl ast::AttrsOwner for ast::Expr {}\n \n impl ast::Expr {\n     pub fn is_block_like(&self) -> bool {\n-        match self {\n+        matches!(\n+            self,\n             ast::Expr::IfExpr(_)\n-            | ast::Expr::LoopExpr(_)\n-            | ast::Expr::ForExpr(_)\n-            | ast::Expr::WhileExpr(_)\n-            | ast::Expr::BlockExpr(_)\n-            | ast::Expr::MatchExpr(_)\n-            | ast::Expr::EffectExpr(_) => true,\n-            _ => false,\n-        }\n+                | ast::Expr::LoopExpr(_)\n+                | ast::Expr::ForExpr(_)\n+                | ast::Expr::WhileExpr(_)\n+                | ast::Expr::BlockExpr(_)\n+                | ast::Expr::MatchExpr(_)\n+                | ast::Expr::EffectExpr(_)\n+        )\n     }\n \n     pub fn name_ref(&self) -> Option<ast::NameRef> {\n@@ -151,20 +151,20 @@ pub enum BinOp {\n \n impl BinOp {\n     pub fn is_assignment(self) -> bool {\n-        match self {\n+        matches!(\n+            self,\n             BinOp::Assignment\n-            | BinOp::AddAssign\n-            | BinOp::DivAssign\n-            | BinOp::MulAssign\n-            | BinOp::RemAssign\n-            | BinOp::ShrAssign\n-            | BinOp::ShlAssign\n-            | BinOp::SubAssign\n-            | BinOp::BitOrAssign\n-            | BinOp::BitAndAssign\n-            | BinOp::BitXorAssign => true,\n-            _ => false,\n-        }\n+                | BinOp::AddAssign\n+                | BinOp::DivAssign\n+                | BinOp::MulAssign\n+                | BinOp::RemAssign\n+                | BinOp::ShrAssign\n+                | BinOp::ShlAssign\n+                | BinOp::SubAssign\n+                | BinOp::BitOrAssign\n+                | BinOp::BitAndAssign\n+                | BinOp::BitXorAssign\n+        )\n     }\n }\n "}, {"sha": "7049affd95fd2b4dbf4186e39f5469bcfd41fdd7", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -532,7 +532,7 @@ fn ast_from_text<N: AstNode>(text: &str) -> N {\n }\n \n fn unroot(n: SyntaxNode) -> SyntaxNode {\n-    SyntaxNode::new_root(n.green().to_owned())\n+    SyntaxNode::new_root(n.green())\n }\n \n pub mod tokens {"}, {"sha": "bdf907a21a38ed767c902a3aa05cd07d2a2fb2a7", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -58,10 +58,7 @@ impl From<ast::MacroDef> for Macro {\n \n impl AstNode for Macro {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            SyntaxKind::MACRO_RULES | SyntaxKind::MACRO_DEF => true,\n-            _ => false,\n-        }\n+        matches!(kind, SyntaxKind::MACRO_RULES | SyntaxKind::MACRO_DEF)\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n@@ -462,10 +459,8 @@ impl ast::FieldExpr {\n     pub fn field_access(&self) -> Option<FieldKind> {\n         if let Some(nr) = self.name_ref() {\n             Some(FieldKind::Name(nr))\n-        } else if let Some(tok) = self.index_token() {\n-            Some(FieldKind::Index(tok))\n         } else {\n-            None\n+            self.index_token().map(FieldKind::Index)\n         }\n     }\n }\n@@ -482,16 +477,10 @@ impl ast::SlicePat {\n         let prefix = args\n             .peeking_take_while(|p| match p {\n                 ast::Pat::RestPat(_) => false,\n-                ast::Pat::IdentPat(bp) => match bp.pat() {\n-                    Some(ast::Pat::RestPat(_)) => false,\n-                    _ => true,\n-                },\n+                ast::Pat::IdentPat(bp) => !matches!(bp.pat(), Some(ast::Pat::RestPat(_))),\n                 ast::Pat::RefPat(rp) => match rp.pat() {\n                     Some(ast::Pat::RestPat(_)) => false,\n-                    Some(ast::Pat::IdentPat(bp)) => match bp.pat() {\n-                        Some(ast::Pat::RestPat(_)) => false,\n-                        _ => true,\n-                    },\n+                    Some(ast::Pat::IdentPat(bp)) => !matches!(bp.pat(), Some(ast::Pat::RestPat(_))),\n                     _ => true,\n                 },\n                 _ => true,"}, {"sha": "090282d2800ca80e258fda4e39cee2149d7c75ca", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -494,9 +494,8 @@ pub trait HasFormatSpecifier: AstToken {\n                 }\n                 _ => {\n                     while let Some((_, Ok(next_char))) = chars.peek() {\n-                        match next_char {\n-                            '{' => break,\n-                            _ => {}\n+                        if next_char == &'{' {\n+                            break;\n                         }\n                         chars.next();\n                     }"}, {"sha": "aa84239d2f07b61f758afa1ec2823238e810e866", "filename": "crates/syntax/src/fuzz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Ffuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Ffuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ffuzz.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -43,7 +43,7 @@ impl CheckReparse {\n             TextRange::at(delete_start.try_into().unwrap(), delete_len.try_into().unwrap());\n         let edited_text =\n             format!(\"{}{}{}\", &text[..delete_start], &insert, &text[delete_start + delete_len..]);\n-        let edit = Indel { delete, insert };\n+        let edit = Indel { insert, delete };\n         Some(CheckReparse { text, edit, edited_text })\n     }\n "}, {"sha": "bbe802174a6bb4e74868ac2618d9d72b16761d4f", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -297,7 +297,7 @@ fn validate_path_keywords(segment: ast::PathSegment, errors: &mut Vec<SyntaxErro\n                 }\n             };\n         }\n-        return None;\n+        None\n     }\n \n     fn all_supers(path: &ast::Path) -> bool {\n@@ -314,7 +314,7 @@ fn validate_path_keywords(segment: ast::PathSegment, errors: &mut Vec<SyntaxErro\n             return all_supers(subpath);\n         }\n \n-        return true;\n+        true\n     }\n }\n "}, {"sha": "bed44d60058afeaee6213ff604deb73ead51434e", "filename": "crates/tt/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Ftt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/crates%2Ftt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Flib.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -239,9 +239,8 @@ impl Subtree {\n \n         let mut res = String::new();\n         res.push_str(delim.0);\n-        let mut iter = self.token_trees.iter();\n         let mut last = None;\n-        while let Some(child) = iter.next() {\n+        for child in &self.token_trees {\n             let s = match child {\n                 TokenTree::Leaf(it) => {\n                     let s = match it {"}, {"sha": "c91716409eb51825381a2e45c0baa0d6db9806e7", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -154,8 +154,8 @@ fn hide_hash_comments(text: &str) -> String {\n fn reveal_hash_comments(text: &str) -> String {\n     text.split('\\n') // want final newline\n         .map(|it| {\n-            if it.starts_with(\"# \") {\n-                &it[2..]\n+            if let Some(stripped) = it.strip_prefix(\"# \") {\n+                stripped\n             } else if it == \"#\" {\n                 \"\"\n             } else {"}, {"sha": "2fecb9b5bd8a8eaa275f05686e3fedd104717d10", "filename": "xtask/src/codegen/gen_parser_tests.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -60,12 +60,10 @@ fn collect_tests(s: &str) -> Vec<Test> {\n     let mut res = Vec::new();\n     for comment_block in extract_comment_blocks(s) {\n         let first_line = &comment_block[0];\n-        let (name, ok) = if first_line.starts_with(\"test \") {\n-            let name = first_line[\"test \".len()..].to_string();\n-            (name, true)\n-        } else if first_line.starts_with(\"test_err \") {\n-            let name = first_line[\"test_err \".len()..].to_string();\n-            (name, false)\n+        let (name, ok) = if let Some(name) = first_line.strip_prefix(\"test \") {\n+            (name.to_string(), true)\n+        } else if let Some(name) = first_line.strip_prefix(\"test_err \") {\n+            (name.to_string(), false)\n         } else {\n             continue;\n         };"}, {"sha": "ba4b2484897f0020627cb8869bd29538a447d2e3", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -707,7 +707,7 @@ fn extract_struct_trait(node: &mut AstNodeSrc, trait_name: &str, methods: &[&str\n     let mut to_remove = Vec::new();\n     for (i, field) in node.fields.iter().enumerate() {\n         let method_name = field.method_name().to_string();\n-        if methods.iter().any(|&it| it == &method_name) {\n+        if methods.iter().any(|&it| it == method_name) {\n             to_remove.push(i);\n         }\n     }"}, {"sha": "960927fc00362c0bdb147c2311fc942b55ed1faf", "filename": "xtask/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -37,7 +37,7 @@ fn main() -> Result<()> {\n     match flags.subcommand {\n         flags::XtaskCmd::Help(_) => {\n             println!(\"{}\", flags::Xtask::HELP);\n-            return Ok(());\n+            Ok(())\n         }\n         flags::XtaskCmd::Install(cmd) => cmd.run(),\n         flags::XtaskCmd::FuzzTests(_) => run_fuzzer(),"}, {"sha": "b0b76b8aac50895e9bfb995cee74ca9bed79fbb7", "filename": "xtask/src/metrics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/xtask%2Fsrc%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/xtask%2Fsrc%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmetrics.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -167,7 +167,7 @@ impl Host {\n \n         return Ok(Host { os, cpu, mem });\n \n-        fn read_field<'a>(path: &str, field: &str) -> Result<String> {\n+        fn read_field(path: &str, field: &str) -> Result<String> {\n             let text = read_file(path)?;\n \n             let line = text"}, {"sha": "50d9efccd2dc375102aeb7e54e727583d4761b57", "filename": "xtask/src/tidy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/xtask%2Fsrc%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf133f68eec63eee27a8666c7590d2e8b4ef8/xtask%2Fsrc%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Ftidy.rs?ref=d51cf133f68eec63eee27a8666c7590d2e8b4ef8", "patch": "@@ -193,7 +193,7 @@ https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/#redo-after-\n     }\n }\n \n-fn deny_clippy(path: &PathBuf, text: &String) {\n+fn deny_clippy(path: &Path, text: &str) {\n     let ignore = &[\n         // The documentation in string literals may contain anything for its own purposes\n         \"ide_completion/src/generated_lint_completions.rs\","}]}