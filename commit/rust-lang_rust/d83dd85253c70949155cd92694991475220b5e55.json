{"sha": "d83dd85253c70949155cd92694991475220b5e55", "node_id": "C_kwDOAAsO6NoAKGQ4M2RkODUyNTNjNzA5NDkxNTVjZDkyNjk0OTkxNDc1MjIwYjVlNTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-05T10:26:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-05T10:26:08Z"}, "message": "Rollup merge of #92545 - dtolnay:rustlog, r=petrochenkov\n\nExtract init_env_logger to crate\n\nI've been doing some work on rustc_ast_pretty using an out-of-tree main.rs and Cargo.toml with the following:\n\n```toml\n[dependencies]\nrustc_ast = { path = \"../rust/compiler/rustc_ast\" }\nrustc_ast_pretty = { path = \"../rust/compiler/rustc_ast_pretty\" }\nrustc_span = { path = \"../rust/compiler/rustc_span\" }\n```\n\nRustc_ast_pretty helpfully uses `tracing::debug!` but I found that in order to enable the debug output, my test crate must depend on rustc_driver which is an enormously bigger dependency than what I have been using so far, and slows down iteration time because an enormous dependency tree between rustc_ast and rustc_driver must now be rebuilt after every ast change.\n\nI pulled out the tracing initialization to a new minimal rustc_log crate so that projects depending on the other rustc crates, like rustc_ast_pretty, can access the `debug!` messages in them without building all the rest of rustc.", "tree": {"sha": "ab0bd47ed8df557510360100dbdd80f7ae1796e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab0bd47ed8df557510360100dbdd80f7ae1796e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d83dd85253c70949155cd92694991475220b5e55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh1XJACRBK7hj4Ov3rIwAABpUIAGBkTwN6rQ1Wydcteho7VNvm\nlqemEFdjr//RtopsbIfQDa3vVQOE+YPytqkmGbhKvMYnV08q4Mt8sqHCIywky5gu\nTafzr2q1HdMSJpnctDsf3FK+Ue94YxlD39P7mvRBKFga6+WpzJXKyZ9TKKV5ZzEE\nIHEbs3sz4DodEZXt50a4eKYq+PQQlCqSwAr41ijaZGmqoKluYD7h91IjZvagtdHZ\n5Qz5eV5NVwUa3G8jLu6aWaLeKSI7IJ/XL0oOroZmUfcC/NQZQ7LNLoCxkPVcenJI\n2Si8H2jv1ZBLpj24hdgzQjpGRFcohijsy5ra8XL6aXwy50KtwFA0ulbIyVMA8vU=\n=f4hc\n-----END PGP SIGNATURE-----\n", "payload": "tree ab0bd47ed8df557510360100dbdd80f7ae1796e9\nparent 42a3acfdb189cea6c19e6cbc7f1e0786986fecc5\nparent ffbeebbf7a6dc5fba40b439fc0ebe80ac72af309\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641378368 +0100\ncommitter GitHub <noreply@github.com> 1641378368 +0100\n\nRollup merge of #92545 - dtolnay:rustlog, r=petrochenkov\n\nExtract init_env_logger to crate\n\nI've been doing some work on rustc_ast_pretty using an out-of-tree main.rs and Cargo.toml with the following:\n\n```toml\n[dependencies]\nrustc_ast = { path = \"../rust/compiler/rustc_ast\" }\nrustc_ast_pretty = { path = \"../rust/compiler/rustc_ast_pretty\" }\nrustc_span = { path = \"../rust/compiler/rustc_span\" }\n```\n\nRustc_ast_pretty helpfully uses `tracing::debug!` but I found that in order to enable the debug output, my test crate must depend on rustc_driver which is an enormously bigger dependency than what I have been using so far, and slows down iteration time because an enormous dependency tree between rustc_ast and rustc_driver must now be rebuilt after every ast change.\n\nI pulled out the tracing initialization to a new minimal rustc_log crate so that projects depending on the other rustc crates, like rustc_ast_pretty, can access the `debug!` messages in them without building all the rest of rustc.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d83dd85253c70949155cd92694991475220b5e55", "html_url": "https://github.com/rust-lang/rust/commit/d83dd85253c70949155cd92694991475220b5e55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d83dd85253c70949155cd92694991475220b5e55/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42a3acfdb189cea6c19e6cbc7f1e0786986fecc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/42a3acfdb189cea6c19e6cbc7f1e0786986fecc5", "html_url": "https://github.com/rust-lang/rust/commit/42a3acfdb189cea6c19e6cbc7f1e0786986fecc5"}, {"sha": "ffbeebbf7a6dc5fba40b439fc0ebe80ac72af309", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffbeebbf7a6dc5fba40b439fc0ebe80ac72af309", "html_url": "https://github.com/rust-lang/rust/commit/ffbeebbf7a6dc5fba40b439fc0ebe80ac72af309"}], "stats": {"total": 209, "additions": 152, "deletions": 57}, "files": [{"sha": "8ca66b6ae6146d5fe88d837bcab67e1d6d27a13d", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d83dd85253c70949155cd92694991475220b5e55/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d83dd85253c70949155cd92694991475220b5e55/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d83dd85253c70949155cd92694991475220b5e55", "patch": "@@ -3808,7 +3808,6 @@ dependencies = [\n name = \"rustc_driver\"\n version = \"0.0.0\"\n dependencies = [\n- \"atty\",\n  \"libc\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n@@ -3822,6 +3821,7 @@ dependencies = [\n  \"rustc_hir_pretty\",\n  \"rustc_interface\",\n  \"rustc_lint\",\n+ \"rustc_log\",\n  \"rustc_metadata\",\n  \"rustc_middle\",\n  \"rustc_parse\",\n@@ -3833,8 +3833,6 @@ dependencies = [\n  \"rustc_target\",\n  \"rustc_typeck\",\n  \"tracing\",\n- \"tracing-subscriber\",\n- \"tracing-tree\",\n  \"winapi\",\n ]\n \n@@ -4077,6 +4075,17 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"rustc_log\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"atty\",\n+ \"rustc_span\",\n+ \"tracing\",\n+ \"tracing-subscriber\",\n+ \"tracing-tree\",\n+]\n+\n [[package]]\n name = \"rustc_macros\"\n version = \"0.1.0\""}, {"sha": "872f946bf7d91cf9b8261c65154314302aa3eb70", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d83dd85253c70949155cd92694991475220b5e55/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d83dd85253c70949155cd92694991475220b5e55/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=d83dd85253c70949155cd92694991475220b5e55", "patch": "@@ -8,10 +8,8 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n libc = \"0.2\"\n-atty = \"0.2\"\n tracing = { version = \"0.1.28\" }\n-tracing-subscriber = { version = \"0.3.3\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n-tracing-tree = \"0.2.0\"\n+rustc_log = { path = \"../rustc_log\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_target = { path = \"../rustc_target\" }\n@@ -40,4 +38,4 @@ winapi = { version = \"0.3\", features = [\"consoleapi\", \"debugapi\", \"processenv\"]\n \n [features]\n llvm = ['rustc_interface/llvm']\n-max_level_info = ['tracing/max_level_info']\n+max_level_info = ['rustc_log/max_level_info']"}, {"sha": "3d58b27f83922fb43bd59be1551f2340878d4494", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 7, "deletions": 50, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d83dd85253c70949155cd92694991475220b5e55/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d83dd85253c70949155cd92694991475220b5e55/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=d83dd85253c70949155cd92694991475220b5e55", "patch": "@@ -24,6 +24,7 @@ use rustc_feature::find_gated_cfg;\n use rustc_interface::util::{self, collect_crate_types, get_codegen_backend};\n use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n+use rustc_log::stdout_isatty;\n use rustc_metadata::locator;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n@@ -514,14 +515,6 @@ impl Compilation {\n #[derive(Copy, Clone)]\n pub struct RustcDefaultCalls;\n \n-fn stdout_isatty() -> bool {\n-    atty::is(atty::Stream::Stdout)\n-}\n-\n-fn stderr_isatty() -> bool {\n-    atty::is(atty::Stream::Stderr)\n-}\n-\n fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n     let upper_cased_code = code.to_ascii_uppercase();\n     let normalised = if upper_cased_code.starts_with('E') {\n@@ -1254,54 +1247,18 @@ pub fn install_ice_hook() {\n /// This allows tools to enable rust logging without having to magically match rustc's\n /// tracing crate version.\n pub fn init_rustc_env_logger() {\n-    init_env_logger(\"RUSTC_LOG\")\n+    if let Err(error) = rustc_log::init_rustc_env_logger() {\n+        early_error(ErrorOutputType::default(), &error.to_string());\n+    }\n }\n \n /// This allows tools to enable rust logging without having to magically match rustc's\n /// tracing crate version. In contrast to `init_rustc_env_logger` it allows you to choose an env var\n /// other than `RUSTC_LOG`.\n pub fn init_env_logger(env: &str) {\n-    use tracing_subscriber::{\n-        filter::{self, EnvFilter, LevelFilter},\n-        layer::SubscriberExt,\n-    };\n-\n-    let filter = match std::env::var(env) {\n-        Ok(env) => EnvFilter::new(env),\n-        _ => EnvFilter::default().add_directive(filter::Directive::from(LevelFilter::WARN)),\n-    };\n-\n-    let color_logs = match std::env::var(String::from(env) + \"_COLOR\") {\n-        Ok(value) => match value.as_ref() {\n-            \"always\" => true,\n-            \"never\" => false,\n-            \"auto\" => stderr_isatty(),\n-            _ => early_error(\n-                ErrorOutputType::default(),\n-                &format!(\n-                    \"invalid log color value '{}': expected one of always, never, or auto\",\n-                    value\n-                ),\n-            ),\n-        },\n-        Err(std::env::VarError::NotPresent) => stderr_isatty(),\n-        Err(std::env::VarError::NotUnicode(_value)) => early_error(\n-            ErrorOutputType::default(),\n-            \"non-Unicode log color value: expected one of always, never, or auto\",\n-        ),\n-    };\n-\n-    let layer = tracing_tree::HierarchicalLayer::default()\n-        .with_writer(io::stderr)\n-        .with_indent_lines(true)\n-        .with_ansi(color_logs)\n-        .with_targets(true)\n-        .with_indent_amount(2);\n-    #[cfg(parallel_compiler)]\n-    let layer = layer.with_thread_ids(true).with_thread_names(true);\n-\n-    let subscriber = tracing_subscriber::Registry::default().with(filter).with(layer);\n-    tracing::subscriber::set_global_default(subscriber).unwrap();\n+    if let Err(error) = rustc_log::init_env_logger(env) {\n+        early_error(ErrorOutputType::default(), &error.to_string());\n+    }\n }\n \n #[cfg(all(unix, any(target_env = \"gnu\", target_os = \"macos\")))]"}, {"sha": "1b2cde605556dcd4ee0141333c06cab68fca5a7d", "filename": "compiler/rustc_log/Cargo.toml", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d83dd85253c70949155cd92694991475220b5e55/compiler%2Frustc_log%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d83dd85253c70949155cd92694991475220b5e55/compiler%2Frustc_log%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2FCargo.toml?ref=d83dd85253c70949155cd92694991475220b5e55", "patch": "@@ -0,0 +1,16 @@\n+[package]\n+name = \"rustc_log\"\n+version = \"0.0.0\"\n+edition = \"2021\"\n+\n+[dependencies]\n+atty = \"0.2\"\n+tracing = \"0.1.28\"\n+tracing-subscriber = { version = \"0.3.3\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n+tracing-tree = \"0.2.0\"\n+\n+[dev-dependencies]\n+rustc_span = { path = \"../rustc_span\" }\n+\n+[features]\n+max_level_info = ['tracing/max_level_info']"}, {"sha": "f5e7435d36e36f462a16f81d5c0de5c550592959", "filename": "compiler/rustc_log/src/lib.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/d83dd85253c70949155cd92694991475220b5e55/compiler%2Frustc_log%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d83dd85253c70949155cd92694991475220b5e55/compiler%2Frustc_log%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2Fsrc%2Flib.rs?ref=d83dd85253c70949155cd92694991475220b5e55", "patch": "@@ -0,0 +1,115 @@\n+//! This crate allows tools to enable rust logging without having to magically\n+//! match rustc's tracing crate version.\n+//!\n+//! For example if someone is working on rustc_ast and wants to write some\n+//! minimal code against it to run in a debugger, with access to the `debug!`\n+//! logs emitted by rustc_ast, that can be done by writing:\n+//!\n+//! ```toml\n+//! [dependencies]\n+//! rustc_ast = { path = \"../rust/compiler/rustc_ast\" }\n+//! rustc_log = { path = \"../rust/compiler/rustc_log\" }\n+//! rustc_span = { path = \"../rust/compiler/rustc_span\" }\n+//! ```\n+//!\n+//! ```\n+//! fn main() {\n+//!     rustc_log::init_rustc_env_logger().unwrap();\n+//!\n+//!     let edition = rustc_span::edition::Edition::Edition2021;\n+//!     rustc_span::create_session_globals_then(edition, || {\n+//!         /* ... */\n+//!     });\n+//! }\n+//! ```\n+//!\n+//! Now `RUSTC_LOG=debug cargo run` will run your minimal main.rs and show\n+//! rustc's debug logging. In a workflow like this, one might also add\n+//! `std::env::set_var(\"RUSTC_LOG\", \"debug\")` to the top of main so that `cargo\n+//! run` by itself is sufficient to get logs.\n+//!\n+//! The reason rustc_log is a tiny separate crate, as opposed to exposing the\n+//! same things in rustc_driver only, is to enable the above workflow. If you\n+//! had to depend on rustc_driver in order to turn on rustc's debug logs, that's\n+//! an enormously bigger dependency tree; every change you make to rustc_ast (or\n+//! whichever piece of the compiler you are interested in) would involve\n+//! rebuilding all the rest of rustc up to rustc_driver in order to run your\n+//! main.rs. Whereas by depending only on rustc_log and the few crates you are\n+//! debugging, you can make changes inside those crates and quickly run main.rs\n+//! to read the debug logs.\n+\n+use std::env::{self, VarError};\n+use std::fmt::{self, Display};\n+use std::io;\n+use tracing_subscriber::filter::{Directive, EnvFilter, LevelFilter};\n+use tracing_subscriber::layer::SubscriberExt;\n+\n+pub fn init_rustc_env_logger() -> Result<(), Error> {\n+    init_env_logger(\"RUSTC_LOG\")\n+}\n+\n+/// In contrast to `init_rustc_env_logger` this allows you to choose an env var\n+/// other than `RUSTC_LOG`.\n+pub fn init_env_logger(env: &str) -> Result<(), Error> {\n+    let filter = match env::var(env) {\n+        Ok(env) => EnvFilter::new(env),\n+        _ => EnvFilter::default().add_directive(Directive::from(LevelFilter::WARN)),\n+    };\n+\n+    let color_logs = match env::var(String::from(env) + \"_COLOR\") {\n+        Ok(value) => match value.as_ref() {\n+            \"always\" => true,\n+            \"never\" => false,\n+            \"auto\" => stderr_isatty(),\n+            _ => return Err(Error::InvalidColorValue(value)),\n+        },\n+        Err(VarError::NotPresent) => stderr_isatty(),\n+        Err(VarError::NotUnicode(_value)) => return Err(Error::NonUnicodeColorValue),\n+    };\n+\n+    let layer = tracing_tree::HierarchicalLayer::default()\n+        .with_writer(io::stderr)\n+        .with_indent_lines(true)\n+        .with_ansi(color_logs)\n+        .with_targets(true)\n+        .with_indent_amount(2);\n+    #[cfg(parallel_compiler)]\n+    let layer = layer.with_thread_ids(true).with_thread_names(true);\n+\n+    let subscriber = tracing_subscriber::Registry::default().with(filter).with(layer);\n+    tracing::subscriber::set_global_default(subscriber).unwrap();\n+\n+    Ok(())\n+}\n+\n+pub fn stdout_isatty() -> bool {\n+    atty::is(atty::Stream::Stdout)\n+}\n+\n+pub fn stderr_isatty() -> bool {\n+    atty::is(atty::Stream::Stderr)\n+}\n+\n+#[derive(Debug)]\n+pub enum Error {\n+    InvalidColorValue(String),\n+    NonUnicodeColorValue,\n+}\n+\n+impl std::error::Error for Error {}\n+\n+impl Display for Error {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Error::InvalidColorValue(value) => write!(\n+                formatter,\n+                \"invalid log color value '{}': expected one of always, never, or auto\",\n+                value,\n+            ),\n+            Error::NonUnicodeColorValue => write!(\n+                formatter,\n+                \"non-Unicode log color value: expected one of always, never, or auto\",\n+            ),\n+        }\n+    }\n+}"}]}