{"sha": "81b4f36d49c8e9632e894f7443c9629f3c2ea294", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYjRmMzZkNDljOGU5NjMyZTg5NGY3NDQzYzk2MjlmM2MyZWEyOTQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-02T19:47:41Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-03T20:55:11Z"}, "message": "oldmap: remove legacy each method", "tree": {"sha": "6fafe084c7b305fdb825b56d3526e98ade1e7568", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fafe084c7b305fdb825b56d3526e98ade1e7568"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81b4f36d49c8e9632e894f7443c9629f3c2ea294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81b4f36d49c8e9632e894f7443c9629f3c2ea294", "html_url": "https://github.com/rust-lang/rust/commit/81b4f36d49c8e9632e894f7443c9629f3c2ea294", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81b4f36d49c8e9632e894f7443c9629f3c2ea294/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e496818a5433c9229b125117d78be906f73f5e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e496818a5433c9229b125117d78be906f73f5e7", "html_url": "https://github.com/rust-lang/rust/commit/2e496818a5433c9229b125117d78be906f73f5e7"}], "stats": {"total": 99, "additions": 48, "deletions": 51}, "files": [{"sha": "d0783911f72b5b3da59bd97711e7054bb40908c8", "filename": "src/libcargo/cargo.rc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rc?ref=81b4f36d49c8e9632e894f7443c9629f3c2ea294", "patch": "@@ -833,7 +833,7 @@ pub fn rustc_sysroot() -> ~str {\n     }\n }\n \n-pub fn install_source(c: &Cargo, path: &Path) {\n+pub fn install_source(c: &mut Cargo, path: &Path) {\n     debug!(\"source: %s\", path.to_str());\n     os::change_dir(path);\n \n@@ -872,7 +872,8 @@ pub fn install_source(c: &Cargo, path: &Path) {\n     }\n }\n \n-pub fn install_git(c: &Cargo, wd: &Path, url: ~str, reference: Option<~str>) {\n+pub fn install_git(c: &mut Cargo, wd: &Path, url: ~str,\n+                   reference: Option<~str>) {\n     run::program_output(~\"git\", ~[~\"clone\", url, wd.to_str()]);\n     if reference.is_some() {\n         let r = reference.get();\n@@ -883,7 +884,7 @@ pub fn install_git(c: &Cargo, wd: &Path, url: ~str, reference: Option<~str>) {\n     install_source(c, wd);\n }\n \n-pub fn install_curl(c: &Cargo, wd: &Path, url: ~str) {\n+pub fn install_curl(c: &mut Cargo, wd: &Path, url: ~str) {\n     let tarpath = wd.push(\"pkg.tar\");\n     let p = run::program_output(~\"curl\", ~[~\"-f\", ~\"-s\", ~\"-o\",\n                                          tarpath.to_str(), url]);\n@@ -896,14 +897,14 @@ pub fn install_curl(c: &Cargo, wd: &Path, url: ~str) {\n     install_source(c, wd);\n }\n \n-pub fn install_file(c: &Cargo, wd: &Path, path: &Path) {\n+pub fn install_file(c: &mut Cargo, wd: &Path, path: &Path) {\n     run::program_output(~\"tar\", ~[~\"-x\", ~\"--strip-components=1\",\n                                   ~\"-C\", wd.to_str(),\n                                   ~\"-f\", path.to_str()]);\n     install_source(c, wd);\n }\n \n-pub fn install_package(c: &Cargo, src: ~str, wd: &Path, pkg: Package) {\n+pub fn install_package(c: &mut Cargo, src: ~str, wd: &Path, pkg: Package) {\n     let url = copy pkg.url;\n     let method = match pkg.method {\n         ~\"git\" => ~\"git\",\n@@ -930,7 +931,7 @@ pub fn cargo_suggestion(c: &Cargo, fallback: fn()) {\n     fallback();\n }\n \n-pub fn install_uuid(c: &Cargo, wd: &Path, uuid: ~str) {\n+pub fn install_uuid(c: &mut Cargo, wd: &Path, uuid: ~str) {\n     let mut ps = ~[];\n     for_each_package(c, |s, p| {\n         if p.uuid == uuid {\n@@ -954,7 +955,7 @@ pub fn install_uuid(c: &Cargo, wd: &Path, uuid: ~str) {\n     }\n }\n \n-pub fn install_named(c: &Cargo, wd: &Path, name: ~str) {\n+pub fn install_named(c: &mut Cargo, wd: &Path, name: ~str) {\n     let mut ps = ~[];\n     for_each_package(c, |s, p| {\n         if p.name == name {\n@@ -978,7 +979,8 @@ pub fn install_named(c: &Cargo, wd: &Path, name: ~str) {\n     }\n }\n \n-pub fn install_uuid_specific(c: &Cargo, wd: &Path, src: ~str, uuid: ~str) {\n+pub fn install_uuid_specific(c: &mut Cargo, wd: &Path, src: ~str,\n+                             uuid: ~str) {\n     match c.sources.find(src) {\n         Some(s) => {\n             for s.packages.each |p| {\n@@ -993,7 +995,8 @@ pub fn install_uuid_specific(c: &Cargo, wd: &Path, src: ~str, uuid: ~str) {\n     error(~\"can't find package: \" + src + ~\"/\" + uuid);\n }\n \n-pub fn install_named_specific(c: &Cargo, wd: &Path, src: ~str, name: ~str) {\n+pub fn install_named_specific(c: &mut Cargo, wd: &Path, src: ~str,\n+                              name: ~str) {\n     match c.sources.find(src) {\n         Some(s) => {\n             for s.packages.each |p| {\n@@ -1060,7 +1063,7 @@ pub fn cmd_uninstall(c: &Cargo) {\n     }\n }\n \n-pub fn install_query(c: &Cargo, wd: &Path, target: ~str) {\n+pub fn install_query(c: &mut Cargo, wd: &Path, target: ~str) {\n     match c.dep_cache.find(target) {\n         Some(inst) => {\n             if inst {\n@@ -1112,10 +1115,7 @@ pub fn install_query(c: &Cargo, wd: &Path, target: ~str) {\n     // a bit of a hack. It should be cleaned up in the future.\n \n     if target == c.current_install {\n-        for c.dep_cache.each |k, _v| {\n-            c.dep_cache.remove(k);\n-        }\n-\n+        c.dep_cache.clear();\n         c.current_install = ~\"\";\n     }\n }\n@@ -1128,7 +1128,7 @@ pub fn get_temp_workdir(c: &Cargo) -> Path {\n     }\n }\n \n-pub fn cmd_install(c: &Cargo) {\n+pub fn cmd_install(c: &mut Cargo) {\n     unsafe {\n         let wd = get_temp_workdir(c);\n \n@@ -1636,7 +1636,7 @@ pub fn dump_sources(c: &Cargo) {\n         result::Ok(writer) => {\n             let mut hash = ~LinearMap::new();\n \n-            for c.sources.each |k, v| {\n+            for c.sources.each_ref |&k, &v| {\n                 let mut chash = ~LinearMap::new();\n \n                 chash.insert(~\"url\", json::String(v.url));\n@@ -1967,7 +1967,7 @@ pub fn main() {\n \n     match o.free[1] {\n         ~\"init\" => cmd_init(&c),\n-        ~\"install\" => cmd_install(&c),\n+        ~\"install\" => cmd_install(&mut c),\n         ~\"uninstall\" => cmd_uninstall(&c),\n         ~\"list\" => cmd_list(&c),\n         ~\"search\" => cmd_search(&c),"}, {"sha": "c8a1a619436b374178cf0b2ffcfcccbade0fac34", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=81b4f36d49c8e9632e894f7443c9629f3c2ea294", "patch": "@@ -99,7 +99,7 @@ pub fn have_crate_data(cstore: CStore, cnum: ast::crate_num) -> bool {\n \n pub fn iter_crate_data(cstore: CStore,\n                        i: fn(ast::crate_num, crate_metadata)) {\n-    for p(cstore).metas.each |k,v| { i(k, v);};\n+    for p(cstore).metas.each_ref |&k, &v| { i(k, v);};\n }\n \n pub fn add_used_crate_file(cstore: CStore, lib: &Path) {"}, {"sha": "3eb65505e6462a8aceceda6ff606ea72b61ce531", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=81b4f36d49c8e9632e894f7443c9629f3c2ea294", "patch": "@@ -391,7 +391,7 @@ impl LanguageItemCollector {\n     }\n \n     fn check_completeness() {\n-        for self.item_refs.each |key, item_ref| {\n+        for self.item_refs.each_ref |&key, &item_ref| {\n             match self.items.items[item_ref] {\n                 None => {\n                     self.session.err(fmt!(\"no item found for `%s`\", key));"}, {"sha": "0dc7a746e9e8389ca90ef50faa5aa034ad0a720c", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=81b4f36d49c8e9632e894f7443c9629f3c2ea294", "patch": "@@ -400,7 +400,9 @@ pub fn build_settings_crate(sess: session::Session, crate: @ast::crate) {\n                     sess: sess});\n \n     // Install defaults.\n-    for cx.dict.each |_k, spec| { cx.set_level(spec.lint, spec.default); }\n+    for cx.dict.each_value_ref |&spec| {\n+        cx.set_level(spec.lint, spec.default);\n+    }\n \n     // Install command-line options, overriding defaults.\n     for sess.opts.lint_opts.each |pair| {"}, {"sha": "4602d2aff4ee95b43b24d2c6576ce47f6aabbd7b", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=81b4f36d49c8e9632e894f7443c9629f3c2ea294", "patch": "@@ -833,7 +833,7 @@ pub fn determine_rp_in_crate(sess: Session,\n \n     debug!(\"%s\", {\n         debug!(\"Region variance results:\");\n-        for cx.region_paramd_items.each |key, value| {\n+        for cx.region_paramd_items.each_ref |&key, &value| {\n             debug!(\"item %? (%s) is parameterized with variance %?\",\n                    key,\n                    ast_map::node_id_to_str(ast_map, key,"}, {"sha": "9fbe378a4a45fc3f51197efb36ba6f493743ddff", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=81b4f36d49c8e9632e894f7443c9629f3c2ea294", "patch": "@@ -1913,7 +1913,7 @@ pub impl Resolver {\n                self.module_to_str(module_));\n         self.resolve_imports_for_module(module_);\n \n-        for module_.children.each |_name, child_node| {\n+        for module_.children.each_value_ref |&child_node| {\n             match child_node.get_module_if_available() {\n                 None => {\n                     // Nothing to do.\n@@ -1924,7 +1924,7 @@ pub impl Resolver {\n             }\n         }\n \n-        for module_.anonymous_children.each |_block_id, child_module| {\n+        for module_.anonymous_children.each_value_ref |&child_module| {\n             self.resolve_imports_for_module_subtree(child_module);\n         }\n     }\n@@ -2430,8 +2430,8 @@ pub impl Resolver {\n         assert containing_module.glob_count == 0;\n \n         // Add all resolved imports from the containing module.\n-        for containing_module.import_resolutions.each\n-                |ident, target_import_resolution| {\n+        for containing_module.import_resolutions.each_ref\n+                |&ident, &target_import_resolution| {\n \n             debug!(\"(resolving glob import) writing module resolution \\\n                     %? into `%s`\",\n@@ -2480,7 +2480,7 @@ pub impl Resolver {\n         }\n \n         // Add all children from the containing module.\n-        for containing_module.children.each |ident, name_bindings| {\n+        for containing_module.children.each_ref |&ident, &name_bindings| {\n             let mut dest_import_resolution;\n             match module_.import_resolutions.find(ident) {\n                 None => {\n@@ -3148,7 +3148,7 @@ pub impl Resolver {\n         }\n \n         // Descend into children and anonymous children.\n-        for module_.children.each |_name, child_node| {\n+        for module_.children.each_value_ref |&child_node| {\n             match child_node.get_module_if_available() {\n                 None => {\n                     // Continue.\n@@ -3159,7 +3159,7 @@ pub impl Resolver {\n             }\n         }\n \n-        for module_.anonymous_children.each |_name, module_| {\n+        for module_.anonymous_children.each_value_ref |&module_| {\n             self.report_unresolved_imports(module_);\n         }\n     }\n@@ -3204,7 +3204,7 @@ pub impl Resolver {\n \n         self.record_exports_for_module(module_);\n \n-        for module_.children.each |_ident, child_name_bindings| {\n+        for module_.children.each_value_ref |&child_name_bindings| {\n             match child_name_bindings.get_module_if_available() {\n                 None => {\n                     // Nothing to do.\n@@ -3215,7 +3215,7 @@ pub impl Resolver {\n             }\n         }\n \n-        for module_.anonymous_children.each |_node_id, child_module| {\n+        for module_.anonymous_children.each_value_ref |&child_module| {\n             self.record_exports_for_module_subtree(child_module);\n         }\n     }\n@@ -4068,7 +4068,7 @@ pub impl Resolver {\n         for arm.pats.eachi() |i, p| {\n             let map_i = self.binding_mode_map(*p);\n \n-            for map_0.each |key, binding_0| {\n+            for map_0.each_ref |&key, &binding_0| {\n                 match map_i.find(key) {\n                   None => {\n                     self.session.span_err(\n@@ -4089,7 +4089,7 @@ pub impl Resolver {\n                 }\n             }\n \n-            for map_i.each |key, binding| {\n+            for map_i.each_ref |&key, &binding| {\n                 if !map_0.contains_key_ref(&key) {\n                     self.session.span_err(\n                         binding.span,\n@@ -5001,7 +5001,7 @@ pub impl Resolver {\n             }\n \n             // Look for trait children.\n-            for search_module.children.each |_name, child_name_bindings| {\n+            for search_module.children.each_value_ref |&child_name_bindings| {\n                 match child_name_bindings.def_for_namespace(TypeNS) {\n                     Some(def) => {\n                         match def {\n@@ -5021,8 +5021,8 @@ pub impl Resolver {\n             }\n \n             // Look for imports.\n-            for search_module.import_resolutions.each\n-                    |_ident, import_resolution| {\n+            for search_module.import_resolutions.each_value_ref\n+                    |&import_resolution| {\n \n                 match import_resolution.target_for_namespace(TypeNS) {\n                     None => {\n@@ -5184,7 +5184,7 @@ pub impl Resolver {\n \n         self.check_for_unused_imports_in_module(module_);\n \n-        for module_.children.each |_ident, child_name_bindings| {\n+        for module_.children.each_value_ref |&child_name_bindings| {\n             match (*child_name_bindings).get_module_if_available() {\n                 None => {\n                     // Nothing to do.\n@@ -5196,13 +5196,13 @@ pub impl Resolver {\n             }\n         }\n \n-        for module_.anonymous_children.each |_node_id, child_module| {\n+        for module_.anonymous_children.each_value_ref |&child_module| {\n             self.check_for_unused_imports_in_module_subtree(child_module);\n         }\n     }\n \n     fn check_for_unused_imports_in_module(module_: @Module) {\n-        for module_.import_resolutions.each |_name, import_resolution| {\n+        for module_.import_resolutions.each_value_ref |&import_resolution| {\n             if !import_resolution.used {\n                 match self.unused_import_lint_level {\n                     warn => {\n@@ -5261,12 +5261,12 @@ pub impl Resolver {\n         debug!(\"Dump of module `%s`:\", self.module_to_str(module_));\n \n         debug!(\"Children:\");\n-        for module_.children.each |name, _child| {\n+        for module_.children.each_key_ref |&name| {\n             debug!(\"* %s\", self.session.str_of(name));\n         }\n \n         debug!(\"Import resolutions:\");\n-        for module_.import_resolutions.each |name, import_resolution| {\n+        for module_.import_resolutions.each_ref |&name, &import_resolution| {\n             let mut value_repr;\n             match (*import_resolution).target_for_namespace(ValueNS) {\n                 None => { value_repr = ~\"\"; }"}, {"sha": "02c237fcef3e93ff0ea71890bbfbd0c4d79b8c7e", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=81b4f36d49c8e9632e894f7443c9629f3c2ea294", "patch": "@@ -2806,7 +2806,7 @@ pub fn create_module_map(ccx: @crate_ctxt) -> ValueRef {\n         lib::llvm::SetLinkage(map, lib::llvm::InternalLinkage);\n     }\n     let mut elts: ~[ValueRef] = ~[];\n-    for ccx.module_data.each |key, val| {\n+    for ccx.module_data.each_ref |&key, &val| {\n         let elt = C_struct(~[p2i(ccx, C_cstr(ccx, key)),\n                             p2i(ccx, val)]);\n         elts.push(elt);\n@@ -3087,7 +3087,7 @@ pub fn trans_crate(sess: session::Session,\n         }\n \n         if ccx.sess.count_llvm_insns() {\n-            for ccx.stats.llvm_insns.each |k, v| {\n+            for ccx.stats.llvm_insns.each_ref |&k, &v| {\n                 io::println(fmt!(\"%-7u %s\", v, k));\n             }\n         }"}, {"sha": "849a718a52e9c6268bb887eccbd20eb976403a14", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=81b4f36d49c8e9632e894f7443c9629f3c2ea294", "patch": "@@ -757,7 +757,7 @@ pub fn emit_tydescs(ccx: @crate_ctxt) {\n     let _icx = ccx.insn_ctxt(\"emit_tydescs\");\n     // As of this point, allow no more tydescs to be created.\n     ccx.finished_tydescs = true;\n-    for ccx.tydescs.each |_key, val| {\n+    for ccx.tydescs.each_value_ref |&val| {\n         let glue_fn_ty = T_ptr(T_generic_glue_fn(ccx));\n         let ti = val;\n "}, {"sha": "99203d9d6a4066b9e74887fafb28ae363f544acf", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=81b4f36d49c8e9632e894f7443c9629f3c2ea294", "patch": "@@ -186,7 +186,7 @@ Available lint options:\n                      padded(max_key, ~\"name\"), ~\"default\", ~\"meaning\"));\n     io::println(fmt!(\"    %s  %7.7s  %s\\n\",\n                      padded(max_key, ~\"----\"), ~\"-------\", ~\"-------\"));\n-    for lint_dict.each |k, v| {\n+    for lint_dict.each_ref |&k, &v| {\n         let k = str::replace(k, ~\"_\", ~\"-\");\n         io::println(fmt!(\"    %s  %7.7s  %s\",\n                          padded(max_key, k),"}, {"sha": "5ab0bd6829975ac84799581ad726298299b3f686", "filename": "src/libstd/oldmap.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibstd%2Foldmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Flibstd%2Foldmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldmap.rs?ref=81b4f36d49c8e9632e894f7443c9629f3c2ea294", "patch": "@@ -316,10 +316,6 @@ pub mod chained {\n             }\n         }\n \n-        pure fn each(blk: fn(key: K, value: V) -> bool) {\n-            self.each_ref(|k, v| blk(*k, *v))\n-        }\n-\n         pure fn each_ref(blk: fn(key: &K, value: &V) -> bool) {\n             for self.each_entry |entry| {\n                 if !blk(&entry.key, &entry.value) { break; }"}, {"sha": "0f4f22196ce67554a8e74a9da190b03de8f7f91c", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b4f36d49c8e9632e894f7443c9629f3c2ea294/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=81b4f36d49c8e9632e894f7443c9629f3c2ea294", "patch": "@@ -49,10 +49,9 @@ fn sort_and_fmt(mm: HashMap<~[u8], uint>, total: uint) -> ~str {\n    let mut pairs = ~[];\n \n    // map -> [(k,%)]\n-   mm.each(fn&(key: ~[u8], val: uint) -> bool {\n+   for mm.each_ref |&key, &val| {\n       pairs.push((key, pct(val, total)));\n-      return true;\n-   });\n+   }\n \n    let pairs_sorted = sortKV(pairs);\n "}]}