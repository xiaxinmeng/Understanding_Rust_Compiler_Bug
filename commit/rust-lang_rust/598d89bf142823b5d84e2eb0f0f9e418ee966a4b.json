{"sha": "598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "node_id": "C_kwDOAAsO6NoAKDU5OGQ4OWJmMTQyODIzYjVkODRlMmViMGYwZjllNDE4ZWU5NjZhNGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-01T03:23:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-01T03:23:17Z"}, "message": "Auto merge of #89414 - Manishearth:rollup-hs11bcq, r=Manishearth\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #88782 (Fix ICE when `start` lang item has wrong generics)\n - #89202 (Resolve infered types when complaining about unexpected call type )\n - #89248 (Suggest similarly named associated items in trait impls)\n - #89303 (Add `#[must_not_suspend]` to some types in std)\n - #89306 (thread: implements available_concurrency on haiku)\n - #89314 (fix(lint): don't suggest refutable patterns to \"fix\" irrefutable bind)\n - #89370 (CTFE: tweak aggregate rvalue handling)\n - #89392 (bootstrap: Update comment in config.library.toml.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0fd9823211a147b41742ba922c9c50596f49fc35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fd9823211a147b41742ba922c9c50596f49fc35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "html_url": "https://github.com/rust-lang/rust/commit/598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c0ed0d4c4bd7b39299966e57806d29ce38c95af", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0ed0d4c4bd7b39299966e57806d29ce38c95af", "html_url": "https://github.com/rust-lang/rust/commit/1c0ed0d4c4bd7b39299966e57806d29ce38c95af"}, {"sha": "9ea439d1582c628bf572e4ab05aa2587e1d2d076", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea439d1582c628bf572e4ab05aa2587e1d2d076", "html_url": "https://github.com/rust-lang/rust/commit/9ea439d1582c628bf572e4ab05aa2587e1d2d076"}], "stats": {"total": 490, "additions": 427, "deletions": 63}, "files": [{"sha": "e6037d561dedcb5228ed84e93e524df136f17551", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -197,12 +197,17 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Aggregate(ref kind, ref operands) => {\n+                // active_field_index is for union initialization.\n                 let (dest, active_field_index) = match **kind {\n                     mir::AggregateKind::Adt(adt_def, variant_index, _, _, active_field_index) => {\n                         self.write_discriminant(variant_index, &dest)?;\n                         if adt_def.is_enum() {\n-                            (self.place_downcast(&dest, variant_index)?, active_field_index)\n+                            assert!(active_field_index.is_none());\n+                            (self.place_downcast(&dest, variant_index)?, None)\n                         } else {\n+                            if active_field_index.is_some() {\n+                                assert_eq!(operands.len(), 1);\n+                            }\n                             (dest, active_field_index)\n                         }\n                     }\n@@ -211,12 +216,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                 for (i, operand) in operands.iter().enumerate() {\n                     let op = self.eval_operand(operand, None)?;\n-                    // Ignore zero-sized fields.\n-                    if !op.layout.is_zst() {\n-                        let field_index = active_field_index.unwrap_or(i);\n-                        let field_dest = self.place_field(&dest, field_index)?;\n-                        self.copy_op(&op, &field_dest)?;\n-                    }\n+                    let field_index = active_field_index.unwrap_or(i);\n+                    let field_dest = self.place_field(&dest, field_index)?;\n+                    self.copy_op(&op, &field_dest)?;\n                 }\n             }\n \n@@ -253,7 +255,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Len(place) => {\n-                // FIXME(CTFE): don't allow computing the length of arrays in const eval\n                 let src = self.eval_place(place)?;\n                 let mplace = self.force_allocation(&src)?;\n                 let len = mplace.len(self)?;"}, {"sha": "814054c551878a47a47c861ea3b0c6ce244580ea", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -300,7 +300,7 @@ language_item_table! {\n     Oom,                     sym::oom,                 oom,                        Target::Fn,             GenericRequirement::None;\n     AllocLayout,             sym::alloc_layout,        alloc_layout,               Target::Struct,         GenericRequirement::None;\n \n-    Start,                   sym::start,               start_fn,                   Target::Fn,             GenericRequirement::None;\n+    Start,                   sym::start,               start_fn,                   Target::Fn,             GenericRequirement::Exact(1);\n \n     EhPersonality,           sym::eh_personality,      eh_personality,             Target::Fn,             GenericRequirement::None;\n     EhCatchTypeinfo,         sym::eh_catch_typeinfo,   eh_catch_typeinfo,          Target::Static,         GenericRequirement::None;"}, {"sha": "e28fd2c50814fa48428cb9afc2a0649b12ea2be8", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -39,6 +39,13 @@ fn create_e0004(sess: &Session, sp: Span, error_message: String) -> DiagnosticBu\n     struct_span_err!(sess, sp, E0004, \"{}\", &error_message)\n }\n \n+#[derive(PartialEq)]\n+enum RefutableFlag {\n+    Irrefutable,\n+    Refutable,\n+}\n+use RefutableFlag::*;\n+\n struct MatchVisitor<'a, 'p, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     typeck_results: &'a ty::TypeckResults<'tcx>,\n@@ -73,13 +80,13 @@ impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, '_, 'tcx> {\n             hir::LocalSource::AssignDesugar(_) => (\"destructuring assignment binding\", None),\n         };\n         self.check_irrefutable(&loc.pat, msg, sp);\n-        self.check_patterns(&loc.pat);\n+        self.check_patterns(&loc.pat, Irrefutable);\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n         intravisit::walk_param(self, param);\n         self.check_irrefutable(&param.pat, \"function argument\", None);\n-        self.check_patterns(&param.pat);\n+        self.check_patterns(&param.pat, Irrefutable);\n     }\n }\n \n@@ -113,9 +120,9 @@ impl PatCtxt<'_, '_> {\n }\n \n impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n-    fn check_patterns(&self, pat: &Pat<'_>) {\n+    fn check_patterns(&self, pat: &Pat<'_>, rf: RefutableFlag) {\n         pat.walk_always(|pat| check_borrow_conflicts_in_at_patterns(self, pat));\n-        check_for_bindings_named_same_as_variants(self, pat);\n+        check_for_bindings_named_same_as_variants(self, pat, rf);\n     }\n \n     fn lower_pattern(\n@@ -145,7 +152,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n     }\n \n     fn check_let(&mut self, pat: &'tcx hir::Pat<'tcx>, expr: &hir::Expr<'_>, span: Span) {\n-        self.check_patterns(pat);\n+        self.check_patterns(pat, Refutable);\n         let mut cx = self.new_cx(expr.hir_id);\n         let tpat = self.lower_pattern(&mut cx, pat, &mut false);\n         check_let_reachability(&mut cx, pat.hir_id, tpat, span);\n@@ -161,9 +168,9 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n \n         for arm in arms {\n             // Check the arm for some things unrelated to exhaustiveness.\n-            self.check_patterns(&arm.pat);\n+            self.check_patterns(&arm.pat, Refutable);\n             if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n-                self.check_patterns(pat);\n+                self.check_patterns(pat, Refutable);\n                 let tpat = self.lower_pattern(&mut cx, pat, &mut false);\n                 check_let_reachability(&mut cx, pat.hir_id, tpat, tpat.span());\n             }\n@@ -297,7 +304,11 @@ fn const_not_var(\n     }\n }\n \n-fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor<'_, '_, '_>, pat: &Pat<'_>) {\n+fn check_for_bindings_named_same_as_variants(\n+    cx: &MatchVisitor<'_, '_, '_>,\n+    pat: &Pat<'_>,\n+    rf: RefutableFlag,\n+) {\n     pat.walk_always(|p| {\n         if let hir::PatKind::Binding(_, _, ident, None) = p.kind {\n             if let Some(ty::BindByValue(hir::Mutability::Not)) =\n@@ -310,25 +321,31 @@ fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor<'_, '_, '_>, pat:\n                             variant.ident == ident && variant.ctor_kind == CtorKind::Const\n                         })\n                     {\n+                        let variant_count = edef.variants.len();\n                         cx.tcx.struct_span_lint_hir(\n                             BINDINGS_WITH_VARIANT_NAME,\n                             p.hir_id,\n                             p.span,\n                             |lint| {\n                                 let ty_path = cx.tcx.def_path_str(edef.did);\n-                                lint.build(&format!(\n+                                let mut err = lint.build(&format!(\n                                     \"pattern binding `{}` is named the same as one \\\n-                                                of the variants of the type `{}`\",\n+                                                    of the variants of the type `{}`\",\n                                     ident, ty_path\n-                                ))\n-                                .code(error_code!(E0170))\n-                                .span_suggestion(\n-                                    p.span,\n-                                    \"to match on the variant, qualify the path\",\n-                                    format!(\"{}::{}\", ty_path, ident),\n-                                    Applicability::MachineApplicable,\n-                                )\n-                                .emit();\n+                                ));\n+                                err.code(error_code!(E0170));\n+                                // If this is an irrefutable pattern, and there's > 1 variant,\n+                                // then we can't actually match on this. Applying the below\n+                                // suggestion would produce code that breaks on `check_irrefutable`.\n+                                if rf == Refutable || variant_count == 1 {\n+                                    err.span_suggestion(\n+                                        p.span,\n+                                        \"to match on the variant, qualify the path\",\n+                                        format!(\"{}::{}\", ty_path, ident),\n+                                        Applicability::MachineApplicable,\n+                                    );\n+                                }\n+                                err.emit();\n                             },\n                         )\n                     }"}, {"sha": "5acbe9864beb05343381f64f1b36b5905fb1416f", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -198,7 +198,7 @@ impl<'a> Resolver<'a> {\n                 err.span_label(first_use_span, format!(\"first use of `{}`\", name));\n                 err\n             }\n-            ResolutionError::MethodNotMemberOfTrait(method, trait_) => {\n+            ResolutionError::MethodNotMemberOfTrait(method, trait_, candidate) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n@@ -208,9 +208,17 @@ impl<'a> Resolver<'a> {\n                     trait_\n                 );\n                 err.span_label(span, format!(\"not a member of trait `{}`\", trait_));\n+                if let Some(candidate) = candidate {\n+                    err.span_suggestion(\n+                        method.span,\n+                        \"there is an associated function with a similar name\",\n+                        candidate.to_ident_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n                 err\n             }\n-            ResolutionError::TypeNotMemberOfTrait(type_, trait_) => {\n+            ResolutionError::TypeNotMemberOfTrait(type_, trait_, candidate) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n@@ -220,9 +228,17 @@ impl<'a> Resolver<'a> {\n                     trait_\n                 );\n                 err.span_label(span, format!(\"not a member of trait `{}`\", trait_));\n+                if let Some(candidate) = candidate {\n+                    err.span_suggestion(\n+                        type_.span,\n+                        \"there is an associated type with a similar name\",\n+                        candidate.to_ident_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n                 err\n             }\n-            ResolutionError::ConstNotMemberOfTrait(const_, trait_) => {\n+            ResolutionError::ConstNotMemberOfTrait(const_, trait_, candidate) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n@@ -232,6 +248,14 @@ impl<'a> Resolver<'a> {\n                     trait_\n                 );\n                 err.span_label(span, format!(\"not a member of trait `{}`\", trait_));\n+                if let Some(candidate) = candidate {\n+                    err.span_suggestion(\n+                        const_.span,\n+                        \"there is an associated constant with a similar name\",\n+                        candidate.to_ident_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n                 err\n             }\n             ResolutionError::VariableNotBoundInPattern(binding_error) => {"}, {"sha": "9563325796538dab148fc9d45d5f3448ba6a0980", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -1309,14 +1309,15 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                     use crate::ResolutionError::*;\n                                     match &item.kind {\n                                         AssocItemKind::Const(_default, _ty, _expr) => {\n-                                            debug!(\"resolve_implementation AssocItemKind::Const\",);\n+                                            debug!(\"resolve_implementation AssocItemKind::Const\");\n                                             // If this is a trait impl, ensure the const\n                                             // exists in trait\n                                             this.check_trait_item(\n                                                 item.ident,\n+                                                &item.kind,\n                                                 ValueNS,\n                                                 item.span,\n-                                                |n, s| ConstNotMemberOfTrait(n, s),\n+                                                |i, s, c| ConstNotMemberOfTrait(i, s, c),\n                                             );\n \n                                             // We allow arbitrary const expressions inside of associated consts,\n@@ -1338,6 +1339,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             );\n                                         }\n                                         AssocItemKind::Fn(box FnKind(.., generics, _)) => {\n+                                            debug!(\"resolve_implementation AssocItemKind::Fn\");\n                                             // We also need a new scope for the impl item type parameters.\n                                             this.with_generic_param_rib(\n                                                 generics,\n@@ -1347,9 +1349,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                     // exists in trait\n                                                     this.check_trait_item(\n                                                         item.ident,\n+                                                        &item.kind,\n                                                         ValueNS,\n                                                         item.span,\n-                                                        |n, s| MethodNotMemberOfTrait(n, s),\n+                                                        |i, s, c| MethodNotMemberOfTrait(i, s, c),\n                                                     );\n \n                                                     visit::walk_assoc_item(\n@@ -1366,6 +1369,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             _,\n                                             _,\n                                         )) => {\n+                                            debug!(\"resolve_implementation AssocItemKind::TyAlias\");\n                                             // We also need a new scope for the impl item type parameters.\n                                             this.with_generic_param_rib(\n                                                 generics,\n@@ -1375,9 +1379,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                     // exists in trait\n                                                     this.check_trait_item(\n                                                         item.ident,\n+                                                        &item.kind,\n                                                         TypeNS,\n                                                         item.span,\n-                                                        |n, s| TypeNotMemberOfTrait(n, s),\n+                                                        |i, s, c| TypeNotMemberOfTrait(i, s, c),\n                                                     );\n \n                                                     visit::walk_assoc_item(\n@@ -1401,9 +1406,15 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         });\n     }\n \n-    fn check_trait_item<F>(&mut self, ident: Ident, ns: Namespace, span: Span, err: F)\n-    where\n-        F: FnOnce(Symbol, &str) -> ResolutionError<'_>,\n+    fn check_trait_item<F>(\n+        &mut self,\n+        ident: Ident,\n+        kind: &AssocItemKind,\n+        ns: Namespace,\n+        span: Span,\n+        err: F,\n+    ) where\n+        F: FnOnce(Ident, &str, Option<Symbol>) -> ResolutionError<'_>,\n     {\n         // If there is a TraitRef in scope for an impl, then the method must be in the\n         // trait.\n@@ -1420,8 +1431,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 )\n                 .is_err()\n             {\n+                let candidate = self.find_similarly_named_assoc_item(ident.name, kind);\n                 let path = &self.current_trait_ref.as_ref().unwrap().1.path;\n-                self.report_error(span, err(ident.name, &path_names_to_string(path)));\n+                self.report_error(span, err(ident, &path_names_to_string(path), candidate));\n             }\n         }\n     }"}, {"sha": "e57e7db328549fd7954d421762c9487647af4568", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -7,8 +7,8 @@ use crate::{PathResult, PathSource, Segment};\n \n use rustc_ast::visit::FnKind;\n use rustc_ast::{\n-    self as ast, Expr, ExprKind, GenericParam, GenericParamKind, Item, ItemKind, NodeId, Path, Ty,\n-    TyKind,\n+    self as ast, AssocItemKind, Expr, ExprKind, GenericParam, GenericParamKind, Item, ItemKind,\n+    NodeId, Path, Ty, TyKind,\n };\n use rustc_ast_pretty::pprust::path_segment_to_string;\n use rustc_data_structures::fx::FxHashSet;\n@@ -1150,6 +1150,40 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         true\n     }\n \n+    /// Given the target `ident` and `kind`, search for the similarly named associated item\n+    /// in `self.current_trait_ref`.\n+    crate fn find_similarly_named_assoc_item(\n+        &mut self,\n+        ident: Symbol,\n+        kind: &AssocItemKind,\n+    ) -> Option<Symbol> {\n+        let module = if let Some((module, _)) = self.current_trait_ref {\n+            module\n+        } else {\n+            return None;\n+        };\n+        if ident == kw::Underscore {\n+            // We do nothing for `_`.\n+            return None;\n+        }\n+\n+        let resolutions = self.r.resolutions(module);\n+        let targets = resolutions\n+            .borrow()\n+            .iter()\n+            .filter_map(|(key, res)| res.borrow().binding.map(|binding| (key, binding.res())))\n+            .filter(|(_, res)| match (kind, res) {\n+                (AssocItemKind::Const(..), Res::Def(DefKind::AssocConst, _)) => true,\n+                (AssocItemKind::Fn(_), Res::Def(DefKind::AssocFn, _)) => true,\n+                (AssocItemKind::TyAlias(..), Res::Def(DefKind::AssocTy, _)) => true,\n+                _ => false,\n+            })\n+            .map(|(key, _)| key.ident.name)\n+            .collect::<Vec<_>>();\n+\n+        find_best_match_for_name(&targets, ident, None)\n+    }\n+\n     fn lookup_assoc_candidate<FilterFn>(\n         &mut self,\n         ident: Ident,"}, {"sha": "19b9e1dc460d658b38a7deaae142cb7c32c2438a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -206,11 +206,11 @@ enum ResolutionError<'a> {\n     /// parameter list.\n     NameAlreadyUsedInParameterList(Symbol, Span),\n     /// Error E0407: method is not a member of trait.\n-    MethodNotMemberOfTrait(Symbol, &'a str),\n+    MethodNotMemberOfTrait(Ident, &'a str, Option<Symbol>),\n     /// Error E0437: type is not a member of trait.\n-    TypeNotMemberOfTrait(Symbol, &'a str),\n+    TypeNotMemberOfTrait(Ident, &'a str, Option<Symbol>),\n     /// Error E0438: const is not a member of trait.\n-    ConstNotMemberOfTrait(Symbol, &'a str),\n+    ConstNotMemberOfTrait(Ident, &'a str, Option<Symbol>),\n     /// Error E0408: variable `{}` is not bound in all patterns.\n     VariableNotBoundInPattern(&'a BindingError),\n     /// Error E0409: variable `{}` is bound in inconsistent ways within the same match arm."}, {"sha": "4ffb061f7b48e8eddec8e1b19f492ee7ad90e03e", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -356,6 +356,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n \n+                let callee_ty = self.resolve_vars_if_possible(callee_ty);\n                 let mut err = type_error_struct!(\n                     self.tcx.sess,\n                     callee_expr.span,"}, {"sha": "c0121eebb7feff689395915f461e33529483790c", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -1303,6 +1303,11 @@ impl Clone for BorrowRef<'_> {\n ///\n /// See the [module-level documentation](self) for more.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(\n+    not(bootstrap),\n+    must_not_suspend = \"Holding a Ref across suspend \\\n+                      points can cause BorrowErrors\"\n+)]\n pub struct Ref<'b, T: ?Sized + 'b> {\n     value: &'b T,\n     borrow: BorrowRef<'b>,\n@@ -1679,6 +1684,11 @@ impl<'b> BorrowRefMut<'b> {\n ///\n /// See the [module-level documentation](self) for more.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(\n+    not(bootstrap),\n+    must_not_suspend = \"Holding a RefMut across suspend \\\n+                      points can cause BorrowErrors\"\n+)]\n pub struct RefMut<'b, T: ?Sized + 'b> {\n     value: &'b mut T,\n     borrow: BorrowRefMut<'b>,"}, {"sha": "4408b5a3d2088687a1244908a842d65f80162a89", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -142,6 +142,7 @@\n #![feature(link_llvm_intrinsics)]\n #![feature(llvm_asm)]\n #![feature(min_specialization)]\n+#![cfg_attr(not(bootstrap), feature(must_not_suspend))]\n #![feature(negative_impls)]\n #![feature(never_type)]\n #![feature(no_core)]"}, {"sha": "b33a3c5d22fe1de207701ad1727b5ff2f49e83af", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -297,6 +297,7 @@\n #![feature(maybe_uninit_slice)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(min_specialization)]\n+#![cfg_attr(not(bootstrap), feature(must_not_suspend))]\n #![feature(needs_panic_runtime)]\n #![feature(negative_impls)]\n #![feature(never_type)]"}, {"sha": "06a97fd3f761022a5c5c41e8e4f9aabf0d1bfc48", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -188,6 +188,12 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> {}\n /// [`lock`]: Mutex::lock\n /// [`try_lock`]: Mutex::try_lock\n #[must_use = \"if unused the Mutex will immediately unlock\"]\n+#[cfg_attr(\n+    not(bootstrap),\n+    must_not_suspend = \"Holding a MutexGuard across suspend \\\n+                      points can cause deadlocks, delays, \\\n+                      and cause Futures to not implement `Send`\"\n+)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct MutexGuard<'a, T: ?Sized + 'a> {\n     lock: &'a Mutex<T>,"}, {"sha": "aa1ce82d96799b9a99d2ae6c44e2bde8bcad08ba", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -95,6 +95,12 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n /// [`read`]: RwLock::read\n /// [`try_read`]: RwLock::try_read\n #[must_use = \"if unused the RwLock will immediately unlock\"]\n+#[cfg_attr(\n+    not(bootstrap),\n+    must_not_suspend = \"Holding a RwLockReadGuard across suspend \\\n+                      points can cause deadlocks, delays, \\\n+                      and cause Futures to not implement `Send`\"\n+)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n     lock: &'a RwLock<T>,\n@@ -115,6 +121,12 @@ unsafe impl<T: ?Sized + Sync> Sync for RwLockReadGuard<'_, T> {}\n /// [`write`]: RwLock::write\n /// [`try_write`]: RwLock::try_write\n #[must_use = \"if unused the RwLock will immediately unlock\"]\n+#[cfg_attr(\n+    not(bootstrap),\n+    must_not_suspend = \"Holding a RwLockWriteGuard across suspend \\\n+                      points can cause deadlocks, delays, \\\n+                      and cause Future's to not implement `Send`\"\n+)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockWriteGuard<'a, T: ?Sized + 'a> {\n     lock: &'a RwLock<T>,"}, {"sha": "05f51a46168f6c8a1deb0534f9f83aa627a227ce", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -338,8 +338,17 @@ pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n             }\n \n             Ok(unsafe { NonZeroUsize::new_unchecked(cpus as usize) })\n+        } else if #[cfg(target_os = \"haiku\")] {\n+            let mut sinfo: libc::system_info = crate::mem::zeroed();\n+            let res = libc::get_system_info(&mut sinfo);\n+\n+            if res != libc::B_OK {\n+                return Err(io::Error::last_os_error());\n+            }\n+\n+            Ok(unsafe { NonZeroUsize::new_unchecked(sinfo.cpu_count as usize) })\n         } else {\n-            // FIXME: implement on vxWorks, Redox, Haiku, l4re\n+            // FIXME: implement on vxWorks, Redox, l4re\n             Err(io::Error::new_const(io::ErrorKind::Unsupported, &\"Getting the number of hardware threads is not supported on the target platform\"))\n         }\n     }"}, {"sha": "7bc054d3a49fc97a4be9c0fced37855268f1728a", "filename": "src/bootstrap/defaults/config.library.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Fbootstrap%2Fdefaults%2Fconfig.library.toml", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Fbootstrap%2Fdefaults%2Fconfig.library.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.library.toml?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -10,6 +10,5 @@ bench-stage = 0\n incremental = true\n \n [llvm]\n-# Will download LLVM from CI if available on your platform (Linux only for now)\n-# https://github.com/rust-lang/rust/issues/77084 tracks support for more platforms\n+# Will download LLVM from CI if available on your platform.\n download-ci-llvm = \"if-available\""}, {"sha": "d576a1dd28192a15b75a337c7694afb2ffb34b09", "filename": "src/test/run-make-fulldeps/target-specs/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Frun-make-fulldeps%2Ftarget-specs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Frun-make-fulldeps%2Ftarget-specs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftarget-specs%2Ffoo.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -11,7 +11,7 @@ trait Sized {}\n auto trait Freeze {}\n \n #[lang = \"start\"]\n-fn start(_main: *const u8, _argc: isize, _argv: *const *const u8) -> isize {\n+fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8) -> isize {\n     0\n }\n "}, {"sha": "6f6d1ff6a8f417c806a33073329a9459beb8b48e", "filename": "src/test/ui/error-codes/E0407.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Ferror-codes%2FE0407.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Ferror-codes%2FE0407.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0407.stderr?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -2,7 +2,10 @@ error[E0407]: method `b` is not a member of trait `Foo`\n   --> $DIR/E0407.rs:9:5\n    |\n LL |     fn b() {}\n-   |     ^^^^^^^^^ not a member of trait `Foo`\n+   |     ^^^-^^^^^\n+   |     |  |\n+   |     |  help: there is an associated function with a similar name: `a`\n+   |     not a member of trait `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "517b1ff598888e963ac0218f7411b70905aecdd1", "filename": "src/test/ui/hygiene/assoc_item_ctxt.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -2,7 +2,10 @@ error[E0407]: method `method` is not a member of trait `Tr`\n   --> $DIR/assoc_item_ctxt.rs:35:13\n    |\n LL |             fn method() {}\n-   |             ^^^^^^^^^^^^^^ not a member of trait `Tr`\n+   |             ^^^------^^^^^\n+   |             |  |\n+   |             |  help: there is an associated function with a similar name: `method`\n+   |             not a member of trait `Tr`\n ...\n LL |     mac_trait_impl!();\n    |     ------------------ in this macro invocation"}, {"sha": "c0b958f2bf22195d1880bd50af08b8d4e6af5bd4", "filename": "src/test/ui/lang-items/lang-item-generic-requirements.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -1,9 +1,8 @@\n-// Checks whether declaring a lang item with the wrong number\n-// of generic arguments crashes the compiler (issue #83893, #87573, and part of #9307).\n+// Checks that declaring a lang item with the wrong number\n+// of generic arguments errors rather than crashing (issue #83893, #87573, part of #9307, #79559).\n \n #![feature(lang_items, no_core)]\n #![no_core]\n-#![crate_type = \"lib\"]\n \n #[lang = \"sized\"]\n trait MySized {}\n@@ -26,6 +25,14 @@ struct MyPhantomData<T, U>;\n //~^ ERROR parameter `T` is never used\n //~| ERROR parameter `U` is never used\n \n+// When the `start` lang item is missing generics very odd things can happen, especially when\n+// it comes to cross-crate monomorphization\n+#[lang = \"start\"]\n+//~^ ERROR `start` language item must be applied to a function with 1 generic argument [E0718]\n+fn start(_: *const u8, _: isize, _: *const *const u8) -> isize {\n+    0\n+}\n+\n fn ice() {\n     // Use add\n     let r = 5;\n@@ -42,3 +49,6 @@ fn ice() {\n     // Use phantomdata\n     let _ = MyPhantomData::<(), i32>;\n }\n+\n+// use `start`\n+fn main() {}"}, {"sha": "df5a77850f14d866d6cccd22d1c8b8d9e87cc3dd", "filename": "src/test/ui/lang-items/lang-item-generic-requirements.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.stderr?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -1,13 +1,13 @@\n error[E0718]: `add` language item must be applied to a trait with 1 generic argument\n-  --> $DIR/lang-item-generic-requirements.rs:11:1\n+  --> $DIR/lang-item-generic-requirements.rs:10:1\n    |\n LL | #[lang = \"add\"]\n    | ^^^^^^^^^^^^^^^\n LL | trait MyAdd<'a, T> {}\n    |            ------- this trait has 2 generic arguments\n \n error[E0718]: `drop_in_place` language item must be applied to a function with at least 1 generic argument\n-  --> $DIR/lang-item-generic-requirements.rs:15:1\n+  --> $DIR/lang-item-generic-requirements.rs:14:1\n    |\n LL | #[lang = \"drop_in_place\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,24 +16,33 @@ LL | fn my_ptr_drop() {}\n    |               - this function has 0 generic arguments\n \n error[E0718]: `index` language item must be applied to a trait with 1 generic argument\n-  --> $DIR/lang-item-generic-requirements.rs:19:1\n+  --> $DIR/lang-item-generic-requirements.rs:18:1\n    |\n LL | #[lang = \"index\"]\n    | ^^^^^^^^^^^^^^^^^\n LL | trait MyIndex<'a, T> {}\n    |              ------- this trait has 2 generic arguments\n \n error[E0718]: `phantom_data` language item must be applied to a struct with 1 generic argument\n-  --> $DIR/lang-item-generic-requirements.rs:23:1\n+  --> $DIR/lang-item-generic-requirements.rs:22:1\n    |\n LL | #[lang = \"phantom_data\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL | struct MyPhantomData<T, U>;\n    |                     ------ this struct has 2 generic arguments\n \n+error[E0718]: `start` language item must be applied to a function with 1 generic argument\n+  --> $DIR/lang-item-generic-requirements.rs:30:1\n+   |\n+LL | #[lang = \"start\"]\n+   | ^^^^^^^^^^^^^^^^^\n+LL |\n+LL | fn start(_: *const u8, _: isize, _: *const *const u8) -> isize {\n+   |         - this function has 0 generic arguments\n+\n error[E0392]: parameter `T` is never used\n-  --> $DIR/lang-item-generic-requirements.rs:25:22\n+  --> $DIR/lang-item-generic-requirements.rs:24:22\n    |\n LL | struct MyPhantomData<T, U>;\n    |                      ^ unused parameter\n@@ -42,15 +51,15 @@ LL | struct MyPhantomData<T, U>;\n    = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n error[E0392]: parameter `U` is never used\n-  --> $DIR/lang-item-generic-requirements.rs:25:25\n+  --> $DIR/lang-item-generic-requirements.rs:24:25\n    |\n LL | struct MyPhantomData<T, U>;\n    |                         ^ unused parameter\n    |\n    = help: consider removing `U` or referring to it in a field\n    = help: if you intended `U` to be a const parameter, use `const U: usize` instead\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0392, E0718.\n For more information about an error, try `rustc --explain E0392`."}, {"sha": "596249b2e4e4fa8efd4eebb4b7bea11a3b6359c9", "filename": "src/test/ui/lint/must_not_suspend/mutex.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -0,0 +1,12 @@\n+// edition:2018\n+#![deny(must_not_suspend)]\n+\n+async fn other() {}\n+\n+pub async fn uhoh(m: std::sync::Mutex<()>) {\n+    let _guard = m.lock().unwrap(); //~ ERROR `MutexGuard` held across\n+    other().await;\n+}\n+\n+fn main() {\n+}"}, {"sha": "4e0d9343c2c7118b88f257809125cf26528b0841", "filename": "src/test/ui/lint/must_not_suspend/mutex.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -0,0 +1,26 @@\n+error: `MutexGuard` held across a suspend point, but should not be\n+  --> $DIR/mutex.rs:7:9\n+   |\n+LL |     let _guard = m.lock().unwrap();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |     ------------- the value is held across this suspend point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/mutex.rs:2:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+note: Holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Futures to not implement `Send`\n+  --> $DIR/mutex.rs:7:9\n+   |\n+LL |     let _guard = m.lock().unwrap();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/mutex.rs:7:9\n+   |\n+LL |     let _guard = m.lock().unwrap();\n+   |         ^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e63210a3e987efd7c8bf7e1549b15b0aa8e01e0c", "filename": "src/test/ui/suggestions/issue-88730.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-88730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-88730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-88730.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -0,0 +1,16 @@\n+#![allow(unused, nonstandard_style)]\n+#![deny(bindings_with_variant_name)]\n+\n+// If an enum has two different variants,\n+// then it cannot be matched upon in a function argument.\n+// It still gets a warning, but no suggestions.\n+enum Foo {\n+    C,\n+    D,\n+}\n+\n+fn foo(C: Foo) {} //~ERROR\n+\n+fn main() {\n+    let C = Foo::D; //~ERROR\n+}"}, {"sha": "eb22b0ea5c83da68b71dbe18c4752664f228331f", "filename": "src/test/ui/suggestions/issue-88730.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-88730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-88730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-88730.stderr?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -0,0 +1,21 @@\n+error[E0170]: pattern binding `C` is named the same as one of the variants of the type `Foo`\n+  --> $DIR/issue-88730.rs:12:8\n+   |\n+LL | fn foo(C: Foo) {}\n+   |        ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-88730.rs:2:9\n+   |\n+LL | #![deny(bindings_with_variant_name)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0170]: pattern binding `C` is named the same as one of the variants of the type `Foo`\n+  --> $DIR/issue-88730.rs:15:9\n+   |\n+LL |     let C = Foo::D;\n+   |         ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0170`."}, {"sha": "9d42a734260962ef97a0b5bcee150b79ad9e53c5", "filename": "src/test/ui/suggestions/suggest-trait-items.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -0,0 +1,48 @@\n+trait Foo {\n+    type Type;\n+\n+    fn foo();\n+    fn bar();\n+    fn qux();\n+}\n+\n+struct A;\n+\n+impl Foo for A {\n+//~^ ERROR not all trait items implemented\n+    type Typ = ();\n+    //~^ ERROR type `Typ` is not a member of trait\n+    //~| HELP there is an associated type with a similar name\n+\n+    fn fooo() {}\n+    //~^ ERROR method `fooo` is not a member of trait\n+    //~| HELP there is an associated function with a similar name\n+\n+    fn barr() {}\n+    //~^ ERROR method `barr` is not a member of trait\n+    //~| HELP there is an associated function with a similar name\n+\n+    fn quux() {}\n+    //~^ ERROR method `quux` is not a member of trait\n+    //~| HELP there is an associated function with a similar name\n+}\n+//~^ HELP implement the missing item\n+//~| HELP implement the missing item\n+//~| HELP implement the missing item\n+//~| HELP implement the missing item\n+\n+trait Bar {\n+    const Const: i32;\n+}\n+\n+struct B;\n+\n+impl Bar for B {\n+//~^ ERROR not all trait items implemented\n+    const Cnst: i32 = 0;\n+    //~^ ERROR const `Cnst` is not a member of trait\n+    //~| HELP there is an associated constant with a similar name\n+}\n+//~^ HELP implement the missing item\n+\n+fn main() {}"}, {"sha": "151bae7d1b9cb12b04de303f2ee82737208fcc3d", "filename": "src/test/ui/suggestions/suggest-trait-items.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.stderr?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -0,0 +1,74 @@\n+error[E0437]: type `Typ` is not a member of trait `Foo`\n+  --> $DIR/suggest-trait-items.rs:13:5\n+   |\n+LL |     type Typ = ();\n+   |     ^^^^^---^^^^^^\n+   |     |    |\n+   |     |    help: there is an associated type with a similar name: `Type`\n+   |     not a member of trait `Foo`\n+\n+error[E0407]: method `fooo` is not a member of trait `Foo`\n+  --> $DIR/suggest-trait-items.rs:17:5\n+   |\n+LL |     fn fooo() {}\n+   |     ^^^----^^^^^\n+   |     |  |\n+   |     |  help: there is an associated function with a similar name: `foo`\n+   |     not a member of trait `Foo`\n+\n+error[E0407]: method `barr` is not a member of trait `Foo`\n+  --> $DIR/suggest-trait-items.rs:21:5\n+   |\n+LL |     fn barr() {}\n+   |     ^^^----^^^^^\n+   |     |  |\n+   |     |  help: there is an associated function with a similar name: `bar`\n+   |     not a member of trait `Foo`\n+\n+error[E0407]: method `quux` is not a member of trait `Foo`\n+  --> $DIR/suggest-trait-items.rs:25:5\n+   |\n+LL |     fn quux() {}\n+   |     ^^^----^^^^^\n+   |     |  |\n+   |     |  help: there is an associated function with a similar name: `qux`\n+   |     not a member of trait `Foo`\n+\n+error[E0438]: const `Cnst` is not a member of trait `Bar`\n+  --> $DIR/suggest-trait-items.rs:42:5\n+   |\n+LL |     const Cnst: i32 = 0;\n+   |     ^^^^^^----^^^^^^^^^^\n+   |     |     |\n+   |     |     help: there is an associated constant with a similar name: `Const`\n+   |     not a member of trait `Bar`\n+\n+error[E0046]: not all trait items implemented, missing: `Type`, `foo`, `bar`, `qux`\n+  --> $DIR/suggest-trait-items.rs:11:1\n+   |\n+LL |     type Type;\n+   |     ---------- `Type` from trait\n+LL | \n+LL |     fn foo();\n+   |     --------- `foo` from trait\n+LL |     fn bar();\n+   |     --------- `bar` from trait\n+LL |     fn qux();\n+   |     --------- `qux` from trait\n+...\n+LL | impl Foo for A {\n+   | ^^^^^^^^^^^^^^ missing `Type`, `foo`, `bar`, `qux` in implementation\n+\n+error[E0046]: not all trait items implemented, missing: `Const`\n+  --> $DIR/suggest-trait-items.rs:40:1\n+   |\n+LL |     const Const: i32;\n+   |     ----------------- `Const` from trait\n+...\n+LL | impl Bar for B {\n+   | ^^^^^^^^^^^^^^ missing `Const` in implementation\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0046, E0407, E0437, E0438.\n+For more information about an error, try `rustc --explain E0046`."}, {"sha": "0390d7db040b49d036b97d58cd0921aa1e23e119", "filename": "src/test/ui/typeck/call-block.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Ftypeck%2Fcall-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Ftypeck%2Fcall-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fcall-block.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let _ = {42}(); //~ ERROR expected function, found `{integer}`\n+}"}, {"sha": "68984bc1c453f4d6f77559ee58cda47289b2eea8", "filename": "src/test/ui/typeck/call-block.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Ftypeck%2Fcall-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftest%2Fui%2Ftypeck%2Fcall-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fcall-block.stderr?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -0,0 +1,11 @@\n+error[E0618]: expected function, found `{integer}`\n+  --> $DIR/call-block.rs:2:13\n+   |\n+LL |     let _ = {42}();\n+   |             ^^^^--\n+   |             |\n+   |             call expression requires function\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0618`."}, {"sha": "1ed78547a60cd49a40f20493f9fcf964a3bc695c", "filename": "src/tools/clippy/tests/ui/def_id_nocore.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdef_id_nocore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdef_id_nocore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdef_id_nocore.rs?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -15,11 +15,12 @@ pub trait Copy {}\n pub unsafe trait Freeze {}\n \n #[lang = \"start\"]\n-#[start]\n-fn start(_argc: isize, _argv: *const *const u8) -> isize {\n+fn start<T>(_main: fn() -> T, _argc: isize, _argv: *const *const u8) -> isize {\n     0\n }\n \n+fn main() {}\n+\n struct A;\n \n impl A {"}, {"sha": "6210d7c6cfd80c1d32369494f3010694b606dc65", "filename": "src/tools/clippy/tests/ui/def_id_nocore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdef_id_nocore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/598d89bf142823b5d84e2eb0f0f9e418ee966a4b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdef_id_nocore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdef_id_nocore.stderr?ref=598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "patch": "@@ -1,5 +1,5 @@\n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/def_id_nocore.rs:26:19\n+  --> $DIR/def_id_nocore.rs:27:19\n    |\n LL |     pub fn as_ref(self) -> &'static str {\n    |                   ^^^^"}]}