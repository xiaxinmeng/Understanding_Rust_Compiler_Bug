{"sha": "bbfc6f89455b207b65972181ae4401941215b6a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZmM2Zjg5NDU1YjIwN2I2NTk3MjE4MWFlNDQwMTk0MTIxNWI2YTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-14T18:21:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-14T18:22:17Z"}, "message": "libcore: Make enum logging significantly less clownshoes.\n\nFixes the log-knows-the-names* tests.", "tree": {"sha": "930684d44fc3443f14160ebc0d6b160ab04c502c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/930684d44fc3443f14160ebc0d6b160ab04c502c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbfc6f89455b207b65972181ae4401941215b6a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbfc6f89455b207b65972181ae4401941215b6a9", "html_url": "https://github.com/rust-lang/rust/commit/bbfc6f89455b207b65972181ae4401941215b6a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbfc6f89455b207b65972181ae4401941215b6a9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "127c0d40ac48c40c10f9e726bdbea1fa659a097a", "url": "https://api.github.com/repos/rust-lang/rust/commits/127c0d40ac48c40c10f9e726bdbea1fa659a097a", "html_url": "https://github.com/rust-lang/rust/commit/127c0d40ac48c40c10f9e726bdbea1fa659a097a"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "f62e4aca68e17801c48131e3d8dc9a7828e4e66b", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bbfc6f89455b207b65972181ae4401941215b6a9/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfc6f89455b207b65972181ae4401941215b6a9/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=bbfc6f89455b207b65972181ae4401941215b6a9", "patch": "@@ -118,12 +118,29 @@ impl char : Repr {\n     fn write_repr(writer: @Writer) { writer.write_char(self); }\n }\n \n+enum EnumVisitState {\n+    PreVariant,     // We're before the variant we're interested in.\n+    InVariant,      // We're inside the variant we're interested in.\n+    PostVariant     // We're after the variant we're interested in.\n+}\n+\n+impl EnumVisitState : cmp::Eq {\n+    pure fn eq(&&other: EnumVisitState) -> bool {\n+        (self as uint) == (other as uint)\n+    }\n+    pure fn ne(&&other: EnumVisitState) -> bool { !self.eq(other) }\n+}\n+\n+struct EnumState {\n+    end_ptr: *c_void,\n+    state: EnumVisitState\n+}\n+\n /// XXX: This should not use a boxed writer!\n struct ReprPrinter {\n     mut ptr: *c_void,\n     writer: @Writer,    // XXX: This should not use a boxed trait.\n-    mut skip: bool,\n-    enum_stack: DVec<*c_void>\n+    enum_stack: DVec<EnumState>\n }\n \n /// FIXME (issue #3462): This is horrible.\n@@ -467,8 +484,9 @@ impl ReprPrinterWrapper : TyVisitor {\n             self.printer.align(align);\n \n             // Write in the location of the end of this enum.\n-            let new_pos = self.printer.ptr as uint + sz;\n-            self.printer.enum_stack.push(transmute(new_pos));\n+            let end_ptr = transmute(self.printer.ptr as uint + sz);\n+            let new_state = EnumState { end_ptr: end_ptr, state: PreVariant };\n+            self.printer.enum_stack.push(new_state);\n \n             true\n         }\n@@ -479,20 +497,26 @@ impl ReprPrinterWrapper : TyVisitor {\n                                 _n_fields: uint,\n                                 name: &str) -> bool {\n         unsafe {\n-            let disr_ptr = self.printer.ptr as *int;\n-            if *disr_ptr == disr_val {\n-                self.printer.skip = false;  // Don't skip this variant.\n-                self.printer.writer.write_str(name);\n-                self.printer.bump(sys::size_of::<int>());\n-            } else {\n-                self.printer.skip = true;   // Skip this variant.\n+            let stack = &self.printer.enum_stack;\n+            let mut enum_state = stack.last();\n+            match enum_state.state {\n+                PreVariant => {\n+                    let disr_ptr = self.printer.ptr as *int;\n+                    if *disr_ptr == disr_val {\n+                        enum_state.state = InVariant;\n+                        self.printer.writer.write_str(name);\n+                        self.printer.bump(sys::size_of::<int>());\n+                        stack.set_elt(stack.len() - 1, enum_state);\n+                    }\n+                }\n+                InVariant | PostVariant => {}\n             }\n             true\n         }\n     }\n \n     fn visit_enum_variant_field(i: uint, inner: *TyDesc) -> bool {\n-        if !self.printer.skip {\n+        if self.printer.enum_stack.last().state == InVariant {\n             if i == 0 {\n                 self.printer.writer.write_char('(');\n             } else {\n@@ -508,14 +532,21 @@ impl ReprPrinterWrapper : TyVisitor {\n                                 _disr_val: int,\n                                 n_fields: uint,\n                                 _name: &str) -> bool {\n-        if !self.printer.skip && n_fields >= 1 {\n-            self.printer.writer.write_char(')');\n+        let stack = &self.printer.enum_stack;\n+        let mut enum_state = stack.last();\n+        match enum_state.state {\n+            InVariant => {\n+                if n_fields >= 1 { self.printer.writer.write_char(')'); }\n+                enum_state.state = PostVariant;\n+                stack.set_elt(stack.len() - 1, enum_state);\n+            }\n+            PreVariant | PostVariant => {}\n         }\n         true\n     }\n \n     fn visit_leave_enum(_n_variants: uint, _sz: uint, _align: uint) -> bool {\n-        self.printer.ptr = self.printer.enum_stack.pop();\n+        self.printer.ptr = self.printer.enum_stack.pop().end_ptr;\n         true\n     }\n \n@@ -564,7 +595,6 @@ pub fn write_repr<T>(writer: @Writer, object: &T) {\n         let repr_printer = @ReprPrinter {\n             ptr: ptr,\n             writer: writer,\n-            skip: false,\n             enum_stack: DVec()\n         };\n "}]}