{"sha": "c23a9d42ea082830593a73d25821842baf9ccf33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyM2E5ZDQyZWEwODI4MzA1OTNhNzNkMjU4MjE4NDJiYWY5Y2NmMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-17T00:05:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-17T00:05:34Z"}, "message": "Auto merge of #25387 - eddyb:syn-file-loader, r=nikomatsakis\n\nThis allows compiling entire crates from memory or preprocessing source files before they are tokenized.\r\n\r\nMinor API refactoring included, which is a [breaking-change] for libsyntax users:\r\n* `ParseSess::{next_node_id, reserve_node_ids}` moved to rustc's `Session`\r\n* `new_parse_sess` -> `ParseSess::new`\r\n* `new_parse_sess_special_handler` -> `ParseSess::with_span_handler`\r\n* `mk_span_handler` -> `SpanHandler::new`\r\n* `default_handler` -> `Handler::new`\r\n* `mk_handler` -> `Handler::with_emitter`\r\n* `string_to_filemap(sess source, path)` -> `sess.codemap().new_filemap(path, source)`", "tree": {"sha": "f912990ab013f4e5f1fe7f2b92fa3830aaea069c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f912990ab013f4e5f1fe7f2b92fa3830aaea069c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c23a9d42ea082830593a73d25821842baf9ccf33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c23a9d42ea082830593a73d25821842baf9ccf33", "html_url": "https://github.com/rust-lang/rust/commit/c23a9d42ea082830593a73d25821842baf9ccf33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c23a9d42ea082830593a73d25821842baf9ccf33/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2da9efefca51b1ba2e173ad3136812eacc0c1ce7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2da9efefca51b1ba2e173ad3136812eacc0c1ce7", "html_url": "https://github.com/rust-lang/rust/commit/2da9efefca51b1ba2e173ad3136812eacc0c1ce7"}, {"sha": "8cc9878f8d5d7581006d3af1fb3c6732b41c85a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cc9878f8d5d7581006d3af1fb3c6732b41c85a3", "html_url": "https://github.com/rust-lang/rust/commit/8cc9878f8d5d7581006d3af1fb3c6732b41c85a3"}], "stats": {"total": 291, "additions": 149, "deletions": 142}, "files": [{"sha": "b9ff39547f3cf836f2dd44e19c548d68159c660d", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -287,11 +287,9 @@ fn main() {\n     let options = config::basic_options();\n     let session = session::build_session(options, None,\n                                          syntax::diagnostics::registry::Registry::new(&[]));\n-    let filemap = parse::string_to_filemap(&session.parse_sess,\n-                                           code,\n-                                           String::from_str(\"<n/a>\"));\n+    let filemap = session.parse_sess.codemap().new_filemap(String::from_str(\"<n/a>\"), code);\n     let mut lexer = lexer::StringReader::new(session.diagnostic(), filemap);\n-    let ref cm = lexer.span_diagnostic.cm;\n+    let cm = session.codemap();\n \n     // ANTLR\n     let mut token_file = File::open(&Path::new(&args.next().unwrap())).unwrap();"}, {"sha": "328972c54e377f25972da3883364d48ec89199e0", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -1866,7 +1866,7 @@ impl FakeExtCtxt for parse::ParseSess {\n \n #[cfg(test)]\n fn mk_ctxt() -> parse::ParseSess {\n-    parse::new_parse_sess()\n+    parse::ParseSess::new()\n }\n \n #[cfg(test)]"}, {"sha": "48fe574e71f48b5c67699f0bef1a79a4f5c4a844", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -852,7 +852,7 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String> ) -> ast::CrateConfig {\n         parse::parse_meta_from_source_str(\"cfgspec\".to_string(),\n                                           s.to_string(),\n                                           Vec::new(),\n-                                          &parse::new_parse_sess())\n+                                          &parse::ParseSess::new())\n     }).collect::<ast::CrateConfig>()\n }\n "}, {"sha": "87634886009efd159ba79c420745ed4fa1e7c655", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -64,7 +64,9 @@ pub struct Session {\n     /// operations such as auto-dereference and monomorphization.\n     pub recursion_limit: Cell<usize>,\n \n-    pub can_print_warnings: bool\n+    pub can_print_warnings: bool,\n+\n+    next_node_id: Cell<ast::NodeId>\n }\n \n impl Session {\n@@ -213,16 +215,23 @@ impl Session {\n         lints.insert(id, vec!((lint_id, sp, msg)));\n     }\n     pub fn next_node_id(&self) -> ast::NodeId {\n-        self.parse_sess.next_node_id()\n+        self.reserve_node_ids(1)\n     }\n     pub fn reserve_node_ids(&self, count: ast::NodeId) -> ast::NodeId {\n-        self.parse_sess.reserve_node_ids(count)\n+        let id = self.next_node_id.get();\n+\n+        match id.checked_add(count) {\n+            Some(next) => self.next_node_id.set(next),\n+            None => self.bug(\"Input too large, ran out of node ids!\")\n+        }\n+\n+        id\n     }\n     pub fn diagnostic<'a>(&'a self) -> &'a diagnostic::SpanHandler {\n         &self.parse_sess.span_diagnostic\n     }\n     pub fn codemap<'a>(&'a self) -> &'a codemap::CodeMap {\n-        &self.parse_sess.span_diagnostic.cm\n+        self.parse_sess.codemap()\n     }\n     // This exists to help with refactoring to eliminate impossible\n     // cases later on\n@@ -359,9 +368,9 @@ pub fn build_session(sopts: config::Options,\n \n     let codemap = codemap::CodeMap::new();\n     let diagnostic_handler =\n-        diagnostic::default_handler(sopts.color, Some(registry), can_print_warnings);\n+        diagnostic::Handler::new(sopts.color, Some(registry), can_print_warnings);\n     let span_diagnostic_handler =\n-        diagnostic::mk_span_handler(diagnostic_handler, codemap);\n+        diagnostic::SpanHandler::new(diagnostic_handler, codemap);\n \n     build_session_(sopts, local_crate_source_file, span_diagnostic_handler)\n }\n@@ -378,7 +387,7 @@ pub fn build_session_(sopts: config::Options,\n     }\n     };\n     let target_cfg = config::build_target_config(&sopts, &span_diagnostic);\n-    let p_s = parse::new_parse_sess_special_handler(span_diagnostic);\n+    let p_s = parse::ParseSess::with_span_handler(span_diagnostic);\n     let default_sysroot = match sopts.maybe_sysroot {\n         Some(_) => None,\n         None => Some(filesearch::get_or_default_sysroot())\n@@ -421,7 +430,8 @@ pub fn build_session_(sopts: config::Options,\n         delayed_span_bug: RefCell::new(None),\n         features: RefCell::new(feature_gate::Features::new()),\n         recursion_limit: Cell::new(64),\n-        can_print_warnings: can_print_warnings\n+        can_print_warnings: can_print_warnings,\n+        next_node_id: Cell::new(1)\n     };\n \n     sess"}, {"sha": "811d59d67485a790b11ded7f85b963f44d822d13", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -218,7 +218,7 @@ impl Target {\n         // this is 1. ugly, 2. error prone.\n \n \n-        let handler = diagnostic::default_handler(diagnostic::Auto, None, true);\n+        let handler = diagnostic::Handler::new(diagnostic::Auto, None, true);\n \n         let get_req_field = |name: &str| {\n             match obj.find(name)"}, {"sha": "b53f2b1dcfa65ae81fd99525e210f6b28818733d", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -105,9 +105,9 @@ fn test_env<F>(source_string: &str,\n     let codemap =\n         CodeMap::new();\n     let diagnostic_handler =\n-        diagnostic::mk_handler(true, emitter);\n+        diagnostic::Handler::with_emitter(true, emitter);\n     let span_diagnostic_handler =\n-        diagnostic::mk_span_handler(diagnostic_handler, codemap);\n+        diagnostic::SpanHandler::new(diagnostic_handler, codemap);\n \n     let sess = session::build_session_(options, None, span_diagnostic_handler);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));"}, {"sha": "a9e9e3f4048aca708d02c97d6040d0beda544c47", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -21,7 +21,7 @@ use util::common::time;\n use util::common::path2cstr;\n use syntax::codemap;\n use syntax::diagnostic;\n-use syntax::diagnostic::{Emitter, Handler, Level, mk_handler};\n+use syntax::diagnostic::{Emitter, Handler, Level};\n \n use std::ffi::{CStr, CString};\n use std::fs;\n@@ -928,7 +928,7 @@ fn run_work_multithreaded(sess: &Session,\n         futures.push(rx);\n \n         thread::Builder::new().name(format!(\"codegen-{}\", i)).spawn(move || {\n-            let diag_handler = mk_handler(true, box diag_emitter);\n+            let diag_handler = Handler::with_emitter(true, box diag_emitter);\n \n             // Must construct cgcx inside the proc because it has non-Send\n             // fields."}, {"sha": "f7757b9fee753c8f749f001002ba0a111fb1047d", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -110,9 +110,9 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n     };\n \n     let codemap = codemap::CodeMap::new();\n-    let diagnostic_handler = diagnostic::default_handler(diagnostic::Auto, None, true);\n+    let diagnostic_handler = diagnostic::Handler::new(diagnostic::Auto, None, true);\n     let span_diagnostic_handler =\n-        diagnostic::mk_span_handler(diagnostic_handler, codemap);\n+        diagnostic::SpanHandler::new(diagnostic_handler, codemap);\n \n     let sess = session::build_session_(sessopts, cpath,\n                                        span_diagnostic_handler);"}, {"sha": "e375ec3afc2545a7c5259e87ab35c6bd1b2878ec", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -24,10 +24,8 @@ use syntax::parse;\n /// Highlights some source code, returning the HTML output.\n pub fn highlight(src: &str, class: Option<&str>, id: Option<&str>) -> String {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n-    let sess = parse::new_parse_sess();\n-    let fm = parse::string_to_filemap(&sess,\n-                                      src.to_string(),\n-                                      \"<stdin>\".to_string());\n+    let sess = parse::ParseSess::new();\n+    let fm = sess.codemap().new_filemap(\"<stdin>\".to_string(), src.to_string());\n \n     let mut out = Vec::new();\n     doit(&sess,\n@@ -62,7 +60,7 @@ fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader,\n     loop {\n         let next = lexer.next_token();\n \n-        let snip = |sp| sess.span_diagnostic.cm.span_to_snippet(sp).unwrap();\n+        let snip = |sp| sess.codemap().span_to_snippet(sp).unwrap();\n \n         if next.tok == token::Eof { break }\n \n@@ -178,7 +176,7 @@ fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader,\n \n         // as mentioned above, use the original source code instead of\n         // stringifying this token\n-        let snip = sess.span_diagnostic.cm.span_to_snippet(next.sp).unwrap();\n+        let snip = sess.codemap().span_to_snippet(next.sp).unwrap();\n         if klass == \"\" {\n             try!(write!(out, \"{}\", Escape(&snip)));\n         } else {"}, {"sha": "8e2a3e6fcc3a17cf62ee707e1d662f4e94e687ad", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -65,9 +65,9 @@ pub fn run(input: &str,\n     };\n \n     let codemap = CodeMap::new();\n-    let diagnostic_handler = diagnostic::default_handler(diagnostic::Auto, None, true);\n+    let diagnostic_handler = diagnostic::Handler::new(diagnostic::Auto, None, true);\n     let span_diagnostic_handler =\n-    diagnostic::mk_span_handler(diagnostic_handler, codemap);\n+    diagnostic::SpanHandler::new(diagnostic_handler, codemap);\n \n     let sess = session::build_session_(sessopts,\n                                       Some(input_path.clone()),\n@@ -184,7 +184,7 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n     // it with a sink that is also passed to rustc itself. When this function\n     // returns the output of the sink is copied onto the output of our own thread.\n     //\n-    // The basic idea is to not use a default_handler() for rustc, and then also\n+    // The basic idea is to not use a default Handler for rustc, and then also\n     // not print things by default to the actual stderr.\n     struct Sink(Arc<Mutex<Vec<u8>>>);\n     impl Write for Sink {\n@@ -206,9 +206,9 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n \n     // Compile the code\n     let codemap = CodeMap::new();\n-    let diagnostic_handler = diagnostic::mk_handler(true, box emitter);\n+    let diagnostic_handler = diagnostic::Handler::with_emitter(true, box emitter);\n     let span_diagnostic_handler =\n-        diagnostic::mk_span_handler(diagnostic_handler, codemap);\n+        diagnostic::SpanHandler::new(diagnostic_handler, codemap);\n \n     let sess = session::build_session_(sessopts,\n                                        None,"}, {"sha": "b2a366ec5beb608ff3a8899b0d842ed88e4a1094", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -21,9 +21,11 @@ pub use self::MacroFormat::*;\n \n use std::cell::RefCell;\n use std::ops::{Add, Sub};\n+use std::path::Path;\n use std::rc::Rc;\n \n-use std::fmt;\n+use std::{fmt, fs};\n+use std::io::{self, Read};\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n@@ -527,24 +529,66 @@ impl FileMap {\n     }\n }\n \n+/// An abstraction over the fs operations used by the Parser.\n+pub trait FileLoader {\n+    /// Query the existence of a file.\n+    fn file_exists(&self, path: &Path) -> bool;\n+\n+    /// Read the contents of an UTF-8 file into memory.\n+    fn read_file(&self, path: &Path) -> io::Result<String>;\n+}\n+\n+/// A FileLoader that uses std::fs to load real files.\n+pub struct RealFileLoader;\n+\n+impl FileLoader for RealFileLoader {\n+    fn file_exists(&self, path: &Path) -> bool {\n+        fs::metadata(path).is_ok()\n+    }\n+\n+    fn read_file(&self, path: &Path) -> io::Result<String> {\n+        let mut src = String::new();\n+        try!(try!(fs::File::open(path)).read_to_string(&mut src));\n+        Ok(src)\n+    }\n+}\n \n // _____________________________________________________________________________\n // CodeMap\n //\n \n pub struct CodeMap {\n     pub files: RefCell<Vec<Rc<FileMap>>>,\n-    expansions: RefCell<Vec<ExpnInfo>>\n+    expansions: RefCell<Vec<ExpnInfo>>,\n+    file_loader: Box<FileLoader>\n }\n \n impl CodeMap {\n     pub fn new() -> CodeMap {\n         CodeMap {\n             files: RefCell::new(Vec::new()),\n             expansions: RefCell::new(Vec::new()),\n+            file_loader: Box::new(RealFileLoader)\n+        }\n+    }\n+\n+    pub fn with_file_loader(file_loader: Box<FileLoader>) -> CodeMap {\n+        CodeMap {\n+            files: RefCell::new(Vec::new()),\n+            expansions: RefCell::new(Vec::new()),\n+            file_loader: file_loader\n         }\n     }\n \n+    pub fn file_exists(&self, path: &Path) -> bool {\n+        self.file_loader.file_exists(path)\n+    }\n+\n+    pub fn load_file(&self, path: &Path) -> io::Result<Rc<FileMap>> {\n+        let src = try!(self.file_loader.read_file(path));\n+        Ok(self.new_filemap(path.to_str().unwrap().to_string(), src))\n+    }\n+\n     pub fn new_filemap(&self, filename: FileName, mut src: String) -> Rc<FileMap> {\n         let mut files = self.files.borrow_mut();\n         let start_pos = match files.last() {"}, {"sha": "718bc1773fe59c91769435cd21782ce02f2f1259", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -122,6 +122,12 @@ pub struct SpanHandler {\n }\n \n impl SpanHandler {\n+    pub fn new(handler: Handler, cm: codemap::CodeMap) -> SpanHandler {\n+        SpanHandler {\n+            handler: handler,\n+            cm: cm,\n+        }\n+    }\n     pub fn span_fatal(&self, sp: Span, msg: &str) -> FatalError {\n         self.handler.emit(Some((&self.cm, sp)), msg, Fatal);\n         return FatalError;\n@@ -187,6 +193,19 @@ pub struct Handler {\n }\n \n impl Handler {\n+    pub fn new(color_config: ColorConfig,\n+               registry: Option<diagnostics::registry::Registry>,\n+               can_emit_warnings: bool) -> Handler {\n+        let emitter = Box::new(EmitterWriter::stderr(color_config, registry));\n+        Handler::with_emitter(can_emit_warnings, emitter)\n+    }\n+    pub fn with_emitter(can_emit_warnings: bool, e: Box<Emitter + Send>) -> Handler {\n+        Handler {\n+            err_count: Cell::new(0),\n+            emit: RefCell::new(e),\n+            can_emit_warnings: can_emit_warnings\n+        }\n+    }\n     pub fn fatal(&self, msg: &str) -> ! {\n         self.emit.borrow_mut().emit(None, msg, None, Fatal);\n         panic!(FatalError);\n@@ -254,27 +273,6 @@ impl Handler {\n     }\n }\n \n-pub fn mk_span_handler(handler: Handler, cm: codemap::CodeMap) -> SpanHandler {\n-    SpanHandler {\n-        handler: handler,\n-        cm: cm,\n-    }\n-}\n-\n-pub fn default_handler(color_config: ColorConfig,\n-                       registry: Option<diagnostics::registry::Registry>,\n-                       can_emit_warnings: bool) -> Handler {\n-    mk_handler(can_emit_warnings, Box::new(EmitterWriter::stderr(color_config, registry)))\n-}\n-\n-pub fn mk_handler(can_emit_warnings: bool, e: Box<Emitter + Send>) -> Handler {\n-    Handler {\n-        err_count: Cell::new(0),\n-        emit: RefCell::new(e),\n-        can_emit_warnings: can_emit_warnings\n-    }\n-}\n-\n #[derive(Copy, PartialEq, Clone, Debug)]\n pub enum Level {\n     Bug,"}, {"sha": "2d3c2e8223aede864faabbdbb36d47ede5ca9a9c", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -648,7 +648,7 @@ impl<'a> ExtCtxt<'a> {\n         parse::tts_to_parser(self.parse_sess, tts.to_vec(), self.cfg())\n     }\n \n-    pub fn codemap(&self) -> &'a CodeMap { &self.parse_sess.span_diagnostic.cm }\n+    pub fn codemap(&self) -> &'a CodeMap { self.parse_sess.codemap() }\n     pub fn parse_sess(&self) -> &'a parse::ParseSess { self.parse_sess }\n     pub fn cfg(&self) -> ast::CrateConfig { self.cfg.clone() }\n     pub fn call_site(&self) -> Span {"}, {"sha": "484684a87f4cd6d53c8df363119fde4926fe42ea", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -1684,7 +1684,7 @@ mod tests {\n     #[test] fn macros_cant_escape_fns_test () {\n         let src = \"fn bogus() {macro_rules! z (() => (3+4));}\\\n                    fn inty() -> i32 { z!() }\".to_string();\n-        let sess = parse::new_parse_sess();\n+        let sess = parse::ParseSess::new();\n         let crate_ast = parse::parse_crate_from_source_str(\n             \"<test>\".to_string(),\n             src,\n@@ -1698,7 +1698,7 @@ mod tests {\n     #[test] fn macros_cant_escape_mods_test () {\n         let src = \"mod foo {macro_rules! z (() => (3+4));}\\\n                    fn inty() -> i32 { z!() }\".to_string();\n-        let sess = parse::new_parse_sess();\n+        let sess = parse::ParseSess::new();\n         let crate_ast = parse::parse_crate_from_source_str(\n             \"<test>\".to_string(),\n             src,\n@@ -1710,7 +1710,7 @@ mod tests {\n     #[test] fn macros_can_escape_flattened_mods_test () {\n         let src = \"#[macro_use] mod foo {macro_rules! z (() => (3+4));}\\\n                    fn inty() -> i32 { z!() }\".to_string();\n-        let sess = parse::new_parse_sess();\n+        let sess = parse::ParseSess::new();\n         let crate_ast = parse::parse_crate_from_source_str(\n             \"<test>\".to_string(),\n             src,\n@@ -1719,7 +1719,7 @@ mod tests {\n     }\n \n     fn expand_crate_str(crate_str: String) -> ast::Crate {\n-        let ps = parse::new_parse_sess();\n+        let ps = parse::ParseSess::new();\n         let crate_ast = panictry!(string_to_parser(&ps, crate_str).parse_crate_mod());\n         // the cfg argument actually does matter, here...\n         expand_crate(&ps,test_ecfg(),vec!(),vec!(),crate_ast)"}, {"sha": "32b15066b552885f696cf0ad446d7620b77b3bed", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -1412,8 +1412,8 @@ mod tests {\n     fn mk_sh() -> diagnostic::SpanHandler {\n         // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         let emitter = diagnostic::EmitterWriter::new(Box::new(io::sink()), None);\n-        let handler = diagnostic::mk_handler(true, Box::new(emitter));\n-        diagnostic::mk_span_handler(handler, CodeMap::new())\n+        let handler = diagnostic::Handler::with_emitter(true, Box::new(emitter));\n+        diagnostic::SpanHandler::new(handler, CodeMap::new())\n     }\n \n     // open a string reader for the given string"}, {"sha": "68574560533fef8c678e93696715253a4cdb81a8", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 26, "deletions": 63, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -12,14 +12,13 @@\n \n use ast;\n use codemap::{Span, CodeMap, FileMap};\n-use diagnostic::{SpanHandler, mk_span_handler, default_handler, Auto, FatalError};\n+use diagnostic::{SpanHandler, Handler, Auto, FatalError};\n use parse::attr::ParserAttr;\n use parse::parser::Parser;\n use ptr::P;\n use str::char_at;\n \n-use std::cell::{Cell, RefCell};\n-use std::fs::File;\n+use std::cell::RefCell;\n use std::io::Read;\n use std::iter;\n use std::path::{Path, PathBuf};\n@@ -44,38 +43,23 @@ pub struct ParseSess {\n     pub span_diagnostic: SpanHandler, // better be the same as the one in the reader!\n     /// Used to determine and report recursive mod inclusions\n     included_mod_stack: RefCell<Vec<PathBuf>>,\n-    pub node_id: Cell<ast::NodeId>,\n-}\n-\n-pub fn new_parse_sess() -> ParseSess {\n-    ParseSess {\n-        span_diagnostic: mk_span_handler(default_handler(Auto, None, true), CodeMap::new()),\n-        included_mod_stack: RefCell::new(Vec::new()),\n-        node_id: Cell::new(1),\n-    }\n-}\n-\n-pub fn new_parse_sess_special_handler(sh: SpanHandler) -> ParseSess {\n-    ParseSess {\n-        span_diagnostic: sh,\n-        included_mod_stack: RefCell::new(Vec::new()),\n-        node_id: Cell::new(1),\n-    }\n }\n \n impl ParseSess {\n-    pub fn next_node_id(&self) -> ast::NodeId {\n-        self.reserve_node_ids(1)\n+    pub fn new() -> ParseSess {\n+        let handler = SpanHandler::new(Handler::new(Auto, None, true), CodeMap::new());\n+        ParseSess::with_span_handler(handler)\n     }\n-    pub fn reserve_node_ids(&self, count: ast::NodeId) -> ast::NodeId {\n-        let v = self.node_id.get();\n \n-        match v.checked_add(count) {\n-            Some(next) => { self.node_id.set(next); }\n-            None => panic!(\"Input too large, ran out of node ids!\")\n+    pub fn with_span_handler(sh: SpanHandler) -> ParseSess {\n+        ParseSess {\n+            span_diagnostic: sh,\n+            included_mod_stack: RefCell::new(vec![])\n         }\n+    }\n \n-        v\n+    pub fn codemap(&self) -> &CodeMap {\n+        &self.span_diagnostic.cm\n     }\n }\n \n@@ -189,7 +173,7 @@ pub fn new_parser_from_source_str<'a>(sess: &'a ParseSess,\n                                       name: String,\n                                       source: String)\n                                       -> Parser<'a> {\n-    filemap_to_parser(sess, string_to_filemap(sess, source, name), cfg)\n+    filemap_to_parser(sess, sess.codemap().new_filemap(name, source), cfg)\n }\n \n /// Create a new parser, handling errors as appropriate\n@@ -235,41 +219,20 @@ pub fn new_parser_from_tts<'a>(sess: &'a ParseSess,\n \n /// Given a session and a path and an optional span (for error reporting),\n /// add the path to the session's codemap and return the new filemap.\n-pub fn file_to_filemap(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n-    -> Rc<FileMap> {\n-    let err = |msg: &str| {\n-        match spanopt {\n-            Some(sp) => panic!(sess.span_diagnostic.span_fatal(sp, msg)),\n-            None => sess.span_diagnostic.handler().fatal(msg),\n-        }\n-    };\n-    let mut bytes = Vec::new();\n-    match File::open(path).and_then(|mut f| f.read_to_end(&mut bytes)) {\n-        Ok(..) => {}\n+fn file_to_filemap(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n+                   -> Rc<FileMap> {\n+    match sess.codemap().load_file(path) {\n+        Ok(filemap) => filemap,\n         Err(e) => {\n-            err(&format!(\"couldn't read {:?}: {}\", path.display(), e));\n-            unreachable!();\n-        }\n-    };\n-    match str::from_utf8(&bytes[..]).ok() {\n-        Some(s) => {\n-            string_to_filemap(sess, s.to_string(),\n-                              path.to_str().unwrap().to_string())\n-        }\n-        None => {\n-            err(&format!(\"{:?} is not UTF-8 encoded\", path.display()));\n-            unreachable!();\n+            let msg = format!(\"couldn't read {:?}: {}\", path.display(), e);\n+            match spanopt {\n+                Some(sp) => panic!(sess.span_diagnostic.span_fatal(sp, &msg)),\n+                None => sess.span_diagnostic.handler().fatal(&msg)\n+            }\n         }\n     }\n }\n \n-/// Given a session and a string, add the string to\n-/// the session's codemap and return the new filemap\n-pub fn string_to_filemap(sess: &ParseSess, source: String, path: String)\n-                         -> Rc<FileMap> {\n-    sess.span_diagnostic.cm.new_filemap(path, source)\n-}\n-\n /// Given a filemap, produce a sequence of token-trees\n pub fn filemap_to_tts(sess: &ParseSess, filemap: Rc<FileMap>)\n     -> Vec<ast::TokenTree> {\n@@ -905,7 +868,7 @@ mod tests {\n     }\n \n     #[test] fn parse_ident_pat () {\n-        let sess = new_parse_sess();\n+        let sess = ParseSess::new();\n         let mut parser = string_to_parser(&sess, \"b\".to_string());\n         assert!(panictry!(parser.parse_pat_nopanic())\n                 == P(ast::Pat{\n@@ -1086,7 +1049,7 @@ mod tests {\n     }\n \n     #[test] fn crlf_doc_comments() {\n-        let sess = new_parse_sess();\n+        let sess = ParseSess::new();\n \n         let name = \"<source>\".to_string();\n         let source = \"/// doc comment\\r\\nfn foo() {}\".to_string();\n@@ -1109,7 +1072,7 @@ mod tests {\n \n     #[test]\n     fn ttdelim_span() {\n-        let sess = parse::new_parse_sess();\n+        let sess = ParseSess::new();\n         let expr = parse::parse_expr_from_source_str(\"foo\".to_string(),\n             \"foo!( fn main() { body } )\".to_string(), vec![], &sess);\n \n@@ -1123,7 +1086,7 @@ mod tests {\n \n         let span = tts.iter().rev().next().unwrap().get_span();\n \n-        match sess.span_diagnostic.cm.span_to_snippet(span) {\n+        match sess.codemap().span_to_snippet(span) {\n             Ok(s) => assert_eq!(&s[..], \"{ body }\"),\n             Err(_) => panic!(\"could not get snippet\"),\n         }"}, {"sha": "2b6f91bbc993ae2500e12fe3e436ebda0b4573e4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -79,7 +79,6 @@ use parse::PResult;\n use diagnostic::FatalError;\n \n use std::collections::HashSet;\n-use std::fs;\n use std::io::prelude::*;\n use std::mem;\n use std::path::{Path, PathBuf};\n@@ -4840,8 +4839,7 @@ impl<'a> Parser<'a> {\n                     outer_attrs: &[ast::Attribute],\n                     id_sp: Span)\n                     -> PResult<(ast::Item_, Vec<ast::Attribute> )> {\n-        let mut prefix = PathBuf::from(&self.sess.span_diagnostic.cm\n-                                            .span_to_filename(self.span));\n+        let mut prefix = PathBuf::from(&self.sess.codemap().span_to_filename(self.span));\n         prefix.pop();\n         let mut dir_path = prefix;\n         for part in &self.mod_path_stack {\n@@ -4857,8 +4855,8 @@ impl<'a> Parser<'a> {\n                 let secondary_path_str = format!(\"{}/mod.rs\", mod_name);\n                 let default_path = dir_path.join(&default_path_str[..]);\n                 let secondary_path = dir_path.join(&secondary_path_str[..]);\n-                let default_exists = fs::metadata(&default_path).is_ok();\n-                let secondary_exists = fs::metadata(&secondary_path).is_ok();\n+                let default_exists = self.sess.codemap().file_exists(&default_path);\n+                let secondary_exists = self.sess.codemap().file_exists(&secondary_path);\n \n                 if !self.owns_directory {\n                     self.span_err(id_sp,"}, {"sha": "458e3f7f0bd9b048e5381f6f198545ecc6ed18ba", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -301,7 +301,7 @@ fn ignored_span(cx: &TestCtxt, sp: Span) -> Span {\n             allow_internal_unstable: true,\n         }\n     };\n-    let expn_id = cx.sess.span_diagnostic.cm.record_expansion(info);\n+    let expn_id = cx.sess.codemap().record_expansion(info);\n     let mut sp = sp;\n     sp.expn_id = expn_id;\n     return sp;"}, {"sha": "6e6e2d181b9ef195f3b2f16a85052d062557b40c", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n use ast;\n-use parse::new_parse_sess;\n-use parse::{ParseSess,string_to_filemap,filemap_to_tts};\n+use parse::{ParseSess,filemap_to_tts};\n use parse::new_parser_from_source_str;\n use parse::parser::Parser;\n use parse::token;\n@@ -19,9 +18,8 @@ use str::char_at;\n \n /// Map a string to tts, using a made-up filename:\n pub fn string_to_tts(source_str: String) -> Vec<ast::TokenTree> {\n-    let ps = new_parse_sess();\n-    filemap_to_tts(&ps,\n-                   string_to_filemap(&ps, source_str, \"bogofile\".to_string()))\n+    let ps = ParseSess::new();\n+    filemap_to_tts(&ps, ps.codemap().new_filemap(\"bogofile\".to_string(), source_str))\n }\n \n /// Map string to parser (via tts)\n@@ -35,7 +33,7 @@ pub fn string_to_parser<'a>(ps: &'a ParseSess, source_str: String) -> Parser<'a>\n fn with_error_checking_parse<T, F>(s: String, f: F) -> T where\n     F: FnOnce(&mut Parser) -> T,\n {\n-    let ps = new_parse_sess();\n+    let ps = ParseSess::new();\n     let mut p = string_to_parser(&ps, s);\n     let x = f(&mut p);\n     p.abort_if_errors();\n@@ -75,7 +73,7 @@ pub fn string_to_stmt(source_str : String) -> P<ast::Stmt> {\n pub fn string_to_pat(source_str: String) -> P<ast::Pat> {\n     // Binding `sess` and `parser` works around dropck-injected\n     // region-inference issues; see #25212, #22323, #22321.\n-    let sess = new_parse_sess();\n+    let sess = ParseSess::new();\n     let mut parser = string_to_parser(&sess, source_str);\n     parser.parse_pat()\n }"}, {"sha": "c83a154056ba24b8cf4c77b519959384eaad1a14", "filename": "src/test/compile-fail-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fqquote.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -20,7 +20,7 @@ use syntax::parse;\n use syntax::print::pprust;\n \n fn main() {\n-    let ps = syntax::parse::new_parse_sess();\n+    let ps = syntax::parse::ParseSess::new();\n     let mut cx = syntax::ext::base::ExtCtxt::new(\n         &ps, vec![],\n         syntax::ext::expand::ExpansionConfig::default(\"qquote\".to_string()));"}, {"sha": "5331062d9b68d84d487145c37920b7c10c037d8f", "filename": "src/test/compile-fail/not-utf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Ftest%2Fcompile-fail%2Fnot-utf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Ftest%2Fcompile-fail%2Fnot-utf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-utf8.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: is not UTF-8\n+// error-pattern: did not contain valid UTF-8\n \n fn foo() {\n     include!(\"not-utf8.bin\")"}, {"sha": "4251579bbdcd1ba21334bb2de131a762ebc7a3dc", "filename": "src/test/run-fail-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -22,7 +22,7 @@ use syntax::parse;\n use syntax::print::pprust;\n \n fn main() {\n-    let ps = syntax::parse::new_parse_sess();\n+    let ps = syntax::parse::ParseSess::new();\n     let mut cx = syntax::ext::base::ExtCtxt::new(\n         &ps, vec![],\n         syntax::ext::expand::ExpansionConfig::default(\"qquote\".to_string()));"}, {"sha": "6670f200ba71ed37ef90f0d7e65c034ebe7de5c4", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23a9d42ea082830593a73d25821842baf9ccf33/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=c23a9d42ea082830593a73d25821842baf9ccf33", "patch": "@@ -18,7 +18,7 @@ use syntax::codemap::DUMMY_SP;\n use syntax::print::pprust::*;\n \n fn main() {\n-    let ps = syntax::parse::new_parse_sess();\n+    let ps = syntax::parse::ParseSess::new();\n     let mut cx = syntax::ext::base::ExtCtxt::new(\n         &ps, vec![],\n         syntax::ext::expand::ExpansionConfig::default(\"qquote\".to_string()));"}]}