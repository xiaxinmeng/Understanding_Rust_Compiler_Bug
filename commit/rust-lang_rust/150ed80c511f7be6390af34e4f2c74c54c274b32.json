{"sha": "150ed80c511f7be6390af34e4f2c74c54c274b32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MGVkODBjNTExZjdiZTYzOTBhZjM0ZTRmMmM3NGM1NGMyNzRiMzI=", "commit": {"author": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-13T21:59:51Z"}, "committer": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-13T21:59:51Z"}, "message": "strip type parameter defaults when generating impl generics", "tree": {"sha": "cc378cc1762de42d4f19b6690d9d547cc2690de8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc378cc1762de42d4f19b6690d9d547cc2690de8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/150ed80c511f7be6390af34e4f2c74c54c274b32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/150ed80c511f7be6390af34e4f2c74c54c274b32", "html_url": "https://github.com/rust-lang/rust/commit/150ed80c511f7be6390af34e4f2c74c54c274b32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/150ed80c511f7be6390af34e4f2c74c54c274b32/comments", "author": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84c9970db5056738995b0979cda8249c2314c6ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/84c9970db5056738995b0979cda8249c2314c6ee", "html_url": "https://github.com/rust-lang/rust/commit/84c9970db5056738995b0979cda8249c2314c6ee"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "16a600e6f16319baef436d0c90fcc54476bbbaa1", "filename": "crates/assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/150ed80c511f7be6390af34e4f2c74c54c274b32/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/150ed80c511f7be6390af34e4f2c74c54c274b32/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=150ed80c511f7be6390af34e4f2c74c54c274b32", "patch": "@@ -98,6 +98,30 @@ mod tests {\n                 $0\n             }\"#,\n         );\n+\n+        check_assist(\n+            generate_impl,\n+            r#\"\n+            struct Defaulted<T = i32> {}$0\"#,\n+            r#\"\n+            struct Defaulted<T = i32> {}\n+\n+            impl<T> Defaulted<T> {\n+                $0\n+            }\"#,\n+        );\n+\n+        check_assist(\n+            generate_impl,\n+            r#\"\n+            struct Defaulted<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String> {}$0\"#,\n+            r#\"\n+            struct Defaulted<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String> {}\n+\n+            impl<'a, 'b: 'a, T: Debug + Clone + 'a + 'b> Defaulted<'a, 'b, T> {\n+                $0\n+            }\"#,\n+        );\n     }\n \n     #[test]"}, {"sha": "8418e6e1232090e5dce429462a83be14bf3c8664", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/150ed80c511f7be6390af34e4f2c74c54c274b32/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/150ed80c511f7be6390af34e4f2c74c54c274b32/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=150ed80c511f7be6390af34e4f2c74c54c274b32", "patch": "@@ -2,6 +2,7 @@\n \n use std::ops;\n \n+use ast::TypeBoundsOwner;\n use hir::{Adt, HasSource};\n use ide_db::{helpers::SnippetCap, RootDatabase};\n use itertools::Itertools;\n@@ -377,29 +378,46 @@ pub(crate) fn generate_trait_impl_text(adt: &ast::Adt, trait_text: &str, code: &\n }\n \n fn generate_impl_text_inner(adt: &ast::Adt, trait_text: Option<&str>, code: &str) -> String {\n-    let type_params = adt.generic_param_list();\n+    let generic_params = adt.generic_param_list();\n     let mut buf = String::with_capacity(code.len());\n     buf.push_str(\"\\n\\n\");\n     adt.attrs()\n         .filter(|attr| attr.as_simple_call().map(|(name, _arg)| name == \"cfg\").unwrap_or(false))\n         .for_each(|attr| buf.push_str(format!(\"{}\\n\", attr.to_string()).as_str()));\n     buf.push_str(\"impl\");\n-    if let Some(type_params) = &type_params {\n-        format_to!(buf, \"{}\", type_params.syntax());\n+    if let Some(generic_params) = &generic_params {\n+        let lifetimes = generic_params.lifetime_params().map(|lt| format!(\"{}\", lt.syntax()));\n+        let type_params = generic_params.type_params().map(|type_param| {\n+            let mut buf = String::new();\n+            if let Some(it) = type_param.name() {\n+                format_to!(buf, \"{}\", it.syntax());\n+            }\n+            if let Some(it) = type_param.colon_token() {\n+                format_to!(buf, \"{} \", it);\n+            }\n+            if let Some(it) = type_param.type_bound_list() {\n+                format_to!(buf, \"{}\", it.syntax());\n+            }\n+            buf\n+        });\n+        let generics = lifetimes.chain(type_params).format(\", \");\n+        format_to!(buf, \"<{}>\", generics);\n     }\n     buf.push(' ');\n     if let Some(trait_text) = trait_text {\n         buf.push_str(trait_text);\n         buf.push_str(\" for \");\n     }\n     buf.push_str(adt.name().unwrap().text());\n-    if let Some(type_params) = type_params {\n-        let lifetime_params = type_params\n+    if let Some(generic_params) = generic_params {\n+        let lifetime_params = generic_params\n             .lifetime_params()\n             .filter_map(|it| it.lifetime())\n             .map(|it| SmolStr::from(it.text()));\n-        let type_params =\n-            type_params.type_params().filter_map(|it| it.name()).map(|it| SmolStr::from(it.text()));\n+        let type_params = generic_params\n+            .type_params()\n+            .filter_map(|it| it.name())\n+            .map(|it| SmolStr::from(it.text()));\n         format_to!(buf, \"<{}>\", lifetime_params.chain(type_params).format(\", \"))\n     }\n "}]}