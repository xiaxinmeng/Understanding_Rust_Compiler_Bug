{"sha": "69ec4aa97c23cfc316ec340d1afcaaeb4877e8ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZWM0YWE5N2MyM2NmYzMxNmVjMzQwZDFhZmNhYWViNDg3N2U4ZWY=", "commit": {"author": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2018-04-28T18:35:26Z"}, "committer": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2018-04-28T19:10:01Z"}, "message": "Mark functions returning uninhabited types as noreturn", "tree": {"sha": "e9f0c29f017b5a4baabf8a7a3ad3a9afa29c52c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9f0c29f017b5a4baabf8a7a3ad3a9afa29c52c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69ec4aa97c23cfc316ec340d1afcaaeb4877e8ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69ec4aa97c23cfc316ec340d1afcaaeb4877e8ef", "html_url": "https://github.com/rust-lang/rust/commit/69ec4aa97c23cfc316ec340d1afcaaeb4877e8ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69ec4aa97c23cfc316ec340d1afcaaeb4877e8ef/comments", "author": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff65726ebf1d7d732e24175a41381e53f39ee892", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff65726ebf1d7d732e24175a41381e53f39ee892", "html_url": "https://github.com/rust-lang/rust/commit/ff65726ebf1d7d732e24175a41381e53f39ee892"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "30676b91620a62c27e7d60e03bbcfcd6f7a114f3", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec4aa97c23cfc316ec340d1afcaaeb4877e8ef/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec4aa97c23cfc316ec340d1afcaaeb4877e8ef/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=69ec4aa97c23cfc316ec340d1afcaaeb4877e8ef", "patch": "@@ -271,7 +271,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         }\n         None => {}\n     };\n-    if sig.output().is_never() {\n+    if cx.layout_of(sig.output()).abi == ty::layout::Abi::Uninhabited {\n         flags = flags | DIFlags::FlagNoReturn;\n     }\n "}, {"sha": "97721ffbf06854e627550e92b1351a21bd3bd12a", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec4aa97c23cfc316ec340d1afcaaeb4877e8ef/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec4aa97c23cfc316ec340d1afcaaeb4877e8ef/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=69ec4aa97c23cfc316ec340d1afcaaeb4877e8ef", "patch": "@@ -23,6 +23,7 @@\n use llvm::{self, ValueRef};\n use llvm::AttributePlace::Function;\n use rustc::ty::{self, Ty};\n+use rustc::ty::layout::{self, LayoutOf};\n use rustc::session::config::Sanitizer;\n use rustc_target::spec::PanicStrategy;\n use abi::{Abi, FnType, FnTypeExt};\n@@ -133,8 +134,7 @@ pub fn declare_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, name: &str,\n     let fty = FnType::new(cx, sig, &[]);\n     let llfn = declare_raw_fn(cx, name, fty.llvm_cconv(), fty.llvm_type(cx));\n \n-    // FIXME(canndrew): This is_never should really be an is_uninhabited\n-    if sig.output().is_never() {\n+    if cx.layout_of(sig.output()).abi == layout::Abi::Uninhabited {\n         llvm::Attribute::NoReturn.apply_llfn(Function, llfn);\n     }\n "}, {"sha": "7239223ca2019d032b2faa749bdf851f61843a72", "filename": "src/test/codegen/noreturnflag.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/69ec4aa97c23cfc316ec340d1afcaaeb4877e8ef/src%2Ftest%2Fcodegen%2Fnoreturnflag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec4aa97c23cfc316ec340d1afcaaeb4877e8ef/src%2Ftest%2Fcodegen%2Fnoreturnflag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoreturnflag.rs?ref=69ec4aa97c23cfc316ec340d1afcaaeb4877e8ef", "patch": "@@ -8,17 +8,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -g -C no-prepopulate-passes\n // ignore-tidy-linelength\n // min-llvm-version 4.0\n \n-// compile-flags: -g -C no-prepopulate-passes\n-\n-// CHECK: {{.*}}DISubprogram{{.*}}name: \"foo\"{{.*}}DIFlagNoReturn\n+#![crate_type = \"lib\"]\n \n-fn foo() -> ! {\n+#[no_mangle]\n+pub fn foo() -> ! {\n+// CHECK: @foo() unnamed_addr #0\n     loop {}\n }\n \n-pub fn main() {\n-    foo();\n+pub enum EmptyEnum {}\n+\n+#[no_mangle]\n+pub fn bar() -> EmptyEnum {\n+// CHECK: @bar() unnamed_addr #0\n+    loop {}\n }\n+\n+// CHECK: attributes #0 = {{{.*}} noreturn {{.*}}}\n+\n+// CHECK: DISubprogram(name: \"foo\", {{.*}} DIFlagNoReturn\n+// CHECK: DISubprogram(name: \"bar\", {{.*}} DIFlagNoReturn"}]}