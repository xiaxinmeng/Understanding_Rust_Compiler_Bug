{"sha": "919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxOWVkNDA5YjBmYmI1NmJjZDZjNzBmZjUwYmZjOTI3NWM0Yjc3MDE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-17T16:22:44Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-28T02:18:32Z"}, "message": "tests: update to include move annotations in MIR.", "tree": {"sha": "6896fc02dba181ecfcada24b35eed57feb36539d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6896fc02dba181ecfcada24b35eed57feb36539d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "html_url": "https://github.com/rust-lang/rust/commit/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "170b88dc79f6ac6e06a00ded1b97395b8a2c6f7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/170b88dc79f6ac6e06a00ded1b97395b8a2c6f7a", "html_url": "https://github.com/rust-lang/rust/commit/170b88dc79f6ac6e06a00ded1b97395b8a2c6f7a"}], "stats": {"total": 256, "additions": 128, "deletions": 128}, "files": [{"sha": "a8b87a273bfd5215dcc993b4551494c448302ada", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -43,14 +43,14 @@ fn main() {\n //         StorageLive(_2);\n //         StorageLive(_3);\n //         _3 = _1;\n-//         _2 = _3;\n+//         _2 = move _3;\n //         StorageDead(_3);\n //         StorageLive(_4);\n //         _4 = std::option::Option<std::boxed::Box<u32>>::None;\n //         StorageLive(_5);\n //         StorageLive(_6);\n-//         _6 = _4;\n-//         replace(_5 <- _6) -> [return: bb1, unwind: bb5];\n+//         _6 = move _4;\n+//         replace(_5 <- move _6) -> [return: bb1, unwind: bb5];\n //     }\n //     bb1: {\n //         drop(_6) -> [return: bb6, unwind: bb4];"}, {"sha": "f4938fae6a5c9ddfca1398b01d77598328645ec8", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -46,7 +46,7 @@ impl Drop for S {\n //     }\n //\n //     bb1: {\n-//         _1 = _2;\n+//         _1 = move _2;\n //         drop(_2) -> bb4;\n //     }\n //\n@@ -61,8 +61,8 @@ impl Drop for S {\n //     bb4: {\n //         StorageDead(_2);\n //         StorageLive(_4);\n-//         _4 = _1;\n-//         _3 = const std::mem::drop(_4) -> [return: bb5, unwind: bb7];\n+//         _4 = move _1;\n+//         _3 = const std::mem::drop(move _4) -> [return: bb5, unwind: bb7];\n //     }\n //\n //     bb5: {"}, {"sha": "50d8a5154c449aa7f586180df6fb911fdc2381b8", "filename": "src/test/mir-opt/copy_propagation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -24,18 +24,18 @@ fn main() {\n //      ...\n //      _3 = _1;\n //      ...\n-//      _2 = _3;\n+//      _2 = move _3;\n //      ...\n //      _4 = _2;\n-//      _0 = _4;\n+//      _0 = move _4;\n //      ...\n //      return;\n //  }\n // END rustc.test.CopyPropagation.before.mir\n // START rustc.test.CopyPropagation.after.mir\n //  bb0: {\n //      ...\n-//      _0 = _1;\n+//      _0 = move _1;\n //      ...\n //      return;\n //  }"}, {"sha": "017fac6a6a1a7f6afaf50232230a7ed67fde8fcc", "filename": "src/test/mir-opt/copy_propagation_arg.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -43,11 +43,11 @@ fn main() {\n //     StorageLive(_2);\n //     StorageLive(_3);\n //     _3 = _1;\n-//     _2 = const dummy(_3) -> bb1;\n+//     _2 = const dummy(move _3) -> bb1;\n // }\n // bb1: {\n //     StorageDead(_3);\n-//     _1 = _2;\n+//     _1 = move _2;\n //     StorageDead(_2);\n //     _0 = ();\n //     return;\n@@ -58,11 +58,11 @@ fn main() {\n //     StorageLive(_2);\n //     nop;\n //     nop;\n-//     _2 = const dummy(_1) -> bb1;\n+//     _2 = const dummy(move _1) -> bb1;\n // }\n // bb1: {\n //     nop;\n-//     _1 = _2;\n+//     _1 = move _2;\n //     StorageDead(_2);\n //     _0 = ();\n //     return;\n@@ -72,7 +72,7 @@ fn main() {\n // bb0: {\n //     StorageLive(_3);\n //     _3 = _1;\n-//     _2 = const dummy(_3) -> bb1;\n+//     _2 = const dummy(move _3) -> bb1;\n // }\n // bb1: {\n //     StorageDead(_3);\n@@ -85,7 +85,7 @@ fn main() {\n // bb0: {\n //     nop;\n //     nop;\n-//     _2 = const dummy(_1) -> bb1;\n+//     _2 = const dummy(move _1) -> bb1;\n // }\n // bb1: {\n //     nop;\n@@ -98,7 +98,7 @@ fn main() {\n // bb0: {\n //     StorageLive(_2);\n //     _2 = _1;\n-//     _1 = _2;\n+//     _1 = move _2;\n //     StorageDead(_2);\n //     _0 = ();\n //     return;"}, {"sha": "c918bef129ad189a0144d82e228037644f9816f1", "filename": "src/test/mir-opt/deaggregator_test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -29,7 +29,7 @@ fn main() {\n //     ...\n //     _2 = _1;\n //     ...\n-//     _0 = Baz { x: _2, y: const 0f32, z: const false };\n+//     _0 = Baz { x: move _2, y: const 0f32, z: const false };\n //     ...\n //     return;\n // }\n@@ -39,7 +39,7 @@ fn main() {\n //     ...\n //     _2 = _1;\n //     ...\n-//     (_0.0: usize) = _2;\n+//     (_0.0: usize) = move _2;\n //     (_0.1: f32) = const 0f32;\n //     (_0.2: bool) = const false;\n //     ..."}, {"sha": "8af56b7c011734511d5ca24695a4ae6073c2232d", "filename": "src/test/mir-opt/deaggregator_test_enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -30,7 +30,7 @@ fn main() {\n // bb0: {\n //     StorageLive(_2);\n //     _2 = _1;\n-//     _0 = Baz::Foo { x: _2 };\n+//     _0 = Baz::Foo { x: move _2 };\n //     StorageDead(_2);\n //     return;\n // }\n@@ -39,7 +39,7 @@ fn main() {\n // bb0: {\n //     StorageLive(_2);\n //     _2 = _1;\n-//     ((_0 as Foo).0: usize) = _2;\n+//     ((_0 as Foo).0: usize) = move _2;\n //     discriminant(_0) = 1;\n //     StorageDead(_2);\n //     return;"}, {"sha": "b6505de22f3b6cf0679b1346538313b5f9fbb91f", "filename": "src/test/mir-opt/deaggregator_test_enum_2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -33,14 +33,14 @@ fn main() {\n //  bb1: {\n //      StorageLive(_4);\n //      _4 = _2;\n-//      _0 = Foo::A(_4,);\n+//      _0 = Foo::A(move _4,);\n //      StorageDead(_4);\n //      goto -> bb3;\n //  }\n //  bb2: {\n //      StorageLive(_5);\n //      _5 = _2;\n-//      _0 = Foo::B(_5,);\n+//      _0 = Foo::B(move _5,);\n //      StorageDead(_5);\n //      goto -> bb3;\n //  }\n@@ -49,15 +49,15 @@ fn main() {\n //  bb1: {\n //      StorageLive(_4);\n //      _4 = _2;\n-//      ((_0 as A).0: i32) = _4;\n+//      ((_0 as A).0: i32) = move _4;\n //      discriminant(_0) = 0;\n //      StorageDead(_4);\n //      goto -> bb3;\n //  }\n //  bb2: {\n //      StorageLive(_5);\n //      _5 = _2;\n-//      ((_0 as B).0: i32) = _5;\n+//      ((_0 as B).0: i32) = move _5;\n //      discriminant(_0) = 1;\n //      StorageDead(_5);\n //      goto -> bb3;"}, {"sha": "3a9a458fd464dad545d92a96f84334019906bd45", "filename": "src/test/mir-opt/deaggregator_test_multiple.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -30,12 +30,12 @@ fn main() {\n //     ...\n //     _3 = _1;\n //     ...\n-//     _2 = Foo::A(_3,);\n+//     _2 = Foo::A(move _3,);\n //     ...\n //     _5 = _1;\n-//     _4 = Foo::A(_5,);\n+//     _4 = Foo::A(move _5,);\n //     ...\n-//     _0 = [_2, _4];\n+//     _0 = [move _2, move _4];\n //     ...\n //     return;\n // }\n@@ -45,14 +45,14 @@ fn main() {\n //     ...\n //     _3 = _1;\n //     ...\n-//     ((_2 as A).0: i32) = _3;\n+//     ((_2 as A).0: i32) = move _3;\n //     discriminant(_2) = 0;\n //     ...\n //     _5 = _1;\n-//     ((_4 as A).0: i32) = _5;\n+//     ((_4 as A).0: i32) = move _5;\n //     discriminant(_4) = 0;\n //     ...\n-//     _0 = [_2, _4];\n+//     _0 = [move _2, move _4];\n //     ...\n //     return;\n // }"}, {"sha": "56c3e2a38a0ed9a6936a130d530faf937b306879", "filename": "src/test/mir-opt/end_region_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_2.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -46,7 +46,7 @@ fn main() {\n //         _3 = &'23_1rs _2;\n //         StorageLive(_5);\n //         _5 = _2;\n-//         switchInt(_5) -> [0u8: bb3, otherwise: bb2];\n+//         switchInt(move _5) -> [0u8: bb3, otherwise: bb2];\n //     }\n //     bb2: {\n //         _0 = ();"}, {"sha": "8c0d56eba782806a19f0318a682ebdb111968da1", "filename": "src/test/mir-opt/end_region_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_3.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -48,7 +48,7 @@ fn main() {\n //         _3 = &'26_1rs _1;\n //         StorageLive(_5);\n //         _5 = _1;\n-//         switchInt(_5) -> [0u8: bb3, otherwise: bb2];\n+//         switchInt(move _5) -> [0u8: bb3, otherwise: bb2];\n //     }\n //     bb2: {\n //         _0 = ();"}, {"sha": "d9456ef1563d328970eb3c16dffad09d9d66ee59", "filename": "src/test/mir-opt/end_region_4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_4.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -51,7 +51,7 @@ fn foo(i: i32) {\n //         _3 = &'26_2rs _2;\n //         StorageLive(_5);\n //         _5 = (*_3);\n-//         _4 = const foo(_5) -> [return: bb1, unwind: bb3];\n+//         _4 = const foo(move _5) -> [return: bb1, unwind: bb3];\n //     }\n //     bb1: {\n //         StorageDead(_5);"}, {"sha": "c2ee2d62b98e80a4aec597af1e21d0e7cc6dc571", "filename": "src/test/mir-opt/end_region_5.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_5.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -41,9 +41,9 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         _4 = &'14s _1;\n-//         _3 = [closure@NodeId(18)] { d: _4 };\n+//         _3 = [closure@NodeId(18)] { d: move _4 };\n //         StorageDead(_4);\n-//         _2 = const foo(_3) -> [return: bb1, unwind: bb3];\n+//         _2 = const foo(move _3) -> [return: bb1, unwind: bb3];\n //     }\n //     bb1: {\n //         EndRegion('14s);\n@@ -73,7 +73,7 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //    bb0: {\n //        StorageLive(_2);\n //        _2 = ((*(_1.0: &'14s D)).0: i32);\n-//        _0 = _2;\n+//        _0 = move _2;\n //        StorageDead(_2);\n //        return;\n //    }"}, {"sha": "34675e8842f4c2641a4e4a5d6587087f4c0c4813", "filename": "src/test/mir-opt/end_region_6.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_6.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -41,9 +41,9 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         _4 = &'19s _1;\n-//         _3 = [closure@NodeId(22)] { d: _4 };\n+//         _3 = [closure@NodeId(22)] { d: move _4 };\n //         StorageDead(_4);\n-//         _2 = const foo(_3) -> [return: bb1, unwind: bb3];\n+//         _2 = const foo(move _3) -> [return: bb1, unwind: bb3];\n //     }\n //     bb1: {\n //         EndRegion('19s);\n@@ -76,7 +76,7 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         _2 = &'15_0rs (*(_1.0: &'19s D));\n //         StorageLive(_3);\n //         _3 = ((*_2).0: i32);\n-//         _0 = _3;\n+//         _0 = move _3;\n //         StorageDead(_3);\n //         EndRegion('15_0rs);\n //         StorageDead(_2);"}, {"sha": "a9b6d2196fc7eaab4d989f00c07be289d9dfa0f7", "filename": "src/test/mir-opt/end_region_7.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_7.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -40,8 +40,8 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         _1 = D::{{constructor}}(const 0i32,);\n //         StorageLive(_3);\n //         StorageLive(_4);\n-//         _4 = _1;\n-//         _3 = [closure@NodeId(22)] { d: _4 };\n+//         _4 = move _1;\n+//         _3 = [closure@NodeId(22)] { d: move _4 };\n //         drop(_4) -> [return: bb4, unwind: bb3];\n //     }\n //     bb1: {\n@@ -55,7 +55,7 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     }\n //     bb4: {\n //         StorageDead(_4);\n-//         _2 = const foo(_3) -> [return: bb5, unwind: bb3];\n+//         _2 = const foo(move _3) -> [return: bb5, unwind: bb3];\n //     }\n //     bb5: {\n //         drop(_3) -> [return: bb6, unwind: bb2];\n@@ -84,7 +84,7 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         _2 = &'15_0rs (_1.0: D);\n //         StorageLive(_3);\n //         _3 = ((*_2).0: i32);\n-//         _0 = _3;\n+//         _0 = move _3;\n //         StorageDead(_3);\n //         EndRegion('15_0rs);\n //         StorageDead(_2);"}, {"sha": "4c1ec4b10262916a3301910ab16979e11f696290", "filename": "src/test/mir-opt/end_region_8.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_8.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -46,9 +46,9 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //        StorageLive(_4);\n //        StorageLive(_5);\n //        _5 = _2;\n-//        _4 = [closure@NodeId(22)] { r: _5 };\n+//        _4 = [closure@NodeId(22)] { r: move _5 };\n //        StorageDead(_5);\n-//        _3 = const foo(_4) -> [return: bb1, unwind: bb3];\n+//        _3 = const foo(move _4) -> [return: bb1, unwind: bb3];\n //    }\n //    bb1: {\n //        StorageDead(_4);\n@@ -79,7 +79,7 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     bb0: {\n //         StorageLive(_2);\n //         _2 = ((*(_1.0: &'21_1rs D)).0: i32);\n-//         _0 = _2;\n+//         _0 = move _2;\n //         StorageDead(_2);\n //         return;\n //     }"}, {"sha": "b313e296ac99ce429a79f89126dc324aa50e1cde", "filename": "src/test/mir-opt/end_region_9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_9.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -64,7 +64,7 @@ fn main() {\n //    bb1: {\n //        StorageLive(_7);\n //        _7 = _1;\n-//        switchInt(_7) -> [0u8: bb3, otherwise: bb2];\n+//        switchInt(move _7) -> [0u8: bb3, otherwise: bb2];\n //    }\n //    bb2: {\n //        _0 = ();"}, {"sha": "b8dabada18eabfafaf973a2e31520e0824e56599", "filename": "src/test/mir-opt/end_region_cyclic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -70,11 +70,11 @@ fn query() -> bool { true }\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         _4 = std::option::Option<&'35_0rs S<'35_0rs>>::None;\n-//         _3 = const <std::cell::Cell<T>>::new(_4) -> bb2;\n+//         _3 = const <std::cell::Cell<T>>::new(move _4) -> bb2;\n //     }\n //     bb2: {\n //         StorageDead(_4);\n-//         _2 = S<'35_0rs> { r: _3 };\n+//         _2 = S<'35_0rs> { r: move _3 };\n //         StorageDead(_3);\n //         StorageLive(_6);\n //         _6 = &'16s (_2.0: std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>);\n@@ -83,9 +83,9 @@ fn query() -> bool { true }\n //         StorageLive(_9);\n //         _9 = &'35_0rs _2;\n //         _8 = &'35_0rs (*_9);\n-//         _7 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(_8,);\n+//         _7 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(move _8,);\n //         StorageDead(_8);\n-//         _5 = const <std::cell::Cell<T>>::set(_6, _7) -> bb3;\n+//         _5 = const <std::cell::Cell<T>>::set(move _6, move _7) -> bb3;\n //     }\n //     bb3: {\n //         EndRegion('16s);\n@@ -96,7 +96,7 @@ fn query() -> bool { true }\n //         _11 = const query() -> bb4;\n //     }\n //     bb4: {\n-//         switchInt(_11) -> [0u8: bb6, otherwise: bb5];\n+//         switchInt(move _11) -> [0u8: bb6, otherwise: bb5];\n //     }\n //     bb5: {\n //         _0 = ();\n@@ -115,9 +115,9 @@ fn query() -> bool { true }\n //         StorageLive(_17);\n //         _17 = &'35_0rs _2;\n //         _16 = &'35_0rs (*_17);\n-//         _15 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(_16,);\n+//         _15 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(move _16,);\n //         StorageDead(_16);\n-//         _13 = const <std::cell::Cell<T>>::set(_14, _15) -> bb7;\n+//         _13 = const <std::cell::Cell<T>>::set(move _14, move_15) -> bb7;\n //     }\n //     bb7: {\n //         EndRegion('33s);"}, {"sha": "aebe0a1ff6a91b7a527b94b3a9c5d0b58e33513a", "filename": "src/test/mir-opt/end_region_destruction_extents_1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -92,12 +92,12 @@ unsafe impl<'a, #[may_dangle] 'b> Drop for D1<'a, 'b> {\n //         _9 = S1::{{constructor}}(const \"dang1\",);\n //         _8 = &'10s _9;\n //         _7 = &'10s (*_8);\n-//         _3 = D1<'12ds, '10s>::{{constructor}}(_4, _7);\n+//         _3 = D1<'12ds, '10s>::{{constructor}}(move _4, move _7);\n //         EndRegion('10s);\n //         StorageDead(_7);\n //         StorageDead(_4);\n //         _2 = (_3.0: &'12ds S1);\n-//         _1 = _2;\n+//         _1 = move _2;\n //         StorageDead(_2);\n //         drop(_3) -> bb1;\n //     }\n@@ -139,12 +139,12 @@ unsafe impl<'a, #[may_dangle] 'b> Drop for D1<'a, 'b> {\n //         StorageLive(_8);\n //         _8 = promoted[0];\n //         _7 = &'10s (*_8);\n-//         _3 = D1<'12ds, '10s>::{{constructor}}(_4, _7);\n+//         _3 = D1<'12ds, '10s>::{{constructor}}(move _4, move _7);\n //         EndRegion('10s);\n //         StorageDead(_7);\n //         StorageDead(_4);\n //         _2 = (_3.0: &'12ds S1);\n-//         _1 = _2;\n+//         _1 = move _2;\n //         StorageDead(_2);\n //         drop(_3) -> bb1;\n //     }"}, {"sha": "3fb54f90984ddc71d38318d72fb25fc6015c2012", "filename": "src/test/mir-opt/inline-closure-borrows-arg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -37,12 +37,12 @@ fn foo<T: Copy>(_t: T, q: &i32) -> i32 {\n //     _6 = &(*_2);\n //     ...\n //     _7 = &(*_2);\n-//     _5 = (_6, _7);\n-//     _9 = (_5.0: &i32);\n-//     _10 = (_5.1: &i32);\n+//     _5 = (move _6, move _7);\n+//     _9 = move (_5.0: &i32);\n+//     _10 = move (_5.1: &i32);\n //     StorageLive(_8);\n //     _8 = (*_9);\n-//     _0 = _8;\n+//     _0 = move _8;\n //     ...\n //     return;\n // }"}, {"sha": "dc8ff13c03a88806865a4dee0db13c84498666d4", "filename": "src/test/mir-opt/inline-closure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -33,10 +33,10 @@ fn foo<T: Copy>(_t: T, q: i32) -> i32 {\n //     _6 = _2;\n //     ...\n //     _7 = _2;\n-//     _5 = (_6, _7);\n-//     _8 = (_5.0: i32);\n-//     _9 = (_5.1: i32);\n-//     _0 = _8;\n+//     _5 = (move _6, move _7);\n+//     _8 = move (_5.0: i32);\n+//     _9 = move (_5.1: i32);\n+//     _0 = move _8;\n //     ...\n //     return;\n // }"}, {"sha": "b5c188cf834a9eec6c80063c9497db8ef129a756", "filename": "src/test/mir-opt/issue-38669.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-38669.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -31,7 +31,7 @@ fn main() {\n //     bb1: {\n //         StorageLive(_4);\n //         _4 = _1;\n-//         switchInt(_4) -> [0u8: bb3, otherwise: bb2];\n+//         switchInt(move _4) -> [0u8: bb3, otherwise: bb2];\n //     }\n //\n //     bb2: {"}, {"sha": "134a868f933fbeaf343fd38629640bda35a21769", "filename": "src/test/mir-opt/lower_128bit_debug_test.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -75,71 +75,71 @@ fn main() {\n // START rustc.test_signed.Lower128Bit.after.mir\n //     _2 = const i128_addo(_1, const 1i128) -> bb10;\n //     ...\n-//     _1 = (_2.0: i128);\n+//     _1 = move (_2.0: i128);\n //     _3 = const i128_subo(_1, const 2i128) -> bb11;\n //     ...\n-//     _1 = (_3.0: i128);\n+//     _1 = move (_3.0: i128);\n //     _4 = const i128_mulo(_1, const 3i128) -> bb12;\n //     ...\n-//     _1 = (_4.0: i128);\n+//     _1 = move (_4.0: i128);\n //     ...\n //     _1 = const i128_div(_1, const 4i128) -> bb13;\n //     ...\n //     _1 = const i128_rem(_1, const 5i128) -> bb15;\n //     ...\n-//     _1 = (_13.0: i128);\n+//     _1 = move (_13.0: i128);\n //     ...\n //     _17 = const 7i32 as u128 (Misc);\n-//     _14 = const i128_shro(_1, _17) -> bb16;\n+//     _14 = const i128_shro(_1, move _17) -> bb16;\n //     ...\n-//     _1 = (_14.0: i128);\n+//     _1 = move (_14.0: i128);\n //     ...\n-//     assert(!(_2.1: bool), \"attempt to add with overflow\") -> bb1;\n+//     assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1;\n //     ...\n-//     assert(!(_3.1: bool), \"attempt to subtract with overflow\") -> bb2;\n+//     assert(!move (_3.1: bool), \"attempt to subtract with overflow\") -> bb2;\n //     ...\n-//     assert(!(_4.1: bool), \"attempt to multiply with overflow\") -> bb3;\n+//     assert(!move (_4.1: bool), \"attempt to multiply with overflow\") -> bb3;\n //     ...\n-//     assert(!(_13.1: bool), \"attempt to shift left with overflow\") -> bb8;\n+//     assert(!move (_13.1: bool), \"attempt to shift left with overflow\") -> bb8;\n //     ...\n //     _16 = const 6i32 as u128 (Misc);\n-//     _13 = const i128_shlo(_1, _16) -> bb14;\n+//     _13 = const i128_shlo(_1, move _16) -> bb14;\n //     ...\n-//     assert(!(_14.1: bool), \"attempt to shift right with overflow\") -> bb9;\n+//     assert(!move (_14.1: bool), \"attempt to shift right with overflow\") -> bb9;\n // END rustc.test_signed.Lower128Bit.after.mir\n \n // START rustc.test_unsigned.Lower128Bit.after.mir\n //     _2 = const u128_addo(_1, const 1u128) -> bb8;\n //     ...\n-//     _1 = (_2.0: u128);\n+//     _1 = move (_2.0: u128);\n //     _3 = const u128_subo(_1, const 2u128) -> bb9;\n //     ...\n-//     _1 = (_3.0: u128);\n+//     _1 = move (_3.0: u128);\n //     _4 = const u128_mulo(_1, const 3u128) -> bb10;\n //     ...\n-//     _1 = (_4.0: u128);\n+//     _1 = move (_4.0: u128);\n //     ...\n //     _1 = const u128_div(_1, const 4u128) -> bb11;\n //     ...\n //     _1 = const u128_rem(_1, const 5u128) -> bb13;\n //     ...\n-//     _1 = (_7.0: u128);\n+//     _1 = move (_7.0: u128);\n //     ...\n //     _11 = const 7i32 as u128 (Misc);\n-//     _8 = const u128_shro(_1, _11) -> bb14;\n+//     _8 = const u128_shro(_1, move _11) -> bb14;\n //     ...\n-//     _1 = (_8.0: u128);\n+//     _1 = move (_8.0: u128);\n //     ...\n-//     assert(!(_2.1: bool), \"attempt to add with overflow\") -> bb1;\n+//     assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1;\n //     ...\n-//     assert(!(_3.1: bool), \"attempt to subtract with overflow\") -> bb2;\n+//     assert(!move (_3.1: bool), \"attempt to subtract with overflow\") -> bb2;\n //     ...\n-//     assert(!(_4.1: bool), \"attempt to multiply with overflow\") -> bb3;\n+//     assert(!move (_4.1: bool), \"attempt to multiply with overflow\") -> bb3;\n //     ...\n-//     assert(!(_7.1: bool), \"attempt to shift left with overflow\") -> bb6;\n+//     assert(!move (_7.1: bool), \"attempt to shift left with overflow\") -> bb6;\n //     ...\n //     _10 = const 6i32 as u128 (Misc);\n-//     _7 = const u128_shlo(_1, _10) -> bb12;\n+//     _7 = const u128_shlo(_1, move _10) -> bb12;\n //     ...\n-//     assert(!(_8.1: bool), \"attempt to shift right with overflow\") -> bb7;\n+//     assert(!move (_8.1: bool), \"attempt to shift right with overflow\") -> bb7;\n // END rustc.test_unsigned.Lower128Bit.after.mir"}, {"sha": "5de75014f0efb961aa3dae9e5cb2f196e203b2a8", "filename": "src/test/mir-opt/lower_128bit_test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -83,10 +83,10 @@ fn main() {\n //     _1 = const i128_sub(_1, const 2i128) -> bb6;\n //     ...\n //     _11 = const 7i32 as u32 (Misc);\n-//     _1 = const i128_shr(_1, _11) -> bb9;\n+//     _1 = const i128_shr(_1, move _11) -> bb9;\n //     ...\n //     _12 = const 6i32 as u32 (Misc);\n-//     _1 = const i128_shl(_1, _12) -> bb10;\n+//     _1 = const i128_shl(_1, move _12) -> bb10;\n // END rustc.test_signed.Lower128Bit.after.mir\n \n // START rustc.test_unsigned.Lower128Bit.after.mir\n@@ -101,8 +101,8 @@ fn main() {\n //     _1 = const u128_sub(_1, const 2u128) -> bb4;\n //     ...\n //     _5 = const 7i32 as u32 (Misc);\n-//     _1 = const u128_shr(_1, _5) -> bb7;\n+//     _1 = const u128_shr(_1, move _5) -> bb7;\n //     ...\n //     _6 = const 6i32 as u32 (Misc);\n-//     _1 = const u128_shl(_1, _6) -> bb8;\n+//     _1 = const u128_shl(_1, move _6) -> bb8;\n // END rustc.test_unsigned.Lower128Bit.after.mir"}, {"sha": "b0adbd6ba89e68b903dc069d30aea1673f8d52fd", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -54,12 +54,12 @@ fn main() {\n //      ...\n //      _2 = std::option::Option<i32>::Some(const 42i32,);\n //      _5 = discriminant(_2);\n-//      switchInt(_5) -> [0isize: bb5, 1isize: bb3, otherwise: bb7];\n+//      switchInt(move _5) -> [0isize: bb5, 1isize: bb3, otherwise: bb7];\n //  }\n //  bb1: { // arm1\n //      StorageLive(_7);\n //      _7 = _3;\n-//      _1 = (const 1i32, _7);\n+//      _1 = (const 1i32, move _7);\n //      StorageDead(_7);\n //      goto -> bb12;\n //  }\n@@ -89,7 +89,7 @@ fn main() {\n //      _6 = const guard() -> bb9;\n //  }\n //  bb9: { // end of guard\n-//      switchInt(_6) -> [0u8: bb10, otherwise: bb1];\n+//      switchInt(move _6) -> [0u8: bb10, otherwise: bb1];\n //  }\n //  bb10: { // to pre_binding2\n //      falseEdges -> [real: bb4, imaginary: bb4];\n@@ -99,7 +99,7 @@ fn main() {\n //      _4 = ((_2 as Some).0: i32);\n //      StorageLive(_8);\n //      _8 = _4;\n-//      _1 = (const 2i32, _8);\n+//      _1 = (const 2i32, move _8);\n //      StorageDead(_8);\n //      goto -> bb12;\n //  }\n@@ -114,12 +114,12 @@ fn main() {\n //      ...\n //      _2 = std::option::Option<i32>::Some(const 42i32,);\n //      _5 = discriminant(_2);\n-//      switchInt(_5) -> [0isize: bb4, 1isize: bb3, otherwise: bb7];\n+//      switchInt(move _5) -> [0isize: bb4, 1isize: bb3, otherwise: bb7];\n //  }\n //  bb1: { // arm1\n //      StorageLive(_7);\n //      _7 = _3;\n-//      _1 = (const 1i32, _7);\n+//      _1 = (const 1i32, move _7);\n //      StorageDead(_7);\n //      goto -> bb12;\n //  }\n@@ -149,7 +149,7 @@ fn main() {\n //      _6 = const guard() -> bb9;\n //  }\n //  bb9: { // end of guard\n-//      switchInt(_6) -> [0u8: bb10, otherwise: bb1];\n+//      switchInt(move _6) -> [0u8: bb10, otherwise: bb1];\n //  }\n //  bb10: { // to pre_binding2\n //      falseEdges -> [real: bb5, imaginary: bb4];\n@@ -159,7 +159,7 @@ fn main() {\n //      _4 = ((_2 as Some).0: i32);\n //      StorageLive(_8);\n //      _8 = _4;\n-//      _1 = (const 2i32, _8);\n+//      _1 = (const 2i32, move _8);\n //      StorageDead(_8);\n //      goto -> bb12;\n //  }\n@@ -174,7 +174,7 @@ fn main() {\n //     ...\n //     _2 = std::option::Option<i32>::Some(const 1i32,);\n //     _7 = discriminant(_2);\n-//     switchInt(_7) -> [1isize: bb3, otherwise: bb4];\n+//     switchInt(move _7) -> [1isize: bb3, otherwise: bb4];\n // }\n // bb1: { // arm1\n //      _1 = const 1i32;\n@@ -207,7 +207,7 @@ fn main() {\n //      _8 = const guard() -> bb9;\n //  }\n //  bb9: { //end of guard\n-//      switchInt(_8) -> [0u8: bb10, otherwise: bb1];\n+//      switchInt(move _8) -> [0u8: bb10, otherwise: bb1];\n //  }\n //  bb10: { // to pre_binding2\n //      falseEdges -> [real: bb4, imaginary: bb4];\n@@ -224,11 +224,11 @@ fn main() {\n //      StorageLive(_10);\n //      StorageLive(_11);\n //      _11 = _5;\n-//      _10 = const guard2(_11) -> bb13;\n+//      _10 = const guard2(move _11) -> bb13;\n //  }\n //  bb13: { // end of guard2\n //      StorageDead(_11);\n-//      switchInt(_10) -> [0u8: bb14, otherwise: bb2];\n+//      switchInt(move _10) -> [0u8: bb14, otherwise: bb2];\n //  }\n //  bb14: { // to pre_binding4\n //      falseEdges -> [real: bb6, imaginary: bb6];"}, {"sha": "3e86677956f0bea0689065e7c5f36446eae7b4f6", "filename": "src/test/mir-opt/nll/liveness-drop-intra-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -36,6 +36,6 @@ fn main() {\n //            | Live variables at bb1[3]: [_1]\n //        _4 = _1;\n //            | Live variables at bb1[4]: [_4]\n-//        _3 = const use_x(_4) -> bb2;\n+//        _3 = const use_x(move _4) -> bb2;\n //    }\n // END rustc.main.nll.0.mir"}, {"sha": "32a38a5cd5e359b5283560a65a0bb73eea50b127", "filename": "src/test/mir-opt/nll/liveness-interblock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-interblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-interblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-interblock.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -36,7 +36,7 @@ fn main() {\n //             | Live variables at bb2[1]: [_1]\n //         _4 = _1;\n //             | Live variables at bb2[2]: [_4]\n-//         _3 = const make_live(_4) -> bb4;\n+//         _3 = const make_live(move _4) -> bb4;\n //     }\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir"}, {"sha": "3aba3ac86aea4efb25b36bceb7fed8909fef8cfc", "filename": "src/test/mir-opt/nll/region-liveness-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -51,6 +51,6 @@ fn main() {\n //            | Live variables at bb2[1]: [_2]\n //        _7 = (*_2);\n //            | Live variables at bb2[2]: [_7]\n-//        _6 = const use_x(_7) -> bb4;\n+//        _6 = const use_x(move _7) -> bb4;\n //    }\n // END rustc.main.nll.0.mir"}, {"sha": "3570107673052d134fcb73a05fa82555837ec537", "filename": "src/test/mir-opt/nll/region-subtyping-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -45,5 +45,5 @@ fn main() {\n // ...\n // _7 = _2;\n // ...\n-// _6 = _7;\n+// _6 = move _7;\n // END rustc.main.nll.0.mir"}, {"sha": "dc36248811ee5fcb924e0befb4c67064481ee06d", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -40,10 +40,10 @@ impl Drop for Droppy {\n //     bb0: {\n //         StorageLive(_1);\n //         ...\n-//         _1 = Packed::{{constructor}}(_2,);\n+//         _1 = Packed::{{constructor}}(move _2,);\n //         ...\n //         StorageLive(_6);\n-//         _6 = (_1.0: Aligned);\n+//         _6 = move (_1.0: Aligned);\n //         drop(_6) -> [return: bb4, unwind: bb3];\n //     }\n //     bb1: {\n@@ -54,12 +54,12 @@ impl Drop for Droppy {\n //         return;\n //     }\n //     bb3: {\n-//         (_1.0: Aligned) = _4;\n+//         (_1.0: Aligned) = move _4;\n //         drop(_1) -> bb1;\n //     }\n //     bb4: {\n //         StorageDead(_6);\n-//         (_1.0: Aligned) = _4;\n+//         (_1.0: Aligned) = move _4;\n //         StorageDead(_4);\n //         _0 = ();\n //         drop(_1) -> bb2;"}, {"sha": "730ef655b13d0ee6311a491774a855249a0631e7", "filename": "src/test/mir-opt/storage_live_dead_in_statics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -185,11 +185,11 @@ fn main() {\n //        _47 = (const 0u32, const 2u32);\n //        StorageLive(_48);\n //        _48 = (const 0u32, const 3u32);\n-//        _6 = [_7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48];\n+//        _6 = [move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25, move _26, move _27, move _28, move _29, move _30, move _31, move _32, move _33, move _34, move _35, move _36, move _37, move _38, move _39, move _40, move _41, move _42, move _43, move _44, move _45, move _46, move _47, move _48];\n //        _5 = &_6;\n //        _4 = &(*_5);\n-//        _3 = _4 as &'static [(u32, u32)] (Unsize);\n-//        _2 = Foo { tup: const \"hi\", data: _3 };\n+//        _3 = move _4 as &'static [(u32, u32)] (Unsize);\n+//        _2 = Foo { tup: const \"hi\", data: move _3 };\n //        _1 = &_2;\n //        _0 = &(*_1);\n //        StorageDead(_1);"}, {"sha": "41eaf67d292a616aad60032ff876ad4681a5b256", "filename": "src/test/mir-opt/storage_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -27,7 +27,7 @@ fn main() {\n //         StorageLive(_4);\n //         StorageLive(_5);\n //         _5 = _1;\n-//         _4 = std::option::Option<i32>::Some(_5,);\n+//         _4 = std::option::Option<i32>::Some(move _5,);\n //         StorageDead(_5);\n //         _3 = &_4;\n //         _2 = ();"}, {"sha": "e6cd535500055f1bac85ef56e3ef6f9f9c9eb7c2", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -47,7 +47,7 @@ fn main() {\n //         _5 = &ReErased mut (*_6);\n //         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(10)))]);\n //         Validate(Release, [_2: (), _3: &ReScope(Node(ItemLocalId(10))) Test, _5: &ReScope(Node(ItemLocalId(10))) mut i32]);\n-//         _2 = const Test::foo(_3, _5) -> bb1;\n+//         _2 = const Test::foo(move _3, move _5) -> bb1;\n //     }\n //\n //     bb1: {\n@@ -69,7 +69,7 @@ fn main() {\n //         Validate(Acquire, [(*_3): i32/ReScope(Remainder(BlockRemainder { block: ItemLocalId(22), first_statement_index: 0 })) (imm)]);\n //         StorageLive(_4);\n //         _4 = (*_3);\n-//         _0 = _4;\n+//         _0 = move _4;\n //         StorageDead(_4);\n //         EndRegion(ReScope(Remainder(BlockRemainder { block: ItemLocalId(22), first_statement_index: 0 })));\n //         StorageDead(_3);"}, {"sha": "5b8ba4d8d06321a36606f24a3832eee41377faac", "filename": "src/test/mir-opt/validate_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -22,7 +22,7 @@ fn main() {\n //     bb1: {\n //         Validate(Acquire, [_2: std::boxed::Box<[i32; 3]>]);\n //         Validate(Release, [_2: std::boxed::Box<[i32; 3]>]);\n-//         _1 = _2 as std::boxed::Box<[i32]> (Unsize);\n+//         _1 = move _2 as std::boxed::Box<[i32]> (Unsize);\n //         Validate(Acquire, [_1: std::boxed::Box<[i32]>]);\n //         StorageDead(_2);\n //         StorageDead(_3);"}, {"sha": "80e75fcee8ac42aa99bcf24b3ef64d34391f8a88", "filename": "src/test/mir-opt/validate_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -48,7 +48,7 @@ fn main() {\n //         _4 = &ReErased (*_5);\n //         Validate(Acquire, [(*_4): i32/ReScope(Node(ItemLocalId(17))) (imm)]);\n //         Validate(Release, [_3: (), _4: &ReScope(Node(ItemLocalId(17))) i32]);\n-//         _3 = const foo(_4) -> bb1;\n+//         _3 = const foo(move _4) -> bb1;\n //     }\n //     bb1: {\n //         Validate(Acquire, [_3: ()]);"}, {"sha": "fb0c8871d8384936af2723a0a6f28f74c9c99bcf", "filename": "src/test/mir-opt/validate_4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -65,7 +65,7 @@ fn main() {\n //         Validate(Acquire, [_1: &ReFree(DefId(0/0:4 ~ validate_4[317d]::test[0]), BrAnon(0)) mut i32]);\n //         Validate(Release, [_1: &ReFree(DefId(0/0:4 ~ validate_4[317d]::test[0]), BrAnon(0)) mut i32]);\n //         ...\n-//         _2 = const write_42(_3) -> bb1;\n+//         _2 = const write_42(move _3) -> bb1;\n //     }\n //     bb1: {\n //         Validate(Acquire, [_2: bool]);\n@@ -82,7 +82,7 @@ fn main() {\n //         Validate(Release, [_1: &ReFree(DefId(0/1:10 ~ validate_4[317d]::main[0]::{{closure}}[0]), BrEnv) [closure@NodeId(60)], _2: &ReFree(DefId(0/1:10 ~ validate_4[317d]::main[0]::{{closure}}[0]), BrAnon(0)) mut i32]);\n //         StorageLive(_3);\n //         ...\n-//         _0 = const write_42(_3) -> bb1;\n+//         _0 = const write_42(move _3) -> bb1;\n //     }\n //     ...\n // }"}, {"sha": "c9408c1f2f88b5de1392912e0341ec1b81b10cd0", "filename": "src/test/mir-opt/validate_5.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919ed409b0fbb56bcd6c70ff50bfc9275c4b7701/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=919ed409b0fbb56bcd6c70ff50bfc9275c4b7701", "patch": "@@ -40,7 +40,7 @@ fn main() {\n //         Validate(Acquire, [_1: &ReFree(DefId(0/0:4 ~ validate_5[317d]::test[0]), BrAnon(0)) mut i32]);\n //         ...\n //         Validate(Release, [_2: bool, _3: *mut i32]);\n-//         _2 = const write_42(_3) -> bb1;\n+//         _2 = const write_42(move _3) -> bb1;\n //     }\n //     ...\n // }\n@@ -55,11 +55,11 @@ fn main() {\n //         Validate(Suspend(ReScope(Node(ItemLocalId(9)))), [(*_2): i32]);\n //         _4 = &ReErased mut (*_2);\n //         Validate(Acquire, [(*_4): i32/ReScope(Node(ItemLocalId(9)))]);\n-//         _3 = _4 as *mut i32 (Misc);\n+//         _3 = move _4 as *mut i32 (Misc);\n //         EndRegion(ReScope(Node(ItemLocalId(9))));\n //         StorageDead(_4);\n //         Validate(Release, [_0: bool, _3: *mut i32]);\n-//         _0 = const write_42(_3) -> bb1;\n+//         _0 = const write_42(move _3) -> bb1;\n //     }\n //     ...\n // }"}]}