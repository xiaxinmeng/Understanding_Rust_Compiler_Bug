{"sha": "563f6d8218cf15bf2590507c38ce4cbb734d6bba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2M2Y2ZDgyMThjZjE1YmYyNTkwNTA3YzM4Y2U0Y2JiNzM0ZDZiYmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:56:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:56:45Z"}, "message": "rollup merge of #20608: nikomatsakis/assoc-types-method-dispatch", "tree": {"sha": "c18bf93643d9e947df78e9a4bcd12d7b303d99d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c18bf93643d9e947df78e9a4bcd12d7b303d99d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/563f6d8218cf15bf2590507c38ce4cbb734d6bba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/563f6d8218cf15bf2590507c38ce4cbb734d6bba", "html_url": "https://github.com/rust-lang/rust/commit/563f6d8218cf15bf2590507c38ce4cbb734d6bba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/563f6d8218cf15bf2590507c38ce4cbb734d6bba/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "384e21878904ad1f139d9452c122b10a28a3c28c", "url": "https://api.github.com/repos/rust-lang/rust/commits/384e21878904ad1f139d9452c122b10a28a3c28c", "html_url": "https://github.com/rust-lang/rust/commit/384e21878904ad1f139d9452c122b10a28a3c28c"}, {"sha": "e58f1bdc03b775e6d42f23f0cd181b47241bce41", "url": "https://api.github.com/repos/rust-lang/rust/commits/e58f1bdc03b775e6d42f23f0cd181b47241bce41", "html_url": "https://github.com/rust-lang/rust/commit/e58f1bdc03b775e6d42f23f0cd181b47241bce41"}], "stats": {"total": 166, "additions": 153, "deletions": 13}, "files": [{"sha": "115711ae92b297f75360699e7c29198173370d81", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/563f6d8218cf15bf2590507c38ce4cbb734d6bba/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563f6d8218cf15bf2590507c38ce4cbb734d6bba/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=563f6d8218cf15bf2590507c38ce4cbb734d6bba", "patch": "@@ -442,7 +442,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n \n     fn assemble_extension_candidates_for_trait(&mut self,\n                                                trait_def_id: ast::DefId) {\n-        debug!(\"assemble_extension_candidates_for_trait: trait_def_id={}\",\n+        debug!(\"assemble_extension_candidates_for_trait(trait_def_id={})\",\n                trait_def_id.repr(self.tcx()));\n \n         // Check whether `trait_def_id` defines a method with suitable name:\n@@ -471,8 +471,12 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                                                            matching_index);\n \n         self.assemble_unboxed_closure_candidates(trait_def_id,\n-                                                 method,\n+                                                 method.clone(),\n                                                  matching_index);\n+\n+        self.assemble_where_clause_candidates(trait_def_id,\n+                                              method,\n+                                              matching_index);\n     }\n \n     fn assemble_extension_candidates_for_trait_impls(&mut self,\n@@ -599,6 +603,35 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         }\n     }\n \n+    fn assemble_where_clause_candidates(&mut self,\n+                                        trait_def_id: ast::DefId,\n+                                        method_ty: Rc<ty::Method<'tcx>>,\n+                                        method_index: uint)\n+    {\n+        debug!(\"assemble_where_clause_candidates(trait_def_id={})\",\n+               trait_def_id.repr(self.tcx()));\n+\n+        // Check whether there are any where-clauses pertaining to this trait.\n+        let caller_predicates =\n+            self.fcx.inh.param_env.caller_bounds.predicates.as_slice().to_vec();\n+        for bound in traits::elaborate_predicates(self.tcx(), caller_predicates)\n+                     .filter_map(|p| p.to_opt_poly_trait_ref())\n+                     .filter(|b| b.def_id() == trait_def_id)\n+        {\n+            let xform_self_ty = self.xform_self_ty(&method_ty, bound.substs());\n+\n+            debug!(\"assemble_where_clause_candidates: bound={} xform_self_ty={}\",\n+                   bound.repr(self.tcx()),\n+                   xform_self_ty.repr(self.tcx()));\n+\n+            self.extension_candidates.push(Candidate {\n+                xform_self_ty: xform_self_ty,\n+                method_ty: method_ty.clone(),\n+                kind: WhereClauseCandidate(bound, method_index)\n+            });\n+        }\n+    }\n+\n     ///////////////////////////////////////////////////////////////////////////\n     // THE ACTUAL SEARCH\n \n@@ -774,26 +807,26 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             match probe.kind {\n                 InherentImplCandidate(impl_def_id, ref substs) |\n                 ExtensionImplCandidate(impl_def_id, _, ref substs, _) => {\n+                    let selcx = &mut traits::SelectionContext::new(self.infcx(), self.fcx);\n+                    let cause = traits::ObligationCause::misc(self.span, self.fcx.body_id);\n+\n                     // Check whether the impl imposes obligations we have to worry about.\n                     let impl_generics = ty::lookup_item_type(self.tcx(), impl_def_id).generics;\n                     let impl_bounds = impl_generics.to_bounds(self.tcx(), substs);\n-                    // FIXME(#20378) assoc type normalization here?\n-\n-                    // Erase any late-bound regions bound in the impl\n-                    // which appear in the bounds.\n-                    let impl_bounds = self.erase_late_bound_regions(&ty::Binder(impl_bounds));\n+                    let traits::Normalized { value: impl_bounds,\n+                                             obligations: norm_obligations } =\n+                        traits::normalize(selcx, cause.clone(), &impl_bounds);\n \n                     // Convert the bounds into obligations.\n                     let obligations =\n-                        traits::predicates_for_generics(\n-                            self.tcx(),\n-                            traits::ObligationCause::misc(self.span, self.fcx.body_id),\n-                            &impl_bounds);\n+                        traits::predicates_for_generics(self.tcx(),\n+                                                        cause.clone(),\n+                                                        &impl_bounds);\n                     debug!(\"impl_obligations={}\", obligations.repr(self.tcx()));\n \n                     // Evaluate those obligations to see if they might possibly hold.\n-                    let mut selcx = traits::SelectionContext::new(self.infcx(), self.fcx);\n-                    obligations.all(|o| selcx.evaluate_obligation(o))\n+                    obligations.all(|o| selcx.evaluate_obligation(o)) &&\n+                        norm_obligations.iter().all(|o| selcx.evaluate_obligation(o))\n                 }\n \n                 ObjectCandidate(..) |"}, {"sha": "73489948da5dee533eca22d7ada0e4347e80c758", "filename": "src/test/run-pass/method-normalize-bounds-issue-20604.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/563f6d8218cf15bf2590507c38ce4cbb734d6bba/src%2Ftest%2Frun-pass%2Fmethod-normalize-bounds-issue-20604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563f6d8218cf15bf2590507c38ce4cbb734d6bba/src%2Ftest%2Frun-pass%2Fmethod-normalize-bounds-issue-20604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-normalize-bounds-issue-20604.rs?ref=563f6d8218cf15bf2590507c38ce4cbb734d6bba", "patch": "@@ -0,0 +1,65 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we handle projection types which wind up important for\n+// resolving methods. This test was reduced from a larger example; the\n+// call to `foo()` at the end was failing to resolve because the\n+// winnowing stage of method resolution failed to handle an associated\n+// type projection.\n+\n+#![feature(associated_types)]\n+\n+trait Hasher {\n+    type Output;\n+    fn finish(&self) -> Self::Output;\n+}\n+\n+trait Hash<H: Hasher> {\n+    fn hash(&self, h: &mut H);\n+}\n+\n+trait HashState {\n+    type Wut: Hasher;\n+    fn hasher(&self) -> Self::Wut;\n+}\n+\n+struct SipHasher;\n+impl Hasher for SipHasher {\n+    type Output = u64;\n+    fn finish(&self) -> u64 { 4 }\n+}\n+\n+impl Hash<SipHasher> for int {\n+    fn hash(&self, h: &mut SipHasher) {}\n+}\n+\n+struct SipState;\n+impl HashState for SipState {\n+    type Wut = SipHasher;\n+    fn hasher(&self) -> SipHasher { SipHasher }\n+}\n+\n+struct Map<S> {\n+    s: S,\n+}\n+\n+impl<S> Map<S>\n+    where S: HashState,\n+          <S as HashState>::Wut: Hasher<Output=u64>,\n+{\n+    fn foo<K>(&self, k: K) where K: Hash< <S as HashState>::Wut> {}\n+}\n+\n+fn foo<K: Hash<SipHasher>>(map: &Map<SipState>) {\n+    map.foo(22);\n+}\n+\n+fn main() {}\n+"}, {"sha": "4361c22f55a8a00b2681419d3b6bba808ac52b4f", "filename": "src/test/run-pass/method-where-clause.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/563f6d8218cf15bf2590507c38ce4cbb734d6bba/src%2Ftest%2Frun-pass%2Fmethod-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563f6d8218cf15bf2590507c38ce4cbb734d6bba/src%2Ftest%2Frun-pass%2Fmethod-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-where-clause.rs?ref=563f6d8218cf15bf2590507c38ce4cbb734d6bba", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can use method notation to call methods based on a\n+// where clause type, and not only type parameters.\n+\n+trait Foo {\n+    fn foo(&self) -> int;\n+}\n+\n+impl Foo for Option<int>\n+{\n+    fn foo(&self) -> int {\n+        self.unwrap_or(22)\n+    }\n+}\n+\n+impl Foo for Option<uint>\n+{\n+    fn foo(&self) -> int {\n+        self.unwrap_or(22) as int\n+    }\n+}\n+\n+fn check<T>(x: Option<T>) -> (int, int)\n+    where Option<T> : Foo\n+{\n+    let y: Option<T> = None;\n+    (x.foo(), y.foo())\n+}\n+\n+fn main() {\n+    assert_eq!(check(Some(23u)), (23i, 22i));\n+    assert_eq!(check(Some(23i)), (23i, 22i));\n+}"}]}