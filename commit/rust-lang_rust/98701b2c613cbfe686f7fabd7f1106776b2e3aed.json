{"sha": "98701b2c613cbfe686f7fabd7f1106776b2e3aed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NzAxYjJjNjEzY2JmZTY4NmY3ZmFiZDdmMTEwNjc3NmIyZTNhZWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-06T23:04:46Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T12:44:02Z"}, "message": "extract parse_index_expr & refactor parse_dot_suffix", "tree": {"sha": "117653eede964eda3180758d03c276b3e58c0b5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/117653eede964eda3180758d03c276b3e58c0b5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98701b2c613cbfe686f7fabd7f1106776b2e3aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98701b2c613cbfe686f7fabd7f1106776b2e3aed", "html_url": "https://github.com/rust-lang/rust/commit/98701b2c613cbfe686f7fabd7f1106776b2e3aed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98701b2c613cbfe686f7fabd7f1106776b2e3aed/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bb3dad5a63826f8497ca69fd846ca53b5f08a69", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb3dad5a63826f8497ca69fd846ca53b5f08a69", "html_url": "https://github.com/rust-lang/rust/commit/0bb3dad5a63826f8497ca69fd846ca53b5f08a69"}], "stats": {"total": 50, "additions": 22, "deletions": 28}, "files": [{"sha": "09563e680965514c520a736408f2c924a53e2730", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/98701b2c613cbfe686f7fabd7f1106776b2e3aed/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98701b2c613cbfe686f7fabd7f1106776b2e3aed/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=98701b2c613cbfe686f7fabd7f1106776b2e3aed", "patch": "@@ -694,7 +694,6 @@ impl<'a> Parser<'a> {\n \n     fn parse_dot_or_call_expr_with_(&mut self, e0: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n         let mut e = e0;\n-        let mut hi;\n         loop {\n             // expr?\n             while self.eat(&token::Question) {\n@@ -766,23 +765,21 @@ impl<'a> Parser<'a> {\n                     });\n                     e = self.recover_seq_parse_error(token::Paren, lo, seq);\n                 }\n-\n-                // expr[...]\n-                // Could be either an index expression or a slicing expression.\n-                token::OpenDelim(token::Bracket) => {\n-                    self.bump();\n-                    let ix = self.parse_expr()?;\n-                    hi = self.token.span;\n-                    self.expect(&token::CloseDelim(token::Bracket))?;\n-                    let index = self.mk_index(e, ix);\n-                    e = self.mk_expr(lo.to(hi), index, AttrVec::new())\n-                }\n+                token::OpenDelim(token::Bracket) => e = self.parse_index_expr(lo, e)?,\n                 _ => return Ok(e),\n             }\n         }\n         return Ok(e);\n     }\n \n+    /// Parse an indexing expression `expr[...]`.\n+    fn parse_index_expr(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {\n+        self.bump(); // `[`\n+        let index = self.parse_expr()?;\n+        self.expect(&token::CloseDelim(token::Bracket))?;\n+        Ok(self.mk_expr(lo.to(self.prev_span), self.mk_index(base, index), AttrVec::new()))\n+    }\n+\n     /// Assuming we have just parsed `.`, continue parsing into an expression.\n     fn parse_dot_suffix(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n         if self.token.span.rust_2018() && self.eat_keyword(kw::Await) {\n@@ -792,25 +789,22 @@ impl<'a> Parser<'a> {\n         let segment = self.parse_path_segment(PathStyle::Expr)?;\n         self.check_trailing_angle_brackets(&segment, token::OpenDelim(token::Paren));\n \n-        Ok(match self.token.kind {\n-            token::OpenDelim(token::Paren) => {\n-                // Method call `expr.f()`\n-                let mut args = self.parse_paren_expr_seq()?;\n-                args.insert(0, self_arg);\n+        if self.check(&token::OpenDelim(token::Paren)) {\n+            // Method call `expr.f()`\n+            let mut args = self.parse_paren_expr_seq()?;\n+            args.insert(0, self_arg);\n \n-                let span = lo.to(self.prev_span);\n-                self.mk_expr(span, ExprKind::MethodCall(segment, args), AttrVec::new())\n+            let span = lo.to(self.prev_span);\n+            Ok(self.mk_expr(span, ExprKind::MethodCall(segment, args), AttrVec::new()))\n+        } else {\n+            // Field access `expr.f`\n+            if let Some(args) = segment.args {\n+                self.span_err(args.span(), \"field expressions may not have generic arguments\");\n             }\n-            _ => {\n-                // Field access `expr.f`\n-                if let Some(args) = segment.args {\n-                    self.span_err(args.span(), \"field expressions may not have generic arguments\");\n-                }\n \n-                let span = lo.to(self.prev_span);\n-                self.mk_expr(span, ExprKind::Field(self_arg, segment.ident), AttrVec::new())\n-            }\n-        })\n+            let span = lo.to(self.prev_span);\n+            Ok(self.mk_expr(span, ExprKind::Field(self_arg, segment.ident), AttrVec::new()))\n+        }\n     }\n \n     /// At the bottom (top?) of the precedence hierarchy,"}]}