{"sha": "557baf253a9ffbb8fb5e676794667b49c9c9a6d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1N2JhZjI1M2E5ZmZiYjhmYjVlNjc2Nzk0NjY3YjQ5YzljOWE2ZDM=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-14T20:52:01Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-14T20:56:20Z"}, "message": "Format code for methods lints", "tree": {"sha": "f306be9bf42ad63ea98e64138072bf3805ac09f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f306be9bf42ad63ea98e64138072bf3805ac09f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/557baf253a9ffbb8fb5e676794667b49c9c9a6d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXh/yzAAoJEF5CfHlMukXoEeIP/j+AOek65q5w2JjzDGeWNiYt\n+QNduL5eE9+d3SVwVpGtOgaCqMGWm/+mwoBvd5dHEEaYZG0uixtQkbCEsfX1yLH8\n0TWSiQRSBzVzYAil8YXzn7IdWQlbpLKheRuZyaAJ0IKOW5oZJTQVQtJLedZgBZRa\n86PG/45XvJNRToI2iQ3GrUwfwuuB6lOo5Gqn7U/faaYg5Qz3OGeXzmoCHP7MEwy6\n85o2ADlrtAEf0Yzqz9u4idtOjyNGA2c3mbm8j2Tz+DfnttI7Th+X5q1+GJu+6qdK\nE7pelp+MccUq0T9nULhSAln4dRelP8hgB1nOy61zkk9sntjCG0S3bXqLuaIHxofw\nC5NsKYOFqhYeykUwmjJp/SAg7eKvNgrli02mTGbgv5irKW3uRVOklbD47+tnujY4\nMbu/ShcgyAHz0yyGI7Mxq1KiLS477MJ0yLvJF/l77oJjSx8QUUQHKuou04ie8xc4\nmwNIrDgudfk8Cq9aaxUwOXVnLA5NKZBTs2ZDDiau7In43No4hvmCsn8dMxwjYlQk\n+TQox3KfO5y3NYkMJb0Cdobc5qjk15ux6ISecakBVMhlUFC5PV4U82Oxf2n3vwvA\nsPytF5YQES0K96S48Ee6pCz838WfqqW+5QaSbCPI0N7FXkSG3R5UyP+8AvAjfqXG\nU8vmcG80jnOLTuMQWZEH\n=+Tn2\n-----END PGP SIGNATURE-----", "payload": "tree f306be9bf42ad63ea98e64138072bf3805ac09f3\nparent b1becf41e48799c1a48f8901c8b5a8ba38b403c9\nauthor mcarton <cartonmartin+git@gmail.com> 1468529521 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1468529780 +0200\n\nFormat code for methods lints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/557baf253a9ffbb8fb5e676794667b49c9c9a6d3", "html_url": "https://github.com/rust-lang/rust/commit/557baf253a9ffbb8fb5e676794667b49c9c9a6d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/557baf253a9ffbb8fb5e676794667b49c9c9a6d3/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1becf41e48799c1a48f8901c8b5a8ba38b403c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1becf41e48799c1a48f8901c8b5a8ba38b403c9", "html_url": "https://github.com/rust-lang/rust/commit/b1becf41e48799c1a48f8901c8b5a8ba38b403c9"}], "stats": {"total": 78, "additions": 57, "deletions": 21}, "files": [{"sha": "f0fcca0af2a6c29c02663b6f26d34d5085b340d0", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 57, "deletions": 21, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/557baf253a9ffbb8fb5e676794667b49c9c9a6d3/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557baf253a9ffbb8fb5e676794667b49c9c9a6d3/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=557baf253a9ffbb8fb5e676794667b49c9c9a6d3", "patch": "@@ -26,7 +26,10 @@ pub struct Pass;\n ///\n /// **Known problems:** None\n ///\n-/// **Example:** `x.unwrap()`\n+/// **Example:**\n+/// ```rust\n+/// x.unwrap()\n+/// ```\n declare_lint! {\n     pub OPTION_UNWRAP_USED, Allow,\n     \"using `Option.unwrap()`, which should at least get a better message using `expect()`\"\n@@ -40,7 +43,10 @@ declare_lint! {\n ///\n /// **Known problems:** None\n ///\n-/// **Example:** `x.unwrap()`\n+/// **Example:**\n+/// ```rust\n+/// x.unwrap()\n+/// ```\n declare_lint! {\n     pub RESULT_UNWRAP_USED, Allow,\n     \"using `Result.unwrap()`, which might be better handled\"\n@@ -66,21 +72,21 @@ declare_lint! {\n \n /// **What it does:** This lint checks for methods with certain name prefixes and which doesn't match how self is taken. The actual rules are:\n ///\n-/// |Prefix |`self` taken        |\n-/// |-------|--------------------|\n-/// |`as_`  |`&self` or &mut self|\n-/// |`from_`| none               |\n-/// |`into_`|`self`              |\n-/// |`is_`  |`&self` or none     |\n-/// |`to_`  |`&self`             |\n+/// |Prefix |`self` taken          |\n+/// |-------|----------------------|\n+/// |`as_`  |`&self` or `&mut self`|\n+/// |`from_`| none                 |\n+/// |`into_`|`self`                |\n+/// |`is_`  |`&self` or none       |\n+/// |`to_`  |`&self`               |\n ///\n /// **Why is this bad?** Consistency breeds readability. If you follow the conventions, your users won't be surprised that they, e.g., need to supply a mutable reference to a `as_..` function.\n ///\n /// **Known problems:** None\n ///\n /// **Example**\n ///\n-/// ```\n+/// ```rust\n /// impl X {\n ///     fn as_str(self) -> &str { .. }\n /// }\n@@ -98,7 +104,7 @@ declare_lint! {\n /// **Known problems:** Actually *renaming* the function may break clients if the function is part of the public interface. In that case, be mindful of the stability guarantees you've given your users.\n ///\n /// **Example:**\n-/// ```\n+/// ```rust\n /// impl X {\n ///     pub fn as_str(self) -> &str { .. }\n /// }\n@@ -115,7 +121,10 @@ declare_lint! {\n ///\n /// **Known problems:** None.\n ///\n-/// **Example:** `x.ok().expect(\"why did I do this again?\")`\n+/// **Example:**\n+/// ```rust\n+/// x.ok().expect(\"why did I do this again?\")\n+/// ```\n declare_lint! {\n     pub OK_EXPECT, Warn,\n     \"using `ok().expect()`, which gives worse error messages than \\\n@@ -128,7 +137,10 @@ declare_lint! {\n ///\n /// **Known problems:** None.\n ///\n-/// **Example:** `x.map(|a| a + 1).unwrap_or(0)`\n+/// **Example:**\n+/// ```rust\n+/// x.map(|a| a + 1).unwrap_or(0)\n+/// ```\n declare_lint! {\n     pub OPTION_MAP_UNWRAP_OR, Warn,\n     \"using `Option.map(f).unwrap_or(a)`, which is more succinctly expressed as \\\n@@ -141,7 +153,10 @@ declare_lint! {\n ///\n /// **Known problems:** None.\n ///\n-/// **Example:** `x.map(|a| a + 1).unwrap_or_else(some_function)`\n+/// **Example:**\n+/// ```rust\n+/// x.map(|a| a + 1).unwrap_or_else(some_function)\n+/// ```\n declare_lint! {\n     pub OPTION_MAP_UNWRAP_OR_ELSE, Warn,\n     \"using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as \\\n@@ -154,7 +169,10 @@ declare_lint! {\n ///\n /// **Known problems:** None.\n ///\n-/// **Example:** `iter.filter(|x| x == 0).next()`\n+/// **Example:**\n+/// ```rust\n+/// iter.filter(|x| x == 0).next()\n+/// ```\n declare_lint! {\n     pub FILTER_NEXT, Warn,\n     \"using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\"\n@@ -166,7 +184,10 @@ declare_lint! {\n ///\n /// **Known problems:** Often requires a condition + Option/Iterator creation inside the closure\n ///\n-/// **Example:** `iter.filter(|x| x == 0).map(|x| x * 2)`\n+/// **Example:**\n+/// ```rust\n+/// iter.filter(|x| x == 0).map(|x| x * 2)\n+/// ```\n declare_lint! {\n     pub FILTER_MAP, Allow,\n     \"using combinations of `filter`, `map`, `filter_map` and `flat_map` which can usually be written as a single method call\"\n@@ -179,7 +200,10 @@ declare_lint! {\n ///\n /// **Known problems:** None.\n ///\n-/// **Example:** `iter.find(|x| x == 0).is_some()`\n+/// **Example:**\n+/// ```rust\n+/// iter.find(|x| x == 0).is_some()\n+/// ```\n declare_lint! {\n     pub SEARCH_IS_SOME, Warn,\n     \"using an iterator search followed by `is_some()`, which is more succinctly \\\n@@ -193,7 +217,10 @@ declare_lint! {\n ///\n /// **Known problems:** None.\n ///\n-/// **Example:** `name.chars().next() == Some('_')`\n+/// **Example:**\n+/// ```rust\n+/// name.chars().next() == Some('_')\n+/// ```\n declare_lint! {\n     pub CHARS_NEXT_CMP, Warn,\n     \"using `.chars().next()` to check if a string starts with a char\"\n@@ -229,7 +256,10 @@ declare_lint! {\n ///\n /// **Known problems:** None.\n ///\n-/// **Example:** `my_vec.extend(&xs)`\n+/// **Example:**\n+/// ```rust\n+/// my_vec.extend(&xs)\n+/// ```\n declare_lint! {\n     pub EXTEND_FROM_SLICE, Warn,\n     \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\"\n@@ -242,7 +272,10 @@ declare_lint! {\n ///\n /// **Known problems:** None.\n ///\n-/// **Example:** `42u64.clone()`\n+/// **Example:**\n+/// ```rust\n+/// 42u64.clone()\n+/// ```\n declare_lint! {\n     pub CLONE_ON_COPY, Warn, \"using `clone` on a `Copy` type\"\n }\n@@ -290,7 +323,10 @@ declare_lint! {\n ///\n /// **Known problems:** Does not catch multi-byte unicode characters.\n ///\n-/// **Example:** `_.split(\"x\")` could be `_.split('x')`\n+/// **Example:**\n+/// ```rust\n+/// _.split(\"x\")` could be `_.split('x')\n+/// ```\n declare_lint! {\n     pub SINGLE_CHAR_PATTERN,\n     Warn,"}]}