{"sha": "6a9946143d403aecdff348e8498474eeb25eb2d4", "node_id": "C_kwDOAAsO6NoAKDZhOTk0NjE0M2Q0MDNhZWNkZmYzNDhlODQ5ODQ3NGVlYjI1ZWIyZDQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-17T14:18:40Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-30T19:45:29Z"}, "message": "Specialize a few tests depending on opt-level.", "tree": {"sha": "4f375f100113476e881d990eabbd1e71c7143ab6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f375f100113476e881d990eabbd1e71c7143ab6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a9946143d403aecdff348e8498474eeb25eb2d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a9946143d403aecdff348e8498474eeb25eb2d4", "html_url": "https://github.com/rust-lang/rust/commit/6a9946143d403aecdff348e8498474eeb25eb2d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a9946143d403aecdff348e8498474eeb25eb2d4/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bb549f0d14ea841b983f68f894b895cfb444102", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb549f0d14ea841b983f68f894b895cfb444102", "html_url": "https://github.com/rust-lang/rust/commit/6bb549f0d14ea841b983f68f894b895cfb444102"}], "stats": {"total": 96, "additions": 56, "deletions": 40}, "files": [{"sha": "ec1997ccd5d662d6049a665316e0c8343df1d265", "filename": "src/test/ui/issues/issue-67552.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Fissues%2Fissue-67552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Fissues%2Fissue-67552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.rs?ref=6a9946143d403aecdff348e8498474eeb25eb2d4", "patch": "@@ -1,4 +1,5 @@\n-// build-pass\n+// build-fail\n+// compile-flags: -Copt-level=0\n // normalize-stderr-test: \".nll/\" -> \"/\"\n \n fn main() {\n@@ -26,5 +27,6 @@ where\n         T::count(it);\n     } else {\n         rec(identity(&mut it))\n+        //~^ ERROR reached the recursion limit while instantiating\n     }\n }"}, {"sha": "2968be7c71fb5de77cf070a79b9df263cc493312", "filename": "src/test/ui/issues/issue-67552.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr?ref=6a9946143d403aecdff348e8498474eeb25eb2d4", "patch": "@@ -0,0 +1,17 @@\n+error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut &... &mut &mut &mut &mut &mut Empty>`\n+  --> $DIR/issue-67552.rs:29:9\n+   |\n+LL |         rec(identity(&mut it))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: `rec` defined here\n+  --> $DIR/issue-67552.rs:22:1\n+   |\n+LL | / fn rec<T>(mut it: T)\n+LL | | where\n+LL | |     T: Iterator,\n+   | |________________^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-67552/issue-67552.long-type.txt'\n+\n+error: aborting due to previous error\n+"}, {"sha": "5955d9a25ae732ed56c36b72e6ef426b0413e747", "filename": "src/test/ui/panics/location-detail-unwrap-no-file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.rs?ref=6a9946143d403aecdff348e8498474eeb25eb2d4", "patch": "@@ -1,6 +1,6 @@\n // run-fail\n // check-run-results\n-// compile-flags: -Zlocation-detail=line,column\n+// compile-flags: -Copt-level=0 -Zlocation-detail=line,column\n // exec-env:RUST_BACKTRACE=0\n \n fn main() {"}, {"sha": "7d8e1d93038a3f37166a1a66d68512e0249a483d", "filename": "src/test/ui/panics/location-detail-unwrap-no-file.run.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.run.stderr?ref=6a9946143d403aecdff348e8498474eeb25eb2d4", "patch": "@@ -1,2 +1,2 @@\n-thread 'main' panicked at 'called `Option::unwrap()` on a `None` value', <redacted>:8:5\n+thread 'main' panicked at 'called `Option::unwrap()` on a `None` value', <redacted>:8:9\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}, {"sha": "6a5fc2e33de634d1c0b0736d82e3bef3da16224c", "filename": "src/test/ui/polymorphization/predicates.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.rs?ref=6a9946143d403aecdff348e8498474eeb25eb2d4", "patch": "@@ -1,5 +1,6 @@\n // build-fail\n-// compile-flags:-Zpolymorphize=on\n+// compile-flags: -Copt-level=0 -Zpolymorphize=on\n+\n #![feature(rustc_attrs)]\n \n // This test checks that `T` is considered used in `foo`, because it is used in a predicate for"}, {"sha": "6a74e63fdfe3bef9b616d1fb204b82d95bd8118d", "filename": "src/test/ui/polymorphization/predicates.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr?ref=6a9946143d403aecdff348e8498474eeb25eb2d4", "patch": "@@ -1,31 +1,17 @@\n error: item has unused generic parameters\n-  --> $DIR/predicates.rs:58:4\n-   |\n-LL | fn quux<A, B, C: Default>() -> usize\n-   |    ^^^^ -  - generic parameter `B` is unused\n-   |         |\n-   |         generic parameter `A` is unused\n-\n-error: item has unused generic parameters\n-  --> $DIR/predicates.rs:75:4\n-   |\n-LL | fn foobar<F, G>() -> usize\n-   |    ^^^^^^ - generic parameter `F` is unused\n-\n-error: item has unused generic parameters\n-  --> $DIR/predicates.rs:14:4\n+  --> $DIR/predicates.rs:15:4\n    |\n LL | fn foo<I, T>(_: I)\n    |    ^^^    - generic parameter `T` is unused\n \n error: item has unused generic parameters\n-  --> $DIR/predicates.rs:23:4\n+  --> $DIR/predicates.rs:24:4\n    |\n LL | fn baz<I, T>(_: I)\n    |    ^^^    - generic parameter `T` is unused\n \n error: item has unused generic parameters\n-  --> $DIR/predicates.rs:44:19\n+  --> $DIR/predicates.rs:45:19\n    |\n LL | impl<'a, I, T: 'a, E> Iterator for Foo<'a, I, E>\n    |          -         - generic parameter `E` is unused\n@@ -36,13 +22,27 @@ LL |         self.find(|_| true)\n    |                   ^^^^^^^^\n \n error: item has unused generic parameters\n-  --> $DIR/predicates.rs:9:4\n+  --> $DIR/predicates.rs:59:4\n+   |\n+LL | fn quux<A, B, C: Default>() -> usize\n+   |    ^^^^ -  - generic parameter `B` is unused\n+   |         |\n+   |         generic parameter `A` is unused\n+\n+error: item has unused generic parameters\n+  --> $DIR/predicates.rs:76:4\n+   |\n+LL | fn foobar<F, G>() -> usize\n+   |    ^^^^^^ - generic parameter `F` is unused\n+\n+error: item has unused generic parameters\n+  --> $DIR/predicates.rs:10:4\n    |\n LL | fn bar<I>() {\n    |    ^^^ - generic parameter `I` is unused\n \n note: the above error was encountered while instantiating `fn foo::<std::slice::Iter<u32>, T>`\n-  --> $DIR/predicates.rs:85:5\n+  --> $DIR/predicates.rs:86:5\n    |\n LL |     foo(x.iter());\n    |     ^^^^^^^^^^^^^"}, {"sha": "e647f0ff4fb8beaa3e3285ea829908df27f3dfec", "filename": "src/test/ui/recursion/issue-83150.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs?ref=6a9946143d403aecdff348e8498474eeb25eb2d4", "patch": "@@ -1,4 +1,6 @@\n // build-fail\n+// compile-flags: -Copt-level=0\n+//~^^ ERROR overflow evaluating the requirement\n \n fn main() {\n     let mut iter = 0u8..1;\n@@ -7,5 +9,4 @@ fn main() {\n \n fn func<T: Iterator<Item = u8>>(iter: &mut T) { //~ WARN function cannot return without recursing\n     func(&mut iter.map(|x| x + 1))\n-    //~^ ERROR reached the recursion limit while instantiating\n }"}, {"sha": "aaa5884c60c7782e21fde584afd5e74ad741c89c", "filename": "src/test/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr?ref=6a9946143d403aecdff348e8498474eeb25eb2d4", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-83150.rs:8:1\n+  --> $DIR/issue-83150.rs:10:1\n    |\n LL | fn func<T: Iterator<Item = u8>>(iter: &mut T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n@@ -9,18 +9,11 @@ LL |     func(&mut iter.map(|x| x + 1))\n    = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: reached the recursion limit while instantiating `func::<Map<&mut Map<&mut Map<&mu...ion/issue-83150.rs:9:24: 9:33]>>`\n-  --> $DIR/issue-83150.rs:9:5\n+error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>: Iterator`\n    |\n-LL |     func(&mut iter.map(|x| x + 1))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: `func` defined here\n-  --> $DIR/issue-83150.rs:8:1\n-   |\n-LL | fn func<T: Iterator<Item = u8>>(iter: &mut T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-83150/issue-83150.long-type.txt'\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n+   = note: required because of the requirements on the impl of `Iterator` for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>, [closure@$DIR/issue-83150.rs:11:24: 11:33]>`\n \n error: aborting due to previous error; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "ce6fdf811213f905513b0448b7058958c20e89d9", "filename": "src/test/ui/type_length_limit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Ftype_length_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Ftype_length_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.rs?ref=6a9946143d403aecdff348e8498474eeb25eb2d4", "patch": "@@ -1,8 +1,10 @@\n // build-fail\n // error-pattern: reached the type-length limit while instantiating\n+// compile-flags: -Copt-level=0\n // normalize-stderr-test: \".nll/\" -> \"/\"\n \n // Test that the type length limit can be changed.\n+// The exact type depends on optimizations, so disable them.\n \n #![allow(dead_code)]\n #![type_length_limit=\"4\"]"}, {"sha": "a2ddffff997d882af39f5f3ac15b1c9c34b8566f", "filename": "src/test/ui/type_length_limit.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a9946143d403aecdff348e8498474eeb25eb2d4/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.stderr?ref=6a9946143d403aecdff348e8498474eeb25eb2d4", "patch": "@@ -1,8 +1,8 @@\n-error: reached the type-length limit while instantiating `<[closure@std::rt::lang_start<()...e<()>>::call_once - shim(vtable)`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+error: reached the type-length limit while instantiating `std::mem::drop::<Option<((((...,....., ...), ..., ...), ..., ...)>>`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n-LL |     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | pub fn drop<T>(_x: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n    = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate"}]}