{"sha": "151b6b13e0766c23833038db0a5b99a09562af53", "node_id": "C_kwDOAAsO6NoAKDE1MWI2YjEzZTA3NjZjMjM4MzMwMzhkYjBhNWI5OWEwOTU2MmFmNTM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-04T15:55:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-04T17:29:00Z"}, "message": "clippy: main crate", "tree": {"sha": "79e52de530fc990101e3786d2307c0392dc38fe9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79e52de530fc990101e3786d2307c0392dc38fe9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/151b6b13e0766c23833038db0a5b99a09562af53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/151b6b13e0766c23833038db0a5b99a09562af53", "html_url": "https://github.com/rust-lang/rust/commit/151b6b13e0766c23833038db0a5b99a09562af53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/151b6b13e0766c23833038db0a5b99a09562af53/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd7f83dc3773ee1a0ce6ebb5bf7c3a8cd04bb968", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7f83dc3773ee1a0ce6ebb5bf7c3a8cd04bb968", "html_url": "https://github.com/rust-lang/rust/commit/bd7f83dc3773ee1a0ce6ebb5bf7c3a8cd04bb968"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "0c2732828966cdc6a20a89f5bb09b698e399cbc6", "filename": "benches/helpers/fibonacci_helper_iterative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/151b6b13e0766c23833038db0a5b99a09562af53/benches%2Fhelpers%2Ffibonacci_helper_iterative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151b6b13e0766c23833038db0a5b99a09562af53/benches%2Fhelpers%2Ffibonacci_helper_iterative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Ffibonacci_helper_iterative.rs?ref=151b6b13e0766c23833038db0a5b99a09562af53", "patch": "@@ -9,7 +9,7 @@ fn fib(n: usize) -> usize {\n     for _ in 0..n {\n         let c = a;\n         a = b;\n-        b = c + b;\n+        b += c;\n     }\n     a\n }"}, {"sha": "f7c256656a7688ef09e2065cbf2cb6f06995140e", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/151b6b13e0766c23833038db0a5b99a09562af53/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151b6b13e0766c23833038db0a5b99a09562af53/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=151b6b13e0766c23833038db0a5b99a09562af53", "patch": "@@ -7,19 +7,16 @@\n #![feature(io_error_more)]\n #![warn(rust_2018_idioms)]\n #![allow(\n-    clippy::cast_lossless,\n     clippy::collapsible_else_if,\n     clippy::collapsible_if,\n     clippy::comparison_chain,\n     clippy::enum_variant_names,\n     clippy::field_reassign_with_default,\n-    clippy::from_over_into,\n-    clippy::if_same_then_else,\n     clippy::manual_map,\n-    clippy::needless_lifetimes,\n     clippy::new_without_default,\n     clippy::single_match,\n-    clippy::useless_format\n+    clippy::useless_format,\n+    clippy::derive_partial_eq_without_eq\n )]\n \n extern crate rustc_apfloat;"}, {"sha": "6a7cbe58711aa1fa4dd8905dd04a0884250f7197", "filename": "src/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/151b6b13e0766c23833038db0a5b99a09562af53/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151b6b13e0766c23833038db0a5b99a09562af53/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=151b6b13e0766c23833038db0a5b99a09562af53", "patch": "@@ -89,10 +89,10 @@ pub enum MiriMemoryKind {\n     Tls,\n }\n \n-impl Into<MemoryKind<MiriMemoryKind>> for MiriMemoryKind {\n+impl From<MiriMemoryKind> for MemoryKind<MiriMemoryKind> {\n     #[inline(always)]\n-    fn into(self) -> MemoryKind<MiriMemoryKind> {\n-        MemoryKind::Machine(self)\n+    fn from(kind: MiriMemoryKind) -> MemoryKind<MiriMemoryKind> {\n+        MemoryKind::Machine(kind)\n     }\n }\n "}, {"sha": "8d4da31fd0d777de75d0f4811b7199b5cbef2c3e", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/151b6b13e0766c23833038db0a5b99a09562af53/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151b6b13e0766c23833038db0a5b99a09562af53/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=151b6b13e0766c23833038db0a5b99a09562af53", "patch": "@@ -1389,7 +1389,7 @@ fn bool_to_simd_element(b: bool, size: Size) -> Scalar<Tag> {\n     Scalar::from_int(val, size)\n }\n \n-fn simd_element_to_bool<'tcx>(elem: ImmTy<'tcx, Tag>) -> InterpResult<'tcx, bool> {\n+fn simd_element_to_bool(elem: ImmTy<'_, Tag>) -> InterpResult<'_, bool> {\n     let val = elem.to_scalar()?.to_int(elem.layout.size)?;\n     Ok(match val {\n         0 => false,"}, {"sha": "373996312eaf6e36bdeb0c1f001601be357da88f", "filename": "src/shims/posix/sync.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/151b6b13e0766c23833038db0a5b99a09562af53/src%2Fshims%2Fposix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151b6b13e0766c23833038db0a5b99a09562af53/src%2Fshims%2Fposix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fsync.rs?ref=151b6b13e0766c23833038db0a5b99a09562af53", "patch": "@@ -535,9 +535,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 throw_ub_format!(\n                     \"unlocked a PTHREAD_MUTEX_NORMAL mutex that was not locked by the current thread\"\n                 );\n-            } else if kind == this.eval_libc(\"PTHREAD_MUTEX_ERRORCHECK\")? {\n-                this.eval_libc_i32(\"EPERM\")\n-            } else if kind == this.eval_libc(\"PTHREAD_MUTEX_RECURSIVE\")? {\n+            } else if kind == this.eval_libc(\"PTHREAD_MUTEX_ERRORCHECK\")?\n+                || kind == this.eval_libc(\"PTHREAD_MUTEX_RECURSIVE\")?\n+            {\n                 this.eval_libc_i32(\"EPERM\")\n             } else {\n                 throw_unsup_format!(\"called pthread_mutex_unlock on an unsupported type of mutex\");\n@@ -642,6 +642,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let id = rwlock_get_or_create_id(this, rwlock_op)?;\n         let active_thread = this.get_active_thread();\n \n+        #[allow(clippy::if_same_then_else)]\n         if this.rwlock_reader_unlock(id, active_thread) {\n             Ok(0)\n         } else if this.rwlock_writer_unlock(id, active_thread) {"}]}