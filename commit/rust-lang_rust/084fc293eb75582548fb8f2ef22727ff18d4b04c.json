{"sha": "084fc293eb75582548fb8f2ef22727ff18d4b04c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NGZjMjkzZWI3NTU4MjU0OGZiOGYyZWYyMjcyN2ZmMThkNGIwNGM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-19T22:58:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-19T22:58:43Z"}, "message": "Rollup merge of #79193 - tmiasko:revert-78969-normalize, r=davidtwco\n\nRevert #78969 \"Normalize function type during validation\"\n\nCloses #79066.\nReopens #78442.", "tree": {"sha": "80c9438daa51ec0d0085a83e910f8825f959915d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80c9438daa51ec0d0085a83e910f8825f959915d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/084fc293eb75582548fb8f2ef22727ff18d4b04c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJftvikCRBK7hj4Ov3rIwAAdHIIAGtH0dCt4DVHauxcH88ix5uT\nTJK68N59ffY9Y2/NdbMqJK+s1kuLtW0eps+f0/hCNpXN+UDUftxSOejXlFwDrNHZ\nY5kcSWNVLnhjsMgpuiGW33UqBHhoxaG3HJ+Pn9MjnBkjpwZTrTzDXfP24sXOuBHI\niN6v5ZYRtEGGvc8ASjapA0ZcC7E53ml3/A8NJOLQYQbMslviBbl41OrEec3/uRg3\nmzDj+JBi+fI5fQN9/qoXNB0IF8J8fpTgefTnN4ONCro75ICJrgJhssT7vR4Kl3Nf\nQvTncQicFO4J0PBSMt97dTQ0m3VmEI1K0wxr5CNutaQJyvPwEWZwSVw+iG1DdcU=\n=sE5v\n-----END PGP SIGNATURE-----\n", "payload": "tree 80c9438daa51ec0d0085a83e910f8825f959915d\nparent 8216b359e542d6d842bc3ed3fba3c67de5ad60fa\nparent 0ab44584aa058a5b95cb8a3bd268046ccf71066a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1605826723 +0100\ncommitter GitHub <noreply@github.com> 1605826723 +0100\n\nRollup merge of #79193 - tmiasko:revert-78969-normalize, r=davidtwco\n\nRevert #78969 \"Normalize function type during validation\"\n\nCloses #79066.\nReopens #78442.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/084fc293eb75582548fb8f2ef22727ff18d4b04c", "html_url": "https://github.com/rust-lang/rust/commit/084fc293eb75582548fb8f2ef22727ff18d4b04c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/084fc293eb75582548fb8f2ef22727ff18d4b04c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8216b359e542d6d842bc3ed3fba3c67de5ad60fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/8216b359e542d6d842bc3ed3fba3c67de5ad60fa", "html_url": "https://github.com/rust-lang/rust/commit/8216b359e542d6d842bc3ed3fba3c67de5ad60fa"}, {"sha": "0ab44584aa058a5b95cb8a3bd268046ccf71066a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab44584aa058a5b95cb8a3bd268046ccf71066a", "html_url": "https://github.com/rust-lang/rust/commit/0ab44584aa058a5b95cb8a3bd268046ccf71066a"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "919e4a90a1716ca49d8995b2ba7d643e3690ace8", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/084fc293eb75582548fb8f2ef22727ff18d4b04c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084fc293eb75582548fb8f2ef22727ff18d4b04c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=084fc293eb75582548fb8f2ef22727ff18d4b04c", "patch": "@@ -38,9 +38,7 @@ pub struct Validator {\n impl<'tcx> MirPass<'tcx> for Validator {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let def_id = body.source.def_id();\n-        // We need to param_env_reveal_all_normalized, as some optimizations\n-        // change types in ways that require unfolding opaque types.\n-        let param_env = tcx.param_env_reveal_all_normalized(def_id);\n+        let param_env = tcx.param_env(def_id);\n         let mir_phase = self.mir_phase;\n \n         let always_live_locals = AlwaysLiveLocals::new(body);\n@@ -81,6 +79,7 @@ pub fn equal_up_to_regions(\n     }\n \n     // Normalize lifetimes away on both sides, then compare.\n+    let param_env = param_env.with_reveal_all_normalized(tcx);\n     let normalize = |ty: Ty<'tcx>| {\n         tcx.normalize_erasing_regions(\n             param_env,\n@@ -168,14 +167,17 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             return true;\n         }\n         // Normalize projections and things like that.\n-        let src = self.tcx.normalize_erasing_regions(self.param_env, src);\n-        let dest = self.tcx.normalize_erasing_regions(self.param_env, dest);\n+        // FIXME: We need to reveal_all, as some optimizations change types in ways\n+        // that require unfolding opaque types.\n+        let param_env = self.param_env.with_reveal_all_normalized(self.tcx);\n+        let src = self.tcx.normalize_erasing_regions(param_env, src);\n+        let dest = self.tcx.normalize_erasing_regions(param_env, dest);\n \n         // Type-changing assignments can happen when subtyping is used. While\n         // all normal lifetimes are erased, higher-ranked types with their\n         // late-bound lifetimes are still around and can lead to type\n         // differences. So we compare ignoring lifetimes.\n-        equal_up_to_regions(self.tcx, self.param_env, src, dest)\n+        equal_up_to_regions(self.tcx, param_env, src, dest)\n     }\n }\n \n@@ -363,7 +365,6 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             }\n             TerminatorKind::Call { func, args, destination, cleanup, .. } => {\n                 let func_ty = func.ty(&self.body.local_decls, self.tcx);\n-                let func_ty = self.tcx.normalize_erasing_regions(self.param_env, func_ty);\n                 match func_ty.kind() {\n                     ty::FnPtr(..) | ty::FnDef(..) => {}\n                     _ => self.fail("}, {"sha": "fb4bf2b8b44e7642e5f68244b9057cd2234e4f8f", "filename": "src/test/ui/issues/issue-50865-private-impl-trait/auxiliary/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/084fc293eb75582548fb8f2ef22727ff18d4b04c/src%2Ftest%2Fui%2Fissues%2Fissue-50865-private-impl-trait%2Fauxiliary%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084fc293eb75582548fb8f2ef22727ff18d4b04c/src%2Ftest%2Fui%2Fissues%2Fissue-50865-private-impl-trait%2Fauxiliary%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50865-private-impl-trait%2Fauxiliary%2Flib.rs?ref=084fc293eb75582548fb8f2ef22727ff18d4b04c", "patch": "@@ -1,3 +1,7 @@\n+// revisions: default miropt\n+//[miropt]compile-flags: -Z mir-opt-level=2\n+// ~^ This flag is for #77668, it used to be ICE.\n+\n #![crate_type = \"lib\"]\n \n pub fn bar<P>( // Error won't happen if \"bar\" is not generic"}, {"sha": "4d083bf23215599a16ecf1c8f16cabcf6a678488", "filename": "src/test/ui/mir/mir-inlining/ice-issue-77306-1.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/084fc293eb75582548fb8f2ef22727ff18d4b04c/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77306-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084fc293eb75582548fb8f2ef22727ff18d4b04c/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77306-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77306-1.rs?ref=084fc293eb75582548fb8f2ef22727ff18d4b04c", "patch": "@@ -1,27 +1,17 @@\n-// Regression test for various issues related to normalization & inlining.\n-// * #68347, #77306, #77668 - missed normalization during inlining.\n-// * #78442 - missed normalization in validator after inlining.\n-//\n-// build-pass\n+// run-pass\n // compile-flags:-Zmir-opt-level=2\n \n+// Previously ICEd because we did not normalize during inlining,\n+// see https://github.com/rust-lang/rust/pull/77306 for more discussion.\n+\n pub fn write() {\n     create()()\n }\n \n-pub fn write_generic<T>(_t: T) {\n-    hide()();\n-}\n-\n pub fn create() -> impl FnOnce() {\n    || ()\n }\n \n-pub fn hide() -> impl Fn() {\n-    write\n-}\n-\n fn main() {\n     write();\n-    write_generic(());\n }"}]}