{"sha": "5ed4377677f071489ad24860ac2c6c3fac324921", "node_id": "C_kwDOAAsO6NoAKDVlZDQzNzc2NzdmMDcxNDg5YWQyNDg2MGFjMmM2YzNmYWMzMjQ5MjE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-25T12:35:21Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-25T12:35:21Z"}, "message": "Fix ConstantKind::Ty codegen", "tree": {"sha": "b69170c096a62df1ded9014720c8e3e5c7d309cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b69170c096a62df1ded9014720c8e3e5c7d309cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ed4377677f071489ad24860ac2c6c3fac324921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed4377677f071489ad24860ac2c6c3fac324921", "html_url": "https://github.com/rust-lang/rust/commit/5ed4377677f071489ad24860ac2c6c3fac324921", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ed4377677f071489ad24860ac2c6c3fac324921/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3d3ba9928820465d6ca08e1068280006453d291", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3d3ba9928820465d6ca08e1068280006453d291", "html_url": "https://github.com/rust-lang/rust/commit/b3d3ba9928820465d6ca08e1068280006453d291"}], "stats": {"total": 76, "additions": 34, "deletions": 42}, "files": [{"sha": "1aeb9ff25703da1f4cdeadab0b2b85ef67834dee", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed4377677f071489ad24860ac2c6c3fac324921/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed4377677f071489ad24860ac2c6c3fac324921/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=5ed4377677f071489ad24860ac2c6c3fac324921", "patch": "@@ -917,7 +917,7 @@ pub(crate) fn codegen_operand<'tcx>(\n             let cplace = codegen_place(fx, *place);\n             cplace.to_cvalue(fx)\n         }\n-        Operand::Constant(const_) => crate::constant::codegen_constant(fx, const_),\n+        Operand::Constant(const_) => crate::constant::codegen_constant_operand(fx, const_),\n     }\n }\n "}, {"sha": "d1610b4005fa07fe9d1fea17a18828db40a624bc", "filename": "src/constant.rs", "status": "modified", "additions": 33, "deletions": 41, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/5ed4377677f071489ad24860ac2c6c3fac324921/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed4377677f071489ad24860ac2c6c3fac324921/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=5ed4377677f071489ad24860ac2c6c3fac324921", "patch": "@@ -7,7 +7,6 @@ use rustc_middle::mir::interpret::{\n };\n use rustc_span::DUMMY_SP;\n \n-use cranelift_codegen::ir::GlobalValueData;\n use cranelift_module::*;\n \n use crate::prelude::*;\n@@ -81,53 +80,46 @@ pub(crate) fn codegen_tls_ref<'tcx>(\n     CValue::by_val(tls_ptr, layout)\n }\n \n-fn codegen_static_ref<'tcx>(\n-    fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    def_id: DefId,\n-    layout: TyAndLayout<'tcx>,\n-) -> CPlace<'tcx> {\n-    let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);\n-    let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-    if fx.clif_comments.enabled() {\n-        fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n-    }\n-    let global_ptr = fx.bcx.ins().global_value(fx.pointer_type, local_data_id);\n-    assert!(!layout.is_unsized(), \"unsized statics aren't supported\");\n-    assert!(\n-        matches!(\n-            fx.bcx.func.global_values[local_data_id],\n-            GlobalValueData::Symbol { tls: false, .. }\n-        ),\n-        \"tls static referenced without Rvalue::ThreadLocalRef\"\n-    );\n-    CPlace::for_ptr(crate::pointer::Pointer::new(global_ptr), layout)\n-}\n-\n-pub(crate) fn codegen_constant<'tcx>(\n+pub(crate) fn eval_mir_constant<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     constant: &Constant<'tcx>,\n-) -> CValue<'tcx> {\n-    let (const_val, ty) = match fx.monomorphize(constant.literal) {\n-        ConstantKind::Ty(const_) => unreachable!(\"{:?}\", const_),\n-        ConstantKind::Unevaluated(mir::UnevaluatedConst { def, substs, promoted }, ty)\n+) -> (ConstValue<'tcx>, Ty<'tcx>) {\n+    let constant_kind = fx.monomorphize(constant.literal);\n+    let uv = match constant_kind {\n+        ConstantKind::Ty(const_) => match const_.kind() {\n+            ty::ConstKind::Unevaluated(uv) => uv.expand(),\n+            ty::ConstKind::Value(val) => {\n+                return (fx.tcx.valtree_to_const_val((const_.ty(), val)), const_.ty());\n+            }\n+            err => span_bug!(\n+                constant.span,\n+                \"encountered bad ConstKind after monomorphizing: {:?}\",\n+                err\n+            ),\n+        },\n+        ConstantKind::Unevaluated(mir::UnevaluatedConst { def, .. }, _)\n             if fx.tcx.is_static(def.did) =>\n         {\n-            assert!(substs.is_empty());\n-            assert!(promoted.is_none());\n-\n-            return codegen_static_ref(fx, def.did, fx.layout_of(ty)).to_cvalue(fx);\n-        }\n-        ConstantKind::Unevaluated(unevaluated, ty) => {\n-            match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n-                Ok(const_val) => (const_val, ty),\n-                Err(_) => {\n-                    span_bug!(constant.span, \"erroneous constant not captured by required_consts\");\n-                }\n-            }\n+            span_bug!(constant.span, \"MIR constant refers to static\");\n         }\n-        ConstantKind::Val(val, ty) => (val, ty),\n+        ConstantKind::Unevaluated(uv, _) => uv,\n+        ConstantKind::Val(val, _) => return (val, constant_kind.ty()),\n     };\n \n+    (\n+        fx.tcx.const_eval_resolve(ty::ParamEnv::reveal_all(), uv, None).unwrap_or_else(|_err| {\n+            span_bug!(constant.span, \"erroneous constant not captured by required_consts\");\n+        }),\n+        constant_kind.ty(),\n+    )\n+}\n+\n+pub(crate) fn codegen_constant_operand<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    constant: &Constant<'tcx>,\n+) -> CValue<'tcx> {\n+    let (const_val, ty) = eval_mir_constant(fx, constant);\n+\n     codegen_const_value(fx, const_val, ty)\n }\n "}]}