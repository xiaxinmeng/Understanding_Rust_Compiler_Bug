{"sha": "d84f0c8d329017c95cbf73418be8e804b0a10472", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NGYwYzhkMzI5MDE3Yzk1Y2JmNzM0MThiZThlODA0YjBhMTA0NzI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-06-26T00:43:48Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-06-28T17:08:12Z"}, "message": "Update tests", "tree": {"sha": "57302ae033385d1c7e0cc0b9a01d556b1970f84e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57302ae033385d1c7e0cc0b9a01d556b1970f84e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d84f0c8d329017c95cbf73418be8e804b0a10472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d84f0c8d329017c95cbf73418be8e804b0a10472", "html_url": "https://github.com/rust-lang/rust/commit/d84f0c8d329017c95cbf73418be8e804b0a10472", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d84f0c8d329017c95cbf73418be8e804b0a10472/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c46e4251219c25582f26b7838958a04b4b50bc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c46e4251219c25582f26b7838958a04b4b50bc6", "html_url": "https://github.com/rust-lang/rust/commit/7c46e4251219c25582f26b7838958a04b4b50bc6"}], "stats": {"total": 520, "additions": 105, "deletions": 415}, "files": [{"sha": "21bd6252219035f947e9a010d60743c8ddc8bcce", "filename": "src/test/compile-fail/issue-52443.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,11 +1,11 @@\n fn main() {\n     [(); & { loop { continue } } ]; //~ ERROR mismatched types\n-    //~^ ERROR `loop` is not allowed in a `const`\n+\n     [(); loop { break }]; //~ ERROR mismatched types\n-    //~^ ERROR `loop` is not allowed in a `const`\n+\n     [(); {while true {break}; 0}];\n-    //~^ ERROR `while` is not allowed in a `const`\n-    //~| WARN denote infinite loops with\n+    //~^ WARN denote infinite loops with\n+\n     [(); { for _ in 0usize.. {}; 0}];\n     //~^ ERROR `for` is not allowed in a `const`\n     //~| ERROR calls in constants are limited to constant functions"}, {"sha": "9e7c5847b3b2ee846aff7bea81d414cef29f0725", "filename": "src/test/ui/async-await/issue-70594.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -4,7 +4,6 @@ async fn fun() {\n     [1; ().await];\n     //~^ error: `await` is only allowed inside `async` functions and blocks\n     //~| error: `.await` is not allowed in a `const`\n-    //~| error: `loop` is not allowed in a `const`\n     //~| error: `.await` is not allowed in a `const`\n     //~| error: `()` is not a future\n }"}, {"sha": "badb7ae9f6f6529f407e0d857e8c9c587586c7d4", "filename": "src/test/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -12,15 +12,6 @@ error[E0744]: `.await` is not allowed in a `const`\n LL |     [1; ().await];\n    |         ^^^^^^^^\n \n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/issue-70594.rs:4:9\n-   |\n-LL |     [1; ().await];\n-   |         ^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n error[E0744]: `.await` is not allowed in a `const`\n   --> $DIR/issue-70594.rs:4:9\n    |\n@@ -36,7 +27,7 @@ LL |     [1; ().await];\n    = help: the trait `std::future::Future` is not implemented for `()`\n    = note: required by `std::future::Future::poll`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0277, E0658, E0728, E0744.\n+Some errors have detailed explanations: E0277, E0728, E0744.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "f79a0bd35486aa388eb91d188bc60cb23dc405f2", "filename": "src/test/ui/closures/issue-52437.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,7 +1,6 @@\n fn main() {\n     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n     //~^ ERROR: invalid label name `'static`\n-    //~| ERROR: `loop` is not allowed in a `const`\n     //~| ERROR: type annotations needed\n     //~| ERROR mismatched types\n }"}, {"sha": "54825cb746d4298cdeacabcc5ec9de61afca6ee8", "filename": "src/test/ui/closures/issue-52437.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -4,15 +4,6 @@ error: invalid label name `'static`\n LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n    |             ^^^^^^^\n \n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/issue-52437.rs:2:13\n-   |\n-LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n error[E0282]: type annotations needed\n   --> $DIR/issue-52437.rs:2:30\n    |\n@@ -27,7 +18,7 @@ LL | fn main() {\n LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[(); _]`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0282, E0308, E0658.\n+Some errors have detailed explanations: E0282, E0308.\n For more information about an error, try `rustc --explain E0282`."}, {"sha": "14a573ccf5ac635149b5be2842b0b77506e5d62e", "filename": "src/test/ui/consts/const-eval/infinite_loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -4,7 +4,6 @@ fn main() {\n     let _ = [(); {\n         let mut n = 113383; // #20 in https://oeis.org/A006884\n         while n != 0 {\n-        //~^ ERROR `while` is not allowed in a `const`\n             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n             //~^ ERROR evaluation of constant value failed\n         }"}, {"sha": "d01376e595945f8cb0fbb65254dff3687cd12e8b", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,23 +1,9 @@\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/infinite_loop.rs:6:9\n-   |\n-LL | /         while n != 0 {\n-LL | |\n-LL | |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n-LL | |\n-LL | |         }\n-   | |_________^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/infinite_loop.rs:8:17\n+  --> $DIR/infinite_loop.rs:7:17\n    |\n LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0658.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "ea24578c7dd0cfd28f6937987db69918d647e143", "filename": "src/test/ui/consts/const-eval/issue-52442.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,6 +1,5 @@\n fn main() {\n     [();  { &loop { break } as *const _ as usize } ];\n-    //~^ ERROR `loop` is not allowed in a `const`\n-    //~| ERROR casting pointers to integers in constants is unstable\n+    //~^ ERROR casting pointers to integers in constants is unstable\n     //~| ERROR evaluation of constant value failed\n }"}, {"sha": "53a87837e16e3881cf80f74e9eb0c4ba5cb3d04d", "filename": "src/test/ui/consts/const-eval/issue-52442.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,12 +1,3 @@\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/issue-52442.rs:2:14\n-   |\n-LL |     [();  { &loop { break } as *const _ as usize } ];\n-   |              ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n error[E0658]: casting pointers to integers in constants is unstable\n   --> $DIR/issue-52442.rs:2:13\n    |\n@@ -22,7 +13,7 @@ error[E0080]: evaluation of constant value failed\n LL |     [();  { &loop { break } as *const _ as usize } ];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0080, E0658.\n For more information about an error, try `rustc --explain E0080`."}, {"sha": "ce65407bbab0b5d928795c8b4fdc82297aac8625", "filename": "src/test/ui/consts/const-eval/issue-52475.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -3,7 +3,6 @@ fn main() {\n         let mut x = &0;\n         let mut n = 0;\n         while n < 5 {\n-        //~^ ERROR `while` is not allowed in a `const`\n             n = (n + 1) % 5; //~ ERROR evaluation of constant value failed\n             x = &0; // Materialize a new AllocId\n         }"}, {"sha": "8536ff02c6dae89b96403ba90c8fd15b61f58a3b", "filename": "src/test/ui/consts/const-eval/issue-52475.stderr", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,23 +1,9 @@\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/issue-52475.rs:5:9\n-   |\n-LL | /         while n < 5 {\n-LL | |\n-LL | |             n = (n + 1) % 5;\n-LL | |             x = &0; // Materialize a new AllocId\n-LL | |         }\n-   | |_________^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-52475.rs:7:17\n+  --> $DIR/issue-52475.rs:6:17\n    |\n LL |             n = (n + 1) % 5;\n    |                 ^^^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0658.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "19abd91252db9725abc28b2a6e80bd58383b9625", "filename": "src/test/ui/consts/const-eval/issue-62272.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7c46e4251219c25582f26b7838958a04b4b50bc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c46e4251219c25582f26b7838958a04b4b50bc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.rs?ref=7c46e4251219c25582f26b7838958a04b4b50bc6", "patch": "@@ -1,11 +0,0 @@\n-// `loop`s unconditionally-broken-from used to be allowed in constants, but are now forbidden by\n-// the HIR const-checker.\n-//\n-// See https://github.com/rust-lang/rust/pull/66170 and\n-// https://github.com/rust-lang/rust/issues/62272.\n-\n-const FOO: () = loop { break; }; //~ ERROR `loop` is not allowed in a `const`\n-\n-fn main() {\n-    [FOO; { let x; loop { x = 5; break; } x }]; //~ ERROR `loop` is not allowed in a `const`\n-}"}, {"sha": "380f68bee09ce939876b463717e89e69c4e22210", "filename": "src/test/ui/consts/const-eval/issue-62272.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7c46e4251219c25582f26b7838958a04b4b50bc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c46e4251219c25582f26b7838958a04b4b50bc6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-62272.stderr?ref=7c46e4251219c25582f26b7838958a04b4b50bc6", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/issue-62272.rs:7:17\n-   |\n-LL | const FOO: () = loop { break; };\n-   |                 ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/issue-62272.rs:10:20\n-   |\n-LL |     [FOO; { let x; loop { x = 5; break; } x }];\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "3c81afa67a69fc046938b16d013c4c3f3b23511f", "filename": "src/test/ui/consts/const-eval/issue-70723.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_loop)]\n-\n static _X: () = loop {}; //~ ERROR could not evaluate static initializer\n \n fn main() {}"}, {"sha": "09fb3e060dc4c367dae3e9153225d393378a9225", "filename": "src/test/ui/consts/const-eval/issue-70723.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70723.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/issue-70723.rs:3:17\n+  --> $DIR/issue-70723.rs:1:17\n    |\n LL | static _X: () = loop {};\n    |                 ^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)"}, {"sha": "66b7d05808084785300aa2efa34a49718eb6baff", "filename": "src/test/ui/consts/const-eval/livedrop.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,6 +1,3 @@\n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n-\n const _: Option<Vec<i32>> = {\n     let mut never_returned = Some(Vec::new());\n     let mut always_returned = None; //~ ERROR destructors cannot be evaluated at compile-time"}, {"sha": "1e8b4230c6f111cea74e8ee43023bbfd4a2ec91a", "filename": "src/test/ui/consts/const-eval/livedrop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,5 +1,5 @@\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/livedrop.rs:6:9\n+  --> $DIR/livedrop.rs:3:9\n    |\n LL |     let mut always_returned = None;\n    |         ^^^^^^^^^^^^^^^^^^^ constants cannot evaluate destructors"}, {"sha": "6864f7247ad5f4e35840b29b37fd0290b2572255", "filename": "src/test/ui/consts/const-labeled-break.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,12 +1,11 @@\n+// run-pass\n+\n // Using labeled break in a while loop has caused an illegal instruction being\n // generated, and an ICE later.\n //\n // See https://github.com/rust-lang/rust/issues/51350 for more information.\n-//\n-// It is now forbidden by the HIR const-checker.\n-//\n-// See https://github.com/rust-lang/rust/pull/66170.\n \n-const CRASH: () = 'a: while break 'a {}; //~ ERROR `while` is not allowed in a `const`\n+#[allow(unreachable_code)]\n+const _: () = 'a: while break 'a {};\n \n fn main() {}"}, {"sha": "1e24bb4ab98d6ce873fdb40e1d56fc005bdd499c", "filename": "src/test/ui/consts/const-labeled-break.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c46e4251219c25582f26b7838958a04b4b50bc6/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c46e4251219c25582f26b7838958a04b4b50bc6/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-labeled-break.stderr?ref=7c46e4251219c25582f26b7838958a04b4b50bc6", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/const-labeled-break.rs:10:19\n-   |\n-LL | const CRASH: () = 'a: while break 'a {};\n-   |                   ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "629d1f02a30f3d88f4db73470e3b0289a80fe3a4", "filename": "src/test/ui/consts/const_limit/const_eval_limit_not_reached.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_not_reached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_not_reached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_not_reached.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n #![feature(const_eval_limit)]\n-#![feature(const_loop)]\n \n // This needs to be higher than the number of loop iterations since each pass through the loop may\n // hit more than one terminator."}, {"sha": "069dac00c9ace7c1b605e0433037e8e4fc41adeb", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_eval_limit)]\n-#![feature(const_loop)]\n #![const_eval_limit = \"500\"]\n \n const X: usize = {"}, {"sha": "8785c9e54b9bfef14162fd8f2693a08c3f28dc0e", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_eval_limit_reached.rs:7:11\n+  --> $DIR/const_eval_limit_reached.rs:6:5\n    |\n LL |  / const X: usize = {\n LL |  |     let mut x = 0;"}, {"sha": "6dd6192941d384dba861e54fd0c76f9a22410a9e", "filename": "src/test/ui/consts/control-flow/basics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -3,7 +3,6 @@\n // run-pass\n \n #![feature(const_panic)]\n-#![feature(const_loop)]\n #![feature(const_fn)]\n \n const X: u32 = 4;"}, {"sha": "0b0b2443a4a464a3d2c43b64de9b70377b7d3461", "filename": "src/test/ui/consts/control-flow/drop-fail.precise.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.precise.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,11 +1,11 @@\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/drop-fail.rs:9:9\n+  --> $DIR/drop-fail.rs:8:9\n    |\n LL |     let x = Some(Vec::new());\n    |         ^ constants cannot evaluate destructors\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/drop-fail.rs:40:9\n+  --> $DIR/drop-fail.rs:39:9\n    |\n LL |     let mut tmp = None;\n    |         ^^^^^^^ constants cannot evaluate destructors"}, {"sha": "efa5a11c941e9158f20242450fc66386a4dd31e4", "filename": "src/test/ui/consts/control-flow/drop-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,6 +1,5 @@\n // revisions: stock precise\n \n-#![feature(const_loop)]\n #![cfg_attr(precise, feature(const_precise_live_drops))]\n \n // `x` is *not* always moved into the final value and may be dropped inside the initializer."}, {"sha": "72ca4fa08bc4ee8f0e5d097c655865f961a6c1ad", "filename": "src/test/ui/consts/control-flow/drop-fail.stock.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.stock.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,5 +1,5 @@\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/drop-fail.rs:9:9\n+  --> $DIR/drop-fail.rs:8:9\n    |\n LL |     let x = Some(Vec::new());\n    |         ^ constants cannot evaluate destructors\n@@ -8,7 +8,7 @@ LL | };\n    | - value is dropped here\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/drop-fail.rs:22:9\n+  --> $DIR/drop-fail.rs:21:9\n    |\n LL |     let vec_tuple = (Vec::new(),);\n    |         ^^^^^^^^^ constants cannot evaluate destructors\n@@ -17,7 +17,7 @@ LL | };\n    | - value is dropped here\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/drop-fail.rs:30:9\n+  --> $DIR/drop-fail.rs:29:9\n    |\n LL |     let x: Result<_, Vec<i32>> = Ok(Vec::new());\n    |         ^ constants cannot evaluate destructors\n@@ -26,7 +26,7 @@ LL | };\n    | - value is dropped here\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/drop-fail.rs:40:9\n+  --> $DIR/drop-fail.rs:39:9\n    |\n LL |     let mut tmp = None;\n    |         ^^^^^^^ constants cannot evaluate destructors"}, {"sha": "95f954a59a8ddf3a2303d04e0a016deb2347725e", "filename": "src/test/ui/consts/control-flow/drop-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-pass.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n // revisions: stock precise\n \n-#![feature(const_loop)]\n #![cfg_attr(precise, feature(const_precise_live_drops))]\n \n // `x` is always moved into the final value and is not dropped inside the initializer."}, {"sha": "4ecc5ef78dd5ccbd8d2aac5c492e01e7f457b613", "filename": "src/test/ui/consts/control-flow/drop-precise.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-precise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-precise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-precise.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n // gate-test-const_precise_live_drops\n \n-#![feature(const_loop)]\n #![feature(const_precise_live_drops)]\n \n const _: Vec<i32> = {"}, {"sha": "a6d44237b0d98436e580426b0922470e961eb42e", "filename": "src/test/ui/consts/control-flow/interior-mutability.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,8 +1,6 @@\n // Ensure that *any* assignment to the return place of a value with interior mutability\n // disqualifies it from promotion.\n \n-#![feature(const_loop)]\n-\n use std::cell::Cell;\n \n const X: Option<Cell<i32>> = {"}, {"sha": "4f9c7d34c35f4fc5db581d76698446d4bdc99a28", "filename": "src/test/ui/consts/control-flow/interior-mutability.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Finterior-mutability.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/interior-mutability.rs:42:26\n+  --> $DIR/interior-mutability.rs:40:26\n    |\n LL |     let x: &'static _ = &X;\n    |            ----------    ^ creates a temporary which is freed while still in use\n@@ -10,7 +10,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/interior-mutability.rs:43:26\n+  --> $DIR/interior-mutability.rs:41:26\n    |\n LL |     let y: &'static _ = &Y;\n    |            ----------    ^ creates a temporary which is freed while still in use\n@@ -21,7 +21,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/interior-mutability.rs:44:26\n+  --> $DIR/interior-mutability.rs:42:26\n    |\n LL |     let z: &'static _ = &Z;\n    |            ----------    ^ creates a temporary which is freed while still in use"}, {"sha": "2b8561a2644888486e4cf3648bd54b2405e3d3cc", "filename": "src/test/ui/consts/control-flow/loop.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,29 +1,22 @@\n-// Ensure that loops are forbidden in a const context unless `#![feature(const_loop)]` is enabled.\n+const _: () = loop { break (); };\n \n-// gate-test-const_loop\n-// revisions: stock loop_\n-\n-#![cfg_attr(loop_, feature(const_loop))]\n-\n-const _: () = loop {}; //[stock]~ ERROR `loop` is not allowed in a `const`\n-\n-static FOO: i32 = loop { break 4; }; //[stock]~ ERROR `loop` is not allowed in a `static`\n+static FOO: i32 = loop { break 4; };\n \n const fn foo() {\n-    loop {} //[stock]~ ERROR `loop` is not allowed in a `const fn`\n+    loop {}\n }\n \n pub trait Foo {\n-    const BAR: i32 = loop { break 4; }; //[stock]~ ERROR `loop` is not allowed in a `const`\n+    const BAR: i32 = loop { break 4; };\n }\n \n impl Foo for () {\n-    const BAR: i32 = loop { break 4; }; //[stock]~ ERROR `loop` is not allowed in a `const`\n+    const BAR: i32 = loop { break 4; };\n }\n \n fn non_const_outside() {\n     const fn const_inside() {\n-        loop {} //[stock]~ ERROR `loop` is not allowed in a `const fn`\n+        loop {}\n     }\n }\n \n@@ -36,19 +29,18 @@ const fn const_outside() {\n fn main() {\n     let x = [0; {\n         while false {}\n-        //[stock]~^ ERROR `while` is not allowed in a `const`\n         4\n     }];\n }\n \n const _: i32 = {\n     let mut x = 0;\n \n-    while x < 4 { //[stock]~ ERROR `while` is not allowed in a `const`\n+    while x < 4 {\n         x += 1;\n     }\n \n-    while x < 8 { //[stock]~ ERROR `while` is not allowed in a `const`\n+    while x < 8 {\n         x += 1;\n     }\n \n@@ -58,11 +50,11 @@ const _: i32 = {\n const _: i32 = {\n     let mut x = 0;\n \n-    for i in 0..4 { //[stock,loop_]~ ERROR `for` is not allowed in a `const`\n+    for i in 0..4 { //~ ERROR `for` is not allowed in a `const`\n         x += i;\n     }\n \n-    for i in 0..4 { //[stock,loop_]~ ERROR `for` is not allowed in a `const`\n+    for i in 0..4 { //~ ERROR `for` is not allowed in a `const`\n         x += i;\n     }\n \n@@ -72,14 +64,14 @@ const _: i32 = {\n const _: i32 = {\n     let mut x = 0;\n \n-    loop { //[stock]~ ERROR `loop` is not allowed in a `const`\n+    loop {\n         x += 1;\n         if x == 4 {\n             break;\n         }\n     }\n \n-    loop { //[stock]~ ERROR `loop` is not allowed in a `const`\n+    loop {\n         x += 1;\n         if x == 8 {\n             break;\n@@ -91,7 +83,7 @@ const _: i32 = {\n \n const _: i32 = {\n     let mut x = 0;\n-    while let None = Some(x) { } //[stock]~ ERROR `while` is not allowed in a `const`\n-    while let None = Some(x) { } //[stock]~ ERROR `while` is not allowed in a `const`\n+    while let None = Some(x) { }\n+    while let None = Some(x) { }\n     x\n };"}, {"sha": "7b99fa4fe4609c29f2fd9eb5386fb99287cfaf65", "filename": "src/test/ui/consts/control-flow/loop.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,13 +1,13 @@\n error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:61:5\n+  --> $DIR/loop.rs:53:5\n    |\n LL | /     for i in 0..4 {\n LL | |         x += i;\n LL | |     }\n    | |_____^\n \n error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:65:5\n+  --> $DIR/loop.rs:57:5\n    |\n LL | /     for i in 0..4 {\n LL | |         x += i;", "previous_filename": "src/test/ui/consts/control-flow/loop.loop_.stderr"}, {"sha": "a9ac3929bba18de7eccec93c517142d92bf5b6f4", "filename": "src/test/ui/consts/control-flow/loop.stock.stderr", "status": "removed", "additions": 0, "deletions": 151, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/7c46e4251219c25582f26b7838958a04b4b50bc6/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c46e4251219c25582f26b7838958a04b4b50bc6/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stock.stderr?ref=7c46e4251219c25582f26b7838958a04b4b50bc6", "patch": "@@ -1,151 +0,0 @@\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:8:15\n-   |\n-LL | const _: () = loop {};\n-   |               ^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `static`\n-  --> $DIR/loop.rs:10:19\n-   |\n-LL | static FOO: i32 = loop { break 4; };\n-   |                   ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const fn`\n-  --> $DIR/loop.rs:13:5\n-   |\n-LL |     loop {}\n-   |     ^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const fn`\n-  --> $DIR/loop.rs:26:9\n-   |\n-LL |         loop {}\n-   |         ^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:38:9\n-   |\n-LL |         while false {}\n-   |         ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:47:5\n-   |\n-LL | /     while x < 4 {\n-LL | |         x += 1;\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:51:5\n-   |\n-LL | /     while x < 8 {\n-LL | |         x += 1;\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:61:5\n-   |\n-LL | /     for i in 0..4 {\n-LL | |         x += i;\n-LL | |     }\n-   | |_____^\n-\n-error[E0744]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:65:5\n-   |\n-LL | /     for i in 0..4 {\n-LL | |         x += i;\n-LL | |     }\n-   | |_____^\n-\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:75:5\n-   |\n-LL | /     loop {\n-LL | |         x += 1;\n-LL | |         if x == 4 {\n-LL | |             break;\n-LL | |         }\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:82:5\n-   |\n-LL | /     loop {\n-LL | |         x += 1;\n-LL | |         if x == 8 {\n-LL | |             break;\n-LL | |         }\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:94:5\n-   |\n-LL |     while let None = Some(x) { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/loop.rs:95:5\n-   |\n-LL |     while let None = Some(x) { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:17:22\n-   |\n-LL |     const BAR: i32 = loop { break 4; };\n-   |                      ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error[E0658]: `loop` is not allowed in a `const`\n-  --> $DIR/loop.rs:21:22\n-   |\n-LL |     const BAR: i32 = loop { break 4; };\n-   |                      ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error: aborting due to 15 previous errors\n-\n-Some errors have detailed explanations: E0658, E0744.\n-For more information about an error, try `rustc --explain E0658`."}, {"sha": "754a1d7c2a3a7bba5c2513fc773f7444d751333e", "filename": "src/test/ui/consts/min_const_fn/loop_ice.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7c46e4251219c25582f26b7838958a04b4b50bc6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c46e4251219c25582f26b7838958a04b4b50bc6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.rs?ref=7c46e4251219c25582f26b7838958a04b4b50bc6", "patch": "@@ -1,5 +0,0 @@\n-const fn foo() {\n-    loop {} //~ ERROR `loop` is not allowed in a `const fn`\n-}\n-\n-fn main() {}"}, {"sha": "f48b7396e77c6ca4d064d184535a6c952416f890", "filename": "src/test/ui/consts/min_const_fn/loop_ice.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c46e4251219c25582f26b7838958a04b4b50bc6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c46e4251219c25582f26b7838958a04b4b50bc6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr?ref=7c46e4251219c25582f26b7838958a04b4b50bc6", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: `loop` is not allowed in a `const fn`\n-  --> $DIR/loop_ice.rs:2:5\n-   |\n-LL |     loop {}\n-   |     ^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "3b3a2950942d0bb8640e986c7a4f9292a5b72489", "filename": "src/test/ui/internal/internal-unstable-const.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,12 +1,14 @@\n+// Don't allow unstable features in stable functions without `allow_internal_unstable`.\n+\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #![feature(staged_api)]\n-#![feature(const_loop, const_fn)]\n+#![feature(const_transmute, const_fn)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n-const fn foo() -> i32 {\n-    loop { return 42; } //~ ERROR `loop` is not allowed in a `const fn`\n+pub const fn foo() -> i32 {\n+    unsafe { std::mem::transmute(4u32) } //~ ERROR is not stable as `const fn`\n }\n \n fn main() {}"}, {"sha": "5a2c58f3928dc34d0d754afe9b518cd44c9120d9", "filename": "src/test/ui/internal/internal-unstable-const.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,9 +1,12 @@\n-error[E0744]: `loop` is not allowed in a `const fn`\n-  --> $DIR/internal-unstable-const.rs:9:5\n+error[E0723]: can only call other `const fn` within a `const fn`, but `const std::intrinsics::transmute::<u32, i32>` is not stable as `const fn`\n+  --> $DIR/internal-unstable-const.rs:11:14\n    |\n-LL |     loop { return 42; }\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     unsafe { std::mem::transmute(4u32) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0744`.\n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "0dc588d75c654dfc7338d77ef605ea2140514935", "filename": "src/test/ui/issues/issue-51714.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -10,5 +10,4 @@ fn main() {\n \n     [(); return while let Some(n) = Some(0) {}];\n     //~^ ERROR return statement outside of function body\n-    //~| ERROR `while` is not allowed in a `const`\n }"}, {"sha": "023d9013ab4ed48061d41dc68685977a9888d462", "filename": "src/test/ui/issues/issue-51714.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,12 +1,3 @@\n-error[E0658]: `while` is not allowed in a `const`\n-  --> $DIR/issue-51714.rs:11:17\n-   |\n-LL |     [(); return while let Some(n) = Some(0) {}];\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n-\n error[E0572]: return statement outside of function body\n   --> $DIR/issue-51714.rs:2:14\n    |\n@@ -31,7 +22,6 @@ error[E0572]: return statement outside of function body\n LL |     [(); return while let Some(n) = Some(0) {}];\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0572, E0658.\n-For more information about an error, try `rustc --explain E0572`.\n+For more information about this error, try `rustc --explain E0572`."}, {"sha": "655d4d7400b78a93caeb62d57818207bd73577aa", "filename": "src/test/ui/rfc-2632-const-trait-impl/hir-const-check.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -4,12 +4,13 @@\n #![allow(incomplete_features)]\n \n pub trait MyTrait {\n-    fn method(&self);\n+    fn method(&self) -> Option<()>;\n }\n \n impl const MyTrait for () {\n-    fn method(&self) {\n-        loop {} //~ ERROR `loop` is not allowed in a `const fn`\n+    fn method(&self) -> Option<()> {\n+        Some(())?; //~ ERROR `?` is not allowed in a `const fn`\n+        None\n     }\n }\n "}, {"sha": "8c76d7eb597b6a29c08e42820c934acc1a739bc1", "filename": "src/test/ui/rfc-2632-const-trait-impl/hir-const-check.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,12 +1,9 @@\n-error[E0658]: `loop` is not allowed in a `const fn`\n+error[E0744]: `?` is not allowed in a `const fn`\n   --> $DIR/hir-const-check.rs:12:9\n    |\n-LL |         loop {}\n-   |         ^^^^^^^\n-   |\n-   = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n-   = help: add `#![feature(const_loop)]` to the crate attributes to enable\n+LL |         Some(())?;\n+   |         ^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0744`."}, {"sha": "8b4e2d21331cd9e6ca0ff31fa88601ac8c7d3148", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.fixed?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,7 +1,5 @@\n // run-rustfix\n \n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool, deprecated)]"}, {"sha": "b0904e41b6f43d976137e46fd8205e55e779dcd9", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,7 +1,5 @@\n // run-rustfix\n \n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool, deprecated)]"}, {"sha": "51a6f4350d32c3f4daaf15fdcd0b95034dabb029", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,73 +1,73 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:10:12\n+  --> $DIR/redundant_pattern_matching.rs:8:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:12:12\n+  --> $DIR/redundant_pattern_matching.rs:10:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:14:12\n+  --> $DIR/redundant_pattern_matching.rs:12:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:16:12\n+  --> $DIR/redundant_pattern_matching.rs:14:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:18:12\n+  --> $DIR/redundant_pattern_matching.rs:16:12\n    |\n LL |     if let Some(_) = Some(42) {\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:24:15\n+  --> $DIR/redundant_pattern_matching.rs:22:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:26:15\n+  --> $DIR/redundant_pattern_matching.rs:24:15\n    |\n LL |     while let None = Some(42) {}\n    |     ----------^^^^----------- help: try this: `while Some(42).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:28:15\n+  --> $DIR/redundant_pattern_matching.rs:26:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:30:15\n+  --> $DIR/redundant_pattern_matching.rs:28:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:32:15\n+  --> $DIR/redundant_pattern_matching.rs:30:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:35:15\n+  --> $DIR/redundant_pattern_matching.rs:33:15\n    |\n LL |     while let Some(_) = v.pop() {\n    |     ----------^^^^^^^---------- help: try this: `while v.pop().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:51:5\n+  --> $DIR/redundant_pattern_matching.rs:49:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -76,7 +76,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:56:5\n+  --> $DIR/redundant_pattern_matching.rs:54:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -85,7 +85,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:61:5\n+  --> $DIR/redundant_pattern_matching.rs:59:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -94,7 +94,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:66:5\n+  --> $DIR/redundant_pattern_matching.rs:64:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -103,7 +103,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:71:5\n+  --> $DIR/redundant_pattern_matching.rs:69:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -112,7 +112,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:76:5\n+  --> $DIR/redundant_pattern_matching.rs:74:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -121,7 +121,7 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:81:13\n+  --> $DIR/redundant_pattern_matching.rs:79:13\n    |\n LL |       let _ = match None::<()> {\n    |  _____________^\n@@ -131,61 +131,61 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:86:20\n+  --> $DIR/redundant_pattern_matching.rs:84:20\n    |\n LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:89:20\n+  --> $DIR/redundant_pattern_matching.rs:87:20\n    |\n LL |     let x = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:95:20\n+  --> $DIR/redundant_pattern_matching.rs:93:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:97:19\n+  --> $DIR/redundant_pattern_matching.rs:95:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:99:19\n+  --> $DIR/redundant_pattern_matching.rs:97:19\n    |\n LL |     } else if let Ok(_) = gen_res() {\n    |            -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:101:19\n+  --> $DIR/redundant_pattern_matching.rs:99:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:134:19\n+  --> $DIR/redundant_pattern_matching.rs:132:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:135:16\n+  --> $DIR/redundant_pattern_matching.rs:133:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:141:12\n+  --> $DIR/redundant_pattern_matching.rs:139:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:142:15\n+  --> $DIR/redundant_pattern_matching.rs:140:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`"}, {"sha": "8a81e92f04a7321f7e579fbafbad134a6be7c49b", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_const_result.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.fixed?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,7 +1,5 @@\n // run-rustfix\n \n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n #![feature(const_result)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(unused)]"}, {"sha": "1cd515441d13a5e1f6c6989f2631510fb8a69cbe", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_const_result.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.rs?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,7 +1,5 @@\n // run-rustfix\n \n-#![feature(const_if_match)]\n-#![feature(const_loop)]\n #![feature(const_result)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(unused)]"}, {"sha": "8ecd72158d33c8c86271578c4e60730199b1b9d0", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_const_result.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d84f0c8d329017c95cbf73418be8e804b0a10472/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.stderr?ref=d84f0c8d329017c95cbf73418be8e804b0a10472", "patch": "@@ -1,31 +1,31 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:12:12\n+  --> $DIR/redundant_pattern_matching_const_result.rs:10:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:14:12\n+  --> $DIR/redundant_pattern_matching_const_result.rs:12:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:16:15\n+  --> $DIR/redundant_pattern_matching_const_result.rs:14:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:18:15\n+  --> $DIR/redundant_pattern_matching_const_result.rs:16:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:20:5\n+  --> $DIR/redundant_pattern_matching_const_result.rs:18:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -34,7 +34,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:25:5\n+  --> $DIR/redundant_pattern_matching_const_result.rs:23:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,"}]}