{"sha": "6310be458f4665f537419f033a764b0644c7e5ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMTBiZTQ1OGY0NjY1ZjUzNzQxOWYwMzNhNzY0YjA2NDRjN2U1YWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-30T01:45:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-30T01:45:50Z"}, "message": "Auto merge of #54601 - cuviper:prep-1.31, r=Mark-Simulacrum\n\nBump to 1.31.0 and bootstrap from 1.30 beta\n\nCloses #54594.", "tree": {"sha": "89427e9623f634be3528a30ca9441475d83b7e58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89427e9623f634be3528a30ca9441475d83b7e58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6310be458f4665f537419f033a764b0644c7e5ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6310be458f4665f537419f033a764b0644c7e5ab", "html_url": "https://github.com/rust-lang/rust/commit/6310be458f4665f537419f033a764b0644c7e5ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6310be458f4665f537419f033a764b0644c7e5ab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0a1ab6374340a4b9ca9f0c6d387763cf163526e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0a1ab6374340a4b9ca9f0c6d387763cf163526e", "html_url": "https://github.com/rust-lang/rust/commit/e0a1ab6374340a4b9ca9f0c6d387763cf163526e"}, {"sha": "d40b6cf086734109ec402aa546eca4d3925732ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d40b6cf086734109ec402aa546eca4d3925732ca", "html_url": "https://github.com/rust-lang/rust/commit/d40b6cf086734109ec402aa546eca4d3925732ca"}], "stats": {"total": 665, "additions": 94, "deletions": 571}, "files": [{"sha": "91bec69cfa401913105aa44418b6b86a88e28fbd", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -24,7 +24,7 @@ use Build;\n use config::Config;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.30.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.31.0\";\n \n pub struct GitInfo {\n     inner: Option<Info>,"}, {"sha": "5f9ceb8599cf51321e4c15542d6708004d2fc7ef", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -76,7 +76,6 @@\n \n #![cfg_attr(not(test), feature(fn_traits))]\n #![cfg_attr(not(test), feature(generator_trait))]\n-#![cfg_attr(not(stage0), feature(nll))]\n #![cfg_attr(test, feature(test))]\n \n #![feature(allocator_api)]\n@@ -87,8 +86,7 @@\n #![feature(box_syntax)]\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n-#![cfg_attr(stage0, feature(const_fn))]\n-#![cfg_attr(not(stage0), feature(min_const_fn))]\n+#![feature(min_const_fn)]\n #![feature(core_intrinsics)]\n #![feature(custom_attribute)]\n #![feature(dropck_eyepatch)]\n@@ -99,6 +97,7 @@\n #![feature(lang_items)]\n #![feature(libc)]\n #![feature(needs_allocator)]\n+#![feature(nll)]\n #![feature(optin_builtin_traits)]\n #![feature(pattern)]\n #![feature(pin)]"}, {"sha": "b9ba319a943caa9d76644d8f12f3538444884d67", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -11,8 +11,7 @@\n #![feature(allocator_api)]\n #![feature(alloc_system)]\n #![feature(box_syntax)]\n-#![cfg_attr(stage0, feature(const_fn))]\n-#![cfg_attr(not(stage0), feature(min_const_fn))]\n+#![feature(min_const_fn)]\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]\n #![feature(pattern)]"}, {"sha": "0065e84a7ad1a88a14199ff8035483c8b3dcf73e", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -16,7 +16,7 @@\n #![feature(core_intrinsics)]\n #![feature(libc)]\n #![feature(linkage)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n #![cfg_attr(dummy_jemalloc, allow(dead_code, unused_extern_crates))]\n@@ -90,15 +90,13 @@ mod contents {\n     // ABI\n \n     #[rustc_std_internal_symbol]\n-    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rde_alloc(size: usize, align: usize) -> *mut u8 {\n         let flags = align_to_flags(align, size);\n         let ptr = mallocx(size as size_t, flags) as *mut u8;\n         ptr\n     }\n \n     #[rustc_std_internal_symbol]\n-    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rde_dealloc(ptr: *mut u8,\n                                        size: usize,\n                                        align: usize) {\n@@ -107,7 +105,6 @@ mod contents {\n     }\n \n     #[rustc_std_internal_symbol]\n-    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rde_realloc(ptr: *mut u8,\n                                        _old_size: usize,\n                                        align: usize,\n@@ -118,7 +115,6 @@ mod contents {\n     }\n \n     #[rustc_std_internal_symbol]\n-    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rde_alloc_zeroed(size: usize, align: usize) -> *mut u8 {\n         let ptr = if align <= MIN_ALIGN && align <= size {\n             calloc(size as size_t, 1) as *mut u8"}, {"sha": "3ef03ec6d585aa268ff3e519e34aaf4a0605dc06", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -17,7 +17,7 @@\n \n #![feature(allocator_api)]\n #![feature(core_intrinsics)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n #![cfg_attr(any(unix, target_os = \"cloudabi\", target_os = \"redox\"), feature(libc))]"}, {"sha": "b02ae75eff86b99b11f49c2b4debb7215eef19d0", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -26,7 +26,7 @@\n #![feature(alloc)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(raw_vec_internals)]\n #![cfg_attr(test, feature(test))]\n "}, {"sha": "94e84106328e2fea26e43e8c21300c8a817a355f", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -91,7 +91,7 @@\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n #![feature(never_type)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(exhaustive_patterns)]\n #![feature(macro_at_most_once_rep)]\n #![feature(no_core)]"}, {"sha": "9871f4966786db6c9adb64b46571690d4425dcce", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -285,19 +285,10 @@ pub fn forget<T>(t: T) {\n /// [alignment]: ./fn.align_of.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(not(stage0))]\n pub const fn size_of<T>() -> usize {\n     intrinsics::size_of::<T>()\n }\n \n-#[inline]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(stage0)]\n-/// Ceci n'est pas la documentation\n-pub const fn size_of<T>() -> usize {\n-    unsafe { intrinsics::size_of::<T>() }\n-}\n-\n /// Returns the size of the pointed-to value in bytes.\n ///\n /// This is usually the same as `size_of::<T>()`. However, when `T` *has* no\n@@ -343,20 +334,10 @@ pub fn size_of_val<T: ?Sized>(val: &T) -> usize {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(reason = \"use `align_of` instead\", since = \"1.2.0\")]\n-#[cfg(not(stage0))]\n pub fn min_align_of<T>() -> usize {\n     intrinsics::min_align_of::<T>()\n }\n \n-#[inline]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(reason = \"use `align_of` instead\", since = \"1.2.0\")]\n-#[cfg(stage0)]\n-/// Ceci n'est pas la documentation\n-pub fn min_align_of<T>() -> usize {\n-    unsafe { intrinsics::min_align_of::<T>() }\n-}\n-\n /// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.\n ///\n /// Every reference to a value of the type `T` must be a multiple of this number.\n@@ -395,19 +376,10 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(not(stage0))]\n pub const fn align_of<T>() -> usize {\n     intrinsics::min_align_of::<T>()\n }\n \n-#[inline]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(stage0)]\n-/// Ceci n'est pas la documentation\n-pub const fn align_of<T>() -> usize {\n-    unsafe { intrinsics::min_align_of::<T>() }\n-}\n-\n /// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.\n ///\n /// Every reference to a value of the type `T` must be a multiple of this number."}, {"sha": "118e75e1ee70469bb275185650ab904a0effc251", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -14,8 +14,7 @@ use ops::CoerceUnsized;\n \n /// A wrapper type for raw pointers and integers that will never be\n /// NULL or 0 that might allow certain optimizations.\n-#[cfg_attr(stage0, lang = \"non_zero\")]\n-#[cfg_attr(not(stage0), rustc_layout_scalar_valid_range_start(1))]\n+#[rustc_layout_scalar_valid_range_start(1)]\n #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n #[repr(transparent)]\n pub(crate) struct NonZero<T>(pub(crate) T);"}, {"sha": "f054580cba7bc02cd6a1a35d35f24c13df637397", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 405, "changes": 406, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -348,14 +348,6 @@ $EndFeature, \"\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn rotate_left(self, n: u32) -> Self {\n-            (self as $UnsignedT).rotate_left(n) as Self\n-        }\n-\n         doc_comment! {\n             concat!(\"Shifts the bits to the left by a specified amount, `n`,\n wrapping the truncated bits to the end of the resulting integer.\n@@ -375,20 +367,11 @@ assert_eq!(n.rotate_left(\", $rot, \"), m);\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_int_rotate\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn rotate_left(self, n: u32) -> Self {\n                 (self as $UnsignedT).rotate_left(n) as Self\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn rotate_right(self, n: u32) -> Self {\n-            (self as $UnsignedT).rotate_right(n) as Self\n-        }\n-\n         doc_comment! {\n             concat!(\"Shifts the bits to the right by a specified amount, `n`,\n wrapping the truncated bits to the beginning of the resulting\n@@ -409,7 +392,6 @@ assert_eq!(n.rotate_right(\", $rot, \"), m);\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_int_rotate\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn rotate_right(self, n: u32) -> Self {\n                 (self as $UnsignedT).rotate_right(n) as Self\n             }\n@@ -437,14 +419,6 @@ assert_eq!(m, \", $swapped, \");\n             }\n         }\n \n-        /// no docs here\n-        #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn reverse_bits(self) -> Self {\n-            (self as $UnsignedT).reverse_bits() as Self\n-        }\n-\n         doc_comment! {\n             concat!(\"Reverses the bit pattern of the integer.\n \n@@ -463,7 +437,6 @@ assert_eq!(m, \", $reversed, \");\n             #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn reverse_bits(self) -> Self {\n                 (self as $UnsignedT).reverse_bits() as Self\n             }\n@@ -1014,16 +987,6 @@ $EndFeature, \"\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn wrapping_add(self, rhs: Self) -> Self {\n-            unsafe {\n-                intrinsics::overflowing_add(self, rhs)\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Wrapping (modular) addition. Computes `self + rhs`, wrapping around at the\n boundary of the type.\n@@ -1041,24 +1004,13 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n                 unsafe {\n                     intrinsics::overflowing_add(self, rhs)\n                 }\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn wrapping_sub(self, rhs: Self) -> Self {\n-            unsafe {\n-                intrinsics::overflowing_sub(self, rhs)\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around at the\n boundary of the type.\n@@ -1076,24 +1028,13 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n                 unsafe {\n                     intrinsics::overflowing_sub(self, rhs)\n                 }\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn wrapping_mul(self, rhs: Self) -> Self {\n-            unsafe {\n-                intrinsics::overflowing_mul(self, rhs)\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Wrapping (modular) multiplication. Computes `self * rhs`, wrapping around at\n the boundary of the type.\n@@ -1110,7 +1051,6 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn wrapping_mul(self, rhs: Self) -> Self {\n                 unsafe {\n                     intrinsics::overflowing_mul(self, rhs)\n@@ -1254,16 +1194,6 @@ $EndFeature, \"\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn wrapping_shl(self, rhs: u32) -> Self {\n-            unsafe {\n-                intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes\n any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.\n@@ -1285,24 +1215,13 @@ $EndFeature, \"\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n             #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn wrapping_shl(self, rhs: u32) -> Self {\n                 unsafe {\n                     intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)\n                 }\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn wrapping_shr(self, rhs: u32) -> Self {\n-            unsafe {\n-                intrinsics::unchecked_shr(self, (rhs & ($BITS - 1)) as $SelfT)\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask`\n removes any high-order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.\n@@ -1324,7 +1243,6 @@ $EndFeature, \"\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n             #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn wrapping_shr(self, rhs: u32) -> Self {\n                 unsafe {\n                     intrinsics::unchecked_shr(self, (rhs & ($BITS - 1)) as $SelfT)\n@@ -1403,18 +1321,6 @@ $EndFeature, \"\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn overflowing_add(self, rhs: Self) -> (Self, bool) {\n-            let (a, b) = unsafe {\n-                intrinsics::add_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT)\n-            };\n-            (a as Self, b)\n-        }\n-\n         doc_comment! {\n             concat!(\"Calculates `self` + `rhs`\n \n@@ -1435,7 +1341,6 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (\", stringify!($Sel\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n             #[rustc_const_unstable(feature = \"const_int_overflowing\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {\n                 let (a, b) = unsafe {\n                     intrinsics::add_with_overflow(self as $ActualT,\n@@ -1445,18 +1350,6 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (\", stringify!($Sel\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn overflowing_sub(self, rhs: Self) -> (Self, bool) {\n-            let (a, b) = unsafe {\n-                intrinsics::sub_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT)\n-            };\n-            (a as Self, b)\n-        }\n-\n         doc_comment! {\n             concat!(\"Calculates `self` - `rhs`\n \n@@ -1477,7 +1370,6 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_sub(1), (\", stringify!($Sel\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n             #[rustc_const_unstable(feature = \"const_int_overflowing\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {\n                 let (a, b) = unsafe {\n                     intrinsics::sub_with_overflow(self as $ActualT,\n@@ -1487,18 +1379,6 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_sub(1), (\", stringify!($Sel\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn overflowing_mul(self, rhs: Self) -> (Self, bool) {\n-            let (a, b) = unsafe {\n-                intrinsics::mul_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT)\n-            };\n-            (a as Self, b)\n-        }\n-\n         doc_comment! {\n             concat!(\"Calculates the multiplication of `self` and `rhs`.\n \n@@ -1517,7 +1397,6 @@ $EndFeature, \"\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n             #[rustc_const_unstable(feature = \"const_int_overflowing\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {\n                 let (a, b) = unsafe {\n                     intrinsics::mul_with_overflow(self as $ActualT,\n@@ -1688,14 +1567,6 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_neg(), (\", stringify!($Self\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n-            (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))\n-        }\n-\n         doc_comment! {\n             concat!(\"Shifts self left by `rhs` bits.\n \n@@ -1715,20 +1586,11 @@ $EndFeature, \"\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n             #[rustc_const_unstable(feature = \"const_int_overflowing\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n                 (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n-            (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))\n-        }\n-\n         doc_comment! {\n             concat!(\"Shifts self right by `rhs` bits.\n \n@@ -1748,7 +1610,6 @@ $EndFeature, \"\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n             #[rustc_const_unstable(feature = \"const_int_overflowing\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n                 (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))\n             }\n@@ -2013,12 +1874,6 @@ $EndFeature, \"\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn is_positive(self) -> bool { self > 0 }\n-\n         doc_comment! {\n             concat!(\"Returns `true` if `self` is positive and `false` if the number is zero or\n negative.\n@@ -2035,16 +1890,9 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_int_sign\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn is_positive(self) -> bool { self > 0 }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn is_negative(self) -> bool { self < 0 }\n-\n         doc_comment! {\n             concat!(\"Returns `true` if `self` is negative and `false` if the number is zero or\n positive.\n@@ -2061,18 +1909,9 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_int_sign\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn is_negative(self) -> bool { self < 0 }\n         }\n \n-        /// no docs here\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-            self.to_be().to_ne_bytes()\n-        }\n-\n         doc_comment! {\n             concat!(\"Return the memory representation of this integer as a byte array in\n big-endian (network) byte order.\n@@ -2088,20 +1927,11 @@ assert_eq!(bytes, \", $be_bytes, \");\n             #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n             }\n         }\n \n-        /// no docs here\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-            self.to_le().to_ne_bytes()\n-        }\n-\n doc_comment! {\n             concat!(\"Return the memory representation of this integer as a byte array in\n little-endian byte order.\n@@ -2117,20 +1947,11 @@ assert_eq!(bytes, \", $le_bytes, \");\n             #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n             }\n         }\n \n-        /// no docs here\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-            unsafe { mem::transmute(self) }\n-        }\n-\n         doc_comment! {\n             concat!(\"\n Return the memory representation of this integer as a byte array in\n@@ -2158,20 +1979,11 @@ assert_eq!(bytes, if cfg!(target_endian = \\\"big\\\") {\n             #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 unsafe { mem::transmute(self) }\n             }\n         }\n \n-        /// no docs here\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-            Self::from_be(Self::from_ne_bytes(bytes))\n-        }\n-\n doc_comment! {\n             concat!(\"Create an integer value from its representation as a byte array in\n big endian.\n@@ -2187,20 +1999,11 @@ assert_eq!(value, \", $swap_op, \");\n             #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n             }\n         }\n \n-        /// no docs here\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-            Self::from_le(Self::from_ne_bytes(bytes))\n-        }\n-\n doc_comment! {\n             concat!(\"\n Create an integer value from its representation as a byte array in\n@@ -2217,20 +2020,11 @@ assert_eq!(value, \", $swap_op, \");\n             #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n             }\n         }\n \n-        /// no docs here\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-            unsafe { mem::transmute(bytes) }\n-        }\n-\n         doc_comment! {\n             concat!(\"Create an integer value from its memory representation as a byte\n array in native endianness.\n@@ -2257,7 +2051,6 @@ assert_eq!(value, \", $swap_op, \");\n             #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 unsafe { mem::transmute(bytes) }\n             }\n@@ -2486,16 +2279,6 @@ assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn rotate_left(self, n: u32) -> Self {\n-            // Protect against undefined behaviour for over-long bit shifts\n-            let n = n % $BITS;\n-            (self << n) | (self >> (($BITS - n) % $BITS))\n-        }\n-\n         doc_comment! {\n             concat!(\"Shifts the bits to the left by a specified amount, `n`,\n wrapping the truncated bits to the end of the resulting integer.\n@@ -2515,22 +2298,11 @@ assert_eq!(n.rotate_left(\", $rot, \"), m);\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_int_rotate\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn rotate_left(self, n: u32) -> Self {\n                 (self << (n % $BITS)) | (self >> (($BITS - (n % $BITS)) % $BITS))\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn rotate_right(self, n: u32) -> Self {\n-            // Protect against undefined behaviour for over-long bit shifts\n-            let n = n % $BITS;\n-            (self >> n) | (self << (($BITS - n) % $BITS))\n-        }\n-\n         doc_comment! {\n             concat!(\"Shifts the bits to the right by a specified amount, `n`,\n wrapping the truncated bits to the beginning of the resulting\n@@ -2551,7 +2323,6 @@ assert_eq!(n.rotate_right(\", $rot, \"), m);\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_int_rotate\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn rotate_right(self, n: u32) -> Self {\n                 (self >> (n % $BITS)) | (self << (($BITS - (n % $BITS)) % $BITS))\n             }\n@@ -2579,14 +2350,6 @@ assert_eq!(m, \", $swapped, \");\n             }\n         }\n \n-        /// no docs here\n-        #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn reverse_bits(self) -> Self {\n-            unsafe { intrinsics::bitreverse(self as $ActualT) as Self }\n-        }\n-\n         doc_comment! {\n             concat!(\"Reverses the bit pattern of the integer.\n \n@@ -2605,7 +2368,6 @@ assert_eq!(m, \", $reversed, \");\n             #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn reverse_bits(self) -> Self {\n                 unsafe { intrinsics::bitreverse(self as $ActualT) as Self }\n             }\n@@ -3094,16 +2856,6 @@ $EndFeature, \"\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn wrapping_add(self, rhs: Self) -> Self {\n-            unsafe {\n-                intrinsics::overflowing_add(self, rhs)\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Wrapping (modular) addition. Computes `self + rhs`,\n wrapping around at the boundary of the type.\n@@ -3120,24 +2872,13 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n                 unsafe {\n                     intrinsics::overflowing_add(self, rhs)\n                 }\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn wrapping_sub(self, rhs: Self) -> Self {\n-            unsafe {\n-                intrinsics::overflowing_sub(self, rhs)\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Wrapping (modular) subtraction. Computes `self - rhs`,\n wrapping around at the boundary of the type.\n@@ -3154,24 +2895,13 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n                 unsafe {\n                     intrinsics::overflowing_sub(self, rhs)\n                 }\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn wrapping_mul(self, rhs: Self) -> Self {\n-            unsafe {\n-                intrinsics::overflowing_mul(self, rhs)\n-            }\n-        }\n-\n         /// Wrapping (modular) multiplication. Computes `self *\n         /// rhs`, wrapping around at the boundary of the type.\n         ///\n@@ -3189,7 +2919,6 @@ $EndFeature, \"\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n         #[inline]\n-        #[cfg(not(stage0))]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n             unsafe {\n                 intrinsics::overflowing_mul(self, rhs)\n@@ -3311,16 +3040,6 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_mod_euc(10), 0);\n             self.overflowing_neg().0\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn wrapping_shl(self, rhs: u32) -> Self {\n-            unsafe {\n-                intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Panic-free bitwise shift-left; yields `self << mask(rhs)`,\n where `mask` removes any high-order bits of `rhs` that\n@@ -3344,24 +3063,13 @@ assert_eq!(1\", stringify!($SelfT), \".wrapping_shl(128), 1);\", $EndFeature, \"\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n             #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn wrapping_shl(self, rhs: u32) -> Self {\n                 unsafe {\n                     intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)\n                 }\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn wrapping_shr(self, rhs: u32) -> Self {\n-            unsafe {\n-                intrinsics::unchecked_shr(self, (rhs & ($BITS - 1)) as $SelfT)\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n where `mask` removes any high-order bits of `rhs` that\n@@ -3385,7 +3093,6 @@ assert_eq!(128\", stringify!($SelfT), \".wrapping_shr(128), 128);\", $EndFeature, \"\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n             #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn wrapping_shr(self, rhs: u32) -> Self {\n                 unsafe {\n                     intrinsics::unchecked_shr(self, (rhs & ($BITS - 1)) as $SelfT)\n@@ -3431,18 +3138,6 @@ assert_eq!(3u8.wrapping_pow(6), 217);\", $EndFeature, \"\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn overflowing_add(self, rhs: Self) -> (Self, bool) {\n-            let (a, b) = unsafe {\n-                intrinsics::add_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT)\n-            };\n-            (a as Self, b)\n-        }\n-\n         doc_comment! {\n             concat!(\"Calculates `self` + `rhs`\n \n@@ -3463,7 +3158,6 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (0, true));\", $EndF\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n             #[rustc_const_unstable(feature = \"const_int_overflowing\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {\n                 let (a, b) = unsafe {\n                     intrinsics::add_with_overflow(self as $ActualT,\n@@ -3473,18 +3167,6 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (0, true));\", $EndF\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn overflowing_sub(self, rhs: Self) -> (Self, bool) {\n-            let (a, b) = unsafe {\n-                intrinsics::sub_with_overflow(self as $ActualT,\n-                                                rhs as $ActualT)\n-            };\n-            (a as Self, b)\n-        }\n-\n         doc_comment! {\n             concat!(\"Calculates `self` - `rhs`\n \n@@ -3506,7 +3188,6 @@ $EndFeature, \"\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n             #[rustc_const_unstable(feature = \"const_int_overflowing\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {\n                 let (a, b) = unsafe {\n                     intrinsics::sub_with_overflow(self as $ActualT,\n@@ -3516,18 +3197,6 @@ $EndFeature, \"\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn overflowing_mul(self, rhs: Self) -> (Self, bool) {\n-            let (a, b) = unsafe {\n-                intrinsics::mul_with_overflow(self as $ActualT,\n-                                              rhs as $ActualT)\n-            };\n-            (a as Self, b)\n-        }\n-\n         /// Calculates the multiplication of `self` and `rhs`.\n         ///\n         /// Returns a tuple of the multiplication along with a boolean\n@@ -3548,7 +3217,6 @@ $EndFeature, \"\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_unstable(feature = \"const_int_overflowing\")]\n         #[inline]\n-        #[cfg(not(stage0))]\n         pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {\n             let (a, b) = unsafe {\n                 intrinsics::mul_with_overflow(self as $ActualT,\n@@ -3687,14 +3355,6 @@ assert_eq!(2\", stringify!($SelfT), \".overflowing_neg(), (-2i32 as \", stringify!(\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n-            (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))\n-        }\n-\n         doc_comment! {\n             concat!(\"Shifts self left by `rhs` bits.\n \n@@ -3715,20 +3375,11 @@ assert_eq!(0x1\", stringify!($SelfT), \".overflowing_shl(132), (0x10, true));\", $E\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n             #[rustc_const_unstable(feature = \"const_int_overflowing\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n                 (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))\n             }\n         }\n \n-        /// no docs here\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n-            (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))\n-        }\n-\n         doc_comment! {\n             concat!(\"Shifts self right by `rhs` bits.\n \n@@ -3749,7 +3400,6 @@ assert_eq!(0x10\", stringify!($SelfT), \".overflowing_shr(132), (0x1, true));\", $E\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n             #[rustc_const_unstable(feature = \"const_int_overflowing\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n                 (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))\n             }\n@@ -3992,15 +3642,7 @@ $EndFeature, \"\n             }\n         }\n \n-        /// no docs here\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-            self.to_be().to_ne_bytes()\n-        }\n-\n-                doc_comment! {\n+        doc_comment! {\n             concat!(\"Return the memory representation of this integer as a byte array in\n big-endian (network) byte order.\n \n@@ -4015,20 +3657,11 @@ assert_eq!(bytes, \", $be_bytes, \");\n             #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n             }\n         }\n \n-        /// no docs here\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-            self.to_le().to_ne_bytes()\n-        }\n-\n         doc_comment! {\n             concat!(\"Return the memory representation of this integer as a byte array in\n little-endian byte order.\n@@ -4044,20 +3677,11 @@ assert_eq!(bytes, \", $le_bytes, \");\n             #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n             }\n         }\n \n-        /// no docs here\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-            unsafe { mem::transmute(self) }\n-        }\n-\n         doc_comment! {\n             concat!(\"\n Return the memory representation of this integer as a byte array in\n@@ -4085,20 +3709,11 @@ assert_eq!(bytes, if cfg!(target_endian = \\\"big\\\") {\n             #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 unsafe { mem::transmute(self) }\n             }\n         }\n \n-        /// no docs here\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-            Self::from_be(Self::from_ne_bytes(bytes))\n-        }\n-\n         doc_comment! {\n             concat!(\"Create an integer value from its representation as a byte array in\n big endian.\n@@ -4114,20 +3729,11 @@ assert_eq!(value, \", $swap_op, \");\n             #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n             }\n         }\n \n-        /// no docs here\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-            Self::from_le(Self::from_ne_bytes(bytes))\n-        }\n-\n         doc_comment! {\n             concat!(\"\n Create an integer value from its representation as a byte array in\n@@ -4144,20 +3750,11 @@ assert_eq!(value, \", $swap_op, \");\n             #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n             }\n         }\n \n-        /// no docs here\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[inline]\n-        #[cfg(stage0)]\n-        pub fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-            unsafe { mem::transmute(bytes) }\n-        }\n-\n         doc_comment! {\n             concat!(\"Create an integer value from its memory representation as a byte\n array in native endianness.\n@@ -4184,7 +3781,6 @@ assert_eq!(value, \", $swap_op, \");\n             #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n-            #[cfg(not(stage0))]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 unsafe { mem::transmute(bytes) }\n             }"}, {"sha": "2a38464d7c1ee3ca742888d52669641cd5b567b3", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -20,7 +20,7 @@\n        html_playground_url = \"https://play.rust-lang.org/\",\n        test(attr(deny(warnings))))]\n \n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n \n pub use self::Piece::*;\n pub use self::Position::*;"}, {"sha": "7acadc32048bd8a49627ae0d0a107a42bc9eaa36", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -288,7 +288,7 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        test(attr(allow(unused_variables), deny(warnings))))]\n \n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(str_escape)]\n \n use self::LabelText::*;"}, {"sha": "cf05e56e53c8464e4e9a1c5dc11b824d7e234d06", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -24,14 +24,13 @@\n \n #![feature(core_intrinsics)]\n #![feature(libc)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(panic_runtime)]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n \n // Rust's \"try\" function, but if we're aborting on panics we just call the\n // function as there's nothing else we need to do here.\n-#[cfg_attr(stage0, no_mangle)]\n #[rustc_std_internal_symbol]\n pub unsafe extern fn __rust_maybe_catch_panic(f: fn(*mut u8),\n                                               data: *mut u8,\n@@ -51,7 +50,6 @@ pub unsafe extern fn __rust_maybe_catch_panic(f: fn(*mut u8),\n // which would break compat with XP. For now just use `intrinsics::abort` which\n // will kill us with an illegal instruction, which will do a good enough job for\n // now hopefully.\n-#[cfg_attr(stage0, no_mangle)]\n #[rustc_std_internal_symbol]\n pub unsafe extern fn __rust_start_panic(_payload: usize) -> u32 {\n     abort();"}, {"sha": "cfe671c626bcf040b14c4b5dd328ddd535783232", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -34,7 +34,7 @@\n #![feature(core_intrinsics)]\n #![feature(lang_items)]\n #![feature(libc)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(panic_unwind)]\n #![feature(raw)]\n #![feature(staged_api)]"}, {"sha": "34a44bd14214865e6017da816916028310da55b3", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -27,7 +27,7 @@\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(lang_items)]"}, {"sha": "8678330a5a09e2b4537d2493c904fe34fdc2480f", "filename": "src/libprofiler_builtins/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibprofiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibprofiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -15,5 +15,5 @@\n             reason = \"internal implementation detail of rustc right now\",\n             issue = \"0\")]\n #![allow(unused_features)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(staged_api)]"}, {"sha": "b8731e5bb03d55f3adfd0d75accbdac08cb6651d", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -42,24 +42,21 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![cfg_attr(stage0, feature(const_fn))]\n-#![cfg_attr(not(stage0), feature(min_const_fn))]\n+#![feature(min_const_fn)]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n #![cfg_attr(windows, feature(libc))]\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(extern_types)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(non_exhaustive)]\n #![feature(proc_macro_internals)]\n #![feature(quote)]\n #![feature(optin_builtin_traits)]\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_attrs)]\n-#![cfg_attr(stage0, feature(attr_literals))]\n #![feature(slice_patterns)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(specialization)]\n@@ -70,10 +67,9 @@\n #![feature(step_trait)]\n #![feature(integer_atomics)]\n #![feature(test)]\n-#![cfg_attr(not(stage0), feature(impl_header_lifetime_elision))]\n+#![feature(impl_header_lifetime_elision)]\n #![feature(in_band_lifetimes)]\n #![feature(macro_at_most_once_rep)]\n-#![cfg_attr(stage0, feature(crate_in_paths))]\n #![feature(crate_visibility_modifier)]\n \n #![recursion_limit=\"512\"]"}, {"sha": "191fa0bc7c56609d9f49bd056680cd6836ceebb9", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -168,8 +168,6 @@ impl_stable_hash_for!(struct ::middle::region::FirstStatementIndex { private });\n \n // compilation error if size of `ScopeData` is not the same as a `u32`\n #[allow(dead_code)]\n-// only works on stage 1 when the rustc_layout_scalar_valid_range attribute actually exists\n-#[cfg(not(stage0))]\n static ASSERT: () = [()][!(mem::size_of::<ScopeData>() == 4) as usize];\n \n impl Scope {"}, {"sha": "9195a426bee8fa33004d1983fbfb5f3532b3511e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -829,10 +829,10 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n impl<'tcx> CommonTypes<'tcx> {\n     fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {\n         // Ensure our type representation does not grow\n-        #[cfg(all(not(stage0), target_pointer_width = \"64\"))]\n+        #[cfg(target_pointer_width = \"64\")]\n         #[allow(dead_code)]\n         static ASSERT_TY_KIND: () = [()][!(::std::mem::size_of::<ty::TyKind>() <= 24) as usize];\n-        #[cfg(all(not(stage0), target_pointer_width = \"64\"))]\n+        #[cfg(target_pointer_width = \"64\")]\n         #[allow(dead_code)]\n         static ASSERT_TYS: () = [()][!(::std::mem::size_of::<ty::TyS>() <= 32) as usize];\n "}, {"sha": "a2017a4ed0ff93dc961f4a87e2560eb2af1d0a6d", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(rustc_private)]\n \n #[macro_use] extern crate log;"}, {"sha": "6ea722ba769c16181aac010ec8c025bd2eb9e5d2", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -45,7 +45,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![forbid(unsafe_code)]\n \n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(try_from)]\n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]"}, {"sha": "7b845e631ffa341d88db3950e9748e75558e063b", "filename": "src/librustc_asan/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_asan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_asan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -10,7 +10,7 @@\n \n #![sanitizer_runtime]\n #![feature(alloc_system)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "049c4b2bd92d88a8252da9052033c2ea3968612f", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -14,7 +14,7 @@\n \n #![allow(non_camel_case_types)]\n \n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(quote)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "71d739222b60a1adf17a11084af8f11da282b219", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -26,7 +26,7 @@\n #![feature(in_band_lifetimes)]\n #![allow(unused_attributes)]\n #![feature(libc)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(quote)]\n #![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "03b3b20a4e772cd6467d4a00f45a44ce71c9a614", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -19,7 +19,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(custom_attribute)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![allow(unused_attributes)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "1fe70fa23b7a232684494e3385b418049702a7aa", "filename": "src/librustc_cratesio_shim/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -11,7 +11,7 @@\n // See Cargo.toml for a comment explaining this crate.\n #![allow(unused_extern_crates)]\n \n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n \n extern crate bitflags;\n extern crate log;"}, {"sha": "c592a5eb1e043d77c231eb5b6adf575d3150fed2", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -27,8 +27,7 @@\n #![feature(unsize)]\n #![feature(specialization)]\n #![feature(optin_builtin_traits)]\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(allow_internal_unstable)]\n #![feature(vec_resize_with)]\n "}, {"sha": "b97f5868079c4cd576581c88e62ee4fdbfb2b2e5", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -20,7 +20,7 @@\n \n #![feature(box_syntax)]\n #![cfg_attr(unix, feature(libc))]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(option_replace)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "12f1a43ed05338cd91420236df25cfd2df06b29d", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -16,7 +16,7 @@\n #![allow(unused_attributes)]\n #![feature(range_contains)]\n #![cfg_attr(unix, feature(libc))]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(optin_builtin_traits)]\n \n extern crate atty;"}, {"sha": "d0897a9618276fcdc2e07e36bc0a6f95d41adf76", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -14,7 +14,7 @@\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(specialization)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "98d4c87dc3b5e810159c8c271c07ecd36f77ad78", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -26,8 +26,7 @@\n #![cfg_attr(test, feature(test))]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(macro_at_most_once_rep)]"}, {"sha": "1c48d84473921b79c98689c83b73b524e171688b", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(static_nobundle)]\n \n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "7b845e631ffa341d88db3950e9748e75558e063b", "filename": "src/librustc_lsan/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_lsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_lsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -10,7 +10,7 @@\n \n #![sanitizer_runtime]\n #![feature(alloc_system)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "7008166b9035d7248c9f29997315a768c97e1a3a", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -15,7 +15,7 @@\n #![feature(box_patterns)]\n #![feature(libc)]\n #![feature(macro_at_most_once_rep)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![feature(quote)]"}, {"sha": "b3ef9eab8017da0f444876def3ea5a1dada7bb6e", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -25,12 +25,10 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(core_intrinsics)]\n #![feature(const_fn)]\n #![feature(decl_macro)]\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n #![feature(exhaustive_patterns)]\n #![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_attrs)]\n-#![cfg_attr(stage0, feature(attr_literals))]\n #![feature(never_type)]\n #![feature(specialization)]\n #![feature(try_trait)]"}, {"sha": "7b845e631ffa341d88db3950e9748e75558e063b", "filename": "src/librustc_msan/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_msan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_msan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -10,7 +10,7 @@\n \n #![sanitizer_runtime]\n #![feature(alloc_system)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "42ead92783d7af2a424e713bdf92df85fc7510c5", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -18,7 +18,7 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n \n #[macro_use]"}, {"sha": "ca2628078178ba04857c16a3a7afc9a96809c444", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(nonstandard_style)]\n \n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n \n pub struct Intrinsic {\n     pub inputs: &'static [&'static Type],"}, {"sha": "2cc3f1efcb5f40b0a57b3d3b2cc95f87cec47ed0", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -64,7 +64,7 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n \n #[macro_use] extern crate syntax;"}, {"sha": "60679d6d4304eb508c231fe69bf3b98ccddc9ec6", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -12,7 +12,7 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "a68c89deea5b6a070c7be0e57c6f8cf9117ecc47", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -13,7 +13,7 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]\n "}, {"sha": "1148daef8e39120f9b684c262e86ab7596815c56", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -12,7 +12,7 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(custom_attribute)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![allow(unused_attributes)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "93d61b80847ecb876a10191d554f6f4503a9ac02", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -22,9 +22,8 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(box_syntax)]\n-#![cfg_attr(stage0, feature(const_fn))]\n-#![cfg_attr(not(stage0), feature(min_const_fn))]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(min_const_fn)]\n+#![feature(nll)]\n #![feature(slice_patterns)]\n \n #[macro_use]"}, {"sha": "733804fb9b052c50a908969c3042c76498ae5aa7", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -11,11 +11,9 @@\n //! New recursive solver modeled on Chalk's recursive solver. Most of\n //! the guts are broken up into modules; see the comments in those modules.\n \n-#![cfg_attr(stage0, feature(crate_in_paths))]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(stage0, feature(extern_prelude))]\n #![feature(in_band_lifetimes)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "7b845e631ffa341d88db3950e9748e75558e063b", "filename": "src/librustc_tsan/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_tsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_tsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -10,7 +10,7 @@\n \n #![sanitizer_runtime]\n #![feature(alloc_system)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "1f5998d8ca39514456b8a9ec5488d33a8ea59aa9", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -75,7 +75,7 @@ This API is completely unstable and subject to change.\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n #![feature(exhaustive_patterns)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(quote)]\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "406180c09e8e48b26c0cc7d8ab2ccb732b57d4e1", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -16,7 +16,7 @@\n #![feature(rustc_private)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(set_stdio)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(test)]"}, {"sha": "98b48ef291857dd59a97b2d626f418a2307fde4a", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -24,7 +24,7 @@ Core encoding and decoding interfaces.\n #![feature(core_intrinsics)]\n #![feature(specialization)]\n #![feature(never_type)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![cfg_attr(test, feature(test))]\n \n pub use self::serialize::{Decoder, Encoder, Decodable, Encodable};"}, {"sha": "31fc9ed3f772d3e254a4f103866a072a9ae1d098", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -151,22 +151,19 @@ pub mod __default_lib_allocator {\n     // ABI\n \n     #[rustc_std_internal_symbol]\n-    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rdl_alloc(size: usize, align: usize) -> *mut u8 {\n         let layout = Layout::from_size_align_unchecked(size, align);\n         System.alloc(layout)\n     }\n \n     #[rustc_std_internal_symbol]\n-    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rdl_dealloc(ptr: *mut u8,\n                                        size: usize,\n                                        align: usize) {\n         System.dealloc(ptr, Layout::from_size_align_unchecked(size, align))\n     }\n \n     #[rustc_std_internal_symbol]\n-    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rdl_realloc(ptr: *mut u8,\n                                        old_size: usize,\n                                        align: usize,\n@@ -176,7 +173,6 @@ pub mod __default_lib_allocator {\n     }\n \n     #[rustc_std_internal_symbol]\n-    #[cfg_attr(stage0, no_mangle)]\n     pub unsafe extern fn __rdl_alloc_zeroed(size: usize, align: usize) -> *mut u8 {\n         let layout = Layout::from_size_align_unchecked(size, align);\n         System.alloc_zeroed(layout)"}, {"sha": "7ae4f2de4c36d16789f3d4ace9beb668b6cdc597", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -250,8 +250,7 @@\n #![feature(cfg_target_vendor)]\n #![feature(char_error_internals)]\n #![feature(compiler_builtins_lib)]\n-#![cfg_attr(stage0, feature(const_fn))]\n-#![cfg_attr(not(stage0), feature(min_const_fn))]\n+#![feature(min_const_fn)]\n #![feature(const_int_ops)]\n #![feature(const_ip)]\n #![feature(core_intrinsics)]\n@@ -270,10 +269,9 @@\n #![feature(libc)]\n #![feature(link_args)]\n #![feature(linkage)]\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(exhaustive_patterns)]\n #![feature(on_unimplemented)]\n #![feature(optin_builtin_traits)]\n@@ -286,7 +284,7 @@\n #![feature(rustc_attrs)]\n #![feature(rustc_const_unstable)]\n #![feature(std_internals)]\n-#![feature(stdsimd)]\n+#![cfg_attr(not(stage0), feature(stdsimd))]\n #![feature(shrink_to)]\n #![feature(slice_concat_ext)]\n #![feature(slice_internals)]\n@@ -302,15 +300,12 @@\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n-#![cfg_attr(stage0, feature(use_extern_macros))]\n #![feature(doc_cfg)]\n #![feature(doc_masked)]\n #![feature(doc_spotlight)]\n-#![cfg_attr(all(windows, stage0), feature(used))]\n #![feature(doc_alias)]\n #![feature(doc_keyword)]\n #![feature(panic_info_message)]\n-#![cfg_attr(stage0, feature(panic_implementation))]\n #![feature(non_exhaustive)]\n \n #![default_lib_allocator]"}, {"sha": "df085a7f450b099640410acceff6427440379882", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -319,8 +319,7 @@ pub fn panicking() -> bool {\n \n /// Entry point of panic from the libcore crate.\n #[cfg(not(test))]\n-#[cfg_attr(stage0, panic_implementation)]\n-#[cfg_attr(not(stage0), panic_handler)]\n+#[panic_handler]\n #[unwind(allowed)]\n pub fn rust_begin_panic(info: &PanicInfo) -> ! {\n     continue_panic_fmt(&info)\n@@ -398,7 +397,7 @@ fn continue_panic_fmt(info: &PanicInfo) -> ! {\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n-#[cfg_attr(not(any(stage0, test)), lang = \"begin_panic\")]\n+#[cfg_attr(not(test), lang = \"begin_panic\")]\n #[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u32)) -> ! {\n     // Note that this should be the only allocation performed in this code path."}, {"sha": "9077eca18215c0010d3e57a52570f97b3e44a1bd", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -21,7 +21,7 @@\n \n #![feature(crate_visibility_modifier)]\n #![feature(macro_at_most_once_rep)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(rustc_attrs)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]"}, {"sha": "7c023fc5c9c224f6c723c17471ae1c6bd8906f1b", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -16,7 +16,7 @@\n \n #![feature(proc_macro_internals)]\n #![feature(decl_macro)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(str_escape)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "45eaf1d3190f2f5ac4dc285d9b05b7f873b0629a", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -21,11 +21,11 @@\n #![feature(const_fn)]\n #![feature(crate_visibility_modifier)]\n #![feature(custom_attribute)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(non_exhaustive)]\n #![feature(optin_builtin_traits)]\n #![feature(specialization)]\n-#![feature(stdsimd)]\n+#![cfg_attr(not(stage0), feature(stdsimd))]\n \n use std::borrow::Cow;\n use std::cell::Cell;"}, {"sha": "5ac46c2c5ebdc8cb6fdd32399fba239be8958248", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -50,7 +50,7 @@\n #![cfg_attr(windows, feature(libc))]\n // Handle rustfmt skips\n #![feature(custom_attribute)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![allow(unused_attributes)]\n \n use std::io::prelude::*;"}, {"sha": "0e862bcf5ca46cf10f9d6e49c0775fd0fcac0256", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -35,7 +35,7 @@\n #![feature(asm)]\n #![feature(fnbox)]\n #![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc))]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(set_stdio)]\n #![feature(panic_unwind)]\n #![feature(staged_api)]"}, {"sha": "954eb9d6d03ba81b27c0ed6ed92ca2d0d85e11de", "filename": "src/libunwind/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibunwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Flibunwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flib.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -13,7 +13,7 @@\n \n #![feature(cfg_target_vendor)]\n #![feature(link_cfg)]\n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(staged_api)]\n #![feature(unwind_attributes)]\n #![feature(static_nobundle)]"}, {"sha": "f0967d1ba8ae6d41fe01e773643dba94c25f21e3", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2018-09-11\n+date: 2018-09-23\n rustc: beta\n cargo: beta\n "}, {"sha": "460e28fc794f0f921556e50a2d498641303c55c3", "filename": "src/test/compile-fail-fulldeps/auxiliary/lint_for_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_for_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_for_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_for_crate.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -12,7 +12,6 @@\n \n #![feature(plugin_registrar, rustc_private)]\n #![feature(box_syntax)]\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n #![feature(macro_at_most_once_rep)]\n \n #[macro_use] extern crate rustc;"}, {"sha": "1057649d969d171b2a9bad77cda15d5e52d487a9", "filename": "src/test/compile-fail-fulldeps/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -12,7 +12,6 @@\n \n #![feature(plugin_registrar)]\n #![feature(box_syntax, rustc_private)]\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n #![feature(macro_at_most_once_rep)]\n \n // Load rustc as a plugin to get macros"}, {"sha": "b0183a3c56bc4a5dd4b236ddbf844a7582f0254d", "filename": "src/test/compile-fail-fulldeps/auxiliary/lint_plugin_test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_plugin_test.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -12,7 +12,6 @@\n \n #![feature(plugin_registrar)]\n #![feature(box_syntax, rustc_private)]\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n #![feature(macro_at_most_once_rep)]\n \n extern crate syntax;"}, {"sha": "00c419a8d09e833f02adf03bb4bccda2080809c1", "filename": "src/test/run-pass-fulldeps/auxiliary/lint_for_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flint_for_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flint_for_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flint_for_crate.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -12,7 +12,6 @@\n \n #![feature(plugin_registrar, rustc_private)]\n #![feature(box_syntax)]\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n #![feature(macro_at_most_once_rep)]\n \n #[macro_use] extern crate rustc;"}, {"sha": "e0acf340a79fdfc6faecb27f63c04d322ec81af6", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![feature(box_syntax, plugin, plugin_registrar, rustc_private)]\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n #![feature(macro_at_most_once_rep)]\n #![crate_type = \"dylib\"]\n "}, {"sha": "c5f82ce5f0c0659183c12023debb964f5d181d0d", "filename": "src/test/run-pass/macros/macro-first-set.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-first-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-first-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-first-set.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // run-pass\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n \n //{{{ issue 40569 ==============================================================\n "}, {"sha": "8e68a3c00455f21668d2c48570409f207157efa8", "filename": "src/test/run-pass/macros/macro-pub-matcher.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-pub-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-pub-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-pub-matcher.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -10,7 +10,6 @@\n \n // run-pass\n #![allow(dead_code, unused_imports)]\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n #![feature(crate_visibility_modifier)]\n \n /**"}, {"sha": "1057649d969d171b2a9bad77cda15d5e52d487a9", "filename": "src/test/ui-fulldeps/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -12,7 +12,6 @@\n \n #![feature(plugin_registrar)]\n #![feature(box_syntax, rustc_private)]\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n #![feature(macro_at_most_once_rep)]\n \n // Load rustc as a plugin to get macros"}, {"sha": "b0183a3c56bc4a5dd4b236ddbf844a7582f0254d", "filename": "src/test/ui-fulldeps/auxiliary/lint_plugin_test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_plugin_test.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -12,7 +12,6 @@\n \n #![feature(plugin_registrar)]\n #![feature(box_syntax, rustc_private)]\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n #![feature(macro_at_most_once_rep)]\n \n extern crate syntax;"}, {"sha": "7d2acd7aa4c86b7c106a3ff52f1dec37cfa316e4", "filename": "src/test/ui-fulldeps/auxiliary/lint_tool_test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_tool_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_tool_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_tool_test.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -10,7 +10,6 @@\n \n #![feature(plugin_registrar)]\n #![feature(box_syntax, rustc_private)]\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n #![feature(macro_at_most_once_rep)]\n \n extern crate syntax;"}, {"sha": "a8458ccacc3c041e477ceba116b565e29f00a11c", "filename": "src/test/ui/issues/issue-42755.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui%2Fissues%2Fissue-42755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui%2Fissues%2Fissue-42755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42755.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n \n macro_rules! foo {\n     ($($p:vis)*) => {} //~ ERROR repetition matches empty token tree"}, {"sha": "bdbb99de4608fa22312e92c6bc74718ba8fc0299", "filename": "src/test/ui/issues/issue-42755.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui%2Fissues%2Fissue-42755.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui%2Fissues%2Fissue-42755.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42755.stderr?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -1,5 +1,5 @@\n error: repetition matches empty token tree\n-  --> $DIR/issue-42755.rs:14:7\n+  --> $DIR/issue-42755.rs:13:7\n    |\n LL |     ($($p:vis)*) => {} //~ ERROR repetition matches empty token tree\n    |       ^^^^^^^^"}, {"sha": "b58bbe74c97319aa8cd5d96bd551484119426836", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -16,7 +16,6 @@\n \n // compile-pass\n \n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n \n #![allow(unused)]\n #![warn(unreachable_pub)]"}, {"sha": "ed45ba8e85d46fa151924cbf00ec24437664123d", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -1,20 +1,20 @@\n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:26:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:25:5\n    |\n LL |     pub use std::fmt;\n    |     ---^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `pub(crate)`\n    |\n note: lint level defined here\n-  --> $DIR/unreachable_pub-pub_crate.rs:22:9\n+  --> $DIR/unreachable_pub-pub_crate.rs:21:9\n    |\n LL | #![warn(unreachable_pub)]\n    |         ^^^^^^^^^^^^^^^\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:27:24\n+  --> $DIR/unreachable_pub-pub_crate.rs:26:24\n    |\n LL |     pub use std::env::{Args}; // braced-use has different item spans than unbraced\n    |     ---                ^^^^\n@@ -24,7 +24,7 @@ LL |     pub use std::env::{Args}; // braced-use has different item spans than u\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:29:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:28:5\n    |\n LL |     pub struct Hydrogen {\n    |     ---^^^^^^^^^^^^^^^^\n@@ -34,23 +34,23 @@ LL |     pub struct Hydrogen {\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` field\n-  --> $DIR/unreachable_pub-pub_crate.rs:31:9\n+  --> $DIR/unreachable_pub-pub_crate.rs:30:9\n    |\n LL |         pub neutrons: usize,\n    |         ---^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `pub(crate)`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:37:9\n+  --> $DIR/unreachable_pub-pub_crate.rs:36:9\n    |\n LL |         pub fn count_neutrons(&self) -> usize { self.neutrons }\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `pub(crate)`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:41:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:40:5\n    |\n LL |     pub enum Helium {}\n    |     ---^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL |     pub enum Helium {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:42:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:41:5\n    |\n LL |     pub union Lithium { c1: usize, c2: u8 }\n    |     ---^^^^^^^^^^^^^^\n@@ -70,7 +70,7 @@ LL |     pub union Lithium { c1: usize, c2: u8 }\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:43:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:42:5\n    |\n LL |     pub fn beryllium() {}\n    |     ---^^^^^^^^^^^^^^^\n@@ -80,7 +80,7 @@ LL |     pub fn beryllium() {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:44:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:43:5\n    |\n LL |     pub trait Boron {}\n    |     ---^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL |     pub trait Boron {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:45:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:44:5\n    |\n LL |     pub const CARBON: usize = 1;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -100,7 +100,7 @@ LL |     pub const CARBON: usize = 1;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:46:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:45:5\n    |\n LL |     pub static NITROGEN: usize = 2;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -110,7 +110,7 @@ LL |     pub static NITROGEN: usize = 2;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:47:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:46:5\n    |\n LL |     pub type Oxygen = bool;\n    |     ---^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL |     pub type Oxygen = bool;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:50:47\n+  --> $DIR/unreachable_pub-pub_crate.rs:49:47\n    |\n LL |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -134,7 +134,7 @@ LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:55:9\n+  --> $DIR/unreachable_pub-pub_crate.rs:54:9\n    |\n LL |         pub fn catalyze() -> bool;\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "217e26e44047a5527877f3992cc94cfc830a4220", "filename": "src/test/ui/lint/unreachable_pub.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -11,7 +11,6 @@\n // compile-pass\n \n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(stage0, feature(macro_vis_matcher))]\n \n #![allow(unused)]\n #![warn(unreachable_pub)]"}, {"sha": "e1d00d13717123572e1a9128b583bdd77440c47c", "filename": "src/test/ui/lint/unreachable_pub.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6310be458f4665f537419f033a764b0644c7e5ab/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr?ref=6310be458f4665f537419f033a764b0644c7e5ab", "patch": "@@ -1,20 +1,20 @@\n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:21:5\n+  --> $DIR/unreachable_pub.rs:20:5\n    |\n LL |     pub use std::fmt;\n    |     ---^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `crate`\n    |\n note: lint level defined here\n-  --> $DIR/unreachable_pub.rs:17:9\n+  --> $DIR/unreachable_pub.rs:16:9\n    |\n LL | #![warn(unreachable_pub)]\n    |         ^^^^^^^^^^^^^^^\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:22:24\n+  --> $DIR/unreachable_pub.rs:21:24\n    |\n LL |     pub use std::env::{Args}; // braced-use has different item spans than unbraced\n    |     ---                ^^^^\n@@ -24,7 +24,7 @@ LL |     pub use std::env::{Args}; // braced-use has different item spans than u\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:24:5\n+  --> $DIR/unreachable_pub.rs:23:5\n    |\n LL |     pub struct Hydrogen {\n    |     ---^^^^^^^^^^^^^^^^\n@@ -34,23 +34,23 @@ LL |     pub struct Hydrogen {\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` field\n-  --> $DIR/unreachable_pub.rs:26:9\n+  --> $DIR/unreachable_pub.rs:25:9\n    |\n LL |         pub neutrons: usize,\n    |         ---^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `crate`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:32:9\n+  --> $DIR/unreachable_pub.rs:31:9\n    |\n LL |         pub fn count_neutrons(&self) -> usize { self.neutrons }\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `crate`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:36:5\n+  --> $DIR/unreachable_pub.rs:35:5\n    |\n LL |     pub enum Helium {}\n    |     ---^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL |     pub enum Helium {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:37:5\n+  --> $DIR/unreachable_pub.rs:36:5\n    |\n LL |     pub union Lithium { c1: usize, c2: u8 }\n    |     ---^^^^^^^^^^^^^^\n@@ -70,7 +70,7 @@ LL |     pub union Lithium { c1: usize, c2: u8 }\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:38:5\n+  --> $DIR/unreachable_pub.rs:37:5\n    |\n LL |     pub fn beryllium() {}\n    |     ---^^^^^^^^^^^^^^^\n@@ -80,7 +80,7 @@ LL |     pub fn beryllium() {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:39:5\n+  --> $DIR/unreachable_pub.rs:38:5\n    |\n LL |     pub trait Boron {}\n    |     ---^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL |     pub trait Boron {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:40:5\n+  --> $DIR/unreachable_pub.rs:39:5\n    |\n LL |     pub const CARBON: usize = 1;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -100,7 +100,7 @@ LL |     pub const CARBON: usize = 1;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:41:5\n+  --> $DIR/unreachable_pub.rs:40:5\n    |\n LL |     pub static NITROGEN: usize = 2;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -110,7 +110,7 @@ LL |     pub static NITROGEN: usize = 2;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:42:5\n+  --> $DIR/unreachable_pub.rs:41:5\n    |\n LL |     pub type Oxygen = bool;\n    |     ---^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL |     pub type Oxygen = bool;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:45:47\n+  --> $DIR/unreachable_pub.rs:44:47\n    |\n LL |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -134,7 +134,7 @@ LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:50:9\n+  --> $DIR/unreachable_pub.rs:49:9\n    |\n LL |         pub fn catalyze() -> bool;\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^"}]}