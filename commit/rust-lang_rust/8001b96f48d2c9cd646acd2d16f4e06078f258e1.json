{"sha": "8001b96f48d2c9cd646acd2d16f4e06078f258e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMDFiOTZmNDhkMmM5Y2Q2NDZhY2QyZDE2ZjRlMDYwNzhmMjU4ZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-18T23:06:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-18T23:06:08Z"}, "message": "Auto merge of #71306 - Dylan-DPC:rollup-kvzc1da, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #71271 (Move `MapInPlace` to rustc_data_structures)\n - #71276 (miri-unleashed: test that we detect heap allocations)\n - #71283 (Minor improvements to -Zprofile)\n - #71287 (Explain why we shouldn't add inline attr to into_vec)\n - #71303 (remove build warnings)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "bd9f95bbb95f86af5bbcc37ed489947b5a19da87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd9f95bbb95f86af5bbcc37ed489947b5a19da87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8001b96f48d2c9cd646acd2d16f4e06078f258e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8001b96f48d2c9cd646acd2d16f4e06078f258e1", "html_url": "https://github.com/rust-lang/rust/commit/8001b96f48d2c9cd646acd2d16f4e06078f258e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8001b96f48d2c9cd646acd2d16f4e06078f258e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52fa23add6fb0776b32cc591ac928618391bdf41", "url": "https://api.github.com/repos/rust-lang/rust/commits/52fa23add6fb0776b32cc591ac928618391bdf41", "html_url": "https://github.com/rust-lang/rust/commit/52fa23add6fb0776b32cc591ac928618391bdf41"}, {"sha": "f6fb931d4f7ea3fae270e16d29a16bca09b17b7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6fb931d4f7ea3fae270e16d29a16bca09b17b7d", "html_url": "https://github.com/rust-lang/rust/commit/f6fb931d4f7ea3fae270e16d29a16bca09b17b7d"}], "stats": {"total": 98, "additions": 71, "deletions": 27}, "files": [{"sha": "53477288b59ee8a89d39bb2bbbd5eceb0730ea8e", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -140,6 +140,9 @@ mod hack {\n     use crate::string::ToString;\n     use crate::vec::Vec;\n \n+    // We shouldn't add inline attribute to this since this is used in\n+    // `vec!` macro mostly and causes perf regression. See #71204 for\n+    // discussion and perf results.\n     pub fn into_vec<T>(b: Box<[T]>) -> Vec<T> {\n         unsafe {\n             let len = b.len();"}, {"sha": "4ba062625a40dd2891f7c813da8b10fe8fb73142", "filename": "src/librustc_ast/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_ast%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_ast%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Flib.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -33,7 +33,6 @@ pub mod util {\n     pub mod comments;\n     pub mod lev_distance;\n     pub mod literal;\n-    pub mod map_in_place;\n     pub mod parser;\n }\n "}, {"sha": "e66b358c4ac7fac877970ec4d7e99fb57957b4c2", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -11,8 +11,8 @@ use crate::ast::*;\n use crate::ptr::P;\n use crate::token::{self, Token};\n use crate::tokenstream::*;\n-use crate::util::map_in_place::MapInPlace;\n \n+use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_data_structures::sync::Lrc;\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::Span;"}, {"sha": "3a96c5aa8ed4f7775a676010c35f62924cab7e43", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -184,8 +184,8 @@ use std::vec;\n use rustc_ast::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use rustc_ast::ast::{GenericArg, GenericParamKind, VariantData};\n use rustc_ast::ptr::P;\n-use rustc_ast::util::map_in_place::MapInPlace;\n use rustc_attr as attr;\n+use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::respan;"}, {"sha": "d412eaeff742487dd969a95580ea7fd5421d06eb", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -67,6 +67,7 @@ pub mod fx;\n pub mod graph;\n pub mod jobserver;\n pub mod macros;\n+pub mod map_in_place;\n pub mod obligation_forest;\n pub mod owning_ref;\n pub mod ptr_key;"}, {"sha": "5dd9fc6e8bc085be2046c623be1a44ecfa53d3fd", "filename": "src/librustc_data_structures/map_in_place.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_data_structures%2Fmap_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_data_structures%2Fmap_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fmap_in_place.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -1,5 +1,3 @@\n-// FIXME(Centril): Move to rustc_data_structures.\n-\n use smallvec::{Array, SmallVec};\n use std::ptr;\n ", "previous_filename": "src/librustc_ast/util/map_in_place.rs"}, {"sha": "d79dabb509267aafab3442bc39ea47af63744871", "filename": "src/librustc_expand/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_expand%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_expand%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fconfig.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -4,9 +4,9 @@ use rustc_ast::ast::{self, AttrItem, Attribute, MetaItem};\n use rustc_ast::attr::HasAttrs;\n use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n-use rustc_ast::util::map_in_place::MapInPlace;\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_errors::{error_code, struct_span_err, Applicability, Handler};\n use rustc_feature::{Feature, Features, State as FeatureState};\n use rustc_feature::{"}, {"sha": "2618c758ca5da2723c9c01bd7ec4e7617f88ffec", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -13,10 +13,10 @@ use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n-use rustc_ast::util::map_in_place::MapInPlace;\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, is_builtin_attr, HasAttrs};\n+use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_errors::{Applicability, PResult};\n use rustc_feature::Features;\n use rustc_parse::parser::Parser;"}, {"sha": "fe8fbd50627d3c38b4eb31cb1788bf6f6cd5015e", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -686,7 +686,9 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn inject_profiler_runtime(&mut self) {\n-        if self.sess.opts.debugging_opts.profile || self.sess.opts.cg.profile_generate.enabled() {\n+        if (self.sess.opts.debugging_opts.profile || self.sess.opts.cg.profile_generate.enabled())\n+            && !self.sess.opts.debugging_opts.no_profiler_runtime\n+        {\n             info!(\"loading profiler\");\n \n             let name = Symbol::intern(\"profiler_builtins\");"}, {"sha": "e4ca54ffd5e49644d6bd780d082fcddd4aa1dd7e", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -148,7 +148,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     ///\n     /// This function would create a label like this:\n     ///\n-    /// ```\n+    /// ```text\n     ///  | fn foo(x: &u32) { .. }\n     ///           ------- fully elaborated type of `x` is `&'1 u32`\n     /// ```\n@@ -300,7 +300,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// elaborated type, returning something like `'1`. Result looks\n     /// like:\n     ///\n-    /// ```\n+    /// ```text\n     ///  | fn foo(x: &u32) { .. }\n     ///           ------- fully elaborated type of `x` is `&'1 u32`\n     /// ```\n@@ -347,7 +347,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// that has no type annotation.\n     /// For example, we might produce an annotation like this:\n     ///\n-    /// ```\n+    /// ```text\n     ///  |     foo(|a, b| b)\n     ///  |          -  -\n     ///  |          |  |\n@@ -396,7 +396,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// that contains the anonymous reference we want to give a name\n     /// to. For example, we might produce an annotation like this:\n     ///\n-    /// ```\n+    /// ```text\n     ///  | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item = &T>> {\n     ///  |                - let's call the lifetime of this reference `'1`\n     /// ```\n@@ -600,7 +600,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// fully elaborated type, returning something like `'1`. Result\n     /// looks like:\n     ///\n-    /// ```\n+    /// ```text\n     ///  | let x = Some(&22);\n     ///        - fully elaborated type of `x` is `Option<&'1 u32>`\n     /// ```"}, {"sha": "1f916d5fc1d999d95ef30dfc578c1a44930084c7", "filename": "src/librustc_mir/transform/check_consts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -13,7 +13,7 @@ use std::fmt;\n \n pub use self::qualifs::Qualif;\n \n-pub mod ops;\n+mod ops;\n pub mod qualifs;\n mod resolver;\n pub mod validation;"}, {"sha": "b5e62aa20130b1eb0bdebfdaa3ad111cdcf5da70", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -113,8 +113,6 @@ impl NonConstOp for FnCallUnstable {\n #[derive(Debug)]\n pub struct HeapAllocation;\n impl NonConstOp for HeapAllocation {\n-    const IS_SUPPORTED_IN_MIRI: bool = false;\n-\n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n         let mut err = struct_span_err!(\n             item.tcx.sess,"}, {"sha": "da6d863f2399aecf0af023f057c2d41ed6fd948e", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -579,11 +579,13 @@ impl<'a> Parser<'a> {\n     /// Keep in mind that given that `outer_op.is_comparison()` holds and comparison ops are left\n     /// associative we can infer that we have:\n     ///\n+    /// ```text\n     ///           outer_op\n     ///           /   \\\n     ///     inner_op   r2\n     ///        /  \\\n     ///      l1    r1\n+    /// ```\n     pub(super) fn check_no_chained_comparison(\n         &mut self,\n         inner_op: &Expr,"}, {"sha": "f4729e306f806a21e986451cd22301fa3395b607", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -8,7 +8,7 @@ use rustc_span::symbol::{kw, sym};\n impl<'a> Parser<'a> {\n     /// Parses bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n     ///\n-    /// ```\n+    /// ```text\n     /// BOUND = LT_BOUND (e.g., `'a`)\n     /// ```\n     fn parse_lt_param_bounds(&mut self) -> GenericBounds {"}, {"sha": "ae8a20f209b9929493ca4b0b44a1500acda66f5d", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -743,7 +743,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses a `UseTree`.\n     ///\n-    /// ```\n+    /// ```text\n     /// USE_TREE = [`::`] `*` |\n     ///            [`::`] `{` USE_TREE_LIST `}` |\n     ///            PATH `::` `*` |\n@@ -792,7 +792,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses a `UseTreeKind::Nested(list)`.\n     ///\n-    /// ```\n+    /// ```text\n     /// USE_TREE_LIST = \u00d8 | (USE_TREE `,`)* USE_TREE [`,`]\n     /// ```\n     fn parse_use_tree_list(&mut self) -> PResult<'a, Vec<(UseTree, ast::NodeId)>> {"}, {"sha": "88ec4585b0059d1f03bb77d4a594c5979becf94c", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -1031,7 +1031,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n     /// Suggest a missing `self::` if that resolves to an correct module.\n     ///\n-    /// ```\n+    /// ```text\n     ///    |\n     /// LL | use foo::Bar;\n     ///    |     ^^^ did you mean `self::foo`?\n@@ -1083,7 +1083,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n     /// Suggests a missing `super::` if that resolves to an correct module.\n     ///\n-    /// ```\n+    /// ```text\n     ///    |\n     /// LL | use foo::Bar;\n     ///    |     ^^^ did you mean `super::foo`?\n@@ -1103,7 +1103,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n     /// Suggests a missing external crate name if that resolves to an correct module.\n     ///\n-    /// ```\n+    /// ```text\n     ///    |\n     /// LL | use foobar::Baz;\n     ///    |     ^^^^^^ did you mean `baz::foobar`?"}, {"sha": "ba2a4d1d56f2395d6d05a87ca815d5c97ff1d483", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -1655,7 +1655,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let output_types = parse_output_types(&debugging_opts, matches, error_format);\n \n     let mut cg = build_codegen_options(matches, error_format);\n-    let (disable_thinlto, codegen_units) = should_override_cgus_and_disable_thinlto(\n+    let (disable_thinlto, mut codegen_units) = should_override_cgus_and_disable_thinlto(\n         &output_types,\n         matches,\n         error_format,\n@@ -1672,6 +1672,16 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             \"can't instrument with gcov profiling when compiling incrementally\",\n         );\n     }\n+    if debugging_opts.profile {\n+        match codegen_units {\n+            Some(1) => {}\n+            None => codegen_units = Some(1),\n+            Some(_) => early_error(\n+                error_format,\n+                \"can't instrument with gcov profiling with multiple codegen units\",\n+            ),\n+        }\n+    }\n \n     if cg.profile_generate.enabled() && cg.profile_use.is_some() {\n         early_error("}, {"sha": "94e65093e71b23714928ca416729332725a9067b", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -890,6 +890,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n                      \"insert profiling code\"),\n+    no_profiler_runtime: bool = (false, parse_bool, [TRACKED],\n+        \"don't automatically inject the profiler_builtins crate\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n     nll_facts: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "ed69061d618512e342d95ba45d58b12a3c574e04", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -1045,7 +1045,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// Adds an async-await specific note to the diagnostic when the future does not implement\n     /// an auto trait because of a captured type.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// note: future does not implement `Qux` as this value is used across an await\n     ///   --> $DIR/issue-64130-3-other.rs:17:5\n     ///    |\n@@ -1060,7 +1060,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// When the diagnostic does not implement `Send` or `Sync` specifically, then the diagnostic\n     /// is \"replaced\" with a different message and a more specific error.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// error: future cannot be sent between threads safely\n     ///   --> $DIR/issue-64130-2-send.rs:21:5\n     ///    |"}, {"sha": "895042f3ab1151dbaa65461e880fe6566a71572e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -1250,7 +1250,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// This helper takes a *converted* parameter type (`param_ty`)\n     /// and an *unconverted* list of bounds:\n     ///\n-    /// ```\n+    /// ```text\n     /// fn foo<T: Debug>\n     ///        ^  ^^^^^ `ast_bounds` parameter, in HIR form\n     ///        |\n@@ -2992,7 +2992,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n /// representations). These lists of bounds occur in many places in\n /// Rust's syntax:\n ///\n-/// ```\n+/// ```text\n /// trait Foo: Bar + Baz { }\n ///            ^^^^^^^^^ supertrait list bounding the `Self` type parameter\n ///"}, {"sha": "049727684d0eb96f7fbaf0d3882e9a7e82370da5", "filename": "src/test/ui/consts/miri_unleashed/box.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(const_mut_refs, box_syntax)]\n+#![deny(const_err)]\n+\n+use std::mem::ManuallyDrop;\n+\n+fn main() {}\n+\n+static TEST_BAD: &mut i32 = {\n+    &mut *(box 0)\n+    //~^ WARN skipping const check\n+    //~| ERROR could not evaluate static initializer\n+    //~| NOTE heap allocations\n+};"}, {"sha": "d1b404ea737cafdb2826cf27d0650f150f1a4b9d", "filename": "src/test/ui/consts/miri_unleashed/box.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8001b96f48d2c9cd646acd2d16f4e06078f258e1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr?ref=8001b96f48d2c9cd646acd2d16f4e06078f258e1", "patch": "@@ -0,0 +1,15 @@\n+warning: skipping const checks\n+  --> $DIR/box.rs:10:11\n+   |\n+LL |     &mut *(box 0)\n+   |           ^^^^^^^\n+\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/box.rs:10:11\n+   |\n+LL |     &mut *(box 0)\n+   |           ^^^^^^^ \"heap allocations via `box` keyword\" needs an rfc before being allowed inside constants\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0080`."}]}