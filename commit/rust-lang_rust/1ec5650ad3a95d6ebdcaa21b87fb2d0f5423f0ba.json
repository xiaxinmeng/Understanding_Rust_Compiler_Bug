{"sha": "1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYzU2NTBhZDNhOTVkNmViZGNhYTIxYjg3ZmIyZDBmNTQyM2YwYmE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-01T23:04:46Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:15:39Z"}, "message": "libcoretest: fix unit tests", "tree": {"sha": "6af17d052ab190e72d50abeec07b4f260e252ff8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6af17d052ab190e72d50abeec07b4f260e252ff8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba", "html_url": "https://github.com/rust-lang/rust/commit/1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba/comments", "author": null, "committer": null, "parents": [{"sha": "a672b27cbc8de4f3cb6e5f2b3ed5a473204680b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a672b27cbc8de4f3cb6e5f2b3ed5a473204680b7", "html_url": "https://github.com/rust-lang/rust/commit/a672b27cbc8de4f3cb6e5f2b3ed5a473204680b7"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "87e2fe752995c096456c8e442db10c0a1d470bd8", "filename": "src/libcoretest/num/int_macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fint_macros.rs?ref=1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba", "patch": "@@ -64,11 +64,11 @@ mod tests {\n \n     #[test]\n     fn test_bitwise_operators() {\n-        assert!(0b1110 as $T == (0b1100 as $T).bitor(&(0b1010 as $T)));\n-        assert!(0b1000 as $T == (0b1100 as $T).bitand(&(0b1010 as $T)));\n-        assert!(0b0110 as $T == (0b1100 as $T).bitxor(&(0b1010 as $T)));\n-        assert!(0b1110 as $T == (0b0111 as $T).shl(&1));\n-        assert!(0b0111 as $T == (0b1110 as $T).shr(&1));\n+        assert!(0b1110 as $T == (0b1100 as $T).bitor(0b1010 as $T));\n+        assert!(0b1000 as $T == (0b1100 as $T).bitand(0b1010 as $T));\n+        assert!(0b0110 as $T == (0b1100 as $T).bitxor(0b1010 as $T));\n+        assert!(0b1110 as $T == (0b0111 as $T).shl(1));\n+        assert!(0b0111 as $T == (0b1110 as $T).shr(1));\n         assert!(-(0b11 as $T) - (1 as $T) == (0b11 as $T).not());\n     }\n "}, {"sha": "b7f8b81f996de710e370418552ce0aacaace03e6", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba", "patch": "@@ -12,6 +12,7 @@ use core::cmp::PartialEq;\n use core::fmt::Show;\n use core::num::{NumCast, cast};\n use core::ops::{Add, Sub, Mul, Div, Rem};\n+use core::kinds::Copy;\n \n mod int_macros;\n mod i8;\n@@ -32,18 +33,19 @@ pub fn test_num<T>(ten: T, two: T) where\n      + Add<T, T> + Sub<T, T>\n      + Mul<T, T> + Div<T, T>\n      + Rem<T, T> + Show\n+     + Copy\n {\n-    assert_eq!(ten.add(&two),  cast(12i).unwrap());\n-    assert_eq!(ten.sub(&two),  cast(8i).unwrap());\n-    assert_eq!(ten.mul(&two),  cast(20i).unwrap());\n-    assert_eq!(ten.div(&two),  cast(5i).unwrap());\n-    assert_eq!(ten.rem(&two),  cast(0i).unwrap());\n+    assert_eq!(ten.add(two),  cast(12i).unwrap());\n+    assert_eq!(ten.sub(two),  cast(8i).unwrap());\n+    assert_eq!(ten.mul(two),  cast(20i).unwrap());\n+    assert_eq!(ten.div(two),  cast(5i).unwrap());\n+    assert_eq!(ten.rem(two),  cast(0i).unwrap());\n \n-    assert_eq!(ten.add(&two),  ten + two);\n-    assert_eq!(ten.sub(&two),  ten - two);\n-    assert_eq!(ten.mul(&two),  ten * two);\n-    assert_eq!(ten.div(&two),  ten / two);\n-    assert_eq!(ten.rem(&two),  ten % two);\n+    assert_eq!(ten.add(two),  ten + two);\n+    assert_eq!(ten.sub(two),  ten - two);\n+    assert_eq!(ten.mul(two),  ten * two);\n+    assert_eq!(ten.div(two),  ten / two);\n+    assert_eq!(ten.rem(two),  ten % two);\n }\n \n #[cfg(test)]"}, {"sha": "5657a43de1922ec8a2e1a347ea95974d9db90a56", "filename": "src/libcoretest/num/uint_macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fuint_macros.rs?ref=1ec5650ad3a95d6ebdcaa21b87fb2d0f5423f0ba", "patch": "@@ -31,11 +31,11 @@ mod tests {\n \n     #[test]\n     fn test_bitwise_operators() {\n-        assert!(0b1110 as $T == (0b1100 as $T).bitor(&(0b1010 as $T)));\n-        assert!(0b1000 as $T == (0b1100 as $T).bitand(&(0b1010 as $T)));\n-        assert!(0b0110 as $T == (0b1100 as $T).bitxor(&(0b1010 as $T)));\n-        assert!(0b1110 as $T == (0b0111 as $T).shl(&1u));\n-        assert!(0b0111 as $T == (0b1110 as $T).shr(&1u));\n+        assert!(0b1110 as $T == (0b1100 as $T).bitor(0b1010 as $T));\n+        assert!(0b1000 as $T == (0b1100 as $T).bitand(0b1010 as $T));\n+        assert!(0b0110 as $T == (0b1100 as $T).bitxor(0b1010 as $T));\n+        assert!(0b1110 as $T == (0b0111 as $T).shl(1u));\n+        assert!(0b0111 as $T == (0b1110 as $T).shr(1u));\n         assert!(MAX - (0b1011 as $T) == (0b1011 as $T).not());\n     }\n "}]}