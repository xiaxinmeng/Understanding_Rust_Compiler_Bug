{"sha": "c1f1bc6e8ff357bbff604d6db3d220bf29900179", "node_id": "C_kwDOAAsO6NoAKGMxZjFiYzZlOGZmMzU3YmJmZjYwNGQ2ZGIzZDIyMGJmMjk5MDAxNzk", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2022-03-18T06:24:54Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2022-09-11T06:04:16Z"}, "message": "fix GeneratorWitness: Clone check", "tree": {"sha": "10c08573fbc3be91e4a844532105ab68852dcc65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10c08573fbc3be91e4a844532105ab68852dcc65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1f1bc6e8ff357bbff604d6db3d220bf29900179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f1bc6e8ff357bbff604d6db3d220bf29900179", "html_url": "https://github.com/rust-lang/rust/commit/c1f1bc6e8ff357bbff604d6db3d220bf29900179", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1f1bc6e8ff357bbff604d6db3d220bf29900179/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5cb3cca5ed28ccf865e7dbe74262e9744427bbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5cb3cca5ed28ccf865e7dbe74262e9744427bbe", "html_url": "https://github.com/rust-lang/rust/commit/a5cb3cca5ed28ccf865e7dbe74262e9744427bbe"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "3499c64a1db0a18c320845f50bc6fa6201805a25", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c1f1bc6e8ff357bbff604d6db3d220bf29900179/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f1bc6e8ff357bbff604d6db3d220bf29900179/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c1f1bc6e8ff357bbff604d6db3d220bf29900179", "patch": "@@ -1958,18 +1958,23 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ty::GeneratorWitness(binder) => {\n-                let tys = self.tcx().erase_late_bound_regions(binder);\n-                let mut iter = tys.iter();\n+                let witness_tys = binder.skip_binder();\n+                let mut iter = witness_tys.iter();\n                 loop {\n-                    let ty = match iter.next() {\n-                        Some(ty) => ty,\n+                    match iter.next() {\n+                        Some(witness_ty) => {\n+                            let resolved = self.infcx.shallow_resolve(witness_ty);\n+                            if matches!(resolved.kind(), ty::Infer(ty::TyVar(_))) {\n+                                break Ambiguous;\n+                            }\n+                        },\n                         Option::None => {\n-                            break Where(obligation.predicate.rebind(tys.to_vec()))\n+                            // (*) binder moved here\n+                            let all_vars = self.tcx().mk_bound_variable_kinds(\n+                                obligation.predicate.bound_vars().iter().chain(binder.bound_vars().iter())\n+                            );\n+                            break Where(ty::Binder::bind_with_vars(witness_tys.to_vec(), all_vars));\n                         },\n-                    };\n-                    let resolved = self.infcx.shallow_resolve(ty);\n-                    if matches!(resolved.kind(), ty::Infer(ty::TyVar(_))) {\n-                        break Ambiguous;\n                     }\n                 }\n             }"}]}