{"sha": "ee7016d95f5ca8f6f27e83ba8e040ee95813840a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNzAxNmQ5NWY1Y2E4ZjZmMjdlODNiYThlMDQwZWU5NTgxMzg0MGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-27T22:13:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-31T22:47:36Z"}, "message": "serialize: Switch field privacy as necessary", "tree": {"sha": "2938362879c57b42a328ea35de9647712ee9f0cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2938362879c57b42a328ea35de9647712ee9f0cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee7016d95f5ca8f6f27e83ba8e040ee95813840a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7016d95f5ca8f6f27e83ba8e040ee95813840a", "html_url": "https://github.com/rust-lang/rust/commit/ee7016d95f5ca8f6f27e83ba8e040ee95813840a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee7016d95f5ca8f6f27e83ba8e040ee95813840a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5a49a2fcfbc98ec4c63654bab5d6b0da028fd79", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5a49a2fcfbc98ec4c63654bab5d6b0da028fd79", "html_url": "https://github.com/rust-lang/rust/commit/e5a49a2fcfbc98ec4c63654bab5d6b0da028fd79"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "a6356e34af30da08b31977c4205030f91b5fc023", "filename": "src/libserialize/ebml.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ee7016d95f5ca8f6f27e83ba8e040ee95813840a/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7016d95f5ca8f6f27e83ba8e040ee95813840a/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=ee7016d95f5ca8f6f27e83ba8e040ee95813840a", "patch": "@@ -20,9 +20,9 @@ use std::str;\n // Common data structures\n #[deriving(Clone)]\n pub struct Doc<'a> {\n-    data: &'a [u8],\n-    start: uint,\n-    end: uint,\n+    pub data: &'a [u8],\n+    pub start: uint,\n+    pub end: uint,\n }\n \n impl<'doc> Doc<'doc> {\n@@ -40,8 +40,8 @@ impl<'doc> Doc<'doc> {\n }\n \n pub struct TaggedDoc<'a> {\n-    priv tag: uint,\n-    doc: Doc<'a>,\n+    tag: uint,\n+    pub doc: Doc<'a>,\n }\n \n pub enum EbmlEncoderTag {\n@@ -117,8 +117,8 @@ pub mod reader {\n     )\n \n     pub struct Res {\n-        val: uint,\n-        next: uint\n+        pub val: uint,\n+        pub next: uint\n     }\n \n     #[inline(never)]\n@@ -291,8 +291,8 @@ pub mod reader {\n     pub fn doc_as_i64(d: Doc) -> i64 { doc_as_u64(d) as i64 }\n \n     pub struct Decoder<'a> {\n-        priv parent: Doc<'a>,\n-        priv pos: uint,\n+        parent: Doc<'a>,\n+        pos: uint,\n     }\n \n     pub fn Decoder<'a>(d: Doc<'a>) -> Decoder<'a> {\n@@ -635,8 +635,8 @@ pub mod writer {\n \n     // ebml writing\n     pub struct Encoder<'a, W> {\n-        writer: &'a mut W,\n-        priv size_positions: ~[uint],\n+        pub writer: &'a mut W,\n+        size_positions: ~[uint],\n     }\n \n     fn write_sized_vuint<W: Writer>(w: &mut W, n: uint, size: uint) -> EncodeResult {"}, {"sha": "2d3e6bc86eb0d2672eca2acc6d1b8af7fcfe88f2", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ee7016d95f5ca8f6f27e83ba8e040ee95813840a/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7016d95f5ca8f6f27e83ba8e040ee95813840a/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=ee7016d95f5ca8f6f27e83ba8e040ee95813840a", "patch": "@@ -298,7 +298,7 @@ fn spaces(n: uint) -> ~str {\n \n /// A structure for implementing serialization to JSON.\n pub struct Encoder<'a> {\n-    priv wr: &'a mut io::Writer,\n+    wr: &'a mut io::Writer,\n }\n \n impl<'a> Encoder<'a> {\n@@ -504,8 +504,8 @@ impl<'a> ::Encoder<io::IoError> for Encoder<'a> {\n /// Another encoder for JSON, but prints out human-readable JSON instead of\n /// compact data\n pub struct PrettyEncoder<'a> {\n-    priv wr: &'a mut io::Writer,\n-    priv indent: uint,\n+    wr: &'a mut io::Writer,\n+    indent: uint,\n }\n \n impl<'a> PrettyEncoder<'a> {\n@@ -899,10 +899,10 @@ impl Json {\n }\n \n pub struct Parser<T> {\n-    priv rdr: T,\n-    priv ch: Option<char>,\n-    priv line: uint,\n-    priv col: uint,\n+    rdr: T,\n+    ch: Option<char>,\n+    line: uint,\n+    col: uint,\n }\n \n impl<T: Iterator<char>> Parser<T> {\n@@ -1298,7 +1298,7 @@ pub fn from_str(s: &str) -> DecodeResult<Json> {\n \n /// A structure to decode JSON to values in rust.\n pub struct Decoder {\n-    priv stack: ~[Json],\n+    stack: ~[Json],\n }\n \n impl Decoder {"}]}