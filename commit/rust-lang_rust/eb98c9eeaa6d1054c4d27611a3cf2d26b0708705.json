{"sha": "eb98c9eeaa6d1054c4d27611a3cf2d26b0708705", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOThjOWVlYWE2ZDEwNTRjNGQyNzYxMWEzY2YyZDI2YjA3MDg3MDU=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-29T03:45:44Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-29T04:31:19Z"}, "message": "Replace StrAllocating.into_owned() with .into_string()\n\nWe already have into_string(), but it was implemented in terms of\ninto_owned(). Flip it around and deprecate into_owned().\n\nRemove a few spurious calls to .into_owned() that existed in libregex\nand librustdoc.", "tree": {"sha": "03c8bb992bdd40223de8e03462e7900eaf8023fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03c8bb992bdd40223de8e03462e7900eaf8023fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb98c9eeaa6d1054c4d27611a3cf2d26b0708705", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb98c9eeaa6d1054c4d27611a3cf2d26b0708705", "html_url": "https://github.com/rust-lang/rust/commit/eb98c9eeaa6d1054c4d27611a3cf2d26b0708705", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb98c9eeaa6d1054c4d27611a3cf2d26b0708705/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "812785e01aef46b0c62bfc02080f8fcc13f01a4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/812785e01aef46b0c62bfc02080f8fcc13f01a4c", "html_url": "https://github.com/rust-lang/rust/commit/812785e01aef46b0c62bfc02080f8fcc13f01a4c"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "190e37c6436391bd639ff273fd00d170d7e68e32", "filename": "src/libregex/re.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb98c9eeaa6d1054c4d27611a3cf2d26b0708705/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb98c9eeaa6d1054c4d27611a3cf2d26b0708705/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=eb98c9eeaa6d1054c4d27611a3cf2d26b0708705", "patch": "@@ -573,13 +573,13 @@ impl<'t> Replacer for NoExpand<'t> {\n \n impl<'t> Replacer for &'t str {\n     fn reg_replace<'a>(&'a mut self, caps: &Captures) -> MaybeOwned<'a> {\n-        Owned(caps.expand(*self).into_owned())\n+        Owned(caps.expand(*self))\n     }\n }\n \n impl<'a> Replacer for |&Captures|: 'a -> String {\n     fn reg_replace<'r>(&'r mut self, caps: &Captures) -> MaybeOwned<'r> {\n-        Owned((*self)(caps).into_owned())\n+        Owned((*self)(caps))\n     }\n }\n "}, {"sha": "8b8ed92e72a3e84d14d4398423139c789b4a7924", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb98c9eeaa6d1054c4d27611a3cf2d26b0708705/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb98c9eeaa6d1054c4d27611a3cf2d26b0708705/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=eb98c9eeaa6d1054c4d27611a3cf2d26b0708705", "patch": "@@ -356,7 +356,7 @@ impl fmt::Show for clean::Type {\n                                     }\n                                 }\n                            }\n-                           ret.into_owned()\n+                           ret\n                        })\n             }\n             clean::Proc(ref decl) => {"}, {"sha": "9a6e3a9dca2b2a134fb44ac4db4ef653de29dc11", "filename": "src/libstd/str.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/eb98c9eeaa6d1054c4d27611a3cf2d26b0708705/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb98c9eeaa6d1054c4d27611a3cf2d26b0708705/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=eb98c9eeaa6d1054c4d27611a3cf2d26b0708705", "patch": "@@ -79,7 +79,7 @@ use mem;\n use option::{None, Option, Some};\n use result::Result;\n use slice::Vector;\n-use slice::{ImmutableVector, MutableVector, CloneableVector};\n+use slice::{ImmutableVector, MutableVector};\n use string::String;\n use vec::Vec;\n \n@@ -503,7 +503,7 @@ pub fn from_utf8_lossy<'a>(v: &'a [u8]) -> MaybeOwned<'a> {\n             res.push_bytes(v.slice(subseqidx, total))\n         };\n     }\n-    Owned(res.into_owned())\n+    Owned(res.into_string())\n }\n \n /*\n@@ -608,7 +608,7 @@ impl<'a> Str for MaybeOwned<'a> {\n \n impl<'a> StrAllocating for MaybeOwned<'a> {\n     #[inline]\n-    fn into_owned(self) -> String {\n+    fn into_string(self) -> String {\n         match self {\n             Slice(s) => s.to_string(),\n             Owned(s) => s\n@@ -723,18 +723,18 @@ Section: Trait implementations\n /// Any string that can be represented as a slice\n pub trait StrAllocating: Str {\n     /// Convert `self` into a `String`, not making a copy if possible.\n-    fn into_owned(self) -> String;\n+    fn into_string(self) -> String;\n \n     /// Convert `self` into a `String`.\n     #[inline]\n     fn to_string(&self) -> String {\n         String::from_str(self.as_slice())\n     }\n \n-    /// Convert `self` into a `String`, not making a copy if possible.\n-    #[inline]\n-    fn into_string(self) -> String {\n-        self.into_owned()\n+    #[allow(missing_doc)]\n+    #[deprecated = \"replaced by .into_string()\"]\n+    fn into_owned(self) -> String {\n+        self.into_string()\n     }\n \n     /// Escape each char in `s` with `char::escape_default`.\n@@ -889,7 +889,7 @@ pub trait StrAllocating: Str {\n \n impl<'a> StrAllocating for &'a str {\n     #[inline]\n-    fn into_owned(self) -> String {\n+    fn into_string(self) -> String {\n         self.to_string()\n     }\n }\n@@ -1045,7 +1045,7 @@ mod tests {\n     #[test]\n     fn test_concat() {\n         fn t(v: &[String], s: &str) {\n-            assert_eq!(v.concat(), s.to_str().into_owned());\n+            assert_eq!(v.concat(), s.to_str().into_string());\n         }\n         t([\"you\".to_string(), \"know\".to_string(), \"I'm\".to_string(),\n           \"no\".to_string(), \"good\".to_string()], \"youknowI'mnogood\");\n@@ -1057,7 +1057,7 @@ mod tests {\n     #[test]\n     fn test_connect() {\n         fn t(v: &[String], sep: &str, s: &str) {\n-            assert_eq!(v.connect(sep), s.to_str().into_owned());\n+            assert_eq!(v.connect(sep), s.to_str().into_string());\n         }\n         t([\"you\".to_string(), \"know\".to_string(), \"I'm\".to_string(),\n            \"no\".to_string(), \"good\".to_string()],\n@@ -1070,7 +1070,7 @@ mod tests {\n     #[test]\n     fn test_concat_slices() {\n         fn t(v: &[&str], s: &str) {\n-            assert_eq!(v.concat(), s.to_str().into_owned());\n+            assert_eq!(v.concat(), s.to_str().into_string());\n         }\n         t([\"you\", \"know\", \"I'm\", \"no\", \"good\"], \"youknowI'mnogood\");\n         let v: &[&str] = [];\n@@ -1081,7 +1081,7 @@ mod tests {\n     #[test]\n     fn test_connect_slices() {\n         fn t(v: &[&str], sep: &str, s: &str) {\n-            assert_eq!(v.connect(sep), s.to_str().into_owned());\n+            assert_eq!(v.connect(sep), s.to_str().into_string());\n         }\n         t([\"you\", \"know\", \"I'm\", \"no\", \"good\"],\n           \" \", \"you know I'm no good\");\n@@ -2162,9 +2162,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_maybe_owned_into_owned() {\n-        assert_eq!(Slice(\"abcde\").into_owned(), \"abcde\".to_string());\n-        assert_eq!(Owned(\"abcde\".to_string()).into_owned(), \"abcde\".to_string());\n+    fn test_maybe_owned_into_string() {\n+        assert_eq!(Slice(\"abcde\").into_string(), \"abcde\".to_string());\n+        assert_eq!(Owned(\"abcde\".to_string()).into_string(), \"abcde\".to_string());\n     }\n \n     #[test]"}, {"sha": "0edbaf99210034bfa345af26054ab09dbc6bceb7", "filename": "src/libstd/string.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb98c9eeaa6d1054c4d27611a3cf2d26b0708705/src%2Flibstd%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb98c9eeaa6d1054c4d27611a3cf2d26b0708705/src%2Flibstd%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstring.rs?ref=eb98c9eeaa6d1054c4d27611a3cf2d26b0708705", "patch": "@@ -322,11 +322,6 @@ impl Str for String {\n }\n \n impl StrAllocating for String {\n-    #[inline]\n-    fn into_owned(self) -> String {\n-        self\n-    }\n-\n     #[inline]\n     fn into_string(self) -> String {\n         self"}]}