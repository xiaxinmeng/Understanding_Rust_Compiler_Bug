{"sha": "ee37029afa62e93ab5ec8b1f2a23f8dbfd2a453f", "node_id": "C_kwDOAAsO6NoAKGVlMzcwMjlhZmE2MmU5M2FiNWVjOGIxZjJhMjNmOGRiZmQyYTQ1M2Y", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-19T20:25:07Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-19T20:25:07Z"}, "message": "remove last use of MAX_SUGGESTION_HIGHLIGHT_LINES", "tree": {"sha": "58bdd543bc2a6011a68134d798f1b7dab9333d4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58bdd543bc2a6011a68134d798f1b7dab9333d4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee37029afa62e93ab5ec8b1f2a23f8dbfd2a453f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee37029afa62e93ab5ec8b1f2a23f8dbfd2a453f", "html_url": "https://github.com/rust-lang/rust/commit/ee37029afa62e93ab5ec8b1f2a23f8dbfd2a453f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee37029afa62e93ab5ec8b1f2a23f8dbfd2a453f/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9395c261d60b9af130af08937e26c30f388a7a46", "url": "https://api.github.com/repos/rust-lang/rust/commits/9395c261d60b9af130af08937e26c30f388a7a46", "html_url": "https://github.com/rust-lang/rust/commit/9395c261d60b9af130af08937e26c30f388a7a46"}], "stats": {"total": 65, "additions": 45, "deletions": 20}, "files": [{"sha": "3d1208824fa34c10e187f873322b462746105104", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee37029afa62e93ab5ec8b1f2a23f8dbfd2a453f/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee37029afa62e93ab5ec8b1f2a23f8dbfd2a453f/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=ee37029afa62e93ab5ec8b1f2a23f8dbfd2a453f", "patch": "@@ -4,7 +4,6 @@ use clippy_utils::source::{snippet, snippet_with_applicability, snippet_with_mac\n use clippy_utils::ty::{implements_trait, match_type};\n use clippy_utils::{contains_return, is_trait_item, last_path_segment, paths};\n use if_chain::if_chain;\n-use rustc_errors::emitter::MAX_SUGGESTION_HIGHLIGHT_LINES;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -33,7 +32,6 @@ pub(super) fn check<'tcx>(\n         arg: &hir::Expr<'_>,\n         or_has_args: bool,\n         span: Span,\n-        method_span: Span,\n     ) -> bool {\n         let is_default_default = || is_trait_item(cx, fun, sym::Default);\n \n@@ -56,19 +54,14 @@ pub(super) fn check<'tcx>(\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let hint = \"unwrap_or_default()\";\n-                let mut sugg_span = span;\n+                let sugg_span = span;\n \n-                let mut sugg: String = format!(\n+                let sugg: String = format!(\n                     \"{}.{}\",\n                     snippet_with_applicability(cx, self_expr.span, \"..\", &mut applicability),\n                     hint\n                 );\n \n-                if sugg.lines().count() > MAX_SUGGESTION_HIGHLIGHT_LINES {\n-                    sugg_span = method_span.with_hi(span.hi());\n-                    sugg = hint.to_string();\n-                }\n-\n                 span_lint_and_sugg(\n                     cx,\n                     OR_FUN_CALL,\n@@ -178,7 +171,7 @@ pub(super) fn check<'tcx>(\n         match inner_arg.kind {\n             hir::ExprKind::Call(fun, or_args) => {\n                 let or_has_args = !or_args.is_empty();\n-                if !check_unwrap_or_default(cx, name, fun, self_arg, arg, or_has_args, expr.span, method_span) {\n+                if !check_unwrap_or_default(cx, name, fun, self_arg, arg, or_has_args, expr.span) {\n                     let fun_span = if or_has_args { None } else { Some(fun.span) };\n                     check_general_case(cx, name, method_span, self_arg, arg, expr.span, fun_span);\n                 }"}, {"sha": "123aed40251e2a639a63a6b630fc6a084944e02c", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee37029afa62e93ab5ec8b1f2a23f8dbfd2a453f/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ee37029afa62e93ab5ec8b1f2a23f8dbfd2a453f/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=ee37029afa62e93ab5ec8b1f2a23f8dbfd2a453f", "patch": "@@ -185,8 +185,7 @@ mod issue8239 {\n             .reduce(|mut acc, f| {\n                 acc.push_str(&f);\n                 acc\n-            })\n-            .unwrap_or_default();\n+            }).unwrap_or_default();\n     }\n \n     fn more_to_max_suggestion_highest_lines_1() {\n@@ -198,8 +197,7 @@ mod issue8239 {\n                 let _ = \"\";\n                 acc.push_str(&f);\n                 acc\n-            })\n-            .unwrap_or_default();\n+            }).unwrap_or_default();\n     }\n \n     fn equal_to_max_suggestion_highest_lines() {"}, {"sha": "dfe15654bc32c05db6992bfde425b6ba40915883", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ee37029afa62e93ab5ec8b1f2a23f8dbfd2a453f/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee37029afa62e93ab5ec8b1f2a23f8dbfd2a453f/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=ee37029afa62e93ab5ec8b1f2a23f8dbfd2a453f", "patch": "@@ -109,16 +109,50 @@ LL |         None.unwrap_or( unsafe { ptr_to_ref(s) }    );\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| unsafe { ptr_to_ref(s) })`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:189:14\n+  --> $DIR/or_fun_call.rs:182:9\n+   |\n+LL | /         frames\n+LL | |             .iter()\n+LL | |             .map(|f: &String| f.to_lowercase())\n+LL | |             .reduce(|mut acc, f| {\n+...  |\n+LL | |             })\n+LL | |             .unwrap_or(String::new());\n+   | |_____________________________________^\n+   |\n+help: try this\n+   |\n+LL ~         frames\n+LL +             .iter()\n+LL +             .map(|f: &String| f.to_lowercase())\n+LL +             .reduce(|mut acc, f| {\n+LL +                 acc.push_str(&f);\n+LL +                 acc\n+LL ~             }).unwrap_or_default();\n    |\n-LL |             .unwrap_or(String::new());\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:202:14\n+  --> $DIR/or_fun_call.rs:195:9\n+   |\n+LL | /         iter.map(|f: &String| f.to_lowercase())\n+LL | |             .reduce(|mut acc, f| {\n+LL | |                 let _ = \"\";\n+LL | |                 let _ = \"\";\n+...  |\n+LL | |             })\n+LL | |             .unwrap_or(String::new());\n+   | |_____________________________________^\n+   |\n+help: try this\n+   |\n+LL ~         iter.map(|f: &String| f.to_lowercase())\n+LL +             .reduce(|mut acc, f| {\n+LL +                 let _ = \"\";\n+LL +                 let _ = \"\";\n+LL +                 acc.push_str(&f);\n+LL +                 acc\n+LL ~             }).unwrap_or_default();\n    |\n-LL |             .unwrap_or(String::new());\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `new`\n   --> $DIR/or_fun_call.rs:208:9"}]}