{"sha": "8d87e9da2146b911ded797eac1a7aa9464902617", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkODdlOWRhMjE0NmI5MTFkZWQ3OTdlYWMxYTdhYTk0NjQ5MDI2MTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-22T11:31:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-22T11:31:37Z"}, "message": "auto merge of #10582 : g3xzh/rust/master, r=cmr\n\nMore new benchmark tests. some of them are benchmarking `starts_with` and `ends_with`.\r\nLet me know if I am missing something.\r\nThanks in advance.", "tree": {"sha": "6f8f53e595d2d47670051e53309a5b7b3c10c5e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f8f53e595d2d47670051e53309a5b7b3c10c5e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d87e9da2146b911ded797eac1a7aa9464902617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d87e9da2146b911ded797eac1a7aa9464902617", "html_url": "https://github.com/rust-lang/rust/commit/8d87e9da2146b911ded797eac1a7aa9464902617", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d87e9da2146b911ded797eac1a7aa9464902617/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "747213a280ac5505e2537952f1d28efceda0bfcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/747213a280ac5505e2537952f1d28efceda0bfcc", "html_url": "https://github.com/rust-lang/rust/commit/747213a280ac5505e2537952f1d28efceda0bfcc"}, {"sha": "80dff186416180423fe8117cbd19930a6c813ed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/80dff186416180423fe8117cbd19930a6c813ed9", "html_url": "https://github.com/rust-lang/rust/commit/80dff186416180423fe8117cbd19930a6c813ed9"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "5cc344fdfc1ab6189c7bf4f4ee6893a6b8787531", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8d87e9da2146b911ded797eac1a7aa9464902617/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d87e9da2146b911ded797eac1a7aa9464902617/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=8d87e9da2146b911ded797eac1a7aa9464902617", "patch": "@@ -3862,10 +3862,10 @@ mod bench {\n     }\n \n     #[bench]\n-    fn add(b: &mut BenchHarness) {\n+    fn add(bh: &mut BenchHarness) {\n         let xs: &[int] = [5, ..10];\n         let ys: &[int] = [5, ..10];\n-        do b.iter() {\n+        do bh.iter() {\n             xs + ys;\n         }\n     }\n@@ -3885,4 +3885,72 @@ mod bench {\n             xss.connect_vec(&0);\n         }\n     }\n+\n+    #[bench]\n+    fn push(bh: &mut BenchHarness) {\n+        let mut vec: ~[uint] = ~[0u];\n+        do bh.iter() {\n+            vec.push(0);\n+        }\n+    }\n+\n+    #[bench]\n+    fn starts_with_same_vector(bh: &mut BenchHarness) {\n+        let vec: ~[uint] = vec::from_fn(100, |i| i);\n+        do bh.iter() {\n+            vec.starts_with(vec);\n+        }\n+    }\n+\n+    #[bench]\n+    fn starts_with_single_element(bh: &mut BenchHarness) {\n+        let vec: ~[uint] = ~[0u];\n+        do bh.iter() {\n+            vec.starts_with(vec);\n+        }\n+    }\n+\n+    #[bench]\n+    fn starts_with_diff_one_element_at_end(bh: &mut BenchHarness) {\n+        let vec: ~[uint] = vec::from_fn(100, |i| i);\n+        let mut match_vec: ~[uint] = vec::from_fn(99, |i| i);\n+        match_vec.push(0);\n+        do bh.iter() {\n+            vec.starts_with(match_vec);\n+        }\n+    }\n+\n+    #[bench]\n+    fn ends_with_same_vector(bh: &mut BenchHarness) {\n+        let vec: ~[uint] = vec::from_fn(100, |i| i);\n+        do bh.iter() {\n+            vec.ends_with(vec);\n+        }\n+    }\n+\n+    #[bench]\n+    fn ends_with_single_element(bh: &mut BenchHarness) {\n+        let vec: ~[uint] = ~[0u];\n+        do bh.iter() {\n+            vec.ends_with(vec);\n+        }\n+    }\n+\n+    #[bench]\n+    fn ends_with_diff_one_element_at_beginning(bh: &mut BenchHarness) {\n+        let vec: ~[uint] = vec::from_fn(100, |i| i);\n+        let mut match_vec: ~[uint] = vec::from_fn(100, |i| i);\n+        match_vec[0] = 200;\n+        do bh.iter() {\n+            vec.starts_with(match_vec);\n+        }\n+    }\n+\n+    #[bench]\n+    fn contains_last_element(bh: &mut BenchHarness) {\n+        let vec: ~[uint] = vec::from_fn(100, |i| i);\n+        do bh.iter() {\n+                vec.contains(&99u);\n+        }\n+    }\n }"}]}