{"sha": "00b6015c078fc3ab76d4ca9ab869c6f0e5b8a1f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYjYwMTVjMDc4ZmMzYWI3NmQ0Y2E5YWI4NjljNmYwZTViOGExZjY=", "commit": {"author": {"name": "Marc-Antoine Perennou", "email": "Marc-Antoine@Perennou.com", "date": "2019-06-13T08:04:42Z"}, "committer": {"name": "Marc-Antoine Perennou", "email": "Marc-Antoine@Perennou.com", "date": "2019-06-13T08:05:47Z"}, "message": "rustbuild: fix default value for cxx\n\nSigned-off-by: Marc-Antoine Perennou <Marc-Antoine@Perennou.com>", "tree": {"sha": "7e774eae8a0364965d270ff7a9950ec258e01f56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e774eae8a0364965d270ff7a9950ec258e01f56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00b6015c078fc3ab76d4ca9ab869c6f0e5b8a1f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00b6015c078fc3ab76d4ca9ab869c6f0e5b8a1f6", "html_url": "https://github.com/rust-lang/rust/commit/00b6015c078fc3ab76d4ca9ab869c6f0e5b8a1f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00b6015c078fc3ab76d4ca9ab869c6f0e5b8a1f6/comments", "author": {"login": "Keruspe", "id": 222942, "node_id": "MDQ6VXNlcjIyMjk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/222942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keruspe", "html_url": "https://github.com/Keruspe", "followers_url": "https://api.github.com/users/Keruspe/followers", "following_url": "https://api.github.com/users/Keruspe/following{/other_user}", "gists_url": "https://api.github.com/users/Keruspe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keruspe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keruspe/subscriptions", "organizations_url": "https://api.github.com/users/Keruspe/orgs", "repos_url": "https://api.github.com/users/Keruspe/repos", "events_url": "https://api.github.com/users/Keruspe/events{/privacy}", "received_events_url": "https://api.github.com/users/Keruspe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Keruspe", "id": 222942, "node_id": "MDQ6VXNlcjIyMjk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/222942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keruspe", "html_url": "https://github.com/Keruspe", "followers_url": "https://api.github.com/users/Keruspe/followers", "following_url": "https://api.github.com/users/Keruspe/following{/other_user}", "gists_url": "https://api.github.com/users/Keruspe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keruspe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keruspe/subscriptions", "organizations_url": "https://api.github.com/users/Keruspe/orgs", "repos_url": "https://api.github.com/users/Keruspe/repos", "events_url": "https://api.github.com/users/Keruspe/events{/privacy}", "received_events_url": "https://api.github.com/users/Keruspe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59eac97869eed3a7aa41a96c92021194ddca99f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/59eac97869eed3a7aa41a96c92021194ddca99f9", "html_url": "https://github.com/rust-lang/rust/commit/59eac97869eed3a7aa41a96c92021194ddca99f9"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "dc7287ee3013bcce15ed6bf03d87fd469a4a11eb", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00b6015c078fc3ab76d4ca9ab869c6f0e5b8a1f6/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b6015c078fc3ab76d4ca9ab869c6f0e5b8a1f6/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=00b6015c078fc3ab76d4ca9ab869c6f0e5b8a1f6", "patch": "@@ -99,7 +99,9 @@ pub fn find(build: &mut Build) {\n \n         // If we use llvm-libunwind, we will need a C++ compiler as well for all targets\n         // We'll need one anyways if the target triple is also a host triple\n-        cfg.cpp(true);\n+        let mut cfg = cc::Build::new();\n+        cfg.cargo_metadata(false).opt_level(2).warnings(false).debug(false).cpp(true)\n+            .target(&target).host(&build.build);\n         if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n             cfg.compiler(cxx);\n         } else {"}]}