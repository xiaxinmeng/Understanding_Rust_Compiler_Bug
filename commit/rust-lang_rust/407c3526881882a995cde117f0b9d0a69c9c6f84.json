{"sha": "407c3526881882a995cde117f0b9d0a69c9c6f84", "node_id": "C_kwDOAAsO6NoAKDQwN2MzNTI2ODgxODgyYTk5NWNkZTExN2YwYjlkMGE2OWM5YzZmODQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T01:34:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T01:34:19Z"}, "message": "Auto merge of #10337 - EliasHolzmann:fix/10335, r=dswij\n\nFix: Some suggestions generated by the option_if_let_else lint did not compile\n\nThis addresses a bug in Clippy where the fix suggestend by the `option_if_let_else` lint would not compile for `Result`s which have an impure expression in the `else` branch.\n\n---\n\nchangelog: [`option_if_let_else`]: Fixed incorrect suggestion for `Result`s\n[#10337](https://github.com/rust-lang/rust-clippy/pull/10337)\n<!-- changelog_checked -->\n\nFixes #10335.", "tree": {"sha": "572cfa3590741bbd63633fa22eef7aee3eb64eb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/572cfa3590741bbd63633fa22eef7aee3eb64eb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/407c3526881882a995cde117f0b9d0a69c9c6f84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/407c3526881882a995cde117f0b9d0a69c9c6f84", "html_url": "https://github.com/rust-lang/rust/commit/407c3526881882a995cde117f0b9d0a69c9c6f84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/407c3526881882a995cde117f0b9d0a69c9c6f84/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e184516331e1f3f0aef6c2d7a1f204a20752505", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e184516331e1f3f0aef6c2d7a1f204a20752505", "html_url": "https://github.com/rust-lang/rust/commit/7e184516331e1f3f0aef6c2d7a1f204a20752505"}, {"sha": "d80ca09f5e254a113f1c6d4a63d12d9e215e0f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/d80ca09f5e254a113f1c6d4a63d12d9e215e0f39", "html_url": "https://github.com/rust-lang/rust/commit/d80ca09f5e254a113f1c6d4a63d12d9e215e0f39"}], "stats": {"total": 71, "additions": 56, "deletions": 15}, "files": [{"sha": "aa6d40042688d55fa056663d63c31e8ea4aadd62", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/407c3526881882a995cde117f0b9d0a69c9c6f84/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/407c3526881882a995cde117f0b9d0a69c9c6f84/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=407c3526881882a995cde117f0b9d0a69c9c6f84", "patch": "@@ -122,7 +122,7 @@ fn try_get_option_occurrence<'tcx>(\n         ExprKind::Unary(UnOp::Deref, inner_expr) | ExprKind::AddrOf(_, _, inner_expr) => inner_expr,\n         _ => expr,\n     };\n-    let inner_pat = try_get_inner_pat(cx, pat)?;\n+    let (inner_pat, is_result) = try_get_inner_pat_and_is_result(cx, pat)?;\n     if_chain! {\n         if let PatKind::Binding(bind_annotation, _, id, None) = inner_pat.kind;\n         if let Some(some_captures) = can_move_expr_to_closure(cx, if_then);\n@@ -176,7 +176,7 @@ fn try_get_option_occurrence<'tcx>(\n                 ),\n                 none_expr: format!(\n                     \"{}{}\",\n-                    if method_sugg == \"map_or\" { \"\" } else { \"|| \" },\n+                    if method_sugg == \"map_or\" { \"\" } else if is_result { \"|_| \" } else { \"|| \"},\n                     Sugg::hir_with_context(cx, none_body, ctxt, \"..\", &mut app),\n                 ),\n             });\n@@ -186,11 +186,13 @@ fn try_get_option_occurrence<'tcx>(\n     None\n }\n \n-fn try_get_inner_pat<'tcx>(cx: &LateContext<'tcx>, pat: &Pat<'tcx>) -> Option<&'tcx Pat<'tcx>> {\n+fn try_get_inner_pat_and_is_result<'tcx>(cx: &LateContext<'tcx>, pat: &Pat<'tcx>) -> Option<(&'tcx Pat<'tcx>, bool)> {\n     if let PatKind::TupleStruct(ref qpath, [inner_pat], ..) = pat.kind {\n         let res = cx.qpath_res(qpath, pat.hir_id);\n-        if is_res_lang_ctor(cx, res, OptionSome) || is_res_lang_ctor(cx, res, ResultOk) {\n-            return Some(inner_pat);\n+        if is_res_lang_ctor(cx, res, OptionSome) {\n+            return Some((inner_pat, false));\n+        } else if is_res_lang_ctor(cx, res, ResultOk) {\n+            return Some((inner_pat, true));\n         }\n     }\n     None"}, {"sha": "2b8ce5477cc6d2461c00ea462bd791d971a9d7e2", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/407c3526881882a995cde117f0b9d0a69c9c6f84/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/407c3526881882a995cde117f0b9d0a69c9c6f84/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=407c3526881882a995cde117f0b9d0a69c9c6f84", "patch": "@@ -92,6 +92,15 @@ fn pattern_to_vec(pattern: &str) -> Vec<String> {\n         .collect::<Vec<_>>()\n }\n \n+// #10335\n+fn test_result_impure_else(variable: Result<u32, &str>) {\n+    variable.map_or_else(|_| {\n+        println!(\"Err\");\n+    }, |binding| {\n+        println!(\"Ok {binding}\");\n+    })\n+}\n+\n enum DummyEnum {\n     One(u8),\n     Two,\n@@ -113,6 +122,7 @@ fn main() {\n     unop_bad(&None, None);\n     let _ = longer_body(None);\n     test_map_or_else(None);\n+    test_result_impure_else(Ok(42));\n     let _ = negative_tests(None);\n     let _ = impure_else(None);\n "}, {"sha": "cfbec8cb27da140c7643699c7fa7411a6606a6f3", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/407c3526881882a995cde117f0b9d0a69c9c6f84/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/407c3526881882a995cde117f0b9d0a69c9c6f84/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=407c3526881882a995cde117f0b9d0a69c9c6f84", "patch": "@@ -115,6 +115,15 @@ fn pattern_to_vec(pattern: &str) -> Vec<String> {\n         .collect::<Vec<_>>()\n }\n \n+// #10335\n+fn test_result_impure_else(variable: Result<u32, &str>) {\n+    if let Ok(binding) = variable {\n+        println!(\"Ok {binding}\");\n+    } else {\n+        println!(\"Err\");\n+    }\n+}\n+\n enum DummyEnum {\n     One(u8),\n     Two,\n@@ -136,6 +145,7 @@ fn main() {\n     unop_bad(&None, None);\n     let _ = longer_body(None);\n     test_map_or_else(None);\n+    test_result_impure_else(Ok(42));\n     let _ = negative_tests(None);\n     let _ = impure_else(None);\n "}, {"sha": "91d52fc79b810185998eb3da515dca0dcd590214", "filename": "tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/407c3526881882a995cde117f0b9d0a69c9c6f84/tests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/407c3526881882a995cde117f0b9d0a69c9c6f84/tests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.stderr?ref=407c3526881882a995cde117f0b9d0a69c9c6f84", "patch": "@@ -152,14 +152,33 @@ LL | |                 vec![s.to_string()]\n LL | |             }\n    | |_____________^ help: try: `s.find('.').map_or_else(|| vec![s.to_string()], |idx| vec![s[..idx].to_string(), s[idx..].to_string()])`\n \n+error: use Option::map_or_else instead of an if let/else\n+  --> $DIR/option_if_let_else.rs:120:5\n+   |\n+LL | /     if let Ok(binding) = variable {\n+LL | |         println!(\"Ok {binding}\");\n+LL | |     } else {\n+LL | |         println!(\"Err\");\n+LL | |     }\n+   | |_____^\n+   |\n+help: try\n+   |\n+LL ~     variable.map_or_else(|_| {\n+LL +         println!(\"Err\");\n+LL +     }, |binding| {\n+LL +         println!(\"Ok {binding}\");\n+LL +     })\n+   |\n+\n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:133:13\n+  --> $DIR/option_if_let_else.rs:142:13\n    |\n LL |     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `optional.map_or(5, |x| x + 2)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:142:13\n+  --> $DIR/option_if_let_else.rs:152:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^\n@@ -181,13 +200,13 @@ LL ~         });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:170:13\n+  --> $DIR/option_if_let_else.rs:180:13\n    |\n LL |     let _ = if let Some(x) = Some(0) { s.len() + x } else { s.len() };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(0).map_or(s.len(), |x| s.len() + x)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:174:13\n+  --> $DIR/option_if_let_else.rs:184:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^\n@@ -207,7 +226,7 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:213:13\n+  --> $DIR/option_if_let_else.rs:223:13\n    |\n LL |       let _ = match s {\n    |  _____________^\n@@ -217,7 +236,7 @@ LL | |     };\n    | |_____^ help: try: `s.map_or(1, |string| string.len())`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:217:13\n+  --> $DIR/option_if_let_else.rs:227:13\n    |\n LL |       let _ = match Some(10) {\n    |  _____________^\n@@ -227,7 +246,7 @@ LL | |     };\n    | |_____^ help: try: `Some(10).map_or(5, |a| a + 1)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:223:13\n+  --> $DIR/option_if_let_else.rs:233:13\n    |\n LL |       let _ = match res {\n    |  _____________^\n@@ -237,7 +256,7 @@ LL | |     };\n    | |_____^ help: try: `res.map_or(1, |a| a + 1)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:227:13\n+  --> $DIR/option_if_let_else.rs:237:13\n    |\n LL |       let _ = match res {\n    |  _____________^\n@@ -247,10 +266,10 @@ LL | |     };\n    | |_____^ help: try: `res.map_or(1, |a| a + 1)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:231:13\n+  --> $DIR/option_if_let_else.rs:241:13\n    |\n LL |     let _ = if let Ok(a) = res { a + 1 } else { 5 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `res.map_or(5, |a| a + 1)`\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 21 previous errors\n "}]}