{"sha": "248d6bf1e2103aaac8642aecdfcffd4259927fea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0OGQ2YmYxZTIxMDNhYWFjODY0MmFlY2RmY2ZmZDQyNTk5MjdmZWE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-30T18:56:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-30T18:56:05Z"}, "message": "Rollup merge of #77037 - matthiaskrgr:cl42ppy, r=Dylan-DPC\n\nmore tiny clippy cleanups\n\ncommits stand alone and can be reviewed one by one", "tree": {"sha": "fc243380d754b8aebd03d97795d5079a93385b91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc243380d754b8aebd03d97795d5079a93385b91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/248d6bf1e2103aaac8642aecdfcffd4259927fea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfdNTFCRBK7hj4Ov3rIwAAdHIIAHVE4MrObiHpibaXRHv3EPUY\nB6AI7e2h6e1WWT/5Cm7DTljl3GFRvf54rHbV/KuJti1oo3q4EqvsZmIEPPNML0sP\nu7rtzjUMa/iO7RxmZUtRosFyWLvnLIo660BSc/c42Q6u41rAnrD0lRpTqI1WlOpX\nCmNiEAujBekE871O7pk/KlmZRa8HqS7EqTixyxiy7ZEIcNLghBJDReUm4A//WeJS\nNZ0EREnltE0fsaLAfjh3TCGK4bB1YPaE7oh5JrW2Y69mdJ057Z43nDbH2z4Yn4Ro\ne9/NVEacfrKNfZCxCYUmmnnweylC1DYSP/dTbR+84hZ2UMxhrN7ixhz3ZH+uNtI=\n=wAsc\n-----END PGP SIGNATURE-----\n", "payload": "tree fc243380d754b8aebd03d97795d5079a93385b91\nparent d92d28e523bf056ab4eb752510ec52fe4f1c6311\nparent d7a5c574b1010360fd840f5dfc810f2aa782eac5\nauthor Jonas Schievink <jonasschievink@gmail.com> 1601492165 +0200\ncommitter GitHub <noreply@github.com> 1601492165 +0200\n\nRollup merge of #77037 - matthiaskrgr:cl42ppy, r=Dylan-DPC\n\nmore tiny clippy cleanups\n\ncommits stand alone and can be reviewed one by one\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/248d6bf1e2103aaac8642aecdfcffd4259927fea", "html_url": "https://github.com/rust-lang/rust/commit/248d6bf1e2103aaac8642aecdfcffd4259927fea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/248d6bf1e2103aaac8642aecdfcffd4259927fea/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d92d28e523bf056ab4eb752510ec52fe4f1c6311", "url": "https://api.github.com/repos/rust-lang/rust/commits/d92d28e523bf056ab4eb752510ec52fe4f1c6311", "html_url": "https://github.com/rust-lang/rust/commit/d92d28e523bf056ab4eb752510ec52fe4f1c6311"}, {"sha": "d7a5c574b1010360fd840f5dfc810f2aa782eac5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a5c574b1010360fd840f5dfc810f2aa782eac5", "html_url": "https://github.com/rust-lang/rust/commit/d7a5c574b1010360fd840f5dfc810f2aa782eac5"}], "stats": {"total": 11, "additions": 4, "deletions": 7}, "files": [{"sha": "8513e5e531bd7e88b7cfe607fc6c43800a908a2c", "filename": "compiler/rustc_mir/src/borrow_check/type_check/constraint_conversion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/248d6bf1e2103aaac8642aecdfcffd4259927fea/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248d6bf1e2103aaac8642aecdfcffd4259927fea/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fconstraint_conversion.rs?ref=248d6bf1e2103aaac8642aecdfcffd4259927fea", "patch": "@@ -62,8 +62,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         // `self.constraints`, but we also want to be mutating\n         // `self.member_constraints`. For now, just swap out the value\n         // we want and replace at the end.\n-        let mut tmp =\n-            std::mem::replace(&mut self.constraints.member_constraints, Default::default());\n+        let mut tmp = std::mem::take(&mut self.constraints.member_constraints);\n         for member_constraint in member_constraints {\n             tmp.push_constraint(member_constraint, |r| self.to_region_vid(r));\n         }"}, {"sha": "7a9089d0f3675c1893cd02b1326c626131c64a0f", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/248d6bf1e2103aaac8642aecdfcffd4259927fea/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248d6bf1e2103aaac8642aecdfcffd4259927fea/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=248d6bf1e2103aaac8642aecdfcffd4259927fea", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n             let not_equal_rvalue = Rvalue::BinaryOp(\n                 not_equal,\n                 Operand::Copy(Place::from(second_discriminant_temp)),\n-                Operand::Copy(Place::from(first_descriminant_place)),\n+                Operand::Copy(first_descriminant_place),\n             );\n             patch.add_statement(\n                 end_of_block_location,"}, {"sha": "5363702a5be6d8583cef3bd9b1fe0f34d8c848d8", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/248d6bf1e2103aaac8642aecdfcffd4259927fea/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248d6bf1e2103aaac8642aecdfcffd4259927fea/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=248d6bf1e2103aaac8642aecdfcffd4259927fea", "patch": "@@ -70,10 +70,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(\"used_trait_imports({:?}) = {:?}\", item_def_id, used_trait_imports);\n         wbcx.typeck_results.used_trait_imports = used_trait_imports;\n \n-        wbcx.typeck_results.closure_captures = mem::replace(\n-            &mut self.typeck_results.borrow_mut().closure_captures,\n-            Default::default(),\n-        );\n+        wbcx.typeck_results.closure_captures =\n+            mem::take(&mut self.typeck_results.borrow_mut().closure_captures);\n \n         if self.is_tainted_by_errors() {\n             // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted."}]}