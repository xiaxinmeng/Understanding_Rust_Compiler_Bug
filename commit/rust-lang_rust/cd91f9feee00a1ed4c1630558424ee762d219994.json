{"sha": "cd91f9feee00a1ed4c1630558424ee762d219994", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkOTFmOWZlZWUwMGExZWQ0YzE2MzA1NTg0MjRlZTc2MmQyMTk5OTQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-06T14:16:49Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-06T14:16:49Z"}, "message": "replace all `unreachable!` and `panic!` calls with `bug!`", "tree": {"sha": "4b331590829b171297bf1e134fb334b41ceca2f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b331590829b171297bf1e134fb334b41ceca2f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd91f9feee00a1ed4c1630558424ee762d219994", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXzs/RAAoJEFbW7qD8Z6xG8xYP/2XHAC87v2mXUhwBYrvyk4Mn\noKW53C3feOh36DpFi2P/t4Va+V/Yci1NjDAQmoKwk3Z0fKGxlwu7N+Fi6vCwWjiL\nmqgAocAqvKciAIBHM+QZSpNke8hFQOfVuzuJ0SwqLk9MpCJfEF5pS2oT1uSRGcrf\ncNPSJEZ3uu3kwIjvA63/3KGyTvjycq3Pbv7Os/We35hQF1E0G1s/phzxPNmCnonF\nFpHkE0Re+0yHhlPgKtE1qBqMv0V2hLaCZdprr+f3LjO6BYGDZ5l14tANakVUTGgr\nt3mBAnoQb9VfZF+PfgICpzr5wqF2vpCAv6iZrLnPEqn5JRz6yLvTiusT7Ep6wgIQ\n0xPXOjUAma2bSSi2RMAbHtgMMZMATLYlUAxkw7zz5LBGoxObTyGNRlc4Ac6Qr5Gz\nu1XEycJ+hzaBvR0hJU/HF0p9Zi1qtpdnOrMySCh5/JJI5aeDrGOF5MyqYS+pHDdE\neWQyFQ+ysksC+IdF/rdI7mJw9lvBqs4GPmbvvN1DdTfnHg5M/32+hxCcAOnll+R+\nCzpHEom3JsHEmY/APCL+qbtBbrtxp4DMGSX/HDl8DlC2MWCHZzqO6sIPzv83U32m\n6kYfmx26brrWeDpxRa6SpWunHfe15/yDcfPi19whaIjd8Aw9pMD2gG4C6sEo0X8T\n17cuVPX6rXe6XBpLMKDj\n=Sp0n\n-----END PGP SIGNATURE-----", "payload": "tree 4b331590829b171297bf1e134fb334b41ceca2f0\nparent cd42bb97f0cd6ea6d758659f4208dbabe8f4873d\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1473171409 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1473171409 +0200\n\nreplace all `unreachable!` and `panic!` calls with `bug!`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd91f9feee00a1ed4c1630558424ee762d219994", "html_url": "https://github.com/rust-lang/rust/commit/cd91f9feee00a1ed4c1630558424ee762d219994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd91f9feee00a1ed4c1630558424ee762d219994/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd42bb97f0cd6ea6d758659f4208dbabe8f4873d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d", "html_url": "https://github.com/rust-lang/rust/commit/cd42bb97f0cd6ea6d758659f4208dbabe8f4873d"}], "stats": {"total": 82, "additions": 39, "deletions": 43}, "files": [{"sha": "15a970586b80634d88566f42ccfe4213ac3a410b", "filename": "src/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd91f9feee00a1ed4c1630558424ee762d219994/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd91f9feee00a1ed4c1630558424ee762d219994/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=cd91f9feee00a1ed4c1630558424ee762d219994", "patch": "@@ -44,7 +44,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n             fn extract_str(lit: &syntax::ast::Lit) -> syntax::parse::token::InternedString {\n                 match lit.node {\n                     syntax::ast::LitKind::Str(ref s, _) => s.clone(),\n-                    _ => panic!(\"attribute values need to be strings\"),\n+                    _ => bug!(\"attribute values need to be strings\"),\n                 }\n             }\n             for attr in krate.attrs.iter() {"}, {"sha": "d463cc69914b4f5dabb645beb3f68e8e04651441", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cd91f9feee00a1ed4c1630558424ee762d219994/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd91f9feee00a1ed4c1630558424ee762d219994/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=cd91f9feee00a1ed4c1630558424ee762d219994", "patch": "@@ -187,9 +187,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.write_f64(ptr, f)?;\n                 Ok(ptr)\n             },\n-            Float(ConstFloat::FInfer{..}) => unreachable!(),\n-            Integral(ConstInt::Infer(_)) => unreachable!(),\n-            Integral(ConstInt::InferSigned(_)) => unreachable!(),\n+            Float(ConstFloat::FInfer{..}) |\n+            Integral(ConstInt::Infer(_)) |\n+            Integral(ConstInt::InferSigned(_)) => bug!(\"uninferred constants only exist before typeck\"),\n             Integral(ConstInt::I8(i)) => i2p!(i, 1),\n             Integral(ConstInt::U8(i)) => i2p!(i, 1),\n             Integral(ConstInt::Isize(ConstIsize::Is16(i))) |\n@@ -255,7 +255,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             let cs = &self.tcx.sess.cstore;\n             let mir = cs.maybe_get_item_mir(self.tcx, def_id).unwrap_or_else(|| {\n-                panic!(\"no mir for `{}`\", self.tcx.item_path_str(def_id));\n+                bug!(\"no mir for `{}`\", self.tcx.item_path_str(def_id));\n             });\n             let cached = Rc::new(mir);\n             mir_cache.insert(def_id, cached.clone());\n@@ -359,7 +359,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         use rustc::ty::layout::Layout::*;\n         let tup_layout = match *dest_layout {\n             Univariant { ref variant, .. } => variant,\n-            _ => panic!(\"checked bin op returns something other than a tuple\"),\n+            _ => bug!(\"checked bin op returns something other than a tuple\"),\n         };\n \n         let overflowed = self.intrinsic_overflowing(op, left, right, dest)?;\n@@ -446,8 +446,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     Array { .. } => {\n                         let elem_size = match dest_ty.sty {\n                             ty::TyArray(elem_ty, _) => self.type_size(elem_ty) as u64,\n-                            _ => panic!(\"tried to assign {:?} to non-array type {:?}\",\n-                                        kind, dest_ty),\n+                            _ => bug!(\"tried to assign {:?} to non-array type {:?}\", kind, dest_ty),\n                         };\n                         let offsets = (0..).map(|i| i * elem_size);\n                         self.assign_fields(dest, offsets, operands)?;\n@@ -463,7 +462,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 .map(|s| s.bytes());\n                             self.assign_fields(dest, offsets, operands)?;\n                         } else {\n-                            panic!(\"tried to assign {:?} to Layout::General\", kind);\n+                            bug!(\"tried to assign {:?} to Layout::General\", kind);\n                         }\n                     }\n \n@@ -480,7 +479,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 self.memory.write_isize(dest, 0)?;\n                             }\n                         } else {\n-                            panic!(\"tried to assign {:?} to Layout::RawNullablePointer\", kind);\n+                            bug!(\"tried to assign {:?} to Layout::RawNullablePointer\", kind);\n                         }\n                     }\n \n@@ -497,7 +496,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 try!(self.memory.write_isize(dest, 0));\n                             }\n                         } else {\n-                            panic!(\"tried to assign {:?} to Layout::RawNullablePointer\", kind);\n+                            bug!(\"tried to assign {:?} to Layout::RawNullablePointer\", kind);\n                         }\n                     }\n \n@@ -513,7 +512,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 self.memory.write_uint(dest, val, size)?;\n                             }\n                         } else {\n-                            panic!(\"tried to assign {:?} to Layout::CEnum\", kind);\n+                            bug!(\"tried to assign {:?} to Layout::CEnum\", kind);\n                         }\n                     }\n \n@@ -524,7 +523,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Repeat(ref operand, _) => {\n                 let (elem_size, elem_align, length) = match dest_ty.sty {\n                     ty::TyArray(elem_ty, n) => (self.type_size(elem_ty), self.type_align(elem_ty), n),\n-                    _ => panic!(\"tried to assign array-repeat to non-array type {:?}\", dest_ty),\n+                    _ => bug!(\"tried to assign array-repeat to non-array type {:?}\", dest_ty),\n                 };\n \n                 let src = self.eval_operand(operand)?;\n@@ -542,9 +541,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     ty::TySlice(_) => if let LvalueExtra::Length(n) = src.extra {\n                         n\n                     } else {\n-                        panic!(\"Rvalue::Len of a slice given non-slice pointer: {:?}\", src);\n+                        bug!(\"Rvalue::Len of a slice given non-slice pointer: {:?}\", src);\n                     },\n-                    _ => panic!(\"Rvalue::Len expected array or slice, got {:?}\", ty),\n+                    _ => bug!(\"Rvalue::Len expected array or slice, got {:?}\", ty),\n                 };\n                 self.memory.write_usize(dest, len)?;\n             }\n@@ -559,7 +558,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         self.memory.write_usize(len_ptr, len)?;\n                     }\n                     LvalueExtra::DowncastVariant(..) =>\n-                        panic!(\"attempted to take a reference to an enum downcast lvalue\"),\n+                        bug!(\"attempted to take a reference to an enum downcast lvalue\"),\n                 }\n             }\n \n@@ -615,7 +614,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             let fn_ptr = self.memory.create_fn_ptr(def_id, substs, fn_ty);\n                             self.memory.write_ptr(dest, fn_ptr)?;\n                         },\n-                        ref other => panic!(\"reify fn pointer on {:?}\", other),\n+                        ref other => bug!(\"reify fn pointer on {:?}\", other),\n                     },\n \n                     UnsafeFnPointer => match dest_ty.sty {\n@@ -626,7 +625,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             let fn_ptr = self.memory.create_fn_ptr(fn_def.def_id, fn_def.substs, unsafe_fn_ty);\n                             self.memory.write_ptr(dest, fn_ptr)?;\n                         },\n-                        ref other => panic!(\"fn to unsafe fn cast on {:?}\", other),\n+                        ref other => bug!(\"fn to unsafe fn cast on {:?}\", other),\n                     },\n                 }\n             }\n@@ -649,10 +648,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let field = &variant.fields[index];\n                 field.ty(self.tcx, substs)\n             }\n-            _ => panic!(\n-                \"non-enum for StructWrappedNullablePointer: {}\",\n-                ty,\n-            ),\n+            _ => bug!(\"non-enum for StructWrappedNullablePointer: {}\", ty),\n         };\n \n         self.field_path_offset(inner_ty, path)\n@@ -772,15 +768,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 if let LvalueExtra::DowncastVariant(variant_idx) = base.extra {\n                                     &variants[variant_idx]\n                                 } else {\n-                                    panic!(\"field access on enum had no variant index\");\n+                                    bug!(\"field access on enum had no variant index\");\n                                 }\n                             }\n                             RawNullablePointer { .. } => {\n                                 assert_eq!(field.index(), 0);\n                                 return Ok(base);\n                             }\n                             StructWrappedNullablePointer { ref nonnull, .. } => nonnull,\n-                            _ => panic!(\"field access on non-product type: {:?}\", base_layout),\n+                            _ => bug!(\"field access on non-product type: {:?}\", base_layout),\n                         };\n \n                         let offset = variant.field_offset(field.index()).bytes();\n@@ -799,7 +795,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             RawNullablePointer { .. } | StructWrappedNullablePointer { .. } => {\n                                 return Ok(base);\n                             }\n-                            _ => panic!(\"variant downcast on non-aggregate: {:?}\", base_layout),\n+                            _ => bug!(\"variant downcast on non-aggregate: {:?}\", base_layout),\n                         }\n                     },\n \n@@ -822,7 +818,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let elem_size = match base_ty.sty {\n                             ty::TyArray(elem_ty, _) |\n                             ty::TySlice(elem_ty) => self.type_size(elem_ty),\n-                            _ => panic!(\"indexing expected an array or slice, got {:?}\", base_ty),\n+                            _ => bug!(\"indexing expected an array or slice, got {:?}\", base_ty),\n                         };\n                         let n_ptr = self.eval_operand(operand)?;\n                         let n = self.memory.read_usize(n_ptr)?;\n@@ -901,7 +897,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n             }\n \n-            _ => panic!(\"primitive read of non-primitive type: {:?}\", ty),\n+            _ => bug!(\"primitive read of non-primitive type: {:?}\", ty),\n         };\n         Ok(val)\n     }"}, {"sha": "1f45c36acd4bb6d0d5ca1b28775884b4491d31e9", "filename": "src/interpreter/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd91f9feee00a1ed4c1630558424ee762d219994/src%2Finterpreter%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd91f9feee00a1ed4c1630558424ee762d219994/src%2Finterpreter%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator.rs?ref=cd91f9feee00a1ed4c1630558424ee762d219994", "patch": "@@ -198,7 +198,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 arg_srcs.push((src, ty));\n                             }\n                         }\n-                        ty => panic!(\"expected tuple as last argument in function with 'rust-call' ABI, got {:?}\", ty),\n+                        ty => bug!(\"expected tuple as last argument in function with 'rust-call' ABI, got {:?}\", ty),\n                     }\n                 }\n \n@@ -523,7 +523,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 //                   ty: def_ty(tcx, def_id, substs)\n                 // }\n             }\n-            vtable => unreachable!(\"resolved vtable bad vtable {:?} in trans\", vtable),\n+            vtable => bug!(\"resolved vtable bad vtable {:?} in trans\", vtable),\n         }\n     }\n "}, {"sha": "3cf0bc97557b1d914862d6d4bac2bd176d5a6e05", "filename": "src/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd91f9feee00a1ed4c1630558424ee762d219994/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd91f9feee00a1ed4c1630558424ee762d219994/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=cd91f9feee00a1ed4c1630558424ee762d219994", "patch": "@@ -303,7 +303,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n                     println!(\"(deallocated)\");\n                     continue;\n                 },\n-                (Some(_), Some(_)) => unreachable!(),\n+                (Some(_), Some(_)) => bug!(\"miri invariant broken: an allocation id exists that points to both a function and a memory location\"),\n             };\n \n             for i in 0..alloc.bytes.len() {\n@@ -481,7 +481,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             2 => Ok(self.layout.i16_align.abi() as usize),\n             4 => Ok(self.layout.i32_align.abi() as usize),\n             8 => Ok(self.layout.i64_align.abi() as usize),\n-            _ => panic!(\"bad integer size\"),\n+            _ => bug!(\"bad integer size\"),\n         }\n     }\n "}, {"sha": "0c26dac9ec915435abb0a2a64cf3c20437274a5a", "filename": "src/primval.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cd91f9feee00a1ed4c1630558424ee762d219994/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd91f9feee00a1ed4c1630558424ee762d219994/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=cd91f9feee00a1ed4c1630558424ee762d219994", "patch": "@@ -49,8 +49,8 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n                 BitOr  => $v($l | $r),\n \n                 // these have already been handled\n-                Shl => unreachable!(),\n-                Shr => unreachable!(),\n+                Shl => bug!(\"`<<` operation should already have been handled\"),\n+                Shr => bug!(\"`>>` operation should already have been handled\"),\n \n                 Eq => Bool($l == $r),\n                 Ne => Bool($l != $r),\n@@ -72,11 +72,11 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n                 Rem    => $v($l % $r),\n \n                 // invalid float ops\n-                BitXor => unreachable!(),\n-                BitAnd => unreachable!(),\n-                BitOr  => unreachable!(),\n-                Shl => unreachable!(),\n-                Shr => unreachable!(),\n+                BitXor => bug!(\"`^` is not a valid operation on floats\"),\n+                BitAnd => bug!(\"`&` is not a valid operation on floats\"),\n+                BitOr  => bug!(\"`|` is not a valid operation on floats\"),\n+                Shl => bug!(\"`<<` is not a valid operation on floats\"),\n+                Shr => bug!(\"`>>` is not a valid operation on floats\"),\n \n                 Eq => Bool($l == $r),\n                 Ne => Bool($l != $r),\n@@ -108,7 +108,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n                 I16(_) | U16(_) => 16,\n                 I32(_) | U32(_) => 32,\n                 I64(_) | U64(_) => 64,\n-                _ => unreachable!(),\n+                _ => bug!(\"bad MIR: bitshift lhs is not integral\"),\n             };\n             assert!(type_bits.is_power_of_two());\n             // turn into `u32` because `overflowing_sh{l,r}` only take `u32`\n@@ -121,7 +121,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n                 U16(i) => i as u32,\n                 U32(i) => i as u32,\n                 U64(i) => i as u32,\n-                _ => panic!(\"bad MIR: bitshift rhs is not integral\"),\n+                _ => bug!(\"bad MIR: bitshift rhs is not integral\"),\n             };\n             // apply mask\n             let r = r & (type_bits - 1);\n@@ -130,7 +130,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n                     match bin_op {\n                         Shl => overflow!($v, U32, $l, overflowing_shl, $r),\n                         Shr => overflow!($v, U32, $l, overflowing_shr, $r),\n-                        _ => unreachable!(),\n+                        _ => bug!(\"it has already been checked that this is a shift op\"),\n                     }\n                 })\n             }\n@@ -143,7 +143,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n                 U16(l) => shift!(U16, l, r),\n                 U32(l) => shift!(U32, l, r),\n                 U64(l) => shift!(U64, l, r),\n-                _ => unreachable!(),\n+                _ => bug!(\"bad MIR: bitshift lhs is not integral (should already have been checked)\"),\n             };\n             return Ok((val, false));\n         },\n@@ -168,7 +168,7 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n             Le => Bool(l <= r),\n             Gt => Bool(l > r),\n             Ge => Bool(l >= r),\n-            _ => panic!(\"invalid char op: {:?}\", bin_op),\n+            _ => bug!(\"invalid char op: {:?}\", bin_op),\n         },\n \n         (Bool(l), Bool(r)) => {"}]}