{"sha": "389100921ab840bc235b3487d8b519197dec77c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OTEwMDkyMWFiODQwYmMyMzViMzQ4N2Q4YjUxOTE5N2RlYzc3YzE=", "commit": {"author": {"name": "Ali\u00e9nore Bouttefeux", "email": "alienore.bouttefeux@gmail.com", "date": "2021-04-06T20:01:00Z"}, "committer": {"name": "Ali\u00e9nore Bouttefeux", "email": "alienore.bouttefeux@gmail.com", "date": "2021-04-06T20:01:00Z"}, "message": "add lint deref_nullptr", "tree": {"sha": "67f0b4a78958d15aeb23e6517cf3925bc64d892d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67f0b4a78958d15aeb23e6517cf3925bc64d892d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/389100921ab840bc235b3487d8b519197dec77c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/389100921ab840bc235b3487d8b519197dec77c1", "html_url": "https://github.com/rust-lang/rust/commit/389100921ab840bc235b3487d8b519197dec77c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/389100921ab840bc235b3487d8b519197dec77c1/comments", "author": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c897d430dcbec6b10a9925f7de054dbc0ad3c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c897d430dcbec6b10a9925f7de054dbc0ad3c52", "html_url": "https://github.com/rust-lang/rust/commit/5c897d430dcbec6b10a9925f7de054dbc0ad3c52"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "ab82070ce734263c26f7891f3d9a8fe2b5fe12e8", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/389100921ab840bc235b3487d8b519197dec77c1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389100921ab840bc235b3487d8b519197dec77c1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=389100921ab840bc235b3487d8b519197dec77c1", "patch": "@@ -2961,3 +2961,92 @@ impl<'tcx> LateLintPass<'tcx> for ClashingExternDeclarations {\n         }\n     }\n }\n+\n+declare_lint! {\n+    /// The `deref_nullptr` lint detects when an null pointer is dereferenced,\n+    /// which causes [undefined behavior].\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,no_run\n+    /// let x: i32 = unsafe {\n+    ///     *ptr::null()\n+    /// };\n+    /// ```\n+    /// ```rust,no_run\n+    /// unsafe {\n+    ///     *(0 as *const i32);\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    ///\n+    /// Dereferencing a null pointer causes [undefined behavior] even as a place expression,\n+    /// like `&*(0 as *const i32)` or `addr_of!(*(0 as *const i32))`.\n+    ///\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    pub DEREF_NULLPTR,\n+    Warn,\n+    \"detects when an null pointer is dereferenced\"\n+}\n+\n+declare_lint_pass!(DerefNullPtr => [DEREF_NULLPTR]);\n+\n+impl<'tcx> LateLintPass<'tcx> for DerefNullPtr {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) {\n+        /// test if expression is a null ptr\n+        fn is_null_ptr(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n+            match &expr.kind {\n+                rustc_hir::ExprKind::Cast(ref expr, ref ty) => {\n+                    if let rustc_hir::TyKind::Ptr(_) = ty.kind {\n+                        return is_zero(expr) || is_null_ptr(cx, expr);\n+                    }\n+                }\n+                // check for call to `core::ptr::null` or `core::ptr::null_mut`\n+                rustc_hir::ExprKind::Call(ref path, _) => {\n+                    if let rustc_hir::ExprKind::Path(ref qpath) = path.kind {\n+                        if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id() {\n+                            return cx.tcx.is_diagnostic_item(sym::ptr_null, def_id)\n+                                || cx.tcx.is_diagnostic_item(sym::ptr_null_mut, def_id);\n+                        }\n+                    }\n+                }\n+                _ => {}\n+            }\n+            false\n+        }\n+\n+        /// test if experssion is the literal `0`\n+        fn is_zero(expr: &hir::Expr<'_>) -> bool {\n+            match &expr.kind {\n+                rustc_hir::ExprKind::Lit(ref lit) => {\n+                    if let LitKind::Int(a, _) = lit.node {\n+                        return a == 0;\n+                    }\n+                }\n+                _ => {}\n+            }\n+            false\n+        }\n+\n+        if let rustc_hir::ExprKind::Unary(ref un_op, ref expr_deref) = expr.kind {\n+            if let rustc_hir::UnOp::Deref = un_op {\n+                if is_null_ptr(cx, expr_deref) {\n+                    cx.struct_span_lint(DEREF_NULLPTR, expr.span, |lint| {\n+                        let mut err =\n+                            lint.build(\"Dereferencing a null pointer causes undefined behavior\");\n+                        err.span_label(expr.span, \"a null pointer is dereferenced\");\n+                        err.span_label(\n+                            expr.span,\n+                            \"this code causes undefined behavior when executed\",\n+                        );\n+                        err.emit();\n+                    });\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "2f46969b021e6ad435c70d8b55ea46a9fdc1663f", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/389100921ab840bc235b3487d8b519197dec77c1/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389100921ab840bc235b3487d8b519197dec77c1/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=389100921ab840bc235b3487d8b519197dec77c1", "patch": "@@ -206,6 +206,7 @@ macro_rules! late_lint_mod_passes {\n                 UnreachablePub: UnreachablePub,\n                 ExplicitOutlivesRequirements: ExplicitOutlivesRequirements,\n                 InvalidValue: InvalidValue,\n+                DerefNullPtr: DerefNullPtr,\n             ]\n         );\n     };"}, {"sha": "95a8bda94222cc701b4674b0ec3d354548cec0e5", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389100921ab840bc235b3487d8b519197dec77c1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389100921ab840bc235b3487d8b519197dec77c1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=389100921ab840bc235b3487d8b519197dec77c1", "patch": "@@ -900,6 +900,8 @@ symbols! {\n         profiler_runtime,\n         ptr_guaranteed_eq,\n         ptr_guaranteed_ne,\n+        ptr_null,\n+        ptr_null_mut,\n         ptr_offset_from,\n         pub_macro_rules,\n         pub_restricted,"}, {"sha": "ad8696ab9272d36b71b807388996f30da3bbc1e1", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389100921ab840bc235b3487d8b519197dec77c1/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389100921ab840bc235b3487d8b519197dec77c1/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=389100921ab840bc235b3487d8b519197dec77c1", "patch": "@@ -211,6 +211,7 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n+#[rustc_diagnostic_item = \"ptr_null\"]\n pub const fn null<T>() -> *const T {\n     0 as *const T\n }\n@@ -229,6 +230,7 @@ pub const fn null<T>() -> *const T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n+#[rustc_diagnostic_item = \"ptr_null_mut\"]\n pub const fn null_mut<T>() -> *mut T {\n     0 as *mut T\n }"}]}