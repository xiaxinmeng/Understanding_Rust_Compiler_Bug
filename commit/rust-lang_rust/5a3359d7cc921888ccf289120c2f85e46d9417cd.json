{"sha": "5a3359d7cc921888ccf289120c2f85e46d9417cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMzM1OWQ3Y2M5MjE4ODhjY2YyODkxMjBjMmY4NWU0NmQ5NDE3Y2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-06T06:17:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-06T06:17:50Z"}, "message": "Rollup merge of #63299 - spastorino:in-projection-use-ref, r=oli-obk\n\nMake qualify consts in_projection use PlaceRef\n\nr? @oli-obk", "tree": {"sha": "926937a2bc128594d21e5c0486401fdc10778fd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/926937a2bc128594d21e5c0486401fdc10778fd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a3359d7cc921888ccf289120c2f85e46d9417cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdSRuOCRBK7hj4Ov3rIwAAdHIIAKZdRlm10Wxa50pE39LGMaoe\n0nqt3hJQSZxCTbr5F/PQ44CI6a49a2UBMs9dnZ8ivBZLqhxhWDGkfHvYCMThODfH\nXvJUmOYp53Zl0f1KArscYI88J1e0lWopJ03pi+d2jgCLoq9ezCzQTv4n+qdQGu4x\ncjZYv6NhACy7BpCZSDm8P4bzDIP58ePSQjngz5Q3IBwPB3sPcqQC4YOv3U+cS5pO\nLJtfm2yqhoSfoAP8n99nNcTV93e9UO4UBRsfVz3cVRnBSSLaz2w/6Wc9kq1f3/cG\nsxrJdvq54LfHWDOYKBWashBshssisW7FVnDxpHW2PvEecv7GaanRdMhIEVsWvhg=\n=cnPK\n-----END PGP SIGNATURE-----\n", "payload": "tree 926937a2bc128594d21e5c0486401fdc10778fd0\nparent d7b49a8a85442bc190cb26d23d28e2df2605d491\nparent 30910eef367fb305615597885242045e6c9949ba\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565072270 +0200\ncommitter GitHub <noreply@github.com> 1565072270 +0200\n\nRollup merge of #63299 - spastorino:in-projection-use-ref, r=oli-obk\n\nMake qualify consts in_projection use PlaceRef\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3359d7cc921888ccf289120c2f85e46d9417cd", "html_url": "https://github.com/rust-lang/rust/commit/5a3359d7cc921888ccf289120c2f85e46d9417cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a3359d7cc921888ccf289120c2f85e46d9417cd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7b49a8a85442bc190cb26d23d28e2df2605d491", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b49a8a85442bc190cb26d23d28e2df2605d491", "html_url": "https://github.com/rust-lang/rust/commit/d7b49a8a85442bc190cb26d23d28e2df2605d491"}, {"sha": "30910eef367fb305615597885242045e6c9949ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/30910eef367fb305615597885242045e6c9949ba", "html_url": "https://github.com/rust-lang/rust/commit/30910eef367fb305615597885242045e6c9949ba"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "dcfc80968f31cbb5634d1f64c468676746e2db58", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5a3359d7cc921888ccf289120c2f85e46d9417cd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3359d7cc921888ccf289120c2f85e46d9417cd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=5a3359d7cc921888ccf289120c2f85e46d9417cd", "patch": "@@ -182,16 +182,17 @@ trait Qualif {\n \n     fn in_projection_structurally(\n         cx: &ConstCx<'_, 'tcx>,\n-        base: &PlaceBase<'tcx>,\n-        proj: &Projection<'tcx>,\n+        place: PlaceRef<'_, 'tcx>,\n     ) -> bool {\n+        let proj = place.projection.as_ref().unwrap();\n+\n         let base_qualif = Self::in_place(cx, PlaceRef {\n-            base,\n+            base: place.base,\n             projection: &proj.base,\n         });\n         let qualif = base_qualif && Self::mask_for_ty(\n             cx,\n-            Place::ty_from(&base, &proj.base, cx.body, cx.tcx)\n+            Place::ty_from(place.base, &proj.base, cx.body, cx.tcx)\n                 .projection_ty(cx.tcx, &proj.elem)\n                 .ty,\n         );\n@@ -208,10 +209,9 @@ trait Qualif {\n \n     fn in_projection(\n         cx: &ConstCx<'_, 'tcx>,\n-        base: &PlaceBase<'tcx>,\n-        proj: &Projection<'tcx>,\n+        place: PlaceRef<'_, 'tcx>,\n     ) -> bool {\n-        Self::in_projection_structurally(cx, base, proj)\n+        Self::in_projection_structurally(cx, place)\n     }\n \n     fn in_place(cx: &ConstCx<'_, 'tcx>, place: PlaceRef<'_, 'tcx>) -> bool {\n@@ -234,9 +234,9 @@ trait Qualif {\n                 Self::in_static(cx, static_)\n             },\n             PlaceRef {\n-                base,\n-                projection: Some(proj),\n-            } => Self::in_projection(cx, base, proj),\n+                base: _,\n+                projection: Some(_),\n+            } => Self::in_projection(cx, place),\n         }\n     }\n \n@@ -448,9 +448,10 @@ impl Qualif for IsNotPromotable {\n \n     fn in_projection(\n         cx: &ConstCx<'_, 'tcx>,\n-        base: &PlaceBase<'tcx>,\n-        proj: &Projection<'tcx>,\n+        place: PlaceRef<'_, 'tcx>,\n     ) -> bool {\n+        let proj = place.projection.as_ref().unwrap();\n+\n         match proj.elem {\n             ProjectionElem::Deref |\n             ProjectionElem::Downcast(..) => return true,\n@@ -461,7 +462,7 @@ impl Qualif for IsNotPromotable {\n \n             ProjectionElem::Field(..) => {\n                 if cx.mode == Mode::NonConstFn {\n-                    let base_ty = Place::ty_from(base, &proj.base, cx.body, cx.tcx).ty;\n+                    let base_ty = Place::ty_from(place.base, &proj.base, cx.body, cx.tcx).ty;\n                     if let Some(def) = base_ty.ty_adt_def() {\n                         // No promotion of union field accesses.\n                         if def.is_union() {\n@@ -472,7 +473,7 @@ impl Qualif for IsNotPromotable {\n             }\n         }\n \n-        Self::in_projection_structurally(cx, base, proj)\n+        Self::in_projection_structurally(cx, place)\n     }\n \n     fn in_rvalue(cx: &ConstCx<'_, 'tcx>, rvalue: &Rvalue<'tcx>) -> bool {"}]}