{"sha": "2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "node_id": "C_kwDOAAsO6NoAKDJiMDVmNzk0ZTdkNmMyZDJlZGYyZGYxMDdmOTRlMjNiYWZkZWIxZTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T10:34:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T10:34:47Z"}, "message": "Auto merge of #10602 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "2b8eff69ec93eca2f19cd7a7d8668715b42657f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b8eff69ec93eca2f19cd7a7d8668715b42657f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "html_url": "https://github.com/rust-lang/rust/commit/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26e245d2ff38671e6c58395d853cd253adc7343b", "url": "https://api.github.com/repos/rust-lang/rust/commits/26e245d2ff38671e6c58395d853cd253adc7343b", "html_url": "https://github.com/rust-lang/rust/commit/26e245d2ff38671e6c58395d853cd253adc7343b"}, {"sha": "fa425061e641429cc63fcd02b0c42694cd74dfc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa425061e641429cc63fcd02b0c42694cd74dfc6", "html_url": "https://github.com/rust-lang/rust/commit/fa425061e641429cc63fcd02b0c42694cd74dfc6"}], "stats": {"total": 99, "additions": 63, "deletions": 36}, "files": [{"sha": "3a8b070d735160de7c23225b6b438a82cd9a3857", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -1,5 +1,5 @@\n+#![feature(lazy_cell)]\n #![feature(let_chains)]\n-#![feature(once_cell)]\n #![feature(rustc_private)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n // warn on lints, that are included in `rust-lang/rust`s bootstrap"}, {"sha": "b14cd36a04cd7573cd32b2ec3de4e22d47cbc84d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -7,7 +7,6 @@\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n #![feature(never_type)]\n-#![feature(once_cell)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]\n #![recursion_limit = \"512\"]"}, {"sha": "327e090d38be886e612786373c783a1620e720be", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -124,9 +124,9 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n \n         let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds().iter())\n             .filter(|p| !p.is_global())\n-            .filter_map(|obligation| {\n+            .filter_map(|pred| {\n                 // Note that we do not want to deal with qualified predicates here.\n-                match obligation.predicate.kind().no_bound_vars() {\n+                match pred.kind().no_bound_vars() {\n                     Some(ty::PredicateKind::Clause(ty::Clause::Trait(pred))) if pred.def_id() != sized_trait => {\n                         Some(pred)\n                     },"}, {"sha": "038dfe8e4803ca8417801108048bf91a6cc9afa4", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n-use rustc_ast::ast::{Item, ItemKind, Ty, TyKind};\n+use rustc_ast::ast::{ConstItem, Item, ItemKind, StaticItem, Ty, TyKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -100,13 +100,13 @@ impl EarlyLintPass for RedundantStaticLifetimes {\n         }\n \n         if !item.span.from_expansion() {\n-            if let ItemKind::Const(_, ref var_type, _) = item.kind {\n+            if let ItemKind::Const(box ConstItem { ty: ref var_type, .. }) = item.kind {\n                 Self::visit_type(var_type, cx, \"constants have by default a `'static` lifetime\");\n                 // Don't check associated consts because `'static` cannot be elided on those (issue\n                 // #2438)\n             }\n \n-            if let ItemKind::Static(ref var_type, _, _) = item.kind {\n+            if let ItemKind::Static(box StaticItem { ty: ref var_type, .. }) = item.kind {\n                 Self::visit_type(var_type, cx, \"statics have by default a `'static` lifetime\");\n             }\n         }"}, {"sha": "c984a8286eb88ab1bc7ab3bc0a766c8499a09b09", "filename": "clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fref_option_ref.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::last_path_segment;\n use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{GenericArg, Mutability, Ty, TyKind};\n+use rustc_hir::{GenericArg, GenericArgsParentheses, Mutability, Ty, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n@@ -47,7 +47,7 @@ impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n \n             if cx.tcx.is_diagnostic_item(sym::Option, def_id);\n             if let Some(params) = last_path_segment(qpath).args ;\n-            if !params.parenthesized;\n+            if params.parenthesized == GenericArgsParentheses::No;\n             if let Some(inner_ty) = params.args.iter().find_map(|arg| match arg {\n                 GenericArg::Type(inner_ty) => Some(inner_ty),\n                 _ => None,"}, {"sha": "fab8e9c2ec1c1b6544a7bd2b65639dbd2d2924c4", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -578,7 +578,7 @@ fn ident_difference_expr_with_base_location(\n         | (Assign(_, _, _), Assign(_, _, _))\n         | (TryBlock(_), TryBlock(_))\n         | (Await(_), Await(_))\n-        | (Async(_, _, _), Async(_, _, _))\n+        | (Async(_, _), Async(_, _))\n         | (Block(_, _), Block(_, _))\n         | (Closure(_), Closure(_))\n         | (Match(_, _), Match(_, _))"}, {"sha": "acdf54710691e5dbab98131cc679421f8ead050e", "filename": "clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -20,7 +20,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n                 if let QPath::Resolved(None, path) = *qpath;\n                 if let [ref bx] = *path.segments;\n                 if let Some(params) = bx.args;\n-                if !params.parenthesized;\n+                if params.parenthesized == hir::GenericArgsParentheses::No;\n                 if let Some(inner) = params.args.iter().find_map(|arg| match arg {\n                     GenericArg::Type(ty) => Some(ty),\n                     _ => None,"}, {"sha": "a30748db88fc94cce03a884e1dff2e43821dcd98", "filename": "clippy_lints/src/types/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Ftypes%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Ftypes%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Futils.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -1,14 +1,14 @@\n use clippy_utils::last_path_segment;\n use if_chain::if_chain;\n-use rustc_hir::{GenericArg, QPath, TyKind};\n+use rustc_hir::{GenericArg, GenericArgsParentheses, QPath, TyKind};\n use rustc_lint::LateContext;\n use rustc_span::source_map::Span;\n \n pub(super) fn match_borrows_parameter(_cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<Span> {\n     let last = last_path_segment(qpath);\n     if_chain! {\n         if let Some(params) = last.args;\n-        if !params.parenthesized;\n+        if params.parenthesized == GenericArgsParentheses::No;\n         if let Some(ty) = params.args.iter().find_map(|arg| match arg {\n             GenericArg::Type(ty) => Some(ty),\n             _ => None,"}, {"sha": "5a02987453c41ff670e408157dade8f573e3f04c", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -10,8 +10,8 @@ use rustc_hir::{\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n     intravisit::{walk_inf, walk_ty, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, GenericParam, GenericParamKind, HirId, Impl, ImplItemKind, Item,\n-    ItemKind, Pat, PatKind, Path, QPath, Ty, TyKind,\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, GenericArgsParentheses, GenericParam, GenericParamKind, HirId, Impl,\n+    ImplItemKind, Item, ItemKind, Pat, PatKind, Path, QPath, Ty, TyKind,\n };\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -100,7 +100,8 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if let TyKind::Path(QPath::Resolved(_, item_path)) = self_ty.kind;\n             let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n             if parameters.as_ref().map_or(true, |params| {\n-                !params.parenthesized && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n+                params.parenthesized  == GenericArgsParentheses::No\n+                    && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n             });\n             if !item.span.from_expansion();\n             if !is_from_proc_macro(cx, item); // expensive, should be last check"}, {"sha": "1f15598db36d9438b98c6283a424f3872b65f3b0", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -209,7 +209,7 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n                 && eq_fn_decl(lf, rf)\n                 && eq_expr(le, re)\n         },\n-        (Async(lc, _, lb), Async(rc, _, rb)) => lc == rc && eq_block(lb, rb),\n+        (Async(lc, lb), Async(rc, rb)) => lc == rc && eq_block(lb, rb),\n         (Range(lf, lt, ll), Range(rf, rt, rl)) => ll == rl && eq_expr_opt(lf, rf) && eq_expr_opt(lt, rt),\n         (AddrOf(lbk, lm, le), AddrOf(rbk, rm, re)) => lbk == rbk && lm == rm && eq_expr(le, re),\n         (Path(lq, lp), Path(rq, rp)) => both(lq, rq, eq_qself) && eq_path(lp, rp),\n@@ -286,8 +286,30 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n     match (l, r) {\n         (ExternCrate(l), ExternCrate(r)) => l == r,\n         (Use(l), Use(r)) => eq_use_tree(l, r),\n-        (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (\n+            Static(box ast::StaticItem {\n+                ty: lt,\n+                mutability: lm,\n+                expr: le,\n+            }),\n+            Static(box ast::StaticItem {\n+                ty: rt,\n+                mutability: rm,\n+                expr: re,\n+            }),\n+        ) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (\n+            Const(box ast::ConstItem {\n+                defaultness: ld,\n+                ty: lt,\n+                expr: le,\n+            }),\n+            Const(box ast::ConstItem {\n+                defaultness: rd,\n+                ty: rt,\n+                expr: re,\n+            }),\n+        ) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (\n             Fn(box ast::Fn {\n                 defaultness: ld,\n@@ -451,7 +473,18 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n     use AssocItemKind::*;\n     match (l, r) {\n-        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (\n+            Const(box ast::ConstItem {\n+                defaultness: ld,\n+                ty: lt,\n+                expr: le,\n+            }),\n+            Const(box ast::ConstItem {\n+                defaultness: rd,\n+                ty: rt,\n+                expr: re,\n+            }),\n+        ) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (\n             Fn(box ast::Fn {\n                 defaultness: ld,"}, {"sha": "3ee7147828bd5f9010fc3056d92fc39a32987f4f", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -401,14 +401,9 @@ impl HirEqInterExpr<'_, '_, '_> {\n     }\n \n     fn eq_path_parameters(&mut self, left: &GenericArgs<'_>, right: &GenericArgs<'_>) -> bool {\n-        if !(left.parenthesized || right.parenthesized) {\n+        if left.parenthesized == right.parenthesized {\n             over(left.args, right.args, |l, r| self.eq_generic_arg(l, r)) // FIXME(flip1995): may not work\n                 && over(left.bindings, right.bindings, |l, r| self.eq_type_binding(l, r))\n-        } else if left.parenthesized && right.parenthesized {\n-            over(left.inputs(), right.inputs(), |l, r| self.eq_ty(l, r))\n-                && both(&Some(&left.bindings[0].ty()), &Some(&right.bindings[0].ty()), |l, r| {\n-                    self.eq_ty(l, r)\n-                })\n         } else {\n             false\n         }"}, {"sha": "f1d2ae220f81d3180922408666bb1b795c0cec2c", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -3,7 +3,6 @@\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n #![feature(never_type)]\n-#![feature(once_cell)]\n #![feature(rustc_private)]\n #![recursion_limit = \"512\"]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n@@ -2168,9 +2167,7 @@ pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_>, did: DefId) -> bool {\n         .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n     traits::impossible_predicates(\n         cx.tcx,\n-        traits::elaborate_predicates(cx.tcx, predicates)\n-            .map(|o| o.predicate)\n-            .collect::<Vec<_>>(),\n+        traits::elaborate_predicates(cx.tcx, predicates).collect::<Vec<_>>(),\n     )\n }\n "}, {"sha": "91e8ccea1f4344612babefda4c00ed919222e227", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-03-24\"\n+channel = \"nightly-2023-04-06\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "718bc41fb9924c751c64ce7879f89d427a146cc9", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -1,6 +1,6 @@\n #![feature(rustc_private)]\n #![feature(let_chains)]\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(lint_reasons)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n // warn on lints, that are included in `rust-lang/rust`s bootstrap"}, {"sha": "57890ff31737b5a95256b48f448a60774f0f3bc3", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -1,5 +1,5 @@\n #![feature(test)] // compiletest_rs requires this attribute\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![feature(is_sorted)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]"}, {"sha": "68a878e9a3d310058cc9fd8f473b470ed09eca6c", "filename": "tests/dogfood.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -3,7 +3,7 @@\n //!\n //! See [Eating your own dog food](https://en.wikipedia.org/wiki/Eating_your_own_dog_food) for context\n \n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n "}, {"sha": "8feea800fdbe30b7d52d2173c9dcf6c9614b3ea7", "filename": "tests/lint_message_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/tests%2Flint_message_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/tests%2Flint_message_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flint_message_convention.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -1,4 +1,4 @@\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n "}, {"sha": "263c27d3d646af634a9b338163ce3416db5fcf75", "filename": "tests/ui/crashes/ice-6254.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/tests%2Fui%2Fcrashes%2Fice-6254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/tests%2Fui%2Fcrashes%2Fice-6254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6254.stderr?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -6,6 +6,8 @@ LL |         FOO_REF_REF => {},\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n    = note: `-D indirect-structural-match` implied by `-D warnings`\n \n error: aborting due to previous error"}, {"sha": "c9cbc50546cf3949aa0cb82ae9fd57f9fd020ac8", "filename": "tests/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/tests%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8/tests%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fworkspace.rs?ref=2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "patch": "@@ -1,4 +1,4 @@\n-#![feature(once_cell)]\n+#![feature(lazy_cell)]\n \n use std::path::PathBuf;\n use std::process::Command;"}]}