{"sha": "5f8b1614d110fc3f0cd8536e08822a8cead32172", "node_id": "C_kwDOAAsO6NoAKDVmOGIxNjE0ZDExMGZjM2YwY2Q4NTM2ZTA4ODIyYThjZWFkMzIxNzI", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-05T19:52:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T19:52:49Z"}, "message": "Rollup merge of #89546 - joshtriplett:grow-metadata-faster, r=petrochenkov\n\nMake an initial guess for metadata size to reduce buffer resizes\n\nWhen reading metadata, the compiler starts with a `Vec::new()`, which will need to grow repeatedly as the metadata gets decompressed into it. Reduce the number of resizes by starting out at the size of the compressed data.", "tree": {"sha": "411ef5015faad89dc56928c2040b47fd2cff070f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/411ef5015faad89dc56928c2040b47fd2cff070f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f8b1614d110fc3f0cd8536e08822a8cead32172", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXK0RCRBK7hj4Ov3rIwAA31UIAKMyDhpllRuAVJmrR2rLpojn\nGicl5NSerDDocTgcQ6gSCNpzd8D36ArCkt1SxJpNNMOXuG+mIYmkqxWRAO+iNypf\n0AqDmCpUWSCp4FKCqDv3C8rarOUXtKW45wtPT7zMxTwSc0b1IXtjbHKV+/AqVujb\n1cP8Sk3LqWwdwU7ktLiud47m9YvZ+TabHs1TY4SQ0e1q9X1Gj5OJufJ9uP4UnoO+\nJV2IuX5zzbszGeMKWUvGo3eUNTAE0rJse1Zqj0EWTBS1gXbzazwxxTeGYKSrrrNZ\n8GbdvsTlELUAEnqWgnm1/ha7UMQNQxxEWNp0UoKSOZAfml/SisIE+CajTmKDcFw=\n=SH5r\n-----END PGP SIGNATURE-----\n", "payload": "tree 411ef5015faad89dc56928c2040b47fd2cff070f\nparent f71b3e2b46505fda8dea7187fa90b80472f7abfa\nparent c35a700be2aebc0449a16fa1a09d7667aa209230\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633463569 -0700\ncommitter GitHub <noreply@github.com> 1633463569 -0700\n\nRollup merge of #89546 - joshtriplett:grow-metadata-faster, r=petrochenkov\n\nMake an initial guess for metadata size to reduce buffer resizes\n\nWhen reading metadata, the compiler starts with a `Vec::new()`, which will need to grow repeatedly as the metadata gets decompressed into it. Reduce the number of resizes by starting out at the size of the compressed data.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f8b1614d110fc3f0cd8536e08822a8cead32172", "html_url": "https://github.com/rust-lang/rust/commit/5f8b1614d110fc3f0cd8536e08822a8cead32172", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f8b1614d110fc3f0cd8536e08822a8cead32172/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f71b3e2b46505fda8dea7187fa90b80472f7abfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f71b3e2b46505fda8dea7187fa90b80472f7abfa", "html_url": "https://github.com/rust-lang/rust/commit/f71b3e2b46505fda8dea7187fa90b80472f7abfa"}, {"sha": "c35a700be2aebc0449a16fa1a09d7667aa209230", "url": "https://api.github.com/repos/rust-lang/rust/commits/c35a700be2aebc0449a16fa1a09d7667aa209230", "html_url": "https://github.com/rust-lang/rust/commit/c35a700be2aebc0449a16fa1a09d7667aa209230"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "9b1ea3b4c4cf503d4b3d691eb2a6a4773aee09e8", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f8b1614d110fc3f0cd8536e08822a8cead32172/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f8b1614d110fc3f0cd8536e08822a8cead32172/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=5f8b1614d110fc3f0cd8536e08822a8cead32172", "patch": "@@ -740,7 +740,9 @@ fn get_metadata_section(\n             // Header is okay -> inflate the actual metadata\n             let compressed_bytes = &buf[header_len..];\n             debug!(\"inflating {} bytes of compressed metadata\", compressed_bytes.len());\n-            let mut inflated = Vec::new();\n+            // Assume the decompressed data will be at least the size of the compressed data, so we\n+            // don't have to grow the buffer as much.\n+            let mut inflated = Vec::with_capacity(compressed_bytes.len());\n             match FrameDecoder::new(compressed_bytes).read_to_end(&mut inflated) {\n                 Ok(_) => rustc_erase_owner!(OwningRef::new(inflated).map_owner_box()),\n                 Err(_) => {"}]}