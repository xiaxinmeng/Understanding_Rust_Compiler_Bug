{"sha": "78b65718bce8d7f8b2e1d1af74141cebbd78cf5f", "node_id": "C_kwDOAAsO6NoAKDc4YjY1NzE4YmNlOGQ3ZjhiMmUxZDFhZjc0MTQxY2ViYmQ3OGNmNWY", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-18T18:07:26Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-18T18:07:26Z"}, "message": "Split compile_fn out of codegen_fn", "tree": {"sha": "78c87d0c605bfb349f2e8c59ec2c65d805d5a51d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78c87d0c605bfb349f2e8c59ec2c65d805d5a51d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78b65718bce8d7f8b2e1d1af74141cebbd78cf5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78b65718bce8d7f8b2e1d1af74141cebbd78cf5f", "html_url": "https://github.com/rust-lang/rust/commit/78b65718bce8d7f8b2e1d1af74141cebbd78cf5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78b65718bce8d7f8b2e1d1af74141cebbd78cf5f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f6c59e63faf0705d4c6e1fbd7a66ffc59b9ae1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f6c59e63faf0705d4c6e1fbd7a66ffc59b9ae1f", "html_url": "https://github.com/rust-lang/rust/commit/5f6c59e63faf0705d4c6e1fbd7a66ffc59b9ae1f"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "ad009b5a3f2fbdb78cef47771a90e4f4c2e12b6e", "filename": "src/base.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/78b65718bce8d7f8b2e1d1af74141cebbd78cf5f/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b65718bce8d7f8b2e1d1af74141cebbd78cf5f/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=78b65718bce8d7f8b2e1d1af74141cebbd78cf5f", "patch": "@@ -6,8 +6,11 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::FnAbiOf;\n \n+use indexmap::IndexSet;\n+\n use crate::constant::ConstantCx;\n use crate::prelude::*;\n+use crate::pretty_clif::CommentWriter;\n \n pub(crate) fn codegen_fn<'tcx>(\n     cx: &mut crate::CodegenCx<'tcx>,\n@@ -99,7 +102,7 @@ pub(crate) fn codegen_fn<'tcx>(\n \n     // Recover all necessary data from fx, before accessing func will prevent future access to it.\n     let instance = fx.instance;\n-    let mut clif_comments = fx.clif_comments;\n+    let clif_comments = fx.clif_comments;\n     let source_info_set = fx.source_info_set;\n     let local_map = fx.local_map;\n \n@@ -114,13 +117,40 @@ pub(crate) fn codegen_fn<'tcx>(\n         &clif_comments,\n     );\n \n+    // Verify function\n+    verify_func(tcx, &clif_comments, &func);\n+\n+    compile_fn(\n+        cx,\n+        module,\n+        instance,\n+        symbol_name.name,\n+        func_id,\n+        func,\n+        clif_comments,\n+        source_info_set,\n+        local_map,\n+    );\n+}\n+\n+fn compile_fn<'tcx>(\n+    cx: &mut crate::CodegenCx<'tcx>,\n+    module: &mut dyn Module,\n+    instance: Instance<'tcx>,\n+    symbol_name: &str,\n+    func_id: FuncId,\n+    func: Function,\n+    mut clif_comments: CommentWriter,\n+    source_info_set: IndexSet<SourceInfo>,\n+    local_map: IndexVec<mir::Local, CPlace<'tcx>>,\n+) {\n+    let tcx = cx.tcx;\n+\n     // Store function in context\n     let context = &mut cx.cached_context;\n+    context.clear();\n     context.func = func;\n \n-    // Verify function\n-    verify_func(tcx, &clif_comments, &context.func);\n-\n     // If the return block is not reachable, then the SSA builder may have inserted an `iconst.i128`\n     // instruction, which doesn't have an encoding.\n     context.compute_cfg();\n@@ -177,7 +207,7 @@ pub(crate) fn codegen_fn<'tcx>(\n             debug_context.define_function(\n                 instance,\n                 func_id,\n-                symbol_name.name,\n+                symbol_name,\n                 isa,\n                 context,\n                 &source_info_set,\n@@ -186,9 +216,6 @@ pub(crate) fn codegen_fn<'tcx>(\n         }\n         unwind_context.add_function(func_id, &context, isa);\n     });\n-\n-    // Clear context to make it usable for the next function\n-    context.clear();\n }\n \n pub(crate) fn verify_func("}]}