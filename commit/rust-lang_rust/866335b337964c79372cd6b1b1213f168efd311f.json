{"sha": "866335b337964c79372cd6b1b1213f168efd311f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NjMzNWIzMzc5NjRjNzkzNzJjZDZiMWIxMjEzZjE2OGVmZDMxMWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-01T01:08:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-01T01:08:46Z"}, "message": "Auto merge of #86757 - JohnTitor:rollup-acevhz7, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #85504 (the foundation owns rust trademarks)\n - #85520 (Fix typo and improve documentation for E0632)\n - #86680 (Improve error for missing -Z with debugging option)\n - #86728 (Check node kind to avoid ICE in `check_expr_return()`)\n - #86740 (copy rust-lld as ld in dist)\n - #86746 (Fix rustdoc query type filter)\n - #86750 (Test cross-crate usage of `feature(const_trait_impl)`)\n - #86755 (alloc: `RawVec<T, A>::shrink` can be in `no_global_oom_handling`.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "efafa59213eeed92796b99113b6c0fc8c4a3c7b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efafa59213eeed92796b99113b6c0fc8c4a3c7b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/866335b337964c79372cd6b1b1213f168efd311f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/866335b337964c79372cd6b1b1213f168efd311f", "html_url": "https://github.com/rust-lang/rust/commit/866335b337964c79372cd6b1b1213f168efd311f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/866335b337964c79372cd6b1b1213f168efd311f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6f450bcfec1928f3ed6adfbc843fd59f635746b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f450bcfec1928f3ed6adfbc843fd59f635746b", "html_url": "https://github.com/rust-lang/rust/commit/e6f450bcfec1928f3ed6adfbc843fd59f635746b"}, {"sha": "9e007e71ff02e53e5c44906d210201325b627f2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e007e71ff02e53e5c44906d210201325b627f2a", "html_url": "https://github.com/rust-lang/rust/commit/9e007e71ff02e53e5c44906d210201325b627f2a"}], "stats": {"total": 280, "additions": 258, "deletions": 22}, "files": [{"sha": "32fab9fc25de558febac046ab9b8f705e4fcd0d7", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -272,15 +272,14 @@ See [LICENSE-APACHE](LICENSE-APACHE), [LICENSE-MIT](LICENSE-MIT), and\n \n ## Trademark\n \n-The Rust programming language is an open source, community project governed\n-by a core team. It is also sponsored by the Mozilla Foundation (\u201cMozilla\u201d),\n-which owns and protects the Rust and Cargo trademarks and logos\n-(the \u201cRust Trademarks\u201d).\n+[The Rust Foundation][rust-foundation] owns and protects the Rust and Cargo\n+trademarks and logos (the \u201cRust Trademarks\u201d).\n \n If you want to use these names or brands, please read the [media guide][media-guide].\n \n Third-party logos may be subject to third-party copyrights and trademarks. See\n [Licenses][policies-licenses] for details.\n \n+[rust-foundation]: https://foundation.rust-lang.org/\n [media-guide]: https://www.rust-lang.org/policies/media-guide\n [policies-licenses]: https://www.rust-lang.org/policies/licenses"}, {"sha": "d41779e8b3a7e9ea40f3de5767b7b1632e990136", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -29,7 +29,7 @@ use rustc_middle::middle::cstore::MetadataLoader;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n use rustc_serialize::json::{self, ToJson};\n-use rustc_session::config::nightly_options;\n+use rustc_session::config::{nightly_options, CG_OPTIONS, DB_OPTIONS};\n use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest, TrimmedDefPaths};\n use rustc_session::getopts;\n use rustc_session::lint::{Lint, LintId};\n@@ -1010,9 +1010,18 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     for option in config::rustc_optgroups() {\n         (option.apply)(&mut options);\n     }\n-    let matches = options\n-        .parse(args)\n-        .unwrap_or_else(|f| early_error(ErrorOutputType::default(), &f.to_string()));\n+    let matches = options.parse(args).unwrap_or_else(|e| {\n+        let msg = match e {\n+            getopts::Fail::UnrecognizedOption(ref opt) => CG_OPTIONS\n+                .iter()\n+                .map(|&(name, ..)| ('C', name))\n+                .chain(DB_OPTIONS.iter().map(|&(name, ..)| ('Z', name)))\n+                .find(|&(_, name)| *opt == name.replace(\"_\", \"-\"))\n+                .map(|(flag, _)| format!(\"{}. Did you mean `-{} {}`?\", e, flag, opt)),\n+            _ => None,\n+        };\n+        early_error(ErrorOutputType::default(), &msg.unwrap_or_else(|| e.to_string()));\n+    });\n \n     // For all options we just parsed, we check a few aspects:\n     //"}, {"sha": "df162f8dce0267456005a54055e3dd31e2127d88", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -361,6 +361,7 @@ E0626: include_str!(\"./error_codes/E0626.md\"),\n E0627: include_str!(\"./error_codes/E0627.md\"),\n E0628: include_str!(\"./error_codes/E0628.md\"),\n E0631: include_str!(\"./error_codes/E0631.md\"),\n+E0632: include_str!(\"./error_codes/E0632.md\"),\n E0633: include_str!(\"./error_codes/E0633.md\"),\n E0634: include_str!(\"./error_codes/E0634.md\"),\n E0635: include_str!(\"./error_codes/E0635.md\"),\n@@ -623,8 +624,6 @@ E0783: include_str!(\"./error_codes/E0783.md\"),\n //  E0629, // missing 'feature' (rustc_const_unstable)\n //  E0630, // rustc_const_unstable attribute must be paired with stable/unstable\n            // attribute\n-    E0632, // cannot provide explicit generic arguments when `impl Trait` is\n-           // used in argument position\n     E0640, // infer outlives requirements\n //  E0645, // trait aliases not finished\n     E0667, // `impl Trait` in projections"}, {"sha": "40840e894d623b9edd44c87fe1ba9884c9b46b80", "filename": "compiler/rustc_error_codes/src/error_codes/E0632.md", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0632.md", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0632.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0632.md?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -0,0 +1,25 @@\n+An explicit generic argument was provided when calling a function that\n+uses `impl Trait` in argument position.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0632\n+fn foo<T: Copy>(a: T, b: impl Clone) {}\n+\n+foo::<i32>(0i32, \"abc\".to_string());\n+```\n+\n+Either all generic arguments should be inferred at the call site, or\n+the function definition should use an explicit generic type parameter\n+instead of `impl Trait`. Example:\n+\n+```\n+fn foo<T: Copy>(a: T, b: impl Clone) {}\n+fn bar<T: Copy, U: Clone>(a: T, b: U) {}\n+\n+foo(0i32, \"abc\".to_string());\n+\n+bar::<i32, String>(0i32, \"abc\".to_string());\n+bar::<_, _>(0i32, \"abc\".to_string());\n+bar(0i32, \"abc\".to_string());\n+```"}, {"sha": "65695fc03de82d07f630f88c77300b7d77b24522", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -1084,7 +1084,7 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// An function with generics must have its symbol mangled to accommodate\n+    /// A function with generics must have its symbol mangled to accommodate\n     /// the generic parameter. The [`no_mangle` attribute] has no effect in\n     /// this situation, and should be removed.\n     ///"}, {"sha": "4231db620b012df76738bf907a5e8b19fb9d732c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -1223,7 +1223,12 @@ impl EncodeContext<'a, 'tcx> {\n                 let fn_data = if let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind {\n                     FnData {\n                         asyncness: sig.header.asyncness,\n-                        constness: sig.header.constness,\n+                        // Can be inside `impl const Trait`, so using sig.header.constness is not reliable\n+                        constness: if self.tcx.is_const_fn_raw(def_id) {\n+                            hir::Constness::Const\n+                        } else {\n+                            hir::Constness::NotConst\n+                        },\n                         param_names: self.encode_fn_param_names_for_body(body),\n                     }\n                 } else {"}, {"sha": "cfe1d1c6871f092ab4a048c829b758f859f034b4", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -682,9 +682,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n \n             let encl_item_id = self.tcx.hir().get_parent_item(expr.hir_id);\n-            let encl_item = self.tcx.hir().expect_item(encl_item_id);\n \n-            if let hir::ItemKind::Fn(..) = encl_item.kind {\n+            if let Some(hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Fn(..),\n+                span: encl_fn_span,\n+                ..\n+            }))\n+            | Some(hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)),\n+                span: encl_fn_span,\n+                ..\n+            }))\n+            | Some(hir::Node::ImplItem(hir::ImplItem {\n+                kind: hir::ImplItemKind::Fn(..),\n+                span: encl_fn_span,\n+                ..\n+            })) = self.tcx.hir().find(encl_item_id)\n+            {\n                 // We are inside a function body, so reporting \"return statement\n                 // outside of function body\" needs an explanation.\n \n@@ -698,7 +712,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let encl_body = self.tcx.hir().body(encl_body_id);\n \n                 err.encl_body_span = Some(encl_body.value.span);\n-                err.encl_fn_span = Some(encl_item.span);\n+                err.encl_fn_span = Some(*encl_fn_span);\n             }\n \n             self.tcx.sess.emit_err(err);"}, {"sha": "d11d4031f77548e92e3b61dfe22eaffff3b03efa", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -463,7 +463,6 @@ impl<T, A: Allocator> RawVec<T, A> {\n         Ok(())\n     }\n \n-    #[cfg(not(no_global_oom_handling))]\n     fn shrink(&mut self, amount: usize) -> Result<(), TryReserveError> {\n         assert!(amount <= self.capacity(), \"Tried to shrink to a larger capacity\");\n "}, {"sha": "92853378e588133460a3fa33bc229c46df2e760c", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -400,12 +400,12 @@ impl Step for Rustc {\n \n             // Copy over lld if it's there\n             if builder.config.lld_enabled {\n-                let exe = exe(\"rust-lld\", compiler.host);\n-                builder.copy(&src_dir.join(&exe), &dst_dir.join(&exe));\n+                let rust_lld = exe(\"rust-lld\", compiler.host);\n+                builder.copy(&src_dir.join(&rust_lld), &dst_dir.join(&rust_lld));\n                 // for `-Z gcc-ld=lld`\n                 let gcc_lld_dir = dst_dir.join(\"gcc-ld\");\n                 t!(fs::create_dir(&gcc_lld_dir));\n-                builder.copy(&src_dir.join(&exe), &gcc_lld_dir.join(&exe));\n+                builder.copy(&src_dir.join(&rust_lld), &gcc_lld_dir.join(exe(\"ld\", compiler.host)));\n             }\n \n             // Copy over llvm-dwp if it's there"}, {"sha": "f6343e4c3d246c4496cbda98b8cb0ef2168db7ca", "filename": "src/librustdoc/html/static/search.js", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -801,7 +801,8 @@ window.initSearch = function(rawSearchIndex) {\n                     results_returned[fullId].lev =\n                         Math.min(results_returned[fullId].lev, returned);\n                 }\n-                if (index !== -1 || lev <= MAX_LEV_DISTANCE) {\n+                if (typePassesFilter(typeFilter, ty.ty) &&\n+                        (index !== -1 || lev <= MAX_LEV_DISTANCE)) {\n                     if (index !== -1 && paths.length < 2) {\n                         lev = 0;\n                     }"}, {"sha": "f656aa72986fdb52a601c1526a0cd68983cbc526", "filename": "src/test/rustdoc-js-std/typed-query.js", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Frustdoc-js-std%2Ftyped-query.js", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Frustdoc-js-std%2Ftyped-query.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Ftyped-query.js?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -0,0 +1,12 @@\n+// exact-check\n+\n+const QUERY = 'macro:print';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std', 'name': 'print' },\n+        { 'path': 'std', 'name': 'eprint' },\n+        { 'path': 'std', 'name': 'println' },\n+        { 'path': 'std', 'name': 'eprintln' },\n+    ],\n+};"}, {"sha": "ebc8f458f79c78788d7bbb346069a311123e32af", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.full.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.full.stderr?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -6,3 +6,4 @@ LL |     assert_eq!(f::<4usize>(Usizable), 20usize);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0632`."}, {"sha": "ebc8f458f79c78788d7bbb346069a311123e32af", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.min.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.min.stderr?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -6,3 +6,4 @@ LL |     assert_eq!(f::<4usize>(Usizable), 20usize);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0632`."}, {"sha": "6800b37b5b175aaaee409116c67c9acefa9a4848", "filename": "src/test/ui/impl-trait/issues/universal-issue-48703.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -6,3 +6,4 @@ LL |     foo::<String>('a');\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0632`."}, {"sha": "db66d461095993f8fb9f5b3ad9a5c711dcadb30f", "filename": "src/test/ui/impl-trait/issues/universal-turbofish-in-method-issue-50950.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.stderr?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -8,3 +8,4 @@ LL |     evt.handle_event::<TestEvent, fn(TestEvent)>(|_evt| {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0632`."}, {"sha": "7bbf47a3839513627649f5028e30655c38a945a3", "filename": "src/test/ui/invalid-compile-flags/codegen-option-without-group.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fcodegen-option-without-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fcodegen-option-without-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fcodegen-option-without-group.rs?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -0,0 +1 @@\n+// compile-flags: --llvm-args"}, {"sha": "c5a0c29cad96581663e1e696062f97ffe577c4a7", "filename": "src/test/ui/invalid-compile-flags/codegen-option-without-group.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fcodegen-option-without-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fcodegen-option-without-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fcodegen-option-without-group.stderr?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -0,0 +1,2 @@\n+error: Unrecognized option: 'llvm-args'. Did you mean `-C llvm-args`?\n+"}, {"sha": "86e40c1785405453ccad899e229d9266b9c56b1b", "filename": "src/test/ui/invalid-compile-flags/debug-option-without-group.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fdebug-option-without-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fdebug-option-without-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fdebug-option-without-group.rs?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -0,0 +1 @@\n+// compile-flags: --unpretty=hir"}, {"sha": "0e57e31ad3dfa7e10217ced6fca01db944f682cc", "filename": "src/test/ui/invalid-compile-flags/debug-option-without-group.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fdebug-option-without-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fdebug-option-without-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fdebug-option-without-group.stderr?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -0,0 +1,2 @@\n+error: Unrecognized option: 'unpretty'. Did you mean `-Z unpretty`?\n+"}, {"sha": "4f076fa0693839cafcfbd01ecc7285ea9cc26ba0", "filename": "src/test/ui/return/issue-86188-return-not-in-fn-body.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.rs?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -12,6 +12,25 @@ const C: [(); 42] = {\n     }]\n };\n \n+struct S {}\n+trait Tr {\n+    fn foo();\n+    fn bar() {\n+    //~^ NOTE: ...not the enclosing function body\n+        [(); return];\n+        //~^ ERROR: return statement outside of function body [E0572]\n+        //~| NOTE: the return is part of this body...\n+    }\n+}\n+impl Tr for S {\n+    fn foo() {\n+    //~^ NOTE: ...not the enclosing function body\n+        [(); return];\n+        //~^ ERROR: return statement outside of function body [E0572]\n+        //~| NOTE: the return is part of this body...\n+    }\n+}\n+\n fn main() {\n //~^ NOTE: ...not the enclosing function body\n     [(); return || {"}, {"sha": "d7eeb3a729099c5ca5d5c6628e93aefd1f4492d2", "filename": "src/test/ui/return/issue-86188-return-not-in-fn-body.stderr", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.stderr?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -9,7 +9,31 @@ LL | |     }]\n    | |_____^\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/issue-86188-return-not-in-fn-body.rs:17:10\n+  --> $DIR/issue-86188-return-not-in-fn-body.rs:20:14\n+   |\n+LL | /     fn bar() {\n+LL | |\n+LL | |         [(); return];\n+   | |              ^^^^^^ the return is part of this body...\n+LL | |\n+LL | |\n+LL | |     }\n+   | |_____- ...not the enclosing function body\n+\n+error[E0572]: return statement outside of function body\n+  --> $DIR/issue-86188-return-not-in-fn-body.rs:28:14\n+   |\n+LL | /     fn foo() {\n+LL | |\n+LL | |         [(); return];\n+   | |              ^^^^^^ the return is part of this body...\n+LL | |\n+LL | |\n+LL | |     }\n+   | |_____- ...not the enclosing function body\n+\n+error[E0572]: return statement outside of function body\n+  --> $DIR/issue-86188-return-not-in-fn-body.rs:36:10\n    |\n LL |  / fn main() {\n LL |  |\n@@ -23,6 +47,6 @@ LL | ||     }];\n LL |  | }\n    |  |_- ...not the enclosing function body\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0572`."}, {"sha": "4285eaf18aaad4370de3ba1a73c29f599d8779cc", "filename": "src/test/ui/rfc-2632-const-trait-impl/auxiliary/cross-crate.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -0,0 +1,22 @@\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+pub trait MyTrait {\n+    fn func(self);\n+}\n+\n+pub struct NonConst;\n+\n+impl MyTrait for NonConst {\n+    fn func(self) {\n+\n+    }\n+}\n+\n+pub struct Const;\n+\n+impl const MyTrait for Const {\n+    fn func(self) {\n+\n+    }\n+}"}, {"sha": "abd11d8b0e92338a42bc0ac5bd929125f9d4f38d", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate-feature-disabled.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-feature-disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-feature-disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-feature-disabled.rs?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -0,0 +1,18 @@\n+// aux-build: cross-crate.rs\n+extern crate cross_crate;\n+\n+use cross_crate::*;\n+\n+fn non_const_context() {\n+    NonConst.func();\n+    Const.func();\n+}\n+\n+const fn const_context() {\n+    NonConst.func();\n+    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+    Const.func();\n+    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+}\n+\n+fn main() {}"}, {"sha": "b86583b9e079ff271da13edab5449aaa6e52413d", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate-feature-disabled.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-feature-disabled.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-feature-disabled.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-feature-disabled.stderr?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -0,0 +1,15 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/cross-crate-feature-disabled.rs:12:5\n+   |\n+LL |     NonConst.func();\n+   |     ^^^^^^^^^^^^^^^\n+\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/cross-crate-feature-disabled.rs:14:5\n+   |\n+LL |     Const.func();\n+   |     ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "b79ccc7712ff2b084b2816ffc69d2121590b8916", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate-feature-enabled.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-feature-enabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-feature-enabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-feature-enabled.rs?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -0,0 +1,20 @@\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+// aux-build: cross-crate.rs\n+extern crate cross_crate;\n+\n+use cross_crate::*;\n+\n+fn non_const_context() {\n+    NonConst.func();\n+    Const.func();\n+}\n+\n+const fn const_context() {\n+    NonConst.func();\n+    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+    Const.func();\n+}\n+\n+fn main() {}"}, {"sha": "a544c0dd285fc3ba9f28c27806974d0d87beda81", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate-feature-enabled.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-feature-enabled.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-feature-enabled.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-feature-enabled.stderr?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -0,0 +1,9 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/cross-crate-feature-enabled.rs:15:5\n+   |\n+LL |     NonConst.func();\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "101132d05fa0eb98f6a5d0f05e45d20800f5a2b4", "filename": "src/test/ui/synthetic-param.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Fsynthetic-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Fsynthetic-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsynthetic-param.stderr?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -18,3 +18,4 @@ LL |     Bar::<i8>::func::<u8>(42);\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0632`."}, {"sha": "b1111fcf1484c9ed77ae6bed29a9dae69e008c88", "filename": "src/test/ui/typeck/issue-86721-return-expr-ice.rev1.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Ftypeck%2Fissue-86721-return-expr-ice.rev1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Ftypeck%2Fissue-86721-return-expr-ice.rev1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-86721-return-expr-ice.rev1.stderr?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -0,0 +1,9 @@\n+error[E0572]: return statement outside of function body\n+  --> $DIR/issue-86721-return-expr-ice.rs:9:22\n+   |\n+LL |     const U: usize = return;\n+   |                      ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0572`."}, {"sha": "f489ae2002a1376fd5d680d5c32971a5c4b5e9da", "filename": "src/test/ui/typeck/issue-86721-return-expr-ice.rev2.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Ftypeck%2Fissue-86721-return-expr-ice.rev2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Ftypeck%2Fissue-86721-return-expr-ice.rev2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-86721-return-expr-ice.rev2.stderr?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -0,0 +1,9 @@\n+error[E0572]: return statement outside of function body\n+  --> $DIR/issue-86721-return-expr-ice.rs:15:20\n+   |\n+LL |     fn foo(a: [(); return]);\n+   |                    ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0572`."}, {"sha": "cd7135f18b11241c7d9db761c948eee10b25e97f", "filename": "src/test/ui/typeck/issue-86721-return-expr-ice.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Ftypeck%2Fissue-86721-return-expr-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/866335b337964c79372cd6b1b1213f168efd311f/src%2Ftest%2Fui%2Ftypeck%2Fissue-86721-return-expr-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-86721-return-expr-ice.rs?ref=866335b337964c79372cd6b1b1213f168efd311f", "patch": "@@ -0,0 +1,17 @@\n+// Regression test for the ICE described in #86721.\n+\n+// revisions: rev1 rev2\n+#![cfg_attr(any(), rev1, rev2)]\n+#![crate_type=\"lib\"]\n+\n+#[cfg(any(rev1))]\n+trait T {\n+    const U: usize = return;\n+    //[rev1]~^ ERROR: return statement outside of function body [E0572]\n+}\n+\n+#[cfg(any(rev2))]\n+trait T2 {\n+    fn foo(a: [(); return]);\n+    //[rev2]~^ ERROR: return statement outside of function body [E0572]\n+}"}]}