{"sha": "d59d97cbec6807166bc237d6f3f9bd1eeb5288d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1OWQ5N2NiZWM2ODA3MTY2YmMyMzdkNmYzZjliZDFlZWI1Mjg4ZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-04T01:11:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-04T01:11:04Z"}, "message": "auto merge of #16961 : huonw/rust/bitv-twiddle, r=alexcrichton\n\nbitv: add larger tests, better benchmarks & remove dead code.\r\n\r\nThere were no tests for iteration etc. with more than 5 elements,\r\ni.e. not even going beyond a single word. This situation is rectified.\r\n\r\nAlso, the only benchmarks for `set` were with a constant bit value,\r\nwhich was not indicative of every situation, due to inlining & branch\r\nremoval. This adds a benchmark at the other end of the spectrum: random\r\ninput.", "tree": {"sha": "4f7d59c5e80c4ec2fb1fd58d1eecf7f366b4b554", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f7d59c5e80c4ec2fb1fd58d1eecf7f366b4b554"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d59d97cbec6807166bc237d6f3f9bd1eeb5288d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d59d97cbec6807166bc237d6f3f9bd1eeb5288d7", "html_url": "https://github.com/rust-lang/rust/commit/d59d97cbec6807166bc237d6f3f9bd1eeb5288d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d59d97cbec6807166bc237d6f3f9bd1eeb5288d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4d257b1500e8853d093f8ba38dc9561ad242f71", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d257b1500e8853d093f8ba38dc9561ad242f71", "html_url": "https://github.com/rust-lang/rust/commit/a4d257b1500e8853d093f8ba38dc9561ad242f71"}, {"sha": "5c819186edb77bd49ccaf8fb61dbc277a05f3aea", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c819186edb77bd49ccaf8fb61dbc277a05f3aea", "html_url": "https://github.com/rust-lang/rust/commit/5c819186edb77bd49ccaf8fb61dbc277a05f3aea"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "0a658c51dbd427bab250971fb260b624221b2d1b", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d59d97cbec6807166bc237d6f3f9bd1eeb5288d7/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59d97cbec6807166bc237d6f3f9bd1eeb5288d7/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=d59d97cbec6807166bc237d6f3f9bd1eeb5288d7", "patch": "@@ -95,20 +95,6 @@ fn match_words <'a,'b>(a: &'a Bitv, b: &'b Bitv) -> (MatchWords<'a>, MatchWords<\n static TRUE: bool = true;\n static FALSE: bool = false;\n \n-#[deriving(Clone)]\n-struct SmallBitv {\n-    /// only the lowest nbits of this value are used. the rest is undefined.\n-    bits: uint\n-}\n-\n-#[deriving(Clone)]\n-struct BigBitv {\n-    storage: Vec<uint>\n-}\n-\n-#[deriving(Clone)]\n-enum BitvVariant { Big(BigBitv), Small(SmallBitv) }\n-\n /// The bitvector type.\n ///\n /// # Example\n@@ -1653,6 +1639,7 @@ impl<'a> Iterator<uint> for TwoBitPositions<'a> {\n #[cfg(test)]\n mod tests {\n     use std::prelude::*;\n+    use std::iter::range_step;\n     use std::uint;\n     use std::rand;\n     use std::rand::Rng;\n@@ -2046,12 +2033,14 @@ mod tests {\n \n     #[test]\n     fn test_bitv_iterator() {\n-        let bools = [true, false, true, true];\n+        let bools = vec![true, false, true, true];\n         let bitv: Bitv = bools.iter().map(|n| *n).collect();\n \n-        for (act, &ex) in bitv.iter().zip(bools.iter()) {\n-            assert_eq!(ex, act);\n-        }\n+        assert_eq!(bitv.iter().collect::<Vec<bool>>(), bools)\n+\n+        let long = Vec::from_fn(10000, |i| i % 2 == 0);\n+        let bitv: Bitv = long.iter().map(|n| *n).collect();\n+        assert_eq!(bitv.iter().collect::<Vec<bool>>(), long)\n     }\n \n     #[test]\n@@ -2061,6 +2050,12 @@ mod tests {\n \n         let idxs: Vec<uint> = bitv.iter().collect();\n         assert_eq!(idxs, vec!(0, 2, 3));\n+\n+        let long: BitvSet = range(0u, 10000).map(|n| n % 2 == 0).collect();\n+        let real = range_step(0, 10000, 2).collect::<Vec<uint>>();\n+\n+        let idxs: Vec<uint> = long.iter().collect();\n+        assert_eq!(idxs, real);\n     }\n \n     #[test]\n@@ -2574,7 +2569,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_bitv_big(b: &mut Bencher) {\n+    fn bench_bitv_set_big_fixed(b: &mut Bencher) {\n         let mut r = rng();\n         let mut bitv = Bitv::with_capacity(BENCH_BITS, false);\n         b.iter(|| {\n@@ -2586,7 +2581,19 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_bitv_small(b: &mut Bencher) {\n+    fn bench_bitv_set_big_variable(b: &mut Bencher) {\n+        let mut r = rng();\n+        let mut bitv = Bitv::with_capacity(BENCH_BITS, false);\n+        b.iter(|| {\n+            for i in range(0u, 100) {\n+                bitv.set((r.next_u32() as uint) % BENCH_BITS, r.gen());\n+            }\n+            &bitv\n+        })\n+    }\n+\n+    #[bench]\n+    fn bench_bitv_set_small(b: &mut Bencher) {\n         let mut r = rng();\n         let mut bitv = Bitv::with_capacity(uint::BITS, false);\n         b.iter(|| {\n@@ -2598,7 +2605,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_bitv_set_small(b: &mut Bencher) {\n+    fn bench_bitvset_small(b: &mut Bencher) {\n         let mut r = rng();\n         let mut bitv = BitvSet::new();\n         b.iter(|| {\n@@ -2610,7 +2617,7 @@ mod tests {\n     }\n \n     #[bench]\n-    fn bench_bitv_set_big(b: &mut Bencher) {\n+    fn bench_bitvset_big(b: &mut Bencher) {\n         let mut r = rng();\n         let mut bitv = BitvSet::new();\n         b.iter(|| {"}]}