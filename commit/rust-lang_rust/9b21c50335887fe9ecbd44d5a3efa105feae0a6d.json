{"sha": "9b21c50335887fe9ecbd44d5a3efa105feae0a6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMjFjNTAzMzU4ODdmZTllY2JkNDRkNWEzZWZhMTA1ZmVhZTBhNmQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-09-21T21:33:34Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-10-21T02:46:16Z"}, "message": "rustc_mir: create the Integrator as soon as possible in MIR inlining.", "tree": {"sha": "612536735f766dc5c69177513b5ef1fc5a94bca6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/612536735f766dc5c69177513b5ef1fc5a94bca6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b21c50335887fe9ecbd44d5a3efa105feae0a6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b21c50335887fe9ecbd44d5a3efa105feae0a6d", "html_url": "https://github.com/rust-lang/rust/commit/9b21c50335887fe9ecbd44d5a3efa105feae0a6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b21c50335887fe9ecbd44d5a3efa105feae0a6d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ce4452fce0a1aa6d8a2a7f08da105c225463f4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce4452fce0a1aa6d8a2a7f08da105c225463f4d", "html_url": "https://github.com/rust-lang/rust/commit/0ce4452fce0a1aa6d8a2a7f08da105c225463f4d"}], "stats": {"total": 193, "additions": 96, "deletions": 97}, "files": [{"sha": "df5faa9ad07e000c6fd8e49263344272af129a4a", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 44, "deletions": 45, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/9b21c50335887fe9ecbd44d5a3efa105feae0a6d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b21c50335887fe9ecbd44d5a3efa105feae0a6d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=9b21c50335887fe9ecbd44d5a3efa105feae0a6d", "patch": "@@ -431,49 +431,6 @@ impl Inliner<'tcx> {\n             TerminatorKind::Call { args, destination: Some(destination), cleanup, .. } => {\n                 debug!(\"inlined {:?} into {:?}\", callsite.callee, caller_body.source);\n \n-                let mut local_map = IndexVec::with_capacity(callee_body.local_decls.len());\n-                let mut scope_map = IndexVec::with_capacity(callee_body.source_scopes.len());\n-\n-                for mut scope in callee_body.source_scopes.iter().cloned() {\n-                    // Map the callee scopes into the caller.\n-                    // FIXME(eddyb) this may ICE if the scopes are out of order.\n-                    scope.parent_scope = scope.parent_scope.map(|s| scope_map[s]);\n-                    scope.inlined_parent_scope = scope.inlined_parent_scope.map(|s| scope_map[s]);\n-\n-                    if scope.parent_scope.is_none() {\n-                        let callsite_scope = &caller_body.source_scopes[callsite.source_info.scope];\n-\n-                        // Attach the outermost callee scope as a child of the callsite\n-                        // scope, via the `parent_scope` and `inlined_parent_scope` chains.\n-                        scope.parent_scope = Some(callsite.source_info.scope);\n-                        assert_eq!(scope.inlined_parent_scope, None);\n-                        scope.inlined_parent_scope = if callsite_scope.inlined.is_some() {\n-                            Some(callsite.source_info.scope)\n-                        } else {\n-                            callsite_scope.inlined_parent_scope\n-                        };\n-\n-                        // Mark the outermost callee scope as an inlined one.\n-                        assert_eq!(scope.inlined, None);\n-                        scope.inlined = Some((callsite.callee, callsite.source_info.span));\n-                    } else if scope.inlined_parent_scope.is_none() {\n-                        // Make it easy to find the scope with `inlined` set above.\n-                        scope.inlined_parent_scope = Some(scope_map[OUTERMOST_SOURCE_SCOPE]);\n-                    }\n-\n-                    let idx = caller_body.source_scopes.push(scope);\n-                    scope_map.push(idx);\n-                }\n-\n-                for loc in callee_body.vars_and_temps_iter() {\n-                    let mut local = callee_body.local_decls[loc].clone();\n-\n-                    local.source_info.scope = scope_map[local.source_info.scope];\n-\n-                    let idx = caller_body.local_decls.push(local);\n-                    local_map.push(idx);\n-                }\n-\n                 // If the call is something like `a[*i] = f(i)`, where\n                 // `i : &mut usize`, then just duplicating the `a[*i]`\n                 // Place could result in two different locations if `f`\n@@ -524,15 +481,57 @@ impl Inliner<'tcx> {\n                 let mut integrator = Integrator {\n                     block_idx: bb_len,\n                     args: &args,\n-                    local_map,\n-                    scope_map,\n+                    local_map: IndexVec::with_capacity(callee_body.local_decls.len()),\n+                    scope_map: IndexVec::with_capacity(callee_body.source_scopes.len()),\n                     destination: dest,\n                     return_block,\n                     cleanup_block: cleanup,\n                     in_cleanup_block: false,\n                     tcx: self.tcx,\n                 };\n \n+                for mut scope in callee_body.source_scopes.iter().cloned() {\n+                    // Map the callee scopes into the caller.\n+                    // FIXME(eddyb) this may ICE if the scopes are out of order.\n+                    scope.parent_scope = scope.parent_scope.map(|s| integrator.scope_map[s]);\n+                    scope.inlined_parent_scope =\n+                        scope.inlined_parent_scope.map(|s| integrator.scope_map[s]);\n+\n+                    if scope.parent_scope.is_none() {\n+                        let callsite_scope = &caller_body.source_scopes[callsite.source_info.scope];\n+\n+                        // Attach the outermost callee scope as a child of the callsite\n+                        // scope, via the `parent_scope` and `inlined_parent_scope` chains.\n+                        scope.parent_scope = Some(callsite.source_info.scope);\n+                        assert_eq!(scope.inlined_parent_scope, None);\n+                        scope.inlined_parent_scope = if callsite_scope.inlined.is_some() {\n+                            Some(callsite.source_info.scope)\n+                        } else {\n+                            callsite_scope.inlined_parent_scope\n+                        };\n+\n+                        // Mark the outermost callee scope as an inlined one.\n+                        assert_eq!(scope.inlined, None);\n+                        scope.inlined = Some((callsite.callee, callsite.source_info.span));\n+                    } else if scope.inlined_parent_scope.is_none() {\n+                        // Make it easy to find the scope with `inlined` set above.\n+                        scope.inlined_parent_scope =\n+                            Some(integrator.scope_map[OUTERMOST_SOURCE_SCOPE]);\n+                    }\n+\n+                    let idx = caller_body.source_scopes.push(scope);\n+                    integrator.scope_map.push(idx);\n+                }\n+\n+                for loc in callee_body.vars_and_temps_iter() {\n+                    let mut local = callee_body.local_decls[loc].clone();\n+\n+                    local.source_info.scope = integrator.scope_map[local.source_info.scope];\n+\n+                    let idx = caller_body.local_decls.push(local);\n+                    integrator.local_map.push(idx);\n+                }\n+\n                 for mut var_debug_info in callee_body.var_debug_info.drain(..) {\n                     integrator.visit_var_debug_info(&mut var_debug_info);\n                     caller_body.var_debug_info.push(var_debug_info);"}, {"sha": "b2745a17e97172975b5f18ceac801b0f62893295", "filename": "src/test/mir-opt/inline/inline_any_operand.bar.Inline.after.mir", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9b21c50335887fe9ecbd44d5a3efa105feae0a6d/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9b21c50335887fe9ecbd44d5a3efa105feae0a6d/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir?ref=9b21c50335887fe9ecbd44d5a3efa105feae0a6d", "patch": "@@ -4,15 +4,15 @@ fn bar() -> bool {\n     let mut _0: bool;                    // return place in scope 0 at $DIR/inline-any-operand.rs:10:13: 10:17\n     let _1: fn(i32, i32) -> bool {foo};  // in scope 0 at $DIR/inline-any-operand.rs:11:9: 11:10\n     let mut _2: fn(i32, i32) -> bool {foo}; // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:6\n-    let mut _5: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:13\n-    let mut _6: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:13\n+    let mut _3: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:13\n+    let mut _4: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:13\n     scope 1 {\n         debug f => _1;                   // in scope 1 at $DIR/inline-any-operand.rs:11:9: 11:10\n         scope 2 (inlined foo) {          // at $DIR/inline-any-operand.rs:12:5: 12:13\n-            debug x => _5;               // in scope 2 at $DIR/inline-any-operand.rs:16:8: 16:9\n-            debug y => _6;               // in scope 2 at $DIR/inline-any-operand.rs:16:16: 16:17\n-            let mut _3: i32;             // in scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n-            let mut _4: i32;             // in scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+            debug x => _3;               // in scope 2 at $DIR/inline-any-operand.rs:16:8: 16:9\n+            debug y => _4;               // in scope 2 at $DIR/inline-any-operand.rs:16:16: 16:17\n+            let mut _5: i32;             // in scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n+            let mut _6: i32;             // in scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n         }\n     }\n \n@@ -24,19 +24,19 @@ fn bar() -> bool {\n                                          // + literal: Const { ty: fn(i32, i32) -> bool {foo}, val: Value(Scalar(<ZST>)) }\n         StorageLive(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n         _2 = _1;                         // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n-        StorageLive(_5);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        _5 = const 1_i32;                // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        StorageLive(_6);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        _6 = const -1_i32;               // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        StorageLive(_3);                 // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n-        _3 = _5;                         // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n-        StorageLive(_4);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n-        _4 = _6;                         // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n-        _0 = Eq(move _3, move _4);       // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:11\n-        StorageDead(_4);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n-        StorageDead(_3);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n-        StorageDead(_6);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        StorageDead(_5);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageLive(_3);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        _3 = const 1_i32;                // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        _4 = const -1_i32;               // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageLive(_5);                 // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n+        _5 = _3;                         // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n+        StorageLive(_6);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+        _6 = _4;                         // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+        _0 = Eq(move _5, move _6);       // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:11\n+        StorageDead(_6);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+        StorageDead(_5);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+        StorageDead(_4);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageDead(_3);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n         StorageDead(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:12: 12:13\n         StorageDead(_1);                 // scope 0 at $DIR/inline-any-operand.rs:13:1: 13:2\n         return;                          // scope 0 at $DIR/inline-any-operand.rs:13:2: 13:2"}, {"sha": "c6893022be60ac45f3b8ae72a6aa7cf34a0fbd07", "filename": "src/test/mir-opt/inline/inline_closure_borrows_arg.foo.Inline.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b21c50335887fe9ecbd44d5a3efa105feae0a6d/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9b21c50335887fe9ecbd44d5a3efa105feae0a6d/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir?ref=9b21c50335887fe9ecbd44d5a3efa105feae0a6d", "patch": "@@ -9,16 +9,16 @@ fn foo(_1: T, _2: &i32) -> i32 {\n     let mut _5: (&i32, &i32);            // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n     let mut _6: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n     let mut _7: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n+    let mut _8: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n     let mut _9: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-    let mut _10: &i32;                   // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n     scope 1 {\n         debug x => _3;                   // in scope 1 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n         scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-            debug r => _9;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:14: 12:15\n-            debug _s => _10;             // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:23: 12:25\n-            let _8: &i32;                // in scope 2 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n+            debug r => _8;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:14: 12:15\n+            debug _s => _9;              // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:23: 12:25\n+            let _10: &i32;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n             scope 3 {\n-                debug variable => _8;    // in scope 3 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n+                debug variable => _10;   // in scope 3 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n             }\n         }\n     }\n@@ -34,16 +34,16 @@ fn foo(_1: T, _2: &i32) -> i32 {\n         _7 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n         (_5.0: &i32) = move _6;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         (_5.1: &i32) = move _7;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        StorageLive(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        _8 = move (_5.0: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageLive(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        _9 = move (_5.0: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        StorageLive(_10);                // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        _10 = move (_5.1: &i32);         // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        StorageLive(_8);                 // scope 2 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n-        _8 = _9;                         // scope 2 at $DIR/inline-closure-borrows-arg.rs:13:24: 13:27\n-        _0 = (*_9);                      // scope 3 at $DIR/inline-closure-borrows-arg.rs:14:9: 14:18\n-        StorageDead(_8);                 // scope 2 at $DIR/inline-closure-borrows-arg.rs:15:5: 15:6\n-        StorageDead(_10);                // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        _9 = move (_5.1: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        StorageLive(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n+        _10 = _8;                        // scope 2 at $DIR/inline-closure-borrows-arg.rs:13:24: 13:27\n+        _0 = (*_8);                      // scope 3 at $DIR/inline-closure-borrows-arg.rs:14:9: 14:18\n+        StorageDead(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:15:5: 15:6\n         StorageDead(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        StorageDead(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageDead(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n         StorageDead(_6);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n         StorageDead(_5);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12"}, {"sha": "2950af63d3c607e48aef67b8c9fbc14edab585c4", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b21c50335887fe9ecbd44d5a3efa105feae0a6d/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9b21c50335887fe9ecbd44d5a3efa105feae0a6d/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=9b21c50335887fe9ecbd44d5a3efa105feae0a6d", "patch": "@@ -10,14 +10,14 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n     let mut _6: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:6\n     let mut _7: (i32,);                  // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:9\n     let mut _8: i32;                     // in scope 0 at $DIR/inline-closure-captures.rs:12:7: 12:8\n-    let mut _10: i32;                    // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+    let mut _9: i32;                     // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:9\n     scope 1 {\n         debug x => _3;                   // in scope 1 at $DIR/inline-closure-captures.rs:11:9: 11:10\n         scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure-captures.rs:12:5: 12:9\n-            debug _q => _10;             // in scope 2 at $DIR/inline-closure-captures.rs:11:14: 11:16\n+            debug _q => _9;              // in scope 2 at $DIR/inline-closure-captures.rs:11:14: 11:16\n             debug q => (*((*_6).0: &i32)); // in scope 2 at $DIR/inline-closure-captures.rs:10:23: 10:24\n             debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline-closure-captures.rs:10:17: 10:18\n-            let mut _9: T;               // in scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n+            let mut _10: T;              // in scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n         }\n     }\n \n@@ -37,14 +37,14 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         StorageLive(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n         _8 = _2;                         // scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n         (_7.0: i32) = move _8;           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        StorageLive(_10);                // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        _10 = move (_7.0: i32);          // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        StorageLive(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        _9 = move (_7.0: i32);           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         (_0.0: i32) = (*((*_6).0: &i32)); // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n-        StorageLive(_9);                 // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n-        _9 = (*((*_6).1: &T));           // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n-        (_0.1: T) = move _9;             // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n-        StorageDead(_9);                 // scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24\n-        StorageDead(_10);                // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        StorageLive(_10);                // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n+        _10 = (*((*_6).1: &T));          // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n+        (_0.1: T) = move _10;            // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n+        StorageDead(_10);                // scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24\n+        StorageDead(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageDead(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n         StorageDead(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n         StorageDead(_6);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9"}, {"sha": "df5355e905eb0704f329c3af0ccf588696a2d85f", "filename": "src/test/mir-opt/inline/issue_76997_inline_scopes_parenting.main.Inline.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b21c50335887fe9ecbd44d5a3efa105feae0a6d/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9b21c50335887fe9ecbd44d5a3efa105feae0a6d/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir?ref=9b21c50335887fe9ecbd44d5a3efa105feae0a6d", "patch": "@@ -6,14 +6,14 @@ fn main() -> () {\n     let mut _2: &[closure@$DIR/issue-76997-inline-scopes-parenting.rs:5:13: 5:33]; // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:6\n     let mut _3: ((),);                   // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n     let mut _4: ();                      // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:6:7: 6:9\n-    let mut _6: ();                      // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n+    let mut _5: ();                      // in scope 0 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n     scope 1 {\n         debug f => _1;                   // in scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:5:9: 5:10\n         scope 2 (inlined main::{closure#0}) { // at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n-            debug x => _6;               // in scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:14: 5:15\n-            let _5: ();                  // in scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:23: 5:24\n+            debug x => _5;               // in scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:14: 5:15\n+            let _6: ();                  // in scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:23: 5:24\n             scope 3 {\n-                debug y => _5;           // in scope 3 at $DIR/issue-76997-inline-scopes-parenting.rs:5:23: 5:24\n+                debug y => _6;           // in scope 3 at $DIR/issue-76997-inline-scopes-parenting.rs:5:23: 5:24\n             }\n         }\n     }\n@@ -25,13 +25,13 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         StorageLive(_4);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:7: 6:9\n         (_3.0: ()) = move _4;            // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n-        StorageLive(_6);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n-        _6 = move (_3.0: ());            // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n-        StorageLive(_5);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:23: 5:24\n-        _5 = const ();                   // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:27: 5:28\n+        StorageLive(_5);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n+        _5 = move (_3.0: ());            // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n+        StorageLive(_6);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:23: 5:24\n+        _6 = const ();                   // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:27: 5:28\n         _0 = const ();                   // scope 3 at $DIR/issue-76997-inline-scopes-parenting.rs:5:30: 5:31\n-        StorageDead(_5);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:32: 5:33\n-        StorageDead(_6);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n+        StorageDead(_6);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:32: 5:33\n+        StorageDead(_5);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         StorageDead(_4);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:9: 6:10\n         StorageDead(_3);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:9: 6:10\n         StorageDead(_2);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:9: 6:10"}]}