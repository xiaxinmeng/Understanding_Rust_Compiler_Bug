{"sha": "98cc18a5db11c7833a93d7d28d7045569395f835", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4Y2MxOGE1ZGIxMWM3ODMzYTkzZDdkMjhkNzA0NTU2OTM5NWY4MzU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-19T13:44:51Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-20T10:47:26Z"}, "message": "rename hir::map::name_by_hir_id to ::name", "tree": {"sha": "29010030e842247308fe1fdffd36dabd5389b36b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29010030e842247308fe1fdffd36dabd5389b36b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98cc18a5db11c7833a93d7d28d7045569395f835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98cc18a5db11c7833a93d7d28d7045569395f835", "html_url": "https://github.com/rust-lang/rust/commit/98cc18a5db11c7833a93d7d28d7045569395f835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98cc18a5db11c7833a93d7d28d7045569395f835/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "468647cabb231d7a3efbdc7a1819d7dbdf699b36", "url": "https://api.github.com/repos/rust-lang/rust/commits/468647cabb231d7a3efbdc7a1819d7dbdf699b36", "html_url": "https://github.com/rust-lang/rust/commit/468647cabb231d7a3efbdc7a1819d7dbdf699b36"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "259f6cd27112fbe602dd2fde729d8194f63faad3", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -940,7 +940,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn name_by_hir_id(&self, id: HirId) -> Name {\n+    pub fn name(&self, id: HirId) -> Name {\n         match self.get_by_hir_id(id) {\n             Node::Item(i) => i.ident.name,\n             Node::ForeignItem(fi) => fi.ident.name,\n@@ -951,7 +951,7 @@ impl<'hir> Map<'hir> {\n             Node::Lifetime(lt) => lt.name.ident().name,\n             Node::GenericParam(param) => param.name.ident().name,\n             Node::Binding(&Pat { node: PatKind::Binding(_, _, l, _), .. }) => l.name,\n-            Node::Ctor(..) => self.name_by_hir_id(self.get_parent_item(id)),\n+            Node::Ctor(..) => self.name(self.get_parent_item(id)),\n             _ => bug!(\"no name for {}\", self.node_to_string(id))\n         }\n     }"}, {"sha": "2c063aaaa86352625075d53329829b57f57d4c3f", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -1583,7 +1583,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 format!(\" for lifetime parameter `{}` in coherence check\", name)\n             }\n             infer::UpvarRegion(ref upvar_id, _) => {\n-                let var_name = self.tcx.hir().name_by_hir_id(upvar_id.var_path.hir_id);\n+                let var_name = self.tcx.hir().name(upvar_id.var_path.hir_id);\n                 format!(\" for capture of `{}` by closure\", var_name)\n             }\n             infer::NLL(..) => bug!(\"NLL variable found in lexical phase\"),"}, {"sha": "caed4288892eff2844e9a0c4728647577ff9a75e", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -31,7 +31,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                               \"...so that reference does not outlive borrowed content\");\n             }\n             infer::ReborrowUpvar(span, ref upvar_id) => {\n-                let var_name = self.tcx.hir().name_by_hir_id(upvar_id.var_path.hir_id);\n+                let var_name = self.tcx.hir().name(upvar_id.var_path.hir_id);\n                 err.span_note(span,\n                               &format!(\"...so that closure can access `{}`\", var_name));\n             }\n@@ -50,7 +50,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 err.span_note(span,\n                               &format!(\"...so that captured variable `{}` does not outlive the \\\n                                         enclosing closure\",\n-                                       self.tcx.hir().name_by_hir_id(id)));\n+                                       self.tcx.hir().name(id)));\n             }\n             infer::IndexSlice(span) => {\n                 err.span_note(span, \"...so that slice is not indexed outside the lifetime\");\n@@ -163,7 +163,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 err\n             }\n             infer::ReborrowUpvar(span, ref upvar_id) => {\n-                let var_name = self.tcx.hir().name_by_hir_id(upvar_id.var_path.hir_id);\n+                let var_name = self.tcx.hir().name(upvar_id.var_path.hir_id);\n                 let mut err = struct_span_err!(self.tcx.sess,\n                                                span,\n                                                E0313,\n@@ -220,7 +220,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                                E0474,\n                                                \"captured variable `{}` does not outlive the \\\n                                                 enclosing closure\",\n-                                               self.tcx.hir().name_by_hir_id(id));\n+                                               self.tcx.hir().name(id));\n                 self.tcx.note_and_explain_region(region_scope_tree, &mut err,\n                     \"captured variable is valid for \", sup, \"\");\n                 self.tcx.note_and_explain_region(region_scope_tree, &mut err,"}, {"sha": "cc78640c8db77a89d7add9d5feba342f559be3d4", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -2571,7 +2571,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n \n                             if let Some(upvars) = tcx.upvars(def_id) {\n                                 for (&var_id, place) in upvars.keys().zip(places) {\n-                                    let var_name = tcx.hir().name_by_hir_id(var_id);\n+                                    let var_name = tcx.hir().name(var_id);\n                                     struct_fmt.field(&var_name.as_str(), place);\n                                 }\n                             }\n@@ -2590,7 +2590,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n \n                             if let Some(upvars) = tcx.upvars(def_id) {\n                                 for (&var_id, place) in upvars.keys().zip(places) {\n-                                    let var_name = tcx.hir().name_by_hir_id(var_id);\n+                                    let var_name = tcx.hir().name(var_id);\n                                     struct_fmt.field(&var_name.as_str(), place);\n                                 }\n                             }"}, {"sha": "cb0ac0f07f28717fa7652b3151b0ebff2a9ee75c", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -600,7 +600,7 @@ pub trait PrettyPrinter<'tcx>:\n                         p!(\n                             write(\"{}{}:\",\n                                     sep,\n-                                    self.tcx().hir().name_by_hir_id(var_id)),\n+                                    self.tcx().hir().name(var_id)),\n                             print(upvar_ty));\n                         sep = \", \";\n                     }\n@@ -643,7 +643,7 @@ pub trait PrettyPrinter<'tcx>:\n                         p!(\n                             write(\"{}{}:\",\n                                     sep,\n-                                    self.tcx().hir().name_by_hir_id(var_id)),\n+                                    self.tcx().hir().name(var_id)),\n                             print(upvar_ty));\n                         sep = \", \";\n                     }"}, {"sha": "fed6100b1b2f2bb873f103c983eb9a2e9834a0d1", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -62,7 +62,7 @@ impl fmt::Debug for ty::ClosureUpvar<'tcx> {\n impl fmt::Debug for ty::UpvarId {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let name = ty::tls::with(|tcx| {\n-            tcx.hir().name_by_hir_id(self.var_path.hir_id)\n+            tcx.hir().name(self.var_path.hir_id)\n         });\n         write!(f, \"UpvarId({:?};`{}`;{:?})\",\n             self.var_path.hir_id,"}, {"sha": "bfc61520d51df8fa596e83dd8c32290fbfd899ab", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -1394,10 +1394,10 @@ impl BorrowckCtxt<'_, 'tcx> {\n                                       out: &mut String) {\n         match loan_path.kind {\n             LpUpvar(ty::UpvarId { var_path: ty::UpvarPath { hir_id: id }, closure_expr_id: _ }) => {\n-                out.push_str(&self.tcx.hir().name_by_hir_id(id).as_str());\n+                out.push_str(&self.tcx.hir().name(id).as_str());\n             }\n             LpVar(id) => {\n-                out.push_str(&self.tcx.hir().name_by_hir_id(id).as_str());\n+                out.push_str(&self.tcx.hir().name(id).as_str());\n             }\n \n             LpDowncast(ref lp_base, variant_def_id) => {"}, {"sha": "f23cffeda689c779eb7a8a558f1f97833a1433e8", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -853,7 +853,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     format!(\n                         \"...but `{}` will be dropped here, when the function `{}` returns\",\n                         name,\n-                        self.infcx.tcx.hir().name_by_hir_id(fn_hir_id),\n+                        self.infcx.tcx.hir().name(fn_hir_id),\n                     ),\n                 );\n "}, {"sha": "27049119b2615220c004b54aa420045150e75d9c", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -349,7 +349,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     let (&var_id, _) = self.infcx.tcx.upvars(def_id).unwrap()\n                         .get_index(field.index()).unwrap();\n \n-                    self.infcx.tcx.hir().name_by_hir_id(var_id).to_string()\n+                    self.infcx.tcx.hir().name(var_id).to_string()\n                 }\n                 _ => {\n                     // Might need a revision when the fields in trait RFC is implemented"}, {"sha": "a78bf0356d12affeb9d6c29ce0da46f64e2c84bf", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -130,7 +130,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n                 ty::UpvarCapture::ByRef(..) => true,\n             };\n             let mut upvar = Upvar {\n-                name: tcx.hir().name_by_hir_id(var_hir_id),\n+                name: tcx.hir().name(var_hir_id),\n                 var_hir_id,\n                 by_ref,\n                 mutability: Mutability::Not,"}, {"sha": "750a1324faeb3de025ba76910d2d1e0d6086aa0e", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/var_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -72,7 +72,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let upvar_hir_id = upvars[upvar_index].var_hir_id;\n         debug!(\"get_upvar_name_and_span_for_region: upvar_hir_id={:?}\", upvar_hir_id);\n \n-        let upvar_name = tcx.hir().name_by_hir_id(upvar_hir_id);\n+        let upvar_name = tcx.hir().name(upvar_hir_id);\n         let upvar_span = tcx.hir().span(upvar_hir_id);\n         debug!(\"get_upvar_name_and_span_for_region: upvar_name={:?} upvar_span={:?}\",\n                upvar_name, upvar_span);"}, {"sha": "a85f4776a8bee2638def80071668c35cb35cb875", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -767,7 +767,7 @@ fn for_each_late_bound_region_defined_on<'tcx>(\n                 owner: fn_def_id.index,\n                 local_id: *late_bound,\n             };\n-            let name = tcx.hir().name_by_hir_id(hir_id).as_interned_str();\n+            let name = tcx.hir().name(hir_id).as_interned_str();\n             let region_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n             let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                 scope: fn_def_id,"}, {"sha": "597f172da671f52c02e02a00011bd22d13d4316b", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -914,7 +914,7 @@ fn convert_path_expr<'a, 'tcx>(\n             let generics = cx.tcx.generics_of(item_def_id);\n             let local_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n             let index = generics.param_def_id_to_index[&local_def_id];\n-            let name = cx.tcx.hir().name_by_hir_id(hir_id).as_interned_str();\n+            let name = cx.tcx.hir().name(hir_id).as_interned_str();\n             let val = ConstValue::Param(ty::ParamConst::new(index, name));\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const("}, {"sha": "514a400d90e8c781e917c5ecefebd299fad83dab", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -123,7 +123,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     {\n         let tcx = self.tcx();\n         let lifetime_name = |def_id| {\n-            tcx.hir().name_by_hir_id(tcx.hir().as_local_hir_id(def_id).unwrap()).as_interned_str()\n+            tcx.hir().name(tcx.hir().as_local_hir_id(def_id).unwrap()).as_interned_str()\n         };\n \n         let r = match tcx.named_region(lifetime.hir_id) {\n@@ -2004,7 +2004,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let item_def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n-                tcx.mk_ty_param(index, tcx.hir().name_by_hir_id(hir_id).as_interned_str())\n+                tcx.mk_ty_param(index, tcx.hir().name(hir_id).as_interned_str())\n             }\n             Res::SelfTy(Some(_), None) => {\n                 // `Self` in trait or type alias.\n@@ -2194,7 +2194,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let item_def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n             let generics = tcx.generics_of(item_def_id);\n             let index = generics.param_def_id_to_index[&tcx.hir().local_def_id_from_hir_id(hir_id)];\n-            let name = tcx.hir().name_by_hir_id(hir_id).as_interned_str();\n+            let name = tcx.hir().name(hir_id).as_interned_str();\n             const_.val = ConstValue::Param(ty::ParamConst::new(index, name));\n         }\n "}, {"sha": "ac39757df74dc38b69a94e707bd4b9f0815f246a", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -652,5 +652,5 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n }\n \n fn var_name(tcx: TyCtxt<'_>, var_hir_id: hir::HirId) -> ast::Name {\n-    tcx.hir().name_by_hir_id(var_hir_id)\n+    tcx.hir().name(var_hir_id)\n }"}, {"sha": "e6f09927796fae3705187b417b0c7db2af2de696", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cc18a5db11c7833a93d7d28d7045569395f835/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=98cc18a5db11c7833a93d7d28d7045569395f835", "patch": "@@ -246,7 +246,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                     match parent_node.or(self.mod_ids.last().cloned()) {\n                         Some(parent) if parent != hir::CRATE_HIR_ID => {\n                             // FIXME: can we pull the parent module's name from elsewhere?\n-                            Some(self.cx.tcx.hir().name_by_hir_id(parent).to_string())\n+                            Some(self.cx.tcx.hir().name(parent).to_string())\n                         }\n                         _ => None,\n                     }"}]}