{"sha": "0e154aaad6486fa8bf19b02bc3026ede0ceb91cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMTU0YWFhZDY0ODZmYThiZjE5YjAyYmMzMDI2ZWRlMGNlYjkxY2Y=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-15T19:26:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-27T22:16:41Z"}, "message": "std: Clean up some annotations in thread::local\n\nDon't need so much manual #[doc(hidden)] and #[unstable] as much of it is\ninherited!", "tree": {"sha": "b9408ee8a3379d17e670e7bd383d742cf5d6d373", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9408ee8a3379d17e670e7bd383d742cf5d6d373"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e154aaad6486fa8bf19b02bc3026ede0ceb91cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e154aaad6486fa8bf19b02bc3026ede0ceb91cf", "html_url": "https://github.com/rust-lang/rust/commit/0e154aaad6486fa8bf19b02bc3026ede0ceb91cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e154aaad6486fa8bf19b02bc3026ede0ceb91cf/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "857ef6e272e5634cb9f3e6ee50eb6bc2a2e71651", "url": "https://api.github.com/repos/rust-lang/rust/commits/857ef6e272e5634cb9f3e6ee50eb6bc2a2e71651", "html_url": "https://github.com/rust-lang/rust/commit/857ef6e272e5634cb9f3e6ee50eb6bc2a2e71651"}], "stats": {"total": 24, "additions": 4, "deletions": 20}, "files": [{"sha": "d028a169b64b7051a3963cead3c4023aa9f6dc5d", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0e154aaad6486fa8bf19b02bc3026ede0ceb91cf/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e154aaad6486fa8bf19b02bc3026ede0ceb91cf/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=0e154aaad6486fa8bf19b02bc3026ede0ceb91cf", "patch": "@@ -18,7 +18,6 @@ use cell::UnsafeCell;\n \n // Sure wish we had macro hygiene, no?\n #[doc(hidden)]\n-#[unstable(feature = \"thread_local_internals\")]\n pub mod __impl {\n     pub use super::imp::Key as KeyInner;\n     pub use super::imp::destroy_value;\n@@ -78,12 +77,10 @@ pub struct LocalKey<T> {\n     // This is trivially devirtualizable by LLVM because we never store anything\n     // to this field and rustc can declare the `static` as constant as well.\n     #[doc(hidden)]\n-    #[unstable(feature = \"thread_local_internals\")]\n     pub inner: fn() -> &'static __impl::KeyInner<UnsafeCell<Option<T>>>,\n \n     // initialization routine to invoke to create a value\n     #[doc(hidden)]\n-    #[unstable(feature = \"thread_local_internals\")]\n     pub init: fn() -> T,\n }\n \n@@ -297,36 +294,31 @@ impl<T: 'static> LocalKey<T> {\n }\n \n #[cfg(all(any(target_os = \"macos\", target_os = \"linux\"), not(target_arch = \"aarch64\")))]\n+#[doc(hidden)]\n mod imp {\n     use prelude::v1::*;\n \n     use cell::UnsafeCell;\n     use intrinsics;\n     use ptr;\n \n-    #[doc(hidden)]\n-    #[unstable(feature = \"thread_local_internals\")]\n     pub struct Key<T> {\n         // Place the inner bits in an `UnsafeCell` to currently get around the\n         // \"only Sync statics\" restriction. This allows any type to be placed in\n         // the cell.\n         //\n         // Note that all access requires `T: 'static` so it can't be a type with\n         // any borrowed pointers still.\n-        #[unstable(feature = \"thread_local_internals\")]\n         pub inner: UnsafeCell<T>,\n \n         // Metadata to keep track of the state of the destructor. Remember that\n         // these variables are thread-local, not global.\n-        #[unstable(feature = \"thread_local_internals\")]\n         pub dtor_registered: UnsafeCell<bool>, // should be Cell\n-        #[unstable(feature = \"thread_local_internals\")]\n         pub dtor_running: UnsafeCell<bool>, // should be Cell\n     }\n \n     unsafe impl<T> ::marker::Sync for Key<T> { }\n \n-    #[doc(hidden)]\n     impl<T> Key<T> {\n         pub unsafe fn get(&'static self) -> Option<&'static T> {\n             if intrinsics::needs_drop::<T>() && *self.dtor_running.get() {\n@@ -422,8 +414,6 @@ mod imp {\n         _tlv_atexit(dtor, t);\n     }\n \n-    #[doc(hidden)]\n-    #[unstable(feature = \"thread_local_internals\")]\n     pub unsafe extern fn destroy_value<T>(ptr: *mut u8) {\n         let ptr = ptr as *mut Key<T>;\n         // Right before we run the user destructor be sure to flag the\n@@ -435,6 +425,7 @@ mod imp {\n }\n \n #[cfg(any(not(any(target_os = \"macos\", target_os = \"linux\")), target_arch = \"aarch64\"))]\n+#[doc(hidden)]\n mod imp {\n     use prelude::v1::*;\n \n@@ -444,16 +435,12 @@ mod imp {\n     use ptr;\n     use sys_common::thread_local::StaticKey as OsStaticKey;\n \n-    #[doc(hidden)]\n-    #[unstable(feature = \"thread_local_internals\")]\n     pub struct Key<T> {\n         // Statically allocated initialization expression, using an `UnsafeCell`\n         // for the same reasons as above.\n-        #[unstable(feature = \"thread_local_internals\")]\n         pub inner: UnsafeCell<T>,\n \n         // OS-TLS key that we'll use to key off.\n-        #[unstable(feature = \"thread_local_internals\")]\n         pub os: OsStaticKey,\n     }\n \n@@ -464,7 +451,6 @@ mod imp {\n         value: T,\n     }\n \n-    #[doc(hidden)]\n     impl<T> Key<T> {\n         pub unsafe fn get(&'static self) -> Option<&'static T> {\n             self.ptr().map(|p| &*p)\n@@ -489,14 +475,12 @@ mod imp {\n                 key: self,\n                 value: mem::transmute_copy(&self.inner),\n             };\n-            let ptr: *mut Value<T> = boxed::into_raw(ptr);\n+            let ptr = boxed::into_raw(ptr);\n             self.os.set(ptr as *mut u8);\n             Some(&mut (*ptr).value as *mut T)\n         }\n     }\n \n-    #[doc(hidden)]\n-    #[unstable(feature = \"thread_local_internals\")]\n     pub unsafe extern fn destroy_value<T: 'static>(ptr: *mut u8) {\n         // The OS TLS ensures that this key contains a NULL value when this\n         // destructor starts to run. We set it back to a sentinel value of 1 to\n@@ -505,7 +489,7 @@ mod imp {\n         //\n         // Note that to prevent an infinite loop we reset it back to null right\n         // before we return from the destructor ourselves.\n-        let ptr: Box<Value<T>> = Box::from_raw(ptr as *mut Value<T>);\n+        let ptr = Box::from_raw(ptr as *mut Value<T>);\n         let key = ptr.key;\n         key.os.set(1 as *mut u8);\n         drop(ptr);"}]}