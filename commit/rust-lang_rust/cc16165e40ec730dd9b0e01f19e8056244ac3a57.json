{"sha": "cc16165e40ec730dd9b0e01f19e8056244ac3a57", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMTYxNjVlNDBlYzczMGRkOWIwZTAxZjE5ZTgwNTYyNDRhYzNhNTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-04-15T01:45:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-04-15T01:48:58Z"}, "message": "implement evec/estr subtyping/lub/glb/etc", "tree": {"sha": "fdb15f08b66373dd1fe8190f28de0d17533e9c11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdb15f08b66373dd1fe8190f28de0d17533e9c11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc16165e40ec730dd9b0e01f19e8056244ac3a57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc16165e40ec730dd9b0e01f19e8056244ac3a57", "html_url": "https://github.com/rust-lang/rust/commit/cc16165e40ec730dd9b0e01f19e8056244ac3a57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc16165e40ec730dd9b0e01f19e8056244ac3a57/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb935b8fcbe1ceb128797aa574e0c1a332a6a14e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb935b8fcbe1ceb128797aa574e0c1a332a6a14e", "html_url": "https://github.com/rust-lang/rust/commit/eb935b8fcbe1ceb128797aa574e0c1a332a6a14e"}], "stats": {"total": 133, "additions": 126, "deletions": 7}, "files": [{"sha": "f7fb0829ff03d848b94d9cbf43a20cb2e5120858", "filename": "src/rustc/middle/infer.rs", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/cc16165e40ec730dd9b0e01f19e8056244ac3a57/src%2Frustc%2Fmiddle%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc16165e40ec730dd9b0e01f19e8056244ac3a57/src%2Frustc%2Fmiddle%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Finfer.rs?ref=cc16165e40ec730dd9b0e01f19e8056244ac3a57", "patch": "@@ -896,6 +896,8 @@ iface combine {\n     fn ret_styles(r1: ret_style, r2: ret_style) -> cres<ret_style>;\n     fn contraregions(a: ty::region, b: ty::region) -> cres<ty::region>;\n     fn regions(a: ty::region, b: ty::region) -> cres<ty::region>;\n+    fn vstores(vk: ty::terr_vstore_kind,\n+               a: ty::vstore, b: ty::vstore) -> cres<ty::vstore>;\n }\n \n enum sub = infer_ctxt;  // \"subtype\", \"subregion\" etc\n@@ -951,6 +953,27 @@ fn super_args<C:combine>(\n     }\n }\n \n+fn super_vstores<C:combine>(\n+    self: C, vk: ty::terr_vstore_kind,\n+    a: ty::vstore, b: ty::vstore) -> cres<ty::vstore> {\n+\n+    alt (a, b) {\n+      (ty::vstore_slice(a_r), ty::vstore_slice(b_r)) {\n+        self.contraregions(a_r, b_r).chain {|r|\n+            ok(ty::vstore_slice(r))\n+        }\n+      }\n+\n+      _ if a == b {\n+        ok(a)\n+      }\n+\n+      _ {\n+        err(ty::terr_vstores_differ(vk, b, a))\n+      }\n+    }\n+}\n+\n fn super_fns<C:combine>(\n     self: C, a_f: ty::fn_ty, b_f: ty::fn_ty) -> cres<ty::fn_ty> {\n \n@@ -1070,15 +1093,20 @@ fn super_tys<C:combine>(\n         }\n       }\n \n-      (ty::ty_evec(a_mt, ty::vstore_slice(a_r)),\n-       ty::ty_evec(b_mt, ty::vstore_slice(b_r))) {\n-        self.contraregions(a_r, b_r).chain {|r|\n-            self.mts(a_mt, b_mt).chain {|mt|\n-                ok(ty::mk_evec(tcx, mt, ty::vstore_slice(r)))\n+      (ty::ty_evec(a_mt, vs_a), ty::ty_evec(b_mt, vs_b)) {\n+        self.mts(a_mt, b_mt).chain {|mt|\n+            self.vstores(ty::terr_vec, vs_a, vs_b).chain {|vs|\n+                ok(ty::mk_evec(tcx, mt, vs))\n             }\n         }\n       }\n \n+      (ty::ty_estr(vs_a), ty::ty_estr(vs_b)) {\n+        self.vstores(ty::terr_str, vs_a, vs_b).chain {|vs|\n+            ok(ty::mk_estr(tcx,vs))\n+        }\n+      }\n+\n       (ty::ty_res(a_id, a_t, a_tps), ty::ty_res(b_id, b_t, b_tps))\n       if a_id == b_id {\n         self.tys(a_t, b_t).chain {|t|\n@@ -1234,6 +1262,11 @@ impl of combine for sub {\n         super_flds(self, a, b)\n     }\n \n+    fn vstores(vk: ty::terr_vstore_kind,\n+               a: ty::vstore, b: ty::vstore) -> cres<ty::vstore> {\n+        super_vstores(self, vk, a, b)\n+    }\n+\n     fn modes(a: ast::mode, b: ast::mode) -> cres<ast::mode> {\n         super_modes(self, a, b)\n     }\n@@ -1402,6 +1435,11 @@ impl of combine for lub {\n         super_flds(self, a, b)\n     }\n \n+    fn vstores(vk: ty::terr_vstore_kind,\n+               a: ty::vstore, b: ty::vstore) -> cres<ty::vstore> {\n+        super_vstores(self, vk, a, b)\n+    }\n+\n     fn modes(a: ast::mode, b: ast::mode) -> cres<ast::mode> {\n         super_modes(self, a, b)\n     }\n@@ -1587,6 +1625,11 @@ impl of combine for glb {\n         super_flds(self, a, b)\n     }\n \n+    fn vstores(vk: ty::terr_vstore_kind,\n+               a: ty::vstore, b: ty::vstore) -> cres<ty::vstore> {\n+        super_vstores(self, vk, a, b)\n+    }\n+\n     fn modes(a: ast::mode, b: ast::mode) -> cres<ast::mode> {\n         super_modes(self, a, b)\n     }"}, {"sha": "849d8af21b4e4c2ee39a9aa4b4e7dd9129e2f264", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc16165e40ec730dd9b0e01f19e8056244ac3a57/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc16165e40ec730dd9b0e01f19e8056244ac3a57/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=cc16165e40ec730dd9b0e01f19e8056244ac3a57", "patch": "@@ -2616,7 +2616,7 @@ fn trans_arg_expr(cx: block, arg: ty::arg, lldestty: TypeRef, e: @ast::expr,\n     ret rslt(bcx, val);\n }\n \n-fn adapt_borrowed_value(lv: lval_result, arg: ty::arg,\n+fn adapt_borrowed_value(lv: lval_result, _arg: ty::arg,\n                         e: @ast::expr) -> lval_result {\n     let bcx = lv.bcx;\n     if !expr_is_borrowed(bcx, e) { ret lv; }"}, {"sha": "506ccc4ab18d038286debd3ab96a8dacc9c03c36", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cc16165e40ec730dd9b0e01f19e8056244ac3a57/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc16165e40ec730dd9b0e01f19e8056244ac3a57/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=cc16165e40ec730dd9b0e01f19e8056244ac3a57", "patch": "@@ -11,6 +11,7 @@ import syntax::codemap::span;\n import metadata::csearch;\n import util::common::*;\n import util::ppaux::region_to_str;\n+import util::ppaux::vstore_to_str;\n import util::ppaux::ty_to_str;\n import util::ppaux::ty_constr_to_str;\n import syntax::print::pprust::*;\n@@ -105,7 +106,7 @@ export ty_fn_args;\n export type_constr;\n export kind, kind_sendable, kind_copyable, kind_noncopyable;\n export kind_can_be_copied, kind_can_be_sent, proto_kind, kind_lteq, type_kind;\n-export type_err;\n+export type_err, terr_vstore_kind;\n export type_err_to_str;\n export type_needs_drop;\n export type_allows_implicit_copy;\n@@ -328,6 +329,10 @@ type constr_general<ARG> = spanned<constr_general_<ARG, def_id>>;\n type type_constr = constr_general<@path>;\n type constr = constr_general<uint>;\n \n+enum terr_vstore_kind {\n+    terr_vec, terr_str\n+}\n+\n // Data structures used in type unification\n enum type_err {\n     terr_mismatch,\n@@ -348,6 +353,7 @@ enum type_err {\n     terr_constr_len(uint, uint),\n     terr_constr_mismatch(@type_constr, @type_constr),\n     terr_regions_differ(region, region),\n+    terr_vstores_differ(terr_vstore_kind, vstore, vstore),\n     terr_in_field(@type_err, str),\n     terr_sorts(t, t)\n }\n@@ -1976,6 +1982,10 @@ fn ty_sort_str(cx: ctxt, t: t) -> str {\n }\n \n fn type_err_to_str(cx: ctxt, err: type_err) -> str {\n+    fn terr_vstore_kind_to_str(k: terr_vstore_kind) -> str {\n+        alt k { terr_vec { \"[]\" } terr_str { \"str\" } }\n+    }\n+\n     alt err {\n       terr_mismatch { ret \"types differ\"; }\n       terr_ret_style_mismatch(expect, actual) {\n@@ -2038,6 +2048,12 @@ fn type_err_to_str(cx: ctxt, err: type_err) -> str {\n                  region_to_str(cx, subregion),\n                  region_to_str(cx, superregion));\n       }\n+      terr_vstores_differ(k, e_vs, a_vs) {\n+        ret #fmt(\"%s storage differs: expected %s but found %s\",\n+                 terr_vstore_kind_to_str(k),\n+                 vstore_to_str(cx, e_vs),\n+                 vstore_to_str(cx, a_vs));\n+      }\n       terr_in_field(err, fname) {\n         ret #fmt(\"in field `%s`, %s\", fname, type_err_to_str(cx, *err));\n       }"}, {"sha": "69b6d45baf73c3846bb9374d998663b52e054a85", "filename": "src/test/compile-fail/estr-subtyping.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cc16165e40ec730dd9b0e01f19e8056244ac3a57/src%2Ftest%2Fcompile-fail%2Festr-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc16165e40ec730dd9b0e01f19e8056244ac3a57/src%2Ftest%2Fcompile-fail%2Festr-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Festr-subtyping.rs?ref=cc16165e40ec730dd9b0e01f19e8056244ac3a57", "patch": "@@ -0,0 +1,30 @@\n+fn wants_box(x: str/@) { }\n+fn wants_uniq(x: str/~) { }\n+fn wants_three(x: str/3) { }\n+\n+fn has_box(x: str/@) {\n+   wants_box(x);\n+   wants_uniq(x); //! ERROR str storage differs: expected ~ but found @\n+   wants_three(x); //! ERROR str storage differs: expected 3 but found @\n+}\n+\n+fn has_uniq(x: str/~) {\n+   wants_box(x); //! ERROR str storage differs: expected @ but found ~\n+   wants_uniq(x);\n+   wants_three(x); //! ERROR str storage differs: expected 3 but found ~\n+}\n+\n+fn has_three(x: str/3) {\n+   wants_box(x); //! ERROR str storage differs: expected @ but found 3\n+   wants_uniq(x); //! ERROR str storage differs: expected ~ but found 3\n+   wants_three(x);\n+}\n+\n+fn has_four(x: str/4) {\n+   wants_box(x); //! ERROR str storage differs: expected @ but found 4\n+   wants_uniq(x); //! ERROR str storage differs: expected ~ but found 4\n+   wants_three(x); //! ERROR str storage differs: expected 3 but found 4\n+}\n+\n+fn main() {\n+}"}, {"sha": "843bd77625ebd5502ef7b500b077f3491d405eb6", "filename": "src/test/compile-fail/evec-subtyping.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cc16165e40ec730dd9b0e01f19e8056244ac3a57/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc16165e40ec730dd9b0e01f19e8056244ac3a57/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs?ref=cc16165e40ec730dd9b0e01f19e8056244ac3a57", "patch": "@@ -0,0 +1,30 @@\n+fn wants_box(x: [uint]/@) { }\n+fn wants_uniq(x: [uint]/~) { }\n+fn wants_three(x: [uint]/3) { }\n+\n+fn has_box(x: [uint]/@) {\n+   wants_box(x);\n+   wants_uniq(x); //! ERROR [] storage differs: expected ~ but found @\n+   wants_three(x); //! ERROR [] storage differs: expected 3 but found @\n+}\n+\n+fn has_uniq(x: [uint]/~) {\n+   wants_box(x); //! ERROR [] storage differs: expected @ but found ~\n+   wants_uniq(x);\n+   wants_three(x); //! ERROR [] storage differs: expected 3 but found ~\n+}\n+\n+fn has_three(x: [uint]/3) {\n+   wants_box(x); //! ERROR [] storage differs: expected @ but found 3\n+   wants_uniq(x); //! ERROR [] storage differs: expected ~ but found 3\n+   wants_three(x);\n+}\n+\n+fn has_four(x: [uint]/4) {\n+   wants_box(x); //! ERROR [] storage differs: expected @ but found 4\n+   wants_uniq(x); //! ERROR [] storage differs: expected ~ but found 4\n+   wants_three(x); //! ERROR [] storage differs: expected 3 but found 4\n+}\n+\n+fn main() {\n+}"}]}