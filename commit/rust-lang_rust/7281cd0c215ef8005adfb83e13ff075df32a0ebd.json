{"sha": "7281cd0c215ef8005adfb83e13ff075df32a0ebd", "node_id": "C_kwDOAAsO6NoAKDcyODFjZDBjMjE1ZWY4MDA1YWRmYjgzZTEzZmYwNzVkZjMyYTBlYmQ", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2023-03-07T10:42:34Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2023-03-07T10:42:34Z"}, "message": "Custom MIR: Support as casts", "tree": {"sha": "b4565aefc74d8243635d50585c94eeab31e03012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4565aefc74d8243635d50585c94eeab31e03012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7281cd0c215ef8005adfb83e13ff075df32a0ebd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmQHFRoACgkQGBtJ+fOP\nM3TVZgv/Ss2hJDLslaLPR8sL0WmQAb1U1OrP1I7mQL94RG/FhdiXE3b/M9mPcgyU\nGXKQB5b/RCksQ5aKL5MmJQf3ROdk/ay/mLSCbKyYhmO0ZDiqXdTJLy7AZMh3R1ge\nsEJZvv5typyNsFUo8OJ46x6bqRRE3XHiYI/HJ/R0xJ28ArqvA6aEYp+isFXamcua\n6aVN8wVrN4NCPqPZ6HwW1O97es1Mkj5pZJ8IXpAUgrPxZvFFiS95mnnHTjYZSCOQ\nTtLU9kRXCE8R3H2fr/KwpWWHkWsqqcaqNl5lxFFGKIMLcJygSD1MkCuxW7Zb0Nei\nRyODrqfiv8+uHKrvK5vI5t3cyXnUCBl6nowvsE1jaHx0Df6J6dlIMNoRO5PbU6jc\nepVkleHSqNXcqWNOZJZ6JXyzRF4mtVFtLfw0SiEbmredTsSzOzqvu/c22icGyGb2\nRgOGFeCD1i4Khbcm8Xey5II7xHga6JyFKGWdP2SF4z60F4cx3WSFOi+/XdBACZjo\nHmepfKzI\n=jaV5\n-----END PGP SIGNATURE-----", "payload": "tree b4565aefc74d8243635d50585c94eeab31e03012\nparent 5157d938c49af1248a21e7ed2fbc5c6f71963276\nauthor Andy Wang <cbeuw.andy@gmail.com> 1678185754 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1678185754 +0100\n\nCustom MIR: Support as casts\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7281cd0c215ef8005adfb83e13ff075df32a0ebd", "html_url": "https://github.com/rust-lang/rust/commit/7281cd0c215ef8005adfb83e13ff075df32a0ebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7281cd0c215ef8005adfb83e13ff075df32a0ebd/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5157d938c49af1248a21e7ed2fbc5c6f71963276", "url": "https://api.github.com/repos/rust-lang/rust/commits/5157d938c49af1248a21e7ed2fbc5c6f71963276", "html_url": "https://github.com/rust-lang/rust/commit/5157d938c49af1248a21e7ed2fbc5c6f71963276"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "09d2eb96d0f16e4644c19a3ea16c702fe0dd177b", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7281cd0c215ef8005adfb83e13ff075df32a0ebd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7281cd0c215ef8005adfb83e13ff075df32a0ebd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=7281cd0c215ef8005adfb83e13ff075df32a0ebd", "patch": "@@ -1,5 +1,6 @@\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::mir::tcx::PlaceTy;\n+use rustc_middle::ty::cast::mir_cast_kind;\n use rustc_middle::{mir::*, thir::*, ty};\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n@@ -142,7 +143,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n     }\n \n     fn parse_rvalue(&self, expr_id: ExprId) -> PResult<Rvalue<'tcx>> {\n-        parse_by_kind!(self, expr_id, _, \"rvalue\",\n+        parse_by_kind!(self, expr_id, expr, \"rvalue\",\n             @call(\"mir_discriminant\", args) => self.parse_place(args[0]).map(Rvalue::Discriminant),\n             @call(\"mir_checked\", args) => {\n                 parse_by_kind!(self, args[0], _, \"binary op\",\n@@ -167,6 +168,12 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n             ExprKind::Repeat { value, count } => Ok(\n                 Rvalue::Repeat(self.parse_operand(*value)?, *count)\n             ),\n+            ExprKind::Cast { source } => {\n+                let source = self.parse_operand(*source)?;\n+                let source_ty = source.ty(self.body.local_decls(), self.tcx);\n+                let cast_kind = mir_cast_kind(source_ty, expr.ty);\n+                Ok(Rvalue::Cast(cast_kind, source, expr.ty))\n+            },\n             _ => self.parse_operand(expr_id).map(Rvalue::Use),\n         )\n     }"}, {"sha": "d0b770783c1f12673665c903af3e2a02e5cd9e7d", "filename": "tests/mir-opt/building/custom/as_cast.float_to_int.built.after.mir", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7281cd0c215ef8005adfb83e13ff075df32a0ebd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.float_to_int.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7281cd0c215ef8005adfb83e13ff075df32a0ebd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.float_to_int.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.float_to_int.built.after.mir?ref=7281cd0c215ef8005adfb83e13ff075df32a0ebd", "patch": "@@ -0,0 +1,10 @@\n+// MIR for `float_to_int` after built\n+\n+fn float_to_int(_1: f32) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/as_cast.rs:+0:28: +0:31\n+\n+    bb0: {\n+        _0 = _1 as i32 (FloatToInt);     // scope 0 at $DIR/as_cast.rs:+3:13: +3:27\n+        return;                          // scope 0 at $DIR/as_cast.rs:+4:13: +4:21\n+    }\n+}"}, {"sha": "aaebff0d7673d82cfb822a3993f932ff4fca06e0", "filename": "tests/mir-opt/building/custom/as_cast.int_to_int.built.after.mir", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7281cd0c215ef8005adfb83e13ff075df32a0ebd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_int.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7281cd0c215ef8005adfb83e13ff075df32a0ebd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_int.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_int.built.after.mir?ref=7281cd0c215ef8005adfb83e13ff075df32a0ebd", "patch": "@@ -0,0 +1,10 @@\n+// MIR for `int_to_int` after built\n+\n+fn int_to_int(_1: u32) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/as_cast.rs:+0:26: +0:29\n+\n+    bb0: {\n+        _0 = _1 as i32 (IntToInt);       // scope 0 at $DIR/as_cast.rs:+3:13: +3:27\n+        return;                          // scope 0 at $DIR/as_cast.rs:+4:13: +4:21\n+    }\n+}"}, {"sha": "f040cf53df4a8714b5251c291ffc8b0f005ac55d", "filename": "tests/mir-opt/building/custom/as_cast.int_to_ptr.built.after.mir", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7281cd0c215ef8005adfb83e13ff075df32a0ebd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_ptr.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7281cd0c215ef8005adfb83e13ff075df32a0ebd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_ptr.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.int_to_ptr.built.after.mir?ref=7281cd0c215ef8005adfb83e13ff075df32a0ebd", "patch": "@@ -0,0 +1,10 @@\n+// MIR for `int_to_ptr` after built\n+\n+fn int_to_ptr(_1: usize) -> *const i32 {\n+    let mut _0: *const i32;              // return place in scope 0 at $DIR/as_cast.rs:+0:28: +0:38\n+\n+    bb0: {\n+        _0 = _1 as *const i32 (PointerFromExposedAddress); // scope 0 at $DIR/as_cast.rs:+3:13: +3:34\n+        return;                          // scope 0 at $DIR/as_cast.rs:+4:13: +4:21\n+    }\n+}"}, {"sha": "b4b5ac6aa3b1e1a9759afd261f62815a448e3d45", "filename": "tests/mir-opt/building/custom/as_cast.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7281cd0c215ef8005adfb83e13ff075df32a0ebd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7281cd0c215ef8005adfb83e13ff075df32a0ebd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fas_cast.rs?ref=7281cd0c215ef8005adfb83e13ff075df32a0ebd", "patch": "@@ -0,0 +1,43 @@\n+#![feature(custom_mir, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+// EMIT_MIR as_cast.int_to_int.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn int_to_int(x: u32) -> i32 {\n+    mir!(\n+        {\n+            RET = x as i32;\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR as_cast.float_to_int.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn float_to_int(x: f32) -> i32 {\n+    mir!(\n+        {\n+            RET = x as i32;\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR as_cast.int_to_ptr.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn int_to_ptr(x: usize) -> *const i32 {\n+    mir!(\n+        {\n+            RET = x as *const i32;\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    assert_eq!(int_to_int(5), 5);\n+    assert_eq!(float_to_int(5.), 5);\n+    assert_eq!(int_to_ptr(0), std::ptr::null());\n+}"}]}