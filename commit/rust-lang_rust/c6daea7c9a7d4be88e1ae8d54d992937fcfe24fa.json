{"sha": "c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZGFlYTdjOWE3ZDRiZTg4ZTFhZThkNTRkOTkyOTM3ZmNmZTI0ZmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-24T16:22:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-29T02:32:45Z"}, "message": "rustc: Split Emscripten to a separate codegen backend\n\nThis commit introduces a separately compiled backend for Emscripten, avoiding\ncompiling the `JSBackend` target in the main LLVM codegen backend. This builds\non the foundation provided by #47671 to create a new codegen backend dedicated\nsolely to Emscripten, removing the `JSBackend` of the main codegen backend in\nthe process.\n\nA new field was added to each target for this commit which specifies the backend\nto use for translation, the default being `llvm` which is the main backend that\nwe use. The Emscripten targets specify an `emscripten` backend instead of the\nmain `llvm` one.\n\nThere's a whole bunch of consequences of this change, but I'll try to enumerate\nthem here:\n\n* A *second* LLVM submodule was added in this commit. The main LLVM submodule\n  will soon start to drift from the Emscripten submodule, but currently they're\n  both at the same revision.\n* Logic was added to rustbuild to *not* build the Emscripten backend by default.\n  This is gated behind a `--enable-emscripten` flag to the configure script. By\n  default users should neither check out the emscripten submodule nor compile\n  it.\n* The `init_repo.sh` script was updated to fetch the Emscripten submodule from\n  GitHub the same way we do the main LLVM submodule (a tarball fetch).\n* The Emscripten backend, turned off by default, is still turned on for a number\n  of targets on CI. We'll only be shipping an Emscripten backend with Tier 1\n  platforms, though. All cross-compiled platforms will not be receiving an\n  Emscripten backend yet.\n\nThis commit means that when you download the `rustc` package in Rustup for Tier\n1 platforms you'll be receiving two trans backends, one for Emscripten and one\nthat's the general LLVM backend. If you never compile for Emscripten you'll\nnever use the Emscripten backend, so we may update this one day to only download\nthe Emscripten backend when you add the Emscripten target. For now though it's\njust an extra 10MB gzip'd.\n\nCloses #46819", "tree": {"sha": "29d8d7e69c49ae4e9930c3568ebccb8b840cfde1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29d8d7e69c49ae4e9930c3568ebccb8b840cfde1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "html_url": "https://github.com/rust-lang/rust/commit/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3", "html_url": "https://github.com/rust-lang/rust/commit/385ef1514c80fb8c0cb061dc69eb1d953a84e2b3"}], "stats": {"total": 401, "additions": 272, "deletions": 129}, "files": [{"sha": "65aafeea17bd9f737f0d6a11ef3e9fb815ccccc0", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -51,3 +51,6 @@\n [submodule \"src/doc/rust-by-example\"]\n \tpath = src/doc/rust-by-example\n \turl = https://github.com/rust-lang/rust-by-example\n+[submodule \"src/llvm-emscripten\"]\n+\tpath = src/llvm-emscripten\n+\turl = https://github.com/rust-lang/llvm"}, {"sha": "1007aad925d965df1d1625d4388fa9d9de8deeb4", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -81,7 +81,7 @@ matrix:\n     # OSX 10.7 and `xcode7` is the latest Xcode able to compile LLVM for 10.7.\n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--build=i686-apple-darwin --enable-extended --enable-profiler\"\n+        RUST_CONFIGURE_ARGS=\"--build=i686-apple-darwin --enable-extended --enable-profiler --enable-emscripten\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n@@ -95,7 +95,7 @@ matrix:\n \n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended --enable-sanitizers --enable-profiler\"\n+        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended --enable-sanitizers --enable-profiler --enable-emscripten\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1"}, {"sha": "7f1c538a32e4640a654607707b863fc8a1e2af97", "filename": "appveyor.yml", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -63,25 +63,27 @@ environment:\n       --build=x86_64-pc-windows-msvc\n       --enable-extended\n       --enable-profiler\n+      --enable-emscripten\n     SCRIPT: python x.py dist\n     DEPLOY: 1\n   - RUST_CONFIGURE_ARGS: >\n       --build=i686-pc-windows-msvc\n       --target=i586-pc-windows-msvc\n       --enable-extended\n       --enable-profiler\n+      --enable-emscripten\n     SCRIPT: python x.py dist\n     DEPLOY: 1\n   - MSYS_BITS: 32\n-    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-extended\n+    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-extended --enable-emscripten\n     SCRIPT: python x.py dist\n     MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n     MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32\n     DEPLOY: 1\n   - MSYS_BITS: 64\n     SCRIPT: python x.py dist\n-    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-extended\n+    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-extended --enable-emscripten\n     MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n     MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n     MINGW_DIR: mingw64"}, {"sha": "1d60d8c949441527c16b6f4eda11ca832186aaf2", "filename": "config.toml.example", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -305,6 +305,13 @@\n # result (broken, compiling, testing) into this JSON file.\n #save-toolstates = \"/path/to/toolstates.json\"\n \n+# This is an array of the codegen backends that will be compiled for the rustc\n+# that's being compiled. The default is to only build the LLVM codegen backend,\n+# but you can also optionally enable the \"emscripten\" backend for asm.js or\n+# make this an empty array (but that probably won't get too far in the\n+# bootstrap)\n+#codegen-backends = [\"llvm\"]\n+\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "603a97ddfd412ad23506bc932be645bc5ac65e8b", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -640,14 +640,23 @@ def update_submodules(self):\n              os.path.join(self.rust_root, \".gitmodules\"),\n              \"--get-regexp\", \"path\"]\n         ).decode(default_encoding).splitlines()]\n-        submodules = [module for module in submodules\n-                      if not ((module.endswith(\"llvm\") and\n-                               self.get_toml('llvm-config')) or\n-                              (module.endswith(\"jemalloc\") and\n-                               (self.get_toml('use-jemalloc') == \"false\" or\n-                                self.get_toml('jemalloc'))))]\n+        filtered_submodules = []\n+        for module in submodules:\n+            if module.endswith(\"llvm\"):\n+                if self.get_toml('llvm-config'):\n+                    continue\n+            if module.endswith(\"llvm-emscripten\"):\n+                backends = self.get_toml('codegen-backends')\n+                if backends is None or not 'emscripten' in backends:\n+                    continue\n+            if module.endswith(\"jemalloc\"):\n+                if self.get_toml('use-jemalloc') == 'false':\n+                    continue\n+                if self.get_toml('jemalloc'):\n+                    continue\n+            filtered_submodules.append(module)\n         run([\"git\", \"submodule\", \"update\",\n-             \"--init\", \"--recursive\"] + submodules,\n+             \"--init\", \"--recursive\"] + filtered_submodules,\n             cwd=self.rust_root, verbose=self.verbose)\n         run([\"git\", \"submodule\", \"-q\", \"foreach\", \"git\",\n              \"reset\", \"-q\", \"--hard\"],"}, {"sha": "fa289bbd76a8bc5924c9700e24ededf554c70e81", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 119, "deletions": 75, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -581,24 +581,30 @@ impl Step for RustcLink {\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct RustcTrans {\n+pub struct CodegenBackend {\n     pub compiler: Compiler,\n     pub target: Interned<String>,\n+    pub backend: Interned<String>,\n }\n \n-impl Step for RustcTrans {\n+impl Step for CodegenBackend {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/librustc_trans\").krate(\"rustc_trans\")\n+        run.path(\"src/librustc_trans\")\n     }\n \n     fn make_run(run: RunConfig) {\n-        run.builder.ensure(RustcTrans {\n+        let backend = run.builder.config.rust_codegen_backends.get(0);\n+        let backend = backend.cloned().unwrap_or_else(|| {\n+            INTERNER.intern_str(\"llvm\")\n+        });\n+        run.builder.ensure(CodegenBackend {\n             compiler: run.builder.compiler(run.builder.top_stage, run.host),\n             target: run.target,\n+            backend\n         });\n     }\n \n@@ -609,58 +615,92 @@ impl Step for RustcTrans {\n \n         builder.ensure(Rustc { compiler, target });\n \n-        // Build LLVM for our target. This will implicitly build the host LLVM\n-        // if necessary.\n-        builder.ensure(native::Llvm { target });\n-\n         if build.force_use_stage1(compiler, target) {\n-            builder.ensure(RustcTrans {\n+            builder.ensure(CodegenBackend {\n                 compiler: builder.compiler(1, build.build),\n                 target,\n+                backend: self.backend,\n             });\n             return;\n         }\n \n-        let _folder = build.fold_output(|| format!(\"stage{}-rustc_trans\", compiler.stage));\n-        println!(\"Building stage{} trans artifacts ({} -> {})\",\n-                 compiler.stage, &compiler.host, target);\n-\n         let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"build\");\n+        let mut features = build.rustc_features().to_string();\n         cargo.arg(\"--manifest-path\")\n-            .arg(build.src.join(\"src/librustc_trans/Cargo.toml\"))\n-            .arg(\"--features\").arg(build.rustc_features());\n+            .arg(build.src.join(\"src/librustc_trans/Cargo.toml\"));\n         rustc_cargo_env(build, &mut cargo);\n \n-        // Pass down configuration from the LLVM build into the build of\n-        // librustc_llvm and librustc_trans.\n-        if build.is_rust_llvm(target) {\n-            cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n-        }\n-        cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n-        let target_config = build.config.target_config.get(&target);\n-        if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n-            cargo.env(\"CFG_LLVM_ROOT\", s);\n-        }\n-        // Building with a static libstdc++ is only supported on linux right now,\n-        // not for MSVC or macOS\n-        if build.config.llvm_static_stdcpp &&\n-           !target.contains(\"freebsd\") &&\n-           !target.contains(\"windows\") &&\n-           !target.contains(\"apple\") {\n-            let file = compiler_file(build,\n-                                     build.cxx(target).unwrap(),\n-                                     target,\n-                                     \"libstdc++.a\");\n-            cargo.env(\"LLVM_STATIC_STDCPP\", file);\n-        }\n-        if build.config.llvm_link_shared {\n-            cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n+        match &*self.backend {\n+            \"llvm\" | \"emscripten\" => {\n+                // Build LLVM for our target. This will implicitly build the\n+                // host LLVM if necessary.\n+                let llvm_config = builder.ensure(native::Llvm {\n+                    target,\n+                    emscripten: self.backend == \"emscripten\",\n+                });\n+\n+                if self.backend == \"emscripten\" {\n+                    features.push_str(\" emscripten\");\n+                }\n+\n+                let _folder = build.fold_output(|| format!(\"stage{}-rustc_trans\", compiler.stage));\n+                println!(\"Building stage{} codegen artifacts ({} -> {}, {})\",\n+                         compiler.stage, &compiler.host, target, self.backend);\n+\n+                // Pass down configuration from the LLVM build into the build of\n+                // librustc_llvm and librustc_trans.\n+                if build.is_rust_llvm(target) {\n+                    cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n+                }\n+                cargo.env(\"LLVM_CONFIG\", &llvm_config);\n+                if self.backend != \"emscripten\" {\n+                    let target_config = build.config.target_config.get(&target);\n+                    if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n+                        cargo.env(\"CFG_LLVM_ROOT\", s);\n+                    }\n+                }\n+                // Building with a static libstdc++ is only supported on linux right now,\n+                // not for MSVC or macOS\n+                if build.config.llvm_static_stdcpp &&\n+                   !target.contains(\"freebsd\") &&\n+                   !target.contains(\"windows\") &&\n+                   !target.contains(\"apple\") {\n+                    let file = compiler_file(build,\n+                                             build.cxx(target).unwrap(),\n+                                             target,\n+                                             \"libstdc++.a\");\n+                    cargo.env(\"LLVM_STATIC_STDCPP\", file);\n+                }\n+                if build.config.llvm_link_shared {\n+                    cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n+                }\n+            }\n+            _ => panic!(\"unknown backend: {}\", self.backend),\n         }\n \n-        run_cargo(build,\n-                  &mut cargo,\n-                  &librustc_trans_stamp(build, compiler, target),\n-                  false);\n+        let tmp_stamp = build.cargo_out(compiler, Mode::Librustc, target)\n+            .join(\".tmp.stamp\");\n+        let files = run_cargo(build,\n+                              cargo.arg(\"--features\").arg(features),\n+                              &tmp_stamp,\n+                              false);\n+        let mut files = files.into_iter()\n+            .filter(|f| {\n+                let filename = f.file_name().unwrap().to_str().unwrap();\n+                is_dylib(filename) && filename.contains(\"rustc_trans-\")\n+            });\n+        let codegen_backend = match files.next() {\n+            Some(f) => f,\n+            None => panic!(\"no dylibs built for codegen backend?\"),\n+        };\n+        if let Some(f) = files.next() {\n+            panic!(\"codegen backend built two dylibs:\\n{}\\n{}\",\n+                   codegen_backend.display(),\n+                   f.display());\n+        }\n+        let stamp = codegen_backend_stamp(build, compiler, target, self.backend);\n+        let codegen_backend = codegen_backend.to_str().unwrap();\n+        t!(t!(File::create(&stamp)).write_all(codegen_backend.as_bytes()));\n     }\n }\n \n@@ -682,33 +722,29 @@ fn copy_codegen_backends_to_sysroot(builder: &Builder,\n     // not linked into the main compiler by default but is rather dynamically\n     // selected at runtime for inclusion.\n     //\n-    // Here we're looking for the output dylib of the `RustcTrans` step and\n+    // Here we're looking for the output dylib of the `CodegenBackend` step and\n     // we're copying that into the `codegen-backends` folder.\n     let libdir = builder.sysroot_libdir(target_compiler, target);\n     let dst = libdir.join(\"codegen-backends\");\n     t!(fs::create_dir_all(&dst));\n-    let stamp = librustc_trans_stamp(build, compiler, target);\n \n-    let mut copied = None;\n-    for file in read_stamp_file(&stamp) {\n-        let filename = match file.file_name().and_then(|s| s.to_str()) {\n-            Some(s) => s,\n-            None => continue,\n+    for backend in builder.config.rust_codegen_backends.iter() {\n+        let stamp = codegen_backend_stamp(build, compiler, target, *backend);\n+        let mut dylib = String::new();\n+        t!(t!(File::open(&stamp)).read_to_string(&mut dylib));\n+        let file = Path::new(&dylib);\n+        let filename = file.file_name().unwrap().to_str().unwrap();\n+        // change `librustc_trans-xxxxxx.so` to `librustc_trans-llvm.so`\n+        let target_filename = {\n+            let dash = filename.find(\"-\").unwrap();\n+            let dot = filename.find(\".\").unwrap();\n+            format!(\"{}-{}{}\",\n+                    &filename[..dash],\n+                    backend,\n+                    &filename[dot..])\n         };\n-        if !is_dylib(filename) || !filename.contains(\"rustc_trans-\") {\n-            continue\n-        }\n-        match copied {\n-            None => copied = Some(file.clone()),\n-            Some(ref s) => {\n-                panic!(\"copied two codegen backends:\\n{}\\n{}\",\n-                       s.display(),\n-                       file.display());\n-            }\n-        }\n-        copy(&file, &dst.join(filename));\n+        copy(&file, &dst.join(target_filename));\n     }\n-    assert!(copied.is_some(), \"failed to find a codegen backend to copy\");\n }\n \n /// Cargo's output path for the standard library in a given stage, compiled\n@@ -729,10 +765,12 @@ pub fn librustc_stamp(build: &Build, compiler: Compiler, target: Interned<String\n     build.cargo_out(compiler, Mode::Librustc, target).join(\".librustc.stamp\")\n }\n \n-pub fn librustc_trans_stamp(build: &Build,\n-                            compiler: Compiler,\n-                            target: Interned<String>) -> PathBuf {\n-    build.cargo_out(compiler, Mode::Librustc, target).join(\".librustc_trans.stamp\")\n+fn codegen_backend_stamp(build: &Build,\n+                         compiler: Compiler,\n+                         target: Interned<String>,\n+                         backend: Interned<String>) -> PathBuf {\n+    build.cargo_out(compiler, Mode::Librustc, target)\n+        .join(format!(\".librustc_trans-{}.stamp\", backend))\n }\n \n fn compiler_file(build: &Build,\n@@ -849,10 +887,13 @@ impl Step for Assemble {\n                 compiler: build_compiler,\n                 target: target_compiler.host,\n             });\n-            builder.ensure(RustcTrans {\n-                compiler: build_compiler,\n-                target: target_compiler.host,\n-            });\n+            for &backend in build.config.rust_codegen_backends.iter() {\n+                builder.ensure(CodegenBackend {\n+                    compiler: build_compiler,\n+                    target: target_compiler.host,\n+                    backend,\n+                });\n+            }\n         }\n \n         let stage = target_compiler.stage;\n@@ -922,7 +963,9 @@ fn stderr_isatty() -> bool {\n     }\n }\n \n-pub fn run_cargo(build: &Build, cargo: &mut Command, stamp: &Path, is_check: bool) {\n+pub fn run_cargo(build: &Build, cargo: &mut Command, stamp: &Path, is_check: bool)\n+    -> Vec<PathBuf>\n+{\n     // Instruct Cargo to give us json messages on stdout, critically leaving\n     // stderr as piped so we can get those pretty colors.\n     cargo.arg(\"--message-format\").arg(\"json\")\n@@ -1066,8 +1109,8 @@ pub fn run_cargo(build: &Build, cargo: &mut Command, stamp: &Path, is_check: boo\n     let mut new_contents = Vec::new();\n     let mut max = None;\n     let mut max_path = None;\n-    for dep in deps {\n-        let mtime = mtime(&dep);\n+    for dep in deps.iter() {\n+        let mtime = mtime(dep);\n         if Some(mtime) > max {\n             max = Some(mtime);\n             max_path = Some(dep.clone());\n@@ -1080,12 +1123,13 @@ pub fn run_cargo(build: &Build, cargo: &mut Command, stamp: &Path, is_check: boo\n     if stamp_contents == new_contents && max <= stamp_mtime {\n         build.verbose(&format!(\"not updating {:?}; contents equal and {} <= {}\",\n                 stamp, max, stamp_mtime));\n-        return\n+        return deps\n     }\n     if max > stamp_mtime {\n         build.verbose(&format!(\"updating {:?} as {:?} changed\", stamp, max_path));\n     } else {\n         build.verbose(&format!(\"updating {:?} as deps changed\", stamp));\n     }\n     t!(t!(File::create(stamp)).write_all(&new_contents));\n+    deps\n }"}, {"sha": "dbeb27cbfb7d36d5b1f8e377da977f86a7af37bf", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -91,6 +91,7 @@ pub struct Config {\n     pub rust_optimize_tests: bool,\n     pub rust_debuginfo_tests: bool,\n     pub rust_dist_src: bool,\n+    pub rust_codegen_backends: Vec<Interned<String>>,\n \n     pub build: Interned<String>,\n     pub hosts: Vec<Interned<String>>,\n@@ -280,6 +281,7 @@ struct Rust {\n     quiet_tests: Option<bool>,\n     test_miri: Option<bool>,\n     save_toolstates: Option<String>,\n+    codegen_backends: Option<Vec<String>>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -318,6 +320,7 @@ impl Config {\n         config.ignore_git = false;\n         config.rust_dist_src = true;\n         config.test_miri = false;\n+        config.rust_codegen_backends = vec![INTERNER.intern_str(\"llvm\")];\n \n         config.on_fail = flags.on_fail;\n         config.stage = flags.stage;\n@@ -465,6 +468,12 @@ impl Config {\n             config.musl_root = rust.musl_root.clone().map(PathBuf::from);\n             config.save_toolstates = rust.save_toolstates.clone().map(PathBuf::from);\n \n+            if let Some(ref backends) = rust.codegen_backends {\n+                config.rust_codegen_backends = backends.iter()\n+                    .map(|s| INTERNER.intern_str(s))\n+                    .collect();\n+            }\n+\n             match rust.codegen_units {\n                 Some(0) => config.rust_codegen_units = Some(num_cpus::get() as u32),\n                 Some(n) => config.rust_codegen_units = Some(n),"}, {"sha": "bc6f666d0012f5d2aa0930fff2743d5724375abc", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -65,6 +65,7 @@ def v(*args):\n o(\"dist-src\", \"rust.dist-src\", \"when building tarballs enables building a source tarball\")\n o(\"cargo-openssl-static\", \"build.openssl-static\", \"static openssl in cargo\")\n o(\"profiler\", \"build.profiler\", \"build the profiler runtime\")\n+o(\"emscripten\", None, \"compile the emscripten backend as well as LLVM\")\n \n # Optimization and debugging options. These may be overridden by the release\n # channel, etc.\n@@ -321,6 +322,8 @@ def set(key, value):\n         set('build.host', value.split(','))\n     elif option.name == 'target':\n         set('build.target', value.split(','))\n+    elif option.name == 'emscripten':\n+        set('rust.codegen-backends', ['llvm', 'emscripten'])\n     elif option.name == 'option-checking':\n         # this was handled above\n         pass"}, {"sha": "aae0a4f056f08b9ef32ce2f3dde7dd740c1f8912", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -480,6 +480,10 @@ impl Build {\n         self.out.join(&*target).join(\"llvm\")\n     }\n \n+    fn emscripten_llvm_out(&self, target: Interned<String>) -> PathBuf {\n+        self.out.join(&*target).join(\"llvm-emscripten\")\n+    }\n+\n     /// Output directory for all documentation for a target\n     fn doc_out(&self, target: Interned<String>) -> PathBuf {\n         self.out.join(&*target).join(\"doc\")"}, {"sha": "3f30756a568ce0541a8a18497f731931dbb2f5f4", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 56, "deletions": 19, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -22,73 +22,96 @@ use std::env;\n use std::ffi::OsString;\n use std::fs::{self, File};\n use std::io::{Read, Write};\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n \n use build_helper::output;\n use cmake;\n use cc;\n \n use Build;\n-use util;\n+use util::{self, exe};\n use build_helper::up_to_date;\n use builder::{Builder, RunConfig, ShouldRun, Step};\n use cache::Interned;\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Llvm {\n     pub target: Interned<String>,\n+    pub emscripten: bool,\n }\n \n impl Step for Llvm {\n-    type Output = ();\n+    type Output = PathBuf; // path to llvm-config\n+\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/llvm\")\n+        run.path(\"src/llvm\").path(\"src/llvm-emscripten\")\n     }\n \n     fn make_run(run: RunConfig) {\n-        run.builder.ensure(Llvm { target: run.target })\n+        let emscripten = run.path.map(|p| {\n+            p.ends_with(\"llvm-emscripten\")\n+        }).unwrap_or(false);\n+        run.builder.ensure(Llvm {\n+            target: run.target,\n+            emscripten,\n+        });\n     }\n \n     /// Compile LLVM for `target`.\n-    fn run(self, builder: &Builder) {\n+    fn run(self, builder: &Builder) -> PathBuf {\n         let build = builder.build;\n         let target = self.target;\n+        let emscripten = self.emscripten;\n \n         // If we're using a custom LLVM bail out here, but we can only use a\n         // custom LLVM for the build triple.\n-        if let Some(config) = build.config.target_config.get(&target) {\n-            if let Some(ref s) = config.llvm_config {\n-                return check_llvm_version(build, s);\n+        if !self.emscripten {\n+            if let Some(config) = build.config.target_config.get(&target) {\n+                if let Some(ref s) = config.llvm_config {\n+                    check_llvm_version(build, s);\n+                    return s.to_path_buf()\n+                }\n             }\n         }\n \n         let rebuild_trigger = build.src.join(\"src/rustllvm/llvm-rebuild-trigger\");\n         let mut rebuild_trigger_contents = String::new();\n         t!(t!(File::open(&rebuild_trigger)).read_to_string(&mut rebuild_trigger_contents));\n \n-        let out_dir = build.llvm_out(target);\n+        let (out_dir, llvm_config_ret_dir) = if emscripten {\n+            let dir = build.emscripten_llvm_out(target);\n+            let config_dir = dir.join(\"bin\");\n+            (dir, config_dir)\n+        } else {\n+            (build.llvm_out(target),\n+                build.llvm_out(build.config.build).join(\"bin\"))\n+        };\n         let done_stamp = out_dir.join(\"llvm-finished-building\");\n+        let build_llvm_config = llvm_config_ret_dir\n+            .join(exe(\"llvm-config\", &*build.config.build));\n         if done_stamp.exists() {\n             let mut done_contents = String::new();\n             t!(t!(File::open(&done_stamp)).read_to_string(&mut done_contents));\n \n             // If LLVM was already built previously and contents of the rebuild-trigger file\n             // didn't change from the previous build, then no action is required.\n             if done_contents == rebuild_trigger_contents {\n-                return\n+                return build_llvm_config\n             }\n         }\n \n         let _folder = build.fold_output(|| \"llvm\");\n-        println!(\"Building LLVM for {}\", target);\n+        let descriptor = if emscripten { \"Emscripten \" } else { \"\" };\n+        println!(\"Building {}LLVM for {}\", descriptor, target);\n         let _time = util::timeit();\n         t!(fs::create_dir_all(&out_dir));\n \n         // http://llvm.org/docs/CMake.html\n-        let mut cfg = cmake::Config::new(build.src.join(\"src/llvm\"));\n+        let root = if self.emscripten { \"src/llvm-emscripten\" } else { \"src/llvm\" };\n+        let mut cfg = cmake::Config::new(build.src.join(root));\n         if build.config.ninja {\n             cfg.generator(\"Ninja\");\n         }\n@@ -99,13 +122,22 @@ impl Step for Llvm {\n             (true, true) => \"RelWithDebInfo\",\n         };\n \n-        // NOTE: remember to also update `config.toml.example` when changing the defaults!\n-        let llvm_targets = match build.config.llvm_targets {\n-            Some(ref s) => s,\n-            None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\",\n+        // NOTE: remember to also update `config.toml.example` when changing the\n+        // defaults!\n+        let llvm_targets = if self.emscripten {\n+            \"JSBackend\"\n+        } else {\n+            match build.config.llvm_targets {\n+                Some(ref s) => s,\n+                None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;MSP430;Sparc;NVPTX;Hexagon\",\n+            }\n         };\n \n-        let llvm_exp_targets = &build.config.llvm_experimental_targets;\n+        let llvm_exp_targets = if self.emscripten {\n+            \"\"\n+        } else {\n+            &build.config.llvm_experimental_targets[..]\n+        };\n \n         let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n \n@@ -155,7 +187,10 @@ impl Step for Llvm {\n \n         // http://llvm.org/docs/HowToCrossCompileLLVM.html\n         if target != build.build {\n-            builder.ensure(Llvm { target: build.build });\n+            builder.ensure(Llvm {\n+                target: build.build,\n+                emscripten: false,\n+            });\n             // FIXME: if the llvm root for the build triple is overridden then we\n             //        should use llvm-tblgen from there, also should verify that it\n             //        actually exists most of the time in normal installs of LLVM.\n@@ -241,6 +276,8 @@ impl Step for Llvm {\n         cfg.build();\n \n         t!(t!(File::create(&done_stamp)).write_all(rebuild_trigger_contents.as_bytes()));\n+\n+        build_llvm_config\n     }\n }\n "}, {"sha": "ff0708459bc898682b8528f66e030fa70e361d0d", "filename": "src/ci/docker/asmjs/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -29,6 +29,6 @@ ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n ENV TARGETS=asmjs-unknown-emscripten\n \n-ENV RUST_CONFIGURE_ARGS --target=$TARGETS\n+ENV RUST_CONFIGURE_ARGS --target=$TARGETS --enable-emscripten\n \n ENV SCRIPT python2.7 ../x.py test --target $TARGETS"}, {"sha": "0fd6af6e10d34317bf0778df3eabc48a4b432e3b", "filename": "src/ci/docker/dist-i686-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -85,7 +85,8 @@ ENV RUST_CONFIGURE_ARGS \\\n       --host=$HOSTS \\\n       --enable-extended \\\n       --enable-sanitizers \\\n-      --enable-profiler\n+      --enable-profiler \\\n+      --enable-emscripten\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n \n # This is the only builder which will create source tarballs"}, {"sha": "c83f101d0ac41b15792d02415a4e3093d5c27faa", "filename": "src/ci/docker/dist-various-1/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -95,7 +95,8 @@ ENV RUST_CONFIGURE_ARGS \\\n       --musl-root-armv7=/musl-armv7 \\\n       --musl-root-aarch64=/musl-aarch64 \\\n       --musl-root-mips=/musl-mips \\\n-      --musl-root-mipsel=/musl-mipsel\n+      --musl-root-mipsel=/musl-mipsel \\\n+      --enable-emscripten\n \n ENV SCRIPT python2.7 ../x.py dist --target $TARGETS\n "}, {"sha": "d368a00b55bd50ce9f7e3853b34b0f93ed355562", "filename": "src/ci/docker/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -85,7 +85,8 @@ ENV RUST_CONFIGURE_ARGS \\\n       --host=$HOSTS \\\n       --enable-extended \\\n       --enable-sanitizers \\\n-      --enable-profiler\n+      --enable-profiler \\\n+      --enable-emscripten\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n \n # This is the only builder which will create source tarballs"}, {"sha": "8ab4276fa3b059b38f1a3aba9479c89eba4e4603", "filename": "src/ci/init_repo.sh", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -48,7 +48,12 @@ travis_time_start\n # Update the cache (a pristine copy of the rust source master)\n retry sh -c \"rm -rf $cache_src_dir && mkdir -p $cache_src_dir && \\\n     git clone --depth 1 https://github.com/rust-lang/rust.git $cache_src_dir\"\n-(cd $cache_src_dir && git rm src/llvm)\n+if [ -d $cache_src_dir/src/llvm ]; then\n+  (cd $cache_src_dir && git rm src/llvm)\n+fi\n+if [ -d $cache_src_dir/src/llvm-emscripten ]; then\n+  (cd $cache_src_dir && git rm src/llvm-emscripten)\n+fi\n retry sh -c \"cd $cache_src_dir && \\\n     git submodule deinit -f . && git submodule sync && git submodule update --init\"\n \n@@ -64,14 +69,14 @@ travis_time_start\n # http://stackoverflow.com/questions/12641469/list-submodules-in-a-git-repository\n modules=\"$(git config --file .gitmodules --get-regexp '\\.path$' | cut -d' ' -f2)\"\n for module in $modules; do\n-    if [ \"$module\" = src/llvm ]; then\n-        commit=\"$(git ls-tree HEAD src/llvm | awk '{print $3}')\"\n-        git rm src/llvm\n+    if [ \"$module\" = src/llvm ] || [ \"$module\" = src/llvm-emscripten ]; then\n+        commit=\"$(git ls-tree HEAD $module | awk '{print $3}')\"\n+        git rm $module\n         retry sh -c \"rm -f $commit.tar.gz && \\\n             curl -sSL -O https://github.com/rust-lang/llvm/archive/$commit.tar.gz\"\n         tar -C src/ -xf \"$commit.tar.gz\"\n         rm \"$commit.tar.gz\"\n-        mv \"src/llvm-$commit\" src/llvm\n+        mv \"src/llvm-$commit\" $module\n         continue\n     fi\n     if [ ! -e \"$cache_src_dir/$module/.git\" ]; then"}, {"sha": "5d9f0f6012bf267019070055d907ee983391b5ad", "filename": "src/librustc_back/target/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -31,6 +31,7 @@ pub fn target() -> Result<Target, String> {\n         max_atomic_width: Some(32),\n         post_link_args: args,\n         target_family: Some(\"unix\".to_string()),\n+        codegen_backend: \"emscripten\".to_string(),\n         .. Default::default()\n     };\n     Ok(Target {"}, {"sha": "3c8a676dcc20062c5765d7122a62e4b219079904", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -465,6 +465,9 @@ pub struct TargetOptions {\n     /// Whether to lower 128-bit operations to compiler_builtins calls.  Use if\n     /// your backend only supports 64-bit and smaller math.\n     pub i128_lowering: bool,\n+\n+    /// The codegen backend to use for this target, typically \"llvm\"\n+    pub codegen_backend: String,\n }\n \n impl Default for TargetOptions {\n@@ -534,6 +537,7 @@ impl Default for TargetOptions {\n             singlethread: false,\n             no_builtins: false,\n             i128_lowering: false,\n+            codegen_backend: \"llvm\".to_string(),\n         }\n     }\n }\n@@ -780,6 +784,7 @@ impl Target {\n         key!(requires_lto, bool);\n         key!(singlethread, bool);\n         key!(no_builtins, bool);\n+        key!(codegen_backend);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -976,6 +981,7 @@ impl ToJson for Target {\n         target_option_val!(requires_lto);\n         target_option_val!(singlethread);\n         target_option_val!(no_builtins);\n+        target_option_val!(codegen_backend);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "4823541f2262ca89d56e2e2718897cb360bf80ea", "filename": "src/librustc_back/target/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -35,6 +35,7 @@ pub fn target() -> Result<Target, String> {\n         max_atomic_width: Some(32),\n         post_link_args,\n         target_family: Some(\"unix\".to_string()),\n+        codegen_backend: \"emscripten\".to_string(),\n         .. Default::default()\n     };\n     Ok(Target {"}, {"sha": "6118ee94c84cff354350d57f5b60302890f03131", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -218,19 +218,16 @@ pub fn get_trans(sess: &Session) -> Box<TransCrate> {\n     static mut LOAD: fn() -> Box<TransCrate> = || unreachable!();\n \n     INIT.call_once(|| {\n-        let trans_name = sess.opts.debugging_opts.codegen_backend.as_ref();\n-        let backend = match trans_name.map(|s| &**s) {\n-            None |\n-            Some(\"llvm\") => get_trans_default(),\n-            Some(\"metadata_only\") => {\n+        let trans_name = sess.opts.debugging_opts.codegen_backend.as_ref()\n+            .unwrap_or(&sess.target.target.options.codegen_backend);\n+        let backend = match &trans_name[..] {\n+            \"metadata_only\" => {\n                 rustc_trans_utils::trans_crate::MetadataOnlyTransCrate::new\n             }\n-            Some(filename) if filename.contains(\".\") => {\n+            filename if filename.contains(\".\") => {\n                 load_backend_from_dylib(filename.as_ref())\n             }\n-            Some(trans_name) => {\n-                sess.fatal(&format!(\"unknown codegen backend {}\", trans_name));\n-            }\n+            trans_name => get_trans_sysroot(trans_name),\n         };\n \n         unsafe {\n@@ -242,7 +239,7 @@ pub fn get_trans(sess: &Session) -> Box<TransCrate> {\n     backend\n }\n \n-fn get_trans_default() -> fn() -> Box<TransCrate> {\n+fn get_trans_sysroot(backend_name: &str) -> fn() -> Box<TransCrate> {\n     // For now we only allow this function to be called once as it'll dlopen a\n     // few things, which seems to work best if we only do that once. In\n     // general this assertion never trips due to the once guard in `get_trans`,\n@@ -324,6 +321,7 @@ fn get_trans_default() -> fn() -> Box<TransCrate> {\n \n     let mut file: Option<PathBuf> = None;\n \n+    let expected_name = format!(\"rustc_trans-{}\", backend_name);\n     for entry in d.filter_map(|e| e.ok()) {\n         let path = entry.path();\n         let filename = match path.file_name().and_then(|s| s.to_str()) {\n@@ -334,7 +332,7 @@ fn get_trans_default() -> fn() -> Box<TransCrate> {\n             continue\n         }\n         let name = &filename[DLL_PREFIX.len() .. filename.len() - DLL_SUFFIX.len()];\n-        if !name.starts_with(\"rustc_trans\") {\n+        if name != expected_name {\n             continue\n         }\n         if let Some(ref prev) = file {\n@@ -350,8 +348,9 @@ fn get_trans_default() -> fn() -> Box<TransCrate> {\n     match file {\n         Some(ref s) => return load_backend_from_dylib(s),\n         None => {\n-            let err = format!(\"failed to load default codegen backend, no appropriate \\\n-                               codegen dylib found in `{}`\", sysroot.display());\n+            let err = format!(\"failed to load default codegen backend for `{}`, \\\n+                               no appropriate codegen dylib found in `{}`\",\n+                               backend_name, sysroot.display());\n             early_error(ErrorOutputType::default(), &err);\n         }\n     }\n@@ -1072,7 +1071,7 @@ pub fn version(binary: &str, matches: &getopts::Matches) {\n         println!(\"commit-date: {}\", unw(commit_date_str()));\n         println!(\"host: {}\", config::host_triple());\n         println!(\"release: {}\", unw(release_str()));\n-        get_trans_default()().print_version();\n+        get_trans_sysroot(\"llvm\")().print_version();\n     }\n }\n \n@@ -1369,7 +1368,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     }\n \n     if cg_flags.contains(&\"passes=list\".to_string()) {\n-        get_trans_default()().print_passes();\n+        get_trans_sysroot(\"llvm\")().print_passes();\n         return None;\n     }\n "}, {"sha": "0978c2ceb141d785b634e278112dc3414b903843", "filename": "src/librustc_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Flibrustc_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Flibrustc_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2FCargo.toml?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -10,6 +10,7 @@ path = \"lib.rs\"\n \n [features]\n static-libstdcpp = []\n+emscripten = []\n \n [dependencies]\n bitflags = \"1.0\""}, {"sha": "500c4fdf4e8dd2c58ac67c609d60b7f7ea17503f", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -39,4 +39,11 @@ tempdir = \"0.3\"\n cc = \"1.0.1\"\n \n [features]\n+# Used to communicate the feature to `rustc_back` in the same manner that the\n+# `rustc` driver script communicate this.\n jemalloc = [\"rustc_back/jemalloc\"]\n+\n+# This is used to convince Cargo to separately cache builds of `rustc_trans`\n+# when this option is enabled or not. That way we can build two, cache two\n+# artifacts, and have nice speedy rebuilds.\n+emscripten = [\"rustc_llvm/emscripten\"]"}, {"sha": "2717444753318e461e0c3b30dacd03ffbac96903", "filename": "src/llvm-emscripten", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-emscripten?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -0,0 +1 @@\n+Subproject commit 2717444753318e461e0c3b30dacd03ffbac96903"}, {"sha": "4d89008d5ca54bb59b8df75c67ae00d785a646bd", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=c6daea7c9a7d4be88e1ae8d54d992937fcfe24fa", "patch": "@@ -54,6 +54,7 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/dlmalloc\",\n         \"src/jemalloc\",\n         \"src/llvm\",\n+        \"src/llvm-emscripten\",\n         \"src/libbacktrace\",\n         \"src/libcompiler_builtins\",\n         \"src/librustc_data_structures/owning_ref\","}]}