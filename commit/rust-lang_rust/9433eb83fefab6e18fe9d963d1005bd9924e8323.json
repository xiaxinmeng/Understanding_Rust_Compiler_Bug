{"sha": "9433eb83fefab6e18fe9d963d1005bd9924e8323", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MzNlYjgzZmVmYWI2ZTE4ZmU5ZDk2M2QxMDA1YmQ5OTI0ZTgzMjM=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-10-25T10:50:56Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-10-30T11:27:47Z"}, "message": "Remove implicit `Continue` type", "tree": {"sha": "5d5c6fcde0ded32f4e13dcedc250ecac2e626dc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d5c6fcde0ded32f4e13dcedc250ecac2e626dc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9433eb83fefab6e18fe9d963d1005bd9924e8323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9433eb83fefab6e18fe9d963d1005bd9924e8323", "html_url": "https://github.com/rust-lang/rust/commit/9433eb83fefab6e18fe9d963d1005bd9924e8323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9433eb83fefab6e18fe9d963d1005bd9924e8323/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24e1a7e6564edaf237a653bec147934d38cfac48", "url": "https://api.github.com/repos/rust-lang/rust/commits/24e1a7e6564edaf237a653bec147934d38cfac48", "html_url": "https://github.com/rust-lang/rust/commit/24e1a7e6564edaf237a653bec147934d38cfac48"}], "stats": {"total": 264, "additions": 129, "deletions": 135}, "files": [{"sha": "524efd04cfce95a7c4e12ee3357fc13e6ef05bdb", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -1498,7 +1498,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n-            fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n+            fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n                 if let Some((kind, def_id)) = TyCategory::from_ty(t) {\n                     let span = self.tcx.def_span(def_id);\n                     // Avoid cluttering the output when the \"found\" and error span overlap:"}, {"sha": "df3dbfca01d7a498731729823eaa8bacc5fad6c0", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -474,7 +474,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n struct TraitObjectVisitor(Vec<DefId>);\n \n impl TypeVisitor<'_> for TraitObjectVisitor {\n-    fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<(), ()> {\n+    fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<()> {\n         match t.kind() {\n             ty::Dynamic(preds, RegionKind::ReStatic) => {\n                 if let Some(def_id) = preds.principal_def_id() {"}, {"sha": "9b2ffc7a920b027c266985b7cefb30469f8d0a4d", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -741,15 +741,15 @@ struct ScopeInstantiator<'me, 'tcx> {\n }\n \n impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ControlFlow<(), ()> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ControlFlow<()> {\n         self.target_index.shift_in(1);\n         t.super_visit_with(self);\n         self.target_index.shift_out(1);\n \n         ControlFlow::CONTINUE\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n         let ScopeInstantiator { bound_region_scope, next_region, .. } = self;\n \n         match r {"}, {"sha": "fe4ba5aa4e820600fbdc03b77a02f03842d855fb", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'tcx> UnresolvedTypeFinder<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeFinder<'a, 'tcx> {\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n         let t = self.infcx.shallow_resolve(t);\n         if t.has_infer_types() {\n             if let ty::Infer(infer_ty) = *t.kind() {"}, {"sha": "1a1c2637a6fa696cb87697683073d2ad481e5f83", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -69,7 +69,7 @@ impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.predicate.visit_with(visitor)\n     }\n }"}, {"sha": "2a02ef9925a81769843c65915a139032b5b27907", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -1136,7 +1136,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         };\n \n         impl<'a, 'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n-            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<(), ()> {\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n                 match ty.kind() {\n                     ty::Opaque(..) => {\n                         self.ty = Some(ty);"}, {"sha": "b16e22e8d77e8aeee01f32ca8da0434d3c551682", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -36,7 +36,7 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n             fn super_visit_with<__F: ::rustc_middle::ty::fold::TypeVisitor<'tcx>>(\n                 &self,\n                 __folder: &mut __F\n-            ) -> ::std::ops::ControlFlow<(), ()> {\n+            ) -> ::std::ops::ControlFlow<()> {\n                 match *self { #body_visit }\n                 ::std::ops::ControlFlow::CONTINUE\n             }"}, {"sha": "921086366bea25406d0ec09305e44695ebc5f0e2", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -62,7 +62,7 @@ macro_rules! CloneTypeFoldableImpls {\n                 fn super_visit_with<F: $crate::ty::fold::TypeVisitor<$tcx>>(\n                     &self,\n                     _: &mut F)\n-                    -> ::std::ops::ControlFlow<(), ()>\n+                    -> ::std::ops::ControlFlow<()>\n                 {\n                     ::std::ops::ControlFlow::CONTINUE\n                 }\n@@ -105,7 +105,7 @@ macro_rules! EnumTypeFoldableImpl {\n             fn super_visit_with<V: $crate::ty::fold::TypeVisitor<$tcx>>(\n                 &self,\n                 visitor: &mut V,\n-            ) -> ::std::ops::ControlFlow<(), ()> {\n+            ) -> ::std::ops::ControlFlow<()> {\n                 EnumTypeFoldableImpl!(@VisitVariants(self, visitor) input($($variants)*) output())\n             }\n         }"}, {"sha": "b6b6c968501a34eb2af4b30d31b6bb2263227380", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -2489,7 +2489,7 @@ impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n         UserTypeProjection { base, projs }\n     }\n \n-    fn super_visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<(), ()> {\n+    fn super_visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<()> {\n         self.base.visit_with(visitor)\n         // Note: there's nothing in `self.proj` to visit.\n     }"}, {"sha": "391bd8be7e4c59502f80a7236d37e30658d32ad4", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n         Terminator { source_info: self.source_info, kind }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         use crate::mir::TerminatorKind::*;\n \n         match self.kind {\n@@ -147,7 +147,7 @@ impl<'tcx> TypeFoldable<'tcx> for GeneratorKind {\n         *self\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -157,7 +157,7 @@ impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n         Place { local: self.local.fold_with(folder), projection: self.projection.fold_with(folder) }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.local.visit_with(visitor)?;\n         self.projection.visit_with(visitor)\n     }\n@@ -169,7 +169,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n         folder.tcx().intern_place_elems(&v)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -219,7 +219,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         use crate::mir::Rvalue::*;\n         match *self {\n             Use(ref op) => op.visit_with(visitor),\n@@ -274,7 +274,7 @@ impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         match *self {\n             Operand::Copy(ref place) | Operand::Move(ref place) => place.visit_with(visitor),\n             Operand::Constant(ref c) => c.visit_with(visitor),\n@@ -298,7 +298,7 @@ impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<(), ()> {\n+    fn super_visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<()> {\n         use crate::mir::ProjectionElem::*;\n \n         match self {\n@@ -313,7 +313,7 @@ impl<'tcx> TypeFoldable<'tcx> for Field {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, _: &mut F) -> Self {\n         *self\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -322,7 +322,7 @@ impl<'tcx> TypeFoldable<'tcx> for GeneratorSavedLocal {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, _: &mut F) -> Self {\n         *self\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -331,7 +331,7 @@ impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, _: &mut F) -> Self {\n         self.clone()\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -344,7 +344,7 @@ impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n             literal: self.literal.fold_with(folder),\n         }\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.literal.visit_with(visitor)\n     }\n }"}, {"sha": "d766e61f79be2d9b43264f955f14153ef4253b9f", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -49,8 +49,8 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.super_fold_with(folder)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()>;\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()>;\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.super_visit_with(visitor)\n     }\n \n@@ -144,14 +144,11 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n \n     /// A visitor that does not recurse into types, works like `fn walk_shallow` in `Ty`.\n-    fn visit_tys_shallow(\n-        &self,\n-        visit: impl FnMut(Ty<'tcx>) -> ControlFlow<(), ()>,\n-    ) -> ControlFlow<(), ()> {\n+    fn visit_tys_shallow(&self, visit: impl FnMut(Ty<'tcx>) -> ControlFlow<()>) -> ControlFlow<()> {\n         pub struct Visitor<F>(F);\n \n-        impl<'tcx, F: FnMut(Ty<'tcx>) -> ControlFlow<(), ()>> TypeVisitor<'tcx> for Visitor<F> {\n-            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<(), ()> {\n+        impl<'tcx, F: FnMut(Ty<'tcx>) -> ControlFlow<()>> TypeVisitor<'tcx> for Visitor<F> {\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n                 self.0(ty)\n             }\n         }\n@@ -164,7 +161,7 @@ impl TypeFoldable<'tcx> for hir::Constness {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, _: &mut F) -> Self {\n         *self\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -198,23 +195,23 @@ pub trait TypeFolder<'tcx>: Sized {\n }\n \n pub trait TypeVisitor<'tcx>: Sized {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<(), ()> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<()> {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n         r.super_visit_with(self)\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n         c.super_visit_with(self)\n     }\n \n-    fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<()> {\n         p.super_visit_with(self)\n     }\n }\n@@ -332,17 +329,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         where\n             F: FnMut(ty::Region<'tcx>) -> bool,\n         {\n-            fn visit_binder<T: TypeFoldable<'tcx>>(\n-                &mut self,\n-                t: &Binder<T>,\n-            ) -> ControlFlow<(), ()> {\n+            fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<()> {\n                 self.outer_index.shift_in(1);\n                 let result = t.as_ref().skip_binder().visit_with(self);\n                 self.outer_index.shift_out(1);\n                 result\n             }\n \n-            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n+            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n                 match *r {\n                     ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {\n                         ControlFlow::CONTINUE\n@@ -357,7 +351,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 }\n             }\n \n-            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<(), ()> {\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n                 // We're only interested in types involving regions\n                 if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {\n                     ty.super_visit_with(self)\n@@ -849,14 +843,14 @@ struct HasEscapingVarsVisitor {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<(), ()> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<()> {\n         self.outer_index.shift_in(1);\n         let result = t.super_visit_with(self);\n         self.outer_index.shift_out(1);\n         result\n     }\n \n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n         // If the outer-exclusive-binder is *strictly greater* than\n         // `outer_index`, that means that `t` contains some content\n         // bound at `outer_index` or above (because\n@@ -869,7 +863,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         }\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n         // If the region is bound by `outer_index` or anything outside\n         // of outer index, then it escapes the binders we have\n         // visited.\n@@ -880,7 +874,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         }\n     }\n \n-    fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n         // we don't have a `visit_infer_const` callback, so we have to\n         // hook in here to catch this case (annoying...), but\n         // otherwise we do want to remember to visit the rest of the\n@@ -892,7 +886,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         }\n     }\n \n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<()> {\n         if predicate.inner.outer_exclusive_binder > self.outer_index {\n             ControlFlow::BREAK\n         } else {\n@@ -907,7 +901,7 @@ struct HasTypeFlagsVisitor {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n-    fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<(), ()> {\n+    fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<()> {\n         debug!(\n             \"HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}\",\n             t,\n@@ -917,19 +911,19 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         if t.flags().intersects(self.flags) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n         let flags = r.type_flags();\n         debug!(\"HasTypeFlagsVisitor: r={:?} r.flags={:?} self.flags={:?}\", r, flags, self.flags);\n         if flags.intersects(self.flags) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n         let flags = FlagComputation::for_const(c);\n         debug!(\"HasTypeFlagsVisitor: c={:?} c.flags={:?} self.flags={:?}\", c, flags, self.flags);\n         if flags.intersects(self.flags) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n     }\n \n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<()> {\n         debug!(\n             \"HasTypeFlagsVisitor: predicate={:?} predicate.flags={:?} self.flags={:?}\",\n             predicate, predicate.inner.flags, self.flags\n@@ -969,14 +963,14 @@ impl LateBoundRegionsCollector {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<(), ()> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<()> {\n         self.current_index.shift_in(1);\n         let result = t.super_visit_with(self);\n         self.current_index.shift_out(1);\n         result\n     }\n \n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n         // if we are only looking for \"constrained\" region, we have to\n         // ignore the inputs to a projection, as they may not appear\n         // in the normalized form\n@@ -989,7 +983,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n         // if we are only looking for \"constrained\" region, we have to\n         // ignore the inputs of an unevaluated const, as they may not appear\n         // in the normalized form\n@@ -1002,7 +996,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         c.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n         if let ty::ReLateBound(debruijn, br) = *r {\n             if debruijn == self.current_index {\n                 self.regions.insert(br);"}, {"sha": "096c53ca9964cb94e769f6f949c0df9538673aad", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -1776,7 +1776,7 @@ impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n         ParamEnv::new(self.caller_bounds().fold_with(folder), self.reveal().fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.caller_bounds().visit_with(visitor)?;\n         self.reveal().visit_with(visitor)\n     }"}, {"sha": "fa38bddcae2c53e1b0845339eb08527fca75ea3e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -1803,7 +1803,7 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n     {\n         struct LateBoundRegionNameCollector<'a>(&'a mut FxHashSet<Symbol>);\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector<'_> {\n-            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n+            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n                 if let ty::ReLateBound(_, ty::BrNamed(_, name)) = *r {\n                     self.0.insert(name);\n                 }"}, {"sha": "431225e2767517f07d50e099df48435bf4e556d7", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -728,7 +728,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::AdtDef {\n         *self\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<()> {\n         ControlFlow::CONTINUE\n     }\n }\n@@ -738,7 +738,7 @@ impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for\n         (self.0.fold_with(folder), self.1.fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)\n     }\n@@ -751,7 +751,7 @@ impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>>\n         (self.0.fold_with(folder), self.1.fold_with(folder), self.2.fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)?;\n         self.2.visit_with(visitor)\n@@ -777,7 +777,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n         Rc::new((**self).fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         (**self).visit_with(visitor)\n     }\n }\n@@ -787,7 +787,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Arc<T> {\n         Arc::new((**self).fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         (**self).visit_with(visitor)\n     }\n }\n@@ -798,7 +798,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<T> {\n         box content\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         (**self).visit_with(visitor)\n     }\n }\n@@ -808,7 +808,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n         self.iter().map(|t| t.fold_with(folder)).collect()\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -818,7 +818,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n         self.iter().map(|t| t.fold_with(folder)).collect::<Vec<_>>().into_boxed_slice()\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -832,11 +832,11 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n         folder.fold_binder(self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.as_ref().skip_binder().visit_with(visitor)\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         visitor.visit_binder(self)\n     }\n }\n@@ -846,7 +846,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>>\n         fold_list(*self, folder, |tcx, v| tcx.intern_existential_predicates(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.iter().try_for_each(|p| p.visit_with(visitor))\n     }\n }\n@@ -856,7 +856,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n         fold_list(*self, folder, |tcx, v| tcx.intern_type_list(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -866,7 +866,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n         fold_list(*self, folder, |tcx, v| tcx.intern_projs(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -892,7 +892,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         use crate::ty::InstanceDef::*;\n         self.substs.visit_with(visitor)?;\n         match self.def {\n@@ -918,7 +918,7 @@ impl<'tcx> TypeFoldable<'tcx> for interpret::GlobalId<'tcx> {\n         Self { instance: self.instance.fold_with(folder), promoted: self.promoted }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.instance.visit_with(visitor)\n     }\n }\n@@ -967,7 +967,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n         folder.fold_ty(*self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         match self.kind() {\n             ty::RawPtr(ref tm) => tm.visit_with(visitor),\n             ty::Array(typ, sz) => {\n@@ -1009,7 +1009,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         visitor.visit_ty(self)\n     }\n }\n@@ -1023,11 +1023,11 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n         folder.fold_region(*self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<()> {\n         ControlFlow::CONTINUE\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         visitor.visit_region(*self)\n     }\n }\n@@ -1038,11 +1038,11 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n         folder.tcx().reuse_or_mk_predicate(*self, new)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         ty::PredicateKind::super_visit_with(&self.inner.kind, visitor)\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         visitor.visit_predicate(*self)\n     }\n \n@@ -1060,7 +1060,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n         fold_list(*self, folder, |tcx, v| tcx.intern_predicates(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.iter().try_for_each(|p| p.visit_with(visitor))\n     }\n }\n@@ -1070,7 +1070,7 @@ impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T>\n         self.iter().map(|x| x.fold_with(folder)).collect()\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n@@ -1090,12 +1090,12 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n         folder.fold_const(*self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.ty.visit_with(visitor)?;\n         self.val.visit_with(visitor)\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         visitor.visit_const(self)\n     }\n }\n@@ -1115,7 +1115,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         match *self {\n             ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n             ty::ConstKind::Param(p) => p.visit_with(visitor),\n@@ -1133,7 +1133,7 @@ impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n         *self\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<()> {\n         ControlFlow::CONTINUE\n     }\n }"}, {"sha": "07f775cf8b1e528cc1597a9b7679d3f7a3073d8a", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -160,7 +160,7 @@ impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),\n             GenericArgKind::Type(ty) => ty.visit_with(visitor),\n@@ -392,7 +392,7 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }"}, {"sha": "fce5553c99314dfc7f2f87e11512d0677369b259", "filename": "compiler/rustc_mir/src/interpret/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -18,7 +18,7 @@ where\n     };\n \n     impl<'tcx> TypeVisitor<'tcx> for UsedParamsNeedSubstVisitor<'tcx> {\n-        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<(), ()> {\n+        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n             if !c.needs_subst() {\n                 return ControlFlow::CONTINUE;\n             }\n@@ -29,7 +29,7 @@ where\n             }\n         }\n \n-        fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<(), ()> {\n+        fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n             if !ty.needs_subst() {\n                 return ControlFlow::CONTINUE;\n             }"}, {"sha": "c2ebc954a22c053f7eb44a6aa5ece71f43891d07", "filename": "compiler/rustc_mir/src/monomorphize/polymorphize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -250,7 +250,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n-    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<()> {\n         debug!(\"visit_const: c={:?}\", c);\n         if !c.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n@@ -283,7 +283,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n         debug!(\"visit_ty: ty={:?}\", ty);\n         if !ty.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n@@ -318,7 +318,7 @@ struct HasUsedGenericParams<'a> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n-    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<()> {\n         debug!(\"visit_const: c={:?}\", c);\n         if !c.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n@@ -336,7 +336,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n         }\n     }\n \n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n         debug!(\"visit_ty: ty={:?}\", ty);\n         if !ty.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;"}, {"sha": "5700492d6bbc78e5ab27f1b9055c076e429be48a", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -640,7 +640,7 @@ pub fn write_allocations<'tcx>(\n     }\n     struct CollectAllocIds(BTreeSet<AllocId>);\n     impl<'tcx> TypeVisitor<'tcx> for CollectAllocIds {\n-        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<(), ()> {\n+        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n             if let ty::ConstKind::Value(val) = c.val {\n                 self.0.extend(alloc_ids_from_const(val));\n             }"}, {"sha": "4f7014ce2b7ed6292c1fa814c0ca640dbef63bb1", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -56,7 +56,7 @@ trait DefIdVisitor<'tcx> {\n         def_id: DefId,\n         kind: &str,\n         descr: &dyn fmt::Display,\n-    ) -> ControlFlow<(), ()>;\n+    ) -> ControlFlow<()>;\n \n     /// Not overridden, but used to actually visit types and traits.\n     fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {\n@@ -66,13 +66,13 @@ trait DefIdVisitor<'tcx> {\n             dummy: Default::default(),\n         }\n     }\n-    fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<()> {\n         ty_fragment.visit_with(&mut self.skeleton())\n     }\n-    fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<()> {\n         self.skeleton().visit_trait(trait_ref)\n     }\n-    fn visit_predicates(&mut self, predicates: ty::GenericPredicates<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_predicates(&mut self, predicates: ty::GenericPredicates<'tcx>) -> ControlFlow<()> {\n         self.skeleton().visit_predicates(predicates)\n     }\n }\n@@ -87,13 +87,13 @@ impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>\n where\n     V: DefIdVisitor<'tcx> + ?Sized,\n {\n-    fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<()> {\n         let TraitRef { def_id, substs } = trait_ref;\n         self.def_id_visitor.visit_def_id(def_id, \"trait\", &trait_ref.print_only_trait_path())?;\n         if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }\n     }\n \n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<()> {\n         match predicate.skip_binders() {\n             ty::PredicateAtom::Trait(ty::TraitPredicate { trait_ref }, _) => {\n                 self.visit_trait(trait_ref)\n@@ -119,7 +119,7 @@ where\n         }\n     }\n \n-    fn visit_predicates(&mut self, predicates: ty::GenericPredicates<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_predicates(&mut self, predicates: ty::GenericPredicates<'tcx>) -> ControlFlow<()> {\n         let ty::GenericPredicates { parent: _, predicates } = predicates;\n         predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))\n     }\n@@ -129,7 +129,7 @@ impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>\n where\n     V: DefIdVisitor<'tcx> + ?Sized,\n {\n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n         let tcx = self.def_id_visitor.tcx();\n         // InternalSubsts are not visited here because they are visited below in `super_visit_with`.\n         match *ty.kind() {\n@@ -283,7 +283,7 @@ impl<'a, 'tcx, VL: VisibilityLike> DefIdVisitor<'tcx> for FindMin<'a, 'tcx, VL>\n         def_id: DefId,\n         _kind: &str,\n         _descr: &dyn fmt::Display,\n-    ) -> ControlFlow<(), ()> {\n+    ) -> ControlFlow<()> {\n         self.min = VL::new_min(self, def_id);\n         ControlFlow::CONTINUE\n     }\n@@ -902,7 +902,7 @@ impl DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n         def_id: DefId,\n         _kind: &str,\n         _descr: &dyn fmt::Display,\n-    ) -> ControlFlow<(), ()> {\n+    ) -> ControlFlow<()> {\n         if let Some(def_id) = def_id.as_local() {\n             if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =\n                 (self.tcx().visibility(def_id.to_def_id()), self.access_level)\n@@ -1079,7 +1079,7 @@ impl<'tcx> TypePrivacyVisitor<'tcx> {\n     fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {\n         self.span = span;\n         let typeck_results = self.typeck_results();\n-        let result: ControlFlow<(), ()> = try {\n+        let result: ControlFlow<()> = try {\n             self.visit(typeck_results.node_type(id))?;\n             self.visit(typeck_results.node_substs(id))?;\n             if let Some(adjustments) = typeck_results.adjustments().get(id) {\n@@ -1297,7 +1297,7 @@ impl DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {\n         def_id: DefId,\n         kind: &str,\n         descr: &dyn fmt::Display,\n-    ) -> ControlFlow<(), ()> {\n+    ) -> ControlFlow<()> {\n         if self.check_def_id(def_id, kind, descr) {\n             ControlFlow::BREAK\n         } else {\n@@ -1797,7 +1797,7 @@ impl DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {\n         def_id: DefId,\n         kind: &str,\n         descr: &dyn fmt::Display,\n-    ) -> ControlFlow<(), ()> {\n+    ) -> ControlFlow<()> {\n         if self.check_def_id(def_id, kind, descr) {\n             ControlFlow::BREAK\n         } else {"}, {"sha": "914fa1e52c2697689e94585e5ea2deddda61cdf0", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -693,12 +693,12 @@ impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<OP>\n where\n     OP: FnMut(ty::Region<'tcx>),\n {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ControlFlow<(), ()> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ControlFlow<()> {\n         t.as_ref().skip_binder().visit_with(self);\n         ControlFlow::CONTINUE\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n         match *r {\n             // ignore bound regions, keep visiting\n             ty::ReLateBound(_, _) => ControlFlow::CONTINUE,\n@@ -709,7 +709,7 @@ where\n         }\n     }\n \n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n         // We're only interested in types involving regions\n         if !ty.flags().intersects(ty::TypeFlags::HAS_FREE_REGIONS) {\n             return ControlFlow::CONTINUE;"}, {"sha": "638a8253e7eb9481e227a914b7f405e73c61ca84", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -571,15 +571,15 @@ pub fn walk_abstract_const<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     ct: AbstractConst<'tcx>,\n     mut f: F,\n-) -> ControlFlow<(), ()>\n+) -> ControlFlow<()>\n where\n-    F: FnMut(Node<'tcx>) -> ControlFlow<(), ()>,\n+    F: FnMut(Node<'tcx>) -> ControlFlow<()>,\n {\n     fn recurse<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         ct: AbstractConst<'tcx>,\n-        f: &mut dyn FnMut(Node<'tcx>) -> ControlFlow<(), ()>,\n-    ) -> ControlFlow<(), ()> {\n+        f: &mut dyn FnMut(Node<'tcx>) -> ControlFlow<()>,\n+    ) -> ControlFlow<()> {\n         let root = ct.root();\n         f(root)?;\n         match root {"}, {"sha": "50efbbbe0fd766abea2ce257e72c2f996bc18dd1", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -771,7 +771,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n     }\n \n     impl<'tcx> TypeVisitor<'tcx> for IllegalSelfTypeVisitor<'tcx> {\n-        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n+        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n             match t.kind() {\n                 ty::Param(_) => {\n                     if t == self.tcx.types.self_param {\n@@ -812,7 +812,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             }\n         }\n \n-        fn visit_const(&mut self, ct: &ty::Const<'tcx>) -> ControlFlow<(), ()> {\n+        fn visit_const(&mut self, ct: &ty::Const<'tcx>) -> ControlFlow<()> {\n             // First check if the type of this constant references `Self`.\n             self.visit_ty(ct.ty)?;\n \n@@ -844,7 +844,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             }\n         }\n \n-        fn visit_predicate(&mut self, pred: ty::Predicate<'tcx>) -> ControlFlow<(), ()> {\n+        fn visit_predicate(&mut self, pred: ty::Predicate<'tcx>) -> ControlFlow<()> {\n             if let ty::PredicateAtom::ConstEvaluatable(def, substs) = pred.skip_binders() {\n                 // FIXME(const_evaluatable_checked): We should probably deduplicate the logic for\n                 // `AbstractConst`s here, it might make sense to change `ConstEvaluatable` to"}, {"sha": "ce0d3ef8a6a58f312cc55819fa3414b09b21e27d", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -135,7 +135,7 @@ impl Search<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n         debug!(\"Search visiting ty: {:?}\", ty);\n \n         let (adt_def, substs) = match *ty.kind() {"}, {"sha": "01c4dd1248772c7625b04be3943fd2b329289ede", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -898,14 +898,14 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<(), ()> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<()> {\n         self.binder_index.shift_in(1);\n         let result = t.super_visit_with(self);\n         self.binder_index.shift_out(1);\n         result\n     }\n \n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n         match *t.kind() {\n             ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n                 match self.parameters.entry(bound_ty.var.as_u32()) {\n@@ -925,7 +925,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<()> {\n         match r {\n             ty::ReLateBound(index, br) if *index == self.binder_index => match br {\n                 ty::BoundRegion::BrNamed(def_id, _name) => {\n@@ -1115,7 +1115,7 @@ impl PlaceholdersCollector {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n         match t.kind() {\n             ty::Placeholder(p) if p.universe == self.universe_index => {\n                 self.next_ty_placeholder = self.next_ty_placeholder.max(p.name.as_usize() + 1);\n@@ -1127,7 +1127,7 @@ impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<()> {\n         match r {\n             ty::RePlaceholder(p) if p.universe == self.universe_index => {\n                 if let ty::BoundRegion::BrAnon(anon) = p.name {"}, {"sha": "70d94ef869d0582b51e902c8d9adc8e704accb7b", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -450,7 +450,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n     };\n \n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n-        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n+        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_ty) t={:?}\", t);\n             if t != self.opaque_identity_ty && t.super_visit_with(self).is_break() {\n                 self.ty = Some(t);\n@@ -459,7 +459,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n             ControlFlow::CONTINUE\n         }\n \n-        fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n+        fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_region) r={:?}\", r);\n             if let RegionKind::ReEarlyBound(ty::EarlyBoundRegion { index, .. }) = r {\n                 if *index < self.generics.parent_count as u32 {\n@@ -472,7 +472,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n             r.super_visit_with(self)\n         }\n \n-        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<(), ()> {\n+        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n             if let ty::ConstKind::Unevaluated(..) = c.val {\n                 // FIXME(#72219) We currenctly don't detect lifetimes within substs\n                 // which would violate this check. Even though the particular substitution is not used\n@@ -1455,7 +1455,7 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Span) {\n             {\n                 struct VisitTypes(Vec<DefId>);\n                 impl<'tcx> ty::fold::TypeVisitor<'tcx> for VisitTypes {\n-                    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n+                    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n                         match *t.kind() {\n                             ty::Opaque(def, _) => {\n                                 self.0.push(def);"}, {"sha": "247b525672603e47866e4e97fda691cb942f8206", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -983,7 +983,7 @@ fn suggest_constraining_param(\n struct TypeParamVisitor<'tcx>(Vec<Ty<'tcx>>);\n \n impl<'tcx> TypeVisitor<'tcx> for TypeParamVisitor<'tcx> {\n-    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<()> {\n         if let ty::Param(_) = ty.kind() {\n             self.0.push(ty);\n         }"}, {"sha": "1e27357ce4414001f03db2b396dc2bbfa36c34a6", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -800,18 +800,18 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 params: FxHashSet<u32>,\n             }\n             impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams {\n-                fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n+                fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n                     if let ty::Param(param) = t.kind() {\n                         self.params.insert(param.index);\n                     }\n                     t.super_visit_with(self)\n                 }\n \n-                fn visit_region(&mut self, _: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n+                fn visit_region(&mut self, _: ty::Region<'tcx>) -> ControlFlow<()> {\n                     ControlFlow::BREAK\n                 }\n \n-                fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<(), ()> {\n+                fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n                     if let ty::ConstKind::Param(param) = c.val {\n                         self.params.insert(param.index);\n                     }"}, {"sha": "f014ea3d5a98b83a3c16c117db3345610d4cb8a4", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -2062,7 +2062,7 @@ fn const_evaluatable_predicates_of<'tcx>(\n             }\n \n             impl<'a, 'tcx> TypeVisitor<'tcx> for TyAliasVisitor<'a, 'tcx> {\n-                fn visit_const(&mut self, ct: &'tcx Const<'tcx>) -> ControlFlow<(), ()> {\n+                fn visit_const(&mut self, ct: &'tcx Const<'tcx>) -> ControlFlow<()> {\n                     if let ty::ConstKind::Unevaluated(def, substs, None) = ct.val {\n                         self.preds.insert((\n                             ty::PredicateAtom::ConstEvaluatable(def, substs).to_predicate(self.tcx),"}, {"sha": "bae5bde70026f365b82692e4f30c3a689a8b0854", "filename": "compiler/rustc_typeck/src/constrained_generic_params.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -57,7 +57,7 @@ struct ParameterCollector {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<()> {\n         match *t.kind() {\n             ty::Projection(..) | ty::Opaque(..) if !self.include_nonconstraining => {\n                 // projections are not injective\n@@ -72,14 +72,14 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<()> {\n         if let ty::ReEarlyBound(data) = *r {\n             self.parameters.push(Parameter::from(data));\n         }\n         ControlFlow::CONTINUE\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<(), ()> {\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<()> {\n         match c.val {\n             ty::ConstKind::Unevaluated(..) if !self.include_nonconstraining => {\n                 // Constant expressions are not injective"}, {"sha": "ae3b0a037542a5bdd19417b1f83fa3f1e942f034", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9433eb83fefab6e18fe9d963d1005bd9924e8323/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9433eb83fefab6e18fe9d963d1005bd9924e8323/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=9433eb83fefab6e18fe9d963d1005bd9924e8323", "patch": "@@ -559,7 +559,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n struct ContainsRegion;\n \n impl TypeVisitor<'_> for ContainsRegion {\n-    fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<(), ()> {\n+    fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<()> {\n         ControlFlow::BREAK\n     }\n }"}]}