{"sha": "2b75147451ffe8654963b3399df40d40c6ed0ff2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNzUxNDc0NTFmZmU4NjU0OTYzYjMzOTlkZjQwZDQwYzZlZDBmZjI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-03T15:27:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-07T18:06:47Z"}, "message": "rustc_metadata: Privatize more entities", "tree": {"sha": "fdaeb975fce46b67277b023f31d2c98e814fbb1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdaeb975fce46b67277b023f31d2c98e814fbb1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b75147451ffe8654963b3399df40d40c6ed0ff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b75147451ffe8654963b3399df40d40c6ed0ff2", "html_url": "https://github.com/rust-lang/rust/commit/2b75147451ffe8654963b3399df40d40c6ed0ff2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b75147451ffe8654963b3399df40d40c6ed0ff2/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "166d5f8b2fa853e3fa14a719c13d59b7b7160237", "url": "https://api.github.com/repos/rust-lang/rust/commits/166d5f8b2fa853e3fa14a719c13d59b7b7160237", "html_url": "https://github.com/rust-lang/rust/commit/166d5f8b2fa853e3fa14a719c13d59b7b7160237"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "4eabeac6d986911b364ad1b41607f303212d9945", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2b75147451ffe8654963b3399df40d40c6ed0ff2/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b75147451ffe8654963b3399df40d40c6ed0ff2/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=2b75147451ffe8654963b3399df40d40c6ed0ff2", "patch": "@@ -24,7 +24,6 @@ use std::marker::PhantomData;\n use std::num::NonZeroUsize;\n \n pub use decoder::{provide, provide_extern};\n-crate use encoder::encode_metadata;\n \n mod decoder;\n mod encoder;\n@@ -178,16 +177,16 @@ macro_rules! Lazy {\n crate struct CrateRoot<'tcx> {\n     pub name: Symbol,\n     pub triple: TargetTriple,\n-    pub extra_filename: String,\n+    extra_filename: String,\n     pub hash: Svh,\n     pub disambiguator: CrateDisambiguator,\n     pub panic_strategy: PanicStrategy,\n-    pub edition: Edition,\n+    edition: Edition,\n     pub has_global_allocator: bool,\n-    pub has_panic_handler: bool,\n+    has_panic_handler: bool,\n     pub has_default_lib_allocator: bool,\n-    pub plugin_registrar_fn: Option<DefIndex>,\n-    pub proc_macro_decls_static: Option<DefIndex>,\n+    plugin_registrar_fn: Option<DefIndex>,\n+    proc_macro_decls_static: Option<DefIndex>,\n     proc_macro_stability: Option<attr::Stability>,\n \n     pub crate_deps: Lazy<[CrateDep]>,\n@@ -210,14 +209,14 @@ crate struct CrateRoot<'tcx> {\n     /// this crate\n     pub proc_macro_data: Option<Lazy<[DefIndex]>>,\n \n-    pub compiler_builtins: bool,\n+    compiler_builtins: bool,\n     pub needs_allocator: bool,\n     pub needs_panic_runtime: bool,\n-    pub no_builtins: bool,\n+    no_builtins: bool,\n     pub panic_runtime: bool,\n     pub profiler_runtime: bool,\n     pub sanitizer_runtime: bool,\n-    pub symbol_mangling_version: SymbolManglingVersion,\n+    symbol_mangling_version: SymbolManglingVersion,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n@@ -313,9 +312,9 @@ struct ModData {\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n-crate struct MacroDef {\n-    pub body: String,\n-    pub legacy: bool,\n+struct MacroDef {\n+    body: String,\n+    legacy: bool,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]"}, {"sha": "59aa5c7402ffb7939185aca80b273136ad9a82f5", "filename": "src/librustc_metadata/schema/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b75147451ffe8654963b3399df40d40c6ed0ff2/src%2Flibrustc_metadata%2Fschema%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b75147451ffe8654963b3399df40d40c6ed0ff2/src%2Flibrustc_metadata%2Fschema%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema%2Fdecoder%2Fcstore_impl.rs?ref=2b75147451ffe8654963b3399df40d40c6ed0ff2", "patch": "@@ -2,7 +2,7 @@ use crate::cstore::{self, LoadedMacro};\n use crate::link_args;\n use crate::native_libs;\n use crate::foreign_modules;\n-use crate::schema;\n+use crate::schema::{self, encoder};\n \n use rustc::ty::query::QueryConfig;\n use rustc::middle::cstore::{CrateSource, CrateStore, DepKind, EncodedMetadata, NativeLibraryKind};\n@@ -523,7 +523,7 @@ impl CrateStore for cstore::CStore {\n     }\n \n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata {\n-        schema::encode_metadata(tcx)\n+        encoder::encode_metadata(tcx)\n     }\n \n     fn metadata_encoding_version(&self) -> &[u8]"}, {"sha": "9970d753dbca8ab9ed8eb7e96aeb4b7e78e77c03", "filename": "src/librustc_metadata/schema/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b75147451ffe8654963b3399df40d40c6ed0ff2/src%2Flibrustc_metadata%2Fschema%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b75147451ffe8654963b3399df40d40c6ed0ff2/src%2Flibrustc_metadata%2Fschema%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema%2Fencoder.rs?ref=2b75147451ffe8654963b3399df40d40c6ed0ff2", "patch": "@@ -1781,7 +1781,7 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n // will allow us to slice the metadata to the precise length that we just\n // generated regardless of trailing bytes that end up in it.\n \n-crate fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n+pub(super) fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n     let mut encoder = opaque::Encoder::new(vec![]);\n     encoder.emit_raw_bytes(METADATA_HEADER);\n "}]}