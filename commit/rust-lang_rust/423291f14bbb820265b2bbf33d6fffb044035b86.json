{"sha": "423291f14bbb820265b2bbf33d6fffb044035b86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMzI5MWYxNGJiYjgyMDI2NWIyYmJmMzNkNmZmZmIwNDQwMzViODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-26T01:46:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-26T01:46:18Z"}, "message": "Auto merge of #55705 - ethanboxx:master, r=SimonSapin\n\nMake `ParseIntError` and `IntErrorKind` fully public\n\nWhy would you write nice error types if I can't read them?\n\n# Why\n\nIt can be useful to use `match` with errors produced when parsing strings to int. This would be useful for the `.err_match()` function in my [new crate](https://crates.io/crates/read_input).\n\n---\nI could also do this for `ParseFloatError` if people think it is a good idea.\nI am new around hear so please tell me if I am getting anything wrong.", "tree": {"sha": "d5a500b213463efcafdb9d4bfd747e53f64f7ed5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5a500b213463efcafdb9d4bfd747e53f64f7ed5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/423291f14bbb820265b2bbf33d6fffb044035b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/423291f14bbb820265b2bbf33d6fffb044035b86", "html_url": "https://github.com/rust-lang/rust/commit/423291f14bbb820265b2bbf33d6fffb044035b86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/423291f14bbb820265b2bbf33d6fffb044035b86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c14ab13e618958bcb353b4e3c2eb2228475aa1ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/c14ab13e618958bcb353b4e3c2eb2228475aa1ab", "html_url": "https://github.com/rust-lang/rust/commit/c14ab13e618958bcb353b4e3c2eb2228475aa1ab"}, {"sha": "121e5e806e41c4825fc4a25ad45d2585d1058165", "url": "https://api.github.com/repos/rust-lang/rust/commits/121e5e806e41c4825fc4a25ad45d2585d1058165", "html_url": "https://github.com/rust-lang/rust/commit/121e5e806e41c4825fc4a25ad45d2585d1058165"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "57b5903c9d39ff3612a84d721b276fe36477837f", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/423291f14bbb820265b2bbf33d6fffb044035b86/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423291f14bbb820265b2bbf33d6fffb044035b86/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=423291f14bbb820265b2bbf33d6fffb044035b86", "patch": "@@ -4759,15 +4759,38 @@ pub struct ParseIntError {\n     kind: IntErrorKind,\n }\n \n+/// Enum to store the various types of errors that can cause parsing an integer to fail.\n+#[unstable(feature = \"int_error_matching\",\n+           reason = \"it can be useful to match errors when making error messages \\\n+                     for integer parsing\",\n+           issue = \"22639\")]\n #[derive(Debug, Clone, PartialEq, Eq)]\n-enum IntErrorKind {\n+#[non_exhaustive]\n+pub enum IntErrorKind {\n+    /// Value being parsed is empty.\n+    ///\n+    /// Among other causes, this variant will be constructed when parsing an empty string.\n     Empty,\n+    /// Contains an invalid digit.\n+    ///\n+    /// Among other causes, this variant will be constructed when parsing a string that\n+    /// contains a letter.\n     InvalidDigit,\n+    /// Integer is too large to store in target integer type.\n     Overflow,\n+    /// Integer is too small to store in target integer type.\n     Underflow,\n }\n \n impl ParseIntError {\n+    /// Outputs the detailed cause of parsing an integer failing.\n+    #[unstable(feature = \"int_error_matching\",\n+               reason = \"it can be useful to match errors when making error messages \\\n+                         for integer parsing\",\n+               issue = \"22639\")]\n+    pub fn kind(&self) -> &IntErrorKind {\n+        &self.kind\n+    }\n     #[unstable(feature = \"int_error_internals\",\n                reason = \"available through Error trait and this method should \\\n                          not be exposed publicly\","}]}