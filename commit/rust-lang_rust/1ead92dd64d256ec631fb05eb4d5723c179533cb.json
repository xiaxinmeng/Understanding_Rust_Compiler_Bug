{"sha": "1ead92dd64d256ec631fb05eb4d5723c179533cb", "node_id": "C_kwDOAAsO6NoAKDFlYWQ5MmRkNjRkMjU2ZWM2MzFmYjA1ZWI0ZDU3MjNjMTc5NTMzY2I", "commit": {"author": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-05-02T07:37:26Z"}, "committer": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-07-02T13:54:37Z"}, "message": "call EncodedMetadata::empty in case of MetadataKind::None", "tree": {"sha": "6d368cc5304cbfab53f8232b45ae49ce3c3c5b1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d368cc5304cbfab53f8232b45ae49ce3c3c5b1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ead92dd64d256ec631fb05eb4d5723c179533cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ead92dd64d256ec631fb05eb4d5723c179533cb", "html_url": "https://github.com/rust-lang/rust/commit/1ead92dd64d256ec631fb05eb4d5723c179533cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ead92dd64d256ec631fb05eb4d5723c179533cb/comments", "author": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8e49e4b25a10ebf9333742c3bb0724edf1ef2d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e49e4b25a10ebf9333742c3bb0724edf1ef2d9", "html_url": "https://github.com/rust-lang/rust/commit/c8e49e4b25a10ebf9333742c3bb0724edf1ef2d9"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "ed58d4595a0837450e0080e147cd63e7412f8c02", "filename": "compiler/rustc_metadata/src/fs.rs", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1ead92dd64d256ec631fb05eb4d5723c179533cb/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ead92dd64d256ec631fb05eb4d5723c179533cb/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs?ref=1ead92dd64d256ec631fb05eb4d5723c179533cb", "patch": "@@ -68,37 +68,43 @@ pub fn encode_and_write_metadata(\n         .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)));\n     let metadata_tmpdir = MaybeTempDir::new(metadata_tmpdir, tcx.sess.opts.cg.save_temps);\n     let metadata_filename = metadata_tmpdir.as_ref().join(METADATA_FILENAME);\n-    match metadata_kind {\n+    let metadata = match metadata_kind {\n         MetadataKind::None => {\n-            let _ = emit_metadata(tcx.sess, &[], &metadata_tmpdir);\n+            if tcx.sess.opts.json_artifact_notifications {\n+                tcx.sess\n+                    .parse_sess\n+                    .span_diagnostic\n+                    .emit_artifact_notification(&out_filename, \"metadata\");\n+            }\n+            EncodedMetadata::empty()\n         }\n         MetadataKind::Uncompressed | MetadataKind::Compressed => {\n-            encode_metadata(tcx, &metadata_filename)\n+            encode_metadata(tcx, &metadata_filename);\n+\n+            let _prof_timer = tcx.sess.prof.generic_activity(\"write_crate_metadata\");\n+\n+            let need_metadata_file = tcx.sess.opts.output_types.contains_key(&OutputType::Metadata);\n+            let (metadata_filename, metadata_tmpdir) = if need_metadata_file {\n+                if let Err(e) = non_durable_rename(&metadata_filename, &out_filename) {\n+                    tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n+                }\n+                if tcx.sess.opts.json_artifact_notifications {\n+                    tcx.sess\n+                        .parse_sess\n+                        .span_diagnostic\n+                        .emit_artifact_notification(&out_filename, \"metadata\");\n+                }\n+                (out_filename, None)\n+            } else {\n+                (metadata_filename, Some(metadata_tmpdir))\n+            };\n+\n+            EncodedMetadata::from_path(metadata_filename, metadata_tmpdir).unwrap_or_else(|e| {\n+                tcx.sess.fatal(&format!(\"failed to create encoded metadata from file: {}\", e))\n+            })\n         }\n     };\n \n-    let _prof_timer = tcx.sess.prof.generic_activity(\"write_crate_metadata\");\n-\n-    let need_metadata_file = tcx.sess.opts.output_types.contains_key(&OutputType::Metadata);\n-    let (metadata_filename, metadata_tmpdir) = if need_metadata_file {\n-        if let Err(e) = non_durable_rename(&metadata_filename, &out_filename) {\n-            tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n-        }\n-        if tcx.sess.opts.json_artifact_notifications {\n-            tcx.sess\n-                .parse_sess\n-                .span_diagnostic\n-                .emit_artifact_notification(&out_filename, \"metadata\");\n-        }\n-        (out_filename, None)\n-    } else {\n-        (metadata_filename, Some(metadata_tmpdir))\n-    };\n-    let metadata =\n-        EncodedMetadata::from_path(metadata_filename, metadata_tmpdir).unwrap_or_else(|e| {\n-            tcx.sess.fatal(&format!(\"failed to create encoded metadata from file: {}\", e))\n-        });\n-\n     let need_metadata_module = metadata_kind == MetadataKind::Compressed;\n \n     (metadata, need_metadata_module)"}, {"sha": "fc069a233f3bcaa14de4144ce36b94b023752794", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ead92dd64d256ec631fb05eb4d5723c179533cb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ead92dd64d256ec631fb05eb4d5723c179533cb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=1ead92dd64d256ec631fb05eb4d5723c179533cb", "patch": "@@ -2158,6 +2158,11 @@ impl EncodedMetadata {\n         Ok(Self { mmap, _temp_dir: temp_dir })\n     }\n \n+    #[inline]\n+    pub fn empty() -> Self {\n+        Self { mmap: None, _temp_dir: None }\n+    }\n+\n     #[inline]\n     pub fn raw_data(&self) -> &[u8] {\n         self.mmap.as_ref().map(|mmap| mmap.as_ref()).unwrap_or_default()"}]}