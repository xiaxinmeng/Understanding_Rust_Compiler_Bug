{"sha": "69d07df201307fb7c539cdb20b8f1c1c12840386", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZDA3ZGYyMDEzMDdmYjdjNTM5Y2RiMjBiOGYxYzFjMTI4NDAzODY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-24T15:37:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-24T15:37:25Z"}, "message": "Complete crate:: paths", "tree": {"sha": "08cccd64582510ce2c82ceec729504a80e33f5b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08cccd64582510ce2c82ceec729504a80e33f5b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69d07df201307fb7c539cdb20b8f1c1c12840386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69d07df201307fb7c539cdb20b8f1c1c12840386", "html_url": "https://github.com/rust-lang/rust/commit/69d07df201307fb7c539cdb20b8f1c1c12840386", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69d07df201307fb7c539cdb20b8f1c1c12840386/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a7db8fa009c612168ef16f6ed72315b5406ed09", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7db8fa009c612168ef16f6ed72315b5406ed09", "html_url": "https://github.com/rust-lang/rust/commit/9a7db8fa009c612168ef16f6ed72315b5406ed09"}], "stats": {"total": 173, "additions": 152, "deletions": 21}, "files": [{"sha": "a0fd6828d62535a312aaca18b7ec613bcfc8dc7c", "filename": "crates/ra_analysis/src/completion.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs?ref=69d07df201307fb7c539cdb20b8f1c1c12840386", "patch": "@@ -0,0 +1,61 @@\n+use ra_editor::{CompletionItem, find_node_at_offset, complete_module_items};\n+use ra_syntax::{\n+    AtomEdit, File, TextUnit, AstNode,\n+    ast::{self, ModuleItemOwner},\n+};\n+\n+use crate::{\n+    FileId, Cancelable,\n+    db::{self, SyntaxDatabase},\n+    descriptors::module::{ModulesDatabase, ModuleTree, ModuleId},\n+};\n+\n+pub(crate) fn resolve_based_completion(db: &db::RootDatabase, file_id: FileId, offset: TextUnit) -> Cancelable<Option<Vec<CompletionItem>>> {\n+    let file = db.file_syntax(file_id);\n+    let module_tree = db.module_tree()?;\n+    let file = {\n+        let edit = AtomEdit::insert(offset, \"intellijRulezz\".to_string());\n+        file.reparse(&edit)\n+    };\n+    let target_file = match find_target_module(&module_tree, file_id, &file, offset) {\n+        None => return Ok(None),\n+        Some(target_module) => {\n+            let file_id = target_module.file_id(&module_tree);\n+            db.file_syntax(file_id)\n+        }\n+    };\n+    let mut res = Vec::new();\n+    complete_module_items(target_file.ast().items(), None, &mut res);\n+    Ok(Some(res))\n+}\n+\n+pub(crate) fn find_target_module(module_tree: &ModuleTree, file_id: FileId, file: &File, offset: TextUnit) -> Option<ModuleId> {\n+    let name_ref: ast::NameRef = find_node_at_offset(file.syntax(), offset)?;\n+    let mut crate_path = crate_path(name_ref)?;\n+    let module_id = module_tree.any_module_for_file(file_id)?;\n+    crate_path.pop();\n+    let mut target_module = module_id.root(&module_tree);\n+    for name in crate_path {\n+        target_module = target_module.child(module_tree, name.text().as_str())?;\n+    }\n+    Some(target_module)\n+}\n+\n+fn crate_path(name_ref: ast::NameRef) -> Option<Vec<ast::NameRef>> {\n+    let mut path = name_ref.syntax()\n+        .parent().and_then(ast::PathSegment::cast)?\n+        .parent_path();\n+    let mut res = Vec::new();\n+    loop {\n+        let segment = path.segment()?;\n+        match segment.kind()? {\n+            ast::PathSegmentKind::Name(name) => res.push(name),\n+            ast::PathSegmentKind::CrateKw => break,\n+            ast::PathSegmentKind::SelfKw | ast::PathSegmentKind::SuperKw =>\n+                return None,\n+        }\n+        path = path.qualifier()?;\n+    }\n+    res.reverse();\n+    Some(res)\n+}"}, {"sha": "f3e5b28878c58cd66ccc0f6e67141e694917d7e8", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=69d07df201307fb7c539cdb20b8f1c1c12840386", "patch": "@@ -5,7 +5,7 @@ use std::{\n     sync::Arc,\n };\n \n-use ra_editor::{self, find_node_at_offset, resolve_local_name, FileSymbol, LineIndex, LocalEdit};\n+use ra_editor::{self, find_node_at_offset, resolve_local_name, FileSymbol, LineIndex, LocalEdit, CompletionItem};\n use ra_syntax::{\n     ast::{self, ArgListOwner, Expr, NameOwner},\n     AstNode, File, SmolStr,\n@@ -197,6 +197,26 @@ impl AnalysisImpl {\n     pub fn crate_root(&self, crate_id: CrateId) -> FileId {\n         self.data.crate_graph.crate_roots[&crate_id]\n     }\n+    pub fn completions(&self, file_id: FileId, offset: TextUnit) -> Cancelable<Option<Vec<CompletionItem>>> {\n+        let mut res = Vec::new();\n+        let mut has_completions = false;\n+        let file = self.file_syntax(file_id);\n+        if let Some(scope_based) = ra_editor::scope_completion(&file, offset) {\n+            res.extend(scope_based);\n+            has_completions = true;\n+        }\n+        let root = self.root(file_id);\n+        if let Some(scope_based) = crate::completion::resolve_based_completion(root.db(), file_id, offset)? {\n+            res.extend(scope_based);\n+            has_completions = true;\n+        }\n+        let res = if has_completions {\n+            Some(res)\n+        } else {\n+            None\n+        };\n+        Ok(res)\n+    }\n     pub fn approximately_resolve_symbol(\n         &self,\n         file_id: FileId,"}, {"sha": "7078e2d31f3247cd1fd83f13adec150126610c83", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=69d07df201307fb7c539cdb20b8f1c1c12840386", "patch": "@@ -11,6 +11,7 @@ mod descriptors;\n mod imp;\n mod roots;\n mod symbol_index;\n+mod completion;\n \n use std::{fmt::Debug, sync::Arc};\n \n@@ -246,8 +247,7 @@ impl Analysis {\n         Ok(ra_editor::highlight(&file))\n     }\n     pub fn completions(&self, file_id: FileId, offset: TextUnit) -> Cancelable<Option<Vec<CompletionItem>>> {\n-        let file = self.imp.file_syntax(file_id);\n-        Ok(ra_editor::scope_completion(&file, offset))\n+        self.imp.completions(file_id, offset)\n     }\n     pub fn assists(&self, file_id: FileId, range: TextRange) -> Cancelable<Vec<SourceChange>> {\n         Ok(self.imp.assists(file_id, range))"}, {"sha": "1e9e613ac2d9323001a3c77e1a407a5c491d1e25", "filename": "crates/ra_analysis/src/roots.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_analysis%2Fsrc%2Froots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_analysis%2Fsrc%2Froots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Froots.rs?ref=69d07df201307fb7c539cdb20b8f1c1c12840386", "patch": "@@ -1,7 +1,5 @@\n use std::{sync::Arc};\n \n-use ra_editor::LineIndex;\n-use ra_syntax::File;\n use rustc_hash::FxHashSet;\n use rayon::prelude::*;\n use salsa::Database;\n@@ -10,7 +8,6 @@ use crate::{\n     Cancelable,\n     db::{self, FilesDatabase, SyntaxDatabase},\n     imp::FileResolverImp,\n-    descriptors::module::{ModulesDatabase, ModuleTree},\n     symbol_index::SymbolIndex,\n     FileId,\n };"}, {"sha": "52fae71aeb0874d27d174ea85eaafb996ed09f86", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=69d07df201307fb7c539cdb20b8f1c1c12840386", "patch": "@@ -264,3 +264,17 @@ fn test_find_all_refs_for_param_inside() {\n     let refs = get_all_refs(code);\n     assert_eq!(refs.len(), 2);\n }\n+\n+#[test]\n+fn test_complete_crate_path() {\n+    let snap = analysis(&[\n+        (\"/lib.rs\", \"mod foo; struct Spam;\"),\n+        (\"/foo.rs\", \"use crate::Sp\"),\n+    ]);\n+    let completions = snap.completions(FileId(2), 13.into()).unwrap().unwrap();\n+    assert_eq_dbg(\n+        r#\"[CompletionItem { label: \"foo\", lookup: None, snippet: None },\n+            CompletionItem { label: \"Spam\", lookup: None, snippet: None }]\"#,\n+        &completions,\n+    );\n+}"}, {"sha": "0a36752554bc30d49bf09a60c2136bedb6c085a7", "filename": "crates/ra_editor/src/completion.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_editor%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_editor%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fcompletion.rs?ref=69d07df201307fb7c539cdb20b8f1c1c12840386", "patch": "@@ -2,7 +2,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n \n use ra_syntax::{\n     algo::visit::{visitor, visitor_ctx, Visitor, VisitorCtx},\n-    ast::{self, LoopBodyOwner, ModuleItemOwner},\n+    ast::{self, AstChildren, LoopBodyOwner, ModuleItemOwner},\n     text_utils::is_subrange,\n     AstNode, File,\n     SyntaxKind::*,\n@@ -65,6 +65,21 @@ pub fn scope_completion(file: &File, offset: TextUnit) -> Option<Vec<CompletionI\n     }\n }\n \n+pub fn complete_module_items(items: AstChildren<ast::ModuleItem>, this_item: Option<ast::NameRef>, acc: &mut Vec<CompletionItem>) {\n+    let scope = ModuleScope::new(items);\n+    acc.extend(\n+        scope\n+            .entries()\n+            .iter()\n+            .filter(|entry| Some(entry.syntax()) != this_item.map(|it| it.syntax()))\n+            .map(|entry| CompletionItem {\n+                label: entry.name().to_string(),\n+                lookup: None,\n+                snippet: None,\n+            }),\n+    );\n+}\n+\n fn complete_name_ref(file: &File, name_ref: ast::NameRef, acc: &mut Vec<CompletionItem>) {\n     if !is_node::<ast::Path>(name_ref.syntax()) {\n         return;\n@@ -77,18 +92,7 @@ fn complete_name_ref(file: &File, name_ref: ast::NameRef, acc: &mut Vec<Completi\n             .accept(node)\n         {\n             if let Some(items) = items {\n-                let scope = ModuleScope::new(items);\n-                acc.extend(\n-                    scope\n-                        .entries()\n-                        .iter()\n-                        .filter(|entry| entry.syntax() != name_ref.syntax())\n-                        .map(|entry| CompletionItem {\n-                            label: entry.name().to_string(),\n-                            lookup: None,\n-                            snippet: None,\n-                        }),\n-                );\n+                complete_module_items(items, Some(name_ref), acc);\n             }\n             break;\n         } else if !visited_fn {"}, {"sha": "b73eb4ac7b4c958aa92762d6eb95b3ccb81f3225", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=69d07df201307fb7c539cdb20b8f1c1c12840386", "patch": "@@ -21,7 +21,7 @@ mod typing;\n \n pub use self::{\n     code_actions::{add_derive, add_impl, flip_comma, introduce_variable, LocalEdit},\n-    completion::{scope_completion, CompletionItem},\n+    completion::{scope_completion, complete_module_items, CompletionItem},\n     edit::{Edit, EditBuilder},\n     extend_selection::extend_selection,\n     folding_ranges::{folding_ranges, Fold, FoldKind},"}, {"sha": "096405a38425de52a3802600d9f71c856054fce7", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=69d07df201307fb7c539cdb20b8f1c1c12840386", "patch": "@@ -1371,6 +1371,10 @@ impl<'a> Path<'a> {\n     pub fn segment(self) -> Option<PathSegment<'a>> {\n         super::child_opt(self)\n     }\n+\n+    pub fn qualifier(self) -> Option<Path<'a>> {\n+        super::child_opt(self)\n+    }\n }\n \n // PathExpr"}, {"sha": "c033263a1b69620e91189118121545d4a3bce171", "filename": "crates/ra_syntax/src/ast/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs?ref=69d07df201307fb7c539cdb20b8f1c1c12840386", "patch": "@@ -232,6 +232,36 @@ impl<'a> IfExpr<'a> {\n     }\n }\n \n+\n+#[derive(Debug, Clone, Copy)]\n+pub enum PathSegmentKind<'a> {\n+    Name(NameRef<'a>),\n+    SelfKw,\n+    SuperKw,\n+    CrateKw,\n+}\n+\n+impl<'a> PathSegment<'a> {\n+    pub fn parent_path(self) -> Path<'a> {\n+        self.syntax().parent().and_then(Path::cast)\n+            .expect(\"segments are always nested in paths\")\n+    }\n+\n+    pub fn kind(self) -> Option<PathSegmentKind<'a>> {\n+        let res = if let Some(name_ref) = self.name_ref() {\n+            PathSegmentKind::Name(name_ref)\n+        } else {\n+            match self.syntax().first_child()?.kind() {\n+                SELF_KW => PathSegmentKind::SelfKw,\n+                SUPER_KW => PathSegmentKind::SuperKw,\n+                CRATE_KW => PathSegmentKind::CrateKw,\n+                _ => return None,\n+            }\n+        };\n+        Some(res)\n+    }\n+}\n+\n fn child_opt<'a, P: AstNode<'a>, C: AstNode<'a>>(parent: P) -> Option<C> {\n     children(parent).next()\n }"}, {"sha": "c1c215e0d6b0cdcfcef626493f0dfce577abce21", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/69d07df201307fb7c539cdb20b8f1c1c12840386/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=69d07df201307fb7c539cdb20b8f1c1c12840386", "patch": "@@ -531,7 +531,8 @@ Grammar(\n         ),\n         \"Path\": (\n             options: [\n-                [\"segment\", \"PathSegment\"]\n+                [\"segment\", \"PathSegment\"],\n+                [\"qualifier\", \"Path\"],\n             ]\n         ),\n         \"PathSegment\": ("}]}