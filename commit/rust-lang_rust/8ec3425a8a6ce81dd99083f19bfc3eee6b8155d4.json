{"sha": "8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4", "node_id": "C_kwDOAAsO6NoAKDhlYzM0MjVhOGE2Y2U4MWRkOTkwODNmMTliZmMzZWVlNmI4MTU1ZDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-18T01:37:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-18T01:37:38Z"}, "message": "Auto merge of #2349 - saethlin:isatty, r=RalfJung\n\nImprove isatty support\n\nPer https://github.com/rust-lang/miri/issues/2292#issuecomment-1171858283, this is an attempt at\n\n> do something more clever with Miri's `isatty` shim\n\nSince Unix -> Unix is very simple, I'm starting with a patch that just does that. Happy to augment/rewrite this based on feedback.\n\nThe linked file in libtest specifically only supports stdout. If we're doing this to support terminal applications, I think it would be strange to support one but not all 3 of the standard streams.\n\nThe `atty` crate contains a bunch of extra logic that libtest does not contain, in order to support MSYS terminals: https://github.com/softprops/atty/commit/db8d55f88eabfcc22cde39533c2b1d688d1cdfc6 so I think if we're going to do Windows support, we should probably access all that logic somehow. I think it's pretty clear that the implementation is not going to change, so I think if we want to, pasting the contents of the `atty` crate into Miri is on the table, instead of taking a dependency.", "tree": {"sha": "e887fefd3a02311b7506df54e26b368fa8be3efe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e887fefd3a02311b7506df54e26b368fa8be3efe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4", "html_url": "https://github.com/rust-lang/rust/commit/8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36a7a654b080f4b9d714a904f4ffde7e2483b4fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a7a654b080f4b9d714a904f4ffde7e2483b4fc", "html_url": "https://github.com/rust-lang/rust/commit/36a7a654b080f4b9d714a904f4ffde7e2483b4fc"}, {"sha": "eefdeacdb1aa2515359ba3cedfb04c81d74e783a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eefdeacdb1aa2515359ba3cedfb04c81d74e783a", "html_url": "https://github.com/rust-lang/rust/commit/eefdeacdb1aa2515359ba3cedfb04c81d74e783a"}], "stats": {"total": 82, "additions": 76, "deletions": 6}, "files": [{"sha": "57dfd6f1810c2a8f5ccdcb154cd5d53f93d72b43", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4", "patch": "@@ -440,12 +440,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Miscellaneous\n             \"isatty\" => {\n                 let [fd] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                this.read_scalar(fd)?.to_i32()?;\n-                // \"returns 1 if fd is an open file descriptor referring to a terminal; otherwise 0 is returned, and errno is set to indicate the error\"\n-                // FIXME: we just say nothing is a terminal.\n-                let enotty = this.eval_libc(\"ENOTTY\")?;\n-                this.set_last_error(enotty)?;\n-                this.write_null(dest)?;\n+                let result = this.isatty(fd)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_atfork\" => {\n                 let [prepare, parent, child] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;"}, {"sha": "3fdf82ebc6a743427013f973df3b68adaf8a607f", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4", "patch": "@@ -50,6 +50,9 @@ trait FileDescriptor: std::fmt::Debug {\n     ) -> InterpResult<'tcx, io::Result<i32>>;\n \n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>>;\n+\n+    #[cfg(unix)]\n+    fn as_unix_host_fd(&self) -> Option<i32>;\n }\n \n impl FileDescriptor for FileHandle {\n@@ -114,6 +117,12 @@ impl FileDescriptor for FileHandle {\n         let duplicated = self.file.try_clone()?;\n         Ok(Box::new(FileHandle { file: duplicated, writable: self.writable }))\n     }\n+\n+    #[cfg(unix)]\n+    fn as_unix_host_fd(&self) -> Option<i32> {\n+        use std::os::unix::io::AsRawFd;\n+        Some(self.file.as_raw_fd())\n+    }\n }\n \n impl FileDescriptor for io::Stdin {\n@@ -159,6 +168,11 @@ impl FileDescriptor for io::Stdin {\n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(io::stdin()))\n     }\n+\n+    #[cfg(unix)]\n+    fn as_unix_host_fd(&self) -> Option<i32> {\n+        Some(libc::STDIN_FILENO)\n+    }\n }\n \n impl FileDescriptor for io::Stdout {\n@@ -209,6 +223,11 @@ impl FileDescriptor for io::Stdout {\n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(io::stdout()))\n     }\n+\n+    #[cfg(unix)]\n+    fn as_unix_host_fd(&self) -> Option<i32> {\n+        Some(libc::STDOUT_FILENO)\n+    }\n }\n \n impl FileDescriptor for io::Stderr {\n@@ -252,6 +271,11 @@ impl FileDescriptor for io::Stderr {\n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(io::stderr()))\n     }\n+\n+    #[cfg(unix)]\n+    fn as_unix_host_fd(&self) -> Option<i32> {\n+        Some(libc::STDERR_FILENO)\n+    }\n }\n \n #[derive(Debug)]\n@@ -297,6 +321,11 @@ impl FileDescriptor for DummyOutput {\n     fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(DummyOutput))\n     }\n+\n+    #[cfg(unix)]\n+    fn as_unix_host_fd(&self) -> Option<i32> {\n+        None\n+    }\n }\n \n #[derive(Debug)]\n@@ -1660,6 +1689,38 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         }\n     }\n+\n+    #[cfg_attr(not(unix), allow(unused))]\n+    fn isatty(&mut self, miri_fd: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+        #[cfg(unix)]\n+        {\n+            let miri_fd = this.read_scalar(miri_fd)?.to_i32()?;\n+            if let Some(host_fd) =\n+                this.machine.file_handler.handles.get(&miri_fd).and_then(|fd| fd.as_unix_host_fd())\n+            {\n+                // \"returns 1 if fd is an open file descriptor referring to a terminal;\n+                // otherwise 0 is returned, and errno is set to indicate the error\"\n+                // SAFETY: isatty has no preconditions\n+                let is_tty = unsafe { libc::isatty(host_fd) };\n+                if is_tty == 0 {\n+                    let errno = std::io::Error::last_os_error()\n+                        .raw_os_error()\n+                        .map(Scalar::from_i32)\n+                        .unwrap();\n+                    this.set_last_error(errno)?;\n+                }\n+                return Ok(is_tty);\n+            }\n+        }\n+        // We are attemping to use a Unix interface on a non-Unix platform, or we are on a Unix\n+        // platform and the passed file descriptor is not open.\n+        // FIXME: It should be possible to emulate this at least on Windows by using\n+        // GetConsoleMode.\n+        let enotty = this.eval_libc(\"ENOTTY\")?;\n+        this.set_last_error(enotty)?;\n+        Ok(0)\n+    }\n }\n \n /// Extracts the number of seconds and nanoseconds elapsed between `time` and the unix epoch when"}, {"sha": "6da527927071582398983e1ba58ce47c006d5f40", "filename": "tests/pass/libc.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4/tests%2Fpass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4/tests%2Fpass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flibc.rs?ref=8ec3425a8a6ce81dd99083f19bfc3eee6b8155d4", "patch": "@@ -311,6 +311,17 @@ fn test_posix_gettimeofday() {\n     assert_eq!(is_error, -1);\n }\n \n+fn test_isatty() {\n+    // Testing whether our isatty shim returns the right value would require controlling whether\n+    // these streams are actually TTYs, which is hard.\n+    // For now, we just check that these calls are supported at all.\n+    unsafe {\n+        libc::isatty(libc::STDIN_FILENO);\n+        libc::isatty(libc::STDOUT_FILENO);\n+        libc::isatty(libc::STDERR_FILENO);\n+    }\n+}\n+\n fn main() {\n     #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n     test_posix_fadvise();\n@@ -335,4 +346,6 @@ fn main() {\n \n     #[cfg(any(target_os = \"linux\"))]\n     test_clocks();\n+\n+    test_isatty();\n }"}]}