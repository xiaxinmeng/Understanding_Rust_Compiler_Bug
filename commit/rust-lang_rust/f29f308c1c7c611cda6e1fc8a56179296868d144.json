{"sha": "f29f308c1c7c611cda6e1fc8a56179296868d144", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOWYzMDhjMWM3YzYxMWNkYTZlMWZjOGE1NjE3OTI5Njg2OGQxNDQ=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-15T03:35:12Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-15T17:22:50Z"}, "message": "Enable multiple condvars on a single mutex_arc/rw_arc.", "tree": {"sha": "06257ff1711242b3d95410f14d957e5bb7639316", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06257ff1711242b3d95410f14d957e5bb7639316"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f29f308c1c7c611cda6e1fc8a56179296868d144", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f29f308c1c7c611cda6e1fc8a56179296868d144", "html_url": "https://github.com/rust-lang/rust/commit/f29f308c1c7c611cda6e1fc8a56179296868d144", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f29f308c1c7c611cda6e1fc8a56179296868d144/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1fc7368c858a8280f2463e81e074a2c699b0819", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1fc7368c858a8280f2463e81e074a2c699b0819", "html_url": "https://github.com/rust-lang/rust/commit/d1fc7368c858a8280f2463e81e074a2c699b0819"}], "stats": {"total": 71, "additions": 56, "deletions": 15}, "files": [{"sha": "600bf45c46598a6f11c4f9e3d8678bcb15a46f20", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 54, "deletions": 14, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f29f308c1c7c611cda6e1fc8a56179296868d144/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29f308c1c7c611cda6e1fc8a56179296868d144/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=f29f308c1c7c611cda6e1fc8a56179296868d144", "patch": "@@ -10,31 +10,55 @@ import unsafe::{SharedMutableState,\n                 shared_mutable_state, clone_shared_mutable_state,\n                 get_shared_mutable_state, get_shared_immutable_state};\n import sync;\n-import sync::{mutex, rwlock};\n+import sync::{mutex, mutex_with_condvars, rwlock, rwlock_with_condvars};\n \n export arc, clone, get;\n-export condvar, mutex_arc, rw_arc, rw_write_mode, rw_read_mode;\n+export condvar, mutex_arc, mutex_arc_with_condvars;\n+export rw_arc, rw_arc_with_condvars, rw_write_mode, rw_read_mode;\n \n /// As sync::condvar, a mechanism for unlock-and-descheduling and signalling.\n struct condvar { is_mutex: bool; failed: &mut bool; cond: &sync::condvar; }\n \n impl &condvar {\n     /// Atomically exit the associated ARC and block until a signal is sent.\n-    fn wait() {\n+    #[inline(always)]\n+    fn wait() { self.wait_on(0) }\n+    /**\n+     * Atomically exit the associated ARC and block on a specified condvar\n+     * until a signal is sent on that same condvar (as sync::cond.wait_on).\n+     *\n+     * wait() is equivalent to wait_on(0).\n+     */\n+    #[inline(always)]\n+    fn wait_on(condvar_id: uint) {\n         assert !*self.failed;\n-        self.cond.wait();\n+        self.cond.wait_on(condvar_id);\n         // This is why we need to wrap sync::condvar.\n         check_poison(self.is_mutex, *self.failed);\n     }\n     /// Wake up a blocked task. Returns false if there was no blocked task.\n-    fn signal() -> bool {\n+    #[inline(always)]\n+    fn signal() -> bool { self.signal_on(0) }\n+    /**\n+     * Wake up a blocked task on a specified condvar (as\n+     * sync::cond.signal_on). Returns false if there was no blocked task.\n+     */\n+    #[inline(always)]\n+    fn signal_on(condvar_id: uint) -> bool {\n         assert !*self.failed;\n-        self.cond.signal()\n+        self.cond.signal_on(condvar_id)\n     }\n     /// Wake up all blocked tasks. Returns the number of tasks woken.\n-    fn broadcast() -> uint {\n+    #[inline(always)]\n+    fn broadcast() -> uint { self.broadcast_on(0) }\n+    /**\n+     * Wake up all blocked tasks on a specified condvar (as\n+     * sync::cond.broadcast_on). Returns Returns the number of tasks woken.\n+     */\n+    #[inline(always)]\n+    fn broadcast_on(condvar_id: uint) -> uint {\n         assert !*self.failed;\n-        self.cond.broadcast()\n+        self.cond.broadcast_on(condvar_id)\n     }\n }\n \n@@ -79,9 +103,17 @@ struct mutex_arc<T: send> { x: SharedMutableState<mutex_arc_inner<T>>; }\n \n /// Create a mutex-protected ARC with the supplied data.\n fn mutex_arc<T: send>(+user_data: T) -> mutex_arc<T> {\n-    let data = mutex_arc_inner {\n-        lock: mutex(), failed: false, data: user_data\n-    };\n+    mutex_arc_with_condvars(user_data, 1)\n+}\n+/**\n+ * Create a mutex-protected ARC with the supplied data and a specified number\n+ * of condvars (as sync::mutex_with_condvars).\n+ */\n+fn mutex_arc_with_condvars<T: send>(+user_data: T,\n+                                    num_condvars: uint) -> mutex_arc<T> {\n+    let data =\n+        mutex_arc_inner { lock: mutex_with_condvars(num_condvars),\n+                          failed: false, data: user_data };\n     mutex_arc { x: unsafe { shared_mutable_state(data) } }\n }\n \n@@ -187,9 +219,17 @@ struct rw_arc<T: const send> {\n \n /// Create a reader/writer ARC with the supplied data.\n fn rw_arc<T: const send>(+user_data: T) -> rw_arc<T> {\n-    let data = rw_arc_inner {\n-        lock: rwlock(), failed: false, data: user_data\n-    };\n+    rw_arc_with_condvars(user_data, 1)\n+}\n+/**\n+ * Create a reader/writer ARC with the supplied data and a specified number\n+ * of condvars (as sync::rwlock_with_condvars).\n+ */\n+fn rw_arc_with_condvars<T: const send>(+user_data: T,\n+                                       num_condvars: uint) -> rw_arc<T> {\n+    let data =\n+        rw_arc_inner { lock: rwlock_with_condvars(num_condvars),\n+                       failed: false, data: user_data };\n     rw_arc { x: unsafe { shared_mutable_state(data) }, cant_nest: () }\n }\n "}, {"sha": "c8931eb8d0d0a3d8f316e6cf8a5217402f883c5c", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f29f308c1c7c611cda6e1fc8a56179296868d144/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29f308c1c7c611cda6e1fc8a56179296868d144/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=f29f308c1c7c611cda6e1fc8a56179296868d144", "patch": "@@ -8,7 +8,8 @@\n  * in std.\n  */\n \n-export condvar, semaphore, mutex, rwlock, rwlock_write_mode, rwlock_read_mode;\n+export condvar, semaphore, mutex, mutex_with_condvars;\n+export rwlock, rwlock_with_condvars, rwlock_write_mode, rwlock_read_mode;\n \n // FIXME (#3119) This shouldn't be a thing exported from core.\n import unsafe::{Exclusive, exclusive};"}]}