{"sha": "9e9a0900261946b726137637dfbd4a70fa83f233", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOWEwOTAwMjYxOTQ2YjcyNjEzNzYzN2RmYmQ0YTcwZmE4M2YyMzM=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-22T07:18:42Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-22T07:18:42Z"}, "message": "minor fixes", "tree": {"sha": "46c78e29612fd40f68c1fe2b77588dae5a54db31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46c78e29612fd40f68c1fe2b77588dae5a54db31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e9a0900261946b726137637dfbd4a70fa83f233", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXlDV0gAKCRAnUl7150IK\nUIvjAP9z0ObNxXjwBljTdRFxPKELWvCwv1/KLZs2pqnSwg7ttQD7BV1CKAF6PaS6\ndMhSoG5R9k3idWVra6mgE5U0zViaqgA=\n=Kk7E\n-----END PGP SIGNATURE-----", "payload": "tree 46c78e29612fd40f68c1fe2b77588dae5a54db31\nparent bb3a711b3e28dc768c30925d78e6c2daaf00ab30\nauthor Christian Poveda <git@christianpoveda.xyz> 1582355922 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1582355922 -0500\n\nminor fixes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e9a0900261946b726137637dfbd4a70fa83f233", "html_url": "https://github.com/rust-lang/rust/commit/9e9a0900261946b726137637dfbd4a70fa83f233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e9a0900261946b726137637dfbd4a70fa83f233/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb3a711b3e28dc768c30925d78e6c2daaf00ab30", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb3a711b3e28dc768c30925d78e6c2daaf00ab30", "html_url": "https://github.com/rust-lang/rust/commit/bb3a711b3e28dc768c30925d78e6c2daaf00ab30"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "2ce4ca6c91dc2da8e48df3000f1d77b52447d319", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e9a0900261946b726137637dfbd4a70fa83f233/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9a0900261946b726137637dfbd4a70fa83f233/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=9e9a0900261946b726137637dfbd4a70fa83f233", "patch": "@@ -374,7 +374,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn check_platform(&mut self, platform: &str, name: &str) -> InterpResult<'tcx> {\n         if self.eval_context_mut().tcx.sess.target.target.target_os.to_lowercase() != platform {\n             throw_unsup_format!(\n-                \"`{}` is only available in the `{}` platform\",\n+                \"`{}` is only available on the `{}` platform\",\n                 name,\n                 platform,\n             )"}, {"sha": "37296132c038b13f5f56530c6df59020a0243736", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9e9a0900261946b726137637dfbd4a70fa83f233/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9a0900261946b726137637dfbd4a70fa83f233/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=9e9a0900261946b726137637dfbd4a70fa83f233", "patch": "@@ -179,8 +179,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n \n     /// Emulates calling a foreign item using its name, failing if the item is not supported.\n-    /// Returns Ok(false) if after calling this function, the call should return earlier instead of\n-    /// going to the next block.\n+    /// Returns `true` if the caller is expected to jump to the return block, and `false` if\n+    /// jumping has already been taken care of.\n     fn emulate_foreign_item_by_name(\n         &mut self,\n         link_name: &str,\n@@ -315,35 +315,35 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, Size::from_bits(32)), dest)?;\n             }\n \n-            \"memchr\" => {\n+            \"memrchr\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let val = this.read_scalar(args[1])?.to_i32()? as u8;\n                 let num = this.read_scalar(args[2])?.to_machine_usize(this)?;\n-                let idx = this\n+                if let Some(idx) = this\n                     .memory\n                     .read_bytes(ptr, Size::from_bytes(num))?\n                     .iter()\n-                    .position(|&c| c == val);\n-                if let Some(idx) = idx {\n-                    let new_ptr = ptr.ptr_offset(Size::from_bytes(idx as u64), this)?;\n+                    .rev()\n+                    .position(|&c| c == val)\n+                {\n+                    let new_ptr = ptr.ptr_offset(Size::from_bytes(num - idx as u64 - 1), this)?;\n                     this.write_scalar(new_ptr, dest)?;\n                 } else {\n                     this.write_null(dest)?;\n                 }\n             }\n \n-            \"memrchr\" => {\n+            \"memchr\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let val = this.read_scalar(args[1])?.to_i32()? as u8;\n                 let num = this.read_scalar(args[2])?.to_machine_usize(this)?;\n-                if let Some(idx) = this\n+                let idx = this\n                     .memory\n                     .read_bytes(ptr, Size::from_bytes(num))?\n                     .iter()\n-                    .rev()\n-                    .position(|&c| c == val)\n-                {\n-                    let new_ptr = ptr.ptr_offset(Size::from_bytes(num - idx as u64 - 1), this)?;\n+                    .position(|&c| c == val);\n+                if let Some(idx) = idx {\n+                    let new_ptr = ptr.ptr_offset(Size::from_bytes(idx as u64), this)?;\n                     this.write_scalar(new_ptr, dest)?;\n                 } else {\n                     this.write_null(dest)?;"}, {"sha": "098d05663543e2cd4b4fbb50fd0bc551f47cfa90", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e9a0900261946b726137637dfbd4a70fa83f233/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e9a0900261946b726137637dfbd4a70fa83f233/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=9e9a0900261946b726137637dfbd4a70fa83f233", "patch": "@@ -25,6 +25,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // Time related shims\n+\n+            // This is a POSIX function but it has only been tested on linux.\n             \"clock_gettime\" => {\n                 let result = this.clock_gettime(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n@@ -80,7 +82,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n }\n \n-// Shims the posix 'getrandom()' syscall.\n+// Shims the linux 'getrandom()' syscall.\n fn getrandom<'tcx>(\n     this: &mut MiriEvalContext<'_, 'tcx>,\n     args: &[OpTy<'tcx, Tag>],"}]}