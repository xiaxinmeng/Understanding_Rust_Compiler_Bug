{"sha": "279c35182050889cba42e4adb1438a7f640fdabd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3OWMzNTE4MjA1MDg4OWNiYTQyZTRhZGIxNDM4YTdmNjQwZmRhYmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-18T21:01:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-24T21:21:58Z"}, "message": "Move stdin to using libuv's pipes instead of a tty\n\nI was seeing a lot of weird behavior with stdin behaving as a tty, and it\ndoesn't really quite make sense, so instead this moves to using libuv's pipes\ninstead (which make more sense for stdin specifically).\n\nThis prevents piping input to rustc hanging forever.", "tree": {"sha": "0b048f9ff88bad780a674e1693add3d05cd0ce2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b048f9ff88bad780a674e1693add3d05cd0ce2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/279c35182050889cba42e4adb1438a7f640fdabd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/279c35182050889cba42e4adb1438a7f640fdabd", "html_url": "https://github.com/rust-lang/rust/commit/279c35182050889cba42e4adb1438a7f640fdabd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/279c35182050889cba42e4adb1438a7f640fdabd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3", "html_url": "https://github.com/rust-lang/rust/commit/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3"}], "stats": {"total": 132, "additions": 48, "deletions": 84}, "files": [{"sha": "d035e2f457cc2b940f10f377d91b58eb64e6e209", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=279c35182050889cba42e4adb1438a7f640fdabd", "patch": "@@ -19,7 +19,7 @@ on a `ToCStr` object. This trait is already defined for common\n objects such as strings and `Path` instances.\n \n All operations in this module, including those as part of `FileStream` et al\n-block the task during execution. Most will raise `std::rt::io::{io_error,io_error}`\n+block the task during execution. Most will raise `std::rt::io::io_error`\n conditions in the event of failure.\n \n Also included in this module are the `FileInfo` and `DirectoryInfo` traits. When"}, {"sha": "e424956e2ff6323520cbf3533d5b0a132b30e73a", "filename": "src/libstd/rt/io/net/unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Funix.rs?ref=279c35182050889cba42e4adb1438a7f640fdabd", "patch": "@@ -37,7 +37,7 @@ pub struct UnixStream {\n \n impl UnixStream {\n     fn new(obj: ~RtioPipe) -> UnixStream {\n-        UnixStream { obj: PipeStream::new_bound(obj) }\n+        UnixStream { obj: PipeStream::new(obj) }\n     }\n \n     /// Connect to a pipe named by `path`. This will attempt to open a"}, {"sha": "979a1dfc65e33c6c4b33dfb774930edbf76da216", "filename": "src/libstd/rt/io/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fpipe.rs?ref=279c35182050889cba42e4adb1438a7f640fdabd", "patch": "@@ -23,7 +23,7 @@ pub struct PipeStream {\n }\n \n impl PipeStream {\n-    pub fn new_bound(inner: ~RtioPipe) -> PipeStream {\n+    pub fn new(inner: ~RtioPipe) -> PipeStream {\n         PipeStream { obj: inner }\n     }\n }\n@@ -42,7 +42,7 @@ impl Reader for PipeStream {\n         }\n     }\n \n-    fn eof(&mut self) -> bool { fail!() }\n+    fn eof(&mut self) -> bool { false }\n }\n \n impl Writer for PipeStream {\n@@ -55,5 +55,5 @@ impl Writer for PipeStream {\n         }\n     }\n \n-    fn flush(&mut self) { fail!() }\n+    fn flush(&mut self) {}\n }"}, {"sha": "a5750211b492c0046f2567ef7116239595d29c95", "filename": "src/libstd/rt/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fprocess.rs?ref=279c35182050889cba42e4adb1438a7f640fdabd", "patch": "@@ -89,7 +89,7 @@ impl Process {\n                 Ok((p, io)) => Some(Process{\n                     handle: p,\n                     io: io.move_iter().map(|p|\n-                        p.map(|p| io::PipeStream::new_bound(p))\n+                        p.map(|p| io::PipeStream::new(p))\n                     ).collect()\n                 }),\n                 Err(ioerr) => {"}, {"sha": "e601ece88bb5f437bb9080fed730698ac44dabd6", "filename": "src/libstd/rt/io/stdio.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fstdio.rs?ref=279c35182050889cba42e4adb1438a7f640fdabd", "patch": "@@ -30,7 +30,7 @@ use fmt;\n use libc;\n use option::{Option, Some, None};\n use result::{Ok, Err};\n-use rt::rtio::{IoFactory, RtioTTY, with_local_io};\n+use rt::rtio::{IoFactory, RtioTTY, with_local_io, RtioPipe};\n use super::{Reader, Writer, io_error};\n \n #[fixed_stack_segment] #[inline(never)]\n@@ -52,8 +52,17 @@ fn tty<T>(fd: libc::c_int, f: &fn(~RtioTTY) -> T) -> T {\n /// Creates a new non-blocking handle to the stdin of the current process.\n ///\n /// See `stdout()` for notes about this function.\n+#[fixed_stack_segment] #[inline(never)]\n pub fn stdin() -> StdReader {\n-    do tty(libc::STDIN_FILENO) |tty| { StdReader { inner: tty } }\n+    do with_local_io |io| {\n+        match io.pipe_open(unsafe { libc::dup(libc::STDIN_FILENO) }) {\n+            Ok(stream) => Some(StdReader { inner: stream }),\n+            Err(e) => {\n+                io_error::cond.raise(e);\n+                None\n+            }\n+        }\n+    }.unwrap()\n }\n \n /// Creates a new non-blocking handle to the stdout of the current process.\n@@ -108,28 +117,7 @@ pub fn println_args(fmt: &fmt::Arguments) {\n \n /// Representation of a reader of a standard input stream\n pub struct StdReader {\n-    priv inner: ~RtioTTY\n-}\n-\n-impl StdReader {\n-    /// Controls whether this output stream is a \"raw stream\" or simply a normal\n-    /// stream.\n-    ///\n-    /// # Failure\n-    ///\n-    /// This function will raise on the `io_error` condition if an error\n-    /// happens.\n-    pub fn set_raw(&mut self, raw: bool) {\n-        match self.inner.set_raw(raw) {\n-            Ok(()) => {},\n-            Err(e) => io_error::cond.raise(e),\n-        }\n-    }\n-\n-    /// Returns whether this tream is attached to a TTY instance or not.\n-    ///\n-    /// This is similar to libc's isatty() function\n-    pub fn isatty(&self) -> bool { self.inner.isatty() }\n+    priv inner: ~RtioPipe\n }\n \n impl Reader for StdReader {"}, {"sha": "45c720a89b34c89eb06c17b126336a1ab9df33b7", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=279c35182050889cba42e4adb1438a7f640fdabd", "patch": "@@ -94,6 +94,7 @@ pub trait IoFactory {\n     fn spawn(&mut self, config: ProcessConfig)\n             -> Result<(~RtioProcess, ~[Option<~RtioPipe>]), IoError>;\n \n+    fn pipe_open(&mut self, fd: c_int) -> Result<~RtioPipe, IoError>;\n     fn unix_bind(&mut self, path: &CString) ->\n         Result<~RtioUnixListener, IoError>;\n     fn unix_connect(&mut self, path: &CString) -> Result<~RtioPipe, IoError>;"}, {"sha": "22d7c9c61b3a9ae0f3789b2e8ffc68e4bc8f1af7", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=279c35182050889cba42e4adb1438a7f640fdabd", "patch": "@@ -159,7 +159,7 @@ impl StreamWatcher {\n         // but read_stop may be called from inside one of them and we\n         // would end up freeing the in-use environment\n         let handle = self.native_handle();\n-        unsafe { uvll::read_stop(handle); }\n+        unsafe { assert_eq!(uvll::read_stop(handle), 0); }\n     }\n \n     pub fn write(&mut self, buf: Buf, cb: ConnectionCallback) {"}, {"sha": "a039bbc9fc0296f2ecf72ef6e4fa0d097accdbca", "filename": "src/libstd/rt/uv/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fuv%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fuv%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fprocess.rs?ref=279c35182050889cba42e4adb1438a7f640fdabd", "patch": "@@ -146,7 +146,7 @@ unsafe fn set_stdio(dst: *uvll::uv_stdio_container_t,\n             if writable {\n                 flags |= uvll::STDIO_WRITABLE_PIPE as libc::c_int;\n             }\n-            let pipe = UvUnboundPipe::new_fresh(loop_);\n+            let pipe = UvUnboundPipe::new(loop_);\n             let handle = pipe.pipe.as_stream().native_handle();\n             uvll::set_stdio_container_flags(dst, flags);\n             uvll::set_stdio_container_stream(dst, handle);"}, {"sha": "0d22aa51be5be8b2635b9739e51f82295daca620", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 27, "deletions": 52, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279c35182050889cba42e4adb1438a7f640fdabd/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=279c35182050889cba42e4adb1438a7f640fdabd", "patch": "@@ -805,47 +805,32 @@ impl IoFactory for UvIoFactory {\n \n     fn unix_bind(&mut self, path: &CString) ->\n         Result<~RtioUnixListener, IoError> {\n-        let mut pipe = Pipe::new(self.uv_loop(), false);\n-        match pipe.bind(path) {\n-            Ok(()) => {\n-                let handle = get_handle_to_current_scheduler!();\n-                let pipe = UvUnboundPipe::new(pipe, handle);\n-                Ok(~UvUnixListener::new(pipe) as ~RtioUnixListener)\n-            }\n-            Err(e) => {\n-                let scheduler: ~Scheduler = Local::take();\n-                do scheduler.deschedule_running_task_and_then |_, task| {\n-                    let task_cell = Cell::new(task);\n-                    do pipe.close {\n-                        let scheduler: ~Scheduler = Local::take();\n-                        scheduler.resume_blocked_task_immediately(\n-                            task_cell.take());\n-                    }\n-                }\n-                Err(uv_error_to_io_error(e))\n-            }\n+        let mut pipe = UvUnboundPipe::new(self.uv_loop());\n+        match pipe.pipe.bind(path) {\n+            Ok(()) => Ok(~UvUnixListener::new(pipe) as ~RtioUnixListener),\n+            Err(e) => Err(uv_error_to_io_error(e)),\n         }\n     }\n \n     fn unix_connect(&mut self, path: &CString) -> Result<~RtioPipe, IoError> {\n-        let scheduler: ~Scheduler = Local::take();\n-        let mut pipe = Pipe::new(self.uv_loop(), false);\n+        let pipe = UvUnboundPipe::new(self.uv_loop());\n+        let mut rawpipe = pipe.pipe;\n+\n         let result_cell = Cell::new_empty();\n         let result_cell_ptr: *Cell<Result<~RtioPipe, IoError>> = &result_cell;\n+        let pipe_cell = Cell::new(pipe);\n+        let pipe_cell_ptr: *Cell<UvUnboundPipe> = &pipe_cell;\n \n+        let scheduler: ~Scheduler = Local::take();\n         do scheduler.deschedule_running_task_and_then |_, task| {\n             let task_cell = Cell::new(task);\n-            do pipe.connect(path) |stream, err| {\n+            do rawpipe.connect(path) |_stream, err| {\n                 let res = match err {\n                     None => {\n-                        let handle = stream.native_handle();\n-                        let pipe = NativeHandle::from_native_handle(\n-                                        handle as *uvll::uv_pipe_t);\n-                        let home = get_handle_to_current_scheduler!();\n-                        let pipe = UvUnboundPipe::new(pipe, home);\n+                        let pipe = unsafe { (*pipe_cell_ptr).take() };\n                         Ok(~UvPipeStream::new(pipe) as ~RtioPipe)\n                     }\n-                    Some(e) => { Err(uv_error_to_io_error(e)) }\n+                    Some(e) => Err(uv_error_to_io_error(e)),\n                 };\n                 unsafe { (*result_cell_ptr).put_back(res); }\n                 let scheduler: ~Scheduler = Local::take();\n@@ -854,18 +839,7 @@ impl IoFactory for UvIoFactory {\n         }\n \n         assert!(!result_cell.is_empty());\n-        let ret = result_cell.take();\n-        if ret.is_err() {\n-            let scheduler: ~Scheduler = Local::take();\n-            do scheduler.deschedule_running_task_and_then |_, task| {\n-                let task_cell = Cell::new(task);\n-                do pipe.close {\n-                    let scheduler: ~Scheduler = Local::take();\n-                    scheduler.resume_blocked_task_immediately(task_cell.take());\n-                }\n-            }\n-        }\n-        return ret;\n+        return result_cell.take();\n     }\n \n     fn tty_open(&mut self, fd: c_int, readable: bool)\n@@ -879,6 +853,14 @@ impl IoFactory for UvIoFactory {\n             Err(e) => Err(uv_error_to_io_error(e))\n         }\n     }\n+\n+    fn pipe_open(&mut self, fd: c_int) -> Result<~RtioPipe, IoError> {\n+        let mut pipe = UvUnboundPipe::new(self.uv_loop());\n+        match pipe.pipe.open(fd) {\n+            Ok(()) => Ok(~UvPipeStream::new(pipe) as ~RtioPipe),\n+            Err(e) => Err(uv_error_to_io_error(e))\n+        }\n+    }\n }\n \n pub struct UvTcpListener {\n@@ -1075,14 +1057,9 @@ pub struct UvUnboundPipe {\n }\n \n impl UvUnboundPipe {\n-    /// Takes ownership of an unbound pipe along with the scheduler that it is\n-    /// homed on.\n-    fn new(pipe: Pipe, home: SchedHandle) -> UvUnboundPipe {\n-        UvUnboundPipe { pipe: pipe, home: home }\n-    }\n-\n-    /// Creates a fresh new unbound pipe on the specified I/O loop\n-    pub fn new_fresh(loop_: &Loop) -> UvUnboundPipe {\n+    /// Creates a new unbound pipe homed to the current scheduler, placed on the\n+    /// specified event loop\n+    pub fn new(loop_: &Loop) -> UvUnboundPipe {\n         UvUnboundPipe {\n             pipe: Pipe::new(loop_, false),\n             home: get_handle_to_current_scheduler!(),\n@@ -1727,10 +1704,8 @@ impl RtioUnixListener for UvUnixListener {\n                     let inc = match status {\n                         Some(e) => Err(uv_error_to_io_error(e)),\n                         None => {\n-                            let inc = Pipe::new(&server.event_loop(), false);\n-                            server.accept(inc.as_stream());\n-                            let home = get_handle_to_current_scheduler!();\n-                            let pipe = UvUnboundPipe::new(inc, home);\n+                            let pipe = UvUnboundPipe::new(&server.event_loop());\n+                            server.accept(pipe.pipe.as_stream());\n                             Ok(~UvPipeStream::new(pipe) as ~RtioPipe)\n                         }\n                     };"}]}