{"sha": "ac113f01fb6c22012d884650b47c43262987425e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMTEzZjAxZmI2YzIyMDEyZDg4NDY1MGI0N2M0MzI2Mjk4NzQyNWU=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-07-12T00:17:54Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-08-12T22:03:44Z"}, "message": "Reduce genericity in Filter and FilterMap", "tree": {"sha": "f09c4a9f1b5ca8cb1ba2e8a42655a77d4c313715", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f09c4a9f1b5ca8cb1ba2e8a42655a77d4c313715"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac113f01fb6c22012d884650b47c43262987425e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac113f01fb6c22012d884650b47c43262987425e", "html_url": "https://github.com/rust-lang/rust/commit/ac113f01fb6c22012d884650b47c43262987425e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac113f01fb6c22012d884650b47c43262987425e/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1fd3d024d977828e3071392a7ccc0a1e27bd206", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1fd3d024d977828e3071392a7ccc0a1e27bd206", "html_url": "https://github.com/rust-lang/rust/commit/b1fd3d024d977828e3071392a7ccc0a1e27bd206"}], "stats": {"total": 128, "additions": 70, "deletions": 58}, "files": [{"sha": "f3ed06421e02355f4a6e4289fc743a6dd08d7374", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 70, "deletions": 58, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/ac113f01fb6c22012d884650b47c43262987425e/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac113f01fb6c22012d884650b47c43262987425e/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=ac113f01fb6c22012d884650b47c43262987425e", "patch": "@@ -748,13 +748,27 @@ impl<I: fmt::Debug, P> fmt::Debug for Filter<I, P> {\n     }\n }\n \n+fn filter_fold<T, Acc>(\n+    mut predicate: impl FnMut(&T) -> bool,\n+    mut fold: impl FnMut(Acc, T) -> Acc,\n+) -> impl FnMut(Acc, T) -> Acc {\n+    move |acc, item| if predicate(&item) { fold(acc, item) } else { acc }\n+}\n+\n+fn filter_try_fold<'a, T, Acc, R: Try<Ok = Acc>>(\n+    predicate: &'a mut impl FnMut(&T) -> bool,\n+    mut fold: impl FnMut(Acc, T) -> R + 'a,\n+) -> impl FnMut(Acc, T) -> R + 'a {\n+    move |acc, item| if predicate(&item) { fold(acc, item) } else { R::from_ok(acc) }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: Iterator, P> Iterator for Filter<I, P> where P: FnMut(&I::Item) -> bool {\n     type Item = I::Item;\n \n     #[inline]\n     fn next(&mut self) -> Option<I::Item> {\n-        self.try_for_each(Err).err()\n+        self.iter.find(&mut self.predicate)\n     }\n \n     #[inline]\n@@ -776,32 +790,26 @@ impl<I: Iterator, P> Iterator for Filter<I, P> where P: FnMut(&I::Item) -> bool\n     // leaving more budget for LLVM optimizations.\n     #[inline]\n     fn count(self) -> usize {\n-        let mut predicate = self.predicate;\n-        self.iter.map(|x| predicate(&x) as usize).sum()\n+        #[inline]\n+        fn to_usize<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut(T) -> usize {\n+            move |x| predicate(&x) as usize\n+        }\n+\n+        self.iter.map(to_usize(self.predicate)).sum()\n     }\n \n     #[inline]\n-    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, mut fold: Fold) -> R where\n+    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n         Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n     {\n-        let predicate = &mut self.predicate;\n-        self.iter.try_fold(init, move |acc, item| if predicate(&item) {\n-            fold(acc, item)\n-        } else {\n-            Try::from_ok(acc)\n-        })\n+        self.iter.try_fold(init, filter_try_fold(&mut self.predicate, fold))\n     }\n \n     #[inline]\n-    fn fold<Acc, Fold>(self, init: Acc, mut fold: Fold) -> Acc\n+    fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n         where Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        let mut predicate = self.predicate;\n-        self.iter.fold(init, move |acc, item| if predicate(&item) {\n-            fold(acc, item)\n-        } else {\n-            acc\n-        })\n+        self.iter.fold(init, filter_fold(self.predicate, fold))\n     }\n }\n \n@@ -811,31 +819,21 @@ impl<I: DoubleEndedIterator, P> DoubleEndedIterator for Filter<I, P>\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<I::Item> {\n-        self.try_rfold((), |_, x| Err(x)).err()\n+        self.iter.rfind(&mut self.predicate)\n     }\n \n     #[inline]\n-    fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, mut fold: Fold) -> R where\n+    fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n         Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n     {\n-        let predicate = &mut self.predicate;\n-        self.iter.try_rfold(init, move |acc, item| if predicate(&item) {\n-            fold(acc, item)\n-        } else {\n-            Try::from_ok(acc)\n-        })\n+        self.iter.try_rfold(init, filter_try_fold(&mut self.predicate, fold))\n     }\n \n     #[inline]\n-    fn rfold<Acc, Fold>(self, init: Acc, mut fold: Fold) -> Acc\n+    fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n         where Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        let mut predicate = self.predicate;\n-        self.iter.rfold(init, move |acc, item| if predicate(&item) {\n-            fold(acc, item)\n-        } else {\n-            acc\n-        })\n+        self.iter.rfold(init, filter_fold(self.predicate, fold))\n     }\n }\n \n@@ -872,6 +870,26 @@ impl<I: fmt::Debug, F> fmt::Debug for FilterMap<I, F> {\n     }\n }\n \n+fn filter_map_fold<T, B, Acc>(\n+    mut f: impl FnMut(T) -> Option<B>,\n+    mut fold: impl FnMut(Acc, B) -> Acc,\n+) -> impl FnMut(Acc, T) -> Acc {\n+    move |acc, item| match f(item) {\n+        Some(x) => fold(acc, x),\n+        None => acc,\n+    }\n+}\n+\n+fn filter_map_try_fold<'a, T, B, Acc, R: Try<Ok = Acc>>(\n+    f: &'a mut impl FnMut(T) -> Option<B>,\n+    mut fold: impl FnMut(Acc, B) -> R + 'a,\n+) -> impl FnMut(Acc, T) -> R + 'a {\n+    move |acc, item| match f(item) {\n+        Some(x) => fold(acc, x),\n+        None => R::from_ok(acc),\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<B, I: Iterator, F> Iterator for FilterMap<I, F>\n     where F: FnMut(I::Item) -> Option<B>,\n@@ -880,7 +898,7 @@ impl<B, I: Iterator, F> Iterator for FilterMap<I, F>\n \n     #[inline]\n     fn next(&mut self) -> Option<B> {\n-        self.try_for_each(Err).err()\n+        self.iter.find_map(&mut self.f)\n     }\n \n     #[inline]\n@@ -890,25 +908,17 @@ impl<B, I: Iterator, F> Iterator for FilterMap<I, F>\n     }\n \n     #[inline]\n-    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, mut fold: Fold) -> R where\n+    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n         Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n     {\n-        let f = &mut self.f;\n-        self.iter.try_fold(init, move |acc, item| match f(item) {\n-            Some(x) => fold(acc, x),\n-            None => Try::from_ok(acc),\n-        })\n+        self.iter.try_fold(init, filter_map_try_fold(&mut self.f, fold))\n     }\n \n     #[inline]\n-    fn fold<Acc, Fold>(self, init: Acc, mut fold: Fold) -> Acc\n+    fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n         where Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        let mut f = self.f;\n-        self.iter.fold(init, move |acc, item| match f(item) {\n-            Some(x) => fold(acc, x),\n-            None => acc,\n-        })\n+        self.iter.fold(init, filter_map_fold(self.f, fold))\n     }\n }\n \n@@ -918,29 +928,31 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for FilterMap<I, F>\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<B> {\n-        self.try_rfold((), |_, x| Err(x)).err()\n+        #[inline]\n+        fn find<T, B>(\n+            f: &mut impl FnMut(T) -> Option<B>\n+        ) -> impl FnMut((), T) -> LoopState<(), B> + '_ {\n+            move |(), x| match f(x) {\n+                Some(x) => LoopState::Break(x),\n+                None => LoopState::Continue(()),\n+            }\n+        }\n+\n+        self.iter.try_rfold((), find(&mut self.f)).break_value()\n     }\n \n     #[inline]\n-    fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, mut fold: Fold) -> R where\n+    fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n         Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n     {\n-        let f = &mut self.f;\n-        self.iter.try_rfold(init, move |acc, item| match f(item) {\n-            Some(x) => fold(acc, x),\n-            None => Try::from_ok(acc),\n-        })\n+        self.iter.try_rfold(init, filter_map_try_fold(&mut self.f, fold))\n     }\n \n     #[inline]\n-    fn rfold<Acc, Fold>(self, init: Acc, mut fold: Fold) -> Acc\n+    fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n         where Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n-        let mut f = self.f;\n-        self.iter.rfold(init, move |acc, item| match f(item) {\n-            Some(x) => fold(acc, x),\n-            None => acc,\n-        })\n+        self.iter.rfold(init, filter_map_fold(self.f, fold))\n     }\n }\n "}]}