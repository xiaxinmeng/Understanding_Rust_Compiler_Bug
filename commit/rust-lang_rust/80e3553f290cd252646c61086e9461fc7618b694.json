{"sha": "80e3553f290cd252646c61086e9461fc7618b694", "node_id": "C_kwDOAAsO6NoAKDgwZTM1NTNmMjkwY2QyNTI2NDZjNjEwODZlOTQ2MWZjNzYxOGI2OTQ", "commit": {"author": {"name": "Nadir Fejzic", "email": "nadirfejzo@gmail.com", "date": "2022-11-07T20:34:24Z"}, "committer": {"name": "Nadir Fejzic", "email": "nadirfejzo@gmail.com", "date": "2022-11-10T14:47:12Z"}, "message": "refactor: improve code re-use in InstantSubtraction lint pass", "tree": {"sha": "501909493fe8ed216db4115e0077319c7c5bc8c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/501909493fe8ed216db4115e0077319c7c5bc8c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80e3553f290cd252646c61086e9461fc7618b694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80e3553f290cd252646c61086e9461fc7618b694", "html_url": "https://github.com/rust-lang/rust/commit/80e3553f290cd252646c61086e9461fc7618b694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80e3553f290cd252646c61086e9461fc7618b694/comments", "author": {"login": "nfejzic", "id": 40841816, "node_id": "MDQ6VXNlcjQwODQxODE2", "avatar_url": "https://avatars.githubusercontent.com/u/40841816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nfejzic", "html_url": "https://github.com/nfejzic", "followers_url": "https://api.github.com/users/nfejzic/followers", "following_url": "https://api.github.com/users/nfejzic/following{/other_user}", "gists_url": "https://api.github.com/users/nfejzic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nfejzic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nfejzic/subscriptions", "organizations_url": "https://api.github.com/users/nfejzic/orgs", "repos_url": "https://api.github.com/users/nfejzic/repos", "events_url": "https://api.github.com/users/nfejzic/events{/privacy}", "received_events_url": "https://api.github.com/users/nfejzic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nfejzic", "id": 40841816, "node_id": "MDQ6VXNlcjQwODQxODE2", "avatar_url": "https://avatars.githubusercontent.com/u/40841816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nfejzic", "html_url": "https://github.com/nfejzic", "followers_url": "https://api.github.com/users/nfejzic/followers", "following_url": "https://api.github.com/users/nfejzic/following{/other_user}", "gists_url": "https://api.github.com/users/nfejzic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nfejzic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nfejzic/subscriptions", "organizations_url": "https://api.github.com/users/nfejzic/orgs", "repos_url": "https://api.github.com/users/nfejzic/repos", "events_url": "https://api.github.com/users/nfejzic/events{/privacy}", "received_events_url": "https://api.github.com/users/nfejzic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a566eb37659ecbdcfe1403f8ccab753714dbec60", "url": "https://api.github.com/repos/rust-lang/rust/commits/a566eb37659ecbdcfe1403f8ccab753714dbec60", "html_url": "https://github.com/rust-lang/rust/commit/a566eb37659ecbdcfe1403f8ccab753714dbec60"}], "stats": {"total": 85, "additions": 50, "deletions": 35}, "files": [{"sha": "3166c62dad43e7fe74f1719b2650616e44a092b1", "filename": "clippy_lints/src/instant_subtraction.rs", "status": "modified", "additions": 50, "deletions": 35, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/80e3553f290cd252646c61086e9461fc7618b694/clippy_lints%2Fsrc%2Finstant_subtraction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e3553f290cd252646c61086e9461fc7618b694/clippy_lints%2Fsrc%2Finstant_subtraction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finstant_subtraction.rs?ref=80e3553f290cd252646c61086e9461fc7618b694", "patch": "@@ -1,6 +1,8 @@\n use clippy_utils::{\n     diagnostics::{self, span_lint_and_sugg},\n-    meets_msrv, msrvs, source, ty,\n+    meets_msrv, msrvs, source,\n+    sugg::Sugg,\n+    ty,\n };\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n@@ -78,45 +80,41 @@ impl_lint_pass!(InstantSubtraction => [MANUAL_INSTANT_ELAPSED, UNCHECKED_DURATIO\n \n impl LateLintPass<'_> for InstantSubtraction {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n-        if let ExprKind::Binary(Spanned {node: BinOpKind::Sub, ..}, lhs, rhs) = expr.kind\n-            && check_instant_now_call(cx, lhs)\n-            && let ty_resolved = cx.typeck_results().expr_ty(rhs)\n-            && let rustc_middle::ty::Adt(def, _) = ty_resolved.kind()\n-            && clippy_utils::match_def_path(cx, def.did(), &clippy_utils::paths::INSTANT)\n-            && let Some(sugg) = clippy_utils::sugg::Sugg::hir_opt(cx, rhs)\n+        if let ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Sub, ..\n+            },\n+            lhs,\n+            rhs,\n+        ) = expr.kind\n         {\n-            span_lint_and_sugg(\n-                cx,\n-                MANUAL_INSTANT_ELAPSED,\n-                expr.span,\n-                \"manual implementation of `Instant::elapsed`\",\n-                \"try\",\n-                format!(\"{}.elapsed()\", sugg.maybe_par()),\n-                Applicability::MachineApplicable,\n-            );\n-        }\n-\n-        if expr.span.from_expansion() || !meets_msrv(self.msrv, msrvs::TRY_FROM) {\n-            return;\n-        }\n-\n-        if_chain! {\n-            if let ExprKind::Binary(op, lhs, rhs) = expr.kind;\n-\n-            if let BinOpKind::Sub = op.node;\n-\n-            // get types of left and right side\n-            if is_an_instant(cx, lhs);\n-            if is_a_duration(cx, rhs);\n-\n-            then {\n-                print_lint_and_sugg(cx, lhs, rhs, expr)\n+            if_chain! {\n+                if is_instant_now_call(cx, lhs);\n+\n+                if is_an_instant(cx, rhs);\n+                if let Some(sugg) = Sugg::hir_opt(cx, rhs);\n+\n+                then {\n+                    print_manual_instant_elapsed_sugg(cx, expr, sugg)\n+                } else {\n+                    if_chain! {\n+                        if !expr.span.from_expansion();\n+                        if meets_msrv(self.msrv, msrvs::TRY_FROM);\n+\n+                        if is_an_instant(cx, lhs);\n+                        if is_a_duration(cx, rhs);\n+\n+                        then {\n+                            print_unchecked_duration_subtraction_sugg(cx, lhs, rhs, expr)\n+                        }\n+                    }\n+                }\n             }\n         }\n     }\n }\n \n-fn check_instant_now_call(cx: &LateContext<'_>, expr_block: &'_ Expr<'_>) -> bool {\n+fn is_instant_now_call(cx: &LateContext<'_>, expr_block: &'_ Expr<'_>) -> bool {\n     if let ExprKind::Call(fn_expr, []) = expr_block.kind\n         && let Some(fn_id) = clippy_utils::path_def_id(cx, fn_expr)\n         && clippy_utils::match_def_path(cx, fn_id, &clippy_utils::paths::INSTANT_NOW)\n@@ -141,7 +139,24 @@ fn is_a_duration(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     ty::is_type_diagnostic_item(cx, expr_ty, sym::Duration)\n }\n \n-fn print_lint_and_sugg(cx: &LateContext<'_>, left_expr: &Expr<'_>, right_expr: &Expr<'_>, expr: &Expr<'_>) {\n+fn print_manual_instant_elapsed_sugg(cx: &LateContext<'_>, expr: &Expr<'_>, sugg: Sugg<'_>) {\n+    span_lint_and_sugg(\n+        cx,\n+        MANUAL_INSTANT_ELAPSED,\n+        expr.span,\n+        \"manual implementation of `Instant::elapsed`\",\n+        \"try\",\n+        format!(\"{}.elapsed()\", sugg.maybe_par()),\n+        Applicability::MachineApplicable,\n+    );\n+}\n+\n+fn print_unchecked_duration_subtraction_sugg(\n+    cx: &LateContext<'_>,\n+    left_expr: &Expr<'_>,\n+    right_expr: &Expr<'_>,\n+    expr: &Expr<'_>,\n+) {\n     let mut applicability = Applicability::MachineApplicable;\n \n     let left_expr ="}]}