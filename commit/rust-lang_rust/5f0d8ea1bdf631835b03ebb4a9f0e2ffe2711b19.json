{"sha": "5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMGQ4ZWExYmRmNjMxODM1YjAzZWJiNGE5ZjBlMmZmZTI3MTFiMTk=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-02-02T05:32:19Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-02-02T05:32:19Z"}, "message": "Rollup merge of #31345 - kamalmarhubi:book-docs-special-section-errors, r=steveklabnik\n\nThis matches the usage in the standard library's documentation.", "tree": {"sha": "5a946aafae5ff6ff2616826174f4cacc298a514b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a946aafae5ff6ff2616826174f4cacc298a514b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19", "html_url": "https://github.com/rust-lang/rust/commit/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eb417b17fce7c6dbb6141723f369966eaba7009", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb417b17fce7c6dbb6141723f369966eaba7009", "html_url": "https://github.com/rust-lang/rust/commit/9eb417b17fce7c6dbb6141723f369966eaba7009"}, {"sha": "129a6239d28aeaea87a9d27191e50b55e6b8923a", "url": "https://api.github.com/repos/rust-lang/rust/commits/129a6239d28aeaea87a9d27191e50b55e6b8923a", "html_url": "https://github.com/rust-lang/rust/commit/129a6239d28aeaea87a9d27191e50b55e6b8923a"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "ede3100194e5bd308e9f2a47c2373bd3519ced57", "filename": "src/doc/book/documentation.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Fdoc%2Fbook%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Fdoc%2Fbook%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fdocumentation.md?ref=5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19", "patch": "@@ -118,7 +118,7 @@ least. If your function has a non-trivial contract like this, that is\n detected/enforced by panics, documenting it is very important.\n \n ```rust\n-/// # Failures\n+/// # Errors\n # fn foo() {}\n ```\n "}, {"sha": "20a7c651350cb953d5f557b36fe0bcee246cc600", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19", "patch": "@@ -1692,7 +1692,7 @@ impl str {\n     ///\n     /// [`FromStr`]: str/trait.FromStr.html\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// Will return `Err` if it's not possible to parse this string slice into\n     /// the desired type."}, {"sha": "b1242ba6d4df25a8e4135e218c2c9544a092e56c", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19", "patch": "@@ -433,7 +433,7 @@ impl String {\n     ///\n     /// [`str::from_utf8()`]: ../str/fn.from_utf8.html\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// Returns `Err` if the slice is not UTF-8 with a description as to why the\n     /// provided bytes are not UTF-8. The vector you moved in is also included."}, {"sha": "f19970546d79b20d1991b9ee8e3feb20f03c69f9", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19", "patch": "@@ -188,7 +188,7 @@ impl Utf8Error {\n /// it, this function is one way to have a stack-allocated string. There is\n /// an example of this in the examples section below.\n ///\n-/// # Failure\n+/// # Errors\n ///\n /// Returns `Err` if the slice is not UTF-8 with a description as to why the\n /// provided slice is not UTF-8."}, {"sha": "9386453d660d23b60600c2b63638f09a9431592b", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19", "patch": "@@ -194,7 +194,7 @@ impl char {\n     /// * `a-z`\n     /// * `A-Z`\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// Returns `None` if the `char` does not refer to a digit in the given radix.\n     ///"}, {"sha": "d12cfa6183a241aee0391405af3bd2d9f85d5616", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19", "patch": "@@ -70,7 +70,7 @@ pub struct Metadata(fs_imp::FileAttr);\n /// information like the entry's path and possibly other metadata can be\n /// learned.\n ///\n-/// # Failure\n+/// # Errors\n ///\n /// This `io::Result` will be an `Err` if there's some sort of intermittent\n /// IO error during iteration."}, {"sha": "9a786752365f1d4c890f909bae85b5d56d80a876", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19", "patch": "@@ -129,7 +129,7 @@ impl Condvar {\n     /// the predicate must always be checked each time this function returns to\n     /// protect against spurious wakeups.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the mutex being waited on is\n     /// poisoned when this thread re-acquires the lock. For more information,"}, {"sha": "fe9f0371abd5d3b418980eb81954952b02c08c7c", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19", "patch": "@@ -205,7 +205,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// held. An RAII guard is returned to allow scoped unlock of the lock. When\n     /// the guard goes out of scope, the mutex will be unlocked.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return an error once the mutex is acquired.\n@@ -223,7 +223,7 @@ impl<T: ?Sized> Mutex<T> {\n     ///\n     /// This function does not block.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return failure if the mutex would otherwise be\n@@ -250,7 +250,7 @@ impl<T: ?Sized> Mutex<T> {\n \n     /// Consumes this mutex, returning the underlying data.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return an error instead.\n@@ -280,7 +280,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// Since this call borrows the `Mutex` mutably, no actual locking needs to\n     /// take place---the mutable borrow statically guarantees no locks exist.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return an error instead."}, {"sha": "63ef7732ad650cc71deb1cd9984fed434a52dfaf", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19", "patch": "@@ -169,7 +169,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// Returns an RAII guard which will release this thread's shared access\n     /// once it is dropped.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock.\n@@ -192,7 +192,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// This function does not provide any guarantees with respect to the ordering\n     /// of whether contentious readers or writers will acquire the lock first.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock. An\n@@ -217,7 +217,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// Returns an RAII guard which will drop the write access of this rwlock\n     /// when dropped.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock.\n@@ -240,7 +240,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// This function does not provide any guarantees with respect to the ordering\n     /// of whether contentious readers or writers will acquire the lock first.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock. An\n@@ -269,7 +269,7 @@ impl<T: ?Sized> RwLock<T> {\n \n     /// Consumes this `RwLock`, returning the underlying data.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock. An\n@@ -301,7 +301,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// Since this call borrows the `RwLock` mutably, no actual locking needs to\n     /// take place---the mutable borrow statically guarantees no locks exist.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock. An"}, {"sha": "2e2be63c3cb5b300ea63c813cc8951e74acc53a9", "filename": "src/libstd/sys/common/remutex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs?ref=5f0d8ea1bdf631835b03ebb4a9f0e2ffe2711b19", "patch": "@@ -78,7 +78,7 @@ impl<T> ReentrantMutex<T> {\n     /// calling this method already holds the lock, the call shall succeed without\n     /// blocking.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return failure if the mutex would otherwise be\n@@ -95,7 +95,7 @@ impl<T> ReentrantMutex<T> {\n     ///\n     /// This function does not block.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return failure if the mutex would otherwise be"}]}