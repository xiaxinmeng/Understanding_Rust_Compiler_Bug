{"sha": "66c5e3ffb2b7a0804ceb989b9dc9138a7758bfd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YzVlM2ZmYjJiN2EwODA0Y2ViOTg5YjlkYzkxMzhhNzc1OGJmZDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-06T20:46:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-13T14:04:23Z"}, "message": "Reduce the size of panics in RawVec\n\nCreate one canonical location which panics with \"capacity overflow\" instead of\nhaving many. This reduces the size of a `panic!(\"{}\", 1)` binary on wasm from\n34k to 17k.", "tree": {"sha": "e0083df0c26ed4584e5e20c566af265332c37d04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0083df0c26ed4584e5e20c566af265332c37d04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66c5e3ffb2b7a0804ceb989b9dc9138a7758bfd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66c5e3ffb2b7a0804ceb989b9dc9138a7758bfd6", "html_url": "https://github.com/rust-lang/rust/commit/66c5e3ffb2b7a0804ceb989b9dc9138a7758bfd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66c5e3ffb2b7a0804ceb989b9dc9138a7758bfd6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3a5d6b130e27d7d7587f56581247d5b08c38594", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a5d6b130e27d7d7587f56581247d5b08c38594", "html_url": "https://github.com/rust-lang/rust/commit/c3a5d6b130e27d7d7587f56581247d5b08c38594"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "ae933f937c462bae1dee9c8848850a86a7438651", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/66c5e3ffb2b7a0804ceb989b9dc9138a7758bfd6/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c5e3ffb2b7a0804ceb989b9dc9138a7758bfd6/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=66c5e3ffb2b7a0804ceb989b9dc9138a7758bfd6", "patch": "@@ -85,8 +85,8 @@ impl<T, A: Alloc> RawVec<T, A> {\n         unsafe {\n             let elem_size = mem::size_of::<T>();\n \n-            let alloc_size = cap.checked_mul(elem_size).expect(\"capacity overflow\");\n-            alloc_guard(alloc_size).expect(\"capacity overflow\");\n+            let alloc_size = cap.checked_mul(elem_size).unwrap_or_else(|| capacity_overflow());\n+            alloc_guard(alloc_size).unwrap_or_else(|_| capacity_overflow());\n \n             // handles ZSTs and `cap = 0` alike\n             let ptr = if alloc_size == 0 {\n@@ -309,7 +309,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n                     // `from_size_align_unchecked`.\n                     let new_cap = 2 * self.cap;\n                     let new_size = new_cap * elem_size;\n-                    alloc_guard(new_size).expect(\"capacity overflow\");\n+                    alloc_guard(new_size).unwrap_or_else(|_| capacity_overflow());\n                     let ptr_res = self.a.realloc(NonNull::from(self.ptr).as_opaque(),\n                                                  cur,\n                                                  new_size);\n@@ -368,7 +368,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n             // overflow and the alignment is sufficiently small.\n             let new_cap = 2 * self.cap;\n             let new_size = new_cap * elem_size;\n-            alloc_guard(new_size).expect(\"capacity overflow\");\n+            alloc_guard(new_size).unwrap_or_else(|_| capacity_overflow());\n             match self.a.grow_in_place(NonNull::from(self.ptr).as_opaque(), old_layout, new_size) {\n                 Ok(_) => {\n                     // We can't directly divide `size`.\n@@ -440,7 +440,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n \n     pub fn reserve_exact(&mut self, used_cap: usize, needed_extra_cap: usize) {\n         match self.try_reserve_exact(used_cap, needed_extra_cap) {\n-            Err(CapacityOverflow) => panic!(\"capacity overflow\"),\n+            Err(CapacityOverflow) => capacity_overflow(),\n             Err(AllocErr) => self.a.oom(),\n             Ok(()) => { /* yay */ }\n          }\n@@ -550,7 +550,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     /// The same as try_reserve, but errors are lowered to a call to oom().\n     pub fn reserve(&mut self, used_cap: usize, needed_extra_cap: usize) {\n         match self.try_reserve(used_cap, needed_extra_cap) {\n-            Err(CapacityOverflow) => panic!(\"capacity overflow\"),\n+            Err(CapacityOverflow) => capacity_overflow(),\n             Err(AllocErr) => self.a.oom(),\n             Ok(()) => { /* yay */ }\n          }\n@@ -591,15 +591,15 @@ impl<T, A: Alloc> RawVec<T, A> {\n             }\n \n             let new_cap = self.amortized_new_size(used_cap, needed_extra_cap)\n-                              .expect(\"capacity overflow\");\n+                .unwrap_or_else(|_| capacity_overflow());\n \n             // Here, `cap < used_cap + needed_extra_cap <= new_cap`\n             // (regardless of whether `self.cap - used_cap` wrapped).\n             // Therefore we can safely call grow_in_place.\n \n             let new_layout = Layout::new::<T>().repeat(new_cap).unwrap().0;\n             // FIXME: may crash and burn on over-reserve\n-            alloc_guard(new_layout.size()).expect(\"capacity overflow\");\n+            alloc_guard(new_layout.size()).unwrap_or_else(|_| capacity_overflow());\n             match self.a.grow_in_place(\n                 NonNull::from(self.ptr).as_opaque(), old_layout, new_layout.size(),\n             ) {\n@@ -731,6 +731,13 @@ fn alloc_guard(alloc_size: usize) -> Result<(), CollectionAllocErr> {\n     }\n }\n \n+// One central function responsible for reporting capacity overflows. This'll\n+// ensure that the code generation related to these panics is minimal as there's\n+// only one location which panics rather than a bunch throughout the module.\n+fn capacity_overflow() -> ! {\n+    panic!(\"capacity overflow\")\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}]}