{"sha": "fc57e40ce703cb70a39249f5cfb661020a1549b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNTdlNDBjZTcwM2NiNzBhMzkyNDlmNWNmYjY2MTAyMGExNTQ5YjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-25T17:23:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-25T17:23:54Z"}, "message": "Auto merge of #39296 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\n- Successful merges: #38930, #39212, #39251, #39267, #39276, #39278\n- Failed merges:", "tree": {"sha": "60c257c4000f019544f94929faf63a2fcc48e56b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60c257c4000f019544f94929faf63a2fcc48e56b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc57e40ce703cb70a39249f5cfb661020a1549b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc57e40ce703cb70a39249f5cfb661020a1549b6", "html_url": "https://github.com/rust-lang/rust/commit/fc57e40ce703cb70a39249f5cfb661020a1549b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc57e40ce703cb70a39249f5cfb661020a1549b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1283c029557bcde106adde71f467fe133b3ffeff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1283c029557bcde106adde71f467fe133b3ffeff", "html_url": "https://github.com/rust-lang/rust/commit/1283c029557bcde106adde71f467fe133b3ffeff"}, {"sha": "a2fa75b70546baa160be2a00326fa1b08d699b4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fa75b70546baa160be2a00326fa1b08d699b4c", "html_url": "https://github.com/rust-lang/rust/commit/a2fa75b70546baa160be2a00326fa1b08d699b4c"}], "stats": {"total": 79, "additions": 43, "deletions": 36}, "files": [{"sha": "940367b39710030e80f7cdfb0275d7219994e855", "filename": "src/doc/book/testing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc57e40ce703cb70a39249f5cfb661020a1549b6/src%2Fdoc%2Fbook%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc57e40ce703cb70a39249f5cfb661020a1549b6/src%2Fdoc%2Fbook%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftesting.md?ref=fc57e40ce703cb70a39249f5cfb661020a1549b6", "patch": "@@ -384,7 +384,7 @@ currently trying to run the tests. This can save compile time, and also ensures\n that our tests are entirely left out of a normal build.\n \n The second change is the `use` declaration. Because we're in an inner module,\n-we need to bring our test function into scope. This can be annoying if you have\n+we need to bring the tested function into scope. This can be annoying if you have\n a large module, and so this is a common use of globs. Let's change our\n `src/lib.rs` to make use of it:\n "}, {"sha": "9ff4725c9b36526809649c93a7a6c2731b2dd8ed", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc57e40ce703cb70a39249f5cfb661020a1549b6/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc57e40ce703cb70a39249f5cfb661020a1549b6/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=fc57e40ce703cb70a39249f5cfb661020a1549b6", "patch": "@@ -2776,7 +2776,7 @@ impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *mut T {}\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n \n-/// Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\n+/// Both `PLACE <- EXPR` and `box EXPR` desugar into expressions\n /// that allocate an intermediate \"place\" that holds uninitialized\n /// state.  The desugaring evaluates EXPR, and writes the result at\n /// the address returned by the `pointer` method of this trait.\n@@ -2791,7 +2791,7 @@ impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n /// converting the agent to an instance of the owning pointer, via the\n /// appropriate `finalize` method (see the `InPlace`.\n ///\n-/// If evaluating EXPR fails, then the destructor for the\n+/// If evaluating EXPR fails, then it is up to the destructor for the\n /// implementation of Place to clean up any intermediate state\n /// (e.g. deallocate box storage, pop a stack, etc).\n #[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n@@ -2802,9 +2802,9 @@ pub trait Place<Data: ?Sized> {\n     fn pointer(&mut self) -> *mut Data;\n }\n \n-/// Interface to implementations of  `in (PLACE) EXPR`.\n+/// Interface to implementations of  `PLACE <- EXPR`.\n ///\n-/// `in (PLACE) EXPR` effectively desugars into:\n+/// `PLACE <- EXPR` effectively desugars into:\n ///\n /// ```rust,ignore\n /// let p = PLACE;\n@@ -2817,7 +2817,7 @@ pub trait Place<Data: ?Sized> {\n /// }\n /// ```\n ///\n-/// The type of `in (PLACE) EXPR` is derived from the type of `PLACE`;\n+/// The type of `PLACE <- EXPR` is derived from the type of `PLACE`;\n /// if the type of `PLACE` is `P`, then the final type of the whole\n /// expression is `P::Place::Owner` (see the `InPlace` and `Boxed`\n /// traits).\n@@ -2835,12 +2835,12 @@ pub trait Placer<Data: ?Sized> {\n     fn make_place(self) -> Self::Place;\n }\n \n-/// Specialization of `Place` trait supporting `in (PLACE) EXPR`.\n+/// Specialization of `Place` trait supporting `PLACE <- EXPR`.\n #[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub trait InPlace<Data: ?Sized>: Place<Data> {\n-    /// `Owner` is the type of the end value of `in (PLACE) EXPR`\n+    /// `Owner` is the type of the end value of `PLACE <- EXPR`\n     ///\n-    /// Note that when `in (PLACE) EXPR` is solely used for\n+    /// Note that when `PLACE <- EXPR` is solely used for\n     /// side-effecting an existing data-structure,\n     /// e.g. `Vec::emplace_back`, then `Owner` need not carry any\n     /// information at all (e.g. it can be the unit type `()` in that"}, {"sha": "0d124338133430d3cbf27494895f98dd3407498b", "filename": "src/libcoretest/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc57e40ce703cb70a39249f5cfb661020a1549b6/src%2Flibcoretest%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc57e40ce703cb70a39249f5cfb661020a1549b6/src%2Flibcoretest%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fmod.rs?ref=fc57e40ce703cb70a39249f5cfb661020a1549b6", "patch": "@@ -62,9 +62,8 @@ fn test_writer_hasher() {\n \n     let s: &str = \"a\";\n     assert_eq!(hash(& s), 97 + 0xFF);\n-    // FIXME (#18283) Enable test\n-    //let s: Box<str> = box \"a\";\n-    //assert_eq!(hasher.hash(& s), 97 + 0xFF);\n+    let s: Box<str> = String::from(\"a\").into_boxed_str();\n+    assert_eq!(hash(& s), 97 + 0xFF);\n     let cs: &[u8] = &[1, 2, 3];\n     assert_eq!(hash(& cs), 9);\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible."}, {"sha": "cc6d61c21c69613e66809b3247ac389607356005", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc57e40ce703cb70a39249f5cfb661020a1549b6/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc57e40ce703cb70a39249f5cfb661020a1549b6/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=fc57e40ce703cb70a39249f5cfb661020a1549b6", "patch": "@@ -154,7 +154,7 @@ pub trait Visitor<'v> : Sized {\n     /// hashed separately.\n     ///\n     /// **If for some reason you want the nested behavior, but don't\n-    /// have a `Map` are your disposal:** then you should override the\n+    /// have a `Map` at your disposal:** then you should override the\n     /// `visit_nested_XXX` methods, and override this method to\n     /// `panic!()`. This way, if a new `visit_nested_XXX` variant is\n     /// added in the future, we will see the panic in your code and"}, {"sha": "fe086347884b09c89f24d66e24fce10156bfc7b2", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc57e40ce703cb70a39249f5cfb661020a1549b6/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc57e40ce703cb70a39249f5cfb661020a1549b6/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=fc57e40ce703cb70a39249f5cfb661020a1549b6", "patch": "@@ -1014,7 +1014,7 @@ pub enum QPath {\n     ///\n     /// UFCS source paths can desugar into this, with `Vec::new` turning into\n     /// `<Vec>::new`, and `T::X::Y::method` into `<<<T>::X>::Y>::method`,\n-    /// the `X` and `Y` nodes being each a `TyPath(QPath::TypeRelative(..))`.\n+    /// the `X` and `Y` nodes each being a `TyPath(QPath::TypeRelative(..))`.\n     TypeRelative(P<Ty>, P<PathSegment>)\n }\n "}, {"sha": "11197db98a39680b098af9d929f637f5954a9d7c", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fc57e40ce703cb70a39249f5cfb661020a1549b6/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc57e40ce703cb70a39249f5cfb661020a1549b6/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=fc57e40ce703cb70a39249f5cfb661020a1549b6", "patch": "@@ -272,7 +272,7 @@ mod prim_pointer { }\n /// Arrays of sizes from 0 to 32 (inclusive) implement the following traits if\n /// the element type allows it:\n ///\n-/// - [`Clone`][clone] (only if `T: Copy`)\n+/// - [`Clone`][clone] (only if `T: [Copy][copy]`)\n /// - [`Debug`][debug]\n /// - [`IntoIterator`][intoiterator] (implemented for `&[T; N]` and `&mut [T; N]`)\n /// - [`PartialEq`][partialeq], [`PartialOrd`][partialord], [`Eq`][eq], [`Ord`][ord]\n@@ -287,8 +287,8 @@ mod prim_pointer { }\n /// entirely different types. As a stopgap, trait implementations are\n /// statically generated up to size 32.\n ///\n-/// Arrays of *any* size are [`Copy`][copy] if the element type is `Copy`. This\n-/// works because the `Copy` trait is specially known to the compiler.\n+/// Arrays of *any* size are [`Copy`][copy] if the element type is [`Copy`][copy]. This\n+/// works because the [`Copy`][copy] trait is specially known to the compiler.\n ///\n /// Arrays coerce to [slices (`[T]`)][slice], so a slice method may be called on\n /// an array. Indeed, this provides most of the API for working with arrays.\n@@ -297,23 +297,6 @@ mod prim_pointer { }\n /// There is no way to move elements out of an array. See [`mem::replace`][replace]\n /// for an alternative.\n ///\n-/// [slice]: primitive.slice.html\n-/// [copy]: marker/trait.Copy.html\n-/// [clone]: clone/trait.Clone.html\n-/// [debug]: fmt/trait.Debug.html\n-/// [intoiterator]: iter/trait.IntoIterator.html\n-/// [partialeq]: cmp/trait.PartialEq.html\n-/// [partialord]: cmp/trait.PartialOrd.html\n-/// [eq]: cmp/trait.Eq.html\n-/// [ord]: cmp/trait.Ord.html\n-/// [hash]: hash/trait.Hash.html\n-/// [asref]: convert/trait.AsRef.html\n-/// [asmut]: convert/trait.AsMut.html\n-/// [borrow]: borrow/trait.Borrow.html\n-/// [borrowmut]: borrow/trait.BorrowMut.html\n-/// [default]: default/trait.Default.html\n-/// [replace]: mem/fn.replace.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -347,13 +330,31 @@ mod prim_pointer { }\n /// ```\n ///\n /// If the array has 32 or fewer elements (see above), you can also use the\n-/// array reference's `IntoIterator` implementation:\n+/// array reference's [`IntoIterator`] implementation:\n ///\n /// ```\n /// # let array: [i32; 3] = [0; 3];\n /// for x in &array { }\n /// ```\n ///\n+/// [slice]: primitive.slice.html\n+/// [copy]: marker/trait.Copy.html\n+/// [clone]: clone/trait.Clone.html\n+/// [debug]: fmt/trait.Debug.html\n+/// [intoiterator]: iter/trait.IntoIterator.html\n+/// [partialeq]: cmp/trait.PartialEq.html\n+/// [partialord]: cmp/trait.PartialOrd.html\n+/// [eq]: cmp/trait.Eq.html\n+/// [ord]: cmp/trait.Ord.html\n+/// [hash]: hash/trait.Hash.html\n+/// [asref]: convert/trait.AsRef.html\n+/// [asmut]: convert/trait.AsMut.html\n+/// [borrow]: borrow/trait.Borrow.html\n+/// [borrowmut]: borrow/trait.BorrowMut.html\n+/// [default]: default/trait.Default.html\n+/// [replace]: mem/fn.replace.html\n+/// [`IntoIterator`]: iter/trait.IntoIterator.html\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array { }\n "}, {"sha": "9d459581dd40cf9d8f038acf18ed623b5cfac50f", "filename": "src/libstd/sys/redox/os.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc57e40ce703cb70a39249f5cfb661020a1549b6/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc57e40ce703cb70a39249f5cfb661020a1549b6/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos.rs?ref=fc57e40ce703cb70a39249f5cfb661020a1549b6", "patch": "@@ -33,9 +33,16 @@ use vec;\n const TMPBUF_SZ: usize = 128;\n static ENV_LOCK: Mutex = Mutex::new();\n \n+extern {\n+    #[link_name = \"__errno_location\"]\n+    fn errno_location() -> *mut i32;\n+}\n+\n /// Returns the platform-specific value of errno\n pub fn errno() -> i32 {\n-    0\n+    unsafe {\n+        (*errno_location())\n+    }\n }\n \n /// Gets a detailed string description for the given error number."}]}