{"sha": "796bc7cae364b39ff7e5139842b51dd9b764060d", "node_id": "C_kwDOAAsO6NoAKDc5NmJjN2NhZTM2NGIzOWZmN2U1MTM5ODQyYjUxZGQ5Yjc2NDA2MGQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-17T23:39:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-17T23:39:57Z"}, "message": "Rollup merge of #98383 - m-ou-se:remove-memory-order-restrictions, r=joshtriplett\n\nRemove restrictions on compare-exchange memory ordering.\n\nWe currently don't allow the failure memory ordering of compare-exchange operations to be stronger than the success ordering, as was the case in C++11 when its memory model was copied to Rust. However, this restriction was lifted in C++17 as part of [p0418r2](https://wg21.link/p0418r2). It's time  we lift the restriction too.\n\n| Success | Failure | Before | After |\n|---------|---------|--------|-------|\n| Relaxed | Relaxed | :heavy_check_mark: | :heavy_check_mark: |\n| Relaxed | Acquire | :x:                | :heavy_check_mark: |\n| Relaxed | SeqCst  | :x:                | :heavy_check_mark: |\n| Acquire | Relaxed | :heavy_check_mark: | :heavy_check_mark: |\n| Acquire | Acquire | :heavy_check_mark: | :heavy_check_mark: |\n| Acquire | SeqCst  | :x:                | :heavy_check_mark: |\n| Release | Relaxed | :heavy_check_mark: | :heavy_check_mark: |\n| Release | Acquire | :x:                | :heavy_check_mark: |\n| Release | SeqCst  | :x:                | :heavy_check_mark: |\n| AcqRel  | Relaxed | :heavy_check_mark: | :heavy_check_mark: |\n| AcqRel  | Acquire | :heavy_check_mark: | :heavy_check_mark: |\n| AcqRel  | SeqCst  | :x:                | :heavy_check_mark: |\n| SeqCst  | Relaxed | :heavy_check_mark: | :heavy_check_mark: |\n| SeqCst  | Acquire | :heavy_check_mark: | :heavy_check_mark: |\n| SeqCst  | SeqCst  | :heavy_check_mark: | :heavy_check_mark: |\n| \\*      | Release | :x:                | :x:                |\n| \\*      | AcqRel  | :x:                | :x:                |\n\nFixes https://github.com/rust-lang/rust/issues/68464", "tree": {"sha": "ce79b2e9250d96491caa4a01bf0b217d60a234a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce79b2e9250d96491caa4a01bf0b217d60a234a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/796bc7cae364b39ff7e5139842b51dd9b764060d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi1J3OCRBK7hj4Ov3rIwAAhEoIAFwEdvlz5vzIx3Culz9/F2+J\nTNIVzMEppLkOri+beIBfmD9xWAoKsHVP95zKXJFve2pzIcT/x/HTMbQAeFwHIhq4\nK6yJDN9I4Z6fbiV/G+gbSOk2O5P69u7JECm7aqiHV6x+jiNXSpf5C6gyAUwJ0HXq\nfW8fIqstFCzbWAHeg8nES4TFOpIekZWN99XE8R+GPLOWfoveWGluv2fczoiBtiCo\n3c2A7ZJy22aXz3nhmEGXZg017rdqChtQChfgIUBcBX0PVI3GMF9IN+UkatJveGYO\n5ELQxnfaEmalbA9IJxCgSMZ5p/hQmjjAdLBbgUbwvHZhqBuH/YXLZiBx8kmQ1kw=\n=xjsC\n-----END PGP SIGNATURE-----\n", "payload": "tree ce79b2e9250d96491caa4a01bf0b217d60a234a4\nparent 263edd43c5255084292329423c61a9d69715ebfa\nparent a898f413795d923d1a025517458fa0fd2d7291ac\nauthor Yuki Okushi <jtitor@2k36.org> 1658101197 +0900\ncommitter GitHub <noreply@github.com> 1658101197 +0900\n\nRollup merge of #98383 - m-ou-se:remove-memory-order-restrictions, r=joshtriplett\n\nRemove restrictions on compare-exchange memory ordering.\n\nWe currently don't allow the failure memory ordering of compare-exchange operations to be stronger than the success ordering, as was the case in C++11 when its memory model was copied to Rust. However, this restriction was lifted in C++17 as part of [p0418r2](https://wg21.link/p0418r2). It's time  we lift the restriction too.\n\n| Success | Failure | Before | After |\n|---------|---------|--------|-------|\n| Relaxed | Relaxed | :heavy_check_mark: | :heavy_check_mark: |\n| Relaxed | Acquire | :x:                | :heavy_check_mark: |\n| Relaxed | SeqCst  | :x:                | :heavy_check_mark: |\n| Acquire | Relaxed | :heavy_check_mark: | :heavy_check_mark: |\n| Acquire | Acquire | :heavy_check_mark: | :heavy_check_mark: |\n| Acquire | SeqCst  | :x:                | :heavy_check_mark: |\n| Release | Relaxed | :heavy_check_mark: | :heavy_check_mark: |\n| Release | Acquire | :x:                | :heavy_check_mark: |\n| Release | SeqCst  | :x:                | :heavy_check_mark: |\n| AcqRel  | Relaxed | :heavy_check_mark: | :heavy_check_mark: |\n| AcqRel  | Acquire | :heavy_check_mark: | :heavy_check_mark: |\n| AcqRel  | SeqCst  | :x:                | :heavy_check_mark: |\n| SeqCst  | Relaxed | :heavy_check_mark: | :heavy_check_mark: |\n| SeqCst  | Acquire | :heavy_check_mark: | :heavy_check_mark: |\n| SeqCst  | SeqCst  | :heavy_check_mark: | :heavy_check_mark: |\n| \\*      | Release | :x:                | :x:                |\n| \\*      | AcqRel  | :x:                | :x:                |\n\nFixes https://github.com/rust-lang/rust/issues/68464\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/796bc7cae364b39ff7e5139842b51dd9b764060d", "html_url": "https://github.com/rust-lang/rust/commit/796bc7cae364b39ff7e5139842b51dd9b764060d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/796bc7cae364b39ff7e5139842b51dd9b764060d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "263edd43c5255084292329423c61a9d69715ebfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/263edd43c5255084292329423c61a9d69715ebfa", "html_url": "https://github.com/rust-lang/rust/commit/263edd43c5255084292329423c61a9d69715ebfa"}, {"sha": "a898f413795d923d1a025517458fa0fd2d7291ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/a898f413795d923d1a025517458fa0fd2d7291ac", "html_url": "https://github.com/rust-lang/rust/commit/a898f413795d923d1a025517458fa0fd2d7291ac"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "b636dc491a4b1569002e7ab021d349168de7ab84", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/796bc7cae364b39ff7e5139842b51dd9b764060d/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796bc7cae364b39ff7e5139842b51dd9b764060d/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=796bc7cae364b39ff7e5139842b51dd9b764060d", "patch": "@@ -581,8 +581,7 @@ impl AtomicBool {\n     /// `failure` describes the required ordering for the load operation that takes place when\n     /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-    /// and must be equivalent to or weaker than the success ordering.\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n@@ -640,8 +639,7 @@ impl AtomicBool {\n     /// `failure` describes the required ordering for the load operation that takes place when\n     /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-    /// and must be equivalent to or weaker than the success ordering.\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n@@ -941,8 +939,7 @@ impl AtomicBool {\n     /// Using [`Acquire`] as success ordering makes the store part of this\n     /// operation [`Relaxed`], and using [`Release`] makes the final successful\n     /// load [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`],\n-    /// [`Acquire`] or [`Relaxed`] and must be equivalent to or weaker than the\n-    /// success ordering.\n+    /// [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n@@ -1301,8 +1298,7 @@ impl<T> AtomicPtr<T> {\n     /// `failure` describes the required ordering for the load operation that takes place when\n     /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-    /// and must be equivalent to or weaker than the success ordering.\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n@@ -1347,8 +1343,7 @@ impl<T> AtomicPtr<T> {\n     /// `failure` describes the required ordering for the load operation that takes place when\n     /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-    /// and must be equivalent to or weaker than the success ordering.\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n@@ -1404,8 +1399,7 @@ impl<T> AtomicPtr<T> {\n     /// Using [`Acquire`] as success ordering makes the store part of this\n     /// operation [`Relaxed`], and using [`Release`] makes the final successful\n     /// load [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`],\n-    /// [`Acquire`] or [`Relaxed`] and must be equivalent to or weaker than the\n-    /// success ordering.\n+    /// [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n@@ -2227,8 +2221,7 @@ macro_rules! atomic_int {\n             /// `failure` describes the required ordering for the load operation that takes place when\n             /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n             /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-            /// and must be equivalent to or weaker than the success ordering.\n+            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n             #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n@@ -2279,8 +2272,7 @@ macro_rules! atomic_int {\n             /// `failure` describes the required ordering for the load operation that takes place when\n             /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n             /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-            /// and must be equivalent to or weaker than the success ordering.\n+            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n             #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n@@ -2517,8 +2509,7 @@ macro_rules! atomic_int {\n             ///\n             /// Using [`Acquire`] as success ordering makes the store part\n             /// of this operation [`Relaxed`], and using [`Release`] makes the final successful load\n-            /// [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-            /// and must be equivalent to or weaker than the success ordering.\n+            /// [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n             #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n@@ -3035,22 +3026,29 @@ unsafe fn atomic_compare_exchange<T: Copy>(\n     let (val, ok) = unsafe {\n         match (success, failure) {\n             (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed_relaxed(dst, old, new),\n-            //(Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),\n-            //(Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),\n             (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),\n             (Acquire, Acquire) => intrinsics::atomic_cxchg_acquire_acquire(dst, old, new),\n-            //(Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),\n             (Release, Relaxed) => intrinsics::atomic_cxchg_release_relaxed(dst, old, new),\n-            //(Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),\n-            //(Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),\n             (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_relaxed(dst, old, new),\n             (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel_acquire(dst, old, new),\n-            //(AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),\n             (SeqCst, Relaxed) => intrinsics::atomic_cxchg_seqcst_relaxed(dst, old, new),\n             (SeqCst, Acquire) => intrinsics::atomic_cxchg_seqcst_acquire(dst, old, new),\n             (SeqCst, SeqCst) => intrinsics::atomic_cxchg_seqcst_seqcst(dst, old, new),\n             (_, AcqRel) => panic!(\"there is no such thing as an acquire-release failure ordering\"),\n             (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n+            #[cfg(bootstrap)]\n             _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n         }\n     };\n@@ -3070,22 +3068,29 @@ unsafe fn atomic_compare_exchange_weak<T: Copy>(\n     let (val, ok) = unsafe {\n         match (success, failure) {\n             (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed_relaxed(dst, old, new),\n-            //(Relaxed, Acquire) => intrinsics::atomic_cxchgweak_relaxed_acquire(dst, old, new),\n-            //(Relaxed, SeqCst) => intrinsics::atomic_cxchgweak_relaxed_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Relaxed, Acquire) => intrinsics::atomic_cxchgweak_relaxed_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Relaxed, SeqCst) => intrinsics::atomic_cxchgweak_relaxed_seqcst(dst, old, new),\n             (Acquire, Relaxed) => intrinsics::atomic_cxchgweak_acquire_relaxed(dst, old, new),\n             (Acquire, Acquire) => intrinsics::atomic_cxchgweak_acquire_acquire(dst, old, new),\n-            //(Acquire, SeqCst) => intrinsics::atomic_cxchgweak_acquire_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Acquire, SeqCst) => intrinsics::atomic_cxchgweak_acquire_seqcst(dst, old, new),\n             (Release, Relaxed) => intrinsics::atomic_cxchgweak_release_relaxed(dst, old, new),\n-            //(Release, Acquire) => intrinsics::atomic_cxchgweak_release_acquire(dst, old, new),\n-            //(Release, SeqCst) => intrinsics::atomic_cxchgweak_release_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Release, Acquire) => intrinsics::atomic_cxchgweak_release_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Release, SeqCst) => intrinsics::atomic_cxchgweak_release_seqcst(dst, old, new),\n             (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_relaxed(dst, old, new),\n             (AcqRel, Acquire) => intrinsics::atomic_cxchgweak_acqrel_acquire(dst, old, new),\n-            //(AcqRel, SeqCst) => intrinsics::atomic_cxchgweak_acqrel_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (AcqRel, SeqCst) => intrinsics::atomic_cxchgweak_acqrel_seqcst(dst, old, new),\n             (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_seqcst_relaxed(dst, old, new),\n             (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_seqcst_acquire(dst, old, new),\n             (SeqCst, SeqCst) => intrinsics::atomic_cxchgweak_seqcst_seqcst(dst, old, new),\n             (_, AcqRel) => panic!(\"there is no such thing as an acquire-release failure ordering\"),\n             (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n+            #[cfg(bootstrap)]\n             _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n         }\n     };"}]}