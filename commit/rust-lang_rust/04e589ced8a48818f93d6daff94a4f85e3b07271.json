{"sha": "04e589ced8a48818f93d6daff94a4f85e3b07271", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZTU4OWNlZDhhNDg4MThmOTNkNmRhZmY5NGE0Zjg1ZTNiMDcyNzE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-30T16:19:31Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-20T11:13:21Z"}, "message": "Consider fewer predicates for projection candidates\n\nWe now require that projection candidates are applicable with the\nidenitity substs of the trait, rather than allowing predicates that are\nonly applicable for certain substs.", "tree": {"sha": "991687e7cba394c4fe7fba7af612f0def2ef2d5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/991687e7cba394c4fe7fba7af612f0def2ef2d5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04e589ced8a48818f93d6daff94a4f85e3b07271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04e589ced8a48818f93d6daff94a4f85e3b07271", "html_url": "https://github.com/rust-lang/rust/commit/04e589ced8a48818f93d6daff94a4f85e3b07271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04e589ced8a48818f93d6daff94a4f85e3b07271/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29272fc514ab8a05b1c228dd5800102f58999dfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/29272fc514ab8a05b1c228dd5800102f58999dfb", "html_url": "https://github.com/rust-lang/rust/commit/29272fc514ab8a05b1c228dd5800102f58999dfb"}], "stats": {"total": 704, "additions": 666, "deletions": 38}, "files": [{"sha": "c88718a2761c007b92a21a93ed9c88f5d7043e67", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -133,6 +133,13 @@ rustc_queries! {\n             cache_on_disk_if { key.is_local() }\n         }\n \n+        /// Returns the list of predicates that can be used for\n+        /// `SelectionCandidate::ProjectionCandidate` and\n+        /// `ProjectionTyCandidate::TraitDef`.\n+        query projection_predicates(key: DefId) -> &'tcx ty::List<ty::Predicate<'tcx>> {\n+            desc { |tcx| \"finding projection predicates for `{}`\", tcx.def_path_str(key) }\n+        }\n+\n         query native_libraries(_: CrateNum) -> Lrc<Vec<NativeLib>> {\n             desc { \"looking up the native libraries of a linked crate\" }\n         }"}, {"sha": "0cbbb95fd6feff598d35e4080a71b9aefbe55f91", "filename": "src/librustc_middle/ty/subst.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsubst.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -333,6 +333,17 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n     /// in a different item, with `target_substs` as the base for\n     /// the target impl/trait, with the source child-specific\n     /// parameters (e.g., method parameters) on top of that base.\n+    ///\n+    /// For example given:\n+    ///\n+    /// trait X<S> { fn f<T>(); }\n+    /// impl<U> X<U> for U { fn f<V>() {} }\n+    ///\n+    /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.\n+    /// * If `source_ancestor` is the def_id of the trait.\n+    /// * If `target_substs` is `[U]`, the substs for the impl.\n+    /// * Then we will return `[U, T]`, the subst for `f` in the impl that\n+    ///   are needed for it to match the trait.\n     pub fn rebase_onto(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "fc689ffd96fe1c93a7c6fe5c7e1eb21d8382b801", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -896,9 +896,12 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n \n     let tcx = selcx.tcx();\n     // Check whether the self-type is itself a projection.\n-    let (def_id, substs) = match obligation_trait_ref.self_ty().kind {\n-        ty::Projection(ref data) => (data.trait_ref(tcx).def_id, data.substs),\n-        ty::Opaque(def_id, substs) => (def_id, substs),\n+    // If so, extract what we know from the trait and try to come up with a good answer.\n+    let bounds = match obligation_trait_ref.self_ty().kind {\n+        ty::Projection(ref data) => {\n+            tcx.projection_predicates(data.item_def_id).subst(tcx, data.substs)\n+        }\n+        ty::Opaque(def_id, substs) => tcx.projection_predicates(def_id).subst(tcx, substs),\n         ty::Infer(ty::TyVar(_)) => {\n             // If the self-type is an inference variable, then it MAY wind up\n             // being a projected type, so induce an ambiguity.\n@@ -908,17 +911,13 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n         _ => return,\n     };\n \n-    // If so, extract what we know from the trait and try to come up with a good answer.\n-    let trait_predicates = tcx.predicates_of(def_id);\n-    let bounds = trait_predicates.instantiate(tcx, substs);\n-    let bounds = elaborate_predicates(tcx, bounds.predicates.into_iter()).map(|o| o.predicate);\n     assemble_candidates_from_predicates(\n         selcx,\n         obligation,\n         obligation_trait_ref,\n         candidate_set,\n         ProjectionTyCandidate::TraitDef,\n-        bounds,\n+        bounds.iter(),\n     )\n }\n \n@@ -1484,6 +1483,12 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n         );\n         return Progress { ty: tcx.ty_error(), obligations: nested };\n     }\n+    // If we're trying to normalize `<Vec<u32> as X>::A<S>` using\n+    //`impl<T> X for Vec<T> { type A<Y> = Box<Y>; }`, then:\n+    //\n+    // * `obligation.predicate.substs` is `[Vec<u32>, S]`\n+    // * `substs` is `[u32]`\n+    // * `substs` ends up as `[u32, S]`\n     let substs = obligation.predicate.substs.rebase_onto(tcx, trait_def_id, substs);\n     let substs =\n         translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.defining_node);"}, {"sha": "630a24752859b3096d63fb9506460dba02a54fc0", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -1273,9 +1273,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             placeholder_trait_predicate,\n         );\n \n-        let (def_id, substs) = match placeholder_trait_predicate.trait_ref.self_ty().kind {\n-            ty::Projection(ref data) => (data.trait_ref(self.tcx()).def_id, data.substs),\n-            ty::Opaque(def_id, substs) => (def_id, substs),\n+        let tcx = self.infcx.tcx;\n+        let predicates = match placeholder_trait_predicate.trait_ref.self_ty().kind {\n+            ty::Projection(ref data) => {\n+                tcx.projection_predicates(data.item_def_id).subst(tcx, data.substs)\n+            }\n+            ty::Opaque(def_id, substs) => tcx.projection_predicates(def_id).subst(tcx, substs),\n             _ => {\n                 span_bug!(\n                     obligation.cause.span,\n@@ -1285,32 +1288,23 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n             }\n         };\n-        debug!(\n-            \"match_projection_obligation_against_definition_bounds: \\\n-             def_id={:?}, substs={:?}\",\n-            def_id, substs\n-        );\n \n-        let predicates_of = self.tcx().predicates_of(def_id);\n-        let bounds = predicates_of.instantiate(self.tcx(), substs);\n-        debug!(\n-            \"match_projection_obligation_against_definition_bounds: \\\n-             bounds={:?}\",\n-            bounds\n-        );\n-\n-        let elaborated_predicates =\n-            util::elaborate_predicates(self.tcx(), bounds.predicates.into_iter());\n-        let matching_bound = elaborated_predicates.filter_to_traits().find(|bound| {\n-            self.infcx.probe(|_| {\n-                self.match_projection(\n-                    obligation,\n-                    *bound,\n-                    placeholder_trait_predicate.trait_ref,\n-                    &placeholder_map,\n-                    snapshot,\n-                )\n-            })\n+        let matching_bound = predicates.iter().find_map(|bound| {\n+            if let ty::PredicateKind::Trait(bound, _) = bound.kind() {\n+                let bound = bound.to_poly_trait_ref();\n+                if self.infcx.probe(|_| {\n+                    self.match_projection(\n+                        obligation,\n+                        bound,\n+                        placeholder_trait_predicate.trait_ref,\n+                        &placeholder_map,\n+                        snapshot,\n+                    )\n+                }) {\n+                    return Some(bound);\n+                }\n+            }\n+            None\n         });\n \n         debug!("}, {"sha": "dd35202616366312196f0d9b9dacf8a62475ab0b", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 104, "deletions": 1, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -1,8 +1,10 @@\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_infer::traits::util;\n use rustc_middle::hir::map as hir_map;\n-use rustc_middle::ty::subst::Subst;\n+use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_session::CrateDisambiguator;\n use rustc_span::symbol::Symbol;\n@@ -365,6 +367,106 @@ fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n     fn_like.asyncness()\n }\n \n+/// For associated types we allow bounds written on the associated type\n+/// (`type X: Trait`) to be used as candidates. We also allow the same bounds\n+/// when desugared as bounds on the trait `where Self::X: Trait`.\n+///\n+/// Note that this filtering is done with the trait's identity substs to\n+/// simplify checking that these bounds are met in impls. This means that\n+/// a bound such as `for<'b> <Self as X<'b>>::U: Clone` can't be used, as in\n+/// `hr-associated-type-bound-1.rs`.\n+fn associated_type_projection_predicates(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+) -> &'_ ty::List<ty::Predicate<'_>> {\n+    let trait_id = tcx.associated_item(def_id).container.id();\n+    let trait_substs = InternalSubsts::identity_for_item(tcx, trait_id);\n+\n+    let generic_trait_bounds = tcx.predicates_of(trait_id);\n+    let trait_bounds = generic_trait_bounds.instantiate_identity(tcx);\n+    let trait_predicates = util::elaborate_predicates(tcx, trait_bounds.predicates.into_iter());\n+\n+    let predicates = trait_predicates.filter_map(|obligation| {\n+        let pred = obligation.predicate;\n+        match pred.kind() {\n+            ty::PredicateKind::Trait(tr, _) => {\n+                if let ty::Projection(p) = tr.skip_binder().self_ty().kind {\n+                    if p.item_def_id == def_id && p.substs.starts_with(trait_substs) {\n+                        return Some(pred);\n+                    }\n+                }\n+            }\n+            ty::PredicateKind::Projection(proj) => {\n+                if let ty::Projection(p) = proj.skip_binder().projection_ty.self_ty().kind {\n+                    if p.item_def_id == def_id && p.substs.starts_with(trait_substs) {\n+                        return Some(pred);\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        None\n+    });\n+\n+    let result = tcx.mk_predicates(predicates);\n+    debug!(\"associated_type_projection_predicates({}) = {:?}\", tcx.def_path_str(def_id), result);\n+    result\n+}\n+\n+/// Opaque types don't have the same issues as associated types: the only\n+/// predicates on an opaque type (excluding those it inherits from its parent\n+/// item) should be of the form we're expecting.\n+fn opaque_type_projection_predicates(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+) -> &'_ ty::List<ty::Predicate<'_>> {\n+    let substs = InternalSubsts::identity_for_item(tcx, def_id);\n+\n+    let generics_bounds = tcx.predicates_of(def_id);\n+    let bounds = generics_bounds.instantiate_identity(tcx);\n+    let predicates = util::elaborate_predicates(tcx, bounds.predicates.into_iter());\n+\n+    let filtered_predicates = predicates.filter_map(|obligation| {\n+        let pred = obligation.predicate;\n+        match pred.kind() {\n+            ty::PredicateKind::Trait(tr, _) => {\n+                if let ty::Opaque(opaque_def_id, opaque_substs) = tr.skip_binder().self_ty().kind {\n+                    if opaque_def_id == def_id && opaque_substs == substs {\n+                        return Some(pred);\n+                    }\n+                }\n+            }\n+            ty::PredicateKind::Projection(proj) => {\n+                if let ty::Opaque(opaque_def_id, opaque_substs) =\n+                    proj.skip_binder().projection_ty.self_ty().kind\n+                {\n+                    if opaque_def_id == def_id && opaque_substs == substs {\n+                        return Some(pred);\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        tcx.sess.delay_span_bug(\n+            obligation.cause.span(tcx),\n+            &format!(\"unexpected predicate {:?} on opaque type\", pred),\n+        );\n+        None\n+    });\n+\n+    let result = tcx.mk_predicates(filtered_predicates);\n+    debug!(\"opaque_type_projection_predicates({}) = {:?}\", tcx.def_path_str(def_id), result);\n+    result\n+}\n+\n+fn projection_predicates(tcx: TyCtxt<'_>, def_id: DefId) -> &'_ ty::List<ty::Predicate<'_>> {\n+    match tcx.def_kind(def_id) {\n+        DefKind::AssocTy => associated_type_projection_predicates(tcx, def_id),\n+        DefKind::OpaqueTy => opaque_type_projection_predicates(tcx, def_id),\n+        k => bug!(\"projection_predicates called on {}\", k.descr(def_id)),\n+    }\n+}\n+\n pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     *providers = ty::query::Providers {\n         asyncness,\n@@ -381,6 +483,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         instance_def_size_estimate,\n         issue33140_self_ty,\n         impl_defaultness,\n+        projection_predicates,\n         ..*providers\n     };\n }"}, {"sha": "1594d65e9bdee2c54effc76cfab16febb2973f17", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -2281,7 +2281,7 @@ fn check_impl_items_against_trait<'tcx>(\n                             &ty_trait_item,\n                             impl_trait_ref,\n                             opt_trait_span,\n-                        )\n+                        );\n                     } else {\n                         let mut err = struct_span_err!(\n                             tcx.sess,"}, {"sha": "497b86eeab88d02e8f49f12a5618c834dd44d635", "filename": "src/test/ui/associated-types/hr-associated-type-bound-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,18 @@\n+trait X<'a>\n+where\n+    for<'b> <Self as X<'b>>::U: Clone,\n+{\n+    type U: ?Sized;\n+    fn f(&self, x: &Self::U) {\n+        <Self::U>::clone(x);\n+    }\n+}\n+\n+impl X<'_> for i32 {\n+    type U = str;\n+    //~^ ERROR the trait bound `for<'b> <i32 as X<'b>>::U: std::clone::Clone`\n+}\n+\n+fn main() {\n+    1i32.f(\"abc\");\n+}"}, {"sha": "7ef2faef9c6e702afcf819a7bd6f903736e7ce32", "filename": "src/test/ui/associated-types/hr-associated-type-bound-1.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `for<'b> <i32 as X<'b>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-1.rs:12:14\n+   |\n+LL | trait X<'a>\n+   |       - required by a bound in this\n+LL | where\n+LL |     for<'b> <Self as X<'b>>::U: Clone,\n+   |                                 ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<i32 as X<'b>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "7ff0fede28cfed9e08f1a2c085f0a5690ee54dcf", "filename": "src/test/ui/associated-types/hr-associated-type-bound-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,21 @@\n+trait X<'a>\n+where\n+    for<'b> <Self as X<'b>>::U: Clone,\n+{\n+    type U: ?Sized;\n+    fn f(&self, x: &Self::U) {\n+        <Self::U>::clone(x);\n+    }\n+}\n+\n+impl X<'_> for u32\n+where\n+    for<'b> <Self as X<'b>>::U: Clone,\n+{\n+    type U = str;\n+}\n+\n+fn main() {\n+    1u32.f(\"abc\");\n+    //~^ ERROR no method named `f` found for type `u32` in the current scope\n+}"}, {"sha": "2a364d349d77e95053af603d4426f7553114ee3d", "filename": "src/test/ui/associated-types/hr-associated-type-bound-2.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,13 @@\n+error[E0599]: no method named `f` found for type `u32` in the current scope\n+  --> $DIR/hr-associated-type-bound-2.rs:19:10\n+   |\n+LL |     1u32.f(\"abc\");\n+   |          ^ method not found in `u32`\n+   |\n+   = note: the method `f` exists but the following trait bounds were not satisfied:\n+           `<u32 as X<'b>>::U: std::clone::Clone`\n+           which is required by `u32: X`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "7c64ae38caf60cbb54cfb212b5e60ec3c9f467fb", "filename": "src/test/ui/associated-types/hr-associated-type-bound-object.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,14 @@\n+trait X<'a>\n+where\n+    for<'b> <Self as X<'b>>::U: Clone,\n+{\n+    type U: ?Sized;\n+}\n+fn f<'a, T: X<'a> + ?Sized>(x: &<T as X<'a>>::U) {\n+    //~^ ERROR the trait bound `for<'b> <T as X<'b>>::U: std::clone::Clone` is not satisfied\n+    <<T as X<'_>>::U>::clone(x);\n+}\n+\n+pub fn main() {\n+    f::<dyn X<'_, U = str>>(\"abc\");\n+}"}, {"sha": "db966875c708f30e32bd2bb121b5f278da5191e7", "filename": "src/test/ui/associated-types/hr-associated-type-bound-object.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `for<'b> <T as X<'b>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-object.rs:7:13\n+   |\n+LL | trait X<'a>\n+   |       - required by a bound in this\n+LL | where\n+LL |     for<'b> <Self as X<'b>>::U: Clone,\n+   |                                 ----- required by this bound in `X`\n+...\n+LL | fn f<'a, T: X<'a> + ?Sized>(x: &<T as X<'a>>::U) {\n+   |             ^^^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<T as X<'b>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a65f8a8c498b789654de9ff07eb548e21d8f37e4", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-1.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,20 @@\n+trait Y<'a, T: ?Sized>\n+where\n+    T: Y<'a, Self>,\n+    for<'b> <Self as Y<'b, T>>::V: Clone,\n+    for<'b> <T as Y<'b, Self>>::V: Clone,\n+{\n+    type V: ?Sized;\n+    fn g(&self, x: &Self::V) {\n+        <Self::V>::clone(x);\n+    }\n+}\n+\n+impl<'a> Y<'a, u8> for u8 {\n+    type V = str;\n+    //~^ ERROR the trait bound `for<'b> <u8 as Y<'b, u8>>::V: std::clone::Clone` is not satisfied\n+}\n+\n+fn main() {\n+    1u8.g(\"abc\");\n+}"}, {"sha": "347a5818dce31599e51a0f508560f4e7352be49d", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-1.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `for<'b> <u8 as Y<'b, u8>>::V: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-1.rs:14:14\n+   |\n+LL | trait Y<'a, T: ?Sized>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <Self as Y<'b, T>>::V: Clone,\n+   |                                    ----- required by this bound in `Y`\n+...\n+LL |     type V = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<u8 as Y<'b, u8>>::V`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9f849b0327669b05e83a3ae8953e877fd8b8362b", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,21 @@\n+trait Z<'a, T: ?Sized>\n+where\n+    T: Z<'a, u16>,\n+    //~^ the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone` is not satisfied\n+    //~| the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone` is not satisfied\n+    for<'b> <T as Z<'b, u16>>::W: Clone,\n+{\n+    type W: ?Sized;\n+    fn h(&self, x: &T::W) {\n+        <T::W>::clone(x);\n+    }\n+}\n+\n+impl<'a> Z<'a, u16> for u16 {\n+    type W = str;\n+    //~^ ERROR the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone\n+}\n+\n+fn main() {\n+    1u16.h(\"abc\");\n+}"}, {"sha": "e06777e36a8c5f061d937f54615e97b54ba7061c", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,51 @@\n+error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n+   |\n+LL | trait Z<'a, T: ?Sized>\n+   |       - required by a bound in this\n+LL | where\n+LL |     T: Z<'a, u16>,\n+   |        ^^^^^^^^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n+...\n+LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n+   |                                   ----- required by this bound in `Z`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-2.rs:15:14\n+   |\n+LL | trait Z<'a, T: ?Sized>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n+   |                                   ----- required by this bound in `Z`\n+...\n+LL |     type W = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n+   |\n+LL | trait Z<'a, T: ?Sized>\n+   |       - required by a bound in this\n+LL | where\n+LL |     T: Z<'a, u16>,\n+   |        ^^^^^^^^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n+...\n+LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n+   |                                   ----- required by this bound in `Z`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9aca59f8ce6d75bc56000eb85a0f07aa41a3bc88", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-3.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,21 @@\n+// ignore-tidy-linelength\n+\n+trait X<'a, T>\n+where\n+    for<'b> T: X<'b, T>,\n+    for<'b> <T as X<'b, T>>::U: Clone,\n+{\n+    type U: ?Sized;\n+    fn f(x: &<T as X<'_, T>>::U) {\n+        <<T as X<'_, T>>::U>::clone(x);\n+    }\n+}\n+\n+impl<S, T> X<'_, (T,)> for (S,) {\n+    type U = str;\n+    //~^ ERROR the trait bound `for<'b> <(T,) as X<'b, (T,)>>::U: std::clone::Clone` is not satisfied\n+}\n+\n+pub fn main() {\n+    <(i32,) as X<(i32,)>>::f(\"abc\");\n+}"}, {"sha": "ff56f60e4c9e57c8caa844a9f55f420bd5317e73", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-3.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `for<'b> <(T,) as X<'b, (T,)>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-3.rs:15:14\n+   |\n+LL | trait X<'a, T>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <T as X<'b, T>>::U: Clone,\n+   |                                 ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<(T,) as X<'b, (T,)>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "ffe43c674c3dcec2a43dcf51de15bdb5b8fdc2ad", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-4.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,19 @@\n+trait X<'a, T>\n+where\n+    for<'b> (T,): X<'b, T>,\n+    for<'b> <(T,) as X<'b, T>>::U: Clone,\n+{\n+    type U: ?Sized;\n+    fn f(x: &<(T,) as X<'_, T>>::U) {\n+        <<(T,) as X<'_, T>>::U>::clone(x);\n+    }\n+}\n+\n+impl<S, T> X<'_, T> for (S,) {\n+    type U = str;\n+    //~^ ERROR the trait bound `for<'b> <(T,) as X<'b, T>>::U: std::clone::Clone` is not satisfied\n+}\n+\n+pub fn main() {\n+    <(i32,) as X<i32>>::f(\"abc\");\n+}"}, {"sha": "c41efb8b6e1a2696d49e6ef2675602c91f83e58f", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-4.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `for<'b> <(T,) as X<'b, T>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-4.rs:13:14\n+   |\n+LL | trait X<'a, T>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <(T,) as X<'b, T>>::U: Clone,\n+   |                                    ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<(T,) as X<'b, T>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "dcca0b3ce92aa01d6fba7503d174db14bc850e2d", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,41 @@\n+// ignore-tidy-linelength\n+\n+trait Cycle: Sized {\n+    type Next: Cycle<Next = Self>;\n+}\n+\n+impl<T> Cycle for Box<T> {\n+    type Next = Vec<T>;\n+}\n+\n+impl<T> Cycle for Vec<T> {\n+    type Next = Box<T>;\n+}\n+\n+trait X<'a, T: Cycle + for<'b> X<'b, T>>\n+where\n+    for<'b> <T as X<'b, T>>::U: Clone,\n+    for<'b> T::Next: X<'b, T::Next>,\n+    for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n+{\n+    type U: ?Sized;\n+    fn f(x: &<T as X<'_, T>>::U) {\n+        <<T as X<'_, T>>::U>::clone(x);\n+    }\n+}\n+\n+impl<S, T> X<'_, Vec<T>> for S {\n+    type U = str;\n+    //~^ ERROR the trait bound `for<'b> <std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U: std::clone::Clone` is not satisfied\n+    //~| ERROR the trait bound `for<'b> <std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U: std::clone::Clone` is not satisfied\n+}\n+\n+impl<S, T> X<'_, Box<T>> for S {\n+    type U = str;\n+    //~^ ERROR the trait bound `for<'b> <std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U: std::clone::Clone` is not satisfied\n+    //~| ERROR the trait bound `for<'b> <std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U: std::clone::Clone` is not satisfied\n+}\n+\n+pub fn main() {\n+    <i32 as X<Box<i32>>>::f(\"abc\");\n+}"}, {"sha": "39c191e9747771739aa1ec6d5e3791448c83795e", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,67 @@\n+error[E0277]: the trait bound `for<'b> <std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-5.rs:28:14\n+   |\n+LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n+   |                                             ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error[E0277]: the trait bound `for<'b> <std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-5.rs:28:14\n+   |\n+LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n+   |       - required by a bound in this\n+LL | where\n+LL |     for<'b> <T as X<'b, T>>::U: Clone,\n+   |                                 ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error[E0277]: the trait bound `for<'b> <std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-5.rs:34:14\n+   |\n+LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n+   |                                             ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<std::vec::Vec<T> as X<'b, std::vec::Vec<T>>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error[E0277]: the trait bound `for<'b> <std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-5.rs:34:14\n+   |\n+LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n+   |       - required by a bound in this\n+LL | where\n+LL |     for<'b> <T as X<'b, T>>::U: Clone,\n+   |                                 ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<std::boxed::Box<T> as X<'b, std::boxed::Box<T>>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4b8018cb43024e7a73078bf6233b9d9631a5b186", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-6.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,20 @@\n+trait X<'a, T>\n+where\n+    for<'b> T: X<'b, T>,\n+    for<'b> <T as X<'b, T>>::U: Clone,\n+{\n+    type U: ?Sized;\n+    fn f(x: &<T as X<'_, T>>::U) {\n+        <<T as X<'_, T>>::U>::clone(x);\n+    }\n+}\n+\n+impl<S, T> X<'_, T> for (S,) {\n+    //~^ ERROR the trait bound `for<'b> T: X<'b, T>` is not satisfied\n+    type U = str;\n+    //~^ ERROR the trait bound `for<'b> <T as X<'b, T>>::U: std::clone::Clone` is not satisfied\n+}\n+\n+pub fn main() {\n+    <(i32,) as X<i32>>::f(\"abc\");\n+}"}, {"sha": "83845d3a9410e5d4544bdb3eb2a1652027b8ea2c", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-6.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,36 @@\n+error[E0277]: the trait bound `for<'b> <T as X<'b, T>>::U: std::clone::Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-6.rs:14:14\n+   |\n+LL | trait X<'a, T>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <T as X<'b, T>>::U: Clone,\n+   |                                 ----- required by this bound in `X`\n+...\n+LL |     type U = str;\n+   |              ^^^ the trait `for<'b> std::clone::Clone` is not implemented for `<T as X<'b, T>>::U`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::clone::Clone>\n+             <&mut T as std::clone::Clone>\n+\n+error[E0277]: the trait bound `for<'b> T: X<'b, T>` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-6.rs:12:12\n+   |\n+LL | trait X<'a, T>\n+   |       - required by a bound in this\n+LL | where\n+LL |     for<'b> T: X<'b, T>,\n+   |                -------- required by this bound in `X`\n+...\n+LL | impl<S, T> X<'_, T> for (S,) {\n+   |            ^^^^^^^^ the trait `for<'b> X<'b, T>` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<S, T: for<'b> X<'b, T>> X<'_, T> for (S,) {\n+   |          ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "0d4567a55fc99c6ddaa4c37b74c094951e632747", "filename": "src/test/ui/associated-types/hr-associated-type-projection-1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.rs?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,21 @@\n+trait UnsafeCopy<'a, T: Copy>\n+where\n+    for<'b> <Self as UnsafeCopy<'b, T>>::Item: std::ops::Deref<Target = T>,\n+{\n+    type Item;\n+\n+    fn bug(item: &Self::Item) -> () {\n+        let x: T = **item;\n+        &x as *const _;\n+    }\n+}\n+\n+impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n+    //~^ ERROR the trait bound `<T as UnsafeCopy<'b, T>>::Item: std::ops::Deref` is not satisfied\n+    type Item = T;\n+    //~^ ERROR the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: std::ops::Deref\n+}\n+\n+pub fn main() {\n+    <&'static str>::bug(&\"\");\n+}"}, {"sha": "5ab57410c441bae9a56810e829d5c4f468343656", "filename": "src/test/ui/associated-types/hr-associated-type-projection-1.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04e589ced8a48818f93d6daff94a4f85e3b07271/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr?ref=04e589ced8a48818f93d6daff94a4f85e3b07271", "patch": "@@ -0,0 +1,30 @@\n+error[E0277]: the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: std::ops::Deref` is not satisfied\n+  --> $DIR/hr-associated-type-projection-1.rs:15:17\n+   |\n+LL | trait UnsafeCopy<'a, T: Copy>\n+   |       ---------- required by a bound in this\n+LL | where\n+LL |     for<'b> <Self as UnsafeCopy<'b, T>>::Item: std::ops::Deref<Target = T>,\n+   |                                                --------------------------- required by this bound in `UnsafeCopy`\n+...\n+LL |     type Item = T;\n+   |                 ^ the trait `for<'b> std::ops::Deref` is not implemented for `<T as UnsafeCopy<'b, T>>::Item`\n+   |\n+   = help: the following implementations were found:\n+             <&T as std::ops::Deref>\n+             <&mut T as std::ops::Deref>\n+\n+error[E0277]: the trait bound `<T as UnsafeCopy<'b, T>>::Item: std::ops::Deref` is not satisfied\n+  --> $DIR/hr-associated-type-projection-1.rs:13:33\n+   |\n+LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n+   |                                 ^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `<T as UnsafeCopy<'b, T>>::Item`\n+   |\n+help: consider further restricting the associated type\n+   |\n+LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T where <T as UnsafeCopy<'b, T>>::Item: std::ops::Deref {\n+   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}