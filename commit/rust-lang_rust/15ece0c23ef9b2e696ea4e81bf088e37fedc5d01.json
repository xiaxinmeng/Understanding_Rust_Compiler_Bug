{"sha": "15ece0c23ef9b2e696ea4e81bf088e37fedc5d01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZWNlMGMyM2VmOWIyZTY5NmVhNGU4MWJmMDg4ZTM3ZmVkYzVkMDE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-19T01:38:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-19T19:05:18Z"}, "message": "core: Wire up `spawn` to the new scheduler\n\nIt will check which scheduler it is running under and create the\ncorrect type of task as appropriate. Most options aren't supported\nbut basic spawning works.", "tree": {"sha": "e0a86454bba7b00ad58c75fb81e43b39461f6d08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0a86454bba7b00ad58c75fb81e43b39461f6d08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15ece0c23ef9b2e696ea4e81bf088e37fedc5d01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15ece0c23ef9b2e696ea4e81bf088e37fedc5d01", "html_url": "https://github.com/rust-lang/rust/commit/15ece0c23ef9b2e696ea4e81bf088e37fedc5d01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15ece0c23ef9b2e696ea4e81bf088e37fedc5d01/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6773b63671081c722761d3980393642452c08157", "url": "https://api.github.com/repos/rust-lang/rust/commits/6773b63671081c722761d3980393642452c08157", "html_url": "https://github.com/rust-lang/rust/commit/6773b63671081c722761d3980393642452c08157"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "2b9f147bf627d2242585fea69e9dcd038a4504d0", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/15ece0c23ef9b2e696ea4e81bf088e37fedc5d01/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ece0c23ef9b2e696ea4e81bf088e37fedc5d01/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=15ece0c23ef9b2e696ea4e81bf088e37fedc5d01", "patch": "@@ -160,3 +160,24 @@ fn test_context() {\n         sched.run();\n     }\n }\n+\n+// For setting up tests of the new scheduler\n+#[cfg(test)]\n+pub fn run_in_newsched_task(f: ~fn()) {\n+    use cell::Cell;\n+    use unstable::run_in_bare_thread;\n+    use self::sched::{Scheduler, Task};\n+    use self::uvio::UvEventLoop;\n+\n+    let f = Cell(Cell(f));\n+\n+    do run_in_bare_thread {\n+        let mut sched = ~UvEventLoop::new_scheduler();\n+        let f = f.take();\n+        let task = ~do Task::new(&mut sched.stack_pool) {\n+            (f.take())();\n+        };\n+        sched.task_queue.push_back(task);\n+        sched.run();\n+    }\n+}"}, {"sha": "a6c03638713ed580f7fe9a342597de5e14253552", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15ece0c23ef9b2e696ea4e81bf088e37fedc5d01/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ece0c23ef9b2e696ea4e81bf088e37fedc5d01/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=15ece0c23ef9b2e696ea4e81bf088e37fedc5d01", "patch": "@@ -1226,3 +1226,12 @@ fn test_spawn_thread_on_demand() {\n \n     port.recv();\n }\n+\n+#[test]\n+fn test_simple_newsched_spawn() {\n+    use rt::run_in_newsched_task;\n+\n+    do run_in_newsched_task {\n+        spawn(||())\n+    }\n+}"}, {"sha": "47e386029955b9046a09464384ce1023dbbca6fc", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/15ece0c23ef9b2e696ea4e81bf088e37fedc5d01/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ece0c23ef9b2e696ea4e81bf088e37fedc5d01/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=15ece0c23ef9b2e696ea4e81bf088e37fedc5d01", "patch": "@@ -531,6 +531,35 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n }\n \n pub fn spawn_raw(opts: TaskOpts, f: ~fn()) {\n+    use rt::*;\n+\n+    match context() {\n+        OldTaskContext => {\n+            spawn_raw_oldsched(opts, f)\n+        }\n+        TaskContext => {\n+            spawn_raw_newsched(opts, f)\n+        }\n+        SchedulerContext => {\n+            fail!(~\"can't spawn from scheduler context\")\n+        }\n+        GlobalContext => {\n+            fail!(~\"can't spawn from global context\")\n+        }\n+    }\n+}\n+\n+fn spawn_raw_newsched(opts: TaskOpts, f: ~fn()) {\n+    use rt::sched::*;\n+\n+    // XXX: How to schedule a new task is a policy decision that shouldn't be made here\n+    let mut sched = Scheduler::take_local();\n+    let task = ~Task::new(&mut sched.stack_pool, f);\n+    sched.resume_task_from_running_task_direct(task);\n+}\n+\n+fn spawn_raw_oldsched(opts: TaskOpts, f: ~fn()) {\n+\n     let (child_tg, ancestors, is_main) =\n         gen_child_taskgroup(opts.linked, opts.supervised);\n "}]}