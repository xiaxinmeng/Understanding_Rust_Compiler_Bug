{"sha": "0a2a68edae042274fc89fdc2126bbd0b5a368131", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMmE2OGVkYWUwNDIyNzRmYzg5ZmRjMjEyNmJiZDBiNWEzNjgxMzE=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-10T20:33:22Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-10T20:33:22Z"}, "message": "Use range instead of tuple of ints", "tree": {"sha": "3654a2fe03568eb01c3447c6bcce830d7d868e96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3654a2fe03568eb01c3447c6bcce830d7d868e96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a2a68edae042274fc89fdc2126bbd0b5a368131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2a68edae042274fc89fdc2126bbd0b5a368131", "html_url": "https://github.com/rust-lang/rust/commit/0a2a68edae042274fc89fdc2126bbd0b5a368131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a2a68edae042274fc89fdc2126bbd0b5a368131/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a8ca69602fac58362df66a3fc9028211c6d6f2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a8ca69602fac58362df66a3fc9028211c6d6f2a", "html_url": "https://github.com/rust-lang/rust/commit/9a8ca69602fac58362df66a3fc9028211c6d6f2a"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "417176564b92d877df7eb21ca052fcc164401fda", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a2a68edae042274fc89fdc2126bbd0b5a368131/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2a68edae042274fc89fdc2126bbd0b5a368131/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=0a2a68edae042274fc89fdc2126bbd0b5a368131", "patch": "@@ -197,6 +197,7 @@ use rustc_session::config::EntryFnType;\n use rustc_span::source_map::{dummy_spanned, respan, Span, Spanned, DUMMY_SP};\n use smallvec::SmallVec;\n use std::iter;\n+use std::ops::Range;\n use std::path::PathBuf;\n \n #[derive(PartialEq)]\n@@ -210,9 +211,8 @@ pub enum MonoItemCollectionMode {\n pub struct InliningMap<'tcx> {\n     // Maps a source mono item to the range of mono items\n     // accessed by it.\n-    // The two numbers in the tuple are the start (inclusive) and\n-    // end index (exclusive) within the `targets` vecs.\n-    index: FxHashMap<MonoItem<'tcx>, (usize, usize)>,\n+    // The range selects elements within the `targets` vecs.\n+    index: FxHashMap<MonoItem<'tcx>, Range<usize>>,\n     targets: Vec<MonoItem<'tcx>>,\n \n     // Contains one bit per mono item in the `targets` field. That bit\n@@ -245,7 +245,7 @@ impl<'tcx> InliningMap<'tcx> {\n         }\n \n         let end_index = self.targets.len();\n-        assert!(self.index.insert(source, (start_index, end_index)).is_none());\n+        assert!(self.index.insert(source, start_index..end_index).is_none());\n     }\n \n     // Internally iterate over all items referenced by `source` which will be\n@@ -254,9 +254,9 @@ impl<'tcx> InliningMap<'tcx> {\n     where\n         F: FnMut(MonoItem<'tcx>),\n     {\n-        if let Some(&(start_index, end_index)) = self.index.get(&source) {\n-            for (i, candidate) in self.targets[start_index..end_index].iter().enumerate() {\n-                if self.inlines.contains(start_index + i) {\n+        if let Some(range) = self.index.get(&source) {\n+            for (i, candidate) in self.targets[range.clone()].iter().enumerate() {\n+                if self.inlines.contains(range.start + i) {\n                     f(*candidate);\n                 }\n             }\n@@ -268,8 +268,8 @@ impl<'tcx> InliningMap<'tcx> {\n     where\n         F: FnMut(MonoItem<'tcx>, &[MonoItem<'tcx>]),\n     {\n-        for (&accessor, &(start_index, end_index)) in &self.index {\n-            f(accessor, &self.targets[start_index..end_index])\n+        for (&accessor, range) in &self.index {\n+            f(accessor, &self.targets[range.clone()])\n         }\n     }\n }"}]}