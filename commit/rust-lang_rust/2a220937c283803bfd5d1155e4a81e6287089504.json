{"sha": "2a220937c283803bfd5d1155e4a81e6287089504", "node_id": "C_kwDOAAsO6NoAKDJhMjIwOTM3YzI4MzgwM2JmZDVkMTE1NWU0YTgxZTYyODcwODk1MDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-27T12:32:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-27T12:32:54Z"}, "message": "Auto merge of #99802 - JohnTitor:rollup-uaklql1, r=JohnTitor\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #99079 (Check that RPITs constrained by a recursive call in a closure are compatible)\n - #99704 (Add `Self: ~const Trait` to traits with `#[const_trait]`)\n - #99769 (Sync rustc_codegen_cranelift)\n - #99783 (rustdoc: remove Clean trait impls for more items)\n - #99789 (Refactor: use `pluralize!`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "30cd9170075060f03ef4d727c18ddfb97cb3b422", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30cd9170075060f03ef4d727c18ddfb97cb3b422"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a220937c283803bfd5d1155e4a81e6287089504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a220937c283803bfd5d1155e4a81e6287089504", "html_url": "https://github.com/rust-lang/rust/commit/2a220937c283803bfd5d1155e4a81e6287089504", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a220937c283803bfd5d1155e4a81e6287089504/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50166d5e5e82ca795306824decbe4ffabcc23d3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/50166d5e5e82ca795306824decbe4ffabcc23d3d", "html_url": "https://github.com/rust-lang/rust/commit/50166d5e5e82ca795306824decbe4ffabcc23d3d"}, {"sha": "e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92", "html_url": "https://github.com/rust-lang/rust/commit/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92"}], "stats": {"total": 1927, "additions": 1115, "deletions": 812}, "files": [{"sha": "cf2140097e6da02b45253fef2e86ec5777de83d4", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -21,7 +21,6 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_infer::infer::{\n     InferCtxt, InferOk, LateBoundRegion, LateBoundRegionConversionTime, NllRegionVariableOrigin,\n };\n-use rustc_infer::traits::ObligationCause;\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::AssertKind;\n@@ -225,26 +224,6 @@ pub(crate) fn type_check<'mir, 'tcx>(\n                     )\n                     .unwrap();\n                     let mut hidden_type = infcx.resolve_vars_if_possible(decl.hidden_type);\n-                    // Check that RPITs are only constrained in their outermost\n-                    // function, otherwise report a mismatched types error.\n-                    if let OpaqueTyOrigin::FnReturn(parent) | OpaqueTyOrigin::AsyncFn(parent)\n-                            = infcx.opaque_ty_origin_unchecked(opaque_type_key.def_id, hidden_type.span)\n-                        && parent.to_def_id() != body.source.def_id()\n-                    {\n-                        infcx\n-                            .report_mismatched_types(\n-                                &ObligationCause::misc(\n-                                    hidden_type.span,\n-                                    infcx.tcx.hir().local_def_id_to_hir_id(\n-                                        body.source.def_id().expect_local(),\n-                                    ),\n-                                ),\n-                                infcx.tcx.mk_opaque(opaque_type_key.def_id.to_def_id(), opaque_type_key.substs),\n-                                hidden_type.ty,\n-                                ty::error::TypeError::Mismatch,\n-                            )\n-                            .emit();\n-                    }\n                     trace!(\n                         \"finalized opaque type {:?} to {:#?}\",\n                         opaque_type_key,"}, {"sha": "869670c8cfac7ec41e50df30dce1954f49ce915f", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm.rs", "status": "modified", "additions": 81, "deletions": 64, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -13,23 +13,20 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n     ret: CPlace<'tcx>,\n     target: Option<BasicBlock>,\n ) {\n-    intrinsic_match! {\n-        fx, intrinsic, args,\n-        _ => {\n-            fx.tcx.sess.warn(&format!(\"unsupported llvm intrinsic {}; replacing with trap\", intrinsic));\n-            crate::trap::trap_unimplemented(fx, intrinsic);\n-        };\n-\n+    match intrinsic {\n         // Used by `_mm_movemask_epi8` and `_mm256_movemask_epi8`\n-        \"llvm.x86.sse2.pmovmskb.128\" | \"llvm.x86.avx2.pmovmskb\" | \"llvm.x86.sse2.movmsk.pd\", (c a) {\n+        \"llvm.x86.sse2.pmovmskb.128\" | \"llvm.x86.avx2.pmovmskb\" | \"llvm.x86.sse2.movmsk.pd\" => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n+\n             let (lane_count, lane_ty) = a.layout().ty.simd_size_and_type(fx.tcx);\n             let lane_ty = fx.clif_type(lane_ty).unwrap();\n             assert!(lane_count <= 32);\n \n             let mut res = fx.bcx.ins().iconst(types::I32, 0);\n \n             for lane in (0..lane_count).rev() {\n-                let a_lane = a.value_field(fx, mir::Field::new(lane.try_into().unwrap())).load_scalar(fx);\n+                let a_lane =\n+                    a.value_field(fx, mir::Field::new(lane.try_into().unwrap())).load_scalar(fx);\n \n                 // cast float to int\n                 let a_lane = match lane_ty {\n@@ -49,26 +46,29 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n \n             let res = CValue::by_val(res, fx.layout_of(fx.tcx.types.i32));\n             ret.write_cvalue(fx, res);\n-        };\n-        \"llvm.x86.sse2.cmp.ps\" | \"llvm.x86.sse2.cmp.pd\", (c x, c y, o kind) {\n-            let kind = crate::constant::mir_operand_get_const_val(fx, kind).expect(\"llvm.x86.sse2.cmp.* kind not const\");\n-            let flt_cc = match kind.try_to_bits(Size::from_bytes(1)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", kind)) {\n+        }\n+        \"llvm.x86.sse2.cmp.ps\" | \"llvm.x86.sse2.cmp.pd\" => {\n+            let (x, y, kind) = match args {\n+                [x, y, kind] => (x, y, kind),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let x = codegen_operand(fx, x);\n+            let y = codegen_operand(fx, y);\n+            let kind = crate::constant::mir_operand_get_const_val(fx, kind)\n+                .expect(\"llvm.x86.sse2.cmp.* kind not const\");\n+\n+            let flt_cc = match kind\n+                .try_to_bits(Size::from_bytes(1))\n+                .unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", kind))\n+            {\n                 0 => FloatCC::Equal,\n                 1 => FloatCC::LessThan,\n                 2 => FloatCC::LessThanOrEqual,\n-                7 => {\n-                    unimplemented!(\"Compares corresponding elements in `a` and `b` to see if neither is `NaN`.\");\n-                }\n-                3 => {\n-                    unimplemented!(\"Compares corresponding elements in `a` and `b` to see if either is `NaN`.\");\n-                }\n+                7 => FloatCC::Ordered,\n+                3 => FloatCC::Unordered,\n                 4 => FloatCC::NotEqual,\n-                5 => {\n-                    unimplemented!(\"not less than\");\n-                }\n-                6 => {\n-                    unimplemented!(\"not less than or equal\");\n-                }\n+                5 => FloatCC::UnorderedOrGreaterThanOrEqual,\n+                6 => FloatCC::UnorderedOrGreaterThan,\n                 kind => unreachable!(\"kind {:?}\", kind),\n             };\n \n@@ -79,50 +79,67 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n                 };\n                 bool_to_zero_or_max_uint(fx, res_lane_ty, res_lane)\n             });\n-        };\n-        \"llvm.x86.sse2.psrli.d\", (c a, o imm8) {\n-            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n-                match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n-                    imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n-                    _ => fx.bcx.ins().iconst(types::I32, 0),\n-                }\n+        }\n+        \"llvm.x86.sse2.psrli.d\" => {\n+            let (a, imm8) = match args {\n+                [a, imm8] => (a, imm8),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n+                .expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n+            {\n+                imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n             });\n-        };\n-        \"llvm.x86.sse2.pslli.d\", (c a, o imm8) {\n-            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n-                match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n-                    imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n-                    _ => fx.bcx.ins().iconst(types::I32, 0),\n-                }\n+        }\n+        \"llvm.x86.sse2.pslli.d\" => {\n+            let (a, imm8) = match args {\n+                [a, imm8] => (a, imm8),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n+                .expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n+            {\n+                imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n             });\n-        };\n-        \"llvm.x86.sse2.storeu.dq\", (v mem_addr, c a) {\n+        }\n+        \"llvm.x86.sse2.storeu.dq\" => {\n+            intrinsic_args!(fx, args => (mem_addr, a); intrinsic);\n+            let mem_addr = mem_addr.load_scalar(fx);\n+\n             // FIXME correctly handle the unalignment\n             let dest = CPlace::for_ptr(Pointer::new(mem_addr), a.layout());\n             dest.write_cvalue(fx, a);\n-        };\n-        \"llvm.x86.addcarry.64\", (v c_in, c a, c b) {\n-            llvm_add_sub(\n-                fx,\n-                BinOp::Add,\n-                ret,\n-                c_in,\n-                a,\n-                b\n-            );\n-        };\n-        \"llvm.x86.subborrow.64\", (v b_in, c a, c b) {\n-            llvm_add_sub(\n-                fx,\n-                BinOp::Sub,\n-                ret,\n-                b_in,\n-                a,\n-                b\n-            );\n-        };\n+        }\n+        \"llvm.x86.addcarry.64\" => {\n+            intrinsic_args!(fx, args => (c_in, a, b); intrinsic);\n+            let c_in = c_in.load_scalar(fx);\n+\n+            llvm_add_sub(fx, BinOp::Add, ret, c_in, a, b);\n+        }\n+        \"llvm.x86.subborrow.64\" => {\n+            intrinsic_args!(fx, args => (b_in, a, b); intrinsic);\n+            let b_in = b_in.load_scalar(fx);\n+\n+            llvm_add_sub(fx, BinOp::Sub, ret, b_in, a, b);\n+        }\n+        _ => {\n+            fx.tcx\n+                .sess\n+                .warn(&format!(\"unsupported llvm intrinsic {}; replacing with trap\", intrinsic));\n+            crate::trap::trap_unimplemented(fx, intrinsic);\n+        }\n     }\n \n     let dest = target.expect(\"all llvm intrinsics used by stdlib should return\");"}, {"sha": "b2a83e1d4ebc96c57da441aff4e044123a5faeed", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 372, "deletions": 250, "changes": 622, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,50 +1,14 @@\n //! Codegen of intrinsics. This includes `extern \"rust-intrinsic\"`, `extern \"platform-intrinsic\"`\n //! and LLVM intrinsics that have symbol names starting with `llvm.`.\n \n-macro_rules! intrinsic_pat {\n-    (_) => {\n-        _\n-    };\n-    ($name:ident) => {\n-        sym::$name\n-    };\n-    (kw.$name:ident) => {\n-        kw::$name\n-    };\n-    ($name:literal) => {\n-        $name\n-    };\n-}\n-\n-macro_rules! intrinsic_arg {\n-    (o $fx:expr, $arg:ident) => {};\n-    (c $fx:expr, $arg:ident) => {\n-        let $arg = codegen_operand($fx, $arg);\n-    };\n-    (v $fx:expr, $arg:ident) => {\n-        let $arg = codegen_operand($fx, $arg).load_scalar($fx);\n-    };\n-}\n-\n-macro_rules! intrinsic_match {\n-    ($fx:expr, $intrinsic:expr, $args:expr,\n-    _ => $unknown:block;\n-    $(\n-        $($($name:tt).*)|+ $(if $cond:expr)?, ($($a:ident $arg:ident),*) $content:block;\n-    )*) => {\n-        match $intrinsic {\n-            $(\n-                $(intrinsic_pat!($($name).*))|* $(if $cond)? => {\n-                    if let [$($arg),*] = $args {\n-                        $(intrinsic_arg!($a $fx, $arg);)*\n-                        $content\n-                    } else {\n-                        bug!(\"wrong number of args for intrinsic {:?}\", $intrinsic);\n-                    }\n-                }\n-            )*\n-            _ => $unknown,\n-        }\n+macro_rules! intrinsic_args {\n+    ($fx:expr, $args:expr => ($($arg:tt),*); $intrinsic:expr) => {\n+        #[allow(unused_parens)]\n+        let ($($arg),*) = if let [$($arg),*] = $args {\n+            ($(codegen_operand($fx, $arg)),*)\n+        } else {\n+            $crate::intrinsics::bug_on_incorrect_arg_count($intrinsic);\n+        };\n     }\n }\n \n@@ -62,6 +26,10 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use crate::prelude::*;\n use cranelift_codegen::ir::AtomicRmwOp;\n \n+fn bug_on_incorrect_arg_count(intrinsic: impl std::fmt::Display) -> ! {\n+    bug!(\"wrong number of args for intrinsic {}\", intrinsic);\n+}\n+\n fn report_atomic_type_validation_error<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     intrinsic: Symbol,\n@@ -351,28 +319,31 @@ fn codegen_regular_intrinsic_call<'tcx>(\n ) {\n     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n \n-    intrinsic_match! {\n-        fx, intrinsic, args,\n-        _ => {\n-            fx.tcx.sess.span_fatal(source_info.span, &format!(\"unsupported intrinsic {}\", intrinsic));\n-        };\n+    match intrinsic {\n+        sym::assume => {\n+            intrinsic_args!(fx, args => (_a); intrinsic);\n+        }\n+        sym::likely | sym::unlikely => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        assume, (c _a) {};\n-        likely | unlikely, (c a) {\n             ret.write_cvalue(fx, a);\n-        };\n-        breakpoint, () {\n+        }\n+        sym::breakpoint => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n+\n             fx.bcx.ins().debugtrap();\n-        };\n-        copy | copy_nonoverlapping, (v src, v dst, v count) {\n+        }\n+        sym::copy | sym::copy_nonoverlapping => {\n+            intrinsic_args!(fx, args => (src, dst, count); intrinsic);\n+            let src = src.load_scalar(fx);\n+            let dst = dst.load_scalar(fx);\n+            let count = count.load_scalar(fx);\n+\n             let elem_ty = substs.type_at(0);\n             let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n             assert_eq!(args.len(), 3);\n-            let byte_amount = if elem_size != 1 {\n-                fx.bcx.ins().imul_imm(count, elem_size as i64)\n-            } else {\n-                count\n-            };\n+            let byte_amount =\n+                if elem_size != 1 { fx.bcx.ins().imul_imm(count, elem_size as i64) } else { count };\n \n             if intrinsic == sym::copy_nonoverlapping {\n                 // FIXME emit_small_memcpy\n@@ -381,17 +352,19 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 // FIXME emit_small_memmove\n                 fx.bcx.call_memmove(fx.target_config, dst, src, byte_amount);\n             }\n-        };\n-        // NOTE: the volatile variants have src and dst swapped\n-        volatile_copy_memory | volatile_copy_nonoverlapping_memory, (v dst, v src, v count) {\n+        }\n+        sym::volatile_copy_memory | sym::volatile_copy_nonoverlapping_memory => {\n+            // NOTE: the volatile variants have src and dst swapped\n+            intrinsic_args!(fx, args => (dst, src, count); intrinsic);\n+            let dst = dst.load_scalar(fx);\n+            let src = src.load_scalar(fx);\n+            let count = count.load_scalar(fx);\n+\n             let elem_ty = substs.type_at(0);\n             let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n             assert_eq!(args.len(), 3);\n-            let byte_amount = if elem_size != 1 {\n-                fx.bcx.ins().imul_imm(count, elem_size as i64)\n-            } else {\n-                count\n-            };\n+            let byte_amount =\n+                if elem_size != 1 { fx.bcx.ins().imul_imm(count, elem_size as i64) } else { count };\n \n             // FIXME make the copy actually volatile when using emit_small_mem{cpy,move}\n             if intrinsic == sym::volatile_copy_nonoverlapping_memory {\n@@ -401,8 +374,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 // FIXME emit_small_memmove\n                 fx.bcx.call_memmove(fx.target_config, dst, src, byte_amount);\n             }\n-        };\n-        size_of_val, (c ptr) {\n+        }\n+        sym::size_of_val => {\n+            intrinsic_args!(fx, args => (ptr); intrinsic);\n+\n             let layout = fx.layout_of(substs.type_at(0));\n             // Note: Can't use is_unsized here as truly unsized types need to take the fixed size\n             // branch\n@@ -411,14 +386,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 let (size, _align) = crate::unsize::size_and_align_of_dst(fx, layout, info);\n                 size\n             } else {\n-                fx\n-                    .bcx\n-                    .ins()\n-                    .iconst(fx.pointer_type, layout.size.bytes() as i64)\n+                fx.bcx.ins().iconst(fx.pointer_type, layout.size.bytes() as i64)\n             };\n             ret.write_cvalue(fx, CValue::by_val(size, usize_layout));\n-        };\n-        min_align_of_val, (c ptr) {\n+        }\n+        sym::min_align_of_val => {\n+            intrinsic_args!(fx, args => (ptr); intrinsic);\n+\n             let layout = fx.layout_of(substs.type_at(0));\n             // Note: Can't use is_unsized here as truly unsized types need to take the fixed size\n             // branch\n@@ -427,26 +401,37 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 let (_size, align) = crate::unsize::size_and_align_of_dst(fx, layout, info);\n                 align\n             } else {\n-                fx\n-                    .bcx\n-                    .ins()\n-                    .iconst(fx.pointer_type, layout.align.abi.bytes() as i64)\n+                fx.bcx.ins().iconst(fx.pointer_type, layout.align.abi.bytes() as i64)\n             };\n             ret.write_cvalue(fx, CValue::by_val(align, usize_layout));\n-        };\n+        }\n+\n+        sym::vtable_size => {\n+            intrinsic_args!(fx, args => (vtable); intrinsic);\n+            let vtable = vtable.load_scalar(fx);\n \n-        vtable_size, (v vtable) {\n             let size = crate::vtable::size_of_obj(fx, vtable);\n             ret.write_cvalue(fx, CValue::by_val(size, usize_layout));\n-        };\n+        }\n+\n+        sym::vtable_align => {\n+            intrinsic_args!(fx, args => (vtable); intrinsic);\n+            let vtable = vtable.load_scalar(fx);\n \n-        vtable_align, (v vtable) {\n             let align = crate::vtable::min_align_of_obj(fx, vtable);\n             ret.write_cvalue(fx, CValue::by_val(align, usize_layout));\n-        };\n+        }\n+\n+        sym::unchecked_add\n+        | sym::unchecked_sub\n+        | sym::unchecked_mul\n+        | sym::unchecked_div\n+        | sym::exact_div\n+        | sym::unchecked_rem\n+        | sym::unchecked_shl\n+        | sym::unchecked_shr => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n \n-        unchecked_add | unchecked_sub | unchecked_mul | unchecked_div | exact_div | unchecked_rem\n-        | unchecked_shl | unchecked_shr, (c x, c y) {\n             // FIXME trap on overflow\n             let bin_op = match intrinsic {\n                 sym::unchecked_add => BinOp::Add,\n@@ -460,8 +445,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             };\n             let res = crate::num::codegen_int_binop(fx, bin_op, x, y);\n             ret.write_cvalue(fx, res);\n-        };\n-        add_with_overflow | sub_with_overflow | mul_with_overflow, (c x, c y) {\n+        }\n+        sym::add_with_overflow | sym::sub_with_overflow | sym::mul_with_overflow => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n             assert_eq!(x.layout().ty, y.layout().ty);\n             let bin_op = match intrinsic {\n                 sym::add_with_overflow => BinOp::Add,\n@@ -470,15 +457,12 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 _ => unreachable!(),\n             };\n \n-            let res = crate::num::codegen_checked_int_binop(\n-                fx,\n-                bin_op,\n-                x,\n-                y,\n-            );\n+            let res = crate::num::codegen_checked_int_binop(fx, bin_op, x, y);\n             ret.write_cvalue(fx, res);\n-        };\n-        saturating_add | saturating_sub, (c lhs, c rhs) {\n+        }\n+        sym::saturating_add | sym::saturating_sub => {\n+            intrinsic_args!(fx, args => (lhs, rhs); intrinsic);\n+\n             assert_eq!(lhs.layout().ty, rhs.layout().ty);\n             let bin_op = match intrinsic {\n                 sym::saturating_add => BinOp::Add,\n@@ -488,12 +472,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let signed = type_sign(lhs.layout().ty);\n \n-            let checked_res = crate::num::codegen_checked_int_binop(\n-                fx,\n-                bin_op,\n-                lhs,\n-                rhs,\n-            );\n+            let checked_res = crate::num::codegen_checked_int_binop(fx, bin_op, lhs, rhs);\n \n             let (val, has_overflow) = checked_res.load_scalar_pair(fx);\n             let clif_ty = fx.clif_type(lhs.layout().ty).unwrap();\n@@ -505,13 +484,15 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 (sym::saturating_sub, false) => fx.bcx.ins().select(has_overflow, min, val),\n                 (sym::saturating_add, true) => {\n                     let rhs = rhs.load_scalar(fx);\n-                    let rhs_ge_zero = fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n+                    let rhs_ge_zero =\n+                        fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n                     let sat_val = fx.bcx.ins().select(rhs_ge_zero, max, min);\n                     fx.bcx.ins().select(has_overflow, sat_val, val)\n                 }\n                 (sym::saturating_sub, true) => {\n                     let rhs = rhs.load_scalar(fx);\n-                    let rhs_ge_zero = fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n+                    let rhs_ge_zero =\n+                        fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n                     let sat_val = fx.bcx.ins().select(rhs_ge_zero, min, max);\n                     fx.bcx.ins().select(has_overflow, sat_val, val)\n                 }\n@@ -521,23 +502,32 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let res = CValue::by_val(val, lhs.layout());\n \n             ret.write_cvalue(fx, res);\n-        };\n-        rotate_left, (c x, v y) {\n+        }\n+        sym::rotate_left => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+            let y = y.load_scalar(fx);\n+\n             let layout = x.layout();\n             let x = x.load_scalar(fx);\n             let res = fx.bcx.ins().rotl(x, y);\n             ret.write_cvalue(fx, CValue::by_val(res, layout));\n-        };\n-        rotate_right, (c x, v y) {\n+        }\n+        sym::rotate_right => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+            let y = y.load_scalar(fx);\n+\n             let layout = x.layout();\n             let x = x.load_scalar(fx);\n             let res = fx.bcx.ins().rotr(x, y);\n             ret.write_cvalue(fx, CValue::by_val(res, layout));\n-        };\n+        }\n \n         // The only difference between offset and arith_offset is regarding UB. Because Cranelift\n         // doesn't have UB both are codegen'ed the same way\n-        offset | arith_offset, (c base, v offset) {\n+        sym::offset | sym::arith_offset => {\n+            intrinsic_args!(fx, args => (base, offset); intrinsic);\n+            let offset = offset.load_scalar(fx);\n+\n             let pointee_ty = base.layout().ty.builtin_deref(true).unwrap().ty;\n             let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n             let ptr_diff = if pointee_size != 1 {\n@@ -548,12 +538,18 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let base_val = base.load_scalar(fx);\n             let res = fx.bcx.ins().iadd(base_val, ptr_diff);\n             ret.write_cvalue(fx, CValue::by_val(res, base.layout()));\n-        };\n+        }\n+\n+        sym::transmute => {\n+            intrinsic_args!(fx, args => (from); intrinsic);\n \n-        transmute, (c from) {\n             ret.write_cvalue_transmute(fx, from);\n-        };\n-        write_bytes | volatile_set_memory, (c dst, v val, v count) {\n+        }\n+        sym::write_bytes | sym::volatile_set_memory => {\n+            intrinsic_args!(fx, args => (dst, val, count); intrinsic);\n+            let val = val.load_scalar(fx);\n+            let count = count.load_scalar(fx);\n+\n             let pointee_ty = dst.layout().ty.builtin_deref(true).unwrap().ty;\n             let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n             let count = if pointee_size != 1 {\n@@ -565,34 +561,42 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             // FIXME make the memset actually volatile when switching to emit_small_memset\n             // FIXME use emit_small_memset\n             fx.bcx.call_memset(fx.target_config, dst_ptr, val, count);\n-        };\n-        ctlz | ctlz_nonzero, (c arg) {\n+        }\n+        sym::ctlz | sym::ctlz_nonzero => {\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n+\n             // FIXME trap on `ctlz_nonzero` with zero arg.\n             let res = fx.bcx.ins().clz(val);\n             let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);\n-        };\n-        cttz | cttz_nonzero, (c arg) {\n+        }\n+        sym::cttz | sym::cttz_nonzero => {\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n+\n             // FIXME trap on `cttz_nonzero` with zero arg.\n             let res = fx.bcx.ins().ctz(val);\n             let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);\n-        };\n-        ctpop, (c arg) {\n+        }\n+        sym::ctpop => {\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n+\n             let res = fx.bcx.ins().popcnt(val);\n             let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);\n-        };\n-        bitreverse, (c arg) {\n+        }\n+        sym::bitreverse => {\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n+\n             let res = fx.bcx.ins().bitrev(val);\n             let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);\n-        };\n-        bswap, (c arg) {\n+        }\n+        sym::bswap => {\n             // FIXME(CraneStation/cranelift#794) add bswap instruction to cranelift\n             fn swap(bcx: &mut FunctionBuilder<'_>, v: Value) -> Value {\n                 match bcx.func.dfg.value_type(v) {\n@@ -668,11 +672,15 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                     ty => unreachable!(\"bswap {}\", ty),\n                 }\n             }\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n+\n             let res = CValue::by_val(swap(&mut fx.bcx, val), arg.layout());\n             ret.write_cvalue(fx, res);\n-        };\n-        assert_inhabited | assert_zero_valid | assert_uninit_valid, () {\n+        }\n+        sym::assert_inhabited | sym::assert_zero_valid | sym::assert_uninit_valid => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n+\n             let layout = fx.layout_of(substs.type_at(0));\n             if layout.abi.is_uninhabited() {\n                 with_no_trimmed_paths!({\n@@ -689,7 +697,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic(\n                         fx,\n-                        &format!(\"attempted to zero-initialize type `{}`, which is invalid\", layout.ty),\n+                        &format!(\n+                            \"attempted to zero-initialize type `{}`, which is invalid\",\n+                            layout.ty\n+                        ),\n                         source_info,\n                     );\n                 });\n@@ -700,41 +711,53 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic(\n                         fx,\n-                        &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", layout.ty),\n+                        &format!(\n+                            \"attempted to leave type `{}` uninitialized, which is invalid\",\n+                            layout.ty\n+                        ),\n                         source_info,\n                     )\n                 });\n                 return;\n             }\n-        };\n+        }\n+\n+        sym::volatile_load | sym::unaligned_volatile_load => {\n+            intrinsic_args!(fx, args => (ptr); intrinsic);\n \n-        volatile_load | unaligned_volatile_load, (c ptr) {\n             // Cranelift treats loads as volatile by default\n             // FIXME correctly handle unaligned_volatile_load\n-            let inner_layout =\n-                fx.layout_of(ptr.layout().ty.builtin_deref(true).unwrap().ty);\n+            let inner_layout = fx.layout_of(ptr.layout().ty.builtin_deref(true).unwrap().ty);\n             let val = CValue::by_ref(Pointer::new(ptr.load_scalar(fx)), inner_layout);\n             ret.write_cvalue(fx, val);\n-        };\n-        volatile_store | unaligned_volatile_store, (v ptr, c val) {\n+        }\n+        sym::volatile_store | sym::unaligned_volatile_store => {\n+            intrinsic_args!(fx, args => (ptr, val); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             // Cranelift treats stores as volatile by default\n             // FIXME correctly handle unaligned_volatile_store\n             let dest = CPlace::for_ptr(Pointer::new(ptr), val.layout());\n             dest.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        sym::pref_align_of\n+        | sym::needs_drop\n+        | sym::type_id\n+        | sym::type_name\n+        | sym::variant_count => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n \n-        pref_align_of | needs_drop | type_id | type_name | variant_count, () {\n             let const_val =\n                 fx.tcx.const_eval_instance(ParamEnv::reveal_all(), instance, None).unwrap();\n-            let val = crate::constant::codegen_const_value(\n-                fx,\n-                const_val,\n-                ret.layout().ty,\n-            );\n+            let val = crate::constant::codegen_const_value(fx, const_val, ret.layout().ty);\n             ret.write_cvalue(fx, val);\n-        };\n+        }\n \n-        ptr_offset_from | ptr_offset_from_unsigned, (v ptr, v base) {\n+        sym::ptr_offset_from | sym::ptr_offset_from_unsigned => {\n+            intrinsic_args!(fx, args => (ptr, base); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+            let base = base.load_scalar(fx);\n             let ty = substs.type_at(0);\n \n             let pointee_size: u64 = fx.layout_of(ty).size.bytes();\n@@ -750,31 +773,44 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 CValue::by_val(fx.bcx.ins().sdiv_imm(diff_bytes, pointee_size as i64), isize_layout)\n             };\n             ret.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        sym::ptr_guaranteed_eq => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n \n-        ptr_guaranteed_eq, (c a, c b) {\n             let val = crate::num::codegen_ptr_binop(fx, BinOp::Eq, a, b);\n             ret.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        sym::ptr_guaranteed_ne => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n \n-        ptr_guaranteed_ne, (c a, c b) {\n             let val = crate::num::codegen_ptr_binop(fx, BinOp::Ne, a, b);\n             ret.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        sym::caller_location => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n \n-        caller_location, () {\n             let caller_location = fx.get_caller_location(source_info);\n             ret.write_cvalue(fx, caller_location);\n-        };\n+        }\n+\n+        _ if intrinsic.as_str().starts_with(\"atomic_fence\") => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n \n-        _ if intrinsic.as_str().starts_with(\"atomic_fence\"), () {\n             fx.bcx.ins().fence();\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_singlethreadfence\"), () {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_singlethreadfence\") => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n+\n             // FIXME use a compiler fence once Cranelift supports it\n             fx.bcx.ins().fence();\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_load\"), (v ptr) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_load\") => {\n+            intrinsic_args!(fx, args => (ptr); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let ty = substs.type_at(0);\n             match ty.kind() {\n                 ty::Uint(UintTy::U128) | ty::Int(IntTy::I128) => {\n@@ -786,7 +822,9 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                         fx.bcx.ins().jump(ret_block, &[]);\n                         return;\n                     } else {\n-                        fx.tcx.sess.span_fatal(source_info.span, \"128bit atomics not yet supported\");\n+                        fx.tcx\n+                            .sess\n+                            .span_fatal(source_info.span, \"128bit atomics not yet supported\");\n                     }\n                 }\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -801,8 +839,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let val = CValue::by_val(val, fx.layout_of(ty));\n             ret.write_cvalue(fx, val);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_store\"), (v ptr, c val) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_store\") => {\n+            intrinsic_args!(fx, args => (ptr, val); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let ty = substs.type_at(0);\n             match ty.kind() {\n                 ty::Uint(UintTy::U128) | ty::Int(IntTy::I128) => {\n@@ -814,7 +855,9 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                         fx.bcx.ins().jump(ret_block, &[]);\n                         return;\n                     } else {\n-                        fx.tcx.sess.span_fatal(source_info.span, \"128bit atomics not yet supported\");\n+                        fx.tcx\n+                            .sess\n+                            .span_fatal(source_info.span, \"128bit atomics not yet supported\");\n                     }\n                 }\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -827,8 +870,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let val = val.load_scalar(fx);\n \n             fx.bcx.ins().atomic_store(MemFlags::trusted(), val, ptr);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_xchg\"), (v ptr, c new) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_xchg\") => {\n+            intrinsic_args!(fx, args => (ptr, new); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = new.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -845,8 +891,12 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_cxchg\"), (v ptr, c test_old, c new) { // both atomic_cxchg_* and atomic_cxchgweak_*\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_cxchg\") => {\n+            // both atomic_cxchg_* and atomic_cxchgweak_*\n+            intrinsic_args!(fx, args => (ptr, test_old, new); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = new.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -862,11 +912,15 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let old = fx.bcx.ins().atomic_cas(MemFlags::trusted(), ptr, test_old, new);\n             let is_eq = fx.bcx.ins().icmp(IntCC::Equal, old, test_old);\n \n-            let ret_val = CValue::by_val_pair(old, fx.bcx.ins().bint(types::I8, is_eq), ret.layout());\n+            let ret_val =\n+                CValue::by_val_pair(old, fx.bcx.ins().bint(types::I8, is_eq), ret.layout());\n             ret.write_cvalue(fx, ret_val)\n-        };\n+        }\n+\n+        _ if intrinsic.as_str().starts_with(\"atomic_xadd\") => {\n+            intrinsic_args!(fx, args => (ptr, amount); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n \n-        _ if intrinsic.as_str().starts_with(\"atomic_xadd\"), (v ptr, c amount) {\n             let layout = amount.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -879,12 +933,16 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let amount = amount.load_scalar(fx);\n \n-            let old = fx.bcx.ins().atomic_rmw(ty, MemFlags::trusted(), AtomicRmwOp::Add, ptr, amount);\n+            let old =\n+                fx.bcx.ins().atomic_rmw(ty, MemFlags::trusted(), AtomicRmwOp::Add, ptr, amount);\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_xsub\"), (v ptr, c amount) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_xsub\") => {\n+            intrinsic_args!(fx, args => (ptr, amount); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = amount.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -897,12 +955,16 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let amount = amount.load_scalar(fx);\n \n-            let old = fx.bcx.ins().atomic_rmw(ty, MemFlags::trusted(), AtomicRmwOp::Sub, ptr, amount);\n+            let old =\n+                fx.bcx.ins().atomic_rmw(ty, MemFlags::trusted(), AtomicRmwOp::Sub, ptr, amount);\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_and\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_and\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -919,8 +981,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_or\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_or\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -937,8 +1002,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_xor\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_xor\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -955,8 +1023,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_nand\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_nand\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -973,8 +1044,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_max\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_max\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -991,8 +1065,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_umax\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_umax\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -1009,8 +1086,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_min\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_min\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -1027,8 +1107,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_umin\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_umin\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -1045,30 +1128,51 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n+        }\n+\n+        sym::minnumf32 => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+            let a = a.load_scalar(fx);\n+            let b = b.load_scalar(fx);\n \n-        minnumf32, (v a, v b) {\n             let val = crate::num::codegen_float_min(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f32));\n             ret.write_cvalue(fx, val);\n-        };\n-        minnumf64, (v a, v b) {\n+        }\n+        sym::minnumf64 => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+            let a = a.load_scalar(fx);\n+            let b = b.load_scalar(fx);\n+\n             let val = crate::num::codegen_float_min(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f64));\n             ret.write_cvalue(fx, val);\n-        };\n-        maxnumf32, (v a, v b) {\n+        }\n+        sym::maxnumf32 => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+            let a = a.load_scalar(fx);\n+            let b = b.load_scalar(fx);\n+\n             let val = crate::num::codegen_float_max(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f32));\n             ret.write_cvalue(fx, val);\n-        };\n-        maxnumf64, (v a, v b) {\n+        }\n+        sym::maxnumf64 => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+            let a = a.load_scalar(fx);\n+            let b = b.load_scalar(fx);\n+\n             let val = crate::num::codegen_float_max(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f64));\n             ret.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        kw::Try => {\n+            intrinsic_args!(fx, args => (f, data, catch_fn); intrinsic);\n+            let f = f.load_scalar(fx);\n+            let data = data.load_scalar(fx);\n+            let _catch_fn = catch_fn.load_scalar(fx);\n \n-        kw.Try, (v f, v data, v _catch_fn) {\n             // FIXME once unwinding is supported, change this to actually catch panics\n             let f_sig = fx.bcx.func.import_signature(Signature {\n                 call_conv: fx.target_config.default_call_conv,\n@@ -1081,20 +1185,30 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let layout = ret.layout();\n             let ret_val = CValue::const_val(fx, layout, ty::ScalarInt::null(layout.size));\n             ret.write_cvalue(fx, ret_val);\n-        };\n+        }\n \n-        fadd_fast | fsub_fast | fmul_fast | fdiv_fast | frem_fast, (c x, c y) {\n-            let res = crate::num::codegen_float_binop(fx, match intrinsic {\n-                sym::fadd_fast => BinOp::Add,\n-                sym::fsub_fast => BinOp::Sub,\n-                sym::fmul_fast => BinOp::Mul,\n-                sym::fdiv_fast => BinOp::Div,\n-                sym::frem_fast => BinOp::Rem,\n-                _ => unreachable!(),\n-            }, x, y);\n+        sym::fadd_fast | sym::fsub_fast | sym::fmul_fast | sym::fdiv_fast | sym::frem_fast => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            let res = crate::num::codegen_float_binop(\n+                fx,\n+                match intrinsic {\n+                    sym::fadd_fast => BinOp::Add,\n+                    sym::fsub_fast => BinOp::Sub,\n+                    sym::fmul_fast => BinOp::Mul,\n+                    sym::fdiv_fast => BinOp::Div,\n+                    sym::frem_fast => BinOp::Rem,\n+                    _ => unreachable!(),\n+                },\n+                x,\n+                y,\n+            );\n             ret.write_cvalue(fx, res);\n-        };\n-        float_to_int_unchecked, (v f) {\n+        }\n+        sym::float_to_int_unchecked => {\n+            intrinsic_args!(fx, args => (f); intrinsic);\n+            let f = f.load_scalar(fx);\n+\n             let res = crate::cast::clif_int_or_float_cast(\n                 fx,\n                 f,\n@@ -1103,66 +1217,74 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 type_sign(ret.layout().ty),\n             );\n             ret.write_cvalue(fx, CValue::by_val(res, ret.layout()));\n-        };\n+        }\n+\n+        sym::raw_eq => {\n+            intrinsic_args!(fx, args => (lhs_ref, rhs_ref); intrinsic);\n+            let lhs_ref = lhs_ref.load_scalar(fx);\n+            let rhs_ref = rhs_ref.load_scalar(fx);\n \n-        raw_eq, (v lhs_ref, v rhs_ref) {\n             let size = fx.layout_of(substs.type_at(0)).layout.size();\n             // FIXME add and use emit_small_memcmp\n-            let is_eq_value =\n-                if size == Size::ZERO {\n-                    // No bytes means they're trivially equal\n-                    fx.bcx.ins().iconst(types::I8, 1)\n-                } else if let Some(clty) = size.bits().try_into().ok().and_then(Type::int) {\n-                    // Can't use `trusted` for these loads; they could be unaligned.\n-                    let mut flags = MemFlags::new();\n-                    flags.set_notrap();\n-                    let lhs_val = fx.bcx.ins().load(clty, flags, lhs_ref, 0);\n-                    let rhs_val = fx.bcx.ins().load(clty, flags, rhs_ref, 0);\n-                    let eq = fx.bcx.ins().icmp(IntCC::Equal, lhs_val, rhs_val);\n-                    fx.bcx.ins().bint(types::I8, eq)\n-                } else {\n-                    // Just call `memcmp` (like slices do in core) when the\n-                    // size is too large or it's not a power-of-two.\n-                    let signed_bytes = i64::try_from(size.bytes()).unwrap();\n-                    let bytes_val = fx.bcx.ins().iconst(fx.pointer_type, signed_bytes);\n-                    let params = vec![AbiParam::new(fx.pointer_type); 3];\n-                    let returns = vec![AbiParam::new(types::I32)];\n-                    let args = &[lhs_ref, rhs_ref, bytes_val];\n-                    let cmp = fx.lib_call(\"memcmp\", params, returns, args)[0];\n-                    let eq = fx.bcx.ins().icmp_imm(IntCC::Equal, cmp, 0);\n-                    fx.bcx.ins().bint(types::I8, eq)\n-                };\n+            let is_eq_value = if size == Size::ZERO {\n+                // No bytes means they're trivially equal\n+                fx.bcx.ins().iconst(types::I8, 1)\n+            } else if let Some(clty) = size.bits().try_into().ok().and_then(Type::int) {\n+                // Can't use `trusted` for these loads; they could be unaligned.\n+                let mut flags = MemFlags::new();\n+                flags.set_notrap();\n+                let lhs_val = fx.bcx.ins().load(clty, flags, lhs_ref, 0);\n+                let rhs_val = fx.bcx.ins().load(clty, flags, rhs_ref, 0);\n+                let eq = fx.bcx.ins().icmp(IntCC::Equal, lhs_val, rhs_val);\n+                fx.bcx.ins().bint(types::I8, eq)\n+            } else {\n+                // Just call `memcmp` (like slices do in core) when the\n+                // size is too large or it's not a power-of-two.\n+                let signed_bytes = i64::try_from(size.bytes()).unwrap();\n+                let bytes_val = fx.bcx.ins().iconst(fx.pointer_type, signed_bytes);\n+                let params = vec![AbiParam::new(fx.pointer_type); 3];\n+                let returns = vec![AbiParam::new(types::I32)];\n+                let args = &[lhs_ref, rhs_ref, bytes_val];\n+                let cmp = fx.lib_call(\"memcmp\", params, returns, args)[0];\n+                let eq = fx.bcx.ins().icmp_imm(IntCC::Equal, cmp, 0);\n+                fx.bcx.ins().bint(types::I8, eq)\n+            };\n             ret.write_cvalue(fx, CValue::by_val(is_eq_value, ret.layout()));\n-        };\n+        }\n+\n+        sym::const_allocate => {\n+            intrinsic_args!(fx, args => (_size, _align); intrinsic);\n \n-        const_allocate, (c _size, c _align) {\n             // returns a null pointer at runtime.\n             let null = fx.bcx.ins().iconst(fx.pointer_type, 0);\n             ret.write_cvalue(fx, CValue::by_val(null, ret.layout()));\n-        };\n+        }\n \n-        const_deallocate, (c _ptr, c _size, c _align) {\n+        sym::const_deallocate => {\n+            intrinsic_args!(fx, args => (_ptr, _size, _align); intrinsic);\n             // nop at runtime.\n-        };\n+        }\n+\n+        sym::black_box => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        black_box, (c a) {\n             // FIXME implement black_box semantics\n             ret.write_cvalue(fx, a);\n-        };\n+        }\n \n         // FIXME implement variadics in cranelift\n-        va_copy, (o _dest, o _src) {\n+        sym::va_copy | sym::va_arg | sym::va_end => {\n             fx.tcx.sess.span_fatal(\n                 source_info.span,\n                 \"Defining variadic functions is not yet supported by Cranelift\",\n             );\n-        };\n-        va_arg | va_end, (o _valist) {\n-            fx.tcx.sess.span_fatal(\n-                source_info.span,\n-                \"Defining variadic functions is not yet supported by Cranelift\",\n-            );\n-        };\n+        }\n+\n+        _ => {\n+            fx.tcx\n+                .sess\n+                .span_fatal(source_info.span, &format!(\"unsupported intrinsic {}\", intrinsic));\n+        }\n     }\n \n     let ret_block = fx.get_block(destination.unwrap());"}, {"sha": "30e3d112594a6d60beb75bb8459ffeb485d1ec6d", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 252, "deletions": 147, "changes": 399, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -25,13 +25,10 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n     ret: CPlace<'tcx>,\n     span: Span,\n ) {\n-    intrinsic_match! {\n-        fx, intrinsic, args,\n-        _ => {\n-            fx.tcx.sess.span_fatal(span, &format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n-        };\n+    match intrinsic {\n+        sym::simd_cast => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        simd_cast, (c a) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n@@ -45,9 +42,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n                 clif_int_or_float_cast(fx, lane, from_signed, ret_lane_clif_ty, to_signed)\n             });\n-        };\n+        }\n+\n+        sym::simd_eq | sym::simd_ne | sym::simd_lt | sym::simd_le | sym::simd_gt | sym::simd_ge => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n \n-        simd_eq | simd_ne | simd_lt | simd_le | simd_gt | simd_ge, (c x, c y) {\n             if !x.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n                 return;\n@@ -57,7 +56,9 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, res_lane_ty, x_lane, y_lane| {\n                 let res_lane = match (lane_ty.kind(), intrinsic) {\n                     (ty::Uint(_), sym::simd_eq) => fx.bcx.ins().icmp(IntCC::Equal, x_lane, y_lane),\n-                    (ty::Uint(_), sym::simd_ne) => fx.bcx.ins().icmp(IntCC::NotEqual, x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_ne) => {\n+                        fx.bcx.ins().icmp(IntCC::NotEqual, x_lane, y_lane)\n+                    }\n                     (ty::Uint(_), sym::simd_lt) => {\n                         fx.bcx.ins().icmp(IntCC::UnsignedLessThan, x_lane, y_lane)\n                     }\n@@ -72,8 +73,12 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     }\n \n                     (ty::Int(_), sym::simd_eq) => fx.bcx.ins().icmp(IntCC::Equal, x_lane, y_lane),\n-                    (ty::Int(_), sym::simd_ne) => fx.bcx.ins().icmp(IntCC::NotEqual, x_lane, y_lane),\n-                    (ty::Int(_), sym::simd_lt) => fx.bcx.ins().icmp(IntCC::SignedLessThan, x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_ne) => {\n+                        fx.bcx.ins().icmp(IntCC::NotEqual, x_lane, y_lane)\n+                    }\n+                    (ty::Int(_), sym::simd_lt) => {\n+                        fx.bcx.ins().icmp(IntCC::SignedLessThan, x_lane, y_lane)\n+                    }\n                     (ty::Int(_), sym::simd_le) => {\n                         fx.bcx.ins().icmp(IntCC::SignedLessThanOrEqual, x_lane, y_lane)\n                     }\n@@ -84,13 +89,21 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                         fx.bcx.ins().icmp(IntCC::SignedGreaterThanOrEqual, x_lane, y_lane)\n                     }\n \n-                    (ty::Float(_), sym::simd_eq) => fx.bcx.ins().fcmp(FloatCC::Equal, x_lane, y_lane),\n-                    (ty::Float(_), sym::simd_ne) => fx.bcx.ins().fcmp(FloatCC::NotEqual, x_lane, y_lane),\n-                    (ty::Float(_), sym::simd_lt) => fx.bcx.ins().fcmp(FloatCC::LessThan, x_lane, y_lane),\n+                    (ty::Float(_), sym::simd_eq) => {\n+                        fx.bcx.ins().fcmp(FloatCC::Equal, x_lane, y_lane)\n+                    }\n+                    (ty::Float(_), sym::simd_ne) => {\n+                        fx.bcx.ins().fcmp(FloatCC::NotEqual, x_lane, y_lane)\n+                    }\n+                    (ty::Float(_), sym::simd_lt) => {\n+                        fx.bcx.ins().fcmp(FloatCC::LessThan, x_lane, y_lane)\n+                    }\n                     (ty::Float(_), sym::simd_le) => {\n                         fx.bcx.ins().fcmp(FloatCC::LessThanOrEqual, x_lane, y_lane)\n                     }\n-                    (ty::Float(_), sym::simd_gt) => fx.bcx.ins().fcmp(FloatCC::GreaterThan, x_lane, y_lane),\n+                    (ty::Float(_), sym::simd_gt) => {\n+                        fx.bcx.ins().fcmp(FloatCC::GreaterThan, x_lane, y_lane)\n+                    }\n                     (ty::Float(_), sym::simd_ge) => {\n                         fx.bcx.ins().fcmp(FloatCC::GreaterThanOrEqual, x_lane, y_lane)\n                     }\n@@ -103,10 +116,19 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let res_lane = fx.bcx.ins().bint(ty, res_lane);\n                 fx.bcx.ins().ineg(res_lane)\n             });\n-        };\n+        }\n \n         // simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U\n-        _ if intrinsic.as_str().starts_with(\"simd_shuffle\"), (c x, c y, o idx) {\n+        _ if intrinsic.as_str().starts_with(\"simd_shuffle\") => {\n+            let (x, y, idx) = match args {\n+                [x, y, idx] => (x, y, idx),\n+                _ => {\n+                    bug!(\"wrong number of args for intrinsic {intrinsic}\");\n+                }\n+            };\n+            let x = codegen_operand(fx, x);\n+            let y = codegen_operand(fx, y);\n+\n             if !x.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n                 return;\n@@ -119,11 +141,13 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 // version of this intrinsic.\n                 let idx_ty = fx.monomorphize(idx.ty(fx.mir, fx.tcx));\n                 match idx_ty.kind() {\n-                    ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => {\n-                        len.try_eval_usize(fx.tcx, ty::ParamEnv::reveal_all()).unwrap_or_else(|| {\n+                    ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => len\n+                        .try_eval_usize(fx.tcx, ty::ParamEnv::reveal_all())\n+                        .unwrap_or_else(|| {\n                             span_bug!(span, \"could not evaluate shuffle index array length\")\n-                        }).try_into().unwrap()\n-                    }\n+                        })\n+                        .try_into()\n+                        .unwrap(),\n                     _ => {\n                         fx.tcx.sess.span_err(\n                             span,\n@@ -154,24 +178,30 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n             let indexes = {\n                 use rustc_middle::mir::interpret::*;\n-                let idx_const = crate::constant::mir_operand_get_const_val(fx, idx).expect(\"simd_shuffle* idx not const\");\n+                let idx_const = crate::constant::mir_operand_get_const_val(fx, idx)\n+                    .expect(\"simd_shuffle* idx not const\");\n \n                 let idx_bytes = match idx_const {\n                     ConstValue::ByRef { alloc, offset } => {\n-                        let size = Size::from_bytes(4 * ret_lane_count /* size_of([u32; ret_lane_count]) */);\n+                        let size = Size::from_bytes(\n+                            4 * ret_lane_count, /* size_of([u32; ret_lane_count]) */\n+                        );\n                         alloc.inner().get_bytes(fx, alloc_range(offset, size)).unwrap()\n                     }\n                     _ => unreachable!(\"{:?}\", idx_const),\n                 };\n \n-                (0..ret_lane_count).map(|i| {\n-                    let i = usize::try_from(i).unwrap();\n-                    let idx = rustc_middle::mir::interpret::read_target_uint(\n-                        fx.tcx.data_layout.endian,\n-                        &idx_bytes[4*i.. 4*i + 4],\n-                    ).expect(\"read_target_uint\");\n-                    u16::try_from(idx).expect(\"try_from u32\")\n-                }).collect::<Vec<u16>>()\n+                (0..ret_lane_count)\n+                    .map(|i| {\n+                        let i = usize::try_from(i).unwrap();\n+                        let idx = rustc_middle::mir::interpret::read_target_uint(\n+                            fx.tcx.data_layout.endian,\n+                            &idx_bytes[4 * i..4 * i + 4],\n+                        )\n+                        .expect(\"read_target_uint\");\n+                        u16::try_from(idx).expect(\"try_from u32\")\n+                    })\n+                    .collect::<Vec<u16>>()\n             };\n \n             for &idx in &indexes {\n@@ -187,43 +217,63 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let out_lane = ret.place_lane(fx, u64::try_from(out_idx).unwrap());\n                 out_lane.write_cvalue(fx, in_lane);\n             }\n-        };\n+        }\n+\n+        sym::simd_insert => {\n+            let (base, idx, val) = match args {\n+                [base, idx, val] => (base, idx, val),\n+                _ => {\n+                    bug!(\"wrong number of args for intrinsic {intrinsic}\");\n+                }\n+            };\n+            let base = codegen_operand(fx, base);\n+            let val = codegen_operand(fx, val);\n \n-        simd_insert, (c base, o idx, c val) {\n             // FIXME validate\n-            let idx_const = if let Some(idx_const) = crate::constant::mir_operand_get_const_val(fx, idx) {\n+            let idx_const = if let Some(idx_const) =\n+                crate::constant::mir_operand_get_const_val(fx, idx)\n+            {\n                 idx_const\n             } else {\n-                fx.tcx.sess.span_fatal(\n-                    span,\n-                    \"Index argument for `simd_insert` is not a constant\",\n-                );\n+                fx.tcx.sess.span_fatal(span, \"Index argument for `simd_insert` is not a constant\");\n             };\n \n-            let idx = idx_const.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n+            let idx = idx_const\n+                .try_to_bits(Size::from_bytes(4 /* u32*/))\n+                .unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n             let (lane_count, _lane_ty) = base.layout().ty.simd_size_and_type(fx.tcx);\n             if idx >= lane_count.into() {\n-                fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count));\n+                fx.tcx.sess.span_fatal(\n+                    fx.mir.span,\n+                    &format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count),\n+                );\n             }\n \n             ret.write_cvalue(fx, base);\n             let ret_lane = ret.place_field(fx, mir::Field::new(idx.try_into().unwrap()));\n             ret_lane.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        sym::simd_extract => {\n+            let (v, idx) = match args {\n+                [v, idx] => (v, idx),\n+                _ => {\n+                    bug!(\"wrong number of args for intrinsic {intrinsic}\");\n+                }\n+            };\n+            let v = codegen_operand(fx, v);\n \n-        simd_extract, (c v, o idx) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n-            let idx_const = if let Some(idx_const) = crate::constant::mir_operand_get_const_val(fx, idx) {\n+            let idx_const = if let Some(idx_const) =\n+                crate::constant::mir_operand_get_const_val(fx, idx)\n+            {\n                 idx_const\n             } else {\n-                fx.tcx.sess.span_warn(\n-                    span,\n-                    \"Index argument for `simd_extract` is not a constant\",\n-                );\n+                fx.tcx.sess.span_warn(span, \"Index argument for `simd_extract` is not a constant\");\n                 let res = crate::trap::trap_unimplemented_ret_value(\n                     fx,\n                     ret.layout(),\n@@ -233,89 +283,105 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 return;\n             };\n \n-            let idx = idx_const.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n+            let idx = idx_const\n+                .try_to_bits(Size::from_bytes(4 /* u32*/))\n+                .unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n             let (lane_count, _lane_ty) = v.layout().ty.simd_size_and_type(fx.tcx);\n             if idx >= lane_count.into() {\n-                fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count));\n+                fx.tcx.sess.span_fatal(\n+                    fx.mir.span,\n+                    &format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count),\n+                );\n             }\n \n             let ret_lane = v.value_lane(fx, idx.try_into().unwrap());\n             ret.write_cvalue(fx, ret_lane);\n-        };\n+        }\n+\n+        sym::simd_neg => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        simd_neg, (c a) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n             }\n \n-            simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n-                match lane_ty.kind() {\n+            simd_for_each_lane(\n+                fx,\n+                a,\n+                ret,\n+                &|fx, lane_ty, _ret_lane_ty, lane| match lane_ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().ineg(lane),\n                     ty::Float(_) => fx.bcx.ins().fneg(lane),\n                     _ => unreachable!(),\n-                }\n-            });\n-        };\n-\n-        simd_add | simd_sub | simd_mul | simd_div | simd_rem\n-        | simd_shl | simd_shr | simd_and | simd_or | simd_xor, (c x, c y) {\n-            if !x.layout().ty.is_simd() {\n-                report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n-                return;\n-            }\n+                },\n+            );\n+        }\n+\n+        sym::simd_add\n+        | sym::simd_sub\n+        | sym::simd_mul\n+        | sym::simd_div\n+        | sym::simd_rem\n+        | sym::simd_shl\n+        | sym::simd_shr\n+        | sym::simd_and\n+        | sym::simd_or\n+        | sym::simd_xor => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n \n             // FIXME use vector instructions when possible\n-            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| match (\n-                lane_ty.kind(),\n-                intrinsic,\n-            ) {\n-                (ty::Uint(_), sym::simd_add) => fx.bcx.ins().iadd(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_sub) => fx.bcx.ins().isub(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_mul) => fx.bcx.ins().imul(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_div) => fx.bcx.ins().udiv(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_rem) => fx.bcx.ins().urem(x_lane, y_lane),\n-\n-                (ty::Int(_), sym::simd_add) => fx.bcx.ins().iadd(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_sub) => fx.bcx.ins().isub(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_mul) => fx.bcx.ins().imul(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_div) => fx.bcx.ins().sdiv(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_rem) => fx.bcx.ins().srem(x_lane, y_lane),\n-\n-                (ty::Float(_), sym::simd_add) => fx.bcx.ins().fadd(x_lane, y_lane),\n-                (ty::Float(_), sym::simd_sub) => fx.bcx.ins().fsub(x_lane, y_lane),\n-                (ty::Float(_), sym::simd_mul) => fx.bcx.ins().fmul(x_lane, y_lane),\n-                (ty::Float(_), sym::simd_div) => fx.bcx.ins().fdiv(x_lane, y_lane),\n-                (ty::Float(FloatTy::F32), sym::simd_rem) => fx.lib_call(\n-                    \"fmodf\",\n-                    vec![AbiParam::new(types::F32), AbiParam::new(types::F32)],\n-                    vec![AbiParam::new(types::F32)],\n-                    &[x_lane, y_lane],\n-                )[0],\n-                (ty::Float(FloatTy::F64), sym::simd_rem) => fx.lib_call(\n-                    \"fmod\",\n-                    vec![AbiParam::new(types::F64), AbiParam::new(types::F64)],\n-                    vec![AbiParam::new(types::F64)],\n-                    &[x_lane, y_lane],\n-                )[0],\n-\n-                (ty::Uint(_), sym::simd_shl) => fx.bcx.ins().ishl(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_shr) => fx.bcx.ins().ushr(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_and) => fx.bcx.ins().band(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_or) => fx.bcx.ins().bor(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_xor) => fx.bcx.ins().bxor(x_lane, y_lane),\n-\n-                (ty::Int(_), sym::simd_shl) => fx.bcx.ins().ishl(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_shr) => fx.bcx.ins().sshr(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_and) => fx.bcx.ins().band(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_or) => fx.bcx.ins().bor(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_xor) => fx.bcx.ins().bxor(x_lane, y_lane),\n-\n-                _ => unreachable!(),\n+            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| {\n+                match (lane_ty.kind(), intrinsic) {\n+                    (ty::Uint(_), sym::simd_add) => fx.bcx.ins().iadd(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_sub) => fx.bcx.ins().isub(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_mul) => fx.bcx.ins().imul(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_div) => fx.bcx.ins().udiv(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_rem) => fx.bcx.ins().urem(x_lane, y_lane),\n+\n+                    (ty::Int(_), sym::simd_add) => fx.bcx.ins().iadd(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_sub) => fx.bcx.ins().isub(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_mul) => fx.bcx.ins().imul(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_div) => fx.bcx.ins().sdiv(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_rem) => fx.bcx.ins().srem(x_lane, y_lane),\n+\n+                    (ty::Float(_), sym::simd_add) => fx.bcx.ins().fadd(x_lane, y_lane),\n+                    (ty::Float(_), sym::simd_sub) => fx.bcx.ins().fsub(x_lane, y_lane),\n+                    (ty::Float(_), sym::simd_mul) => fx.bcx.ins().fmul(x_lane, y_lane),\n+                    (ty::Float(_), sym::simd_div) => fx.bcx.ins().fdiv(x_lane, y_lane),\n+                    (ty::Float(FloatTy::F32), sym::simd_rem) => fx.lib_call(\n+                        \"fmodf\",\n+                        vec![AbiParam::new(types::F32), AbiParam::new(types::F32)],\n+                        vec![AbiParam::new(types::F32)],\n+                        &[x_lane, y_lane],\n+                    )[0],\n+                    (ty::Float(FloatTy::F64), sym::simd_rem) => fx.lib_call(\n+                        \"fmod\",\n+                        vec![AbiParam::new(types::F64), AbiParam::new(types::F64)],\n+                        vec![AbiParam::new(types::F64)],\n+                        &[x_lane, y_lane],\n+                    )[0],\n+\n+                    (ty::Uint(_), sym::simd_shl) => fx.bcx.ins().ishl(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_shr) => fx.bcx.ins().ushr(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_and) => fx.bcx.ins().band(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_or) => fx.bcx.ins().bor(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_xor) => fx.bcx.ins().bxor(x_lane, y_lane),\n+\n+                    (ty::Int(_), sym::simd_shl) => fx.bcx.ins().ishl(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_shr) => fx.bcx.ins().sshr(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_and) => fx.bcx.ins().band(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_or) => fx.bcx.ins().bor(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_xor) => fx.bcx.ins().bxor(x_lane, y_lane),\n+\n+                    _ => unreachable!(),\n+                }\n             });\n-        };\n+        }\n+\n+        sym::simd_fma => {\n+            intrinsic_args!(fx, args => (a, b, c); intrinsic);\n \n-        simd_fma, (c a, c b, c c) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n@@ -333,16 +399,22 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let c_lane = c.value_lane(fx, lane);\n \n                 let res_lane = match lane_ty.kind() {\n-                    ty::Float(FloatTy::F32) => fx.easy_call(\"fmaf\", &[a_lane, b_lane, c_lane], lane_ty),\n-                    ty::Float(FloatTy::F64) => fx.easy_call(\"fma\", &[a_lane, b_lane, c_lane], lane_ty),\n+                    ty::Float(FloatTy::F32) => {\n+                        fx.easy_call(\"fmaf\", &[a_lane, b_lane, c_lane], lane_ty)\n+                    }\n+                    ty::Float(FloatTy::F64) => {\n+                        fx.easy_call(\"fma\", &[a_lane, b_lane, c_lane], lane_ty)\n+                    }\n                     _ => unreachable!(),\n                 };\n \n                 ret.place_lane(fx, lane).write_cvalue(fx, res_lane);\n             }\n-        };\n+        }\n+\n+        sym::simd_fmin | sym::simd_fmax => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n \n-        simd_fmin | simd_fmax, (c x, c y) {\n             if !x.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n                 return;\n@@ -351,7 +423,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             // FIXME use vector instructions when possible\n             simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| {\n                 match lane_ty.kind() {\n-                    ty::Float(_) => {},\n+                    ty::Float(_) => {}\n                     _ => unreachable!(\"{:?}\", lane_ty),\n                 }\n                 match intrinsic {\n@@ -360,16 +432,21 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     _ => unreachable!(),\n                 }\n             });\n-        };\n+        }\n+\n+        sym::simd_round => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        simd_round, (c a) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n             }\n \n-            simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n-                match lane_ty.kind() {\n+            simd_for_each_lane(\n+                fx,\n+                a,\n+                ret,\n+                &|fx, lane_ty, _ret_lane_ty, lane| match lane_ty.kind() {\n                     ty::Float(FloatTy::F32) => fx.lib_call(\n                         \"roundf\",\n                         vec![AbiParam::new(types::F32)],\n@@ -383,19 +460,21 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                         &[lane],\n                     )[0],\n                     _ => unreachable!(\"{:?}\", lane_ty),\n-                }\n-            });\n-        };\n+                },\n+            );\n+        }\n+\n+        sym::simd_fabs | sym::simd_fsqrt | sym::simd_ceil | sym::simd_floor | sym::simd_trunc => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        simd_fabs | simd_fsqrt | simd_ceil | simd_floor | simd_trunc, (c a) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n             }\n \n             simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n                 match lane_ty.kind() {\n-                    ty::Float(_) => {},\n+                    ty::Float(_) => {}\n                     _ => unreachable!(\"{:?}\", lane_ty),\n                 }\n                 match intrinsic {\n@@ -407,9 +486,12 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     _ => unreachable!(),\n                 }\n             });\n-        };\n+        }\n+\n+        sym::simd_reduce_add_ordered | sym::simd_reduce_add_unordered => {\n+            intrinsic_args!(fx, args => (v, acc); intrinsic);\n+            let acc = acc.load_scalar(fx);\n \n-        simd_reduce_add_ordered | simd_reduce_add_unordered, (c v, v acc) {\n             // FIXME there must be no acc param for integer vectors\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n@@ -423,9 +505,12 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     fx.bcx.ins().iadd(a, b)\n                 }\n             });\n-        };\n+        }\n+\n+        sym::simd_reduce_mul_ordered | sym::simd_reduce_mul_unordered => {\n+            intrinsic_args!(fx, args => (v, acc); intrinsic);\n+            let acc = acc.load_scalar(fx);\n \n-        simd_reduce_mul_ordered | simd_reduce_mul_unordered, (c v, v acc) {\n             // FIXME there must be no acc param for integer vectors\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n@@ -439,54 +524,66 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     fx.bcx.ins().imul(a, b)\n                 }\n             });\n-        };\n+        }\n+\n+        sym::simd_reduce_all => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_all, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n             simd_reduce_bool(fx, v, ret, &|fx, a, b| fx.bcx.ins().band(a, b));\n-        };\n+        }\n+\n+        sym::simd_reduce_any => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_any, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n             simd_reduce_bool(fx, v, ret, &|fx, a, b| fx.bcx.ins().bor(a, b));\n-        };\n+        }\n+\n+        sym::simd_reduce_and => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_and, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n             simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().band(a, b));\n-        };\n+        }\n+\n+        sym::simd_reduce_or => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_or, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n             simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().bor(a, b));\n-        };\n+        }\n+\n+        sym::simd_reduce_xor => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_xor, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n             simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().bxor(a, b));\n-        };\n+        }\n+\n+        sym::simd_reduce_min => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_min, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n@@ -501,9 +598,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 };\n                 fx.bcx.ins().select(lt, a, b)\n             });\n-        };\n+        }\n+\n+        sym::simd_reduce_max => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_max, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n@@ -518,9 +617,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 };\n                 fx.bcx.ins().select(gt, a, b)\n             });\n-        };\n+        }\n+\n+        sym::simd_select => {\n+            intrinsic_args!(fx, args => (m, a, b); intrinsic);\n \n-        simd_select, (c m, c a, c b) {\n             if !m.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, m.layout().ty);\n                 return;\n@@ -540,15 +641,19 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let b_lane = b.value_lane(fx, lane).load_scalar(fx);\n \n                 let m_lane = fx.bcx.ins().icmp_imm(IntCC::Equal, m_lane, 0);\n-                let res_lane = CValue::by_val(fx.bcx.ins().select(m_lane, b_lane, a_lane), lane_layout);\n+                let res_lane =\n+                    CValue::by_val(fx.bcx.ins().select(m_lane, b_lane, a_lane), lane_layout);\n \n                 ret.place_lane(fx, lane).write_cvalue(fx, res_lane);\n             }\n-        };\n+        }\n \n         // simd_saturating_*\n         // simd_bitmask\n         // simd_scatter\n         // simd_gather\n+        _ => {\n+            fx.tcx.sess.span_fatal(span, &format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n+        }\n     }\n }"}, {"sha": "3380226164460c74254966bf27dc14c15a564887", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -23,8 +23,8 @@ use rustc_trait_selection::traits::SelectionContext;\n \n use super::ConstCx;\n use crate::errors::{\n-    MutDerefErr, NonConstOpErr, PanicNonStrErr, RawPtrComparisonErr, RawPtrToIntErr,\n-    StaticAccessErr, TransientMutBorrowErr, TransientMutBorrowErrRaw,\n+    MutDerefErr, NonConstOpErr, PanicNonStrErr, RawPtrToIntErr, StaticAccessErr,\n+    TransientMutBorrowErr, TransientMutBorrowErrRaw,\n };\n use crate::util::{call_kind, CallDesugaringKind, CallKind};\n \n@@ -654,10 +654,10 @@ pub struct RawPtrComparison;\n impl<'tcx> NonConstOp<'tcx> for RawPtrComparison {\n     fn build_error(\n         &self,\n-        ccx: &ConstCx<'_, 'tcx>,\n+        _: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        ccx.tcx.sess.create_err(RawPtrComparisonErr { span })\n+        span_bug!(span, \"raw ptr comparison should already be caught in the trait system\");\n     }\n }\n "}, {"sha": "a1c7b70bd9cdf5e72f3f207176fb3bc77e91f484", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -430,7 +430,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     #[instrument(skip(self), level = \"trace\")]\n-    pub fn opaque_ty_origin_unchecked(&self, def_id: LocalDefId, span: Span) -> OpaqueTyOrigin {\n+    fn opaque_ty_origin_unchecked(&self, def_id: LocalDefId, span: Span) -> OpaqueTyOrigin {\n         let origin = match self.tcx.hir().expect_item(def_id).kind {\n             hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => origin,\n             ref itemkind => {"}, {"sha": "31c523aaca9ae39614fea9658eb9c4322fb2646e", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -829,6 +829,14 @@ impl<'tcx> TraitPredicate<'tcx> {\n     pub fn is_const_if_const(self) -> bool {\n         self.constness == BoundConstness::ConstIfConst\n     }\n+\n+    pub fn is_constness_satisfied_by(self, constness: hir::Constness) -> bool {\n+        match (self.constness, constness) {\n+            (BoundConstness::NotConst, _)\n+            | (BoundConstness::ConstIfConst, hir::Constness::Const) => true,\n+            (BoundConstness::ConstIfConst, hir::Constness::NotConst) => false,\n+        }\n+    }\n }\n \n impl<'tcx> PolyTraitPredicate<'tcx> {"}, {"sha": "819513884cedc8555f7c72afdab1da8d15fafbfa", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -2556,7 +2556,7 @@ define_print_and_forward_display! {\n \n     ty::TraitPredicate<'tcx> {\n         p!(print(self.trait_ref.self_ty()), \": \");\n-        if let ty::BoundConstness::ConstIfConst = self.constness {\n+        if let ty::BoundConstness::ConstIfConst = self.constness && cx.tcx().features().const_trait_impl {\n             p!(\"~const \");\n         }\n         p!(print(self.trait_ref.print_only_trait_path()))"}, {"sha": "25ba520ace2bae62ea633a7bd263cb35fdfc82b2", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -631,9 +631,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                         &format!(\n                                             \"expected a closure taking {} argument{}, but one taking {} argument{} was given\",\n                                             given.len(),\n-                                            if given.len() == 1 { \"\" } else { \"s\" },\n+                                            pluralize!(given.len()),\n                                             expected.len(),\n-                                            if expected.len() == 1 { \"\" } else { \"s\" },\n+                                            pluralize!(expected.len()),\n                                         )\n                                     );\n                                 } else if !self.same_type_modulo_infer(given_ty, expected_ty) {\n@@ -666,7 +666,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             );\n                         } else if !suggested {\n                             // Can't show anything else useful, try to find similar impls.\n-                            let impl_candidates = self.find_similar_impl_candidates(trait_ref);\n+                            let impl_candidates = self.find_similar_impl_candidates(trait_predicate);\n                             if !self.report_similar_impl_candidates(\n                                 impl_candidates,\n                                 trait_ref,\n@@ -701,7 +701,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 {\n                                     let trait_ref = trait_pred.to_poly_trait_ref();\n                                     let impl_candidates =\n-                                        self.find_similar_impl_candidates(trait_ref);\n+                                        self.find_similar_impl_candidates(trait_pred);\n                                     self.report_similar_impl_candidates(\n                                         impl_candidates,\n                                         trait_ref,\n@@ -1325,7 +1325,7 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n \n     fn find_similar_impl_candidates(\n         &self,\n-        trait_ref: ty::PolyTraitRef<'tcx>,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> Vec<ImplCandidate<'tcx>>;\n \n     fn report_similar_impl_candidates(\n@@ -1694,18 +1694,22 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n \n     fn find_similar_impl_candidates(\n         &self,\n-        trait_ref: ty::PolyTraitRef<'tcx>,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> Vec<ImplCandidate<'tcx>> {\n         self.tcx\n-            .all_impls(trait_ref.def_id())\n+            .all_impls(trait_pred.def_id())\n             .filter_map(|def_id| {\n-                if self.tcx.impl_polarity(def_id) == ty::ImplPolarity::Negative {\n+                if self.tcx.impl_polarity(def_id) == ty::ImplPolarity::Negative\n+                    || !trait_pred\n+                        .skip_binder()\n+                        .is_constness_satisfied_by(self.tcx.constness(def_id))\n+                {\n                     return None;\n                 }\n \n                 let imp = self.tcx.impl_trait_ref(def_id).unwrap();\n \n-                self.fuzzy_match_tys(trait_ref.skip_binder().self_ty(), imp.self_ty(), false)\n+                self.fuzzy_match_tys(trait_pred.skip_binder().self_ty(), imp.self_ty(), false)\n                     .map(|similarity| ImplCandidate { trait_ref: imp, similarity })\n             })\n             .collect()"}, {"sha": "eb22938fb61c47299e48cbce2ae7577fc8903dd9", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -15,7 +15,7 @@ use crate::check::{\n use crate::structured_errors::StructuredDiagnostic;\n \n use rustc_ast as ast;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticId, MultiSpan};\n+use rustc_errors::{pluralize, Applicability, Diagnostic, DiagnosticId, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -645,7 +645,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     \"argument\"\n                                 ),\n                                 potentially_plural_count(provided_args.len(), \"argument\"),\n-                                if provided_args.len() == 1 { \"was\" } else { \"were\" }\n+                                pluralize!(\"was\", provided_args.len())\n                             ),\n                             DiagnosticId::Error(err_code.to_owned()),\n                         );\n@@ -770,7 +770,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if c_variadic { \"at least \" } else { \"\" },\n                     potentially_plural_count(formal_and_expected_inputs.len(), \"argument\"),\n                     potentially_plural_count(provided_args.len(), \"argument\"),\n-                    if provided_args.len() == 1 { \"was\" } else { \"were\" }\n+                    pluralize!(\"was\", provided_args.len())\n                 ),\n                 DiagnosticId::Error(err_code.to_owned()),\n             )"}, {"sha": "56fcd9e0a890743c93f6a118969957760ede4f31", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1122,7 +1122,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                          add a `use` for {one_of_them}:\",\n                         an = if candidates.len() == 1 { \"an\" } else { \"\" },\n                         s = pluralize!(candidates.len()),\n-                        were = if candidates.len() == 1 { \"was\" } else { \"were\" },\n+                        were = pluralize!(\"was\", candidates.len()),\n                         one_of_them = if candidates.len() == 1 { \"it\" } else { \"one_of_them\" },\n                     );\n                     self.suggest_use_candidates(&mut err, help, candidates);"}, {"sha": "e65955fe86038067ba29845b5450d7e34fe51c7a", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -2,7 +2,7 @@ use crate::check::regionck::OutlivesEnvironmentExt;\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n@@ -474,7 +474,7 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n         unsatisfied_bounds.sort();\n \n         if !unsatisfied_bounds.is_empty() {\n-            let plural = if unsatisfied_bounds.len() > 1 { \"s\" } else { \"\" };\n+            let plural = pluralize!(unsatisfied_bounds.len());\n             let mut err = tcx.sess.struct_span_err(\n                 gat_item_hir.span,\n                 &format!(\"missing required bound{} on `{}`\", plural, gat_item_hir.ident),"}, {"sha": "0e78c60ca5b6a5b6f3770754b80c74a6dffe6787", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -2090,10 +2090,17 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n         // from the trait itself that *shouldn't* be shown as the source of\n         // an obligation and instead be skipped. Otherwise we'd use\n         // `tcx.def_span(def_id);`\n+\n+        let constness = if tcx.has_attr(def_id, sym::const_trait) {\n+            ty::BoundConstness::ConstIfConst\n+        } else {\n+            ty::BoundConstness::NotConst\n+        };\n+\n         let span = rustc_span::DUMMY_SP;\n         result.predicates =\n             tcx.arena.alloc_from_iter(result.predicates.iter().copied().chain(std::iter::once((\n-                ty::TraitRef::identity(tcx, def_id).without_const().to_predicate(tcx),\n+                ty::TraitRef::identity(tcx, def_id).with_constness(constness).to_predicate(tcx),\n                 span,\n             ))));\n     }"}, {"sha": "64ac655e0c393f43cd5282bcc4dc3fe7b1dab3ee", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 119, "deletions": 29, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -335,37 +335,11 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     tcx.mk_adt(def, substs)\n                 }\n                 ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::TyAlias, .. }) => {\n-                    find_opaque_ty_constraints(tcx, def_id)\n+                    find_opaque_ty_constraints_for_tait(tcx, def_id)\n                 }\n                 // Opaque types desugared from `impl Trait`.\n                 ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::FnReturn(owner) | hir::OpaqueTyOrigin::AsyncFn(owner), .. }) => {\n-                    let concrete_ty = tcx\n-                        .mir_borrowck(owner)\n-                        .concrete_opaque_types\n-                        .get(&def_id)\n-                        .copied()\n-                        .map(|concrete| concrete.ty)\n-                        .unwrap_or_else(|| {\n-                            let table = tcx.typeck(owner);\n-                            if let Some(_) = table.tainted_by_errors {\n-                                // Some error in the\n-                                // owner fn prevented us from populating\n-                                // the `concrete_opaque_types` table.\n-                                tcx.ty_error()\n-                            } else {\n-                                table.concrete_opaque_types.get(&def_id).copied().unwrap_or_else(|| {\n-                                    // We failed to resolve the opaque type or it\n-                                    // resolves to itself. We interpret this as the\n-                                    // no values of the hidden type ever being constructed,\n-                                    // so we can just make the hidden type be `!`.\n-                                    // For backwards compatibility reasons, we fall back to\n-                                    // `()` until we the diverging default is changed.\n-                                    Some(tcx.mk_diverging_default())\n-                                }).expect(\"RPIT always have a hidden type from typeck\")\n-                            }\n-                        });\n-                    debug!(\"concrete_ty = {:?}\", concrete_ty);\n-                    concrete_ty\n+                    find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n                 }\n                 ItemKind::Trait(..)\n                 | ItemKind::TraitAlias(..)\n@@ -519,7 +493,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n /// fn b<T>() -> Foo<T, u32> { .. }\n /// ```\n ///\n-fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n+fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     use rustc_hir::{Expr, ImplItem, Item, TraitItem};\n \n     struct ConstraintLocator<'tcx> {\n@@ -660,6 +634,122 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     }\n }\n \n+fn find_opaque_ty_constraints_for_rpit(\n+    tcx: TyCtxt<'_>,\n+    def_id: LocalDefId,\n+    owner_def_id: LocalDefId,\n+) -> Ty<'_> {\n+    use rustc_hir::{Expr, ImplItem, Item, TraitItem};\n+\n+    struct ConstraintChecker<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+\n+        /// def_id of the opaque type whose defining uses are being checked\n+        def_id: LocalDefId,\n+\n+        found: ty::OpaqueHiddenType<'tcx>,\n+    }\n+\n+    impl ConstraintChecker<'_> {\n+        #[instrument(skip(self), level = \"debug\")]\n+        fn check(&self, def_id: LocalDefId) {\n+            // Use borrowck to get the type with unerased regions.\n+            let concrete_opaque_types = &self.tcx.mir_borrowck(def_id).concrete_opaque_types;\n+            debug!(?concrete_opaque_types);\n+            for &(def_id, concrete_type) in concrete_opaque_types {\n+                if def_id != self.def_id {\n+                    // Ignore constraints for other opaque types.\n+                    continue;\n+                }\n+\n+                debug!(?concrete_type, \"found constraint\");\n+\n+                if concrete_type.ty != self.found.ty\n+                    && !(concrete_type, self.found).references_error()\n+                {\n+                    self.found.report_mismatch(&concrete_type, self.tcx);\n+                }\n+            }\n+        }\n+    }\n+\n+    impl<'tcx> intravisit::Visitor<'tcx> for ConstraintChecker<'tcx> {\n+        type NestedFilter = nested_filter::OnlyBodies;\n+\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.tcx.hir()\n+        }\n+        fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n+            if let hir::ExprKind::Closure { .. } = ex.kind {\n+                let def_id = self.tcx.hir().local_def_id(ex.hir_id);\n+                self.check(def_id);\n+            }\n+            intravisit::walk_expr(self, ex);\n+        }\n+        fn visit_item(&mut self, it: &'tcx Item<'tcx>) {\n+            trace!(?it.def_id);\n+            // The opaque type itself or its children are not within its reveal scope.\n+            if it.def_id != self.def_id {\n+                self.check(it.def_id);\n+                intravisit::walk_item(self, it);\n+            }\n+        }\n+        fn visit_impl_item(&mut self, it: &'tcx ImplItem<'tcx>) {\n+            trace!(?it.def_id);\n+            // The opaque type itself or its children are not within its reveal scope.\n+            if it.def_id != self.def_id {\n+                self.check(it.def_id);\n+                intravisit::walk_impl_item(self, it);\n+            }\n+        }\n+        fn visit_trait_item(&mut self, it: &'tcx TraitItem<'tcx>) {\n+            trace!(?it.def_id);\n+            self.check(it.def_id);\n+            intravisit::walk_trait_item(self, it);\n+        }\n+    }\n+\n+    let concrete = tcx.mir_borrowck(owner_def_id).concrete_opaque_types.get(&def_id).copied();\n+\n+    if let Some(concrete) = concrete {\n+        let scope = tcx.hir().local_def_id_to_hir_id(owner_def_id);\n+        debug!(?scope);\n+        let mut locator = ConstraintChecker { def_id: def_id, tcx, found: concrete };\n+\n+        match tcx.hir().get(scope) {\n+            Node::Item(it) => intravisit::walk_item(&mut locator, it),\n+            Node::ImplItem(it) => intravisit::walk_impl_item(&mut locator, it),\n+            Node::TraitItem(it) => intravisit::walk_trait_item(&mut locator, it),\n+            other => bug!(\"{:?} is not a valid scope for an opaque type item\", other),\n+        }\n+    }\n+\n+    concrete.map(|concrete| concrete.ty).unwrap_or_else(|| {\n+        let table = tcx.typeck(owner_def_id);\n+        if let Some(_) = table.tainted_by_errors {\n+            // Some error in the\n+            // owner fn prevented us from populating\n+            // the `concrete_opaque_types` table.\n+            tcx.ty_error()\n+        } else {\n+            table\n+                .concrete_opaque_types\n+                .get(&def_id)\n+                .copied()\n+                .unwrap_or_else(|| {\n+                    // We failed to resolve the opaque type or it\n+                    // resolves to itself. We interpret this as the\n+                    // no values of the hidden type ever being constructed,\n+                    // so we can just make the hidden type be `!`.\n+                    // For backwards compatibility reasons, we fall back to\n+                    // `()` until we the diverging default is changed.\n+                    Some(tcx.mk_diverging_default())\n+                })\n+                .expect(\"RPIT always have a hidden type from typeck\")\n+        }\n+    })\n+}\n+\n fn infer_placeholder_type<'a>(\n     tcx: TyCtxt<'a>,\n     def_id: LocalDefId,"}, {"sha": "99729391e02b0bc367510f9fb549857c556cb765", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -420,20 +420,18 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         let provided_lt_args = self.num_provided_lifetime_args();\n         let provided_type_or_const_args = self.num_provided_type_or_const_args();\n \n-        let get_verb = |num_args| if num_args == 1 { \"was\" } else { \"were\" };\n-\n         let (provided_args_str, verb) = match self.gen_args_info {\n             MissingLifetimes { .. } | ExcessLifetimes { .. } => (\n                 format!(\"{} lifetime argument{}\", provided_lt_args, pluralize!(provided_lt_args)),\n-                get_verb(provided_lt_args),\n+                pluralize!(\"was\", provided_lt_args),\n             ),\n             MissingTypesOrConsts { .. } | ExcessTypesOrConsts { .. } => (\n                 format!(\n                     \"{} generic argument{}\",\n                     provided_type_or_const_args,\n                     pluralize!(provided_type_or_const_args)\n                 ),\n-                get_verb(provided_type_or_const_args),\n+                pluralize!(\"was\", provided_type_or_const_args),\n             ),\n         };\n "}, {"sha": "20bb67687848fc1cb9c68dcdab594b2553743b39", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1503,9 +1503,10 @@ mod impls {\n     // & pointers\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+    impl<A: ?Sized, B: ?Sized> const PartialEq<&B> for &A\n     where\n-        A: PartialEq<B>,\n+        A: ~const PartialEq<B>,\n     {\n         #[inline]\n         fn eq(&self, other: &&B) -> bool {"}, {"sha": "2f3ca41723d8558ff9c3570576103d4dee5571f2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 61, "deletions": 58, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -327,10 +327,12 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for ty::Predicate<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<WherePredicate> {\n         let bound_predicate = self.kind();\n         match bound_predicate.skip_binder() {\n-            ty::PredicateKind::Trait(pred) => bound_predicate.rebind(pred).clean(cx),\n-            ty::PredicateKind::RegionOutlives(pred) => pred.clean(cx),\n-            ty::PredicateKind::TypeOutlives(pred) => pred.clean(cx),\n-            ty::PredicateKind::Projection(pred) => Some(pred.clean(cx)),\n+            ty::PredicateKind::Trait(pred) => {\n+                clean_poly_trait_predicate(bound_predicate.rebind(pred), cx)\n+            }\n+            ty::PredicateKind::RegionOutlives(pred) => clean_region_outlives_predicate(pred, cx),\n+            ty::PredicateKind::TypeOutlives(pred) => clean_type_outlives_predicate(pred, cx),\n+            ty::PredicateKind::Projection(pred) => Some(clean_projection_predicate(pred, cx)),\n             ty::PredicateKind::ConstEvaluatable(..) => None,\n             ty::PredicateKind::WellFormed(..) => None,\n \n@@ -344,57 +346,56 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for ty::Predicate<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Option<WherePredicate>> for ty::PolyTraitPredicate<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<WherePredicate> {\n-        // `T: ~const Destruct` is hidden because `T: Destruct` is a no-op.\n-        if self.skip_binder().constness == ty::BoundConstness::ConstIfConst\n-            && Some(self.skip_binder().def_id()) == cx.tcx.lang_items().destruct_trait()\n-        {\n-            return None;\n-        }\n-\n-        let poly_trait_ref = self.map_bound(|pred| pred.trait_ref);\n-        Some(WherePredicate::BoundPredicate {\n-            ty: clean_middle_ty(poly_trait_ref.skip_binder().self_ty(), cx, None),\n-            bounds: vec![poly_trait_ref.clean(cx)],\n-            bound_params: Vec::new(),\n-        })\n+fn clean_poly_trait_predicate<'tcx>(\n+    pred: ty::PolyTraitPredicate<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Option<WherePredicate> {\n+    // `T: ~const Destruct` is hidden because `T: Destruct` is a no-op.\n+    if pred.skip_binder().constness == ty::BoundConstness::ConstIfConst\n+        && Some(pred.skip_binder().def_id()) == cx.tcx.lang_items().destruct_trait()\n+    {\n+        return None;\n     }\n-}\n \n-impl<'tcx> Clean<'tcx, Option<WherePredicate>>\n-    for ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>\n-{\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<WherePredicate> {\n-        let ty::OutlivesPredicate(a, b) = self;\n+    let poly_trait_ref = pred.map_bound(|pred| pred.trait_ref);\n+    Some(WherePredicate::BoundPredicate {\n+        ty: clean_middle_ty(poly_trait_ref.skip_binder().self_ty(), cx, None),\n+        bounds: vec![poly_trait_ref.clean(cx)],\n+        bound_params: Vec::new(),\n+    })\n+}\n \n-        if a.is_empty() && b.is_empty() {\n-            return None;\n-        }\n+fn clean_region_outlives_predicate<'tcx>(\n+    pred: ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Option<WherePredicate> {\n+    let ty::OutlivesPredicate(a, b) = pred;\n \n-        Some(WherePredicate::RegionPredicate {\n-            lifetime: a.clean(cx).expect(\"failed to clean lifetime\"),\n-            bounds: vec![GenericBound::Outlives(b.clean(cx).expect(\"failed to clean bounds\"))],\n-        })\n+    if a.is_empty() && b.is_empty() {\n+        return None;\n     }\n-}\n \n-impl<'tcx> Clean<'tcx, Option<WherePredicate>>\n-    for ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>\n-{\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<WherePredicate> {\n-        let ty::OutlivesPredicate(ty, lt) = self;\n+    Some(WherePredicate::RegionPredicate {\n+        lifetime: a.clean(cx).expect(\"failed to clean lifetime\"),\n+        bounds: vec![GenericBound::Outlives(b.clean(cx).expect(\"failed to clean bounds\"))],\n+    })\n+}\n \n-        if lt.is_empty() {\n-            return None;\n-        }\n+fn clean_type_outlives_predicate<'tcx>(\n+    pred: ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Option<WherePredicate> {\n+    let ty::OutlivesPredicate(ty, lt) = pred;\n \n-        Some(WherePredicate::BoundPredicate {\n-            ty: clean_middle_ty(*ty, cx, None),\n-            bounds: vec![GenericBound::Outlives(lt.clean(cx).expect(\"failed to clean lifetimes\"))],\n-            bound_params: Vec::new(),\n-        })\n+    if lt.is_empty() {\n+        return None;\n     }\n+\n+    Some(WherePredicate::BoundPredicate {\n+        ty: clean_middle_ty(ty, cx, None),\n+        bounds: vec![GenericBound::Outlives(lt.clean(cx).expect(\"failed to clean lifetimes\"))],\n+        bound_params: Vec::new(),\n+    })\n }\n \n impl<'tcx> Clean<'tcx, Term> for ty::Term<'tcx> {\n@@ -418,10 +419,14 @@ impl<'tcx> Clean<'tcx, Term> for hir::Term<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, WherePredicate> for ty::ProjectionPredicate<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> WherePredicate {\n-        let ty::ProjectionPredicate { projection_ty, term } = self;\n-        WherePredicate::EqPredicate { lhs: projection_ty.clean(cx), rhs: term.clean(cx) }\n+fn clean_projection_predicate<'tcx>(\n+    pred: ty::ProjectionPredicate<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> WherePredicate {\n+    let ty::ProjectionPredicate { projection_ty, term } = pred;\n+    WherePredicate::EqPredicate {\n+        lhs: clean_projection(projection_ty, cx, None),\n+        rhs: term.clean(cx),\n     }\n }\n \n@@ -447,12 +452,6 @@ fn clean_projection<'tcx>(\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Type> for ty::ProjectionTy<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Type {\n-        clean_projection(*self, cx, None)\n-    }\n-}\n-\n fn compute_should_show_cast(self_def_id: Option<DefId>, trait_: &Path, self_type: &Type) -> bool {\n     !trait_.segments.is_empty()\n         && self_def_id\n@@ -734,8 +733,12 @@ fn clean_ty_generics<'tcx>(\n                             .filter(|b| !b.is_sized_bound(cx)),\n                     );\n \n-                    let proj = projection\n-                        .map(|p| (p.skip_binder().projection_ty.clean(cx), p.skip_binder().term));\n+                    let proj = projection.map(|p| {\n+                        (\n+                            clean_projection(p.skip_binder().projection_ty, cx, None),\n+                            p.skip_binder().term,\n+                        )\n+                    });\n                     if let Some(((_, trait_did, name), rhs)) = proj\n                         .as_ref()\n                         .and_then(|(lhs, rhs): &(Type, _)| Some((lhs.projection()?, rhs)))"}, {"sha": "d6c48e63bb3ce70f98fbdbebddae06b2019356a7", "filename": "src/test/ui/const-generics/issues/issue-90318.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -12,16 +12,14 @@ impl True for If<true> {}\n fn consume<T: 'static>(_val: T)\n where\n     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-    //~^ ERROR: overly complex generic constant\n-    //~| ERROR: cannot call non-const operator in constants\n+    //~^ ERROR: can't compare\n {\n }\n \n fn test<T: 'static>()\n where\n     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-    //~^ ERROR: overly complex generic constant\n-    //~| ERROR: cannot call non-const operator in constants\n+    //~^ ERROR: can't compare\n {\n }\n "}, {"sha": "aba4b5c1a8d8d8794f8cae24f8bf22d3ad610f33", "filename": "src/test/ui/const-generics/issues/issue-90318.stderr", "status": "modified", "additions": 16, "deletions": 40, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,53 +1,29 @@\n-error: overly complex generic constant\n-  --> $DIR/issue-90318.rs:14:8\n+error[E0277]: can't compare `TypeId` with `_` in const contexts\n+  --> $DIR/issue-90318.rs:14:28\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |        ^^-----------------^^^^^^^^^^^^^^^^^^^^^^^^\n-   |          |\n-   |          borrowing is not supported in generic constants\n+   |                            ^^ no implementation for `TypeId == _`\n    |\n-   = help: consider moving this anonymous constant into a `const` function\n-   = note: this operation may be supported in the future\n-\n-error[E0015]: cannot call non-const operator in constants\n-  --> $DIR/issue-90318.rs:14:10\n+   = help: the trait `~const PartialEq<_>` is not implemented for `TypeId`\n+note: the trait `PartialEq<_>` is implemented for `TypeId`, but that implementation is not `const`\n+  --> $DIR/issue-90318.rs:14:28\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: impl defined here, but it is not `const`\n-  --> $SRC_DIR/core/src/any.rs:LL:COL\n-   |\n-LL | #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-   |                       ^^^^^^^^^\n-   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n-   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |                            ^^\n \n-error: overly complex generic constant\n-  --> $DIR/issue-90318.rs:22:8\n+error[E0277]: can't compare `TypeId` with `_` in const contexts\n+  --> $DIR/issue-90318.rs:21:28\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |        ^^-----------------^^^^^^^^^^^^^^^^^^^^^^^^\n-   |          |\n-   |          borrowing is not supported in generic constants\n+   |                            ^^ no implementation for `TypeId == _`\n    |\n-   = help: consider moving this anonymous constant into a `const` function\n-   = note: this operation may be supported in the future\n-\n-error[E0015]: cannot call non-const operator in constants\n-  --> $DIR/issue-90318.rs:22:10\n+   = help: the trait `~const PartialEq<_>` is not implemented for `TypeId`\n+note: the trait `PartialEq<_>` is implemented for `TypeId`, but that implementation is not `const`\n+  --> $DIR/issue-90318.rs:21:28\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: impl defined here, but it is not `const`\n-  --> $SRC_DIR/core/src/any.rs:LL:COL\n-   |\n-LL | #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-   |                       ^^^^^^^^^\n-   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n-   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |                            ^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "cd7c980077533bea1f5d4366ad82dba067bafb25", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,6 +1,6 @@\n fn main() {}\n \n // unconst and bad, will thus error in miri\n-const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 }; //~ ERROR cannot be reliably\n+const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 }; //~ ERROR can't compare\n // unconst and bad, will thus error in miri\n-const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 }; //~ ERROR cannot be reliably\n+const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 }; //~ ERROR can't compare"}, {"sha": "168fa0ad0f0ed0ad2c567800ebaa26b9cc80c8a7", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,18 +1,49 @@\n-error: pointers cannot be reliably compared during const eval\n-  --> $DIR/const_raw_ptr_ops.rs:4:26\n+error[E0277]: can't compare `*const i32` with `_` in const contexts\n+  --> $DIR/const_raw_ptr_ops.rs:4:43\n    |\n LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                           ^^ no implementation for `*const i32 == _`\n    |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n+   = help: the trait `~const PartialEq<_>` is not implemented for `*const i32`\n+note: the trait `PartialEq<_>` is implemented for `*const i32`, but that implementation is not `const`\n+  --> $DIR/const_raw_ptr_ops.rs:4:43\n+   |\n+LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n+   |                                           ^^\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n+             f32\n+             f64\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n+           and 6 others\n \n-error: pointers cannot be reliably compared during const eval\n-  --> $DIR/const_raw_ptr_ops.rs:6:27\n+error[E0277]: can't compare `*const i32` with `_` in const contexts\n+  --> $DIR/const_raw_ptr_ops.rs:6:44\n    |\n LL | const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                            ^^ no implementation for `*const i32 == _`\n    |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n+   = help: the trait `~const PartialEq<_>` is not implemented for `*const i32`\n+note: the trait `PartialEq<_>` is implemented for `*const i32`, but that implementation is not `const`\n+  --> $DIR/const_raw_ptr_ops.rs:6:44\n+   |\n+LL | const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };\n+   |                                            ^^\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n+             f32\n+             f64\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n+           and 6 others\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c340c30a113b5108a4e719b8d67f20afb9cb6533", "filename": "src/test/ui/consts/issue-25826.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,6 +1,6 @@\n fn id<T>(t: T) -> T { t }\n fn main() {\n     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n-    //~^ ERROR pointers cannot be reliably compared during const eval\n+    //~^ ERROR can't compare\n     println!(\"{}\", A);\n }"}, {"sha": "b80befa26f6e007392731a55ee323596a621adf3", "filename": "src/test/ui/consts/issue-25826.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-25826.stderr?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,10 +1,20 @@\n-error: pointers cannot be reliably compared during const eval\n-  --> $DIR/issue-25826.rs:3:30\n+error[E0277]: can't compare `*const ()` with `*const ()` in const contexts\n+  --> $DIR/issue-25826.rs:3:52\n    |\n LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                    ^ no implementation for `*const () < *const ()` and `*const () > *const ()`\n    |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n+   = help: the trait `~const PartialOrd` is not implemented for `*const ()`\n+note: the trait `PartialOrd` is implemented for `*const ()`, but that implementation is not `const`\n+  --> $DIR/issue-25826.rs:3:52\n+   |\n+LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n+   |                                                    ^\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn main() where *const (): ~const PartialOrd {\n+   |           ++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9a2775688c6fa43c1f1a2b1c515b7350de3de96d", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,6 +1,6 @@\n const fn cmp(x: fn(), y: fn()) -> bool {\n     unsafe { x == y }\n-    //~^ ERROR pointers cannot be reliably compared\n+    //~^ ERROR can't compare\n }\n \n fn main() {}"}, {"sha": "8a1b20a334567a9e041da3aa42a2716df4b438c6", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,10 +1,16 @@\n-error: pointers cannot be reliably compared during const eval\n-  --> $DIR/cmp_fn_pointers.rs:2:14\n+error[E0277]: can't compare `fn()` with `_` in const contexts\n+  --> $DIR/cmp_fn_pointers.rs:2:16\n    |\n LL |     unsafe { x == y }\n-   |              ^^^^^^\n+   |                ^^ no implementation for `fn() == _`\n    |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n+   = help: the trait `~const PartialEq<_>` is not implemented for `fn()`\n+note: the trait `PartialEq<_>` is implemented for `fn()`, but that implementation is not `const`\n+  --> $DIR/cmp_fn_pointers.rs:2:16\n+   |\n+LL |     unsafe { x == y }\n+   |                ^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "13e6af36e0200225f5277c4937d5e10c196e636e", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -2,14 +2,8 @@\n #![feature(core_intrinsics)]\n #![allow(const_err)]\n \n-// During CTFE, we prevent pointer comparison and pointer-to-int casts.\n-\n-static CMP: () = {\n-    let x = &0 as *const _;\n-    let _v = x == x;\n-    //~^ ERROR could not evaluate static initializer\n-    //~| \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n-};\n+// During CTFE, we prevent pointer-to-int casts.\n+// Pointer comparisons are prevented in the trait system.\n \n static PTR_INT_CAST: () = {\n     let x = &0 as *const _ as usize;"}, {"sha": "00cff23fb3fbe4471c490bdd82afa3a4424fc7b8", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,34 +1,23 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ptr_arith.rs:9:14\n-   |\n-LL |     let _v = x == x;\n-   |              ^^^^^^ \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n-\n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/ptr_arith.rs:15:13\n+  --> $DIR/ptr_arith.rs:9:13\n    |\n LL |     let x = &0 as *const _ as usize;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ \"exposing pointers\" needs an rfc before being allowed inside constants\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ptr_arith.rs:23:14\n+  --> $DIR/ptr_arith.rs:17:14\n    |\n LL |     let _v = x + 0;\n    |              ^ unable to turn pointer into raw bytes\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/ptr_arith.rs:9:14\n-   |\n-LL |     let _v = x == x;\n-   |              ^^^^^^\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/ptr_arith.rs:15:13\n+  --> $DIR/ptr_arith.rs:9:13\n    |\n LL |     let x = &0 as *const _ as usize;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "d2edd97efb232e6bd2a34d6053ea5a79f5a4672b", "filename": "src/test/ui/error-codes/E0395.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50166d5e5e82ca795306824decbe4ffabcc23d3d/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50166d5e5e82ca795306824decbe4ffabcc23d3d/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs?ref=50166d5e5e82ca795306824decbe4ffabcc23d3d", "patch": "@@ -1,8 +0,0 @@\n-static FOO: i32 = 42;\n-static BAR: i32 = 42;\n-\n-static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) };\n-//~^ ERROR pointers cannot be reliably compared during const eval\n-\n-fn main() {\n-}"}, {"sha": "ea17e95a719affe5459868910029d459b388a771", "filename": "src/test/ui/error-codes/E0395.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50166d5e5e82ca795306824decbe4ffabcc23d3d/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50166d5e5e82ca795306824decbe4ffabcc23d3d/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr?ref=50166d5e5e82ca795306824decbe4ffabcc23d3d", "patch": "@@ -1,10 +0,0 @@\n-error: pointers cannot be reliably compared during const eval\n-  --> $DIR/E0395.rs:4:29\n-   |\n-LL | static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) };\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n-\n-error: aborting due to previous error\n-"}, {"sha": "14ac688806bda2a6da34b5bc1bbe90c182125ef2", "filename": "src/test/ui/impl-trait/issue-99073-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -7,7 +7,7 @@ fn main() {\n fn test<T: Display>(t: T, recurse: bool) -> impl Display {\n     let f = || {\n         let i: u32 = test::<i32>(-1, false);\n-        //~^ ERROR mismatched types\n+        //~^ ERROR concrete type differs from previous defining opaque type use\n         println!(\"{i}\");\n     };\n     if recurse {"}, {"sha": "913bc8f5674acf1915d349a13f9b4b1f9585be6a", "filename": "src/test/ui/impl-trait/issue-99073-2.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.stderr?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,15 +1,14 @@\n-error[E0308]: mismatched types\n+error: concrete type differs from previous defining opaque type use\n   --> $DIR/issue-99073-2.rs:9:22\n    |\n-LL | fn test<T: Display>(t: T, recurse: bool) -> impl Display {\n-   |                                             ------------ the expected opaque type\n-LL |     let f = || {\n LL |         let i: u32 = test::<i32>(-1, false);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^ types differ\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^ expected `T`, got `u32`\n    |\n-   = note: expected opaque type `impl std::fmt::Display`\n-                     found type `u32`\n+note: previous use here\n+  --> $DIR/issue-99073-2.rs:16:5\n+   |\n+LL |     t\n+   |     ^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "7798e247df0a2c77ade50b3d0a054404ec2e2526", "filename": "src/test/ui/impl-trait/issue-99073.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,8 +1,8 @@\n fn main() {\n-    let _ = fix(|_: &dyn Fn()| {});\n+  let _ = fix(|_: &dyn Fn()| {});\n }\n \n fn fix<F: Fn(G), G: Fn()>(f: F) -> impl Fn() {\n-    move || f(fix(&f))\n-    //~^ ERROR mismatched types\n+  move || f(fix(&f))\n+  //~^ ERROR concrete type differs from previous defining opaque type use\n }"}, {"sha": "54636795349688544df9ab794e5f53db0f0d08f1", "filename": "src/test/ui/impl-trait/issue-99073.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.stderr?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,14 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-99073.rs:6:13\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/issue-99073.rs:6:11\n    |\n-LL | fn fix<F: Fn(G), G: Fn()>(f: F) -> impl Fn() {\n-   |                                    --------- the expected opaque type\n-LL |     move || f(fix(&f))\n-   |             ^^^^^^^^^^ types differ\n+LL |   move || f(fix(&f))\n+   |           ^^^^^^^^^^ expected `[closure@$DIR/issue-99073.rs:6:3: 6:10]`, got `G`\n    |\n-   = note: expected opaque type `impl Fn()`\n-           found type parameter `G`\n+note: previous use here\n+  --> $DIR/issue-99073.rs:6:3\n+   |\n+LL |   move || f(fix(&f))\n+   |   ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "d65818234ef97193dabf362725ef58395c3a40b9", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:29]: ~const FnOnce<()>` is not satisfied\n+error[E0277]: the trait bound `[closure@$DIR/const-eval-select-bad.rs:7:27: 7:29]: FnOnce<()>` is not satisfied\n   --> $DIR/const-eval-select-bad.rs:7:27\n    |\n LL |     const_eval_select((), || {}, || {});\n@@ -19,7 +19,7 @@ note: required by a bound in `const_eval_select`\n LL |     F: ~const FnOnce<ARG, Output = RET>,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n-error[E0277]: the trait bound `{integer}: ~const FnOnce<()>` is not satisfied\n+error[E0277]: the trait bound `{integer}: FnOnce<()>` is not satisfied\n   --> $DIR/const-eval-select-bad.rs:9:27\n    |\n LL |     const_eval_select((), 42, 0xDEADBEEF);"}, {"sha": "2bc5ee512c52fd1c77672e55b8c89926409a3756", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -3,7 +3,6 @@\n pub const fn equals_self<T: PartialEq>(t: &T) -> bool {\n     *t == *t\n     //~^ ERROR can't compare\n-    //~| ERROR cannot call non-const\n }\n \n fn main() {}"}, {"sha": "83d395dda196ae6af7abaa9a1680e05246dcbd98", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.stderr", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,28 +1,16 @@\n-error[E0277]: can't compare `T` with `T` in const contexts\n-  --> $DIR/call-generic-method-fail.rs:4:5\n+error[E0277]: can't compare `T` with `_` in const contexts\n+  --> $DIR/call-generic-method-fail.rs:4:8\n    |\n LL |     *t == *t\n-   |     ^^^^^^^^ no implementation for `T == T`\n+   |        ^^ no implementation for `T == _`\n    |\n-note: the trait `PartialEq` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/call-generic-method-fail.rs:4:5\n+note: the trait `PartialEq<_>` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/call-generic-method-fail.rs:4:8\n    |\n LL |     *t == *t\n-   |     ^^^^^^^^\n+   |        ^^\n+   = help: the trait `PartialEq<&B>` is implemented for `&A`\n \n-error[E0015]: cannot call non-const operator in constant functions\n-  --> $DIR/call-generic-method-fail.rs:4:5\n-   |\n-LL |     *t == *t\n-   |     ^^^^^^^^\n-   |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-help: consider further restricting this bound\n-   |\n-LL | pub const fn equals_self<T: PartialEq + ~const std::cmp::PartialEq>(t: &T) -> bool {\n-   |                                       ++++++++++++++++++++++++++++\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "140a06a73ac6d636909b49517ba77a2d4161846a", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -23,7 +23,6 @@ impl const ConstDefaultFn for ConstImpl {\n const fn test() {\n     NonConstImpl.a();\n     //~^ ERROR the trait bound\n-    //~| ERROR cannot call non-const fn\n     ConstImpl.a();\n }\n "}, {"sha": "ec724cc9675f134dc8d422b7209ec448ed4c6cbe", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.stderr", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -2,23 +2,18 @@ error[E0277]: the trait bound `NonConstImpl: ~const ConstDefaultFn` is not satis\n   --> $DIR/const-default-method-bodies.rs:24:18\n    |\n LL |     NonConstImpl.a();\n-   |                  ^^^ the trait `~const ConstDefaultFn` is not implemented for `NonConstImpl`\n+   |                  ^ the trait `~const ConstDefaultFn` is not implemented for `NonConstImpl`\n    |\n note: the trait `ConstDefaultFn` is implemented for `NonConstImpl`, but that implementation is not `const`\n   --> $DIR/const-default-method-bodies.rs:24:18\n    |\n LL |     NonConstImpl.a();\n-   |                  ^^^\n-\n-error[E0015]: cannot call non-const fn `<NonConstImpl as ConstDefaultFn>::a` in constant functions\n-  --> $DIR/const-default-method-bodies.rs:24:18\n-   |\n-LL |     NonConstImpl.a();\n-   |                  ^^^\n+   |                  ^\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+LL | const fn test() where NonConstImpl: ~const ConstDefaultFn {\n+   |                 +++++++++++++++++++++++++++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "3ca9abb139b86e03753ef05983a639b40360af8b", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.gated.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50166d5e5e82ca795306824decbe4ffabcc23d3d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50166d5e5e82ca795306824decbe4ffabcc23d3d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gated.stderr?ref=50166d5e5e82ca795306824decbe4ffabcc23d3d", "patch": "@@ -1,24 +0,0 @@\n-error[E0277]: the trait bound `cross_crate::NonConst: ~const cross_crate::MyTrait` is not satisfied\n-  --> $DIR/cross-crate.rs:15:14\n-   |\n-LL |     NonConst.func();\n-   |              ^^^^^^ the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n-   |\n-note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst`, but that implementation is not `const`\n-  --> $DIR/cross-crate.rs:15:14\n-   |\n-LL |     NonConst.func();\n-   |              ^^^^^^\n-\n-error[E0015]: cannot call non-const fn `<cross_crate::NonConst as cross_crate::MyTrait>::func` in constant functions\n-  --> $DIR/cross-crate.rs:15:14\n-   |\n-LL |     NonConst.func();\n-   |              ^^^^^^\n-   |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`."}, {"sha": "174c62912fcee84aa56454dcd909d7d19d8eee90", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.gatednc.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `cross_crate::NonConst: ~const cross_crate::MyTrait` is not satisfied\n+  --> $DIR/cross-crate.rs:17:14\n+   |\n+LL |     NonConst.func();\n+   |              ^^^^ the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n+   |\n+note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst`, but that implementation is not `const`\n+  --> $DIR/cross-crate.rs:17:14\n+   |\n+LL |     NonConst.func();\n+   |              ^^^^\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | const fn const_context() where cross_crate::NonConst: ~const cross_crate::MyTrait {\n+   |                          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6df47022cc948077b0d64c82871d7e3db3a2ec6c", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,5 +1,6 @@\n-// revisions: stock gated\n-#![cfg_attr(gated, feature(const_trait_impl))]\n+// revisions: stock gated stocknc gatednc\n+// [gated] check-pass\n+#![cfg_attr(any(gated, gatednc), feature(const_trait_impl))]\n \n // aux-build: cross-crate.rs\n extern crate cross_crate;\n@@ -12,10 +13,12 @@ fn non_const_context() {\n }\n \n const fn const_context() {\n-    NonConst.func(); //~ ERROR: cannot call non-const fn\n-    //[gated]~^ ERROR: the trait bound\n+    #[cfg(any(stocknc, gatednc))]\n+    NonConst.func();\n+    //[stocknc]~^ ERROR: the trait bound\n+    //[gatednc]~^^ ERROR: the trait bound\n     Const.func();\n-    //[stock]~^ ERROR: cannot call non-const fn\n+    //[stock]~^ ERROR: cannot call\n }\n \n fn main() {}"}, {"sha": "086547542bb095323cd027ca5d7ea5746a1289f3", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.stock.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -1,19 +1,11 @@\n-error[E0015]: cannot call non-const fn `<cross_crate::NonConst as cross_crate::MyTrait>::func` in constant functions\n-  --> $DIR/cross-crate.rs:15:14\n-   |\n-LL |     NonConst.func();\n-   |              ^^^^^^\n-   |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-\n error[E0015]: cannot call non-const fn `<cross_crate::Const as cross_crate::MyTrait>::func` in constant functions\n-  --> $DIR/cross-crate.rs:17:11\n+  --> $DIR/cross-crate.rs:20:11\n    |\n LL |     Const.func();\n    |           ^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0015`."}, {"sha": "4619dd1138e1ff2f44539ad71ab69e05167bf792", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.stocknc.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `cross_crate::NonConst: cross_crate::MyTrait` is not satisfied\n+  --> $DIR/cross-crate.rs:17:14\n+   |\n+LL |     NonConst.func();\n+   |              ^^^^ the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n+   |\n+note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst`, but that implementation is not `const`\n+  --> $DIR/cross-crate.rs:17:14\n+   |\n+LL |     NonConst.func();\n+   |              ^^^^\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | const fn const_context() where cross_crate::NonConst: ~const cross_crate::MyTrait {\n+   |                          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f70ecbc3746f992c8b4974a4a6dccc3b950e42f5", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -7,7 +7,6 @@ pub trait Tr {\n     fn b(&self) {\n         ().a()\n         //~^ ERROR the trait bound\n-        //~| ERROR cannot call\n     }\n }\n "}, {"sha": "b229053eb50cfa5e3aaa1bcd6a2aaa10e6bd5499", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.stderr", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a220937c283803bfd5d1155e4a81e6287089504/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr?ref=2a220937c283803bfd5d1155e4a81e6287089504", "patch": "@@ -2,23 +2,18 @@ error[E0277]: the trait bound `(): ~const Tr` is not satisfied\n   --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:12\n    |\n LL |         ().a()\n-   |            ^^^ the trait `~const Tr` is not implemented for `()`\n+   |            ^ the trait `~const Tr` is not implemented for `()`\n    |\n note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n   --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:12\n    |\n LL |         ().a()\n-   |            ^^^\n-\n-error[E0015]: cannot call non-const fn `<() as Tr>::a` in constant functions\n-  --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:12\n-   |\n-LL |         ().a()\n-   |            ^^^\n+   |            ^\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+LL | pub trait Tr where (): ~const Tr {\n+   |              +++++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0277`."}]}