{"sha": "77d3ca1bad2f99fe9a0691551c5524fcc290a406", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZDNjYTFiYWQyZjk5ZmU5YTA2OTE1NTFjNTUyNGZjYzI5MGE0MDY=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-20T02:39:00Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-25T13:50:37Z"}, "message": "add ParamEnv to the trait_cache key", "tree": {"sha": "79ab6869d207542662f78272134df9a714cc31be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79ab6869d207542662f78272134df9a714cc31be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77d3ca1bad2f99fe9a0691551c5524fcc290a406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77d3ca1bad2f99fe9a0691551c5524fcc290a406", "html_url": "https://github.com/rust-lang/rust/commit/77d3ca1bad2f99fe9a0691551c5524fcc290a406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77d3ca1bad2f99fe9a0691551c5524fcc290a406/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcb4378e18571fa01e20ef63820d960f1c2cc865", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb4378e18571fa01e20ef63820d960f1c2cc865", "html_url": "https://github.com/rust-lang/rust/commit/dcb4378e18571fa01e20ef63820d960f1c2cc865"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "3bc8a65df1c1482d35553754533ff50c26e1be37", "filename": "src/librustc/traits/trans/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77d3ca1bad2f99fe9a0691551c5524fcc290a406/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d3ca1bad2f99fe9a0691551c5524fcc290a406/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs?ref=77d3ca1bad2f99fe9a0691551c5524fcc290a406", "patch": "@@ -38,17 +38,17 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     {\n         // Remove any references to regions; this helps improve caching.\n         let trait_ref = self.erase_regions(&trait_ref);\n+        let param_env = ty::ParamEnv::empty(Reveal::All);\n \n-        self.trans_trait_caches.trait_cache.memoize(trait_ref, || {\n+        self.trans_trait_caches.trait_cache.memoize((param_env, trait_ref), || {\n             debug!(\"trans::fulfill_obligation(trait_ref={:?}, def_id={:?})\",\n-                   trait_ref, trait_ref.def_id());\n+                   (param_env, trait_ref), trait_ref.def_id());\n \n             // Do the initial selection for the obligation. This yields the\n             // shallow result we are looking for -- that is, what specific impl.\n             self.infer_ctxt().enter(|infcx| {\n                 let mut selcx = SelectionContext::new(&infcx);\n \n-                let param_env = ty::ParamEnv::empty(Reveal::All);\n                 let obligation_cause = ObligationCause::misc(span,\n                                                              ast::DUMMY_NODE_ID);\n                 let obligation = Obligation::new(obligation_cause,\n@@ -167,7 +167,7 @@ pub struct TraitSelectionCache<'tcx> {\n }\n \n impl<'tcx> DepTrackingMapConfig for TraitSelectionCache<'tcx> {\n-    type Key = ty::PolyTraitRef<'tcx>;\n+    type Key = (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>);\n     type Value = Vtable<'tcx, ()>;\n     fn to_dep_kind() -> DepKind {\n         DepKind::TraitSelect"}]}