{"sha": "47e26ab287447c7321214f6b9451a5238d47e9cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZTI2YWIyODc0NDdjNzMyMTIxNGY2Yjk0NTFhNTIzOGQ0N2U5Y2I=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-30T13:01:26Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-02T21:34:20Z"}, "message": "Fix warnings about the rustfmt_skip attribute", "tree": {"sha": "add661d26792b55d7b3544ccba2845b557a5b0ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/add661d26792b55d7b3544ccba2845b557a5b0ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47e26ab287447c7321214f6b9451a5238d47e9cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47e26ab287447c7321214f6b9451a5238d47e9cb", "html_url": "https://github.com/rust-lang/rust/commit/47e26ab287447c7321214f6b9451a5238d47e9cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47e26ab287447c7321214f6b9451a5238d47e9cb/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0d2fdc723bff9e271e00da4d24c125b1e19762a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d2fdc723bff9e271e00da4d24c125b1e19762a", "html_url": "https://github.com/rust-lang/rust/commit/c0d2fdc723bff9e271e00da4d24c125b1e19762a"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "e7302ea5829cff4c055f0119087ca8be93c25262", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47e26ab287447c7321214f6b9451a5238d47e9cb/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e26ab287447c7321214f6b9451a5238d47e9cb/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=47e26ab287447c7321214f6b9451a5238d47e9cb", "patch": "@@ -87,9 +87,8 @@ mod reexport {\n     pub use syntax::ast::{Name, NodeId};\n }\n \n-#[allow(unused_attributes)]\n #[plugin_registrar]\n-#[rustfmt_skip]\n+#[cfg_attr(rustfmt, rustfmt_skip)]\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box types::TypePass);\n     reg.register_late_lint_pass(box misc::TopLevelRefPass);"}, {"sha": "5768a6e8f858161e3ef963c8e235fd2221edca48", "filename": "src/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47e26ab287447c7321214f6b9451a5238d47e9cb/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e26ab287447c7321214f6b9451a5238d47e9cb/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=47e26ab287447c7321214f6b9451a5238d47e9cb", "patch": "@@ -736,7 +736,7 @@ fn has_debug_impl<'a, 'b>(ty: ty::Ty<'a>, cx: &LateContext<'b, 'a>) -> bool {\n     debug_impl_exists\n }\n \n-#[rustfmt_skip]\n+#[cfg_attr(rustfmt, rustfmt_skip)]\n const CONVENTIONS: [(&'static str, &'static [SelfKind]); 5] = [\n     (\"into_\", &[SelfKind::Value]),\n     (\"to_\", &[SelfKind::Ref]),\n@@ -745,7 +745,7 @@ const CONVENTIONS: [(&'static str, &'static [SelfKind]); 5] = [\n     (\"from_\", &[SelfKind::No]),\n ];\n \n-#[rustfmt_skip]\n+#[cfg_attr(rustfmt, rustfmt_skip)]\n const TRAIT_METHODS: [(&'static str, usize, SelfKind, OutType, &'static str); 30] = [\n     (\"add\", 2, SelfKind::Value, OutType::Any, \"std::ops::Add\"),\n     (\"sub\", 2, SelfKind::Value, OutType::Any, \"std::ops::Sub\"),"}, {"sha": "d436d98c981105ebbc2b3412a5c3a7c27b81588b", "filename": "src/misc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47e26ab287447c7321214f6b9451a5238d47e9cb/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e26ab287447c7321214f6b9451a5238d47e9cb/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=47e26ab287447c7321214f6b9451a5238d47e9cb", "patch": "@@ -376,8 +376,7 @@ impl LintPass for UsedUnderscoreBinding {\n }\n \n impl LateLintPass for UsedUnderscoreBinding {\n-    #[allow(unused_attributes)]\n-    #[rustfmt_skip]\n+    #[cfg_attr(rustfmt, rustfmt_skip)]\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n         if in_attributes_expansion(cx, expr) {\n     // Don't lint things expanded by #[derive(...)], etc"}]}