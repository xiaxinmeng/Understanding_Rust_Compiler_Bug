{"sha": "4092891a8f2ca5947d5312e1949ecf701a4f25de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwOTI4OTFhOGYyY2E1OTQ3ZDUzMTJlMTk0OWVjZjcwMWE0ZjI1ZGU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-19T06:52:43Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-22T16:45:23Z"}, "message": "Fix intra-doc links for non-path primitives\n\nThis does *not* currently work for associated items that are\nauto-implemented by the compiler (e.g. `never::eq`), because they aren't\npresent in the source code. I plan to fix this in a follow-up PR.", "tree": {"sha": "f8dc2936ce281aa34024650f41d290ab30543e2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8dc2936ce281aa34024650f41d290ab30543e2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4092891a8f2ca5947d5312e1949ecf701a4f25de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4092891a8f2ca5947d5312e1949ecf701a4f25de", "html_url": "https://github.com/rust-lang/rust/commit/4092891a8f2ca5947d5312e1949ecf701a4f25de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4092891a8f2ca5947d5312e1949ecf701a4f25de/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fd4f8febf8fc0edb94481f35c44c7e9e6e1ba87", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fd4f8febf8fc0edb94481f35c44c7e9e6e1ba87", "html_url": "https://github.com/rust-lang/rust/commit/0fd4f8febf8fc0edb94481f35c44c7e9e6e1ba87"}], "stats": {"total": 120, "additions": 94, "deletions": 26}, "files": [{"sha": "b8db0d5a4d63ca27bdab2466e68e9f01ff3142ec", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4092891a8f2ca5947d5312e1949ecf701a4f25de/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4092891a8f2ca5947d5312e1949ecf701a4f25de/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=4092891a8f2ca5947d5312e1949ecf701a4f25de", "patch": "@@ -475,9 +475,9 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         });\n         debug!(\"{} resolved to {:?} in namespace {:?}\", path_str, result, ns);\n         match result {\n-            // resolver doesn't know about true and false so we'll have to resolve them\n+            // resolver doesn't know about true, false, and types that aren't paths (e.g. `()`)\n             // manually as bool\n-            Err(()) => is_bool_value(path_str, ns),\n+            Err(()) => resolve_primitive(path_str, ns),\n             Ok(res) => Some(res),\n         }\n     }\n@@ -1020,7 +1020,7 @@ impl LinkCollector<'_, '_> {\n             (link.trim(), None)\n         };\n \n-        if path_str.contains(|ch: char| !(ch.is_alphanumeric() || \":_<>, !\".contains(ch))) {\n+        if path_str.contains(|ch: char| !(ch.is_alphanumeric() || \":_<>, !*()[]&;\".contains(ch))) {\n             return None;\n         }\n \n@@ -1108,9 +1108,8 @@ impl LinkCollector<'_, '_> {\n         // Sanity check to make sure we don't have any angle brackets after stripping generics.\n         assert!(!path_str.contains(['<', '>'].as_slice()));\n \n-        // The link is not an intra-doc link if it still contains commas or spaces after\n-        // stripping generics.\n-        if path_str.contains([',', ' '].as_slice()) {\n+        // The link is not an intra-doc link if it still contains spaces after stripping generics.\n+        if path_str.contains(' ') {\n             return None;\n         }\n \n@@ -1476,8 +1475,11 @@ impl Disambiguator {\n                 (\"!\", DefKind::Macro(MacroKind::Bang)),\n             ];\n             for &(suffix, kind) in &suffixes {\n-                if link.ends_with(suffix) {\n-                    return Ok((Kind(kind), link.trim_end_matches(suffix)));\n+                if let Some(link) = link.strip_suffix(suffix) {\n+                    // Avoid turning `!` or `()` into an empty string\n+                    if !link.is_empty() {\n+                        return Ok((Kind(kind), link));\n+                    }\n                 }\n             }\n             Err(())\n@@ -2066,37 +2068,37 @@ fn resolve_primitive(path_str: &str, ns: Namespace) -> Option<Res> {\n     }\n     use PrimitiveType::*;\n     let prim = match path_str {\n-        \"u8\" => U8,\n-        \"u16\" => U16,\n-        \"u32\" => U32,\n-        \"u64\" => U64,\n-        \"u128\" => U128,\n-        \"usize\" => Usize,\n+        \"isize\" => Isize,\n         \"i8\" => I8,\n         \"i16\" => I16,\n         \"i32\" => I32,\n         \"i64\" => I64,\n         \"i128\" => I128,\n-        \"isize\" => Isize,\n+        \"usize\" => Usize,\n+        \"u8\" => U8,\n+        \"u16\" => U16,\n+        \"u32\" => U32,\n+        \"u64\" => U64,\n+        \"u128\" => U128,\n         \"f32\" => F32,\n         \"f64\" => F64,\n-        \"str\" => Str,\n-        \"bool\" | \"true\" | \"false\" => Bool,\n         \"char\" => Char,\n+        \"bool\" | \"true\" | \"false\" => Bool,\n+        \"str\" => Str,\n+        \"slice\" | \"&[]\" | \"[T]\" => Slice,\n+        \"array\" | \"[]\" | \"[T;N]\" => Array,\n+        \"tuple\" | \"(,)\" => Tuple,\n+        \"unit\" | \"()\" => Unit,\n+        \"pointer\" | \"*\" | \"*const\" | \"*mut\" => RawPointer,\n+        \"reference\" | \"&\" | \"&mut\" => Reference,\n+        \"fn\" => Fn,\n+        \"never\" | \"!\" => Never,\n         _ => return None,\n     };\n+    debug!(\"resolved primitives {:?}\", prim);\n     Some(Res::Primitive(prim))\n }\n \n-/// Resolve a primitive value.\n-fn is_bool_value(path_str: &str, ns: Namespace) -> Option<Res> {\n-    if ns == TypeNS && (path_str == \"true\" || path_str == \"false\") {\n-        Some(Res::Primitive(PrimitiveType::Bool))\n-    } else {\n-        None\n-    }\n-}\n-\n fn strip_generics_from_path(path_str: &str) -> Result<String, ResolutionFailure<'static>> {\n     let mut stripped_segments = vec![];\n     let mut path = path_str.chars().peekable();"}, {"sha": "83d081824ff58ad38e0c69aede8d331c9e3e2283", "filename": "src/test/rustdoc/intra-doc/non-path-primitives.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4092891a8f2ca5947d5312e1949ecf701a4f25de/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4092891a8f2ca5947d5312e1949ecf701a4f25de/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fnon-path-primitives.rs?ref=4092891a8f2ca5947d5312e1949ecf701a4f25de", "patch": "@@ -0,0 +1,66 @@\n+// ignore-tidy-linelength\n+#![crate_name = \"foo\"]\n+#![deny(broken_intra_doc_links)]\n+\n+// @has foo/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.rotate_left\"]' 'slice::rotate_left'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.rotate_left\"]' 'X'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.rotate_left\"]' 'Y'\n+//! [slice::rotate_left]\n+//! [X]([T]::rotate_left)\n+//! [Y](&[]::rotate_left)\n+// These don't work because markdown syntax doesn't allow it.\n+// [[T]::rotate_left]\n+//! [&[]::rotate_left]\n+\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html#method.map\"]' 'array::map'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html#method.map\"]' 'X'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html#method.map\"]' 'Y'\n+//! [array::map]\n+//! [X]([]::map)\n+//! [Y]([T;N]::map)\n+// These don't work because markdown syntax doesn't allow it.\n+// [Z]([T; N]::map)\n+//! [`[T; N]::map`]\n+//! [[]::map]\n+// [Z][]\n+//\n+// [Z]: [T; N]::map\n+\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.is_null\"]' 'pointer::is_null'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.is_null\"]' '*const::is_null'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.is_null\"]' '*mut::is_null'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.is_null\"]' '*::is_null'\n+//! [pointer::is_null]\n+//! [*const::is_null]\n+//! [*mut::is_null]\n+//! [*::is_null]\n+\n+// FIXME: Associated items on some primitives aren't working, because the impls\n+// are part of the compiler instead of being part of the source code.\n+\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\"]' 'unit'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\"]' '()'\n+//! [unit]\n+//! [()]\n+\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\"]' 'tuple'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\"]' 'X'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\"]' '(,)'\n+//! [tuple]\n+//! [X]((,))\n+//! [(,)]\n+\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\"]' 'reference'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\"]' '&'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\"]' '&mut'\n+//! [reference]\n+//! [&]\n+//! [&mut]\n+\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\"]' 'fn'\n+//! [fn]\n+\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.never.html\"]' 'never'\n+// @has - '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.never.html\"]' '!'\n+//! [never]\n+//! [!]"}]}