{"sha": "6aa06b757dde06b43c198d352c51e1eef82bbb1c", "node_id": "C_kwDOAAsO6NoAKDZhYTA2Yjc1N2RkZTA2YjQzYzE5OGQzNTJjNTFlMWVlZjgyYmJiMWM", "commit": {"author": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-01-19T15:24:47Z"}, "committer": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-02-15T20:34:48Z"}, "message": "Remove `#[allow]`s. Apply conversations from @Jarcho", "tree": {"sha": "3c21b1583fe1729999493cb44695716e5565d633", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c21b1583fe1729999493cb44695716e5565d633"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6aa06b757dde06b43c198d352c51e1eef82bbb1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEM3aofraJSaf7CtgpTTgXC1ovwzQFAmPtQekACgkQTTgXC1ov\nwzRgcA/9FCn5rP2SMW0Y6cntNS2IYHziSwwgE0T5alFFKJx0eYZMJ976qyANY6Ki\nCNs9DjOJAVxbb7619882xCfstS/ZFqsvvrsCpnVh4cpR2pn6oYRvFAMI8ygA2a1f\nM8UcX+c+NSzYrLhJavdIZKmnbmzKHNh3WPUZdndWvOo1VjW1HZYGNrDFOYuh/qEF\nLn0pNO1A9Mk+Xw1jD3x4q7/OO5oJtzQ5qKqnCjFVZLAwxYhth31g+LdP5Gewg6LE\nAKC1aQm0Qf62m9C3NnmeLhSGJBLtFG8mUcoytD9yhhAOegpNLsx105AM1y7luGL1\nRL0cNyarmSAfnpzAM7g/mOdpxx/QayEpA2jok5xKWEB5Fy34WfT/ZsIvHVUNWVMc\n6GyJUcNvInfUaR+ZFx43OUGUd+EWBr3sXosFTh3p29oSn7ZolmW+q7wfTz8/YwIo\nHpo6clL/pohhO4VIfEwFj4AtV6u6+ezFR9f+sKgLmEj41qInQhxBvmgr6NfQbo8G\niirXANnH01J7biKJB6l0eOpp8+GLGPVkaKpFQSMhALIELF/hKhYlAB8o43V3nS9g\nCmsK9j6Jf8TbRVmiOwl9A24z8u0c9OZ02we4BhlDg8q6TeuvmRxyLBcaY01wh7eB\nST/lLaoegzfb2phBkuBjYzLMZNkKRP38UnFHW6iZq+8yFRVMdxE=\n=QbjO\n-----END PGP SIGNATURE-----", "payload": "tree 3c21b1583fe1729999493cb44695716e5565d633\nparent 8a2245dcb6ccf8d9491d6fdc7681a4f34739093c\nauthor blyxyas <blyxyas@gmail.com> 1674141887 +0100\ncommitter blyxyas <blyxyas@gmail.com> 1676493288 +0100\n\nRemove `#[allow]`s. Apply conversations from @Jarcho\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6aa06b757dde06b43c198d352c51e1eef82bbb1c", "html_url": "https://github.com/rust-lang/rust/commit/6aa06b757dde06b43c198d352c51e1eef82bbb1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6aa06b757dde06b43c198d352c51e1eef82bbb1c/comments", "author": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a2245dcb6ccf8d9491d6fdc7681a4f34739093c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2245dcb6ccf8d9491d6fdc7681a4f34739093c", "html_url": "https://github.com/rust-lang/rust/commit/8a2245dcb6ccf8d9491d6fdc7681a4f34739093c"}], "stats": {"total": 163, "additions": 68, "deletions": 95}, "files": [{"sha": "ace5932f4e4ae4566254d0afd877ca9732b2db1e", "filename": "clippy_lints/src/functions/impl_trait_in_params.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/clippy_lints%2Fsrc%2Ffunctions%2Fimpl_trait_in_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/clippy_lints%2Fsrc%2Ffunctions%2Fimpl_trait_in_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fimpl_trait_in_params.rs?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -11,27 +11,20 @@ pub(super) fn check_fn<'tcx>(cx: &LateContext<'_>, kind: &'tcx FnKind<'_>, body:\n     {\n         if let FnKind::ItemFn(ident, generics, _) = kind {\n             for param in generics.params {\n-                if param.is_impl_trait()\n-                    && !param.name.ident().as_str().contains('<')\n-                    && !param.name.ident().as_str().contains('(')\n-                {\n+                if param.is_impl_trait() {\n                     // No generics with nested generics, and no generics like FnMut(x)\n                     span_lint_and_then(\n                         cx,\n                         IMPL_TRAIT_IN_PARAMS,\n                         param.span,\n-                        &format!(\"'{}' in the function's parameters\", param.name.ident().as_str()),\n+                        \"'`impl Trait` used as a function parameter'\",\n                         |diag| {\n                             let next_letter = next_valid_letter(generics);\n                             if let Some(gen_span) = generics.span_for_param_suggestion() {\n                                 diag.span_suggestion_with_style(\n                                     gen_span,\n-                                    format!(\n-                                        \"create a generic type here and replace that `{}` with `{}`\",\n-                                        param.name.ident().as_str(),\n-                                        next_letter\n-                                    ),\n-                                    \", T: Trait\",\n+                                    \"add a type paremeter, `{}`: `{}`\",\n+                                    format!(\", {next_letter}: {}\", &param.name.ident().as_str()[5..]),\n                                     rustc_errors::Applicability::MaybeIncorrect,\n                                     rustc_errors::SuggestionStyle::ShowAlways,\n                                 );\n@@ -46,12 +39,8 @@ pub(super) fn check_fn<'tcx>(cx: &LateContext<'_>, kind: &'tcx FnKind<'_>, body:\n                                         ident.span.ctxt(),\n                                         ident.span.parent(),\n                                     ),\n-                                    format!(\n-                                        \"create a generic type here and replace that '{}' with `{}`\",\n-                                        param.name.ident().as_str(),\n-                                        next_letter\n-                                    ),\n-                                    \"<T: Trait>\",\n+                                    \"add a type paremeter\",\n+                                    format!(\"<{next_letter}: {}>\", &param.name.ident().as_str()[5..]),\n                                     rustc_errors::Applicability::MaybeIncorrect,\n                                     rustc_errors::SuggestionStyle::ShowAlways,\n                                 );"}, {"sha": "9d0263e93be756939d9e7df6c36f50e7169f6d8e", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -2,12 +2,7 @@\n //!\n //! - The `eq_foobar` functions test for semantic equality but ignores `NodeId`s and `Span`s.\n \n-#![allow(\n-    clippy::similar_names,\n-    clippy::wildcard_imports,\n-    clippy::enum_glob_use,\n-    clippy::impl_trait_in_params\n-)]\n+#![allow(clippy::similar_names, clippy::wildcard_imports, clippy::enum_glob_use)]\n \n use crate::{both, over};\n use rustc_ast::ptr::P;"}, {"sha": "43f0df145f0ec606a4393b7ea73db736b376195d", "filename": "clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -1,4 +1,3 @@\n-#![allow(clippy::impl_trait_in_params)]\n //! This module handles checking if the span given is from a proc-macro or not.\n //!\n //! Proc-macros are capable of setting the span of every token they output to a few possible spans."}, {"sha": "2bbe1a19b625a7e7eb19c77e88a8a8f2c8e566a5", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -1,4 +1,3 @@\n-#![allow(clippy::impl_trait_in_params)]\n use crate::consts::constant_simple;\n use crate::macros::macro_backtrace;\n use crate::source::snippet_opt;"}, {"sha": "63dccbf697c2de049c3ffca7bb8379fb578b9df3", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -1,4 +1,4 @@\n-#![allow(clippy::similar_names, clippy::impl_trait_in_params)] // `expr` and `expn`\n+#![allow(clippy::similar_names)] // `expr` and `expn`\n \n use crate::source::snippet_opt;\n use crate::visitors::{for_each_expr, Descend};"}, {"sha": "cd5dcfdaca34b64245632331bd7707c36205adcd", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -1,6 +1,6 @@\n //! Utils for extracting, inspecting or transforming source code\n \n-#![allow(clippy::module_name_repetitions, clippy::impl_trait_in_params)]\n+#![allow(clippy::module_name_repetitions)]\n \n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};"}, {"sha": "3b5b6bf4c950222f3f35f2bb084622f011075818", "filename": "tests/ui/borrow_box.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Fborrow_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Fborrow_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.rs?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -1,10 +1,6 @@\n #![deny(clippy::borrowed_box)]\n #![allow(dead_code, unused_variables)]\n-#![allow(\n-    clippy::uninlined_format_args,\n-    clippy::disallowed_names,\n-    clippy::impl_trait_in_params\n-)]\n+#![allow(clippy::uninlined_format_args, clippy::disallowed_names)]\n \n use std::fmt::Display;\n "}, {"sha": "99cb60a1ead9b1009c6b6e93794c64c4b3f08fd7", "filename": "tests/ui/borrow_box.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Fborrow_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Fborrow_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.stderr?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -1,5 +1,5 @@\n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:24:14\n+  --> $DIR/borrow_box.rs:20:14\n    |\n LL |     let foo: &Box<bool>;\n    |              ^^^^^^^^^^ help: try: `&bool`\n@@ -11,55 +11,55 @@ LL | #![deny(clippy::borrowed_box)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:28:10\n+  --> $DIR/borrow_box.rs:24:10\n    |\n LL |     foo: &'a Box<bool>,\n    |          ^^^^^^^^^^^^^ help: try: `&'a bool`\n \n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:32:17\n+  --> $DIR/borrow_box.rs:28:17\n    |\n LL |     fn test4(a: &Box<bool>);\n    |                 ^^^^^^^^^^ help: try: `&bool`\n \n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:98:25\n+  --> $DIR/borrow_box.rs:94:25\n    |\n LL | pub fn test14(_display: &Box<dyn Display>) {}\n    |                         ^^^^^^^^^^^^^^^^^ help: try: `&dyn Display`\n \n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:99:25\n+  --> $DIR/borrow_box.rs:95:25\n    |\n LL | pub fn test15(_display: &Box<dyn Display + Send>) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&(dyn Display + Send)`\n \n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:100:29\n+  --> $DIR/borrow_box.rs:96:29\n    |\n LL | pub fn test16<'a>(_display: &'a Box<dyn Display + 'a>) {}\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&'a (dyn Display + 'a)`\n \n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:102:25\n+  --> $DIR/borrow_box.rs:98:25\n    |\n LL | pub fn test17(_display: &Box<impl Display>) {}\n    |                         ^^^^^^^^^^^^^^^^^^ help: try: `&impl Display`\n \n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:103:25\n+  --> $DIR/borrow_box.rs:99:25\n    |\n LL | pub fn test18(_display: &Box<impl Display + Send>) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&(impl Display + Send)`\n \n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:104:29\n+  --> $DIR/borrow_box.rs:100:29\n    |\n LL | pub fn test19<'a>(_display: &'a Box<impl Display + 'a>) {}\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&'a (impl Display + 'a)`\n \n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:109:25\n+  --> $DIR/borrow_box.rs:105:25\n    |\n LL | pub fn test20(_display: &Box<(dyn Display + Send)>) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&(dyn Display + Send)`"}, {"sha": "dc129591eac4eb7e4f9e96f9dc64f739acfad0b6", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -7,8 +7,7 @@\n     clippy::no_effect,\n     clippy::option_map_unit_fn,\n     clippy::redundant_closure_call,\n-    clippy::uninlined_format_args,\n-    clippy::impl_trait_in_params\n+    clippy::uninlined_format_args\n )]\n \n use std::path::{Path, PathBuf};"}, {"sha": "025fd6a0b7afdf1f5995c0a9d38f314d28efbb3c", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -7,8 +7,7 @@\n     clippy::no_effect,\n     clippy::option_map_unit_fn,\n     clippy::redundant_closure_call,\n-    clippy::uninlined_format_args,\n-    clippy::impl_trait_in_params\n+    clippy::uninlined_format_args\n )]\n \n use std::path::{Path, PathBuf};"}, {"sha": "a521fb868607ad8de2aafb9e3085a6b6bfd12f1e", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -1,159 +1,159 @@\n error: redundant closure\n-  --> $DIR/eta.rs:29:27\n+  --> $DIR/eta.rs:28:27\n    |\n LL |     let a = Some(1u8).map(|a| foo(a));\n    |                           ^^^^^^^^^^ help: replace the closure with the function itself: `foo`\n    |\n    = note: `-D clippy::redundant-closure` implied by `-D warnings`\n \n error: redundant closure\n-  --> $DIR/eta.rs:33:40\n+  --> $DIR/eta.rs:32:40\n    |\n LL |     let _: Option<Vec<u8>> = true.then(|| vec![]); // special case vec!\n    |                                        ^^^^^^^^^ help: replace the closure with `Vec::new`: `std::vec::Vec::new`\n \n error: redundant closure\n-  --> $DIR/eta.rs:34:35\n+  --> $DIR/eta.rs:33:35\n    |\n LL |     let d = Some(1u8).map(|a| foo((|b| foo2(b))(a))); //is adjusted?\n    |                                   ^^^^^^^^^^^^^ help: replace the closure with the function itself: `foo2`\n \n error: redundant closure\n-  --> $DIR/eta.rs:35:26\n+  --> $DIR/eta.rs:34:26\n    |\n LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n    |                          ^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `below`\n \n error: redundant closure\n-  --> $DIR/eta.rs:42:27\n+  --> $DIR/eta.rs:41:27\n    |\n LL |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `generic`\n \n error: redundant closure\n-  --> $DIR/eta.rs:88:51\n+  --> $DIR/eta.rs:87:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());\n    |                                                   ^^^^^^^^^^^ help: replace the closure with the method itself: `TestStruct::foo`\n    |\n    = note: `-D clippy::redundant-closure-for-method-calls` implied by `-D warnings`\n \n error: redundant closure\n-  --> $DIR/eta.rs:89:51\n+  --> $DIR/eta.rs:88:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());\n    |                                                   ^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `TestTrait::trait_foo`\n \n error: redundant closure\n-  --> $DIR/eta.rs:91:42\n+  --> $DIR/eta.rs:90:42\n    |\n LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());\n    |                                          ^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::vec::Vec::clear`\n \n error: redundant closure\n-  --> $DIR/eta.rs:95:29\n+  --> $DIR/eta.rs:94:29\n    |\n LL |     let e = Some(\"str\").map(|s| s.to_string());\n    |                             ^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::string::ToString::to_string`\n \n error: redundant closure\n-  --> $DIR/eta.rs:96:27\n+  --> $DIR/eta.rs:95:27\n    |\n LL |     let e = Some('a').map(|s| s.to_uppercase());\n    |                           ^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `char::to_uppercase`\n \n error: redundant closure\n-  --> $DIR/eta.rs:98:65\n+  --> $DIR/eta.rs:97:65\n    |\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `char::to_ascii_uppercase`\n \n error: redundant closure\n-  --> $DIR/eta.rs:161:22\n+  --> $DIR/eta.rs:160:22\n    |\n LL |     requires_fn_once(|| x());\n    |                      ^^^^^^ help: replace the closure with the function itself: `x`\n \n error: redundant closure\n-  --> $DIR/eta.rs:168:27\n+  --> $DIR/eta.rs:167:27\n    |\n LL |     let a = Some(1u8).map(|a| foo_ptr(a));\n    |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `foo_ptr`\n \n error: redundant closure\n-  --> $DIR/eta.rs:173:27\n+  --> $DIR/eta.rs:172:27\n    |\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `closure`\n \n error: redundant closure\n-  --> $DIR/eta.rs:205:28\n+  --> $DIR/eta.rs:204:28\n    |\n LL |     x.into_iter().for_each(|x| add_to_res(x));\n    |                            ^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut add_to_res`\n \n error: redundant closure\n-  --> $DIR/eta.rs:206:28\n+  --> $DIR/eta.rs:205:28\n    |\n LL |     y.into_iter().for_each(|x| add_to_res(x));\n    |                            ^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut add_to_res`\n \n error: redundant closure\n-  --> $DIR/eta.rs:207:28\n+  --> $DIR/eta.rs:206:28\n    |\n LL |     z.into_iter().for_each(|x| add_to_res(x));\n    |                            ^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `add_to_res`\n \n error: redundant closure\n-  --> $DIR/eta.rs:214:21\n+  --> $DIR/eta.rs:213:21\n    |\n LL |         Some(1).map(|n| closure(n));\n    |                     ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut closure`\n \n error: redundant closure\n-  --> $DIR/eta.rs:218:21\n+  --> $DIR/eta.rs:217:21\n    |\n LL |         Some(1).map(|n| in_loop(n));\n    |                     ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `in_loop`\n \n error: redundant closure\n-  --> $DIR/eta.rs:311:18\n+  --> $DIR/eta.rs:310:18\n    |\n LL |     takes_fn_mut(|| f());\n    |                  ^^^^^^ help: replace the closure with the function itself: `&mut f`\n \n error: redundant closure\n-  --> $DIR/eta.rs:314:19\n+  --> $DIR/eta.rs:313:19\n    |\n LL |     takes_fn_once(|| f());\n    |                   ^^^^^^ help: replace the closure with the function itself: `&mut f`\n \n error: redundant closure\n-  --> $DIR/eta.rs:318:26\n+  --> $DIR/eta.rs:317:26\n    |\n LL |     move || takes_fn_mut(|| f_used_once())\n    |                          ^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut f_used_once`\n \n error: redundant closure\n-  --> $DIR/eta.rs:330:19\n+  --> $DIR/eta.rs:329:19\n    |\n LL |     array_opt.map(|a| a.as_slice());\n    |                   ^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `<[u8; 3]>::as_slice`\n \n error: redundant closure\n-  --> $DIR/eta.rs:333:19\n+  --> $DIR/eta.rs:332:19\n    |\n LL |     slice_opt.map(|s| s.len());\n    |                   ^^^^^^^^^^^ help: replace the closure with the method itself: `<[u8]>::len`\n \n error: redundant closure\n-  --> $DIR/eta.rs:336:17\n+  --> $DIR/eta.rs:335:17\n    |\n LL |     ptr_opt.map(|p| p.is_null());\n    |                 ^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `<*const usize>::is_null`\n \n error: redundant closure\n-  --> $DIR/eta.rs:340:17\n+  --> $DIR/eta.rs:339:17\n    |\n LL |     dyn_opt.map(|d| d.method_on_dyn());\n    |                 ^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `<dyn TestTrait>::method_on_dyn`"}, {"sha": "62b264f0051cdc224961ef097ada2051832b4c2b", "filename": "tests/ui/impl_trait_in_params.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Fimpl_trait_in_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Fimpl_trait_in_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl_trait_in_params.stderr?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -1,22 +1,22 @@\n-error: 'impl Trait' in the function's parameters\n+error: '`impl Trait` used as a function parameter'\n   --> $DIR/impl_trait_in_params.rs:8:13\n    |\n LL | pub fn a(_: impl Trait) {}\n    |             ^^^^^^^^^^\n    |\n    = note: `-D clippy::impl-trait-in-params` implied by `-D warnings`\n-help: create a generic type here and replace that 'impl Trait' with `T`\n+help: add a type paremeter\n    |\n LL | pub fn a<T: Trait>(_: impl Trait) {}\n    |         ++++++++++\n \n-error: 'impl Trait' in the function's parameters\n+error: '`impl Trait` used as a function parameter'\n   --> $DIR/impl_trait_in_params.rs:9:29\n    |\n LL | pub fn c<C: Trait>(_: C, _: impl Trait) {}\n    |                             ^^^^^^^^^^\n    |\n-help: create a generic type here and replace that `impl Trait` with `T`\n+help: add a type paremeter, `{}`: `{}`\n    |\n LL | pub fn c<C: Trait, T: Trait>(_: C, _: impl Trait) {}\n    |                  ++++++++++"}, {"sha": "4ce5d421782250987f5efcbaab50ba825f2a9c2b", "filename": "tests/ui/trait_duplication_in_bounds.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Ftrait_duplication_in_bounds.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Ftrait_duplication_in_bounds.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.fixed?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n #![deny(clippy::trait_duplication_in_bounds)]\n-#![allow(clippy::impl_trait_in_params)]\n #![allow(unused)]\n \n fn bad_foo<T: Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {"}, {"sha": "7f2e96a22e6648eb27aaf1178eec55ff2c86cab5", "filename": "tests/ui/trait_duplication_in_bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.rs?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -1,6 +1,5 @@\n // run-rustfix\n #![deny(clippy::trait_duplication_in_bounds)]\n-#![allow(clippy::impl_trait_in_params)]\n #![allow(unused)]\n \n fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {"}, {"sha": "af800ba78880c39ed5e5b936c850e5138f993c59", "filename": "tests/ui/trait_duplication_in_bounds.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.stderr?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -1,5 +1,5 @@\n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:6:15\n+  --> $DIR/trait_duplication_in_bounds.rs:5:15\n    |\n LL | fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n@@ -11,43 +11,43 @@ LL | #![deny(clippy::trait_duplication_in_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: these where clauses contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:12:8\n+  --> $DIR/trait_duplication_in_bounds.rs:11:8\n    |\n LL |     T: Clone + Clone + Clone + Copy,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:40:26\n+  --> $DIR/trait_duplication_in_bounds.rs:39:26\n    |\n LL | trait BadSelfTraitBound: Clone + Clone + Clone {\n    |                          ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`\n \n error: these where clauses contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:47:15\n+  --> $DIR/trait_duplication_in_bounds.rs:46:15\n    |\n LL |         Self: Clone + Clone + Clone;\n    |               ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:61:24\n+  --> $DIR/trait_duplication_in_bounds.rs:60:24\n    |\n LL | trait BadTraitBound<T: Clone + Clone + Clone + Copy, U: Clone + Copy> {\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these where clauses contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:68:12\n+  --> $DIR/trait_duplication_in_bounds.rs:67:12\n    |\n LL |         T: Clone + Clone + Clone + Copy,\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:101:19\n+  --> $DIR/trait_duplication_in_bounds.rs:100:19\n    |\n LL | fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `GenericTrait<u64> + GenericTrait<u32>`\n \n error: these bounds contain repeated elements\n-  --> $DIR/trait_duplication_in_bounds.rs:109:22\n+  --> $DIR/trait_duplication_in_bounds.rs:108:22\n    |\n LL | fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::clone::Clone + foo::Clone`"}, {"sha": "5630a0345adb1278492d6f44e2c3b8923df9fbaa", "filename": "tests/ui/trait_duplication_in_bounds_unfixable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.rs?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -1,5 +1,4 @@\n #![deny(clippy::trait_duplication_in_bounds)]\n-#![allow(clippy::impl_trait_in_params)]\n \n use std::collections::BTreeMap;\n use std::ops::{Add, AddAssign, Div, DivAssign, Mul, MulAssign, Sub, SubAssign};"}, {"sha": "4d56a94646cb6c0f8da6591cf299cd4f7317fbbc", "filename": "tests/ui/trait_duplication_in_bounds_unfixable.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6aa06b757dde06b43c198d352c51e1eef82bbb1c/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr?ref=6aa06b757dde06b43c198d352c51e1eef82bbb1c", "patch": "@@ -1,5 +1,5 @@\n error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:7:15\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:6:15\n    |\n LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n    |               ^^^^^\n@@ -12,55 +12,55 @@ LL | #![deny(clippy::trait_duplication_in_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:7:23\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:6:23\n    |\n LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n    |                       ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:36:15\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:35:15\n    |\n LL |         Self: Default;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:50:15\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:49:15\n    |\n LL |         Self: Default + Clone;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:56:15\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:55:15\n    |\n LL |         Self: Default + Clone;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:56:25\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:55:25\n    |\n LL |         Self: Default + Clone;\n    |                         ^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:59:15\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:58:15\n    |\n LL |         Self: Default;\n    |               ^^^^^^^\n    |\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in trait declaration\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:94:15\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:93:15\n    |\n LL |         Self: Iterator<Item = Foo>,\n    |               ^^^^^^^^^^^^^^^^^^^^"}]}