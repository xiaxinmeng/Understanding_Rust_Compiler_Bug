{"sha": "473f804491772fe9a31f4096c3ec8da121fc8294", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3M2Y4MDQ0OTE3NzJmZTlhMzFmNDA5NmMzZWM4ZGExMjFmYzgyOTQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-10T19:20:09Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T20:48:07Z"}, "message": "Add #[rustc_no_mir] to make tests pass with -Z orbit.", "tree": {"sha": "c487b55e6a1e18350639e5fc52485fb828bacc44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c487b55e6a1e18350639e5fc52485fb828bacc44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/473f804491772fe9a31f4096c3ec8da121fc8294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/473f804491772fe9a31f4096c3ec8da121fc8294", "html_url": "https://github.com/rust-lang/rust/commit/473f804491772fe9a31f4096c3ec8da121fc8294", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/473f804491772fe9a31f4096c3ec8da121fc8294/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "080bd97781ee419722df8394a0155b5db069a490", "url": "https://api.github.com/repos/rust-lang/rust/commits/080bd97781ee419722df8394a0155b5db069a490", "html_url": "https://github.com/rust-lang/rust/commit/080bd97781ee419722df8394a0155b5db069a490"}], "stats": {"total": 236, "additions": 193, "deletions": 43}, "files": [{"sha": "943d7d4d9bd3a3a0248ca69bdbcca538ecf4b35b", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -863,12 +863,28 @@ fn cleanup_debug_info_options(options: &Option<String>) -> Option<String> {\n         \"-g\".to_owned(),\n         \"--debuginfo\".to_owned()\n     ];\n-    let new_options =\n+    let mut new_options =\n         split_maybe_args(options).into_iter()\n                                  .filter(|x| !options_to_remove.contains(x))\n-                                 .collect::<Vec<String>>()\n-                                 .join(\" \");\n-    Some(new_options)\n+                                 .collect::<Vec<String>>();\n+\n+    let mut i = 0;\n+    while i + 1 < new_options.len() {\n+        if new_options[i] == \"-Z\" {\n+            // FIXME #31005 MIR missing debuginfo currently.\n+            if new_options[i + 1] == \"orbit\" {\n+                // Remove \"-Z\" and \"orbit\".\n+                new_options.remove(i);\n+                new_options.remove(i);\n+                continue;\n+            }\n+            // Always skip over -Z's argument.\n+            i += 1;\n+        }\n+        i += 1;\n+    }\n+\n+    Some(new_options.join(\" \"))\n }\n \n fn check_debugger_output(debugger_run_result: &ProcRes, check_lines: &[String]) {"}, {"sha": "13d3f42ba18968dd53d5dc3db97db3f62db6cacb", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -72,6 +72,7 @@\n #![feature(reflect)]\n #![feature(unwind_attributes)]\n #![feature(repr_simd, platform_intrinsics)]\n+#![feature(rustc_attrs)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n "}, {"sha": "e6f83498ab1e2638dbd90b4cdc56c6c2c33a924d", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -1008,6 +1008,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n+        #[cfg_attr(not(stage0), rustc_no_mir)] // FIXME #29769 MIR overflow checking is TBD.\n         pub fn pow(self, mut exp: u32) -> Self {\n             let mut base = self;\n             let mut acc = Self::one();\n@@ -1049,6 +1050,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n+        #[cfg_attr(not(stage0), rustc_no_mir)] // FIXME #29769 MIR overflow checking is TBD.\n         pub fn abs(self) -> Self {\n             if self.is_negative() {\n                 // Note that the #[inline] above means that the overflow\n@@ -2013,6 +2015,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n+        #[cfg_attr(not(stage0), rustc_no_mir)] // FIXME #29769 MIR overflow checking is TBD.\n         pub fn pow(self, mut exp: u32) -> Self {\n             let mut base = self;\n             let mut acc = Self::one();"}, {"sha": "85e48f85d3d901591e24d2e52930799c781e97d4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -251,6 +251,7 @@\n #![feature(raw)]\n #![feature(repr_simd)]\n #![feature(reflect_marker)]\n+#![feature(rustc_attrs)]\n #![feature(shared)]\n #![feature(slice_bytes)]\n #![feature(slice_concat_ext)]"}, {"sha": "e78d46b22e9409ac2332d9281745544705bfd022", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -1371,6 +1371,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[rustc_no_mir] // FIXME #27840 MIR NAN ends up negative.\n     fn test_integer_decode() {\n         assert_eq!(3.14159265359f32.integer_decode(), (13176795, -22, 1));\n         assert_eq!((-8573.5918555f32).integer_decode(), (8779358, -10, -1));"}, {"sha": "cea5a9edd680be281b3ea09f5428549fda74ec94", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -1264,6 +1264,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[rustc_no_mir] // FIXME #27840 MIR NAN ends up negative.\n     fn test_integer_decode() {\n         assert_eq!(3.14159265359f64.integer_decode(), (7074237752028906, -51, 1));\n         assert_eq!((-8573.5918555f64).integer_decode(), (4713381968463931, -39, -1));"}, {"sha": "20d049394345256dad72cc965d5d1c670b1f0f12", "filename": "src/test/codegen/adjustments.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcodegen%2Fadjustments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcodegen%2Fadjustments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fadjustments.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -11,6 +11,7 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n+#![feature(rustc_attrs)]\n \n // Hack to get the correct size for the length part in slices\n // CHECK: @helper([[USIZE:i[0-9]+]])\n@@ -20,6 +21,7 @@ fn helper(_: usize) {\n \n // CHECK-LABEL: @no_op_slice_adjustment\n #[no_mangle]\n+#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn no_op_slice_adjustment(x: &[u8]) -> &[u8] {\n     // We used to generate an extra alloca and memcpy for the block's trailing expression value, so\n     // check that we copy directly to the return value slot"}, {"sha": "74c7192259ac4044108f287b39fb09114773b5eb", "filename": "src/test/codegen/coercions.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcodegen%2Fcoercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcodegen%2Fcoercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcoercions.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -11,19 +11,22 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n+#![feature(rustc_attrs)]\n \n static X: i32 = 5;\n \n // CHECK-LABEL: @raw_ptr_to_raw_ptr_noop\n // CHECK-NOT: alloca\n #[no_mangle]\n+#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn raw_ptr_to_raw_ptr_noop() -> *const i32{\n     &X as *const i32\n }\n \n // CHECK-LABEL: @reference_to_raw_ptr_noop\n // CHECK-NOT: alloca\n #[no_mangle]\n+#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn reference_to_raw_ptr_noop() -> *const i32 {\n     &X\n }"}, {"sha": "ea4c932d43549ce74efb7c6204950922d473e01a", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -11,6 +11,7 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n+#![feature(rustc_attrs)]\n \n // Below, these constants are defined as enum variants that by itself would\n // have a lower alignment than the enum type. Ensure that we mark them\n@@ -39,18 +40,21 @@ pub static STATIC: E<i16, i32> = E::A(0);\n \n // CHECK-LABEL: @static_enum_const\n #[no_mangle]\n+#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn static_enum_const() -> E<i16, i32> {\n    STATIC\n }\n \n // CHECK-LABEL: @inline_enum_const\n #[no_mangle]\n+#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn inline_enum_const() -> E<i8, i16> {\n     E::A(0)\n }\n \n // CHECK-LABEL: @low_align_const\n #[no_mangle]\n+#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn low_align_const() -> E<i16, [i16; 3]> {\n // Check that low_align_const and high_align_const use the same constant\n // CHECK: call void @llvm.memcpy.{{.*}}(i8* %{{[0-9]+}}, i8* {{.*}} [[LOW_HIGH:@const[0-9]+]]\n@@ -59,6 +63,7 @@ pub fn low_align_const() -> E<i16, [i16; 3]> {\n \n // CHECK-LABEL: @high_align_const\n #[no_mangle]\n+#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn high_align_const() -> E<i16, i32> {\n // Check that low_align_const and high_align_const use the same constant\n // CHECK: call void @llvm.memcpy.{{.*}}(i8* %{{[0-9]}}, i8* {{.*}} [[LOW_HIGH]]"}, {"sha": "83dd6a3b00258ec5ee4af95d2ff11877cf98cc73", "filename": "src/test/codegen/drop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdrop.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -11,6 +11,7 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n+#![feature(rustc_attrs)]\n \n struct SomeUniqueName;\n \n@@ -24,6 +25,7 @@ pub fn possibly_unwinding() {\n \n // CHECK-LABEL: @droppy\n #[no_mangle]\n+#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn droppy() {\n // Check that there are exactly 6 drop calls. The cleanups for the unwinding should be reused, so\n // that's one new drop call per call to possibly_unwinding(), and finally 3 drop calls for the"}, {"sha": "36c83412e4f0f4775d73e65356841c27b6f86aa4", "filename": "src/test/codegen/refs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcodegen%2Frefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcodegen%2Frefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frefs.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -11,6 +11,7 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n+#![feature(rustc_attrs)]\n \n // Hack to get the correct size for the length part in slices\n // CHECK: @helper([[USIZE:i[0-9]+]])\n@@ -20,6 +21,7 @@ fn helper(_: usize) {\n \n // CHECK-LABEL: @ref_dst\n #[no_mangle]\n+#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn ref_dst(s: &[u8]) {\n     // We used to generate an extra alloca and memcpy to ref the dst, so check that we copy\n     // directly to the alloca for \"x\""}, {"sha": "f849a6c9b18b847b0ec491c51331484e8feccb5c", "filename": "src/test/codegen/stores.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcodegen%2Fstores.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcodegen%2Fstores.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstores.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -11,6 +11,7 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n+#![feature(rustc_attrs)]\n \n pub struct Bytes {\n   a: u8,\n@@ -23,6 +24,7 @@ pub struct Bytes {\n // The array is stored as i32, but its alignment is lower, go with 1 byte to avoid target\n // dependent alignment\n #[no_mangle]\n+#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn small_array_alignment(x: &mut [i8; 4], y: [i8; 4]) {\n // CHECK: [[VAR:%[0-9]+]] = bitcast [4 x i8]* %y to i32*\n // CHECK: store i32 %{{.*}}, i32* [[VAR]], align 1\n@@ -33,6 +35,7 @@ pub fn small_array_alignment(x: &mut [i8; 4], y: [i8; 4]) {\n // The struct is stored as i32, but its alignment is lower, go with 1 byte to avoid target\n // dependent alignment\n #[no_mangle]\n+#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn small_struct_alignment(x: &mut Bytes, y: Bytes) {\n // CHECK: [[VAR:%[0-9]+]] = bitcast %Bytes* %y to i32*\n // CHECK: store i32 %{{.*}}, i32* [[VAR]], align 1"}, {"sha": "882e4cb2d47e29e99d25056cd82bcdcf4f980c20", "filename": "src/test/compile-fail/const-err.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(exceeding_bitshifts)]\n-#[deny(const_err)]\n+#![feature(rustc_attrs)]\n+#![allow(exceeding_bitshifts)]\n+#![deny(const_err)]\n \n fn black_box<T>(_: T) {\n     unimplemented!()\n@@ -18,6 +19,7 @@ fn black_box<T>(_: T) {\n const BLA: u8 = 200u8 + 200u8;\n //~^ ERROR attempted to add with overflow\n \n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let a = -std::i8::MIN;\n     //~^ WARN attempted to negate with overflow"}, {"sha": "96013551ef4927ea17028eaa21e2ae96b31dafde", "filename": "src/test/compile-fail/const-eval-overflow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_attrs)]\n #![allow(unused_imports)]\n \n // Note: the relevant lint pass here runs before some of the constant\n@@ -103,6 +104,7 @@ const VALS_U64: (u64, u64, u64, u64) =\n      //~^ ERROR attempted to multiply with overflow\n      );\n \n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     foo(VALS_I8);\n     foo(VALS_I16);"}, {"sha": "906056896be1e6eb3810283737655a019d6e4ee9", "filename": "src/test/compile-fail/intrinsic-return-address.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcompile-fail%2Fintrinsic-return-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcompile-fail%2Fintrinsic-return-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintrinsic-return-address.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -15,15 +15,10 @@ extern \"rust-intrinsic\" {\n     fn return_address() -> *const u8;\n }\n \n-unsafe fn f() {\n-    let _ = return_address();\n-    //~^ ERROR invalid use of `return_address` intrinsic: function does not use out pointer\n-}\n+unsafe fn f() { let _ = return_address(); }\n+//~^ ERROR invalid use of `return_address` intrinsic: function does not use out pointer\n \n-unsafe fn g() -> isize {\n-    let _ = return_address();\n-    //~^ ERROR invalid use of `return_address` intrinsic: function does not use out pointer\n-    0\n-}\n+unsafe fn g() -> isize { let _ = return_address(); 0 }\n+//~^ ERROR invalid use of `return_address` intrinsic: function does not use out pointer\n \n fn main() {}"}, {"sha": "33954d23b19cbb0bf59bfa200be86d019a4a13b2", "filename": "src/test/compile-fail/simd-intrinsic-generic-arithmetic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-arithmetic.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(repr_simd, platform_intrinsics)]\n+#![feature(repr_simd, platform_intrinsics, rustc_attrs)]\n #![allow(non_camel_case_types)]\n #[repr(simd)]\n #[derive(Copy, Clone)]\n@@ -34,6 +34,7 @@ extern \"platform-intrinsic\" {\n     fn simd_xor<T>(x: T, y: T) -> T;\n }\n \n+#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n fn main() {\n     let x = i32x4(0, 0, 0, 0);\n     let y = u32x4(0, 0, 0, 0);"}, {"sha": "cb3bed7209e2d6596eb219221254d46c695e88fb", "filename": "src/test/compile-fail/simd-intrinsic-generic-cast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-cast.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(repr_simd, platform_intrinsics)]\n+#![feature(repr_simd, platform_intrinsics, rustc_attrs)]\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n@@ -35,6 +35,7 @@ extern \"platform-intrinsic\" {\n     fn simd_cast<T, U>(x: T) -> U;\n }\n \n+#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n fn main() {\n     let x = i32x4(0, 0, 0, 0);\n "}, {"sha": "0e7b2bd490470832fe7e61a6a786d7cf172ed20a", "filename": "src/test/compile-fail/simd-intrinsic-generic-comparison.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-comparison.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(repr_simd, platform_intrinsics)]\n+#![feature(repr_simd, platform_intrinsics, rustc_attrs)]\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n@@ -29,6 +29,7 @@ extern \"platform-intrinsic\" {\n     fn simd_ge<T, U>(x: T, y: T) -> U;\n }\n \n+#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n fn main() {\n     let x = i32x4(0, 0, 0, 0);\n "}, {"sha": "1f4cc72ffe717c2031de22da23096302aec09426", "filename": "src/test/compile-fail/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-elements.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(repr_simd, platform_intrinsics)]\n+#![feature(repr_simd, platform_intrinsics, rustc_attrs)]\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n@@ -56,6 +56,7 @@ extern \"platform-intrinsic\" {\n     fn simd_shuffle8<T, U>(x: T, y: T, idx: [u32; 8]) -> U;\n }\n \n+#[rustc_no_mir] // FIXME #27840 MIR doesn't provide precise spans for calls.\n fn main() {\n     let x = i32x4(0, 0, 0, 0);\n "}, {"sha": "d3817b25d6100f6d364ec3515c20102ad0e7b665", "filename": "src/test/run-fail/divide-by-zero.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,7 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:attempted to divide by zero\n+\n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let y = 0;\n     let _z = 1 / y;"}, {"sha": "7a151c8c572f6dfe7db13bf5576f34e1c9a1acb5", "filename": "src/test/run-fail/mod-zero.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Fmod-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Fmod-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmod-zero.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,7 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:attempted remainder with a divisor of zero\n+\n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let y = 0;\n     let _z = 1 % y;"}, {"sha": "c989cc594536ba11c02a1a65a218eef1dc01929c", "filename": "src/test/run-fail/overflowing-add.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-add.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,10 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:thread '<main>' panicked at 'arithmetic operation overflowed'\n // compile-flags: -C debug-assertions\n \n \n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let _x = 200u8 + 200u8 + 200u8;\n }"}, {"sha": "a27210112982a6a76f932f21264f2d757ce8efe8", "filename": "src/test/run-fail/overflowing-lsh-1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,11 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n \n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let _x = 1_i32 << 32;\n }"}, {"sha": "fe0bcc5b98545f62ec02fae195cd229d648a4437", "filename": "src/test/run-fail/overflowing-lsh-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,11 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n \n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let _x = 1 << -1;\n }"}, {"sha": "aac220d32d9ce4dfa51e12670fb866914d31d5b7", "filename": "src/test/run-fail/overflowing-lsh-3.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,11 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n \n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let _x = 1_u64 << 64;\n }"}, {"sha": "7e8b266da49bee83dcbd81e26ba980107861a028", "filename": "src/test/run-fail/overflowing-lsh-4.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n // compile-flags: -C debug-assertions\n \n@@ -16,6 +18,8 @@\n \n #![warn(exceeding_bitshifts)]\n \n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     // this signals overflow when checking is on\n     let x = 1_i8 << 17;"}, {"sha": "8cba700bbf9a3e0b59faa56765dadaf25407a4b4", "filename": "src/test/run-fail/overflowing-mul.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,9 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:thread '<main>' panicked at 'arithmetic operation overflowed'\n // compile-flags: -C debug-assertions\n \n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let x = 200u8 * 4;\n }"}, {"sha": "2d9d746bef324517277816ca0a88064601a8ea48", "filename": "src/test/run-fail/overflowing-neg.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-neg.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,9 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:thread '<main>' panicked at 'attempted to negate with overflow'\n // compile-flags: -C debug-assertions\n \n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let _x = -std::i8::MIN;\n }"}, {"sha": "63c808dc80a4ecebe1b0caa986d2f519d70d0b57", "filename": "src/test/run-fail/overflowing-rsh-1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,11 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n \n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let _x = -1_i32 >> 32;\n }"}, {"sha": "8b89e57c85bb5e33e254d83c4ae244e271dc4347", "filename": "src/test/run-fail/overflowing-rsh-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,11 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n \n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let _x = -1_i32 >> -1;\n }"}, {"sha": "8874587064c35ec26f45bf7cc1e4ebdc09f565ba", "filename": "src/test/run-fail/overflowing-rsh-3.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,11 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n \n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let _x = -1_i64 >> 64;\n }"}, {"sha": "d74fd8a6b8e417abcd3d87c568668898dbea34c0", "filename": "src/test/run-fail/overflowing-rsh-4.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n // compile-flags: -C debug-assertions\n \n@@ -16,6 +18,8 @@\n \n #![warn(exceeding_bitshifts)]\n \n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     // this signals overflow when checking is on\n     let x = 2_i8 >> 17;"}, {"sha": "249b952a5dca2643fec1d751066561c8327a3e64", "filename": "src/test/run-fail/overflowing-rsh-5.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,11 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n \n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let _n = 1i64 >> [64][0];\n }"}, {"sha": "1227f35444a60399a1f60125f405c1e3079fbf6c", "filename": "src/test/run-fail/overflowing-rsh-6.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,12 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n #![feature(const_indexing)]\n \n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let _n = 1i64 >> [64][0];\n }"}, {"sha": "ce243a50e0b66f2065b84c038af2279041d09404", "filename": "src/test/run-fail/overflowing-sub.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,9 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // error-pattern:thread '<main>' panicked at 'arithmetic operation overflowed'\n // compile-flags: -C debug-assertions\n \n+#![feature(rustc_attrs)]\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let _x = 42u8 - (42u8 + 1);\n }"}, {"sha": "fb54161c2c127db8dafd85cd069a9905bc173a89", "filename": "src/test/run-make/debug-assertions/debug.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-make%2Fdebug-assertions%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-make%2Fdebug-assertions%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdebug-assertions%2Fdebug.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_attrs)]\n #![deny(warnings)]\n \n use std::env;\n@@ -36,6 +37,7 @@ fn debug_assert() {\n }\n \n fn overflow() {\n+    #[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n     fn add(a: u8, b: u8) -> u8 { a + b }\n \n     add(200u8, 200u8);"}, {"sha": "0de949471c68407cf66129e7aaa16d494d473d6d", "filename": "src/test/run-pass-valgrind/cast-enum-with-dtor.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // no-prefer-dynamic\n \n #![allow(dead_code)]\n-#![feature(const_fn)]\n+#![feature(const_fn, rustc_attrs)]\n \n // check dtor calling order when casting enums.\n \n@@ -36,6 +38,7 @@ impl Drop for E {\n     }\n }\n \n+#[rustc_no_mir] // FIXME #27840 MIR miscompiles this.\n fn main() {\n     assert_eq!(FLAG.load(Ordering::SeqCst), 0);\n     {"}, {"sha": "b80c938fed5d42bb0c6fe3651c9195dee985f4e4", "filename": "src/test/run-pass/backtrace-debuginfo-aux.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo-aux.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -11,6 +11,7 @@\n // ignore-test: not a test, used by backtrace-debuginfo.rs to test file!()\n \n #[inline(never)]\n+#[rustc_no_mir] // FIXME #31005 MIR missing debuginfo currently.\n pub fn callback<F>(f: F) where F: FnOnce((&'static str, u32)) {\n     f((file!(), line!()))\n }\n@@ -20,6 +21,7 @@ pub fn callback<F>(f: F) where F: FnOnce((&'static str, u32)) {\n // this case.\n #[cfg_attr(not(target_env = \"msvc\"), inline(always))]\n #[cfg_attr(target_env = \"msvc\", inline(never))]\n+#[rustc_no_mir] // FIXME #31005 MIR missing debuginfo currently.\n pub fn callback_inlined<F>(f: F) where F: FnOnce((&'static str, u32)) {\n     f((file!(), line!()))\n }"}, {"sha": "fd1c01723395d3182d6d3a48f9d0c586fc240a98", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_attrs)]\n+\n // We disable tail merging here because it can't preserve debuginfo and thus\n // potentially breaks the backtraces. Also, subtle changes can decide whether\n // tail merging suceeds, so the test might work today but fail tomorrow due to a\n@@ -72,6 +74,7 @@ fn dump_filelines(filelines: &[Pos]) {\n }\n \n #[inline(never)]\n+#[rustc_no_mir] // FIXME #31005 MIR missing debuginfo currently.\n fn inner(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n     check!(counter; main_pos, outer_pos);\n     check!(counter; main_pos, outer_pos);\n@@ -88,6 +91,7 @@ fn inner(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n // this case.\n #[cfg_attr(not(target_env = \"msvc\"), inline(always))]\n #[cfg_attr(target_env = \"msvc\", inline(never))]\n+#[rustc_no_mir] // FIXME #31005 MIR missing debuginfo currently.\n fn inner_inlined(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n     check!(counter; main_pos, outer_pos);\n     check!(counter; main_pos, outer_pos);\n@@ -113,6 +117,7 @@ fn inner_inlined(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n }\n \n #[inline(never)]\n+#[rustc_no_mir] // FIXME #31005 MIR missing debuginfo currently.\n fn outer(mut counter: i32, main_pos: Pos) {\n     inner(&mut counter, main_pos, pos!());\n     inner_inlined(&mut counter, main_pos, pos!());\n@@ -157,6 +162,7 @@ fn run_test(me: &str) {\n }\n \n #[inline(never)]\n+#[rustc_no_mir] // FIXME #31005 MIR missing debuginfo currently.\n fn main() {\n     let args: Vec<String> = env::args().collect();\n     if args.len() >= 2 {"}, {"sha": "1736ab5bb82c81510e98cc4d80e3564a3e5639b8", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,13 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_attrs)]\n+\n+// ignore-pretty : (#23623) problems when  ending with // comments\n \n use std::{str, string};\n \n const A: [u8; 2] = ['h' as u8, 'i' as u8];\n const B: &'static [u8; 2] = &A;\n const C: *const u8 = B as *const u8;\n \n+#[rustc_no_mir] // FIXME #27840 MIR can't do rvalue promotion yet.\n pub fn main() {\n     unsafe {\n         let foo = &A as *const u8;"}, {"sha": "73c52a0843cfbd870c383fa30123b0343d1c239a", "filename": "src/test/run-pass/issue-23338-ensure-param-drop-order.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fissue-23338-ensure-param-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fissue-23338-ensure-param-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23338-ensure-param-drop-order.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_attrs)]\n+\n // ignore-pretty : (#23623) problems when  ending with // comments\n \n // This test is ensuring that parameters are indeed dropped after\n@@ -64,6 +66,7 @@ fn test<'a>(log: d::Log<'a>) {\n     d::println(&format!(\"result {}\", result));\n }\n \n+#[rustc_no_mir] // FIXME #29855 MIR doesn't handle all drops correctly.\n fn foo<'a>(da0: D<'a>, de1: D<'a>) -> D<'a> {\n     d::println(\"entered foo\");\n     let de2 = de1.incr();      // creates D(de_2, 2)"}, {"sha": "7589bce31f480ca7faeb98051748ee4878a82777", "filename": "src/test/run-pass/issue-8460.rs", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8460.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -9,31 +9,44 @@\n // except according to those terms.\n \n // ignore-emscripten no threads support\n+// ignore-pretty : (#23623) problems when  ending with // comments\n \n-#![feature(zero_one)]\n+#![feature(rustc_attrs, stmt_expr_attributes, zero_one)]\n \n use std::num::Zero;\n use std::thread;\n \n+macro_rules! check {\n+    ($($e:expr),*) => {\n+        $(assert!(thread::spawn({\n+            #[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n+            move|| { $e; }\n+        }).join().is_err());)*\n+    }\n+}\n+\n+#[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n-    assert!(thread::spawn(move|| { isize::min_value() / -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { i8::min_value() / -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { i16::min_value() / -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { i32::min_value() / -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { i64::min_value() / -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { 1isize / isize::zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i8 / i8::zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i16 / i16::zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i32 / i32::zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i64 / i64::zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { isize::min_value() % -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { i8::min_value() % -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { i16::min_value() % -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { i32::min_value() % -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { i64::min_value() % -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { 1isize % isize::zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i8 % i8::zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i16 % i16::zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i32 % i32::zero(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i64 % i64::zero(); }).join().is_err());\n+    check![\n+        isize::min_value() / -1,\n+        i8::min_value() / -1,\n+        i16::min_value() / -1,\n+        i32::min_value() / -1,\n+        i64::min_value() / -1,\n+        1isize / isize::zero(),\n+        1i8 / i8::zero(),\n+        1i16 / i16::zero(),\n+        1i32 / i32::zero(),\n+        1i64 / i64::zero(),\n+        isize::min_value() % -1,\n+        i8::min_value() % -1,\n+        i16::min_value() % -1,\n+        i32::min_value() % -1,\n+        i64::min_value() % -1,\n+        1isize % isize::zero(),\n+        1i8 % i8::zero(),\n+        1i16 % i16::zero(),\n+        1i32 % i32::zero(),\n+        1i64 % i64::zero()\n+    ];\n }"}, {"sha": "c0ba7a76dba480515e42dc683236966c922bc06b", "filename": "src/test/run-pass/mir_raw_fat_ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fmir_raw_fat_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fmir_raw_fat_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_raw_fat_ptr.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(rustc_attrs)]\n \n+// ignore-pretty : (#23623) problems when  ending with // comments\n+\n // check raw fat pointer ops in mir\n // FIXME: please improve this when we get monomorphization support\n \n@@ -119,6 +121,7 @@ impl<T> Foo for T {\n \n struct S<T:?Sized>(u32, T);\n \n+#[rustc_no_mir] // FIXME #27840 MIR can't do rvalue promotion yet.\n fn main() {\n     let array = [0,1,2,3,4];\n     let array2 = [5,6,7,8,9];"}, {"sha": "ffb9e6072dfe3cd488a5dd85e557c2448c00aa89", "filename": "src/test/run-pass/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-elements.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(repr_simd, platform_intrinsics)]\n+#![feature(repr_simd, rustc_attrs, platform_intrinsics)]\n+\n+// ignore-pretty : (#23623) problems when  ending with // comments\n \n #[repr(simd)]\n #[derive(Copy, Clone, Debug, PartialEq)]\n@@ -50,6 +52,7 @@ macro_rules! all_eq {\n     }}\n }\n \n+#[rustc_no_mir] // FIXME #27840 MIR doesn't handle shuffle constants.\n fn main() {\n     let x2 = i32x2(20, 21);\n     let x3 = i32x3(30, 31, 32);"}, {"sha": "a663ae650c087574611c8156d098a3b5674abc22", "filename": "src/test/run-pass/zero-size-type-destructors.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fzero-size-type-destructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473f804491772fe9a31f4096c3ec8da121fc8294/src%2Ftest%2Frun-pass%2Fzero-size-type-destructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzero-size-type-destructors.rs?ref=473f804491772fe9a31f4096c3ec8da121fc8294", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_attrs, unsafe_no_drop_flag)]\n \n-#![feature(unsafe_no_drop_flag)]\n+// ignore-pretty : (#23623) problems when  ending with // comments\n \n static mut destructions : isize = 3;\n \n+#[rustc_no_mir] // FIXME #29855 MIR doesn't handle all drops correctly.\n pub fn foo() {\n     #[unsafe_no_drop_flag]\n     struct Foo;"}]}