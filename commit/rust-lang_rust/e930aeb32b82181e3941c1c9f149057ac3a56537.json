{"sha": "e930aeb32b82181e3941c1c9f149057ac3a56537", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MzBhZWIzMmI4MjE4MWUzOTQxYzFjOWYxNDkwNTdhYzNhNTY1Mzc=", "commit": {"author": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2015-01-18T05:02:31Z"}, "committer": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2015-01-18T06:54:23Z"}, "message": "rustdoc: Accept string source in core::run_core\n\nThis is wanted by external tooling that uses rustdoc. There are likely\nsome bugs when actually generating HTML output (which may expect to be\nable to read the source) but all I need for now is the cleaned crate and\nanalysis.", "tree": {"sha": "ab55279247a3633650a876b6463fbe7465c1f1df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab55279247a3633650a876b6463fbe7465c1f1df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e930aeb32b82181e3941c1c9f149057ac3a56537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e930aeb32b82181e3941c1c9f149057ac3a56537", "html_url": "https://github.com/rust-lang/rust/commit/e930aeb32b82181e3941c1c9f149057ac3a56537", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e930aeb32b82181e3941c1c9f149057ac3a56537/comments", "author": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaf595eab9e57c7c2f301fb0e4054a03df23324d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf595eab9e57c7c2f301fb0e4054a03df23324d", "html_url": "https://github.com/rust-lang/rust/commit/aaf595eab9e57c7c2f301fb0e4054a03df23324d"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "a522cbf72fa90d2bd61af42208ea1c1678ed85c1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e930aeb32b82181e3941c1c9f149057ac3a56537/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e930aeb32b82181e3941c1c9f149057ac3a56537/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e930aeb32b82181e3941c1c9f149057ac3a56537", "patch": "@@ -45,7 +45,6 @@ use rustc::middle::def;\n use rustc::middle::subst::{self, ParamSpace, VecPerParamSpace};\n use rustc::middle::ty;\n use rustc::middle::stability;\n-use rustc::session::config;\n \n use std::rc::Rc;\n use std::u32;\n@@ -127,15 +126,17 @@ pub struct Crate {\n \n impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n     fn clean(&self, cx: &DocContext) -> Crate {\n+        use rustc::session::config::Input;\n+\n         let mut externs = Vec::new();\n         cx.sess().cstore.iter_crate_data(|n, meta| {\n             externs.push((n, meta.clean(cx)));\n         });\n         externs.sort_by(|&(a, _), &(b, _)| a.cmp(&b));\n \n         // Figure out the name of this crate\n-        let input = config::Input::File(cx.src.clone());\n-        let name = link::find_crate_name(None, self.attrs.as_slice(), &input);\n+        let input = &cx.input;\n+        let name = link::find_crate_name(None, self.attrs.as_slice(), input);\n \n         // Clean the crate, translating the entire libsyntax AST to one that is\n         // understood by rustdoc.\n@@ -188,9 +189,14 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n             m.items.extend(tmp.into_iter());\n         }\n \n+        let src = match cx.input {\n+            Input::File(ref path) => path.clone(),\n+            Input::Str(_) => FsPath::new(\"\") // FIXME: this is wrong\n+        };\n+\n         Crate {\n             name: name.to_string(),\n-            src: cx.src.clone(),\n+            src: src,\n             module: Some(module),\n             externs: externs,\n             primitives: primitives,"}, {"sha": "437ff66649781c599882b526e75f04ac0e1511ac", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e930aeb32b82181e3941c1c9f149057ac3a56537/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e930aeb32b82181e3941c1c9f149057ac3a56537/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e930aeb32b82181e3941c1c9f149057ac3a56537", "patch": "@@ -11,7 +11,7 @@ pub use self::MaybeTyped::*;\n \n use rustc_driver::driver;\n use rustc::session::{self, config};\n-use rustc::session::config::UnstableFeatures;\n+use rustc::session::config::{Input, UnstableFeatures};\n use rustc::session::search_paths::SearchPaths;\n use rustc::middle::{privacy, ty};\n use rustc::lint;\n@@ -39,7 +39,7 @@ pub type ExternalPaths = RefCell<Option<HashMap<ast::DefId,\n pub struct DocContext<'tcx> {\n     pub krate: &'tcx ast::Crate,\n     pub maybe_typed: MaybeTyped<'tcx>,\n-    pub src: Path,\n+    pub input: Input,\n     pub external_paths: ExternalPaths,\n     pub external_traits: RefCell<Option<HashMap<ast::DefId, clean::Trait>>>,\n     pub external_typarams: RefCell<Option<HashMap<ast::DefId, String>>>,\n@@ -80,12 +80,15 @@ pub struct CrateAnalysis {\n pub type Externs = HashMap<String, Vec<String>>;\n \n pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n-                cpath: &Path, triple: Option<String>)\n+                input: Input, triple: Option<String>)\n                 -> (clean::Crate, CrateAnalysis) {\n \n     // Parse, resolve, and typecheck the given crate.\n \n-    let input = config::Input::File(cpath.clone());\n+    let cpath = match input {\n+        Input::File(ref p) => Some(p.clone()),\n+        _ => None\n+    };\n \n     let warning_lint = lint::builtin::WARNINGS.name_lower();\n \n@@ -107,8 +110,7 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n     let span_diagnostic_handler =\n         diagnostic::mk_span_handler(diagnostic_handler, codemap);\n \n-    let sess = session::build_session_(sessopts,\n-                                       Some(cpath.clone()),\n+    let sess = session::build_session_(sessopts, cpath,\n                                        span_diagnostic_handler);\n \n     let cfg = config::build_configuration(&sess);\n@@ -136,7 +138,7 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n     let ctxt = DocContext {\n         krate: ty_cx.map.krate(),\n         maybe_typed: Typed(ty_cx),\n-        src: cpath.clone(),\n+        input: input,\n         external_traits: RefCell::new(Some(HashMap::new())),\n         external_typarams: RefCell::new(Some(HashMap::new())),\n         external_paths: RefCell::new(Some(HashMap::new())),"}, {"sha": "11135ed436ea154992571f3164de79c64a016115", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e930aeb32b82181e3941c1c9f149057ac3a56537/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e930aeb32b82181e3941c1c9f149057ac3a56537/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e930aeb32b82181e3941c1c9f149057ac3a56537", "patch": "@@ -350,8 +350,10 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n     info!(\"starting to run rustc\");\n \n     let (mut krate, analysis) = std::thread::Thread::scoped(move |:| {\n+        use rustc::session::config::Input;\n+\n         let cr = cr;\n-        core::run_core(paths, cfgs, externs, &cr, triple)\n+        core::run_core(paths, cfgs, externs, Input::File(cr), triple)\n     }).join().map_err(|_| \"rustc failed\").unwrap();\n     info!(\"finished with rustc\");\n     let mut analysis = Some(analysis);"}, {"sha": "7f1bd9e6d59657ed075659b79b1e868653e4db24", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e930aeb32b82181e3941c1c9f149057ac3a56537/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e930aeb32b82181e3941c1c9f149057ac3a56537/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=e930aeb32b82181e3941c1c9f149057ac3a56537", "patch": "@@ -79,7 +79,7 @@ pub fn run(input: &str,\n     let ctx = core::DocContext {\n         krate: &krate,\n         maybe_typed: core::NotTyped(sess),\n-        src: input_path,\n+        input: input,\n         external_paths: RefCell::new(Some(HashMap::new())),\n         external_traits: RefCell::new(None),\n         external_typarams: RefCell::new(None),"}]}