{"sha": "8ec371747a742d8f96effe80b9bfcfa53ff6fa62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYzM3MTc0N2E3NDJkOGY5NmVmZmU4MGI5YmZjZmE1M2ZmNmZhNjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-12T10:03:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-12T10:03:42Z"}, "message": "do not auto-detect the targets in the sysroot, instead specify target manually through env var", "tree": {"sha": "15d22609ce286b5619f02df7f97c819cafc71c2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d22609ce286b5619f02df7f97c819cafc71c2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ec371747a742d8f96effe80b9bfcfa53ff6fa62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec371747a742d8f96effe80b9bfcfa53ff6fa62", "html_url": "https://github.com/rust-lang/rust/commit/8ec371747a742d8f96effe80b9bfcfa53ff6fa62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ec371747a742d8f96effe80b9bfcfa53ff6fa62/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb32741210019b5ad32ded21c1db526f6680699", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb32741210019b5ad32ded21c1db526f6680699", "html_url": "https://github.com/rust-lang/rust/commit/6eb32741210019b5ad32ded21c1db526f6680699"}], "stats": {"total": 115, "additions": 41, "deletions": 74}, "files": [{"sha": "a58ff4f67d8d197b1dfa47c0629e0087ea7b8d77", "filename": ".travis.yml", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ec371747a742d8f96effe80b9bfcfa53ff6fa62/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8ec371747a742d8f96effe80b9bfcfa53ff6fa62/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=8ec371747a742d8f96effe80b9bfcfa53ff6fa62", "patch": "@@ -29,6 +29,12 @@ before_script:\n   else\n     export MIRI_SYSROOT_BASE=~/.cache/miri/\n   fi\n+- |\n+  if [[ \"$TRAVIS_OS_NAME\" == osx ]]; then\n+    FOREIGN_TARGET=i686-apple-darwin\n+  else\n+    FOREIGN_TARGET=i686-unknown-linux-gnu\n+  fi\n # install Rust\n - curl https://build.travis-ci.org/files/rustup-init.sh -sSf | sh -s -- -y --default-toolchain \"$RUST_TOOLCHAIN\"\n - export PATH=$HOME/.cargo/bin:$PATH\n@@ -43,15 +49,11 @@ script:\n - |\n   # Get ourselves a MIR-full libstd for the host and a foreign architecture\n   cargo miri setup &&\n-  if [[ \"$TRAVIS_OS_NAME\" == osx ]]; then\n-    cargo miri setup --target i686-apple-darwin\n-  else\n-    cargo miri setup --target i686-unknown-linux-gnu\n-  fi\n+  cargo miri setup --target \"$FOREIGN_TARGET\"\n - |\n   # Test miri with full MIR, on the host and other architectures\n   MIRI_SYSROOT=$MIRI_SYSROOT_BASE/HOST cargo test --release --all-features &&\n-  MIRI_SYSROOT=$MIRI_SYSROOT_BASE cargo test --release --all-features\n+  MIRI_SYSROOT=$MIRI_SYSROOT_BASE MIRI_TARGET=$FOREIGN_TARGET cargo test --release --all-features\n - |\n   # Test cargo integration\n   (cd test-cargo-miri && MIRI_SYSROOT=$MIRI_SYSROOT_BASE/HOST ./run-test.py)"}, {"sha": "b6e1c20076de9142a0482d4a2d138765f2ac21df", "filename": "README.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ec371747a742d8f96effe80b9bfcfa53ff6fa62/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ec371747a742d8f96effe80b9bfcfa53ff6fa62/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8ec371747a742d8f96effe80b9bfcfa53ff6fa62", "patch": "@@ -154,9 +154,9 @@ MIRI_LOG=rustc_mir::interpret=debug,miri::stacked_borrows cargo run tests/run-pa\n In addition, you can set `MIRI_BACKTRACE=1` to get a backtrace of where an\n evaluation error was originally created.\n \n-### Miri `-Z` flags\n+### Miri `-Z` flags and environment variables\n \n-Several `-Z` flags are relevant for miri:\n+Several `-Z` flags are relevant for Miri:\n \n * `-Zmir-opt-level` controls how many MIR optimizations are performed.  miri\n   overrides the default to be `0`; be advised that using any higher level can\n@@ -168,6 +168,14 @@ Several `-Z` flags are relevant for miri:\n   enforcing the validity invariant, which is enforced by default.  This is\n   mostly useful for debugging; it means miri will miss bugs in your program.\n \n+Moreover, Miri recognizes some environment variables:\n+\n+* `MIRI_SYSROOT` (recognized by `miri`, `cargo miri` and the test suite)\n+  indicates the sysroot to use.\n+* `MIRI_TARGET` (recognized by the test suite) indicates which target\n+  architecture to test against.  `miri` and `cargo miri` accept the `--target`\n+  flag for the same purpose.\n+\n ## Contributing and getting help\n \n Check out the issues on this GitHub repository for some ideas. There's lots that"}, {"sha": "a0862d00326ca98d94518c99f6958f64d1cc9176", "filename": "tests/compiletest.rs", "status": "modified", "additions": 23, "deletions": 66, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/8ec371747a742d8f96effe80b9bfcfa53ff6fa62/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec371747a742d8f96effe80b9bfcfa53ff6fa62/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=8ec371747a742d8f96effe80b9bfcfa53ff6fa62", "patch": "@@ -34,10 +34,11 @@ fn mk_config(mode: &str) -> compiletest::common::ConfigWithTemp {\n         config.compile_lib_path = rustc_lib_path();\n     }\n     config.filter = env::args().nth(1);\n+    config.host = get_host();\n     config\n }\n \n-fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, opt: bool) {\n+fn compile_fail(path: &str, target: &str, opt: bool) {\n     let opt_str = if opt { \" with optimizations\" } else { \"\" };\n     eprintln!(\"{}\", format!(\n         \"## Running compile-fail tests in {} against miri for target {}{}\",\n@@ -47,7 +48,6 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, opt: bool)\n     ).green().bold());\n \n     let mut flags = Vec::new();\n-    flags.push(format!(\"--sysroot {}\", sysroot.display()));\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n     flags.push(\"--edition 2018\".to_owned());\n     if opt {\n@@ -60,12 +60,11 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, opt: bool)\n     let mut config = mk_config(\"compile-fail\");\n     config.src_base = PathBuf::from(path);\n     config.target = target.to_owned();\n-    config.host = host.to_owned();\n     config.target_rustcflags = Some(flags.join(\" \"));\n     compiletest::run_tests(&config);\n }\n \n-fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, opt: bool) {\n+fn miri_pass(path: &str, target: &str, opt: bool) {\n     let opt_str = if opt { \" with optimizations\" } else { \"\" };\n     eprintln!(\"{}\", format!(\n         \"## Running run-pass tests in {} against miri for target {}{}\",\n@@ -75,7 +74,6 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, opt: bool) {\n     ).green().bold());\n \n     let mut flags = Vec::new();\n-    flags.push(format!(\"--sysroot {}\", sysroot.display()));\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n     flags.push(\"--edition 2018\".to_owned());\n     if opt {\n@@ -87,57 +85,24 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, opt: bool) {\n     let mut config = mk_config(\"ui\");\n     config.src_base = PathBuf::from(path);\n     config.target = target.to_owned();\n-    config.host = host.to_owned();\n     config.target_rustcflags = Some(flags.join(\" \"));\n     compiletest::run_tests(&config);\n }\n \n-fn is_target_dir<P: Into<PathBuf>>(path: P) -> bool {\n-    let mut path = path.into();\n-    path.push(\"lib\");\n-    path.metadata().map(|m| m.is_dir()).unwrap_or(false)\n-}\n-\n-fn target_has_std<P: Into<PathBuf>>(path: P) -> bool {\n-    let mut path = path.into();\n-    path.push(\"lib\");\n-    std::fs::read_dir(path)\n-        .expect(\"invalid target\")\n-        .map(|entry| entry.unwrap())\n-        .filter(|entry| entry.file_type().unwrap().is_file())\n-        .filter_map(|entry| entry.file_name().into_string().ok())\n-        .any(|file_name| file_name == \"libstd.rlib\")\n-}\n-\n-\n-fn for_all_targets<F: FnMut(String)>(sysroot: &Path, f: F) {\n-    let target_dir = sysroot.join(\"lib\").join(\"rustlib\");\n-    let mut targets = std::fs::read_dir(target_dir)\n-        .expect(\"invalid sysroot\")\n-        .map(|entry| entry.unwrap())\n-        .filter(|entry| is_target_dir(entry.path()))\n-        .filter(|entry| target_has_std(entry.path()))\n-        .map(|entry| entry.file_name().into_string().unwrap())\n-        .peekable();\n-\n-    if targets.peek().is_none() {\n-        panic!(\"No valid targets found\");\n+/// Make sure the MIRI_SYSROOT env var is set\n+fn set_sysroot() {\n+    if std::env::var(\"MIRI_SYSROOT\").is_ok() {\n+        // Nothing to do\n+        return;\n     }\n-\n-    targets.for_each(f);\n-}\n-\n-fn get_sysroot() -> PathBuf {\n-    let sysroot = std::env::var(\"MIRI_SYSROOT\").unwrap_or_else(|_| {\n-        let sysroot = std::process::Command::new(\"rustc\")\n-            .arg(\"--print\")\n-            .arg(\"sysroot\")\n-            .output()\n-            .expect(\"rustc not found\")\n-            .stdout;\n-        String::from_utf8(sysroot).expect(\"sysroot is not utf8\")\n-    });\n-    PathBuf::from(sysroot.trim())\n+    let sysroot = std::process::Command::new(\"rustc\")\n+        .arg(\"--print\")\n+        .arg(\"sysroot\")\n+        .output()\n+        .expect(\"rustc not found\")\n+        .stdout;\n+    let sysroot = String::from_utf8(sysroot).expect(\"sysroot is not utf8\");\n+    std::env::set_var(\"MIRI_SYSROOT\", sysroot.trim());\n }\n \n fn get_host() -> String {\n@@ -153,28 +118,20 @@ fn get_host() -> String {\n     version_meta.host\n }\n \n-fn run_pass_miri(opt: bool) {\n-    let sysroot = get_sysroot();\n-    let host = get_host();\n+fn get_target() -> String {\n+    std::env::var(\"MIRI_TARGET\").unwrap_or_else(|_| get_host())\n+}\n \n-    for_all_targets(&sysroot, |target| {\n-        miri_pass(&sysroot, \"tests/run-pass\", &target, &host, opt);\n-    });\n+fn run_pass_miri(opt: bool) {\n+    miri_pass(\"tests/run-pass\", &get_target(), opt);\n }\n \n fn compile_fail_miri(opt: bool) {\n-    let sysroot = get_sysroot();\n-    let host = get_host();\n-\n-    for_all_targets(&sysroot, |target| {\n-        compile_fail(&sysroot, \"tests/compile-fail\", &target, &host, opt);\n-    });\n+    compile_fail(\"tests/compile-fail\", &get_target(), opt);\n }\n \n fn test_runner(_tests: &[&()]) {\n-    // We put everything into a single test to avoid the parallelism `cargo test`\n-    // introduces.  We still get parallelism within our tests because `compiletest`\n-    // uses `libtest` which runs jobs in parallel.\n+    set_sysroot();\n \n     run_pass_miri(false);\n     run_pass_miri(true);"}]}