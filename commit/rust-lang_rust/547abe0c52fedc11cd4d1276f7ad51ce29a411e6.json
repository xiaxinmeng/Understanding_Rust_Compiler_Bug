{"sha": "547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0N2FiZTBjNTJmZWRjMTFjZDRkMTI3NmY3YWQ1MWNlMjlhNDExZTY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-12T22:48:46Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-25T06:02:43Z"}, "message": "Tweak errors for missing associated types and type parameters", "tree": {"sha": "0fda270872a6ee2e75af2810e28798ae999b4a00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fda270872a6ee2e75af2810e28798ae999b4a00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "html_url": "https://github.com/rust-lang/rust/commit/547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5a2a9a99c3973f77d7c86acb8ff7039c3d9c703", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a2a9a99c3973f77d7c86acb8ff7039c3d9c703", "html_url": "https://github.com/rust-lang/rust/commit/c5a2a9a99c3973f77d7c86acb8ff7039c3d9c703"}], "stats": {"total": 910, "additions": 611, "deletions": 299}, "files": [{"sha": "9d9a027645fde153408811c4b7d98dc3b6678949", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 194, "deletions": 56, "changes": 250, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -473,7 +473,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self_ty: Option<Ty<'tcx>>,\n         args_for_def_id: impl Fn(DefId) -> (Option<&'b GenericArgs>, bool),\n         provided_kind: impl Fn(&GenericParamDef, &GenericArg) -> subst::GenericArg<'tcx>,\n-        inferred_kind: impl Fn(\n+        mut inferred_kind: impl FnMut(\n             Option<&[subst::GenericArg<'tcx>]>,\n             &GenericParamDef,\n             bool,\n@@ -674,6 +674,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             false\n         };\n \n+        let mut missing_type_params = vec![];\n         let substs = Self::create_substs_for_generic_args(\n             tcx,\n             def_id,\n@@ -709,19 +710,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             // defaults. This will lead to an ICE if we are not\n                             // careful!\n                             if default_needs_object_self(param) {\n-                                struct_span_err!(\n-                                    tcx.sess,\n-                                    span,\n-                                    E0393,\n-                                    \"the type parameter `{}` must be explicitly specified\",\n-                                    param.name\n-                                )\n-                                .span_label(span, format!(\"missing reference to `{}`\", param.name))\n-                                .note(&format!(\n-                                    \"because of the default `Self` reference, type parameters \\\n-                                         must be specified on object types\"\n-                                ))\n-                                .emit();\n+                                missing_type_params.push(param.name.to_string());\n                                 tcx.types.err.into()\n                             } else {\n                                 // This is a default type parameter.\n@@ -759,6 +748,70 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n             },\n         );\n+        if !missing_type_params.is_empty() {\n+            let display = missing_type_params\n+                .iter()\n+                .map(|n| format!(\"`{}`\", n))\n+                .collect::<Vec<_>>()\n+                .join(\", \");\n+            let mut err = struct_span_err!(\n+                tcx.sess,\n+                span,\n+                E0393,\n+                \"the type parameter{} {} must be explicitly specified\",\n+                pluralize!(missing_type_params.len()),\n+                display,\n+            );\n+            err.span_label(\n+                self.tcx().def_span(def_id),\n+                &format!(\n+                    \"type parameter{} {} must be specified for this\",\n+                    pluralize!(missing_type_params.len()),\n+                    display,\n+                ),\n+            );\n+            let mut suggested = false;\n+            if let (Ok(snippet), true) = (\n+                tcx.sess.source_map().span_to_snippet(span),\n+                // Don't suggest setting the type params if there are some already: the order is\n+                // tricky to get right and the user will already know what the syntax is.\n+                generic_args.args.is_empty(),\n+            ) {\n+                if snippet.ends_with('>') {\n+                    // The user wrote `Trait<'a, T>` or similar. To provide an accurate suggestion\n+                    // we would have to preserve the right order. For now, as clearly the user is\n+                    // aware of the syntax, we do nothing.\n+                } else {\n+                    // The user wrote `Iterator`, so we don't have a type we can suggest, but at\n+                    // least we can clue them to the correct syntax `Iterator<Type>`.\n+                    err.span_suggestion(\n+                        span,\n+                        &format!(\n+                            \"set the type parameter{plural} to the desired type{plural}\",\n+                            plural = pluralize!(missing_type_params.len()),\n+                        ),\n+                        format!(\"{}<{}>\", snippet, missing_type_params.join(\", \")),\n+                        Applicability::HasPlaceholders,\n+                    );\n+                    suggested = true;\n+                }\n+            }\n+            if !suggested {\n+                err.span_label(\n+                    span,\n+                    format!(\n+                        \"missing reference{} to {}\",\n+                        pluralize!(missing_type_params.len()),\n+                        display,\n+                    ),\n+                );\n+            }\n+            err.note(&format!(\n+                \"because of the default `Self` reference, type parameters must be \\\n+                               specified on object types\"\n+            ));\n+            err.emit();\n+        }\n \n         // Convert associated-type bindings or constraints into a separate vector.\n         // Example: Given this:\n@@ -854,8 +907,18 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         self.prohibit_generics(trait_ref.path.segments.split_last().unwrap().1);\n \n+        let path_span = if trait_ref.path.segments.len() == 1 {\n+            // FIXME: `trait_ref.path.span` can point to a full path with multiple\n+            // segments, even though `trait_ref.path.segments` is of length `1`. Work\n+            // around that bug here, even though it should be fixed elsewhere.\n+            // This would otherwise cause an invalid suggestion. For an example, look at\n+            // `src/test/ui/issues/issue-28344.rs`.\n+            trait_ref.path.segments[0].ident.span\n+        } else {\n+            trait_ref.path.span\n+        };\n         let (substs, assoc_bindings, potential_assoc_types) = self.create_substs_for_ast_trait_ref(\n-            trait_ref.path.span,\n+            path_span,\n             trait_def_id,\n             self_ty,\n             trait_ref.path.segments.last().unwrap(),\n@@ -947,13 +1010,21 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             && trait_segment.generic_args().parenthesized != trait_def.paren_sugar\n         {\n             // For now, require that parenthetical notation be used only with `Fn()` etc.\n-            let msg = if trait_def.paren_sugar {\n-                \"the precise format of `Fn`-family traits' type parameters is subject to change. \\\n-                 Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\"\n+            let (msg, help) = if trait_def.paren_sugar {\n+                (\n+                    \"the precise format of `Fn`-family traits' type parameters is subject to \\\n+                     change\",\n+                    Some(\"use parenthetical notation instead: `Fn(Foo, Bar) -> Baz`\"),\n+                )\n             } else {\n-                \"parenthetical notation is only stable when used with `Fn`-family traits\"\n+                (\"parenthetical notation is only stable when used with `Fn`-family traits\", None)\n             };\n-            feature_err(&self.tcx().sess.parse_sess, sym::unboxed_closures, span, msg).emit();\n+            let sess = &self.tcx().sess.parse_sess;\n+            let mut err = feature_err(sess, sym::unboxed_closures, span, msg);\n+            if let Some(help) = help {\n+                err.help(help);\n+            }\n+            err.emit();\n         }\n \n         self.create_substs_for_ast_path(\n@@ -1213,8 +1284,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         self.tcx().sess,\n                         binding.span,\n                         E0719,\n-                        \"the value of the associated type `{}` (from the trait `{}`) \\\n-                                      is already specified\",\n+                        \"the value of the associated type `{}` (from trait `{}`) \\\n+                         is already specified\",\n                         binding.item_name,\n                         tcx.def_path_str(assoc_ty.container.id())\n                     )\n@@ -1378,65 +1449,123 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n \n         if !associated_types.is_empty() {\n+            // Account for things like `dyn Foo + 'a` by pointing at the `TraitRef.path`\n+            // `Span` instead of the `PolyTraitRef` `Span`. That way the suggestion will\n+            // be valid, otherwise we would suggest `dyn Foo + 'a<A = Type>`. See tests\n+            // `issue-22434.rs` and `issue-22560.rs` for examples.\n+            let sugg_span = if potential_assoc_types.is_empty() && trait_bounds.len() == 1 {\n+                if trait_bounds[0].trait_ref.path.segments.len() == 1\n+                    && trait_bounds[0].trait_ref.path.segments[0].args.is_none()\n+                {\n+                    // FIXME: `trait_ref.path.span` can point to a full path with multiple\n+                    // segments, even though `trait_ref.path.segments` is of length `1`. Work\n+                    // around that bug here, even though it should be fixed elsewhere.\n+                    // This would otherwise cause an invalid suggestion. For an example, look at\n+                    // `src/test/ui/issues/issue-28344.rs`.\n+                    trait_bounds[0].trait_ref.path.segments[0].ident.span\n+                } else {\n+                    trait_bounds[0].trait_ref.path.span\n+                }\n+            } else {\n+                span\n+            };\n             let names = associated_types\n                 .iter()\n                 .map(|item_def_id| {\n                     let assoc_item = tcx.associated_item(*item_def_id);\n                     let trait_def_id = assoc_item.container.id();\n                     format!(\n-                        \"`{}` (from the trait `{}`)\",\n+                        \"`{}` (from trait `{}`)\",\n                         assoc_item.ident,\n-                        tcx.def_path_str(trait_def_id),\n+                        tcx.def_path_str(trait_def_id)\n                     )\n                 })\n                 .collect::<Vec<_>>()\n                 .join(\", \");\n             let mut err = struct_span_err!(\n                 tcx.sess,\n-                span,\n+                sugg_span,\n                 E0191,\n                 \"the value of the associated type{} {} must be specified\",\n                 pluralize!(associated_types.len()),\n                 names,\n             );\n-            let (suggest, potential_assoc_types_spans) =\n-                if potential_assoc_types.len() == associated_types.len() {\n-                    // Only suggest when the amount of missing associated types equals the number of\n-                    // extra type arguments present, as that gives us a relatively high confidence\n-                    // that the user forgot to give the associtated type's name. The canonical\n-                    // example would be trying to use `Iterator<isize>` instead of\n-                    // `Iterator<Item = isize>`.\n-                    (true, potential_assoc_types)\n-                } else {\n-                    (false, Vec::new())\n-                };\n             let mut suggestions = Vec::new();\n+            let mut applicability = Applicability::MaybeIncorrect;\n             for (i, item_def_id) in associated_types.iter().enumerate() {\n                 let assoc_item = tcx.associated_item(*item_def_id);\n-                err.span_label(\n-                    span,\n-                    format!(\"associated type `{}` must be specified\", assoc_item.ident),\n-                );\n                 if let Some(sp) = tcx.hir().span_if_local(*item_def_id) {\n                     err.span_label(sp, format!(\"`{}` defined here\", assoc_item.ident));\n                 }\n-                if suggest {\n+                if potential_assoc_types.len() == associated_types.len() {\n+                    // Only suggest when the amount of missing associated types equals the number of\n+                    // extra type arguments present, as that gives us a relatively high confidence\n+                    // that the user forgot to give the associtated type's name. The canonical\n+                    // example would be trying to use `Iterator<isize>` instead of\n+                    // `Iterator<Item = isize>`.\n                     if let Ok(snippet) =\n-                        tcx.sess.source_map().span_to_snippet(potential_assoc_types_spans[i])\n+                        tcx.sess.source_map().span_to_snippet(potential_assoc_types[i])\n                     {\n                         suggestions.push((\n-                            potential_assoc_types_spans[i],\n+                            potential_assoc_types[i],\n                             format!(\"{} = {}\", assoc_item.ident, snippet),\n                         ));\n                     }\n                 }\n             }\n-            if !suggestions.is_empty() {\n-                let msg = format!(\n-                    \"if you meant to specify the associated {}, write\",\n-                    if suggestions.len() == 1 { \"type\" } else { \"types\" }\n+            let mut suggestions_len = suggestions.len();\n+            if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(sugg_span) {\n+                if potential_assoc_types.is_empty() && trait_bounds.len() == 1 &&\n+                    // Do not attempt to suggest when we don't know which path segment needs the\n+                    // type parameter set.\n+                    trait_bounds[0].trait_ref.path.segments.len() == 1\n+                {\n+                    debug!(\"path segments {:?}\", trait_bounds[0].trait_ref.path.segments);\n+                    applicability = Applicability::HasPlaceholders;\n+                    let assoc_types: Vec<String> = associated_types\n+                        .iter()\n+                        .map(|item_def_id| {\n+                            let assoc_item = tcx.associated_item(*item_def_id);\n+                            format!(\"{} = Type\", assoc_item.ident)\n+                        })\n+                        .collect();\n+                    let sugg = assoc_types.join(\", \");\n+                    if snippet.ends_with('>') {\n+                        // The user wrote `Trait<'a>` or similar and we don't have a type we can\n+                        // suggest, but at least we can clue them to the correct syntax\n+                        // `Trait<'a, Item = Type>` while accounting for the `<'a>` in the\n+                        // suggestion.\n+                        suggestions.push((\n+                            sugg_span,\n+                            format!(\"{}, {}>\", &snippet[..snippet.len() - 1], sugg,),\n+                        ));\n+                    } else {\n+                        // The user wrote `Iterator`, so we don't have a type we can suggest, but at\n+                        // least we can clue them to the correct syntax `Iterator<Item = Type>`.\n+                        suggestions.push((sugg_span, format!(\"{}<{}>\", snippet, sugg)));\n+                    }\n+                    suggestions_len = assoc_types.len();\n+                }\n+            }\n+            if suggestions.len() != 1 {\n+                // We don't need this label if there's an inline suggestion, show otherwise.\n+                let names = associated_types\n+                    .iter()\n+                    .map(|t| format!(\"`{}`\", tcx.associated_item(*t).ident))\n+                    .collect::<Vec<_>>()\n+                    .join(\", \");\n+                err.span_label(\n+                    span,\n+                    format!(\n+                        \"associated type{} {} must be specified\",\n+                        pluralize!(associated_types.len()),\n+                        names,\n+                    ),\n                 );\n-                err.multipart_suggestion(&msg, suggestions, Applicability::MaybeIncorrect);\n+            }\n+            if !suggestions.is_empty() {\n+                let msg = format!(\"specify the associated type{}\", pluralize!(suggestions_len));\n+                err.multipart_suggestion(&msg, suggestions, applicability);\n             }\n             err.emit();\n         }\n@@ -1645,23 +1774,32 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     })\n                     .and_then(|item| self.tcx().hir().span_if_local(item.def_id));\n \n-                if let Some(span) = bound_span {\n+                if let Some(bound_span) = bound_span {\n                     err.span_label(\n-                        span,\n+                        bound_span,\n                         format!(\n                             \"ambiguous `{}` from `{}`\",\n                             assoc_name,\n-                            bound.print_only_trait_path()\n+                            bound.print_only_trait_path(),\n                         ),\n                     );\n-                } else {\n-                    span_note!(\n-                        &mut err,\n+                    err.span_suggestion(\n                         span,\n+                        \"use fully qualified syntax to disambiguate\",\n+                        format!(\n+                            \"<{} as {}>::{}\",\n+                            ty_param_name,\n+                            bound.print_only_trait_path(),\n+                            assoc_name,\n+                        ),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else {\n+                    err.note(&format!(\n                         \"associated type `{}` could derive from `{}`\",\n                         ty_param_name,\n-                        bound.print_only_trait_path()\n-                    );\n+                        bound.print_only_trait_path(),\n+                    ));\n                 }\n             }\n             err.emit();"}, {"sha": "1970b9af14e9a1257a6cf5e992b718b7da2d28da", "filename": "src/test/compile-fail/issue-23595-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fcompile-fail%2Fissue-23595-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fcompile-fail%2Fissue-23595-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23595-1.rs?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,12 +1,12 @@\n #![feature(associated_type_defaults)]\n \n-use std::ops::{Index};\n+use std::ops::Index;\n \n trait Hierarchy {\n     type Value;\n     type ChildKey;\n     type Children = dyn Index<Self::ChildKey, Output=dyn Hierarchy>;\n-    //~^ ERROR: the value of the associated types `Value` (from the trait `Hierarchy`), `ChildKey`\n+    //~^ ERROR: the value of the associated types `Value` (from trait `Hierarchy`), `ChildKey`\n \n     fn data(&self) -> Option<(Self::Value, Self::Children)>;\n }"}, {"sha": "64bc9eeec25293c91bc51f5042cb702ec0d8f886", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -9,175 +9,175 @@\n use std::iter;\n \n struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n \n enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n \n union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n \n fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n \n fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> { iter::empty() }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> { iter::empty() }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> { iter::empty() }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n \n const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n \n fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n \n type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n \n type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n \n trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRS1: Iterator<Item: Copy, Item: Send> {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n \n type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n-//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified [E0719]\n //~| ERROR could not find defining uses\n //~| ERROR could not find defining uses\n "}, {"sha": "caecc5e85f6e7312763a263d53b852605dbd3c44", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -6,359 +6,359 @@ LL | #![feature(impl_trait_in_bindings)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:11:36\n    |\n LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:13:36\n    |\n LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:15:39\n    |\n LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:17:45\n    |\n LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:19:45\n    |\n LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:21:48\n    |\n LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:24:34\n    |\n LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:26:34\n    |\n LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:28:37\n    |\n LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:30:43\n    |\n LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:32:43\n    |\n LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:34:46\n    |\n LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:37:35\n    |\n LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:39:35\n    |\n LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:41:38\n    |\n LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:43:44\n    |\n LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:45:44\n    |\n LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:47:47\n    |\n LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:50:32\n    |\n LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:52:32\n    |\n LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:54:35\n    |\n LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:56:43\n    |\n LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:58:43\n    |\n LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:60:46\n    |\n LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:69:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:71:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:73:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:63:42\n    |\n LL | fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> { iter::empty() }\n    |                              ----------  ^^^^^^^^^^ re-bound here\n    |                              |\n    |                              `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:65:42\n    |\n LL | fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> { iter::empty() }\n    |                              ----------  ^^^^^^^^^^ re-bound here\n    |                              |\n    |                              `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:67:45\n    |\n LL | fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> { iter::empty() }\n    |                              -------------  ^^^^^^^^^^^^^ re-bound here\n    |                              |\n    |                              `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:76:39\n    |\n LL | const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:78:39\n    |\n LL | const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:80:42\n    |\n LL | const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                           -------------  ^^^^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:82:40\n    |\n LL | static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:84:40\n    |\n LL | static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:86:43\n    |\n LL | static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:89:46\n    |\n LL | fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:91:46\n    |\n LL | fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:93:49\n    |\n LL | fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:96:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:98:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:100:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:102:44\n    |\n LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:104:44\n    |\n LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:106:47\n    |\n LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n@@ -372,7 +372,7 @@ error: could not find defining uses\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:109:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n@@ -386,7 +386,7 @@ error: could not find defining uses\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:114:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n@@ -400,7 +400,7 @@ error: could not find defining uses\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:119:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n@@ -414,7 +414,7 @@ error: could not find defining uses\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:124:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n@@ -428,7 +428,7 @@ error: could not find defining uses\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:129:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n@@ -442,151 +442,151 @@ error: could not find defining uses\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:134:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:140:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:142:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:144:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:146:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:148:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:150:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:152:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:154:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:156:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:158:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:160:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:162:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:164:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:166:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:168:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:171:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:175:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:179:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;"}, {"sha": "6de8459954c681a8ae2bb93cc6e4445b1f79c6ae", "filename": "src/test/ui/associated-type/associated-type-projection-ambig-between-bound-and-where-clause.stderr", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -9,6 +9,15 @@ LL |     type Color;\n ...\n LL | fn a<C:Vehicle+Box>(_: C::Color) {\n    |                        ^^^^^^^^ ambiguous associated type `Color`\n+   |\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | fn a<C:Vehicle+Box>(_: <C as Box>::Color) {\n+   |                        ^^^^^^^^^^^^^^^^^\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | fn a<C:Vehicle+Box>(_: <C as Vehicle>::Color) {\n+   |                        ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:20:12\n@@ -21,6 +30,15 @@ LL |     type Color;\n ...\n LL | fn b<C>(_: C::Color) where C : Vehicle+Box {\n    |            ^^^^^^^^ ambiguous associated type `Color`\n+   |\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | fn b<C>(_: <C as Box>::Color) where C : Vehicle+Box {\n+   |            ^^^^^^^^^^^^^^^^^\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | fn b<C>(_: <C as Vehicle>::Color) where C : Vehicle+Box {\n+   |            ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:24:12\n@@ -33,6 +51,15 @@ LL |     type Color;\n ...\n LL | fn c<C>(_: C::Color) where C : Vehicle, C : Box {\n    |            ^^^^^^^^ ambiguous associated type `Color`\n+   |\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | fn c<C>(_: <C as Box>::Color) where C : Vehicle, C : Box {\n+   |            ^^^^^^^^^^^^^^^^^\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | fn c<C>(_: <C as Vehicle>::Color) where C : Vehicle, C : Box {\n+   |            ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0221]: ambiguous associated type `Color` in bounds of `X`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:35:20\n@@ -45,6 +72,15 @@ LL |     type Color;\n ...\n LL |     fn e(&self, _: X::Color) where X : Box;\n    |                    ^^^^^^^^ ambiguous associated type `Color`\n+   |\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL |     fn e(&self, _: <X as Box>::Color) where X : Box;\n+   |                    ^^^^^^^^^^^^^^^^^\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL |     fn e(&self, _: <X as Vehicle>::Color) where X : Box;\n+   |                    ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0221]: ambiguous associated type `Color` in bounds of `X`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:38:20\n@@ -57,6 +93,15 @@ LL |     type Color;\n ...\n LL |     fn f(&self, _: X::Color) where X : Box { }\n    |                    ^^^^^^^^ ambiguous associated type `Color`\n+   |\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL |     fn f(&self, _: <X as Box>::Color) where X : Box { }\n+   |                    ^^^^^^^^^^^^^^^^^\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL |     fn f(&self, _: <X as Vehicle>::Color) where X : Box { }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0221]: ambiguous associated type `Color` in bounds of `X`\n   --> $DIR/associated-type-projection-ambig-between-bound-and-where-clause.rs:30:20\n@@ -69,6 +114,15 @@ LL |     type Color;\n ...\n LL |     fn d(&self, _: X::Color) where X : Box { }\n    |                    ^^^^^^^^ ambiguous associated type `Color`\n+   |\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL |     fn d(&self, _: <X as Box>::Color) where X : Box { }\n+   |                    ^^^^^^^^^^^^^^^^^\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL |     fn d(&self, _: <X as Vehicle>::Color) where X : Box { }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "f50587bac16557f561b1a1ca3dde835df3200bd0", "filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.rs?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -20,13 +20,26 @@ fn dent<C:BoxCar>(c: C, color: C::Color) {\n     //~^ ERROR ambiguous associated type `Color` in bounds of `C`\n }\n \n+// FIXME: add error code to detect this case and explain that you'll want the approach in\n+// `dent_object_3` of using a new type param and relying on the `where` clauses.\n fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n     //~^ ERROR ambiguous associated type\n-    //~| ERROR the value of the associated type `Color` (from the trait `Vehicle`) must be specified\n+    //~| ERROR the value of the associated type `Color` (from trait `Vehicle`) must be specified\n }\n \n fn paint<C:BoxCar>(c: C, d: C::Color) {\n     //~^ ERROR ambiguous associated type `Color` in bounds of `C`\n }\n \n+fn dent_object_2<COLOR>(c: dyn BoxCar) where <dyn BoxCar as Vehicle>::Color = COLOR {\n+    //~^ ERROR the value of the associated types `Color` (from trait `Vehicle`), `Color` (from\n+    //~| ERROR equality constraints are not yet supported in where clauses\n+}\n+\n+fn dent_object_3<X, COLOR>(c: X)\n+where X: BoxCar,\n+    X: Vehicle<Color = COLOR>,\n+    X: Box<Color = COLOR>\n+{} // OK!\n+\n pub fn main() { }"}, {"sha": "4f14cffb0656eb0678a2ee67abc5d5b14a3a1e7b", "filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.stderr", "status": "modified", "additions": 51, "deletions": 6, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,3 +1,9 @@\n+error: equality constraints are not yet supported in where clauses (see #20041)\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:34:46\n+   |\n+LL | fn dent_object_2<COLOR>(c: dyn BoxCar) where <dyn BoxCar as Vehicle>::Color = COLOR {\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:19:32\n    |\n@@ -9,9 +15,18 @@ LL |     type Color;\n ...\n LL | fn dent<C:BoxCar>(c: C, color: C::Color) {\n    |                                ^^^^^^^^ ambiguous associated type `Color`\n+   |\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | fn dent<C:BoxCar>(c: C, color: <C as Box>::Color) {\n+   |                                ^^^^^^^^^^^^^^^^^\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | fn dent<C:BoxCar>(c: C, color: <C as Vehicle>::Color) {\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0221]: ambiguous associated type `Color` in bounds of `BoxCar`\n-  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:37\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:25:37\n    |\n LL |     type Color;\n    |     ----------- ambiguous `Color` from `Vehicle`\n@@ -21,18 +36,27 @@ LL |     type Color;\n ...\n LL | fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n    |                                     ^^^^^^^^^^^ ambiguous associated type `Color`\n+   |\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | fn dent_object<COLOR>(c: dyn BoxCar<<BoxCar as Box>::Color>) {\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | fn dent_object<COLOR>(c: dyn BoxCar<<BoxCar as Vehicle>::Color>) {\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0191]: the value of the associated type `Color` (from the trait `Vehicle`) must be specified\n-  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:26\n+error[E0191]: the value of the associated type `Color` (from trait `Vehicle`) must be specified\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:25:30\n    |\n LL |     type Color;\n    |     ----------- `Color` defined here\n ...\n LL | fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^ associated type `Color` must be specified\n+   |                              ^^^^^^^^^^^^^^^^^^^ help: specify the associated type: `BoxCar<Color=COLOR, Color = Type>`\n \n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n-  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:28:29\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:30:29\n    |\n LL |     type Color;\n    |     ----------- ambiguous `Color` from `Vehicle`\n@@ -42,8 +66,29 @@ LL |     type Color;\n ...\n LL | fn paint<C:BoxCar>(c: C, d: C::Color) {\n    |                             ^^^^^^^^ ambiguous associated type `Color`\n+   |\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | fn paint<C:BoxCar>(c: C, d: <C as Box>::Color) {\n+   |                             ^^^^^^^^^^^^^^^^^\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | fn paint<C:BoxCar>(c: C, d: <C as Vehicle>::Color) {\n+   |                             ^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0191]: the value of the associated types `Color` (from trait `Vehicle`), `Color` (from trait `Box`) must be specified\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:34:32\n+   |\n+LL |     type Color;\n+   |     ----------- `Color` defined here\n+...\n+LL |     type Color;\n+   |     ----------- `Color` defined here\n+...\n+LL | fn dent_object_2<COLOR>(c: dyn BoxCar) where <dyn BoxCar as Vehicle>::Color = COLOR {\n+   |                                ^^^^^^ help: specify the associated types: `BoxCar<Color = Type, Color = Type>`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0191, E0221.\n For more information about an error, try `rustc --explain E0191`."}, {"sha": "4627dfd2b780822da2cee2682ca04318a955269f", "filename": "src/test/ui/associated-types/associated-types-incomplete-object.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.rs?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -21,11 +21,11 @@ pub fn main() {\n     let a = &42isize as &dyn Foo<A=usize, B=char>;\n \n     let b = &42isize as &dyn Foo<A=usize>;\n-    //~^ ERROR the value of the associated type `B` (from the trait `Foo`) must be specified\n+    //~^ ERROR the value of the associated type `B` (from trait `Foo`) must be specified\n \n     let c = &42isize as &dyn Foo<B=char>;\n-    //~^ ERROR the value of the associated type `A` (from the trait `Foo`) must be specified\n+    //~^ ERROR the value of the associated type `A` (from trait `Foo`) must be specified\n \n     let d = &42isize as &dyn Foo;\n-    //~^ ERROR the value of the associated types `A` (from the trait `Foo`), `B` (from the trait\n+    //~^ ERROR the value of the associated types `A` (from trait `Foo`), `B` (from trait\n }"}, {"sha": "24732271c420f0932a79cd379dcd287035bcd714", "filename": "src/test/ui/associated-types/associated-types-incomplete-object.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-incomplete-object.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,34 +1,31 @@\n-error[E0191]: the value of the associated type `B` (from the trait `Foo`) must be specified\n-  --> $DIR/associated-types-incomplete-object.rs:23:26\n+error[E0191]: the value of the associated type `B` (from trait `Foo`) must be specified\n+  --> $DIR/associated-types-incomplete-object.rs:23:30\n    |\n LL |     type B;\n    |     ------- `B` defined here\n ...\n LL |     let b = &42isize as &dyn Foo<A=usize>;\n-   |                          ^^^^^^^^^^^^^^^^ associated type `B` must be specified\n+   |                              ^^^^^^^^^^^^ help: specify the associated type: `Foo<A=usize, B = Type>`\n \n-error[E0191]: the value of the associated type `A` (from the trait `Foo`) must be specified\n-  --> $DIR/associated-types-incomplete-object.rs:26:26\n+error[E0191]: the value of the associated type `A` (from trait `Foo`) must be specified\n+  --> $DIR/associated-types-incomplete-object.rs:26:30\n    |\n LL |     type A;\n    |     ------- `A` defined here\n ...\n LL |     let c = &42isize as &dyn Foo<B=char>;\n-   |                          ^^^^^^^^^^^^^^^ associated type `A` must be specified\n+   |                              ^^^^^^^^^^^ help: specify the associated type: `Foo<B=char, A = Type>`\n \n-error[E0191]: the value of the associated types `A` (from the trait `Foo`), `B` (from the trait `Foo`) must be specified\n-  --> $DIR/associated-types-incomplete-object.rs:29:26\n+error[E0191]: the value of the associated types `A` (from trait `Foo`), `B` (from trait `Foo`) must be specified\n+  --> $DIR/associated-types-incomplete-object.rs:29:30\n    |\n LL |     type A;\n    |     ------- `A` defined here\n LL |     type B;\n    |     ------- `B` defined here\n ...\n LL |     let d = &42isize as &dyn Foo;\n-   |                          ^^^^^^^\n-   |                          |\n-   |                          associated type `A` must be specified\n-   |                          associated type `B` must be specified\n+   |                              ^^^ help: specify the associated types: `Foo<A = Type, B = Type>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b7856e20afaad762a1d0dbfc8402fc24f07b5d43", "filename": "src/test/ui/associated-types/associated-types-path-1.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -15,6 +15,15 @@ LL |     type A;\n ...\n LL | pub fn f2<T: Foo + Bar>(a: T, x: T::A) {}\n    |                                  ^^^^ ambiguous associated type `A`\n+   |\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | pub fn f2<T: Foo + Bar>(a: T, x: <T as Bar>::A) {}\n+   |                                  ^^^^^^^^^^^^^\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL | pub fn f2<T: Foo + Bar>(a: T, x: <T as Foo>::A) {}\n+   |                                  ^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d69a14916e1981df8641c543679335bc0d7a8238", "filename": "src/test/ui/error-codes/E0191.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0191.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,11 +1,11 @@\n-error[E0191]: the value of the associated type `Bar` (from the trait `Trait`) must be specified\n-  --> $DIR/E0191.rs:5:12\n+error[E0191]: the value of the associated type `Bar` (from trait `Trait`) must be specified\n+  --> $DIR/E0191.rs:5:16\n    |\n LL |     type Bar;\n    |     --------- `Bar` defined here\n ...\n LL | type Foo = dyn Trait;\n-   |            ^^^^^^^^^ associated type `Bar` must be specified\n+   |                ^^^^^ help: specify the associated type: `Trait<Bar = Type>`\n \n error: aborting due to previous error\n "}, {"sha": "58a92fe98323b7334b90a4a961daeb4da6386ed8", "filename": "src/test/ui/error-codes/E0220.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0220.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -4,14 +4,14 @@ error[E0220]: associated type `F` not found for `Trait`\n LL | type Foo = dyn Trait<F=i32>;\n    |                      ^^^^^ associated type `F` not found\n \n-error[E0191]: the value of the associated type `Bar` (from the trait `Trait`) must be specified\n-  --> $DIR/E0220.rs:5:12\n+error[E0191]: the value of the associated type `Bar` (from trait `Trait`) must be specified\n+  --> $DIR/E0220.rs:5:16\n    |\n LL |     type Bar;\n    |     --------- `Bar` defined here\n ...\n LL | type Foo = dyn Trait<F=i32>;\n-   |            ^^^^^^^^^^^^^^^^ associated type `Bar` must be specified\n+   |                ^^^^^^^^^^^^ help: specify the associated type: `Trait<F=i32, Bar = Type>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0b4819143ceb618fa73c6bbc794f4cb9a76e9dfb", "filename": "src/test/ui/error-codes/E0221.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -9,21 +9,29 @@ LL |     type A: T2;\n LL |     fn do_something() {\n LL |         let _: Self::A;\n    |                ^^^^^^^ ambiguous associated type `A`\n+   |\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL |         let _: <Self as Foo>::A;\n+   |                ^^^^^^^^^^^^^^^^\n+help: use fully qualified syntax to disambiguate\n+   |\n+LL |         let _: <Self as Bar>::A;\n+   |                ^^^^^^^^^^^^^^^^\n \n error[E0221]: ambiguous associated type `Err` in bounds of `Self`\n   --> $DIR/E0221.rs:21:16\n    |\n LL |     type Err: T3;\n    |     ------------- ambiguous `Err` from `My`\n LL |     fn test() {\n-LL |         let _: Self::Err;\n-   |                ^^^^^^^^^ ambiguous associated type `Err`\n-   |\n-note: associated type `Self` could derive from `std::str::FromStr`\n-  --> $DIR/E0221.rs:21:16\n-   |\n LL |         let _: Self::Err;\n    |                ^^^^^^^^^\n+   |                |\n+   |                ambiguous associated type `Err`\n+   |                help: use fully qualified syntax to disambiguate: `<Self as My>::Err`\n+   |\n+   = note: associated type `Self` could derive from `std::str::FromStr`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7771bacc9ed935874cb8e3877a118ae9dfed3b43", "filename": "src/test/ui/error-codes/E0393.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,8 +1,11 @@\n error[E0393]: the type parameter `T` must be explicitly specified\n   --> $DIR/E0393.rs:3:47\n    |\n+LL | trait A<T=Self> {}\n+   | ------------------ type parameter `T` must be specified for this\n+LL | \n LL | fn together_we_will_rule_the_galaxy(son: &dyn A) {}\n-   |                                               ^ missing reference to `T`\n+   |                                               ^ help: set the type parameter to the desired type: `A<T>`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n "}, {"sha": "a046fbfc3d04a0fd4d0c930eafe66ed3d8ecd553", "filename": "src/test/ui/error-codes/E0719.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ferror-codes%2FE0719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ferror-codes%2FE0719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0719.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,12 +1,12 @@\n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/E0719.rs:1:33\n    |\n LL | trait Foo: Iterator<Item = i32, Item = i32> {}\n    |                     ----------  ^^^^^^^^^^ re-bound here\n    |                     |\n    |                     `Item` bound here first\n \n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+error[E0719]: the value of the associated type `Item` (from trait `std::iter::Iterator`) is already specified\n   --> $DIR/E0719.rs:6:42\n    |\n LL | fn test() -> Box<dyn Iterator<Item = (), Item = Unit>> {"}, {"sha": "48230dc035b582b1a852360fd868824f8061257c", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -34,38 +34,41 @@ LL |     extern \"rust-call\" fn call_once(&self, args: ()) -> () {}\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:9:6\n    |\n LL | impl Fn<()> for Foo {\n    |      ^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+   = help: use parenthetical notation instead: `Fn(Foo, Bar) -> Baz`\n \n error[E0229]: associated type bindings are not allowed here\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:15:6\n    |\n LL | impl FnOnce() for Foo1 {\n    |      ^^^^^^^^ associated type not allowed here\n \n-error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:21:6\n    |\n LL | impl FnMut<()> for Bar {\n    |      ^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+   = help: use parenthetical notation instead: `Fn(Foo, Bar) -> Baz`\n \n-error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:27:6\n    |\n LL | impl FnOnce<()> for Baz {\n    |      ^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+   = help: use parenthetical notation instead: `Fn(Foo, Bar) -> Baz`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "67814a5d016986358d793b1d272b65f3212e2361", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -7,14 +7,15 @@ LL |     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n   --> $DIR/feature-gate-unboxed-closures.rs:5:6\n    |\n LL | impl FnOnce<(u32, u32)> for Test {\n    |      ^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+   = help: use parenthetical notation instead: `Fn(Foo, Bar) -> Baz`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3f3c5de9b1404282e1c8ac303eb68875c5f81c53", "filename": "src/test/ui/issues/issue-19482.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-19482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-19482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19482.rs?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -8,6 +8,6 @@ trait Foo {\n }\n \n fn bar(x: &dyn Foo) {}\n-//~^ ERROR the associated type `A` (from the trait `Foo`) must be specified\n+//~^ ERROR the associated type `A` (from trait `Foo`) must be specified\n \n pub fn main() {}"}, {"sha": "42a5a01596905102a519df0f9fa525ef17a12135", "filename": "src/test/ui/issues/issue-19482.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-19482.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-19482.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19482.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,11 +1,11 @@\n-error[E0191]: the value of the associated type `A` (from the trait `Foo`) must be specified\n-  --> $DIR/issue-19482.rs:10:12\n+error[E0191]: the value of the associated type `A` (from trait `Foo`) must be specified\n+  --> $DIR/issue-19482.rs:10:16\n    |\n LL |     type A;\n    |     ------- `A` defined here\n ...\n LL | fn bar(x: &dyn Foo) {}\n-   |            ^^^^^^^ associated type `A` must be specified\n+   |                ^^^ help: specify the associated type: `Foo<A = Type>`\n \n error: aborting due to previous error\n "}, {"sha": "c904236b31b37d229d940d4dd720b4ab5c5be001", "filename": "src/test/ui/issues/issue-21950.stderr", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,16 +1,27 @@\n error[E0393]: the type parameter `Rhs` must be explicitly specified\n   --> $DIR/issue-21950.rs:5:18\n    |\n-LL |             &dyn Add;\n-   |                  ^^^ missing reference to `Rhs`\n+LL |               &dyn Add;\n+   |                    ^^^ help: set the type parameter to the desired type: `Add<Rhs>`\n+   | \n+  ::: $SRC_DIR/libcore/ops/arith.rs:LL:COL\n+   |\n+LL | / pub trait Add<Rhs = Self> {\n+LL | |     /// The resulting type after applying the `+` operator.\n+LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+LL | |     type Output;\n+...  |\n+LL | |     fn add(self, rhs: Rhs) -> Self::Output;\n+LL | | }\n+   | |_- type parameter `Rhs` must be specified for this\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n-error[E0191]: the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified\n-  --> $DIR/issue-21950.rs:5:14\n+error[E0191]: the value of the associated type `Output` (from trait `std::ops::Add`) must be specified\n+  --> $DIR/issue-21950.rs:5:18\n    |\n LL |             &dyn Add;\n-   |              ^^^^^^^ associated type `Output` must be specified\n+   |                  ^^^ help: specify the associated type: `Add<Output = Type>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "950c12ef7a21c39aa48f1d70efc774091c795679", "filename": "src/test/ui/issues/issue-22370.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,8 +1,11 @@\n error[E0393]: the type parameter `T` must be explicitly specified\n   --> $DIR/issue-22370.rs:3:14\n    |\n+LL | trait A<T=Self> {}\n+   | ------------------ type parameter `T` must be specified for this\n+LL | \n LL | fn f(a: &dyn A) {}\n-   |              ^ missing reference to `T`\n+   |              ^ help: set the type parameter to the desired type: `A<T>`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n "}, {"sha": "34057b46ecd4299844de3c20b64900824b54185c", "filename": "src/test/ui/issues/issue-22434.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-22434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-22434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22434.rs?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -3,6 +3,6 @@ pub trait Foo {\n }\n \n type I<'a> = &'a (dyn Foo + 'a);\n-//~^ ERROR the value of the associated type `A` (from the trait `Foo`) must be specified\n+//~^ ERROR the value of the associated type `A` (from trait `Foo`) must be specified\n \n fn main() {}"}, {"sha": "79b9d85610bcecd0908b15094227647fe74a7d73", "filename": "src/test/ui/issues/issue-22434.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-22434.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-22434.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22434.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,11 +1,11 @@\n-error[E0191]: the value of the associated type `A` (from the trait `Foo`) must be specified\n-  --> $DIR/issue-22434.rs:5:19\n+error[E0191]: the value of the associated type `A` (from trait `Foo`) must be specified\n+  --> $DIR/issue-22434.rs:5:23\n    |\n LL |     type A;\n    |     ------- `A` defined here\n ...\n LL | type I<'a> = &'a (dyn Foo + 'a);\n-   |                   ^^^^^^^^^^^^ associated type `A` must be specified\n+   |                       ^^^ help: specify the associated type: `Foo<A = Type>`\n \n error: aborting due to previous error\n "}, {"sha": "bce49aaf16ddc225ba4d80d606b7a2bdcb2d5cfc", "filename": "src/test/ui/issues/issue-22560.stderr", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,16 +1,38 @@\n error[E0393]: the type parameter `Rhs` must be explicitly specified\n   --> $DIR/issue-22560.rs:6:13\n    |\n-LL |             Sub;\n-   |             ^^^ missing reference to `Rhs`\n+LL |               Sub;\n+   |               ^^^ help: set the type parameter to the desired type: `Sub<Rhs>`\n+   | \n+  ::: $SRC_DIR/libcore/ops/arith.rs:LL:COL\n+   |\n+LL | / pub trait Sub<Rhs = Self> {\n+LL | |     /// The resulting type after applying the `-` operator.\n+LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+LL | |     type Output;\n+...  |\n+LL | |     fn sub(self, rhs: Rhs) -> Self::Output;\n+LL | | }\n+   | |_- type parameter `Rhs` must be specified for this\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0393]: the type parameter `Rhs` must be explicitly specified\n   --> $DIR/issue-22560.rs:3:17\n    |\n-LL | type Test = dyn Add +\n-   |                 ^^^ missing reference to `Rhs`\n+LL |   type Test = dyn Add +\n+   |                   ^^^ help: set the type parameter to the desired type: `Add<Rhs>`\n+   | \n+  ::: $SRC_DIR/libcore/ops/arith.rs:LL:COL\n+   |\n+LL | / pub trait Add<Rhs = Self> {\n+LL | |     /// The resulting type after applying the `+` operator.\n+LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+LL | |     type Output;\n+...  |\n+LL | |     fn add(self, rhs: Rhs) -> Self::Output;\n+LL | | }\n+   | |_- type parameter `Rhs` must be specified for this\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n@@ -29,20 +51,15 @@ LL |             Sub;\n    |             additional non-auto trait\n    |             trait alias used in trait object type (additional use)\n \n-error[E0191]: the value of the associated types `Output` (from the trait `std::ops::Add`), `Output` (from the trait `std::ops::Sub`) must be specified\n+error[E0191]: the value of the associated types `Output` (from trait `std::ops::Add`), `Output` (from trait `std::ops::Sub`) must be specified\n   --> $DIR/issue-22560.rs:3:13\n    |\n LL |   type Test = dyn Add +\n    |  _____________^\n-   | |_____________|\n-   | |\n LL | |\n LL | |\n LL | |             Sub;\n-   | |               ^\n-   | |_______________|\n-   | |_______________associated type `Output` must be specified\n-   |                 associated type `Output` must be specified\n+   | |_______________^ associated types `Output`, `Output` must be specified\n \n error: aborting due to 4 previous errors\n "}, {"sha": "63675368162927c9298a9c3bbebff94004b9baac", "filename": "src/test/ui/issues/issue-23024.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-23024.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-23024.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.rs?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -9,5 +9,5 @@ fn main()\n     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n     //~^ ERROR the precise format of `Fn`-family traits'\n     //~| ERROR wrong number of type arguments: expected 1, found 0 [E0107]\n-    //~| ERROR the value of the associated type `Output` (from the trait `std::ops::FnOnce`)\n+    //~| ERROR the value of the associated type `Output` (from trait `std::ops::FnOnce`)\n }"}, {"sha": "11d5c9f1f2e1f656c3ebfeb4f3ce912fc732530c", "filename": "src/test/ui/issues/issue-23024.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,23 +1,24 @@\n-error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n   --> $DIR/issue-23024.rs:9:39\n    |\n LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n    |                                       ^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+   = help: use parenthetical notation instead: `Fn(Foo, Bar) -> Baz`\n \n error[E0107]: wrong number of type arguments: expected 1, found 0\n   --> $DIR/issue-23024.rs:9:39\n    |\n LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n    |                                       ^^ expected 1 type argument\n \n-error[E0191]: the value of the associated type `Output` (from the trait `std::ops::FnOnce`) must be specified\n-  --> $DIR/issue-23024.rs:9:35\n+error[E0191]: the value of the associated type `Output` (from trait `std::ops::FnOnce`) must be specified\n+  --> $DIR/issue-23024.rs:9:39\n    |\n LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n-   |                                   ^^^^^^ associated type `Output` must be specified\n+   |                                       ^^ help: specify the associated type: `Fn<Output = Type>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e315317c98a6c7fb646be3d80a527b9796a31fd4", "filename": "src/test/ui/issues/issue-28344.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,8 +1,8 @@\n-error[E0191]: the value of the associated type `Output` (from the trait `std::ops::BitXor`) must be specified\n+error[E0191]: the value of the associated type `Output` (from trait `std::ops::BitXor`) must be specified\n   --> $DIR/issue-28344.rs:4:17\n    |\n LL |     let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n-   |                 ^^^^^^^^^^^^^ associated type `Output` must be specified\n+   |                 ^^^^^^ help: specify the associated type: `BitXor<Output = Type>`\n \n error[E0599]: no function or associated item named `bitor` found for type `dyn std::ops::BitXor<_>` in the current scope\n   --> $DIR/issue-28344.rs:4:25\n@@ -13,11 +13,11 @@ LL |     let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n    |                         function or associated item not found in `dyn std::ops::BitXor<_>`\n    |                         help: there is a method with a similar name: `bitxor`\n \n-error[E0191]: the value of the associated type `Output` (from the trait `std::ops::BitXor`) must be specified\n+error[E0191]: the value of the associated type `Output` (from trait `std::ops::BitXor`) must be specified\n   --> $DIR/issue-28344.rs:8:13\n    |\n LL |     let g = BitXor::bitor;\n-   |             ^^^^^^^^^^^^^ associated type `Output` must be specified\n+   |             ^^^^^^ help: specify the associated type: `BitXor<Output = Type>`\n \n error[E0599]: no function or associated item named `bitor` found for type `dyn std::ops::BitXor<_>` in the current scope\n   --> $DIR/issue-28344.rs:8:21"}, {"sha": "321196d14b7aa401754e12b875a7a9db3cf5cca4", "filename": "src/test/ui/suggestions/use-type-argument-instead-of-assoc-type.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -6,7 +6,7 @@ LL |     i: Box<dyn T<usize, usize, usize, usize, B=usize>>,\n    |                                |\n    |                                unexpected type argument\n \n-error[E0191]: the value of the associated types `A` (from the trait `T`), `C` (from the trait `T`) must be specified\n+error[E0191]: the value of the associated types `A` (from trait `T`), `C` (from trait `T`) must be specified\n   --> $DIR/use-type-argument-instead-of-assoc-type.rs:7:12\n    |\n LL |     type A;\n@@ -16,12 +16,9 @@ LL |     type C;\n    |     ------- `C` defined here\n ...\n LL |     i: Box<dyn T<usize, usize, usize, usize, B=usize>>,\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |\n-   |            associated type `A` must be specified\n-   |            associated type `C` must be specified\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated types `A`, `C` must be specified\n    |\n-help: if you meant to specify the associated types, write\n+help: specify the associated types\n    |\n LL |     i: Box<dyn T<usize, usize, A = usize, C = usize, B=usize>>,\n    |                                ^^^^^^^^^  ^^^^^^^^^"}, {"sha": "5551b1303b927e35f07912b563ed6c0544e1244a", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -6,11 +6,11 @@ LL |     let _: &dyn EqAlias = &123;\n    |\n    = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n \n-error[E0191]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified\n-  --> $DIR/trait-alias-object-fail.rs:9:13\n+error[E0191]: the value of the associated type `Item` (from trait `std::iter::Iterator`) must be specified\n+  --> $DIR/trait-alias-object-fail.rs:9:17\n    |\n LL |     let _: &dyn IteratorAlias = &vec![123].into_iter();\n-   |             ^^^^^^^^^^^^^^^^^ associated type `Item` must be specified\n+   |                 ^^^^^^^^^^^^^ help: specify the associated type: `IteratorAlias<Item = Type>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f34fa80a0ceec83871051dea9b2e2a604b6dd4ce", "filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.rs?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -43,8 +43,8 @@ impl NormalizableHelper for u32\n \n fn main() {\n     let _x: Box<dyn Helper<Target=i32>> = Box::new(2u32);\n-    //~^ ERROR the value of the associated type `Output` (from the trait `Base`) must be specified\n+    //~^ ERROR the value of the associated type `Output` (from trait `Base`) must be specified\n \n     let _y: Box<dyn NormalizableHelper<Target=i32>> = Box::new(2u32);\n-    //~^ ERROR the value of the associated type `Output` (from the trait `Base`) must be specified\n+    //~^ ERROR the value of the associated type `Output` (from trait `Base`) must be specified\n }"}, {"sha": "79eb27e101a9b75e486190a044a13f99024609f5", "filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-bad.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-bad.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,20 +1,20 @@\n-error[E0191]: the value of the associated type `Output` (from the trait `Base`) must be specified\n-  --> $DIR/trait-object-with-self-in-projection-output-bad.rs:45:17\n+error[E0191]: the value of the associated type `Output` (from trait `Base`) must be specified\n+  --> $DIR/trait-object-with-self-in-projection-output-bad.rs:45:21\n    |\n LL |     type Output;\n    |     ------------ `Output` defined here\n ...\n LL |     let _x: Box<dyn Helper<Target=i32>> = Box::new(2u32);\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^ associated type `Output` must be specified\n+   |                     ^^^^^^^^^^^^^^^^^^ help: specify the associated type: `Helper<Target=i32, Output = Type>`\n \n-error[E0191]: the value of the associated type `Output` (from the trait `Base`) must be specified\n-  --> $DIR/trait-object-with-self-in-projection-output-bad.rs:48:17\n+error[E0191]: the value of the associated type `Output` (from trait `Base`) must be specified\n+  --> $DIR/trait-object-with-self-in-projection-output-bad.rs:48:21\n    |\n LL |     type Output;\n    |     ------------ `Output` defined here\n ...\n LL |     let _y: Box<dyn NormalizableHelper<Target=i32>> = Box::new(2u32);\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated type `Output` must be specified\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: specify the associated type: `NormalizableHelper<Target=i32, Output = Type>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eafd3cf79dbb0b588cd565ebaa44f8655ee5eaa9", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,8 +1,13 @@\n error[E0393]: the type parameter `T` must be explicitly specified\n   --> $DIR/type-parameter-defaults-referencing-Self.rs:10:16\n    |\n-LL | fn foo(x: &dyn Foo) { }\n-   |                ^^^ missing reference to `T`\n+LL | / trait Foo<T=Self> {\n+LL | |     fn method(&self);\n+LL | | }\n+   | |_- type parameter `T` must be specified for this\n+LL | \n+LL |   fn foo(x: &dyn Foo) { }\n+   |                  ^^^ help: set the type parameter to the desired type: `Foo<T>`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n "}, {"sha": "7ae8caee6f8be45ee78ac1dddabc06c099f7bce8", "filename": "src/test/ui/unboxed-closures/unboxed-closure-feature-gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-feature-gate.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -2,7 +2,7 @@ error[E0658]: parenthetical notation is only stable when used with `Fn`-family t\n   --> $DIR/unboxed-closure-feature-gate.rs:13:20\n    |\n LL |     let x: Box<dyn Foo(isize)>;\n-   |                    ^^^^^^^^^^\n+   |                    ^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable"}, {"sha": "d661603465cc346f0d540f2e98f851127824f4c5", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-not-used-on-fn.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-not-used-on-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-not-used-on-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-not-used-on-fn.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -1,20 +1,22 @@\n-error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n   --> $DIR/unboxed-closure-sugar-not-used-on-fn.rs:3:17\n    |\n LL | fn bar1(x: &dyn Fn<(), Output=()>) {\n-   |                 ^^^^^^^^^^^^^^^^^\n+   |                 ^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+   = help: use parenthetical notation instead: `Fn(Foo, Bar) -> Baz`\n \n-error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n   --> $DIR/unboxed-closure-sugar-not-used-on-fn.rs:7:28\n    |\n LL | fn bar2<T>(x: &T) where T: Fn<()> {\n-   |                            ^^^^^^\n+   |                            ^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29625\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+   = help: use parenthetical notation instead: `Fn(Foo, Bar) -> Baz`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b92f054498b680ff77de2e0011fa0b1cb3e55aeb", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -2,7 +2,7 @@ error[E0107]: wrong number of lifetime arguments: expected 1, found 0\n   --> $DIR/unboxed-closure-sugar-region.rs:30:51\n    |\n LL | fn test2(x: &dyn Foo<(isize,),Output=()>, y: &dyn Foo(isize)) {\n-   |                                                   ^^^^^^^^^^ expected 1 lifetime argument\n+   |                                                   ^^^ expected 1 lifetime argument\n \n error: aborting due to previous error\n "}, {"sha": "f482098cbffcb284f904cfb208d9fb1895badd60", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -2,7 +2,7 @@ error[E0107]: wrong number of type arguments: expected 3, found 1\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:5:16\n    |\n LL | fn foo(_: &dyn Three())\n-   |                ^^^^^^^ expected 3 type arguments\n+   |                ^^^^^ expected 3 type arguments\n \n error[E0220]: associated type `Output` not found for `Three<(), [type error], [type error]>`\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:5:16"}, {"sha": "b72d45ebdbfbc0e47d5643153de8a106716cf37a", "filename": "src/test/ui/unspecified-self-in-trait-ref.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547abe0c52fedc11cd4d1276f7ad51ce29a411e6/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funspecified-self-in-trait-ref.stderr?ref=547abe0c52fedc11cd4d1276f7ad51ce29a411e6", "patch": "@@ -25,8 +25,13 @@ LL |     let d = Bar::<usize, _>::lol();\n error[E0393]: the type parameter `A` must be explicitly specified\n   --> $DIR/unspecified-self-in-trait-ref.rs:18:13\n    |\n-LL |     let e = Bar::<usize>::lol();\n-   |             ^^^^^^^^^^^^^^^^^ missing reference to `A`\n+LL | / pub trait Bar<X=usize, A=Self> {\n+LL | |     fn foo(&self);\n+LL | | }\n+   | |_- type parameter `A` must be specified for this\n+...\n+LL |       let e = Bar::<usize>::lol();\n+   |               ^^^ missing reference to `A`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n "}]}