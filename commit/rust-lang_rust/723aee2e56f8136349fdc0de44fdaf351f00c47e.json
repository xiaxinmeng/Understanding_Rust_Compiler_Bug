{"sha": "723aee2e56f8136349fdc0de44fdaf351f00c47e", "node_id": "C_kwDOAAsO6NoAKDcyM2FlZTJlNTZmODEzNjM0OWZkYzBkZTQ0ZmRhZjM1MWYwMGM0N2U", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-23T01:01:30Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-04-29T12:01:44Z"}, "message": "Partial stabilisation of `c_unwind`", "tree": {"sha": "402e856caf490371530cf34ef94988aa864a1c8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/402e856caf490371530cf34ef94988aa864a1c8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/723aee2e56f8136349fdc0de44fdaf351f00c47e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/723aee2e56f8136349fdc0de44fdaf351f00c47e", "html_url": "https://github.com/rust-lang/rust/commit/723aee2e56f8136349fdc0de44fdaf351f00c47e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/723aee2e56f8136349fdc0de44fdaf351f00c47e/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2299490c11b0c53ece5f6a13dd092fc9c99d264", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2299490c11b0c53ece5f6a13dd092fc9c99d264", "html_url": "https://github.com/rust-lang/rust/commit/f2299490c11b0c53ece5f6a13dd092fc9c99d264"}], "stats": {"total": 54, "additions": 11, "deletions": 43}, "files": [{"sha": "f046022b842753513f5f8fcf575c445f535375fd", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/723aee2e56f8136349fdc0de44fdaf351f00c47e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723aee2e56f8136349fdc0de44fdaf351f00c47e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=723aee2e56f8136349fdc0de44fdaf351f00c47e", "patch": "@@ -311,7 +311,7 @@ declare_features! (\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n     /// Allows async functions to be declared, implemented, and used in traits.\n     (incomplete, async_fn_in_trait, \"1.66.0\", Some(91611), None),\n-    /// Allows `extern \"C-unwind\" fn` to enable unwinding across ABI boundaries.\n+    /// Treat `extern \"C\"` function as nounwind.\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n     /// Allows using C-variadics.\n     (active, c_variadic, \"1.34.0\", Some(44930), None),"}, {"sha": "6fe15e21d948dc3a9db0618624c4d2eb15c6c0a7", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/723aee2e56f8136349fdc0de44fdaf351f00c47e/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723aee2e56f8136349fdc0de44fdaf351f00c47e/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=723aee2e56f8136349fdc0de44fdaf351f00c47e", "patch": "@@ -4014,7 +4014,6 @@ declare_lint! {\n     /// ### Example\n     ///\n     /// ```rust\n-    /// #![feature(c_unwind)]\n     /// #![warn(ffi_unwind_calls)]\n     ///\n     /// extern \"C-unwind\" {\n@@ -4037,8 +4036,7 @@ declare_lint! {\n     /// that desire this ability it is therefore necessary to avoid such calls.\n     pub FFI_UNWIND_CALLS,\n     Allow,\n-    \"call to foreign functions or function pointers with FFI-unwind ABI\",\n-    @feature_gate = sym::c_unwind;\n+    \"call to foreign functions or function pointers with FFI-unwind ABI\"\n }\n \n declare_lint! {"}, {"sha": "a907130d15c081887f2083652b029db9b880124f", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 5, "deletions": 35, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/723aee2e56f8136349fdc0de44fdaf351f00c47e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723aee2e56f8136349fdc0de44fdaf351f00c47e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=723aee2e56f8136349fdc0de44fdaf351f00c47e", "patch": "@@ -149,7 +149,9 @@ pub fn is_stable(name: &str) -> Result<(), AbiDisabled> {\n     match name {\n         // Stable\n         \"Rust\" | \"C\" | \"cdecl\" | \"stdcall\" | \"fastcall\" | \"aapcs\" | \"win64\" | \"sysv64\"\n-        | \"system\" | \"efiapi\" => Ok(()),\n+        | \"system\" | \"efiapi\" | \"C-unwind\" | \"cdecl-unwind\" | \"stdcall-unwind\"\n+        | \"fastcall-unwind\" | \"aapcs-unwind\" | \"win64-unwind\" | \"sysv64-unwind\"\n+        | \"system-unwind\" => Ok(()),\n         \"rust-intrinsic\" => Err(AbiDisabled::Unstable {\n             feature: sym::intrinsics,\n             explain: \"intrinsics are subject to change\",\n@@ -202,46 +204,14 @@ pub fn is_stable(name: &str) -> Result<(), AbiDisabled> {\n             feature: sym::abi_c_cmse_nonsecure_call,\n             explain: \"C-cmse-nonsecure-call ABI is experimental and subject to change\",\n         }),\n-        \"C-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"C-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"stdcall-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"stdcall-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"system-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"system-unwind ABI is experimental and subject to change\",\n-        }),\n         \"thiscall-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n+            feature: sym::abi_thiscall,\n             explain: \"thiscall-unwind ABI is experimental and subject to change\",\n         }),\n-        \"cdecl-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"cdecl-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"fastcall-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"fastcall-unwind ABI is experimental and subject to change\",\n-        }),\n         \"vectorcall-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n+            feature: sym::abi_vectorcall,\n             explain: \"vectorcall-unwind ABI is experimental and subject to change\",\n         }),\n-        \"aapcs-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"aapcs-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"win64-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"win64-unwind ABI is experimental and subject to change\",\n-        }),\n-        \"sysv64-unwind\" => Err(AbiDisabled::Unstable {\n-            feature: sym::c_unwind,\n-            explain: \"sysv64-unwind ABI is experimental and subject to change\",\n-        }),\n         \"wasm\" => Err(AbiDisabled::Unstable {\n             feature: sym::wasm_abi,\n             explain: \"wasm ABI is experimental and subject to change\","}, {"sha": "af18e19337c7a7cf4ce1459af4559e0086840d0d", "filename": "library/panic_unwind/src/emcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/723aee2e56f8136349fdc0de44fdaf351f00c47e/library%2Fpanic_unwind%2Fsrc%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723aee2e56f8136349fdc0de44fdaf351f00c47e/library%2Fpanic_unwind%2Fsrc%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Femcc.rs?ref=723aee2e56f8136349fdc0de44fdaf351f00c47e", "patch": "@@ -47,7 +47,7 @@ static EXCEPTION_TYPE_INFO: TypeInfo = TypeInfo {\n     name: b\"rust_panic\\0\".as_ptr(),\n };\n \n-// NOTE(nbdd0121): The `canary` field will be part of stable ABI after `c_unwind` stabilization.\n+// NOTE(nbdd0121): The `canary` field is part of stable ABI.\n #[repr(C)]\n struct Exception {\n     // See `gcc.rs` on why this is present. We already have a static here so just use it."}, {"sha": "08858dd92be09e6274a99cfda662d4d7f3c9a610", "filename": "library/panic_unwind/src/gcc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/723aee2e56f8136349fdc0de44fdaf351f00c47e/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723aee2e56f8136349fdc0de44fdaf351f00c47e/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs?ref=723aee2e56f8136349fdc0de44fdaf351f00c47e", "patch": "@@ -48,8 +48,8 @@ use unwind as uw;\n static CANARY: u8 = 0;\n \n // NOTE(nbdd0121)\n-// Once `c_unwind` feature is stabilized, there will be ABI stability requirement\n-// on this struct. The first two field must be `_Unwind_Exception` and `canary`,\n+// There is an ABI stability requirement on this struct.\n+// The first two field must be `_Unwind_Exception` and `canary`,\n // as it may be accessed by a different version of the std with a different compiler.\n #[repr(C)]\n struct Exception {"}, {"sha": "99db00e549066c0e4bed959e744ba6461921c7f2", "filename": "library/panic_unwind/src/seh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/723aee2e56f8136349fdc0de44fdaf351f00c47e/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723aee2e56f8136349fdc0de44fdaf351f00c47e/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fseh.rs?ref=723aee2e56f8136349fdc0de44fdaf351f00c47e", "patch": "@@ -52,7 +52,7 @@ use core::mem::{self, ManuallyDrop};\n use core::ptr;\n use libc::{c_int, c_uint, c_void};\n \n-// NOTE(nbdd0121): The `canary` field will be part of stable ABI after `c_unwind` stabilization.\n+// NOTE(nbdd0121): The `canary` field is part of stable ABI.\n #[repr(C)]\n struct Exception {\n     // See `gcc.rs` on why this is present. We already have a static here so just use it."}]}