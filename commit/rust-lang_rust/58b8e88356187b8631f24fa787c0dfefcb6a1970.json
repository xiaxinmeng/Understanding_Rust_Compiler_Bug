{"sha": "58b8e88356187b8631f24fa787c0dfefcb6a1970", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YjhlODgzNTYxODdiODYzMWYyNGZhNzg3YzBkZmVmY2I2YTE5NzA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-06T22:29:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-12T21:26:47Z"}, "message": "expand purity to include unsafe", "tree": {"sha": "c836a3c308a1495a22a834ede10a4ba0cc006dfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c836a3c308a1495a22a834ede10a4ba0cc006dfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58b8e88356187b8631f24fa787c0dfefcb6a1970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58b8e88356187b8631f24fa787c0dfefcb6a1970", "html_url": "https://github.com/rust-lang/rust/commit/58b8e88356187b8631f24fa787c0dfefcb6a1970", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58b8e88356187b8631f24fa787c0dfefcb6a1970/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9476692b525024ab81dfc7104f63c85af68d6eb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9476692b525024ab81dfc7104f63c85af68d6eb6", "html_url": "https://github.com/rust-lang/rust/commit/9476692b525024ab81dfc7104f63c85af68d6eb6"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "3314fb890a2cea586157ac3d08aea29045f63ace", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/58b8e88356187b8631f24fa787c0dfefcb6a1970/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b8e88356187b8631f24fa787c0dfefcb6a1970/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=58b8e88356187b8631f24fa787c0dfefcb6a1970", "patch": "@@ -29,10 +29,10 @@ tag ret_info { by_ref(bool, node_id); other; }\n type scope = {bs: [binding], ret_info: ret_info};\n \n fn mk_binding(cx: ctx, id: node_id, span: span, root_var: option::t<node_id>,\n-              unsafe: [unsafe_ty]) -> binding {\n+              unsafe_tys: [unsafe_ty]) -> binding {\n     ret @{node_id: id, span: span, root_var: root_var,\n           local_id: local_id_of_node(cx, id),\n-          unsafe_tys: unsafe, mutable ok: valid,\n+          unsafe_tys: unsafe_tys, mutable ok: valid,\n           mutable copied: not_copied};\n }\n \n@@ -284,12 +284,12 @@ fn check_call(cx: ctx, f: @ast::expr, args: [@ast::expr]) -> [binding] {\n     }\n     let j = 0u;\n     for b in bindings {\n-        for unsafe in b.unsafe_tys {\n+        for unsafe_ty in b.unsafe_tys {\n             let i = 0u;\n             for arg_t: ty::arg in arg_ts {\n                 let mut_alias = arg_t.mode == ast::by_mut_ref;\n                 if i != j &&\n-                       ty_can_unsafely_include(cx, unsafe, arg_t.ty,\n+                       ty_can_unsafely_include(cx, unsafe_ty, arg_t.ty,\n                                                mut_alias) &&\n                        cant_copy(cx, b) {\n                     cx.tcx.sess.span_err\n@@ -397,24 +397,28 @@ fn check_alt(cx: ctx, input: @ast::expr, arms: [ast::arm], sc: scope,\n         let new_bs = sc.bs;\n         let root_var = path_def_id(cx, root.ex);\n         let pat_id_map = ast_util::pat_id_map(a.pats[0]);\n-        type info = {id: node_id, mutable unsafe: [unsafe_ty], span: span};\n+        type info = {\n+            id: node_id,\n+            mutable unsafe_tys: [unsafe_ty],\n+            span: span};\n         let binding_info: [info] = [];\n         for pat in a.pats {\n             for proot in pattern_roots(cx.tcx, root.mut, pat) {\n                 let canon_id = pat_id_map.get(proot.name);\n                 alt vec::find({|x| x.id == canon_id}, binding_info) {\n-                  some(s) { s.unsafe += unsafe_set(proot.mut); }\n+                  some(s) { s.unsafe_tys += unsafe_set(proot.mut); }\n                   none. {\n-                      binding_info += [{id: canon_id,\n-                                        mutable unsafe: unsafe_set(proot.mut),\n-                                        span: proot.span}];\n+                      binding_info += [\n+                          {id: canon_id,\n+                           mutable unsafe_tys: unsafe_set(proot.mut),\n+                           span: proot.span}];\n                   }\n                 }\n             }\n         }\n         for info in binding_info {\n             new_bs += [mk_binding(cx, info.id, info.span, root_var,\n-                                  copy info.unsafe)];\n+                                  copy info.unsafe_tys)];\n         }\n         visit::visit_arm(a, {bs: new_bs with sc}, v);\n     }\n@@ -470,8 +474,8 @@ fn check_var(cx: ctx, ex: @ast::expr, p: ast::path, id: ast::node_id,\n     for b in sc.bs {\n         // excludes variables introduced since the alias was made\n         if my_local_id < b.local_id {\n-            for unsafe in b.unsafe_tys {\n-                if ty_can_unsafely_include(cx, unsafe, var_t, assign) {\n+            for unsafe_ty in b.unsafe_tys {\n+                if ty_can_unsafely_include(cx, unsafe_ty, var_t, assign) {\n                     b.ok = val_taken(ex.span, p);\n                 }\n             }\n@@ -689,9 +693,9 @@ fn pattern_roots(tcx: ty::ctxt, mut: option::t<unsafe_ty>, pat: @ast::pat)\n fn expr_root(cx: ctx, ex: @ast::expr, autoderef: bool)\n     -> {ex: @ast::expr, mut: option::t<unsafe_ty>} {\n     let base_root = mut::expr_root(cx.tcx, ex, autoderef);\n-    let unsafe = none;\n+    let unsafe_ty = none;\n     for d in *base_root.ds {\n-        if d.mut { unsafe = some(contains(d.outer_t)); break; }\n+        if d.mut { unsafe_ty = some(contains(d.outer_t)); break; }\n     }\n     if is_none(path_def_id(cx, base_root.ex)) {\n         alt base_root.ex.node {\n@@ -703,18 +707,18 @@ fn expr_root(cx: ctx, ex: @ast::expr, autoderef: bool)\n                 let arg_root = expr_root(cx, arg, false);\n                 if mut {\n                     let ret_ty = ty::expr_ty(cx.tcx, base_root.ex);\n-                    unsafe = some(mut_contains(ret_ty));\n+                    unsafe_ty = some(mut_contains(ret_ty));\n                 }\n-                if !is_none(arg_root.mut) { unsafe = arg_root.mut; }\n-                ret {ex: arg_root.ex, mut: unsafe};\n+                if !is_none(arg_root.mut) { unsafe_ty = arg_root.mut; }\n+                ret {ex: arg_root.ex, mut: unsafe_ty};\n               }\n               _ {}\n             }\n           }\n           _ {}\n         }\n     }\n-    ret {ex: base_root.ex, mut: unsafe};\n+    ret {ex: base_root.ex, mut: unsafe_ty};\n }\n \n fn unsafe_set(from: option::t<unsafe_ty>) -> [unsafe_ty] {"}, {"sha": "ee25c59a7892e462f698bf70ad7ff9c0a61f7b10", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58b8e88356187b8631f24fa787c0dfefcb6a1970/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b8e88356187b8631f24fa787c0dfefcb6a1970/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=58b8e88356187b8631f24fa787c0dfefcb6a1970", "patch": "@@ -1525,6 +1525,7 @@ fn check_pat(fcx: @fn_ctxt, map: ast_util::pat_id_map, pat: @ast::pat,\n \n fn require_impure(sess: session::session, f_purity: ast::purity, sp: span) {\n     alt f_purity {\n+      ast::unsafe_fn. { ret; }\n       ast::impure_fn. { ret; }\n       ast::pure_fn. {\n         sess.span_fatal(sp, \"Found impure expression in pure function decl\");"}, {"sha": "36791c10cb27863621f299a9cbfe1bb57387243c", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58b8e88356187b8631f24fa787c0dfefcb6a1970/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b8e88356187b8631f24fa787c0dfefcb6a1970/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=58b8e88356187b8631f24fa787c0dfefcb6a1970", "patch": "@@ -390,6 +390,7 @@ type fn_decl =\n \n tag purity {\n     pure_fn; // declared with \"pure fn\"\n+    unsafe_fn; // declared with \"unsafe fn\"\n     impure_fn; // declared with \"fn\"\n }\n "}, {"sha": "5a4c5d78772adbb9f4f39d38bfb2a4f3334b0730", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58b8e88356187b8631f24fa787c0dfefcb6a1970/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b8e88356187b8631f24fa787c0dfefcb6a1970/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=58b8e88356187b8631f24fa787c0dfefcb6a1970", "patch": "@@ -165,6 +165,7 @@ fn bad_expr_word_table() -> hashmap<str, ()> {\n     words.insert(\"fn\", ());\n     words.insert(\"lambda\", ());\n     words.insert(\"pure\", ());\n+    words.insert(\"unsafe\", ());\n     words.insert(\"iter\", ());\n     words.insert(\"block\", ());\n     words.insert(\"import\", ());\n@@ -2153,6 +2154,10 @@ fn parse_item(p: parser, attrs: [ast::attribute]) -> option::t<@ast::item> {\n         let proto = parse_fn_proto(p);\n         ret some(parse_item_fn_or_iter(p, ast::pure_fn, proto, attrs,\n                                        ast::il_normal));\n+    } else if eat_word(p, \"unsafe\") {\n+        expect_word(p, \"fn\");\n+        ret some(parse_item_fn_or_iter(p, ast::unsafe_fn, ast::proto_fn,\n+                                       attrs, ast::il_normal));\n     } else if eat_word(p, \"iter\") {\n         ret some(parse_item_fn_or_iter(p, ast::impure_fn, ast::proto_iter,\n                                        attrs, ast::il_normal));"}]}