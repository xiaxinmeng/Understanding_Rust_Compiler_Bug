{"sha": "f90c21a417b8279196ec65077863f9ecc5b05e39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MGMyMWE0MTdiODI3OTE5NmVjNjUwNzc4NjNmOWVjYzViMDVlMzk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-12-04T18:35:16Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-12-08T04:37:04Z"}, "message": "When given `rustc -C codegen-units=4 -o output --emit=obj`, reset units back to 1.\n\nFix #30063\n\nNote: while this code is careful to handle the case of mutliple emit\ntypes (e.g. `--emit=asm,obj`) by reporting all the emit types that\nconflict with codegen units in its warnings, an invocation with\nmultiple emit types *and* `-o PATH` will continue to ignore the\nrequested target path (with a warning), as it already does today,\nsince the code that checks for that is further downstream.", "tree": {"sha": "9e08c797d43c388bd7cee7fad8f180779c6a69e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e08c797d43c388bd7cee7fad8f180779c6a69e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f90c21a417b8279196ec65077863f9ecc5b05e39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f90c21a417b8279196ec65077863f9ecc5b05e39", "html_url": "https://github.com/rust-lang/rust/commit/f90c21a417b8279196ec65077863f9ecc5b05e39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f90c21a417b8279196ec65077863f9ecc5b05e39/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77ed39cfe37a17737e0b2256b1a1689e01c32b26", "url": "https://api.github.com/repos/rust-lang/rust/commits/77ed39cfe37a17737e0b2256b1a1689e01c32b26", "html_url": "https://github.com/rust-lang/rust/commit/77ed39cfe37a17737e0b2256b1a1689e01c32b26"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "e30f98119e8f2c470497d9b03aabdbc83156ff53", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f90c21a417b8279196ec65077863f9ecc5b05e39/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90c21a417b8279196ec65077863f9ecc5b05e39/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f90c21a417b8279196ec65077863f9ecc5b05e39", "patch": "@@ -71,6 +71,30 @@ pub enum OutputType {\n     DepInfo,\n }\n \n+impl OutputType {\n+    fn is_compatible_with_codegen_units_and_single_output_file(&self) -> bool {\n+        match *self {\n+            OutputType::Exe |\n+            OutputType::DepInfo => true,\n+            OutputType::Bitcode |\n+            OutputType::Assembly |\n+            OutputType::LlvmAssembly |\n+            OutputType::Object => false,\n+        }\n+    }\n+\n+    fn shorthand(&self) -> &'static str {\n+        match *self {\n+            OutputType::Bitcode => \"llvm-bc\",\n+            OutputType::Assembly => \"asm\",\n+            OutputType::LlvmAssembly => \"llvm-ir\",\n+            OutputType::Object => \"obj\",\n+            OutputType::Exe => \"link\",\n+            OutputType::DepInfo => \"dep-info\",\n+        }\n+    }\n+}\n+\n #[derive(Clone)]\n pub struct Options {\n     // The crate config requested for the session, which may be combined\n@@ -933,7 +957,28 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         output_types.insert(OutputType::Exe, None);\n     }\n \n-    let cg = build_codegen_options(matches, color);\n+    let mut cg = build_codegen_options(matches, color);\n+\n+    // Issue #30063: if user requests llvm-related output to one\n+    // particular path, disable codegen-units.\n+    if matches.opt_present(\"o\") && cg.codegen_units != 1 {\n+        let incompatible: Vec<_> = output_types.iter()\n+            .map(|ot_path| ot_path.0)\n+            .filter(|ot| {\n+                !ot.is_compatible_with_codegen_units_and_single_output_file()\n+            }).collect();\n+        if !incompatible.is_empty() {\n+            for ot in &incompatible {\n+                early_warn(color, &format!(\"--emit={} with -o incompatible with \\\n+                                            -C codegen-units=N for N > 1\",\n+                                           ot.shorthand()));\n+            }\n+            early_warn(color, \"resetting to default -C codegen-units=1\");\n+            cg.codegen_units = 1;\n+        }\n+    }\n+\n+    let cg = cg;\n \n     let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| PathBuf::from(&m));\n     let target = matches.opt_str(\"target\").unwrap_or("}]}