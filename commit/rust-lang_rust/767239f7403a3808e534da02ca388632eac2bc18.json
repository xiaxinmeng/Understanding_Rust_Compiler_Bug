{"sha": "767239f7403a3808e534da02ca388632eac2bc18", "node_id": "C_kwDOAAsO6NoAKDc2NzIzOWY3NDAzYTM4MDhlNTM0ZGEwMmNhMzg4NjMyZWFjMmJjMTg", "commit": {"author": {"name": "Christopher Durham", "email": "cad97@cad97.com", "date": "2022-08-17T11:52:47Z"}, "committer": {"name": "Christopher Durham", "email": "cad97@cad97.com", "date": "2022-08-17T11:53:18Z"}, "message": "Reenable early feature-gates as future-compat warnings", "tree": {"sha": "47dba64283f8388caea571b05366c79e8623f6ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47dba64283f8388caea571b05366c79e8623f6ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/767239f7403a3808e534da02ca388632eac2bc18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/767239f7403a3808e534da02ca388632eac2bc18", "html_url": "https://github.com/rust-lang/rust/commit/767239f7403a3808e534da02ca388632eac2bc18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/767239f7403a3808e534da02ca388632eac2bc18/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9e46c95ce60469f596b8188c439dc278dff6bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e46c95ce60469f596b8188c439dc278dff6bc4", "html_url": "https://github.com/rust-lang/rust/commit/e9e46c95ce60469f596b8188c439dc278dff6bc4"}], "stats": {"total": 258, "additions": 224, "deletions": 34}, "files": [{"sha": "68fca08101891e24bbe345afbcc6668612813da7", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/767239f7403a3808e534da02ca388632eac2bc18/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767239f7403a3808e534da02ca388632eac2bc18/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=767239f7403a3808e534da02ca388632eac2bc18", "patch": "@@ -2,10 +2,10 @@ use rustc_ast as ast;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::{AssocConstraint, AssocConstraintKind, NodeId};\n use rustc_ast::{PatKind, RangeEnd, VariantData};\n-use rustc_errors::{struct_span_err, Applicability};\n+use rustc_errors::{struct_span_err, Applicability, StashKey};\n+use rustc_feature::Features;\n use rustc_feature::{AttributeGate, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n-use rustc_feature::{Features, GateIssue};\n-use rustc_session::parse::{feature_err, feature_err_issue};\n+use rustc_session::parse::{feature_err, feature_warn};\n use rustc_session::Session;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::sym;\n@@ -20,9 +20,7 @@ macro_rules! gate_feature_fn {\n         let has_feature: bool = has_feature(visitor.features);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", name, span, has_feature);\n         if !has_feature && !span.allows_unstable($name) {\n-            feature_err_issue(&visitor.sess.parse_sess, name, span, GateIssue::Language, explain)\n-                .help(help)\n-                .emit();\n+            feature_err(&visitor.sess.parse_sess, name, span, explain).help(help).emit();\n         }\n     }};\n     ($visitor: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr) => {{\n@@ -31,8 +29,19 @@ macro_rules! gate_feature_fn {\n         let has_feature: bool = has_feature(visitor.features);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", name, span, has_feature);\n         if !has_feature && !span.allows_unstable($name) {\n-            feature_err_issue(&visitor.sess.parse_sess, name, span, GateIssue::Language, explain)\n-                .emit();\n+            feature_err(&visitor.sess.parse_sess, name, span, explain).emit();\n+        }\n+    }};\n+    (future_incompatible; $visitor: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr) => {{\n+        let (visitor, has_feature, span, name, explain) =\n+            (&*$visitor, $has_feature, $span, $name, $explain);\n+        let has_feature: bool = has_feature(visitor.features);\n+        debug!(\n+            \"gate_feature(feature = {:?}, span = {:?}); has? {} (future_incompatible)\",\n+            name, span, has_feature\n+        );\n+        if !has_feature && !span.allows_unstable($name) {\n+            feature_warn(&visitor.sess.parse_sess, name, span, explain);\n         }\n     }};\n }\n@@ -44,6 +53,9 @@ macro_rules! gate_feature_post {\n     ($visitor: expr, $feature: ident, $span: expr, $explain: expr) => {\n         gate_feature_fn!($visitor, |x: &Features| x.$feature, $span, sym::$feature, $explain)\n     };\n+    (future_incompatible; $visitor: expr, $feature: ident, $span: expr, $explain: expr) => {\n+        gate_feature_fn!(future_incompatible; $visitor, |x: &Features| x.$feature, $span, sym::$feature, $explain)\n+    };\n }\n \n pub fn check_attribute(attr: &ast::Attribute, sess: &Session, features: &Features) {\n@@ -588,11 +600,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         {\n             // When we encounter a statement of the form `foo: Ty = val;`, this will emit a type\n             // ascription error, but the likely intention was to write a `let` statement. (#78907).\n-            feature_err_issue(\n+            feature_err(\n                 &self.sess.parse_sess,\n                 sym::type_ascription,\n                 lhs.span,\n-                GateIssue::Language,\n                 \"type ascription is experimental\",\n             ).span_suggestion_verbose(\n                 lhs.span.shrink_to_lo(),\n@@ -615,15 +626,22 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 );\n             }\n             ast::ExprKind::Type(..) => {\n-                // To avoid noise about type ascription in common syntax errors, only emit if it\n-                // is the *only* error.\n                 if self.sess.parse_sess.span_diagnostic.err_count() == 0 {\n+                    // To avoid noise about type ascription in common syntax errors,\n+                    // only emit if it is the *only* error.\n                     gate_feature_post!(\n                         &self,\n                         type_ascription,\n                         e.span,\n                         \"type ascription is experimental\"\n                     );\n+                } else {\n+                    // And if it isn't, cancel the early-pass warning.\n+                    self.sess\n+                        .parse_sess\n+                        .span_diagnostic\n+                        .steal_diagnostic(e.span, StashKey::EarlySyntaxWarning)\n+                        .map(|err| err.cancel());\n                 }\n             }\n             ast::ExprKind::TryBlock(_) => {\n@@ -789,14 +807,12 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded).\n+    // We emit an early future-incompatible warning for these.\n+    // New syntax gates should go above here to get a hard error gate.\n     macro_rules! gate_all {\n         ($gate:ident, $msg:literal) => {\n-            // FIXME(eddyb) do something more useful than always\n-            // disabling these uses of early feature-gatings.\n-            if false {\n-                for span in spans.get(&sym::$gate).unwrap_or(&vec![]) {\n-                    gate_feature_post!(&visitor, $gate, *span, $msg);\n-                }\n+            for span in spans.get(&sym::$gate).unwrap_or(&vec![]) {\n+                gate_feature_post!(future_incompatible; &visitor, $gate, *span, $msg);\n             }\n         };\n     }\n@@ -809,11 +825,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(try_blocks, \"`try` blocks are unstable\");\n     gate_all!(label_break_value, \"labels on blocks are unstable\");\n     gate_all!(box_syntax, \"box expression syntax is experimental; you can call `Box::new` instead\");\n-    // To avoid noise about type ascription in common syntax errors,\n-    // only emit if it is the *only* error. (Also check it last.)\n-    if sess.parse_sess.span_diagnostic.err_count() == 0 {\n-        gate_all!(type_ascription, \"type ascription is experimental\");\n-    }\n+    gate_all!(type_ascription, \"type ascription is experimental\");\n \n     visit::walk_crate(&mut visitor, krate);\n }"}, {"sha": "43b8288d8b627746c6b3a94174482dd9fea1147d", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/767239f7403a3808e534da02ca388632eac2bc18/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767239f7403a3808e534da02ca388632eac2bc18/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=767239f7403a3808e534da02ca388632eac2bc18", "patch": "@@ -458,6 +458,7 @@ struct HandlerInner {\n pub enum StashKey {\n     ItemNoType,\n     UnderscoreForArrayLengths,\n+    EarlySyntaxWarning,\n }\n \n fn default_track_diagnostic(_: &Diagnostic) {}"}, {"sha": "95e34da734d6ad9012212ad3ff4ae256dd17483a", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/767239f7403a3808e534da02ca388632eac2bc18/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767239f7403a3808e534da02ca388632eac2bc18/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=767239f7403a3808e534da02ca388632eac2bc18", "patch": "@@ -3212,6 +3212,56 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    /// The `unstable_syntax_pre_expansion` lint detects the use of unstable\n+    /// syntax that is discarded during attribute expansion.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// #[cfg(FALSE)]\n+    /// macro foo() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// The input to active attributes such as `#[cfg]` or procedural macro\n+    /// attributes is required to be valid syntax. Previously, the compiler only\n+    /// gated the use of unstable syntax features after resolving `#[cfg]` gates\n+    /// and expanding procedural macros.\n+    ///\n+    /// To avoid relying on unstable syntax, move the use of unstable syntax\n+    /// into a position where the compiler does not parse the syntax, such as a\n+    /// functionlike macro.\n+    ///\n+    /// ```rust\n+    /// # #![deny(unstable_syntax_pre_expansion)]\n+    ///\n+    /// macro_rules! identity {\n+    ///    ( $($tokens:tt)* ) => { $($tokens)* }\n+    /// }\n+    ///\n+    /// #[cfg(FALSE)]\n+    /// identity! {\n+    ///    macro foo() {}\n+    /// }\n+    /// ```\n+    ///\n+    /// This is a [future-incompatible] lint to transition this\n+    /// to a hard error in the future. See [issue #65860] for more details.\n+    ///\n+    /// [issue #65860]: https://github.com/rust-lang/rust/issues/65860\n+    /// [future-incompatible]: ../index.md#future-incompatible-lints\n+    pub UNSTABLE_SYNTAX_PRE_EXPANSION,\n+    Warn,\n+    \"unstable syntax can change at any point in the future, causing a hard error!\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #65860 <https://github.com/rust-lang/rust/issues/65860>\",\n+    };\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -3280,6 +3330,7 @@ declare_lint_pass! {\n         POINTER_STRUCTURAL_MATCH,\n         NONTRIVIAL_STRUCTURAL_MATCH,\n         SOFT_UNSTABLE,\n+        UNSTABLE_SYNTAX_PRE_EXPANSION,\n         INLINE_NO_SANITIZE,\n         BAD_ASM_STYLE,\n         ASM_SUB_REGISTER,"}, {"sha": "9f0886cb2089c1b1b10a5dd013ed298ed94ea479", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 52, "deletions": 3, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/767239f7403a3808e534da02ca388632eac2bc18/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767239f7403a3808e534da02ca388632eac2bc18/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=767239f7403a3808e534da02ca388632eac2bc18", "patch": "@@ -2,15 +2,17 @@\n //! It also serves as an input to the parser itself.\n \n use crate::config::CheckCfg;\n-use crate::lint::{BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId};\n+use crate::lint::{\n+    builtin::UNSTABLE_SYNTAX_PRE_EXPANSION, BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId,\n+};\n use crate::SessionDiagnostic;\n use rustc_ast::node_id::NodeId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n-    error_code, fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder,\n-    DiagnosticMessage, ErrorGuaranteed, MultiSpan,\n+    error_code, fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n+    DiagnosticMessage, ErrorGuaranteed, MultiSpan, StashKey,\n };\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n@@ -101,11 +103,58 @@ pub fn feature_err_issue<'a>(\n     issue: GateIssue,\n     explain: &str,\n ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+    let span = span.into();\n+\n+    // Cancel an earlier warning for this same error, if it exists.\n+    if let Some(span) = span.primary_span() {\n+        sess.span_diagnostic\n+            .steal_diagnostic(span, StashKey::EarlySyntaxWarning)\n+            .map(|err| err.cancel());\n+    }\n+\n     let mut err = sess.span_diagnostic.struct_span_err_with_code(span, explain, error_code!(E0658));\n     add_feature_diagnostics_for_issue(&mut err, sess, feature, issue);\n     err\n }\n \n+/// Construct a future incompatibility diagnostic for a feature gate.\n+///\n+/// This diagnostic is only a warning and *does not cause compilation to fail*.\n+pub fn feature_warn<'a>(sess: &'a ParseSess, feature: Symbol, span: Span, explain: &str) {\n+    feature_warn_issue(sess, feature, span, GateIssue::Language, explain);\n+}\n+\n+/// Construct a future incompatibility diagnostic for a feature gate.\n+///\n+/// This diagnostic is only a warning and *does not cause compilation to fail*.\n+///\n+/// This variant allows you to control whether it is a library or language feature.\n+/// Almost always, you want to use this for a language feature. If so, prefer `feature_warn`.\n+pub fn feature_warn_issue<'a>(\n+    sess: &'a ParseSess,\n+    feature: Symbol,\n+    span: Span,\n+    issue: GateIssue,\n+    explain: &str,\n+) {\n+    let mut err = sess.span_diagnostic.struct_span_warn(span, explain);\n+    add_feature_diagnostics_for_issue(&mut err, sess, feature, issue);\n+\n+    // Decorate this as a future-incompatibility lint as in rustc_middle::lint::struct_lint_level\n+    let lint = UNSTABLE_SYNTAX_PRE_EXPANSION;\n+    let future_incompatible = lint.future_incompatible.as_ref().unwrap();\n+    err.code(DiagnosticId::Lint {\n+        name: lint.name_lower(),\n+        has_future_breakage: false,\n+        is_force_warn: false,\n+    });\n+    err.warn(lint.desc);\n+    err.note(format!(\"for more information, see {}\", future_incompatible.reference));\n+\n+    // A later feature_err call can steal and cancel this warning.\n+    err.stash(span, StashKey::EarlySyntaxWarning);\n+}\n+\n /// Adds the diagnostics for a feature to an existing error.\n pub fn add_feature_diagnostics<'a>(err: &mut Diagnostic, sess: &'a ParseSess, feature: Symbol) {\n     add_feature_diagnostics_for_issue(err, sess, feature, GateIssue::Language);"}, {"sha": "082c1abb8f2f4098571b5c7099d465aeb00021e9", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/767239f7403a3808e534da02ca388632eac2bc18/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767239f7403a3808e534da02ca388632eac2bc18/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=767239f7403a3808e534da02ca388632eac2bc18", "patch": "@@ -3,11 +3,18 @@\n // compile-flags: --test\n \n #![feature(async_closure)]\n+#![feature(box_patterns)]\n+#![feature(box_syntax)]\n #![feature(const_trait_impl)]\n+#![feature(decl_macro)]\n #![feature(generators)]\n #![feature(half_open_range_patterns)]\n+#![feature(label_break_value)]\n #![feature(more_qualified_paths)]\n #![feature(raw_ref_op)]\n+#![feature(trait_alias)]\n+#![feature(try_blocks)]\n+#![feature(type_ascription)]\n #![deny(unused_macros)]\n \n macro_rules! stringify_block {"}, {"sha": "dda5c0bb59d2330ba8dca0829503180b0734764b", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-pass.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/767239f7403a3808e534da02ca388632eac2bc18/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767239f7403a3808e534da02ca388632eac2bc18/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs?ref=767239f7403a3808e534da02ca388632eac2bc18", "patch": "@@ -7,7 +7,7 @@ fn main() {}\n \n // Test the `pat` macro fragment parser:\n macro_rules! accept_pat {\n-    ($p:pat) => {}\n+    ($p:pat) => {};\n }\n \n accept_pat!((p | q));\n@@ -21,28 +21,28 @@ accept_pat!([p | q]);\n #[cfg(FALSE)]\n fn or_patterns() {\n     // Top level of `let`:\n-    let (| A | B);\n+    let (A | B);\n     let (A | B);\n     let (A | B): u8;\n     let (A | B) = 0;\n     let (A | B): u8 = 0;\n \n     // Top level of `for`:\n-    for | A | B in 0 {}\n+    for A | B in 0 {}\n     for A | B in 0 {}\n \n     // Top level of `while`:\n-    while let | A | B = 0 {}\n+    while let A | B = 0 {}\n     while let A | B = 0 {}\n \n     // Top level of `if`:\n-    if let | A | B = 0 {}\n+    if let A | B = 0 {}\n     if let A | B = 0 {}\n \n     // Top level of `match` arms:\n     match 0 {\n-        | A | B => {},\n-        A | B => {},\n+        A | B => {}\n+        A | B => {}\n     }\n \n     // Functions:\n@@ -68,6 +68,8 @@ fn or_patterns() {\n \n     // These bind as `(prefix p) | q` as opposed to `prefix (p | q)`:\n     let (box 0 | 1); // Unstable; we *can* change the precedence if we want.\n+                     //~^ WARN box pattern syntax is experimental\n+                     //~| WARN unstable syntax\n     let (&0 | 1);\n     let (&mut 0 | 1);\n     let (x @ 0 | 1);"}, {"sha": "c43fe192a73b86fa7075da79bba804ede79306a9", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-pass.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/767239f7403a3808e534da02ca388632eac2bc18/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/767239f7403a3808e534da02ca388632eac2bc18/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.stderr?ref=767239f7403a3808e534da02ca388632eac2bc18", "patch": "@@ -0,0 +1,13 @@\n+warning: box pattern syntax is experimental\n+  --> $DIR/or-patterns-syntactic-pass.rs:70:10\n+   |\n+LL |     let (box 0 | 1); // Unstable; we *can* change the precedence if we want.\n+   |          ^^^^^\n+   |\n+   = note: see issue #29641 <https://github.com/rust-lang/rust/issues/29641> for more information\n+   = help: add `#![feature(box_patterns)]` to the crate attributes to enable\n+   = warning: unstable syntax can change at any point in the future, causing a hard error!\n+   = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "d8346653c25aa01ac3d3e6f039a700bda678dec2", "filename": "src/test/ui/parser/constraints-before-generic-args-syntactic-pass.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/767239f7403a3808e534da02ca388632eac2bc18/src%2Ftest%2Fui%2Fparser%2Fconstraints-before-generic-args-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767239f7403a3808e534da02ca388632eac2bc18/src%2Ftest%2Fui%2Fparser%2Fconstraints-before-generic-args-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fconstraints-before-generic-args-syntactic-pass.rs?ref=767239f7403a3808e534da02ca388632eac2bc18", "patch": "@@ -3,7 +3,11 @@\n #[cfg(FALSE)]\n fn syntax() {\n     foo::<T = u8, T: Ord, String>();\n+    //~^ WARN associated type bounds are unstable\n+    //~| WARN unstable syntax\n     foo::<T = u8, 'a, T: Ord>();\n+    //~^ WARN associated type bounds are unstable\n+    //~| WARN unstable syntax\n }\n \n fn main() {}"}, {"sha": "7e843c7f4d006d2acbd5111cd579dbac70f530b4", "filename": "src/test/ui/parser/constraints-before-generic-args-syntactic-pass.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/767239f7403a3808e534da02ca388632eac2bc18/src%2Ftest%2Fui%2Fparser%2Fconstraints-before-generic-args-syntactic-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/767239f7403a3808e534da02ca388632eac2bc18/src%2Ftest%2Fui%2Fparser%2Fconstraints-before-generic-args-syntactic-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fconstraints-before-generic-args-syntactic-pass.stderr?ref=767239f7403a3808e534da02ca388632eac2bc18", "patch": "@@ -0,0 +1,24 @@\n+warning: associated type bounds are unstable\n+  --> $DIR/constraints-before-generic-args-syntactic-pass.rs:5:19\n+   |\n+LL |     foo::<T = u8, T: Ord, String>();\n+   |                   ^^^^^^\n+   |\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n+   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n+   = warning: unstable syntax can change at any point in the future, causing a hard error!\n+   = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n+\n+warning: associated type bounds are unstable\n+  --> $DIR/constraints-before-generic-args-syntactic-pass.rs:8:23\n+   |\n+LL |     foo::<T = u8, 'a, T: Ord>();\n+   |                       ^^^^^^\n+   |\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n+   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n+   = warning: unstable syntax can change at any point in the future, causing a hard error!\n+   = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "4da5a2db76743ddaa01cf60729afc219d57e658a", "filename": "src/test/ui/pattern/rest-pat-syntactic.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/767239f7403a3808e534da02ca388632eac2bc18/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/767239f7403a3808e534da02ca388632eac2bc18/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.rs?ref=767239f7403a3808e534da02ca388632eac2bc18", "patch": "@@ -19,6 +19,8 @@ fn rest_patterns() {\n \n     // Box patterns:\n     let box ..;\n+    //~^ WARN box pattern syntax is experimental\n+    //~| WARN unstable syntax\n \n     // In or-patterns:\n     match x {\n@@ -57,7 +59,7 @@ fn rest_patterns() {\n         .. |\n         [\n             (\n-                box ..,\n+                box .., //~ WARN box pattern syntax is experimental\n                 &(..),\n                 &mut ..,\n                 x @ ..\n@@ -67,4 +69,5 @@ fn rest_patterns() {\n         ref mut x @ ..\n         => {}\n     }\n+    //~| WARN unstable syntax\n }"}, {"sha": "37019b7d5ba7a2e93c3a8680d8b0c7775baca893", "filename": "src/test/ui/pattern/rest-pat-syntactic.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/767239f7403a3808e534da02ca388632eac2bc18/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/767239f7403a3808e534da02ca388632eac2bc18/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.stderr?ref=767239f7403a3808e534da02ca388632eac2bc18", "patch": "@@ -0,0 +1,24 @@\n+warning: box pattern syntax is experimental\n+  --> $DIR/rest-pat-syntactic.rs:21:9\n+   |\n+LL |     let box ..;\n+   |         ^^^^^^\n+   |\n+   = note: see issue #29641 <https://github.com/rust-lang/rust/issues/29641> for more information\n+   = help: add `#![feature(box_patterns)]` to the crate attributes to enable\n+   = warning: unstable syntax can change at any point in the future, causing a hard error!\n+   = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n+\n+warning: box pattern syntax is experimental\n+  --> $DIR/rest-pat-syntactic.rs:62:17\n+   |\n+LL |                 box ..,\n+   |                 ^^^^^^\n+   |\n+   = note: see issue #29641 <https://github.com/rust-lang/rust/issues/29641> for more information\n+   = help: add `#![feature(box_patterns)]` to the crate attributes to enable\n+   = warning: unstable syntax can change at any point in the future, causing a hard error!\n+   = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n+\n+warning: 2 warnings emitted\n+"}]}