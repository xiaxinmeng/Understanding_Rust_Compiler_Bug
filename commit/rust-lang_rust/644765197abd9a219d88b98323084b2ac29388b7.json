{"sha": "644765197abd9a219d88b98323084b2ac29388b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NDc2NTE5N2FiZDlhMjE5ZDg4Yjk4MzIzMDg0YjJhYzI5Mzg4Yjc=", "commit": {"author": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2018-08-09T21:05:24Z"}, "committer": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2018-08-09T21:05:24Z"}, "message": "Preferring BuiltInCandidate { has_nested: false } in all cases", "tree": {"sha": "0501e210cd7824db4479fd2ff568edf6c8a3c72a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0501e210cd7824db4479fd2ff568edf6c8a3c72a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/644765197abd9a219d88b98323084b2ac29388b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/644765197abd9a219d88b98323084b2ac29388b7", "html_url": "https://github.com/rust-lang/rust/commit/644765197abd9a219d88b98323084b2ac29388b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/644765197abd9a219d88b98323084b2ac29388b7/comments", "author": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e7763381f0acf9b2f4058ae110f0bd013d685eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7763381f0acf9b2f4058ae110f0bd013d685eb", "html_url": "https://github.com/rust-lang/rust/commit/5e7763381f0acf9b2f4058ae110f0bd013d685eb"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "b67d11914e475bebe199766459bb85f75b1e88dc", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/644765197abd9a219d88b98323084b2ac29388b7/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644765197abd9a219d88b98323084b2ac29388b7/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=644765197abd9a219d88b98323084b2ac29388b7", "patch": "@@ -226,6 +226,7 @@ pub struct SelectionCache<'tcx> {\n /// parameter environment.\n #[derive(PartialEq,Eq,Debug,Clone)]\n enum SelectionCandidate<'tcx> {\n+    /// If has_nested is false, there are no *further* obligations\n     BuiltinCandidate { has_nested: bool },\n     ParamCandidate(ty::PolyTraitRef<'tcx>),\n     ImplCandidate(DefId),\n@@ -2039,12 +2040,20 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         }\n \n         match other.candidate {\n+            // Prefer BuiltinCandidate { has_nested: false } to anything else.\n+            // This is a fix for #53123 and prevents winnowing from accidentally extending the\n+            // lifetime of a variable.\n+            BuiltinCandidate { has_nested: false } => true,\n             ParamCandidate(ref cand) => match victim.candidate {\n                 AutoImplCandidate(..) => {\n                     bug!(\n                         \"default implementations shouldn't be recorded \\\n                          when there are other valid candidates\");\n                 }\n+                // Prefer BuiltinCandidate { has_nested: false } to anything else.\n+                // This is a fix for #53123 and prevents winnowing from accidentally extending the\n+                // lifetime of a variable.\n+                BuiltinCandidate { has_nested: false } => false,\n                 ImplCandidate(..) |\n                 ClosureCandidate |\n                 GeneratorCandidate |\n@@ -2072,6 +2081,10 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                         \"default implementations shouldn't be recorded \\\n                          when there are other valid candidates\");\n                 }\n+                // Prefer BuiltinCandidate { has_nested: false } to anything else.\n+                // This is a fix for #53123 and prevents winnowing from accidentally extending the\n+                // lifetime of a variable.\n+                BuiltinCandidate { has_nested: false } => false,\n                 ImplCandidate(..) |\n                 ClosureCandidate |\n                 GeneratorCandidate |\n@@ -2115,7 +2128,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             FnPointerCandidate |\n             BuiltinObjectCandidate |\n             BuiltinUnsizeCandidate |\n-            BuiltinCandidate { .. } => {\n+            BuiltinCandidate { has_nested: true } => {\n                 match victim.candidate {\n                     ParamCandidate(ref cand) => {\n                         // Prefer these to a global where-clause bound"}]}