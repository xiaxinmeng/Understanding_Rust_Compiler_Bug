{"sha": "e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "node_id": "C_kwDOAAsO6NoAKGU2NzRkMGE1OTkyNGE1YzM2Y2UwY2NiNmUyMWQ2ZTI0MTliMDgxNDU", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-11-04T12:52:36Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-11-04T12:52:36Z"}, "message": "Merge commit 'e18101137866b79045fee0ef996e696e68c920b4' into clippyup", "tree": {"sha": "cd62e75ccca4a32162e0d2324971c566edd9306f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd62e75ccca4a32162e0d2324971c566edd9306f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "html_url": "https://github.com/rust-lang/rust/commit/e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2cbf55323327efe3a791358e4256dee75322ddb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2cbf55323327efe3a791358e4256dee75322ddb", "html_url": "https://github.com/rust-lang/rust/commit/c2cbf55323327efe3a791358e4256dee75322ddb"}], "stats": {"total": 4733, "additions": 3201, "deletions": 1532}, "files": [{"sha": "688473f2f9bfcee25d3d1f7484967cbcd1ec3154", "filename": ".cargo/config.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/.cargo%2Fconfig.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/.cargo%2Fconfig.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig.toml?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "previous_filename": ".cargo/config"}, {"sha": "34225a5402904084617e9f19adaaa762d0aa5336", "filename": ".github/deploy.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/.github%2Fdeploy.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/.github%2Fdeploy.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdeploy.sh?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -13,7 +13,8 @@ cp util/gh-pages/lints.json out/master\n if [[ -n $TAG_NAME ]]; then\n   echo \"Save the doc for the current tag ($TAG_NAME) and point stable/ to it\"\n   cp -Tr out/master \"out/$TAG_NAME\"\n-  ln -sf \"$TAG_NAME\" out/stable\n+  rm -f out/stable\n+  ln -s \"$TAG_NAME\" out/stable\n fi\n \n if [[ $BETA = \"true\" ]]; then"}, {"sha": "85a6a6be8b7f2618d9b515afc201e54f27781e13", "filename": "CHANGELOG.md", "status": "modified", "additions": 158, "deletions": 8, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -6,11 +6,162 @@ document.\n \n ## Unreleased / In Rust Nightly\n \n-[7bfc26e...master](https://github.com/rust-lang/rust-clippy/compare/7bfc26e...master)\n+[b7f3f7f...master](https://github.com/rust-lang/rust-clippy/compare/b7f3f7f...master)\n+\n+## Rust 1.57\n+\n+Current beta, release 2021-12-02\n+\n+[7bfc26e...b7f3f7f](https://github.com/rust-lang/rust-clippy/compare/7bfc26e...b7f3f7f)\n+\n+### New Lints\n+\n+* [`negative_feature_names`]\n+  [#7539](https://github.com/rust-lang/rust-clippy/pull/7539)\n+* [`redundant_feature_names`]\n+  [#7539](https://github.com/rust-lang/rust-clippy/pull/7539)\n+* [`mod_module_files`]\n+  [#7543](https://github.com/rust-lang/rust-clippy/pull/7543)\n+* [`self_named_module_files`]\n+  [#7543](https://github.com/rust-lang/rust-clippy/pull/7543)\n+* [`manual_split_once`]\n+  [#7565](https://github.com/rust-lang/rust-clippy/pull/7565)\n+* [`derivable_impls`]\n+  [#7570](https://github.com/rust-lang/rust-clippy/pull/7570)\n+* [`needless_option_as_deref`]\n+  [#7596](https://github.com/rust-lang/rust-clippy/pull/7596)\n+* [`iter_not_returning_iterator`]\n+  [#7610](https://github.com/rust-lang/rust-clippy/pull/7610)\n+* [`same_name_method`]\n+  [#7653](https://github.com/rust-lang/rust-clippy/pull/7653)\n+* [`manual_assert`] [#7669](https://github.com/rust-lang/rust-clippy/pull/7669)\n+* [`non_send_fields_in_send_ty`]\n+  [#7709](https://github.com/rust-lang/rust-clippy/pull/7709)\n+* [`equatable_if_let`]\n+  [#7762](https://github.com/rust-lang/rust-clippy/pull/7762)\n+\n+### Moves and Deprecations\n+\n+* Move [`shadow_unrelated`] to `restriction`\n+  [#7338](https://github.com/rust-lang/rust-clippy/pull/7338)\n+* Move [`option_if_let_else`] to `nursery`\n+  [#7568](https://github.com/rust-lang/rust-clippy/pull/7568)\n+* Move [`branches_sharing_code`] to `nursery`\n+  [#7595](https://github.com/rust-lang/rust-clippy/pull/7595)\n+* Rename `if_let_some_result` to [`match_result_ok`] which now also handles\n+  `while let` cases [#7608](https://github.com/rust-lang/rust-clippy/pull/7608)\n+* Move [`many_single_char_names`] to `pedantic`\n+  [#7671](https://github.com/rust-lang/rust-clippy/pull/7671)\n+* Move [`float_cmp`] to `pedantic`\n+  [#7692](https://github.com/rust-lang/rust-clippy/pull/7692)\n+* Rename `box_vec` to [`box_collection`] and lint on more general cases\n+  [#7693](https://github.com/rust-lang/rust-clippy/pull/7693)\n+* Uplift `invalid_atomic_ordering` to rustc\n+  [rust-lang/rust#84039](https://github.com/rust-lang/rust/pull/84039)\n+\n+### Enhancements\n+\n+* Rewrite the `shadow*` lints, so that they find a lot more shadows and are not\n+  limited to certain patterns\n+  [#7338](https://github.com/rust-lang/rust-clippy/pull/7338)\n+* The `avoid-breaking-exported-api` configuration now also works for\n+  [`box_collection`], [`redundant_allocation`], [`rc_buffer`], [`vec_box`],\n+  [`option_option`], [`linkedlist`], [`rc_mutex`]\n+  [#7560](https://github.com/rust-lang/rust-clippy/pull/7560)\n+* [`unnecessary_unwrap`]: Now also checks for `expect`s\n+  [#7584](https://github.com/rust-lang/rust-clippy/pull/7584)\n+* [`disallowed_method`]: Allow adding a reason that will be displayed with the\n+  lint message\n+  [#7621](https://github.com/rust-lang/rust-clippy/pull/7621)\n+* [`approx_constant`]: Now checks the MSRV for `LOG10_2` and `LOG2_10`\n+  [#7629](https://github.com/rust-lang/rust-clippy/pull/7629)\n+* [`approx_constant`]: Add `TAU`\n+  [#7642](https://github.com/rust-lang/rust-clippy/pull/7642)\n+* [`needless_borrow`]: Now also lints on needless mutable borrows\n+  [#7657](https://github.com/rust-lang/rust-clippy/pull/7657)\n+* [`missing_safety_doc`]: Now also lints on unsafe traits\n+  [#7734](https://github.com/rust-lang/rust-clippy/pull/7734)\n+\n+### False Positive Fixes\n+\n+* [`manual_map`]: No longer lints when the option is borrowed in the match and\n+  also consumed in the arm\n+  [#7531](https://github.com/rust-lang/rust-clippy/pull/7531)\n+* [`filter_next`]: No longer lints if `filter` method is not the\n+  `Iterator::filter` method\n+  [#7562](https://github.com/rust-lang/rust-clippy/pull/7562)\n+* [`manual_flatten`]: No longer lints if expression is used after `if let`\n+  [#7566](https://github.com/rust-lang/rust-clippy/pull/7566)\n+* [`option_if_let_else`]: Multiple fixes\n+  [#7573](https://github.com/rust-lang/rust-clippy/pull/7573)\n+    * `break` and `continue` statements local to the would-be closure are\n+      allowed\n+    * Don't lint in const contexts\n+    * Don't lint when yield expressions are used\n+    * Don't lint when the captures made by the would-be closure conflict with\n+      the other branch\n+    * Don't lint when a field of a local is used when the type could be\n+      potentially moved from\n+    * In some cases, don't lint when scrutinee expression conflicts with the\n+      captures of the would-be closure\n+* [`redundant_allocation`]: No longer lints on `Box<Box<dyn T>>` which replaces\n+  wide pointers with thin pointers\n+  [#7592](https://github.com/rust-lang/rust-clippy/pull/7592)\n+* [`bool_assert_comparison`]: No longer lints on types that do not implement the\n+  `Not` trait with `Output = bool`\n+  [#7605](https://github.com/rust-lang/rust-clippy/pull/7605)\n+* [`mut_range_bound`]: No longer lints on range bound mutations, that are\n+  immediately followed by a `break;`\n+  [#7607](https://github.com/rust-lang/rust-clippy/pull/7607)\n+* [`mutable_key_type`]: Improve accuracy and document remaining false positives\n+  and false negatives\n+  [#7640](https://github.com/rust-lang/rust-clippy/pull/7640)\n+* [`redundant_closure`]: Rewrite the lint to fix various false positives and\n+  false negatives [#7661](https://github.com/rust-lang/rust-clippy/pull/7661)\n+* [`large_enum_variant`]: No longer wrongly identifies the second largest\n+  variant [#7677](https://github.com/rust-lang/rust-clippy/pull/7677)\n+* [`needless_return`]: No longer lints on let-else expressions\n+  [#7685](https://github.com/rust-lang/rust-clippy/pull/7685)\n+* [`suspicious_else_formatting`]: No longer lints in proc-macros\n+  [#7707](https://github.com/rust-lang/rust-clippy/pull/7707)\n+* [`excessive_precision`]: No longer lints when in some cases the float was\n+  already written in the shortest form\n+  [#7722](https://github.com/rust-lang/rust-clippy/pull/7722)\n+* [`doc_markdown`]: No longer lints on intra-doc links\n+  [#7772](https://github.com/rust-lang/rust-clippy/pull/7772)\n+\n+### Suggestion Fixes/Improvements\n+\n+* [`unnecessary_operation`]: Recommend using an `assert!` instead of using a\n+  function call in an indexing operation\n+  [#7453](https://github.com/rust-lang/rust-clippy/pull/7453)\n+* [`manual_split_once`]: Produce semantically equivalent suggestion when\n+  `rsplitn` is used [#7663](https://github.com/rust-lang/rust-clippy/pull/7663)\n+* [`while_let_on_iterator`]: Produce correct suggestion when using `&mut`\n+  [#7690](https://github.com/rust-lang/rust-clippy/pull/7690)\n+* [`manual_assert`]: No better handles complex conditions\n+  [#7741](https://github.com/rust-lang/rust-clippy/pull/7741)\n+* Correctly handle signs in exponents in numeric literals lints\n+  [#7747](https://github.com/rust-lang/rust-clippy/pull/7747)\n+* [`suspicious_map`]: Now also suggests to use `inspect` as an alternative\n+  [#7770](https://github.com/rust-lang/rust-clippy/pull/7770)\n+* Drop exponent from suggestion if it is 0 in numeric literals lints\n+  [#7774](https://github.com/rust-lang/rust-clippy/pull/7774)\n+\n+### ICE Fixes\n+\n+* [`implicit_hasher`]\n+  [#7761](https://github.com/rust-lang/rust-clippy/pull/7761)\n+\n+### Others\n+\n+* Clippy now uses the 2021\n+  [Edition!](https://www.youtube.com/watch?v=q0aNduqb2Ro)\n+  [#7664](https://github.com/rust-lang/rust-clippy/pull/7664)\n \n ## Rust 1.56\n \n-Current beta, release 2021-10-21\n+Current stable, released 2021-10-21\n \n [74d1561...7bfc26e](https://github.com/rust-lang/rust-clippy/compare/74d1561...7bfc26e)\n \n@@ -74,13 +225,9 @@ Current beta, release 2021-10-21\n * [`unnested_or_patterns`]: Removed `or_patterns` feature gate in the code\n   example [#7507](https://github.com/rust-lang/rust-clippy/pull/7507)\n \n-### New Lints\n-\n-* Renamed Lint: `if_let_some_result` is now called [`match_result_ok`]. Now also handles `while let` case.\n-\n ## Rust 1.55\n \n-Current stable, released 2021-09-09\n+Released 2021-09-09\n \n [3ae8faf...74d1561](https://github.com/rust-lang/rust-clippy/compare/3ae8faf...74d1561)\n \n@@ -2748,7 +2895,6 @@ Released 2018-09-13\n [`if_let_redundant_pattern_matching`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_redundant_pattern_matching\n [`if_not_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\n [`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n-[`if_then_panic`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_then_panic\n [`if_then_some_else_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n [`implicit_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_clone\n@@ -2806,6 +2952,7 @@ Released 2018-09-13\n [`lossy_float_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#lossy_float_literal\n [`macro_use_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#macro_use_imports\n [`main_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#main_recursion\n+[`manual_assert`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_assert\n [`manual_async_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_async_fn\n [`manual_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_filter_map\n [`manual_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find_map\n@@ -2976,6 +3123,7 @@ Released 2018-09-13\n [`self_named_constructors`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructors\n [`self_named_module_files`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_module_files\n [`semicolon_if_nothing_returned`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\n+[`separated_literal_suffix`]: https://rust-lang.github.io/rust-clippy/master/index.html#separated_literal_suffix\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n [`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\n [`shadow_same`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_same\n@@ -3000,6 +3148,7 @@ Released 2018-09-13\n [`string_extend_chars`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_extend_chars\n [`string_from_utf8_as_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_from_utf8_as_bytes\n [`string_lit_as_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_lit_as_bytes\n+[`string_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_slice\n [`string_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string\n [`strlen_on_c_strings`]: https://rust-lang.github.io/rust-clippy/master/index.html#strlen_on_c_strings\n [`struct_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools\n@@ -3046,6 +3195,7 @@ Released 2018-09-13\n [`uninit_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninit_vec\n [`unit_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_arg\n [`unit_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_cmp\n+[`unit_hash`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_hash\n [`unit_return_expecting_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_return_expecting_ord\n [`unnecessary_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n [`unnecessary_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_filter_map"}, {"sha": "97ff31b4bc5a3181727c5d8230ea463a6c1c170a", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -262,7 +262,9 @@ to be run inside the `rust` directory):\n 2. Checkout the commit from the latest available nightly. You can get it using `rustup check`.\n 3. Sync the changes to the rust-copy of Clippy to your Clippy fork:\n     ```bash\n-    # Make sure to change `your-github-name` to your github name in the following command\n+    # Make sure to change `your-github-name` to your github name in the following command. Also be\n+    # sure to either use a net-new branch, e.g. `sync-from-rust`, or delete the branch beforehand\n+    # because changes cannot be fast forwarded\n     git subtree push -P src/tools/clippy git@github.com:your-github-name/rust-clippy sync-from-rust\n     ```\n "}, {"sha": "602877bb9d6831dfd824f6d0e8a4fdf143e96b59", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -28,7 +28,7 @@ tempfile = { version = \"3.2\", optional = true }\n \n [dev-dependencies]\n cargo_metadata = \"0.14\"\n-compiletest_rs = { version = \"0.7\", features = [\"tmp\"] }\n+compiletest_rs = { version = \"0.7.1\", features = [\"tmp\"] }\n tester = \"0.9\"\n regex = \"1.5\"\n # This is used by the `collect-metadata` alias."}, {"sha": "43a478ee77db826975fcbda09202af1381a2981b", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -42,7 +42,8 @@ pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str\n     };\n \n     create_lint(&lint, msrv).context(\"Unable to create lint implementation\")?;\n-    create_test(&lint).context(\"Unable to create a test for the new lint\")\n+    create_test(&lint).context(\"Unable to create a test for the new lint\")?;\n+    add_lint(&lint, msrv).context(\"Unable to add lint to clippy_lints/src/lib.rs\")\n }\n \n fn create_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n@@ -80,6 +81,33 @@ fn create_test(lint: &LintData<'_>) -> io::Result<()> {\n     }\n }\n \n+fn add_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n+    let path = \"clippy_lints/src/lib.rs\";\n+    let mut lib_rs = fs::read_to_string(path).context(\"reading\")?;\n+\n+    let comment_start = lib_rs.find(\"// add lints here,\").expect(\"Couldn't find comment\");\n+\n+    let new_lint = if enable_msrv {\n+        format!(\n+            \"store.register_{lint_pass}_pass(move || Box::new({module_name}::{camel_name}::new(msrv)));\\n    \",\n+            lint_pass = lint.pass,\n+            module_name = lint.name,\n+            camel_name = to_camel_case(lint.name),\n+        )\n+    } else {\n+        format!(\n+            \"store.register_{lint_pass}_pass(|| Box::new({module_name}::{camel_name}));\\n    \",\n+            lint_pass = lint.pass,\n+            module_name = lint.name,\n+            camel_name = to_camel_case(lint.name),\n+        )\n+    };\n+\n+    lib_rs.insert_str(comment_start, &new_lint);\n+\n+    fs::write(path, lib_rs).context(\"writing\")\n+}\n+\n fn write_file<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> io::Result<()> {\n     fn inner(path: &Path, contents: &[u8]) -> io::Result<()> {\n         OpenOptions::new()\n@@ -151,7 +179,6 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n     };\n \n     let lint_name = lint.name;\n-    let pass_name = lint.pass;\n     let category = lint.category;\n     let name_camel = to_camel_case(lint.name);\n     let name_upper = lint_name.to_uppercase();\n@@ -228,18 +255,14 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n                     extract_msrv_attr!({context_import});\n                 }}\n \n-                // TODO: Register the lint pass in `clippy_lints/src/lib.rs`,\n-                //       e.g. store.register_{pass_name}_pass(move || Box::new({module_name}::{name_camel}::new(msrv)));\n                 // TODO: Add MSRV level to `clippy_utils/src/msrvs.rs` if needed.\n                 // TODO: Add MSRV test to `tests/ui/min_rust_version_attr.rs`.\n                 // TODO: Update msrv config comment in `clippy_lints/src/utils/conf.rs`\n             \"},\n             pass_type = pass_type,\n             pass_lifetimes = pass_lifetimes,\n-            pass_name = pass_name,\n             name_upper = name_upper,\n             name_camel = name_camel,\n-            module_name = lint_name,\n             context_import = context_import,\n         )\n     } else {\n@@ -248,16 +271,11 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n                 declare_lint_pass!({name_camel} => [{name_upper}]);\n \n                 impl {pass_type}{pass_lifetimes} for {name_camel} {{}}\n-                //\n-                // TODO: Register the lint pass in `clippy_lints/src/lib.rs`,\n-                //       e.g. store.register_{pass_name}_pass(|| Box::new({module_name}::{name_camel}));\n             \"},\n             pass_type = pass_type,\n             pass_lifetimes = pass_lifetimes,\n-            pass_name = pass_name,\n             name_upper = name_upper,\n             name_camel = name_camel,\n-            module_name = lint_name,\n         )\n     });\n "}, {"sha": "4af412ccaf35d7d0946429c5b997f9ae7081792e", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 76, "deletions": 3, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,15 +1,88 @@\n+use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::expr_or_init;\n use clippy_utils::ty::is_isize_or_usize;\n-use rustc_hir::Expr;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n \n use super::{utils, CAST_POSSIBLE_TRUNCATION};\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n+fn constant_int(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<u128> {\n+    if let Some((Constant::Int(c), _)) = constant(cx, cx.typeck_results(), expr) {\n+        Some(c)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn get_constant_bits(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<u64> {\n+    constant_int(cx, expr).map(|c| u64::from(128 - c.leading_zeros()))\n+}\n+\n+fn apply_reductions(cx: &LateContext<'_>, nbits: u64, expr: &Expr<'_>, signed: bool) -> u64 {\n+    match expr_or_init(cx, expr).kind {\n+        ExprKind::Cast(inner, _) => apply_reductions(cx, nbits, inner, signed),\n+        ExprKind::Block(block, _) => block.expr.map_or(nbits, |e| apply_reductions(cx, nbits, e, signed)),\n+        ExprKind::Binary(op, left, right) => match op.node {\n+            BinOpKind::Div => {\n+                apply_reductions(cx, nbits, left, signed)\n+                    - (if signed {\n+                        0 // let's be conservative here\n+                    } else {\n+                        // by dividing by 1, we remove 0 bits, etc.\n+                        get_constant_bits(cx, right).map_or(0, |b| b.saturating_sub(1))\n+                    })\n+            },\n+            BinOpKind::Rem | BinOpKind::BitAnd => get_constant_bits(cx, right)\n+                .unwrap_or(u64::max_value())\n+                .min(apply_reductions(cx, nbits, left, signed)),\n+            BinOpKind::Shr => {\n+                apply_reductions(cx, nbits, left, signed)\n+                    - constant_int(cx, right).map_or(0, |s| u64::try_from(s).expect(\"shift too high\"))\n+            },\n+            _ => nbits,\n+        },\n+        ExprKind::MethodCall(method, _, [left, right], _) => {\n+            if signed {\n+                return nbits;\n+            }\n+            let max_bits = if method.ident.as_str() == \"min\" {\n+                get_constant_bits(cx, right)\n+            } else {\n+                None\n+            };\n+            apply_reductions(cx, nbits, left, signed).min(max_bits.unwrap_or(u64::max_value()))\n+        },\n+        ExprKind::MethodCall(method, _, [_, lo, hi], _) => {\n+            if method.ident.as_str() == \"clamp\" {\n+                //FIXME: make this a diagnostic item\n+                if let (Some(lo_bits), Some(hi_bits)) = (get_constant_bits(cx, lo), get_constant_bits(cx, hi)) {\n+                    return lo_bits.max(hi_bits);\n+                }\n+            }\n+            nbits\n+        },\n+        ExprKind::MethodCall(method, _, [_value], _) => {\n+            if method.ident.name.as_str() == \"signum\" {\n+                0 // do not lint if cast comes from a `signum` function\n+            } else {\n+                nbits\n+            }\n+        },\n+        _ => nbits,\n+    }\n+}\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n     let msg = match (cast_from.is_integral(), cast_to.is_integral()) {\n         (true, true) => {\n-            let from_nbits = utils::int_ty_to_nbits(cast_from, cx.tcx);\n+            let from_nbits = apply_reductions(\n+                cx,\n+                utils::int_ty_to_nbits(cast_from, cx.tcx),\n+                cast_expr,\n+                cast_from.is_signed(),\n+            );\n             let to_nbits = utils::int_ty_to_nbits(cast_to, cx.tcx);\n \n             let (should_lint, suffix) = match (is_isize_or_usize(cast_from), is_isize_or_usize(cast_to)) {"}, {"sha": "233abd178943e9bc20b2685c68fd55f03d46a9c3", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -427,7 +427,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             fn_to_numeric_cast::check(cx, expr, cast_expr, cast_from, cast_to);\n             fn_to_numeric_cast_with_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n             if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {\n-                cast_possible_truncation::check(cx, expr, cast_from, cast_to);\n+                cast_possible_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n                 cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n                 cast_precision_loss::check(cx, expr, cast_from, cast_to);\n                 cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to);"}, {"sha": "9d8524ec91cc6e08f7c2ea056aabb58f3103e02e", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,3 +1,6 @@\n+// NOTE: if you add a deprecated lint in this file, please add a corresponding test in\n+// tests/ui/deprecated.rs\n+\n /// This struct fakes the `Lint` declaration that is usually created by `declare_lint!`. This\n /// enables the simple extraction of the metadata without changing the current deprecation\n /// declaration."}, {"sha": "ce59311c4aa96acac5154ce00f02e3d0a746fa99", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -126,7 +126,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                                 target_mut,\n                             },\n                         ));\n-                    }\n+                    },\n                     _ => (),\n                 }\n             },"}, {"sha": "87ad5178ff0887d8971b220844b528659a251b8f", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::attrs::is_doc_hidden;\n-use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_note};\n-use clippy_utils::source::first_line_of_span;\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_note, span_lint_and_sugg};\n+use clippy_utils::source::{first_line_of_span, snippet_with_applicability};\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use clippy_utils::{is_entrypoint_fn, is_expn_of, match_panic_def_id, method_chain_args, return_ty};\n use if_chain::if_chain;\n@@ -10,7 +10,7 @@ use rustc_ast::token::CommentKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::EmitterWriter;\n-use rustc_errors::Handler;\n+use rustc_errors::{Applicability, Handler};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{AnonConst, Expr, ExprKind, QPath};\n@@ -48,7 +48,7 @@ declare_clippy_lint! {\n     /// content are not linted.\n     ///\n     /// In addition, when writing documentation comments, including `[]` brackets\n-    /// inside a link text would trip the parser. Therfore, documenting link with\n+    /// inside a link text would trip the parser. Therefore, documenting link with\n     /// `[`SmallVec<[T; INLINE_CAPACITY]>`]` and then [`SmallVec<[T; INLINE_CAPACITY]>`]: SmallVec\n     /// would fail.\n     ///\n@@ -578,9 +578,12 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n                     // text \"http://example.com\" by pulldown-cmark\n                     continue;\n                 }\n-                headers.safety |= in_heading && text.trim() == \"Safety\";\n-                headers.errors |= in_heading && text.trim() == \"Errors\";\n-                headers.panics |= in_heading && text.trim() == \"Panics\";\n+                let trimmed_text = text.trim();\n+                headers.safety |= in_heading && trimmed_text == \"Safety\";\n+                headers.safety |= in_heading && trimmed_text == \"Implementation safety\";\n+                headers.safety |= in_heading && trimmed_text == \"Implementation Safety\";\n+                headers.errors |= in_heading && trimmed_text == \"Errors\";\n+                headers.panics |= in_heading && trimmed_text == \"Panics\";\n                 if in_code {\n                     if is_rust {\n                         let edition = edition.unwrap_or_else(|| cx.tcx.sess.edition());\n@@ -686,10 +689,18 @@ fn check_text(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, text: &str\n     for word in text.split(|c: char| c.is_whitespace() || c == '\\'') {\n         // Trim punctuation as in `some comment (see foo::bar).`\n         //                                                   ^^\n-        // Or even as in `_foo bar_` which is emphasized.\n-        let word = word.trim_matches(|c: char| !c.is_alphanumeric());\n+        // Or even as in `_foo bar_` which is emphasized. Also preserve `::` as a prefix/suffix.\n+        let mut word = word.trim_matches(|c: char| !c.is_alphanumeric() && c != ':');\n \n-        if valid_idents.contains(word) {\n+        // Remove leading or trailing single `:` which may be part of a sentence.\n+        if word.starts_with(':') && !word.starts_with(\"::\") {\n+            word = word.trim_start_matches(':');\n+        }\n+        if word.ends_with(':') && !word.ends_with(\"::\") {\n+            word = word.trim_end_matches(':');\n+        }\n+\n+        if valid_idents.contains(word) || word.chars().all(|c| c == ':') {\n             continue;\n         }\n \n@@ -744,17 +755,22 @@ fn check_word(cx: &LateContext<'_>, word: &str, span: Span) {\n         }\n     }\n \n-    // We assume that mixed-case words are not meant to be put inside bacticks. (Issue #2343)\n+    // We assume that mixed-case words are not meant to be put inside backticks. (Issue #2343)\n     if has_underscore(word) && has_hyphen(word) {\n         return;\n     }\n \n     if has_underscore(word) || word.contains(\"::\") || is_camel_case(word) {\n-        span_lint(\n+        let mut applicability = Applicability::MachineApplicable;\n+\n+        span_lint_and_sugg(\n             cx,\n             DOC_MARKDOWN,\n             span,\n-            &format!(\"you should put `{}` between ticks in the documentation\", word),\n+            \"item in documentation is missing backticks\",\n+            \"try\",\n+            format!(\"`{}`\", snippet_with_applicability(cx, span, \"..\", &mut applicability)),\n+            applicability,\n         );\n     }\n }\n@@ -793,9 +809,9 @@ impl<'a, 'tcx> Visitor<'tcx> for FindPanicUnwrap<'a, 'tcx> {\n \n         // check for `unwrap`\n         if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n-            let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n-            if is_type_diagnostic_item(self.cx, reciever_ty, sym::Option)\n-                || is_type_diagnostic_item(self.cx, reciever_ty, sym::Result)\n+            let receiver_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n+            if is_type_diagnostic_item(self.cx, receiver_ty, sym::Option)\n+                || is_type_diagnostic_item(self.cx, receiver_ty, sym::Result)\n             {\n                 self.panic_span = Some(expr.span);\n             }"}, {"sha": "57fd24bd4f04d81ca9263a905b84b258a100ae59", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -245,11 +245,14 @@ fn try_parse_contains(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Option<(Map\n         ExprKind::MethodCall(\n             _,\n             _,\n-            [map, Expr {\n-                kind: ExprKind::AddrOf(_, _, key),\n-                span: key_span,\n-                ..\n-            }],\n+            [\n+                map,\n+                Expr {\n+                    kind: ExprKind::AddrOf(_, _, key),\n+                    span: key_span,\n+                    ..\n+                },\n+            ],\n             _,\n         ) if key_span.ctxt() == expr.span.ctxt() => {\n             let id = cx.typeck_results().type_dependent_def_id(expr.hir_id)?;"}, {"sha": "404b67c8f29f2817a9e6f58c3fc55d3b588075e4", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 20, "deletions": 38, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,8 +1,8 @@\n //! lint on enum variants that are prefixed or suffixed by the same characters\n \n-use clippy_utils::camel_case;\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::source::is_present_in_source;\n+use clippy_utils::str_utils::{self, count_match_end, count_match_start};\n use rustc_hir::{EnumDef, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -117,26 +117,6 @@ impl_lint_pass!(EnumVariantNames => [\n     MODULE_INCEPTION\n ]);\n \n-/// Returns the number of chars that match from the start\n-#[must_use]\n-fn partial_match(pre: &str, name: &str) -> usize {\n-    let mut name_iter = name.chars();\n-    let _ = name_iter.next_back(); // make sure the name is never fully matched\n-    pre.chars().zip(name_iter).take_while(|&(l, r)| l == r).count()\n-}\n-\n-/// Returns the number of chars that match from the end\n-#[must_use]\n-fn partial_rmatch(post: &str, name: &str) -> usize {\n-    let mut name_iter = name.chars();\n-    let _ = name_iter.next(); // make sure the name is never fully matched\n-    post.chars()\n-        .rev()\n-        .zip(name_iter.rev())\n-        .take_while(|&(l, r)| l == r)\n-        .count()\n-}\n-\n fn check_variant(\n     cx: &LateContext<'_>,\n     threshold: u64,\n@@ -150,7 +130,7 @@ fn check_variant(\n     }\n     for var in def.variants {\n         let name = var.ident.name.as_str();\n-        if partial_match(item_name, &name) == item_name_chars\n+        if count_match_start(item_name, &name).char_count == item_name_chars\n             && name.chars().nth(item_name_chars).map_or(false, |c| !c.is_lowercase())\n             && name.chars().nth(item_name_chars + 1).map_or(false, |c| !c.is_numeric())\n         {\n@@ -161,7 +141,7 @@ fn check_variant(\n                 \"variant name starts with the enum's name\",\n             );\n         }\n-        if partial_rmatch(item_name, &name) == item_name_chars {\n+        if count_match_end(item_name, &name).char_count == item_name_chars {\n             span_lint(\n                 cx,\n                 ENUM_VARIANT_NAMES,\n@@ -171,33 +151,33 @@ fn check_variant(\n         }\n     }\n     let first = &def.variants[0].ident.name.as_str();\n-    let mut pre = &first[..camel_case::until(&*first)];\n-    let mut post = &first[camel_case::from(&*first)..];\n+    let mut pre = &first[..str_utils::camel_case_until(&*first).byte_index];\n+    let mut post = &first[str_utils::camel_case_start(&*first).byte_index..];\n     for var in def.variants {\n         let name = var.ident.name.as_str();\n \n-        let pre_match = partial_match(pre, &name);\n+        let pre_match = count_match_start(pre, &name).byte_count;\n         pre = &pre[..pre_match];\n-        let pre_camel = camel_case::until(pre);\n+        let pre_camel = str_utils::camel_case_until(pre).byte_index;\n         pre = &pre[..pre_camel];\n         while let Some((next, last)) = name[pre.len()..].chars().zip(pre.chars().rev()).next() {\n             if next.is_numeric() {\n                 return;\n             }\n             if next.is_lowercase() {\n                 let last = pre.len() - last.len_utf8();\n-                let last_camel = camel_case::until(&pre[..last]);\n-                pre = &pre[..last_camel];\n+                let last_camel = str_utils::camel_case_until(&pre[..last]);\n+                pre = &pre[..last_camel.byte_index];\n             } else {\n                 break;\n             }\n         }\n \n-        let post_match = partial_rmatch(post, &name);\n-        let post_end = post.len() - post_match;\n+        let post_match = count_match_end(post, &name);\n+        let post_end = post.len() - post_match.byte_count;\n         post = &post[post_end..];\n-        let post_camel = camel_case::from(post);\n-        post = &post[post_camel..];\n+        let post_camel = str_utils::camel_case_start(post);\n+        post = &post[post_camel.byte_index..];\n     }\n     let (what, value) = match (pre.is_empty(), post.is_empty()) {\n         (true, true) => return,\n@@ -266,14 +246,16 @@ impl LateLintPass<'_> for EnumVariantNames {\n                             );\n                         }\n                     }\n-                    if item.vis.node.is_pub() {\n-                        let matching = partial_match(mod_camel, &item_camel);\n-                        let rmatching = partial_rmatch(mod_camel, &item_camel);\n+                    // The `module_name_repetitions` lint should only trigger if the item has the module in its\n+                    // name. Having the same name is accepted.\n+                    if item.vis.node.is_pub() && item_camel.len() > mod_camel.len() {\n+                        let matching = count_match_start(mod_camel, &item_camel);\n+                        let rmatching = count_match_end(mod_camel, &item_camel);\n                         let nchars = mod_camel.chars().count();\n \n                         let is_word_beginning = |c: char| c == '_' || c.is_uppercase() || c.is_numeric();\n \n-                        if matching == nchars {\n+                        if matching.char_count == nchars {\n                             match item_camel.chars().nth(nchars) {\n                                 Some(c) if is_word_beginning(c) => span_lint(\n                                     cx,\n@@ -284,7 +266,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n                                 _ => (),\n                             }\n                         }\n-                        if rmatching == nchars {\n+                        if rmatching.char_count == nchars {\n                             span_lint(\n                                 cx,\n                                 MODULE_NAME_REPETITIONS,"}, {"sha": "9247343b52a5322f8c7ee09eec77de8b655ffcff", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -169,13 +169,16 @@ fn check_inputs(cx: &LateContext<'_>, params: &[Param<'_>], call_args: &[Expr<'_\n         }\n         match *cx.typeck_results().expr_adjustments(arg) {\n             [] => true,\n-            [Adjustment {\n-                kind: Adjust::Deref(None),\n-                ..\n-            }, Adjustment {\n-                kind: Adjust::Borrow(AutoBorrow::Ref(_, mu2)),\n-                ..\n-            }] => {\n+            [\n+                Adjustment {\n+                    kind: Adjust::Deref(None),\n+                    ..\n+                },\n+                Adjustment {\n+                    kind: Adjust::Borrow(AutoBorrow::Ref(_, mu2)),\n+                    ..\n+                },\n+            ] => {\n                 // re-borrow with the same mutability is allowed\n                 let ty = cx.typeck_results().expr_ty(arg);\n                 matches!(*ty.kind(), ty::Ref(.., mu1) if mu1 == mu2.into())"}, {"sha": "7169ac9ad6c5a50ce98062c8d1dcdaa465adea46", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -49,15 +49,19 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n \n         let mut applicability = Applicability::MachineApplicable;\n         if format_args.value_args.is_empty() {\n-            if_chain! {\n-                if let [e] = &*format_args.format_string_parts;\n-                if let ExprKind::Lit(lit) = &e.kind;\n-                if let Some(s_src) = snippet_opt(cx, lit.span);\n-                then {\n-                    // Simulate macro expansion, converting {{ and }} to { and }.\n-                    let s_expand = s_src.replace(\"{{\", \"{\").replace(\"}}\", \"}\");\n-                    let sugg = format!(\"{}.to_string()\", s_expand);\n-                    span_useless_format(cx, call_site, sugg, applicability);\n+            if format_args.format_string_parts.is_empty() {\n+                span_useless_format_empty(cx, call_site, \"String::new()\".to_owned(), applicability);\n+            } else {\n+                if_chain! {\n+                    if let [e] = &*format_args.format_string_parts;\n+                    if let ExprKind::Lit(lit) = &e.kind;\n+                    if let Some(s_src) = snippet_opt(cx, lit.span);\n+                    then {\n+                        // Simulate macro expansion, converting {{ and }} to { and }.\n+                        let s_expand = s_src.replace(\"{{\", \"{\").replace(\"}}\", \"}\");\n+                        let sugg = format!(\"{}.to_string()\", s_expand);\n+                        span_useless_format(cx, call_site, sugg, applicability);\n+                    }\n                 }\n             }\n         } else if let [value] = *format_args.value_args {\n@@ -89,6 +93,18 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n     }\n }\n \n+fn span_useless_format_empty(cx: &LateContext<'_>, span: Span, sugg: String, applicability: Applicability) {\n+    span_lint_and_sugg(\n+        cx,\n+        USELESS_FORMAT,\n+        span,\n+        \"useless use of `format!`\",\n+        \"consider using `String::new()`\",\n+        sugg,\n+        applicability,\n+    );\n+}\n+\n fn span_useless_format(cx: &LateContext<'_>, span: Span, sugg: String, applicability: Applicability) {\n     span_lint_and_sugg(\n         cx,"}, {"sha": "ac938156237bf8f090feb281558f6301b685e6b0", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -2,9 +2,9 @@\n //! on the condition\n \n use clippy_utils::diagnostics::span_lint_and_help;\n-use rustc_ast::ast::{BinOpKind, Expr, ExprKind, UnOp};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_middle::lint::in_external_macro;\n+use clippy_utils::is_else_clause;\n+use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -46,14 +46,21 @@ declare_clippy_lint! {\n \n declare_lint_pass!(IfNotElse => [IF_NOT_ELSE]);\n \n-impl EarlyLintPass for IfNotElse {\n-    fn check_expr(&mut self, cx: &EarlyContext<'_>, item: &Expr) {\n-        if in_external_macro(cx.sess, item.span) {\n+impl LateLintPass<'_> for IfNotElse {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, item: &Expr<'_>) {\n+        // While loops will be desugared to ExprKind::If. This will cause the lint to fire.\n+        // To fix this, return early if this span comes from a macro or desugaring.\n+        if item.span.from_expansion() {\n             return;\n         }\n-        if let ExprKind::If(ref cond, _, Some(ref els)) = item.kind {\n+        if let ExprKind::If(cond, _, Some(els)) = item.kind {\n             if let ExprKind::Block(..) = els.kind {\n-                match cond.kind {\n+                // Disable firing the lint in \"else if\" expressions.\n+                if is_else_clause(cx.tcx, item) {\n+                    return;\n+                }\n+\n+                match cond.peel_drop_temps().kind {\n                     ExprKind::Unary(UnOp::Not, _) => {\n                         span_lint_and_help(\n                             cx,"}, {"sha": "6850e0c34767cb0864a002b5ce498c3cc157c5a8", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -89,7 +89,7 @@ impl IntPlusOne {\n                     },\n                     _ => None,\n                 }\n-            }\n+            },\n             // case where `x + 1 <= ...` or `1 + x <= ...`\n             (BinOpKind::Le, &ExprKind::Binary(ref lhskind, ref lhslhs, ref lhsrhs), _)\n                 if lhskind.node == BinOpKind::Add =>\n@@ -104,7 +104,7 @@ impl IntPlusOne {\n                     },\n                     _ => None,\n                 }\n-            }\n+            },\n             // case where `... >= y - 1` or `... >= -1 + y`\n             (BinOpKind::Le, _, &ExprKind::Binary(ref rhskind, ref rhslhs, ref rhsrhs)) => {\n                 match (rhskind.node, &rhslhs.kind, &rhsrhs.kind) {"}, {"sha": "82438d85c7a3a353128134b0736e587c4dc9d5f1", "filename": "clippy_lints/src/invalid_upcast_comparisons.rs", "status": "modified", "additions": 3, "deletions": 65, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,17 +1,15 @@\n-use std::cmp::Ordering;\n-\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, IntTy, UintTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n+use clippy_utils::comparisons;\n use clippy_utils::comparisons::Rel;\n-use clippy_utils::consts::{constant, Constant};\n+use clippy_utils::consts::{constant_full_int, FullInt};\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::source::snippet;\n-use clippy_utils::{comparisons, sext};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -39,53 +37,6 @@ declare_clippy_lint! {\n \n declare_lint_pass!(InvalidUpcastComparisons => [INVALID_UPCAST_COMPARISONS]);\n \n-#[derive(Copy, Clone, Debug, Eq)]\n-enum FullInt {\n-    S(i128),\n-    U(u128),\n-}\n-\n-impl FullInt {\n-    #[allow(clippy::cast_sign_loss)]\n-    #[must_use]\n-    fn cmp_s_u(s: i128, u: u128) -> Ordering {\n-        if s < 0 {\n-            Ordering::Less\n-        } else if u > (i128::MAX as u128) {\n-            Ordering::Greater\n-        } else {\n-            (s as u128).cmp(&u)\n-        }\n-    }\n-}\n-\n-impl PartialEq for FullInt {\n-    #[must_use]\n-    fn eq(&self, other: &Self) -> bool {\n-        self.partial_cmp(other).expect(\"`partial_cmp` only returns `Some(_)`\") == Ordering::Equal\n-    }\n-}\n-\n-impl PartialOrd for FullInt {\n-    #[must_use]\n-    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-        Some(match (self, other) {\n-            (&Self::S(s), &Self::S(o)) => s.cmp(&o),\n-            (&Self::U(s), &Self::U(o)) => s.cmp(&o),\n-            (&Self::S(s), &Self::U(o)) => Self::cmp_s_u(s, o),\n-            (&Self::U(s), &Self::S(o)) => Self::cmp_s_u(o, s).reverse(),\n-        })\n-    }\n-}\n-\n-impl Ord for FullInt {\n-    #[must_use]\n-    fn cmp(&self, other: &Self) -> Ordering {\n-        self.partial_cmp(other)\n-            .expect(\"`partial_cmp` for FullInt can never return `None`\")\n-    }\n-}\n-\n fn numeric_cast_precast_bounds<'a>(cx: &LateContext<'_>, expr: &'a Expr<'_>) -> Option<(FullInt, FullInt)> {\n     if let ExprKind::Cast(cast_exp, _) = expr.kind {\n         let pre_cast_ty = cx.typeck_results().expr_ty(cast_exp);\n@@ -118,19 +69,6 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext<'_>, expr: &'a Expr<'_>) ->\n     }\n }\n \n-fn node_as_const_fullint<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<FullInt> {\n-    let val = constant(cx, cx.typeck_results(), expr)?.0;\n-    if let Constant::Int(const_int) = val {\n-        match *cx.typeck_results().expr_ty(expr).kind() {\n-            ty::Int(ity) => Some(FullInt::S(sext(cx.tcx, const_int, ity))),\n-            ty::Uint(_) => Some(FullInt::U(const_int)),\n-            _ => None,\n-        }\n-    } else {\n-        None\n-    }\n-}\n-\n fn err_upcast_comparison(cx: &LateContext<'_>, span: Span, expr: &Expr<'_>, always: bool) {\n     if let ExprKind::Cast(cast_val, _) = expr.kind {\n         span_lint(\n@@ -156,7 +94,7 @@ fn upcast_comparison_bounds_err<'tcx>(\n     invert: bool,\n ) {\n     if let Some((lb, ub)) = lhs_bounds {\n-        if let Some(norm_rhs_val) = node_as_const_fullint(cx, rhs) {\n+        if let Some(norm_rhs_val) = constant_full_int(cx, cx.typeck_results(), rhs) {\n             if rel == Rel::Eq || rel == Rel::Ne {\n                 if norm_rhs_val < lb || norm_rhs_val > ub {\n                     err_upcast_comparison(cx, span, lhs, rel == Rel::Ne);"}, {"sha": "15edb79d36c24d613653e870f38dc66ff94ca3e3", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -76,7 +76,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n     LintId::of(identity_op::IDENTITY_OP),\n     LintId::of(if_let_mutex::IF_LET_MUTEX),\n-    LintId::of(if_then_panic::IF_THEN_PANIC),\n     LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n     LintId::of(infinite_iter::INFINITE_ITER),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),\n@@ -218,6 +217,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n     LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n     LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n+    LintId::of(non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY),\n     LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n     LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n     LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n@@ -282,6 +282,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n     LintId::of(unicode::INVISIBLE_CHARACTERS),\n     LintId::of(uninit_vec::UNINIT_VEC),\n+    LintId::of(unit_hash::UNIT_HASH),\n     LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n     LintId::of(unit_types::UNIT_ARG),\n     LintId::of(unit_types::UNIT_CMP),"}, {"sha": "4217fd3a3ea72c04af802f688f39d34f1f501c7a", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -64,6 +64,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n     LintId::of(unicode::INVISIBLE_CHARACTERS),\n     LintId::of(uninit_vec::UNINIT_VEC),\n+    LintId::of(unit_hash::UNIT_HASH),\n     LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n     LintId::of(unit_types::UNIT_CMP),\n     LintId::of(unnamed_address::FN_ADDRESS_COMPARISONS),"}, {"sha": "2cb86418e3cb5df2cc946ba79a8095fe48de7be0", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -159,7 +159,6 @@ store.register_lints(&[\n     identity_op::IDENTITY_OP,\n     if_let_mutex::IF_LET_MUTEX,\n     if_not_else::IF_NOT_ELSE,\n-    if_then_panic::IF_THEN_PANIC,\n     if_then_some_else_none::IF_THEN_SOME_ELSE_NONE,\n     implicit_hasher::IMPLICIT_HASHER,\n     implicit_return::IMPLICIT_RETURN,\n@@ -216,6 +215,7 @@ store.register_lints(&[\n     loops::WHILE_LET_ON_ITERATOR,\n     macro_use::MACRO_USE_IMPORTS,\n     main_recursion::MAIN_RECURSION,\n+    manual_assert::MANUAL_ASSERT,\n     manual_async_fn::MANUAL_ASYNC_FN,\n     manual_map::MANUAL_MAP,\n     manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n@@ -327,6 +327,7 @@ store.register_lints(&[\n     misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n     misc_early::MIXED_CASE_HEX_LITERALS,\n     misc_early::REDUNDANT_PATTERN,\n+    misc_early::SEPARATED_LITERAL_SUFFIX,\n     misc_early::UNNEEDED_FIELD_PATTERN,\n     misc_early::UNNEEDED_WILDCARD_PATTERN,\n     misc_early::UNSEPARATED_LITERAL_SUFFIX,\n@@ -431,6 +432,7 @@ store.register_lints(&[\n     strings::STRING_ADD_ASSIGN,\n     strings::STRING_FROM_UTF8_AS_BYTES,\n     strings::STRING_LIT_AS_BYTES,\n+    strings::STRING_SLICE,\n     strings::STRING_TO_STRING,\n     strings::STR_TO_STRING,\n     strlen_on_c_strings::STRLEN_ON_C_STRINGS,\n@@ -476,6 +478,7 @@ store.register_lints(&[\n     unicode::NON_ASCII_LITERAL,\n     unicode::UNICODE_NOT_NFC,\n     uninit_vec::UNINIT_VEC,\n+    unit_hash::UNIT_HASH,\n     unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD,\n     unit_types::LET_UNIT_VALUE,\n     unit_types::UNIT_ARG,"}, {"sha": "44c75a11eec08111c17db1d2ca03862a17e3a6a3", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -17,7 +17,6 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(missing_const_for_fn::MISSING_CONST_FOR_FN),\n     LintId::of(mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n     LintId::of(mutex_atomic::MUTEX_INTEGER),\n-    LintId::of(non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY),\n     LintId::of(nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES),\n     LintId::of(option_if_let_else::OPTION_IF_LET_ELSE),\n     LintId::of(path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),"}, {"sha": "404ca20b5abc62bf05adf9b474a19c0990048e00", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -48,6 +48,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(loops::EXPLICIT_INTO_ITER_LOOP),\n     LintId::of(loops::EXPLICIT_ITER_LOOP),\n     LintId::of(macro_use::MACRO_USE_IMPORTS),\n+    LintId::of(manual_assert::MANUAL_ASSERT),\n     LintId::of(manual_ok_or::MANUAL_OK_OR),\n     LintId::of(match_on_vec_items::MATCH_ON_VEC_ITEMS),\n     LintId::of(matches::MATCH_BOOL),\n@@ -65,7 +66,6 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(methods::MAP_UNWRAP_OR),\n     LintId::of(misc::FLOAT_CMP),\n     LintId::of(misc::USED_UNDERSCORE_BINDING),\n-    LintId::of(misc_early::UNSEPARATED_LITERAL_SUFFIX),\n     LintId::of(mut_mut::MUT_MUT),\n     LintId::of(needless_bitwise_bool::NEEDLESS_BITWISE_BOOL),\n     LintId::of(needless_borrow::REF_BINDING_TO_REFERENCE),\n@@ -88,7 +88,6 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(transmute::TRANSMUTE_PTR_TO_PTR),\n     LintId::of(types::LINKEDLIST),\n     LintId::of(types::OPTION_OPTION),\n-    LintId::of(unicode::NON_ASCII_LITERAL),\n     LintId::of(unicode::UNICODE_NOT_NFC),\n     LintId::of(unit_types::LET_UNIT_VALUE),\n     LintId::of(unnecessary_wraps::UNNECESSARY_WRAPS),"}, {"sha": "eab389a9bd892089b94a10c749b2837d3916b25c", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -35,7 +35,9 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(methods::GET_UNWRAP),\n     LintId::of(methods::UNWRAP_USED),\n     LintId::of(misc::FLOAT_CMP_CONST),\n+    LintId::of(misc_early::SEPARATED_LITERAL_SUFFIX),\n     LintId::of(misc_early::UNNEEDED_FIELD_PATTERN),\n+    LintId::of(misc_early::UNSEPARATED_LITERAL_SUFFIX),\n     LintId::of(missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n     LintId::of(missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES),\n     LintId::of(missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n@@ -53,11 +55,13 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(shadow::SHADOW_SAME),\n     LintId::of(shadow::SHADOW_UNRELATED),\n     LintId::of(strings::STRING_ADD),\n+    LintId::of(strings::STRING_SLICE),\n     LintId::of(strings::STRING_TO_STRING),\n     LintId::of(strings::STR_TO_STRING),\n     LintId::of(types::RC_BUFFER),\n     LintId::of(types::RC_MUTEX),\n     LintId::of(undocumented_unsafe_blocks::UNDOCUMENTED_UNSAFE_BLOCKS),\n+    LintId::of(unicode::NON_ASCII_LITERAL),\n     LintId::of(unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS),\n     LintId::of(unwrap_in_result::UNWRAP_IN_RESULT),\n     LintId::of(verbose_file_reads::VERBOSE_FILE_READS),"}, {"sha": "744880bda3e69c2a83763dc5d9b1a38ade7b6ec5", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -27,7 +27,6 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(functions::DOUBLE_MUST_USE),\n     LintId::of(functions::MUST_USE_UNIT),\n     LintId::of(functions::RESULT_UNIT_ERR),\n-    LintId::of(if_then_panic::IF_THEN_PANIC),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),\n     LintId::of(len_zero::COMPARISON_TO_EMPTY),\n     LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),"}, {"sha": "a3f964d1580428f92230f26f169586fd86e25504", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -15,6 +15,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(loops::MUT_RANGE_BOUND),\n     LintId::of(methods::SUSPICIOUS_MAP),\n     LintId::of(mut_key::MUTABLE_KEY_TYPE),\n+    LintId::of(non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n ])"}, {"sha": "7174d0a082e0f7627f062180d10f5ef47c170a4b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -228,7 +228,6 @@ mod get_last_with_len;\n mod identity_op;\n mod if_let_mutex;\n mod if_not_else;\n-mod if_then_panic;\n mod if_then_some_else_none;\n mod implicit_hasher;\n mod implicit_return;\n@@ -255,6 +254,7 @@ mod literal_representation;\n mod loops;\n mod macro_use;\n mod main_recursion;\n+mod manual_assert;\n mod manual_async_fn;\n mod manual_map;\n mod manual_non_exhaustive;\n@@ -364,6 +364,7 @@ mod undocumented_unsafe_blocks;\n mod undropped_manually_drops;\n mod unicode;\n mod uninit_vec;\n+mod unit_hash;\n mod unit_return_expecting_ord;\n mod unit_types;\n mod unnamed_address;\n@@ -522,6 +523,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(collapsible_match::CollapsibleMatch));\n     store.register_late_pass(|| Box::new(unicode::Unicode));\n     store.register_late_pass(|| Box::new(uninit_vec::UninitVec));\n+    store.register_late_pass(|| Box::new(unit_hash::UnitHash));\n     store.register_late_pass(|| Box::new(unit_return_expecting_ord::UnitReturnExpectingOrd));\n     store.register_late_pass(|| Box::new(strings::StringAdd));\n     store.register_late_pass(|| Box::new(implicit_return::ImplicitReturn));\n@@ -666,7 +668,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(double_parens::DoubleParens));\n     store.register_late_pass(|| Box::new(to_string_in_display::ToStringInDisplay::new()));\n     store.register_early_pass(|| Box::new(unsafe_removed_from_name::UnsafeNameRemoval));\n-    store.register_early_pass(|| Box::new(if_not_else::IfNotElse));\n     store.register_early_pass(|| Box::new(else_if_without_else::ElseIfWithoutElse));\n     store.register_early_pass(|| Box::new(int_plus_one::IntPlusOne));\n     store.register_early_pass(|| Box::new(formatting::Formatting));\n@@ -720,6 +721,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(option_if_let_else::OptionIfLetElse));\n     store.register_late_pass(|| Box::new(future_not_send::FutureNotSend));\n     store.register_late_pass(|| Box::new(if_let_mutex::IfLetMutex));\n+    store.register_late_pass(|| Box::new(if_not_else::IfNotElse));\n     store.register_late_pass(|| Box::new(equatable_if_let::PatternEquality));\n     store.register_late_pass(|| Box::new(mut_mutex_lock::MutMutexLock));\n     store.register_late_pass(|| Box::new(match_on_vec_items::MatchOnVecItems));\n@@ -770,14 +772,14 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(self_named_constructors::SelfNamedConstructors));\n     store.register_late_pass(move || Box::new(feature_name::FeatureName));\n     store.register_late_pass(move || Box::new(iter_not_returning_iterator::IterNotReturningIterator));\n-    store.register_late_pass(move || Box::new(if_then_panic::IfThenPanic));\n+    store.register_late_pass(move || Box::new(manual_assert::ManualAssert));\n     let enable_raw_pointer_heuristic_for_send = conf.enable_raw_pointer_heuristic_for_send;\n     store.register_late_pass(move || Box::new(non_send_fields_in_send_ty::NonSendFieldInSendTy::new(enable_raw_pointer_heuristic_for_send)));\n     store.register_late_pass(move || Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks::default()));\n     store.register_late_pass(|| Box::new(match_str_case_mismatch::MatchStrCaseMismatch));\n     store.register_late_pass(move || Box::new(format_args::FormatArgs));\n     store.register_late_pass(|| Box::new(trailing_empty_array::TrailingEmptyArray));\n-\n+    // add lints here, do not remove this comment, it's used in `new_lint`\n }\n \n #[rustfmt::skip]\n@@ -828,6 +830,7 @@ fn register_removed_non_tool_lints(store: &mut rustc_lint::LintStore) {\n ///\n /// Used in `./src/driver.rs`.\n pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n+    // NOTE: when renaming a lint, add a corresponding test to tests/ui/rename.rs\n     ls.register_renamed(\"clippy::stutter\", \"clippy::module_name_repetitions\");\n     ls.register_renamed(\"clippy::new_without_default_derive\", \"clippy::new_without_default\");\n     ls.register_renamed(\"clippy::cyclomatic_complexity\", \"clippy::cognitive_complexity\");"}, {"sha": "cb0b96e0652e53b1115b238a63713907c8a7fa04", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -378,11 +378,15 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n \n     fn visit_ty(&mut self, ty: &'tcx Ty<'_>) {\n         match ty.kind {\n-            TyKind::OpaqueDef(item, _) => {\n+            TyKind::OpaqueDef(item, bounds) => {\n                 let map = self.cx.tcx.hir();\n                 let item = map.item(item);\n                 walk_item(self, item);\n                 walk_ty(self, ty);\n+                self.lts.extend(bounds.iter().filter_map(|bound| match bound {\n+                    GenericArg::Lifetime(l) => Some(RefLt::Named(l.name.ident().name)),\n+                    _ => None,\n+                }));\n             },\n             TyKind::BareFn(&BareFnTy { decl, .. }) => {\n                 let mut sub_visitor = RefVisitor::new(self.cx);"}, {"sha": "f9f515cc40a0fbdd120af9de1358d4e92ba66ce7", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -338,7 +338,7 @@ pub(super) fn make_iterator_snippet(cx: &LateContext<'_>, arg: &Expr<'_>, applic\n                     sugg::Sugg::hir_with_applicability(cx, arg_inner, \"_\", applic_ref).maybe_par(),\n                     meth_name,\n                 )\n-            }\n+            },\n             _ => format!(\n                 \"{}.into_iter()\",\n                 sugg::Sugg::hir_with_applicability(cx, arg, \"_\", applic_ref).maybe_par()"}, {"sha": "e55aa3f1850fe06a8a6f17b920e6fdcae763267c", "filename": "clippy_lints/src/manual_assert.rs", "status": "renamed", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_assert.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -26,14 +26,14 @@ declare_clippy_lint! {\n     /// let sad_people: Vec<&str> = vec![];\n     /// assert!(sad_people.is_empty(), \"there are sad people: {:?}\", sad_people);\n     /// ```\n-    pub IF_THEN_PANIC,\n-    style,\n+    pub MANUAL_ASSERT,\n+    pedantic,\n     \"`panic!` and only a `panic!` in `if`-then statement\"\n }\n \n-declare_lint_pass!(IfThenPanic => [IF_THEN_PANIC]);\n+declare_lint_pass!(ManualAssert => [MANUAL_ASSERT]);\n \n-impl LateLintPass<'_> for IfThenPanic {\n+impl LateLintPass<'_> for ManualAssert {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if_chain! {\n             if let Expr {\n@@ -54,23 +54,24 @@ impl LateLintPass<'_> for IfThenPanic {\n             if !cx.tcx.sess.source_map().is_multiline(cond.span);\n \n             then {\n-                let span = if let Some(panic_expn) = PanicExpn::parse(semi) {\n+                let call = if_chain! {\n+                    if let ExprKind::Block(block, _) = semi.kind;\n+                    if let Some(init) = block.expr;\n+                    then {\n+                        init\n+                    } else {\n+                        semi\n+                    }\n+                };\n+                let span = if let Some(panic_expn) = PanicExpn::parse(call) {\n                     match *panic_expn.format_args.value_args {\n                         [] => panic_expn.format_args.format_string_span,\n                         [.., last] => panic_expn.format_args.format_string_span.to(last.span),\n                     }\n+                } else if let ExprKind::Call(_, [format_args]) = call.kind {\n+                    format_args.span\n                 } else {\n-                    if_chain! {\n-                        if let ExprKind::Block(block, _) = semi.kind;\n-                        if let Some(init) = block.expr;\n-                        if let ExprKind::Call(_, [format_args]) = init.kind;\n-\n-                        then {\n-                            format_args.span\n-                        } else {\n-                            return\n-                        }\n-                    }\n+                    return\n                 };\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = snippet_with_applicability(cx, span, \"..\", &mut applicability);\n@@ -86,7 +87,7 @@ impl LateLintPass<'_> for IfThenPanic {\n \n                 span_lint_and_sugg(\n                     cx,\n-                    IF_THEN_PANIC,\n+                    MANUAL_ASSERT,\n                     expr.span,\n                     \"only a `panic!` in `if`-then statement\",\n                     \"try\",", "previous_filename": "clippy_lints/src/if_then_panic.rs"}, {"sha": "f501593c5187e36e99b823f0a1a6919df425bc86", "filename": "clippy_lints/src/match_str_case_mismatch.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -127,10 +127,10 @@ fn get_case_method(segment_ident_str: &str) -> Option<CaseMethod> {\n \n fn verify_case<'a>(case_method: &'a CaseMethod, arms: &'a [Arm<'_>]) -> Option<(Span, SymbolStr)> {\n     let case_check = match case_method {\n-        CaseMethod::LowerCase => |input: &str| -> bool { input.chars().all(char::is_lowercase) },\n-        CaseMethod::AsciiLowerCase => |input: &str| -> bool { input.chars().all(|c| matches!(c, 'a'..='z')) },\n-        CaseMethod::UpperCase => |input: &str| -> bool { input.chars().all(char::is_uppercase) },\n-        CaseMethod::AsciiUppercase => |input: &str| -> bool { input.chars().all(|c| matches!(c, 'A'..='Z')) },\n+        CaseMethod::LowerCase => |input: &str| -> bool { input.chars().all(|c| c.to_lowercase().next() == Some(c)) },\n+        CaseMethod::AsciiLowerCase => |input: &str| -> bool { !input.chars().any(|c| c.is_ascii_uppercase()) },\n+        CaseMethod::UpperCase => |input: &str| -> bool { input.chars().all(|c| c.to_uppercase().next() == Some(c)) },\n+        CaseMethod::AsciiUppercase => |input: &str| -> bool { !input.chars().any(|c| c.is_ascii_lowercase()) },\n     };\n \n     for arm in arms {\n@@ -153,7 +153,7 @@ fn verify_case<'a>(case_method: &'a CaseMethod, arms: &'a [Arm<'_>]) -> Option<(\n \n fn lint(cx: &LateContext<'_>, case_method: &CaseMethod, bad_case_span: Span, bad_case_str: &str) {\n     let (method_str, suggestion) = match case_method {\n-        CaseMethod::LowerCase => (\"to_lower_case\", bad_case_str.to_lowercase()),\n+        CaseMethod::LowerCase => (\"to_lowercase\", bad_case_str.to_lowercase()),\n         CaseMethod::AsciiLowerCase => (\"to_ascii_lowercase\", bad_case_str.to_ascii_lowercase()),\n         CaseMethod::UpperCase => (\"to_uppercase\", bad_case_str.to_uppercase()),\n         CaseMethod::AsciiUppercase => (\"to_ascii_uppercase\", bad_case_str.to_ascii_uppercase()),"}, {"sha": "eb311983b29276ebf0b21b35ed9e0dcc46750af3", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 28, "deletions": 47, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::consts::{constant, miri_to_const, Constant};\n+use clippy_utils::consts::{constant, constant_full_int, miri_to_const, FullInt};\n use clippy_utils::diagnostics::{\n     multispan_sugg, span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n };\n@@ -930,9 +930,8 @@ fn check_match_bool(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr:\n fn check_overlapping_arms<'tcx>(cx: &LateContext<'tcx>, ex: &'tcx Expr<'_>, arms: &'tcx [Arm<'_>]) {\n     if arms.len() >= 2 && cx.typeck_results().expr_ty(ex).is_integral() {\n         let ranges = all_ranges(cx, arms, cx.typeck_results().expr_ty(ex));\n-        let type_ranges = type_ranges(&ranges);\n-        if !type_ranges.is_empty() {\n-            if let Some((start, end)) = overlapping(&type_ranges) {\n+        if !ranges.is_empty() {\n+            if let Some((start, end)) = overlapping(&ranges) {\n                 span_lint_and_note(\n                     cx,\n                     MATCH_OVERLAPPING_ARM,\n@@ -968,8 +967,7 @@ fn check_wild_err_arm<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm\n                     }\n                     if_chain! {\n                         if matching_wild;\n-                        if let ExprKind::Block(block, _) = arm.body.kind;\n-                        if is_panic_block(block);\n+                        if is_panic_call(arm.body);\n                         then {\n                             // `Err(_)` or `Err(_e)` arm with `panic!` found\n                             span_lint_and_note(cx,\n@@ -1172,14 +1170,19 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n }\n \n // If the block contains only a `panic!` macro (as expression or statement)\n-fn is_panic_block(block: &Block<'_>) -> bool {\n-    match (&block.expr, block.stmts.len(), block.stmts.first()) {\n-        (&Some(exp), 0, _) => is_expn_of(exp.span, \"panic\").is_some() && is_expn_of(exp.span, \"unreachable\").is_none(),\n-        (&None, 1, Some(stmt)) => {\n-            is_expn_of(stmt.span, \"panic\").is_some() && is_expn_of(stmt.span, \"unreachable\").is_none()\n-        },\n-        _ => false,\n-    }\n+fn is_panic_call(expr: &Expr<'_>) -> bool {\n+    // Unwrap any wrapping blocks\n+    let span = if let ExprKind::Block(block, _) = expr.kind {\n+        match (&block.expr, block.stmts.len(), block.stmts.first()) {\n+            (&Some(exp), 0, _) => exp.span,\n+            (&None, 1, Some(stmt)) => stmt.span,\n+            _ => return false,\n+        }\n+    } else {\n+        expr.span\n+    };\n+\n+    is_expn_of(span, \"panic\").is_some() && is_expn_of(span, \"unreachable\").is_none()\n }\n \n fn check_match_ref_pats<'a, 'b, I>(cx: &LateContext<'_>, ex: &Expr<'_>, pats: I, expr: &Expr<'_>)\n@@ -1601,7 +1604,7 @@ fn opt_parent_let<'a>(cx: &LateContext<'a>, ex: &Expr<'a>) -> Option<&'a Local<'\n }\n \n /// Gets all arms that are unbounded `PatRange`s.\n-fn all_ranges<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>], ty: Ty<'tcx>) -> Vec<SpannedRange<Constant>> {\n+fn all_ranges<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>], ty: Ty<'tcx>) -> Vec<SpannedRange<FullInt>> {\n     arms.iter()\n         .filter_map(|arm| {\n             if let Arm { pat, guard: None, .. } = *arm {\n@@ -1614,21 +1617,25 @@ fn all_ranges<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>], ty: Ty<'tcx>)\n                         Some(rhs) => constant(cx, cx.typeck_results(), rhs)?.0,\n                         None => miri_to_const(ty.numeric_max_val(cx.tcx)?)?,\n                     };\n-                    let rhs = match range_end {\n-                        RangeEnd::Included => Bound::Included(rhs),\n-                        RangeEnd::Excluded => Bound::Excluded(rhs),\n+\n+                    let lhs_val = lhs.int_value(cx, ty)?;\n+                    let rhs_val = rhs.int_value(cx, ty)?;\n+\n+                    let rhs_bound = match range_end {\n+                        RangeEnd::Included => Bound::Included(rhs_val),\n+                        RangeEnd::Excluded => Bound::Excluded(rhs_val),\n                     };\n                     return Some(SpannedRange {\n                         span: pat.span,\n-                        node: (lhs, rhs),\n+                        node: (lhs_val, rhs_bound),\n                     });\n                 }\n \n                 if let PatKind::Lit(value) = pat.kind {\n-                    let value = constant(cx, cx.typeck_results(), value)?.0;\n+                    let value = constant_full_int(cx, cx.typeck_results(), value)?;\n                     return Some(SpannedRange {\n                         span: pat.span,\n-                        node: (value.clone(), Bound::Included(value)),\n+                        node: (value, Bound::Included(value)),\n                     });\n                 }\n             }\n@@ -1643,32 +1650,6 @@ pub struct SpannedRange<T> {\n     pub node: (T, Bound<T>),\n }\n \n-type TypedRanges = Vec<SpannedRange<u128>>;\n-\n-/// Gets all `Int` ranges or all `Uint` ranges. Mixed types are an error anyway\n-/// and other types than\n-/// `Uint` and `Int` probably don't make sense.\n-fn type_ranges(ranges: &[SpannedRange<Constant>]) -> TypedRanges {\n-    ranges\n-        .iter()\n-        .filter_map(|range| match range.node {\n-            (Constant::Int(start), Bound::Included(Constant::Int(end))) => Some(SpannedRange {\n-                span: range.span,\n-                node: (start, Bound::Included(end)),\n-            }),\n-            (Constant::Int(start), Bound::Excluded(Constant::Int(end))) => Some(SpannedRange {\n-                span: range.span,\n-                node: (start, Bound::Excluded(end)),\n-            }),\n-            (Constant::Int(start), Bound::Unbounded) => Some(SpannedRange {\n-                span: range.span,\n-                node: (start, Bound::Unbounded),\n-            }),\n-            _ => None,\n-        })\n-        .collect()\n-}\n-\n // Checks if arm has the form `None => None`\n fn is_none_arm(cx: &LateContext<'_>, arm: &Arm<'_>) -> bool {\n     matches!(arm.pat.kind, PatKind::Path(ref qpath) if is_lang_ctor(cx, qpath, OptionNone))"}, {"sha": "b4dacb2580c313fbc366aae7b251facfbdda215e", "filename": "clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -85,7 +85,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, method_name: Symbol,\n                     if expr.hir_id == self_arg.hir_id && ty != cx.typeck_results().expr_ty_adjusted(expr) =>\n                 {\n                     return;\n-                }\n+                },\n                 ExprKind::MethodCall(_, _, [self_arg, ..], _) if expr.hir_id == self_arg.hir_id => true,\n                 ExprKind::Match(_, _, MatchSource::TryDesugar | MatchSource::AwaitDesugar)\n                 | ExprKind::Field(..)\n@@ -100,7 +100,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, method_name: Symbol,\n                 ) =>\n             {\n                 return;\n-            }\n+            },\n             _ => false,\n         };\n "}, {"sha": "fe9ffde0d337c1f15506e73bdca1e0f373c88da5", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -186,7 +186,7 @@ pub(super) fn check<'tcx>(\n                         check_general_case(cx, name, method_span, &args[0], &args[1], expr.span, None);\n                     }\n                 }\n-            }\n+            },\n             _ => (),\n         }\n     }"}, {"sha": "06ba968fa4ed31da1700c3df599ff67badc51359", "filename": "clippy_lints/src/misc_early/double_neg.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmisc_early%2Fdouble_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmisc_early%2Fdouble_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fdouble_neg.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,23 +1,18 @@\n-use super::MiscEarlyLints;\n use clippy_utils::diagnostics::span_lint;\n use rustc_ast::ast::{Expr, ExprKind, UnOp};\n use rustc_lint::EarlyContext;\n \n use super::DOUBLE_NEG;\n \n pub(super) fn check(cx: &EarlyContext<'_>, expr: &Expr) {\n-    match expr.kind {\n-        ExprKind::Unary(UnOp::Neg, ref inner) => {\n-            if let ExprKind::Unary(UnOp::Neg, _) = inner.kind {\n-                span_lint(\n-                    cx,\n-                    DOUBLE_NEG,\n-                    expr.span,\n-                    \"`--x` could be misinterpreted as pre-decrement by C programmers, is usually a no-op\",\n-                );\n-            }\n-        },\n-        ExprKind::Lit(ref lit) => MiscEarlyLints::check_lit(cx, lit),\n-        _ => (),\n+    if let ExprKind::Unary(UnOp::Neg, ref inner) = expr.kind {\n+        if let ExprKind::Unary(UnOp::Neg, _) = inner.kind {\n+            span_lint(\n+                cx,\n+                DOUBLE_NEG,\n+                expr.span,\n+                \"`--x` could be misinterpreted as pre-decrement by C programmers, is usually a no-op\",\n+            );\n+        }\n     }\n }"}, {"sha": "1165c19a0cf0b442fbee3d8622e1637dff722849", "filename": "clippy_lints/src/misc_early/literal_suffix.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,38 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use rustc_ast::ast::Lit;\n+use rustc_errors::Applicability;\n+use rustc_lint::EarlyContext;\n+\n+use super::{SEPARATED_LITERAL_SUFFIX, UNSEPARATED_LITERAL_SUFFIX};\n+\n+pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, lit_snip: &str, suffix: &str, sugg_type: &str) {\n+    let maybe_last_sep_idx = if let Some(val) = lit_snip.len().checked_sub(suffix.len() + 1) {\n+        val\n+    } else {\n+        return; // It's useless so shouldn't lint.\n+    };\n+    // Do not lint when literal is unsuffixed.\n+    if !suffix.is_empty() {\n+        if lit_snip.as_bytes()[maybe_last_sep_idx] == b'_' {\n+            span_lint_and_sugg(\n+                cx,\n+                SEPARATED_LITERAL_SUFFIX,\n+                lit.span,\n+                &format!(\"{} type suffix should not be separated by an underscore\", sugg_type),\n+                \"remove the underscore\",\n+                format!(\"{}{}\", &lit_snip[..maybe_last_sep_idx], suffix),\n+                Applicability::MachineApplicable,\n+            );\n+        } else {\n+            span_lint_and_sugg(\n+                cx,\n+                UNSEPARATED_LITERAL_SUFFIX,\n+                lit.span,\n+                &format!(\"{} type suffix should be separated by an underscore\", sugg_type),\n+                \"add an underscore\",\n+                format!(\"{}_{}\", &lit_snip[..=maybe_last_sep_idx], suffix),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}"}, {"sha": "7c3f5f22ade0f9ba447d1dc583791b092f1abf80", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,15 +1,15 @@\n mod builtin_type_shadow;\n mod double_neg;\n+mod literal_suffix;\n mod mixed_case_hex_literals;\n mod redundant_pattern;\n mod unneeded_field_pattern;\n mod unneeded_wildcard_pattern;\n-mod unseparated_literal_suffix;\n mod zero_prefixed_literal;\n \n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::source::snippet_opt;\n-use rustc_ast::ast::{Expr, Generics, Lit, LitFloatType, LitIntType, LitKind, NodeId, Pat, PatKind};\n+use rustc_ast::ast::{Expr, ExprKind, Generics, Lit, LitFloatType, LitIntType, LitKind, NodeId, Pat, PatKind};\n use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -115,9 +115,11 @@ declare_clippy_lint! {\n     /// ### What it does\n     /// Warns if literal suffixes are not separated by an\n     /// underscore.\n+    /// To enforce unseparated literal suffix style,\n+    /// see the `separated_literal_suffix` lint.\n     ///\n     /// ### Why is this bad?\n-    /// It is much less readable.\n+    /// Suffix style should be consistent.\n     ///\n     /// ### Example\n     /// ```rust\n@@ -128,10 +130,32 @@ declare_clippy_lint! {\n     /// let y = 123832_i32;\n     /// ```\n     pub UNSEPARATED_LITERAL_SUFFIX,\n-    pedantic,\n+    restriction,\n     \"literals whose suffix is not separated by an underscore\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Warns if literal suffixes are separated by an underscore.\n+    /// To enforce separated literal suffix style,\n+    /// see the `unseparated_literal_suffix` lint.\n+    ///\n+    /// ### Why is this bad?\n+    /// Suffix style should be consistent.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// // Bad\n+    /// let y = 123832_i32;\n+    ///\n+    /// // Good\n+    /// let y = 123832i32;\n+    /// ```\n+    pub SEPARATED_LITERAL_SUFFIX,\n+    restriction,\n+    \"literals whose suffix is separated by an underscore\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Warns if an integral constant literal starts with `0`.\n@@ -260,6 +284,7 @@ declare_lint_pass!(MiscEarlyLints => [\n     DOUBLE_NEG,\n     MIXED_CASE_HEX_LITERALS,\n     UNSEPARATED_LITERAL_SUFFIX,\n+    SEPARATED_LITERAL_SUFFIX,\n     ZERO_PREFIXED_LITERAL,\n     BUILTIN_TYPE_SHADOW,\n     REDUNDANT_PATTERN,\n@@ -310,6 +335,10 @@ impl EarlyLintPass for MiscEarlyLints {\n         if in_external_macro(cx.sess, expr.span) {\n             return;\n         }\n+\n+        if let ExprKind::Lit(ref lit) = expr.kind {\n+            MiscEarlyLints::check_lit(cx, lit);\n+        }\n         double_neg::check(cx, expr);\n     }\n }\n@@ -332,7 +361,7 @@ impl MiscEarlyLints {\n                 LitIntType::Unsigned(ty) => ty.name_str(),\n                 LitIntType::Unsuffixed => \"\",\n             };\n-            unseparated_literal_suffix::check(cx, lit, &lit_snip, suffix, \"integer\");\n+            literal_suffix::check(cx, lit, &lit_snip, suffix, \"integer\");\n             if lit_snip.starts_with(\"0x\") {\n                 mixed_case_hex_literals::check(cx, lit, suffix, &lit_snip);\n             } else if lit_snip.starts_with(\"0b\") || lit_snip.starts_with(\"0o\") {\n@@ -342,7 +371,7 @@ impl MiscEarlyLints {\n             }\n         } else if let LitKind::Float(_, LitFloatType::Suffixed(float_ty)) = lit.kind {\n             let suffix = float_ty.name_str();\n-            unseparated_literal_suffix::check(cx, lit, &lit_snip, suffix, \"float\");\n+            literal_suffix::check(cx, lit, &lit_snip, suffix, \"float\");\n         }\n     }\n }"}, {"sha": "2018aa6184a8db4568f751017d6e5514cbcda95f", "filename": "clippy_lints/src/misc_early/unseparated_literal_suffix.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c2cbf55323327efe3a791358e4256dee75322ddb/clippy_lints%2Fsrc%2Fmisc_early%2Funseparated_literal_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2cbf55323327efe3a791358e4256dee75322ddb/clippy_lints%2Fsrc%2Fmisc_early%2Funseparated_literal_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Funseparated_literal_suffix.rs?ref=c2cbf55323327efe3a791358e4256dee75322ddb", "patch": "@@ -1,26 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use rustc_ast::ast::Lit;\n-use rustc_errors::Applicability;\n-use rustc_lint::EarlyContext;\n-\n-use super::UNSEPARATED_LITERAL_SUFFIX;\n-\n-pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, lit_snip: &str, suffix: &str, sugg_type: &str) {\n-    let maybe_last_sep_idx = if let Some(val) = lit_snip.len().checked_sub(suffix.len() + 1) {\n-        val\n-    } else {\n-        return; // It's useless so shouldn't lint.\n-    };\n-    // Do not lint when literal is unsuffixed.\n-    if !suffix.is_empty() && lit_snip.as_bytes()[maybe_last_sep_idx] != b'_' {\n-        span_lint_and_sugg(\n-            cx,\n-            UNSEPARATED_LITERAL_SUFFIX,\n-            lit.span,\n-            &format!(\"{} type suffix should be separated by an underscore\", sugg_type),\n-            \"add an underscore\",\n-            format!(\"{}_{}\", &lit_snip[..=maybe_last_sep_idx], suffix),\n-            Applicability::MachineApplicable,\n-        );\n-    }\n-}"}, {"sha": "d41b54745649958de717e61f6d395bfbce0e62e5", "filename": "clippy_lints/src/module_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmodule_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fmodule_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodule_style.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -106,7 +106,7 @@ impl EarlyLintPass for ModStyle {\n                     }\n                     process_paths_for_mod_files(path, &mut folder_segments, &mut mod_folders);\n                     check_self_named_mod_exists(cx, path, file);\n-                }\n+                },\n                 _ => {},\n             }\n         }"}, {"sha": "f1be90c44f98b998901e0f4b2462722466c99d69", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -107,14 +107,18 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrow {\n         if let ExprKind::AddrOf(BorrowKind::Ref, mutability, inner) = e.kind {\n             if let ty::Ref(_, ty, _) = cx.typeck_results().expr_ty(inner).kind() {\n                 for adj3 in cx.typeck_results().expr_adjustments(e).windows(3) {\n-                    if let [Adjustment {\n-                        kind: Adjust::Deref(_), ..\n-                    }, Adjustment {\n-                        kind: Adjust::Deref(_), ..\n-                    }, Adjustment {\n-                        kind: Adjust::Borrow(_),\n-                        ..\n-                    }] = *adj3\n+                    if let [\n+                        Adjustment {\n+                            kind: Adjust::Deref(_), ..\n+                        },\n+                        Adjustment {\n+                            kind: Adjust::Deref(_), ..\n+                        },\n+                        Adjustment {\n+                            kind: Adjust::Borrow(_),\n+                            ..\n+                        },\n+                    ] = *adj3\n                     {\n                         let help_msg_ty = if matches!(mutability, Mutability::Not) {\n                             format!(\"&{}\", ty)"}, {"sha": "7ebf84d400f569c3f891bc7d417afeeb2d741167", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -44,7 +44,7 @@ declare_clippy_lint! {\n     /// Use thread-safe types like [`std::sync::Arc`](https://doc.rust-lang.org/std/sync/struct.Arc.html)\n     /// or specify correct bounds on generic type parameters (`T: Send`).\n     pub NON_SEND_FIELDS_IN_SEND_TY,\n-    nursery,\n+    suspicious,\n     \"there is field that does not implement `Send` in a `Send` struct\"\n }\n "}, {"sha": "cbe1c5d44d513044d745718518c69876f69a10f3", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -22,7 +22,7 @@ declare_clippy_lint! {\n     /// expression).\n     ///\n     /// ### Why is this bad?\n-    /// Using the dedicated functions of the Option type is clearer and\n+    /// Using the dedicated functions of the `Option` type is clearer and\n     /// more concise than an `if let` expression.\n     ///\n     /// ### Known problems"}, {"sha": "8a36e20fc973d678297d14718039e8913af8acc7", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -3,16 +3,16 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::ptr::get_spans;\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::ty::{is_type_diagnostic_item, match_type, walk_ptrs_hir_ty};\n+use clippy_utils::ty::walk_ptrs_hir_ty;\n use clippy_utils::{expr_path_res, is_lint_allowed, match_any_diagnostic_items, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n+use rustc_hir::def::Res;\n use rustc_hir::{\n-    BinOpKind, BodyId, Expr, ExprKind, FnDecl, FnRetTy, GenericArg, HirId, Impl, ImplItem, ImplItemKind, Item,\n-    ItemKind, Lifetime, MutTy, Mutability, Node, PathSegment, QPath, TraitFn, TraitItem, TraitItemKind, Ty, TyKind,\n+    BinOpKind, BodyId, Expr, ExprKind, FnDecl, FnRetTy, GenericArg, Impl, ImplItem, ImplItemKind, Item, ItemKind,\n+    Lifetime, MutTy, Mutability, Node, PathSegment, QPath, TraitFn, TraitItem, TraitItemKind, Ty, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n@@ -153,7 +153,7 @@ declare_lint_pass!(Ptr => [PTR_ARG, CMP_NULL, MUT_FROM_REF, INVALID_NULL_PTR_USA\n impl<'tcx> LateLintPass<'tcx> for Ptr {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if let ItemKind::Fn(ref sig, _, body_id) = item.kind {\n-            check_fn(cx, sig.decl, item.hir_id(), Some(body_id));\n+            check_fn(cx, sig.decl, Some(body_id));\n         }\n     }\n \n@@ -165,7 +165,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n                     return; // ignore trait impls\n                 }\n             }\n-            check_fn(cx, sig.decl, item.hir_id(), Some(body_id));\n+            check_fn(cx, sig.decl, Some(body_id));\n         }\n     }\n \n@@ -176,7 +176,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n             } else {\n                 None\n             };\n-            check_fn(cx, sig.decl, item.hir_id(), body_id);\n+            check_fn(cx, sig.decl, body_id);\n         }\n     }\n \n@@ -244,22 +244,31 @@ fn check_invalid_ptr_usage<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n }\n \n #[allow(clippy::too_many_lines)]\n-fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id: Option<BodyId>) {\n-    let fn_def_id = cx.tcx.hir().local_def_id(fn_id);\n-    let sig = cx.tcx.fn_sig(fn_def_id);\n-    let fn_ty = sig.skip_binder();\n+fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, opt_body_id: Option<BodyId>) {\n     let body = opt_body_id.map(|id| cx.tcx.hir().body(id));\n \n-    for (idx, (arg, ty)) in decl.inputs.iter().zip(fn_ty.inputs()).enumerate() {\n+    for (idx, arg) in decl.inputs.iter().enumerate() {\n         // Honor the allow attribute on parameters. See issue 5644.\n         if let Some(body) = &body {\n             if is_lint_allowed(cx, PTR_ARG, body.params[idx].hir_id) {\n                 continue;\n             }\n         }\n \n-        if let ty::Ref(_, ty, Mutability::Not) = ty.kind() {\n-            if is_type_diagnostic_item(cx, ty, sym::Vec) {\n+        let (item_name, path) = if_chain! {\n+            if let TyKind::Rptr(_, MutTy { ty, mutbl: Mutability::Not }) = arg.kind;\n+            if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind;\n+            if let Res::Def(_, did) = path.res;\n+            if let Some(item_name) = cx.tcx.get_diagnostic_name(did);\n+            then {\n+                (item_name, path)\n+            } else {\n+                continue\n+            }\n+        };\n+\n+        match item_name {\n+            sym::Vec => {\n                 if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_owned()\")]) {\n                     span_lint_and_then(\n                         cx,\n@@ -289,7 +298,8 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         },\n                     );\n                 }\n-            } else if is_type_diagnostic_item(cx, ty, sym::String) {\n+            },\n+            sym::String => {\n                 if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n                     span_lint_and_then(\n                         cx,\n@@ -311,7 +321,8 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         },\n                     );\n                 }\n-            } else if is_type_diagnostic_item(cx, ty, sym::PathBuf) {\n+            },\n+            sym::PathBuf => {\n                 if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_path_buf()\"), (\"as_path\", \"\")]) {\n                     span_lint_and_then(\n                         cx,\n@@ -338,11 +349,10 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         },\n                     );\n                 }\n-            } else if match_type(cx, ty, &paths::COW) {\n+            },\n+            sym::Cow => {\n                 if_chain! {\n-                    if let TyKind::Rptr(_, MutTy { ty, ..} ) = arg.kind;\n-                    if let TyKind::Path(QPath::Resolved(None, pp)) = ty.kind;\n-                    if let [ref bx] = *pp.segments;\n+                    if let [ref bx] = *path.segments;\n                     if let Some(params) = bx.args;\n                     if !params.parenthesized;\n                     if let Some(inner) = params.args.iter().find_map(|arg| match arg {\n@@ -363,7 +373,8 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         );\n                     }\n                 }\n-            }\n+            },\n+            _ => {},\n         }\n     }\n "}, {"sha": "f63ef163bcbd0f1b76ddfd92fcac4d38b50a48bc", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -172,23 +172,17 @@ impl QuestionMark {\n         }\n     }\n \n-    fn expression_returns_unmodified_err(\n-        cx: &LateContext<'_>,\n-        expression: &Expr<'_>,\n-        origin_hir_id: &Expr<'_>,\n-    ) -> bool {\n-        match expression.kind {\n+    fn expression_returns_unmodified_err(cx: &LateContext<'_>, expr: &Expr<'_>, cond_expr: &Expr<'_>) -> bool {\n+        match expr.kind {\n             ExprKind::Block(block, _) => {\n                 if let Some(return_expression) = Self::return_expression(block) {\n-                    return Self::expression_returns_unmodified_err(cx, return_expression, origin_hir_id);\n+                    return Self::expression_returns_unmodified_err(cx, return_expression, cond_expr);\n                 }\n \n                 false\n             },\n-            ExprKind::Ret(Some(expr)) | ExprKind::Call(expr, _) => {\n-                Self::expression_returns_unmodified_err(cx, expr, origin_hir_id)\n-            },\n-            ExprKind::Path(_) => path_to_local(expression) == path_to_local(origin_hir_id),\n+            ExprKind::Ret(Some(ret_expr)) => Self::expression_returns_unmodified_err(cx, ret_expr, cond_expr),\n+            ExprKind::Path(_) => path_to_local(expr) == path_to_local(cond_expr),\n             _ => false,\n         }\n     }"}, {"sha": "6435107b8b4643f02f94078b7fe0c70802458d56", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 71, "deletions": 35, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -107,51 +107,87 @@ declare_clippy_lint! {\n     \"calling `as_bytes` on a string literal instead of using a byte string literal\"\n }\n \n-declare_lint_pass!(StringAdd => [STRING_ADD, STRING_ADD_ASSIGN]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for slice operations on strings\n+    ///\n+    /// ### Why is this bad?\n+    /// UTF-8 characters span multiple bytes, and it is easy to inadvertently confuse character\n+    /// counts and string indices. This may lead to panics, and should warrant some test cases\n+    /// containing wide UTF-8 characters. This lint is most useful in code that should avoid\n+    /// panics at all costs.\n+    ///\n+    /// ### Known problems\n+    /// Probably lots of false positives. If an index comes from a known valid position (e.g.\n+    /// obtained via `char_indices` over the same string), it is totally OK.\n+    ///\n+    /// # Example\n+    /// ```rust,should_panic\n+    /// &\"\u00d6lkanne\"[1..];\n+    /// ```\n+    pub STRING_SLICE,\n+    restriction,\n+    \"slicing a string\"\n+}\n+\n+declare_lint_pass!(StringAdd => [STRING_ADD, STRING_ADD_ASSIGN, STRING_SLICE]);\n \n impl<'tcx> LateLintPass<'tcx> for StringAdd {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         if in_external_macro(cx.sess(), e.span) {\n             return;\n         }\n-\n-        if let ExprKind::Binary(\n-            Spanned {\n-                node: BinOpKind::Add, ..\n-            },\n-            left,\n-            _,\n-        ) = e.kind\n-        {\n-            if is_string(cx, left) {\n-                if !is_lint_allowed(cx, STRING_ADD_ASSIGN, e.hir_id) {\n-                    let parent = get_parent_expr(cx, e);\n-                    if let Some(p) = parent {\n-                        if let ExprKind::Assign(target, _, _) = p.kind {\n-                            // avoid duplicate matches\n-                            if SpanlessEq::new(cx).eq_expr(target, left) {\n-                                return;\n+        match e.kind {\n+            ExprKind::Binary(\n+                Spanned {\n+                    node: BinOpKind::Add, ..\n+                },\n+                left,\n+                _,\n+            ) => {\n+                if is_string(cx, left) {\n+                    if !is_lint_allowed(cx, STRING_ADD_ASSIGN, e.hir_id) {\n+                        let parent = get_parent_expr(cx, e);\n+                        if let Some(p) = parent {\n+                            if let ExprKind::Assign(target, _, _) = p.kind {\n+                                // avoid duplicate matches\n+                                if SpanlessEq::new(cx).eq_expr(target, left) {\n+                                    return;\n+                                }\n                             }\n                         }\n                     }\n+                    span_lint(\n+                        cx,\n+                        STRING_ADD,\n+                        e.span,\n+                        \"you added something to a string. Consider using `String::push_str()` instead\",\n+                    );\n                 }\n-                span_lint(\n-                    cx,\n-                    STRING_ADD,\n-                    e.span,\n-                    \"you added something to a string. Consider using `String::push_str()` instead\",\n-                );\n-            }\n-        } else if let ExprKind::Assign(target, src, _) = e.kind {\n-            if is_string(cx, target) && is_add(cx, src, target) {\n-                span_lint(\n-                    cx,\n-                    STRING_ADD_ASSIGN,\n-                    e.span,\n-                    \"you assigned the result of adding something to this string. Consider using \\\n-                     `String::push_str()` instead\",\n-                );\n-            }\n+            },\n+            ExprKind::Assign(target, src, _) => {\n+                if is_string(cx, target) && is_add(cx, src, target) {\n+                    span_lint(\n+                        cx,\n+                        STRING_ADD_ASSIGN,\n+                        e.span,\n+                        \"you assigned the result of adding something to this string. Consider using \\\n+                         `String::push_str()` instead\",\n+                    );\n+                }\n+            },\n+            ExprKind::Index(target, _idx) => {\n+                let e_ty = cx.typeck_results().expr_ty(target).peel_refs();\n+                if matches!(e_ty.kind(), ty::Str) || is_type_diagnostic_item(cx, e_ty, sym::String) {\n+                    span_lint(\n+                        cx,\n+                        STRING_SLICE,\n+                        e.span,\n+                        \"indexing into a string may panic if the index is within a UTF-8 character\",\n+                    );\n+                }\n+            },\n+            _ => {},\n         }\n     }\n }"}, {"sha": "11aef50991b0a1415a12dc83077de7246fe53d03", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -145,8 +145,9 @@ impl UndocumentedUnsafeBlocks {\n         let file_name = source_map.span_to_filename(between_span);\n         let source_file = source_map.get_source_file(&file_name)?;\n \n-        let lex_start = (between_span.lo().0 + 1) as usize;\n-        let src_str = source_file.src.as_ref()?[lex_start..between_span.hi().0 as usize].to_string();\n+        let lex_start = (between_span.lo().0 - source_file.start_pos.0 + 1) as usize;\n+        let lex_end = (between_span.hi().0 - source_file.start_pos.0) as usize;\n+        let src_str = source_file.src.as_ref()?[lex_start..lex_end].to_string();\n \n         let mut pos = 0;\n         let mut comment = false;"}, {"sha": "f49ce696a04b77d4832cca91d62f78b12964f72d", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -45,7 +45,7 @@ declare_clippy_lint! {\n     /// let x = String::from(\"\\u{20ac}\");\n     /// ```\n     pub NON_ASCII_LITERAL,\n-    pedantic,\n+    restriction,\n     \"using any literal non-ASCII chars in a string literal instead of using the `\\\\u` escape\"\n }\n "}, {"sha": "a3a3f2d41c7323354af7c50b4b7b46ffecd32879", "filename": "clippy_lints/src/unit_hash.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Funit_hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Funit_hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_hash.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,77 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Detects `().hash(_)`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Hashing a unit value doesn't do anything as the implementation of `Hash` for `()` is a no-op.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # use std::hash::Hash;\n+    /// # use std::collections::hash_map::DefaultHasher;\n+    /// # enum Foo { Empty, WithValue(u8) }\n+    /// # use Foo::*;\n+    /// # let mut state = DefaultHasher::new();\n+    /// # let my_enum = Foo::Empty;\n+    /// match my_enum {\n+    /// \tEmpty => ().hash(&mut state),\n+    /// \tWithValue(x) => x.hash(&mut state),\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::hash::Hash;\n+    /// # use std::collections::hash_map::DefaultHasher;\n+    /// # enum Foo { Empty, WithValue(u8) }\n+    /// # use Foo::*;\n+    /// # let mut state = DefaultHasher::new();\n+    /// # let my_enum = Foo::Empty;\n+    /// match my_enum {\n+    /// \tEmpty => 0_u8.hash(&mut state),\n+    /// \tWithValue(x) => x.hash(&mut state),\n+    /// }\n+    /// ```\n+    pub UNIT_HASH,\n+    correctness,\n+    \"hashing a unit value, which does nothing\"\n+}\n+declare_lint_pass!(UnitHash => [UNIT_HASH]);\n+\n+impl LateLintPass<'tcx> for UnitHash {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if_chain! {\n+            if let ExprKind::MethodCall(name_ident, _, args, _) = &expr.kind;\n+            if name_ident.ident.name == sym::hash;\n+            if let [recv, state_param] = args;\n+            if cx.typeck_results().expr_ty(recv).is_unit();\n+            then {\n+                span_lint_and_then(\n+                    cx,\n+                    UNIT_HASH,\n+                    expr.span,\n+                    \"this call to `hash` on the unit type will do nothing\",\n+                    |diag| {\n+                        diag.span_suggestion(\n+                            expr.span,\n+                            \"remove the call to `hash` or consider using\",\n+                            format!(\n+                                \"0_u8.hash({})\",\n+                                snippet(cx, state_param.span, \"..\"),\n+                            ),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        diag.note(\"the implementation of `Hash` for `()` is a no-op\");\n+                    }\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "6447e3fa2ca08a85d04716b6bd1f955ba8f5b931", "filename": "clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -13,7 +13,7 @@ use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for functions of type Result that contain `expect()` or `unwrap()`\n+    /// Checks for functions of type `Result` that contain `expect()` or `unwrap()`\n     ///\n     /// ### Why is this bad?\n     /// These functions promote recoverable errors to non-recoverable errors which may be undesirable in code bases which wish to avoid panics."}, {"sha": "122a5ce3fc8f12d19fd8d0ce877ff2a672c01537", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -288,10 +288,10 @@ define_Conf! {\n     ///\n     /// The list of imports to always rename, a fully qualified path followed by the rename.\n     (enforced_import_renames: Vec<crate::utils::conf::Rename> = Vec::new()),\n-    /// Lint: RESTRICTED_SCRIPTS.\n+    /// Lint: DISALLOWED_SCRIPT_IDENTS.\n     ///\n     /// The list of unicode scripts allowed to be used in the scope.\n-    (allowed_scripts: Vec<String> = vec![\"Latin\".to_string()]),\n+    (allowed_scripts: Vec<String> = [\"Latin\"].iter().map(ToString::to_string).collect()),\n     /// Lint: NON_SEND_FIELDS_IN_SEND_TY.\n     ///\n     /// Whether to apply the raw pointer heuristic to determine if a type is `Send`."}, {"sha": "99cf4c1ed40fbcbd0a52105176f455b05f230995", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -512,12 +512,21 @@ fn extract_attr_docs(cx: &LateContext<'_>, item: &Item<'_>) -> Option<String> {\n     let mut lines = attrs.iter().filter_map(ast::Attribute::doc_str);\n     let mut docs = String::from(&*lines.next()?.as_str());\n     let mut in_code_block = false;\n+    let mut is_code_block_rust = false;\n     for line in lines {\n-        docs.push('\\n');\n         let line = line.as_str();\n         let line = &*line;\n+\n+        // Rustdoc hides code lines starting with `# ` and this removes them from Clippy's lint list :)\n+        if is_code_block_rust && line.trim_start().starts_with(\"# \") {\n+            continue;\n+        }\n+\n+        // The line should be represented in the lint list, even if it's just an empty line\n+        docs.push('\\n');\n         if let Some(info) = line.trim_start().strip_prefix(\"```\") {\n             in_code_block = !in_code_block;\n+            is_code_block_rust = false;\n             if in_code_block {\n                 let lang = info\n                     .trim()\n@@ -528,6 +537,8 @@ fn extract_attr_docs(cx: &LateContext<'_>, item: &Item<'_>) -> Option<String> {\n                     .unwrap_or(\"rust\");\n                 docs.push_str(\"```\");\n                 docs.push_str(lang);\n+\n+                is_code_block_rust = lang == \"rust\";\n                 continue;\n             }\n         }"}, {"sha": "a6636e391374e13d4c75fe0a6effc0e08495ad6f", "filename": "clippy_utils/src/camel_case.rs", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/c2cbf55323327efe3a791358e4256dee75322ddb/clippy_utils%2Fsrc%2Fcamel_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2cbf55323327efe3a791358e4256dee75322ddb/clippy_utils%2Fsrc%2Fcamel_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcamel_case.rs?ref=c2cbf55323327efe3a791358e4256dee75322ddb", "patch": "@@ -1,117 +0,0 @@\n-/// Returns the index of the character after the first camel-case component of `s`.\n-#[must_use]\n-pub fn until(s: &str) -> usize {\n-    let mut iter = s.char_indices();\n-    if let Some((_, first)) = iter.next() {\n-        if !first.is_uppercase() {\n-            return 0;\n-        }\n-    } else {\n-        return 0;\n-    }\n-    let mut up = true;\n-    let mut last_i = 0;\n-    for (i, c) in iter {\n-        if up {\n-            if c.is_lowercase() {\n-                up = false;\n-            } else {\n-                return last_i;\n-            }\n-        } else if c.is_uppercase() {\n-            up = true;\n-            last_i = i;\n-        } else if !c.is_lowercase() {\n-            return i;\n-        }\n-    }\n-    if up { last_i } else { s.len() }\n-}\n-\n-/// Returns index of the last camel-case component of `s`.\n-#[must_use]\n-pub fn from(s: &str) -> usize {\n-    let mut iter = s.char_indices().rev();\n-    if let Some((_, first)) = iter.next() {\n-        if !first.is_lowercase() {\n-            return s.len();\n-        }\n-    } else {\n-        return s.len();\n-    }\n-    let mut down = true;\n-    let mut last_i = s.len();\n-    for (i, c) in iter {\n-        if down {\n-            if c.is_uppercase() {\n-                down = false;\n-                last_i = i;\n-            } else if !c.is_lowercase() {\n-                return last_i;\n-            }\n-        } else if c.is_lowercase() {\n-            down = true;\n-        } else if c.is_uppercase() {\n-            last_i = i;\n-        } else {\n-            return last_i;\n-        }\n-    }\n-    last_i\n-}\n-\n-#[cfg(test)]\n-mod test {\n-    use super::{from, until};\n-\n-    #[test]\n-    fn from_full() {\n-        assert_eq!(from(\"AbcDef\"), 0);\n-        assert_eq!(from(\"Abc\"), 0);\n-        assert_eq!(from(\"ABcd\"), 0);\n-        assert_eq!(from(\"ABcdEf\"), 0);\n-        assert_eq!(from(\"AabABcd\"), 0);\n-    }\n-\n-    #[test]\n-    fn from_partial() {\n-        assert_eq!(from(\"abcDef\"), 3);\n-        assert_eq!(from(\"aDbc\"), 1);\n-        assert_eq!(from(\"aabABcd\"), 3);\n-    }\n-\n-    #[test]\n-    fn from_not() {\n-        assert_eq!(from(\"AbcDef_\"), 7);\n-        assert_eq!(from(\"AbcDD\"), 5);\n-    }\n-\n-    #[test]\n-    fn from_caps() {\n-        assert_eq!(from(\"ABCD\"), 4);\n-    }\n-\n-    #[test]\n-    fn until_full() {\n-        assert_eq!(until(\"AbcDef\"), 6);\n-        assert_eq!(until(\"Abc\"), 3);\n-    }\n-\n-    #[test]\n-    fn until_not() {\n-        assert_eq!(until(\"abcDef\"), 0);\n-        assert_eq!(until(\"aDbc\"), 0);\n-    }\n-\n-    #[test]\n-    fn until_partial() {\n-        assert_eq!(until(\"AbcDef_\"), 6);\n-        assert_eq!(until(\"CallTypeC\"), 8);\n-        assert_eq!(until(\"AbcDD\"), 3);\n-    }\n-\n-    #[test]\n-    fn until_caps() {\n-        assert_eq!(until(\"ABCD\"), 0);\n-    }\n-}"}, {"sha": "04347672e0fbb35e12241580aacfeac22de28fbc", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -155,6 +155,19 @@ impl Constant {\n             _ => None,\n         }\n     }\n+\n+    /// Returns the integer value or `None` if `self` or `val_type` is not integer type.\n+    pub fn int_value(&self, cx: &LateContext<'_>, val_type: Ty<'_>) -> Option<FullInt> {\n+        if let Constant::Int(const_int) = *self {\n+            match *val_type.kind() {\n+                ty::Int(ity) => Some(FullInt::S(sext(cx.tcx, const_int, ity))),\n+                ty::Uint(_) => Some(FullInt::U(const_int)),\n+                _ => None,\n+            }\n+        } else {\n+            None\n+        }\n+    }\n }\n \n /// Parses a `LitKind` to a `Constant`.\n@@ -202,6 +215,52 @@ pub fn constant_simple<'tcx>(\n     constant(lcx, typeck_results, e).and_then(|(cst, res)| if res { None } else { Some(cst) })\n }\n \n+pub fn constant_full_int(\n+    lcx: &LateContext<'tcx>,\n+    typeck_results: &ty::TypeckResults<'tcx>,\n+    e: &Expr<'_>,\n+) -> Option<FullInt> {\n+    constant_simple(lcx, typeck_results, e)?.int_value(lcx, typeck_results.expr_ty(e))\n+}\n+\n+#[derive(Copy, Clone, Debug, Eq)]\n+pub enum FullInt {\n+    S(i128),\n+    U(u128),\n+}\n+\n+impl PartialEq for FullInt {\n+    #[must_use]\n+    fn eq(&self, other: &Self) -> bool {\n+        self.cmp(other) == Ordering::Equal\n+    }\n+}\n+\n+impl PartialOrd for FullInt {\n+    #[must_use]\n+    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+impl Ord for FullInt {\n+    #[must_use]\n+    fn cmp(&self, other: &Self) -> Ordering {\n+        use FullInt::{S, U};\n+\n+        fn cmp_s_u(s: i128, u: u128) -> Ordering {\n+            u128::try_from(s).map_or(Ordering::Less, |x| x.cmp(&u))\n+        }\n+\n+        match (*self, *other) {\n+            (S(s), S(o)) => s.cmp(&o),\n+            (U(s), U(o)) => s.cmp(&o),\n+            (S(s), U(o)) => cmp_s_u(s, o),\n+            (U(s), S(o)) => cmp_s_u(o, s).reverse(),\n+        }\n+    }\n+}\n+\n /// Creates a `ConstEvalLateContext` from the given `LateContext` and `TypeckResults`.\n pub fn constant_context<'a, 'tcx>(\n     lcx: &'a LateContext<'tcx>,"}, {"sha": "d47b002ad7aca95a94336ac60e6b6f511913d3b4", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -72,7 +72,7 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n /// 6  |     let other_f64_nan = 0.0f64 / 0.0;\n ///    |                         ^^^^^^^^^^^^\n ///    |\n-///    = help: Consider using `f64::NAN` if you would like a constant representing NaN\n+///    = help: consider using `f64::NAN` if you would like a constant representing NaN\n /// ```\n pub fn span_lint_and_help<'a, T: LintContext>(\n     cx: &'a T,"}, {"sha": "b3a9a1de2ec93daa57b44eace9a0d66d1781f6d3", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,14 +1,14 @@\n-//! This module contains functions that retrieves specifiec elements.\n+//! This module contains functions that retrieve specific elements.\n \n #![deny(clippy::missing_docs_in_private_items)]\n \n use crate::ty::is_type_diagnostic_item;\n-use crate::{is_expn_of, last_path_segment, match_def_path, paths};\n+use crate::{is_expn_of, last_path_segment, match_def_path, path_to_local_id, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::{self, LitKind};\n use rustc_hir as hir;\n use rustc_hir::{\n-    Arm, Block, BorrowKind, Expr, ExprKind, HirId, LoopSource, MatchSource, Node, Pat, QPath, StmtKind, UnOp,\n+    Arm, Block, BorrowKind, Expr, ExprKind, HirId, LoopSource, MatchSource, Node, Pat, PatKind, QPath, StmtKind, UnOp,\n };\n use rustc_lint::LateContext;\n use rustc_span::{sym, symbol, ExpnKind, Span, Symbol};\n@@ -513,6 +513,8 @@ pub struct FormatArgsExpn<'tcx> {\n     pub format_string_parts: &'tcx [Expr<'tcx>],\n     /// Symbols corresponding to [`Self::format_string_parts`]\n     pub format_string_symbols: Vec<Symbol>,\n+    /// Match arm patterns, the `arg0`, etc. from the next field `args`\n+    pub arg_names: &'tcx [Pat<'tcx>],\n     /// Expressions like `ArgumentV1::new(arg0, Debug::fmt)`\n     pub args: &'tcx [Expr<'tcx>],\n     /// The final argument passed to `Arguments::new_v1_formatted`, if applicable\n@@ -557,13 +559,15 @@ impl FormatArgsExpn<'tcx> {\n                     _ => None,\n                 })\n                 .collect();\n+            if let PatKind::Tuple(arg_names, None) = arm.pat.kind;\n             if let ExprKind::Array(args) = arm.body.kind;\n             then {\n                 Some(FormatArgsExpn {\n                     format_string_span: strs_ref.span,\n                     value_args,\n                     format_string_parts,\n                     format_string_symbols,\n+                    arg_names,\n                     args,\n                     fmt_expr,\n                 })\n@@ -587,9 +591,15 @@ impl FormatArgsExpn<'tcx> {\n                             if let Some(position_field) = fields.iter().find(|f| f.ident.name == sym::position);\n                             if let ExprKind::Lit(lit) = &position_field.expr.kind;\n                             if let LitKind::Int(position, _) = lit.node;\n+                            if let Ok(i) = usize::try_from(position);\n+                            let arg = &self.args[i];\n+                            if let ExprKind::Call(_, [arg_name, _]) = arg.kind;\n+                            if let Some(j) = self\n+                                .arg_names\n+                                .iter()\n+                                .position(|pat| path_to_local_id(arg_name, pat.hir_id));\n                             then {\n-                                let i = usize::try_from(position).unwrap();\n-                                Some(FormatArgsArg { value: self.value_args[i], arg: &self.args[i], fmt: Some(fmt) })\n+                                Some(FormatArgsArg { value: self.value_args[j], arg, fmt: Some(fmt) })\n                             } else {\n                                 None\n                             }\n@@ -718,9 +728,7 @@ impl PanicExpn<'tcx> {\n     /// Parses an expanded `panic!` invocation\n     pub fn parse(expr: &'tcx Expr<'tcx>) -> Option<Self> {\n         if_chain! {\n-            if let ExprKind::Block(block, _) = expr.kind;\n-            if let Some(init) = block.expr;\n-            if let ExprKind::Call(_, [format_args]) = init.kind;\n+            if let ExprKind::Call(_, [format_args]) = expr.kind;\n             let expn_data = expr.span.ctxt().outer_expn_data();\n             if let Some(format_args) = FormatArgsExpn::parse(format_args);\n             then {\n@@ -770,13 +778,13 @@ pub fn get_vec_init_kind<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -\n                     }\n                     return Some(VecInitKind::WithExprCapacity(arg.hir_id));\n                 }\n-            }\n+            },\n             ExprKind::Path(QPath::Resolved(_, path))\n                 if match_def_path(cx, path.res.opt_def_id()?, &paths::DEFAULT_TRAIT_METHOD)\n                     && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::Vec) =>\n             {\n                 return Some(VecInitKind::Default);\n-            }\n+            },\n             _ => (),\n         }\n     }"}, {"sha": "086fbc9d3ddddcfba357846e45e897f806118814", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -37,7 +37,6 @@ pub mod sym_helper;\n #[allow(clippy::module_name_repetitions)]\n pub mod ast_utils;\n pub mod attrs;\n-pub mod camel_case;\n pub mod comparisons;\n pub mod consts;\n pub mod diagnostics;\n@@ -50,6 +49,7 @@ pub mod paths;\n pub mod ptr;\n pub mod qualify_min_const_fn;\n pub mod source;\n+pub mod str_utils;\n pub mod sugg;\n pub mod ty;\n pub mod usage;\n@@ -712,7 +712,7 @@ pub fn is_default_equivalent(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n /// Checks if the top level expression can be moved into a closure as is.\n /// Currently checks for:\n /// * Break/Continue outside the given loop HIR ids.\n-/// * Yield/Return statments.\n+/// * Yield/Return statements.\n /// * Inline assembly.\n /// * Usages of a field of a local where the type of the local can be partially moved.\n ///\n@@ -844,10 +844,13 @@ pub fn capture_local_usage(cx: &LateContext<'tcx>, e: &Expr<'_>) -> CaptureKind\n     let mut capture_expr_ty = e;\n \n     for (parent_id, parent) in cx.tcx.hir().parent_iter(e.hir_id) {\n-        if let [Adjustment {\n-            kind: Adjust::Deref(_) | Adjust::Borrow(AutoBorrow::Ref(..)),\n-            target,\n-        }, ref adjust @ ..] = *cx\n+        if let [\n+            Adjustment {\n+                kind: Adjust::Deref(_) | Adjust::Borrow(AutoBorrow::Ref(..)),\n+                target,\n+            },\n+            ref adjust @ ..,\n+        ] = *cx\n             .typeck_results()\n             .adjustments()\n             .get(child_id)\n@@ -1232,9 +1235,7 @@ pub fn get_enclosing_loop_or_closure(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Opti\n     for (_, node) in tcx.hir().parent_iter(expr.hir_id) {\n         match node {\n             Node::Expr(\n-                e\n-                @\n-                Expr {\n+                e @ Expr {\n                     kind: ExprKind::Loop(..) | ExprKind::Closure(..),\n                     ..\n                 },\n@@ -1692,10 +1693,12 @@ pub fn is_async_fn(kind: FnKind<'_>) -> bool {\n pub fn get_async_fn_body(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'tcx Expr<'tcx>> {\n     if let ExprKind::Call(\n         _,\n-        &[Expr {\n-            kind: ExprKind::Closure(_, _, body, _, _),\n-            ..\n-        }],\n+        &[\n+            Expr {\n+                kind: ExprKind::Closure(_, _, body, _, _),\n+                ..\n+            },\n+        ],\n     ) = body.value.kind\n     {\n         if let ExprKind::Block(\n@@ -2123,7 +2126,7 @@ pub fn is_in_test_function(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n     vis.found\n }\n \n-/// Checks whether item either has `test` attribute appelied, or\n+/// Checks whether item either has `test` attribute applied, or\n /// is a module with `test` in its name.\n ///\n /// Note: If you use this function, please add a `#[test]` case in `tests/ui_test`."}, {"sha": "cba96e05a2412244e6c36cd78d52b181c985cc8b", "filename": "clippy_utils/src/str_utils.rs", "status": "added", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_utils%2Fsrc%2Fstr_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/clippy_utils%2Fsrc%2Fstr_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fstr_utils.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,230 @@\n+/// Dealing with sting indices can be hard, this struct ensures that both the\n+/// character and byte index are provided for correct indexing.\n+#[derive(Debug, Default, PartialEq, Eq)]\n+pub struct StrIndex {\n+    pub char_index: usize,\n+    pub byte_index: usize,\n+}\n+\n+impl StrIndex {\n+    pub fn new(char_index: usize, byte_index: usize) -> Self {\n+        Self { char_index, byte_index }\n+    }\n+}\n+\n+/// Returns the index of the character after the first camel-case component of `s`.\n+///\n+/// ```\n+/// assert_eq!(camel_case_until(\"AbcDef\"), StrIndex::new(6, 6));\n+/// assert_eq!(camel_case_until(\"ABCD\"), StrIndex::new(0, 0));\n+/// assert_eq!(camel_case_until(\"AbcDD\"), StrIndex::new(3, 3));\n+/// assert_eq!(camel_case_until(\"Abc\\u{f6}\\u{f6}DD\"), StrIndex::new(5, 7));\n+/// ```\n+#[must_use]\n+pub fn camel_case_until(s: &str) -> StrIndex {\n+    let mut iter = s.char_indices().enumerate();\n+    if let Some((_char_index, (_, first))) = iter.next() {\n+        if !first.is_uppercase() {\n+            return StrIndex::new(0, 0);\n+        }\n+    } else {\n+        return StrIndex::new(0, 0);\n+    }\n+    let mut up = true;\n+    let mut last_index = StrIndex::new(0, 0);\n+    for (char_index, (byte_index, c)) in iter {\n+        if up {\n+            if c.is_lowercase() {\n+                up = false;\n+            } else {\n+                return last_index;\n+            }\n+        } else if c.is_uppercase() {\n+            up = true;\n+            last_index.byte_index = byte_index;\n+            last_index.char_index = char_index;\n+        } else if !c.is_lowercase() {\n+            return StrIndex::new(char_index, byte_index);\n+        }\n+    }\n+\n+    if up {\n+        last_index\n+    } else {\n+        StrIndex::new(s.chars().count(), s.len())\n+    }\n+}\n+\n+/// Returns index of the last camel-case component of `s`.\n+///\n+/// ```\n+/// assert_eq!(camel_case_start(\"AbcDef\"), StrIndex::new(0, 0));\n+/// assert_eq!(camel_case_start(\"abcDef\"), StrIndex::new(3, 3));\n+/// assert_eq!(camel_case_start(\"ABCD\"), StrIndex::new(4, 4));\n+/// assert_eq!(camel_case_start(\"abcd\"), StrIndex::new(4, 4));\n+/// assert_eq!(camel_case_start(\"\\u{f6}\\u{f6}cd\"), StrIndex::new(4, 6));\n+/// ```\n+#[must_use]\n+pub fn camel_case_start(s: &str) -> StrIndex {\n+    let char_count = s.chars().count();\n+    let range = 0..char_count;\n+    let mut iter = range.rev().zip(s.char_indices().rev());\n+    if let Some((char_index, (_, first))) = iter.next() {\n+        if !first.is_lowercase() {\n+            return StrIndex::new(char_index, s.len());\n+        }\n+    } else {\n+        return StrIndex::new(char_count, s.len());\n+    }\n+    let mut down = true;\n+    let mut last_index = StrIndex::new(char_count, s.len());\n+    for (char_index, (byte_index, c)) in iter {\n+        if down {\n+            if c.is_uppercase() {\n+                down = false;\n+                last_index.byte_index = byte_index;\n+                last_index.char_index = char_index;\n+            } else if !c.is_lowercase() {\n+                return last_index;\n+            }\n+        } else if c.is_lowercase() {\n+            down = true;\n+        } else if c.is_uppercase() {\n+            last_index.byte_index = byte_index;\n+            last_index.char_index = char_index;\n+        } else {\n+            return last_index;\n+        }\n+    }\n+    last_index\n+}\n+\n+/// Dealing with sting comparison can be complicated, this struct ensures that both the\n+/// character and byte count are provided for correct indexing.\n+#[derive(Debug, Default, PartialEq, Eq)]\n+pub struct StrCount {\n+    pub char_count: usize,\n+    pub byte_count: usize,\n+}\n+\n+impl StrCount {\n+    pub fn new(char_count: usize, byte_count: usize) -> Self {\n+        Self { char_count, byte_count }\n+    }\n+}\n+\n+/// Returns the number of chars that match from the start\n+///\n+/// ```\n+/// assert_eq!(count_match_start(\"hello_mouse\", \"hello_penguin\"), StrCount::new(6, 6));\n+/// assert_eq!(count_match_start(\"hello_clippy\", \"bye_bugs\"), StrCount::new(0, 0));\n+/// assert_eq!(count_match_start(\"hello_world\", \"hello_world\"), StrCount::new(11, 11));\n+/// assert_eq!(count_match_start(\"T\\u{f6}ffT\\u{f6}ff\", \"T\\u{f6}ff\"), StrCount::new(4, 5));\n+/// ```\n+#[must_use]\n+pub fn count_match_start(str1: &str, str2: &str) -> StrCount {\n+    // (char_index, char1)\n+    let char_count = str1.chars().count();\n+    let iter1 = (0..=char_count).zip(str1.chars());\n+    // (byte_index, char2)\n+    let iter2 = str2.char_indices();\n+\n+    iter1\n+        .zip(iter2)\n+        .take_while(|((_, c1), (_, c2))| c1 == c2)\n+        .last()\n+        .map_or_else(StrCount::default, |((char_index, _), (byte_index, character))| {\n+            StrCount::new(char_index + 1, byte_index + character.len_utf8())\n+        })\n+}\n+\n+/// Returns the number of chars and bytes that match from the end\n+///\n+/// ```\n+/// assert_eq!(count_match_end(\"hello_cat\", \"bye_cat\"), StrCount::new(4, 4));\n+/// assert_eq!(count_match_end(\"if_item_thing\", \"enum_value\"), StrCount::new(0, 0));\n+/// assert_eq!(count_match_end(\"Clippy\", \"Clippy\"), StrCount::new(6, 6));\n+/// assert_eq!(count_match_end(\"MyT\\u{f6}ff\", \"YourT\\u{f6}ff\"), StrCount::new(4, 5));\n+/// ```\n+#[must_use]\n+pub fn count_match_end(str1: &str, str2: &str) -> StrCount {\n+    let char_count = str1.chars().count();\n+    if char_count == 0 {\n+        return StrCount::default();\n+    }\n+\n+    // (char_index, char1)\n+    let iter1 = (0..char_count).rev().zip(str1.chars().rev());\n+    // (byte_index, char2)\n+    let byte_count = str2.len();\n+    let iter2 = str2.char_indices().rev();\n+\n+    iter1\n+        .zip(iter2)\n+        .take_while(|((_, c1), (_, c2))| c1 == c2)\n+        .last()\n+        .map_or_else(StrCount::default, |((char_index, _), (byte_index, _))| {\n+            StrCount::new(char_count - char_index, byte_count - byte_index)\n+        })\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+\n+    #[test]\n+    fn camel_case_start_full() {\n+        assert_eq!(camel_case_start(\"AbcDef\"), StrIndex::new(0, 0));\n+        assert_eq!(camel_case_start(\"Abc\"), StrIndex::new(0, 0));\n+        assert_eq!(camel_case_start(\"ABcd\"), StrIndex::new(0, 0));\n+        assert_eq!(camel_case_start(\"ABcdEf\"), StrIndex::new(0, 0));\n+        assert_eq!(camel_case_start(\"AabABcd\"), StrIndex::new(0, 0));\n+    }\n+\n+    #[test]\n+    fn camel_case_start_partial() {\n+        assert_eq!(camel_case_start(\"abcDef\"), StrIndex::new(3, 3));\n+        assert_eq!(camel_case_start(\"aDbc\"), StrIndex::new(1, 1));\n+        assert_eq!(camel_case_start(\"aabABcd\"), StrIndex::new(3, 3));\n+        assert_eq!(camel_case_start(\"\\u{f6}\\u{f6}AabABcd\"), StrIndex::new(2, 4));\n+    }\n+\n+    #[test]\n+    fn camel_case_start_not() {\n+        assert_eq!(camel_case_start(\"AbcDef_\"), StrIndex::new(7, 7));\n+        assert_eq!(camel_case_start(\"AbcDD\"), StrIndex::new(5, 5));\n+        assert_eq!(camel_case_start(\"all_small\"), StrIndex::new(9, 9));\n+        assert_eq!(camel_case_start(\"\\u{f6}_all_small\"), StrIndex::new(11, 12));\n+    }\n+\n+    #[test]\n+    fn camel_case_start_caps() {\n+        assert_eq!(camel_case_start(\"ABCD\"), StrIndex::new(4, 4));\n+    }\n+\n+    #[test]\n+    fn camel_case_until_full() {\n+        assert_eq!(camel_case_until(\"AbcDef\"), StrIndex::new(6, 6));\n+        assert_eq!(camel_case_until(\"Abc\"), StrIndex::new(3, 3));\n+        assert_eq!(camel_case_until(\"Abc\\u{f6}\\u{f6}\\u{f6}\"), StrIndex::new(6, 9));\n+    }\n+\n+    #[test]\n+    fn camel_case_until_not() {\n+        assert_eq!(camel_case_until(\"abcDef\"), StrIndex::new(0, 0));\n+        assert_eq!(camel_case_until(\"aDbc\"), StrIndex::new(0, 0));\n+    }\n+\n+    #[test]\n+    fn camel_case_until_partial() {\n+        assert_eq!(camel_case_until(\"AbcDef_\"), StrIndex::new(6, 6));\n+        assert_eq!(camel_case_until(\"CallTypeC\"), StrIndex::new(8, 8));\n+        assert_eq!(camel_case_until(\"AbcDD\"), StrIndex::new(3, 3));\n+        assert_eq!(camel_case_until(\"Abc\\u{f6}\\u{f6}DD\"), StrIndex::new(5, 7));\n+    }\n+\n+    #[test]\n+    fn until_caps() {\n+        assert_eq!(camel_case_until(\"ABCD\"), StrIndex::new(0, 0));\n+    }\n+}"}, {"sha": "bd32696d6dbda7d15b4b6975a6195f673d2f76c7", "filename": "doc/adding_lints.md", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -16,6 +16,7 @@ because that's clearly a non-descriptive name.\n   - [Edition 2018 tests](#edition-2018-tests)\n   - [Testing manually](#testing-manually)\n   - [Lint declaration](#lint-declaration)\n+  - [Lint registration](#lint-registration)\n   - [Lint passes](#lint-passes)\n   - [Emitting a lint](#emitting-a-lint)\n   - [Adding the lint logic](#adding-the-lint-logic)\n@@ -43,9 +44,9 @@ take a look at our [lint naming guidelines][lint_naming]. To get started on this\n lint you can run `cargo dev new_lint --name=foo_functions --pass=early\n --category=pedantic` (category will default to nursery if not provided). This\n command will create two files: `tests/ui/foo_functions.rs` and\n-`clippy_lints/src/foo_functions.rs`, as well as run `cargo dev update_lints` to\n-register the new lint. For cargo lints, two project hierarchies (fail/pass) will\n-be created by default under `tests/ui-cargo`.\n+`clippy_lints/src/foo_functions.rs`, as well as\n+[registering the lint](#lint-registration). For cargo lints, two project\n+hierarchies (fail/pass) will be created by default under `tests/ui-cargo`.\n \n Next, we'll open up these files and add our lint!\n \n@@ -220,32 +221,34 @@ declare_lint_pass!(FooFunctions => [FOO_FUNCTIONS]);\n impl EarlyLintPass for FooFunctions {}\n ```\n \n-Normally after declaring the lint, we have to run `cargo dev update_lints`,\n-which updates some files, so Clippy knows about the new lint. Since we used\n-`cargo dev new_lint ...` to generate the lint declaration, this was done\n-automatically. While `update_lints` automates most of the things, it doesn't\n-automate everything. We will have to register our lint pass manually in the\n-`register_plugins` function in `clippy_lints/src/lib.rs`:\n+[declare_clippy_lint]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/lib.rs#L60\n+[example_lint_page]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n+[lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n+[category_level_mapping]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/lib.rs#L110\n+\n+## Lint registration\n+\n+When using `cargo dev new_lint`, the lint is automatically registered and\n+nothing more has to be done.\n+\n+When declaring a new lint by hand and `cargo dev update_lints` is used, the lint\n+pass may have to be registered manually in the `register_plugins` function in\n+`clippy_lints/src/lib.rs`:\n \n ```rust\n-store.register_early_pass(|| box foo_functions::FooFunctions);\n+store.register_early_pass(|| Box::new(foo_functions::FooFunctions));\n ```\n \n As one may expect, there is a corresponding `register_late_pass` method\n available as well. Without a call to one of `register_early_pass` or\n `register_late_pass`, the lint pass in question will not be run.\n \n-One reason that `cargo dev` does not automate this step is that multiple lints\n-can use the same lint pass, so registering the lint pass may already be done\n-when adding a new lint. Another reason that this step is not automated is that\n-the order that the passes are registered determines the order the passes\n-actually run, which in turn affects the order that any emitted lints are output\n-in.\n-\n-[declare_clippy_lint]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/lib.rs#L60\n-[example_lint_page]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n-[lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n-[category_level_mapping]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/lib.rs#L110\n+One reason that `cargo dev update_lints` does not automate this step is that\n+multiple lints can use the same lint pass, so registering the lint pass may\n+already be done when adding a new lint. Another reason that this step is not\n+automated is that the order that the passes are registered determines the order\n+the passes actually run, which in turn affects the order that any emitted lints\n+are output in.\n \n ## Lint passes\n \n@@ -564,7 +567,8 @@ in the following steps:\n     /// <The configuration field doc comment>\n     (configuration_ident: Type = DefaultValue),\n     ```\n-    The doc comment will be automatically added to the lint documentation.\n+    The doc comment is automatically added to the documentation of the listed lints. The default\n+    value will be formatted using the `Debug` implementation of the type.\n 2. Adding the configuration value to the lint impl struct:\n     1. This first requires the definition of a lint impl struct. Lint impl structs are usually\n         generated with the `declare_lint_pass!` macro. This struct needs to be defined manually"}, {"sha": "09554c08987b1ae66902243826bcfec6b063c91f", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-10-21\"\n+channel = \"nightly-2021-11-04\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "f25cf1d3ef56185243762a4f3296f4f7ca2eca98", "filename": "tests/compile-test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -104,7 +104,10 @@ fn extern_flags() -> String {\n }\n \n fn default_config() -> compiletest::Config {\n-    let mut config = compiletest::Config::default();\n+    let mut config = compiletest::Config {\n+        edition: Some(\"2021\".into()),\n+        ..compiletest::Config::default()\n+    };\n \n     if let Ok(filters) = env::var(\"TESTNAME\") {\n         config.filters = filters.split(',').map(std::string::ToString::to_string).collect();"}, {"sha": "7d6edc2b1e095fb1cb59e81cca7b28bba7f44497", "filename": "tests/missing-test-files.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fmissing-test-files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fmissing-test-files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmissing-test-files.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,7 +1,10 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]\n #![allow(clippy::assertions_on_constants)]\n+#![feature(path_file_prefix)]\n \n+use std::cmp::Ordering;\n+use std::ffi::OsStr;\n use std::fs::{self, DirEntry};\n use std::path::Path;\n \n@@ -21,29 +24,39 @@ fn test_missing_tests() {\n     }\n }\n \n-/*\n-Test for missing files.\n-\n-Since rs files are alphabetically before stderr/stdout, we can sort by the full name\n-and iter in that order. If we've seen the file stem for the first time and it's not\n-a rust file, it means the rust file has to be missing.\n-*/\n+// Test for missing files.\n fn explore_directory(dir: &Path) -> Vec<String> {\n     let mut missing_files: Vec<String> = Vec::new();\n     let mut current_file = String::new();\n     let mut files: Vec<DirEntry> = fs::read_dir(dir).unwrap().filter_map(Result::ok).collect();\n-    files.sort_by_key(std::fs::DirEntry::path);\n+    files.sort_by(|x, y| {\n+        match x.path().file_prefix().cmp(&y.path().file_prefix()) {\n+            Ordering::Equal => (),\n+            ord => return ord,\n+        }\n+        // Sort rs files before the others if they share the same prefix. So when we see\n+        // the file prefix for the first time and it's not a rust file, it means the rust\n+        // file has to be missing.\n+        match (\n+            x.path().extension().and_then(OsStr::to_str),\n+            y.path().extension().and_then(OsStr::to_str),\n+        ) {\n+            (Some(\"rs\"), _) => Ordering::Less,\n+            (_, Some(\"rs\")) => Ordering::Greater,\n+            _ => Ordering::Equal,\n+        }\n+    });\n     for entry in &files {\n         let path = entry.path();\n         if path.is_dir() {\n             missing_files.extend(explore_directory(&path));\n         } else {\n-            let file_stem = path.file_stem().unwrap().to_str().unwrap().to_string();\n+            let file_prefix = path.file_prefix().unwrap().to_str().unwrap().to_string();\n             if let Some(ext) = path.extension() {\n                 match ext.to_str().unwrap() {\n-                    \"rs\" => current_file = file_stem.clone(),\n+                    \"rs\" => current_file = file_prefix.clone(),\n                     \"stderr\" | \"stdout\" => {\n-                        if file_stem != current_file {\n+                        if file_prefix != current_file {\n                             missing_files.push(path.to_str().unwrap().to_string());\n                         }\n                     },"}, {"sha": "e678c896fd3e3b3dc8e7bcba92fb5b641a6f8797", "filename": "tests/ui-toml/functions_maxlines/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,3 @@\n-// edition:2018\n-\n #![warn(clippy::too_many_lines)]\n \n // This function should be considered one line."}, {"sha": "d736bf899735a5cfb5ed02eef151b4c20cbd635f", "filename": "tests/ui-toml/functions_maxlines/test.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: this function has too many lines (2/1)\n-  --> $DIR/test.rs:20:1\n+  --> $DIR/test.rs:18:1\n    |\n LL | / fn too_many_lines() {\n LL | |     println!(\"This is bad.\");\n@@ -10,7 +10,7 @@ LL | | }\n    = note: `-D clippy::too-many-lines` implied by `-D warnings`\n \n error: this function has too many lines (4/1)\n-  --> $DIR/test.rs:26:1\n+  --> $DIR/test.rs:24:1\n    |\n LL | / async fn async_too_many_lines() {\n LL | |     println!(\"This is bad.\");\n@@ -19,7 +19,7 @@ LL | | }\n    | |_^\n \n error: this function has too many lines (4/1)\n-  --> $DIR/test.rs:32:1\n+  --> $DIR/test.rs:30:1\n    |\n LL | / fn closure_too_many_lines() {\n LL | |     let _ = {\n@@ -30,7 +30,7 @@ LL | | }\n    | |_^\n \n error: this function has too many lines (2/1)\n-  --> $DIR/test.rs:54:1\n+  --> $DIR/test.rs:52:1\n    |\n LL | / fn comment_before_code() {\n LL | |     let _ = \"test\";"}, {"sha": "cb516d0f97783fee0b7b4a71c3cc9336a5072c64", "filename": "tests/ui/assertions_on_constants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,3 +1,4 @@\n+//FIXME: suggestions are wrongly expanded, this should be fixed along with #7843\n #![allow(non_fmt_panics)]\n \n macro_rules! assert_const {\n@@ -6,15 +7,14 @@ macro_rules! assert_const {\n         debug_assert!($len < 0);\n     };\n }\n-\n fn main() {\n     assert!(true);\n     assert!(false);\n     assert!(true, \"true message\");\n     assert!(false, \"false message\");\n \n     let msg = \"panic message\";\n-    assert!(false, msg.to_uppercase());\n+    assert!(false, \"{}\", msg.to_uppercase());\n \n     const B: bool = true;\n     assert!(B);"}, {"sha": "ec80ec702fb574ad4cf6380b9e7b2179230a8c84", "filename": "tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -26,22 +26,13 @@ LL |     assert!(true, \"true message\");\n    = help: remove it\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: `assert!(false, \"false message\")` should probably be replaced\n+error: `assert!(false, $crate::const_format_args!($($t)+))` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:14:5\n    |\n LL |     assert!(false, \"false message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: use `panic!(\"false message\")` or `unreachable!(\"false message\")`\n-   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: `assert!(false, msg.to_uppercase())` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:17:5\n-   |\n-LL |     assert!(false, msg.to_uppercase());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use `panic!(msg.to_uppercase())` or `unreachable!(msg.to_uppercase())`\n+   = help: use `panic!($crate::const_format_args!($($t)+))` or `unreachable!($crate::const_format_args!($($t)+))`\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(true)` will be optimized out by the compiler\n@@ -62,13 +53,13 @@ LL |     assert!(C);\n    = help: use `panic!()` or `unreachable!()`\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: `assert!(false, \"C message\")` should probably be replaced\n+error: `assert!(false, $crate::const_format_args!($($t)+))` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:24:5\n    |\n LL |     assert!(C, \"C message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: use `panic!(\"C message\")` or `unreachable!(\"C message\")`\n+   = help: use `panic!($crate::const_format_args!($($t)+))` or `unreachable!($crate::const_format_args!($($t)+))`\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `debug_assert!(true)` will be optimized out by the compiler\n@@ -80,5 +71,5 @@ LL |     debug_assert!(true);\n    = help: remove it\n    = note: this error originates in the macro `$crate::assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "e20b58269b93e60485b68b74618b3bc4a6fe77d3", "filename": "tests/ui/async_yields_async.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fasync_yields_async.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fasync_yields_async.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// edition:2018\n \n #![feature(async_closure)]\n #![warn(clippy::async_yields_async)]"}, {"sha": "c1dfa398450250f6d67a6d1290e34c139865d8e1", "filename": "tests/ui/async_yields_async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// edition:2018\n \n #![feature(async_closure)]\n #![warn(clippy::async_yields_async)]"}, {"sha": "b0c4215e7ddf1be1c4bbcaeb031e3896096f9386", "filename": "tests/ui/async_yields_async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fasync_yields_async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fasync_yields_async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:40:9\n+  --> $DIR/async_yields_async.rs:39:9\n    |\n LL |        let _h = async {\n    |   ____________________-\n@@ -20,7 +20,7 @@ LL +         }.await\n    |\n \n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:45:9\n+  --> $DIR/async_yields_async.rs:44:9\n    |\n LL |       let _i = async {\n    |  ____________________-\n@@ -33,7 +33,7 @@ LL | |     };\n    | |_____- outer async construct\n \n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:51:9\n+  --> $DIR/async_yields_async.rs:50:9\n    |\n LL |        let _j = async || {\n    |   _______________________-\n@@ -53,7 +53,7 @@ LL +         }.await\n    |\n \n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:56:9\n+  --> $DIR/async_yields_async.rs:55:9\n    |\n LL |       let _k = async || {\n    |  _______________________-\n@@ -66,7 +66,7 @@ LL | |     };\n    | |_____- outer async construct\n \n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:58:23\n+  --> $DIR/async_yields_async.rs:57:23\n    |\n LL |     let _l = async || CustomFutureType;\n    |                       ^^^^^^^^^^^^^^^^\n@@ -76,7 +76,7 @@ LL |     let _l = async || CustomFutureType;\n    |                       help: consider awaiting this value: `CustomFutureType.await`\n \n error: an async construct yields a type which is itself awaitable\n-  --> $DIR/async_yields_async.rs:64:9\n+  --> $DIR/async_yields_async.rs:63:9\n    |\n LL |       let _m = async || {\n    |  _______________________-"}, {"sha": "dd6640a387a23877548f96c8b6a40185b27c7cfd", "filename": "tests/ui/await_holding_lock.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fawait_holding_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fawait_holding_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fawait_holding_lock.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n #![warn(clippy::await_holding_lock)]\n \n use std::sync::Mutex;"}, {"sha": "ddfb104cdfbd07ab1207f133e075182b3d409d0e", "filename": "tests/ui/await_holding_lock.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fawait_holding_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fawait_holding_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fawait_holding_lock.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,26 +1,26 @@\n error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await\n-  --> $DIR/await_holding_lock.rs:7:9\n+  --> $DIR/await_holding_lock.rs:6:9\n    |\n LL |     let guard = x.lock().unwrap();\n    |         ^^^^^\n    |\n    = note: `-D clippy::await-holding-lock` implied by `-D warnings`\n note: these are all the await points this lock is held through\n-  --> $DIR/await_holding_lock.rs:7:5\n+  --> $DIR/await_holding_lock.rs:6:5\n    |\n LL | /     let guard = x.lock().unwrap();\n LL | |     baz().await\n LL | | }\n    | |_^\n \n error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await\n-  --> $DIR/await_holding_lock.rs:28:9\n+  --> $DIR/await_holding_lock.rs:27:9\n    |\n LL |     let guard = x.lock().unwrap();\n    |         ^^^^^\n    |\n note: these are all the await points this lock is held through\n-  --> $DIR/await_holding_lock.rs:28:5\n+  --> $DIR/await_holding_lock.rs:27:5\n    |\n LL | /     let guard = x.lock().unwrap();\n LL | |\n@@ -32,27 +32,27 @@ LL | | }\n    | |_^\n \n error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await\n-  --> $DIR/await_holding_lock.rs:41:13\n+  --> $DIR/await_holding_lock.rs:40:13\n    |\n LL |         let guard = x.lock().unwrap();\n    |             ^^^^^\n    |\n note: these are all the await points this lock is held through\n-  --> $DIR/await_holding_lock.rs:41:9\n+  --> $DIR/await_holding_lock.rs:40:9\n    |\n LL | /         let guard = x.lock().unwrap();\n LL | |         baz().await\n LL | |     };\n    | |_____^\n \n error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await\n-  --> $DIR/await_holding_lock.rs:53:13\n+  --> $DIR/await_holding_lock.rs:52:13\n    |\n LL |         let guard = x.lock().unwrap();\n    |             ^^^^^\n    |\n note: these are all the await points this lock is held through\n-  --> $DIR/await_holding_lock.rs:53:9\n+  --> $DIR/await_holding_lock.rs:52:9\n    |\n LL | /         let guard = x.lock().unwrap();\n LL | |         baz().await"}, {"sha": "23b7095de3a39ae31a36bbc37a7b625c38bec5b3", "filename": "tests/ui/await_holding_refcell_ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fawait_holding_refcell_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fawait_holding_refcell_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fawait_holding_refcell_ref.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n #![warn(clippy::await_holding_refcell_ref)]\n \n use std::cell::RefCell;"}, {"sha": "67cc0032be2f46742725351dd9beca969d458b4e", "filename": "tests/ui/await_holding_refcell_ref.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fawait_holding_refcell_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fawait_holding_refcell_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fawait_holding_refcell_ref.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,40 +1,40 @@\n error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await\n-  --> $DIR/await_holding_refcell_ref.rs:7:9\n+  --> $DIR/await_holding_refcell_ref.rs:6:9\n    |\n LL |     let b = x.borrow();\n    |         ^\n    |\n    = note: `-D clippy::await-holding-refcell-ref` implied by `-D warnings`\n note: these are all the await points this ref is held through\n-  --> $DIR/await_holding_refcell_ref.rs:7:5\n+  --> $DIR/await_holding_refcell_ref.rs:6:5\n    |\n LL | /     let b = x.borrow();\n LL | |     baz().await\n LL | | }\n    | |_^\n \n error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await\n-  --> $DIR/await_holding_refcell_ref.rs:12:9\n+  --> $DIR/await_holding_refcell_ref.rs:11:9\n    |\n LL |     let b = x.borrow_mut();\n    |         ^\n    |\n note: these are all the await points this ref is held through\n-  --> $DIR/await_holding_refcell_ref.rs:12:5\n+  --> $DIR/await_holding_refcell_ref.rs:11:5\n    |\n LL | /     let b = x.borrow_mut();\n LL | |     baz().await\n LL | | }\n    | |_^\n \n error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await\n-  --> $DIR/await_holding_refcell_ref.rs:33:9\n+  --> $DIR/await_holding_refcell_ref.rs:32:9\n    |\n LL |     let b = x.borrow_mut();\n    |         ^\n    |\n note: these are all the await points this ref is held through\n-  --> $DIR/await_holding_refcell_ref.rs:33:5\n+  --> $DIR/await_holding_refcell_ref.rs:32:5\n    |\n LL | /     let b = x.borrow_mut();\n LL | |\n@@ -46,13 +46,13 @@ LL | | }\n    | |_^\n \n error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await\n-  --> $DIR/await_holding_refcell_ref.rs:45:9\n+  --> $DIR/await_holding_refcell_ref.rs:44:9\n    |\n LL |     let b = x.borrow_mut();\n    |         ^\n    |\n note: these are all the await points this ref is held through\n-  --> $DIR/await_holding_refcell_ref.rs:45:5\n+  --> $DIR/await_holding_refcell_ref.rs:44:5\n    |\n LL | /     let b = x.borrow_mut();\n LL | |\n@@ -64,27 +64,27 @@ LL | | }\n    | |_^\n \n error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await\n-  --> $DIR/await_holding_refcell_ref.rs:60:13\n+  --> $DIR/await_holding_refcell_ref.rs:59:13\n    |\n LL |         let b = x.borrow_mut();\n    |             ^\n    |\n note: these are all the await points this ref is held through\n-  --> $DIR/await_holding_refcell_ref.rs:60:9\n+  --> $DIR/await_holding_refcell_ref.rs:59:9\n    |\n LL | /         let b = x.borrow_mut();\n LL | |         baz().await\n LL | |     };\n    | |_____^\n \n error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await\n-  --> $DIR/await_holding_refcell_ref.rs:72:13\n+  --> $DIR/await_holding_refcell_ref.rs:71:13\n    |\n LL |         let b = x.borrow_mut();\n    |             ^\n    |\n note: these are all the await points this ref is held through\n-  --> $DIR/await_holding_refcell_ref.rs:72:9\n+  --> $DIR/await_holding_refcell_ref.rs:71:9\n    |\n LL | /         let b = x.borrow_mut();\n LL | |         baz().await"}, {"sha": "ebc1ed5587fe30a9b8f6675e6ac51b79f1a9725f", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -92,4 +92,27 @@ fn main() {\n     (1i64).checked_rem_euclid(-1i64).unwrap() as u64;\n     (1i64).checked_rem_euclid(-1i64).unwrap() as u128;\n     (1isize).checked_rem_euclid(-1isize).unwrap() as usize;\n+\n+    // no lint for `cast_possible_truncation`\n+    // with `signum` method call (see issue #5395)\n+    let x: i64 = 5;\n+    let _ = x.signum() as i32;\n+\n+    let s = x.signum();\n+    let _ = s as i32;\n+\n+    // Test for signed min\n+    (-99999999999i64).min(1) as i8; // should be linted because signed\n+\n+    // Test for various operations that remove enough bits for the result to fit\n+    (999999u64 & 1) as u8;\n+    (999999u64 % 15) as u8;\n+    (999999u64 / 0x1_0000_0000_0000) as u16;\n+    ({ 999999u64 >> 56 }) as u8;\n+    ({\n+        let x = 999999u64;\n+        x.min(1)\n+    }) as u8;\n+    999999u64.clamp(0, 255) as u8;\n+    999999u64.clamp(0, 256) as u8; // should still be linted\n }"}, {"sha": "edf8790cf33d861c3978669145d5e500f2232314", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -138,5 +138,17 @@ error: casting `isize` to `usize` may lose the sign of the value\n LL |     -1isize as usize;\n    |     ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 22 previous errors\n+error: casting `i64` to `i8` may truncate the value\n+  --> $DIR/cast.rs:105:5\n+   |\n+LL |     (-99999999999i64).min(1) as i8; // should be linted because signed\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `u64` to `u8` may truncate the value\n+  --> $DIR/cast.rs:117:5\n+   |\n+LL |     999999u64.clamp(0, 256) as u8; // should still be linted\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 24 previous errors\n "}, {"sha": "bee29894b63d5161760ecb81dca245f4785c142e", "filename": "tests/ui/crashes/auxiliary/ice-7868-aux.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fauxiliary%2Fice-7868-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fauxiliary%2Fice-7868-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fauxiliary%2Fice-7868-aux.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,3 @@\n+fn zero() {\n+    unsafe { 0 };\n+}"}, {"sha": "9b68cac7ff4854abc60352d7c8cbff472604cf44", "filename": "tests/ui/crashes/ice-3969.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-3969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-3969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3969.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -7,7 +7,6 @@\n // in type inference.\n #![feature(trivial_bounds)]\n #![allow(unused)]\n-\n trait A {}\n \n impl A for i32 {}\n@@ -22,9 +21,9 @@ where\n \n fn unsized_local()\n where\n-    for<'a> Dst<A + 'a>: Sized,\n+    for<'a> Dst<dyn A + 'a>: Sized,\n {\n-    let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n+    let x: Dst<dyn A> = *(Box::new(Dst { x: 1 }) as Box<Dst<dyn A>>);\n }\n \n fn return_str() -> str"}, {"sha": "79018080886c0561d33fc88fe31890911f4ccd9f", "filename": "tests/ui/crashes/ice-3969.stderr", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-3969.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-3969.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3969.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,30 +1,34 @@\n-error: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/ice-3969.rs:25:17\n+error: trait bound str: std::marker::Sized does not depend on any type or lifetime parameters\n+  --> $DIR/ice-3969.rs:20:10\n    |\n-LL |     for<'a> Dst<A + 'a>: Sized,\n-   |                 ^^^^^^ help: use `dyn`: `dyn A + 'a`\n+LL |     str: Sized;\n+   |          ^^^^^\n    |\n-   = note: `-D bare-trait-objects` implied by `-D warnings`\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+   = note: `-D trivial-bounds` implied by `-D warnings`\n \n-error: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/ice-3969.rs:27:16\n+error: trait bound for<'a> Dst<(dyn A + 'a)>: std::marker::Sized does not depend on any type or lifetime parameters\n+  --> $DIR/ice-3969.rs:24:30\n    |\n-LL |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n-   |                ^ help: use `dyn`: `dyn A`\n+LL |     for<'a> Dst<dyn A + 'a>: Sized,\n+   |                              ^^^^^\n+\n+error: trait bound str: std::marker::Sized does not depend on any type or lifetime parameters\n+  --> $DIR/ice-3969.rs:31:10\n    |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+LL |     str: Sized,\n+   |          ^^^^^\n \n-error: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/ice-3969.rs:27:57\n+error: trait bound std::string::String: std::ops::Neg does not depend on any type or lifetime parameters\n+  --> $DIR/ice-3969.rs:38:13\n    |\n-LL |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n-   |                                                         ^ help: use `dyn`: `dyn A`\n+LL |     String: ::std::ops::Neg<Output = String>,\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: trait bound i32: std::iter::Iterator does not depend on any type or lifetime parameters\n+  --> $DIR/ice-3969.rs:45:10\n    |\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+LL |     i32: Iterator,\n+   |          ^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "f463f78a99ab738bc0117ad3391817145323c146", "filename": "tests/ui/crashes/ice-5207.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-5207.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-5207.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-5207.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,3 @@\n-// edition:2018\n-\n // Regression test for https://github.com/rust-lang/rust-clippy/issues/5207\n \n pub async fn bar<'a, T: 'a>(_: T) {}"}, {"sha": "0ccf0aae9d74298099fd483995d2d73ce76763b3", "filename": "tests/ui/crashes/ice-6252.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-6252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-6252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6252.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,6 +1,5 @@\n // originally from glacier fixed/77919.rs\n // encountered errors resolving bounds after type-checking\n-\n trait TypeVal<T> {\n     const VAL: T;\n }"}, {"sha": "c8239897f3abb5b7032d8f574aeae103599b1e71", "filename": "tests/ui/crashes/ice-6252.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,24 +1,28 @@\n error[E0412]: cannot find type `PhantomData` in this scope\n-  --> $DIR/ice-6252.rs:9:9\n+  --> $DIR/ice-6252.rs:8:9\n    |\n LL |     _n: PhantomData,\n    |         ^^^^^^^^^^^ not found in this scope\n    |\n-help: consider importing this struct\n+help: consider importing one of these items\n+   |\n+LL | use core::marker::PhantomData;\n+   |\n+LL | use serde::__private::PhantomData;\n    |\n LL | use std::marker::PhantomData;\n    |\n \n error[E0412]: cannot find type `VAL` in this scope\n-  --> $DIR/ice-6252.rs:11:63\n+  --> $DIR/ice-6252.rs:10:63\n    |\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    |          -                                                    ^^^ not found in this scope\n    |          |\n    |          help: you might be missing a type parameter: `, VAL`\n \n error[E0046]: not all trait items implemented, missing: `VAL`\n-  --> $DIR/ice-6252.rs:11:1\n+  --> $DIR/ice-6252.rs:10:1\n    |\n LL |     const VAL: T;\n    |     ------------- `VAL` from trait"}, {"sha": "4ad0d351372f7559de26a2a84d6974f0cdf3643a", "filename": "tests/ui/crashes/ice-7231.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-7231.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-7231.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7231.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n #![allow(clippy::never_loop)]\n \n async fn f() {"}, {"sha": "c6932164e3bff5bd6d5d06a26b910d4d4f01e61b", "filename": "tests/ui/crashes/ice-7868.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-7868.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-7868.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7868.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,7 @@\n+#![warn(clippy::undocumented_unsafe_blocks)]\n+#![allow(clippy::no_effect)]\n+\n+#[path = \"auxiliary/ice-7868-aux.rs\"]\n+mod zero;\n+\n+fn main() {}"}, {"sha": "d7b49eb89a28bb437d14931edb435a3f6e5ec9a8", "filename": "tests/ui/crashes/ice-7868.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-7868.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-7868.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7868.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,15 @@\n+error: unsafe block missing a safety comment\n+  --> $DIR/auxiliary/ice-7868-aux.rs:2:5\n+   |\n+LL |     unsafe { 0 };\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::undocumented-unsafe-blocks` implied by `-D warnings`\n+help: consider adding a safety comment\n+   |\n+LL ~     // Safety: ...\n+LL ~     unsafe { 0 };\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "8f97a063a9a9f1618a41ef2fdafc9e51b1030575", "filename": "tests/ui/crashes/ice-7869.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-7869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-7869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7869.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,7 @@\n+enum Tila {\n+    Ty\u00f6Alkoi,\n+    Ty\u00f6Keskeytyi,\n+    Ty\u00f6Valmis,\n+}\n+\n+fn main() {}"}, {"sha": "4fa9fb27e7659ebb0acbef1778b01d8a8696afd8", "filename": "tests/ui/crashes/ice-7869.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-7869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fice-7869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7869.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,15 @@\n+error: all variants have the same prefix: `Ty\u00f6`\n+  --> $DIR/ice-7869.rs:1:1\n+   |\n+LL | / enum Tila {\n+LL | |     Ty\u00f6Alkoi,\n+LL | |     Ty\u00f6Keskeytyi,\n+LL | |     Ty\u00f6Valmis,\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::enum-variant-names` implied by `-D warnings`\n+   = help: remove the prefixes and use full paths to the variants instead of glob imports\n+\n+error: aborting due to previous error\n+"}, {"sha": "901eb4e50398888f50747c1ba2a496703474d82e", "filename": "tests/ui/crashes/used_underscore_binding_macro.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fused_underscore_binding_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fcrashes%2Fused_underscore_binding_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fused_underscore_binding_macro.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,3 @@\n-// edition:2018\n-\n use serde::Deserialize;\n \n /// Tests that we do not lint for unused underscores in a `MacroAttribute`"}, {"sha": "c5de412556567ffe6718fc9ada4471dcb5e4cc8b", "filename": "tests/ui/debug_assert_with_mut_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdebug_assert_with_mut_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdebug_assert_with_mut_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdebug_assert_with_mut_call.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,9 +1,9 @@\n-// compile-flags: --edition=2018\n #![feature(custom_inner_attributes)]\n #![rustfmt::skip]\n #![warn(clippy::debug_assert_with_mut_call)]\n #![allow(clippy::redundant_closure_call)]\n \n+\n struct S;\n \n impl S {"}, {"sha": "39a2601fee9aca39e6d3882f27c8d1008ffce339", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,19 +1,18 @@\n-#[warn(clippy::unstable_as_slice)]\n-#[warn(clippy::unstable_as_mut_slice)]\n-#[warn(clippy::misaligned_transmute)]\n-#[warn(clippy::unused_collect)]\n-#[warn(clippy::invalid_ref)]\n-#[warn(clippy::into_iter_on_array)]\n-#[warn(clippy::unused_label)]\n-#[warn(clippy::regex_macro)]\n-#[warn(clippy::drop_bounds)]\n-#[warn(clippy::temporary_cstring_as_ptr)]\n-#[warn(clippy::panic_params)]\n-#[warn(clippy::unknown_clippy_lints)]\n-#[warn(clippy::find_map)]\n-#[warn(clippy::filter_map)]\n-#[warn(clippy::pub_enum_variant_names)]\n-#[warn(clippy::wrong_pub_self_convention)]\n-#[warn(clippy::invalid_atomic_ordering)]\n+#![warn(clippy::should_assert_eq)]\n+#![warn(clippy::extend_from_slice)]\n+#![warn(clippy::range_step_by_zero)]\n+#![warn(clippy::unstable_as_slice)]\n+#![warn(clippy::unstable_as_mut_slice)]\n+#![warn(clippy::misaligned_transmute)]\n+#![warn(clippy::assign_ops)]\n+#![warn(clippy::if_let_redundant_pattern_matching)]\n+#![warn(clippy::unsafe_vector_initialization)]\n+#![warn(clippy::unused_collect)]\n+#![warn(clippy::replace_consts)]\n+#![warn(clippy::regex_macro)]\n+#![warn(clippy::find_map)]\n+#![warn(clippy::filter_map)]\n+#![warn(clippy::pub_enum_variant_names)]\n+#![warn(clippy::wrong_pub_self_convention)]\n \n fn main() {}"}, {"sha": "6095f134d55e0d2ea7452696adfb9a047521f077", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 61, "deletions": 67, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,106 +1,100 @@\n-error: lint `clippy::unstable_as_slice` has been removed: `Vec::as_slice` has been stabilized in 1.7\n-  --> $DIR/deprecated.rs:1:8\n+error: lint `clippy::should_assert_eq` has been removed: `assert!()` will be more flexible with RFC 2011\n+  --> $DIR/deprecated.rs:1:9\n    |\n-LL | #[warn(clippy::unstable_as_slice)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(clippy::should_assert_eq)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n-error: lint `clippy::unstable_as_mut_slice` has been removed: `Vec::as_mut_slice` has been stabilized in 1.7\n-  --> $DIR/deprecated.rs:2:8\n+error: lint `clippy::extend_from_slice` has been removed: `.extend_from_slice(_)` is a faster way to extend a Vec by a slice\n+  --> $DIR/deprecated.rs:2:9\n    |\n-LL | #[warn(clippy::unstable_as_mut_slice)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(clippy::extend_from_slice)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::misaligned_transmute` has been removed: this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\n-  --> $DIR/deprecated.rs:3:8\n+error: lint `clippy::range_step_by_zero` has been removed: `iterator.step_by(0)` panics nowadays\n+  --> $DIR/deprecated.rs:3:9\n    |\n-LL | #[warn(clippy::misaligned_transmute)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(clippy::range_step_by_zero)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::unused_collect` has been removed: `collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\n-  --> $DIR/deprecated.rs:4:8\n+error: lint `clippy::unstable_as_slice` has been removed: `Vec::as_slice` has been stabilized in 1.7\n+  --> $DIR/deprecated.rs:4:9\n    |\n-LL | #[warn(clippy::unused_collect)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(clippy::unstable_as_slice)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/deprecated.rs:5:8\n+error: lint `clippy::unstable_as_mut_slice` has been removed: `Vec::as_mut_slice` has been stabilized in 1.7\n+  --> $DIR/deprecated.rs:5:9\n    |\n-LL | #[warn(clippy::invalid_ref)]\n-   |        ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n+LL | #![warn(clippy::unstable_as_mut_slice)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/deprecated.rs:6:8\n+error: lint `clippy::misaligned_transmute` has been removed: this lint has been split into cast_ptr_alignment and transmute_ptr_to_ptr\n+  --> $DIR/deprecated.rs:6:9\n    |\n-LL | #[warn(clippy::into_iter_on_array)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n+LL | #![warn(clippy::misaligned_transmute)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/deprecated.rs:7:8\n+error: lint `clippy::assign_ops` has been removed: using compound assignment operators (e.g., `+=`) is harmless\n+  --> $DIR/deprecated.rs:7:9\n    |\n-LL | #[warn(clippy::unused_label)]\n-   |        ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n+LL | #![warn(clippy::assign_ops)]\n+   |         ^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::regex_macro` has been removed: the regex! macro has been removed from the regex crate in 2018\n-  --> $DIR/deprecated.rs:8:8\n+error: lint `clippy::if_let_redundant_pattern_matching` has been removed: this lint has been changed to redundant_pattern_matching\n+  --> $DIR/deprecated.rs:8:9\n    |\n-LL | #[warn(clippy::regex_macro)]\n-   |        ^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(clippy::if_let_redundant_pattern_matching)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/deprecated.rs:9:8\n+error: lint `clippy::unsafe_vector_initialization` has been removed: the replacement suggested by this lint had substantially different behavior\n+  --> $DIR/deprecated.rs:9:9\n    |\n-LL | #[warn(clippy::drop_bounds)]\n-   |        ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n+LL | #![warn(clippy::unsafe_vector_initialization)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/deprecated.rs:10:8\n+error: lint `clippy::unused_collect` has been removed: `collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\n+  --> $DIR/deprecated.rs:10:9\n    |\n-LL | #[warn(clippy::temporary_cstring_as_ptr)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n+LL | #![warn(clippy::unused_collect)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/deprecated.rs:11:8\n+error: lint `clippy::replace_consts` has been removed: associated-constants `MIN`/`MAX` of integers are preferred to `{min,max}_value()` and module constants\n+  --> $DIR/deprecated.rs:11:9\n    |\n-LL | #[warn(clippy::panic_params)]\n-   |        ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n+LL | #![warn(clippy::replace_consts)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/deprecated.rs:12:8\n+error: lint `clippy::regex_macro` has been removed: the regex! macro has been removed from the regex crate in 2018\n+  --> $DIR/deprecated.rs:12:9\n    |\n-LL | #[warn(clippy::unknown_clippy_lints)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n+LL | #![warn(clippy::regex_macro)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::find_map` has been removed: this lint has been replaced by `manual_find_map`, a more specific lint\n-  --> $DIR/deprecated.rs:13:8\n+  --> $DIR/deprecated.rs:13:9\n    |\n-LL | #[warn(clippy::find_map)]\n-   |        ^^^^^^^^^^^^^^^^\n+LL | #![warn(clippy::find_map)]\n+   |         ^^^^^^^^^^^^^^^^\n \n error: lint `clippy::filter_map` has been removed: this lint has been replaced by `manual_filter_map`, a more specific lint\n-  --> $DIR/deprecated.rs:14:8\n+  --> $DIR/deprecated.rs:14:9\n    |\n-LL | #[warn(clippy::filter_map)]\n-   |        ^^^^^^^^^^^^^^^^^^\n+LL | #![warn(clippy::filter_map)]\n+   |         ^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::pub_enum_variant_names` has been removed: set the `avoid-breaking-exported-api` config option to `false` to enable the `enum_variant_names` lint for public items\n-  --> $DIR/deprecated.rs:15:8\n+  --> $DIR/deprecated.rs:15:9\n    |\n-LL | #[warn(clippy::pub_enum_variant_names)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(clippy::pub_enum_variant_names)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: lint `clippy::wrong_pub_self_convention` has been removed: set the `avoid-breaking-exported-api` config option to `false` to enable the `wrong_self_convention` lint for public items\n-  --> $DIR/deprecated.rs:16:8\n-   |\n-LL | #[warn(clippy::wrong_pub_self_convention)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/deprecated.rs:17:8\n+  --> $DIR/deprecated.rs:16:9\n    |\n-LL | #[warn(clippy::invalid_atomic_ordering)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n+LL | #![warn(clippy::wrong_pub_self_convention)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 16 previous errors\n "}, {"sha": "e27f9fea708ee16c0bcfd889cf27ad6ed7b39b8d", "filename": "tests/ui/diverging_sub_expression.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdiverging_sub_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdiverging_sub_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,6 +1,5 @@\n #![warn(clippy::diverging_sub_expression)]\n #![allow(clippy::match_same_arms, clippy::logic_bug)]\n-\n #[allow(clippy::empty_loop)]\n fn diverge() -> ! {\n     loop {}"}, {"sha": "c712a6a7e38eaf1433c0aee8f46e4897612370a7", "filename": "tests/ui/diverging_sub_expression.stderr", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdiverging_sub_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdiverging_sub_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,40 +1,48 @@\n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:20:10\n+  --> $DIR/diverging_sub_expression.rs:19:10\n    |\n LL |     b || diverge();\n    |          ^^^^^^^^^\n    |\n    = note: `-D clippy::diverging-sub-expression` implied by `-D warnings`\n \n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:21:10\n+  --> $DIR/diverging_sub_expression.rs:20:10\n    |\n LL |     b || A.foo();\n    |          ^^^^^^^\n \n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:30:26\n+  --> $DIR/diverging_sub_expression.rs:29:26\n    |\n LL |             6 => true || return,\n    |                          ^^^^^^\n \n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:31:26\n+  --> $DIR/diverging_sub_expression.rs:30:26\n    |\n LL |             7 => true || continue,\n    |                          ^^^^^^^^\n \n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:34:26\n+  --> $DIR/diverging_sub_expression.rs:33:26\n    |\n LL |             3 => true || diverge(),\n    |                          ^^^^^^^^^\n \n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:39:26\n+  --> $DIR/diverging_sub_expression.rs:36:30\n+   |\n+LL |                 _ => true || panic!(\"boo\"),\n+   |                              ^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: sub-expression diverges\n+  --> $DIR/diverging_sub_expression.rs:38:26\n    |\n LL |             _ => true || break,\n    |                          ^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "747801b40ee10abec3f2769b8c4965d9e91726d1", "filename": "tests/ui/doc/doc-fixable.fixed", "status": "added", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc%2Fdoc-fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc%2Fdoc-fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Fdoc-fixable.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,215 @@\n+// run-rustfix\n+//! This file tests for the `DOC_MARKDOWN` lint.\n+\n+#![allow(dead_code, incomplete_features)]\n+#![warn(clippy::doc_markdown)]\n+#![feature(custom_inner_attributes, generic_const_exprs, const_option)]\n+#![rustfmt::skip]\n+\n+/// The `foo_bar` function does _nothing_. See also `foo::bar`. (note the dot there)\n+/// Markdown is _weird_. I mean _really weird_. This \\_ is ok. So is `_`. But not `Foo::some_fun`\n+/// which should be reported only once despite being __doubly bad__.\n+/// Here be `::a::global:path`, and _`::another::global::path`_.  :: is not a path though.\n+/// Import an item from `::awesome::global::blob::` (Intended postfix)\n+/// These are the options for `::Cat`: (Intended trailing single colon, shouldn't be linted)\n+/// That's not code ~`NotInCodeBlock`~.\n+/// `be_sure_we_got_to_the_end_of_it`\n+fn foo_bar() {\n+}\n+\n+/// That one tests multiline ticks.\n+/// ```rust\n+/// foo_bar FOO_BAR\n+/// _foo bar_\n+/// ```\n+///\n+/// ~~~rust\n+/// foo_bar FOO_BAR\n+/// _foo bar_\n+/// ~~~\n+/// `be_sure_we_got_to_the_end_of_it`\n+fn multiline_codeblock() {\n+}\n+\n+/// This _is a test for\n+/// multiline\n+/// emphasis_.\n+/// `be_sure_we_got_to_the_end_of_it`\n+fn test_emphasis() {\n+}\n+\n+/// This tests units. See also #835.\n+/// kiB MiB GiB TiB PiB EiB\n+/// kib Mib Gib Tib Pib Eib\n+/// kB MB GB TB PB EB\n+/// kb Mb Gb Tb Pb Eb\n+/// 32kiB 32MiB 32GiB 32TiB 32PiB 32EiB\n+/// 32kib 32Mib 32Gib 32Tib 32Pib 32Eib\n+/// 32kB 32MB 32GB 32TB 32PB 32EB\n+/// 32kb 32Mb 32Gb 32Tb 32Pb 32Eb\n+/// NaN\n+/// `be_sure_we_got_to_the_end_of_it`\n+fn test_units() {\n+}\n+\n+/// This tests allowed identifiers.\n+/// KiB MiB GiB TiB PiB EiB\n+/// DirectX\n+/// ECMAScript\n+/// GPLv2 GPLv3\n+/// GitHub GitLab\n+/// IPv4 IPv6\n+/// ClojureScript CoffeeScript JavaScript PureScript TypeScript\n+/// NaN NaNs\n+/// OAuth GraphQL\n+/// OCaml\n+/// OpenGL OpenMP OpenSSH OpenSSL OpenStreetMap OpenDNS\n+/// WebGL\n+/// TensorFlow\n+/// TrueType\n+/// iOS macOS FreeBSD\n+/// TeX LaTeX BibTeX BibLaTeX\n+/// MinGW\n+/// CamelCase (see also #2395)\n+/// `be_sure_we_got_to_the_end_of_it`\n+fn test_allowed() {\n+}\n+\n+/// This test has [a `link_with_underscores`][chunked-example] inside it. See #823.\n+/// See also [the issue tracker](https://github.com/rust-lang/rust-clippy/search?q=clippy::doc_markdown&type=Issues)\n+/// on GitHub (which is a camel-cased word, but is OK). And here is another [inline link][inline_link].\n+/// It can also be [`inline_link2`].\n+///\n+/// [chunked-example]: https://en.wikipedia.org/wiki/Chunked_transfer_encoding#Example\n+/// [inline_link]: https://foobar\n+/// [inline_link2]: https://foobar\n+/// The `main` function is the entry point of the program. Here it only calls the `foo_bar` and\n+/// `multiline_ticks` functions.\n+///\n+/// expression of the type  `_ <bit_op> m <cmp_op> c` (where `<bit_op>`\n+/// is one of {`&`, '|'} and `<cmp_op>` is one of {`!=`, `>=`, `>` ,\n+/// `be_sure_we_got_to_the_end_of_it`\n+fn main() {\n+    foo_bar();\n+    multiline_codeblock();\n+    test_emphasis();\n+    test_units();\n+}\n+\n+/// ## `CamelCaseThing`\n+/// Talks about `CamelCaseThing`. Titles should be ignored; see issue #897.\n+///\n+/// # `CamelCaseThing`\n+///\n+/// Not a title #897 `CamelCaseThing`\n+/// `be_sure_we_got_to_the_end_of_it`\n+fn issue897() {\n+}\n+\n+/// I am confused by brackets? (`x_y`)\n+/// I am confused by brackets? (foo `x_y`)\n+/// I am confused by brackets? (`x_y` foo)\n+/// `be_sure_we_got_to_the_end_of_it`\n+fn issue900() {\n+}\n+\n+/// Diesel queries also have a similar problem to [Iterator][iterator], where\n+/// /// More talking\n+/// returning them from a function requires exposing the implementation of that\n+/// function. The [`helper_types`][helper_types] module exists to help with this,\n+/// but you might want to hide the return type or have it conditionally change.\n+/// Boxing can achieve both.\n+///\n+/// [iterator]: https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html\n+/// [helper_types]: ../helper_types/index.html\n+/// `be_sure_we_got_to_the_end_of_it`\n+fn issue883() {\n+}\n+\n+/// `foo_bar\n+/// baz_quz`\n+/// [foo\n+/// bar](https://doc.rust-lang.org/stable/std/iter/trait.IteratorFooBar.html)\n+fn multiline() {\n+}\n+\n+/** E.g., serialization of an empty list: `FooBar`\n+```\n+That's in a code block: `PackedNode`\n+```\n+\n+And `BarQuz` too.\n+`be_sure_we_got_to_the_end_of_it`\n+*/\n+fn issue1073() {\n+}\n+\n+/** E.g., serialization of an empty list: `FooBar`\n+```\n+That's in a code block: PackedNode\n+```\n+\n+And `BarQuz` too.\n+`be_sure_we_got_to_the_end_of_it`\n+*/\n+fn issue1073_alt() {\n+}\n+\n+/// Tests more than three quotes:\n+/// ````\n+/// DoNotWarn\n+/// ```\n+/// StillDont\n+/// ````\n+/// `be_sure_we_got_to_the_end_of_it`\n+fn four_quotes() {\n+}\n+\n+#[cfg_attr(feature = \"a\", doc = \" ```\")]\n+#[cfg_attr(not(feature = \"a\"), doc = \" ```ignore\")]\n+/// fn main() {\n+///     let s = \"localhost:10000\".to_string();\n+///     println!(\"{}\", s);\n+/// }\n+/// ```\n+fn issue_1469() {}\n+\n+/**\n+ * This is a doc comment that should not be a list\n+ *This would also be an error under a strict common mark interpretation\n+ */\n+fn issue_1920() {}\n+\n+/// An iterator over `mycrate::Collection`'s values.\n+/// It should not lint a `'static` lifetime in ticks.\n+fn issue_2210() {}\n+\n+/// This should not cause the lint to trigger:\n+/// #REQ-data-family.lint_partof_exists\n+fn issue_2343() {}\n+\n+/// This should not cause an ICE:\n+/// __|_ _|__||_|\n+fn pulldown_cmark_crash() {}\n+\n+/// This should not lint\n+/// (regression test for #7758)\n+/// [plain text][path::to::item]\n+fn intra_doc_link() {}\n+\n+// issue #7033 - generic_const_exprs ICE\n+struct S<T, const N: usize>\n+where [(); N.checked_next_power_of_two().unwrap()]: {\n+    arr: [T; N.checked_next_power_of_two().unwrap()],\n+    n: usize,\n+}\n+\n+impl<T: Copy + Default, const N: usize> S<T, N>\n+where [(); N.checked_next_power_of_two().unwrap()]: {\n+    fn new() -> Self {\n+        Self {\n+            arr: [T::default(); N.checked_next_power_of_two().unwrap()],\n+            n: 0,\n+        }\n+    }\n+}"}, {"sha": "f3cf966157a63f6e9e1a39b1e2183cdcb2e8b63f", "filename": "tests/ui/doc/doc-fixable.rs", "status": "renamed", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc%2Fdoc-fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc%2Fdoc-fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Fdoc-fixable.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n //! This file tests for the `DOC_MARKDOWN` lint.\n \n #![allow(dead_code, incomplete_features)]\n@@ -8,7 +9,9 @@\n /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n /// Markdown is _weird_. I mean _really weird_. This \\_ is ok. So is `_`. But not Foo::some_fun\n /// which should be reported only once despite being __doubly bad__.\n-/// Here be ::a::global:path.\n+/// Here be ::a::global:path, and _::another::global::path_.  :: is not a path though.\n+/// Import an item from ::awesome::global::blob:: (Intended postfix)\n+/// These are the options for ::Cat: (Intended trailing single colon, shouldn't be linted)\n /// That's not code ~NotInCodeBlock~.\n /// be_sure_we_got_to_the_end_of_it\n fn foo_bar() {\n@@ -162,12 +165,6 @@ fn issue1073_alt() {\n fn four_quotes() {\n }\n \n-/// See [NIST SP 800-56A, revision 2].\n-///\n-/// [NIST SP 800-56A, revision 2]:\n-///     https://github.com/rust-lang/rust-clippy/issues/902#issuecomment-261919419\n-fn issue_902_comment() {}\n-\n #[cfg_attr(feature = \"a\", doc = \" ```\")]\n #[cfg_attr(not(feature = \"a\"), doc = \" ```ignore\")]\n /// fn main() {\n@@ -183,14 +180,6 @@ fn issue_1469() {}\n  */\n fn issue_1920() {}\n \n-/// Ok: <http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels>\n-///\n-/// Not ok: http://www.unicode.org\n-/// Not ok: https://www.unicode.org\n-/// Not ok: http://www.unicode.org/\n-/// Not ok: http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels\n-fn issue_1832() {}\n-\n /// An iterator over mycrate::Collection's values.\n /// It should not lint a `'static` lifetime in ticks.\n fn issue_2210() {}", "previous_filename": "tests/ui/doc/doc.rs"}, {"sha": "31132f86edbc452ecad7166f1cb20e47e33fd22f", "filename": "tests/ui/doc/doc-fixable.stderr", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc%2Fdoc-fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc%2Fdoc-fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Fdoc-fixable.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,184 @@\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:9:9\n+   |\n+LL | /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n+   |         ^^^^^^^ help: try: ``foo_bar``\n+   |\n+   = note: `-D clippy::doc-markdown` implied by `-D warnings`\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:9:51\n+   |\n+LL | /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n+   |                                                   ^^^^^^^^ help: try: ``foo::bar``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:10:83\n+   |\n+LL | /// Markdown is _weird_. I mean _really weird_. This /_ is ok. So is `_`. But not Foo::some_fun\n+   |                                                                                   ^^^^^^^^^^^^^ help: try: ``Foo::some_fun``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:12:13\n+   |\n+LL | /// Here be ::a::global:path, and _::another::global::path_.  :: is not a path though.\n+   |             ^^^^^^^^^^^^^^^^ help: try: ``::a::global:path``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:12:36\n+   |\n+LL | /// Here be ::a::global:path, and _::another::global::path_.  :: is not a path though.\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^ help: try: ``::another::global::path``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:13:25\n+   |\n+LL | /// Import an item from ::awesome::global::blob:: (Intended postfix)\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: ``::awesome::global::blob::``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:14:31\n+   |\n+LL | /// These are the options for ::Cat: (Intended trailing single colon, shouldn't be linted)\n+   |                               ^^^^^ help: try: ``::Cat``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:15:22\n+   |\n+LL | /// That's not code ~NotInCodeBlock~.\n+   |                      ^^^^^^^^^^^^^^ help: try: ``NotInCodeBlock``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:16:5\n+   |\n+LL | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: ``be_sure_we_got_to_the_end_of_it``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:30:5\n+   |\n+LL | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: ``be_sure_we_got_to_the_end_of_it``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:37:5\n+   |\n+LL | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: ``be_sure_we_got_to_the_end_of_it``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:51:5\n+   |\n+LL | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: ``be_sure_we_got_to_the_end_of_it``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:74:5\n+   |\n+LL | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: ``be_sure_we_got_to_the_end_of_it``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:78:22\n+   |\n+LL | /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n+   |                      ^^^^^^^^^^^^^^^^^^^^^ help: try: ``link_with_underscores``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:81:21\n+   |\n+LL | /// It can also be [inline_link2].\n+   |                     ^^^^^^^^^^^^ help: try: ``inline_link2``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:91:5\n+   |\n+LL | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: ``be_sure_we_got_to_the_end_of_it``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:99:8\n+   |\n+LL | /// ## CamelCaseThing\n+   |        ^^^^^^^^^^^^^^ help: try: ``CamelCaseThing``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:102:7\n+   |\n+LL | /// # CamelCaseThing\n+   |       ^^^^^^^^^^^^^^ help: try: ``CamelCaseThing``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:104:22\n+   |\n+LL | /// Not a title #897 CamelCaseThing\n+   |                      ^^^^^^^^^^^^^^ help: try: ``CamelCaseThing``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:105:5\n+   |\n+LL | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: ``be_sure_we_got_to_the_end_of_it``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:112:5\n+   |\n+LL | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: ``be_sure_we_got_to_the_end_of_it``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:125:5\n+   |\n+LL | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: ``be_sure_we_got_to_the_end_of_it``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:136:43\n+   |\n+LL | /** E.g., serialization of an empty list: FooBar\n+   |                                           ^^^^^^ help: try: ``FooBar``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:141:5\n+   |\n+LL | And BarQuz too.\n+   |     ^^^^^^ help: try: ``BarQuz``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:142:1\n+   |\n+LL | be_sure_we_got_to_the_end_of_it\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: ``be_sure_we_got_to_the_end_of_it``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:147:43\n+   |\n+LL | /** E.g., serialization of an empty list: FooBar\n+   |                                           ^^^^^^ help: try: ``FooBar``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:152:5\n+   |\n+LL | And BarQuz too.\n+   |     ^^^^^^ help: try: ``BarQuz``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:153:1\n+   |\n+LL | be_sure_we_got_to_the_end_of_it\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: ``be_sure_we_got_to_the_end_of_it``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:164:5\n+   |\n+LL | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: ``be_sure_we_got_to_the_end_of_it``\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc-fixable.rs:183:22\n+   |\n+LL | /// An iterator over mycrate::Collection's values.\n+   |                      ^^^^^^^^^^^^^^^^^^^ help: try: ``mycrate::Collection``\n+\n+error: aborting due to 30 previous errors\n+"}, {"sha": "7eab8a85f093d6f1de5a51e517605338f98fee33", "filename": "tests/ui/doc/doc.stderr", "status": "removed", "additions": 0, "deletions": 190, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/c2cbf55323327efe3a791358e4256dee75322ddb/tests%2Fui%2Fdoc%2Fdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2cbf55323327efe3a791358e4256dee75322ddb/tests%2Fui%2Fdoc%2Fdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Fdoc.stderr?ref=c2cbf55323327efe3a791358e4256dee75322ddb", "patch": "@@ -1,190 +0,0 @@\n-error: you should put `foo_bar` between ticks in the documentation\n-  --> $DIR/doc.rs:8:9\n-   |\n-LL | /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n-   |         ^^^^^^^\n-   |\n-   = note: `-D clippy::doc-markdown` implied by `-D warnings`\n-\n-error: you should put `foo::bar` between ticks in the documentation\n-  --> $DIR/doc.rs:8:51\n-   |\n-LL | /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n-   |                                                   ^^^^^^^^\n-\n-error: you should put `Foo::some_fun` between ticks in the documentation\n-  --> $DIR/doc.rs:9:83\n-   |\n-LL | /// Markdown is _weird_. I mean _really weird_. This /_ is ok. So is `_`. But not Foo::some_fun\n-   |                                                                                   ^^^^^^^^^^^^^\n-\n-error: you should put `a::global:path` between ticks in the documentation\n-  --> $DIR/doc.rs:11:15\n-   |\n-LL | /// Here be ::a::global:path.\n-   |               ^^^^^^^^^^^^^^\n-\n-error: you should put `NotInCodeBlock` between ticks in the documentation\n-  --> $DIR/doc.rs:12:22\n-   |\n-LL | /// That's not code ~NotInCodeBlock~.\n-   |                      ^^^^^^^^^^^^^^\n-\n-error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:13:5\n-   |\n-LL | /// be_sure_we_got_to_the_end_of_it\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:27:5\n-   |\n-LL | /// be_sure_we_got_to_the_end_of_it\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:34:5\n-   |\n-LL | /// be_sure_we_got_to_the_end_of_it\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:48:5\n-   |\n-LL | /// be_sure_we_got_to_the_end_of_it\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:71:5\n-   |\n-LL | /// be_sure_we_got_to_the_end_of_it\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put `link_with_underscores` between ticks in the documentation\n-  --> $DIR/doc.rs:75:22\n-   |\n-LL | /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n-   |                      ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put `inline_link2` between ticks in the documentation\n-  --> $DIR/doc.rs:78:21\n-   |\n-LL | /// It can also be [inline_link2].\n-   |                     ^^^^^^^^^^^^\n-\n-error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:88:5\n-   |\n-LL | /// be_sure_we_got_to_the_end_of_it\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put `CamelCaseThing` between ticks in the documentation\n-  --> $DIR/doc.rs:96:8\n-   |\n-LL | /// ## CamelCaseThing\n-   |        ^^^^^^^^^^^^^^\n-\n-error: you should put `CamelCaseThing` between ticks in the documentation\n-  --> $DIR/doc.rs:99:7\n-   |\n-LL | /// # CamelCaseThing\n-   |       ^^^^^^^^^^^^^^\n-\n-error: you should put `CamelCaseThing` between ticks in the documentation\n-  --> $DIR/doc.rs:101:22\n-   |\n-LL | /// Not a title #897 CamelCaseThing\n-   |                      ^^^^^^^^^^^^^^\n-\n-error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:102:5\n-   |\n-LL | /// be_sure_we_got_to_the_end_of_it\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:109:5\n-   |\n-LL | /// be_sure_we_got_to_the_end_of_it\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:122:5\n-   |\n-LL | /// be_sure_we_got_to_the_end_of_it\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put `FooBar` between ticks in the documentation\n-  --> $DIR/doc.rs:133:43\n-   |\n-LL | /** E.g., serialization of an empty list: FooBar\n-   |                                           ^^^^^^\n-\n-error: you should put `BarQuz` between ticks in the documentation\n-  --> $DIR/doc.rs:138:5\n-   |\n-LL | And BarQuz too.\n-   |     ^^^^^^\n-\n-error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:139:1\n-   |\n-LL | be_sure_we_got_to_the_end_of_it\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put `FooBar` between ticks in the documentation\n-  --> $DIR/doc.rs:144:43\n-   |\n-LL | /** E.g., serialization of an empty list: FooBar\n-   |                                           ^^^^^^\n-\n-error: you should put `BarQuz` between ticks in the documentation\n-  --> $DIR/doc.rs:149:5\n-   |\n-LL | And BarQuz too.\n-   |     ^^^^^^\n-\n-error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:150:1\n-   |\n-LL | be_sure_we_got_to_the_end_of_it\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:161:5\n-   |\n-LL | /// be_sure_we_got_to_the_end_of_it\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:188:13\n-   |\n-LL | /// Not ok: http://www.unicode.org\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:189:13\n-   |\n-LL | /// Not ok: https://www.unicode.org\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:190:13\n-   |\n-LL | /// Not ok: http://www.unicode.org/\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:191:13\n-   |\n-LL | /// Not ok: http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should put `mycrate::Collection` between ticks in the documentation\n-  --> $DIR/doc.rs:194:22\n-   |\n-LL | /// An iterator over mycrate::Collection's values.\n-   |                      ^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 31 previous errors\n-"}, {"sha": "10586f16d466a35b07674534fc75d2c6c48e3b83", "filename": "tests/ui/doc/issue_1832.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc%2Fissue_1832.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc%2Fissue_1832.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Fissue_1832.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,9 @@\n+/// Ok: <http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels>\n+///\n+/// Not ok: http://www.unicode.org\n+/// Not ok: https://www.unicode.org\n+/// Not ok: http://www.unicode.org/\n+/// Not ok: http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels\n+fn issue_1832() {}\n+\n+fn main() {}"}, {"sha": "4b0c835dd3f07665a5d99963dda34000c63f811b", "filename": "tests/ui/doc/issue_902.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc%2Fissue_902.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc%2Fissue_902.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Fissue_902.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,7 @@\n+/// See [NIST SP 800-56A, revision 2].\n+///\n+/// [NIST SP 800-56A, revision 2]:\n+///     https://github.com/rust-lang/rust-clippy/issues/902#issuecomment-261919419\n+fn issue_902_comment() {}\n+\n+fn main() {}"}, {"sha": "9670e5c24fb3ecbcf5a9febdca1e2a93ddf61c07", "filename": "tests/ui/doc/unbalanced_ticks.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc%2Funbalanced_ticks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc%2Funbalanced_ticks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Funbalanced_ticks.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -18,11 +18,11 @@ LL | /// This paragraph has `unbalanced_tick marks and should stop_linting.\n    |\n    = help: a backtick may be missing a pair\n \n-error: you should put `should_be` between ticks in the documentation\n+error: item in documentation is missing backticks\n   --> $DIR/unbalanced_ticks.rs:15:32\n    |\n LL | /// This paragraph is fine and should_be linted normally.\n-   |                                ^^^^^^^^^\n+   |                                ^^^^^^^^^ help: try: ``should_be``\n \n error: backticks are unbalanced\n   --> $DIR/unbalanced_ticks.rs:17:1\n@@ -32,11 +32,11 @@ LL | /// Double unbalanced backtick from ``here to here` should lint.\n    |\n    = help: a backtick may be missing a pair\n \n-error: you should put `not_fine` between ticks in the documentation\n+error: item in documentation is missing backticks\n   --> $DIR/unbalanced_ticks.rs:30:8\n    |\n LL | /// ## not_fine\n-   |        ^^^^^^^^\n+   |        ^^^^^^^^ help: try: ``not_fine``\n \n error: backticks are unbalanced\n   --> $DIR/unbalanced_ticks.rs:32:1\n@@ -54,11 +54,11 @@ LL | /// - This `item has unbalanced tick marks\n    |\n    = help: a backtick may be missing a pair\n \n-error: you should put `backticks_here` between ticks in the documentation\n+error: item in documentation is missing backticks\n   --> $DIR/unbalanced_ticks.rs:35:23\n    |\n LL | /// - This item needs backticks_here\n-   |                       ^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^^^^^^^ help: try: ``backticks_here``\n \n error: aborting due to 8 previous errors\n "}, {"sha": "30fdd3b087371226352c9b07dd81f60119f744b3", "filename": "tests/ui/doc_errors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_errors.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n #![warn(clippy::missing_errors_doc)]\n #![allow(clippy::result_unit_err)]\n #![allow(clippy::unnecessary_wraps)]"}, {"sha": "c7b616e2897087c01ee59976e37fe287afb6dbbc", "filename": "tests/ui/doc_errors.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_errors.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:8:1\n+  --> $DIR/doc_errors.rs:7:1\n    |\n LL | / pub fn pub_fn_missing_errors_header() -> Result<(), ()> {\n LL | |     unimplemented!();\n@@ -9,47 +9,47 @@ LL | | }\n    = note: `-D clippy::missing-errors-doc` implied by `-D warnings`\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:12:1\n+  --> $DIR/doc_errors.rs:11:1\n    |\n LL | / pub async fn async_pub_fn_missing_errors_header() -> Result<(), ()> {\n LL | |     unimplemented!();\n LL | | }\n    | |_^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:17:1\n+  --> $DIR/doc_errors.rs:16:1\n    |\n LL | / pub fn pub_fn_returning_io_result() -> io::Result<()> {\n LL | |     unimplemented!();\n LL | | }\n    | |_^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:22:1\n+  --> $DIR/doc_errors.rs:21:1\n    |\n LL | / pub async fn async_pub_fn_returning_io_result() -> io::Result<()> {\n LL | |     unimplemented!();\n LL | | }\n    | |_^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:52:5\n+  --> $DIR/doc_errors.rs:51:5\n    |\n LL | /     pub fn pub_method_missing_errors_header() -> Result<(), ()> {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:57:5\n+  --> $DIR/doc_errors.rs:56:5\n    |\n LL | /     pub async fn async_pub_method_missing_errors_header() -> Result<(), ()> {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:86:5\n+  --> $DIR/doc_errors.rs:85:5\n    |\n LL |     fn trait_method_missing_errors_header() -> Result<(), ()>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "4464a21b3b654bdf89b238a5c0594b61edbf06ce", "filename": "tests/ui/doc_unsafe.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fdoc_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -125,3 +125,8 @@ pub mod __macro {\n         pub unsafe fn f() {}\n     }\n }\n+\n+/// # Implementation safety\n+pub unsafe trait DocumentedUnsafeTraitWithImplementationHeader {\n+    fn method();\n+}"}, {"sha": "add8a91e26b85a2b9745a73053ff73d418a54cdd", "filename": "tests/ui/enum_variants.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fenum_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fenum_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -60,7 +60,7 @@ LL | | }\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n-error: all variants have the same prefix: `With`\n+error: all variants have the same prefix: `WithOut`\n   --> $DIR/enum_variants.rs:81:1\n    |\n LL | / enum Seallll {"}, {"sha": "aad78319d48209549db51ff8e3de027a5b4a8b59", "filename": "tests/ui/eval_order_dependence.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,3 @@\n-// edition:2018\n-\n #[warn(clippy::eval_order_dependence)]\n #[allow(\n     unused_assignments,"}, {"sha": "7c6265a08790deee6d8df446b49846dab095e770", "filename": "tests/ui/eval_order_dependence.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Feval_order_dependence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Feval_order_dependence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,48 +1,48 @@\n error: unsequenced read of `x`\n-  --> $DIR/eval_order_dependence.rs:16:9\n+  --> $DIR/eval_order_dependence.rs:14:9\n    |\n LL |     } + x;\n    |         ^\n    |\n    = note: `-D clippy::eval-order-dependence` implied by `-D warnings`\n note: whether read occurs before this write depends on evaluation order\n-  --> $DIR/eval_order_dependence.rs:14:9\n+  --> $DIR/eval_order_dependence.rs:12:9\n    |\n LL |         x = 1;\n    |         ^^^^^\n \n error: unsequenced read of `x`\n-  --> $DIR/eval_order_dependence.rs:19:5\n+  --> $DIR/eval_order_dependence.rs:17:5\n    |\n LL |     x += {\n    |     ^\n    |\n note: whether read occurs before this write depends on evaluation order\n-  --> $DIR/eval_order_dependence.rs:20:9\n+  --> $DIR/eval_order_dependence.rs:18:9\n    |\n LL |         x = 20;\n    |         ^^^^^^\n \n error: unsequenced read of `x`\n-  --> $DIR/eval_order_dependence.rs:32:12\n+  --> $DIR/eval_order_dependence.rs:30:12\n    |\n LL |         a: x,\n    |            ^\n    |\n note: whether read occurs before this write depends on evaluation order\n-  --> $DIR/eval_order_dependence.rs:34:13\n+  --> $DIR/eval_order_dependence.rs:32:13\n    |\n LL |             x = 6;\n    |             ^^^^^\n \n error: unsequenced read of `x`\n-  --> $DIR/eval_order_dependence.rs:41:9\n+  --> $DIR/eval_order_dependence.rs:39:9\n    |\n LL |         x += {\n    |         ^\n    |\n note: whether read occurs before this write depends on evaluation order\n-  --> $DIR/eval_order_dependence.rs:42:13\n+  --> $DIR/eval_order_dependence.rs:40:13\n    |\n LL |             x = 20;\n    |             ^^^^^^"}, {"sha": "5d5af4e4632970afe821f9b42b82eae5bd445e08", "filename": "tests/ui/fallible_impl_from.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n #![deny(clippy::fallible_impl_from)]\n-#![allow(clippy::if_then_panic)]\n \n // docs example\n struct Foo(i32);"}, {"sha": "4e0f08a1215c0401fa8f18493fb8ad0a833dcd63", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:6:1\n+  --> $DIR/fallible_impl_from.rs:5:1\n    |\n LL | / impl From<String> for Foo {\n LL | |     fn from(s: String) -> Self {\n@@ -15,13 +15,13 @@ LL | #![deny(clippy::fallible_impl_from)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:8:13\n+  --> $DIR/fallible_impl_from.rs:7:13\n    |\n LL |         Foo(s.parse().unwrap())\n    |             ^^^^^^^^^^^^^^^^^^\n \n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:27:1\n+  --> $DIR/fallible_impl_from.rs:26:1\n    |\n LL | / impl From<usize> for Invalid {\n LL | |     fn from(i: usize) -> Invalid {\n@@ -34,14 +34,14 @@ LL | | }\n    |\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:30:13\n+  --> $DIR/fallible_impl_from.rs:29:13\n    |\n LL |             panic!();\n    |             ^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:36:1\n+  --> $DIR/fallible_impl_from.rs:35:1\n    |\n LL | / impl From<Option<String>> for Invalid {\n LL | |     fn from(s: Option<String>) -> Invalid {\n@@ -54,7 +54,7 @@ LL | | }\n    |\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:38:17\n+  --> $DIR/fallible_impl_from.rs:37:17\n    |\n LL |         let s = s.unwrap();\n    |                 ^^^^^^^^^^\n@@ -65,10 +65,10 @@ LL |         } else if s.parse::<u32>().unwrap() != 42 {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:54:1\n+  --> $DIR/fallible_impl_from.rs:53:1\n    |\n LL | / impl<'a> From<&'a mut <Box<u32> as ProjStrTrait>::ProjString> for Invalid {\n LL | |     fn from(s: &'a mut <Box<u32> as ProjStrTrait>::ProjString) -> Invalid {\n@@ -81,13 +81,13 @@ LL | | }\n    |\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:56:12\n+  --> $DIR/fallible_impl_from.rs:55:12\n    |\n LL |         if s.parse::<u32>().ok().unwrap() != 42 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "64cb7b1cfb80f6c33ff5e81f7af29cceb1e8b73d", "filename": "tests/ui/format.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -16,6 +16,8 @@ fn main() {\n     r##\"foo {}\n \" bar\"##.to_string();\n \n+    let _ = String::new();\n+\n     \"foo\".to_string();\n     format!(\"{:?}\", \"foo\"); // Don't warn about `Debug`.\n     format!(\"{:8}\", \"foo\");"}, {"sha": "a065b1b5683c1b9ccbfeb81df5cf1b96d7d12c4d", "filename": "tests/ui/format.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -18,6 +18,8 @@ fn main() {\n \" bar\"##\n     );\n \n+    let _ = format!(\"\");\n+\n     format!(\"{}\", \"foo\");\n     format!(\"{:?}\", \"foo\"); // Don't warn about `Debug`.\n     format!(\"{:8}\", \"foo\");"}, {"sha": "58ad7499bb26f530c5202239ac79858ab1aaa79c", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -34,64 +34,70 @@ LL ~ \" bar\"##.to_string();\n    |\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:21:5\n+  --> $DIR/format.rs:21:13\n+   |\n+LL |     let _ = format!(\"\");\n+   |             ^^^^^^^^^^^ help: consider using `String::new()`: `String::new()`\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:23:5\n    |\n LL |     format!(\"{}\", \"foo\");\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:25:5\n+  --> $DIR/format.rs:27:5\n    |\n LL |     format!(\"{:+}\", \"foo\"); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:26:5\n+  --> $DIR/format.rs:28:5\n    |\n LL |     format!(\"{:<}\", \"foo\"); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:31:5\n+  --> $DIR/format.rs:33:5\n    |\n LL |     format!(\"{}\", arg);\n    |     ^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:35:5\n+  --> $DIR/format.rs:37:5\n    |\n LL |     format!(\"{:+}\", arg); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:36:5\n+  --> $DIR/format.rs:38:5\n    |\n LL |     format!(\"{:<}\", arg); // Warn when the format makes no difference.\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:63:5\n+  --> $DIR/format.rs:65:5\n    |\n LL |     format!(\"{}\", 42.to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `42.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:65:5\n+  --> $DIR/format.rs:67:5\n    |\n LL |     format!(\"{}\", x.display().to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.display().to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:69:18\n+  --> $DIR/format.rs:71:18\n    |\n LL |     let _ = Some(format!(\"{}\", a + \"bar\"));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `a + \"bar\"`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:73:22\n+  --> $DIR/format.rs:75:22\n    |\n LL |     let _s: String = format!(\"{}\", &*v.join(\"/n\"));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `(&*v.join(\"/n\")).to_string()`\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 15 previous errors\n "}, {"sha": "69b5e1c722e0320df446f0fb6a01d74d20fead7f", "filename": "tests/ui/format_args.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fformat_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fformat_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat_args.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -5,6 +5,7 @@\n #![allow(unused_variables)]\n #![allow(clippy::assertions_on_constants)]\n #![allow(clippy::eq_op)]\n+#![allow(clippy::print_literal)]\n #![warn(clippy::to_string_in_format_args)]\n \n use std::io::{stdout, Write};\n@@ -97,9 +98,20 @@ fn main() {\n     println!(\"{}\", Z(1));\n     println!(\"{}\", **x);\n     println!(\"{}\", ***x_ref);\n+    // https://github.com/rust-lang/rust-clippy/issues/7903\n+    println!(\"{foo}{bar}\", foo = \"foo\", bar = \"bar\");\n+    println!(\"{foo}{bar}\", foo = \"foo\", bar = \"bar\");\n+    println!(\"{foo}{bar}\", bar = \"bar\", foo = \"foo\");\n+    println!(\"{foo}{bar}\", bar = \"bar\", foo = \"foo\");\n \n+    // negative tests\n     println!(\"error: something failed at {}\", Somewhere.to_string());\n+    // The next two tests are negative because caching the string might be faster than calling `<X as\n+    // Display>::fmt` twice.\n     println!(\"{} and again {0}\", x.to_string());\n+    println!(\"{foo}{foo}\", foo = \"foo\".to_string());\n     my_macro!();\n     println!(\"error: something failed at {}\", my_other_macro!());\n+    // https://github.com/rust-lang/rust-clippy/issues/7903\n+    println!(\"{foo}{foo:?}\", foo = \"foo\".to_string());\n }"}, {"sha": "3a434c5bf002a3350a08a0da2988747de925bcc9", "filename": "tests/ui/format_args.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat_args.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -5,6 +5,7 @@\n #![allow(unused_variables)]\n #![allow(clippy::assertions_on_constants)]\n #![allow(clippy::eq_op)]\n+#![allow(clippy::print_literal)]\n #![warn(clippy::to_string_in_format_args)]\n \n use std::io::{stdout, Write};\n@@ -97,9 +98,20 @@ fn main() {\n     println!(\"{}\", Z(1).to_string());\n     println!(\"{}\", x.to_string());\n     println!(\"{}\", x_ref.to_string());\n+    // https://github.com/rust-lang/rust-clippy/issues/7903\n+    println!(\"{foo}{bar}\", foo = \"foo\".to_string(), bar = \"bar\");\n+    println!(\"{foo}{bar}\", foo = \"foo\", bar = \"bar\".to_string());\n+    println!(\"{foo}{bar}\", bar = \"bar\".to_string(), foo = \"foo\");\n+    println!(\"{foo}{bar}\", bar = \"bar\", foo = \"foo\".to_string());\n \n+    // negative tests\n     println!(\"error: something failed at {}\", Somewhere.to_string());\n+    // The next two tests are negative because caching the string might be faster than calling `<X as\n+    // Display>::fmt` twice.\n     println!(\"{} and again {0}\", x.to_string());\n+    println!(\"{foo}{foo}\", foo = \"foo\".to_string());\n     my_macro!();\n     println!(\"error: something failed at {}\", my_other_macro!());\n+    // https://github.com/rust-lang/rust-clippy/issues/7903\n+    println!(\"{foo}{foo:?}\", foo = \"foo\".to_string());\n }"}, {"sha": "c0cbca507958d1306cfbf008fb3b1d16e2f3959d", "filename": "tests/ui/format_args.stderr", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fformat_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fformat_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat_args.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,106 +1,130 @@\n error: `to_string` applied to a type that implements `Display` in `format!` args\n-  --> $DIR/format_args.rs:75:72\n+  --> $DIR/format_args.rs:76:72\n    |\n LL |     let _ = format!(\"error: something failed at {}\", Location::caller().to_string());\n    |                                                                        ^^^^^^^^^^^^ help: remove this\n    |\n    = note: `-D clippy::to-string-in-format-args` implied by `-D warnings`\n \n error: `to_string` applied to a type that implements `Display` in `write!` args\n-  --> $DIR/format_args.rs:79:27\n+  --> $DIR/format_args.rs:80:27\n    |\n LL |         Location::caller().to_string()\n    |                           ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `writeln!` args\n-  --> $DIR/format_args.rs:84:27\n+  --> $DIR/format_args.rs:85:27\n    |\n LL |         Location::caller().to_string()\n    |                           ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `print!` args\n-  --> $DIR/format_args.rs:86:63\n+  --> $DIR/format_args.rs:87:63\n    |\n LL |     print!(\"error: something failed at {}\", Location::caller().to_string());\n    |                                                               ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `println!` args\n-  --> $DIR/format_args.rs:87:65\n+  --> $DIR/format_args.rs:88:65\n    |\n LL |     println!(\"error: something failed at {}\", Location::caller().to_string());\n    |                                                                 ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `eprint!` args\n-  --> $DIR/format_args.rs:88:64\n+  --> $DIR/format_args.rs:89:64\n    |\n LL |     eprint!(\"error: something failed at {}\", Location::caller().to_string());\n    |                                                                ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `eprintln!` args\n-  --> $DIR/format_args.rs:89:66\n+  --> $DIR/format_args.rs:90:66\n    |\n LL |     eprintln!(\"error: something failed at {}\", Location::caller().to_string());\n    |                                                                  ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `format_args!` args\n-  --> $DIR/format_args.rs:90:77\n+  --> $DIR/format_args.rs:91:77\n    |\n LL |     let _ = format_args!(\"error: something failed at {}\", Location::caller().to_string());\n    |                                                                             ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `assert!` args\n-  --> $DIR/format_args.rs:91:70\n+  --> $DIR/format_args.rs:92:70\n    |\n LL |     assert!(true, \"error: something failed at {}\", Location::caller().to_string());\n    |                                                                      ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `assert_eq!` args\n-  --> $DIR/format_args.rs:92:73\n+  --> $DIR/format_args.rs:93:73\n    |\n LL |     assert_eq!(0, 0, \"error: something failed at {}\", Location::caller().to_string());\n    |                                                                         ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `assert_ne!` args\n-  --> $DIR/format_args.rs:93:73\n+  --> $DIR/format_args.rs:94:73\n    |\n LL |     assert_ne!(0, 0, \"error: something failed at {}\", Location::caller().to_string());\n    |                                                                         ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `panic!` args\n-  --> $DIR/format_args.rs:94:63\n+  --> $DIR/format_args.rs:95:63\n    |\n LL |     panic!(\"error: something failed at {}\", Location::caller().to_string());\n    |                                                               ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `println!` args\n-  --> $DIR/format_args.rs:95:20\n+  --> $DIR/format_args.rs:96:20\n    |\n LL |     println!(\"{}\", X(1).to_string());\n    |                    ^^^^^^^^^^^^^^^^ help: use this: `*X(1)`\n \n error: `to_string` applied to a type that implements `Display` in `println!` args\n-  --> $DIR/format_args.rs:96:20\n+  --> $DIR/format_args.rs:97:20\n    |\n LL |     println!(\"{}\", Y(&X(1)).to_string());\n    |                    ^^^^^^^^^^^^^^^^^^^^ help: use this: `***Y(&X(1))`\n \n error: `to_string` applied to a type that implements `Display` in `println!` args\n-  --> $DIR/format_args.rs:97:24\n+  --> $DIR/format_args.rs:98:24\n    |\n LL |     println!(\"{}\", Z(1).to_string());\n    |                        ^^^^^^^^^^^^ help: remove this\n \n error: `to_string` applied to a type that implements `Display` in `println!` args\n-  --> $DIR/format_args.rs:98:20\n+  --> $DIR/format_args.rs:99:20\n    |\n LL |     println!(\"{}\", x.to_string());\n    |                    ^^^^^^^^^^^^^ help: use this: `**x`\n \n error: `to_string` applied to a type that implements `Display` in `println!` args\n-  --> $DIR/format_args.rs:99:20\n+  --> $DIR/format_args.rs:100:20\n    |\n LL |     println!(\"{}\", x_ref.to_string());\n    |                    ^^^^^^^^^^^^^^^^^ help: use this: `***x_ref`\n \n-error: aborting due to 17 previous errors\n+error: `to_string` applied to a type that implements `Display` in `println!` args\n+  --> $DIR/format_args.rs:102:39\n+   |\n+LL |     println!(\"{foo}{bar}\", foo = \"foo\".to_string(), bar = \"bar\");\n+   |                                       ^^^^^^^^^^^^ help: remove this\n+\n+error: `to_string` applied to a type that implements `Display` in `println!` args\n+  --> $DIR/format_args.rs:103:52\n+   |\n+LL |     println!(\"{foo}{bar}\", foo = \"foo\", bar = \"bar\".to_string());\n+   |                                                    ^^^^^^^^^^^^ help: remove this\n+\n+error: `to_string` applied to a type that implements `Display` in `println!` args\n+  --> $DIR/format_args.rs:104:39\n+   |\n+LL |     println!(\"{foo}{bar}\", bar = \"bar\".to_string(), foo = \"foo\");\n+   |                                       ^^^^^^^^^^^^ help: remove this\n+\n+error: `to_string` applied to a type that implements `Display` in `println!` args\n+  --> $DIR/format_args.rs:105:52\n+   |\n+LL |     println!(\"{foo}{bar}\", bar = \"bar\", foo = \"foo\".to_string());\n+   |                                                    ^^^^^^^^^^^^ help: remove this\n+\n+error: aborting due to 21 previous errors\n "}, {"sha": "b24ddf7321e4000cf7fe20cee6ca5485ab6fab0f", "filename": "tests/ui/format_args_unfixable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fformat_args_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fformat_args_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat_args_unfixable.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -51,6 +51,7 @@ fn main() {\n     assert_ne!(0, 0, \"error: {}\", format!(\"something failed at {}\", Location::caller()));\n     panic!(\"error: {}\", format!(\"something failed at {}\", Location::caller()));\n \n+    // negative tests\n     println!(\"error: {}\", format_args!(\"something failed at {}\", Location::caller()));\n     println!(\"error: {:>70}\", format!(\"something failed at {}\", Location::caller()));\n     println!(\"error: {} {0}\", format!(\"something failed at {}\", Location::caller()));"}, {"sha": "858036692d68f401d36c464754b82662f150c540", "filename": "tests/ui/future_not_send.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffuture_not_send.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n #![warn(clippy::future_not_send)]\n \n use std::cell::Cell;"}, {"sha": "3cc05e2fdbec65c0b9574b0c45b924f63bcd6ca5", "filename": "tests/ui/future_not_send.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Ffuture_not_send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Ffuture_not_send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffuture_not_send.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/future_not_send.rs:8:62\n+  --> $DIR/future_not_send.rs:7:62\n    |\n LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                                                              ^^^^ future returned by `private_future` is not `Send`\n    |\n    = note: `-D clippy::future-not-send` implied by `-D warnings`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:9:5\n+  --> $DIR/future_not_send.rs:8:5\n    |\n LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                         -- has type `std::rc::Rc<[u8]>` which is not `Send`\n@@ -16,7 +16,7 @@ LL | }\n    | - `rc` is later dropped here\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:9:5\n+  --> $DIR/future_not_send.rs:8:5\n    |\n LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                                       ---- has type `&std::cell::Cell<usize>` which is not `Send`\n@@ -27,13 +27,13 @@ LL | }\n    = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/future_not_send.rs:12:42\n+  --> $DIR/future_not_send.rs:11:42\n    |\n LL | pub async fn public_future(rc: Rc<[u8]>) {\n    |                                          ^ future returned by `public_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:13:5\n+  --> $DIR/future_not_send.rs:12:5\n    |\n LL | pub async fn public_future(rc: Rc<[u8]>) {\n    |                            -- has type `std::rc::Rc<[u8]>` which is not `Send`\n@@ -44,45 +44,45 @@ LL | }\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/future_not_send.rs:20:63\n+  --> $DIR/future_not_send.rs:19:63\n    |\n LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                                                               ^^^^ future returned by `private_future2` is not `Send`\n    |\n note: captured value is not `Send`\n-  --> $DIR/future_not_send.rs:20:26\n+  --> $DIR/future_not_send.rs:19:26\n    |\n LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                          ^^ has type `std::rc::Rc<[u8]>` which is not `Send`\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n-  --> $DIR/future_not_send.rs:20:40\n+  --> $DIR/future_not_send.rs:19:40\n    |\n LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                                        ^^^^ has type `&std::cell::Cell<usize>` which is not `Send`, because `std::cell::Cell<usize>` is not `Sync`\n    = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/future_not_send.rs:24:43\n+  --> $DIR/future_not_send.rs:23:43\n    |\n LL | pub async fn public_future2(rc: Rc<[u8]>) {}\n    |                                           ^ future returned by `public_future2` is not `Send`\n    |\n note: captured value is not `Send`\n-  --> $DIR/future_not_send.rs:24:29\n+  --> $DIR/future_not_send.rs:23:29\n    |\n LL | pub async fn public_future2(rc: Rc<[u8]>) {}\n    |                             ^^ has type `std::rc::Rc<[u8]>` which is not `Send`\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/future_not_send.rs:35:39\n+  --> $DIR/future_not_send.rs:34:39\n    |\n LL |     async fn private_future(&self) -> usize {\n    |                                       ^^^^^ future returned by `private_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:36:9\n+  --> $DIR/future_not_send.rs:35:9\n    |\n LL |     async fn private_future(&self) -> usize {\n    |                             ----- has type `&Dummy` which is not `Send`\n@@ -94,13 +94,13 @@ LL |     }\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Sync`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/future_not_send.rs:40:39\n+  --> $DIR/future_not_send.rs:39:39\n    |\n LL |     pub async fn public_future(&self) {\n    |                                       ^ future returned by `public_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:41:9\n+  --> $DIR/future_not_send.rs:40:9\n    |\n LL |     pub async fn public_future(&self) {\n    |                                ----- has type `&Dummy` which is not `Send`\n@@ -111,13 +111,13 @@ LL |     }\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Sync`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/future_not_send.rs:50:37\n+  --> $DIR/future_not_send.rs:49:37\n    |\n LL | async fn generic_future<T>(t: T) -> T\n    |                                     ^ future returned by `generic_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:55:5\n+  --> $DIR/future_not_send.rs:54:5\n    |\n LL |     let rt = &t;\n    |         -- has type `&T` which is not `Send`\n@@ -129,13 +129,13 @@ LL | }\n    = note: `T` doesn't implement `std::marker::Sync`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/future_not_send.rs:66:34\n+  --> $DIR/future_not_send.rs:65:34\n    |\n LL | async fn unclear_future<T>(t: T) {}\n    |                                  ^ future returned by `unclear_future` is not `Send`\n    |\n note: captured value is not `Send`\n-  --> $DIR/future_not_send.rs:66:28\n+  --> $DIR/future_not_send.rs:65:28\n    |\n LL | async fn unclear_future<T>(t: T) {}\n    |                            ^ has type `T` which is not `Send`"}, {"sha": "b7012b43d29766d154786e866357b15b838d5756", "filename": "tests/ui/if_not_else.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,6 +1,9 @@\n #![warn(clippy::all)]\n #![warn(clippy::if_not_else)]\n \n+fn foo() -> bool {\n+    unimplemented!()\n+}\n fn bla() -> bool {\n     unimplemented!()\n }\n@@ -16,4 +19,11 @@ fn main() {\n     } else {\n         println!(\"Bunny\");\n     }\n+    if !foo() {\n+        println!(\"Foo\");\n+    } else if !bla() {\n+        println!(\"Bugs\");\n+    } else {\n+        println!(\"Bunny\");\n+    }\n }"}, {"sha": "8c8cc44bb035882e2484a96a8874351632c6be89", "filename": "tests/ui/if_not_else.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fif_not_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fif_not_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: unnecessary boolean `not` operation\n-  --> $DIR/if_not_else.rs:9:5\n+  --> $DIR/if_not_else.rs:12:5\n    |\n LL | /     if !bla() {\n LL | |         println!(\"Bugs\");\n@@ -12,7 +12,7 @@ LL | |     }\n    = help: remove the `!` and swap the blocks of the `if`/`else`\n \n error: unnecessary `!=` operation\n-  --> $DIR/if_not_else.rs:14:5\n+  --> $DIR/if_not_else.rs:17:5\n    |\n LL | /     if 4 != 5 {\n LL | |         println!(\"Bugs\");"}, {"sha": "fd96ca3f466eabe7cc9ed034040925a658f274c9", "filename": "tests/ui/implicit_hasher.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n // aux-build:implicit_hasher_macros.rs\n #![deny(clippy::implicit_hasher)]\n #![allow(unused)]"}, {"sha": "59b0fba2a4cfee460b8e2d120a91b01fb1c3d952", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,11 +1,11 @@\n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:17:35\n+  --> $DIR/implicit_hasher.rs:16:35\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for HashMap<K, V> {\n    |                                   ^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/implicit_hasher.rs:3:9\n+  --> $DIR/implicit_hasher.rs:2:9\n    |\n LL | #![deny(clippy::implicit_hasher)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -19,7 +19,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:26:36\n+  --> $DIR/implicit_hasher.rs:25:36\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for (HashMap<K, V>,) {\n    |                                    ^^^^^^^^^^^^^\n@@ -34,7 +34,7 @@ LL |         ((HashMap::default(),), (HashMap::with_capacity_and_hasher(10, Defa\n    |           ~~~~~~~~~~~~~~~~~~     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:31:19\n+  --> $DIR/implicit_hasher.rs:30:19\n    |\n LL | impl Foo<i16> for HashMap<String, String> {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -49,7 +49,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:48:32\n+  --> $DIR/implicit_hasher.rs:47:32\n    |\n LL | impl<T: Hash + Eq> Foo<i8> for HashSet<T> {\n    |                                ^^^^^^^^^^\n@@ -64,7 +64,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:53:19\n+  --> $DIR/implicit_hasher.rs:52:19\n    |\n LL | impl Foo<i16> for HashSet<String> {\n    |                   ^^^^^^^^^^^^^^^\n@@ -79,7 +79,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:70:23\n+  --> $DIR/implicit_hasher.rs:69:23\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                       ^^^^^^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _s\n    |           +++++++++++++++++++++++++++++            ~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:70:53\n+  --> $DIR/implicit_hasher.rs:69:53\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                     ^^^^^^^^^^^^\n@@ -101,7 +101,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set:\n    |           +++++++++++++++++++++++++++++                                          ~~~~~~~~~~~~~~~\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:74:43\n+  --> $DIR/implicit_hasher.rs:73:43\n    |\n LL |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n    |                                           ^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL |                 (HashMap::default(), HashMap::with_capacity_and_hasher(10,\n    |                  ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:82:33\n+  --> $DIR/implicit_hasher.rs:81:33\n    |\n LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                 ^^^^^^^^^^^^^^^^^\n@@ -135,7 +135,7 @@ LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i\n    |                     +++++++++++++++++++++++++++++            ~~~~~~~~~~~~~~~~~~~~\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:82:63\n+  --> $DIR/implicit_hasher.rs:81:63\n    |\n LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                               ^^^^^^^^^^^^\n@@ -150,7 +150,7 @@ LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i\n    |                     +++++++++++++++++++++++++++++                                          ~~~~~~~~~~~~~~~\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:101:35\n+  --> $DIR/implicit_hasher.rs:100:35\n    |\n LL | pub async fn election_vote(_data: HashMap<i32, i32>) {}\n    |                                   ^^^^^^^^^^^^^^^^^"}, {"sha": "a51f7bc6a29ffff52a301b84053f3c8f58bddc53", "filename": "tests/ui/implicit_return.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fimplicit_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fimplicit_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n // run-rustfix\n \n #![warn(clippy::implicit_return)]"}, {"sha": "03f8ec49d51e5457a57e2c9a71e30669fb984b1d", "filename": "tests/ui/implicit_return.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n // run-rustfix\n \n #![warn(clippy::implicit_return)]"}, {"sha": "522bc3bf895a7a3159dccdb74e56fe032c10c483", "filename": "tests/ui/implicit_return.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fimplicit_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fimplicit_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,91 +1,91 @@\n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:13:5\n+  --> $DIR/implicit_return.rs:12:5\n    |\n LL |     true\n    |     ^^^^ help: add `return` as shown: `return true`\n    |\n    = note: `-D clippy::implicit-return` implied by `-D warnings`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:17:15\n+  --> $DIR/implicit_return.rs:16:15\n    |\n LL |     if true { true } else { false }\n    |               ^^^^ help: add `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:17:29\n+  --> $DIR/implicit_return.rs:16:29\n    |\n LL |     if true { true } else { false }\n    |                             ^^^^^ help: add `return` as shown: `return false`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:23:17\n+  --> $DIR/implicit_return.rs:22:17\n    |\n LL |         true => false,\n    |                 ^^^^^ help: add `return` as shown: `return false`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:24:20\n+  --> $DIR/implicit_return.rs:23:20\n    |\n LL |         false => { true },\n    |                    ^^^^ help: add `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:37:9\n+  --> $DIR/implicit_return.rs:36:9\n    |\n LL |         break true;\n    |         ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:44:13\n+  --> $DIR/implicit_return.rs:43:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:52:13\n+  --> $DIR/implicit_return.rs:51:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:70:18\n+  --> $DIR/implicit_return.rs:69:18\n    |\n LL |     let _ = || { true };\n    |                  ^^^^ help: add `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:71:16\n+  --> $DIR/implicit_return.rs:70:16\n    |\n LL |     let _ = || true;\n    |                ^^^^ help: add `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:79:5\n+  --> $DIR/implicit_return.rs:78:5\n    |\n LL |     format!(\"test {}\", \"test\")\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `return` as shown: `return format!(\"test {}\", \"test\")`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:88:5\n+  --> $DIR/implicit_return.rs:87:5\n    |\n LL |     m!(true, false)\n    |     ^^^^^^^^^^^^^^^ help: add `return` as shown: `return m!(true, false)`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:94:13\n+  --> $DIR/implicit_return.rs:93:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:99:17\n+  --> $DIR/implicit_return.rs:98:17\n    |\n LL |                 break 'outer false;\n    |                 ^^^^^^^^^^^^^^^^^^ help: change `break` to `return` as shown: `return false`\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:114:5\n+  --> $DIR/implicit_return.rs:113:5\n    |\n LL | /     loop {\n LL | |         m!(true);\n@@ -100,7 +100,7 @@ LL +     }\n    |\n \n error: missing `return` statement\n-  --> $DIR/implicit_return.rs:128:5\n+  --> $DIR/implicit_return.rs:127:5\n    |\n LL |     true\n    |     ^^^^ help: add `return` as shown: `return true`"}, {"sha": "eb66d1afddce39dfce67d421a7229232b52b2b6f", "filename": "tests/ui/inconsistent_struct_constructor.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Finconsistent_struct_constructor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Finconsistent_struct_constructor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_struct_constructor.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// edition:2018\n #![warn(clippy::inconsistent_struct_constructor)]\n #![allow(clippy::redundant_field_names)]\n #![allow(clippy::unnecessary_operation)]"}, {"sha": "5caadc7c62083fb2b214df04ded3b16e2bb665f7", "filename": "tests/ui/inconsistent_struct_constructor.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_struct_constructor.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// edition:2018\n #![warn(clippy::inconsistent_struct_constructor)]\n #![allow(clippy::redundant_field_names)]\n #![allow(clippy::unnecessary_operation)]"}, {"sha": "c90189e964f09e68cea01babbb5d25ba03689909", "filename": "tests/ui/inconsistent_struct_constructor.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Finconsistent_struct_constructor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Finconsistent_struct_constructor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_struct_constructor.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,13 +1,13 @@\n error: struct constructor field order is inconsistent with struct definition field order\n-  --> $DIR/inconsistent_struct_constructor.rs:34:9\n+  --> $DIR/inconsistent_struct_constructor.rs:33:9\n    |\n LL |         Foo { y, x, z };\n    |         ^^^^^^^^^^^^^^^ help: try: `Foo { x, y, z }`\n    |\n    = note: `-D clippy::inconsistent-struct-constructor` implied by `-D warnings`\n \n error: struct constructor field order is inconsistent with struct definition field order\n-  --> $DIR/inconsistent_struct_constructor.rs:56:9\n+  --> $DIR/inconsistent_struct_constructor.rs:55:9\n    |\n LL | /         Foo {\n LL | |             z,"}, {"sha": "463a48b24a321e5ed8a91c20fee0029c35876f42", "filename": "tests/ui/issue-7447.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fissue-7447.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fissue-7447.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue-7447.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,19 @@\n+error: sub-expression diverges\n+  --> $DIR/issue-7447.rs:23:15\n+   |\n+LL |     byte_view(panic!());\n+   |               ^^^^^^^^\n+   |\n+   = note: `-D clippy::diverging-sub-expression` implied by `-D warnings`\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: sub-expression diverges\n+  --> $DIR/issue-7447.rs:24:19\n+   |\n+LL |     group_entries(panic!());\n+   |                   ^^^^^^^^\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d9d48189bd74e741f381f9449783ecefd5cce514", "filename": "tests/ui/issue_4266.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fissue_4266.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fissue_4266.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_4266.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n #![allow(dead_code)]\n \n async fn sink1<'a>(_: &'a str) {} // lint"}, {"sha": "20419457b47f0ee3018f9ec888939e1d96cfbae4", "filename": "tests/ui/issue_4266.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fissue_4266.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fissue_4266.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_4266.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,13 +1,13 @@\n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/issue_4266.rs:4:1\n+  --> $DIR/issue_4266.rs:3:1\n    |\n LL | async fn sink1<'a>(_: &'a str) {} // lint\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/issue_4266.rs:8:1\n+  --> $DIR/issue_4266.rs:7:1\n    |\n LL | async fn one_to_one<'a>(s: &'a str) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1e938e72b57775356d326a9f0bac9dcae6b57525", "filename": "tests/ui/len_without_is_empty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Flen_without_is_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Flen_without_is_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,3 @@\n-// edition:2018\n-\n #![warn(clippy::len_without_is_empty)]\n #![allow(dead_code, unused)]\n "}, {"sha": "a1f48f7610b44857edf7f6f8f9e6dbbc520c1a0d", "filename": "tests/ui/len_without_is_empty.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Flen_without_is_empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Flen_without_is_empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,93 +1,93 @@\n error: struct `PubOne` has a public `len` method, but no `is_empty` method\n-  --> $DIR/len_without_is_empty.rs:9:5\n+  --> $DIR/len_without_is_empty.rs:7:5\n    |\n LL |     pub fn len(&self) -> isize {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::len-without-is-empty` implied by `-D warnings`\n \n error: trait `PubTraitsToo` has a `len` method but no (possibly inherited) `is_empty` method\n-  --> $DIR/len_without_is_empty.rs:57:1\n+  --> $DIR/len_without_is_empty.rs:55:1\n    |\n LL | / pub trait PubTraitsToo {\n LL | |     fn len(&self) -> isize;\n LL | | }\n    | |_^\n \n error: struct `HasIsEmpty` has a public `len` method, but a private `is_empty` method\n-  --> $DIR/len_without_is_empty.rs:70:5\n+  --> $DIR/len_without_is_empty.rs:68:5\n    |\n LL |     pub fn len(&self) -> isize {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `is_empty` defined here\n-  --> $DIR/len_without_is_empty.rs:74:5\n+  --> $DIR/len_without_is_empty.rs:72:5\n    |\n LL |     fn is_empty(&self) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: struct `HasWrongIsEmpty` has a public `len` method, but the `is_empty` method has an unexpected signature\n-  --> $DIR/len_without_is_empty.rs:82:5\n+  --> $DIR/len_without_is_empty.rs:80:5\n    |\n LL |     pub fn len(&self) -> isize {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `is_empty` defined here\n-  --> $DIR/len_without_is_empty.rs:86:5\n+  --> $DIR/len_without_is_empty.rs:84:5\n    |\n LL |     pub fn is_empty(&self, x: u32) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected signature: `(&self) -> bool`\n \n error: struct `MismatchedSelf` has a public `len` method, but the `is_empty` method has an unexpected signature\n-  --> $DIR/len_without_is_empty.rs:94:5\n+  --> $DIR/len_without_is_empty.rs:92:5\n    |\n LL |     pub fn len(self) -> isize {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `is_empty` defined here\n-  --> $DIR/len_without_is_empty.rs:98:5\n+  --> $DIR/len_without_is_empty.rs:96:5\n    |\n LL |     pub fn is_empty(&self) -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected signature: `(self) -> bool`\n \n error: trait `DependsOnFoo` has a `len` method but no (possibly inherited) `is_empty` method\n-  --> $DIR/len_without_is_empty.rs:173:1\n+  --> $DIR/len_without_is_empty.rs:171:1\n    |\n LL | / pub trait DependsOnFoo: Foo {\n LL | |     fn len(&mut self) -> usize;\n LL | | }\n    | |_^\n \n error: struct `OptionalLen3` has a public `len` method, but the `is_empty` method has an unexpected signature\n-  --> $DIR/len_without_is_empty.rs:218:5\n+  --> $DIR/len_without_is_empty.rs:216:5\n    |\n LL |     pub fn len(&self) -> usize {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `is_empty` defined here\n-  --> $DIR/len_without_is_empty.rs:223:5\n+  --> $DIR/len_without_is_empty.rs:221:5\n    |\n LL |     pub fn is_empty(&self) -> Option<bool> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected signature: `(&self) -> bool`\n \n error: struct `ResultLen` has a public `len` method, but the `is_empty` method has an unexpected signature\n-  --> $DIR/len_without_is_empty.rs:230:5\n+  --> $DIR/len_without_is_empty.rs:228:5\n    |\n LL |     pub fn len(&self) -> Result<usize, ()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `is_empty` defined here\n-  --> $DIR/len_without_is_empty.rs:235:5\n+  --> $DIR/len_without_is_empty.rs:233:5\n    |\n LL |     pub fn is_empty(&self) -> Option<bool> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected signature: `(&self) -> bool` or `(&self) -> Result<bool>\n \n error: this returns a `Result<_, ()>`\n-  --> $DIR/len_without_is_empty.rs:230:5\n+  --> $DIR/len_without_is_empty.rs:228:5\n    |\n LL |     pub fn len(&self) -> Result<usize, ()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -96,23 +96,23 @@ LL |     pub fn len(&self) -> Result<usize, ()> {\n    = help: use a custom `Error` type instead\n \n error: this returns a `Result<_, ()>`\n-  --> $DIR/len_without_is_empty.rs:242:5\n+  --> $DIR/len_without_is_empty.rs:240:5\n    |\n LL |     pub fn len(&self) -> Result<usize, ()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a custom `Error` type instead\n \n error: this returns a `Result<_, ()>`\n-  --> $DIR/len_without_is_empty.rs:246:5\n+  --> $DIR/len_without_is_empty.rs:244:5\n    |\n LL |     pub fn is_empty(&self) -> Result<bool, ()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a custom `Error` type instead\n \n error: this returns a `Result<_, ()>`\n-  --> $DIR/len_without_is_empty.rs:253:5\n+  --> $DIR/len_without_is_empty.rs:251:5\n    |\n LL |     pub fn len(&self) -> Result<usize, ()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e60ce8492fc7716f70f3f490086d03d76904f07f", "filename": "tests/ui/literals.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fliterals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fliterals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -2,7 +2,8 @@\n \n #![warn(clippy::mixed_case_hex_literals)]\n #![warn(clippy::zero_prefixed_literal)]\n-#![allow(clippy::unseparated_literal_suffix)]\n+#![warn(clippy::unseparated_literal_suffix)]\n+#![warn(clippy::separated_literal_suffix)]\n #![allow(dead_code)]\n \n fn main() {"}, {"sha": "365b240747352d76bc06b3e802e04f0049dabec6", "filename": "tests/ui/literals.stderr", "status": "modified", "additions": 63, "deletions": 11, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fliterals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fliterals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,25 +1,65 @@\n+error: integer type suffix should not be separated by an underscore\n+  --> $DIR/literals.rs:12:15\n+   |\n+LL |     let ok4 = 0xab_cd_i32;\n+   |               ^^^^^^^^^^^ help: remove the underscore: `0xab_cdi32`\n+   |\n+   = note: `-D clippy::separated-literal-suffix` implied by `-D warnings`\n+\n+error: integer type suffix should not be separated by an underscore\n+  --> $DIR/literals.rs:13:15\n+   |\n+LL |     let ok5 = 0xAB_CD_u32;\n+   |               ^^^^^^^^^^^ help: remove the underscore: `0xAB_CDu32`\n+\n+error: integer type suffix should not be separated by an underscore\n+  --> $DIR/literals.rs:14:15\n+   |\n+LL |     let ok5 = 0xAB_CD_isize;\n+   |               ^^^^^^^^^^^^^ help: remove the underscore: `0xAB_CDisize`\n+\n error: inconsistent casing in hexadecimal literal\n-  --> $DIR/literals.rs:14:17\n+  --> $DIR/literals.rs:15:17\n    |\n LL |     let fail1 = 0xabCD;\n    |                 ^^^^^^\n    |\n    = note: `-D clippy::mixed-case-hex-literals` implied by `-D warnings`\n \n+error: integer type suffix should not be separated by an underscore\n+  --> $DIR/literals.rs:16:17\n+   |\n+LL |     let fail2 = 0xabCD_u32;\n+   |                 ^^^^^^^^^^ help: remove the underscore: `0xabCDu32`\n+\n error: inconsistent casing in hexadecimal literal\n-  --> $DIR/literals.rs:15:17\n+  --> $DIR/literals.rs:16:17\n    |\n LL |     let fail2 = 0xabCD_u32;\n    |                 ^^^^^^^^^^\n \n+error: integer type suffix should not be separated by an underscore\n+  --> $DIR/literals.rs:17:17\n+   |\n+LL |     let fail2 = 0xabCD_isize;\n+   |                 ^^^^^^^^^^^^ help: remove the underscore: `0xabCDisize`\n+\n error: inconsistent casing in hexadecimal literal\n-  --> $DIR/literals.rs:16:17\n+  --> $DIR/literals.rs:17:17\n    |\n LL |     let fail2 = 0xabCD_isize;\n    |                 ^^^^^^^^^^^^\n \n+error: integer type suffix should be separated by an underscore\n+  --> $DIR/literals.rs:18:27\n+   |\n+LL |     let fail_multi_zero = 000_123usize;\n+   |                           ^^^^^^^^^^^^ help: add an underscore: `000_123_usize`\n+   |\n+   = note: `-D clippy::unseparated-literal-suffix` implied by `-D warnings`\n+\n error: this is a decimal constant\n-  --> $DIR/literals.rs:17:27\n+  --> $DIR/literals.rs:18:27\n    |\n LL |     let fail_multi_zero = 000_123usize;\n    |                           ^^^^^^^^^^^^\n@@ -34,8 +74,14 @@ help: if you mean to use an octal constant, use `0o`\n LL |     let fail_multi_zero = 0o123usize;\n    |                           ~~~~~~~~~~\n \n+error: integer type suffix should not be separated by an underscore\n+  --> $DIR/literals.rs:21:16\n+   |\n+LL |     let ok10 = 0_i64;\n+   |                ^^^^^ help: remove the underscore: `0i64`\n+\n error: this is a decimal constant\n-  --> $DIR/literals.rs:21:17\n+  --> $DIR/literals.rs:22:17\n    |\n LL |     let fail8 = 0123;\n    |                 ^^^^\n@@ -49,39 +95,45 @@ help: if you mean to use an octal constant, use `0o`\n LL |     let fail8 = 0o123;\n    |                 ~~~~~\n \n+error: integer type suffix should not be separated by an underscore\n+  --> $DIR/literals.rs:31:16\n+   |\n+LL |     let ok17 = 0x123_4567_8901_usize;\n+   |                ^^^^^^^^^^^^^^^^^^^^^ help: remove the underscore: `0x123_4567_8901usize`\n+\n error: digits grouped inconsistently by underscores\n-  --> $DIR/literals.rs:33:18\n+  --> $DIR/literals.rs:34:18\n    |\n LL |     let fail19 = 12_3456_21;\n    |                  ^^^^^^^^^^ help: consider: `12_345_621`\n    |\n    = note: `-D clippy::inconsistent-digit-grouping` implied by `-D warnings`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/literals.rs:34:18\n+  --> $DIR/literals.rs:35:18\n    |\n LL |     let fail22 = 3__4___23;\n    |                  ^^^^^^^^^ help: consider: `3_423`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/literals.rs:35:18\n+  --> $DIR/literals.rs:36:18\n    |\n LL |     let fail23 = 3__16___23;\n    |                  ^^^^^^^^^^ help: consider: `31_623`\n \n error: digits of hex or binary literal not grouped by four\n-  --> $DIR/literals.rs:37:18\n+  --> $DIR/literals.rs:38:18\n    |\n LL |     let fail24 = 0xAB_ABC_AB;\n    |                  ^^^^^^^^^^^ help: consider: `0x0ABA_BCAB`\n    |\n    = note: `-D clippy::unusual-byte-groupings` implied by `-D warnings`\n \n error: digits of hex or binary literal not grouped by four\n-  --> $DIR/literals.rs:38:18\n+  --> $DIR/literals.rs:39:18\n    |\n LL |     let fail25 = 0b01_100_101;\n    |                  ^^^^^^^^^^^^ help: consider: `0b0110_0101`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 18 previous errors\n "}, {"sha": "9171558f3a2d74d1f79d2c9b62d6a3282db33b82", "filename": "tests/ui/macro_use_imports.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmacro_use_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmacro_use_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags: --edition 2018\n // aux-build:macro_rules.rs\n // aux-build:macro_use_helper.rs\n // aux-build:proc_macro_derive.rs"}, {"sha": "cd01fd43f6d325eefb79e07d1bc71753ef1a164c", "filename": "tests/ui/macro_use_imports.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmacro_use_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmacro_use_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags: --edition 2018\n // aux-build:macro_rules.rs\n // aux-build:macro_use_helper.rs\n // aux-build:proc_macro_derive.rs"}, {"sha": "f8c86c8d9179f8af918b684eb9294c18ea4a7008", "filename": "tests/ui/macro_use_imports.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmacro_use_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmacro_use_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,28 +1,28 @@\n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:19:5\n+  --> $DIR/macro_use_imports.rs:18:5\n    |\n LL |     #[macro_use]\n    |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro};`\n    |\n    = note: `-D clippy::macro-use-imports` implied by `-D warnings`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:25:5\n+  --> $DIR/macro_use_imports.rs:20:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add;`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mini_mac::ClippyMiniMacroTest;`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:21:5\n+  --> $DIR/macro_use_imports.rs:22:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mini_mac::ClippyMiniMacroTest;`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:23:5\n+  --> $DIR/macro_use_imports.rs:24:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add;`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "11fe06c572471cb9f95e5dad3915ceb10d638601", "filename": "tests/ui/manual_assert.edition2018.fixed", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_assert.edition2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_assert.edition2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,8 @@\n+// revisions: edition2018 edition2021\n+// [edition2018] edition:2018\n+// [edition2021] edition:2021\n // run-rustfix\n-#![warn(clippy::if_then_panic)]\n+#![warn(clippy::manual_assert)]\n \n fn main() {\n     let a = vec![1, 2, 3];", "previous_filename": "tests/ui/if_then_panic.fixed"}, {"sha": "03c03472f908f0c58d64a765798dc8cc89a09fbb", "filename": "tests/ui/manual_assert.edition2018.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_assert.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_assert.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,55 +1,55 @@\n error: only a `panic!` in `if`-then statement\n-  --> $DIR/if_then_panic.rs:19:5\n+  --> $DIR/manual_assert.rs:22:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n LL | |     }\n    | |_____^ help: try: `assert!(a.is_empty(), \"qaqaq{:?}\", a);`\n    |\n-   = note: `-D clippy::if-then-panic` implied by `-D warnings`\n+   = note: `-D clippy::manual-assert` implied by `-D warnings`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/if_then_panic.rs:22:5\n+  --> $DIR/manual_assert.rs:25:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n    | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/if_then_panic.rs:39:5\n+  --> $DIR/manual_assert.rs:42:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n    | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/if_then_panic.rs:42:5\n+  --> $DIR/manual_assert.rs:45:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/if_then_panic.rs:45:5\n+  --> $DIR/manual_assert.rs:48:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/if_then_panic.rs:48:5\n+  --> $DIR/manual_assert.rs:51:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/if_then_panic.rs:51:5\n+  --> $DIR/manual_assert.rs:54:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");", "previous_filename": "tests/ui/if_then_panic.stderr"}, {"sha": "11fe06c572471cb9f95e5dad3915ceb10d638601", "filename": "tests/ui/manual_assert.edition2021.fixed", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_assert.edition2021.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_assert.edition2021.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,43 @@\n+// revisions: edition2018 edition2021\n+// [edition2018] edition:2018\n+// [edition2021] edition:2021\n+// run-rustfix\n+#![warn(clippy::manual_assert)]\n+\n+fn main() {\n+    let a = vec![1, 2, 3];\n+    let c = Some(2);\n+    if !a.is_empty()\n+        && a.len() == 3\n+        && c != None\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+    {\n+        panic!(\"qaqaq{:?}\", a);\n+    }\n+    assert!(a.is_empty(), \"qaqaq{:?}\", a);\n+    assert!(a.is_empty(), \"qwqwq\");\n+    if a.len() == 3 {\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+    }\n+    if let Some(b) = c {\n+        panic!(\"orz {}\", b);\n+    }\n+    if a.len() == 3 {\n+        panic!(\"qaqaq\");\n+    } else {\n+        println!(\"qwq\");\n+    }\n+    let b = vec![1, 2, 3];\n+    assert!(!b.is_empty(), \"panic1\");\n+    assert!(!(b.is_empty() && a.is_empty()), \"panic2\");\n+    assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n+    assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n+    assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n+}"}, {"sha": "03c03472f908f0c58d64a765798dc8cc89a09fbb", "filename": "tests/ui/manual_assert.edition2021.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_assert.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_assert.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,60 @@\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:22:5\n+   |\n+LL | /     if !a.is_empty() {\n+LL | |         panic!(\"qaqaq{:?}\", a);\n+LL | |     }\n+   | |_____^ help: try: `assert!(a.is_empty(), \"qaqaq{:?}\", a);`\n+   |\n+   = note: `-D clippy::manual-assert` implied by `-D warnings`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:25:5\n+   |\n+LL | /     if !a.is_empty() {\n+LL | |         panic!(\"qwqwq\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:42:5\n+   |\n+LL | /     if b.is_empty() {\n+LL | |         panic!(\"panic1\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:45:5\n+   |\n+LL | /     if b.is_empty() && a.is_empty() {\n+LL | |         panic!(\"panic2\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:48:5\n+   |\n+LL | /     if a.is_empty() && !b.is_empty() {\n+LL | |         panic!(\"panic3\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:51:5\n+   |\n+LL | /     if b.is_empty() || a.is_empty() {\n+LL | |         panic!(\"panic4\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:54:5\n+   |\n+LL | /     if a.is_empty() || !b.is_empty() {\n+LL | |         panic!(\"panic5\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "11fe06c572471cb9f95e5dad3915ceb10d638601", "filename": "tests/ui/manual_assert.fixed", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_assert.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_assert.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,43 @@\n+// revisions: edition2018 edition2021\n+// [edition2018] edition:2018\n+// [edition2021] edition:2021\n+// run-rustfix\n+#![warn(clippy::manual_assert)]\n+\n+fn main() {\n+    let a = vec![1, 2, 3];\n+    let c = Some(2);\n+    if !a.is_empty()\n+        && a.len() == 3\n+        && c != None\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+    {\n+        panic!(\"qaqaq{:?}\", a);\n+    }\n+    assert!(a.is_empty(), \"qaqaq{:?}\", a);\n+    assert!(a.is_empty(), \"qwqwq\");\n+    if a.len() == 3 {\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+    }\n+    if let Some(b) = c {\n+        panic!(\"orz {}\", b);\n+    }\n+    if a.len() == 3 {\n+        panic!(\"qaqaq\");\n+    } else {\n+        println!(\"qwq\");\n+    }\n+    let b = vec![1, 2, 3];\n+    assert!(!b.is_empty(), \"panic1\");\n+    assert!(!(b.is_empty() && a.is_empty()), \"panic2\");\n+    assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n+    assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n+    assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n+}"}, {"sha": "8713426fc8886b9223e7631a6241162c7fc8ce88", "filename": "tests/ui/manual_assert.rs", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,8 @@\n+// revisions: edition2018 edition2021\n+// [edition2018] edition:2018\n+// [edition2021] edition:2021\n // run-rustfix\n-#![warn(clippy::if_then_panic)]\n+#![warn(clippy::manual_assert)]\n \n fn main() {\n     let a = vec![1, 2, 3];", "previous_filename": "tests/ui/if_then_panic.rs"}, {"sha": "136cc96be70cafa57951fc7edd89c784892803b1", "filename": "tests/ui/manual_async_fn.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_async_fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_async_fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// edition:2018\n #![warn(clippy::manual_async_fn)]\n #![allow(unused)]\n "}, {"sha": "ddc453ffdb7500958c5e26cbf62a65a4859640f7", "filename": "tests/ui/manual_async_fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// edition:2018\n #![warn(clippy::manual_async_fn)]\n #![allow(unused)]\n "}, {"sha": "7435f46074c8167287b383f5cee7f67c3e5afb0f", "filename": "tests/ui/manual_async_fn.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_async_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_async_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:8:1\n+  --> $DIR/manual_async_fn.rs:7:1\n    |\n LL | fn fut() -> impl Future<Output = i32> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ LL | fn fut() -> impl Future<Output = i32> { 42 }\n    |                                       ~~~~~~\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:13:1\n+  --> $DIR/manual_async_fn.rs:12:1\n    |\n LL | fn fut2() ->impl Future<Output = i32> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -30,7 +30,7 @@ LL | fn fut2() ->impl Future<Output = i32> { 42 }\n    |                                       ~~~~~~\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:18:1\n+  --> $DIR/manual_async_fn.rs:17:1\n    |\n LL | fn fut3()-> impl Future<Output = i32> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -45,7 +45,7 @@ LL | fn fut3()-> impl Future<Output = i32> { 42 }\n    |                                       ~~~~~~\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:22:1\n+  --> $DIR/manual_async_fn.rs:21:1\n    |\n LL | fn empty_fut() -> impl Future<Output = ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL | fn empty_fut() -> impl Future<Output = ()> {}\n    |                                            ~~\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:27:1\n+  --> $DIR/manual_async_fn.rs:26:1\n    |\n LL | fn empty_fut2() ->impl Future<Output = ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -75,7 +75,7 @@ LL | fn empty_fut2() ->impl Future<Output = ()> {}\n    |                                            ~~\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:32:1\n+  --> $DIR/manual_async_fn.rs:31:1\n    |\n LL | fn empty_fut3()-> impl Future<Output = ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL | fn empty_fut3()-> impl Future<Output = ()> {}\n    |                                            ~~\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:36:1\n+  --> $DIR/manual_async_fn.rs:35:1\n    |\n LL | fn core_fut() -> impl core::future::Future<Output = i32> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -105,7 +105,7 @@ LL | fn core_fut() -> impl core::future::Future<Output = i32> { 42 }\n    |                                                          ~~~~~~\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:58:5\n+  --> $DIR/manual_async_fn.rs:57:5\n    |\n LL |     fn inh_fut() -> impl Future<Output = i32> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -125,7 +125,7 @@ LL +             let c = 21;\n  ...\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:93:1\n+  --> $DIR/manual_async_fn.rs:92:1\n    |\n LL | fn elided(_: &i32) -> impl Future<Output = i32> + '_ {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -140,7 +140,7 @@ LL | fn elided(_: &i32) -> impl Future<Output = i32> + '_ { 42 }\n    |                                                      ~~~~~~\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:102:1\n+  --> $DIR/manual_async_fn.rs:101:1\n    |\n LL | fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "294d79abc0459fe481a9125f07b1fd8faf67ac69", "filename": "tests/ui/manual_map_option.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_map_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_map_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n // run-rustfix\n \n #![warn(clippy::manual_map)]"}, {"sha": "d11bf5ecb825ae28a1ae76ba6f1594199e37dfc8", "filename": "tests/ui/manual_map_option.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_map_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_map_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n // run-rustfix\n \n #![warn(clippy::manual_map)]"}, {"sha": "0036b8151ded0514259d03687784e3597716b977", "filename": "tests/ui/manual_map_option.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_map_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmanual_map_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:15:5\n+  --> $DIR/manual_map_option.rs:14:5\n    |\n LL | /     match Some(0) {\n LL | |         Some(_) => Some(2),\n@@ -10,7 +10,7 @@ LL | |     };\n    = note: `-D clippy::manual-map` implied by `-D warnings`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:20:5\n+  --> $DIR/manual_map_option.rs:19:5\n    |\n LL | /     match Some(0) {\n LL | |         Some(x) => Some(x + 1),\n@@ -19,7 +19,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(|x| x + 1)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:25:5\n+  --> $DIR/manual_map_option.rs:24:5\n    |\n LL | /     match Some(\"\") {\n LL | |         Some(x) => Some(x.is_empty()),\n@@ -28,7 +28,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(\"\").map(|x| x.is_empty())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:30:5\n+  --> $DIR/manual_map_option.rs:29:5\n    |\n LL | /     if let Some(x) = Some(0) {\n LL | |         Some(!x)\n@@ -38,7 +38,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(|x| !x)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:37:5\n+  --> $DIR/manual_map_option.rs:36:5\n    |\n LL | /     match Some(0) {\n LL | |         Some(x) => { Some(std::convert::identity(x)) }\n@@ -47,7 +47,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(std::convert::identity)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:42:5\n+  --> $DIR/manual_map_option.rs:41:5\n    |\n LL | /     match Some(&String::new()) {\n LL | |         Some(x) => Some(str::len(x)),\n@@ -56,7 +56,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(&String::new()).map(|x| str::len(x))`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:52:5\n+  --> $DIR/manual_map_option.rs:51:5\n    |\n LL | /     match &Some([0, 1]) {\n LL | |         Some(x) => Some(x[0]),\n@@ -65,7 +65,7 @@ LL | |     };\n    | |_____^ help: try this: `Some([0, 1]).as_ref().map(|x| x[0])`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:57:5\n+  --> $DIR/manual_map_option.rs:56:5\n    |\n LL | /     match &Some(0) {\n LL | |         &Some(x) => Some(x * 2),\n@@ -74,7 +74,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(|x| x * 2)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:62:5\n+  --> $DIR/manual_map_option.rs:61:5\n    |\n LL | /     match Some(String::new()) {\n LL | |         Some(ref x) => Some(x.is_empty()),\n@@ -83,7 +83,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(String::new()).as_ref().map(|x| x.is_empty())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:67:5\n+  --> $DIR/manual_map_option.rs:66:5\n    |\n LL | /     match &&Some(String::new()) {\n LL | |         Some(x) => Some(x.len()),\n@@ -92,7 +92,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(String::new()).as_ref().map(|x| x.len())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:72:5\n+  --> $DIR/manual_map_option.rs:71:5\n    |\n LL | /     match &&Some(0) {\n LL | |         &&Some(x) => Some(x + x),\n@@ -101,7 +101,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(|x| x + x)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:85:9\n+  --> $DIR/manual_map_option.rs:84:9\n    |\n LL | /         match &mut Some(String::new()) {\n LL | |             Some(x) => Some(x.push_str(\"\")),\n@@ -110,7 +110,7 @@ LL | |         };\n    | |_________^ help: try this: `Some(String::new()).as_mut().map(|x| x.push_str(\"\"))`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:91:5\n+  --> $DIR/manual_map_option.rs:90:5\n    |\n LL | /     match &mut Some(String::new()) {\n LL | |         Some(ref x) => Some(x.len()),\n@@ -119,7 +119,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(String::new()).as_ref().map(|x| x.len())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:96:5\n+  --> $DIR/manual_map_option.rs:95:5\n    |\n LL | /     match &mut &Some(String::new()) {\n LL | |         Some(x) => Some(x.is_empty()),\n@@ -128,7 +128,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(String::new()).as_ref().map(|x| x.is_empty())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:101:5\n+  --> $DIR/manual_map_option.rs:100:5\n    |\n LL | /     match Some((0, 1, 2)) {\n LL | |         Some((x, y, z)) => Some(x + y + z),\n@@ -137,7 +137,7 @@ LL | |     };\n    | |_____^ help: try this: `Some((0, 1, 2)).map(|(x, y, z)| x + y + z)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:106:5\n+  --> $DIR/manual_map_option.rs:105:5\n    |\n LL | /     match Some([1, 2, 3]) {\n LL | |         Some([first, ..]) => Some(first),\n@@ -146,7 +146,7 @@ LL | |     };\n    | |_____^ help: try this: `Some([1, 2, 3]).map(|[first, ..]| first)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:111:5\n+  --> $DIR/manual_map_option.rs:110:5\n    |\n LL | /     match &Some((String::new(), \"test\")) {\n LL | |         Some((x, y)) => Some((y, x)),\n@@ -155,7 +155,7 @@ LL | |     };\n    | |_____^ help: try this: `Some((String::new(), \"test\")).as_ref().map(|(x, y)| (y, x))`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:169:5\n+  --> $DIR/manual_map_option.rs:168:5\n    |\n LL | /     match Some(0) {\n LL | |         Some(x) => Some(vec![x]),\n@@ -164,7 +164,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(|x| vec![x])`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:174:5\n+  --> $DIR/manual_map_option.rs:173:5\n    |\n LL | /     match option_env!(\"\") {\n LL | |         Some(x) => Some(String::from(x)),\n@@ -173,7 +173,7 @@ LL | |     };\n    | |_____^ help: try this: `option_env!(\"\").map(String::from)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:194:12\n+  --> $DIR/manual_map_option.rs:193:12\n    |\n LL |       } else if let Some(x) = Some(0) {\n    |  ____________^\n@@ -184,7 +184,7 @@ LL | |     };\n    | |_____^ help: try this: `{ Some(0).map(|x| x + 1) }`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:202:12\n+  --> $DIR/manual_map_option.rs:201:12\n    |\n LL |       } else if let Some(x) = Some(0) {\n    |  ____________^"}, {"sha": "845986a4eadabeee40414a90d26162cbb4ba5007", "filename": "tests/ui/match_overlapping_arm.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmatch_overlapping_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmatch_overlapping_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_overlapping_arm.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -100,6 +100,13 @@ fn overlapping() {\n         _ => (),\n     }\n \n+    // Issue #7829\n+    match 0 {\n+        -1..=1 => (),\n+        -2..=2 => (),\n+        _ => (),\n+    }\n+\n     if let None = Some(42) {\n         // nothing\n     } else if let None = Some(42) {"}, {"sha": "7e3674ab8c9f2c633094cce82c11d3351ebb8cb8", "filename": "tests/ui/match_ref_pats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmatch_ref_pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmatch_ref_pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_ref_pats.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::match_ref_pats)]\n-#![allow(clippy::equatable_if_let)]\n+#![allow(clippy::equatable_if_let, clippy::enum_variant_names)]\n \n fn ref_pats() {\n     {"}, {"sha": "ac555c87d83b21a14beecece000d2cd7a55cbbdf", "filename": "tests/ui/match_str_case_mismatch.rs", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_str_case_mismatch.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -12,6 +12,49 @@ fn as_str_match() {\n     }\n }\n \n+fn non_alphabetic() {\n+    let var = \"~!@#$%^&*()-_=+FOO\";\n+\n+    match var.to_ascii_lowercase().as_str() {\n+        \"1234567890\" => {},\n+        \"~!@#$%^&*()-_=+foo\" => {},\n+        \"\\n\\r\\t\\x7F\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn unicode_cased() {\n+    let var = \"\u0412\u041e\u0414\u042b\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"\u6c34\" => {},\n+        \"\u03bd\u03b5\u03c1\u03cc\" => {},\n+        \"\u0432\u043e\u0434\u044b\" => {},\n+        \"\ubb3c\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn titlecase() {\n+    let var = \"Bar\u01f2\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"foo\u01c9\" => {},\n+        \"bar\u01f3\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn no_case_equivalent() {\n+    let var = \"bar\u0281\";\n+\n+    match var.to_uppercase().as_str() {\n+        \"FOO\u0255\" => {},\n+        \"BAR\u0281\" => {},\n+        _ => {},\n+    }\n+}\n+\n fn addrof_unary_match() {\n     let var = \"BAR\";\n \n@@ -70,6 +113,49 @@ fn as_str_match_mismatch() {\n     }\n }\n \n+fn non_alphabetic_mismatch() {\n+    let var = \"~!@#$%^&*()-_=+FOO\";\n+\n+    match var.to_ascii_lowercase().as_str() {\n+        \"1234567890\" => {},\n+        \"~!@#$%^&*()-_=+Foo\" => {},\n+        \"\\n\\r\\t\\x7F\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn unicode_cased_mismatch() {\n+    let var = \"\u0412\u041e\u0414\u042b\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"\u6c34\" => {},\n+        \"\u03bd\u03b5\u03c1\u03cc\" => {},\n+        \"\u0412\u043e\u0434\u044b\" => {},\n+        \"\ubb3c\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn titlecase_mismatch() {\n+    let var = \"Bar\u01f2\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"foo\u01c9\" => {},\n+        \"bar\u01f2\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn no_case_equivalent_mismatch() {\n+    let var = \"bar\u0281\";\n+\n+    match var.to_uppercase().as_str() {\n+        \"FOO\u0255\" => {},\n+        \"bAR\u0281\" => {},\n+        _ => {},\n+    }\n+}\n+\n fn addrof_unary_match_mismatch() {\n     let var = \"BAR\";\n "}, {"sha": "92baa40ef28f06f99746326de19b31e53055d703", "filename": "tests/ui/match_str_case_mismatch.stderr", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmatch_str_case_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmatch_str_case_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_str_case_mismatch.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:68:9\n+  --> $DIR/match_str_case_mismatch.rs:111:9\n    |\n LL |         \"Bar\" => {},\n    |         ^^^^^\n@@ -11,7 +11,51 @@ LL |         \"bar\" => {},\n    |         ~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:78:9\n+  --> $DIR/match_str_case_mismatch.rs:121:9\n+   |\n+LL |         \"~!@#$%^&*()-_=+Foo\" => {},\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider changing the case of this arm to respect `to_ascii_lowercase`\n+   |\n+LL |         \"~!@#$%^&*()-_=+foo\" => {},\n+   |         ~~~~~~~~~~~~~~~~~~~~\n+\n+error: this `match` arm has a differing case than its expression\n+  --> $DIR/match_str_case_mismatch.rs:133:9\n+   |\n+LL |         \"\u0412\u043e\u0434\u044b\" => {},\n+   |         ^^^^^^\n+   |\n+help: consider changing the case of this arm to respect `to_lowercase`\n+   |\n+LL |         \"\u0432\u043e\u0434\u044b\" => {},\n+   |         ~~~~~~\n+\n+error: this `match` arm has a differing case than its expression\n+  --> $DIR/match_str_case_mismatch.rs:144:9\n+   |\n+LL |         \"bar\u01f2\" => {},\n+   |         ^^^^^^\n+   |\n+help: consider changing the case of this arm to respect `to_lowercase`\n+   |\n+LL |         \"bar\u01f3\" => {},\n+   |         ~~~~~~\n+\n+error: this `match` arm has a differing case than its expression\n+  --> $DIR/match_str_case_mismatch.rs:154:9\n+   |\n+LL |         \"bAR\u0281\" => {},\n+   |         ^^^^^^\n+   |\n+help: consider changing the case of this arm to respect `to_uppercase`\n+   |\n+LL |         \"BAR\u0281\" => {},\n+   |         ~~~~~~\n+\n+error: this `match` arm has a differing case than its expression\n+  --> $DIR/match_str_case_mismatch.rs:164:9\n    |\n LL |         \"Bar\" => {},\n    |         ^^^^^\n@@ -22,7 +66,7 @@ LL |         \"bar\" => {},\n    |         ~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:93:9\n+  --> $DIR/match_str_case_mismatch.rs:179:9\n    |\n LL |         \"bAR\" => {},\n    |         ^^^^^\n@@ -32,5 +76,5 @@ help: consider changing the case of this arm to respect `to_ascii_uppercase`\n LL |         \"BAR\" => {},\n    |         ~~~~~\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "2a4012039ba97a62b993f0234906695186293e7f", "filename": "tests/ui/match_wild_err_arm.edition2018.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmatch_wild_err_arm.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmatch_wild_err_arm.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.edition2018.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: `Err(_)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:11:9\n+  --> $DIR/match_wild_err_arm.rs:14:9\n    |\n LL |         Err(_) => panic!(\"err\"),\n    |         ^^^^^^\n@@ -8,23 +8,23 @@ LL |         Err(_) => panic!(\"err\"),\n    = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: `Err(_)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:17:9\n+  --> $DIR/match_wild_err_arm.rs:20:9\n    |\n LL |         Err(_) => panic!(),\n    |         ^^^^^^\n    |\n    = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: `Err(_)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:23:9\n+  --> $DIR/match_wild_err_arm.rs:26:9\n    |\n LL |         Err(_) => {\n    |         ^^^^^^\n    |\n    = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n \n error: `Err(_e)` matches all errors\n-  --> $DIR/match_wild_err_arm.rs:31:9\n+  --> $DIR/match_wild_err_arm.rs:34:9\n    |\n LL |         Err(_e) => panic!(),\n    |         ^^^^^^^", "previous_filename": "tests/ui/match_wild_err_arm.stderr"}, {"sha": "2a4012039ba97a62b993f0234906695186293e7f", "filename": "tests/ui/match_wild_err_arm.edition2021.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmatch_wild_err_arm.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmatch_wild_err_arm.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.edition2021.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,35 @@\n+error: `Err(_)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:14:9\n+   |\n+LL |         Err(_) => panic!(\"err\"),\n+   |         ^^^^^^\n+   |\n+   = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n+\n+error: `Err(_)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:20:9\n+   |\n+LL |         Err(_) => panic!(),\n+   |         ^^^^^^\n+   |\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n+\n+error: `Err(_)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:26:9\n+   |\n+LL |         Err(_) => {\n+   |         ^^^^^^\n+   |\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n+\n+error: `Err(_e)` matches all errors\n+  --> $DIR/match_wild_err_arm.rs:34:9\n+   |\n+LL |         Err(_e) => panic!(),\n+   |         ^^^^^^^\n+   |\n+   = note: match each error separately or use the error output, or use `.except(msg)` if the error case is unreachable\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "0a86144b95d5bcc59b148e298783caa02d017217", "filename": "tests/ui/match_wild_err_arm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmatch_wild_err_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmatch_wild_err_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wild_err_arm.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,3 +1,6 @@\n+// revisions: edition2018 edition2021\n+// [edition2018] edition:2018\n+// [edition2021] edition:2021\n #![feature(exclusive_range_pattern)]\n #![allow(clippy::match_same_arms)]\n #![warn(clippy::match_wild_err_arm)]"}, {"sha": "977ce54327b3d984a4f61fca7c2967b734a3ce57", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n // aux-build:option_helpers.rs\n-// edition:2018\n \n #![warn(clippy::all, clippy::pedantic)]\n #![allow("}, {"sha": "b63672dd6fdbb546dac805e74727f9bf8982851f", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: methods called `new` usually return `Self`\n-  --> $DIR/methods.rs:105:5\n+  --> $DIR/methods.rs:104:5\n    |\n LL | /     fn new() -> i32 {\n LL | |         0\n@@ -9,7 +9,7 @@ LL | |     }\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead\n-  --> $DIR/methods.rs:126:13\n+  --> $DIR/methods.rs:125:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^"}, {"sha": "148531c285d3d310ed9011992604cf8a5d4c4b43", "filename": "tests/ui/missing-doc.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmissing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmissing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -3,7 +3,6 @@\n // injected intrinsics by the compiler.\n #![allow(dead_code)]\n #![feature(global_asm)]\n-\n //! Some garbage docs for the crate here\n #![doc = \"More garbage\"]\n \n@@ -90,10 +89,10 @@ mod internal_impl {\n }\n /// dox\n pub mod public_interface {\n-    pub use internal_impl::documented as foo;\n-    pub use internal_impl::globbed::*;\n-    pub use internal_impl::undocumented1 as bar;\n-    pub use internal_impl::{documented, undocumented2};\n+    pub use crate::internal_impl::documented as foo;\n+    pub use crate::internal_impl::globbed::*;\n+    pub use crate::internal_impl::undocumented1 as bar;\n+    pub use crate::internal_impl::{documented, undocumented2};\n }\n \n fn main() {}"}, {"sha": "7a3a448c9d6c2730e407e220b73297e57e576119", "filename": "tests/ui/missing-doc.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmissing-doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmissing-doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,43 +1,43 @@\n error: missing documentation for a type alias\n-  --> $DIR/missing-doc.rs:10:1\n+  --> $DIR/missing-doc.rs:9:1\n    |\n LL | type Typedef = String;\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::missing-docs-in-private-items` implied by `-D warnings`\n \n error: missing documentation for a type alias\n-  --> $DIR/missing-doc.rs:11:1\n+  --> $DIR/missing-doc.rs:10:1\n    |\n LL | pub type PubTypedef = String;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a module\n-  --> $DIR/missing-doc.rs:13:1\n+  --> $DIR/missing-doc.rs:12:1\n    |\n LL | mod module_no_dox {}\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a module\n-  --> $DIR/missing-doc.rs:14:1\n+  --> $DIR/missing-doc.rs:13:1\n    |\n LL | pub mod pub_module_no_dox {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:18:1\n+  --> $DIR/missing-doc.rs:17:1\n    |\n LL | pub fn foo2() {}\n    | ^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:19:1\n+  --> $DIR/missing-doc.rs:18:1\n    |\n LL | fn foo3() {}\n    | ^^^^^^^^^^^^\n \n error: missing documentation for an enum\n-  --> $DIR/missing-doc.rs:33:1\n+  --> $DIR/missing-doc.rs:32:1\n    |\n LL | / enum Baz {\n LL | |     BazA { a: isize, b: isize },\n@@ -46,75 +46,75 @@ LL | | }\n    | |_^\n \n error: missing documentation for a variant\n-  --> $DIR/missing-doc.rs:34:5\n+  --> $DIR/missing-doc.rs:33:5\n    |\n LL |     BazA { a: isize, b: isize },\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc.rs:34:12\n+  --> $DIR/missing-doc.rs:33:12\n    |\n LL |     BazA { a: isize, b: isize },\n    |            ^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc.rs:34:22\n+  --> $DIR/missing-doc.rs:33:22\n    |\n LL |     BazA { a: isize, b: isize },\n    |                      ^^^^^^^^\n \n error: missing documentation for a variant\n-  --> $DIR/missing-doc.rs:35:5\n+  --> $DIR/missing-doc.rs:34:5\n    |\n LL |     BarB,\n    |     ^^^^\n \n error: missing documentation for an enum\n-  --> $DIR/missing-doc.rs:38:1\n+  --> $DIR/missing-doc.rs:37:1\n    |\n LL | / pub enum PubBaz {\n LL | |     PubBazA { a: isize },\n LL | | }\n    | |_^\n \n error: missing documentation for a variant\n-  --> $DIR/missing-doc.rs:39:5\n+  --> $DIR/missing-doc.rs:38:5\n    |\n LL |     PubBazA { a: isize },\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc.rs:39:15\n+  --> $DIR/missing-doc.rs:38:15\n    |\n LL |     PubBazA { a: isize },\n    |               ^^^^^^^^\n \n error: missing documentation for a constant\n-  --> $DIR/missing-doc.rs:59:1\n+  --> $DIR/missing-doc.rs:58:1\n    |\n LL | const FOO: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a constant\n-  --> $DIR/missing-doc.rs:66:1\n+  --> $DIR/missing-doc.rs:65:1\n    |\n LL | pub const FOO4: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a static\n-  --> $DIR/missing-doc.rs:68:1\n+  --> $DIR/missing-doc.rs:67:1\n    |\n LL | static BAR: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a static\n-  --> $DIR/missing-doc.rs:75:1\n+  --> $DIR/missing-doc.rs:74:1\n    |\n LL | pub static BAR4: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a module\n-  --> $DIR/missing-doc.rs:77:1\n+  --> $DIR/missing-doc.rs:76:1\n    |\n LL | / mod internal_impl {\n LL | |     /// dox\n@@ -126,31 +126,31 @@ LL | | }\n    | |_^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:80:5\n+  --> $DIR/missing-doc.rs:79:5\n    |\n LL |     pub fn undocumented1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:81:5\n+  --> $DIR/missing-doc.rs:80:5\n    |\n LL |     pub fn undocumented2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:82:5\n+  --> $DIR/missing-doc.rs:81:5\n    |\n LL |     fn undocumented3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:87:9\n+  --> $DIR/missing-doc.rs:86:9\n    |\n LL |         pub fn also_undocumented1() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:88:9\n+  --> $DIR/missing-doc.rs:87:9\n    |\n LL |         fn also_undocumented2() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7dc44529206d551a423dbfea3762038b3b610074", "filename": "tests/ui/missing_panics_doc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmissing_panics_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmissing_panics_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_panics_doc.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,6 +1,5 @@\n #![warn(clippy::missing_panics_doc)]\n #![allow(clippy::option_map_unit_fn)]\n-\n fn main() {}\n \n /// This needs to be documented"}, {"sha": "60282939ef0334008f00c7d78ea12693c2b22595", "filename": "tests/ui/missing_panics_doc.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmissing_panics_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fmissing_panics_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_panics_doc.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: docs for function which may panic missing `# Panics` section\n-  --> $DIR/missing_panics_doc.rs:7:1\n+  --> $DIR/missing_panics_doc.rs:6:1\n    |\n LL | / pub fn unwrap() {\n LL | |     let result = Err(\"Hi\");\n@@ -9,43 +9,43 @@ LL | | }\n    |\n    = note: `-D clippy::missing-panics-doc` implied by `-D warnings`\n note: first possible panic found here\n-  --> $DIR/missing_panics_doc.rs:9:5\n+  --> $DIR/missing_panics_doc.rs:8:5\n    |\n LL |     result.unwrap()\n    |     ^^^^^^^^^^^^^^^\n \n error: docs for function which may panic missing `# Panics` section\n-  --> $DIR/missing_panics_doc.rs:13:1\n+  --> $DIR/missing_panics_doc.rs:12:1\n    |\n LL | / pub fn panic() {\n LL | |     panic!(\"This function panics\")\n LL | | }\n    | |_^\n    |\n note: first possible panic found here\n-  --> $DIR/missing_panics_doc.rs:14:5\n+  --> $DIR/missing_panics_doc.rs:13:5\n    |\n LL |     panic!(\"This function panics\")\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n-  --> $DIR/missing_panics_doc.rs:18:1\n+  --> $DIR/missing_panics_doc.rs:17:1\n    |\n LL | / pub fn todo() {\n LL | |     todo!()\n LL | | }\n    | |_^\n    |\n note: first possible panic found here\n-  --> $DIR/missing_panics_doc.rs:19:5\n+  --> $DIR/missing_panics_doc.rs:18:5\n    |\n LL |     todo!()\n    |     ^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n-  --> $DIR/missing_panics_doc.rs:23:1\n+  --> $DIR/missing_panics_doc.rs:22:1\n    |\n LL | / pub fn inner_body(opt: Option<u32>) {\n LL | |     opt.map(|x| {\n@@ -57,29 +57,29 @@ LL | | }\n    | |_^\n    |\n note: first possible panic found here\n-  --> $DIR/missing_panics_doc.rs:26:13\n+  --> $DIR/missing_panics_doc.rs:25:13\n    |\n LL |             panic!()\n    |             ^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n-  --> $DIR/missing_panics_doc.rs:32:1\n+  --> $DIR/missing_panics_doc.rs:31:1\n    |\n LL | / pub fn unreachable_and_panic() {\n LL | |     if true { unreachable!() } else { panic!() }\n LL | | }\n    | |_^\n    |\n note: first possible panic found here\n-  --> $DIR/missing_panics_doc.rs:33:39\n+  --> $DIR/missing_panics_doc.rs:32:39\n    |\n LL |     if true { unreachable!() } else { panic!() }\n    |                                       ^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n-  --> $DIR/missing_panics_doc.rs:37:1\n+  --> $DIR/missing_panics_doc.rs:36:1\n    |\n LL | / pub fn assert_eq() {\n LL | |     let x = 0;\n@@ -88,14 +88,14 @@ LL | | }\n    | |_^\n    |\n note: first possible panic found here\n-  --> $DIR/missing_panics_doc.rs:39:5\n+  --> $DIR/missing_panics_doc.rs:38:5\n    |\n LL |     assert_eq!(x, 0);\n    |     ^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n-  --> $DIR/missing_panics_doc.rs:43:1\n+  --> $DIR/missing_panics_doc.rs:42:1\n    |\n LL | / pub fn assert_ne() {\n LL | |     let x = 0;\n@@ -104,7 +104,7 @@ LL | | }\n    | |_^\n    |\n note: first possible panic found here\n-  --> $DIR/missing_panics_doc.rs:45:5\n+  --> $DIR/missing_panics_doc.rs:44:5\n    |\n LL |     assert_ne!(x, 0);\n    |     ^^^^^^^^^^^^^^^^"}, {"sha": "04b6283da3c3b88d8a5b16c44edfd5d53133dbe6", "filename": "tests/ui/needless_borrow_pat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fneedless_borrow_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fneedless_borrow_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow_pat.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n // FIXME: run-rustfix waiting on multi-span suggestions\n \n #![warn(clippy::needless_borrow)]"}, {"sha": "db3b52b8850e1cfd252e3eda54933f1abe4f8b60", "filename": "tests/ui/needless_borrow_pat.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fneedless_borrow_pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fneedless_borrow_pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow_pat.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,13 +1,13 @@\n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow_pat.rs:60:14\n+  --> $DIR/needless_borrow_pat.rs:59:14\n    |\n LL |         Some(ref x) => x,\n    |              ^^^^^ help: try this: `x`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow_pat.rs:66:14\n+  --> $DIR/needless_borrow_pat.rs:65:14\n    |\n LL |         Some(ref x) => *x,\n    |              ^^^^^\n@@ -18,7 +18,7 @@ LL |         Some(x) => x,\n    |              ~     ~\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow_pat.rs:72:14\n+  --> $DIR/needless_borrow_pat.rs:71:14\n    |\n LL |         Some(ref x) => {\n    |              ^^^^^\n@@ -31,19 +31,19 @@ LL ~             f1(x);\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow_pat.rs:82:14\n+  --> $DIR/needless_borrow_pat.rs:81:14\n    |\n LL |         Some(ref x) => m1!(x),\n    |              ^^^^^ help: try this: `x`\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow_pat.rs:87:15\n+  --> $DIR/needless_borrow_pat.rs:86:15\n    |\n LL |     let _ = |&ref x: &&String| {\n    |               ^^^^^ help: try this: `x`\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow_pat.rs:92:10\n+  --> $DIR/needless_borrow_pat.rs:91:10\n    |\n LL |     let (ref y,) = (&x,);\n    |          ^^^^^\n@@ -55,13 +55,13 @@ LL ~     let _: &String = y;\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow_pat.rs:102:14\n+  --> $DIR/needless_borrow_pat.rs:101:14\n    |\n LL |         Some(ref x) => x.0,\n    |              ^^^^^ help: try this: `x`\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow_pat.rs:112:14\n+  --> $DIR/needless_borrow_pat.rs:111:14\n    |\n LL |         E::A(ref x) | E::B(ref x) => *x,\n    |              ^^^^^         ^^^^^\n@@ -72,13 +72,13 @@ LL |         E::A(x) | E::B(x) => x,\n    |              ~         ~     ~\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow_pat.rs:118:21\n+  --> $DIR/needless_borrow_pat.rs:117:21\n    |\n LL |         if let Some(ref x) = Some(&String::new());\n    |                     ^^^^^ help: try this: `x`\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow_pat.rs:126:12\n+  --> $DIR/needless_borrow_pat.rs:125:12\n    |\n LL | fn f2<'a>(&ref x: &&'a String) -> &'a String {\n    |            ^^^^^\n@@ -91,13 +91,13 @@ LL ~     x\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow_pat.rs:133:11\n+  --> $DIR/needless_borrow_pat.rs:132:11\n    |\n LL |     fn f(&ref x: &&String) {\n    |           ^^^^^ help: try this: `x`\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow_pat.rs:141:11\n+  --> $DIR/needless_borrow_pat.rs:140:11\n    |\n LL |     fn f(&ref x: &&String) {\n    |           ^^^^^"}, {"sha": "b07c4a2381031f2f4c617c4e355e904c8243f9a6", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -27,6 +27,11 @@ fn multiple_in_and_out_2<'a, 'b>(x: &'a u8, _y: &'b u8) -> &'a u8 {\n     x\n }\n \n+// No error; multiple input refs\n+async fn func<'a>(args: &[&'a str]) -> Option<&'a str> {\n+    args.get(0).cloned()\n+}\n+\n // No error; static involved.\n fn in_static_and_out<'a>(x: &'a u8, _y: &'static u8) -> &'a u8 {\n     x"}, {"sha": "4114e6f1832fc694ddbffecd65819900de31df43", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -19,133 +19,133 @@ LL | fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:45:1\n+  --> $DIR/needless_lifetimes.rs:50:1\n    |\n LL | fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:50:1\n+  --> $DIR/needless_lifetimes.rs:55:1\n    |\n LL | fn where_clause_without_lt<'a, T>(x: &'a u8, _y: u8) -> Result<&'a u8, ()>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:62:1\n+  --> $DIR/needless_lifetimes.rs:67:1\n    |\n LL | fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:86:1\n+  --> $DIR/needless_lifetimes.rs:91:1\n    |\n LL | fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:116:5\n+  --> $DIR/needless_lifetimes.rs:121:5\n    |\n LL |     fn self_and_out<'s>(&'s self) -> &'s u8 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:125:5\n+  --> $DIR/needless_lifetimes.rs:130:5\n    |\n LL |     fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:144:1\n+  --> $DIR/needless_lifetimes.rs:149:1\n    |\n LL | fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:174:1\n+  --> $DIR/needless_lifetimes.rs:179:1\n    |\n LL | fn trait_obj_elided2<'a>(_arg: &'a dyn Drop) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:180:1\n+  --> $DIR/needless_lifetimes.rs:185:1\n    |\n LL | fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:199:1\n+  --> $DIR/needless_lifetimes.rs:204:1\n    |\n LL | fn named_input_elided_output<'a>(_arg: &'a str) -> &str {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:207:1\n+  --> $DIR/needless_lifetimes.rs:212:1\n    |\n LL | fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:243:1\n+  --> $DIR/needless_lifetimes.rs:248:1\n    |\n LL | fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:250:9\n+  --> $DIR/needless_lifetimes.rs:255:9\n    |\n LL |         fn needless_lt<'a>(x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:254:9\n+  --> $DIR/needless_lifetimes.rs:259:9\n    |\n LL |         fn needless_lt<'a>(_x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:267:9\n+  --> $DIR/needless_lifetimes.rs:272:9\n    |\n LL |         fn baz<'a>(&'a self) -> impl Foo + 'a {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:296:5\n+  --> $DIR/needless_lifetimes.rs:301:5\n    |\n LL |     fn impl_trait_elidable_nested_named_lifetimes<'a>(i: &'a i32, f: impl for<'b> Fn(&'b i32) -> &'b i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:299:5\n+  --> $DIR/needless_lifetimes.rs:304:5\n    |\n LL |     fn impl_trait_elidable_nested_anonymous_lifetimes<'a>(i: &'a i32, f: impl Fn(&i32) -> &i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:308:5\n+  --> $DIR/needless_lifetimes.rs:313:5\n    |\n LL |     fn generics_elidable<'a, T: Fn(&i32) -> &i32>(i: &'a i32, f: T) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:320:5\n+  --> $DIR/needless_lifetimes.rs:325:5\n    |\n LL |     fn where_clause_elidadable<'a, T>(i: &'a i32, f: T) -> &'a i32\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:335:5\n+  --> $DIR/needless_lifetimes.rs:340:5\n    |\n LL |     fn pointer_fn_elidable<'a>(i: &'a i32, f: fn(&i32) -> &i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:348:5\n+  --> $DIR/needless_lifetimes.rs:353:5\n    |\n LL |     fn nested_fn_pointer_3<'a>(_: &'a i32) -> fn(fn(&i32) -> &i32) -> i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:351:5\n+  --> $DIR/needless_lifetimes.rs:356:5\n    |\n LL |     fn nested_fn_pointer_4<'a>(_: &'a i32) -> impl Fn(fn(&i32)) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "812ce7163cd50ab215cd7130493b1e816d71ccf4", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// edition:2018\n \n #![feature(let_else)]\n #![allow(unused)]"}, {"sha": "c42567b517c9115819b3446d5c5281c0da273884", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// edition:2018\n \n #![feature(let_else)]\n #![allow(unused)]"}, {"sha": "74dda971fdabb632633f4a125ba15d6e2d5ad1a3", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,193 +1,193 @@\n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:25:5\n+  --> $DIR/needless_return.rs:24:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n    |\n    = note: `-D clippy::needless-return` implied by `-D warnings`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:29:5\n+  --> $DIR/needless_return.rs:28:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:34:9\n+  --> $DIR/needless_return.rs:33:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:36:9\n+  --> $DIR/needless_return.rs:35:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:42:17\n+  --> $DIR/needless_return.rs:41:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:44:13\n+  --> $DIR/needless_return.rs:43:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:51:9\n+  --> $DIR/needless_return.rs:50:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:53:16\n+  --> $DIR/needless_return.rs:52:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:61:5\n+  --> $DIR/needless_return.rs:60:5\n    |\n LL |     return;\n    |     ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:66:9\n+  --> $DIR/needless_return.rs:65:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:68:9\n+  --> $DIR/needless_return.rs:67:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:75:14\n+  --> $DIR/needless_return.rs:74:14\n    |\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:90:9\n+  --> $DIR/needless_return.rs:89:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:92:9\n+  --> $DIR/needless_return.rs:91:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:113:32\n+  --> $DIR/needless_return.rs:112:32\n    |\n LL |         bar.unwrap_or_else(|_| return)\n    |                                ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:118:13\n+  --> $DIR/needless_return.rs:117:13\n    |\n LL |             return;\n    |             ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:120:20\n+  --> $DIR/needless_return.rs:119:20\n    |\n LL |         let _ = || return;\n    |                    ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:126:32\n+  --> $DIR/needless_return.rs:125:32\n    |\n LL |         res.unwrap_or_else(|_| return Foo)\n    |                                ^^^^^^^^^^ help: remove `return`: `Foo`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:135:5\n+  --> $DIR/needless_return.rs:134:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:139:5\n+  --> $DIR/needless_return.rs:138:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:144:9\n+  --> $DIR/needless_return.rs:143:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:146:9\n+  --> $DIR/needless_return.rs:145:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:152:17\n+  --> $DIR/needless_return.rs:151:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:154:13\n+  --> $DIR/needless_return.rs:153:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:161:9\n+  --> $DIR/needless_return.rs:160:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:163:16\n+  --> $DIR/needless_return.rs:162:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:171:5\n+  --> $DIR/needless_return.rs:170:5\n    |\n LL |     return;\n    |     ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:176:9\n+  --> $DIR/needless_return.rs:175:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:178:9\n+  --> $DIR/needless_return.rs:177:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:185:14\n+  --> $DIR/needless_return.rs:184:14\n    |\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:200:9\n+  --> $DIR/needless_return.rs:199:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:202:9\n+  --> $DIR/needless_return.rs:201:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`"}, {"sha": "961f6f409ddd2202916bfe14c17111d208359592", "filename": "tests/ui/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -15,8 +15,8 @@ struct InstSplit {\n impl MaybeInst {\n     fn fill(&mut self) {\n         let filled = match *self {\n-            MaybeInst::Split1(goto1) => panic!(1),\n-            MaybeInst::Split2(goto2) => panic!(2),\n+            MaybeInst::Split1(goto1) => panic!(\"1\"),\n+            MaybeInst::Split2(goto2) => panic!(\"2\"),\n             _ => unimplemented!(),\n         };\n         unimplemented!()"}, {"sha": "9cb6a9d1ecc9bc9e91c0cf071c748ab45a962711", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n #![allow(clippy::redundant_closure, clippy::ref_option_ref, clippy::equatable_if_let)]"}, {"sha": "b3ba5eb870a693e65053cf50bbc1c914520fbe4a", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n #![allow(clippy::redundant_closure, clippy::ref_option_ref, clippy::equatable_if_let)]"}, {"sha": "685bb48ea37bc05baf1945d6a66b7c12f69c0934", "filename": "tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:7:5\n+  --> $DIR/option_if_let_else.rs:6:5\n    |\n LL | /     if let Some(x) = string {\n LL | |         (true, x)\n@@ -11,19 +11,19 @@ LL | |     }\n    = note: `-D clippy::option-if-let-else` implied by `-D warnings`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:25:13\n+  --> $DIR/option_if_let_else.rs:24:13\n    |\n LL |     let _ = if let Some(s) = *string { s.len() } else { 0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `string.map_or(0, |s| s.len())`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:26:13\n+  --> $DIR/option_if_let_else.rs:25:13\n    |\n LL |     let _ = if let Some(s) = &num { s } else { &0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.as_ref().map_or(&0, |s| s)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:27:13\n+  --> $DIR/option_if_let_else.rs:26:13\n    |\n LL |       let _ = if let Some(s) = &mut num {\n    |  _____________^\n@@ -43,13 +43,13 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:33:13\n+  --> $DIR/option_if_let_else.rs:32:13\n    |\n LL |     let _ = if let Some(ref s) = num { s } else { &0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.as_ref().map_or(&0, |s| s)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:34:13\n+  --> $DIR/option_if_let_else.rs:33:13\n    |\n LL |       let _ = if let Some(mut s) = num {\n    |  _____________^\n@@ -69,7 +69,7 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:40:13\n+  --> $DIR/option_if_let_else.rs:39:13\n    |\n LL |       let _ = if let Some(ref mut s) = num {\n    |  _____________^\n@@ -89,7 +89,7 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:49:5\n+  --> $DIR/option_if_let_else.rs:48:5\n    |\n LL | /     if let Some(x) = arg {\n LL | |         let y = x * x;\n@@ -108,7 +108,7 @@ LL +     })\n    |\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:62:13\n+  --> $DIR/option_if_let_else.rs:61:13\n    |\n LL |       let _ = if let Some(x) = arg {\n    |  _____________^\n@@ -120,7 +120,7 @@ LL | |     };\n    | |_____^ help: try: `arg.map_or_else(|| side_effect(), |x| x)`\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:71:13\n+  --> $DIR/option_if_let_else.rs:70:13\n    |\n LL |       let _ = if let Some(x) = arg {\n    |  _____________^\n@@ -143,13 +143,13 @@ LL ~     }, |x| x * x * x * x);\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:100:13\n+  --> $DIR/option_if_let_else.rs:99:13\n    |\n LL |     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `optional.map_or(5, |x| x + 2)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:109:13\n+  --> $DIR/option_if_let_else.rs:108:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^\n@@ -171,13 +171,13 @@ LL ~         });\n    |\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:137:13\n+  --> $DIR/option_if_let_else.rs:136:13\n    |\n LL |     let _ = if let Some(x) = Some(0) { s.len() + x } else { s.len() };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(0).map_or_else(|| s.len(), |x| s.len() + x)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:141:13\n+  --> $DIR/option_if_let_else.rs:140:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^"}, {"sha": "e75eb1b6eadd85ca225d830e3cb8ffe96bf584fa", "filename": "tests/ui/panic_in_result_fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,6 +1,5 @@\n #![warn(clippy::panic_in_result_fn)]\n #![allow(clippy::unnecessary_wraps)]\n-\n struct A;\n \n impl A {"}, {"sha": "78d09b8b2108a134b0c91a4c37e5bbd238de6387", "filename": "tests/ui/panic_in_result_fn.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fpanic_in_result_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fpanic_in_result_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:7:5\n+  --> $DIR/panic_in_result_fn.rs:6:5\n    |\n LL | /     fn result_with_panic() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -10,14 +10,14 @@ LL | |     }\n    = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:9:9\n+  --> $DIR/panic_in_result_fn.rs:8:9\n    |\n LL |         panic!(\"error\");\n    |         ^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:12:5\n+  --> $DIR/panic_in_result_fn.rs:11:5\n    |\n LL | /     fn result_with_unimplemented() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -27,14 +27,14 @@ LL | |     }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:14:9\n+  --> $DIR/panic_in_result_fn.rs:13:9\n    |\n LL |         unimplemented!();\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:17:5\n+  --> $DIR/panic_in_result_fn.rs:16:5\n    |\n LL | /     fn result_with_unreachable() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -44,14 +44,14 @@ LL | |     }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:19:9\n+  --> $DIR/panic_in_result_fn.rs:18:9\n    |\n LL |         unreachable!();\n    |         ^^^^^^^^^^^^^^\n    = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:22:5\n+  --> $DIR/panic_in_result_fn.rs:21:5\n    |\n LL | /     fn result_with_todo() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -61,14 +61,14 @@ LL | |     }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:24:9\n+  --> $DIR/panic_in_result_fn.rs:23:9\n    |\n LL |         todo!(\"Finish this\");\n    |         ^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:53:1\n+  --> $DIR/panic_in_result_fn.rs:52:1\n    |\n LL | / fn function_result_with_panic() -> Result<bool, String> // should emit lint\n LL | | {\n@@ -78,14 +78,14 @@ LL | | }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:55:5\n+  --> $DIR/panic_in_result_fn.rs:54:5\n    |\n LL |     panic!(\"error\");\n    |     ^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:68:1\n+  --> $DIR/panic_in_result_fn.rs:67:1\n    |\n LL | / fn main() -> Result<(), String> {\n LL | |     todo!(\"finish main method\");\n@@ -95,7 +95,7 @@ LL | | }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:69:5\n+  --> $DIR/panic_in_result_fn.rs:68:5\n    |\n LL |     todo!(\"finish main method\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "67bfef06a05e8cdd3e7b73c19fbc629d5e6fbf3e", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,9 +1,4 @@\n-#![allow(\n-    unused,\n-    clippy::many_single_char_names,\n-    clippy::redundant_clone,\n-    clippy::if_then_panic\n-)]\n+#![allow(unused, clippy::many_single_char_names, clippy::redundant_clone)]\n #![warn(clippy::ptr_arg)]\n \n use std::borrow::Cow;\n@@ -160,3 +155,7 @@ mod issue6509 {\n         let _ = str.clone().clone();\n     }\n }\n+\n+// No error for types behind an alias (#7699)\n+type A = Vec<u8>;\n+fn aliased(a: &A) {}"}, {"sha": "64594eb870c2c5067b413095f6eabdeded968ebc", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,31 +1,31 @@\n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:12:14\n+  --> $DIR/ptr_arg.rs:7:14\n    |\n LL | fn do_vec(x: &Vec<i64>) {\n    |              ^^^^^^^^^ help: change this to: `&[i64]`\n    |\n    = note: `-D clippy::ptr-arg` implied by `-D warnings`\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:21:14\n+  --> $DIR/ptr_arg.rs:16:14\n    |\n LL | fn do_str(x: &String) {\n    |              ^^^^^^^ help: change this to: `&str`\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:30:15\n+  --> $DIR/ptr_arg.rs:25:15\n    |\n LL | fn do_path(x: &PathBuf) {\n    |               ^^^^^^^^ help: change this to: `&Path`\n \n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:43:18\n+  --> $DIR/ptr_arg.rs:38:18\n    |\n LL |     fn do_vec(x: &Vec<i64>);\n    |                  ^^^^^^^^^ help: change this to: `&[i64]`\n \n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:56:14\n+  --> $DIR/ptr_arg.rs:51:14\n    |\n LL | fn cloned(x: &Vec<u8>) -> Vec<u8> {\n    |              ^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     x.to_owned()\n    |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:65:18\n+  --> $DIR/ptr_arg.rs:60:18\n    |\n LL | fn str_cloned(x: &String) -> String {\n    |                  ^^^^^^^\n@@ -67,7 +67,7 @@ LL |     x.to_string()\n    |\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:73:19\n+  --> $DIR/ptr_arg.rs:68:19\n    |\n LL | fn path_cloned(x: &PathBuf) -> PathBuf {\n    |                   ^^^^^^^^\n@@ -90,7 +90,7 @@ LL |     x.to_path_buf()\n    |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:81:44\n+  --> $DIR/ptr_arg.rs:76:44\n    |\n LL | fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n    |                                            ^^^^^^^\n@@ -109,13 +109,13 @@ LL |     let c = y;\n    |             ~\n \n error: using a reference to `Cow` is not recommended\n-  --> $DIR/ptr_arg.rs:95:25\n+  --> $DIR/ptr_arg.rs:90:25\n    |\n LL | fn test_cow_with_ref(c: &Cow<[i32]>) {}\n    |                         ^^^^^^^^^^^ help: change this to: `&[i32]`\n \n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:148:21\n+  --> $DIR/ptr_arg.rs:143:21\n    |\n LL |     fn foo_vec(vec: &Vec<u8>) {\n    |                     ^^^^^^^^\n@@ -134,7 +134,7 @@ LL |         let _ = vec.to_owned().clone();\n    |                 ~~~~~~~~~~~~~~\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:153:23\n+  --> $DIR/ptr_arg.rs:148:23\n    |\n LL |     fn foo_path(path: &PathBuf) {\n    |                       ^^^^^^^^\n@@ -153,7 +153,7 @@ LL |         let _ = path.to_path_buf().clone();\n    |                 ~~~~~~~~~~~~~~~~~~\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:158:21\n+  --> $DIR/ptr_arg.rs:153:21\n    |\n LL |     fn foo_str(str: &PathBuf) {\n    |                     ^^^^^^^^"}, {"sha": "e93469e5f556bd55737c0628961e540e7caf5be1", "filename": "tests/ui/question_mark.fixed", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fquestion_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fquestion_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -104,7 +104,11 @@ fn func() -> Option<i32> {\n     Some(0)\n }\n \n-fn result_func(x: Result<i32, &str>) -> Result<i32, &str> {\n+fn func_returning_result() -> Result<i32, i32> {\n+    Ok(1)\n+}\n+\n+fn result_func(x: Result<i32, i32>) -> Result<i32, i32> {\n     let _ = x?;\n \n     x?;\n@@ -113,9 +117,22 @@ fn result_func(x: Result<i32, &str>) -> Result<i32, &str> {\n     let y = if let Ok(x) = x {\n         x\n     } else {\n-        return Err(\"some error\");\n+        return Err(0);\n+    };\n+\n+    // issue #7859\n+    // no warning\n+    let _ = if let Ok(x) = func_returning_result() {\n+        x\n+    } else {\n+        return Err(0);\n     };\n \n+    // no warning\n+    if func_returning_result().is_err() {\n+        return func_returning_result();\n+    }\n+\n     Ok(y)\n }\n "}, {"sha": "dd179e9bee8f87d57c6623617d0b646fb154c684", "filename": "tests/ui/question_mark.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -134,7 +134,11 @@ fn func() -> Option<i32> {\n     Some(0)\n }\n \n-fn result_func(x: Result<i32, &str>) -> Result<i32, &str> {\n+fn func_returning_result() -> Result<i32, i32> {\n+    Ok(1)\n+}\n+\n+fn result_func(x: Result<i32, i32>) -> Result<i32, i32> {\n     let _ = if let Ok(x) = x { x } else { return x };\n \n     if x.is_err() {\n@@ -145,9 +149,22 @@ fn result_func(x: Result<i32, &str>) -> Result<i32, &str> {\n     let y = if let Ok(x) = x {\n         x\n     } else {\n-        return Err(\"some error\");\n+        return Err(0);\n+    };\n+\n+    // issue #7859\n+    // no warning\n+    let _ = if let Ok(x) = func_returning_result() {\n+        x\n+    } else {\n+        return Err(0);\n     };\n \n+    // no warning\n+    if func_returning_result().is_err() {\n+        return func_returning_result();\n+    }\n+\n     Ok(y)\n }\n "}, {"sha": "8d782b71dd6a47ae8368b0d8f8c7ba89b13b34b6", "filename": "tests/ui/question_mark.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fquestion_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fquestion_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -101,13 +101,13 @@ LL | |     }\n    | |_____^ help: replace it with: `f()?;`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:138:13\n+  --> $DIR/question_mark.rs:142:13\n    |\n LL |     let _ = if let Ok(x) = x { x } else { return x };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `x?`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:140:5\n+  --> $DIR/question_mark.rs:144:5\n    |\n LL | /     if x.is_err() {\n LL | |         return x;"}, {"sha": "16b40dcd902869d7184cb1d6b384139166d04380", "filename": "tests/ui/redundant_clone.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -196,7 +196,7 @@ fn clone_then_move_cloned() {\n     fn foo<F: Fn()>(_: &Alpha, _: F) {}\n     let x = Alpha;\n     // ok, data is moved while the clone is in use.\n-    foo(&x.clone(), move || {\n+    foo(&x, move || {\n         let _ = x;\n     });\n "}, {"sha": "9f59017b26199cad1ae2acb9fe1b96c8048ac363", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -167,5 +167,17 @@ note: cloned value is neither consumed nor mutated\n LL |     let y = x.clone().join(\"matthias\");\n    |             ^^^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: redundant clone\n+  --> $DIR/redundant_clone.rs:199:11\n+   |\n+LL |     foo(&x.clone(), move || {\n+   |           ^^^^^^^^ help: remove this\n+   |\n+note: this value is dropped without further use\n+  --> $DIR/redundant_clone.rs:199:10\n+   |\n+LL |     foo(&x.clone(), move || {\n+   |          ^\n+\n+error: aborting due to 15 previous errors\n "}, {"sha": "fe742a4c2f4c5acd69d1300242eb59bb0de67aa2", "filename": "tests/ui/ref_binding_to_reference.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fref_binding_to_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fref_binding_to_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_binding_to_reference.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n // FIXME: run-rustfix waiting on multi-span suggestions\n \n #![warn(clippy::ref_binding_to_reference)]"}, {"sha": "c5856e15fa987b3a4c19737019941430373606ce", "filename": "tests/ui/ref_binding_to_reference.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fref_binding_to_reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fref_binding_to_reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_binding_to_reference.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:31:14\n+  --> $DIR/ref_binding_to_reference.rs:30:14\n    |\n LL |         Some(ref x) => x,\n    |              ^^^^^\n@@ -11,7 +11,7 @@ LL |         Some(x) => &x,\n    |              ~     ~~\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:37:14\n+  --> $DIR/ref_binding_to_reference.rs:36:14\n    |\n LL |         Some(ref x) => {\n    |              ^^^^^\n@@ -25,7 +25,7 @@ LL ~             &x\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:47:14\n+  --> $DIR/ref_binding_to_reference.rs:46:14\n    |\n LL |         Some(ref x) => m2!(x),\n    |              ^^^^^\n@@ -36,7 +36,7 @@ LL |         Some(x) => m2!(&x),\n    |              ~         ~~\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:52:15\n+  --> $DIR/ref_binding_to_reference.rs:51:15\n    |\n LL |     let _ = |&ref x: &&String| {\n    |               ^^^^^\n@@ -48,7 +48,7 @@ LL ~         let _: &&String = &x;\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:58:12\n+  --> $DIR/ref_binding_to_reference.rs:57:12\n    |\n LL | fn f2<'a>(&ref x: &&'a String) -> &'a String {\n    |            ^^^^^\n@@ -61,7 +61,7 @@ LL ~     x\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:65:11\n+  --> $DIR/ref_binding_to_reference.rs:64:11\n    |\n LL |     fn f(&ref x: &&String) {\n    |           ^^^^^\n@@ -73,7 +73,7 @@ LL ~         let _: &&String = &x;\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:73:11\n+  --> $DIR/ref_binding_to_reference.rs:72:11\n    |\n LL |     fn f(&ref x: &&String) {\n    |           ^^^^^"}, {"sha": "cc295b509bc51973cd1bf3f03d591bee3bc732e3", "filename": "tests/ui/rename.fixed", "status": "modified", "additions": 50, "deletions": 7, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -6,15 +6,58 @@\n #![allow(clippy::module_name_repetitions)]\n #![allow(clippy::new_without_default)]\n #![allow(clippy::redundant_static_lifetimes)]\n+#![allow(clippy::bind_instead_of_map)]\n+#![allow(clippy::box_collection)]\n+#![allow(clippy::blocks_in_if_conditions)]\n+#![allow(clippy::map_unwrap_or)]\n+#![allow(clippy::unwrap_used)]\n+#![allow(clippy::expect_used)]\n+#![allow(clippy::for_loops_over_fallibles)]\n+#![allow(clippy::useless_conversion)]\n+#![allow(clippy::invisible_characters)]\n+#![allow(clippy::single_char_add_str)]\n+#![allow(clippy::match_result_ok)]\n+// uplifted lints\n+#![allow(invalid_value)]\n+#![allow(array_into_iter)]\n+#![allow(unused_labels)]\n+#![allow(drop_bounds)]\n+#![allow(temporary_cstring_as_ptr)]\n+#![allow(non_fmt_panics)]\n+#![allow(unknown_lints)]\n+#![allow(invalid_atomic_ordering)]\n+#![allow(enum_intrinsics_non_enums)]\n // warn for the old lint name here, to test if the renaming worked\n+#![warn(clippy::module_name_repetitions)]\n+#![warn(clippy::new_without_default)]\n+#![warn(clippy::redundant_static_lifetimes)]\n #![warn(clippy::cognitive_complexity)]\n+#![warn(clippy::bind_instead_of_map)]\n+#![warn(clippy::box_collection)]\n+#![warn(clippy::blocks_in_if_conditions)]\n+#![warn(clippy::blocks_in_if_conditions)]\n+#![warn(clippy::map_unwrap_or)]\n+#![warn(clippy::map_unwrap_or)]\n+#![warn(clippy::map_unwrap_or)]\n+#![warn(clippy::unwrap_used)]\n+#![warn(clippy::unwrap_used)]\n+#![warn(clippy::expect_used)]\n+#![warn(clippy::expect_used)]\n+#![warn(clippy::for_loops_over_fallibles)]\n+#![warn(clippy::for_loops_over_fallibles)]\n+#![warn(clippy::useless_conversion)]\n+#![warn(clippy::invisible_characters)]\n+#![warn(clippy::single_char_add_str)]\n+#![warn(clippy::match_result_ok)]\n+// uplifted lints\n+#![warn(invalid_value)]\n+#![warn(array_into_iter)]\n+#![warn(unused_labels)]\n+#![warn(drop_bounds)]\n+#![warn(temporary_cstring_as_ptr)]\n+#![warn(non_fmt_panics)]\n+#![warn(unknown_lints)]\n+#![warn(invalid_atomic_ordering)]\n #![warn(enum_intrinsics_non_enums)]\n \n-#[warn(clippy::module_name_repetitions)]\n fn main() {}\n-\n-#[warn(clippy::new_without_default)]\n-struct Foo;\n-\n-#[warn(clippy::redundant_static_lifetimes)]\n-fn foo() {}"}, {"sha": "377075c02464a85becebae4817f176745f490ea0", "filename": "tests/ui/rename.rs", "status": "modified", "additions": 50, "deletions": 7, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -6,15 +6,58 @@\n #![allow(clippy::module_name_repetitions)]\n #![allow(clippy::new_without_default)]\n #![allow(clippy::redundant_static_lifetimes)]\n+#![allow(clippy::bind_instead_of_map)]\n+#![allow(clippy::box_collection)]\n+#![allow(clippy::blocks_in_if_conditions)]\n+#![allow(clippy::map_unwrap_or)]\n+#![allow(clippy::unwrap_used)]\n+#![allow(clippy::expect_used)]\n+#![allow(clippy::for_loops_over_fallibles)]\n+#![allow(clippy::useless_conversion)]\n+#![allow(clippy::invisible_characters)]\n+#![allow(clippy::single_char_add_str)]\n+#![allow(clippy::match_result_ok)]\n+// uplifted lints\n+#![allow(invalid_value)]\n+#![allow(array_into_iter)]\n+#![allow(unused_labels)]\n+#![allow(drop_bounds)]\n+#![allow(temporary_cstring_as_ptr)]\n+#![allow(non_fmt_panics)]\n+#![allow(unknown_lints)]\n+#![allow(invalid_atomic_ordering)]\n+#![allow(enum_intrinsics_non_enums)]\n // warn for the old lint name here, to test if the renaming worked\n+#![warn(clippy::stutter)]\n+#![warn(clippy::new_without_default_derive)]\n+#![warn(clippy::const_static_lifetime)]\n #![warn(clippy::cyclomatic_complexity)]\n+#![warn(clippy::option_and_then_some)]\n+#![warn(clippy::box_vec)]\n+#![warn(clippy::block_in_if_condition_expr)]\n+#![warn(clippy::block_in_if_condition_stmt)]\n+#![warn(clippy::option_map_unwrap_or)]\n+#![warn(clippy::option_map_unwrap_or_else)]\n+#![warn(clippy::result_map_unwrap_or_else)]\n+#![warn(clippy::option_unwrap_used)]\n+#![warn(clippy::result_unwrap_used)]\n+#![warn(clippy::option_expect_used)]\n+#![warn(clippy::result_expect_used)]\n+#![warn(clippy::for_loop_over_option)]\n+#![warn(clippy::for_loop_over_result)]\n+#![warn(clippy::identity_conversion)]\n+#![warn(clippy::zero_width_space)]\n+#![warn(clippy::single_char_push_str)]\n+#![warn(clippy::if_let_some_result)]\n+// uplifted lints\n+#![warn(clippy::invalid_ref)]\n+#![warn(clippy::into_iter_on_array)]\n+#![warn(clippy::unused_label)]\n+#![warn(clippy::drop_bounds)]\n+#![warn(clippy::temporary_cstring_as_ptr)]\n+#![warn(clippy::panic_params)]\n+#![warn(clippy::unknown_clippy_lints)]\n+#![warn(clippy::invalid_atomic_ordering)]\n #![warn(clippy::mem_discriminant_non_enum)]\n \n-#[warn(clippy::stutter)]\n fn main() {}\n-\n-#[warn(clippy::new_without_default_derive)]\n-struct Foo;\n-\n-#[warn(clippy::const_static_lifetime)]\n-fn foo() {}"}, {"sha": "d720f10d117c097ad2df27ae1ac45e9b63e971ee", "filename": "tests/ui/rename.stderr", "status": "modified", "additions": 169, "deletions": 19, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,34 +1,184 @@\n+error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n+  --> $DIR/rename.rs:31:9\n+   |\n+LL | #![warn(clippy::stutter)]\n+   |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n+   |\n+   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n+\n+error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n+  --> $DIR/rename.rs:32:9\n+   |\n+LL | #![warn(clippy::new_without_default_derive)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n+\n+error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n+  --> $DIR/rename.rs:33:9\n+   |\n+LL | #![warn(clippy::const_static_lifetime)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n+\n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:10:9\n+  --> $DIR/rename.rs:34:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n+\n+error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n+  --> $DIR/rename.rs:35:9\n    |\n-   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n+LL | #![warn(clippy::option_and_then_some)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n-error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:11:9\n+error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n+  --> $DIR/rename.rs:36:9\n    |\n-LL | #![warn(clippy::mem_discriminant_non_enum)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n+LL | #![warn(clippy::box_vec)]\n+   |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n-error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:13:8\n+error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n+  --> $DIR/rename.rs:37:9\n    |\n-LL | #[warn(clippy::stutter)]\n-   |        ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n+LL | #![warn(clippy::block_in_if_condition_expr)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n-error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:16:8\n+error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n+  --> $DIR/rename.rs:38:9\n    |\n-LL | #[warn(clippy::new_without_default_derive)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n+LL | #![warn(clippy::block_in_if_condition_stmt)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n-error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:19:8\n+error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n+  --> $DIR/rename.rs:39:9\n+   |\n+LL | #![warn(clippy::option_map_unwrap_or)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n+\n+error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n+  --> $DIR/rename.rs:40:9\n+   |\n+LL | #![warn(clippy::option_map_unwrap_or_else)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n+\n+error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n+  --> $DIR/rename.rs:41:9\n+   |\n+LL | #![warn(clippy::result_map_unwrap_or_else)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n+\n+error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n+  --> $DIR/rename.rs:42:9\n+   |\n+LL | #![warn(clippy::option_unwrap_used)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n+\n+error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n+  --> $DIR/rename.rs:43:9\n+   |\n+LL | #![warn(clippy::result_unwrap_used)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n+\n+error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n+  --> $DIR/rename.rs:44:9\n+   |\n+LL | #![warn(clippy::option_expect_used)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n+\n+error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n+  --> $DIR/rename.rs:45:9\n+   |\n+LL | #![warn(clippy::result_expect_used)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n+\n+error: lint `clippy::for_loop_over_option` has been renamed to `clippy::for_loops_over_fallibles`\n+  --> $DIR/rename.rs:46:9\n+   |\n+LL | #![warn(clippy::for_loop_over_option)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n+\n+error: lint `clippy::for_loop_over_result` has been renamed to `clippy::for_loops_over_fallibles`\n+  --> $DIR/rename.rs:47:9\n+   |\n+LL | #![warn(clippy::for_loop_over_result)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n+\n+error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n+  --> $DIR/rename.rs:48:9\n+   |\n+LL | #![warn(clippy::identity_conversion)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n+\n+error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n+  --> $DIR/rename.rs:49:9\n+   |\n+LL | #![warn(clippy::zero_width_space)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n+\n+error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n+  --> $DIR/rename.rs:50:9\n+   |\n+LL | #![warn(clippy::single_char_push_str)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n+\n+error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n+  --> $DIR/rename.rs:51:9\n+   |\n+LL | #![warn(clippy::if_let_some_result)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n+\n+error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n+  --> $DIR/rename.rs:53:9\n+   |\n+LL | #![warn(clippy::invalid_ref)]\n+   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n+\n+error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n+  --> $DIR/rename.rs:54:9\n+   |\n+LL | #![warn(clippy::into_iter_on_array)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n+\n+error: lint `clippy::unused_label` has been renamed to `unused_labels`\n+  --> $DIR/rename.rs:55:9\n+   |\n+LL | #![warn(clippy::unused_label)]\n+   |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n+\n+error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n+  --> $DIR/rename.rs:56:9\n+   |\n+LL | #![warn(clippy::drop_bounds)]\n+   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n+\n+error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n+  --> $DIR/rename.rs:57:9\n+   |\n+LL | #![warn(clippy::temporary_cstring_as_ptr)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n+\n+error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n+  --> $DIR/rename.rs:58:9\n+   |\n+LL | #![warn(clippy::panic_params)]\n+   |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n+\n+error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n+  --> $DIR/rename.rs:59:9\n+   |\n+LL | #![warn(clippy::unknown_clippy_lints)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n+\n+error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n+  --> $DIR/rename.rs:60:9\n+   |\n+LL | #![warn(clippy::invalid_atomic_ordering)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n+\n+error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n+  --> $DIR/rename.rs:61:9\n    |\n-LL | #[warn(clippy::const_static_lifetime)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n+LL | #![warn(clippy::mem_discriminant_non_enum)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 30 previous errors\n "}, {"sha": "d7e8d02bd1998fbab6b24867d1ec325556a6e72f", "filename": "tests/ui/should_impl_trait/corner_cases.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fcorner_cases.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,3 @@\n-// edition:2018\n-\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(\n     clippy::missing_errors_doc,"}, {"sha": "ea962f943173aed4359f392e9ee99de13e9b8ec4", "filename": "tests/ui/should_impl_trait/method_list_1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,3 @@\n-// edition:2018\n-\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(\n     clippy::missing_errors_doc,"}, {"sha": "bf8b47d5626d283095c5df5db7ed86cccc2ffb40", "filename": "tests/ui/should_impl_trait/method_list_1.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_1.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: method `add` can be confused for the standard trait method `std::ops::Add::add`\n-  --> $DIR/method_list_1.rs:26:5\n+  --> $DIR/method_list_1.rs:24:5\n    |\n LL | /     pub fn add(self, other: T) -> T {\n LL | |         unimplemented!()\n@@ -10,7 +10,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Add` or choosing a less ambiguous method name\n \n error: method `as_mut` can be confused for the standard trait method `std::convert::AsMut::as_mut`\n-  --> $DIR/method_list_1.rs:30:5\n+  --> $DIR/method_list_1.rs:28:5\n    |\n LL | /     pub fn as_mut(&mut self) -> &mut T {\n LL | |         unimplemented!()\n@@ -20,7 +20,7 @@ LL | |     }\n    = help: consider implementing the trait `std::convert::AsMut` or choosing a less ambiguous method name\n \n error: method `as_ref` can be confused for the standard trait method `std::convert::AsRef::as_ref`\n-  --> $DIR/method_list_1.rs:34:5\n+  --> $DIR/method_list_1.rs:32:5\n    |\n LL | /     pub fn as_ref(&self) -> &T {\n LL | |         unimplemented!()\n@@ -30,7 +30,7 @@ LL | |     }\n    = help: consider implementing the trait `std::convert::AsRef` or choosing a less ambiguous method name\n \n error: method `bitand` can be confused for the standard trait method `std::ops::BitAnd::bitand`\n-  --> $DIR/method_list_1.rs:38:5\n+  --> $DIR/method_list_1.rs:36:5\n    |\n LL | /     pub fn bitand(self, rhs: T) -> T {\n LL | |         unimplemented!()\n@@ -40,7 +40,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::BitAnd` or choosing a less ambiguous method name\n \n error: method `bitor` can be confused for the standard trait method `std::ops::BitOr::bitor`\n-  --> $DIR/method_list_1.rs:42:5\n+  --> $DIR/method_list_1.rs:40:5\n    |\n LL | /     pub fn bitor(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -50,7 +50,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::BitOr` or choosing a less ambiguous method name\n \n error: method `bitxor` can be confused for the standard trait method `std::ops::BitXor::bitxor`\n-  --> $DIR/method_list_1.rs:46:5\n+  --> $DIR/method_list_1.rs:44:5\n    |\n LL | /     pub fn bitxor(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -60,7 +60,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::BitXor` or choosing a less ambiguous method name\n \n error: method `borrow` can be confused for the standard trait method `std::borrow::Borrow::borrow`\n-  --> $DIR/method_list_1.rs:50:5\n+  --> $DIR/method_list_1.rs:48:5\n    |\n LL | /     pub fn borrow(&self) -> &str {\n LL | |         unimplemented!()\n@@ -70,7 +70,7 @@ LL | |     }\n    = help: consider implementing the trait `std::borrow::Borrow` or choosing a less ambiguous method name\n \n error: method `borrow_mut` can be confused for the standard trait method `std::borrow::BorrowMut::borrow_mut`\n-  --> $DIR/method_list_1.rs:54:5\n+  --> $DIR/method_list_1.rs:52:5\n    |\n LL | /     pub fn borrow_mut(&mut self) -> &mut str {\n LL | |         unimplemented!()\n@@ -80,7 +80,7 @@ LL | |     }\n    = help: consider implementing the trait `std::borrow::BorrowMut` or choosing a less ambiguous method name\n \n error: method `clone` can be confused for the standard trait method `std::clone::Clone::clone`\n-  --> $DIR/method_list_1.rs:58:5\n+  --> $DIR/method_list_1.rs:56:5\n    |\n LL | /     pub fn clone(&self) -> Self {\n LL | |         unimplemented!()\n@@ -90,7 +90,7 @@ LL | |     }\n    = help: consider implementing the trait `std::clone::Clone` or choosing a less ambiguous method name\n \n error: method `cmp` can be confused for the standard trait method `std::cmp::Ord::cmp`\n-  --> $DIR/method_list_1.rs:62:5\n+  --> $DIR/method_list_1.rs:60:5\n    |\n LL | /     pub fn cmp(&self, other: &Self) -> Self {\n LL | |         unimplemented!()\n@@ -100,7 +100,7 @@ LL | |     }\n    = help: consider implementing the trait `std::cmp::Ord` or choosing a less ambiguous method name\n \n error: method `deref` can be confused for the standard trait method `std::ops::Deref::deref`\n-  --> $DIR/method_list_1.rs:70:5\n+  --> $DIR/method_list_1.rs:68:5\n    |\n LL | /     pub fn deref(&self) -> &Self {\n LL | |         unimplemented!()\n@@ -110,7 +110,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Deref` or choosing a less ambiguous method name\n \n error: method `deref_mut` can be confused for the standard trait method `std::ops::DerefMut::deref_mut`\n-  --> $DIR/method_list_1.rs:74:5\n+  --> $DIR/method_list_1.rs:72:5\n    |\n LL | /     pub fn deref_mut(&mut self) -> &mut Self {\n LL | |         unimplemented!()\n@@ -120,7 +120,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::DerefMut` or choosing a less ambiguous method name\n \n error: method `div` can be confused for the standard trait method `std::ops::Div::div`\n-  --> $DIR/method_list_1.rs:78:5\n+  --> $DIR/method_list_1.rs:76:5\n    |\n LL | /     pub fn div(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -130,7 +130,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Div` or choosing a less ambiguous method name\n \n error: method `drop` can be confused for the standard trait method `std::ops::Drop::drop`\n-  --> $DIR/method_list_1.rs:82:5\n+  --> $DIR/method_list_1.rs:80:5\n    |\n LL | /     pub fn drop(&mut self) {\n LL | |         unimplemented!()"}, {"sha": "b663568806d218dd9e8ac3bb6d2206acad140550", "filename": "tests/ui/should_impl_trait/method_list_2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,3 @@\n-// edition:2018\n-\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(\n     clippy::missing_errors_doc,"}, {"sha": "426fe3b1adc9de12e9ba88e9f51a034407d6d007", "filename": "tests/ui/should_impl_trait/method_list_2.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_impl_trait%2Fmethod_list_2.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: method `eq` can be confused for the standard trait method `std::cmp::PartialEq::eq`\n-  --> $DIR/method_list_2.rs:27:5\n+  --> $DIR/method_list_2.rs:25:5\n    |\n LL | /     pub fn eq(&self, other: &Self) -> bool {\n LL | |         unimplemented!()\n@@ -10,7 +10,7 @@ LL | |     }\n    = help: consider implementing the trait `std::cmp::PartialEq` or choosing a less ambiguous method name\n \n error: method `from_iter` can be confused for the standard trait method `std::iter::FromIterator::from_iter`\n-  --> $DIR/method_list_2.rs:31:5\n+  --> $DIR/method_list_2.rs:29:5\n    |\n LL | /     pub fn from_iter<T>(iter: T) -> Self {\n LL | |         unimplemented!()\n@@ -20,7 +20,7 @@ LL | |     }\n    = help: consider implementing the trait `std::iter::FromIterator` or choosing a less ambiguous method name\n \n error: method `from_str` can be confused for the standard trait method `std::str::FromStr::from_str`\n-  --> $DIR/method_list_2.rs:35:5\n+  --> $DIR/method_list_2.rs:33:5\n    |\n LL | /     pub fn from_str(s: &str) -> Result<Self, Self> {\n LL | |         unimplemented!()\n@@ -30,7 +30,7 @@ LL | |     }\n    = help: consider implementing the trait `std::str::FromStr` or choosing a less ambiguous method name\n \n error: method `hash` can be confused for the standard trait method `std::hash::Hash::hash`\n-  --> $DIR/method_list_2.rs:39:5\n+  --> $DIR/method_list_2.rs:37:5\n    |\n LL | /     pub fn hash(&self, state: &mut T) {\n LL | |         unimplemented!()\n@@ -40,7 +40,7 @@ LL | |     }\n    = help: consider implementing the trait `std::hash::Hash` or choosing a less ambiguous method name\n \n error: method `index` can be confused for the standard trait method `std::ops::Index::index`\n-  --> $DIR/method_list_2.rs:43:5\n+  --> $DIR/method_list_2.rs:41:5\n    |\n LL | /     pub fn index(&self, index: usize) -> &Self {\n LL | |         unimplemented!()\n@@ -50,7 +50,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Index` or choosing a less ambiguous method name\n \n error: method `index_mut` can be confused for the standard trait method `std::ops::IndexMut::index_mut`\n-  --> $DIR/method_list_2.rs:47:5\n+  --> $DIR/method_list_2.rs:45:5\n    |\n LL | /     pub fn index_mut(&mut self, index: usize) -> &mut Self {\n LL | |         unimplemented!()\n@@ -60,7 +60,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::IndexMut` or choosing a less ambiguous method name\n \n error: method `into_iter` can be confused for the standard trait method `std::iter::IntoIterator::into_iter`\n-  --> $DIR/method_list_2.rs:51:5\n+  --> $DIR/method_list_2.rs:49:5\n    |\n LL | /     pub fn into_iter(self) -> Self {\n LL | |         unimplemented!()\n@@ -70,7 +70,7 @@ LL | |     }\n    = help: consider implementing the trait `std::iter::IntoIterator` or choosing a less ambiguous method name\n \n error: method `mul` can be confused for the standard trait method `std::ops::Mul::mul`\n-  --> $DIR/method_list_2.rs:55:5\n+  --> $DIR/method_list_2.rs:53:5\n    |\n LL | /     pub fn mul(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -80,7 +80,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Mul` or choosing a less ambiguous method name\n \n error: method `neg` can be confused for the standard trait method `std::ops::Neg::neg`\n-  --> $DIR/method_list_2.rs:59:5\n+  --> $DIR/method_list_2.rs:57:5\n    |\n LL | /     pub fn neg(self) -> Self {\n LL | |         unimplemented!()\n@@ -90,7 +90,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Neg` or choosing a less ambiguous method name\n \n error: method `next` can be confused for the standard trait method `std::iter::Iterator::next`\n-  --> $DIR/method_list_2.rs:63:5\n+  --> $DIR/method_list_2.rs:61:5\n    |\n LL | /     pub fn next(&mut self) -> Option<Self> {\n LL | |         unimplemented!()\n@@ -100,7 +100,7 @@ LL | |     }\n    = help: consider implementing the trait `std::iter::Iterator` or choosing a less ambiguous method name\n \n error: method `not` can be confused for the standard trait method `std::ops::Not::not`\n-  --> $DIR/method_list_2.rs:67:5\n+  --> $DIR/method_list_2.rs:65:5\n    |\n LL | /     pub fn not(self) -> Self {\n LL | |         unimplemented!()\n@@ -110,7 +110,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Not` or choosing a less ambiguous method name\n \n error: method `rem` can be confused for the standard trait method `std::ops::Rem::rem`\n-  --> $DIR/method_list_2.rs:71:5\n+  --> $DIR/method_list_2.rs:69:5\n    |\n LL | /     pub fn rem(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -120,7 +120,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Rem` or choosing a less ambiguous method name\n \n error: method `shl` can be confused for the standard trait method `std::ops::Shl::shl`\n-  --> $DIR/method_list_2.rs:75:5\n+  --> $DIR/method_list_2.rs:73:5\n    |\n LL | /     pub fn shl(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -130,7 +130,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Shl` or choosing a less ambiguous method name\n \n error: method `shr` can be confused for the standard trait method `std::ops::Shr::shr`\n-  --> $DIR/method_list_2.rs:79:5\n+  --> $DIR/method_list_2.rs:77:5\n    |\n LL | /     pub fn shr(self, rhs: Self) -> Self {\n LL | |         unimplemented!()\n@@ -140,7 +140,7 @@ LL | |     }\n    = help: consider implementing the trait `std::ops::Shr` or choosing a less ambiguous method name\n \n error: method `sub` can be confused for the standard trait method `std::ops::Sub::sub`\n-  --> $DIR/method_list_2.rs:83:5\n+  --> $DIR/method_list_2.rs:81:5\n    |\n LL | /     pub fn sub(self, rhs: Self) -> Self {\n LL | |         unimplemented!()"}, {"sha": "4c40739d6f553874865157ad7c9cb06a1051ea0a", "filename": "tests/ui/single_component_path_imports.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// edition:2018\n #![warn(clippy::single_component_path_imports)]\n #![allow(unused_imports)]\n "}, {"sha": "9280bab3c71b5cae19b6d4f7e57b47bb7a5a478f", "filename": "tests/ui/single_component_path_imports.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// edition:2018\n #![warn(clippy::single_component_path_imports)]\n #![allow(unused_imports)]\n "}, {"sha": "509c88ac256a8c0dc99ecdbcac0a8dd6fe97529f", "filename": "tests/ui/single_component_path_imports.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,13 +1,13 @@\n error: this import is redundant\n-  --> $DIR/single_component_path_imports.rs:24:5\n+  --> $DIR/single_component_path_imports.rs:23:5\n    |\n LL |     use regex;\n    |     ^^^^^^^^^^ help: remove it entirely\n    |\n    = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n \n error: this import is redundant\n-  --> $DIR/single_component_path_imports.rs:6:1\n+  --> $DIR/single_component_path_imports.rs:5:1\n    |\n LL | use regex;\n    | ^^^^^^^^^^ help: remove it entirely"}, {"sha": "e43f5d381aaa1087a928a49d86529693a74fdba9", "filename": "tests/ui/single_component_path_imports_macro.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_macro.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// edition:2018\n #![warn(clippy::single_component_path_imports)]\n #![allow(unused_imports)]\n "}, {"sha": "3c65ca3054c6919eb859317608a43151ea71eb5c", "filename": "tests/ui/single_component_path_imports_macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_macro.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// edition:2018\n #![warn(clippy::single_component_path_imports)]\n #![allow(unused_imports)]\n "}, {"sha": "37d5176129ff30a2d06733b35c2b2c9b5404574f", "filename": "tests/ui/single_component_path_imports_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_macro.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: this import is redundant\n-  --> $DIR/single_component_path_imports_macro.rs:16:1\n+  --> $DIR/single_component_path_imports_macro.rs:15:1\n    |\n LL | use m2; // fail\n    | ^^^^^^^ help: remove it entirely"}, {"sha": "c75beb747861882c0a158a46a92b67ca5af5af6e", "filename": "tests/ui/single_component_path_imports_nested_first.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports_nested_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports_nested_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_nested_first.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n #![warn(clippy::single_component_path_imports)]\n #![allow(unused_imports)]\n "}, {"sha": "cf990be1b9ff1cea7a0efe5c9509652b1a1ec271", "filename": "tests/ui/single_component_path_imports_nested_first.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports_nested_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports_nested_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_nested_first.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: this import is redundant\n-  --> $DIR/single_component_path_imports_nested_first.rs:14:10\n+  --> $DIR/single_component_path_imports_nested_first.rs:13:10\n    |\n LL |     use {regex, serde};\n    |          ^^^^^\n@@ -8,15 +8,15 @@ LL |     use {regex, serde};\n    = help: remove this import\n \n error: this import is redundant\n-  --> $DIR/single_component_path_imports_nested_first.rs:14:17\n+  --> $DIR/single_component_path_imports_nested_first.rs:13:17\n    |\n LL |     use {regex, serde};\n    |                 ^^^^^\n    |\n    = help: remove this import\n \n error: this import is redundant\n-  --> $DIR/single_component_path_imports_nested_first.rs:5:1\n+  --> $DIR/single_component_path_imports_nested_first.rs:4:1\n    |\n LL | use regex;\n    | ^^^^^^^^^^ help: remove it entirely"}, {"sha": "48e8e530261bea39d8b1586d2f60cde8233ee65a", "filename": "tests/ui/single_component_path_imports_self_after.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports_self_after.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports_self_after.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_self_after.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n #![warn(clippy::single_component_path_imports)]\n #![allow(unused_imports)]\n "}, {"sha": "4fb0cf40b6e00d40bb2c0345a28457af33695442", "filename": "tests/ui/single_component_path_imports_self_before.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports_self_before.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fsingle_component_path_imports_self_before.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_self_before.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n #![warn(clippy::single_component_path_imports)]\n #![allow(unused_imports)]\n "}, {"sha": "be4dfc8816c7f178091a88305c3fa162ee261a78", "filename": "tests/ui/string_slice.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fstring_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fstring_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_slice.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,10 @@\n+#[warn(clippy::string_slice)]\n+#[allow(clippy::no_effect)]\n+\n+fn main() {\n+    &\"\u00d6lkanne\"[1..];\n+    let m = \"M\u00f6t\u00f6rhead\";\n+    &m[2..5];\n+    let s = String::from(m);\n+    &s[0..2];\n+}"}, {"sha": "55040bf5df2de6d3689f825132ee06e3798dcf3f", "filename": "tests/ui/string_slice.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fstring_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fstring_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_slice.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,22 @@\n+error: indexing into a string may panic if the index is within a UTF-8 character\n+  --> $DIR/string_slice.rs:5:6\n+   |\n+LL |     &\"\u00d6lkanne\"[1..];\n+   |      ^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::string-slice` implied by `-D warnings`\n+\n+error: indexing into a string may panic if the index is within a UTF-8 character\n+  --> $DIR/string_slice.rs:7:6\n+   |\n+LL |     &m[2..5];\n+   |      ^^^^^^^\n+\n+error: indexing into a string may panic if the index is within a UTF-8 character\n+  --> $DIR/string_slice.rs:9:6\n+   |\n+LL |     &s[0..2];\n+   |      ^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "989916c239bad090ad71a54dcb6109220da07b3f", "filename": "tests/ui/unit_hash.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Funit_hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Funit_hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_hash.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,27 @@\n+#![warn(clippy::unit_hash)]\n+\n+use std::collections::hash_map::DefaultHasher;\n+use std::hash::Hash;\n+\n+enum Foo {\n+    Empty,\n+    WithValue(u8),\n+}\n+\n+fn do_nothing() {}\n+\n+fn main() {\n+    let mut state = DefaultHasher::new();\n+    let my_enum = Foo::Empty;\n+\n+    match my_enum {\n+        Foo::Empty => ().hash(&mut state),\n+        Foo::WithValue(x) => x.hash(&mut state),\n+    }\n+\n+    let res = ();\n+    res.hash(&mut state);\n+\n+    #[allow(clippy::unit_arg)]\n+    do_nothing().hash(&mut state);\n+}"}, {"sha": "da276296e0282507b446f629bb5ff051c2f2086f", "filename": "tests/ui/unit_hash.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Funit_hash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Funit_hash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_hash.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -0,0 +1,27 @@\n+error: this call to `hash` on the unit type will do nothing\n+  --> $DIR/unit_hash.rs:18:23\n+   |\n+LL |         Foo::Empty => ().hash(&mut state),\n+   |                       ^^^^^^^^^^^^^^^^^^^ help: remove the call to `hash` or consider using: `0_u8.hash(&mut state)`\n+   |\n+   = note: `-D clippy::unit-hash` implied by `-D warnings`\n+   = note: the implementation of `Hash` for `()` is a no-op\n+\n+error: this call to `hash` on the unit type will do nothing\n+  --> $DIR/unit_hash.rs:23:5\n+   |\n+LL |     res.hash(&mut state);\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: remove the call to `hash` or consider using: `0_u8.hash(&mut state)`\n+   |\n+   = note: the implementation of `Hash` for `()` is a no-op\n+\n+error: this call to `hash` on the unit type will do nothing\n+  --> $DIR/unit_hash.rs:26:5\n+   |\n+LL |     do_nothing().hash(&mut state);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove the call to `hash` or consider using: `0_u8.hash(&mut state)`\n+   |\n+   = note: the implementation of `Hash` for `()` is a no-op\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "2a3a506a57b1437310918767ad1fa55ab0987052", "filename": "tests/ui/unused_async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_async.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n #![warn(clippy::unused_async)]\n \n async fn foo() -> i32 {"}, {"sha": "cc6096d65d9f351a016e0fcd7423ac12405ba587", "filename": "tests/ui/unused_async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Funused_async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Funused_async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_async.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: unused `async` for function with no await statements\n-  --> $DIR/unused_async.rs:4:1\n+  --> $DIR/unused_async.rs:3:1\n    |\n LL | / async fn foo() -> i32 {\n LL | |     4"}, {"sha": "4e33e343ce0e9c414b42abf6d5e73d6b488392c6", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// edition:2018\n // aux-build:proc_macro_derive.rs\n \n #![warn(clippy::use_self)]"}, {"sha": "7b621ff9bcabf5be14250e8740311b04516047b8", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-// edition:2018\n // aux-build:proc_macro_derive.rs\n \n #![warn(clippy::use_self)]"}, {"sha": "ecb78b3f9721b0b575a4a153e08e9833f63917b5", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,169 +1,169 @@\n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:23:21\n+  --> $DIR/use_self.rs:22:21\n    |\n LL |         fn new() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D clippy::use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:24:13\n+  --> $DIR/use_self.rs:23:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:26:22\n+  --> $DIR/use_self.rs:25:22\n    |\n LL |         fn test() -> Foo {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:27:13\n+  --> $DIR/use_self.rs:26:13\n    |\n LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:32:25\n+  --> $DIR/use_self.rs:31:25\n    |\n LL |         fn default() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:33:13\n+  --> $DIR/use_self.rs:32:13\n    |\n LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:98:24\n+  --> $DIR/use_self.rs:97:24\n    |\n LL |         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n    |                        ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:98:55\n+  --> $DIR/use_self.rs:97:55\n    |\n LL |         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n    |                                                       ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:113:13\n+  --> $DIR/use_self.rs:112:13\n    |\n LL |             TS(0)\n    |             ^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:148:29\n+  --> $DIR/use_self.rs:147:29\n    |\n LL |                 fn bar() -> Bar {\n    |                             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:149:21\n+  --> $DIR/use_self.rs:148:21\n    |\n LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:160:21\n+  --> $DIR/use_self.rs:159:21\n    |\n LL |         fn baz() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:161:13\n+  --> $DIR/use_self.rs:160:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:178:21\n+  --> $DIR/use_self.rs:177:21\n    |\n LL |             let _ = Enum::B(42);\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:179:21\n+  --> $DIR/use_self.rs:178:21\n    |\n LL |             let _ = Enum::C { field: true };\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:180:21\n+  --> $DIR/use_self.rs:179:21\n    |\n LL |             let _ = Enum::A;\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:222:13\n+  --> $DIR/use_self.rs:221:13\n    |\n LL |             nested::A::fun_1();\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:223:13\n+  --> $DIR/use_self.rs:222:13\n    |\n LL |             nested::A::A;\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:225:13\n+  --> $DIR/use_self.rs:224:13\n    |\n LL |             nested::A {};\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:244:13\n+  --> $DIR/use_self.rs:243:13\n    |\n LL |             TestStruct::from_something()\n    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:258:25\n+  --> $DIR/use_self.rs:257:25\n    |\n LL |         async fn g() -> S {\n    |                         ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:259:13\n+  --> $DIR/use_self.rs:258:13\n    |\n LL |             S {}\n    |             ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:263:16\n+  --> $DIR/use_self.rs:262:16\n    |\n LL |             &p[S::A..S::B]\n    |                ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:263:22\n+  --> $DIR/use_self.rs:262:22\n    |\n LL |             &p[S::A..S::B]\n    |                      ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:286:29\n+  --> $DIR/use_self.rs:285:29\n    |\n LL |         fn foo(value: T) -> Foo<T> {\n    |                             ^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:287:13\n+  --> $DIR/use_self.rs:286:13\n    |\n LL |             Foo::<T> { value }\n    |             ^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:459:13\n+  --> $DIR/use_self.rs:458:13\n    |\n LL |             A::new::<submod::B>(submod::B {})\n    |             ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:496:13\n+  --> $DIR/use_self.rs:495:13\n    |\n LL |             S2::new()\n    |             ^^ help: use the applicable keyword: `Self`"}, {"sha": "21d66d5df79ecfa0a8b1727424d38ffb1134081f", "filename": "tests/ui/used_underscore_binding.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fused_underscore_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fused_underscore_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n // aux-build:proc_macro_derive.rs\n \n #![feature(rustc_private)]"}, {"sha": "790b849210c9b35875ff2c9b8c4d47f4c54017cd", "filename": "tests/ui/used_underscore_binding.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fused_underscore_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fused_underscore_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,37 +1,37 @@\n error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\n-  --> $DIR/used_underscore_binding.rs:26:5\n+  --> $DIR/used_underscore_binding.rs:25:5\n    |\n LL |     _foo + 1\n    |     ^^^^\n    |\n    = note: `-D clippy::used-underscore-binding` implied by `-D warnings`\n \n error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\n-  --> $DIR/used_underscore_binding.rs:31:20\n+  --> $DIR/used_underscore_binding.rs:30:20\n    |\n LL |     println!(\"{}\", _foo);\n    |                    ^^^^\n \n error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\n-  --> $DIR/used_underscore_binding.rs:32:16\n+  --> $DIR/used_underscore_binding.rs:31:16\n    |\n LL |     assert_eq!(_foo, _foo);\n    |                ^^^^\n \n error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\n-  --> $DIR/used_underscore_binding.rs:32:22\n+  --> $DIR/used_underscore_binding.rs:31:22\n    |\n LL |     assert_eq!(_foo, _foo);\n    |                      ^^^^\n \n error: used binding `_underscore_field` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\n-  --> $DIR/used_underscore_binding.rs:45:5\n+  --> $DIR/used_underscore_binding.rs:44:5\n    |\n LL |     s._underscore_field += 1;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: used binding `_i` which is prefixed with an underscore. A leading underscore signals that a binding will not be used\n-  --> $DIR/used_underscore_binding.rs:100:16\n+  --> $DIR/used_underscore_binding.rs:99:16\n    |\n LL |         uses_i(_i);\n    |                ^^"}, {"sha": "8402c33a4cd5fb695d37116caf003763dcf186bd", "filename": "tests/ui/wildcard_imports.fixed", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwildcard_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwildcard_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.fixed?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,8 +1,13 @@\n+// edition:2015\n // run-rustfix\n // aux-build:wildcard_imports_helper.rs\n \n+// the 2015 edition here is needed because edition 2018 changed the module system\n+// (see https://doc.rust-lang.org/edition-guide/rust-2018/path-changes.html) which means the lint\n+// no longer detects some of the cases starting with Rust 2018.\n+// FIXME: We should likely add another edition 2021 test case for this lint\n+\n #![warn(clippy::wildcard_imports)]\n-//#![allow(clippy::redundant_pub_crate)]\n #![allow(unused)]\n #![allow(clippy::unnecessary_wraps)]\n #![warn(unused_imports)]"}, {"sha": "faaeaade9b02bff03b30793a73638ba5a3a560eb", "filename": "tests/ui/wildcard_imports.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,8 +1,13 @@\n+// edition:2015\n // run-rustfix\n // aux-build:wildcard_imports_helper.rs\n \n+// the 2015 edition here is needed because edition 2018 changed the module system\n+// (see https://doc.rust-lang.org/edition-guide/rust-2018/path-changes.html) which means the lint\n+// no longer detects some of the cases starting with Rust 2018.\n+// FIXME: We should likely add another edition 2021 test case for this lint\n+\n #![warn(clippy::wildcard_imports)]\n-//#![allow(clippy::redundant_pub_crate)]\n #![allow(unused)]\n #![allow(clippy::unnecessary_wraps)]\n #![warn(unused_imports)]"}, {"sha": "7534a65ec9bd56c0878846b81663d05ef269cb92", "filename": "tests/ui/wildcard_imports.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwildcard_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwildcard_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,129 +1,129 @@\n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:12:5\n+  --> $DIR/wildcard_imports.rs:17:5\n    |\n LL | use crate::fn_mod::*;\n    |     ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n    |\n    = note: `-D clippy::wildcard-imports` implied by `-D warnings`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:13:5\n+  --> $DIR/wildcard_imports.rs:18:5\n    |\n LL | use crate::mod_mod::*;\n    |     ^^^^^^^^^^^^^^^^^ help: try: `crate::mod_mod::inner_mod`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:14:5\n+  --> $DIR/wildcard_imports.rs:19:5\n    |\n LL | use crate::multi_fn_mod::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:16:5\n+  --> $DIR/wildcard_imports.rs:21:5\n    |\n LL | use crate::struct_mod::*;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::struct_mod::{A, inner_struct_mod}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:20:5\n+  --> $DIR/wildcard_imports.rs:25:5\n    |\n LL | use wildcard_imports_helper::inner::inner_for_self_import::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:21:5\n+  --> $DIR/wildcard_imports.rs:26:5\n    |\n LL | use wildcard_imports_helper::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:92:13\n+  --> $DIR/wildcard_imports.rs:97:13\n    |\n LL |         use crate::fn_mod::*;\n    |             ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:98:75\n+  --> $DIR/wildcard_imports.rs:103:75\n    |\n LL |         use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n    |                                                                           ^ help: try: `inner_extern_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:99:13\n+  --> $DIR/wildcard_imports.rs:104:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:110:20\n+  --> $DIR/wildcard_imports.rs:115:20\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                    ^^^^^^^^ help: try: `inner::inner_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:110:30\n+  --> $DIR/wildcard_imports.rs:115:30\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                              ^^^^^^^^^ help: try: `inner2::inner_bar`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:117:13\n+  --> $DIR/wildcard_imports.rs:122:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:146:9\n+  --> $DIR/wildcard_imports.rs:151:9\n    |\n LL |     use crate::in_fn_test::*;\n    |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:155:9\n+  --> $DIR/wildcard_imports.rs:160:9\n    |\n LL |     use crate:: in_fn_test::  * ;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate:: in_fn_test::exported`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:156:9\n+  --> $DIR/wildcard_imports.rs:161:9\n    |\n LL |       use crate:: fn_mod::\n    |  _________^\n LL | |         *;\n    | |_________^ help: try: `crate:: fn_mod::foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:167:13\n+  --> $DIR/wildcard_imports.rs:172:13\n    |\n LL |         use super::*;\n    |             ^^^^^^^^ help: try: `super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:202:17\n+  --> $DIR/wildcard_imports.rs:207:17\n    |\n LL |             use super::*;\n    |                 ^^^^^^^^ help: try: `super::insidefoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:210:13\n+  --> $DIR/wildcard_imports.rs:215:13\n    |\n LL |         use super_imports::*;\n    |             ^^^^^^^^^^^^^^^^ help: try: `super_imports::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:219:17\n+  --> $DIR/wildcard_imports.rs:224:17\n    |\n LL |             use super::super::*;\n    |                 ^^^^^^^^^^^^^^^ help: try: `super::super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:228:13\n+  --> $DIR/wildcard_imports.rs:233:13\n    |\n LL |         use super::super::super_imports::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:236:13\n+  --> $DIR/wildcard_imports.rs:241:13\n    |\n LL |         use super::*;\n    |             ^^^^^^^^ help: try: `super::foofoo`"}, {"sha": "1b9da8a55e53fe8796ff7b92ee9b393db29b25bd", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n #![warn(clippy::wrong_self_convention)]\n #![allow(dead_code)]\n "}, {"sha": "590ee6d9c529d6493b8e29b755c2d3e07f982b2b", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:17:17\n+  --> $DIR/wrong_self_convention.rs:16:17\n    |\n LL |     fn from_i32(self) {}\n    |                 ^^^^\n@@ -8,183 +8,183 @@ LL |     fn from_i32(self) {}\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:23:21\n+  --> $DIR/wrong_self_convention.rs:22:21\n    |\n LL |     pub fn from_i64(self) {}\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/wrong_self_convention.rs:35:15\n+  --> $DIR/wrong_self_convention.rs:34:15\n    |\n LL |     fn as_i32(self) {}\n    |               ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `into_*` usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:37:17\n+  --> $DIR/wrong_self_convention.rs:36:17\n    |\n LL |     fn into_i32(&self) {}\n    |                 ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `is_*` usually take `self` by reference or no `self`\n-  --> $DIR/wrong_self_convention.rs:39:15\n+  --> $DIR/wrong_self_convention.rs:38:15\n    |\n LL |     fn is_i32(self) {}\n    |               ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n-  --> $DIR/wrong_self_convention.rs:41:15\n+  --> $DIR/wrong_self_convention.rs:40:15\n    |\n LL |     fn to_i32(self) {}\n    |               ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:43:17\n+  --> $DIR/wrong_self_convention.rs:42:17\n    |\n LL |     fn from_i32(self) {}\n    |                 ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/wrong_self_convention.rs:45:19\n+  --> $DIR/wrong_self_convention.rs:44:19\n    |\n LL |     pub fn as_i64(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `into_*` usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:46:21\n+  --> $DIR/wrong_self_convention.rs:45:21\n    |\n LL |     pub fn into_i64(&self) {}\n    |                     ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `is_*` usually take `self` by reference or no `self`\n-  --> $DIR/wrong_self_convention.rs:47:19\n+  --> $DIR/wrong_self_convention.rs:46:19\n    |\n LL |     pub fn is_i64(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n-  --> $DIR/wrong_self_convention.rs:48:19\n+  --> $DIR/wrong_self_convention.rs:47:19\n    |\n LL |     pub fn to_i64(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:49:21\n+  --> $DIR/wrong_self_convention.rs:48:21\n    |\n LL |     pub fn from_i64(self) {}\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/wrong_self_convention.rs:94:19\n+  --> $DIR/wrong_self_convention.rs:93:19\n    |\n LL |         fn as_i32(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `into_*` usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:97:25\n+  --> $DIR/wrong_self_convention.rs:96:25\n    |\n LL |         fn into_i32_ref(&self) {}\n    |                         ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `is_*` usually take `self` by reference or no `self`\n-  --> $DIR/wrong_self_convention.rs:99:19\n+  --> $DIR/wrong_self_convention.rs:98:19\n    |\n LL |         fn is_i32(self) {}\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:103:21\n+  --> $DIR/wrong_self_convention.rs:102:21\n    |\n LL |         fn from_i32(self) {}\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/wrong_self_convention.rs:118:19\n+  --> $DIR/wrong_self_convention.rs:117:19\n    |\n LL |         fn as_i32(self);\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `into_*` usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:121:25\n+  --> $DIR/wrong_self_convention.rs:120:25\n    |\n LL |         fn into_i32_ref(&self);\n    |                         ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `is_*` usually take `self` by reference or no `self`\n-  --> $DIR/wrong_self_convention.rs:123:19\n+  --> $DIR/wrong_self_convention.rs:122:19\n    |\n LL |         fn is_i32(self);\n    |                   ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:127:21\n+  --> $DIR/wrong_self_convention.rs:126:21\n    |\n LL |         fn from_i32(self);\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `into_*` usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:145:25\n+  --> $DIR/wrong_self_convention.rs:144:25\n    |\n LL |         fn into_i32_ref(&self);\n    |                         ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention.rs:151:21\n+  --> $DIR/wrong_self_convention.rs:150:21\n    |\n LL |         fn from_i32(self);\n    |                     ^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods with the following characteristics: (`to_*` and `self` type is `Copy`) usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:175:22\n+  --> $DIR/wrong_self_convention.rs:174:22\n    |\n LL |         fn to_u64_v2(&self) -> u64 {\n    |                      ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n-  --> $DIR/wrong_self_convention.rs:184:19\n+  --> $DIR/wrong_self_convention.rs:183:19\n    |\n LL |         fn to_u64(self) -> u64 {\n    |                   ^^^^"}, {"sha": "a8fe8331133778ebcf934b4b234c07c430f484c9", "filename": "tests/ui/wrong_self_convention2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwrong_self_convention2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwrong_self_convention2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention2.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n #![warn(clippy::wrong_self_convention)]\n #![allow(dead_code)]\n "}, {"sha": "5bdc47f91f65b42b1376b18a7a661926c6d3805b", "filename": "tests/ui/wrong_self_convention2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwrong_self_convention2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwrong_self_convention2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention2.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention2.rs:55:29\n+  --> $DIR/wrong_self_convention2.rs:54:29\n    |\n LL |         pub fn from_be_self(self) -> Self {\n    |                             ^^^^\n@@ -8,7 +8,7 @@ LL |         pub fn from_be_self(self) -> Self {\n    = help: consider choosing a less ambiguous name\n \n error: methods called `from_*` usually take no `self`\n-  --> $DIR/wrong_self_convention2.rs:64:25\n+  --> $DIR/wrong_self_convention2.rs:63:25\n    |\n LL |         fn from_be_self(self) -> Self;\n    |                         ^^^^"}, {"sha": "5bb2116bd339af9ef01ddc281abb2d70416a5610", "filename": "tests/ui/wrong_self_conventions_mut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwrong_self_conventions_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwrong_self_conventions_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_conventions_mut.rs?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,4 +1,3 @@\n-// edition:2018\n #![warn(clippy::wrong_self_convention)]\n #![allow(dead_code)]\n "}, {"sha": "8665d8dc9a9dea4f7b1ed03b3b5a26084fdf11d3", "filename": "tests/ui/wrong_self_conventions_mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwrong_self_conventions_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e674d0a59924a5c36ce0ccb6e21d6e2419b08145/tests%2Fui%2Fwrong_self_conventions_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_conventions_mut.stderr?ref=e674d0a59924a5c36ce0ccb6e21d6e2419b08145", "patch": "@@ -1,5 +1,5 @@\n error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n-  --> $DIR/wrong_self_conventions_mut.rs:15:24\n+  --> $DIR/wrong_self_conventions_mut.rs:14:24\n    |\n LL |         pub fn to_many(&mut self) -> Option<&mut [T]> {\n    |                        ^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |         pub fn to_many(&mut self) -> Option<&mut [T]> {\n    = help: consider choosing a less ambiguous name\n \n error: methods with the following characteristics: (`to_*` and `*_mut`) usually take `self` by mutable reference\n-  --> $DIR/wrong_self_conventions_mut.rs:23:28\n+  --> $DIR/wrong_self_conventions_mut.rs:22:28\n    |\n LL |         pub fn to_many_mut(&self) -> Option<&[T]> {\n    |                            ^^^^^"}]}