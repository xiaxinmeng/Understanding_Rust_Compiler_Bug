{"sha": "afc8a5c03179cae725837c95fe0bc426bcad304d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYzhhNWMwMzE3OWNhZTcyNTgzN2M5NWZlMGJjNDI2YmNhZDMwNGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-30T01:36:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-30T17:06:25Z"}, "message": "Convert the eval::env to an ast::crate_cfg\n\ncrate_cfg will replace eval::env as the mechanism for conditional compilation.\nThis is a transitional step so they can both exist together.\n\nIssue #489", "tree": {"sha": "988d1517e0dc5dd91975d0057012e973e29c593c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/988d1517e0dc5dd91975d0057012e973e29c593c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afc8a5c03179cae725837c95fe0bc426bcad304d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afc8a5c03179cae725837c95fe0bc426bcad304d", "html_url": "https://github.com/rust-lang/rust/commit/afc8a5c03179cae725837c95fe0bc426bcad304d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afc8a5c03179cae725837c95fe0bc426bcad304d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d53bfad8e7b6f199436d8838f75eb90713dffd1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53bfad8e7b6f199436d8838f75eb90713dffd1d", "html_url": "https://github.com/rust-lang/rust/commit/d53bfad8e7b6f199436d8838f75eb90713dffd1d"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "9a4e08f8e278429fffa45e983850f5e1bd3a31b1", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/afc8a5c03179cae725837c95fe0bc426bcad304d/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc8a5c03179cae725837c95fe0bc426bcad304d/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=afc8a5c03179cae725837c95fe0bc426bcad304d", "patch": "@@ -33,6 +33,7 @@ type parser =\n         fn get_restriction() -> restriction ;\n         fn get_file_type() -> file_type ;\n         fn get_env() -> eval::env ;\n+        fn get_cfg() -> ast::crate_cfg;\n         fn get_session() -> session::session ;\n         fn get_span() -> common::span ;\n         fn get_lo_pos() -> uint ;\n@@ -53,6 +54,7 @@ fn new_parser(session::session sess, eval::env env,\n               str path, uint pos, ast::node_id next_id) -> parser {\n     obj stdio_parser(session::session sess,\n                      eval::env env,\n+                     ast::crate_cfg cfg,\n                      file_type ftype,\n                      mutable token::token tok,\n                      mutable uint lo,\n@@ -84,6 +86,7 @@ fn new_parser(session::session sess, eval::env env,\n         fn get_last_lo_pos() -> uint { ret last_lo; }\n         fn get_file_type() -> file_type { ret ftype; }\n         fn get_env() -> eval::env { ret env; }\n+        fn get_cfg() -> ast::crate_cfg { ret cfg; }\n         fn get_prec_table() -> vec[op_spec] { ret precs; }\n         fn get_str(token::str_num i) -> str {\n             ret interner::get(*rdr.get_interner(), i);\n@@ -102,6 +105,18 @@ fn new_parser(session::session sess, eval::env env,\n         }\n         fn next_id() -> ast::node_id { ret next_id_var; }\n     }\n+\n+    auto cfg = {\n+        fn m(&tup(ast::ident, eval::val) item) -> @ast::meta_item {\n+            auto name = item._0;\n+            auto value = eval::val_as_str(item._1);\n+            auto meta_item_ = ast::meta_name_value(name, value);\n+            ret @rec(node=meta_item_,\n+                     span=rec(lo=0u,hi=0u));\n+        }\n+        vec::map(m, env)\n+    };\n+\n     auto ftype = SOURCE_FILE;\n     if (str::ends_with(path, \".rc\")) { ftype = CRATE_FILE; }\n     auto srdr = io::file_reader(path);\n@@ -113,8 +128,8 @@ fn new_parser(session::session sess, eval::env env,\n \n     lexer::consume_whitespace_and_comments(rdr);\n     auto npos = rdr.get_chpos();\n-    ret stdio_parser(sess, env, ftype, lexer::next_token(rdr), npos, npos,\n-                     npos, UNRESTRICTED, rdr,\n+    ret stdio_parser(sess, env, cfg, ftype, lexer::next_token(rdr),\n+                     npos, npos, npos, UNRESTRICTED, rdr,\n                      prec_table(), next_id, bad_expr_word_table(),\n                      ext::syntax_expander_table());\n }\n@@ -2319,7 +2334,7 @@ fn parse_crate_from_source_file(&parser p) -> @ast::crate {\n     ret @spanned(lo, p.get_lo_pos(), rec(directives=cdirs,\n                                          module=m,\n                                          attrs=crate_attrs._0,\n-                                         config=[]));\n+                                         config=p.get_cfg()));\n }\n \n fn parse_str(&parser p) -> ast::ident {\n@@ -2452,7 +2467,7 @@ fn parse_crate_from_crate_file(&parser p) -> @ast::crate {\n     ret @spanned(lo, hi, rec(directives=cdirs,\n                              module=m,\n                              attrs=crate_attrs,\n-                             config=[]));\n+                             config=p.get_cfg()));\n }\n //\n // Local Variables:"}]}