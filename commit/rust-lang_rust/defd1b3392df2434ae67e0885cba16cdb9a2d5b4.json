{"sha": "defd1b3392df2434ae67e0885cba16cdb9a2d5b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZmQxYjMzOTJkZjI0MzRhZTY3ZTA4ODVjYmExNmNkYjlhMmQ1YjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T07:15:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T21:44:14Z"}, "message": "rustbuild: Add a link checker for documentation\n\nAdd a script to get run which verifies that `href` links in documents are\ncorrect. We're always getting a steady stream of \"fix a broken link\" PRs and\nissue reports, and we should probably just nip them all in the bud.", "tree": {"sha": "acb72878bdac6b7778fa25dfcff2b2adbab81b25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acb72878bdac6b7778fa25dfcff2b2adbab81b25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/defd1b3392df2434ae67e0885cba16cdb9a2d5b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/defd1b3392df2434ae67e0885cba16cdb9a2d5b4", "html_url": "https://github.com/rust-lang/rust/commit/defd1b3392df2434ae67e0885cba16cdb9a2d5b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/defd1b3392df2434ae67e0885cba16cdb9a2d5b4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c", "html_url": "https://github.com/rust-lang/rust/commit/f7b7535fd7cc4df3c137c5ce05bcd9817e8e006c"}], "stats": {"total": 282, "additions": 280, "deletions": 2}, "files": [{"sha": "5de7e6957c6f12d134446a291026add49fd66482", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/defd1b3392df2434ae67e0885cba16cdb9a2d5b4/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/defd1b3392df2434ae67e0885cba16cdb9a2d5b4/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=defd1b3392df2434ae67e0885cba16cdb9a2d5b4", "patch": "@@ -73,7 +73,8 @@ def download_rust_nightly(self):\n \n         if self.rustc().startswith(self.bin_root()) and \\\n            (not os.path.exists(self.rustc()) or self.rustc_out_of_date()):\n-            shutil.rmtree(self.bin_root())\n+            if os.path.exists(self.bin_root()):\n+                shutil.rmtree(self.bin_root())\n             filename = \"rust-std-nightly-\" + self.build + \".tar.gz\"\n             url = \"https://static.rust-lang.org/dist/\" + self.snap_rustc_date()\n             tarball = os.path.join(rustc_cache, filename)"}, {"sha": "19293e80217e34b402c32242e93023edf2634cb5", "filename": "src/bootstrap/build/check.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/defd1b3392df2434ae67e0885cba16cdb9a2d5b4/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defd1b3392df2434ae67e0885cba16cdb9a2d5b4/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcheck.rs?ref=defd1b3392df2434ae67e0885cba16cdb9a2d5b4", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::process::Command;\n+\n+use build::{Build, Compiler};\n+\n+pub fn linkcheck(build: &Build, stage: u32, host: &str) {\n+    println!(\"Linkcheck stage{} ({})\", stage, host);\n+    let compiler = Compiler::new(stage, host);\n+    let linkchecker = build.tool(&compiler, \"linkchecker\");\n+    build.run(Command::new(&linkchecker)\n+                     .arg(build.out.join(host).join(\"doc\")));\n+}"}, {"sha": "9f24fba5843b2fae0279090a3e2f7d4404cfff67", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/defd1b3392df2434ae67e0885cba16cdb9a2d5b4/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defd1b3392df2434ae67e0885cba16cdb9a2d5b4/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=defd1b3392df2434ae67e0885cba16cdb9a2d5b4", "patch": "@@ -30,6 +30,7 @@ macro_rules! t {\n \n mod cc;\n mod channel;\n+mod check;\n mod clean;\n mod compile;\n mod config;\n@@ -171,6 +172,9 @@ impl Build {\n                 Rustc { stage } => {\n                     compile::assemble_rustc(self, stage, target.target);\n                 }\n+                ToolLinkchecker { stage } => {\n+                    compile::tool(self, stage, target.target, \"linkchecker\");\n+                }\n                 ToolRustbook { stage } => {\n                     compile::tool(self, stage, target.target, \"rustbook\");\n                 }\n@@ -195,6 +199,10 @@ impl Build {\n                     doc::rustc(self, stage, target.target, &doc_out);\n                 }\n \n+                CheckLinkcheck { stage } => {\n+                    check::linkcheck(self, stage, target.target);\n+                }\n+\n                 Doc { .. } | // pseudo-steps\n                 Check { .. } => {}\n             }"}, {"sha": "7921edcff55a086bc21d0f65583bfefe4997cd2b", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/defd1b3392df2434ae67e0885cba16cdb9a2d5b4/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defd1b3392df2434ae67e0885cba16cdb9a2d5b4/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=defd1b3392df2434ae67e0885cba16cdb9a2d5b4", "patch": "@@ -46,6 +46,7 @@ macro_rules! targets {\n             }),\n \n             // Various tools that we can build as part of the build.\n+            (tool_linkchecker, ToolLinkchecker { stage: u32 }),\n             (tool_rustbook, ToolRustbook { stage: u32 }),\n \n             // Steps for long-running native builds. Ideally these wouldn't\n@@ -71,6 +72,7 @@ macro_rules! targets {\n             // Steps for running tests. The 'check' target is just a pseudo\n             // target to depend on a bunch of others.\n             (check, Check { stage: u32, compiler: Compiler<'a> }),\n+            (check_linkcheck, CheckLinkcheck { stage: u32 }),\n         }\n     }\n }\n@@ -200,6 +202,8 @@ fn add_steps<'a>(build: &'a Build,\n         }\n \n         targets!(add_step);\n+\n+        panic!(\"unknown step: {}\", step);\n     }\n }\n \n@@ -273,7 +277,15 @@ impl<'a> Step<'a> {\n                      self.doc_std(stage)]\n             }\n             Source::Check { stage, compiler: _ } => {\n-                vec![]\n+                vec![self.check_linkcheck(stage)]\n+            }\n+            Source::CheckLinkcheck { stage } => {\n+                vec![self.tool_linkchecker(stage), self.doc(stage)]\n+            }\n+\n+            Source::ToolLinkchecker { stage } => {\n+                vec![self.libstd(stage, self.compiler(stage))]\n+            }\n             Source::ToolRustbook { stage } => {\n                 vec![self.librustc(stage, self.compiler(stage))]\n             }"}, {"sha": "8e94137d2139b0394e6f126360707aade318acea", "filename": "src/tools/linkchecker/Cargo.lock", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/defd1b3392df2434ae67e0885cba16cdb9a2d5b4/src%2Ftools%2Flinkchecker%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/defd1b3392df2434ae67e0885cba16cdb9a2d5b4/src%2Ftools%2Flinkchecker%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2FCargo.lock?ref=defd1b3392df2434ae67e0885cba16cdb9a2d5b4", "patch": "@@ -0,0 +1,64 @@\n+[root]\n+name = \"linkchecker\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"url 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"libc\"\n+version = \"0.2.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"matches\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"rand\"\n+version = \"0.3.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rustc-serialize\"\n+version = \"0.3.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"unicode-bidi\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"matches 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"unicode-normalization\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"url\"\n+version = \"0.5.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"matches 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-bidi 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-normalization 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"uuid 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"uuid\"\n+version = \"0.1.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+"}, {"sha": "29fc78a65e9168e042987fbe59184fdc254b0fae", "filename": "src/tools/linkchecker/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/defd1b3392df2434ae67e0885cba16cdb9a2d5b4/src%2Ftools%2Flinkchecker%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/defd1b3392df2434ae67e0885cba16cdb9a2d5b4/src%2Ftools%2Flinkchecker%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2FCargo.toml?ref=defd1b3392df2434ae67e0885cba16cdb9a2d5b4", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+name = \"linkchecker\"\n+version = \"0.1.0\"\n+authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n+\n+[dependencies]\n+url = \"0.5\"\n+\n+[[bin]]\n+name = \"linkchecker\"\n+path = \"main.rs\""}, {"sha": "e5e88081bc43ed23e91b11f8cd92c05dbfb5671b", "filename": "src/tools/linkchecker/main.rs", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/defd1b3392df2434ae67e0885cba16cdb9a2d5b4/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defd1b3392df2434ae67e0885cba16cdb9a2d5b4/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=defd1b3392df2434ae67e0885cba16cdb9a2d5b4", "patch": "@@ -0,0 +1,161 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Script to check the validity of `href` links in our HTML documentation.\n+//!\n+//! In the past we've been quite error prone to writing in broken links as most\n+//! of them are manually rather than automatically added. As files move over\n+//! time or apis change old links become stale or broken. The purpose of this\n+//! script is to check all relative links in our documentation to make sure they\n+//! actually point to a valid place.\n+//!\n+//! Currently this doesn't actually do any HTML parsing or anything fancy like\n+//! that, it just has a simple \"regex\" to search for `href` tags. These values\n+//! are then translated to file URLs if possible and then the destination is\n+//! asserted to exist.\n+//!\n+//! A few whitelisted exceptions are allowed as there's known bugs in rustdoc,\n+//! but this should catch the majority of \"broken link\" cases.\n+\n+extern crate url;\n+\n+use std::env;\n+use std::fs::File;\n+use std::io::prelude::*;\n+use std::path::Path;\n+\n+use url::{Url, UrlParser};\n+\n+macro_rules! t {\n+    ($e:expr) => (match $e {\n+        Ok(e) => e,\n+        Err(e) => panic!(\"{} failed with {}\", stringify!($e), e),\n+    })\n+}\n+\n+fn main() {\n+    let docs = env::args().nth(1).unwrap();\n+    let docs = env::current_dir().unwrap().join(docs);\n+    let mut url = Url::from_file_path(&docs).unwrap();\n+    let mut errors = false;\n+    walk(&docs, &docs, &mut url, &mut errors);\n+    if errors {\n+        panic!(\"found some broken links\");\n+    }\n+}\n+\n+fn walk(root: &Path, dir: &Path, url: &mut Url, errors: &mut bool) {\n+    for entry in t!(dir.read_dir()).map(|e| t!(e)) {\n+        let path = entry.path();\n+        let kind = t!(entry.file_type());\n+        url.path_mut().unwrap().push(entry.file_name().into_string().unwrap());\n+        if kind.is_dir() {\n+            walk(root, &path, url, errors);\n+        } else {\n+            check(root, &path, url, errors);\n+        }\n+        url.path_mut().unwrap().pop();\n+    }\n+}\n+\n+fn check(root: &Path, file: &Path, base: &Url, errors: &mut bool) {\n+    // ignore js files as they are not prone to errors as the rest of the\n+    // documentation is and they otherwise bring up false positives.\n+    if file.extension().and_then(|s| s.to_str()) == Some(\"js\") {\n+        return\n+    }\n+\n+    let pretty_file = file.strip_prefix(root).unwrap_or(file);\n+\n+    // Unfortunately we're not 100% full of valid links today to we need a few\n+    // whitelists to get this past `make check` today.\n+    if let Some(path) = pretty_file.to_str() {\n+        // FIXME(#32129)\n+        if path == \"std/string/struct.String.html\" {\n+            return\n+        }\n+        // FIXME(#32130)\n+        if path.contains(\"btree_set/struct.BTreeSet.html\") ||\n+           path == \"collections/struct.BTreeSet.html\" {\n+            return\n+        }\n+        // FIXME(#31948)\n+        if path.contains(\"ParseFloatError\") {\n+            return\n+        }\n+\n+        // currently\n+        if path == \"std/sys/ext/index.html\" {\n+            return\n+        }\n+\n+        // weird reexports, but this module is on its way out, so chalk it up to\n+        // \"rustdoc weirdness\" and move on from there\n+        if path.contains(\"scoped_tls\") {\n+            return\n+        }\n+    }\n+\n+    let mut parser = UrlParser::new();\n+    parser.base_url(base);\n+    let mut contents = String::new();\n+    if t!(File::open(file)).read_to_string(&mut contents).is_err() {\n+        return\n+    }\n+\n+    for (i, mut line) in contents.lines().enumerate() {\n+        // Search for anything that's the regex 'href[ ]*=[ ]*\".*?\"'\n+        while let Some(j) = line.find(\" href\") {\n+            let rest = &line[j + 5..];\n+            line = rest;\n+            let pos_equals = match rest.find(\"=\") {\n+                Some(i) => i,\n+                None => continue,\n+            };\n+            if rest[..pos_equals].trim_left_matches(\" \") != \"\" {\n+                continue\n+            }\n+            let rest = &rest[pos_equals + 1..];\n+            let pos_quote = match rest.find(\"\\\"\").or_else(|| rest.find(\"'\")) {\n+                Some(i) => i,\n+                None => continue,\n+            };\n+            if rest[..pos_quote].trim_left_matches(\" \") != \"\" {\n+                continue\n+            }\n+            let rest = &rest[pos_quote + 1..];\n+            let url = match rest.find(\"\\\"\").or_else(|| rest.find(\"'\")) {\n+                Some(i) => &rest[..i],\n+                None => continue,\n+            };\n+\n+            // Once we've plucked out the URL, parse it using our base url and\n+            // then try to extract a file path. If either if these fail then we\n+            // just keep going.\n+            let parsed_url = match parser.parse(url) {\n+                Ok(url) => url,\n+                Err(..) => continue,\n+            };\n+            let path = match parsed_url.to_file_path() {\n+                Ok(path) => path,\n+                Err(..) => continue,\n+            };\n+\n+            // Alright, if we've found a file name then this file had better\n+            // exist! If it doesn't then we register and print an error.\n+            if !path.exists() {\n+                *errors = true;\n+                print!(\"{}:{}: broken link - \", pretty_file.display(), i + 1);\n+                let pretty_path = path.strip_prefix(root).unwrap_or(&path);\n+                println!(\"{}\", pretty_path.display());\n+            }\n+        }\n+    }\n+}"}]}