{"sha": "70f55a78a32f8a34eb0386b8838f03baec2b2688", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZjU1YTc4YTMyZjhhMzRlYjAzODZiODgzOGYwM2JhZWMyYjI2ODg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-20T10:08:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-20T10:08:34Z"}, "message": "Rollup merge of #76853 - denisvasilik:intra-doc-links-core-wake, r=jyn514\n\nUse intra-doc links in library/core/src/task/wake.rs\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links", "tree": {"sha": "15cd00cf093f2602a9e4eb031499ad5316619422", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15cd00cf093f2602a9e4eb031499ad5316619422"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70f55a78a32f8a34eb0386b8838f03baec2b2688", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZyojCRBK7hj4Ov3rIwAAdHIIAGc33iCiJ06duORO1+tCS5Fy\nyWEBZNXuSCsbUTvv+GnKqIBcCoGTQGdn+vyGss861w4Gd4ZuAGU8nnG3s+jQikjc\ntcrGvqXZl8asEb25T5vPD8h98wYtQAYtksoJwqYCyTCeJZbPTm7UsJtM/nXXivLT\ns/dtxkeNECPgYVYq0Y6MGx2Rm561pH+fyAuoWtLBv+FdfmeCAEPxZXomYa//dOrO\newHoNpbIn/AYaXBIubzIVGulG2kZiRks5qetx3xIbK2rLGN4Bbat5kHZlxO0kzj3\nFoXRSzQX711ceqEd+119ZyOd5VSJjvU02tVI1yRuu4aPbScpR95bJnctFvCo5lE=\n=kHU5\n-----END PGP SIGNATURE-----\n", "payload": "tree 15cd00cf093f2602a9e4eb031499ad5316619422\nparent 6d0890ec831dd278bfc1c55fb2b35e95636f0811\nparent 8e9ad31178064993ed2f59719b873ef9d9a3a0de\nauthor Ralf Jung <post@ralfj.de> 1600596514 +0200\ncommitter GitHub <noreply@github.com> 1600596514 +0200\n\nRollup merge of #76853 - denisvasilik:intra-doc-links-core-wake, r=jyn514\n\nUse intra-doc links in library/core/src/task/wake.rs\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70f55a78a32f8a34eb0386b8838f03baec2b2688", "html_url": "https://github.com/rust-lang/rust/commit/70f55a78a32f8a34eb0386b8838f03baec2b2688", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70f55a78a32f8a34eb0386b8838f03baec2b2688/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d0890ec831dd278bfc1c55fb2b35e95636f0811", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0890ec831dd278bfc1c55fb2b35e95636f0811", "html_url": "https://github.com/rust-lang/rust/commit/6d0890ec831dd278bfc1c55fb2b35e95636f0811"}, {"sha": "8e9ad31178064993ed2f59719b873ef9d9a3a0de", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9ad31178064993ed2f59719b873ef9d9a3a0de", "html_url": "https://github.com/rust-lang/rust/commit/8e9ad31178064993ed2f59719b873ef9d9a3a0de"}], "stats": {"total": 29, "additions": 3, "deletions": 26}, "files": [{"sha": "668a028a3f1ea948c0f110ea4c53a70a3a5840bf", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/70f55a78a32f8a34eb0386b8838f03baec2b2688/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f55a78a32f8a34eb0386b8838f03baec2b2688/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=70f55a78a32f8a34eb0386b8838f03baec2b2688", "patch": "@@ -8,10 +8,8 @@ use crate::marker::{PhantomData, Unpin};\n ///\n /// [vtable]: https://en.wikipedia.org/wiki/Virtual_method_table\n ///\n-/// It consists of a data pointer and a [virtual function pointer table (vtable)][vtable] that\n-/// customizes the behavior of the `RawWaker`.\n-///\n-/// [`Waker`]: struct.Waker.html\n+/// It consists of a data pointer and a [virtual function pointer table (vtable)][vtable]\n+/// that customizes the behavior of the `RawWaker`.\n #[derive(PartialEq, Debug)]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct RawWaker {\n@@ -52,12 +50,10 @@ impl RawWaker {\n /// The pointer passed to all functions inside the vtable is the `data` pointer\n /// from the enclosing [`RawWaker`] object.\n ///\n-/// The functions inside this struct are only intended be called on the `data`\n+/// The functions inside this struct are only intended to be called on the `data`\n /// pointer of a properly constructed [`RawWaker`] object from inside the\n /// [`RawWaker`] implementation. Calling one of the contained functions using\n /// any other `data` pointer will cause undefined behavior.\n-///\n-/// [`RawWaker`]: struct.RawWaker.html\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n #[derive(PartialEq, Copy, Clone, Debug)]\n pub struct RawWakerVTable {\n@@ -68,9 +64,6 @@ pub struct RawWakerVTable {\n     /// required for this additional instance of a [`RawWaker`] and associated\n     /// task. Calling `wake` on the resulting [`RawWaker`] should result in a wakeup\n     /// of the same task that would have been awoken by the original [`RawWaker`].\n-    ///\n-    /// [`Waker`]: struct.Waker.html\n-    /// [`RawWaker`]: struct.RawWaker.html\n     clone: unsafe fn(*const ()) -> RawWaker,\n \n     /// This function will be called when `wake` is called on the [`Waker`].\n@@ -79,28 +72,20 @@ pub struct RawWakerVTable {\n     /// The implementation of this function must make sure to release any\n     /// resources that are associated with this instance of a [`RawWaker`] and\n     /// associated task.\n-    ///\n-    /// [`Waker`]: struct.Waker.html\n-    /// [`RawWaker`]: struct.RawWaker.html\n     wake: unsafe fn(*const ()),\n \n     /// This function will be called when `wake_by_ref` is called on the [`Waker`].\n     /// It must wake up the task associated with this [`RawWaker`].\n     ///\n     /// This function is similar to `wake`, but must not consume the provided data\n     /// pointer.\n-    ///\n-    /// [`Waker`]: struct.Waker.html\n-    /// [`RawWaker`]: struct.RawWaker.html\n     wake_by_ref: unsafe fn(*const ()),\n \n     /// This function gets called when a [`RawWaker`] gets dropped.\n     ///\n     /// The implementation of this function must make sure to release any\n     /// resources that are associated with this instance of a [`RawWaker`] and\n     /// associated task.\n-    ///\n-    /// [`RawWaker`]: struct.RawWaker.html\n     drop: unsafe fn(*const ()),\n }\n \n@@ -142,9 +127,6 @@ impl RawWakerVTable {\n     /// The implementation of this function must make sure to release any\n     /// resources that are associated with this instance of a [`RawWaker`] and\n     /// associated task.\n-    ///\n-    /// [`Waker`]: struct.Waker.html\n-    /// [`RawWaker`]: struct.RawWaker.html\n     #[rustc_promotable]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     // `rustc_allow_const_fn_ptr` is a hack that should not be used anywhere else\n@@ -208,8 +190,6 @@ impl fmt::Debug for Context<'_> {\n /// executor-specific wakeup behavior.\n ///\n /// Implements [`Clone`], [`Send`], and [`Sync`].\n-///\n-/// [`RawWaker`]: struct.RawWaker.html\n #[repr(transparent)]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct Waker {\n@@ -275,9 +255,6 @@ impl Waker {\n     /// The behavior of the returned `Waker` is undefined if the contract defined\n     /// in [`RawWaker`]'s and [`RawWakerVTable`]'s documentation is not upheld.\n     /// Therefore this method is unsafe.\n-    ///\n-    /// [`RawWaker`]: struct.RawWaker.html\n-    /// [`RawWakerVTable`]: struct.RawWakerVTable.html\n     #[inline]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub unsafe fn from_raw(waker: RawWaker) -> Waker {"}]}