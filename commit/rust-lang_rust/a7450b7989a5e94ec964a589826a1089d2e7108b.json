{"sha": "a7450b7989a5e94ec964a589826a1089d2e7108b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NDUwYjc5ODlhNWU5NGVjOTY0YTU4OTgyNmExMDg5ZDJlNzEwOGI=", "commit": {"author": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-07-22T21:04:02Z"}, "committer": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-07-22T22:52:50Z"}, "message": "decouple highlight_if_we_cannot_match_hir_ty", "tree": {"sha": "4a4c09fa3d56b68f4a3938e35bf2a8acb2ccd708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a4c09fa3d56b68f4a3938e35bf2a8acb2ccd708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7450b7989a5e94ec964a589826a1089d2e7108b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7450b7989a5e94ec964a589826a1089d2e7108b", "html_url": "https://github.com/rust-lang/rust/commit/a7450b7989a5e94ec964a589826a1089d2e7108b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7450b7989a5e94ec964a589826a1089d2e7108b/comments", "author": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b56f5b9df5a41fbf3c82310b5c3d901b0b0f78dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b56f5b9df5a41fbf3c82310b5c3d901b0b0f78dc", "html_url": "https://github.com/rust-lang/rust/commit/b56f5b9df5a41fbf3c82310b5c3d901b0b0f78dc"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "378713c52a2b4e23de8ea38400a85bc64f532e75", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a7450b7989a5e94ec964a589826a1089d2e7108b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7450b7989a5e94ec964a589826a1089d2e7108b/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=a7450b7989a5e94ec964a589826a1089d2e7108b", "patch": "@@ -336,13 +336,19 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let arg_ty = self.regioncx.universal_regions().unnormalized_input_tys\n             [implicit_inputs + argument_index];\n+        let (_, span) = self.regioncx.get_argument_name_and_span_for_region(\n+            &self.body,\n+            &self.local_names,\n+            argument_index,\n+        );\n+\n         self.highlight_if_we_can_match_hir_ty_from_argument(fr, arg_ty, argument_index)\n             .or_else(|| {\n                 // `highlight_if_we_cannot_match_hir_ty` needs to know the number we will give to\n                 // the anonymous region. If it succeeds, the `synthesize_region_name` call below\n                 // will increment the counter, \"reserving\" the number we just used.\n                 let counter = *self.next_region_name.try_borrow().unwrap();\n-                self.highlight_if_we_cannot_match_hir_ty(fr, arg_ty, counter)\n+                self.highlight_if_we_cannot_match_hir_ty(fr, arg_ty, span, counter)\n             })\n             .map(|highlight| RegionName {\n                 name: self.synthesize_region_name(),\n@@ -385,26 +391,20 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     fn highlight_if_we_cannot_match_hir_ty(\n         &self,\n         needle_fr: RegionVid,\n-        argument_ty: Ty<'tcx>,\n+        ty: Ty<'tcx>,\n+        span: Span,\n         counter: usize,\n     ) -> Option<RegionNameHighlight> {\n         let mut highlight = RegionHighlightMode::default();\n         highlight.highlighting_region_vid(needle_fr, counter);\n-        let type_name = self.infcx.extract_type_name(&argument_ty, Some(highlight)).0;\n+        let type_name = self.infcx.extract_type_name(&ty, Some(highlight)).0;\n \n         debug!(\n             \"highlight_if_we_cannot_match_hir_ty: type_name={:?} needle_fr={:?}\",\n             type_name, needle_fr\n         );\n         if type_name.find(&format!(\"'{}\", counter)).is_some() {\n             // Only add a label if we can confirm that a region was labelled.\n-            let argument_index =\n-                self.regioncx.get_argument_index_for_region(self.infcx.tcx, needle_fr)?;\n-            let (_, span) = self.regioncx.get_argument_name_and_span_for_region(\n-                &self.body,\n-                &self.local_names,\n-                argument_index,\n-            );\n \n             Some(RegionNameHighlight::CannotMatchHirTy(span, type_name))\n         } else {"}]}