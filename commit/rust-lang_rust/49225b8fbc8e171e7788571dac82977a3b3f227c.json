{"sha": "49225b8fbc8e171e7788571dac82977a3b3f227c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MjI1YjhmYmM4ZTE3MWU3Nzg4NTcxZGFjODI5NzdhM2IzZjIyN2M=", "commit": {"author": {"name": "Sean Bowe", "email": "ewillbefull@gmail.com", "date": "2015-04-13T07:13:09Z"}, "committer": {"name": "Sean Bowe", "email": "ewillbefull@gmail.com", "date": "2015-04-13T07:16:51Z"}, "message": "Delay specific span_bug() call until abort_if_errors()\n\nAn actual typeck error is the cause of many failed compilations but an\nunrelated bug is being reported instead. It is triggered because a typeck\nerror is presumably not yet identified during compiler execution, which\nwould normally bypass an invariant in the presence of other errors. In\nthis particular situation, we delay the reporting of the bug until\nabort_if_errors().\n\nCloses #23827, closes #24356, closes #23041, closes #22897, closes #23966,\ncloses #24013, and closes #23729", "tree": {"sha": "f8097cd9a39e61fe7d3e467bce858983aefb0ff3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8097cd9a39e61fe7d3e467bce858983aefb0ff3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49225b8fbc8e171e7788571dac82977a3b3f227c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49225b8fbc8e171e7788571dac82977a3b3f227c", "html_url": "https://github.com/rust-lang/rust/commit/49225b8fbc8e171e7788571dac82977a3b3f227c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49225b8fbc8e171e7788571dac82977a3b3f227c/comments", "author": {"login": "ebfull", "id": 3794471, "node_id": "MDQ6VXNlcjM3OTQ0NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3794471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebfull", "html_url": "https://github.com/ebfull", "followers_url": "https://api.github.com/users/ebfull/followers", "following_url": "https://api.github.com/users/ebfull/following{/other_user}", "gists_url": "https://api.github.com/users/ebfull/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebfull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebfull/subscriptions", "organizations_url": "https://api.github.com/users/ebfull/orgs", "repos_url": "https://api.github.com/users/ebfull/repos", "events_url": "https://api.github.com/users/ebfull/events{/privacy}", "received_events_url": "https://api.github.com/users/ebfull/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebfull", "id": 3794471, "node_id": "MDQ6VXNlcjM3OTQ0NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3794471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebfull", "html_url": "https://github.com/ebfull", "followers_url": "https://api.github.com/users/ebfull/followers", "following_url": "https://api.github.com/users/ebfull/following{/other_user}", "gists_url": "https://api.github.com/users/ebfull/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebfull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebfull/subscriptions", "organizations_url": "https://api.github.com/users/ebfull/orgs", "repos_url": "https://api.github.com/users/ebfull/repos", "events_url": "https://api.github.com/users/ebfull/events{/privacy}", "received_events_url": "https://api.github.com/users/ebfull/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37cb1d455e77fbdb132c920e523eb4845f6b4fb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/37cb1d455e77fbdb132c920e523eb4845f6b4fb9", "html_url": "https://github.com/rust-lang/rust/commit/37cb1d455e77fbdb132c920e523eb4845f6b4fb9"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "14bc19dffd5d0b6f307856c23ccdf8814b74fdf9", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/49225b8fbc8e171e7788571dac82977a3b3f227c/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49225b8fbc8e171e7788571dac82977a3b3f227c/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=49225b8fbc8e171e7788571dac82977a3b3f227c", "patch": "@@ -57,6 +57,8 @@ pub struct Session {\n     pub crate_metadata: RefCell<Vec<String>>,\n     pub features: RefCell<feature_gate::Features>,\n \n+    pub delayed_span_bug: RefCell<Option<(codemap::Span, String)>>,\n+\n     /// The maximum recursion limit for potentially infinitely recursive\n     /// operations such as auto-dereference and monomorphization.\n     pub recursion_limit: Cell<usize>,\n@@ -114,7 +116,15 @@ impl Session {\n         self.diagnostic().handler().has_errors()\n     }\n     pub fn abort_if_errors(&self) {\n-        self.diagnostic().handler().abort_if_errors()\n+        self.diagnostic().handler().abort_if_errors();\n+\n+        let delayed_bug = self.delayed_span_bug.borrow();\n+        match *delayed_bug {\n+            Some((span, ref errmsg)) => {\n+                self.diagnostic().span_bug(span, errmsg);\n+            },\n+            _ => {}\n+        }\n     }\n     pub fn span_warn(&self, sp: Span, msg: &str) {\n         if self.can_print_warnings {\n@@ -171,6 +181,11 @@ impl Session {\n             None => self.bug(msg),\n         }\n     }\n+    /// Delay a span_bug() call until abort_if_errors()\n+    pub fn delay_span_bug(&self, sp: Span, msg: &str) {\n+        let mut delayed = self.delayed_span_bug.borrow_mut();\n+        *delayed = Some((sp, msg.to_string()));\n+    }\n     pub fn span_bug(&self, sp: Span, msg: &str) -> ! {\n         self.diagnostic().span_bug(sp, msg)\n     }\n@@ -402,6 +417,7 @@ pub fn build_session_(sopts: config::Options,\n         plugin_llvm_passes: RefCell::new(Vec::new()),\n         crate_types: RefCell::new(Vec::new()),\n         crate_metadata: RefCell::new(Vec::new()),\n+        delayed_span_bug: RefCell::new(None),\n         features: RefCell::new(feature_gate::Features::new()),\n         recursion_limit: Cell::new(64),\n         can_print_warnings: can_print_warnings"}, {"sha": "55ad52dab952b59c6b51f9dda68a1ca37348fffc", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49225b8fbc8e171e7788571dac82977a3b3f227c/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49225b8fbc8e171e7788571dac82977a3b3f227c/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=49225b8fbc8e171e7788571dac82977a3b3f227c", "patch": "@@ -544,7 +544,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n                 if tcx.sess.has_errors() {\n                     // cannot run dropck; okay b/c in error state anyway.\n                 } else {\n-                    tcx.sess.span_bug(expr.span, \"cat_expr_unadjusted Errd\");\n+                    tcx.sess.delay_span_bug(expr.span, \"cat_expr Errd\");\n                 }\n             }\n         }\n@@ -565,7 +565,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n             if tcx.sess.has_errors() {\n                 // cannot run dropck; okay b/c in error state anyway.\n             } else {\n-                tcx.sess.span_bug(expr.span, \"cat_expr Errd\");\n+                tcx.sess.delay_span_bug(expr.span, \"cat_expr Errd\");\n             }\n         }\n     }"}, {"sha": "04ee993c04076152a292249d1e100df19f287560", "filename": "src/test/compile-fail/typeck-before-dropck-bug.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/49225b8fbc8e171e7788571dac82977a3b3f227c/src%2Ftest%2Fcompile-fail%2Ftypeck-before-dropck-bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49225b8fbc8e171e7788571dac82977a3b3f227c/src%2Ftest%2Fcompile-fail%2Ftypeck-before-dropck-bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-before-dropck-bug.rs?ref=49225b8fbc8e171e7788571dac82977a3b3f227c", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() { }\n+\n+// Before these errors would ICE as \"cat_expr Errd\" because the errors\n+// were unknown when the bug was triggered.\n+\n+fn unconstrained_type() {\n+    [];\n+    //~^ ERROR cannot determine a type for this expression: unconstrained type\n+}\n+\n+fn invalid_impl_within_scope() {\n+    {\n+        use std::ops::Deref;\n+        struct Something;\n+\n+        impl Deref for Something {}\n+        //~^ ERROR not all trait items implemented, missing: `Target`, `deref`\n+\n+        *Something\n+    };\n+}"}]}