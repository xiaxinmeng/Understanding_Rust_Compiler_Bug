{"sha": "8d162fb150a177033cf71b03b53a6bc7ec6884f3", "node_id": "C_kwDOAAsO6NoAKDhkMTYyZmIxNTBhMTc3MDMzY2Y3MWIwM2I1M2E2YmM3ZWM2ODg0ZjM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-16T18:12:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-16T18:12:16Z"}, "message": "Rollup merge of #107680 - dtolnay:docrepr, r=Amanieu\n\nHide repr attribute from doc of types without guaranteed repr\n\nRustdoc has an undesirable behavior of blindly copying `repr` into the documentation of structs and enums, even when there is no particular repr that the type guarantees to its users. This is a source of confusion for standard library users who assume the fact that a repr is documented means it must be something the standard library promises they can rely on (in transmutes, or FFI).\n\nSome issues on the topic of rustdoc's incorrect handling of `repr`:\n\n- https://github.com/rust-lang/rust/issues/66401\n- https://github.com/rust-lang/rust/issues/90435\n\nIn places, the standard library currently works around this confusing rustdoc behavior by just omitting `repr(transparent)` altogether even where it should be required if equivalent code were being written outside of the standard library. See #61969.\n\nIMO that is even more confusing, even for standard library maintainers &mdash; see https://github.com/rust-lang/rust/pull/105018#discussion_r1058400997. It's also not something that works for other reprs like `C` or `u8` which cannot just be omitted even in standard library code.\n\nThis PR tries a different approach for some types that are being currently incorrectly documented with a repr.\n\n> **Warning**\n> This PR does not imply that every type that still has a `repr` attribute in its docs after this PR is now public for users to rely on. This PR only tries to reduce harm from this longstanding rustdoc issue.", "tree": {"sha": "8e82e2a7cfdc89b930f1ac91b23df3e61411d749", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e82e2a7cfdc89b930f1ac91b23df3e61411d749"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d162fb150a177033cf71b03b53a6bc7ec6884f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkY8eACRBK7hj4Ov3rIwAAHvwIAFBVzfQJ1zXUV9z+i7hL2Oml\nPv7sWM4m/xlv+p9a3ZPfKrU8rVQtd0SCSBIiLWWA7/UDEm0xbobZzqbjF8yOSPoF\nQi0bybm1VGfpCg4BpGzpUsREwiSZKPfJYmyGE7QyctuzbcrSklFWNhE0TY8wSET/\nrMcLEx1o2Yb88/25IebjdnGtjd6L58rgoJwwi5ER2wlpKvI8MajXF4XxyY7bKDy8\nv7jK/cqaX3Nd/qWAtuJ9PEPGBq5XKPAW36NkzfSTACQIjp2qLq1odorRWpo8TTt+\njYKPYTFdID0cBAh5HhtF8XofBzch1gOINva3FYkdQkgUID0XfOalHoZ+J0IZVLw=\n=GVtU\n-----END PGP SIGNATURE-----\n", "payload": "tree 8e82e2a7cfdc89b930f1ac91b23df3e61411d749\nparent 9239760da89cd8e9a51536beeb0a23762064037d\nparent e7963a65ed4b913274fcd0a0dec0c71c2754a97c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684260736 +0200\ncommitter GitHub <noreply@github.com> 1684260736 +0200\n\nRollup merge of #107680 - dtolnay:docrepr, r=Amanieu\n\nHide repr attribute from doc of types without guaranteed repr\n\nRustdoc has an undesirable behavior of blindly copying `repr` into the documentation of structs and enums, even when there is no particular repr that the type guarantees to its users. This is a source of confusion for standard library users who assume the fact that a repr is documented means it must be something the standard library promises they can rely on (in transmutes, or FFI).\n\nSome issues on the topic of rustdoc's incorrect handling of `repr`:\n\n- https://github.com/rust-lang/rust/issues/66401\n- https://github.com/rust-lang/rust/issues/90435\n\nIn places, the standard library currently works around this confusing rustdoc behavior by just omitting `repr(transparent)` altogether even where it should be required if equivalent code were being written outside of the standard library. See #61969.\n\nIMO that is even more confusing, even for standard library maintainers &mdash; see https://github.com/rust-lang/rust/pull/105018#discussion_r1058400997. It's also not something that works for other reprs like `C` or `u8` which cannot just be omitted even in standard library code.\n\nThis PR tries a different approach for some types that are being currently incorrectly documented with a repr.\n\n> **Warning**\n> This PR does not imply that every type that still has a `repr` attribute in its docs after this PR is now public for users to rely on. This PR only tries to reduce harm from this longstanding rustdoc issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d162fb150a177033cf71b03b53a6bc7ec6884f3", "html_url": "https://github.com/rust-lang/rust/commit/8d162fb150a177033cf71b03b53a6bc7ec6884f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d162fb150a177033cf71b03b53a6bc7ec6884f3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9239760da89cd8e9a51536beeb0a23762064037d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9239760da89cd8e9a51536beeb0a23762064037d", "html_url": "https://github.com/rust-lang/rust/commit/9239760da89cd8e9a51536beeb0a23762064037d"}, {"sha": "e7963a65ed4b913274fcd0a0dec0c71c2754a97c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7963a65ed4b913274fcd0a0dec0c71c2754a97c", "html_url": "https://github.com/rust-lang/rust/commit/e7963a65ed4b913274fcd0a0dec0c71c2754a97c"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "d1c1ae6526b6ee0b59b28417563bf75ad007badd", "filename": "library/core/src/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d162fb150a177033cf71b03b53a6bc7ec6884f3/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d162fb150a177033cf71b03b53a6bc7ec6884f3/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=8d162fb150a177033cf71b03b53a6bc7ec6884f3", "patch": "@@ -866,7 +866,7 @@ where\n ///\n /// A data provider provides values by calling this type's provide methods.\n #[unstable(feature = \"provide_any\", issue = \"96024\")]\n-#[repr(transparent)]\n+#[cfg_attr(not(doc), repr(transparent))] // work around https://github.com/rust-lang/rust/issues/90435\n pub struct Demand<'a>(dyn Erased<'a> + 'a);\n \n impl<'a> Demand<'a> {"}, {"sha": "b73abbbaca7ad52408b23d1c1c7a3cfb1d73feae", "filename": "library/core/src/ffi/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8d162fb150a177033cf71b03b53a6bc7ec6884f3/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d162fb150a177033cf71b03b53a6bc7ec6884f3/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs?ref=8d162fb150a177033cf71b03b53a6bc7ec6884f3", "patch": "@@ -203,7 +203,7 @@ mod c_long_definition {\n //     be UB.\n #[doc = include_str!(\"c_void.md\")]\n #[cfg_attr(not(bootstrap), lang = \"c_void\")]\n-#[repr(u8)]\n+#[cfg_attr(not(doc), repr(u8))] // work around https://github.com/rust-lang/rust/issues/90435\n #[stable(feature = \"core_c_void\", since = \"1.30.0\")]\n pub enum c_void {\n     #[unstable(\n@@ -244,7 +244,7 @@ impl fmt::Debug for c_void {\n     target_os = \"uefi\",\n     windows,\n ))]\n-#[repr(transparent)]\n+#[cfg_attr(not(doc), repr(transparent))] // work around https://github.com/rust-lang/rust/issues/90435\n #[unstable(\n     feature = \"c_variadic\",\n     reason = \"the `c_variadic` feature has not been properly tested on \\\n@@ -296,7 +296,7 @@ impl<'f> fmt::Debug for VaListImpl<'f> {\n     not(target_os = \"uefi\"),\n     not(windows),\n ))]\n-#[repr(C)]\n+#[cfg_attr(not(doc), repr(C))] // work around https://github.com/rust-lang/rust/issues/66401\n #[derive(Debug)]\n #[unstable(\n     feature = \"c_variadic\",\n@@ -316,7 +316,7 @@ pub struct VaListImpl<'f> {\n \n /// PowerPC ABI implementation of a `va_list`.\n #[cfg(all(target_arch = \"powerpc\", not(target_os = \"uefi\"), not(windows)))]\n-#[repr(C)]\n+#[cfg_attr(not(doc), repr(C))] // work around https://github.com/rust-lang/rust/issues/66401\n #[derive(Debug)]\n #[unstable(\n     feature = \"c_variadic\",\n@@ -336,7 +336,7 @@ pub struct VaListImpl<'f> {\n \n /// s390x ABI implementation of a `va_list`.\n #[cfg(target_arch = \"s390x\")]\n-#[repr(C)]\n+#[cfg_attr(not(doc), repr(C))] // work around https://github.com/rust-lang/rust/issues/66401\n #[derive(Debug)]\n #[unstable(\n     feature = \"c_variadic\",\n@@ -355,7 +355,7 @@ pub struct VaListImpl<'f> {\n \n /// x86_64 ABI implementation of a `va_list`.\n #[cfg(all(target_arch = \"x86_64\", not(target_os = \"uefi\"), not(windows)))]\n-#[repr(C)]\n+#[cfg_attr(not(doc), repr(C))] // work around https://github.com/rust-lang/rust/issues/66401\n #[derive(Debug)]\n #[unstable(\n     feature = \"c_variadic\",\n@@ -373,7 +373,7 @@ pub struct VaListImpl<'f> {\n }\n \n /// A wrapper for a `va_list`\n-#[repr(transparent)]\n+#[cfg_attr(not(doc), repr(transparent))] // work around https://github.com/rust-lang/rust/issues/90435\n #[derive(Debug)]\n #[unstable(\n     feature = \"c_variadic\","}, {"sha": "7043ab5ff2b41815fa3138fbaf56dd57b01f1af1", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d162fb150a177033cf71b03b53a6bc7ec6884f3/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d162fb150a177033cf71b03b53a6bc7ec6884f3/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=8d162fb150a177033cf71b03b53a6bc7ec6884f3", "patch": "@@ -232,7 +232,7 @@ impl fmt::Debug for Context<'_> {\n ///\n /// [`Future::poll()`]: core::future::Future::poll\n /// [`Poll::Pending`]: core::task::Poll::Pending\n-#[repr(transparent)]\n+#[cfg_attr(not(doc), repr(transparent))] // work around https://github.com/rust-lang/rust/issues/66401\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct Waker {\n     waker: RawWaker,"}, {"sha": "e0f3c7beef68943daad4461fa70ea9bf4fdc3daa", "filename": "library/portable-simd/crates/core_simd/src/masks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d162fb150a177033cf71b03b53a6bc7ec6884f3/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d162fb150a177033cf71b03b53a6bc7ec6884f3/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=8d162fb150a177033cf71b03b53a6bc7ec6884f3", "patch": "@@ -88,7 +88,7 @@ impl_element! { isize }\n /// The layout of this type is unspecified, and may change between platforms\n /// and/or Rust versions, and code should not assume that it is equivalent to\n /// `[T; LANES]`.\n-#[repr(transparent)]\n+#[cfg_attr(not(doc), repr(transparent))] // work around https://github.com/rust-lang/rust/issues/90435\n pub struct Mask<T, const LANES: usize>(mask_impl::Mask<T, LANES>)\n where\n     T: MaskElement,"}]}