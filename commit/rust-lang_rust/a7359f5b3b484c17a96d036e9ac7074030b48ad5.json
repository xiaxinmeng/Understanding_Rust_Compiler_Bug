{"sha": "a7359f5b3b484c17a96d036e9ac7074030b48ad5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MzU5ZjViM2I0ODRjMTdhOTZkMDM2ZTlhYzcwNzQwMzBiNDhhZDU=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-06-02T07:15:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-02T23:38:18Z"}, "message": "(float) fix some rounding errors when showing as str\n\nThis seems to fix issue #1876, and some of the superficial parts of\nissue #1375.  The #fmt macro and the to_str functions will round,\nrather than truncate, floats as strings.\n\nOther issues remain, and I wrote more code here than intended, but the\nfollowing should pass now.\n\n```\nfn x() {\n   assert \"3.1416\"      == #fmt[\"%.4f\", 3.14159];\n   assert \"3\"           == #fmt[\"%.0f\", 3.14159];\n   assert \"99\"          == #fmt[\"%.0f\", 98.5];\n   assert \"7.0000\"      == #fmt[\"%.4f\", 6.999999999];\n   assert \"3.141590000\" == #fmt[\"%.9f\", 3.14159];\n}\n```", "tree": {"sha": "8f54a1c377db12683a8a436b840a2bd9b05bfa60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f54a1c377db12683a8a436b840a2bd9b05bfa60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7359f5b3b484c17a96d036e9ac7074030b48ad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7359f5b3b484c17a96d036e9ac7074030b48ad5", "html_url": "https://github.com/rust-lang/rust/commit/a7359f5b3b484c17a96d036e9ac7074030b48ad5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7359f5b3b484c17a96d036e9ac7074030b48ad5/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d0755529e729e2e85c30ad45131cd15eea5f04f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d0755529e729e2e85c30ad45131cd15eea5f04f", "html_url": "https://github.com/rust-lang/rust/commit/7d0755529e729e2e85c30ad45131cd15eea5f04f"}], "stats": {"total": 79, "additions": 66, "deletions": 13}, "files": [{"sha": "af55f217d8f7c66bb60ac40bb9bb73b7ad885199", "filename": "src/libcore/float.rs", "status": "modified", "additions": 64, "deletions": 11, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a7359f5b3b484c17a96d036e9ac7074030b48ad5/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7359f5b3b484c17a96d036e9ac7074030b48ad5/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=a7359f5b3b484c17a96d036e9ac7074030b48ad5", "patch": "@@ -44,24 +44,77 @@ fn to_str_common(num: float, digits: uint, exact: bool) -> str {\n     if is_NaN(num) { ret \"NaN\"; }\n     if num == infinity { ret \"inf\"; }\n     if num == neg_infinity { ret \"-inf\"; }\n-    let mut (num, accum) = if num < 0.0 { (-num, \"-\") } else { (num, \"\") };\n+\n+    let mut (num, sign) = if num < 0.0 { (-num, \"-\") } else { (num, \"\") };\n+\n+    // truncated integer\n     let trunc = num as uint;\n+\n+    // decimal remainder\n     let mut frac = num - (trunc as float);\n-    accum += uint::str(trunc);\n-    if (frac < epsilon && !exact) || digits == 0u { ret accum; }\n-    accum += \".\";\n-    let mut i = digits;\n-    let mut epsilon_prime = 1. / pow_with_uint(10u, i);\n-    while i > 0u && (frac >= epsilon_prime || exact) {\n+\n+    // stack of digits\n+    let mut fractionalParts = [];\n+\n+    // FIXME:\n+    // This used to return right away without rounding, as \"[-]num\",\n+    // but given epsilon like in f64.rs, I don't see how the comparison\n+    // to epsilon did much when only used there.\n+    //    if (frac < epsilon && !exact) || digits == 0u { ret accum; }\n+    //\n+    // With something better, possibly weird results like this can be avoided:\n+    //     assert \"3.14158999999999988262\" == my_to_str_exact(3.14159, 20u);\n+\n+    let mut ii = digits;\n+    let mut epsilon_prime = 1.0 / pow_with_uint(10u, ii);\n+\n+    // while we still need digits\n+    // build stack of digits\n+    while ii > 0u && (frac >= epsilon_prime || exact) {\n+        // store the next digit\n         frac *= 10.0;\n-        epsilon_prime *= 10.0;\n         let digit = frac as uint;\n-        accum += uint::str(digit);\n+        vec::push(fractionalParts, digit);\n+\n+        // calculate the next frac\n         frac -= digit as float;\n-        i -= 1u;\n+        epsilon_prime *= 10.0;\n+        ii -= 1u;\n+    }\n+\n+    let mut acc;\n+    let mut racc = \"\";\n+    let mut carry = if frac * 10.0 as uint >= 5u { 1u } else { 0u };\n+\n+    // turn digits into string\n+    // using stack of digits\n+    while vec::len(fractionalParts) > 0u {\n+        let mut adjusted_digit = carry + vec::pop(fractionalParts);\n+\n+        if adjusted_digit == 10u {\n+            carry = 1u;\n+            adjusted_digit %= 10u\n+        } else {\n+            carry = 0u\n+        };\n+\n+        racc = uint::str(adjusted_digit) + racc;\n+    }\n+\n+    // pad decimals with trailing zeroes\n+    while str::len(racc) < digits && exact {\n+        racc += \"0\"\n+    }\n+\n+    // combine ints and decimals\n+    let mut ones = uint::str(trunc + carry);\n+    if racc == \"\" {\n+        acc = sign + ones;\n+    } else {\n+        acc = sign + ones + \".\" + racc;\n     }\n-    ret accum;\n \n+    ret acc;\n }\n \n #[doc = \""}, {"sha": "3eaf048f7d313da044333191b9d2d5f5e17b9b83", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7359f5b3b484c17a96d036e9ac7074030b48ad5/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7359f5b3b484c17a96d036e9ac7074030b48ad5/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=a7359f5b3b484c17a96d036e9ac7074030b48ad5", "patch": "@@ -94,7 +94,7 @@ fn part3() {\n     test(#fmt[\"%.o\", 10u], \"12\");\n     test(#fmt[\"%.t\", 3u], \"11\");\n     test(#fmt[\"%.c\", 'A'], \"A\");\n-    test(#fmt[\"%.f\", 5.82], \"5\");\n+    test(#fmt[\"%.f\", 5.82], \"6\");\n     test(#fmt[\"%.0d\", 0], \"\");\n     test(#fmt[\"%.0u\", 0u], \"\");\n     test(#fmt[\"%.0x\", 0u], \"\");\n@@ -107,7 +107,7 @@ fn part3() {\n     test(#fmt[\"%.0o\", 10u], \"12\");\n     test(#fmt[\"%.0t\", 3u], \"11\");\n     test(#fmt[\"%.0c\", 'A'], \"A\");\n-    test(#fmt[\"%.0f\", 5.892], \"5\");\n+    test(#fmt[\"%.0f\", 5.892], \"6\");\n     test(#fmt[\"%.1d\", 0], \"0\");\n     test(#fmt[\"%.1u\", 0u], \"0\");\n     test(#fmt[\"%.1x\", 0u], \"0\");"}]}