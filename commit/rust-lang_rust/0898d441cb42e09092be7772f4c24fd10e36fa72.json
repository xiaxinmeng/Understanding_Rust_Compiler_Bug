{"sha": "0898d441cb42e09092be7772f4c24fd10e36fa72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4OThkNDQxY2I0MmUwOTA5MmJlNzc3MmY0YzI0ZmQxMGUzNmZhNzI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-15T12:53:03Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-15T12:53:03Z"}, "message": "Use libcrypto.so instead of libssl.so in the ffi part of tutorial", "tree": {"sha": "a191db867a03ceb791165e078600efc20109e02b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a191db867a03ceb791165e078600efc20109e02b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0898d441cb42e09092be7772f4c24fd10e36fa72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0898d441cb42e09092be7772f4c24fd10e36fa72", "html_url": "https://github.com/rust-lang/rust/commit/0898d441cb42e09092be7772f4c24fd10e36fa72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0898d441cb42e09092be7772f4c24fd10e36fa72/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a09dcd94c5809bd5cbedd5c06218e8db25c2881a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a09dcd94c5809bd5cbedd5c06218e8db25c2881a", "html_url": "https://github.com/rust-lang/rust/commit/a09dcd94c5809bd5cbedd5c06218e8db25c2881a"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "0a1ba128e513bcedc2bafd2aab3a4a9316040561", "filename": "doc/tutorial/ffi.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0898d441cb42e09092be7772f4c24fd10e36fa72/doc%2Ftutorial%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/0898d441cb42e09092be7772f4c24fd10e36fa72/doc%2Ftutorial%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Fffi.md?ref=0898d441cb42e09092be7772f4c24fd10e36fa72", "patch": "@@ -15,7 +15,7 @@ OpenSSL libraries installed, it should 'just work'.\n     use std;\n     import std::{vec, str};\n     \n-    native \"cdecl\" mod ssl {\n+    native \"cdecl\" mod crypto {\n         fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8;\n     }\n     \n@@ -27,8 +27,8 @@ OpenSSL libraries installed, it should 'just work'.\n \n     fn sha1(data: str) -> str unsafe {\n         let bytes = str::bytes(data);\n-        let hash = ssl::SHA1(vec::unsafe::to_ptr(bytes),\n-                             vec::len(bytes), std::ptr::null());\n+        let hash = crypto::SHA1(vec::unsafe::to_ptr(bytes),\n+                                vec::len(bytes), std::ptr::null());\n         ret as_hex(vec::unsafe::from_buf(hash, 20u));\n     }\n     \n@@ -41,18 +41,18 @@ OpenSSL libraries installed, it should 'just work'.\n Before we can call `SHA1`, we have to declare it. That is what this\n part of the program is responsible for:\n \n-    native \"cdecl\" mod ssl {\n+    native \"cdecl\" mod crypto {\n         fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8;\n     }\n \n A `native` module declaration tells the compiler that the program\n should be linked with a library by that name, and that the given list\n of functions are available in that library.\n \n-In this case, it'll change the name `ssl` to a shared library name in\n-a platform-specific way (`libssl.so` on Linux, for example), and link\n-that in. If you want the module to have a different name from the\n-actual library, you can say `native \"cdecl\" mod something = \"ssl\" {\n+In this case, it'll change the name `crypto` to a shared library name\n+in a platform-specific way (`libcrypto.so` on Linux, for example), and\n+link that in. If you want the module to have a different name from the\n+actual library, you can say `native \"cdecl\" mod something = \"crypto\" {\n ... }`.\n \n The `\"cdecl\"` word indicates the calling convention to use for\n@@ -94,8 +94,8 @@ The `sha1` function is the most obscure part of the program.\n \n     fn sha1(data: str) -> str unsafe {\n         let bytes = str::bytes(data);\n-        let hash = ssl::SHA1(vec::unsafe::to_ptr(bytes),\n-                             vec::len(bytes), std::ptr::null());\n+        let hash = crypto::SHA1(vec::unsafe::to_ptr(bytes),\n+                                vec::len(bytes), std::ptr::null());\n         ret as_hex(vec::unsafe::from_buf(hash, 20u));\n     }\n \n@@ -128,8 +128,8 @@ Rust's safety mechanisms.\n Let's look at our `sha1` function again.\n \n     let bytes = str::bytes(data);\n-    let hash = ssl::SHA1(vec::unsafe::to_ptr(bytes),\n-                         vec::len(bytes), std::ptr::null());\n+    let hash = crypto::SHA1(vec::unsafe::to_ptr(bytes),\n+                            vec::len(bytes), std::ptr::null());\n     ret as_hex(vec::unsafe::from_buf(hash, 20u));\n \n The `str::bytes` function is perfectly safe, it converts a string to"}]}