{"sha": "09a887cebf917af04a45d37d9c39d6bf3072f6e1", "node_id": "C_kwDOAAsO6NoAKDA5YTg4N2NlYmY5MTdhZjA0YTQ1ZDM3ZDljMzlkNmJmMzA3MmY2ZTE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-18T13:24:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-18T13:24:48Z"}, "message": "review feedback", "tree": {"sha": "a60eb3e5d7a4bcc02b2f906342320407e79cd0be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a60eb3e5d7a4bcc02b2f906342320407e79cd0be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09a887cebf917af04a45d37d9c39d6bf3072f6e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09a887cebf917af04a45d37d9c39d6bf3072f6e1", "html_url": "https://github.com/rust-lang/rust/commit/09a887cebf917af04a45d37d9c39d6bf3072f6e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09a887cebf917af04a45d37d9c39d6bf3072f6e1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "410188978622ae80ed051217ec65999e394a3c15", "url": "https://api.github.com/repos/rust-lang/rust/commits/410188978622ae80ed051217ec65999e394a3c15", "html_url": "https://github.com/rust-lang/rust/commit/410188978622ae80ed051217ec65999e394a3c15"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "3eb2b3a0b1b63ca361a7b98a532b42f9e94bb451", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09a887cebf917af04a45d37d9c39d6bf3072f6e1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a887cebf917af04a45d37d9c39d6bf3072f6e1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=09a887cebf917af04a45d37d9c39d6bf3072f6e1", "patch": "@@ -364,16 +364,16 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn read_immediate_raw(\n         &self,\n         src: &OpTy<'tcx, M::Provenance>,\n-    ) -> InterpResult<'tcx, Either<ImmTy<'tcx, M::Provenance>, MPlaceTy<'tcx, M::Provenance>>> {\n+    ) -> InterpResult<'tcx, Either<MPlaceTy<'tcx, M::Provenance>, ImmTy<'tcx, M::Provenance>>> {\n         Ok(match src.as_mplace_or_imm() {\n             Left(ref mplace) => {\n                 if let Some(val) = self.read_immediate_from_mplace_raw(mplace)? {\n-                    Left(val)\n+                    Right(val)\n                 } else {\n-                    Right(*mplace)\n+                    Left(*mplace)\n                 }\n             }\n-            Right(val) => Left(val),\n+            Right(val) => Right(val),\n         })\n     }\n \n@@ -392,7 +392,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         ) {\n             span_bug!(self.cur_span(), \"primitive read not possible for type: {:?}\", op.layout.ty);\n         }\n-        let imm = self.read_immediate_raw(op)?.left().unwrap();\n+        let imm = self.read_immediate_raw(op)?.right().unwrap();\n         if matches!(*imm, Immediate::Uninit) {\n             throw_ub!(InvalidUninitBytes(None));\n         }"}, {"sha": "c47cfe8bb69fd05831734e1f42cf16e3781d7049", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09a887cebf917af04a45d37d9c39d6bf3072f6e1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a887cebf917af04a45d37d9c39d6bf3072f6e1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=09a887cebf917af04a45d37d9c39d6bf3072f6e1", "patch": "@@ -641,7 +641,7 @@ where\n         // Let us see if the layout is simple so we take a shortcut,\n         // avoid force_allocation.\n         let src = match self.read_immediate_raw(src)? {\n-            Left(src_val) => {\n+            Right(src_val) => {\n                 // FIXME(const_prop): Const-prop can possibly evaluate an\n                 // unsized copy operation when it thinks that the type is\n                 // actually sized, due to a trivially false where-clause\n@@ -671,7 +671,7 @@ where\n                     )\n                 };\n             }\n-            Right(mplace) => mplace,\n+            Left(mplace) => mplace,\n         };\n         // Slow path, this does not fit into an immediate. Just memcpy.\n         trace!(\"copy_op: {:?} <- {:?}: {}\", *dest, src, dest.layout.ty);"}, {"sha": "d60e8722cb61d5c443e20ef22d8c061d100781e0", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09a887cebf917af04a45d37d9c39d6bf3072f6e1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a887cebf917af04a45d37d9c39d6bf3072f6e1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=09a887cebf917af04a45d37d9c39d6bf3072f6e1", "patch": "@@ -147,13 +147,7 @@ impl IntRange {\n                         // straight to the result, after doing a bit of checking. (We\n                         // could remove this branch and just fall through, which\n                         // is more general but much slower.)\n-                        if let either::Left(bits) =\n-                            scalar.to_bits_or_ptr_internal(target_size).unwrap()\n-                        {\n-                            return Some(bits);\n-                        } else {\n-                            return None;\n-                        }\n+                        return scalar.to_bits_or_ptr_internal(target_size).unwrap().left();\n                     }\n                     mir::ConstantKind::Ty(c) => match c.kind() {\n                         ty::ConstKind::Value(_) => bug!("}, {"sha": "b0514e033566c9a65ebe8f5484a41d74ddb39898", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09a887cebf917af04a45d37d9c39d6bf3072f6e1/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a887cebf917af04a45d37d9c39d6bf3072f6e1/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=09a887cebf917af04a45d37d9c39d6bf3072f6e1", "patch": "@@ -3,7 +3,7 @@\n \n use std::cell::Cell;\n \n-use either::Left;\n+use either::Right;\n \n use rustc_ast::Mutability;\n use rustc_data_structures::fx::FxHashSet;\n@@ -431,7 +431,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         // Try to read the local as an immediate so that if it is representable as a scalar, we can\n         // handle it as such, but otherwise, just return the value as is.\n         Some(match self.ecx.read_immediate_raw(&op) {\n-            Ok(Left(imm)) => imm.into(),\n+            Ok(Right(imm)) => imm.into(),\n             _ => op,\n         })\n     }\n@@ -745,7 +745,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         // FIXME> figure out what to do when read_immediate_raw fails\n         let imm = self.use_ecx(|this| this.ecx.read_immediate_raw(value));\n \n-        if let Some(Left(imm)) = imm {\n+        if let Some(Right(imm)) = imm {\n             match *imm {\n                 interpret::Immediate::Scalar(scalar) => {\n                     *rval = Rvalue::Use(self.operand_from_scalar("}]}