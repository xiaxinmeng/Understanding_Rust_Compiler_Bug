{"sha": "a134503d74814b40a07c31133a72638dc29ba6fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMzQ1MDNkNzQ4MTRiNDBhMDdjMzExMzNhNzI2MzhkYzI5YmE2ZmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-28T02:53:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-14T21:52:06Z"}, "message": "core::rt: Move all the uv callback definitions to one place", "tree": {"sha": "07d26b38d3564e42a65a0862a0fb96415c813622", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07d26b38d3564e42a65a0862a0fb96415c813622"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a134503d74814b40a07c31133a72638dc29ba6fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a134503d74814b40a07c31133a72638dc29ba6fc", "html_url": "https://github.com/rust-lang/rust/commit/a134503d74814b40a07c31133a72638dc29ba6fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a134503d74814b40a07c31133a72638dc29ba6fc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbf89664aa9f5414aa02b4c1ab2b481581de17b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf89664aa9f5414aa02b4c1ab2b481581de17b9", "html_url": "https://github.com/rust-lang/rust/commit/dbf89664aa9f5414aa02b4c1ab2b481581de17b9"}], "stats": {"total": 65, "additions": 23, "deletions": 42}, "files": [{"sha": "2d14505509759b70e8409c4f36afd9657240268e", "filename": "src/libcore/rt/uv/file.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a134503d74814b40a07c31133a72638dc29ba6fc/src%2Flibcore%2Frt%2Fuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a134503d74814b40a07c31133a72638dc29ba6fc/src%2Flibcore%2Frt%2Fuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Ffile.rs?ref=a134503d74814b40a07c31133a72638dc29ba6fc", "patch": "@@ -11,15 +11,11 @@\n use prelude::*;\n use ptr::null;\n use libc::c_void;\n-use super::{UvError, Callback, Request, NativeHandle, Loop};\n+use rt::uv::{Request, NativeHandle, Loop, FsCallback};\n use rt::uv::uvll;\n use rt::uv::uvll::*;\n \n-pub type FsCallback = ~fn(FsRequest, Option<UvError>);\n-impl Callback for FsCallback { }\n-\n pub struct FsRequest(*uvll::uv_fs_t);\n-\n impl Request for FsRequest;\n \n impl FsRequest {"}, {"sha": "fe1ce8697bf9e3e11fedafacadd96b4fb698d6e6", "filename": "src/libcore/rt/uv/idle.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a134503d74814b40a07c31133a72638dc29ba6fc/src%2Flibcore%2Frt%2Fuv%2Fidle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a134503d74814b40a07c31133a72638dc29ba6fc/src%2Flibcore%2Frt%2Fuv%2Fidle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fidle.rs?ref=a134503d74814b40a07c31133a72638dc29ba6fc", "patch": "@@ -9,17 +9,14 @@\n // except according to those terms.\n \n use libc::c_int;\n-use option::{Option, Some, None};\n+use option::{Some, None};\n use rt::uv::uvll;\n-use rt::uv::{Watcher, Callback, Loop, UvError, NativeHandle};\n+use rt::uv::{Watcher, Loop, NativeHandle, IdleCallback};\n use rt::uv::status_to_maybe_uv_error;\n \n pub struct IdleWatcher(*uvll::uv_idle_t);\n impl Watcher for IdleWatcher { }\n \n-pub type IdleCallback = ~fn(IdleWatcher, Option<UvError>);\n-impl Callback for IdleCallback { }\n-\n pub impl IdleWatcher {\n     fn new(loop_: &mut Loop) -> IdleWatcher {\n         unsafe {"}, {"sha": "2c83873359a8fdf42f924f56f8e0362c0341e9f8", "filename": "src/libcore/rt/uv/mod.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a134503d74814b40a07c31133a72638dc29ba6fc/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a134503d74814b40a07c31133a72638dc29ba6fc/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fmod.rs?ref=a134503d74814b40a07c31133a72638dc29ba6fc", "patch": "@@ -51,10 +51,9 @@ use rt::io::IoError;\n \n #[cfg(test)] use unstable::run_in_bare_thread;\n \n-pub use self::file::{FsRequest, FsCallback};\n+pub use self::file::FsRequest;\n pub use self::net::{StreamWatcher, TcpWatcher};\n-pub use self::net::{ReadCallback, AllocCallback, ConnectionCallback, ConnectCallback};\n-pub use self::idle::{IdleWatcher, IdleCallback};\n+pub use self::idle::IdleWatcher;\n \n /// The implementation of `rtio` for libuv\n pub mod uvio;\n@@ -66,11 +65,12 @@ pub mod file;\n pub mod net;\n pub mod idle;\n \n-/// A trait for callbacks to implement. Provides a little extra type safety\n-/// for generic, unsafe interop functions like `set_watcher_callback`.\n-pub trait Callback { }\n-\n-pub trait Request { }\n+/// XXX: Loop(*handle) is buggy with destructors. Normal structs\n+/// with dtors may not be destructured, but tuple structs can,\n+/// but the results are not correct.\n+pub struct Loop {\n+    handle: *uvll::uv_loop_t\n+}\n \n /// The trait implemented by uv 'watchers' (handles). Watchers are\n /// non-owning wrappers around the uv handles and are not completely\n@@ -80,22 +80,14 @@ pub trait Request { }\n /// entirely memory safe if used in unanticipated patterns.\n pub trait Watcher { }\n \n-pub type NullCallback = ~fn();\n-impl Callback for NullCallback { }\n+pub trait Request { }\n \n /// A type that wraps a native handle\n pub trait NativeHandle<T> {\n     pub fn from_native_handle(T) -> Self;\n     pub fn native_handle(&self) -> T;\n }\n \n-/// XXX: Loop(*handle) is buggy with destructors. Normal structs\n-/// with dtors may not be destructured, but tuple structs can,\n-/// but the results are not correct.\n-pub struct Loop {\n-    handle: *uvll::uv_loop_t\n-}\n-\n pub impl Loop {\n     fn new() -> Loop {\n         let handle = unsafe { uvll::loop_new() };\n@@ -121,6 +113,15 @@ impl NativeHandle<*uvll::uv_loop_t> for Loop {\n     }\n }\n \n+// XXX: The uv alloc callback also has a *uv_handle_t arg\n+pub type AllocCallback = ~fn(uint) -> Buf;\n+pub type ReadCallback = ~fn(StreamWatcher, int, Buf, Option<UvError>);\n+pub type NullCallback = ~fn();\n+pub type IdleCallback = ~fn(IdleWatcher, Option<UvError>);\n+pub type ConnectionCallback = ~fn(StreamWatcher, Option<UvError>);\n+pub type FsCallback = ~fn(FsRequest, Option<UvError>);\n+\n+\n /// Callbacks used by StreamWatchers, set as custom data on the foreign handle\n struct WatcherData {\n     read_cb: Option<ReadCallback>,"}, {"sha": "6261996a8b6507fe4df2bcca2bccac3740f44832", "filename": "src/libcore/rt/uv/net.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a134503d74814b40a07c31133a72638dc29ba6fc/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a134503d74814b40a07c31133a72638dc29ba6fc/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fnet.rs?ref=a134503d74814b40a07c31133a72638dc29ba6fc", "patch": "@@ -13,7 +13,8 @@ use libc::{size_t, ssize_t, c_int, c_void};\n use util::ignore;\n use rt::uv::uvll;\n use rt::uv::uvll::*;\n-use super::{Loop, Watcher, Request, UvError, Buf, Callback, NativeHandle, NullCallback,\n+use rt::uv::{AllocCallback, ConnectionCallback, ReadCallback};\n+use super::{Loop, Watcher, Request, UvError, Buf, NativeHandle, NullCallback,\n             status_to_maybe_uv_error, vec_to_uv_buf, vec_from_uv_buf, slice_to_uv_buf};\n use super::super::io::net::ip::{IpAddr, Ipv4, Ipv6};\n use rt::uv::last_uv_error;\n@@ -48,13 +49,6 @@ fn ip4_as_uv_ip4<T>(addr: IpAddr, f: &fn(*sockaddr_in) -> T) -> T {\n pub struct StreamWatcher(*uvll::uv_stream_t);\n impl Watcher for StreamWatcher { }\n \n-pub type ReadCallback = ~fn(StreamWatcher, int, Buf, Option<UvError>);\n-impl Callback for ReadCallback { }\n-\n-// XXX: The uv alloc callback also has a *uv_handle_t arg\n-pub type AllocCallback = ~fn(uint) -> Buf;\n-impl Callback for AllocCallback { }\n-\n pub impl StreamWatcher {\n \n     fn read_start(&mut self, alloc: AllocCallback, cb: ReadCallback) {\n@@ -165,9 +159,6 @@ impl NativeHandle<*uvll::uv_stream_t> for StreamWatcher {\n pub struct TcpWatcher(*uvll::uv_tcp_t);\n impl Watcher for TcpWatcher { }\n \n-pub type ConnectionCallback = ~fn(StreamWatcher, Option<UvError>);\n-impl Callback for ConnectionCallback { }\n-\n pub impl TcpWatcher {\n     fn new(loop_: &mut Loop) -> TcpWatcher {\n         unsafe {\n@@ -268,12 +259,8 @@ impl NativeHandle<*uvll::uv_tcp_t> for TcpWatcher {\n     }\n }\n \n-pub type ConnectCallback = ~fn(ConnectRequest, Option<UvError>);\n-impl Callback for ConnectCallback { }\n-\n // uv_connect_t is a subclass of uv_req_t\n struct ConnectRequest(*uvll::uv_connect_t);\n-\n impl Request for ConnectRequest { }\n \n impl ConnectRequest {"}]}