{"sha": "003972f4281ab83fb56ce9a898efd93b6ca3740e", "node_id": "C_kwDOAAsO6NoAKDAwMzk3MmY0MjgxYWI4M2ZiNTZjZTlhODk4ZWZkOTNiNmNhMzc0MGU", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-16T22:26:10Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T10:05:18Z"}, "message": "add multiple `get_attrs` and `includes_repr` and they all work!", "tree": {"sha": "af87ac2811ec82d6afcdee078d5faf171b900b15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af87ac2811ec82d6afcdee078d5faf171b900b15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/003972f4281ab83fb56ce9a898efd93b6ca3740e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/003972f4281ab83fb56ce9a898efd93b6ca3740e", "html_url": "https://github.com/rust-lang/rust/commit/003972f4281ab83fb56ce9a898efd93b6ca3740e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/003972f4281ab83fb56ce9a898efd93b6ca3740e/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9948c4be6741ae916b838df29e9777467d4c84c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9948c4be6741ae916b838df29e9777467d4c84c", "html_url": "https://github.com/rust-lang/rust/commit/b9948c4be6741ae916b838df29e9777467d4c84c"}], "stats": {"total": 192, "additions": 123, "deletions": 69}, "files": [{"sha": "72636146d7c3f7a6ed5e1e36d5d2a10bf4ffeb09", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/003972f4281ab83fb56ce9a898efd93b6ca3740e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003972f4281ab83fb56ce9a898efd93b6ca3740e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=003972f4281ab83fb56ce9a898efd93b6ca3740e", "patch": "@@ -21,6 +21,7 @@\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n+extern crate rustc_attr;\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_errors;"}, {"sha": "4c3c5191d2868e442d48736ab45674c756f269a6", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/003972f4281ab83fb56ce9a898efd93b6ca3740e/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003972f4281ab83fb56ce9a898efd93b6ca3740e/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=003972f4281ab83fb56ce9a898efd93b6ca3740e", "patch": "@@ -1,10 +1,14 @@\n use clippy_utils::consts::{miri_to_const, Constant};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet;\n+use rustc_ast::Attribute;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_hir::{Item, ItemKind, TyKind, VariantData};\n+use rustc_hir::{Item, ItemKind, VariantData};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::dep_graph::DepContext;\n+use rustc_middle::ty as ty_mod;\n+use rustc_middle::ty::ReprFlags;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n@@ -33,19 +37,16 @@ declare_clippy_lint! {\n     /// ```\n     pub TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR_C,\n     nursery,\n-    \"struct with a trailing zero-sized array but without `repr(C)`\"\n+    \"struct with a trailing zero-sized array but without `repr(C)` or another `repr` attribute\"\n }\n declare_lint_pass!(TrailingZeroSizedArrayWithoutReprC => [TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR_C]);\n \n-//\n-// TODO: Register the lint pass in `clippy_lints/src/lib.rs`,\n-//       e.g. store.register_early_pass(||\n-// Box::new(trailing_zero_sized_array_without_repr_c::TrailingZeroSizedArrayWithoutReprC));\n-// DONE!\n+// TESTNAME=trailing_zero_sized_array_without_repr_c cargo uitest\n \n impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutReprC {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n-        if is_struct_with_trailing_zero_sized_array(cx, item) && !has_repr_c(cx, item.def_id) {\n+        dbg!(item.ident);\n+        if is_struct_with_trailing_zero_sized_array(cx, item) && !has_repr_attr(cx, item.def_id) {\n             span_lint_and_sugg(\n                 cx,\n                 TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR_C,\n@@ -64,7 +65,7 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx\n         if let ItemKind::Struct(data, _generics) = &item.kind;\n         if let VariantData::Struct(field_defs, _) = data;\n         if let Some(last_field) = field_defs.last();\n-        if let TyKind::Array(_, aconst) = last_field.ty.kind;\n+        if let rustc_hir::TyKind::Array(_, aconst) = last_field.ty.kind;\n         let aconst_def_id = cx.tcx.hir().body_owner_def_id(aconst.body).to_def_id();\n         let ty = cx.tcx.type_of(aconst_def_id);\n         let constant = cx\n@@ -83,17 +84,50 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx\n     }\n }\n \n-fn has_repr_c(cx: &LateContext<'tcx>, def_id: LocalDefId) -> bool {\n+fn has_repr_attr(cx: &LateContext<'tcx>, def_id: LocalDefId) -> bool {\n+    let attrs_get_attrs = get_attrs_get_attrs(cx, def_id);\n+    let attrs_hir_map = get_attrs_hir_map(cx, def_id);\n+    let b11 = dbg!(includes_repr_attr_using_sym(attrs_get_attrs));\n+    let b12 = dbg!(includes_repr_attr_using_sym(attrs_hir_map));\n+    let b21 = dbg!(includes_repr_attr_using_helper(cx, attrs_get_attrs));\n+    let b22 = dbg!(includes_repr_attr_using_helper(cx, attrs_hir_map));\n+    let b3 = dbg!(has_repr_attr_using_adt(cx, def_id));\n+    let all_same = b11 && b12 && b21 && b22 && b3;\n+    dbg!(all_same);\n+\n+    b11\n+}\n+\n+fn get_attrs_get_attrs(cx: &LateContext<'tcx>, def_id: LocalDefId) -> &'tcx [Attribute] {\n+    cx.tcx.get_attrs(def_id.to_def_id())\n+}\n+\n+fn get_attrs_hir_map(cx: &LateContext<'tcx>, def_id: LocalDefId) -> &'tcx [Attribute] {\n     let hir_map = cx.tcx.hir();\n     let hir_id = hir_map.local_def_id_to_hir_id(def_id);\n-    let attrs = hir_map.attrs(hir_id);\n+    hir_map.attrs(hir_id)\n+}\n \n-    // NOTE: Can there ever be more than one `repr` attribute?\n-    // other `repr` syms: repr, repr128, repr_align, repr_align_enum, repr_no_niche, repr_packed,\n-    // repr_simd, repr_transparent\n-    if let Some(_attr) = attrs.iter().find(|attr| attr.has_name(sym::repr)) {\n-        true\n+// Don't like this because it's so dependent on the current list of `repr` flags and it would have to be manually updated if that ever expanded. idk if there's any mechanism in `bitflag!` or elsewhere for requiring that sort of exhaustiveness\n+fn has_repr_attr_using_adt(cx: &LateContext<'tcx>, def_id: LocalDefId) -> bool {\n+    let ty = cx.tcx.type_of(def_id.to_def_id());\n+    if let ty_mod::Adt(adt, _) = ty.kind() {\n+        if adt.is_struct() {\n+            let repr = adt.repr;\n+            let repr_attr = ReprFlags::IS_C | ReprFlags::IS_TRANSPARENT | ReprFlags::IS_SIMD | ReprFlags::IS_LINEAR;\n+            repr.int.is_some() || repr.align.is_some() || repr.pack.is_some() || repr.flags.intersects(repr_attr)\n+        } else {\n+            false\n+        }\n     } else {\n         false\n     }\n }\n+\n+fn includes_repr_attr_using_sym(attrs: &'tcx [Attribute]) -> bool {\n+    attrs.iter().any(|attr| attr.has_name(sym::repr))\n+}\n+\n+fn includes_repr_attr_using_helper(cx: &LateContext<'tcx>, attrs: &'tcx [Attribute]) -> bool {\n+    attrs.iter().any(|attr| !rustc_attr::find_repr_attrs(cx.tcx.sess(), attr).is_empty())\n+}"}, {"sha": "8e8c84fe9c5ba71838e1c3c30a14856105001cd1", "filename": "tests/ui/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 72, "deletions": 53, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/003972f4281ab83fb56ce9a898efd93b6ca3740e/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003972f4281ab83fb56ce9a898efd93b6ca3740e/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=003972f4281ab83fb56ce9a898efd93b6ca3740e", "patch": "@@ -1,13 +1,9 @@\n #![warn(clippy::trailing_zero_sized_array_without_repr_c)]\n // #![feature(const_generics_defaults)] // see below\n \n-struct RarelyUseful {\n-    field: i32,\n-    last: [usize; 0],\n-}\n+// Do lint:\n \n-#[repr(C)]\n-struct GoodReason {\n+struct RarelyUseful {\n     field: i32,\n     last: [usize; 0],\n }\n@@ -21,24 +17,25 @@ struct GenericArrayType<T> {\n     last: [T; 0],\n }\n \n-struct SizedArray {\n+#[derive(Debug)]\n+struct PlayNiceWithOtherAttributesDerive {\n     field: i32,\n-    last: [usize; 1],\n+    last: [usize; 0]\n }\n \n-const ZERO: usize = 0;\n-struct ZeroSizedFromExternalConst {\n+#[must_use]\n+struct PlayNiceWithOtherAttributesMustUse {\n     field: i32,\n-    last: [usize; ZERO],\n+    last: [usize; 0]\n }\n \n-const ONE: usize = 1;\n-struct NonZeroSizedFromExternalConst {\n+const ZERO: usize = 0;\n+struct ZeroSizedFromExternalConst {\n     field: i32,\n-    last: [usize; ONE],\n+    last: [usize; ZERO],\n }\n \n-#[allow(clippy::eq_op)] // lmao im impressed\n+#[allow(clippy::eq_op)]\n const fn compute_zero() -> usize {\n     (4 + 6) - (2 * 5)\n }\n@@ -47,36 +44,62 @@ struct UsingFunction {\n     last: [usize; compute_zero()],\n }\n \n-// NOTE: including these (along with the required feature) triggers an ICE. Should make sure the\n-// const generics people are aware of that if they weren't already.\n+struct LotsOfFields {\n+    f1: u32,\n+    f2: u32,\n+    f3: u32,\n+    f4: u32,\n+    f5: u32,\n+    f6: u32,\n+    f7: u32,\n+    f8: u32,\n+    f9: u32,\n+    f10: u32,\n+    f11: u32,\n+    f12: u32,\n+    f13: u32,\n+    f14: u32,\n+    f15: u32,\n+    f16: u32,\n+    last: [usize; 0],\n+}\n \n-// #[repr(C)]\n-// struct ConstParamOk<const N: usize = 0> {\n-//     field: i32,\n-//     last: [usize; N]\n-// }\n+// Don't lint\n \n-// struct ConstParamLint<const N: usize = 0> {\n-//     field: i32,\n-//     last: [usize; N]\n-// }\n+#[repr(C)]\n+struct GoodReason {\n+    field: i32,\n+    last: [usize; 0],\n+}\n+\n+struct SizedArray {\n+    field: i32,\n+    last: [usize; 1],\n+}\n+\n+const ONE: usize = 1;\n+struct NonZeroSizedFromExternalConst {\n+    field: i32,\n+    last: [usize; ONE],\n+}\n \n-// TODO: actually, uh,, no idea what behavior here would be\n #[repr(packed)]\n struct ReprPacked {\n-    small: u8,\n-    medium: i32,\n-    weird: [u64; 0],\n+    field: i32,\n+    last: [usize; 0],\n+}\n+\n+#[repr(C, packed)]\n+struct ReprCPacked {\n+    field: i32,\n+    last: [usize; 0],\n }\n \n-// TODO: clarify expected behavior\n #[repr(align(64))]\n struct ReprAlign {\n     field: i32,\n     last: [usize; 0],\n }\n-\n-// TODO: clarify expected behavior\n #[repr(C, align(64))]\n struct ReprCAlign {\n     field: i32,\n@@ -91,24 +114,20 @@ enum DontLintAnonymousStructsFromDesuraging {\n     C { x: u32, y: [u64; 0] },\n }\n \n-struct LotsOfFields {\n-    f1: u32,\n-    f2: u32,\n-    f3: u32,\n-    f4: u32,\n-    f5: u32,\n-    f6: u32,\n-    f7: u32,\n-    f8: u32,\n-    f9: u32,\n-    f10: u32,\n-    f11: u32,\n-    f12: u32,\n-    f13: u32,\n-    f14: u32,\n-    f15: u32,\n-    f16: u32,\n-    last: [usize; 0],\n-}\n+// NOTE: including these (along with the required feature) triggers an ICE. Should make sure the\n+// const generics people are aware of that if they weren't already.\n+\n+// #[repr(C)]\n+// struct ConstParamOk<const N: usize = 0> {\n+//     field: i32,\n+//     last: [usize; N]\n+// }\n \n-fn main() {}\n+// struct ConstParamLint<const N: usize = 0> {\n+//     field: i32,\n+//     last: [usize; N]\n+// }\n+\n+fn main() {\n+    let _ = PlayNiceWithOtherAttributesMustUse {field: 0, last: []};\n+}"}]}