{"sha": "9149fd2c0ca3d23719082852a2cddd8ba5804ce6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNDlmZDJjMGNhM2QyMzcxOTA4Mjg1MmEyY2RkZDhiYTU4MDRjZTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T15:23:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T15:24:17Z"}, "message": "Fix some parser bugs", "tree": {"sha": "f15d90dc80b6fd4d8e1bb966a171cb06a64cf9c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f15d90dc80b6fd4d8e1bb966a171cb06a64cf9c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9149fd2c0ca3d23719082852a2cddd8ba5804ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9149fd2c0ca3d23719082852a2cddd8ba5804ce6", "html_url": "https://github.com/rust-lang/rust/commit/9149fd2c0ca3d23719082852a2cddd8ba5804ce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1eceefeb8b683da3f64b89446f04f01803962e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1eceefeb8b683da3f64b89446f04f01803962e1", "html_url": "https://github.com/rust-lang/rust/commit/d1eceefeb8b683da3f64b89446f04f01803962e1"}], "stats": {"total": 228, "additions": 213, "deletions": 15}, "files": [{"sha": "aa5ecf4b84ad10d69c1dcd9f4f85e8eae0c6324b", "filename": "crates/libsyntax2/src/grammar/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpaths.rs?ref=9149fd2c0ca3d23719082852a2cddd8ba5804ce6", "patch": "@@ -62,7 +62,7 @@ fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n         }\n         SELF_KW | SUPER_KW => p.bump(),\n         _ => {\n-            p.error(\"expected identifier\");\n+            p.err_and_bump(\"expected identifier\");\n         }\n     };\n     segment.complete(p, PATH_SEGMENT);"}, {"sha": "220f36db7208e218d9e04bc62865065082a88ded", "filename": "crates/libsyntax2/src/grammar/patterns.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=9149fd2c0ca3d23719082852a2cddd8ba5804ce6", "patch": "@@ -60,6 +60,7 @@ fn atom_pat(p: &mut Parser) -> Option<CompletedMarker> {\n //     let Bar(..) = ();\n // }\n fn path_pat(p: &mut Parser) -> CompletedMarker {\n+    assert!(paths::is_path_start(p));\n     let m = p.start();\n     paths::expr_path(p);\n     let kind = match p.current() {\n@@ -116,8 +117,11 @@ fn struct_pat_fields(p: &mut Parser) {\n                 p.bump();\n                 pattern(p);\n             }\n-            _ => {\n+            REF_KW | MUT_KW | IDENT => {\n                 bind_pat(p, false);\n+            },\n+            _ => {\n+                p.err_and_bump(\"expected ident\");\n             }\n         }\n         if !p.at(R_CURLY) {"}, {"sha": "32b69dc5b96803f1fee12c3012ea4231b3368046", "filename": "crates/libsyntax2/src/grammar/type_params.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=9149fd2c0ca3d23719082852a2cddd8ba5804ce6", "patch": "@@ -121,7 +121,12 @@ fn where_predicate(p: &mut Parser) {\n         lifetime_bounds(p)\n     } else {\n         types::path_type(p);\n-        bounds(p);\n+        if p.at(COLON) {\n+            bounds(p);\n+        } else {\n+            p.error(\"expected colon\")\n+        }\n+\n     }\n     m.complete(p, WHERE_PRED);\n }"}, {"sha": "88631fefeeb3e31b44afea9b348bebeaa2c8ea63", "filename": "crates/libsyntax2/src/grammar/types.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftypes.rs?ref=9149fd2c0ca3d23719082852a2cddd8ba5804ce6", "patch": "@@ -166,8 +166,11 @@ fn fn_pointer_type(p: &mut Parser) {\n         p.error(\"expected `fn`\");\n         return;\n     }\n-\n-    params::param_list_opt_patterns(p);\n+    if p.at(L_PAREN) {\n+        params::param_list_opt_patterns(p);\n+    } else {\n+        p.error(\"expected parameters\")\n+    }\n     // test fn_pointer_type_with_ret\n     // type F = fn() -> ();\n     fn_ret_type(p);"}, {"sha": "64aa078016a1723f70a14a125149fd4b4abf3048", "filename": "crates/libsyntax2/tests/data/parser/err/0004_use_path_bad_segment.txt", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt?ref=9149fd2c0ca3d23719082852a2cddd8ba5804ce6", "patch": "@@ -1,20 +1,16 @@\n FILE@[0; 12)\n-  USE_ITEM@[0; 9)\n+  USE_ITEM@[0; 12)\n     USE_KW@[0; 3)\n     WHITESPACE@[3; 4)\n-    USE_TREE@[4; 9)\n-      PATH@[4; 9)\n+    USE_TREE@[4; 11)\n+      PATH@[4; 11)\n         PATH@[4; 7)\n           PATH_SEGMENT@[4; 7)\n             NAME_REF@[4; 7)\n               IDENT@[4; 7) \"foo\"\n         COLONCOLON@[7; 9)\n         err: `expected identifier`\n-        err: `expected SEMI`\n-        err: `expected an item`\n-        PATH_SEGMENT@[9; 9)\n-  ERROR@[9; 11)\n-    INT_NUMBER@[9; 11) \"92\"\n-    err: `expected an item`\n-  ERROR@[11; 12)\n+        PATH_SEGMENT@[9; 11)\n+          ERROR@[9; 11)\n+            INT_NUMBER@[9; 11) \"92\"\n     SEMI@[11; 12)"}, {"sha": "75c1d2f98610aa68f3163e76c09f9d85c34c1825", "filename": "crates/libsyntax2/tests/data/parser/err/0014_where_no_bounds.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0014_where_no_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0014_where_no_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0014_where_no_bounds.rs?ref=9149fd2c0ca3d23719082852a2cddd8ba5804ce6", "patch": "@@ -0,0 +1 @@\n+fn foo<T>() where T {}"}, {"sha": "61444a88dfe46782d852819ec7fb857de8042439", "filename": "crates/libsyntax2/tests/data/parser/err/0014_where_no_bounds.txt", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0014_where_no_bounds.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0014_where_no_bounds.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0014_where_no_bounds.txt?ref=9149fd2c0ca3d23719082852a2cddd8ba5804ce6", "patch": "@@ -0,0 +1,31 @@\n+FILE@[0; 23)\n+  FUNCTION@[0; 22)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    TYPE_PARAM_LIST@[6; 9)\n+      L_ANGLE@[6; 7)\n+      TYPE_PARAM@[7; 8)\n+        NAME@[7; 8)\n+          IDENT@[7; 8) \"T\"\n+      R_ANGLE@[8; 9)\n+    PARAM_LIST@[9; 11)\n+      L_PAREN@[9; 10)\n+      R_PAREN@[10; 11)\n+    WHITESPACE@[11; 12)\n+    WHERE_CLAUSE@[12; 19)\n+      WHERE_KW@[12; 17)\n+      WHITESPACE@[17; 18)\n+      WHERE_PRED@[18; 19)\n+        PATH_TYPE@[18; 19)\n+          PATH@[18; 19)\n+            PATH_SEGMENT@[18; 19)\n+              NAME_REF@[18; 19)\n+                IDENT@[18; 19) \"T\"\n+                err: `expected colon`\n+    WHITESPACE@[19; 20)\n+    BLOCK_EXPR@[20; 22)\n+      L_CURLY@[20; 21)\n+      R_CURLY@[21; 22)\n+  WHITESPACE@[22; 23)"}, {"sha": "23c4be0e1848b0c6fd012766ec8d33accf195e2a", "filename": "crates/libsyntax2/tests/data/parser/ok/0030_traits.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0030_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0030_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0030_traits.rs?ref=9149fd2c0ca3d23719082852a2cddd8ba5804ce6", "patch": "@@ -0,0 +1,11 @@\n+pub trait WriteMessage {\n+    fn write_message(&FrontendMessage);\n+}\n+\n+trait Runnable {\n+    fn handler();\n+}\n+\n+trait TraitWithExpr {\n+    fn fn_with_expr(x: [i32; 1]);\n+}"}, {"sha": "8abcb01e0b535c2ef235d25c2979213463134c89", "filename": "crates/libsyntax2/tests/data/parser/ok/0030_traits.txt", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0030_traits.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9149fd2c0ca3d23719082852a2cddd8ba5804ce6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0030_traits.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0030_traits.txt?ref=9149fd2c0ca3d23719082852a2cddd8ba5804ce6", "patch": "@@ -0,0 +1,147 @@\n+FILE@[0; 164)\n+  TRAIT@[0; 164)\n+    VISIBILITY@[0; 3)\n+      PUB_KW@[0; 3)\n+    WHITESPACE@[3; 4)\n+    TRAIT_KW@[4; 9)\n+    WHITESPACE@[9; 10)\n+    NAME@[10; 22)\n+      IDENT@[10; 22) \"WriteMessage\"\n+    WHITESPACE@[22; 23)\n+    L_CURLY@[23; 24)\n+    WHITESPACE@[24; 29)\n+    FUNCTION@[29; 164)\n+      FN_KW@[29; 31)\n+      WHITESPACE@[31; 32)\n+      NAME@[32; 45)\n+        IDENT@[32; 45) \"write_message\"\n+      PARAM_LIST@[45; 164)\n+        L_PAREN@[45; 46)\n+        PARAM@[46; 63)\n+          REF_PAT@[46; 62)\n+            AMP@[46; 47)\n+            BIND_PAT@[47; 62)\n+              NAME@[47; 62)\n+                IDENT@[47; 62) \"FrontendMessage\"\n+                err: `expected COLON`\n+                err: `expected type`\n+          ERROR@[62; 63)\n+            R_PAREN@[62; 63)\n+            err: `expected COMMA`\n+            err: `expected pattern`\n+        PARAM@[63; 66)\n+          ERROR@[63; 64)\n+            SEMI@[63; 64)\n+            err: `expected COLON`\n+          WHITESPACE@[64; 65)\n+          err: `expected type`\n+          ERROR@[65; 66)\n+            R_CURLY@[65; 66)\n+            err: `expected COMMA`\n+        WHITESPACE@[66; 68)\n+        err: `expected pattern`\n+        PARAM@[68; 82)\n+          ERROR@[68; 73)\n+            TRAIT_KW@[68; 73)\n+            err: `expected COLON`\n+          WHITESPACE@[73; 74)\n+          PATH_TYPE@[74; 82)\n+            PATH@[74; 82)\n+              PATH_SEGMENT@[74; 82)\n+                NAME_REF@[74; 82)\n+                  IDENT@[74; 82) \"Runnable\"\n+                  err: `expected COMMA`\n+        WHITESPACE@[82; 83)\n+        err: `expected pattern`\n+        PARAM@[83; 91)\n+          ERROR@[83; 84)\n+            L_CURLY@[83; 84)\n+            err: `expected COLON`\n+          WHITESPACE@[84; 89)\n+          FN_POINTER_TYPE@[89; 91)\n+            FN_KW@[89; 91)\n+            err: `expected parameters`\n+            err: `expected COMMA`\n+        WHITESPACE@[91; 92)\n+        PARAM@[92; 102)\n+          TUPLE_STRUCT_PAT@[92; 101)\n+            PATH@[92; 99)\n+              PATH_SEGMENT@[92; 99)\n+                NAME_REF@[92; 99)\n+                  IDENT@[92; 99) \"handler\"\n+            L_PAREN@[99; 100)\n+            R_PAREN@[100; 101)\n+            err: `expected COLON`\n+            err: `expected type`\n+          ERROR@[101; 102)\n+            SEMI@[101; 102)\n+            err: `expected COMMA`\n+        WHITESPACE@[102; 103)\n+        err: `expected pattern`\n+        PARAM@[103; 111)\n+          ERROR@[103; 104)\n+            R_CURLY@[103; 104)\n+            err: `expected COLON`\n+          WHITESPACE@[104; 106)\n+          err: `expected type`\n+          ERROR@[106; 111)\n+            TRAIT_KW@[106; 111)\n+            err: `expected COMMA`\n+        WHITESPACE@[111; 112)\n+        PARAM@[112; 164)\n+          STRUCT_PAT@[112; 163)\n+            PATH@[112; 125)\n+              PATH_SEGMENT@[112; 125)\n+                NAME_REF@[112; 125)\n+                  IDENT@[112; 125) \"TraitWithExpr\"\n+            WHITESPACE@[125; 126)\n+            L_CURLY@[126; 127)\n+            WHITESPACE@[127; 132)\n+            err: `expected ident`\n+            ERROR@[132; 134)\n+              FN_KW@[132; 134)\n+              err: `expected COMMA`\n+            WHITESPACE@[134; 135)\n+            BIND_PAT@[135; 147)\n+              NAME@[135; 147)\n+                IDENT@[135; 147) \"fn_with_expr\"\n+                err: `expected COMMA`\n+                err: `expected ident`\n+            ERROR@[147; 148)\n+              L_PAREN@[147; 148)\n+              err: `expected COMMA`\n+            IDENT@[148; 149) \"x\"\n+            COLON@[149; 150)\n+            WHITESPACE@[150; 151)\n+            SLICE_PAT@[151; 159)\n+              L_BRACK@[151; 152)\n+              BIND_PAT@[152; 155)\n+                NAME@[152; 155)\n+                  IDENT@[152; 155) \"i32\"\n+                  err: `expected COMMA`\n+                  err: `expected pattern`\n+              ERROR@[155; 156)\n+                SEMI@[155; 156)\n+                err: `expected COMMA`\n+              WHITESPACE@[156; 157)\n+              LITERAL@[157; 158)\n+                INT_NUMBER@[157; 158) \"1\"\n+              R_BRACK@[158; 159)\n+              err: `expected COMMA`\n+              err: `expected ident`\n+            ERROR@[159; 160)\n+              R_PAREN@[159; 160)\n+              err: `expected COMMA`\n+              err: `expected ident`\n+            ERROR@[160; 161)\n+              SEMI@[160; 161)\n+            WHITESPACE@[161; 162)\n+            R_CURLY@[162; 163)\n+            err: `expected COLON`\n+          WHITESPACE@[163; 164)\n+          err: `expected type`\n+          err: `expected COMMA`\n+          err: `expected R_PAREN`\n+          err: `expected block`\n+          err: `expected R_CURLY`\n+          ERROR@[164; 164)"}]}