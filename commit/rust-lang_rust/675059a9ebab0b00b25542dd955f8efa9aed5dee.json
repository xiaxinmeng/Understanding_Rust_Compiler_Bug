{"sha": "675059a9ebab0b00b25542dd955f8efa9aed5dee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NTA1OWE5ZWJhYjBiMDBiMjU1NDJkZDk1NWY4ZWZhOWFlZDVkZWU=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-01-03T11:47:38Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-01-03T11:47:38Z"}, "message": "Clean up convoluted macros_only logic", "tree": {"sha": "279b5cf0e29347bdda356ee30f2a429aeeafa59f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/279b5cf0e29347bdda356ee30f2a429aeeafa59f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/675059a9ebab0b00b25542dd955f8efa9aed5dee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/675059a9ebab0b00b25542dd955f8efa9aed5dee", "html_url": "https://github.com/rust-lang/rust/commit/675059a9ebab0b00b25542dd955f8efa9aed5dee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/675059a9ebab0b00b25542dd955f8efa9aed5dee/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e821a6ef78b915305c4d659c813f27d4180baec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e821a6ef78b915305c4d659c813f27d4180baec0", "html_url": "https://github.com/rust-lang/rust/commit/e821a6ef78b915305c4d659c813f27d4180baec0"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "1c80523c9c650f1340fa717106e9ff443f773b72", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/675059a9ebab0b00b25542dd955f8efa9aed5dee/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675059a9ebab0b00b25542dd955f8efa9aed5dee/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=675059a9ebab0b00b25542dd955f8efa9aed5dee", "patch": "@@ -1055,19 +1055,15 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n         // Iterate over all children.\n         let macros_only = self.dep_kind.lock().macros_only();\n-        let children = self.root.tables.children.get(self, id).unwrap_or_else(Lazy::empty);\n-        for child_index in children.decode((self, sess)) {\n-            if macros_only {\n-                continue;\n-            }\n-\n-            // Get the item.\n-            if let Some(child_kind) = self.maybe_kind(child_index) {\n-                match child_kind {\n-                    EntryKind::MacroDef(..) => {}\n-                    _ if macros_only => continue,\n-                    _ => {}\n-                }\n+        if !macros_only {\n+            let children = self.root.tables.children.get(self, id).unwrap_or_else(Lazy::empty);\n+\n+            for child_index in children.decode((self, sess)) {\n+                // Get the item.\n+                let child_kind = match self.maybe_kind(child_index) {\n+                    Some(child_kind) => child_kind,\n+                    None => continue,\n+                };\n \n                 // Hand off the item to the callback.\n                 match child_kind {"}]}