{"sha": "00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZDhkYjViNWQzN2UzMDM5ZmY3Y2YxNzBiYzljMzQ3M2IzYWIwZGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-25T23:16:36Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-25T23:16:36Z"}, "message": "Revert \"test: De-~mut the test suite. rs=demuting\"\n\nThis reverts commit f63efdc2100ff28e2a42600641835e7bd8bde591.", "tree": {"sha": "487ed73911932b257735a158a4c0cea557187413", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/487ed73911932b257735a158a4c0cea557187413"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "html_url": "https://github.com/rust-lang/rust/commit/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f63efdc2100ff28e2a42600641835e7bd8bde591", "url": "https://api.github.com/repos/rust-lang/rust/commits/f63efdc2100ff28e2a42600641835e7bd8bde591", "html_url": "https://github.com/rust-lang/rust/commit/f63efdc2100ff28e2a42600641835e7bd8bde591"}], "stats": {"total": 188, "additions": 121, "deletions": 67}, "files": [{"sha": "9b6fee5e23bc1280046f2d808d975df3324878c7", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -87,12 +87,17 @@ fn main() {\n     for uint::range(1u, num_tasks) |i| {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n-        let num_chan2 = Cell(num_chan);\n-        let num_port = Cell(num_port);\n-        let new_future = do future::spawn() {\n-            let num_chan = num_chan2.take();\n-            let num_port1 = num_port.take();\n-            thread_ring(i, msg_per_task, num_chan, num_port1)\n+        let num_chan2 = ~mut None;\n+        *num_chan2 <-> num_chan;\n+        let num_port = ~mut Some(num_port);\n+        let new_future = do future::spawn() || {\n+            let mut num_chan = None;\n+            num_chan <-> *num_chan2;\n+            let mut num_port1 = None;\n+            num_port1 <-> *num_port;\n+            thread_ring(i, msg_per_task,\n+                        option::unwrap(num_chan),\n+                        option::unwrap(num_port1))\n         };\n         futures.push(new_future);\n         num_chan = Some(new_chan);"}, {"sha": "0f7c41f5997a8372ae5a70f0d38496be6d81cc46", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -17,12 +17,11 @@\n // This version uses automatically compiled channel contracts.\n \n extern mod std;\n-\n-use core::cell::Cell;\n-use core::pipes::recv;\n use std::time;\n use std::future;\n \n+use core::pipes::recv;\n+\n proto! ring (\n     num:send {\n         num(uint) -> num\n@@ -81,12 +80,17 @@ fn main() {\n     for uint::range(1u, num_tasks) |i| {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = ring::init();\n-        let num_chan2 = Cell(num_chan);\n-        let num_port = Cell(num_port);\n+        let num_chan2 = ~mut None;\n+        *num_chan2 <-> num_chan;\n+        let num_port = ~mut Some(num_port);\n         let new_future = do future::spawn || {\n-            let num_chan = num_chan2.take();\n-            let num_port1 = num_port.take();\n-            thread_ring(i, msg_per_task, num_chan, num_port1)\n+            let mut num_chan = None;\n+            num_chan <-> *num_chan2;\n+            let mut num_port1 = None;\n+            num_port1 <-> *num_port;\n+            thread_ring(i, msg_per_task,\n+                        option::unwrap(num_chan),\n+                        option::unwrap(num_port1))\n         };\n         futures.push(new_future);\n         num_chan = Some(new_chan);"}, {"sha": "eaae8370d6b8b5b2957c1005c95c8b117907cf74", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -87,12 +87,17 @@ fn main() {\n     for uint::range(1u, num_tasks) |i| {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n-        let num_chan2 = Cell(num_chan);\n-        let num_port = Cell(num_port);\n-        let new_future = do future::spawn {\n-            let num_chan = num_chan2.take();\n-            let num_port1 = num_port.take();\n-            thread_ring(i, msg_per_task, num_chan, num_port1)\n+        let num_chan2 = ~mut None;\n+        *num_chan2 <-> num_chan;\n+        let num_port = ~mut Some(num_port);\n+        let new_future = do future::spawn || {\n+            let mut num_chan = None;\n+            num_chan <-> *num_chan2;\n+            let mut num_port1 = None;\n+            num_port1 <-> *num_port;\n+            thread_ring(i, msg_per_task,\n+                        option::unwrap(num_chan),\n+                        option::unwrap(num_port1))\n         };\n         futures.push(new_future);\n         num_chan = Some(new_chan);"}, {"sha": "49a06fd491cd02c755b48003811814a4fa8b9eb5", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -17,15 +17,13 @@\n //\n // The filename is a song reference; google it in quotes.\n \n-use core::cell::Cell;\n-\n fn child_generation(gens_left: uint, -c: comm::Chan<()>) {\n     // This used to be O(n^2) in the number of generations that ever existed.\n     // With this code, only as many generations are alive at a time as tasks\n     // alive at a time,\n-    let c = Cell(c);\n-    do task::spawn_supervised {\n-        let c = c.take();\n+    let c = ~mut Some(c);\n+    do task::spawn_supervised || {\n+        let c = option::swap_unwrap(c);\n         if gens_left & 1 == 1 {\n             task::yield(); // shake things up a bit\n         }"}, {"sha": "4f0c6d7a4c87d7e59fe43e02593241c1b9ae0a4a", "filename": "src/test/compile-fail/mutable-huh-variance-deep.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -11,9 +11,9 @@\n // error-pattern: mismatched types\n \n fn main() {\n-    let v = @[mut @mut @mut @[0]];\n+    let v = ~[mut @mut ~mut ~[0]];\n \n-    fn f(&&v: @[mut @mut @mut @[const int]]) {\n+    fn f(&&v: ~[mut @mut ~mut ~[const int]]) {\n     }\n \n     f(v);"}, {"sha": "f2188911346e99fb825884cb4bf2e5bd394d87e8", "filename": "src/test/compile-fail/mutable-huh-variance-unique.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: mismatched types\n+\n+fn main() {\n+    let v = ~mut ~[0];\n+\n+    fn f(&&v: ~mut ~[const int]) {\n+        *v = ~[mut 3]\n+    }\n+\n+    f(v);\n+}"}, {"sha": "4954bbfa09d068aa4aeeca93802e99fb9ae87e82", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cell::Cell;\n-\n struct Port<T>(@T);\n \n fn main() {\n@@ -27,10 +25,11 @@ fn main() {\n         }\n     }\n \n-    let x = Cell(foo(Port(@())));\n+    let x = ~mut Some(foo(Port(@())));\n \n     do task::spawn {\n-        let y = x.take();   //~ ERROR value has non-owned type\n+        let mut y = None;\n+        *x <-> y; //~ ERROR value has non-owned type\n         log(error, y);\n     }\n }"}, {"sha": "a3a197505a34022957fab8ae0a74859dbafecacc", "filename": "src/test/compile-fail/unique-mut.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fcompile-fail%2Funique-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Fcompile-fail%2Funique-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-mut.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//error-pattern:mismatched types\n+fn main() {\n+    let i: ~int = ~mut 0;\n+}"}, {"sha": "9724717f2d58072fec408a3455899ad5cd6f2ac2", "filename": "src/test/run-pass/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -20,7 +20,7 @@ fn borrow(x: &int, f: fn(x: &int)) {\n struct F { f: ~int }\n \n pub fn main() {\n-    let mut x = ~@F{f: ~3};\n+    let mut x = ~mut @F{f: ~3};\n     do borrow(x.f) |b_x| {\n         assert *b_x == 3;\n         assert ptr::addr_of(&(*x.f)) == ptr::addr_of(&(*b_x));"}, {"sha": "4c12b6ad47c2f1902d16e1d2e44a0b75fac9c766", "filename": "src/test/run-pass/explicit-self-closures.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -21,6 +21,9 @@ impl Box {\n     fn set_many2(@mut self, xs: &[uint]) {\n         for xs.each |x| { self.x = *x; }\n     }\n+    fn set_many3(~mut self, xs: &[uint]) {\n+        for xs.each |x| { self.x = *x; }\n+    }\n }\n \n pub fn main() {}"}, {"sha": "eb10a51c0bd65f3d7a549666fc23ef9d284f966d", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -29,7 +29,7 @@ extern mod rusti {\n \n pub fn main() {\n     unsafe {\n-        let mut x = ~1;\n+        let x = ~mut 1;\n \n         assert rusti::atomic_cxchg(x, 1, 2) == 1;\n         assert *x == 2;"}, {"sha": "249d1c21376bd98725d5cecc07e280b9f8674bf6", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -318,16 +318,18 @@ pub fn main() {\n //    Commented out because of option::get error\n \n     let (client_, server_) = pingpong::init();\n-    let client_ = Cell(client_);\n-    let server_ = Cell(server_);\n+    let client_ = ~mut Some(client_);\n+    let server_ = ~mut Some(server_);\n \n     task::spawn {|client_|\n-        let client__ = client_.take();\n-        client(client__);\n+        let mut client__ = none;\n+        *client_ <-> client__;\n+        client(option::unwrap(client__));\n     };\n     task::spawn {|server_|\n-        let server__ = server_.take();\n-        server(server_\u02ca);\n+        let mut server_\u02ca = none;\n+        *server_ <-> server_\u02ca;\n+        server(option::unwrap(server_\u02ca));\n     };\n   */\n }"}, {"sha": "2ada6df76a6a86d331e1787598b517a748cc60ee", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -14,7 +14,6 @@\n // experiment with what code the compiler should generate for bounded\n // protocols.\n \n-use core::cell::Cell;\n \n // This was generated initially by the pipe compiler, but it's been\n // modified in hopefully straightforward ways.\n@@ -112,14 +111,16 @@ mod test {\n \n pub fn main() {\n     let (client_, server_) = ::pingpong::init();\n-    let client_ = Cell(client_);\n-    let server_ = Cell(server_);\n-    do task::spawn {\n-        let client__ = client_.take();\n-        test::client(client__);\n+    let client_ = ~mut Some(client_);\n+    let server_ = ~mut Some(server_);\n+    do task::spawn || {\n+        let mut client__ = None;\n+        *client_ <-> client__;\n+        test::client(option::unwrap(client__));\n     };\n-    do task::spawn {\n-        let server__ = server_.take();\n-        test::server(server_\u02ca);\n+    do task::spawn || {\n+        let mut server_\u02ca = None;\n+        *server_ <-> server_\u02ca;\n+        test::server(option::unwrap(server_\u02ca));\n     };\n }"}, {"sha": "050ff76ef9b75bfc4120f057fde027c28b4aa724", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -12,7 +12,6 @@\n \n // An example to make sure the protocol parsing syntax extension works.\n \n-use core::cell::Cell;\n use core::option;\n \n proto! pingpong (\n@@ -50,15 +49,17 @@ mod test {\n \n pub fn main() {\n     let (client_, server_) = pingpong::init();\n-    let client_ = Cell(client_);\n-    let server_ = Cell(server_);\n+    let client_ = ~mut Some(client_);\n+    let server_ = ~mut Some(server_);\n \n-    do task::spawn {\n-        let client__ = client_.take();\n-        test::client(client__);\n+    do task::spawn || {\n+        let mut client__ = None;\n+        *client_ <-> client__;\n+        test::client(option::unwrap(client__));\n     };\n-    do task::spawn {\n-        let server__ = server_.take();\n-        test::server(server_\u02ca);\n+    do task::spawn || {\n+        let mut server_\u02ca = None;\n+        *server_ <-> server_\u02ca;\n+        test::server(option::unwrap(server_\u02ca));\n     };\n }"}, {"sha": "f4c92c869e46e457f53e09d686df622a52f82867", "filename": "src/test/run-pass/pure-sum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-sum.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -20,7 +20,7 @@ pure fn sums_to(v: ~[int], sum: int) -> bool {\n }\n \n pure fn sums_to_using_uniq(v: ~[int], sum: int) -> bool {\n-    let mut i = 0u, sum0 = ~0;\n+    let mut i = 0u, sum0 = ~mut 0;\n     while i < v.len() {\n         *sum0 += v[i];\n         i += 1u;\n@@ -40,7 +40,7 @@ pure fn sums_to_using_rec(v: ~[int], sum: int) -> bool {\n struct F<T> { f: T }\n \n pure fn sums_to_using_uniq_rec(v: ~[int], sum: int) -> bool {\n-    let mut i = 0u, sum0 = F {f: ~0};\n+    let mut i = 0u, sum0 = F {f: ~mut 0};\n     while i < v.len() {\n         *sum0.f += v[i];\n         i += 1u;"}, {"sha": "61cb473bf8fb2c60429986b93bd65f5297f084b2", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -31,7 +31,7 @@ pub fn main() {\n     debug!(\"y=%d\", y);\n     assert y == 6;\n \n-    let mut x = ~6;\n+    let x = ~mut 6;\n     let y = x.get();\n     debug!(\"y=%d\", y);\n     assert y == 6;"}, {"sha": "b90c39ab34e503654a919591c864883165bc20ed", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -13,7 +13,6 @@\n // A port of task-killjoin to use a class with a dtor to manage\n // the join.\n \n-use core::cell::Cell;\n use core::comm::*;\n \n struct notify {\n@@ -50,9 +49,11 @@ fn joinable(f: fn~()) -> Port<bool> {\n         *b = true;\n     }\n     let (p, c) = stream();\n-    let c = Cell(c);\n+    let c = ~mut Some(c);\n     do task::spawn_unlinked {\n-        let ccc = c.take();\n+        let mut cc = None;\n+        *c <-> cc;\n+        let ccc = option::unwrap(cc);\n         wrapper(ccc, f)\n     }\n     p"}, {"sha": "4723356dcd0c7c3197a53266c66ac211dfeca122", "filename": "src/test/run-pass/unique-assign-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let mut i = ~1;\n+    let i = ~mut 1;\n     // Should be a copy\n     let mut j;\n     j = copy i;"}, {"sha": "628eb7265a5c644076467e772cb9275f3428e982", "filename": "src/test/run-pass/unique-decl-init-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let mut i = ~1;\n+    let i = ~mut 1;\n     // Should be a copy\n     let j = copy i;\n     *i = 2;"}, {"sha": "54ea0258c7c6fdd3ebb5c623f97ac11bdef68b93", "filename": "src/test/run-pass/unique-in-vec-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let mut a = ~[~10];\n+    let a = ~[~mut 10];\n     let b = copy a;\n \n     assert *a[0] == 10;"}, {"sha": "c52d3b563ac55840d085f55a2df9eca577a3f18c", "filename": "src/test/run-pass/unique-mutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Funique-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de/src%2Ftest%2Frun-pass%2Funique-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-mutable.rs?ref=00d8db5b5d37e3039ff7cf170bc9c3473b3ab0de", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let mut i = ~0;\n+    let i = ~mut 0;\n     *i = 1;\n     assert *i == 1;\n }"}]}