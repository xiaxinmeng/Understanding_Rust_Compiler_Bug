{"sha": "343889b7234bf786e2bc673029467052f22fca08", "node_id": "C_kwDOAAsO6NoAKDM0Mzg4OWI3MjM0YmY3ODZlMmJjNjczMDI5NDY3MDUyZjIyZmNhMDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-04T15:24:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-04T15:24:02Z"}, "message": "Auto merge of #96683 - nnethercote:speed-up-Token-ident-lifetime, r=petrochenkov\n\nSpeed up `Token::{ident,lifetime}`\n\nSome speed and cleanliness improvements.\n\nr? `@petrochenkov`", "tree": {"sha": "d27acb0a27a770b6b62af6a09edd3194ca0786f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d27acb0a27a770b6b62af6a09edd3194ca0786f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/343889b7234bf786e2bc673029467052f22fca08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/343889b7234bf786e2bc673029467052f22fca08", "html_url": "https://github.com/rust-lang/rust/commit/343889b7234bf786e2bc673029467052f22fca08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/343889b7234bf786e2bc673029467052f22fca08/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "364bf39e3179e148742466810d0cb9c8ec1c343a", "url": "https://api.github.com/repos/rust-lang/rust/commits/364bf39e3179e148742466810d0cb9c8ec1c343a", "html_url": "https://github.com/rust-lang/rust/commit/364bf39e3179e148742466810d0cb9c8ec1c343a"}, {"sha": "1d2e172935a90ecc146ac4b9e82ab1485f4d7fdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d2e172935a90ecc146ac4b9e82ab1485f4d7fdd", "html_url": "https://github.com/rust-lang/rust/commit/1d2e172935a90ecc146ac4b9e82ab1485f4d7fdd"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "1c366bc8e9a73d13dfb4583c6c69380d3de1110e", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/343889b7234bf786e2bc673029467052f22fca08/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343889b7234bf786e2bc673029467052f22fca08/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=343889b7234bf786e2bc673029467052f22fca08", "patch": "@@ -475,19 +475,29 @@ impl Token {\n     }\n \n     /// Returns an identifier if this token is an identifier.\n+    #[inline]\n     pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {\n-        let token = self.uninterpolate();\n-        match token.kind {\n-            Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),\n+        // We avoid using `Token::uninterpolate` here because it's slow.\n+        match &self.kind {\n+            &Ident(name, is_raw) => Some((Ident::new(name, self.span), is_raw)),\n+            Interpolated(nt) => match **nt {\n+                NtIdent(ident, is_raw) => Some((ident, is_raw)),\n+                _ => None,\n+            },\n             _ => None,\n         }\n     }\n \n     /// Returns a lifetime identifier if this token is a lifetime.\n+    #[inline]\n     pub fn lifetime(&self) -> Option<Ident> {\n-        let token = self.uninterpolate();\n-        match token.kind {\n-            Lifetime(name) => Some(Ident::new(name, token.span)),\n+        // We avoid using `Token::uninterpolate` here because it's slow.\n+        match &self.kind {\n+            &Lifetime(name) => Some(Ident::new(name, self.span)),\n+            Interpolated(nt) => match **nt {\n+                NtLifetime(ident) => Some(ident),\n+                _ => None,\n+            },\n             _ => None,\n         }\n     }\n@@ -521,7 +531,7 @@ impl Token {\n     /// (which happens while parsing the result of macro expansion)?\n     pub fn is_whole_expr(&self) -> bool {\n         if let Interpolated(ref nt) = self.kind\n-            && let NtExpr(_) | NtLiteral(_) | NtPath(_) | NtIdent(..) | NtBlock(_) = **nt\n+            && let NtExpr(_) | NtLiteral(_) | NtPath(_) | NtBlock(_) = **nt\n         {\n             return true;\n         }"}, {"sha": "fdd8dc93fc1a58a8c99b9d75a1b398c2584c08e8", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/343889b7234bf786e2bc673029467052f22fca08/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343889b7234bf786e2bc673029467052f22fca08/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=343889b7234bf786e2bc673029467052f22fca08", "patch": "@@ -217,10 +217,10 @@ pub(super) fn transcribe<'a>(\n             }\n \n             // Replace the meta-var with the matched token tree from the invocation.\n-            mbe::TokenTree::MetaVar(mut sp, mut orignal_ident) => {\n+            mbe::TokenTree::MetaVar(mut sp, mut original_ident) => {\n                 // Find the matched nonterminal from the macro invocation, and use it to replace\n                 // the meta-var.\n-                let ident = MacroRulesNormalizedIdent::new(orignal_ident);\n+                let ident = MacroRulesNormalizedIdent::new(original_ident);\n                 if let Some(cur_matched) = lookup_cur_matched(ident, interp, &repeats) {\n                     match cur_matched {\n                         MatchedTokenTree(ref tt) => {\n@@ -249,9 +249,9 @@ pub(super) fn transcribe<'a>(\n                     // If we aren't able to match the meta-var, we push it back into the result but\n                     // with modified syntax context. (I believe this supports nested macros).\n                     marker.visit_span(&mut sp);\n-                    marker.visit_ident(&mut orignal_ident);\n+                    marker.visit_ident(&mut original_ident);\n                     result.push(TokenTree::token(token::Dollar, sp).into());\n-                    result.push(TokenTree::Token(Token::from_ast_ident(orignal_ident)).into());\n+                    result.push(TokenTree::Token(Token::from_ast_ident(original_ident)).into());\n                 }\n             }\n "}]}