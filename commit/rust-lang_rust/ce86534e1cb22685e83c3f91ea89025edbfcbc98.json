{"sha": "ce86534e1cb22685e83c3f91ea89025edbfcbc98", "node_id": "C_kwDOAAsO6NoAKGNlODY1MzRlMWNiMjI2ODVlODNjM2Y5MWVhODkwMjVlZGJmY2JjOTg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-09T19:46:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-09T19:46:47Z"}, "message": "Merge #10499\n\n10499: feat: be more precise in mismatch arg counts highlighting r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4a87b150098d00e0bd05811eef346458ddafd6e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a87b150098d00e0bd05811eef346458ddafd6e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce86534e1cb22685e83c3f91ea89025edbfcbc98", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhYfGnCRBK7hj4Ov3rIwAAVXIIAJ+7Y9yLFXQEJVsAOa4OZz0o\njdWWNF7eaLyG38wyPRhnzTlLz+aJ4bWER6vWFF6kw14rXqXi6ZL9hv7ZmALCEaxX\nzEcQjsCoPYNpJpiH38dB/pjSX510eQoA514SkhRYd/vokJLJl4kyaTt/ExaWBCi6\n9RzZlbub0RfO8JHedJ8dEZAFZsEytDzNM4RW9y/OBzEZLnKGq9ugHw2MZkMG6Ps2\nIj+hXH1wIJG1kLf6BIsukf6xcG48db70wMV6X8Kjxb7AsMdq493s63mgb47Ko2E+\nt5iizZuOAIpqmKLvgK4M3WYtv5wV3ogDg2qj+M+qgfKLQMrQ9vljC3GTf1NaybQ=\n=BNl3\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a87b150098d00e0bd05811eef346458ddafd6e9\nparent 6005ea544028042b552e3d6d6a6386b2e5eb9159\nparent a85a3d73edf39f6e4ba6c6ac830743fa31f4cdf3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633808807 +0000\ncommitter GitHub <noreply@github.com> 1633808807 +0000\n\nMerge #10499\n\n10499: feat: be more precise in mismatch arg counts highlighting r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce86534e1cb22685e83c3f91ea89025edbfcbc98", "html_url": "https://github.com/rust-lang/rust/commit/ce86534e1cb22685e83c3f91ea89025edbfcbc98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce86534e1cb22685e83c3f91ea89025edbfcbc98/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6005ea544028042b552e3d6d6a6386b2e5eb9159", "url": "https://api.github.com/repos/rust-lang/rust/commits/6005ea544028042b552e3d6d6a6386b2e5eb9159", "html_url": "https://github.com/rust-lang/rust/commit/6005ea544028042b552e3d6d6a6386b2e5eb9159"}, {"sha": "a85a3d73edf39f6e4ba6c6ac830743fa31f4cdf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a85a3d73edf39f6e4ba6c6ac830743fa31f4cdf3", "html_url": "https://github.com/rust-lang/rust/commit/a85a3d73edf39f6e4ba6c6ac830743fa31f4cdf3"}], "stats": {"total": 66, "additions": 54, "deletions": 12}, "files": [{"sha": "d8f8c316b6a66da35e4930612d606ff0f304d3c0", "filename": "crates/ide_diagnostics/src/handlers/mismatched_arg_count.rs", "status": "modified", "additions": 54, "deletions": 12, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ce86534e1cb22685e83c3f91ea89025edbfcbc98/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce86534e1cb22685e83c3f91ea89025edbfcbc98/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs?ref=ce86534e1cb22685e83c3f91ea89025edbfcbc98", "patch": "@@ -1,3 +1,10 @@\n+use ide_db::base_db::{FileRange, SourceDatabase};\n+use syntax::{\n+    algo::find_node_at_range,\n+    ast::{self, HasArgList},\n+    AstNode,\n+};\n+\n use crate::{Diagnostic, DiagnosticsContext};\n \n // Diagnostic: mismatched-arg-count\n@@ -12,10 +19,45 @@ pub(crate) fn mismatched_arg_count(\n     Diagnostic::new(\n         \"mismatched-arg-count\",\n         message,\n-        ctx.sema.diagnostics_display_range(d.call_expr.clone().map(|it| it.into())).range,\n+        invalid_args_range(ctx, d).unwrap_or_else(|it| it).range,\n     )\n }\n \n+fn invalid_args_range(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::MismatchedArgCount,\n+) -> Result<FileRange, FileRange> {\n+    let full_range = ctx.sema.diagnostics_display_range(d.call_expr.clone().map(|it| it.into()));\n+\n+    let source_file = ctx.sema.db.parse(full_range.file_id);\n+    let expr = find_node_at_range::<ast::Expr>(&source_file.syntax_node(), full_range.range)\n+        .filter(|it| it.syntax().text_range() == full_range.range);\n+    let arg_list = match expr {\n+        Some(ast::Expr::CallExpr(call)) => call.arg_list(),\n+        Some(ast::Expr::MethodCallExpr(call)) => call.arg_list(),\n+        _ => None,\n+    };\n+    let arg_list = match arg_list {\n+        Some(it) => it,\n+        None => return Err(full_range),\n+    };\n+    let arg_list_range =\n+        FileRange { file_id: full_range.file_id, range: arg_list.syntax().text_range() };\n+    if d.found < d.expected {\n+        if d.found == 0 {\n+            return Ok(arg_list_range);\n+        }\n+        if let Some(r_paren) = arg_list.r_paren_token() {\n+            return Ok(FileRange { file_id: full_range.file_id, range: r_paren.text_range() });\n+        }\n+    }\n+    if d.expected < d.found {\n+        return Ok(arg_list_range);\n+    }\n+\n+    Err(full_range)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::check_diagnostics;\n@@ -26,7 +68,7 @@ mod tests {\n             r#\"\n fn zero() {}\n fn f() { zero(1); }\n-       //^^^^^^^ error: expected 0 arguments, found 1\n+           //^^^ error: expected 0 arguments, found 1\n \"#,\n         );\n \n@@ -44,7 +86,7 @@ fn f() { zero(); }\n             r#\"\n fn one(arg: u8) {}\n fn f() { one(); }\n-       //^^^^^ error: expected 1 argument, found 0\n+          //^^ error: expected 1 argument, found 0\n \"#,\n         );\n \n@@ -65,7 +107,7 @@ impl S { fn method(&self) {} }\n \n fn f() {\n     S::method();\n-} //^^^^^^^^^^^ error: expected 1 argument, found 0\n+}          //^^ error: expected 1 argument, found 0\n \"#,\n         );\n \n@@ -91,7 +133,7 @@ impl S { fn method(&self, arg: u8) {} }\n \n             fn f() {\n                 S.method();\n-            } //^^^^^^^^^^ error: expected 1 argument, found 0\n+            }         //^^ error: expected 1 argument, found 0\n             \"#,\n         );\n \n@@ -131,7 +173,7 @@ fn f() {\n struct Tup(u8, u16);\n fn f() {\n     Tup(0);\n-} //^^^^^^ error: expected 2 arguments, found 1\n+}      //^ error: expected 2 arguments, found 1\n \"#,\n         )\n     }\n@@ -143,7 +185,7 @@ fn f() {\n enum En { Variant(u8, u16), }\n fn f() {\n     En::Variant(0);\n-} //^^^^^^^^^^^^^^ error: expected 2 arguments, found 1\n+}              //^ error: expected 2 arguments, found 1\n \"#,\n         )\n     }\n@@ -162,9 +204,9 @@ impl Foo {\n     fn new() {\n         Foo::Bar(0);\n         Foo::Bar(0, 1);\n-      //^^^^^^^^^^^^^^ error: expected 1 argument, found 2\n+              //^^^^^^ error: expected 1 argument, found 2\n         Foo::Bar();\n-      //^^^^^^^^^^ error: expected 1 argument, found 0\n+              //^^ error: expected 1 argument, found 0\n     }\n }\n         \"#,\n@@ -185,7 +227,7 @@ fn f() {\n     unsafe {\n         fixed(0);\n         fixed(0, 1);\n-      //^^^^^^^^^^^ error: expected 1 argument, found 2\n+           //^^^^^^ error: expected 1 argument, found 2\n         varargs(0);\n         varargs(0, 1);\n         varargs2();\n@@ -204,10 +246,10 @@ fn f() {\n fn main() {\n     let f = |()| ();\n     f();\n-  //^^^ error: expected 1 argument, found 0\n+   //^^ error: expected 1 argument, found 0\n     f(());\n     f((), ());\n-  //^^^^^^^^^ error: expected 1 argument, found 2\n+   //^^^^^^^^ error: expected 1 argument, found 2\n }\n \"#,\n         )"}]}