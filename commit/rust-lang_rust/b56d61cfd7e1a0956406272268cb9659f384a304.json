{"sha": "b56d61cfd7e1a0956406272268cb9659f384a304", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NmQ2MWNmZDdlMWEwOTU2NDA2MjcyMjY4Y2I5NjU5ZjM4NGEzMDQ=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2016-08-28T16:33:17Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2016-08-29T17:36:57Z"}, "message": "rustdoc: Fix associated consts in search results\n\nAssociated consts can appear in none trait impls so need to be treated\nlike methods when generating the search index.", "tree": {"sha": "33d10c3935f03eb21d89845b30b8edfffad0eb80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33d10c3935f03eb21d89845b30b8edfffad0eb80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b56d61cfd7e1a0956406272268cb9659f384a304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b56d61cfd7e1a0956406272268cb9659f384a304", "html_url": "https://github.com/rust-lang/rust/commit/b56d61cfd7e1a0956406272268cb9659f384a304", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b56d61cfd7e1a0956406272268cb9659f384a304/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acd3f796d26e9295db1eba1ef16e0d4cc3b96dd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/acd3f796d26e9295db1eba1ef16e0d4cc3b96dd5", "html_url": "https://github.com/rust-lang/rust/commit/acd3f796d26e9295db1eba1ef16e0d4cc3b96dd5"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "688ee38249642d9bb48d75092dd27194bcc693d0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b56d61cfd7e1a0956406272268cb9659f384a304/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56d61cfd7e1a0956406272268cb9659f384a304/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b56d61cfd7e1a0956406272268cb9659f384a304", "patch": "@@ -271,7 +271,7 @@ pub struct Cache {\n     // then the fully qualified name of the structure isn't presented in `paths`\n     // yet when its implementation methods are being indexed. Caches such methods\n     // and their parent id here and indexes them at the end of crate parsing.\n-    orphan_methods: Vec<(DefId, clean::Item)>,\n+    orphan_impl_items: Vec<(DefId, clean::Item)>,\n }\n \n /// Temporary storage for data obtained during `RustdocVisitor::clean()`.\n@@ -528,7 +528,7 @@ pub fn run(mut krate: clean::Crate,\n         seen_mod: false,\n         stripped_mod: false,\n         access_levels: krate.access_levels.clone(),\n-        orphan_methods: Vec::new(),\n+        orphan_impl_items: Vec::new(),\n         traits: mem::replace(&mut krate.external_traits, FnvHashMap()),\n         deref_trait_did: deref_trait_did,\n         typarams: external_typarams,\n@@ -580,12 +580,12 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n     let mut crate_paths = Vec::<Json>::new();\n \n     let Cache { ref mut search_index,\n-                ref orphan_methods,\n+                ref orphan_impl_items,\n                 ref mut paths, .. } = *cache;\n \n-    // Attach all orphan methods to the type's definition if the type\n+    // Attach all orphan items to the type's definition if the type\n     // has since been learned.\n-    for &(did, ref item) in orphan_methods {\n+    for &(did, ref item) in orphan_impl_items {\n         if let Some(&(ref fqp, _)) = paths.get(&did) {\n             search_index.push(IndexItem {\n                 ty: item_type(item),\n@@ -1023,23 +1023,22 @@ impl DocFolder for Cache {\n \n         // Index this method for searching later on\n         if let Some(ref s) = item.name {\n-            let (parent, is_method) = match item.inner {\n+            let (parent, is_inherent_impl_item) = match item.inner {\n                 clean::StrippedItem(..) => ((None, None), false),\n                 clean::AssociatedConstItem(..) |\n                 clean::TypedefItem(_, true) if self.parent_is_trait_impl => {\n                     // skip associated items in trait impls\n                     ((None, None), false)\n                 }\n                 clean::AssociatedTypeItem(..) |\n-                clean::AssociatedConstItem(..) |\n                 clean::TyMethodItem(..) |\n                 clean::StructFieldItem(..) |\n                 clean::VariantItem(..) => {\n                     ((Some(*self.parent_stack.last().unwrap()),\n                       Some(&self.stack[..self.stack.len() - 1])),\n                      false)\n                 }\n-                clean::MethodItem(..) => {\n+                clean::MethodItem(..) | clean::AssociatedConstItem(..) => {\n                     if self.parent_stack.is_empty() {\n                         ((None, None), false)\n                     } else {\n@@ -1064,7 +1063,7 @@ impl DocFolder for Cache {\n             };\n \n             match parent {\n-                (parent, Some(path)) if is_method || (!self.stripped_mod) => {\n+                (parent, Some(path)) if is_inherent_impl_item || (!self.stripped_mod) => {\n                     debug_assert!(!item.is_stripped());\n \n                     // A crate has a module at its root, containing all items,\n@@ -1082,10 +1081,10 @@ impl DocFolder for Cache {\n                         });\n                     }\n                 }\n-                (Some(parent), None) if is_method => {\n+                (Some(parent), None) if is_inherent_impl_item => {\n                     // We have a parent, but we don't know where they're\n                     // defined yet. Wait for later to index this item.\n-                    self.orphan_methods.push((parent, item.clone()));\n+                    self.orphan_impl_items.push((parent, item.clone()));\n                 }\n                 _ => {}\n             }"}, {"sha": "6b8a4b9f13703d13d184e73ffa5b11e496adb1a7", "filename": "src/test/rustdoc/auxiliary/issue-36031.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b56d61cfd7e1a0956406272268cb9659f384a304/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-36031.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56d61cfd7e1a0956406272268cb9659f384a304/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-36031.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-36031.rs?ref=b56d61cfd7e1a0956406272268cb9659f384a304", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+\n+pub trait Foo {\n+    const FOO: usize;\n+}\n+\n+pub struct Bar;\n+\n+impl Bar {\n+    pub const BAR: usize = 3;\n+}"}, {"sha": "b025230f91820cd88d908f56693ae7146c16de00", "filename": "src/test/rustdoc/issue-36031.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b56d61cfd7e1a0956406272268cb9659f384a304/src%2Ftest%2Frustdoc%2Fissue-36031.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56d61cfd7e1a0956406272268cb9659f384a304/src%2Ftest%2Frustdoc%2Fissue-36031.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-36031.rs?ref=b56d61cfd7e1a0956406272268cb9659f384a304", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-36031.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![crate_name = \"foo\"]\n+\n+extern crate issue_36031;\n+\n+pub use issue_36031::Foo;"}]}