{"sha": "5778ab1e41b48371cf3100a397a138deda3f73f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NzhhYjFlNDFiNDgzNzFjZjMxMDBhMzk3YTEzOGRlZGEzZjczZjU=", "commit": {"author": {"name": "m5tfi", "email": "72708423+m5tfi@users.noreply.github.com", "date": "2021-04-30T08:18:36Z"}, "committer": {"name": "m5tfi", "email": "72708423+m5tfi@users.noreply.github.com", "date": "2021-04-30T08:18:36Z"}, "message": "add folding for where clauses", "tree": {"sha": "d82b384b5e70086c532d0dea4a77b61dba412d1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d82b384b5e70086c532d0dea4a77b61dba412d1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5778ab1e41b48371cf3100a397a138deda3f73f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5778ab1e41b48371cf3100a397a138deda3f73f5", "html_url": "https://github.com/rust-lang/rust/commit/5778ab1e41b48371cf3100a397a138deda3f73f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5778ab1e41b48371cf3100a397a138deda3f73f5/comments", "author": {"login": "m5tfi", "id": 72708423, "node_id": "MDQ6VXNlcjcyNzA4NDIz", "avatar_url": "https://avatars.githubusercontent.com/u/72708423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m5tfi", "html_url": "https://github.com/m5tfi", "followers_url": "https://api.github.com/users/m5tfi/followers", "following_url": "https://api.github.com/users/m5tfi/following{/other_user}", "gists_url": "https://api.github.com/users/m5tfi/gists{/gist_id}", "starred_url": "https://api.github.com/users/m5tfi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m5tfi/subscriptions", "organizations_url": "https://api.github.com/users/m5tfi/orgs", "repos_url": "https://api.github.com/users/m5tfi/repos", "events_url": "https://api.github.com/users/m5tfi/events{/privacy}", "received_events_url": "https://api.github.com/users/m5tfi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m5tfi", "id": 72708423, "node_id": "MDQ6VXNlcjcyNzA4NDIz", "avatar_url": "https://avatars.githubusercontent.com/u/72708423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m5tfi", "html_url": "https://github.com/m5tfi", "followers_url": "https://api.github.com/users/m5tfi/followers", "following_url": "https://api.github.com/users/m5tfi/following{/other_user}", "gists_url": "https://api.github.com/users/m5tfi/gists{/gist_id}", "starred_url": "https://api.github.com/users/m5tfi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m5tfi/subscriptions", "organizations_url": "https://api.github.com/users/m5tfi/orgs", "repos_url": "https://api.github.com/users/m5tfi/repos", "events_url": "https://api.github.com/users/m5tfi/events{/privacy}", "received_events_url": "https://api.github.com/users/m5tfi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80bee14e14f67f02746befff77a8a4bbfd3e5849", "url": "https://api.github.com/repos/rust-lang/rust/commits/80bee14e14f67f02746befff77a8a4bbfd3e5849", "html_url": "https://github.com/rust-lang/rust/commit/80bee14e14f67f02746befff77a8a4bbfd3e5849"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "e03ddaa14f3ae1ae890dc7638e7cb648701a281c", "filename": "crates/ide/src/folding_ranges.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5778ab1e41b48371cf3100a397a138deda3f73f5/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5778ab1e41b48371cf3100a397a138deda3f73f5/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffolding_ranges.rs?ref=5778ab1e41b48371cf3100a397a138deda3f73f5", "patch": "@@ -20,6 +20,7 @@ pub enum FoldKind {\n     Consts,\n     Statics,\n     Array,\n+    WhereClause,\n }\n \n #[derive(Debug)]\n@@ -35,6 +36,7 @@ pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n     let mut visited_mods = FxHashSet::default();\n     let mut visited_consts = FxHashSet::default();\n     let mut visited_statics = FxHashSet::default();\n+    let mut visited_where_clauses = FxHashSet::default();\n     // regions can be nested, here is a LIFO buffer\n     let mut regions_starts: Vec<TextSize> = vec![];\n \n@@ -109,6 +111,15 @@ pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n                         res.push(Fold { range, kind: FoldKind::Statics })\n                     }\n                 }\n+\n+                // Fold where clause\n+                if node.kind() == WHERE_CLAUSE && !visited_where_clauses.contains(&node) {\n+                    if let Some(range) =\n+                        contiguous_range_for_where(&node, &mut visited_where_clauses)\n+                    {\n+                        res.push(Fold { range, kind: FoldKind::WhereClause })\n+                    }\n+                }\n             }\n         }\n     }\n@@ -241,6 +252,28 @@ fn contiguous_range_for_comment(\n     }\n }\n \n+fn contiguous_range_for_where(\n+    node: &SyntaxNode,\n+    visited: &mut FxHashSet<SyntaxNode>,\n+) -> Option<TextRange> {\n+    let first_where_pred = node.first_child();\n+    let last_where_pred = node.last_child();\n+\n+    if first_where_pred != last_where_pred {\n+        let mut it = node.descendants_with_tokens();\n+        if let (Some(_where_clause), Some(where_kw), Some(last_comma)) =\n+            (it.next(), it.next(), it.last())\n+        {\n+            let start = where_kw.text_range().end();\n+            let end = last_comma.text_range().end();\n+\n+            visited.insert(node.clone());\n+            return Some(TextRange::new(start, end));\n+        }\n+    }\n+    None\n+}\n+\n #[cfg(test)]\n mod tests {\n     use test_utils::extract_tags;\n@@ -272,6 +305,7 @@ mod tests {\n                 FoldKind::Consts => \"consts\",\n                 FoldKind::Statics => \"statics\",\n                 FoldKind::Array => \"array\",\n+                FoldKind::WhereClause => \"whereclause\",\n             };\n             assert_eq!(kind, &attr.unwrap());\n         }\n@@ -513,4 +547,23 @@ static SECOND_STATIC: &str = \"second\";</fold>\n             \"#,\n         )\n     }\n+\n+    #[test]\n+    fn fold_where_clause() {\n+        // fold multi-line and don't fold single line.\n+        check(\n+            r#\"\n+fn foo()\n+where<fold whereclause>\n+    A: Foo,\n+    B: Foo,\n+    C: Foo,\n+    D: Foo,</fold> {}\n+\n+fn bar()\n+where\n+    A: Bar, {}\n+\"#,\n+        )\n+    }\n }"}, {"sha": "5eff036ecfaa39302d76e23d5f59f66c5116bddf", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5778ab1e41b48371cf3100a397a138deda3f73f5/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5778ab1e41b48371cf3100a397a138deda3f73f5/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=5778ab1e41b48371cf3100a397a138deda3f73f5", "patch": "@@ -524,6 +524,7 @@ pub(crate) fn folding_range(\n         | FoldKind::ArgList\n         | FoldKind::Consts\n         | FoldKind::Statics\n+        | FoldKind::WhereClause\n         | FoldKind::Array => None,\n     };\n "}]}