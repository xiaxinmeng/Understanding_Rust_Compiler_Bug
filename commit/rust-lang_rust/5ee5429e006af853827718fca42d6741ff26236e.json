{"sha": "5ee5429e006af853827718fca42d6741ff26236e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZTU0MjllMDA2YWY4NTM4Mjc3MThmY2E0MmQ2NzQxZmYyNjIzNmU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-17T18:12:13Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-22T17:05:58Z"}, "message": "Add structured errors for `qualify_min_const_fn` checks", "tree": {"sha": "7183d607989150c000dcbcdd2ddb595ec0dd6d94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7183d607989150c000dcbcdd2ddb595ec0dd6d94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ee5429e006af853827718fca42d6741ff26236e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ee5429e006af853827718fca42d6741ff26236e", "html_url": "https://github.com/rust-lang/rust/commit/5ee5429e006af853827718fca42d6741ff26236e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ee5429e006af853827718fca42d6741ff26236e/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfc10a89c3a1cf2398b4cd8de342577ea96fe98a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc10a89c3a1cf2398b4cd8de342577ea96fe98a", "html_url": "https://github.com/rust-lang/rust/commit/bfc10a89c3a1cf2398b4cd8de342577ea96fe98a"}], "stats": {"total": 223, "additions": 220, "deletions": 3}, "files": [{"sha": "b35c041ef53dd330cf8d430a3e722090a6f3b0dd", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 220, "deletions": 3, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/5ee5429e006af853827718fca42d6741ff26236e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee5429e006af853827718fca42d6741ff26236e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=5ee5429e006af853827718fca42d6741ff26236e", "patch": "@@ -98,6 +98,34 @@ pub trait NonConstOp: std::fmt::Debug {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct Abort;\n+impl NonConstOp for Abort {\n+    const STOPS_CONST_CHECKING: bool = true;\n+\n+    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+        mcf_status_in_item(ccx)\n+    }\n+\n+    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+        mcf_emit_error(ccx, span, \"abort is not stable in const fn\")\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct NonPrimitiveOp;\n+impl NonConstOp for NonPrimitiveOp {\n+    const STOPS_CONST_CHECKING: bool = true;\n+\n+    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+        mcf_status_in_item(ccx)\n+    }\n+\n+    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+        mcf_emit_error(ccx, span, \"only int, `bool` and `char` operations are stable in const fn\")\n+    }\n+}\n+\n /// A function call where the callee is a pointer.\n #[derive(Debug)]\n pub struct FnCallIndirect;\n@@ -130,7 +158,8 @@ impl NonConstOp for FnCallNonConst {\n ///\n /// Contains the name of the feature that would allow the use of this function.\n #[derive(Debug)]\n-pub struct FnCallUnstable(pub DefId, pub Symbol);\n+pub struct FnCallUnstable(pub DefId, pub Option<Symbol>);\n+\n impl NonConstOp for FnCallUnstable {\n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n         let FnCallUnstable(def_id, feature) = *self;\n@@ -139,13 +168,51 @@ impl NonConstOp for FnCallUnstable {\n             span,\n             &format!(\"`{}` is not yet stable as a const fn\", ccx.tcx.def_path_str(def_id)),\n         );\n-        if nightly_options::is_nightly_build() {\n-            err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", feature));\n+\n+        if ccx.is_const_stable_const_fn() {\n+            err.help(\"Const-stable functions can only call other const-stable functions\");\n+        } else if nightly_options::is_nightly_build() {\n+            if let Some(feature) = feature {\n+                err.help(&format!(\n+                    \"add `#![feature({})]` to the crate attributes to enable\",\n+                    feature\n+                ));\n+            }\n         }\n         err.emit();\n     }\n }\n \n+#[derive(Debug)]\n+pub struct FnPtrCast;\n+impl NonConstOp for FnPtrCast {\n+    const STOPS_CONST_CHECKING: bool = true;\n+\n+    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+        mcf_status_in_item(ccx)\n+    }\n+\n+    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+        mcf_emit_error(ccx, span, \"function pointer casts are not allowed in const fn\");\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct Generator;\n+impl NonConstOp for Generator {\n+    const STOPS_CONST_CHECKING: bool = true;\n+\n+    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+        // FIXME: This means generator-only MIR is only forbidden in const fn. This is for\n+        // compatibility with the old code. Such MIR should be forbidden everywhere.\n+        mcf_status_in_item(ccx)\n+    }\n+\n+    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+        mcf_emit_error(ccx, span, \"const fn generators are unstable\");\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct HeapAllocation;\n impl NonConstOp for HeapAllocation {\n@@ -408,6 +475,24 @@ impl NonConstOp for ThreadLocalAccess {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct Transmute;\n+impl NonConstOp for Transmute {\n+    const STOPS_CONST_CHECKING: bool = true;\n+\n+    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+        if ccx.const_kind() != hir::ConstContext::ConstFn {\n+            Status::Allowed\n+        } else {\n+            Status::Unstable(sym::const_fn_transmute)\n+        }\n+    }\n+\n+    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+        mcf_emit_error(ccx, span, \"can only call `transmute` from const items, not `const fn`\");\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct UnionAccess;\n impl NonConstOp for UnionAccess {\n@@ -430,3 +515,135 @@ impl NonConstOp for UnionAccess {\n         .emit();\n     }\n }\n+\n+/// See [#64992].\n+///\n+/// [#64992]: https://github.com/rust-lang/rust/issues/64992\n+#[derive(Debug)]\n+pub struct UnsizingCast;\n+impl NonConstOp for UnsizingCast {\n+    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+        if ccx.const_kind() != hir::ConstContext::ConstFn {\n+            Status::Allowed\n+        } else {\n+            Status::Unstable(sym::const_fn_transmute)\n+        }\n+    }\n+\n+    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+        mcf_emit_error(\n+            ccx,\n+            span,\n+            \"unsizing casts to types besides slices are not allowed in const fn\",\n+        );\n+    }\n+}\n+\n+pub mod ty {\n+    use super::*;\n+\n+    #[derive(Debug)]\n+    pub struct MutRef;\n+    impl NonConstOp for MutRef {\n+        const STOPS_CONST_CHECKING: bool = true;\n+\n+        fn status_in_item(&self, _ccx: &ConstCx<'_, '_>) -> Status {\n+            Status::Unstable(sym::const_mut_refs)\n+        }\n+\n+        fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+            mcf_emit_error(ccx, span, \"mutable references in const fn are unstable\");\n+        }\n+    }\n+\n+    #[derive(Debug)]\n+    pub struct FnPtr;\n+    impl NonConstOp for FnPtr {\n+        const STOPS_CONST_CHECKING: bool = true;\n+\n+        fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+            // FIXME: This attribute a hack to allow the specialization of the `futures` API. See\n+            // #59739. We should have a proper feature gate for this.\n+            if ccx.tcx.has_attr(ccx.def_id.to_def_id(), sym::rustc_allow_const_fn_ptr) {\n+                Status::Allowed\n+            } else {\n+                mcf_status_in_item(ccx)\n+            }\n+        }\n+\n+        fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+            mcf_emit_error(ccx, span, \"function pointers in const fn are unstable\");\n+        }\n+    }\n+\n+    #[derive(Debug)]\n+    pub struct ImplTrait;\n+    impl NonConstOp for ImplTrait {\n+        const STOPS_CONST_CHECKING: bool = true;\n+\n+        fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+            mcf_status_in_item(ccx)\n+        }\n+\n+        fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+            mcf_emit_error(ccx, span, \"`impl Trait` in const fn is unstable\");\n+        }\n+    }\n+\n+    #[derive(Debug)]\n+    pub struct TraitBound;\n+    impl NonConstOp for TraitBound {\n+        const STOPS_CONST_CHECKING: bool = true;\n+\n+        fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+            mcf_status_in_item(ccx)\n+        }\n+\n+        fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+            mcf_emit_error(\n+                ccx,\n+                span,\n+                \"trait bounds other than `Sized` on const fn parameters are unstable\",\n+            );\n+        }\n+    }\n+\n+    /// A trait bound with the `?const Trait` opt-out\n+    #[derive(Debug)]\n+    pub struct TraitBoundNotConst;\n+    impl NonConstOp for TraitBoundNotConst {\n+        const STOPS_CONST_CHECKING: bool = true;\n+\n+        fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n+            Status::Unstable(sym::const_trait_bound_opt_out)\n+        }\n+\n+        fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+            feature_err(\n+                &ccx.tcx.sess.parse_sess,\n+                sym::const_trait_bound_opt_out,\n+                span,\n+                \"`?const Trait` syntax is unstable\",\n+            )\n+            .emit()\n+        }\n+    }\n+}\n+\n+fn mcf_status_in_item(ccx: &ConstCx<'_, '_>) -> Status {\n+    if ccx.const_kind() != hir::ConstContext::ConstFn {\n+        Status::Allowed\n+    } else {\n+        Status::Unstable(sym::const_fn)\n+    }\n+}\n+\n+fn mcf_emit_error(ccx: &ConstCx<'_, '_>, span: Span, msg: &str) {\n+    struct_span_err!(ccx.tcx.sess, span, E0723, \"{}\", msg)\n+        .note(\n+            \"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> \\\n+             for more information\",\n+        )\n+        .help(\"add `#![feature(const_fn)]` to the crate attributes to enable\")\n+        .emit();\n+}"}]}