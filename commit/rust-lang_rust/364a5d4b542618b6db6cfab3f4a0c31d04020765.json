{"sha": "364a5d4b542618b6db6cfab3f4a0c31d04020765", "node_id": "C_kwDOAAsO6NoAKDM2NGE1ZDRiNTQyNjE4YjZkYjZjZmFiM2Y0YTBjMzFkMDQwMjA3NjU", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-20T21:19:20Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-21T18:44:12Z"}, "message": "Do not consider synthesized RPITITs on missing items checks", "tree": {"sha": "344f05a0c1c30665f0bf5f14379cf6500fcfd03c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/344f05a0c1c30665f0bf5f14379cf6500fcfd03c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/364a5d4b542618b6db6cfab3f4a0c31d04020765", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQZ+v0ACgkQgTGiTgx5\n769+kxAAojhCEnq4glZ/uxiOQ/mJ5Ua663anjqCjuQwMEWA1/Kl1j23C/4pMh/ZF\nTxu2XSipNsuPemdDXm0SAVXo3eY7REtNEny8xnn0h3vxAxXEs77tpJvTQ5/i7Xkv\nBse9lFCiFCRaiY9jK3/aaqpO7ycI3r958kWiZvBSAI2sXsxr5/OTaOJ0Avq9HCJA\nms3su702Oger82gtVer4GrI8FmKjyBBwTrNpXe+3805RYKqHJt/m4saoNW/l/iM2\nEX97mZOUYxHXQorlqi3fwL6Y9VAwJb+8pwRvSaRTT+6sAgHUF9a8xLHi/6tSkQVX\nxvG3Se2JJK0gjt9b8xcpWga6SPnWvXoRFiOOTKJ3jKnJH0IkmyL8N0wA9DlTKUI0\n0zca3cNdCgkrZhK3ISjZB6WR+Kmt7mCOdgpbaixVtQe/LOehitUULvqzUznF04p6\nUpvqFemv2+GQX4/65jOHfhFCkoppcwIumxRnut6EiFRTAO9x183t5FZnrO/wlnEh\nSfDjO4am15DPptimigRICe/A8t0DjJtvvpd5oCBFrT13+w3msq2uzo9S7IdSxXiW\nwgferlgu8Pw+fc0Gl7p1YzKi5kSl5SXVKVRwfmEzj4hlQaxHNpwwNql7IqhJBSp5\nb7Mrc0NcMyt0+xaWOsKYcsdHFFGy7O4APWC1pemQErRrv+K2BQU=\n=e5x5\n-----END PGP SIGNATURE-----", "payload": "tree 344f05a0c1c30665f0bf5f14379cf6500fcfd03c\nparent febd59e122f67d26d410a62f661a941a706b28ec\nauthor Santiago Pastorino <spastorino@gmail.com> 1679347160 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1679424252 -0300\n\nDo not consider synthesized RPITITs on missing items checks\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/364a5d4b542618b6db6cfab3f4a0c31d04020765", "html_url": "https://github.com/rust-lang/rust/commit/364a5d4b542618b6db6cfab3f4a0c31d04020765", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/364a5d4b542618b6db6cfab3f4a0c31d04020765/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "febd59e122f67d26d410a62f661a941a706b28ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/febd59e122f67d26d410a62f661a941a706b28ec", "html_url": "https://github.com/rust-lang/rust/commit/febd59e122f67d26d410a62f661a941a706b28ec"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "bcbb49232902c90c5dbcafb2b5e2a37bf4c51a87", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/364a5d4b542618b6db6cfab3f4a0c31d04020765/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364a5d4b542618b6db6cfab3f4a0c31d04020765/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=364a5d4b542618b6db6cfab3f4a0c31d04020765", "patch": "@@ -202,8 +202,11 @@ fn missing_items_err(\n     missing_items: &[ty::AssocItem],\n     full_impl_span: Span,\n ) {\n+    let missing_items =\n+        missing_items.iter().filter(|trait_item| tcx.opt_rpitit_info(trait_item.def_id).is_none());\n+\n     let missing_items_msg = missing_items\n-        .iter()\n+        .clone()\n         .map(|trait_item| trait_item.name.to_string())\n         .collect::<Vec<_>>()\n         .join(\"`, `\");"}, {"sha": "b8a793e1a7bb5314feaa8b000c7610f1fa59e7ee", "filename": "tests/ui/impl-trait/in-trait/dont-project-to-rpitit-with-no-value.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/364a5d4b542618b6db6cfab3f4a0c31d04020765/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/364a5d4b542618b6db6cfab3f4a0c31d04020765/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.current.stderr?ref=364a5d4b542618b6db6cfab3f4a0c31d04020765", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/dont-project-to-rpitit-with-no-value.rs:1:12\n+  --> $DIR/dont-project-to-rpitit-with-no-value.rs:4:12\n    |\n LL | #![feature(return_position_impl_trait_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #![feature(return_position_impl_trait_in_trait)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0046]: not all trait items implemented, missing: `foo`\n-  --> $DIR/dont-project-to-rpitit-with-no-value.rs:9:1\n+  --> $DIR/dont-project-to-rpitit-with-no-value.rs:12:1\n    |\n LL |     fn foo(&self) -> impl Sized;\n    |     ---------------------------- `foo` from trait", "previous_filename": "tests/ui/impl-trait/in-trait/dont-project-to-rpitit-with-no-value.stderr"}, {"sha": "b8a793e1a7bb5314feaa8b000c7610f1fa59e7ee", "filename": "tests/ui/impl-trait/in-trait/dont-project-to-rpitit-with-no-value.next.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/364a5d4b542618b6db6cfab3f4a0c31d04020765/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/364a5d4b542618b6db6cfab3f4a0c31d04020765/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.next.stderr?ref=364a5d4b542618b6db6cfab3f4a0c31d04020765", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/dont-project-to-rpitit-with-no-value.rs:4:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0046]: not all trait items implemented, missing: `foo`\n+  --> $DIR/dont-project-to-rpitit-with-no-value.rs:12:1\n+   |\n+LL |     fn foo(&self) -> impl Sized;\n+   |     ---------------------------- `foo` from trait\n+...\n+LL | impl MyTrait for i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^ missing `foo` in implementation\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "8329ce1f835d04c8e58ab61ebb90a46844891971", "filename": "tests/ui/impl-trait/in-trait/dont-project-to-rpitit-with-no-value.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/364a5d4b542618b6db6cfab3f4a0c31d04020765/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364a5d4b542618b6db6cfab3f4a0c31d04020765/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.rs?ref=364a5d4b542618b6db6cfab3f4a0c31d04020765", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n //~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n \n@@ -7,7 +10,7 @@ trait MyTrait {\n }\n \n impl MyTrait for i32 {\n-//~^ ERROR not all trait items implemented, missing: `foo`\n+    //~^ ERROR not all trait items implemented, missing: `foo`\n     fn bar(&self) -> impl Sized {\n         self.foo()\n     }"}]}