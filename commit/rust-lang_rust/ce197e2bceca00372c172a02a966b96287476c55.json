{"sha": "ce197e2bceca00372c172a02a966b96287476c55", "node_id": "C_kwDOAAsO6NoAKGNlMTk3ZTJiY2VjYTAwMzcyYzE3MmEwMmE5NjZiOTYyODc0NzZjNTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-01T09:50:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-01T09:50:22Z"}, "message": "Rollup merge of #91346 - ibraheemdev:result-inspect, r=dtolnay\n\nAdd `Option::inspect` and `Result::{inspect, inspect_err}`\n\n```rust\n// core::result\n\nimpl Result<T, E> {\n    pub fn inspect<F: FnOnce(&T)>(self, f: F) -> Self;\n    pub fn inspect_err<F: FnOnce(&E)>(self, f: F) -> Self;\n}\n\n// core::option\n\nimpl Option<T> {\n    pub fn inspect<F: FnOnce(&T)>(self, f: F) -> Self;\n}\n```", "tree": {"sha": "c9ea56c75b2c5ce11db09ba35d50ba517fc73c42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9ea56c75b2c5ce11db09ba35d50ba517fc73c42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce197e2bceca00372c172a02a966b96287476c55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhp0VeCRBK7hj4Ov3rIwAA1e0IAFNu4UTOWr9cysG+AqyhzwJx\ncLzXJEwDH9jYYqIhJJSxIFQ1AXzZY/7ZBclevsp1+uy6aQ5KfH8n73bl/0DlcfPk\n76unPRPCB0KSAtU9ELU2+zDUgkffukqBSdCdvJFdi7BQEFCVJ8TBmW03ytut7a2l\nRC7xwkcOUR75waNpb5ZQr8l2GORjVE8yB4XvQ1JI9kqpntS9SnXdm2DBv5Rbzv7h\ngDVAkcE0dNWAwcuPHygANjzp9cpEGM4COzVrMfZDsyCmRvrYPyCPFKg9oizRzSBL\nXUo/1wZ/h0BvMUaS7VIOpmpF0DgImCIpyz78a9opZtCDESKbAQ9UXfGl7vE0iBs=\n=P22p\n-----END PGP SIGNATURE-----\n", "payload": "tree c9ea56c75b2c5ce11db09ba35d50ba517fc73c42\nparent c09c16c0dff47b1ec143c266c3c06acdc84a4257\nparent 2e8358e1ab933c6599b40294c0b33a1a17d19a23\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638352222 +0100\ncommitter GitHub <noreply@github.com> 1638352222 +0100\n\nRollup merge of #91346 - ibraheemdev:result-inspect, r=dtolnay\n\nAdd `Option::inspect` and `Result::{inspect, inspect_err}`\n\n```rust\n// core::result\n\nimpl Result<T, E> {\n    pub fn inspect<F: FnOnce(&T)>(self, f: F) -> Self;\n    pub fn inspect_err<F: FnOnce(&E)>(self, f: F) -> Self;\n}\n\n// core::option\n\nimpl Option<T> {\n    pub fn inspect<F: FnOnce(&T)>(self, f: F) -> Self;\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce197e2bceca00372c172a02a966b96287476c55", "html_url": "https://github.com/rust-lang/rust/commit/ce197e2bceca00372c172a02a966b96287476c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce197e2bceca00372c172a02a966b96287476c55/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c09c16c0dff47b1ec143c266c3c06acdc84a4257", "url": "https://api.github.com/repos/rust-lang/rust/commits/c09c16c0dff47b1ec143c266c3c06acdc84a4257", "html_url": "https://github.com/rust-lang/rust/commit/c09c16c0dff47b1ec143c266c3c06acdc84a4257"}, {"sha": "2e8358e1ab933c6599b40294c0b33a1a17d19a23", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8358e1ab933c6599b40294c0b33a1a17d19a23", "html_url": "https://github.com/rust-lang/rust/commit/2e8358e1ab933c6599b40294c0b33a1a17d19a23"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "4eeb5e43943862dd7d7f9a57d5d3dc49a3db51c6", "filename": "library/core/src/option.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ce197e2bceca00372c172a02a966b96287476c55/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce197e2bceca00372c172a02a966b96287476c55/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=ce197e2bceca00372c172a02a966b96287476c55", "patch": "@@ -848,6 +848,31 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Calls the provided closure with a reference to the contained value (if [`Some`]).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_option_inspect)]\n+    ///\n+    /// let v = vec![1, 2, 3, 4, 5];\n+    ///\n+    /// // prints \"got: 4\"\n+    /// let x: Option<&usize> = v.get(3).inspect(|x| println!(\"got: {}\", x));\n+    ///\n+    /// // prints nothing\n+    /// let x: Option<&usize> = v.get(5).inspect(|x| println!(\"got: {}\", x));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"result_option_inspect\", issue = \"91345\")]\n+    pub fn inspect<F: FnOnce(&T)>(self, f: F) -> Self {\n+        if let Some(ref x) = self {\n+            f(x);\n+        }\n+\n+        self\n+    }\n+\n     /// Returns the provided default result (if none),\n     /// or applies a function to the contained value (if any).\n     ///"}, {"sha": "a494c089f68ba760b8796a5c926fab7df5f3e01c", "filename": "library/core/src/result.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ce197e2bceca00372c172a02a966b96287476c55/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce197e2bceca00372c172a02a966b96287476c55/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=ce197e2bceca00372c172a02a966b96287476c55", "patch": "@@ -854,6 +854,53 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n+    /// Calls the provided closure with a reference to the contained value (if [`Ok`]).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_option_inspect)]\n+    ///\n+    /// let x: u8 = \"4\"\n+    ///     .parse::<u8>()\n+    ///     .inspect(|x| println!(\"original: {}\", x))\n+    ///     .map(|x| x.pow(3))\n+    ///     .expect(\"failed to parse number\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"result_option_inspect\", issue = \"91345\")]\n+    pub fn inspect<F: FnOnce(&T)>(self, f: F) -> Self {\n+        if let Ok(ref t) = self {\n+            f(t);\n+        }\n+\n+        self\n+    }\n+\n+    /// Calls the provided closure with a reference to the contained error (if [`Err`]).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_option_inspect)]\n+    ///\n+    /// use std::{fs, io};\n+    ///\n+    /// fn read() -> io::Result<String> {\n+    ///     fs::read_to_string(\"address.txt\")\n+    ///         .inspect_err(|e| eprintln!(\"failed to read file: {}\", e))\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"result_option_inspect\", issue = \"91345\")]\n+    pub fn inspect_err<F: FnOnce(&E)>(self, f: F) -> Self {\n+        if let Err(ref e) = self {\n+            f(e);\n+        }\n+\n+        self\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Iterator constructors\n     /////////////////////////////////////////////////////////////////////////"}]}