{"sha": "b7178ef9836fe8e98ffb3f8d4d870c94e6fe816d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MTc4ZWY5ODM2ZmU4ZTk4ZmZiM2Y4ZDRkODcwYzk0ZTZmZTgxNmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-18T20:04:28Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T19:53:55Z"}, "message": "parser: `parse_pats` -> `parse_top_pat{_unpack}`.", "tree": {"sha": "be209608d451a5373e360fd8f6bc550aed058cd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be209608d451a5373e360fd8f6bc550aed058cd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7178ef9836fe8e98ffb3f8d4d870c94e6fe816d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7178ef9836fe8e98ffb3f8d4d870c94e6fe816d", "html_url": "https://github.com/rust-lang/rust/commit/b7178ef9836fe8e98ffb3f8d4d870c94e6fe816d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7178ef9836fe8e98ffb3f8d4d870c94e6fe816d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f6a0cdb0fd453580bed74586c6930b1498aa26f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f6a0cdb0fd453580bed74586c6930b1498aa26f", "html_url": "https://github.com/rust-lang/rust/commit/8f6a0cdb0fd453580bed74586c6930b1498aa26f"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "b9dd851817160679c7eaa9ecd113ffe181fdadde", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7178ef9836fe8e98ffb3f8d4d870c94e6fe816d/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7178ef9836fe8e98ffb3f8d4d870c94e6fe816d/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=b7178ef9836fe8e98ffb3f8d4d870c94e6fe816d", "patch": "@@ -1241,19 +1241,20 @@ impl<'a> Parser<'a> {\n         Ok(cond)\n     }\n \n-    /// Parses a `let $pats = $expr` pseudo-expression.\n+    /// Parses a `let $pat = $expr` pseudo-expression.\n     /// The `let` token has already been eaten.\n     fn parse_let_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_span;\n-        let pats = self.parse_pats()?;\n+        // FIXME(or_patterns, Centril | dlrobertson): use `parse_top_pat` instead.\n+        let pat = self.parse_top_pat_unpack(false)?;\n         self.expect(&token::Eq)?;\n         let expr = self.with_res(\n             Restrictions::NO_STRUCT_LITERAL,\n             |this| this.parse_assoc_expr_with(1 + prec_let_scrutinee_needs_par(), None.into())\n         )?;\n         let span = lo.to(expr.span);\n         self.sess.gated_spans.let_chains.borrow_mut().push(span);\n-        Ok(self.mk_expr(span, ExprKind::Let(pats, expr), attrs))\n+        Ok(self.mk_expr(span, ExprKind::Let(pat, expr), attrs))\n     }\n \n     /// `else` token already eaten\n@@ -1387,7 +1388,8 @@ impl<'a> Parser<'a> {\n     crate fn parse_arm(&mut self) -> PResult<'a, Arm> {\n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.token.span;\n-        let pats = self.parse_pats()?;\n+        // FIXME(or_patterns, Centril | dlrobertson): use `parse_top_pat` instead.\n+        let pat = self.parse_top_pat_unpack(false)?;\n         let guard = if self.eat_keyword(kw::If) {\n             Some(self.parse_expr()?)\n         } else {\n@@ -1448,7 +1450,7 @@ impl<'a> Parser<'a> {\n \n         Ok(ast::Arm {\n             attrs,\n-            pats,\n+            pats: pat, // FIXME(or_patterns, Centril | dlrobertson): this should just be `pat,`.\n             guard,\n             body: expr,\n             span: lo.to(hi),"}, {"sha": "e4a9dc0097752055bee591085b6162ced7c9b082", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b7178ef9836fe8e98ffb3f8d4d870c94e6fe816d/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7178ef9836fe8e98ffb3f8d4d870c94e6fe816d/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=b7178ef9836fe8e98ffb3f8d4d870c94e6fe816d", "patch": "@@ -20,19 +20,25 @@ impl<'a> Parser<'a> {\n         self.parse_pat_with_range_pat(true, expected)\n     }\n \n-    /// Parses patterns, separated by '|' s.\n-    pub(super) fn parse_pats(&mut self) -> PResult<'a, Vec<P<Pat>>> {\n-        // Allow a '|' before the pats (RFCs 1925, 2530, and 2535).\n-        self.eat_or_separator();\n-\n-        let mut pats = Vec::new();\n-        loop {\n-            pats.push(self.parse_top_level_pat()?);\n+    // FIXME(or_patterns, Centril | dlrobertson):\n+    // remove this and use `parse_top_pat` everywhere it is used instead.\n+    pub(super) fn parse_top_pat_unpack(&mut self, gate_or: bool) -> PResult<'a, Vec<P<Pat>>> {\n+        self.parse_top_pat(gate_or)\n+            .map(|pat| pat.and_then(|pat| match pat.node {\n+                PatKind::Or(pats) => pats,\n+                node => vec![self.mk_pat(pat.span, node)],\n+            }))\n+    }\n \n-            if !self.eat_or_separator() {\n-                return Ok(pats);\n-            }\n+    /// Entry point to the main pattern parser.\n+    /// Corresponds to `top_pat` in RFC 2535 and allows or-pattern at the top level.\n+    pub(super) fn parse_top_pat(&mut self, gate_or: bool) -> PResult<'a, P<Pat>> {\n+        // Allow a '|' before the pats (RFCs 1925, 2530, and 2535).\n+        if self.eat_or_separator() && gate_or {\n+            self.sess.gated_spans.or_patterns.borrow_mut().push(self.prev_span);\n         }\n+\n+        self.parse_pat_with_or(None, gate_or, true)\n     }\n \n     pub(super) fn parse_top_level_pat(&mut self) -> PResult<'a, P<Pat>> {"}]}