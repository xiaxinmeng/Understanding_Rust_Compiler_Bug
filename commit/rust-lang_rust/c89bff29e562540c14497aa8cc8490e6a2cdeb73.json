{"sha": "c89bff29e562540c14497aa8cc8490e6a2cdeb73", "node_id": "C_kwDOAAsO6NoAKGM4OWJmZjI5ZTU2MjU0MGMxNDQ5N2FhOGNjODQ5MGU2YTJjZGViNzM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-03T16:37:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-03T16:37:41Z"}, "message": "Rollup merge of #104199 - SarthakSingh31:issue-97417-1, r=cjgillot\n\nKeep track of the start of the argument block of a closure\n\nThis removes a call to `tcx.sess.source_map()` from [compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs](https://github.com/rust-lang/rust/compare/master...SarthakSingh31:issue-97417-1?expand=1#diff-8406bbc0d0b43d84c91b1933305df896ecdba0d1f9269e6744f13d87a2ab268a) as required by #97417.\n\nVsCode automatically applied `rustfmt` to the files I edited under `src/tools`. I can undo that if its a problem.\n\nr? `@cjgillot`", "tree": {"sha": "c028693ff2ad74f0ecdf1997ffbf412a3184d6b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c028693ff2ad74f0ecdf1997ffbf412a3184d6b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c89bff29e562540c14497aa8cc8490e6a2cdeb73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJji3tVCRBK7hj4Ov3rIwAAK6gIAH6m/IqFu3y8AJ3cTUln3HkR\nqCZVmsXDrAyxi835k1OpEjG6xbPQSgrqPqPWKtWKCcQMCsW/snQnKyqghJjK/y9g\n0CooL7kJw/a5RhiXZq01b2yhof8iI/rzSMiT0d+xWG8+VNpL3szw4b+PLXNKedM9\ncqGpLo9FKyAMCde1jSQyEMi+zGaKplJcQ40CDytmomXEFvvpapwzeWUWXtku1orq\nP5a5bkdvJIW2+begdSXKVD9lIyMLA+yQB9MMk62nDQZs6XbbfTgrNEIj17pDsH4y\nsMBX+v4GM+f/drLHFSHy4JNBnyHdvoCtL5llNWshOalFB/w2UhKsTL1i1Y46Aqw=\n=VLyv\n-----END PGP SIGNATURE-----\n", "payload": "tree c028693ff2ad74f0ecdf1997ffbf412a3184d6b9\nparent 4bb15759d7eb519be70c9a955dba9be09e13c06d\nparent 8f705e2425ff459566cd1da0f2c79060fdad9091\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670085461 +0100\ncommitter GitHub <noreply@github.com> 1670085461 +0100\n\nRollup merge of #104199 - SarthakSingh31:issue-97417-1, r=cjgillot\n\nKeep track of the start of the argument block of a closure\n\nThis removes a call to `tcx.sess.source_map()` from [compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs](https://github.com/rust-lang/rust/compare/master...SarthakSingh31:issue-97417-1?expand=1#diff-8406bbc0d0b43d84c91b1933305df896ecdba0d1f9269e6744f13d87a2ab268a) as required by #97417.\n\nVsCode automatically applied `rustfmt` to the files I edited under `src/tools`. I can undo that if its a problem.\n\nr? `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c89bff29e562540c14497aa8cc8490e6a2cdeb73", "html_url": "https://github.com/rust-lang/rust/commit/c89bff29e562540c14497aa8cc8490e6a2cdeb73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c89bff29e562540c14497aa8cc8490e6a2cdeb73/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb15759d7eb519be70c9a955dba9be09e13c06d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb15759d7eb519be70c9a955dba9be09e13c06d", "html_url": "https://github.com/rust-lang/rust/commit/4bb15759d7eb519be70c9a955dba9be09e13c06d"}, {"sha": "8f705e2425ff459566cd1da0f2c79060fdad9091", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f705e2425ff459566cd1da0f2c79060fdad9091", "html_url": "https://github.com/rust-lang/rust/commit/8f705e2425ff459566cd1da0f2c79060fdad9091"}], "stats": {"total": 82, "additions": 53, "deletions": 29}, "files": [{"sha": "7e60f17daf2b79fe179833ad8d1e5e0e7a00953a", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=c89bff29e562540c14497aa8cc8490e6a2cdeb73", "patch": "@@ -1312,8 +1312,10 @@ pub struct Closure {\n     pub movability: Movability,\n     pub fn_decl: P<FnDecl>,\n     pub body: P<Expr>,\n-    /// The span of the argument block `|...|`.\n+    /// The span of the declaration block: 'move |...| -> ...'\n     pub fn_decl_span: Span,\n+    /// The span of the argument block `|...|`\n+    pub fn_arg_span: Span,\n }\n \n /// Limit types of a range (inclusive or exclusive)"}, {"sha": "2706ff6ff2afdf7b87d44729bb86c7eb68ecacb3", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=c89bff29e562540c14497aa8cc8490e6a2cdeb73", "patch": "@@ -1368,6 +1368,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             fn_decl,\n             body,\n             fn_decl_span,\n+            fn_arg_span: _,\n         }) => {\n             vis.visit_closure_binder(binder);\n             vis.visit_asyncness(asyncness);"}, {"sha": "991eb489f6ba3ee115fbf7f8b8dcf691226adf48", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=c89bff29e562540c14497aa8cc8490e6a2cdeb73", "patch": "@@ -840,6 +840,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             fn_decl,\n             body,\n             fn_decl_span: _,\n+            fn_arg_span: _,\n         }) => {\n             visitor.visit_fn(FnKind::Closure(binder, fn_decl, body), expression.span, expression.id)\n         }"}, {"sha": "4260805f1dd1fdfed90cdc8cce97aa605b2f8965", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=c89bff29e562540c14497aa8cc8490e6a2cdeb73", "patch": "@@ -176,6 +176,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     fn_decl,\n                     body,\n                     fn_decl_span,\n+                    fn_arg_span,\n                 }) => {\n                     if let Async::Yes { closure_id, .. } = asyncness {\n                         self.lower_expr_async_closure(\n@@ -186,6 +187,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             fn_decl,\n                             body,\n                             *fn_decl_span,\n+                            *fn_arg_span,\n                         )\n                     } else {\n                         self.lower_expr_closure(\n@@ -196,6 +198,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             fn_decl,\n                             body,\n                             *fn_decl_span,\n+                            *fn_arg_span,\n                         )\n                     }\n                 }\n@@ -642,6 +645,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 fn_decl,\n                 body,\n                 fn_decl_span: self.lower_span(span),\n+                fn_arg_span: None,\n                 movability: Some(hir::Movability::Static),\n             });\n \n@@ -898,6 +902,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         decl: &FnDecl,\n         body: &Expr,\n         fn_decl_span: Span,\n+        fn_arg_span: Span,\n     ) -> hir::ExprKind<'hir> {\n         let (binder_clause, generic_params) = self.lower_closure_binder(binder);\n \n@@ -928,6 +933,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             fn_decl,\n             body: body_id,\n             fn_decl_span: self.lower_span(fn_decl_span),\n+            fn_arg_span: Some(self.lower_span(fn_arg_span)),\n             movability: generator_option,\n         });\n \n@@ -984,6 +990,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         decl: &FnDecl,\n         body: &Expr,\n         fn_decl_span: Span,\n+        fn_arg_span: Span,\n     ) -> hir::ExprKind<'hir> {\n         if let &ClosureBinder::For { span, .. } = binder {\n             self.tcx.sess.emit_err(NotSupportedForLifetimeBinderAsyncClosure { span });\n@@ -1038,6 +1045,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             fn_decl,\n             body,\n             fn_decl_span: self.lower_span(fn_decl_span),\n+            fn_arg_span: Some(self.lower_span(fn_arg_span)),\n             movability: None,\n         });\n         hir::ExprKind::Closure(c)"}, {"sha": "c6b70b53827d0f7f247004a2f650a88ae188838b", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=c89bff29e562540c14497aa8cc8490e6a2cdeb73", "patch": "@@ -402,6 +402,7 @@ impl<'a> State<'a> {\n                 fn_decl,\n                 body,\n                 fn_decl_span: _,\n+                fn_arg_span: _,\n             }) => {\n                 self.print_closure_binder(binder);\n                 self.print_movability(*movability);"}, {"sha": "4812bdd9dd8b9c50097fab9ebaa332a65f896bc5", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=c89bff29e562540c14497aa8cc8490e6a2cdeb73", "patch": "@@ -539,6 +539,9 @@ impl<'a> ExtCtxt<'a> {\n                 fn_decl,\n                 body,\n                 fn_decl_span: span,\n+                // FIXME(SarthakSingh31): This points to the start of the declaration block and\n+                // not the span of the argument block.\n+                fn_arg_span: span,\n             })),\n         )\n     }"}, {"sha": "075173756e55f2da0dffe9708946b472e3aadff5", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c89bff29e562540c14497aa8cc8490e6a2cdeb73", "patch": "@@ -943,7 +943,10 @@ pub struct Closure<'hir> {\n     pub bound_generic_params: &'hir [GenericParam<'hir>],\n     pub fn_decl: &'hir FnDecl<'hir>,\n     pub body: BodyId,\n+    /// The span of the declaration block: 'move |...| -> ...'\n     pub fn_decl_span: Span,\n+    /// The span of the argument block `|...|`\n+    pub fn_arg_span: Option<Span>,\n     pub movability: Option<Movability>,\n }\n "}, {"sha": "9aa31aa87af3a7f4055394ad6077562d496a2b5a", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=c89bff29e562540c14497aa8cc8490e6a2cdeb73", "patch": "@@ -740,6 +740,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             body,\n             capture_clause: _,\n             fn_decl_span: _,\n+            fn_arg_span: _,\n             movability: _,\n         }) => {\n             walk_list!(visitor, visit_generic_param, bound_generic_params);"}, {"sha": "3791b2c8661a71a318da4d94848795109e40682e", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=c89bff29e562540c14497aa8cc8490e6a2cdeb73", "patch": "@@ -1480,6 +1480,7 @@ impl<'a> State<'a> {\n                 fn_decl,\n                 body,\n                 fn_decl_span: _,\n+                fn_arg_span: _,\n                 movability: _,\n                 def_id: _,\n             }) => {"}, {"sha": "429cb60ba2b6161692c9153041a068ce638e69d5", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=c89bff29e562540c14497aa8cc8490e6a2cdeb73", "patch": "@@ -456,10 +456,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .iter()\n             .map(|ty| ArgKind::from_expected_ty(*ty, None))\n             .collect();\n-        let (closure_span, found_args) = match self.get_fn_like_arguments(expr_map_node) {\n-            Some((sp, args)) => (Some(sp), args),\n-            None => (None, Vec::new()),\n-        };\n+        let (closure_span, closure_arg_span, found_args) =\n+            match self.get_fn_like_arguments(expr_map_node) {\n+                Some((sp, arg_sp, args)) => (Some(sp), arg_sp, args),\n+                None => (None, None, Vec::new()),\n+            };\n         let expected_span =\n             expected_sig.cause_span.unwrap_or_else(|| self.tcx.def_span(expr_def_id));\n         self.report_arg_count_mismatch(\n@@ -468,6 +469,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             expected_args,\n             found_args,\n             true,\n+            closure_arg_span,\n         )\n         .emit();\n "}, {"sha": "1bd8f95350879d29e86136f6c5d7c7bd1892bbb7", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=c89bff29e562540c14497aa8cc8490e6a2cdeb73", "patch": "@@ -1022,7 +1022,7 @@ impl<'hir> Map<'hir> {\n                 ..\n             }) => {\n                 // Ensure that the returned span has the item's SyntaxContext.\n-                fn_decl_span.find_ancestor_in_same_ctxt(*span).unwrap_or(*span)\n+                fn_decl_span.find_ancestor_inside(*span).unwrap_or(*span)\n             }\n             _ => self.span_with_body(hir_id),\n         };"}, {"sha": "fe3cfde2e6383dfc024a56812bb09b726ae7ee6b", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=c89bff29e562540c14497aa8cc8490e6a2cdeb73", "patch": "@@ -2060,7 +2060,7 @@ impl<'a> Parser<'a> {\n         };\n \n         let capture_clause = self.parse_capture_clause()?;\n-        let fn_decl = self.parse_fn_block_decl()?;\n+        let (fn_decl, fn_arg_span) = self.parse_fn_block_decl()?;\n         let decl_hi = self.prev_token.span;\n         let mut body = match fn_decl.output {\n             FnRetTy::Default(_) => {\n@@ -2101,6 +2101,7 @@ impl<'a> Parser<'a> {\n                 fn_decl,\n                 body,\n                 fn_decl_span: lo.to(decl_hi),\n+                fn_arg_span,\n             })),\n         );\n \n@@ -2129,7 +2130,9 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses the `|arg, arg|` header of a closure.\n-    fn parse_fn_block_decl(&mut self) -> PResult<'a, P<FnDecl>> {\n+    fn parse_fn_block_decl(&mut self) -> PResult<'a, (P<FnDecl>, Span)> {\n+        let arg_start = self.token.span.lo();\n+\n         let inputs = if self.eat(&token::OrOr) {\n             Vec::new()\n         } else {\n@@ -2145,10 +2148,11 @@ impl<'a> Parser<'a> {\n             self.expect_or()?;\n             args\n         };\n+        let arg_span = self.prev_token.span.with_lo(arg_start);\n         let output =\n             self.parse_ret_ty(AllowPlus::Yes, RecoverQPath::Yes, RecoverReturnSign::Yes)?;\n \n-        Ok(P(FnDecl { inputs, output }))\n+        Ok((P(FnDecl { inputs, output }), arg_span))\n     }\n \n     /// Parses a parameter in a closure header (e.g., `|arg, arg|`)."}, {"sha": "56dea916b305f447d03c63cc09016bf058e51f5b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bff29e562540c14497aa8cc8490e6a2cdeb73/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c89bff29e562540c14497aa8cc8490e6a2cdeb73", "patch": "@@ -71,7 +71,7 @@ pub trait InferCtxtExt<'tcx> {\n     /// returns a span and `ArgKind` information that describes the\n     /// arguments it expects. This can be supplied to\n     /// `report_arg_count_mismatch`.\n-    fn get_fn_like_arguments(&self, node: Node<'_>) -> Option<(Span, Vec<ArgKind>)>;\n+    fn get_fn_like_arguments(&self, node: Node<'_>) -> Option<(Span, Option<Span>, Vec<ArgKind>)>;\n \n     /// Reports an error when the number of arguments needed by a\n     /// trait match doesn't match the number that the expression\n@@ -83,6 +83,7 @@ pub trait InferCtxtExt<'tcx> {\n         expected_args: Vec<ArgKind>,\n         found_args: Vec<ArgKind>,\n         is_closure: bool,\n+        closure_pipe_span: Option<Span>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n \n     /// Checks if the type implements one of `Fn`, `FnMut`, or `FnOnce`\n@@ -135,15 +136,16 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     /// returns a span and `ArgKind` information that describes the\n     /// arguments it expects. This can be supplied to\n     /// `report_arg_count_mismatch`.\n-    fn get_fn_like_arguments(&self, node: Node<'_>) -> Option<(Span, Vec<ArgKind>)> {\n+    fn get_fn_like_arguments(&self, node: Node<'_>) -> Option<(Span, Option<Span>, Vec<ArgKind>)> {\n         let sm = self.tcx.sess.source_map();\n         let hir = self.tcx.hir();\n         Some(match node {\n             Node::Expr(&hir::Expr {\n-                kind: hir::ExprKind::Closure(&hir::Closure { body, fn_decl_span, .. }),\n+                kind: hir::ExprKind::Closure(&hir::Closure { body, fn_decl_span, fn_arg_span, .. }),\n                 ..\n             }) => (\n                 fn_decl_span,\n+                fn_arg_span,\n                 hir.body(body)\n                     .params\n                     .iter()\n@@ -174,6 +176,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                 kind: hir::TraitItemKind::Fn(ref sig, _), ..\n             }) => (\n                 sig.span,\n+                None,\n                 sig.decl\n                     .inputs\n                     .iter()\n@@ -188,7 +191,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n             ),\n             Node::Ctor(ref variant_data) => {\n                 let span = variant_data.ctor_hir_id().map_or(DUMMY_SP, |id| hir.span(id));\n-                (span, vec![ArgKind::empty(); variant_data.fields().len()])\n+                (span, None, vec![ArgKind::empty(); variant_data.fields().len()])\n             }\n             _ => panic!(\"non-FnLike node found: {:?}\", node),\n         })\n@@ -204,6 +207,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         expected_args: Vec<ArgKind>,\n         found_args: Vec<ArgKind>,\n         is_closure: bool,\n+        closure_arg_span: Option<Span>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let kind = if is_closure { \"closure\" } else { \"function\" };\n \n@@ -241,24 +245,13 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         if let Some(found_span) = found_span {\n             err.span_label(found_span, format!(\"takes {}\", found_str));\n \n-            // move |_| { ... }\n-            // ^^^^^^^^-- def_span\n-            //\n-            // move |_| { ... }\n-            // ^^^^^-- prefix\n-            let prefix_span = self.tcx.sess.source_map().span_until_non_whitespace(found_span);\n-            // move |_| { ... }\n-            //      ^^^-- pipe_span\n-            let pipe_span =\n-                if let Some(span) = found_span.trim_start(prefix_span) { span } else { found_span };\n-\n             // Suggest to take and ignore the arguments with expected_args_length `_`s if\n             // found arguments is empty (assume the user just wants to ignore args in this case).\n             // For example, if `expected_args_length` is 2, suggest `|_, _|`.\n             if found_args.is_empty() && is_closure {\n                 let underscores = vec![\"_\"; expected_args.len()].join(\", \");\n                 err.span_suggestion_verbose(\n-                    pipe_span,\n+                    closure_arg_span.unwrap_or(found_span),\n                     &format!(\n                         \"consider changing the closure to take and ignore the expected argument{}\",\n                         pluralize!(expected_args.len())\n@@ -1252,20 +1245,22 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         obligation.cause.code(),\n                     )\n                 } else {\n-                    let (closure_span, found) = found_did\n+                    let (closure_span, closure_arg_span, found) = found_did\n                         .and_then(|did| {\n                             let node = self.tcx.hir().get_if_local(did)?;\n-                            let (found_span, found) = self.get_fn_like_arguments(node)?;\n-                            Some((Some(found_span), found))\n+                            let (found_span, closure_arg_span, found) =\n+                                self.get_fn_like_arguments(node)?;\n+                            Some((Some(found_span), closure_arg_span, found))\n                         })\n-                        .unwrap_or((found_span, found));\n+                        .unwrap_or((found_span, None, found));\n \n                     self.report_arg_count_mismatch(\n                         span,\n                         closure_span,\n                         expected,\n                         found,\n                         found_trait_ty.is_closure(),\n+                        closure_arg_span,\n                     )\n                 }\n             }"}, {"sha": "a93ba87470a9c045703a8d31a2d39b51884d04a5", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c89bff29e562540c14497aa8cc8490e6a2cdeb73/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bff29e562540c14497aa8cc8490e6a2cdeb73/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=c89bff29e562540c14497aa8cc8490e6a2cdeb73", "patch": "@@ -126,6 +126,7 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                         fn_decl: decl.clone(),\n                         body: e,\n                         fn_decl_span: DUMMY_SP,\n+                        fn_arg_span: DUMMY_SP,\n                     })))\n                 });\n             }"}, {"sha": "244d4427c562359c695f7095ab936cdd3ba3be21", "filename": "src/tools/rustfmt/src/closures.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c89bff29e562540c14497aa8cc8490e6a2cdeb73/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89bff29e562540c14497aa8cc8490e6a2cdeb73/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs?ref=c89bff29e562540c14497aa8cc8490e6a2cdeb73", "patch": "@@ -335,6 +335,7 @@ pub(crate) fn rewrite_last_closure(\n             ref fn_decl,\n             ref body,\n             fn_decl_span: _,\n+            fn_arg_span: _,\n         } = **closure;\n         let body = match body.kind {\n             ast::ExprKind::Block(ref block, _)"}]}