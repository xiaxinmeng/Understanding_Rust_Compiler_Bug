{"sha": "14094e44770559c13a1e8bdfcfb989d3bedd00d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MDk0ZTQ0NzcwNTU5YzEzYTFlOGJkZmNmYjk4OWQzYmVkZDAwZDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-10T17:56:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-10T17:56:15Z"}, "message": "Move FeatureFlags", "tree": {"sha": "812c257acee9610a5a4ae227cd9363a248698c52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/812c257acee9610a5a4ae227cd9363a248698c52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14094e44770559c13a1e8bdfcfb989d3bedd00d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14094e44770559c13a1e8bdfcfb989d3bedd00d8", "html_url": "https://github.com/rust-lang/rust/commit/14094e44770559c13a1e8bdfcfb989d3bedd00d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14094e44770559c13a1e8bdfcfb989d3bedd00d8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf582e77d6e5603149b355a5650cd4d15318f776", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf582e77d6e5603149b355a5650cd4d15318f776", "html_url": "https://github.com/rust-lang/rust/commit/bf582e77d6e5603149b355a5650cd4d15318f776"}], "stats": {"total": 66, "additions": 24, "deletions": 42}, "files": [{"sha": "9f45003d3345ba2883c58ea049bf3ca44941cc1a", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=14094e44770559c13a1e8bdfcfb989d3bedd00d8", "patch": "@@ -84,7 +84,6 @@ pub use ra_db::{\n };\n pub use ra_ide_db::{\n     change::{AnalysisChange, LibraryData},\n-    feature_flags::FeatureFlags,\n     line_index::{LineCol, LineIndex},\n     line_index_utils::translate_offset_with_edit,\n     search::SearchScope,\n@@ -131,24 +130,20 @@ pub struct AnalysisHost {\n \n impl Default for AnalysisHost {\n     fn default() -> AnalysisHost {\n-        AnalysisHost::new(None, FeatureFlags::default())\n+        AnalysisHost::new(None)\n     }\n }\n \n impl AnalysisHost {\n-    pub fn new(lru_capcity: Option<usize>, feature_flags: FeatureFlags) -> AnalysisHost {\n-        AnalysisHost { db: RootDatabase::new(lru_capcity, feature_flags) }\n+    pub fn new(lru_capacity: Option<usize>) -> AnalysisHost {\n+        AnalysisHost { db: RootDatabase::new(lru_capacity) }\n     }\n     /// Returns a snapshot of the current state, which you can query for\n     /// semantic information.\n     pub fn analysis(&self) -> Analysis {\n         Analysis { db: self.db.snapshot() }\n     }\n \n-    pub fn feature_flags(&self) -> &FeatureFlags {\n-        &self.db.feature_flags\n-    }\n-\n     /// Applies changes to the current state of the world. If there are\n     /// outstanding snapshots, they will be canceled.\n     pub fn apply_change(&mut self, change: AnalysisChange) {\n@@ -224,11 +219,6 @@ impl Analysis {\n         (host.analysis(), file_id)\n     }\n \n-    /// Features for Analysis.\n-    pub fn feature_flags(&self) -> &FeatureFlags {\n-        &self.db.feature_flags\n-    }\n-\n     /// Debug info about the current state of the analysis.\n     pub fn status(&self) -> Cancelable<String> {\n         self.with_db(|db| status::status(&*db))"}, {"sha": "6bcccc8487ea5b3f3297463ffcef6b9ca2a9d9f3", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=14094e44770559c13a1e8bdfcfb989d3bedd00d8", "patch": "@@ -5,7 +5,6 @@\n pub mod marks;\n pub mod line_index;\n pub mod line_index_utils;\n-pub mod feature_flags;\n pub mod symbol_index;\n pub mod change;\n pub mod defs;\n@@ -22,7 +21,7 @@ use ra_db::{\n };\n use rustc_hash::FxHashMap;\n \n-use crate::{feature_flags::FeatureFlags, line_index::LineIndex, symbol_index::SymbolsDatabase};\n+use crate::{line_index::LineIndex, symbol_index::SymbolsDatabase};\n \n #[salsa::database(\n     ra_db::SourceDatabaseStorage,\n@@ -37,7 +36,6 @@ use crate::{feature_flags::FeatureFlags, line_index::LineIndex, symbol_index::Sy\n #[derive(Debug)]\n pub struct RootDatabase {\n     runtime: salsa::Runtime<RootDatabase>,\n-    pub feature_flags: Arc<FeatureFlags>,\n     pub(crate) debug_data: Arc<DebugData>,\n     pub last_gc: crate::wasm_shims::Instant,\n     pub last_gc_check: crate::wasm_shims::Instant,\n@@ -82,17 +80,16 @@ impl salsa::Database for RootDatabase {\n \n impl Default for RootDatabase {\n     fn default() -> RootDatabase {\n-        RootDatabase::new(None, FeatureFlags::default())\n+        RootDatabase::new(None)\n     }\n }\n \n impl RootDatabase {\n-    pub fn new(lru_capacity: Option<usize>, feature_flags: FeatureFlags) -> RootDatabase {\n+    pub fn new(lru_capacity: Option<usize>) -> RootDatabase {\n         let mut db = RootDatabase {\n             runtime: salsa::Runtime::default(),\n             last_gc: crate::wasm_shims::Instant::now(),\n             last_gc_check: crate::wasm_shims::Instant::now(),\n-            feature_flags: Arc::new(feature_flags),\n             debug_data: Default::default(),\n         };\n         db.set_crate_graph_with_durability(Default::default(), Durability::HIGH);\n@@ -112,7 +109,6 @@ impl salsa::ParallelDatabase for RootDatabase {\n             runtime: self.runtime.snapshot(self),\n             last_gc: self.last_gc,\n             last_gc_check: self.last_gc_check,\n-            feature_flags: Arc::clone(&self.feature_flags),\n             debug_data: Arc::clone(&self.debug_data),\n         })\n     }"}, {"sha": "5df29a383dac91a40ee963f5b2464fe3a8974385", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=14094e44770559c13a1e8bdfcfb989d3bedd00d8", "patch": "@@ -6,7 +6,7 @@ use std::path::Path;\n use anyhow::Result;\n use crossbeam_channel::{unbounded, Receiver};\n use ra_db::{CrateGraph, FileId, SourceRootId};\n-use ra_ide::{AnalysisChange, AnalysisHost, FeatureFlags};\n+use ra_ide::{AnalysisChange, AnalysisHost};\n use ra_project_model::{get_rustc_cfg_options, PackageRoot, ProjectWorkspace};\n use ra_vfs::{RootEntry, Vfs, VfsChange, VfsTask, Watch};\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -82,7 +82,7 @@ pub(crate) fn load(\n     receiver: Receiver<VfsTask>,\n ) -> AnalysisHost {\n     let lru_cap = std::env::var(\"RA_LRU_CAP\").ok().and_then(|it| it.parse::<usize>().ok());\n-    let mut host = AnalysisHost::new(lru_cap, FeatureFlags::default());\n+    let mut host = AnalysisHost::new(lru_cap);\n     let mut analysis_change = AnalysisChange::new();\n     analysis_change.set_crate_graph(crate_graph);\n "}, {"sha": "dbb3f50a0956be9cc3f4d2bbf5c746c1a6cd6455", "filename": "crates/rust-analyzer/src/feature_flags.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Frust-analyzer%2Fsrc%2Ffeature_flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Frust-analyzer%2Fsrc%2Ffeature_flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffeature_flags.rs?ref=14094e44770559c13a1e8bdfcfb989d3bedd00d8", "previous_filename": "crates/ra_ide_db/src/feature_flags.rs"}, {"sha": "e50e47b195bfaa25b2029a1c4a42ff2d9200750d", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=14094e44770559c13a1e8bdfcfb989d3bedd00d8", "patch": "@@ -37,6 +37,7 @@ mod config;\n mod world;\n mod diagnostics;\n mod semantic_tokens;\n+mod feature_flags;\n \n use serde::de::DeserializeOwned;\n "}, {"sha": "f9de712a00134b7a09dd40a9a13dd9fb1ca8cf82", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=14094e44770559c13a1e8bdfcfb989d3bedd00d8", "patch": "@@ -18,7 +18,7 @@ use crossbeam_channel::{select, unbounded, RecvError, Sender};\n use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestId, Response};\n use lsp_types::{ClientCapabilities, NumberOrString};\n use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckOptions, CheckTask};\n-use ra_ide::{Canceled, FeatureFlags, FileId, LibraryData, SourceRootId};\n+use ra_ide::{Canceled, FileId, LibraryData, SourceRootId};\n use ra_prof::profile;\n use ra_vfs::{VfsFile, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n@@ -28,6 +28,7 @@ use threadpool::ThreadPool;\n \n use crate::{\n     diagnostics::DiagnosticTask,\n+    feature_flags::FeatureFlags,\n     main_loop::{\n         pending_requests::{PendingRequest, PendingRequests},\n         subscriptions::Subscriptions,\n@@ -423,7 +424,7 @@ fn loop_turn(\n     {\n         loop_state.workspace_loaded = true;\n         let n_packages: usize = world_state.workspaces.iter().map(|it| it.n_packages()).sum();\n-        if world_state.feature_flags().get(\"notifications.workspace-loaded\") {\n+        if world_state.feature_flags.get(\"notifications.workspace-loaded\") {\n             let msg = format!(\"workspace loaded, {} rust packages\", n_packages);\n             show_message(req::MessageType::Info, msg, &connection.sender);\n         }\n@@ -839,7 +840,7 @@ fn update_file_notifications_on_threadpool(\n     subscriptions: Vec<FileId>,\n ) {\n     log::trace!(\"updating notifications for {:?}\", subscriptions);\n-    let publish_diagnostics = world.feature_flags().get(\"lsp.diagnostics\");\n+    let publish_diagnostics = world.feature_flags.get(\"lsp.diagnostics\");\n     pool.execute(move || {\n         for file_id in subscriptions {\n             if publish_diagnostics {"}, {"sha": "fcb40432d4a2dfa0022dd660b65f6b9292af0cd1", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=14094e44770559c13a1e8bdfcfb989d3bedd00d8", "patch": "@@ -425,12 +425,10 @@ pub fn handle_completion(\n     }\n \n     let options = CompletionOptions {\n-        enable_postfix_completions: world.feature_flags().get(\"completion.enable-postfix\"),\n-        add_call_parenthesis: world\n-            .feature_flags()\n-            .get(\"completion.insertion.add-call-parenthesis\"),\n+        enable_postfix_completions: world.feature_flags.get(\"completion.enable-postfix\"),\n+        add_call_parenthesis: world.feature_flags.get(\"completion.insertion.add-call-parenthesis\"),\n         add_call_argument_snippets: world\n-            .feature_flags()\n+            .feature_flags\n             .get(\"completion.insertion.add-argument-snippets\"),\n     };\n \n@@ -471,7 +469,7 @@ pub fn handle_signature_help(\n     let _p = profile(\"handle_signature_help\");\n     let position = params.try_conv_with(&world)?;\n     if let Some(call_info) = world.analysis().call_info(position)? {\n-        let concise = !world.analysis().feature_flags().get(\"call-info.full\");\n+        let concise = !world.feature_flags.get(\"call-info.full\");\n         let mut active_parameter = call_info.active_parameter.map(|it| it as i64);\n         if concise && call_info.signature.has_self_param {\n             active_parameter = active_parameter.map(|it| it.saturating_sub(1));"}, {"sha": "1ddc3c1a5e27fd5d886ac50c8a3cde994b91cc7d", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14094e44770559c13a1e8bdfcfb989d3bedd00d8/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=14094e44770559c13a1e8bdfcfb989d3bedd00d8", "patch": "@@ -13,15 +13,15 @@ use lsp_types::Url;\n use parking_lot::RwLock;\n use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckOptions, CheckWatcher};\n use ra_ide::{\n-    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FeatureFlags, FileId, LibraryData,\n-    SourceRootId,\n+    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData, SourceRootId,\n };\n use ra_project_model::{get_rustc_cfg_options, ProjectWorkspace};\n use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n \n use crate::{\n     diagnostics::{CheckFixes, DiagnosticCollection},\n+    feature_flags::FeatureFlags,\n     main_loop::pending_requests::{CompletedRequest, LatestRequests},\n     vfs_glob::{Glob, RustPackageFilterBuilder},\n     LspError, Result,\n@@ -45,6 +45,7 @@ pub struct Options {\n #[derive(Debug)]\n pub struct WorldState {\n     pub options: Options,\n+    pub feature_flags: Arc<FeatureFlags>,\n     //FIXME: this belongs to `LoopState` rather than to `WorldState`\n     pub roots_to_scan: usize,\n     pub roots: Vec<PathBuf>,\n@@ -60,6 +61,7 @@ pub struct WorldState {\n /// An immutable snapshot of the world's state at a point in time.\n pub struct WorldSnapshot {\n     pub options: Options,\n+    pub feature_flags: Arc<FeatureFlags>,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis: Analysis,\n     pub latest_requests: Arc<RwLock<LatestRequests>>,\n@@ -146,10 +148,11 @@ impl WorldState {\n                 CheckWatcher::dummy()\n             });\n \n-        let mut analysis_host = AnalysisHost::new(lru_capacity, feature_flags);\n+        let mut analysis_host = AnalysisHost::new(lru_capacity);\n         analysis_host.apply_change(change);\n         WorldState {\n             options,\n+            feature_flags: Arc::new(feature_flags),\n             roots_to_scan,\n             roots: folder_roots,\n             workspaces: Arc::new(workspaces),\n@@ -216,6 +219,7 @@ impl WorldState {\n     pub fn snapshot(&self) -> WorldSnapshot {\n         WorldSnapshot {\n             options: self.options.clone(),\n+            feature_flags: Arc::clone(&self.feature_flags),\n             workspaces: Arc::clone(&self.workspaces),\n             analysis: self.analysis_host.analysis(),\n             vfs: Arc::clone(&self.vfs),\n@@ -235,10 +239,6 @@ impl WorldState {\n     pub fn complete_request(&mut self, request: CompletedRequest) {\n         self.latest_requests.write().record(request)\n     }\n-\n-    pub fn feature_flags(&self) -> &FeatureFlags {\n-        self.analysis_host.feature_flags()\n-    }\n }\n \n impl WorldSnapshot {\n@@ -306,8 +306,4 @@ impl WorldSnapshot {\n         let path = self.vfs.read().file2path(VfsFile(file_id.0));\n         self.workspaces.iter().find_map(|ws| ws.workspace_root_for(&path))\n     }\n-\n-    pub fn feature_flags(&self) -> &FeatureFlags {\n-        self.analysis.feature_flags()\n-    }\n }"}]}