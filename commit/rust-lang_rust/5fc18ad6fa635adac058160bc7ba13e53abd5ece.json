{"sha": "5fc18ad6fa635adac058160bc7ba13e53abd5ece", "node_id": "C_kwDOAAsO6NoAKDVmYzE4YWQ2ZmE2MzVhZGFjMDU4MTYwYmM3YmExM2U1M2FiZDVlY2U", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-27T08:11:16Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-27T10:19:01Z"}, "message": "Lower generic arguments for GATs in associated type bindings", "tree": {"sha": "e7637b892614d790836782cb91e72e0d9827de97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7637b892614d790836782cb91e72e0d9827de97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fc18ad6fa635adac058160bc7ba13e53abd5ece", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmNaWxUACgkQ4laYqTBY\nYXHHqhAApbhrCjLxwKmmvlNslfpNcx2/h/aDhr5Z5qwme1eq3VdFkkUO6z5gb5kY\n9bV8HejPx53GqlWJxaJi8Qkm4u+gOThMfvBfNNzj/ZMJRVqPKye6DwYWjIBWhtSC\ntMQJIW2e9/8K6pk+42EtoAVRyI+ViuNQkgyOw75AaCA208HsiQh0MyNriUqe/Axd\nvWqabEUFl5ScG/btwT5CebhmrhUMKMzttQWvMX33dim8GYx0lk4BGh1hAtZ0LL29\nePSUwHrRW+Xcus89EQzQAH7PEi2PI+LJ1OArhkfyCyzkJRB80pbWjake42Ee2NPg\nSyY9Z2Mryq1LjIGrkZtRR5DCaIrTwxPIcgdfjVZT6wzkD1p9xLz9xn+L5Igus4LJ\naboCsATEnAK1xl/KSlPr91b5i7MnoEK2BMqwhjzxqeEhTdakOjZqJrH5NFNgRWN7\n2ur5cSzGZ7oSJvxCArFfgGKIuHpcvEltCuOHbBsTLprdnGxxV8Cf3cajAxaH3WwZ\nOv6pmqBJ3GlksaZEQOXXK3tuyznSRAzSrp1UfY0cFfXovo3WQUdx26QGUv/UjUVE\nbIROwIUnoPZhD7F47iAv1jBHXWaYbzKrRm+71Ob4BJbA9Rm5PmoKZwhb7m7vAa65\nsQvuP2hGJzS/6gzRx2L+5CNC/VNptG9bJP8chM7RGgJ/ZZK9WVg=\n=2aFA\n-----END PGP SIGNATURE-----", "payload": "tree e7637b892614d790836782cb91e72e0d9827de97\nparent 63cba43b485cd9b4821c31d089bcc73eecc59586\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1666858276 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1666865941 +0900\n\nLower generic arguments for GATs in associated type bindings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fc18ad6fa635adac058160bc7ba13e53abd5ece", "html_url": "https://github.com/rust-lang/rust/commit/5fc18ad6fa635adac058160bc7ba13e53abd5ece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fc18ad6fa635adac058160bc7ba13e53abd5ece/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63cba43b485cd9b4821c31d089bcc73eecc59586", "url": "https://api.github.com/repos/rust-lang/rust/commits/63cba43b485cd9b4821c31d089bcc73eecc59586", "html_url": "https://github.com/rust-lang/rust/commit/63cba43b485cd9b4821c31d089bcc73eecc59586"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "22a85cf154587fa79e05807f3196391255b6513e", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5fc18ad6fa635adac058160bc7ba13e53abd5ece/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fc18ad6fa635adac058160bc7ba13e53abd5ece/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=5fc18ad6fa635adac058160bc7ba13e53abd5ece", "patch": "@@ -808,7 +808,15 @@ impl<'a> TyLoweringContext<'a> {\n         // handle defaults. In expression or pattern path segments without\n         // explicitly specified type arguments, missing type arguments are inferred\n         // (i.e. defaults aren't used).\n-        if !infer_args || had_explicit_args {\n+        // Generic parameters for associated types are not supposed to have defaults, so we just\n+        // ignore them.\n+        let is_assoc_ty = if let GenericDefId::TypeAliasId(id) = def {\n+            let container = id.lookup(self.db.upcast()).container;\n+            matches!(container, ItemContainerId::TraitId(_))\n+        } else {\n+            false\n+        };\n+        if !is_assoc_ty && (!infer_args || had_explicit_args) {\n             let defaults = self.db.generic_defaults(def);\n             assert_eq!(total_len, defaults.len());\n             let parent_from = item_len - substs.len();\n@@ -997,9 +1005,28 @@ impl<'a> TyLoweringContext<'a> {\n                     None => return SmallVec::new(),\n                     Some(t) => t,\n                 };\n+                // FIXME: `substs_from_path_segment()` pushes `TyKind::Error` for every parent\n+                // generic params. It's inefficient to splice the `Substitution`s, so we may want\n+                // that method to optionally take parent `Substitution` as we already know them at\n+                // this point (`super_trait_ref.substitution`).\n+                let substitution = self.substs_from_path_segment(\n+                    // FIXME: This is hack. We shouldn't really build `PathSegment` directly.\n+                    PathSegment { name: &binding.name, args_and_bindings: binding.args.as_deref() },\n+                    Some(associated_ty.into()),\n+                    false, // this is not relevant\n+                    Some(super_trait_ref.self_type_parameter(Interner)),\n+                );\n+                let self_params = generics(self.db.upcast(), associated_ty.into()).len_self();\n+                let substitution = Substitution::from_iter(\n+                    Interner,\n+                    substitution\n+                        .iter(Interner)\n+                        .take(self_params)\n+                        .chain(super_trait_ref.substitution.iter(Interner)),\n+                );\n                 let projection_ty = ProjectionTy {\n                     associated_ty_id: to_assoc_type_id(associated_ty),\n-                    substitution: super_trait_ref.substitution,\n+                    substitution,\n                 };\n                 let mut preds: SmallVec<[_; 1]> = SmallVec::with_capacity(\n                     binding.type_ref.as_ref().map_or(0, |_| 1) + binding.bounds.len(),"}, {"sha": "7995f6446d07b5f56ab68dd5b2d2286a30009dd7", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5fc18ad6fa635adac058160bc7ba13e53abd5ece/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fc18ad6fa635adac058160bc7ba13e53abd5ece/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=5fc18ad6fa635adac058160bc7ba13e53abd5ece", "patch": "@@ -4083,3 +4083,40 @@ fn f<'a>(v: &dyn Trait<Assoc<i32> = &'a i32>) {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn gats_in_associated_type_binding() {\n+    check_infer_with_mismatches(\n+        r#\"\n+trait Trait {\n+    type Assoc<T>;\n+    fn get<U>(&self) -> Self::Assoc<U>;\n+}\n+\n+fn f<T>(t: T)\n+where\n+    T: Trait<Assoc<i32> = u32>,\n+    T: Trait<Assoc<isize> = usize>,\n+{\n+    let a = t.get::<i32>();\n+    let a = t.get::<isize>();\n+    let a = t.get::<()>();\n+}\n+\n+    \"#,\n+        expect![[r#\"\n+            48..52 'self': &Self\n+            84..85 't': T\n+            164..252 '{     ...>(); }': ()\n+            174..175 'a': u32\n+            178..179 't': T\n+            178..192 't.get::<i32>()': u32\n+            202..203 'a': usize\n+            206..207 't': T\n+            206..222 't.get:...ize>()': usize\n+            232..233 'a': Trait::Assoc<(), T>\n+            236..237 't': T\n+            236..249 't.get::<()>()': Trait::Assoc<(), T>\n+        \"#]],\n+    )\n+}"}]}