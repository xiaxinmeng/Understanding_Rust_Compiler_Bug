{"sha": "8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df", "node_id": "C_kwDOAAsO6NoAKDhiZGY1YzNkZTZjNmU0ZTAxZjdmNjI0MWNkMGYyYTYwNmM3NDg2ZGY", "commit": {"author": {"name": "Badel2", "email": "2badel2@gmail.com", "date": "2022-01-05T21:42:21Z"}, "committer": {"name": "Badel2", "email": "2badel2@gmail.com", "date": "2022-01-07T16:28:20Z"}, "message": "Implement panic::update_hook", "tree": {"sha": "795cf4e3727479f3f82c0ee6eba205b91d9fee6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/795cf4e3727479f3f82c0ee6eba205b91d9fee6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df", "html_url": "https://github.com/rust-lang/rust/commit/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/comments", "author": {"login": "Badel2", "id": 15879619, "node_id": "MDQ6VXNlcjE1ODc5NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/15879619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badel2", "html_url": "https://github.com/Badel2", "followers_url": "https://api.github.com/users/Badel2/followers", "following_url": "https://api.github.com/users/Badel2/following{/other_user}", "gists_url": "https://api.github.com/users/Badel2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badel2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badel2/subscriptions", "organizations_url": "https://api.github.com/users/Badel2/orgs", "repos_url": "https://api.github.com/users/Badel2/repos", "events_url": "https://api.github.com/users/Badel2/events{/privacy}", "received_events_url": "https://api.github.com/users/Badel2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Badel2", "id": 15879619, "node_id": "MDQ6VXNlcjE1ODc5NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/15879619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badel2", "html_url": "https://github.com/Badel2", "followers_url": "https://api.github.com/users/Badel2/followers", "following_url": "https://api.github.com/users/Badel2/following{/other_user}", "gists_url": "https://api.github.com/users/Badel2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badel2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badel2/subscriptions", "organizations_url": "https://api.github.com/users/Badel2/orgs", "repos_url": "https://api.github.com/users/Badel2/repos", "events_url": "https://api.github.com/users/Badel2/events{/privacy}", "received_events_url": "https://api.github.com/users/Badel2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e012a191d768adeda1ee36a99ef8b92d51920154", "url": "https://api.github.com/repos/rust-lang/rust/commits/e012a191d768adeda1ee36a99ef8b92d51920154", "html_url": "https://github.com/rust-lang/rust/commit/e012a191d768adeda1ee36a99ef8b92d51920154"}], "stats": {"total": 118, "additions": 102, "deletions": 16}, "files": [{"sha": "7b8eeb90b5a80ff7980c9ab8461c2e13b5ad2019", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df", "patch": "@@ -38,6 +38,7 @@\n #![feature(const_trait_impl)]\n #![feature(const_str_from_utf8)]\n #![feature(nonnull_slice_from_raw_parts)]\n+#![feature(panic_update_hook)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "a02f7b1f2774b1fa956708d574e87c5c3e490395", "filename": "library/alloc/tests/slice.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/library%2Falloc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/library%2Falloc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fslice.rs?ref=8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df", "patch": "@@ -1783,12 +1783,13 @@ thread_local!(static SILENCE_PANIC: Cell<bool> = Cell::new(false));\n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)] // no threads\n fn panic_safe() {\n-    let prev = panic::take_hook();\n-    panic::set_hook(Box::new(move |info| {\n-        if !SILENCE_PANIC.with(|s| s.get()) {\n-            prev(info);\n-        }\n-    }));\n+    panic::update_hook(|prev| {\n+        Box::new(move |info| {\n+            if !SILENCE_PANIC.with(|s| s.get()) {\n+                prev(info);\n+            }\n+        })\n+    });\n \n     let mut rng = thread_rng();\n "}, {"sha": "5ff7bbf6f96f16006f3dc021dc59d26408c24844", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df", "patch": "@@ -310,16 +310,17 @@ impl Bridge<'_> {\n         // NB. the server can't do this because it may use a different libstd.\n         static HIDE_PANICS_DURING_EXPANSION: Once = Once::new();\n         HIDE_PANICS_DURING_EXPANSION.call_once(|| {\n-            let prev = panic::take_hook();\n-            panic::set_hook(Box::new(move |info| {\n-                let show = BridgeState::with(|state| match state {\n-                    BridgeState::NotConnected => true,\n-                    BridgeState::Connected(_) | BridgeState::InUse => force_show_panics,\n-                });\n-                if show {\n-                    prev(info)\n-                }\n-            }));\n+            panic::update_hook(|prev| {\n+                Box::new(move |info| {\n+                    let show = BridgeState::with(|state| match state {\n+                        BridgeState::NotConnected => true,\n+                        BridgeState::Connected(_) | BridgeState::InUse => force_show_panics,\n+                    });\n+                    if show {\n+                        prev(info)\n+                    }\n+                })\n+            });\n         });\n \n         BRIDGE_STATE.with(|state| state.set(BridgeState::Connected(self), f))"}, {"sha": "c5afca6d56a2d29a33255a1330dc74b579541284", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df", "patch": "@@ -30,6 +30,7 @@\n #![feature(restricted_std)]\n #![feature(rustc_attrs)]\n #![feature(min_specialization)]\n+#![feature(panic_update_hook)]\n #![recursion_limit = \"256\"]\n \n #[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]"}, {"sha": "02ecf2e3e822e091a041f4c6608e190323725b1e", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df", "patch": "@@ -36,6 +36,9 @@ pub use core::panic::panic_2021;\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub use crate::panicking::{set_hook, take_hook};\n \n+#[unstable(feature = \"panic_update_hook\", issue = \"92649\")]\n+pub use crate::panicking::update_hook;\n+\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub use core::panic::{Location, PanicInfo};\n "}, {"sha": "cf970dccfc9401ccc3f5d13140548e98cc2473f4", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df", "patch": "@@ -180,6 +180,69 @@ pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n     }\n }\n \n+/// Atomic combination of [`take_hook`] + [`set_hook`].\n+///\n+/// [`take_hook`]: ./fn.take_hook.html\n+/// [`set_hook`]: ./fn.set_hook.html\n+///\n+/// # Panics\n+///\n+/// Panics if called from a panicking thread.\n+///\n+/// Panics if the provided closure calls any of the functions [`panic::take_hook`],\n+/// [`panic::set_hook`], or [`panic::update_hook`].\n+///\n+/// Note: if the provided closure panics, the panic will not be able to be handled, resulting in a\n+/// double panic that aborts the process with a generic error message.\n+///\n+/// [`panic::take_hook`]: ./fn.take_hook.html\n+/// [`panic::set_hook`]: ./fn.set_hook.html\n+/// [`panic::update_hook`]: ./fn.update_hook.html\n+///\n+/// # Examples\n+///\n+/// The following will print the custom message, and then the normal output of panic.\n+///\n+/// ```should_panic\n+/// #![feature(panic_update_hook)]\n+/// use std::panic;\n+///\n+/// panic::update_hook(|prev| {\n+///     Box::new(move |panic_info| {\n+///         println!(\"Print custom message and execute panic handler as usual\");\n+///         prev(panic_info);\n+///     })\n+/// });\n+///\n+/// panic!(\"Custom and then normal\");\n+/// ```\n+#[unstable(feature = \"panic_update_hook\", issue = \"92649\")]\n+pub fn update_hook<F>(hook_fn: F)\n+where\n+    F: FnOnce(\n+        Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>,\n+    ) -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>,\n+{\n+    if thread::panicking() {\n+        panic!(\"cannot modify the panic hook from a panicking thread\");\n+    }\n+\n+    unsafe {\n+        let guard = HOOK_LOCK.write();\n+        let old_hook = HOOK;\n+        HOOK = Hook::Default;\n+\n+        let hook_for_fn = match old_hook {\n+            Hook::Default => Box::new(default_hook),\n+            Hook::Custom(ptr) => Box::from_raw(ptr),\n+        };\n+\n+        let hook = hook_fn(hook_for_fn);\n+        HOOK = Hook::Custom(Box::into_raw(hook));\n+        drop(guard);\n+    }\n+}\n+\n fn default_hook(info: &PanicInfo<'_>) {\n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled."}, {"sha": "8c95f1b8b78403966618437b806b20f4764ada01", "filename": "src/test/ui/panics/panic-while-updating-hook.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/src%2Ftest%2Fui%2Fpanics%2Fpanic-while-updating-hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df/src%2Ftest%2Fui%2Fpanics%2Fpanic-while-updating-hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-while-updating-hook.rs?ref=8bdf5c3de6c6e4e01f7f6241cd0f2a606c7486df", "patch": "@@ -0,0 +1,16 @@\n+// run-fail\n+// error-pattern: panicked while processing panic\n+#![allow(stable_features)]\n+\n+// ignore-emscripten no threads support\n+\n+#![feature(std_panic)]\n+#![feature(panic_update_hook)]\n+\n+use std::panic;\n+\n+fn main() {\n+    panic::update_hook(|_prev| {\n+        panic!(\"inside update_hook\");\n+    })\n+}"}]}