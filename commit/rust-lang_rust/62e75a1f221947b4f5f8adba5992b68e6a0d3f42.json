{"sha": "62e75a1f221947b4f5f8adba5992b68e6a0d3f42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZTc1YTFmMjIxOTQ3YjRmNWY4YWRiYTU5OTJiNjhlNmEwZDNmNDI=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-07-24T00:41:05Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-07-24T00:41:05Z"}, "message": "Fix ICE while building MIR with type errors\n\nFixes #74047.", "tree": {"sha": "d335a2015159e88535463bd00e6da8b02c75937a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d335a2015159e88535463bd00e6da8b02c75937a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62e75a1f221947b4f5f8adba5992b68e6a0d3f42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62e75a1f221947b4f5f8adba5992b68e6a0d3f42", "html_url": "https://github.com/rust-lang/rust/commit/62e75a1f221947b4f5f8adba5992b68e6a0d3f42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62e75a1f221947b4f5f8adba5992b68e6a0d3f42/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad7bc3f428300aee6764f6e23527e19eb235e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad7bc3f428300aee6764f6e23527e19eb235e81", "html_url": "https://github.com/rust-lang/rust/commit/8ad7bc3f428300aee6764f6e23527e19eb235e81"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "a5c87bc963f49bd84232eccadbd88c8789c6be01", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62e75a1f221947b4f5f8adba5992b68e6a0d3f42/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62e75a1f221947b4f5f8adba5992b68e6a0d3f42/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=62e75a1f221947b4f5f8adba5992b68e6a0d3f42", "patch": "@@ -509,11 +509,6 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n     fn lower_pattern_unadjusted(&mut self, pat: &'tcx hir::Pat<'tcx>) -> Pat<'tcx> {\n         let mut ty = self.typeck_results.node_type(pat.hir_id);\n \n-        if let ty::Error(_) = ty.kind {\n-            // Avoid ICEs (e.g., #50577 and #50585).\n-            return Pat { span: pat.span, ty, kind: Box::new(PatKind::Wild) };\n-        }\n-\n         let kind = match pat.kind {\n             hir::PatKind::Wild => PatKind::Wild,\n "}, {"sha": "2e4f3e675c3b1bcd6b50bd44c70dbf64044faf2e", "filename": "src/test/ui/issue-74047.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/62e75a1f221947b4f5f8adba5992b68e6a0d3f42/src%2Ftest%2Fui%2Fissue-74047.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62e75a1f221947b4f5f8adba5992b68e6a0d3f42/src%2Ftest%2Fui%2Fissue-74047.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-74047.rs?ref=62e75a1f221947b4f5f8adba5992b68e6a0d3f42", "patch": "@@ -0,0 +1,17 @@\n+// edition:2018\n+\n+use std::convert::{TryFrom, TryInto};\n+use std::io;\n+\n+pub struct MyStream;\n+pub struct OtherStream;\n+\n+pub async fn connect() -> io::Result<MyStream> {\n+    let stream: MyStream = OtherStream.try_into()?;\n+    Ok(stream)\n+}\n+\n+impl TryFrom<OtherStream> for MyStream {}\n+//~^ ERROR: missing\n+\n+fn main() {}"}, {"sha": "6f477c77cedbd406f3125d8e09bf8532c20ffc4d", "filename": "src/test/ui/issue-74047.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62e75a1f221947b4f5f8adba5992b68e6a0d3f42/src%2Ftest%2Fui%2Fissue-74047.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62e75a1f221947b4f5f8adba5992b68e6a0d3f42/src%2Ftest%2Fui%2Fissue-74047.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-74047.stderr?ref=62e75a1f221947b4f5f8adba5992b68e6a0d3f42", "patch": "@@ -0,0 +1,12 @@\n+error[E0046]: not all trait items implemented, missing: `Error`, `try_from`\n+  --> $DIR/issue-74047.rs:14:1\n+   |\n+LL | impl TryFrom<OtherStream> for MyStream {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Error`, `try_from` in implementation\n+   |\n+   = help: implement the missing item: `type Error = Type;`\n+   = help: implement the missing item: `fn try_from(_: T) -> std::result::Result<Self, <Self as std::convert::TryFrom<T>>::Error> { todo!() }`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0046`."}]}