{"sha": "9fdaa948c03a33e703eb5830dbed82ee2afe5101", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZGFhOTQ4YzAzYTMzZTcwM2ViNTgzMGRiZWQ4MmVlMmFmZTUxMDE=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-03T05:38:30Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-04T19:07:51Z"}, "message": "move RenameList to mtwt, add new_renames abstraction", "tree": {"sha": "7afe9dce992f6e05534894182ea0b6cd7e55802b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7afe9dce992f6e05534894182ea0b6cd7e55802b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fdaa948c03a33e703eb5830dbed82ee2afe5101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fdaa948c03a33e703eb5830dbed82ee2afe5101", "html_url": "https://github.com/rust-lang/rust/commit/9fdaa948c03a33e703eb5830dbed82ee2afe5101", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fdaa948c03a33e703eb5830dbed82ee2afe5101/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f126eacd115415b0814ceb4a1c71380a0b2eb752", "url": "https://api.github.com/repos/rust-lang/rust/commits/f126eacd115415b0814ceb4a1c71380a0b2eb752", "html_url": "https://github.com/rust-lang/rust/commit/f126eacd115415b0814ceb4a1c71380a0b2eb752"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "cf69277594fd5380631d8f9239a9df34ca0fb414", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fdaa948c03a33e703eb5830dbed82ee2afe5101/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdaa948c03a33e703eb5830dbed82ee2afe5101/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=9fdaa948c03a33e703eb5830dbed82ee2afe5101", "patch": "@@ -19,6 +19,7 @@ use parse::parser;\n use parse::token;\n use parse::token::{InternedString, intern, str_to_ident};\n use util::small_vector::SmallVector;\n+use ext::mtwt;\n \n use std::collections::HashMap;\n use std::gc::{Gc, GC};\n@@ -273,7 +274,7 @@ pub struct BlockInfo {\n     // should macros escape from this scope?\n     pub macros_escape: bool,\n     // what are the pending renames?\n-    pub pending_renames: RenameList,\n+    pub pending_renames: mtwt::RenameList,\n }\n \n impl BlockInfo {\n@@ -285,9 +286,6 @@ impl BlockInfo {\n     }\n }\n \n-// a list of ident->name renamings\n-pub type RenameList = Vec<(ast::Ident, Name)>;\n-\n // The base map of methods for expanding syntax extension\n // AST nodes into full ASTs\n pub fn syntax_expander_table() -> SyntaxEnv {"}, {"sha": "11152a6f1da8d5ae2e640a83391d125e0cbfae0c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9fdaa948c03a33e703eb5830dbed82ee2afe5101/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdaa948c03a33e703eb5830dbed82ee2afe5101/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9fdaa948c03a33e703eb5830dbed82ee2afe5101", "patch": "@@ -844,17 +844,14 @@ fn expand_pat(p: Gc<ast::Pat>, fld: &mut MacroExpander) -> Gc<ast::Pat> {\n // to every identifier, including both bindings and varrefs\n // (and lots of things that will turn out to be neither)\n pub struct IdentRenamer<'a> {\n-    renames: &'a mut RenameList,\n+    renames: &'a mtwt::RenameList,\n }\n \n impl<'a> Folder for IdentRenamer<'a> {\n     fn fold_ident(&mut self, id: Ident) -> Ident {\n-        let new_ctxt = self.renames.iter().fold(id.ctxt, |ctxt, &(from, to)| {\n-            mtwt::new_rename(from, to, ctxt)\n-        });\n         Ident {\n             name: id.name,\n-            ctxt: new_ctxt,\n+            ctxt: mtwt::new_renames(self.renames, id.ctxt),\n         }\n     }\n }"}, {"sha": "f40b251ca72b6b7473490db11daf9676bfb5e209", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9fdaa948c03a33e703eb5830dbed82ee2afe5101/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fdaa948c03a33e703eb5830dbed82ee2afe5101/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=9fdaa948c03a33e703eb5830dbed82ee2afe5101", "patch": "@@ -54,38 +54,51 @@ pub enum SyntaxContext_ {\n     IllegalCtxt\n }\n \n+/// A list of ident->name renamings\n+pub type RenameList = Vec<(Ident, Name)>;\n+\n /// Extend a syntax context with a given mark\n-pub fn new_mark(m: Mrk, tail: SyntaxContext) -> SyntaxContext {\n-    with_sctable(|table| new_mark_internal(m, tail, table))\n+pub fn new_mark(m: Mrk, ctxt: SyntaxContext) -> SyntaxContext {\n+    with_sctable(|table| new_mark_internal(m, ctxt, table))\n }\n \n-// Extend a syntax context with a given mark and table\n-fn new_mark_internal(m: Mrk, tail: SyntaxContext, table: &SCTable) -> SyntaxContext {\n-    let key = (tail, m);\n+// Extend a syntax context with a given mark and sctable (explicit memoization)\n+fn new_mark_internal(m: Mrk, ctxt: SyntaxContext, table: &SCTable) -> SyntaxContext {\n+    let key = (ctxt, m);\n     let new_ctxt = |_: &(SyntaxContext, Mrk)|\n-                   idx_push(&mut *table.table.borrow_mut(), Mark(m, tail));\n+                   idx_push(&mut *table.table.borrow_mut(), Mark(m, ctxt));\n \n     *table.mark_memo.borrow_mut().find_or_insert_with(key, new_ctxt)\n }\n \n /// Extend a syntax context with a given rename\n pub fn new_rename(id: Ident, to:Name,\n-                  tail: SyntaxContext) -> SyntaxContext {\n-    with_sctable(|table| new_rename_internal(id, to, tail, table))\n+                  ctxt: SyntaxContext) -> SyntaxContext {\n+    with_sctable(|table| new_rename_internal(id, to, ctxt, table))\n }\n \n-// Extend a syntax context with a given rename and sctable\n+// Extend a syntax context with a given rename and sctable (explicit memoization)\n fn new_rename_internal(id: Ident,\n                        to: Name,\n-                       tail: SyntaxContext,\n+                       ctxt: SyntaxContext,\n                        table: &SCTable) -> SyntaxContext {\n-    let key = (tail,id,to);\n+    let key = (ctxt,id,to);\n     let new_ctxt = |_: &(SyntaxContext, Ident, Mrk)|\n-                   idx_push(&mut *table.table.borrow_mut(), Rename(id, to, tail));\n+                   idx_push(&mut *table.table.borrow_mut(), Rename(id, to, ctxt));\n \n     *table.rename_memo.borrow_mut().find_or_insert_with(key, new_ctxt)\n }\n \n+/// Apply a list of renamings to a context\n+// if these rename lists get long, it would make sense\n+// to consider memoizing this fold. This may come up\n+// when we add hygiene to item names.\n+pub fn new_renames(renames: &RenameList, ctxt: SyntaxContext) -> SyntaxContext {\n+    renames.iter().fold(ctxt, |ctxt, &(from, to)| {\n+            new_rename(from, to, ctxt)\n+        })\n+}\n+\n /// Fetch the SCTable from TLS, create one if it doesn't yet exist.\n pub fn with_sctable<T>(op: |&SCTable| -> T) -> T {\n     local_data_key!(sctable_key: Rc<SCTable>)\n@@ -263,9 +276,9 @@ fn xor_push(marks: &mut Vec<Mrk>, mark: Mrk) {\n \n #[cfg(test)]\n mod tests {\n-    use ast::*;\n+    use ast::{EMPTY_CTXT, Ident, Mrk, Name, SyntaxContext};\n     use super::{resolve, xor_push, new_mark_internal, new_sctable_internal};\n-    use super::{new_rename_internal, marksof_internal, resolve_internal};\n+    use super::{new_rename_internal, new_renames, marksof_internal, resolve_internal};\n     use super::{SCTable, EmptyCtxt, Mark, Rename, IllegalCtxt};\n     use std::collections::HashMap;\n \n@@ -480,4 +493,13 @@ mod tests {\n         resolve_internal(id(30,EMPTY_CTXT),&mut t, &mut rt);\n         assert_eq!(rt.len(),2);\n     }\n+\n+    #[test]\n+    fn new_resolves_test() {\n+        let renames = vec!((Ident{name:23,ctxt:EMPTY_CTXT},24),\n+                           (Ident{name:29,ctxt:EMPTY_CTXT},29));\n+        let new_ctxt1 = new_renames(&renames,EMPTY_CTXT);\n+        assert_eq!(resolve(Ident{name:23,ctxt:new_ctxt1}),24);\n+        assert_eq!(resolve(Ident{name:29,ctxt:new_ctxt1}),29);\n+    }\n }"}]}