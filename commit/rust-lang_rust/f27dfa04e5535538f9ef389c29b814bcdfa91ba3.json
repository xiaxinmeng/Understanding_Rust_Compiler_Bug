{"sha": "f27dfa04e5535538f9ef389c29b814bcdfa91ba3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyN2RmYTA0ZTU1MzU1MzhmOWVmMzg5YzI5YjgxNGJjZGZhOTFiYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-24T04:46:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-24T04:46:03Z"}, "message": "auto merge of #10040 : thestinger/rust/frame_address, r=alexcrichton\n\nCloses #10001", "tree": {"sha": "c76daf4c1cb2eff63fce020fde783e071d3da173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c76daf4c1cb2eff63fce020fde783e071d3da173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f27dfa04e5535538f9ef389c29b814bcdfa91ba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f27dfa04e5535538f9ef389c29b814bcdfa91ba3", "html_url": "https://github.com/rust-lang/rust/commit/f27dfa04e5535538f9ef389c29b814bcdfa91ba3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f27dfa04e5535538f9ef389c29b814bcdfa91ba3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2428b791c5a4074ca712ab3b145ee05c2d67ead", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2428b791c5a4074ca712ab3b145ee05c2d67ead", "html_url": "https://github.com/rust-lang/rust/commit/e2428b791c5a4074ca712ab3b145ee05c2d67ead"}, {"sha": "ce54c34f02761f32e78473224bca28fa3b9ea5ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce54c34f02761f32e78473224bca28fa3b9ea5ed", "html_url": "https://github.com/rust-lang/rust/commit/ce54c34f02761f32e78473224bca28fa3b9ea5ed"}], "stats": {"total": 50, "additions": 2, "deletions": 48}, "files": [{"sha": "f580683cd4e9ca02a655386b2bdb0f98cde78350", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f27dfa04e5535538f9ef389c29b814bcdfa91ba3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f27dfa04e5535538f9ef389c29b814bcdfa91ba3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=f27dfa04e5535538f9ef389c29b814bcdfa91ba3", "patch": "@@ -10,27 +10,23 @@\n \n #[allow(non_uppercase_pattern_statics)];\n \n-use back::{abi};\n+use back::abi;\n use lib::llvm::{SequentiallyConsistent, Acquire, Release, Xchg};\n use lib::llvm::{ValueRef, Pointer, Array, Struct};\n use lib;\n use middle::trans::base::*;\n use middle::trans::build::*;\n-use middle::trans::callee::*;\n use middle::trans::common::*;\n use middle::trans::datum::*;\n use middle::trans::type_of::*;\n use middle::trans::type_of;\n-use middle::trans::expr::Ignore;\n use middle::trans::machine;\n use middle::trans::glue;\n-use middle::ty::FnSig;\n use middle::ty;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::attr;\n-use syntax::opt_vec;\n-use util::ppaux::{ty_to_str};\n+use util::ppaux::ty_to_str;\n use middle::trans::machine::llsize_of;\n use middle::trans::type_::Type;\n \n@@ -387,33 +383,6 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n                                         abi::tydesc_field_visit_glue, None);\n             RetVoid(bcx);\n         }\n-        \"frame_address\" => {\n-            let frameaddress = ccx.intrinsics.get_copy(& &\"llvm.frameaddress\");\n-            let frameaddress_val = Call(bcx, frameaddress, [C_i32(0i32)], []);\n-            let star_u8 = ty::mk_imm_ptr(\n-                bcx.tcx(),\n-                ty::mk_mach_uint(ast::ty_u8));\n-            let fty = ty::mk_closure(bcx.tcx(), ty::ClosureTy {\n-                purity: ast::impure_fn,\n-                sigil: ast::BorrowedSigil,\n-                onceness: ast::Many,\n-                region: ty::re_bound(ty::br_anon(0)),\n-                bounds: ty::EmptyBuiltinBounds(),\n-                sig: FnSig {\n-                    bound_lifetime_names: opt_vec::Empty,\n-                    inputs: ~[ star_u8 ],\n-                    output: ty::mk_nil()\n-                }\n-            });\n-            let datum = Datum {val: get_param(decl, first_real_arg),\n-                               mode: ByRef(ZeroMem), ty: fty};\n-            let arg_vals = ~[frameaddress_val];\n-            bcx = trans_call_inner(\n-                bcx, None, fty, ty::mk_nil(),\n-                |bcx| Callee {bcx: bcx, data: Closure(datum)},\n-                ArgVals(arg_vals), Some(Ignore), DontAutorefArg).bcx;\n-            RetVoid(bcx);\n-        }\n         \"morestack_addr\" => {\n             // XXX This is a hack to grab the address of this particular\n             // native function. There should be a general in-language"}, {"sha": "50ab7825de63c0aa865dcf7a11455f2f40863de8", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f27dfa04e5535538f9ef389c29b814bcdfa91ba3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f27dfa04e5535538f9ef389c29b814bcdfa91ba3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=f27dfa04e5535538f9ef389c29b814bcdfa91ba3", "patch": "@@ -3645,21 +3645,6 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n               });\n               (0, ~[ td_ptr, visitor_object_ty ], ty::mk_nil())\n             }\n-            \"frame_address\" => {\n-              let fty = ty::mk_closure(ccx.tcx, ty::ClosureTy {\n-                  purity: ast::impure_fn,\n-                  sigil: ast::BorrowedSigil,\n-                  onceness: ast::Many,\n-                  region: ty::re_bound(ty::br_anon(0)),\n-                  bounds: ty::EmptyBuiltinBounds(),\n-                  sig: ty::FnSig {\n-                      bound_lifetime_names: opt_vec::Empty,\n-                      inputs: ~[ty::mk_imm_ptr(ccx.tcx, ty::mk_mach_uint(ast::ty_u8))],\n-                      output: ty::mk_nil()\n-                  }\n-              });\n-              (0u, ~[fty], ty::mk_nil())\n-            }\n             \"morestack_addr\" => {\n               (0u, ~[], ty::mk_nil_ptr(ccx.tcx))\n             }"}]}