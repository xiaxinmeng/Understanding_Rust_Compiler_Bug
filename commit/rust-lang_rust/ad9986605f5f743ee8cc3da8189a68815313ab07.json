{"sha": "ad9986605f5f743ee8cc3da8189a68815313ab07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkOTk4NjYwNWY1Zjc0M2VlOGNjM2RhODE4OWE2ODgxNTMxM2FiMDc=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-10-01T21:03:48Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-10-01T21:03:48Z"}, "message": "fix handling of Self", "tree": {"sha": "16e57c433ed758f198e1616492a7ec16a93ffa14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16e57c433ed758f198e1616492a7ec16a93ffa14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad9986605f5f743ee8cc3da8189a68815313ab07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad9986605f5f743ee8cc3da8189a68815313ab07", "html_url": "https://github.com/rust-lang/rust/commit/ad9986605f5f743ee8cc3da8189a68815313ab07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad9986605f5f743ee8cc3da8189a68815313ab07/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "622a78cd54a090f3f53f3a0f6872073245c80bc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/622a78cd54a090f3f53f3a0f6872073245c80bc5", "html_url": "https://github.com/rust-lang/rust/commit/622a78cd54a090f3f53f3a0f6872073245c80bc5"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "3c3c539501198bbc45f2b6c725e3acd8dda1a93f", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad9986605f5f743ee8cc3da8189a68815313ab07/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad9986605f5f743ee8cc3da8189a68815313ab07/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ad9986605f5f743ee8cc3da8189a68815313ab07", "patch": "@@ -794,8 +794,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     let generics = self.tcx.generics_of(did);\n                     // Account for the case where `did` corresponds to `Self`, which doesn't have\n                     // the expected type argument.\n-                    if generics.types.len() > 0 {\n-                        let type_param = generics.type_param(param, self.tcx);\n+                    if let Some(type_param) = generics.type_param(param, self.tcx) {\n                         let hir = &self.tcx.hir;\n                         hir.as_local_node_id(type_param.def_id).map(|id| {\n                             // Get the `hir::TyParam` to verify wether it already has any bounds."}, {"sha": "46d2f65f34e63a9b16c10cbe609c19eafe3c3bc4", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad9986605f5f743ee8cc3da8189a68815313ab07/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad9986605f5f743ee8cc3da8189a68815313ab07/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ad9986605f5f743ee8cc3da8189a68815313ab07", "patch": "@@ -755,11 +755,19 @@ impl<'a, 'gcx, 'tcx> Generics {\n         }\n     }\n \n+    /// Returns the `TypeParameterDef` associated with this `ParamTy`, or `None`\n+    /// if `param` is `self`.\n     pub fn type_param(&'tcx self,\n                       param: &ParamTy,\n-                      tcx: TyCtxt<'a, 'gcx, 'tcx>) -> &TypeParameterDef {\n+                      tcx: TyCtxt<'a, 'gcx, 'tcx>)\n+                      -> Option<&TypeParameterDef> {\n         if let Some(idx) = param.idx.checked_sub(self.parent_count() as u32) {\n-            &self.types[idx as usize - self.has_self as usize - self.regions.len()]\n+            let type_param_start = (self.has_self as usize) + self.regions.len();\n+            if let Some(idx) = (idx as usize).checked_sub(type_param_start) {\n+                Some(&self.types[idx])\n+            } else {\n+                None\n+            }\n         } else {\n             tcx.generics_of(self.parent.expect(\"parent_count>0 but no parent?\"))\n                 .type_param(param, tcx)"}, {"sha": "e4abe5ee6151b979a8c8e9b94e44bb8b5cca54e0", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad9986605f5f743ee8cc3da8189a68815313ab07/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad9986605f5f743ee8cc3da8189a68815313ab07/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=ad9986605f5f743ee8cc3da8189a68815313ab07", "patch": "@@ -519,7 +519,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 } else if let Some(&ty::TyS {\n                     sty: ty::TypeVariants::TyParam(ref pt), ..\n                 }) = k.as_type() {\n-                    !impl_generics.type_param(pt, self).pure_wrt_drop\n+                    !impl_generics.type_param(pt, self)\n+                        .expect(\"drop impl param doesn't have a ParameterDef?\")\n+                        .pure_wrt_drop\n                 } else {\n                     // not a type or region param - this should be reported\n                     // as an error."}]}