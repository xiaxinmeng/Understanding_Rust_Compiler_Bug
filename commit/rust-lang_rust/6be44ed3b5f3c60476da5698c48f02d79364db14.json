{"sha": "6be44ed3b5f3c60476da5698c48f02d79364db14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZTQ0ZWQzYjVmM2M2MDQ3NmRhNTY5OGM0OGYwMmQ3OTM2NGRiMTQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-15T02:02:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-15T02:02:48Z"}, "message": "Rollup merge of #78966 - tmiasko:inline-never, r=oli-obk\n\nNever inline C variadics, cold functions, functions with incompatible attributes ...\n\n... and fix generator inlining.\n\nCloses #67863.\nCloses #78859.", "tree": {"sha": "ff659efed0af1fb17d9f8874b45e9487e411e382", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff659efed0af1fb17d9f8874b45e9487e411e382"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6be44ed3b5f3c60476da5698c48f02d79364db14", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfsIxICRBK7hj4Ov3rIwAAdHIIAJK4pvAFsv4wpRfNiQ2l9WWI\nf01o3fmKKY8RgibQqXIxkj2RacUzCZkHeB31X6de9E14oCTCemrSYSAql8SeQOzt\nWZBkc3s3GrEAzddzxzyjWogkR1kckC24F5/EwgCOIGNp7BP26xtkrrjN6nBG/sJE\nn1Fmk73Wd+//WjktSmUcqIeK9mqMwrWOVatrumDfpHpmtLiusXy/0k15O9us3a6B\nqkz72r/UQx5xgGS+Wt5rfH2s3+nyWJi42z6juJzJsEuZDS9KIZqz6cfSTG7u2onp\n5jRzqGu4R6GT/LkzCST3mx8qSaVYn8dsBZAgtnPv+17TfOVbLWW04ILgTbeNm3k=\n=pzd9\n-----END PGP SIGNATURE-----\n", "payload": "tree ff659efed0af1fb17d9f8874b45e9487e411e382\nparent 335a2554f94946a483c409199bb69fb5862b6f94\nparent 2a010dd3404256ea774e5338ad1952d09ab2cf03\nauthor Dylan DPC <dylan.dpc@gmail.com> 1605405768 +0100\ncommitter GitHub <noreply@github.com> 1605405768 +0100\n\nRollup merge of #78966 - tmiasko:inline-never, r=oli-obk\n\nNever inline C variadics, cold functions, functions with incompatible attributes ...\n\n... and fix generator inlining.\n\nCloses #67863.\nCloses #78859.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6be44ed3b5f3c60476da5698c48f02d79364db14", "html_url": "https://github.com/rust-lang/rust/commit/6be44ed3b5f3c60476da5698c48f02d79364db14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6be44ed3b5f3c60476da5698c48f02d79364db14/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "335a2554f94946a483c409199bb69fb5862b6f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/335a2554f94946a483c409199bb69fb5862b6f94", "html_url": "https://github.com/rust-lang/rust/commit/335a2554f94946a483c409199bb69fb5862b6f94"}, {"sha": "2a010dd3404256ea774e5338ad1952d09ab2cf03", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a010dd3404256ea774e5338ad1952d09ab2cf03", "html_url": "https://github.com/rust-lang/rust/commit/2a010dd3404256ea774e5338ad1952d09ab2cf03"}], "stats": {"total": 299, "additions": 238, "deletions": 61}, "files": [{"sha": "aae98f5b6d8d691a1091b95814568e5f875cb06d", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6be44ed3b5f3c60476da5698c48f02d79364db14/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be44ed3b5f3c60476da5698c48f02d79364db14/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=6be44ed3b5f3c60476da5698c48f02d79364db14", "patch": "@@ -7,6 +7,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n+use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_span::{hygiene::ExpnKind, ExpnData, Span};\n use rustc_target::spec::abi::Abi;\n@@ -28,6 +29,7 @@ pub struct Inline;\n #[derive(Copy, Clone, Debug)]\n struct CallSite<'tcx> {\n     callee: Instance<'tcx>,\n+    fn_sig: ty::PolyFnSig<'tcx>,\n     block: BasicBlock,\n     target: Option<BasicBlock>,\n     source_info: SourceInfo,\n@@ -173,22 +175,23 @@ impl Inliner<'tcx> {\n \n         // Only consider direct calls to functions\n         let terminator = bb_data.terminator();\n-        if let TerminatorKind::Call { func: ref op, ref destination, .. } = terminator.kind {\n-            if let ty::FnDef(callee_def_id, substs) = *op.ty(caller_body, self.tcx).kind() {\n-                // To resolve an instance its substs have to be fully normalized, so\n-                // we do this here.\n-                let normalized_substs = self.tcx.normalize_erasing_regions(self.param_env, substs);\n+        if let TerminatorKind::Call { ref func, ref destination, .. } = terminator.kind {\n+            let func_ty = func.ty(caller_body, self.tcx);\n+            if let ty::FnDef(def_id, substs) = *func_ty.kind() {\n+                // To resolve an instance its substs have to be fully normalized.\n+                let substs = self.tcx.normalize_erasing_regions(self.param_env, substs);\n                 let callee =\n-                    Instance::resolve(self.tcx, self.param_env, callee_def_id, normalized_substs)\n-                        .ok()\n-                        .flatten()?;\n+                    Instance::resolve(self.tcx, self.param_env, def_id, substs).ok().flatten()?;\n \n                 if let InstanceDef::Virtual(..) | InstanceDef::Intrinsic(_) = callee.def {\n                     return None;\n                 }\n \n+                let fn_sig = self.tcx.fn_sig(def_id).subst(self.tcx, substs);\n+\n                 return Some(CallSite {\n                     callee,\n+                    fn_sig,\n                     block: bb,\n                     target: destination.map(|(_, target)| target),\n                     source_info: terminator.source_info,\n@@ -203,9 +206,8 @@ impl Inliner<'tcx> {\n         debug!(\"should_inline({:?})\", callsite);\n         let tcx = self.tcx;\n \n-        // Cannot inline generators which haven't been transformed yet\n-        if callee_body.yield_ty.is_some() {\n-            debug!(\"    yield ty present - not inlining\");\n+        if callsite.fn_sig.c_variadic() {\n+            debug!(\"callee is variadic - not inlining\");\n             return false;\n         }\n \n@@ -218,11 +220,7 @@ impl Inliner<'tcx> {\n             return false;\n         }\n \n-        let self_no_sanitize =\n-            self.codegen_fn_attrs.no_sanitize & self.tcx.sess.opts.debugging_opts.sanitizer;\n-        let callee_no_sanitize =\n-            codegen_fn_attrs.no_sanitize & self.tcx.sess.opts.debugging_opts.sanitizer;\n-        if self_no_sanitize != callee_no_sanitize {\n+        if self.codegen_fn_attrs.no_sanitize != codegen_fn_attrs.no_sanitize {\n             debug!(\"`callee has incompatible no_sanitize attribute - not inlining\");\n             return false;\n         }\n@@ -256,9 +254,9 @@ impl Inliner<'tcx> {\n             self.tcx.sess.opts.debugging_opts.inline_mir_threshold\n         };\n \n-        // Significantly lower the threshold for inlining cold functions\n         if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::COLD) {\n-            threshold /= 5;\n+            debug!(\"#[cold] present - not inlining\");\n+            return false;\n         }\n \n         // Give a bonus functions with a small number of blocks,\n@@ -447,7 +445,7 @@ impl Inliner<'tcx> {\n                 };\n \n                 // Copy the arguments if needed.\n-                let args: Vec<_> = self.make_call_args(args, &callsite, caller_body);\n+                let args: Vec<_> = self.make_call_args(args, &callsite, caller_body, &callee_body);\n \n                 let mut integrator = Integrator {\n                     args: &args,\n@@ -528,6 +526,7 @@ impl Inliner<'tcx> {\n         args: Vec<Operand<'tcx>>,\n         callsite: &CallSite<'tcx>,\n         caller_body: &mut Body<'tcx>,\n+        callee_body: &Body<'tcx>,\n     ) -> Vec<Local> {\n         let tcx = self.tcx;\n \n@@ -554,9 +553,7 @@ impl Inliner<'tcx> {\n         //     tmp2 = tuple_tmp.2\n         //\n         // and the vector is `[closure_ref, tmp0, tmp1, tmp2]`.\n-        // FIXME(eddyb) make this check for `\"rust-call\"` ABI combined with\n-        // `callee_body.spread_arg == None`, instead of special-casing closures.\n-        if tcx.is_closure(callsite.callee.def_id()) {\n+        if callsite.fn_sig.abi() == Abi::RustCall && callee_body.spread_arg.is_none() {\n             let mut args = args.into_iter();\n             let self_ = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_body);\n             let tuple = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_body);"}, {"sha": "30aff0a64efb91ff24c9c1cf24e74531e4502080", "filename": "src/test/mir-opt/inline/inline-compatibility.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline-compatibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline-compatibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-compatibility.rs?ref=6be44ed3b5f3c60476da5698c48f02d79364db14", "patch": "@@ -1,12 +1,11 @@\n // Checks that only functions with compatible attributes are inlined.\n //\n // only-x86_64\n-// needs-sanitizer-address\n-// compile-flags: -Zsanitizer=address\n \n #![crate_type = \"lib\"]\n #![feature(no_sanitize)]\n #![feature(target_feature_11)]\n+#![feature(c_variadic)]\n \n // EMIT_MIR inline_compatibility.inlined_target_feature.Inline.diff\n #[target_feature(enable = \"sse2\")]\n@@ -35,5 +34,22 @@ pub unsafe fn not_inlined_no_sanitize() {\n pub unsafe fn target_feature() {}\n \n #[inline]\n-#[no_sanitize(address, memory)]\n+#[no_sanitize(address)]\n pub unsafe fn no_sanitize() {}\n+\n+// EMIT_MIR inline_compatibility.not_inlined_c_variadic.Inline.diff\n+pub unsafe fn not_inlined_c_variadic() {\n+    let s = sum(4u32, 4u32, 30u32, 200u32, 1000u32);\n+}\n+\n+#[no_mangle]\n+#[inline(always)]\n+unsafe extern \"C\" fn sum(n: u32, mut vs: ...) -> u32 {\n+    let mut s = 0;\n+    let mut i = 0;\n+    while i != n {\n+        s += vs.arg::<u32>();\n+        i += 1;\n+    }\n+    s\n+}"}, {"sha": "d11b3e548f721f25d2a253057dcaff1953d196a4", "filename": "src/test/mir-opt/inline/inline-generator.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-generator.rs?ref=6be44ed3b5f3c60476da5698c48f02d79364db14", "patch": "@@ -0,0 +1,16 @@\n+// ignore-wasm32-bare compiled with panic=abort by default\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+use std::pin::Pin;\n+\n+// EMIT_MIR inline_generator.main.Inline.diff\n+fn main() {\n+    let _r = Pin::new(&mut g()).resume(false);\n+}\n+\n+#[inline(always)]\n+pub fn g() -> impl Generator<bool> {\n+    #[inline(always)]\n+    |a| { yield if a { 7 } else { 13 } }\n+}"}, {"sha": "c95cf47695785de07fa671541204b37003f4e371", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_no_sanitize.Inline.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff?ref=6be44ed3b5f3c60476da5698c48f02d79364db14", "patch": "@@ -2,24 +2,24 @@\n + // MIR for `inlined_no_sanitize` after Inline\n   \n   fn inlined_no_sanitize() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:24:37: 24:37\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:25:5: 25:18\n-+     scope 1 (inlined no_sanitize) {      // at $DIR/inline-compatibility.rs:25:5: 25:18\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:23:37: 23:37\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:24:5: 24:18\n++     scope 1 (inlined no_sanitize) {      // at $DIR/inline-compatibility.rs:24:5: 24:18\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:25:5: 25:18\n--         _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:25:5: 25:18\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:24:5: 24:18\n+-         _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:24:5: 24:18\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-compatibility.rs:25:5: 25:16\n+-                                          // + span: $DIR/inline-compatibility.rs:24:5: 24:16\n -                                          // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n -     bb1: {\n-+         _1 = const ();                   // scope 1 at $DIR/inline-compatibility.rs:25:5: 25:18\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:25:18: 25:19\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:24:37: 26:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:26:2: 26:2\n++         _1 = const ();                   // scope 1 at $DIR/inline-compatibility.rs:24:5: 24:18\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:24:18: 24:19\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:23:37: 25:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:25:2: 25:2\n       }\n   }\n   "}, {"sha": "2bb928343229fd190b82304de92676ea03cba704", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff?ref=6be44ed3b5f3c60476da5698c48f02d79364db14", "patch": "@@ -2,24 +2,24 @@\n + // MIR for `inlined_target_feature` after Inline\n   \n   fn inlined_target_feature() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:13:40: 13:40\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:14:5: 14:21\n-+     scope 1 (inlined target_feature) {   // at $DIR/inline-compatibility.rs:14:5: 14:21\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:12:40: 12:40\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:13:5: 13:21\n++     scope 1 (inlined target_feature) {   // at $DIR/inline-compatibility.rs:13:5: 13:21\n +     }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:14:5: 14:21\n--         _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:14:5: 14:21\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:13:5: 13:21\n+-         _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:13:5: 13:21\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline-compatibility.rs:14:5: 14:19\n+-                                          // + span: $DIR/inline-compatibility.rs:13:5: 13:19\n -                                          // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n -     bb1: {\n-+         _1 = const ();                   // scope 1 at $DIR/inline-compatibility.rs:14:5: 14:21\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:14:21: 14:22\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:13:40: 15:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:15:2: 15:2\n++         _1 = const ();                   // scope 1 at $DIR/inline-compatibility.rs:13:5: 13:21\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:13:21: 13:22\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:12:40: 14:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:14:2: 14:2\n       }\n   }\n   "}, {"sha": "09bca903c80e892da07a8573341cfc1460ef6748", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_c_variadic.Inline.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff?ref=6be44ed3b5f3c60476da5698c48f02d79364db14", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `not_inlined_c_variadic` before Inline\n++ // MIR for `not_inlined_c_variadic` after Inline\n+  \n+  fn not_inlined_c_variadic() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:41:40: 41:40\n+      let _1: u32;                         // in scope 0 at $DIR/inline-compatibility.rs:42:9: 42:10\n+      scope 1 {\n+          debug s => _1;                   // in scope 1 at $DIR/inline-compatibility.rs:42:9: 42:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:42:9: 42:10\n+          _1 = sum(const 4_u32, const 4_u32, const 30_u32, const 200_u32, const 1000_u32) -> bb1; // scope 0 at $DIR/inline-compatibility.rs:42:13: 42:52\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-compatibility.rs:42:13: 42:16\n+                                           // + literal: Const { ty: unsafe extern \"C\" fn(u32, ...) -> u32 {sum}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:41:40: 43:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:43:1: 43:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:43:2: 43:2\n+      }\n+  }\n+  "}, {"sha": "5af3946f2e501d32622dc4d0d526e8f279e7e633", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_no_sanitize.Inline.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff?ref=6be44ed3b5f3c60476da5698c48f02d79364db14", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `not_inlined_no_sanitize` after Inline\n   \n   fn not_inlined_no_sanitize() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:29:41: 29:41\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:30:5: 30:18\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:28:41: 28:41\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:29:5: 29:18\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:30:5: 30:18\n-          _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:30:5: 30:18\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:29:5: 29:18\n+          _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:29:5: 29:18\n                                            // mir::Constant\n-                                           // + span: $DIR/inline-compatibility.rs:30:5: 30:16\n+                                           // + span: $DIR/inline-compatibility.rs:29:5: 29:16\n                                            // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:30:18: 30:19\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:29:41: 31:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:31:2: 31:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:29:18: 29:19\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:28:41: 30:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:30:2: 30:2\n       }\n   }\n   "}, {"sha": "8c9fa573ce218ca550f536608d8aa809266b659b", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff?ref=6be44ed3b5f3c60476da5698c48f02d79364db14", "patch": "@@ -2,21 +2,21 @@\n + // MIR for `not_inlined_target_feature` after Inline\n   \n   fn not_inlined_target_feature() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:18:44: 18:44\n-      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:19:5: 19:21\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:17:44: 17:44\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:18:5: 18:21\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:19:5: 19:21\n-          _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:19:5: 19:21\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:18:5: 18:21\n+          _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:18:5: 18:21\n                                            // mir::Constant\n-                                           // + span: $DIR/inline-compatibility.rs:19:5: 19:19\n+                                           // + span: $DIR/inline-compatibility.rs:18:5: 18:19\n                                            // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:19:21: 19:22\n-          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:18:44: 20:2\n-          return;                          // scope 0 at $DIR/inline-compatibility.rs:20:2: 20:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:18:21: 18:22\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:17:44: 19:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:19:2: 19:2\n       }\n   }\n   "}, {"sha": "aa32daa82dd51135f81ceb0b2e2f91f03adbb1a8", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6be44ed3b5f3c60476da5698c48f02d79364db14/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=6be44ed3b5f3c60476da5698c48f02d79364db14", "patch": "@@ -0,0 +1,123 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-generator.rs:8:11: 8:11\n+      let _1: std::ops::GeneratorState<<impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Yield, <impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Return>; // in scope 0 at $DIR/inline-generator.rs:9:9: 9:11\n+      let mut _2: std::pin::Pin<&mut impl std::ops::Generator<bool>>; // in scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n+      let mut _3: &mut impl std::ops::Generator<bool>; // in scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n+      let mut _4: impl std::ops::Generator<bool>; // in scope 0 at $DIR/inline-generator.rs:9:28: 9:31\n++     let mut _7: bool;                    // in scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n+      scope 1 {\n+          debug _r => _1;                  // in scope 1 at $DIR/inline-generator.rs:9:9: 9:11\n+      }\n++     scope 2 (inlined g) {                // at $DIR/inline-generator.rs:9:28: 9:31\n++     }\n++     scope 3 (inlined Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]>::new) { // at $DIR/inline-generator.rs:9:14: 9:32\n++         debug pointer => _3;             // in scope 3 at $DIR/inline-generator.rs:9:14: 9:32\n++         let mut _5: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]; // in scope 3 at $DIR/inline-generator.rs:9:14: 9:32\n++         scope 4 {\n++             scope 5 (inlined Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]>::new_unchecked) { // at $DIR/inline-generator.rs:9:14: 9:32\n++                 debug pointer => _5;     // in scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n++                 let mut _6: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]; // in scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n++             }\n++         }\n++     }\n++     scope 6 (inlined g::{closure#0}) {   // at $DIR/inline-generator.rs:9:14: 9:46\n++         debug a => _8;                   // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         let mut _8: bool;                // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         let mut _9: u32;                 // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-generator.rs:9:9: 9:11\n+          StorageLive(_2);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n+          StorageLive(_3);                 // scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n+          StorageLive(_4);                 // scope 0 at $DIR/inline-generator.rs:9:28: 9:31\n+-         _4 = g() -> bb1;                 // scope 0 at $DIR/inline-generator.rs:9:28: 9:31\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-generator.rs:9:28: 9:29\n+-                                          // + literal: Const { ty: fn() -> impl std::ops::Generator<bool> {g}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb1: {\n++         discriminant(_4) = 0;            // scope 2 at $DIR/inline-generator.rs:9:28: 9:31\n+          _3 = &mut _4;                    // scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n+-         _2 = Pin::<&mut impl Generator<bool>>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-generator.rs:9:14: 9:22\n+-                                          // + user_ty: UserType(0)\n+-                                          // + literal: Const { ty: fn(&mut impl std::ops::Generator<bool>) -> std::pin::Pin<&mut impl std::ops::Generator<bool>> {std::pin::Pin::<&mut impl std::ops::Generator<bool>>::new}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb2: {\n++         StorageLive(_5);                 // scope 4 at $DIR/inline-generator.rs:9:14: 9:32\n++         _5 = move _3;                    // scope 4 at $DIR/inline-generator.rs:9:14: 9:32\n++         StorageLive(_6);                 // scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n++         _6 = move _5;                    // scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n++         (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]) = move _6; // scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n++         StorageDead(_6);                 // scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n++         StorageDead(_5);                 // scope 4 at $DIR/inline-generator.rs:9:14: 9:32\n+          StorageDead(_3);                 // scope 0 at $DIR/inline-generator.rs:9:31: 9:32\n+-         _1 = <impl Generator<bool> as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-generator.rs:9:33: 9:39\n+-                                          // + literal: Const { ty: for<'r> fn(std::pin::Pin<&'r mut impl std::ops::Generator<bool>>, bool) -> std::ops::GeneratorState<<impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Yield, <impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Return> {<impl std::ops::Generator<bool> as std::ops::Generator<bool>>::resume}, val: Value(Scalar(<ZST>)) }\n++         StorageLive(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n++         _9 = discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]))); // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         switchInt(move _9) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n+      }\n+  \n+-     bb3: {\n++     bb1: {\n++         StorageDead(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-generator.rs:9:45: 9:46\n+          StorageDead(_4);                 // scope 0 at $DIR/inline-generator.rs:9:46: 9:47\n+          _0 = const ();                   // scope 0 at $DIR/inline-generator.rs:8:11: 10:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-generator.rs:10:1: 10:2\n+          return;                          // scope 0 at $DIR/inline-generator.rs:10:2: 10:2\n+      }\n+  \n+-     bb4 (cleanup): {\n++     bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/inline-generator.rs:8:1: 10:2\n++     }\n++ \n++     bb3: {\n++         _8 = move _7;                    // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         switchInt(_8) -> [false: bb4, otherwise: bb5]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++     }\n++ \n++     bb4: {\n++         ((_1 as Yielded).0: i32) = const 13_i32; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++     }\n++ \n++     bb5: {\n++         ((_1 as Yielded).0: i32) = const 7_i32; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++     }\n++ \n++     bb6: {\n++         discriminant(_1) = 0;            // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]))) = 3; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:11: 15:39\n++     }\n++ \n++     bb7: {\n++         ((_1 as Complete).0: bool) = move _7; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41 {bool, i32}]))) = 1; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:41: 15:41\n++     }\n++ \n++     bb8: {\n++         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++     }\n++ \n++     bb9: {\n++         unreachable;                     // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n+      }\n+  }\n+  "}]}