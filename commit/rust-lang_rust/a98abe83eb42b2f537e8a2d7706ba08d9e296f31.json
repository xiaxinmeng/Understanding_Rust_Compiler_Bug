{"sha": "a98abe83eb42b2f537e8a2d7706ba08d9e296f31", "node_id": "C_kwDOAAsO6NoAKGE5OGFiZTgzZWI0MmIyZjUzN2U4YTJkNzcwNmJhMDhkOWUyOTZmMzE", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-05-01T17:25:14Z"}, "committer": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-05-01T17:25:14Z"}, "message": "Improve codegen of String::retain method.\n\nUsing unwrap_unchecked helps the optimizer to not generate panicking\npath, that will never be taken for valid UTF-8 like string.\n\nUsing encode_utf8 saves us a call to a memcpy, as the optimizer is\nunable to realize that ch_len <= 4 and so can generate much better\nassembly code.\n\nhttps://rust.godbolt.org/z/z73ohenfc", "tree": {"sha": "5f267b53c4ed408c056f8273f6f8f80c70c57312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f267b53c4ed408c056f8273f6f8f80c70c57312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a98abe83eb42b2f537e8a2d7706ba08d9e296f31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a98abe83eb42b2f537e8a2d7706ba08d9e296f31", "html_url": "https://github.com/rust-lang/rust/commit/a98abe83eb42b2f537e8a2d7706ba08d9e296f31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a98abe83eb42b2f537e8a2d7706ba08d9e296f31/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e7915d11f6888f005e78c2358fcdc48ff655753", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7915d11f6888f005e78c2358fcdc48ff655753", "html_url": "https://github.com/rust-lang/rust/commit/0e7915d11f6888f005e78c2358fcdc48ff655753"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "71e6f0450e668f42b64660fa72215a8221bd8d33", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a98abe83eb42b2f537e8a2d7706ba08d9e296f31/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98abe83eb42b2f537e8a2d7706ba08d9e296f31/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=a98abe83eb42b2f537e8a2d7706ba08d9e296f31", "patch": "@@ -1466,19 +1466,28 @@ impl String {\n         let mut guard = SetLenOnDrop { s: self, idx: 0, del_bytes: 0 };\n \n         while guard.idx < len {\n-            let ch = unsafe { guard.s.get_unchecked(guard.idx..len).chars().next().unwrap() };\n+            let ch =\n+                // SAFETY: `guard.idx` is positive-or-zero and less that len so the `get_unchecked`\n+                // is in bound. `self` is valid UTF-8 like string and the returned slice starts at\n+                // a unicode code point so the `Chars` always return one character.\n+                unsafe { guard.s.get_unchecked(guard.idx..len).chars().next().unwrap_unchecked() };\n             let ch_len = ch.len_utf8();\n \n             if !f(ch) {\n                 guard.del_bytes += ch_len;\n             } else if guard.del_bytes > 0 {\n-                unsafe {\n-                    ptr::copy(\n-                        guard.s.vec.as_ptr().add(guard.idx),\n-                        guard.s.vec.as_mut_ptr().add(guard.idx - guard.del_bytes),\n-                        ch_len,\n-                    );\n-                }\n+                // SAFETY: `guard.idx` is in bound and `guard.del_bytes` represent the number of\n+                // bytes that are erased from the string so the resulting `guard.idx -\n+                // guard.del_bytes` always represent a valid unicode code point.\n+                //\n+                // `guard.del_bytes` >= `ch.len_utf8()`, so taking a slice with `ch.len_utf8()` len\n+                // is safe.\n+                ch.encode_utf8(unsafe {\n+                    crate::slice::from_raw_parts_mut(\n+                        guard.s.as_mut_ptr().add(guard.idx - guard.del_bytes),\n+                        ch.len_utf8(),\n+                    )\n+                });\n             }\n \n             // Point idx to the next char"}]}