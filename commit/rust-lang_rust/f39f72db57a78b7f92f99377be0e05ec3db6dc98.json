{"sha": "f39f72db57a78b7f92f99377be0e05ec3db6dc98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOWY3MmRiNTdhNzhiN2Y5MmY5OTM3N2JlMGUwNWVjM2RiNmRjOTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-02T14:07:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-02T14:07:17Z"}, "message": "Merge #1737\n\n1737: Report type mismatches in analysis-stats r=matklad a=flodiebold\n\nOnly the number usually; each one individually when running with `-v`.\r\n\r\nGetting the file/line locations for the exprs was really annoying and I had to make some stuff public (that I didn't remember why it would be `pub(crate)`); maybe I missed some easier way? It would be nice to have some general way for mapping locations :thinking: \r\n\r\nThis reports 1768 mismatches on RA currently; from skimming, this seems to be mostly various kinds of coercions, though there were also some other things.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "789f733506520663e6cb5f99eec7d56c1a443831", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/789f733506520663e6cb5f99eec7d56c1a443831"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f39f72db57a78b7f92f99377be0e05ec3db6dc98", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdbSIVCRBK7hj4Ov3rIwAAdHIIAJZGUjWSaqK1MH/kd7bx7/rn\noL+jSk3psprQP1q5zBVDgEpzQW6Lxwzb+9xswTnPXMcYNpJC90w29PbCmWo7407/\nnKwEeEfm70DVLOKgbRDLzM/yrw/2V0X84B+yuI/aK6sT6XoGVfBmP2lrLVTNq05V\nrPJQgGSbr+Z6EJZxltf8hktGZFNx1CkAp2hf5/ZVhY9+hcA7kmF2M1oFiv+l9L8G\n7YyamIvI4+0XTRxy1aHDokSLfx2QTb2D+SUJeUoHMBv6ybuYXvevEqX+DEKw9GDY\nSgxNLdt8nBfjOjAaPHbU7YlelZlZARPa/1p/W+uFKyizfSRH+EbywgGJs6N77DQ=\n=al8y\n-----END PGP SIGNATURE-----\n", "payload": "tree 789f733506520663e6cb5f99eec7d56c1a443831\nparent 6ecb36740a81445cf103577c3f9e9e6f831d0a1b\nparent f92177cfb5088809892455262841e24cf1ecf5b6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1567433237 +0000\ncommitter GitHub <noreply@github.com> 1567433237 +0000\n\nMerge #1737\n\n1737: Report type mismatches in analysis-stats r=matklad a=flodiebold\n\nOnly the number usually; each one individually when running with `-v`.\r\n\r\nGetting the file/line locations for the exprs was really annoying and I had to make some stuff public (that I didn't remember why it would be `pub(crate)`); maybe I missed some easier way? It would be nice to have some general way for mapping locations :thinking: \r\n\r\nThis reports 1768 mismatches on RA currently; from skimming, this seems to be mostly various kinds of coercions, though there were also some other things.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f39f72db57a78b7f92f99377be0e05ec3db6dc98", "html_url": "https://github.com/rust-lang/rust/commit/f39f72db57a78b7f92f99377be0e05ec3db6dc98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f39f72db57a78b7f92f99377be0e05ec3db6dc98/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ecb36740a81445cf103577c3f9e9e6f831d0a1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecb36740a81445cf103577c3f9e9e6f831d0a1b", "html_url": "https://github.com/rust-lang/rust/commit/6ecb36740a81445cf103577c3f9e9e6f831d0a1b"}, {"sha": "f92177cfb5088809892455262841e24cf1ecf5b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f92177cfb5088809892455262841e24cf1ecf5b6", "html_url": "https://github.com/rust-lang/rust/commit/f92177cfb5088809892455262841e24cf1ecf5b6"}], "stats": {"total": 137, "additions": 110, "deletions": 27}, "files": [{"sha": "d355fa2e83ad54b04b395f72c8296355b5a5c04e", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f39f72db57a78b7f92f99377be0e05ec3db6dc98/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39f72db57a78b7f92f99377be0e05ec3db6dc98/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=f39f72db57a78b7f92f99377be0e05ec3db6dc98", "patch": "@@ -1,7 +1,7 @@\n use std::{collections::HashSet, fmt::Write, path::Path, time::Instant};\n \n use ra_db::SourceDatabase;\n-use ra_hir::{Crate, HasSource, ImplItem, ModuleDef, Ty};\n+use ra_hir::{Crate, HasBodySource, HasSource, HirDisplay, ImplItem, ModuleDef, Ty};\n use ra_syntax::AstNode;\n \n use crate::Result;\n@@ -66,6 +66,7 @@ pub fn run(verbose: bool, memory_usage: bool, path: &Path, only: Option<&str>) -\n     let mut num_exprs = 0;\n     let mut num_exprs_unknown = 0;\n     let mut num_exprs_partially_unknown = 0;\n+    let mut num_type_mismatches = 0;\n     for f in funcs {\n         let name = f.name(db);\n         let mut msg = format!(\"processing: {}\", name);\n@@ -100,6 +101,39 @@ pub fn run(verbose: bool, memory_usage: bool, path: &Path, only: Option<&str>) -\n                     num_exprs_partially_unknown += 1;\n                 }\n             }\n+            if let Some(mismatch) = inference_result.type_mismatch_for_expr(expr_id) {\n+                num_type_mismatches += 1;\n+                if verbose {\n+                    let src = f.expr_source(db, expr_id);\n+                    if let Some(src) = src {\n+                        // FIXME: it might be nice to have a function (on Analysis?) that goes from Source<T> -> (LineCol, LineCol) directly\n+                        let original_file = src.file_id.original_file(db);\n+                        let path = db.file_relative_path(original_file);\n+                        let line_index = host.analysis().file_line_index(original_file).unwrap();\n+                        let (start, end) = (\n+                            line_index.line_col(src.ast.syntax().text_range().start()),\n+                            line_index.line_col(src.ast.syntax().text_range().end()),\n+                        );\n+                        bar.println(format!(\n+                            \"{} {}:{}-{}:{}: Expected {}, got {}\",\n+                            path.display(),\n+                            start.line + 1,\n+                            start.col_utf16,\n+                            end.line + 1,\n+                            end.col_utf16,\n+                            mismatch.expected.display(db),\n+                            mismatch.actual.display(db)\n+                        ));\n+                    } else {\n+                        bar.println(format!(\n+                            \"{}: Expected {}, got {}\",\n+                            name,\n+                            mismatch.expected.display(db),\n+                            mismatch.actual.display(db)\n+                        ));\n+                    }\n+                }\n+            }\n         }\n         bar.inc(1);\n     }\n@@ -115,6 +149,7 @@ pub fn run(verbose: bool, memory_usage: bool, path: &Path, only: Option<&str>) -\n         num_exprs_partially_unknown,\n         (num_exprs_partially_unknown * 100 / num_exprs)\n     );\n+    println!(\"Type mismatches: {}\", num_type_mismatches);\n     println!(\"Inference: {:?}, {}\", inference_time.elapsed(), ra_prof::memory_usage());\n     println!(\"Total: {:?}, {}\", analysis_time.elapsed(), ra_prof::memory_usage());\n "}, {"sha": "f7efc1b6653126f278d245331fcefb754deb79d8", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f39f72db57a78b7f92f99377be0e05ec3db6dc98/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39f72db57a78b7f92f99377be0e05ec3db6dc98/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=f39f72db57a78b7f92f99377be0e05ec3db6dc98", "patch": "@@ -510,18 +510,6 @@ pub enum DefWithBody {\n impl_froms!(DefWithBody: Function, Const, Static);\n \n impl DefWithBody {\n-    pub fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n-        db.infer(self)\n-    }\n-\n-    pub fn body(self, db: &impl HirDatabase) -> Arc<Body> {\n-        db.body_hir(self)\n-    }\n-\n-    pub fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n-        db.body_with_source_map(self).1\n-    }\n-\n     /// Builds a resolver for code inside this item.\n     pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n         match self {\n@@ -532,6 +520,43 @@ impl DefWithBody {\n     }\n }\n \n+pub trait HasBody: Copy {\n+    fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult>;\n+    fn body(self, db: &impl HirDatabase) -> Arc<Body>;\n+    fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap>;\n+}\n+\n+impl<T> HasBody for T\n+where\n+    T: Into<DefWithBody> + Copy + HasSource,\n+{\n+    fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n+        db.infer(self.into())\n+    }\n+\n+    fn body(self, db: &impl HirDatabase) -> Arc<Body> {\n+        db.body_hir(self.into())\n+    }\n+\n+    fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+        db.body_with_source_map(self.into()).1\n+    }\n+}\n+\n+impl HasBody for DefWithBody {\n+    fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n+        db.infer(self)\n+    }\n+\n+    fn body(self, db: &impl HirDatabase) -> Arc<Body> {\n+        db.body_hir(self)\n+    }\n+\n+    fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+        db.body_with_source_map(self).1\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Function {\n     pub(crate) id: FunctionId,"}, {"sha": "e5bae16ab5b88a8c36f4a593460979044cd1552d", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f39f72db57a78b7f92f99377be0e05ec3db6dc98/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39f72db57a78b7f92f99377be0e05ec3db6dc98/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=f39f72db57a78b7f92f99377be0e05ec3db6dc98", "patch": "@@ -1,9 +1,9 @@\n-use ra_syntax::ast;\n+use ra_syntax::ast::{self, AstNode};\n \n use crate::{\n     ids::AstItemDef, AstDatabase, Const, DefDatabase, Enum, EnumVariant, FieldSource, Function,\n-    HirFileId, MacroDef, Module, ModuleSource, Static, Struct, StructField, Trait, TypeAlias,\n-    Union,\n+    HasBody, HirDatabase, HirFileId, MacroDef, Module, ModuleSource, Static, Struct, StructField,\n+    Trait, TypeAlias, Union,\n };\n \n pub struct Source<T> {\n@@ -108,3 +108,27 @@ impl HasSource for MacroDef {\n         Source { file_id: self.id.0.file_id(), ast: self.id.0.to_node(db) }\n     }\n }\n+\n+pub trait HasBodySource: HasBody + HasSource\n+where\n+    Self::Ast: AstNode,\n+{\n+    fn expr_source(\n+        self,\n+        db: &impl HirDatabase,\n+        expr_id: crate::expr::ExprId,\n+    ) -> Option<Source<ast::Expr>> {\n+        let source_map = self.body_source_map(db);\n+        let expr_syntax = source_map.expr_syntax(expr_id)?;\n+        let source = self.source(db);\n+        let node = expr_syntax.to_node(&source.ast.syntax());\n+        ast::Expr::cast(node).map(|ast| Source { file_id: source.file_id, ast })\n+    }\n+}\n+\n+impl<T> HasBodySource for T\n+where\n+    T: HasBody + HasSource,\n+    T::Ast: AstNode,\n+{\n+}"}, {"sha": "752653ad7a360ac41464079648ac57025abc60a6", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f39f72db57a78b7f92f99377be0e05ec3db6dc98/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39f72db57a78b7f92f99377be0e05ec3db6dc98/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=f39f72db57a78b7f92f99377be0e05ec3db6dc98", "patch": "@@ -75,8 +75,8 @@ pub use self::{\n \n pub use self::code_model::{\n     docs::{DocDef, Docs, Documentation},\n-    src::{HasSource, Source},\n+    src::{HasBodySource, HasSource, Source},\n     BuiltinType, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n-    EnumVariant, FieldSource, FnData, Function, MacroDef, Module, ModuleDef, ModuleSource, Static,\n-    Struct, StructField, Trait, TypeAlias, Union,\n+    EnumVariant, FieldSource, FnData, Function, HasBody, MacroDef, Module, ModuleDef, ModuleSource,\n+    Static, Struct, StructField, Trait, TypeAlias, Union,\n };"}, {"sha": "43aec201a7b28bd92df542c087fa1bb0c9eec46e", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f39f72db57a78b7f92f99377be0e05ec3db6dc98/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39f72db57a78b7f92f99377be0e05ec3db6dc98/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=f39f72db57a78b7f92f99377be0e05ec3db6dc98", "patch": "@@ -27,9 +27,9 @@ use crate::{\n     name,\n     path::{PathKind, PathSegment},\n     ty::method_resolution::implements_trait,\n-    AsName, AstId, Const, Crate, DefWithBody, Either, Enum, Function, HirDatabase, HirFileId,\n-    MacroDef, Module, ModuleDef, Name, Path, PerNs, Resolution, Resolver, Static, Struct, Trait,\n-    Ty,\n+    AsName, AstId, Const, Crate, DefWithBody, Either, Enum, Function, HasBody, HirDatabase,\n+    HirFileId, MacroDef, Module, ModuleDef, Name, Path, PerNs, Resolution, Resolver, Static,\n+    Struct, Trait, Ty,\n };\n \n /// Locates the module by `FileId`. Picks topmost module in the file."}, {"sha": "9ba146299ebdc69948b44127351f36d09ce48350", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f39f72db57a78b7f92f99377be0e05ec3db6dc98/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39f72db57a78b7f92f99377be0e05ec3db6dc98/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=f39f72db57a78b7f92f99377be0e05ec3db6dc98", "patch": "@@ -50,8 +50,8 @@ use crate::{\n     },\n     ty::infer::diagnostics::InferenceDiagnostic,\n     type_ref::{Mutability, TypeRef},\n-    AdtDef, ConstData, DefWithBody, FnData, Function, HirDatabase, ImplItem, ModuleDef, Name, Path,\n-    StructField,\n+    AdtDef, ConstData, DefWithBody, FnData, Function, HasBody, HirDatabase, ImplItem, ModuleDef,\n+    Name, Path, StructField,\n };\n \n mod unify;"}, {"sha": "80e55d2aa406f75c20a3b7f6500671d8ed0d19f8", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f39f72db57a78b7f92f99377be0e05ec3db6dc98/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39f72db57a78b7f92f99377be0e05ec3db6dc98/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=f39f72db57a78b7f92f99377be0e05ec3db6dc98", "patch": "@@ -15,9 +15,8 @@ impl SyntaxNodePtr {\n         SyntaxNodePtr { range: node.text_range(), kind: node.kind() }\n     }\n \n-    pub fn to_node(self, root: &SyntaxNode) -> SyntaxNode {\n-        assert!(root.parent().is_none());\n-        successors(Some(root.clone()), |node| {\n+    pub fn to_node(self, parent: &SyntaxNode) -> SyntaxNode {\n+        successors(Some(parent.clone()), |node| {\n             node.children().find(|it| self.range.is_subrange(&it.text_range()))\n         })\n         .find(|it| it.text_range() == self.range && it.kind() == self.kind)"}]}