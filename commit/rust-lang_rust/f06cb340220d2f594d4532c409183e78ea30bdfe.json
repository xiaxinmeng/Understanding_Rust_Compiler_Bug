{"sha": "f06cb340220d2f594d4532c409183e78ea30bdfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNmNiMzQwMjIwZDJmNTk0ZDQ1MzJjNDA5MTgzZTc4ZWEzMGJkZmU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-27T13:09:01Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-27T13:09:01Z"}, "message": "Replace TargetKind with simple String", "tree": {"sha": "7d40b10856ed9188b647ebd762148a092b6f107d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d40b10856ed9188b647ebd762148a092b6f107d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f06cb340220d2f594d4532c409183e78ea30bdfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f06cb340220d2f594d4532c409183e78ea30bdfe", "html_url": "https://github.com/rust-lang/rust/commit/f06cb340220d2f594d4532c409183e78ea30bdfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f06cb340220d2f594d4532c409183e78ea30bdfe/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5b647faa71c307c8480e9a0699b6dd1bbd4461e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b647faa71c307c8480e9a0699b6dd1bbd4461e", "html_url": "https://github.com/rust-lang/rust/commit/a5b647faa71c307c8480e9a0699b6dd1bbd4461e"}], "stats": {"total": 47, "additions": 3, "deletions": 44}, "files": [{"sha": "001ffb649c64d4b4949545f125b032964f398eef", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 3, "deletions": 44, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f06cb340220d2f594d4532c409183e78ea30bdfe/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06cb340220d2f594d4532c409183e78ea30bdfe/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=f06cb340220d2f594d4532c409183e78ea30bdfe", "patch": "@@ -137,10 +137,9 @@ fn format_crate(\n     // Currently only bin and lib files get formatted\n     let files: Vec<_> = targets\n         .into_iter()\n-        .filter(|t| t.kind.should_format())\n         .inspect(|t| {\n             if verbosity == Verbosity::Verbose {\n-                println!(\"[{:?}] {:?}\", t.kind, t.path)\n+                println!(\"[{}] {:?}\", t.kind, t.path)\n             }\n         })\n         .map(|t| t.path)\n@@ -154,53 +153,13 @@ fn get_fmt_args() -> Vec<String> {\n     env::args().skip_while(|a| a != \"--\").skip(1).collect()\n }\n \n-#[derive(Debug)]\n-enum TargetKind {\n-    Lib,         // dylib, staticlib, lib\n-    Bin,         // bin\n-    Example,     // example file\n-    Test,        // test file\n-    Bench,       // bench file\n-    CustomBuild, // build script\n-    ProcMacro,   // a proc macro implementation\n-    Other,       // plugin,...\n-}\n-\n-impl TargetKind {\n-    fn should_format(&self) -> bool {\n-        match *self {\n-            TargetKind::Lib\n-            | TargetKind::Bin\n-            | TargetKind::Example\n-            | TargetKind::Test\n-            | TargetKind::Bench\n-            | TargetKind::CustomBuild\n-            | TargetKind::ProcMacro => true,\n-            _ => false,\n-        }\n-    }\n-\n-    fn from_str(s: &str) -> Self {\n-        match s {\n-            \"bin\" => TargetKind::Bin,\n-            \"lib\" | \"dylib\" | \"staticlib\" | \"cdylib\" | \"rlib\" => TargetKind::Lib,\n-            \"test\" => TargetKind::Test,\n-            \"example\" => TargetKind::Example,\n-            \"bench\" => TargetKind::Bench,\n-            \"custom-build\" => TargetKind::CustomBuild,\n-            \"proc-macro\" => TargetKind::ProcMacro,\n-            _ => TargetKind::Other,\n-        }\n-    }\n-}\n-\n /// Target uses a `path` field for equality and hashing.\n #[derive(Debug)]\n pub struct Target {\n     /// A path to the main source file of the target.\n     path: PathBuf,\n     /// A kind of target (e.g. lib, bin, example, ...).\n-    kind: TargetKind,\n+    kind: String,\n }\n \n impl Target {\n@@ -210,7 +169,7 @@ impl Target {\n \n         Target {\n             path: canonicalized,\n-            kind: TargetKind::from_str(&target.kind[0]),\n+            kind: target.kind[0].clone(),\n         }\n     }\n }"}]}