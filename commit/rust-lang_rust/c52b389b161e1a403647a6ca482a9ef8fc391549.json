{"sha": "c52b389b161e1a403647a6ca482a9ef8fc391549", "node_id": "C_kwDOAAsO6NoAKGM1MmIzODliMTYxZTFhNDAzNjQ3YTZjYTQ4MmE5ZWY4ZmMzOTE1NDk", "commit": {"author": {"name": "Skyler Calaman", "email": "54462713+Blckbrry-Pi@users.noreply.github.com", "date": "2021-11-16T16:29:26Z"}, "committer": {"name": "Skyler Calaman", "email": "54462713+Blckbrry-Pi@users.noreply.github.com", "date": "2021-11-16T16:29:26Z"}, "message": "Fix readability suggestions.\n\n1. Make the lifetime contained in LateContext `'tcx`.\n2. Fix `'txc` to `'tcx` because it was a typo.\n3. Refactor `IterFunctionVisitor`'s `visit_block` method to be more readable.\n4. Replace uses of `rustc_middle::ty::TyKind` with `rustc::middle::ty`, and remove the `#[allow(...)]`.\n\n(Thank you llogiq for all these suggestions!)", "tree": {"sha": "452e6f73ab91adde4d4de1e056423a14ee04aaeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/452e6f73ab91adde4d4de1e056423a14ee04aaeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c52b389b161e1a403647a6ca482a9ef8fc391549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c52b389b161e1a403647a6ca482a9ef8fc391549", "html_url": "https://github.com/rust-lang/rust/commit/c52b389b161e1a403647a6ca482a9ef8fc391549", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c52b389b161e1a403647a6ca482a9ef8fc391549/comments", "author": {"login": "Blckbrry-Pi", "id": 54462713, "node_id": "MDQ6VXNlcjU0NDYyNzEz", "avatar_url": "https://avatars.githubusercontent.com/u/54462713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blckbrry-Pi", "html_url": "https://github.com/Blckbrry-Pi", "followers_url": "https://api.github.com/users/Blckbrry-Pi/followers", "following_url": "https://api.github.com/users/Blckbrry-Pi/following{/other_user}", "gists_url": "https://api.github.com/users/Blckbrry-Pi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blckbrry-Pi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blckbrry-Pi/subscriptions", "organizations_url": "https://api.github.com/users/Blckbrry-Pi/orgs", "repos_url": "https://api.github.com/users/Blckbrry-Pi/repos", "events_url": "https://api.github.com/users/Blckbrry-Pi/events{/privacy}", "received_events_url": "https://api.github.com/users/Blckbrry-Pi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Blckbrry-Pi", "id": 54462713, "node_id": "MDQ6VXNlcjU0NDYyNzEz", "avatar_url": "https://avatars.githubusercontent.com/u/54462713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blckbrry-Pi", "html_url": "https://github.com/Blckbrry-Pi", "followers_url": "https://api.github.com/users/Blckbrry-Pi/followers", "following_url": "https://api.github.com/users/Blckbrry-Pi/following{/other_user}", "gists_url": "https://api.github.com/users/Blckbrry-Pi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blckbrry-Pi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blckbrry-Pi/subscriptions", "organizations_url": "https://api.github.com/users/Blckbrry-Pi/orgs", "repos_url": "https://api.github.com/users/Blckbrry-Pi/repos", "events_url": "https://api.github.com/users/Blckbrry-Pi/events{/privacy}", "received_events_url": "https://api.github.com/users/Blckbrry-Pi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b3c00f012dade7a1586cc8cca4b9e4a20888315", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3c00f012dade7a1586cc8cca4b9e4a20888315", "html_url": "https://github.com/rust-lang/rust/commit/5b3c00f012dade7a1586cc8cca4b9e4a20888315"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "6f3acb45ba4f89e55c24f5600d238b152d4d7940", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c52b389b161e1a403647a6ca482a9ef8fc391549/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c52b389b161e1a403647a6ca482a9ef8fc391549/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=c52b389b161e1a403647a6ca482a9ef8fc391549", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::{Block, Expr, ExprKind, HirId, HirIdSet, Local, Mutability, Node,\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::{TyKind, TyS};\n+use rustc_middle::ty::{self, TyS};\n use rustc_span::sym;\n use rustc_span::{MultiSpan, Span};\n \n@@ -171,27 +171,23 @@ enum IterFunctionKind {\n     Contains(Span),\n }\n \n-struct IterFunctionVisitor<'b, 'a> {\n+struct IterFunctionVisitor<'a, 'tcx> {\n     illegal_mutable_capture_ids: HirIdSet,\n     current_mutably_captured_ids: HirIdSet,\n-    cx: &'a LateContext<'b>,\n+    cx: &'a LateContext<'tcx>,\n     uses: Vec<Option<IterFunction>>,\n     hir_id_uses_map: FxHashMap<HirId, usize>,\n     current_statement_hir_id: Option<HirId>,\n     seen_other: bool,\n     target: HirId,\n }\n impl<'tcx> Visitor<'tcx> for IterFunctionVisitor<'_, 'tcx> {\n-    fn visit_block(&mut self, block: &'txc Block<'tcx>) {\n-        for (expr, hir_id) in block\n-            .stmts\n-            .iter()\n-            .filter_map(get_expr_and_hir_id_from_stmt)\n-            .chain(block.expr.map(|expr| (expr, None)))\n-        {\n-            self.current_statement_hir_id = hir_id;\n-            self.current_mutably_captured_ids = get_captured_ids(self.cx, self.cx.typeck_results().expr_ty(expr));\n-            self.visit_expr(expr);\n+    fn visit_block(&mut self, block: &'tcx Block<'tcx>) {\n+        for (expr, hir_id) in block.stmts.iter().filter_map(get_expr_and_hir_id_from_stmt) {\n+            self.visit_block_expr(expr, hir_id);\n+        }\n+        if let Some(expr) = block.expr {\n+            self.visit_block_expr(expr, None);\n         }\n     }\n \n@@ -273,6 +269,14 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor<'_, 'tcx> {\n     }\n }\n \n+impl<'tcx> IterFunctionVisitor<'_, 'tcx> {\n+    fn visit_block_expr(&mut self, expr: &'tcx Expr<'tcx>, hir_id: Option<HirId>) {\n+        self.current_statement_hir_id = hir_id;\n+        self.current_mutably_captured_ids = get_captured_ids(self.cx, self.cx.typeck_results().expr_ty(expr));\n+        self.visit_expr(expr);\n+    }\n+}\n+\n fn get_expr_and_hir_id_from_stmt<'v>(stmt: &'v Stmt<'v>) -> Option<(&'v Expr<'v>, Option<HirId>)> {\n     match stmt.kind {\n         StmtKind::Expr(expr) | StmtKind::Semi(expr) => Some((expr, None)),\n@@ -335,18 +339,17 @@ fn detect_iter_and_into_iters<'tcx: 'a, 'a>(\n     }\n }\n \n-#[allow(rustc::usage_of_ty_tykind)]\n fn get_captured_ids(cx: &LateContext<'tcx>, ty: &'_ TyS<'_>) -> HirIdSet {\n     fn get_captured_ids_recursive(cx: &LateContext<'tcx>, ty: &'_ TyS<'_>, set: &mut HirIdSet) {\n         match ty.kind() {\n-            TyKind::Adt(_, generics) => {\n+            ty::Adt(_, generics) => {\n                 for generic in *generics {\n                     if let GenericArgKind::Type(ty) = generic.unpack() {\n                         get_captured_ids_recursive(cx, ty, set);\n                     }\n                 }\n             },\n-            TyKind::Closure(def_id, _) => {\n+            ty::Closure(def_id, _) => {\n                 let closure_hir_node = cx.tcx.hir().get_if_local(*def_id).unwrap();\n                 if let Node::Expr(closure_expr) = closure_hir_node {\n                     can_move_expr_to_closure(cx, closure_expr)"}]}