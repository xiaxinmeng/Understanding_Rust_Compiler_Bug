{"sha": "ae1553aa027c395a93426dc0fe0abd4ec6af2291", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMTU1M2FhMDI3YzM5NWE5MzQyNmRjMGZlMGFiZDRlYzZhZjIyOTE=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2018-05-16T07:18:26Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2018-05-16T11:58:47Z"}, "message": "Address review comments", "tree": {"sha": "ace492bfc7c2ff6589a87ea68416922d368c4274", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ace492bfc7c2ff6589a87ea68416922d368c4274"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae1553aa027c395a93426dc0fe0abd4ec6af2291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae1553aa027c395a93426dc0fe0abd4ec6af2291", "html_url": "https://github.com/rust-lang/rust/commit/ae1553aa027c395a93426dc0fe0abd4ec6af2291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae1553aa027c395a93426dc0fe0abd4ec6af2291/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfa98318e17bc1c42615fd02efe946bfb8dfeb7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa98318e17bc1c42615fd02efe946bfb8dfeb7c", "html_url": "https://github.com/rust-lang/rust/commit/dfa98318e17bc1c42615fd02efe946bfb8dfeb7c"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "c48fb7ab7ebde0bfa21de9186bb91101fa16789c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae1553aa027c395a93426dc0fe0abd4ec6af2291/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1553aa027c395a93426dc0fe0abd4ec6af2291/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ae1553aa027c395a93426dc0fe0abd4ec6af2291", "patch": "@@ -779,7 +779,7 @@ pub struct Block {\n     pub span: Span,\n     /// If true, then there may exist `break 'a` values that aim to\n     /// break out of this block early.\n-    /// Used by `'label {}` blocks and by `catch` statements.\n+    /// Used by `'label: {}` blocks and by `catch` statements.\n     pub targeted_by_break: bool,\n     /// If true, don't emit return value type errors as the parser had\n     /// to recover from a parse error so this block will not have an"}, {"sha": "2368b1aca69481d36438c84276443da61f2e6ee1", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ae1553aa027c395a93426dc0fe0abd4ec6af2291/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1553aa027c395a93426dc0fe0abd4ec6af2291/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=ae1553aa027c395a93426dc0fe0abd4ec6af2291", "patch": "@@ -21,7 +21,6 @@ use syntax_pos::Span;\n enum LoopKind {\n     Loop(hir::LoopSource),\n     WhileLoop,\n-    Block,\n }\n \n impl LoopKind {\n@@ -31,7 +30,6 @@ impl LoopKind {\n             LoopKind::Loop(hir::LoopSource::WhileLet) => \"while let\",\n             LoopKind::Loop(hir::LoopSource::ForLoop) => \"for\",\n             LoopKind::WhileLoop => \"while\",\n-            LoopKind::Block => \"block\",\n         }\n     }\n }\n@@ -91,7 +89,11 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                 self.with_context(LabeledBlock, |v| v.visit_block(&b));\n             }\n             hir::ExprBreak(label, ref opt_expr) => {\n-                self.require_label_in_labeled_block(e.span, &label, \"break\");\n+                if self.require_label_in_labeled_block(e.span, &label, \"break\") {\n+                    // If we emitted an error about an unlabeled break in a labeled\n+                    // block, we don't need any further checking for this break any more\n+                    return;\n+                }\n \n                 let loop_id = match label.target_id.into() {\n                     Ok(loop_id) => loop_id,\n@@ -110,26 +112,20 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                     }\n                 }\n \n-                if self.cx == LabeledBlock {\n-                    return;\n-                }\n-\n                 if opt_expr.is_some() {\n                     let loop_kind = if loop_id == ast::DUMMY_NODE_ID {\n                         None\n                     } else {\n                         Some(match self.hir_map.expect_expr(loop_id).node {\n                             hir::ExprWhile(..) => LoopKind::WhileLoop,\n                             hir::ExprLoop(_, _, source) => LoopKind::Loop(source),\n-                            hir::ExprBlock(..) => LoopKind::Block,\n                             ref r => span_bug!(e.span,\n                                                \"break label resolved to a non-loop: {:?}\", r),\n                         })\n                     };\n                     match loop_kind {\n                         None |\n-                        Some(LoopKind::Loop(hir::LoopSource::Loop)) |\n-                        Some(LoopKind::Block) => (),\n+                        Some(LoopKind::Loop(hir::LoopSource::Loop)) => (),\n                         Some(kind) => {\n                             struct_span_err!(self.sess, e.span, E0571,\n                                              \"`break` with value from a `{}` loop\",\n@@ -203,7 +199,9 @@ impl<'a, 'hir> CheckLoopVisitor<'a, 'hir> {\n         }\n     }\n \n-    fn require_label_in_labeled_block(&mut self, span: Span, label: &Destination, cf_type: &str) {\n+    fn require_label_in_labeled_block(&mut self, span: Span, label: &Destination, cf_type: &str)\n+        -> bool\n+    {\n         if self.cx == LabeledBlock {\n             if label.label.is_none() {\n                 struct_span_err!(self.sess, span, E0695,\n@@ -212,8 +210,10 @@ impl<'a, 'hir> CheckLoopVisitor<'a, 'hir> {\n                                 format!(\"`{}` statements that would diverge to or through \\\n                                 a labeled block need to bear a label\", cf_type))\n                     .emit();\n+                return true;\n             }\n         }\n+        return false;\n     }\n     fn emit_unlabled_cf_in_while_condition(&mut self, span: Span, cf_type: &str) {\n         struct_span_err!(self.sess, span, E0590,"}]}