{"sha": "7be2d2f008595114e19aad0aa0608ddedfe3edf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZTJkMmYwMDg1OTUxMTRlMTlhYWQwYWEwNjA4ZGRlZGZlM2VkZjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-22T18:22:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-22T18:26:07Z"}, "message": "internal: remove one more accidentally quadratic code-path\n\nDefinition::visibility was implemented in a rather roundabout way -- by\nasking the parent module about the effective visibility.\n\nThis is problematic for a couple of reasons:\n\n* first, it doesn't work for local items\n* second, asking module about visibility of a child is a linear\n  operation (that's a problem in itself, tracked in #9378)\n\nInstead, lets ask the declared visibility directly, we have all the code\nfor it, and need only to actually us it.", "tree": {"sha": "61b75baa49f6b88c24fbda5f44ac734fed1f7d98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61b75baa49f6b88c24fbda5f44ac734fed1f7d98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7be2d2f008595114e19aad0aa0608ddedfe3edf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7be2d2f008595114e19aad0aa0608ddedfe3edf7", "html_url": "https://github.com/rust-lang/rust/commit/7be2d2f008595114e19aad0aa0608ddedfe3edf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7be2d2f008595114e19aad0aa0608ddedfe3edf7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9239943b84ec2bd687c4c80d2c3a0df4f8caf31c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9239943b84ec2bd687c4c80d2c3a0df4f8caf31c", "html_url": "https://github.com/rust-lang/rust/commit/9239943b84ec2bd687c4c80d2c3a0df4f8caf31c"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "3f000088971c0d8125166ea3c23e9298b16430ab", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7be2d2f008595114e19aad0aa0608ddedfe3edf7/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be2d2f008595114e19aad0aa0608ddedfe3edf7/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=7be2d2f008595114e19aad0aa0608ddedfe3edf7", "patch": "@@ -303,26 +303,6 @@ impl ModuleDef {\n         Some(segments.join(\"::\"))\n     }\n \n-    pub fn definition_visibility(&self, db: &dyn HirDatabase) -> Option<Visibility> {\n-        let module = match self {\n-            ModuleDef::Module(it) => it.parent(db)?,\n-            ModuleDef::Function(it) => return Some(it.visibility(db)),\n-            ModuleDef::Adt(it) => it.module(db),\n-            ModuleDef::Variant(it) => {\n-                let parent = it.parent_enum(db);\n-                let module = it.module(db);\n-                return module.visibility_of(db, &ModuleDef::Adt(Adt::Enum(parent)));\n-            }\n-            ModuleDef::Const(it) => return Some(it.visibility(db)),\n-            ModuleDef::Static(it) => it.module(db),\n-            ModuleDef::Trait(it) => it.module(db),\n-            ModuleDef::TypeAlias(it) => return Some(it.visibility(db)),\n-            ModuleDef::BuiltinType(_) => return None,\n-        };\n-\n-        module.visibility_of(db, self)\n-    }\n-\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n         match self {\n             ModuleDef::Adt(it) => Some(it.name(db)),\n@@ -893,6 +873,16 @@ impl Adt {\n     }\n }\n \n+impl HasVisibility for Adt {\n+    fn visibility(&self, db: &dyn HirDatabase) -> Visibility {\n+        match self {\n+            Adt::Struct(it) => it.visibility(db),\n+            Adt::Union(it) => it.visibility(db),\n+            Adt::Enum(it) => it.visibility(db),\n+        }\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum VariantDef {\n     Struct(Struct),"}, {"sha": "fddd1fc2d2ad190827843addf95bd8989f9a5b64", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7be2d2f008595114e19aad0aa0608ddedfe3edf7/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be2d2f008595114e19aad0aa0608ddedfe3edf7/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=7be2d2f008595114e19aad0aa0608ddedfe3edf7", "patch": "@@ -43,13 +43,29 @@ impl Definition {\n \n     pub fn visibility(&self, db: &RootDatabase) -> Option<Visibility> {\n         match self {\n-            Definition::Macro(_) => None,\n             Definition::Field(sf) => Some(sf.visibility(db)),\n-            Definition::ModuleDef(def) => def.definition_visibility(db),\n-            Definition::SelfType(_) => None,\n-            Definition::Local(_) => None,\n-            Definition::GenericParam(_) => None,\n-            Definition::Label(_) => None,\n+            Definition::ModuleDef(def) => match def {\n+                ModuleDef::Module(it) => {\n+                    // FIXME: should work like other cases here.\n+                    let parent = it.parent(db)?;\n+                    parent.visibility_of(db, def)\n+                }\n+                ModuleDef::Function(it) => Some(it.visibility(db)),\n+                ModuleDef::Adt(it) => Some(it.visibility(db)),\n+                ModuleDef::Const(it) => Some(it.visibility(db)),\n+                ModuleDef::Static(it) => Some(it.visibility(db)),\n+                ModuleDef::Trait(it) => Some(it.visibility(db)),\n+                ModuleDef::TypeAlias(it) => Some(it.visibility(db)),\n+                // NB: Variants don't have their own visibility, and just inherit\n+                // one from the parent. Not sure if that's the right thing to do.\n+                ModuleDef::Variant(it) => Some(it.parent_enum(db).visibility(db)),\n+                ModuleDef::BuiltinType(_) => None,\n+            },\n+            Definition::Macro(_)\n+            | Definition::SelfType(_)\n+            | Definition::Local(_)\n+            | Definition::GenericParam(_)\n+            | Definition::Label(_) => None,\n         }\n     }\n "}]}