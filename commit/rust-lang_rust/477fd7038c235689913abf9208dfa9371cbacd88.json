{"sha": "477fd7038c235689913abf9208dfa9371cbacd88", "node_id": "C_kwDOAAsO6NoAKDQ3N2ZkNzAzOGMyMzU2ODk5MTNhYmY5MjA4ZGZhOTM3MWNiYWNkODg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-07T21:50:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-07T21:50:46Z"}, "message": "Auto merge of #91407 - the8472:deserialize-unchecked-utf8, r=michaelwoerister\n\nAvoid string validation in rustc_serialize, check a marker byte instead\n\nSince the serialization format isn't self-describing we need a way to detect when encoder and decoder don't match up. But for strings it doesn't have to be utf8 validation, which currently does cost a few percent of performance.\nInstead we can use a marker byte at the end to be reasonably sure that we're dealing with a string and it wasn't overwritten in some way.", "tree": {"sha": "dcc5d4942973e667bf2d8b6f3a843f5225663107", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcc5d4942973e667bf2d8b6f3a843f5225663107"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/477fd7038c235689913abf9208dfa9371cbacd88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/477fd7038c235689913abf9208dfa9371cbacd88", "html_url": "https://github.com/rust-lang/rust/commit/477fd7038c235689913abf9208dfa9371cbacd88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/477fd7038c235689913abf9208dfa9371cbacd88/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b6f079e4987ded15c13a15b734e7cfb8176839f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6f079e4987ded15c13a15b734e7cfb8176839f", "html_url": "https://github.com/rust-lang/rust/commit/0b6f079e4987ded15c13a15b734e7cfb8176839f"}, {"sha": "c640f31c9f4b2159ebd2817904fcbc7077cec57a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c640f31c9f4b2159ebd2817904fcbc7077cec57a", "html_url": "https://github.com/rust-lang/rust/commit/c640f31c9f4b2159ebd2817904fcbc7077cec57a"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "cc1216418ae79306d54a5b46bb6b69a261afcdef", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/477fd7038c235689913abf9208dfa9371cbacd88/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/477fd7038c235689913abf9208dfa9371cbacd88/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=477fd7038c235689913abf9208dfa9371cbacd88", "patch": "@@ -55,6 +55,13 @@ macro_rules! write_leb128 {\n     }};\n }\n \n+/// A byte that [cannot occur in UTF8 sequences][utf8]. Used to mark the end of a string.\n+/// This way we can skip validation and still be relatively sure that deserialization\n+/// did not desynchronize.\n+///\n+/// [utf8]: https://en.wikipedia.org/w/index.php?title=UTF-8&oldid=1058865525#Codepage_layout\n+const STR_SENTINEL: u8 = 0xC1;\n+\n impl serialize::Encoder for Encoder {\n     type Error = !;\n \n@@ -150,7 +157,8 @@ impl serialize::Encoder for Encoder {\n     #[inline]\n     fn emit_str(&mut self, v: &str) -> EncodeResult {\n         self.emit_usize(v.len())?;\n-        self.emit_raw_bytes(v.as_bytes())\n+        self.emit_raw_bytes(v.as_bytes())?;\n+        self.emit_u8(STR_SENTINEL)\n     }\n \n     #[inline]\n@@ -502,7 +510,8 @@ impl serialize::Encoder for FileEncoder {\n     #[inline]\n     fn emit_str(&mut self, v: &str) -> FileEncodeResult {\n         self.emit_usize(v.len())?;\n-        self.emit_raw_bytes(v.as_bytes())\n+        self.emit_raw_bytes(v.as_bytes())?;\n+        self.emit_u8(STR_SENTINEL)\n     }\n \n     #[inline]\n@@ -656,8 +665,12 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     #[inline]\n     fn read_str(&mut self) -> Result<Cow<'_, str>, Self::Error> {\n         let len = self.read_usize()?;\n-        let s = std::str::from_utf8(&self.data[self.position..self.position + len]).unwrap();\n-        self.position += len;\n+        let sentinel = self.data[self.position + len];\n+        assert!(sentinel == STR_SENTINEL);\n+        let s = unsafe {\n+            std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])\n+        };\n+        self.position += len + 1;\n         Ok(Cow::Borrowed(s))\n     }\n "}]}