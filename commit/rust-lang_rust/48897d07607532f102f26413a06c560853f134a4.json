{"sha": "48897d07607532f102f26413a06c560853f134a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ODk3ZDA3NjA3NTMyZjEwMmYyNjQxM2EwNmM1NjA4NTNmMTM0YTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-11T08:23:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-11T08:23:39Z"}, "message": "Merge pull request #766 from RalfJung/sysroot\n\nSysroot consistency check", "tree": {"sha": "fbb224f8958843aaa88087617f9068c80acd88c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbb224f8958843aaa88087617f9068c80acd88c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48897d07607532f102f26413a06c560853f134a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc/2ULCRBK7hj4Ov3rIwAAdHIIAGNlk2D41HPN+lFUobFLUTi4\nPV+REG/KuVgkAkheZeYfsYs+sSkqHVVFRFBQF+SB2hz+iKY8q4P4D08GGFAAut0D\ndwpXD5lL2lwNx3l5Md7oJY5yQ03eQzT2Vlb/OjBI9cOa1LRYoWA1TwnYVH5F943o\nwplAepIBWRHABzWLXL8+yI1qRCqrfHOqzYmxwJPiTc2slmLFBl/sk2eepPdtv4AK\nBg1zBbFcWX0Tt6w81Oh960aKS+IVrdkwbwL8JxmSZJozXhw6GTRGplVrp2p5fucC\nZ8Y3PaNZ6JWj2RGBDLDYdueOamojBsuSXnqpL1z7GzFFjqcRY3SEzKeA9xtNTek=\n=LMIT\n-----END PGP SIGNATURE-----\n", "payload": "tree fbb224f8958843aaa88087617f9068c80acd88c0\nparent f090362b763ab772facccdd8cca2ccee0d42b5cd\nparent 81debbd652a0db4f527f98563703508300c34d68\nauthor Ralf Jung <post@ralfj.de> 1560241419 +0200\ncommitter GitHub <noreply@github.com> 1560241419 +0200\n\nMerge pull request #766 from RalfJung/sysroot\n\nSysroot consistency check"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48897d07607532f102f26413a06c560853f134a4", "html_url": "https://github.com/rust-lang/rust/commit/48897d07607532f102f26413a06c560853f134a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48897d07607532f102f26413a06c560853f134a4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f090362b763ab772facccdd8cca2ccee0d42b5cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f090362b763ab772facccdd8cca2ccee0d42b5cd", "html_url": "https://github.com/rust-lang/rust/commit/f090362b763ab772facccdd8cca2ccee0d42b5cd"}, {"sha": "81debbd652a0db4f527f98563703508300c34d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/81debbd652a0db4f527f98563703508300c34d68", "html_url": "https://github.com/rust-lang/rust/commit/81debbd652a0db4f527f98563703508300c34d68"}], "stats": {"total": 147, "additions": 81, "deletions": 66}, "files": [{"sha": "090694128e3ae047ead08649b0381d86f38bf524", "filename": "README.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/48897d07607532f102f26413a06c560853f134a4/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/48897d07607532f102f26413a06c560853f134a4/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=48897d07607532f102f26413a06c560853f134a4", "patch": "@@ -250,9 +250,12 @@ Several `-Z` flags are relevant for Miri:\n \n Moreover, Miri recognizes some environment variables:\n \n-* `MIRI_SYSROOT` (recognized by `miri`, `cargo miri` and the test suite)\n-  indicates the sysroot to use.\n-* `MIRI_TARGET` (recognized by the test suite) indicates which target\n+* `MIRI_LOG`, `MIRI_BACKTRACE` control logging and backtrace printing during\n+  Miri executions, also [see above][testing-miri].\n+* `MIRI_SYSROOT` (recognized by `cargo miri` and the test suite)\n+  indicates the sysroot to use.  To do the same thing with `miri`\n+  directly, use the `--sysroot` flag.\n+* `MIRI_TEST_TARGET` (recognized by the test suite) indicates which target\n   architecture to test against.  `miri` and `cargo miri` accept the `--target`\n   flag for the same purpose.\n "}, {"sha": "89df4f20544783b9b50ddde7ebab38d52ec35099", "filename": "miri", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48897d07607532f102f26413a06c560853f134a4/miri", "raw_url": "https://github.com/rust-lang/rust/raw/48897d07607532f102f26413a06c560853f134a4/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=48897d07607532f102f26413a06c560853f134a4", "patch": "@@ -55,7 +55,6 @@ build_sysroot() {\n     cargo run $CARGO_BUILD_FLAGS --bin cargo-miri -- miri setup \"$@\"\n     # Call again, to just set env var.\n     eval $(cargo run $CARGO_BUILD_FLAGS -q --bin cargo-miri -- miri setup --env \"$@\")\n-    export MIRI_SYSROOT\n }\n \n # Prepare and set MIRI_SYSROOT.  Respects `MIRI_TEST_TARGET` and takes into account\n@@ -73,7 +72,7 @@ find_sysroot() {\n             build_sysroot --target \"$MIRI_TEST_TARGET\"\n         else\n             # Assume we have a proper host libstd in $SYSROOT.\n-            true\n+            MIRI_SYSROOT=\"$SYSROOT\"\n         fi\n     else\n         # A normal toolchain.  We have to build a sysroot either way.\n@@ -83,6 +82,7 @@ find_sysroot() {\n             build_sysroot\n         fi\n     fi\n+    export MIRI_SYSROOT\n }\n \n ## Main\n@@ -140,7 +140,7 @@ run|run-debug)\n     cargo build $CARGO_BUILD_FLAGS\n     find_sysroot\n     # Then run the actual command.\n-    exec cargo run $CARGO_BUILD_FLAGS \"$@\"\n+    exec cargo run $CARGO_BUILD_FLAGS -- --sysroot \"$MIRI_SYSROOT\" \"$@\"\n     ;;\n *)\n     echo \"Unknown command: $COMMAND\""}, {"sha": "121930bccce6da1b5873c51f8ee0f6eefd4336a6", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 47, "deletions": 36, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/48897d07607532f102f26413a06c560853f134a4/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48897d07607532f102f26413a06c560853f134a4/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=48897d07607532f102f26413a06c560853f134a4", "patch": "@@ -119,6 +119,41 @@ fn list_targets() -> impl Iterator<Item=cargo_metadata::Target> {\n     package.targets.into_iter()\n }\n \n+/// Returns the path to the `miri` binary\n+fn find_miri() -> PathBuf {\n+    let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n+    path.set_file_name(\"miri\");\n+    path\n+}\n+\n+/// Make sure that the `miri` and `rustc` binary are from the same sysroot.\n+/// This can be violated e.g. when miri is locally built and installed with a different\n+/// toolchain than what is used when `cargo miri` is run.\n+fn test_sysroot_consistency() {\n+    fn get_sysroot(mut cmd: Command) -> PathBuf {\n+        let out = cmd.arg(\"--print\").arg(\"sysroot\")\n+            .output().expect(\"Failed to run rustc to get sysroot info\");\n+        assert!(out.status.success(), \"Bad status code when getting sysroot info\");\n+        let sysroot = out.stdout.lines().nth(0)\n+            .expect(\"didn't get at least one line for the sysroot\").unwrap();\n+        PathBuf::from(sysroot).canonicalize()\n+            .expect(\"Failed to canonicalize sysroot\")\n+    }\n+\n+    let rustc_sysroot = get_sysroot(Command::new(\"rustc\"));\n+    let miri_sysroot = get_sysroot(Command::new(find_miri()));\n+\n+    if rustc_sysroot != miri_sysroot {\n+        show_error(format!(\n+            \"miri was built for a different sysroot than the rustc in your current toolchain.\\n\\\n+             Make sure you use the same toolchain to run miri that you used to build it!\\n\\\n+             rustc sysroot: `{}`\\n\\\n+             miri sysroot: `{}`\",\n+             rustc_sysroot.display(), miri_sysroot.display()\n+        ));\n+    }\n+}\n+\n fn xargo_version() -> Option<(u32, u32, u32)> {\n     let out = Command::new(\"xargo\").arg(\"--version\").output().ok()?;\n     if !out.status.success() {\n@@ -265,11 +300,11 @@ path = \"lib.rs\"\n         Some(target) => target == rustc_version::version_meta().unwrap().host,\n     };\n     let sysroot = if is_host { dir.join(\"HOST\") } else { PathBuf::from(dir) };\n-    std::env::set_var(\"MIRI_SYSROOT\", &sysroot);\n+    std::env::set_var(\"MIRI_SYSROOT\", &sysroot); // pass the env var to the processes we spawn, which will turn it into \"--sysroot\" flags\n     if print_env {\n         println!(\"MIRI_SYSROOT={}\", sysroot.display());\n     } else if !ask_user {\n-        println!(\"A libstd for Miri is now available in `{}`\", sysroot.display());\n+        println!(\"A libstd for Miri is now available in `{}`.\", sysroot.display());\n     }\n }\n \n@@ -313,6 +348,9 @@ fn in_cargo_miri() {\n     };\n     let verbose = has_arg_flag(\"-v\");\n \n+    // Some basic sanity checks\n+    test_sysroot_consistency();\n+\n     // We always setup.\n     let ask = subcommand != MiriCommand::Setup;\n     setup(ask);\n@@ -385,38 +423,13 @@ fn in_cargo_miri() {\n }\n \n fn inside_cargo_rustc() {\n-    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-    let sys_root = if let Ok(sysroot) = ::std::env::var(\"MIRI_SYSROOT\") {\n-        sysroot\n-    } else if let (Some(home), Some(toolchain)) = (home, toolchain) {\n-        format!(\"{}/toolchains/{}\", home, toolchain)\n-    } else {\n-        option_env!(\"RUST_SYSROOT\")\n-            .map(|s| s.to_owned())\n-            .or_else(|| {\n-                Command::new(\"rustc\")\n-                    .arg(\"--print\")\n-                    .arg(\"sysroot\")\n-                    .output()\n-                    .ok()\n-                    .and_then(|out| String::from_utf8(out.stdout).ok())\n-                    .map(|s| s.trim().to_owned())\n-            })\n-            .expect(\"need to specify `RUST_SYSROOT` env var during miri compilation, or use rustup or multirust\")\n-    };\n+    let sysroot = std::env::var(\"MIRI_SYSROOT\").expect(\"The wrapper should have set MIRI_SYSROOT\");\n \n-    // This conditional check for the `--sysroot` flag is there so that users can call `cargo-miri`\n-    // directly without having to pass `--sysroot` or anything.\n-    let rustc_args = std::env::args().skip(2);\n-    let mut args: Vec<String> = if std::env::args().any(|s| s == \"--sysroot\") {\n-        rustc_args.collect()\n-    } else {\n-        rustc_args\n-            .chain(Some(\"--sysroot\".to_owned()))\n-            .chain(Some(sys_root))\n-            .collect()\n-    };\n+    let rustc_args = std::env::args().skip(2); // skip `cargo rustc`\n+    let mut args: Vec<String> = rustc_args\n+        .chain(Some(\"--sysroot\".to_owned()))\n+        .chain(Some(sysroot))\n+        .collect();\n     args.splice(0..0, miri::miri_default_args().iter().map(ToString::to_string));\n \n     // See if we can find the `cargo-miri` markers. Those only get added to the binary we want to\n@@ -441,9 +454,7 @@ fn inside_cargo_rustc() {\n     };\n \n     let mut command = if needs_miri {\n-        let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n-        path.set_file_name(\"miri\");\n-        Command::new(path)\n+        Command::new(find_miri())\n     } else {\n         Command::new(\"rustc\")\n     };"}, {"sha": "6346b2340b08702072f4cf340c707799c21073ef", "filename": "src/bin/miri.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/48897d07607532f102f26413a06c560853f134a4/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48897d07607532f102f26413a06c560853f134a4/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=48897d07607532f102f26413a06c560853f134a4", "patch": "@@ -100,11 +100,9 @@ fn init_late_loggers() {\n     }\n }\n \n-fn find_sysroot() -> String {\n-    if let Ok(sysroot) = std::env::var(\"MIRI_SYSROOT\") {\n-        return sysroot;\n-    }\n-\n+/// Returns the \"default sysroot\" that Miri will use if no `--sysroot` flag is set.\n+/// Should be a compile-time constant.\n+fn compile_time_sysroot() -> String {\n     // Taken from PR <https://github.com/Manishearth/rust-clippy/pull/911>.\n     let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n     let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n@@ -167,12 +165,16 @@ fn main() {\n         }\n     }\n \n-    // Determine sysroot and let rustc know about it.\n-    let sysroot_flag = String::from(\"--sysroot\");\n+    // Determine sysroot.\n+    let sysroot_flag = \"--sysroot\".to_string();\n     if !rustc_args.contains(&sysroot_flag) {\n+        // We need to *always* set a --sysroot, as the \"default\" rustc uses is\n+        // somewhere in the directory miri was built in.\n+        // If no --sysroot is given, fall back to env vars that are read at *compile-time*.\n         rustc_args.push(sysroot_flag);\n-        rustc_args.push(find_sysroot());\n+        rustc_args.push(compile_time_sysroot());\n     }\n+\n     // Finally, add the default flags all the way in the beginning, but after the binary name.\n     rustc_args.splice(1..1, miri::miri_default_args().iter().map(ToString::to_string));\n "}, {"sha": "d59be08c8e00345229ffa5593a79570500e6b166", "filename": "tests/compiletest.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/48897d07607532f102f26413a06c560853f134a4/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48897d07607532f102f26413a06c560853f134a4/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=48897d07607532f102f26413a06c560853f134a4", "patch": "@@ -25,7 +25,15 @@ fn rustc_lib_path() -> PathBuf {\n     option_env!(\"RUSTC_LIB_PATH\").unwrap().into()\n }\n \n-fn mk_config(mode: &str) -> compiletest::common::ConfigWithTemp {\n+fn run_tests(mode: &str, path: &str, target: &str, mut flags: Vec<String>) {\n+    // Some flags we always want.\n+    flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n+    flags.push(\"--edition 2018\".to_owned());\n+    if let Ok(sysroot) = std::env::var(\"MIRI_SYSROOT\") {\n+        flags.push(format!(\"--sysroot {}\", sysroot));\n+    }\n+\n+    // The rest of the configuration.\n     let mut config = compiletest::Config::default().tempdir();\n     config.mode = mode.parse().expect(\"Invalid mode\");\n     config.rustc_path = miri_path();\n@@ -35,7 +43,10 @@ fn mk_config(mode: &str) -> compiletest::common::ConfigWithTemp {\n     }\n     config.filter = env::args().nth(1);\n     config.host = get_host();\n-    config\n+    config.src_base = PathBuf::from(path);\n+    config.target = target.to_owned();\n+    config.target_rustcflags = Some(flags.join(\" \"));\n+    compiletest::run_tests(&config);\n }\n \n fn compile_fail(path: &str, target: &str, opt: bool) {\n@@ -48,20 +59,14 @@ fn compile_fail(path: &str, target: &str, opt: bool) {\n     ).green().bold());\n \n     let mut flags = Vec::new();\n-    flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n-    flags.push(\"--edition 2018\".to_owned());\n     if opt {\n         // Optimizing too aggressivley makes UB detection harder, but test at least\n         // the default value.\n         // FIXME: Opt level 3 ICEs during stack trace generation.\n         flags.push(\"-Zmir-opt-level=1\".to_owned());\n     }\n \n-    let mut config = mk_config(\"compile-fail\");\n-    config.src_base = PathBuf::from(path);\n-    config.target = target.to_owned();\n-    config.target_rustcflags = Some(flags.join(\" \"));\n-    compiletest::run_tests(&config);\n+    run_tests(\"compile-fail\", path, target, flags);\n }\n \n fn miri_pass(path: &str, target: &str, opt: bool) {\n@@ -74,17 +79,11 @@ fn miri_pass(path: &str, target: &str, opt: bool) {\n     ).green().bold());\n \n     let mut flags = Vec::new();\n-    flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n-    flags.push(\"--edition 2018\".to_owned());\n     if opt {\n         flags.push(\"-Zmir-opt-level=3\".to_owned());\n     }\n \n-    let mut config = mk_config(\"ui\");\n-    config.src_base = PathBuf::from(path);\n-    config.target = target.to_owned();\n-    config.target_rustcflags = Some(flags.join(\" \"));\n-    compiletest::run_tests(&config);\n+    run_tests(\"ui\", path, target, flags);\n }\n \n fn get_host() -> String {"}]}