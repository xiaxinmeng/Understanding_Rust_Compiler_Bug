{"sha": "76e765aeda1ad2b6901b1255a6baa434bad76f1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZTc2NWFlZGExYWQyYjY5MDFiMTI1NWE2YmFhNDM0YmFkNzZmMWI=", "commit": {"author": {"name": "cgm616", "email": "cgm616@me.com", "date": "2017-11-03T04:53:48Z"}, "committer": {"name": "cgm616", "email": "cgm616@me.com", "date": "2017-11-03T04:53:48Z"}, "message": "Switch to new method of checking access", "tree": {"sha": "a0de9455b0d7f3f6bbf2454d2c987ee7f97762c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0de9455b0d7f3f6bbf2454d2c987ee7f97762c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76e765aeda1ad2b6901b1255a6baa434bad76f1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76e765aeda1ad2b6901b1255a6baa434bad76f1b", "html_url": "https://github.com/rust-lang/rust/commit/76e765aeda1ad2b6901b1255a6baa434bad76f1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76e765aeda1ad2b6901b1255a6baa434bad76f1b/comments", "author": {"login": "cgm616", "id": 2502394, "node_id": "MDQ6VXNlcjI1MDIzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2502394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgm616", "html_url": "https://github.com/cgm616", "followers_url": "https://api.github.com/users/cgm616/followers", "following_url": "https://api.github.com/users/cgm616/following{/other_user}", "gists_url": "https://api.github.com/users/cgm616/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgm616/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgm616/subscriptions", "organizations_url": "https://api.github.com/users/cgm616/orgs", "repos_url": "https://api.github.com/users/cgm616/repos", "events_url": "https://api.github.com/users/cgm616/events{/privacy}", "received_events_url": "https://api.github.com/users/cgm616/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cgm616", "id": 2502394, "node_id": "MDQ6VXNlcjI1MDIzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2502394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgm616", "html_url": "https://github.com/cgm616", "followers_url": "https://api.github.com/users/cgm616/followers", "following_url": "https://api.github.com/users/cgm616/following{/other_user}", "gists_url": "https://api.github.com/users/cgm616/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgm616/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgm616/subscriptions", "organizations_url": "https://api.github.com/users/cgm616/orgs", "repos_url": "https://api.github.com/users/cgm616/repos", "events_url": "https://api.github.com/users/cgm616/events{/privacy}", "received_events_url": "https://api.github.com/users/cgm616/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074", "html_url": "https://github.com/rust-lang/rust/commit/ee289c9f88cceb7332b33b5cdfd48dbe0f8ac074"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "4f55162e57fa2b3c4934dcb987cbe07e3b73f822", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76e765aeda1ad2b6901b1255a6baa434bad76f1b/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e765aeda1ad2b6901b1255a6baa434bad76f1b/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=76e765aeda1ad2b6901b1255a6baa434bad76f1b", "patch": "@@ -760,8 +760,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir.body(id)).next();\n             if let hir::ItemImpl(_, _, _, _, None, ref self_ty, _) = item.node;\n             then {\n-                if implitem.vis == hir::Visibility::Public ||\n-                implitem.vis.is_pub_restricted() {\n+                if cx.access_levels.is_exported(implitem.id) {\n                 // check missing trait implementations\n                     for &(method_name, n_args, self_kind, out_type, trait_name) in &TRAIT_METHODS {\n                         if name == method_name &&"}]}