{"sha": "22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75", "node_id": "C_kwDOAAsO6NoAKDIyYjJjMmZkZjc1NDI2MDAzYTE3MGMwZTBiNmU5NWMwYWQ3YzRhNzU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-21T13:07:48Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-21T13:07:48Z"}, "message": "Simplify", "tree": {"sha": "962a2542ea241f71a895ba54919d49febd9c111a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/962a2542ea241f71a895ba54919d49febd9c111a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75", "html_url": "https://github.com/rust-lang/rust/commit/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "539b0c258226cae1b2fa14bfc2397de2c69bf4ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/539b0c258226cae1b2fa14bfc2397de2c69bf4ef", "html_url": "https://github.com/rust-lang/rust/commit/539b0c258226cae1b2fa14bfc2397de2c69bf4ef"}], "stats": {"total": 149, "additions": 71, "deletions": 78}, "files": [{"sha": "526e90bd0b4f8f0df09398adab97f008ba2909ca", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75", "patch": "@@ -3024,7 +3024,7 @@ impl Callable {\n }\n \n /// For IDE only\n-#[derive(Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ScopeDef {\n     ModuleDef(ModuleDef),\n     MacroDef(MacroDef),"}, {"sha": "53f5ad49921faf083502e4b3f5907b394adbf1e9", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75", "patch": "@@ -84,7 +84,7 @@ impl Completions {\n         &mut self,\n         ctx: &CompletionContext,\n         local_name: hir::Name,\n-        resolution: &hir::ScopeDef,\n+        resolution: hir::ScopeDef,\n     ) {\n         if ctx.is_scope_def_hidden(resolution) {\n             cov_mark::hit!(qualified_path_doc_hidden);"}, {"sha": "4082414f029f2ecc456579ec40eb80035a8808a2", "filename": "crates/ide_completion/src/completions/lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75", "patch": "@@ -35,7 +35,7 @@ pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext)\n     ctx.scope.process_all_names(&mut |name, res| {\n         if let ScopeDef::GenericParam(hir::GenericParam::LifetimeParam(_)) = res {\n             if param_lifetime != Some(&*name.to_smol_str()) {\n-                acc.add_resolution(ctx, name, &res);\n+                acc.add_resolution(ctx, name, res);\n             }\n         }\n     });\n@@ -51,7 +51,7 @@ pub(crate) fn complete_label(acc: &mut Completions, ctx: &CompletionContext) {\n     }\n     ctx.scope.process_all_names(&mut |name, res| {\n         if let ScopeDef::Label(_) = res {\n-            acc.add_resolution(ctx, name, &res);\n+            acc.add_resolution(ctx, name, res);\n         }\n     });\n }"}, {"sha": "a140ca4239bfdeda63cbfd89eb7ce1c4b6650600", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75", "patch": "@@ -59,7 +59,7 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n             _ => false,\n         };\n         if add_resolution {\n-            acc.add_resolution(ctx, name, &res);\n+            acc.add_resolution(ctx, name, res);\n         }\n     });\n }"}, {"sha": "1af7ac95206e2016555e144c9649c063af77e76e", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                         }\n                     }\n                     if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = def {\n-                        acc.add_resolution(ctx, name, &def);\n+                        acc.add_resolution(ctx, name, def);\n                     }\n                 }\n             }\n@@ -64,7 +64,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                         .next()\n                     {\n                         if let Some(name) = next.name(ctx.db) {\n-                            acc.add_resolution(ctx, name, &ScopeDef::ModuleDef(next.into()));\n+                            acc.add_resolution(ctx, name, ScopeDef::ModuleDef(next.into()));\n                         }\n                     }\n                 }\n@@ -80,7 +80,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                         _ => false,\n                     };\n                     if add_resolution {\n-                        acc.add_resolution(ctx, name, &def);\n+                        acc.add_resolution(ctx, name, def);\n                     }\n                 }\n             }\n@@ -147,14 +147,12 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 };\n \n                 if add_resolution {\n-                    acc.add_resolution(ctx, name, &def);\n+                    acc.add_resolution(ctx, name, def);\n                 }\n             }\n         }\n         hir::PathResolution::Def(\n-            def\n-            @\n-            (hir::ModuleDef::Adt(_)\n+            def @ (hir::ModuleDef::Adt(_)\n             | hir::ModuleDef::TypeAlias(_)\n             | hir::ModuleDef::BuiltinType(_)),\n         ) => {"}, {"sha": "e7980c12d77dc4e530d1ae7ed81214871abb5285", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75", "patch": "@@ -24,7 +24,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         cov_mark::hit!(unqualified_path_only_modules_in_import);\n         ctx.process_all_names(&mut |name, res| {\n             if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n-                acc.add_resolution(ctx, name, &res);\n+                acc.add_resolution(ctx, name, res);\n             }\n         });\n \n@@ -43,7 +43,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n                     _ => false,\n                 };\n                 if add_resolution {\n-                    acc.add_resolution(ctx, name, &res);\n+                    acc.add_resolution(ctx, name, res);\n                 }\n             });\n             return;\n@@ -61,7 +61,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n                     }\n                 }\n                 if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n-                    acc.add_resolution(ctx, name, &res);\n+                    acc.add_resolution(ctx, name, res);\n                 }\n             });\n             return;\n@@ -76,7 +76,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n                     _ => false,\n                 };\n                 if add_resolution {\n-                    acc.add_resolution(ctx, name, &res);\n+                    acc.add_resolution(ctx, name, res);\n                 }\n             });\n             return;\n@@ -134,7 +134,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n             _ => true,\n         };\n         if add_resolution {\n-            acc.add_resolution(ctx, name, &res);\n+            acc.add_resolution(ctx, name, res);\n         }\n     });\n }"}, {"sha": "d0ed98898986cc59065acab67e088981662dfccc", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75", "patch": "@@ -278,7 +278,7 @@ impl<'a> CompletionContext<'a> {\n         self.is_visible_impl(&item.visibility(self.db), &item.attrs(self.db), item.krate(self.db))\n     }\n \n-    pub(crate) fn is_scope_def_hidden(&self, scope_def: &ScopeDef) -> bool {\n+    pub(crate) fn is_scope_def_hidden(&self, scope_def: ScopeDef) -> bool {\n         if let (Some(attrs), Some(krate)) = (scope_def.attrs(self.db), scope_def.krate(self.db)) {\n             return self.is_doc_hidden(&attrs, krate);\n         }\n@@ -303,7 +303,7 @@ impl<'a> CompletionContext<'a> {\n     /// A version of [`SemanticsScope::process_all_names`] that filters out `#[doc(hidden)]` items.\n     pub(crate) fn process_all_names(&self, f: &mut dyn FnMut(Name, ScopeDef)) {\n         self.scope.process_all_names(&mut |name, def| {\n-            if self.is_scope_def_hidden(&def) {\n+            if self.is_scope_def_hidden(def) {\n                 return;\n             }\n \n@@ -367,7 +367,7 @@ impl<'a> CompletionContext<'a> {\n             parse.reparse(&edit).tree()\n         };\n         let fake_ident_token =\n-            file_with_fake_ident.syntax().token_at_offset(offset).right_biased().unwrap();\n+            file_with_fake_ident.syntax().token_at_offset(offset).right_biased()?;\n \n         let original_token = original_file.syntax().token_at_offset(offset).left_biased()?;\n         let token = sema.descend_into_macros_single(original_token.clone());"}, {"sha": "f26fc3ec1fbaa20d79a258c42e3774bc3a19911b", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 53, "deletions": 58, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=22b2c2fdf75426003a170c0e0b6e95c0ad7c4a75", "patch": "@@ -11,7 +11,7 @@ pub(crate) mod struct_literal;\n \n mod builder_ext;\n \n-use hir::{AsAssocItem, HasAttrs, HirDisplay};\n+use hir::{AsAssocItem, HasAttrs, HirDisplay, ScopeDef};\n use ide_db::{\n     helpers::{item_name, SnippetCap},\n     RootDatabase, SymbolKind,\n@@ -128,7 +128,7 @@ pub(crate) fn render_tuple_field(\n pub(crate) fn render_resolution(\n     ctx: RenderContext<'_>,\n     local_name: hir::Name,\n-    resolution: &hir::ScopeDef,\n+    resolution: ScopeDef,\n ) -> Option<CompletionItem> {\n     render_resolution_(ctx, local_name, None, resolution)\n }\n@@ -137,80 +137,75 @@ pub(crate) fn render_resolution_with_import(\n     ctx: RenderContext<'_>,\n     import_edit: ImportEdit,\n ) -> Option<CompletionItem> {\n-    let resolution = hir::ScopeDef::from(import_edit.import.original_item);\n+    let resolution = ScopeDef::from(import_edit.import.original_item);\n     let local_name = match resolution {\n-        hir::ScopeDef::ModuleDef(hir::ModuleDef::Function(f)) => f.name(ctx.completion.db),\n-        hir::ScopeDef::ModuleDef(hir::ModuleDef::Const(c)) => c.name(ctx.completion.db)?,\n-        hir::ScopeDef::ModuleDef(hir::ModuleDef::TypeAlias(t)) => t.name(ctx.completion.db),\n+        ScopeDef::ModuleDef(hir::ModuleDef::Function(f)) => f.name(ctx.completion.db),\n+        ScopeDef::ModuleDef(hir::ModuleDef::Const(c)) => c.name(ctx.completion.db)?,\n+        ScopeDef::ModuleDef(hir::ModuleDef::TypeAlias(t)) => t.name(ctx.completion.db),\n         _ => item_name(ctx.db(), import_edit.import.original_item)?,\n     };\n-    render_resolution_(ctx, local_name, Some(import_edit), &resolution)\n+    render_resolution_(ctx, local_name, Some(import_edit), resolution)\n }\n \n fn render_resolution_(\n     ctx: RenderContext<'_>,\n     local_name: hir::Name,\n     import_to_add: Option<ImportEdit>,\n-    resolution: &hir::ScopeDef,\n+    resolution: ScopeDef,\n ) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_resolution\");\n     use hir::ModuleDef::*;\n \n     let kind = match resolution {\n-        hir::ScopeDef::ModuleDef(Function(func)) => {\n-            return render_fn(ctx, import_to_add, Some(local_name), *func);\n+        ScopeDef::ModuleDef(Function(func)) => {\n+            return render_fn(ctx, import_to_add, Some(local_name), func)\n         }\n-        hir::ScopeDef::ModuleDef(Variant(_)) if ctx.completion.pattern_ctx.is_some() => {\n-            CompletionItemKind::SymbolKind(SymbolKind::Variant)\n+        ScopeDef::ModuleDef(Variant(var)) if ctx.completion.pattern_ctx.is_none() => {\n+            return Some(render_variant(ctx, import_to_add, Some(local_name), var, None))\n         }\n-        hir::ScopeDef::ModuleDef(Variant(var)) => {\n-            let item = render_variant(ctx, import_to_add, Some(local_name), *var, None);\n-            return Some(item);\n-        }\n-        hir::ScopeDef::MacroDef(mac) => {\n-            let item = render_macro(ctx, import_to_add, local_name, *mac);\n+        ScopeDef::MacroDef(mac) => {\n+            let item = render_macro(ctx, import_to_add, local_name, mac);\n             return item;\n         }\n+        ScopeDef::Unknown => {\n+            let mut item = CompletionItem::new(\n+                CompletionItemKind::UnresolvedReference,\n+                ctx.source_range(),\n+                local_name.to_smol_str(),\n+            );\n+            if let Some(import_to_add) = import_to_add {\n+                item.add_import(import_to_add);\n+            }\n+            return Some(item.build());\n+        }\n \n-        hir::ScopeDef::ModuleDef(Module(..)) => CompletionItemKind::SymbolKind(SymbolKind::Module),\n-        hir::ScopeDef::ModuleDef(Adt(adt)) => CompletionItemKind::SymbolKind(match adt {\n+        ScopeDef::ModuleDef(Variant(_)) => CompletionItemKind::SymbolKind(SymbolKind::Variant),\n+        ScopeDef::ModuleDef(Module(..)) => CompletionItemKind::SymbolKind(SymbolKind::Module),\n+        ScopeDef::ModuleDef(Adt(adt)) => CompletionItemKind::SymbolKind(match adt {\n             hir::Adt::Struct(_) => SymbolKind::Struct,\n             hir::Adt::Union(_) => SymbolKind::Union,\n             hir::Adt::Enum(_) => SymbolKind::Enum,\n         }),\n-        hir::ScopeDef::ModuleDef(Const(..)) => CompletionItemKind::SymbolKind(SymbolKind::Const),\n-        hir::ScopeDef::ModuleDef(Static(..)) => CompletionItemKind::SymbolKind(SymbolKind::Static),\n-        hir::ScopeDef::ModuleDef(Trait(..)) => CompletionItemKind::SymbolKind(SymbolKind::Trait),\n-        hir::ScopeDef::ModuleDef(TypeAlias(..)) => {\n-            CompletionItemKind::SymbolKind(SymbolKind::TypeAlias)\n-        }\n-        hir::ScopeDef::ModuleDef(BuiltinType(..)) => CompletionItemKind::BuiltinType,\n-        hir::ScopeDef::GenericParam(param) => CompletionItemKind::SymbolKind(match param {\n+        ScopeDef::ModuleDef(Const(..)) => CompletionItemKind::SymbolKind(SymbolKind::Const),\n+        ScopeDef::ModuleDef(Static(..)) => CompletionItemKind::SymbolKind(SymbolKind::Static),\n+        ScopeDef::ModuleDef(Trait(..)) => CompletionItemKind::SymbolKind(SymbolKind::Trait),\n+        ScopeDef::ModuleDef(TypeAlias(..)) => CompletionItemKind::SymbolKind(SymbolKind::TypeAlias),\n+        ScopeDef::ModuleDef(BuiltinType(..)) => CompletionItemKind::BuiltinType,\n+        ScopeDef::GenericParam(param) => CompletionItemKind::SymbolKind(match param {\n             hir::GenericParam::TypeParam(_) => SymbolKind::TypeParam,\n             hir::GenericParam::LifetimeParam(_) => SymbolKind::LifetimeParam,\n             hir::GenericParam::ConstParam(_) => SymbolKind::ConstParam,\n         }),\n-        hir::ScopeDef::Local(..) => CompletionItemKind::SymbolKind(SymbolKind::Local),\n-        hir::ScopeDef::Label(..) => CompletionItemKind::SymbolKind(SymbolKind::Label),\n-        hir::ScopeDef::AdtSelfType(..) | hir::ScopeDef::ImplSelfType(..) => {\n+        ScopeDef::Local(..) => CompletionItemKind::SymbolKind(SymbolKind::Local),\n+        ScopeDef::Label(..) => CompletionItemKind::SymbolKind(SymbolKind::Label),\n+        ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => {\n             CompletionItemKind::SymbolKind(SymbolKind::SelfParam)\n         }\n-        hir::ScopeDef::Unknown => {\n-            let mut item = CompletionItem::new(\n-                CompletionItemKind::UnresolvedReference,\n-                ctx.source_range(),\n-                local_name.to_smol_str(),\n-            );\n-            if let Some(import_to_add) = import_to_add {\n-                item.add_import(import_to_add);\n-            }\n-            return Some(item.build());\n-        }\n     };\n \n     let local_name = local_name.to_smol_str();\n     let mut item = CompletionItem::new(kind, ctx.source_range(), local_name.clone());\n-    if let hir::ScopeDef::Local(local) = resolution {\n+    if let ScopeDef::Local(local) = resolution {\n         let ty = local.ty(ctx.db());\n         if !ty.is_unknown() {\n             item.detail(ty.display(ctx.db()).to_string());\n@@ -236,8 +231,8 @@ fn render_resolution_(\n     {\n         if let Some(cap) = ctx.snippet_cap() {\n             let has_non_default_type_params = match resolution {\n-                hir::ScopeDef::ModuleDef(Adt(it)) => it.has_non_default_type_params(ctx.db()),\n-                hir::ScopeDef::ModuleDef(TypeAlias(it)) => it.has_non_default_type_params(ctx.db()),\n+                ScopeDef::ModuleDef(Adt(it)) => it.has_non_default_type_params(ctx.db()),\n+                ScopeDef::ModuleDef(TypeAlias(it)) => it.has_non_default_type_params(ctx.db()),\n                 _ => false,\n             };\n             if has_non_default_type_params {\n@@ -257,26 +252,26 @@ fn render_resolution_(\n     Some(item.build())\n }\n \n-fn scope_def_docs(db: &RootDatabase, resolution: &hir::ScopeDef) -> Option<hir::Documentation> {\n+fn scope_def_docs(db: &RootDatabase, resolution: ScopeDef) -> Option<hir::Documentation> {\n     use hir::ModuleDef::*;\n     match resolution {\n-        hir::ScopeDef::ModuleDef(Module(it)) => it.docs(db),\n-        hir::ScopeDef::ModuleDef(Adt(it)) => it.docs(db),\n-        hir::ScopeDef::ModuleDef(Variant(it)) => it.docs(db),\n-        hir::ScopeDef::ModuleDef(Const(it)) => it.docs(db),\n-        hir::ScopeDef::ModuleDef(Static(it)) => it.docs(db),\n-        hir::ScopeDef::ModuleDef(Trait(it)) => it.docs(db),\n-        hir::ScopeDef::ModuleDef(TypeAlias(it)) => it.docs(db),\n+        ScopeDef::ModuleDef(Module(it)) => it.docs(db),\n+        ScopeDef::ModuleDef(Adt(it)) => it.docs(db),\n+        ScopeDef::ModuleDef(Variant(it)) => it.docs(db),\n+        ScopeDef::ModuleDef(Const(it)) => it.docs(db),\n+        ScopeDef::ModuleDef(Static(it)) => it.docs(db),\n+        ScopeDef::ModuleDef(Trait(it)) => it.docs(db),\n+        ScopeDef::ModuleDef(TypeAlias(it)) => it.docs(db),\n         _ => None,\n     }\n }\n \n-fn scope_def_is_deprecated(ctx: &RenderContext<'_>, resolution: &hir::ScopeDef) -> bool {\n+fn scope_def_is_deprecated(ctx: &RenderContext<'_>, resolution: ScopeDef) -> bool {\n     match resolution {\n-        hir::ScopeDef::ModuleDef(it) => ctx.is_deprecated_assoc_item(*it),\n-        hir::ScopeDef::MacroDef(it) => ctx.is_deprecated(*it),\n-        hir::ScopeDef::GenericParam(it) => ctx.is_deprecated(*it),\n-        hir::ScopeDef::AdtSelfType(it) => ctx.is_deprecated(*it),\n+        ScopeDef::ModuleDef(it) => ctx.is_deprecated_assoc_item(it),\n+        ScopeDef::MacroDef(it) => ctx.is_deprecated(it),\n+        ScopeDef::GenericParam(it) => ctx.is_deprecated(it),\n+        ScopeDef::AdtSelfType(it) => ctx.is_deprecated(it),\n         _ => false,\n     }\n }"}]}