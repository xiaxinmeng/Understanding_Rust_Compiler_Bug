{"sha": "7280f3d28aa139cec0c75072a3e66294b7f99b59", "node_id": "C_kwDOAAsO6NoAKDcyODBmM2QyOGFhMTM5Y2VjMGM3NTA3MmEzZTY2Mjk0YjdmOTliNTk", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-10-22T00:44:35Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-10-22T00:44:35Z"}, "message": "Truncate thread names on Linux and Apple targets\n\nThese targets have system limits on the thread names, 16 and 64 bytes\nrespectively, and `pthread_setname_np` returns an error if the name is\nlonger. However, we're not in a context that can propagate errors when\nwe call this, and we used to implicitly truncate on Linux with `prctl`,\nso now we manually truncate these names ahead of time.", "tree": {"sha": "e70a206bd8325936ae51c36d28f54ae5c4029435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e70a206bd8325936ae51c36d28f54ae5c4029435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7280f3d28aa139cec0c75072a3e66294b7f99b59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7280f3d28aa139cec0c75072a3e66294b7f99b59", "html_url": "https://github.com/rust-lang/rust/commit/7280f3d28aa139cec0c75072a3e66294b7f99b59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7280f3d28aa139cec0c75072a3e66294b7f99b59/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e2c06a8df3187980801962015a88657abd033d", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e2c06a8df3187980801962015a88657abd033d", "html_url": "https://github.com/rust-lang/rust/commit/57e2c06a8df3187980801962015a88657abd033d"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "6a533854fad3d723894ad4037575789351d32cb4", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7280f3d28aa139cec0c75072a3e66294b7f99b59/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7280f3d28aa139cec0c75072a3e66294b7f99b59/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=7280f3d28aa139cec0c75072a3e66294b7f99b59", "patch": "@@ -132,8 +132,11 @@ impl Thread {\n \n     #[cfg(target_os = \"linux\")]\n     pub fn set_name(name: &CStr) {\n+        const TASK_COMM_LEN: usize = 16;\n+\n         unsafe {\n             // Available since glibc 2.12, musl 1.1.16, and uClibc 1.0.20.\n+            let name = truncate_cstr(name, TASK_COMM_LEN);\n             libc::pthread_setname_np(libc::pthread_self(), name.as_ptr());\n         }\n     }\n@@ -148,6 +151,7 @@ impl Thread {\n     #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n     pub fn set_name(name: &CStr) {\n         unsafe {\n+            let name = truncate_cstr(name, libc::MAXTHREADNAMESIZE);\n             libc::pthread_setname_np(name.as_ptr());\n         }\n     }\n@@ -276,6 +280,20 @@ impl Drop for Thread {\n     }\n }\n \n+#[cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n+fn truncate_cstr(cstr: &CStr, max_with_nul: usize) -> crate::borrow::Cow<'_, CStr> {\n+    use crate::{borrow::Cow, ffi::CString};\n+\n+    if cstr.to_bytes_with_nul().len() > max_with_nul {\n+        let bytes = cstr.to_bytes()[..max_with_nul - 1].to_vec();\n+        // SAFETY: the non-nul bytes came straight from a CStr.\n+        // (CString will add the terminating nul.)\n+        Cow::Owned(unsafe { CString::from_vec_unchecked(bytes) })\n+    } else {\n+        Cow::Borrowed(cstr)\n+    }\n+}\n+\n pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     cfg_if::cfg_if! {\n         if #[cfg(any(\n@@ -902,3 +920,28 @@ fn min_stack_size(_: *const libc::pthread_attr_t) -> usize {\n fn min_stack_size(_: *const libc::pthread_attr_t) -> usize {\n     2048 // just a guess\n }\n+\n+#[test]\n+#[cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n+fn test_named_thread_truncation() {\n+    use crate::thread::{self, Builder};\n+\n+    let long_name = crate::iter::once(\"test_named_thread_truncation\")\n+        .chain(crate::iter::repeat(\" yada\").take(100))\n+        .collect::<String>();\n+\n+    let result = Builder::new().name(long_name.clone()).spawn(move || {\n+        // Rust remembers the full thread name itself.\n+        assert_eq!(thread::current().name(), Some(long_name.as_str()));\n+\n+        // But the kernel is limited -- make sure we successfully set a truncation.\n+        let mut buf = vec![0u8; long_name.len() + 1];\n+        unsafe {\n+            libc::pthread_getname_np(libc::pthread_self(), buf.as_mut_ptr().cast(), buf.len());\n+        }\n+        let cstr = CStr::from_bytes_until_nul(&buf).unwrap();\n+        assert!(cstr.to_bytes().len() > 0);\n+        assert!(long_name.as_bytes().starts_with(cstr.to_bytes()));\n+    });\n+    result.unwrap().join().unwrap();\n+}"}]}