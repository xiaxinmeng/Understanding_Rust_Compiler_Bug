{"sha": "2df14c370133781f4b5aa31b0168138cba0009b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZjE0YzM3MDEzMzc4MWY0YjVhYTMxYjAxNjgxMzhjYmEwMDA5Yjc=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2019-02-17T04:28:16Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2019-02-18T05:53:08Z"}, "message": "Add a lint to warn on `T: Drop` bounds\n\n**What it does:** Checks for generics with `std::ops::Drop` as bounds.\n\n**Why is this bad?** `Drop` bounds do not really accomplish anything.\nA type may have compiler-generated drop glue without implementing the\n`Drop` trait itself. The `Drop` trait also only has one method,\n`Drop::drop`, and that function is by fiat not callable in user code.\nSo there is really no use case for using `Drop` in trait bounds.\n\n**Known problems:** None.\n\n**Example:**\n```rust\nfn foo<T: Drop>() {}\n```", "tree": {"sha": "97070bbf3da380e6d44bf4ac5abd67a7fc475437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97070bbf3da380e6d44bf4ac5abd67a7fc475437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2df14c370133781f4b5aa31b0168138cba0009b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2df14c370133781f4b5aa31b0168138cba0009b7", "html_url": "https://github.com/rust-lang/rust/commit/2df14c370133781f4b5aa31b0168138cba0009b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2df14c370133781f4b5aa31b0168138cba0009b7/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a71acac1da7eaf667ab90a1d65d10e5cc4b80191", "url": "https://api.github.com/repos/rust-lang/rust/commits/a71acac1da7eaf667ab90a1d65d10e5cc4b80191", "html_url": "https://github.com/rust-lang/rust/commit/a71acac1da7eaf667ab90a1d65d10e5cc4b80191"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "fea53f394382d0b1a59a542f02ed3013c9fb749f", "filename": "clippy_lints/src/drop_bounds.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/2df14c370133781f4b5aa31b0168138cba0009b7/clippy_lints%2Fsrc%2Fdrop_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df14c370133781f4b5aa31b0168138cba0009b7/clippy_lints%2Fsrc%2Fdrop_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_bounds.rs?ref=2df14c370133781f4b5aa31b0168138cba0009b7", "patch": "@@ -0,0 +1,71 @@\n+use crate::utils::{match_def_path, paths, span_lint};\n+use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+\n+/// **What it does:** Checks for generics with `std::ops::Drop` as bounds.\n+///\n+/// **Why is this bad?** `Drop` bounds do not really accomplish anything.\n+/// A type may have compiler-generated drop glue without implementing the\n+/// `Drop` trait itself. The `Drop` trait also only has one method,\n+/// `Drop::drop`, and that function is by fiat not callable in user code.\n+/// So there is really no use case for using `Drop` in trait bounds.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn foo<T: Drop>() {}\n+/// ```\n+declare_clippy_lint! {\n+    pub DROP_BOUNDS,\n+    correctness,\n+    \"Bounds of the form `T: Drop` are useless\"\n+}\n+\n+const DROP_BOUNDS_SUMMARY: &str = \"Bounds of the form `T: Drop` are useless. \\\n+                                   Use `std::mem::needs_drop` to detect if a type has drop glue.\";\n+\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DROP_BOUNDS)\n+    }\n+\n+    fn name(&self) -> &'static str {\n+        \"DropBounds\"\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_generic_param(&mut self, cx: &rustc::lint::LateContext<'a, 'tcx>, p: &'tcx GenericParam) {\n+        for bound in &p.bounds {\n+            lint_bound(cx, bound);\n+        }\n+    }\n+    fn check_where_predicate(&mut self, cx: &rustc::lint::LateContext<'a, 'tcx>, p: &'tcx WherePredicate) {\n+        if let WherePredicate::BoundPredicate(WhereBoundPredicate { bounds, .. }) = p {\n+            for bound in bounds {\n+                lint_bound(cx, bound);\n+            }\n+        }\n+    }\n+}\n+\n+fn lint_bound<'a, 'tcx>(cx: &rustc::lint::LateContext<'a, 'tcx>, bound: &'tcx GenericBound) {\n+    if_chain! {\n+        if let GenericBound::Trait(t, _) = bound;\n+        if let Some(def_id) = t.trait_ref.path.def.opt_def_id();\n+        if match_def_path(cx.tcx, def_id, &paths::DROP_TRAIT);\n+        then {\n+            span_lint(\n+                cx,\n+                DROP_BOUNDS,\n+                t.span,\n+                DROP_BOUNDS_SUMMARY\n+            );\n+        }\n+    }\n+}"}, {"sha": "1e2e861ea27fe5fb5611d1528808261d1a398a4b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2df14c370133781f4b5aa31b0168138cba0009b7/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df14c370133781f4b5aa31b0168138cba0009b7/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=2df14c370133781f4b5aa31b0168138cba0009b7", "patch": "@@ -144,6 +144,7 @@ pub mod derive;\n pub mod doc;\n pub mod double_comparison;\n pub mod double_parens;\n+pub mod drop_bounds;\n pub mod drop_forget_ref;\n pub mod duration_subsec;\n pub mod else_if_without_else;\n@@ -467,6 +468,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box derive::Derive);\n     reg.register_late_lint_pass(box types::CharLitAsU8);\n     reg.register_late_lint_pass(box vec::Pass);\n+    reg.register_late_lint_pass(box drop_bounds::Pass);\n     reg.register_late_lint_pass(box drop_forget_ref::Pass);\n     reg.register_late_lint_pass(box empty_enum::EmptyEnum);\n     reg.register_late_lint_pass(box types::AbsurdExtremeComparisons);\n@@ -653,6 +655,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         derive::DERIVE_HASH_XOR_EQ,\n         double_comparison::DOUBLE_COMPARISONS,\n         double_parens::DOUBLE_PARENS,\n+        drop_bounds::DROP_BOUNDS,\n         drop_forget_ref::DROP_COPY,\n         drop_forget_ref::DROP_REF,\n         drop_forget_ref::FORGET_COPY,\n@@ -1017,6 +1020,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         copies::IFS_SAME_COND,\n         copies::IF_SAME_THEN_ELSE,\n         derive::DERIVE_HASH_XOR_EQ,\n+        drop_bounds::DROP_BOUNDS,\n         drop_forget_ref::DROP_COPY,\n         drop_forget_ref::DROP_REF,\n         drop_forget_ref::FORGET_COPY,"}, {"sha": "4108732653ff3619923a246c81f051d9b34a8aa1", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2df14c370133781f4b5aa31b0168138cba0009b7/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df14c370133781f4b5aa31b0168138cba0009b7/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=2df14c370133781f4b5aa31b0168138cba0009b7", "patch": "@@ -24,6 +24,7 @@ pub const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"der\n pub const DISPLAY_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n+pub const DROP_TRAIT: [&str; 4] = [\"core\", \"ops\", \"drop\", \"Drop\"];\n pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n pub const EARLY_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"EarlyContext\"];\n pub const FMT_ARGUMENTS_NEWV1: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];"}, {"sha": "baa74037c1a422d5f4a30b59d5e3f8740ef5282b", "filename": "tests/ui/drop_bounds.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2df14c370133781f4b5aa31b0168138cba0009b7/tests%2Fui%2Fdrop_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df14c370133781f4b5aa31b0168138cba0009b7/tests%2Fui%2Fdrop_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_bounds.rs?ref=2df14c370133781f4b5aa31b0168138cba0009b7", "patch": "@@ -0,0 +1,4 @@\n+#![allow(unused)]\n+fn foo<T: Drop>() {}\n+fn bar<T>() where T: Drop {}\n+fn main() {}"}, {"sha": "15b6ea6a7957e6a026aafe228f45d72b09e70384", "filename": "tests/ui/drop_bounds.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2df14c370133781f4b5aa31b0168138cba0009b7/tests%2Fui%2Fdrop_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2df14c370133781f4b5aa31b0168138cba0009b7/tests%2Fui%2Fdrop_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_bounds.stderr?ref=2df14c370133781f4b5aa31b0168138cba0009b7", "patch": "@@ -0,0 +1,16 @@\n+error: Bounds of the form `T: Drop` are useless. Use `std::mem::needs_drop` to detect if a type has drop glue.\n+  --> $DIR/drop_bounds.rs:2:11\n+   |\n+LL | fn foo<T: Drop>() {}\n+   |           ^^^^\n+   |\n+   = note: #[deny(clippy::drop_bounds)] on by default\n+\n+error: Bounds of the form `T: Drop` are useless. Use `std::mem::needs_drop` to detect if a type has drop glue.\n+  --> $DIR/drop_bounds.rs:3:22\n+   |\n+LL | fn bar<T>() where T: Drop {}\n+   |                      ^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}