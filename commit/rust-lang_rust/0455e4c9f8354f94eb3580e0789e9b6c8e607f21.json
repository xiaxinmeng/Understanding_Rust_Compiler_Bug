{"sha": "0455e4c9f8354f94eb3580e0789e9b6c8e607f21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NTVlNGM5ZjgzNTRmOTRlYjM1ODBlMDc4OWU5YjZjOGU2MDdmMjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-01T20:42:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-01T20:42:16Z"}, "message": "auto merge of #10756 : thestinger/rust/transmute, r=alexcrichton", "tree": {"sha": "2129f406f3dc0ed5c6406ee94af9a6aff4c3d35e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2129f406f3dc0ed5c6406ee94af9a6aff4c3d35e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0455e4c9f8354f94eb3580e0789e9b6c8e607f21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0455e4c9f8354f94eb3580e0789e9b6c8e607f21", "html_url": "https://github.com/rust-lang/rust/commit/0455e4c9f8354f94eb3580e0789e9b6c8e607f21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0455e4c9f8354f94eb3580e0789e9b6c8e607f21/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ac48785d6fb34d70729d24967840d3e31bf39fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac48785d6fb34d70729d24967840d3e31bf39fc", "html_url": "https://github.com/rust-lang/rust/commit/9ac48785d6fb34d70729d24967840d3e31bf39fc"}, {"sha": "b4a1733fd23530e10545ea999557fa3b5e45c25b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a1733fd23530e10545ea999557fa3b5e45c25b", "html_url": "https://github.com/rust-lang/rust/commit/b4a1733fd23530e10545ea999557fa3b5e45c25b"}], "stats": {"total": 10, "additions": 2, "deletions": 8}, "files": [{"sha": "d4fa7252f77f0a290d440025270c4befb81e5271", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0455e4c9f8354f94eb3580e0789e9b6c8e607f21/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0455e4c9f8354f94eb3580e0789e9b6c8e607f21/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=0455e4c9f8354f94eb3580e0789e9b6c8e607f21", "patch": "@@ -485,7 +485,7 @@ impl<T:Freeze + Send> RWArc<T> {\n             // Whatever region the input reference had, it will be safe to use\n             // the same region for the output reference. (The only 'unsafe' part\n             // of this cast is removing the mutability.)\n-            let new_data = cast::transmute_immut(data);\n+            let new_data = data;\n             // Downgrade ensured the token belonged to us. Just a sanity check.\n             assert!(borrow::ref_eq(&(*state).data, new_data));\n             // Produce new token"}, {"sha": "08276082ebba52eab29764d88a332d69d7c826b0", "filename": "src/libstd/cast.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0455e4c9f8354f94eb3580e0789e9b6c8e607f21/src%2Flibstd%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0455e4c9f8354f94eb3580e0789e9b6c8e607f21/src%2Flibstd%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcast.rs?ref=0455e4c9f8354f94eb3580e0789e9b6c8e607f21", "patch": "@@ -62,12 +62,6 @@ pub unsafe fn transmute<L, G>(thing: L) -> G {\n #[inline]\n pub unsafe fn transmute_mut<'a,T>(ptr: &'a T) -> &'a mut T { transmute(ptr) }\n \n-/// Coerce a mutable reference to be immutable.\n-#[inline]\n-pub unsafe fn transmute_immut<'a,T>(ptr: &'a mut T) -> &'a T {\n-    transmute(ptr)\n-}\n-\n /// Coerce a borrowed pointer to have an arbitrary associated region.\n #[inline]\n pub unsafe fn transmute_region<'a,'b,T>(ptr: &'a T) -> &'b T {"}, {"sha": "420c1d69d1c5dd3ff23367e27262f495cc5666d7", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0455e4c9f8354f94eb3580e0789e9b6c8e607f21/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0455e4c9f8354f94eb3580e0789e9b6c8e607f21/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=0455e4c9f8354f94eb3580e0789e9b6c8e607f21", "patch": "@@ -420,7 +420,7 @@ impl<T:Send> Exclusive<T> {\n \n     #[inline]\n     pub unsafe fn with_imm<U>(&self, f: |x: &T| -> U) -> U {\n-        self.with(|x| f(cast::transmute_immut(x)))\n+        self.with(|x| f(x))\n     }\n \n     #[inline]"}]}