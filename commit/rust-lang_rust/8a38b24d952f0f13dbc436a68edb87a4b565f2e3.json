{"sha": "8a38b24d952f0f13dbc436a68edb87a4b565f2e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMzhiMjRkOTUyZjBmMTNkYmM0MzZhNjhlZGI4N2E0YjU2NWYyZTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-11-04T23:49:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-11-05T17:50:23Z"}, "message": "Rollup merge of #37501 - alexcrichton:windows-subsystem, r=brson\n\nrustc: Add knowledge of Windows subsystems.\n\nThis commit is an implementation of [RFC 1665] which adds support for the\n`#![windows_subsystem]` attribute. This attribute allows specifying either the\n\"windows\" or \"console\" subsystems on Windows to the linker.\n\n[RFC 1665]: https://github.com/rust-lang/rfcs/blob/master/text/1665-windows-subsystem.md\n\nPreviously all Rust executables were compiled as the \"console\" subsystem which\nmeant that if you wanted a graphical application it would erroneously pop up a\nconsole whenever opened. When compiling an application, however, this is\nundesired behavior and the \"windows\" subsystem is used instead to have control\nover user interactions.\n\nThis attribute is validated, but ignored on all non-Windows platforms.\n\ncc #37499", "tree": {"sha": "7dbeab0c444ee524ac0c8a714342547e7be76c81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dbeab0c444ee524ac0c8a714342547e7be76c81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a38b24d952f0f13dbc436a68edb87a4b565f2e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a38b24d952f0f13dbc436a68edb87a4b565f2e3", "html_url": "https://github.com/rust-lang/rust/commit/8a38b24d952f0f13dbc436a68edb87a4b565f2e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d41d5bd016fc619ef21a8629c935a8f331b6140", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d41d5bd016fc619ef21a8629c935a8f331b6140", "html_url": "https://github.com/rust-lang/rust/commit/1d41d5bd016fc619ef21a8629c935a8f331b6140"}, {"sha": "20c301330cf17dd98c58aaff602586b99f7676fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/20c301330cf17dd98c58aaff602586b99f7676fc", "html_url": "https://github.com/rust-lang/rust/commit/20c301330cf17dd98c58aaff602586b99f7676fc"}], "stats": {"total": 131, "additions": 127, "deletions": 4}, "files": [{"sha": "ad8e0c1ee59f6dac0ce2f2edb7b72245733f0654", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=8a38b24d952f0f13dbc436a68edb87a4b565f2e3", "patch": "@@ -636,7 +636,7 @@ fn link_natively(sess: &Session,\n     {\n         let mut linker = trans.linker_info.to_linker(&mut cmd, &sess);\n         link_args(&mut *linker, sess, crate_type, tmpdir,\n-                  objects, out_filename, outputs);\n+                  objects, out_filename, outputs, trans);\n     }\n     cmd.args(&sess.target.target.options.late_link_args);\n     for obj in &sess.target.target.options.post_link_objects {\n@@ -711,7 +711,8 @@ fn link_args(cmd: &mut Linker,\n              tmpdir: &Path,\n              objects: &[PathBuf],\n              out_filename: &Path,\n-             outputs: &OutputFilenames) {\n+             outputs: &OutputFilenames,\n+             trans: &CrateTranslation) {\n \n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed.\n@@ -726,6 +727,13 @@ fn link_args(cmd: &mut Linker,\n     }\n     cmd.output_filename(out_filename);\n \n+    if crate_type == config::CrateTypeExecutable &&\n+       sess.target.target.options.is_like_windows {\n+        if let Some(ref s) = trans.windows_subsystem {\n+            cmd.subsystem(s);\n+        }\n+    }\n+\n     // If we're building a dynamic library then some platforms need to make sure\n     // that all symbols are exported correctly from the dynamic library.\n     if crate_type != config::CrateTypeExecutable {"}, {"sha": "860903d259fe5394128256821f237a13199f31af", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=8a38b24d952f0f13dbc436a68edb87a4b565f2e3", "patch": "@@ -92,6 +92,7 @@ pub trait Linker {\n     fn whole_archives(&mut self);\n     fn no_whole_archives(&mut self);\n     fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType);\n+    fn subsystem(&mut self, subsystem: &str);\n }\n \n pub struct GnuLinker<'a> {\n@@ -294,6 +295,10 @@ impl<'a> Linker for GnuLinker<'a> {\n \n         self.cmd.arg(arg);\n     }\n+\n+    fn subsystem(&mut self, subsystem: &str) {\n+        self.cmd.arg(&format!(\"-Wl,--subsystem,{}\", subsystem));\n+    }\n }\n \n pub struct MsvcLinker<'a> {\n@@ -441,6 +446,30 @@ impl<'a> Linker for MsvcLinker<'a> {\n         arg.push(path);\n         self.cmd.arg(&arg);\n     }\n+\n+    fn subsystem(&mut self, subsystem: &str) {\n+        // Note that previous passes of the compiler validated this subsystem,\n+        // so we just blindly pass it to the linker.\n+        self.cmd.arg(&format!(\"/SUBSYSTEM:{}\", subsystem));\n+\n+        // Windows has two subsystems we're interested in right now, the console\n+        // and windows subsystems. These both implicitly have different entry\n+        // points (starting symbols). The console entry point starts with\n+        // `mainCRTStartup` and the windows entry point starts with\n+        // `WinMainCRTStartup`. These entry points, defined in system libraries,\n+        // will then later probe for either `main` or `WinMain`, respectively to\n+        // start the application.\n+        //\n+        // In Rust we just always generate a `main` function so we want control\n+        // to always start there, so we force the entry point on the windows\n+        // subsystem to be `mainCRTStartup` to get everything booted up\n+        // correctly.\n+        //\n+        // For more information see RFC #1665\n+        if subsystem == \"windows\" {\n+            self.cmd.arg(\"/ENTRY:mainCRTStartup\");\n+        }\n+    }\n }\n \n fn exported_symbols(scx: &SharedCrateContext,"}, {"sha": "d30183a13f1f82dba8152c43798cca7f0fffdaae", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=8a38b24d952f0f13dbc436a68edb87a4b565f2e3", "patch": "@@ -1611,7 +1611,8 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             metadata: metadata,\n             reachable: vec![],\n             no_builtins: no_builtins,\n-            linker_info: linker_info\n+            linker_info: linker_info,\n+            windows_subsystem: None,\n         };\n     }\n \n@@ -1747,14 +1748,26 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let linker_info = LinkerInfo::new(&shared_ccx, &reachable_symbols);\n \n+    let subsystem = attr::first_attr_value_str_by_name(&krate.attrs,\n+                                                       \"windows_subsystem\");\n+    let windows_subsystem = subsystem.map(|subsystem| {\n+        if subsystem != \"windows\" && subsystem != \"console\" {\n+            tcx.sess.fatal(&format!(\"invalid windows subsystem `{}`, only \\\n+                                     `windows` and `console` are allowed\",\n+                                    subsystem));\n+        }\n+        subsystem.to_string()\n+    });\n+\n     CrateTranslation {\n         modules: modules,\n         metadata_module: metadata_module,\n         link: link_meta,\n         metadata: metadata,\n         reachable: reachable_symbols,\n         no_builtins: no_builtins,\n-        linker_info: linker_info\n+        linker_info: linker_info,\n+        windows_subsystem: windows_subsystem,\n     }\n }\n "}, {"sha": "37304f28e03f64e2b25e2073f9177fa90a82de17", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=8a38b24d952f0f13dbc436a68edb87a4b565f2e3", "patch": "@@ -169,6 +169,7 @@ pub struct CrateTranslation {\n     pub metadata: Vec<u8>,\n     pub reachable: Vec<String>,\n     pub no_builtins: bool,\n+    pub windows_subsystem: Option<String>,\n     pub linker_info: back::linker::LinkerInfo\n }\n "}, {"sha": "bf6482e5b99d5730a25d46475cfcdbdaf784b268", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8a38b24d952f0f13dbc436a68edb87a4b565f2e3", "patch": "@@ -309,6 +309,9 @@ declare_features! (\n \n     // Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n     (active, field_init_shorthand, \"1.14.0\", Some(37340)),\n+\n+    // The #![windows_subsystem] attribute\n+    (active, windows_subsystem, \"1.14.0\", Some(37499)),\n );\n \n declare_features! (\n@@ -713,6 +716,12 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n                                               \"defining reflective traits is still evolving\",\n                                               cfg_fn!(reflect))),\n \n+    (\"windows_subsystem\", Whitelisted, Gated(Stability::Unstable,\n+                                             \"windows_subsystem\",\n+                                             \"the windows subsystem attribute \\\n+                                              id currently unstable\",\n+                                             cfg_fn!(windows_subsystem))),\n+\n     // Crate level attributes\n     (\"crate_name\", CrateLevel, Ungated),\n     (\"crate_type\", CrateLevel, Ungated),"}, {"sha": "4b563e78e55c85643164db1af15d7fc9729976b4", "filename": "src/test/compile-fail/windows-subsystem-gated.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Ftest%2Fcompile-fail%2Fwindows-subsystem-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Ftest%2Fcompile-fail%2Fwindows-subsystem-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwindows-subsystem-gated.rs?ref=8a38b24d952f0f13dbc436a68edb87a4b565f2e3", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![windows_subsystem = \"console\"]\n+//~^ ERROR: the windows subsystem attribute is currently unstable\n+\n+fn main() {}"}, {"sha": "28c3950e76f2081bf53554f3f8dc35546b882580", "filename": "src/test/compile-fail/windows-subsystem-invalid.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Ftest%2Fcompile-fail%2Fwindows-subsystem-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Ftest%2Fcompile-fail%2Fwindows-subsystem-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwindows-subsystem-invalid.rs?ref=8a38b24d952f0f13dbc436a68edb87a4b565f2e3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(windows_subsystem)]\n+#![windows_subsystem = \"wrong\"]\n+//~^ ERROR: invalid subsystem `wrong`, only `windows` and `console` are allowed\n+\n+fn main() {}"}, {"sha": "34fb5db32f95afd1334b55b670f45aabfb557132", "filename": "src/test/run-make/windows-subsystem/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Ftest%2Frun-make%2Fwindows-subsystem%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Ftest%2Frun-make%2Fwindows-subsystem%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwindows-subsystem%2FMakefile?ref=8a38b24d952f0f13dbc436a68edb87a4b565f2e3", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) windows.rs\n+\t$(RUSTC) console.rs"}, {"sha": "3aedb0ecab722f6a8ef6a82e6bbc909cd6066068", "filename": "src/test/run-make/windows-subsystem/console.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Ftest%2Frun-make%2Fwindows-subsystem%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Ftest%2Frun-make%2Fwindows-subsystem%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwindows-subsystem%2Fconsole.rs?ref=8a38b24d952f0f13dbc436a68edb87a4b565f2e3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(windows_subsystem)]\n+#![windows_subsystem = \"console\"]\n+\n+fn main() {}\n+"}, {"sha": "5d875a5a1bf1f5ee7e371297f3f82067707c6352", "filename": "src/test/run-make/windows-subsystem/windows.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Ftest%2Frun-make%2Fwindows-subsystem%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38b24d952f0f13dbc436a68edb87a4b565f2e3/src%2Ftest%2Frun-make%2Fwindows-subsystem%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwindows-subsystem%2Fwindows.rs?ref=8a38b24d952f0f13dbc436a68edb87a4b565f2e3", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(windows_subsystem)]\n+#![windows_subsystem = \"windows\"]\n+\n+fn main() {}"}]}