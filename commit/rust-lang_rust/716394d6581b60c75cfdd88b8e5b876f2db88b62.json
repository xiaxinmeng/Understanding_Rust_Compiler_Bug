{"sha": "716394d6581b60c75cfdd88b8e5b876f2db88b62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNjM5NGQ2NTgxYjYwYzc1Y2ZkZDg4YjhlNWI4NzZmMmRiODhiNjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-03T14:35:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-03T14:35:12Z"}, "message": "Auto merge of #84862 - GuillaumeGomez:rollup-cbc93h4, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #84835 (Add link to Issue #34202 in udp docs)\n - #84852 (Change librustdoc write!(.. \\n) to writeln!(..); fix comment grammar)\n - #84854 (use double quotes and full path for E0761)\n - #84856 (Correct stability of ErrorKind::OutOfMemory)\n - #84858 (Fix stability attributes of byte-to-string specialization)\n - #84860 (Link to MCP from target tier policy)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a53beef5454c2448634facba386bff552834a4dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a53beef5454c2448634facba386bff552834a4dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/716394d6581b60c75cfdd88b8e5b876f2db88b62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/716394d6581b60c75cfdd88b8e5b876f2db88b62", "html_url": "https://github.com/rust-lang/rust/commit/716394d6581b60c75cfdd88b8e5b876f2db88b62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/716394d6581b60c75cfdd88b8e5b876f2db88b62/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c825bc431ee5b815847b9bab693c59c43986fc4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c825bc431ee5b815847b9bab693c59c43986fc4b", "html_url": "https://github.com/rust-lang/rust/commit/c825bc431ee5b815847b9bab693c59c43986fc4b"}, {"sha": "2d789b6373373e2ca783b5f8691c9ff80da383cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d789b6373373e2ca783b5f8691c9ff80da383cf", "html_url": "https://github.com/rust-lang/rust/commit/2d789b6373373e2ca783b5f8691c9ff80da383cf"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "993522d01d86744bec64592c31f698d58a0e7ae2", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/716394d6581b60c75cfdd88b8e5b876f2db88b62/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/716394d6581b60c75cfdd88b8e5b876f2db88b62/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=716394d6581b60c75cfdd88b8e5b876f2db88b62", "patch": "@@ -37,7 +37,7 @@ pub enum ModError<'a> {\n     CircularInclusion(Vec<PathBuf>),\n     ModInBlock(Option<Ident>),\n     FileNotFound(Ident, PathBuf),\n-    MultipleCandidates(Ident, String, String),\n+    MultipleCandidates(Ident, PathBuf, PathBuf),\n     ParserError(DiagnosticBuilder<'a>),\n }\n \n@@ -220,9 +220,7 @@ pub fn default_submod_path<'a>(\n             dir_ownership: DirOwnership::Owned { relative: None },\n         }),\n         (false, false) => Err(ModError::FileNotFound(ident, default_path)),\n-        (true, true) => {\n-            Err(ModError::MultipleCandidates(ident, default_path_str, secondary_path_str))\n-        }\n+        (true, true) => Err(ModError::MultipleCandidates(ident, default_path, secondary_path)),\n     }\n }\n \n@@ -264,15 +262,15 @@ impl ModError<'_> {\n                 ));\n                 err\n             }\n-            ModError::MultipleCandidates(ident, default_path_short, secondary_path_short) => {\n+            ModError::MultipleCandidates(ident, default_path, secondary_path) => {\n                 let mut err = struct_span_err!(\n                     diag,\n                     span,\n                     E0761,\n-                    \"file for module `{}` found at both {} and {}\",\n+                    \"file for module `{}` found at both \\\"{}\\\" and \\\"{}\\\"\",\n                     ident,\n-                    default_path_short,\n-                    secondary_path_short,\n+                    default_path.display(),\n+                    secondary_path.display(),\n                 );\n                 err.help(\"delete or rename one of them to remove the ambiguity\");\n                 err"}, {"sha": "4aeb3de659283fef4bc53334ef4ddfeada663079", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/716394d6581b60c75cfdd88b8e5b876f2db88b62/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/716394d6581b60c75cfdd88b8e5b876f2db88b62/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=716394d6581b60c75cfdd88b8e5b876f2db88b62", "patch": "@@ -2288,7 +2288,7 @@ impl ToString for char {\n     }\n }\n \n-#[stable(feature = \"u8_to_string_specialization\", since = \"1.999.0\")]\n+#[stable(feature = \"u8_to_string_specialization\", since = \"1.54.0\")]\n impl ToString for u8 {\n     #[inline]\n     fn to_string(&self) -> String {\n@@ -2307,7 +2307,7 @@ impl ToString for u8 {\n     }\n }\n \n-#[stable(feature = \"i8_to_string_specialization\", since = \"1.999.0\")]\n+#[stable(feature = \"i8_to_string_specialization\", since = \"1.54.0\")]\n impl ToString for i8 {\n     #[inline]\n     fn to_string(&self) -> String {"}, {"sha": "56e6f08268ca37b380b39d52c84ebba0bc1008a5", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/716394d6581b60c75cfdd88b8e5b876f2db88b62/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/716394d6581b60c75cfdd88b8e5b876f2db88b62/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=716394d6581b60c75cfdd88b8e5b876f2db88b62", "patch": "@@ -189,7 +189,7 @@ pub enum ErrorKind {\n \n     /// An operation could not be completed, because it failed\n     /// to allocate enough memory.\n-    #[stable(feature = \"out_of_memory_error\", since = \"1.53.0\")]\n+    #[stable(feature = \"out_of_memory_error\", since = \"1.54.0\")]\n     OutOfMemory,\n }\n "}, {"sha": "18297139b7bb6f8a558242ebd75e07e5c5ccd51d", "filename": "library/std/src/net/udp.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/716394d6581b60c75cfdd88b8e5b876f2db88b62/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/716394d6581b60c75cfdd88b8e5b876f2db88b62/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs?ref=716394d6581b60c75cfdd88b8e5b876f2db88b62", "patch": "@@ -159,7 +159,7 @@ impl UdpSocket {\n     /// This will return an error when the IP version of the local socket\n     /// does not match that returned from [`ToSocketAddrs`].\n     ///\n-    /// See issue #34202 for more details.\n+    /// See [Issue #34202] for more details.\n     ///\n     /// # Examples\n     ///\n@@ -169,6 +169,8 @@ impl UdpSocket {\n     /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n     /// socket.send_to(&[0; 10], \"127.0.0.1:4242\").expect(\"couldn't send data\");\n     /// ```\n+    ///\n+    /// [Issue #34202]: https://github.com/rust-lang/rust/issues/34202\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn send_to<A: ToSocketAddrs>(&self, buf: &[u8], addr: A) -> io::Result<usize> {\n         match addr.to_socket_addrs()?.next() {"}, {"sha": "cc02b294b44697f7f1fd6d28b61821433ccdecbf", "filename": "src/doc/rustc/src/target-tier-policy.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/716394d6581b60c75cfdd88b8e5b876f2db88b62/src%2Fdoc%2Frustc%2Fsrc%2Ftarget-tier-policy.md", "raw_url": "https://github.com/rust-lang/rust/raw/716394d6581b60c75cfdd88b8e5b876f2db88b62/src%2Fdoc%2Frustc%2Fsrc%2Ftarget-tier-policy.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftarget-tier-policy.md?ref=716394d6581b60c75cfdd88b8e5b876f2db88b62", "patch": "@@ -102,7 +102,7 @@ place minimal requirements on the introduction of targets.\n \n A proposed new tier 3 target must be reviewed and approved by a member of the\n compiler team based on these requirements. The reviewer may choose to gauge\n-broader compiler team consensus via a Major Change Proposal (MCP).\n+broader compiler team consensus via a [Major Change Proposal (MCP)][MCP].\n \n A proposed target or target-specific patch that substantially changes code\n shared with other targets (not just target-specific code) must be reviewed and\n@@ -223,8 +223,8 @@ patches that fail to build on a target. Thus, we place requirements that ensure\n the target will not block forward progress of the Rust project.\n \n A proposed new tier 2 target must be reviewed and approved by the compiler team\n-based on these requirements. Such review and approval may occur via a Major\n-Change Proposal (MCP).\n+based on these requirements. Such review and approval may occur via a [Major\n+Change Proposal (MCP)][MCP].\n \n In addition, the infrastructure team must approve the integration of the target\n into Continuous Integration (CI), and the tier 2 CI-related requirements. This\n@@ -391,7 +391,7 @@ development platform, not just a compilation target.\n \n A proposed new tier 2 target with host tools must be reviewed and approved by\n the compiler team based on these requirements. Such review and approval may\n-occur via a Major Change Proposal (MCP).\n+occur via a [Major Change Proposal (MCP)][MCP].\n \n In addition, the infrastructure team must approve the integration of the\n target's host tools into Continuous Integration (CI), and the CI-related\n@@ -648,3 +648,5 @@ for demotion of a tier 1 target (with or without host tools) requires a full\n RFC process, with approval by the compiler and release teams. Any such proposal\n will be communicated widely to the Rust community, both when initially proposed\n and before being dropped from a stable release.\n+\n+[MCP]: https://forge.rust-lang.org/compiler/mcp.html"}, {"sha": "7130a6bc1e8883f57a5e76a59081fa4573ad4410", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/716394d6581b60c75cfdd88b8e5b876f2db88b62/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/716394d6581b60c75cfdd88b8e5b876f2db88b62/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=716394d6581b60c75cfdd88b8e5b876f2db88b62", "patch": "@@ -46,7 +46,7 @@ crate fn render_with_highlighting(\n }\n \n fn write_header(out: &mut Buffer, class: Option<&str>) {\n-    write!(out, \"<div class=\\\"example-wrap\\\"><pre class=\\\"rust {}\\\">\\n\", class.unwrap_or_default());\n+    writeln!(out, \"<div class=\\\"example-wrap\\\"><pre class=\\\"rust {}\\\">\", class.unwrap_or_default());\n }\n \n fn write_code(out: &mut Buffer, src: &str, edition: Edition) {\n@@ -62,7 +62,7 @@ fn write_code(out: &mut Buffer, src: &str, edition: Edition) {\n }\n \n fn write_footer(out: &mut Buffer, playground_button: Option<&str>) {\n-    write!(out, \"</pre>{}</div>\\n\", playground_button.unwrap_or_default());\n+    writeln!(out, \"</pre>{}</div>\", playground_button.unwrap_or_default());\n }\n \n /// How a span of text is classified. Mostly corresponds to token kinds."}, {"sha": "1271b54debd169257f88bc0718535a6bdb1f93d4", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/716394d6581b60c75cfdd88b8e5b876f2db88b62/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/716394d6581b60c75cfdd88b8e5b876f2db88b62/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=716394d6581b60c75cfdd88b8e5b876f2db88b62", "patch": "@@ -964,7 +964,7 @@ fn attributes(it: &clean::Item) -> Vec<String> {\n // a whitespace prefix and newline.\n fn render_attributes_in_pre(w: &mut Buffer, it: &clean::Item, prefix: &str) {\n     for a in attributes(it) {\n-        write!(w, \"{}{}\\n\", prefix, a);\n+        writeln!(w, \"{}{}\", prefix, a);\n     }\n }\n "}, {"sha": "14e2d65d94ef8e84df2462801d57eb655488875a", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/716394d6581b60c75cfdd88b8e5b876f2db88b62/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/716394d6581b60c75cfdd88b8e5b876f2db88b62/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=716394d6581b60c75cfdd88b8e5b876f2db88b62", "patch": "@@ -177,7 +177,7 @@ fn print_src(buf: &mut Buffer, s: &str, edition: Edition) {\n     }\n     buf.write_str(\"<pre class=\\\"line-numbers\\\">\");\n     for i in 1..=lines {\n-        write!(buf, \"<span id=\\\"{0}\\\">{0:1$}</span>\\n\", i, cols);\n+        writeln!(buf, \"<span id=\\\"{0}\\\">{0:1$}</span>\", i, cols);\n     }\n     buf.write_str(\"</pre>\");\n     highlight::render_with_highlighting(s, buf, None, None, None, edition);"}, {"sha": "b8b3f9634e58234d25934fcb59ad248a020c914e", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/716394d6581b60c75cfdd88b8e5b876f2db88b62/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/716394d6581b60c75cfdd88b8e5b876f2db88b62/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=716394d6581b60c75cfdd88b8e5b876f2db88b62", "patch": "@@ -17,7 +17,7 @@ crate struct CssPath {\n // This PartialEq implementation IS NOT COMMUTATIVE!!!\n //\n // The order is very important: the second object must have all first's rules.\n-// However, the first doesn't require to have all second's rules.\n+// However, the first is not required to have all of the second's rules.\n impl PartialEq for CssPath {\n     fn eq(&self, other: &CssPath) -> bool {\n         if self.name != other.name {"}, {"sha": "a2c99396987ef4766437cd0cec1573de64916f98", "filename": "src/test/ui/modules_and_files_visibility/mod_file_disambig.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/716394d6581b60c75cfdd88b8e5b876f2db88b62/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/716394d6581b60c75cfdd88b8e5b876f2db88b62/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig.stderr?ref=716394d6581b60c75cfdd88b8e5b876f2db88b62", "patch": "@@ -1,4 +1,4 @@\n-error[E0761]: file for module `mod_file_disambig_aux` found at both mod_file_disambig_aux.rs and mod_file_disambig_aux/mod.rs\n+error[E0761]: file for module `mod_file_disambig_aux` found at both \"$DIR/mod_file_disambig_aux.rs\" and \"$DIR/mod_file_disambig_aux/mod.rs\"\n   --> $DIR/mod_file_disambig.rs:1:1\n    |\n LL | mod mod_file_disambig_aux;"}]}