{"sha": "cc319f88a7481e951064f87114584d7daebb0d5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMzE5Zjg4YTc0ODFlOTUxMDY0Zjg3MTE0NTg0ZDdkYWViYjBkNWY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-11T18:14:26Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-11T18:20:17Z"}, "message": "Fix rustdoc-js tool string \"parsing\"\nImprove tool: add support for multiline comments", "tree": {"sha": "b784d87c7821ed10b22ce53439622dbef1e6bdee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b784d87c7821ed10b22ce53439622dbef1e6bdee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc319f88a7481e951064f87114584d7daebb0d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc319f88a7481e951064f87114584d7daebb0d5f", "html_url": "https://github.com/rust-lang/rust/commit/cc319f88a7481e951064f87114584d7daebb0d5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc319f88a7481e951064f87114584d7daebb0d5f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cd0709f19d316c4796fa71c5f52c8612a5f3771", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd0709f19d316c4796fa71c5f52c8612a5f3771", "html_url": "https://github.com/rust-lang/rust/commit/0cd0709f19d316c4796fa71c5f52c8612a5f3771"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "bb9cd00f3f5829196df0a2a93d12274d82702f8a", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cc319f88a7481e951064f87114584d7daebb0d5f/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/cc319f88a7481e951064f87114584d7daebb0d5f/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=cc319f88a7481e951064f87114584d7daebb0d5f", "patch": "@@ -20,15 +20,17 @@ function getNextStep(content, pos, stop) {\n // will blow up. Template strings are not tested and might also be\n // broken.\n function extractFunction(content, functionName) {\n-    var indent = 0;\n+    var level = 0;\n     var splitter = \"function \" + functionName + \"(\";\n+    var stop;\n+    var pos, start;\n \n     while (true) {\n-        var start = content.indexOf(splitter);\n+        start = content.indexOf(splitter);\n         if (start === -1) {\n             break;\n         }\n-        var pos = start;\n+        pos = start;\n         while (pos < content.length && content[pos] !== ')') {\n             pos += 1;\n         }\n@@ -44,30 +46,33 @@ function extractFunction(content, functionName) {\n         }\n         while (pos < content.length) {\n             // Eat single-line comments\n-            if (content[pos] === '/' && pos > 0 && content[pos-1] === '/') {\n+            if (content[pos] === '/' && pos > 0 && content[pos - 1] === '/') {\n                 do {\n                     pos += 1;\n                 } while (pos < content.length && content[pos] !== '\\n');\n \n+            // Eat multiline comment.\n+            } else if (content[pos] === '*' && pos > 0 && content[pos - 1] === '/') {\n+                do {\n+                    pos += 1;\n+                } while (pos < content.length && content[pos] !== '/' && content[pos - 1] !== '*');\n+\n             // Eat quoted strings\n             } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n-                var stop = content[pos];\n-                var is_escaped = false;\n+                stop = content[pos];\n                 do {\n                     if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n                         pos += 1;\n                     }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+                    pos += 1;\n+                } while (pos < content.length && content[pos] !== stop);\n \n-            // Otherwise, check for indent\n+            // Otherwise, check for block level.\n             } else if (content[pos] === '{') {\n-                indent += 1;\n+                level += 1;\n             } else if (content[pos] === '}') {\n-                indent -= 1;\n-                if (indent === 0) {\n+                level -= 1;\n+                if (level === 0) {\n                     return content.slice(start, pos + 1);\n                 }\n             }"}]}