{"sha": "491f63214ad557f1617d11b05b1e2fb4666bba85", "node_id": "C_kwDOAAsO6NoAKDQ5MWY2MzIxNGFkNTU3ZjE2MTdkMTFiMDViMWUyZmI0NjY2YmJhODU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-14T10:12:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-14T10:12:58Z"}, "message": "Auto merge of #104833 - Swatinem:async-identity-future, r=compiler-errors\n\nRemove `identity_future` indirection\n\nThis was previously needed because the indirection used to hide some unexplained lifetime errors, which it turned out were related to the `min_choice` algorithm.\n\nRemoving the indirection also solves a couple of cycle errors, large moves and makes async blocks support the `#[track_caller]`annotation.\n\nFixes https://github.com/rust-lang/rust/issues/104826.", "tree": {"sha": "e29913885ad378915caf5add4a3efc3925b1a200", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e29913885ad378915caf5add4a3efc3925b1a200"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/491f63214ad557f1617d11b05b1e2fb4666bba85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/491f63214ad557f1617d11b05b1e2fb4666bba85", "html_url": "https://github.com/rust-lang/rust/commit/491f63214ad557f1617d11b05b1e2fb4666bba85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/491f63214ad557f1617d11b05b1e2fb4666bba85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff23e48c30909ea75e71a5755513b55cdbac0ca7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff23e48c30909ea75e71a5755513b55cdbac0ca7", "html_url": "https://github.com/rust-lang/rust/commit/ff23e48c30909ea75e71a5755513b55cdbac0ca7"}, {"sha": "90afb207eb14e22cc60cea3591509ae568d41c62", "url": "https://api.github.com/repos/rust-lang/rust/commits/90afb207eb14e22cc60cea3591509ae568d41c62", "html_url": "https://github.com/rust-lang/rust/commit/90afb207eb14e22cc60cea3591509ae568d41c62"}], "stats": {"total": 26, "additions": 3, "deletions": 23}, "files": [{"sha": "f97c6bcb5d18c3354d67ce761ccc24cb62a4d8b4", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/491f63214ad557f1617d11b05b1e2fb4666bba85/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491f63214ad557f1617d11b05b1e2fb4666bba85/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=491f63214ad557f1617d11b05b1e2fb4666bba85", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::match_function_call_with_def_id;\n use clippy_utils::source::{position_before_rarrow, snippet_block, snippet_opt};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -175,16 +174,10 @@ fn captures_all_lifetimes(inputs: &[Ty<'_>], output_lifetimes: &[LifetimeName])\n fn desugared_async_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>) -> Option<&'tcx Body<'tcx>> {\n     if_chain! {\n         if let Some(block_expr) = block.expr;\n-        if let Some(args) = cx\n-            .tcx\n-            .lang_items()\n-            .identity_future_fn()\n-            .and_then(|def_id| match_function_call_with_def_id(cx, block_expr, def_id));\n-        if args.len() == 1;\n         if let Expr {\n             kind: ExprKind::Closure(&Closure { body, .. }),\n             ..\n-        } = args[0];\n+        } = block_expr;\n         let closure_body = cx.tcx.hir().body(body);\n         if closure_body.generator_kind == Some(GeneratorKind::Async(AsyncGeneratorKind::Block));\n         then {"}, {"sha": "29830557a4454bcaf0e9df7e52719ecc95ebdf94", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/491f63214ad557f1617d11b05b1e2fb4666bba85/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491f63214ad557f1617d11b05b1e2fb4666bba85/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=491f63214ad557f1617d11b05b1e2fb4666bba85", "patch": "@@ -1904,16 +1904,7 @@ pub fn is_async_fn(kind: FnKind<'_>) -> bool {\n \n /// Peels away all the compiler generated code surrounding the body of an async function,\n pub fn get_async_fn_body<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'tcx Expr<'tcx>> {\n-    if let ExprKind::Call(\n-        _,\n-        &[\n-            Expr {\n-                kind: ExprKind::Closure(&Closure { body, .. }),\n-                ..\n-            },\n-        ],\n-    ) = body.value.kind\n-    {\n+    if let ExprKind::Closure(&Closure { body, .. }) = body.value.kind {\n         if let ExprKind::Block(\n             Block {\n                 stmts: [],"}, {"sha": "eb3e5189c823847c61ba3bf87df69d6dafd3e908", "filename": "tests/ui/author/blocks.stdout", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/491f63214ad557f1617d11b05b1e2fb4666bba85/tests%2Fui%2Fauthor%2Fblocks.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/491f63214ad557f1617d11b05b1e2fb4666bba85/tests%2Fui%2Fauthor%2Fblocks.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.stdout?ref=491f63214ad557f1617d11b05b1e2fb4666bba85", "patch": "@@ -43,11 +43,7 @@ if let ExprKind::Block(block, None) = expr.kind\n if let ExprKind::Closure(CaptureBy::Value, fn_decl, body_id, _, None) = expr.kind\n     && let FnRetTy::DefaultReturn(_) = fn_decl.output\n     && expr1 = &cx.tcx.hir().body(body_id).value\n-    && let ExprKind::Call(func, args) = expr1.kind\n-    && let ExprKind::Path(ref qpath) = func.kind\n-    && matches!(qpath, QPath::LangItem(LangItem::IdentityFuture, _))\n-    && args.len() == 1\n-    && let ExprKind::Closure(CaptureBy::Value, fn_decl1, body_id1, _, Some(Movability::Static)) = args[0].kind\n+    && let ExprKind::Closure(CaptureBy::Value, fn_decl1, body_id1, _, Some(Movability::Static)) = expr1.kind\n     && let FnRetTy::DefaultReturn(_) = fn_decl1.output\n     && expr2 = &cx.tcx.hir().body(body_id1).value\n     && let ExprKind::Block(block, None) = expr2.kind"}]}