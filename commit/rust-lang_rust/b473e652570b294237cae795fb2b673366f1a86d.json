{"sha": "b473e652570b294237cae795fb2b673366f1a86d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NzNlNjUyNTcwYjI5NDIzN2NhZTc5NWZiMmI2NzMzNjZmMWE4NmQ=", "commit": {"author": {"name": "Devin Alvaro", "email": "devin.alvaro@gmail.com", "date": "2019-03-25T23:47:18Z"}, "committer": {"name": "Devin Alvaro", "email": "devin.alvaro@gmail.com", "date": "2019-03-25T23:49:20Z"}, "message": "Add `--print-config current`", "tree": {"sha": "c973ff6b53d4f26caa4e1d14cd28cbadac05ec45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c973ff6b53d4f26caa4e1d14cd28cbadac05ec45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b473e652570b294237cae795fb2b673366f1a86d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b473e652570b294237cae795fb2b673366f1a86d", "html_url": "https://github.com/rust-lang/rust/commit/b473e652570b294237cae795fb2b673366f1a86d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b473e652570b294237cae795fb2b673366f1a86d/comments", "author": null, "committer": null, "parents": [{"sha": "a373e73f5a9e4db97e69875ff787dfa4de9958d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a373e73f5a9e4db97e69875ff787dfa4de9958d7", "html_url": "https://github.com/rust-lang/rust/commit/a373e73f5a9e4db97e69875ff787dfa4de9958d7"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "551b422e06cb3f5770aa5e60eeb4f9f45e55ea07", "filename": "src/bin/main.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b473e652570b294237cae795fb2b673366f1a86d/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b473e652570b294237cae795fb2b673366f1a86d/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=b473e652570b294237cae795fb2b673366f1a86d", "patch": "@@ -55,6 +55,10 @@ enum Operation {\n     ConfigOutputDefault {\n         path: Option<String>,\n     },\n+    /// Output current config (as if formatting to a file) to stdout\n+    ConfigOutputCurrent {\n+        path: Option<String>,\n+    },\n     /// No file specified, read from stdin\n     Stdin {\n         input: String,\n@@ -103,8 +107,9 @@ fn make_opts() -> Options {\n         \"\",\n         \"print-config\",\n         \"Dumps a default or minimal config to PATH. A minimal config is the \\\n-         subset of the current config file used for formatting the current program.\",\n-        \"[minimal|default] PATH\",\n+         subset of the current config file used for formatting the current program. \\\n+         `current` writes to stdout current config as if formatting the file at PATH.\",\n+        \"[default|minimal|current] PATH\",\n     );\n \n     if is_nightly {\n@@ -182,6 +187,21 @@ fn execute(opts: &Options) -> Result<i32, failure::Error> {\n             }\n             Ok(0)\n         }\n+        Operation::ConfigOutputCurrent { path } => {\n+            let path = match path {\n+                Some(path) => path,\n+                None => return Err(format_err!(\"PATH required for `--print-config current`\")),\n+            };\n+\n+            let file = PathBuf::from(path);\n+            let file = file.canonicalize().unwrap_or(file);\n+\n+            let (config, _) = load_config(Some(file.parent().unwrap()), Some(options.clone()))?;\n+            let toml = config.all_options().to_toml().map_err(err_msg)?;\n+            io::stdout().write_all(toml.as_bytes())?;\n+\n+            Ok(0)\n+        }\n         Operation::Stdin { input } => format_string(input, options),\n         Operation::Format {\n             files,\n@@ -379,6 +399,8 @@ fn determine_operation(matches: &Matches) -> Result<Operation, ErrorKind> {\n         let path = matches.free.get(0).cloned();\n         if kind == \"default\" {\n             return Ok(Operation::ConfigOutputDefault { path });\n+        } else if kind == \"current\" {\n+            return Ok(Operation::ConfigOutputCurrent { path });\n         } else if kind == \"minimal\" {\n             minimal_config_path = path;\n             if minimal_config_path.is_none() {"}]}