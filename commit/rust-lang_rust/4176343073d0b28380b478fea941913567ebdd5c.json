{"sha": "4176343073d0b28380b478fea941913567ebdd5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNzYzNDMwNzNkMGIyODM4MGI0NzhmZWE5NDE5MTM1NjdlYmRkNWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-27T22:46:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-27T22:46:56Z"}, "message": "auto merge of #11846 : michaelwoerister/rust/cu_name, r=pcwalton\n\nFixes #11600", "tree": {"sha": "ae2986bc605a7996c116185f0b00ccdd29b1cf1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae2986bc605a7996c116185f0b00ccdd29b1cf1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4176343073d0b28380b478fea941913567ebdd5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4176343073d0b28380b478fea941913567ebdd5c", "html_url": "https://github.com/rust-lang/rust/commit/4176343073d0b28380b478fea941913567ebdd5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4176343073d0b28380b478fea941913567ebdd5c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760ddb3081acb038ff3c6bcc918bfa293dfc5acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/760ddb3081acb038ff3c6bcc918bfa293dfc5acd", "html_url": "https://github.com/rust-lang/rust/commit/760ddb3081acb038ff3c6bcc918bfa293dfc5acd"}, {"sha": "0a03bc073a7915c3661ed5d639a4a4b8c4c1a9ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a03bc073a7915c3661ed5d639a4a4b8c4c1a9ca", "html_url": "https://github.com/rust-lang/rust/commit/0a03bc073a7915c3661ed5d639a4a4b8c4c1a9ca"}], "stats": {"total": 172, "additions": 115, "deletions": 57}, "files": [{"sha": "a8eff7f0d6e664e73e99bde4c83f583e3e8e0ec9", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=4176343073d0b28380b478fea941913567ebdd5c", "patch": "@@ -897,42 +897,56 @@ pub fn build_session_options(binary: ~str,\n     return sopts;\n }\n \n-pub fn build_session(sopts: @session::Options, demitter: @diagnostic::Emitter)\n+pub fn build_session(sopts: @session::Options,\n+                     local_crate_source_file: Option<Path>,\n+                     demitter: @diagnostic::Emitter)\n                      -> Session {\n     let codemap = @codemap::CodeMap::new();\n     let diagnostic_handler =\n         diagnostic::mk_handler(Some(demitter));\n     let span_diagnostic_handler =\n         diagnostic::mk_span_handler(diagnostic_handler, codemap);\n-    build_session_(sopts, codemap, demitter, span_diagnostic_handler)\n+\n+    build_session_(sopts, local_crate_source_file, codemap, demitter, span_diagnostic_handler)\n }\n \n pub fn build_session_(sopts: @session::Options,\n-                      cm: @codemap::CodeMap,\n+                      local_crate_source_file: Option<Path>,\n+                      codemap: @codemap::CodeMap,\n                       demitter: @diagnostic::Emitter,\n                       span_diagnostic_handler: @diagnostic::SpanHandler)\n                       -> Session {\n     let target_cfg = build_target_config(sopts, demitter);\n-    let p_s = parse::new_parse_sess_special_handler(span_diagnostic_handler,\n-                                                    cm);\n+    let p_s = parse::new_parse_sess_special_handler(span_diagnostic_handler, codemap);\n     let cstore = @CStore::new(token::get_ident_interner());\n     let filesearch = @filesearch::FileSearch::new(\n         &sopts.maybe_sysroot,\n         sopts.target_triple,\n         sopts.addl_lib_search_paths);\n+\n+    // Make the path absolute, if necessary\n+    let local_crate_source_file = local_crate_source_file.map(|path|\n+        if path.is_absolute() {\n+            path.clone()\n+        } else {\n+            os::getcwd().join(path.clone())\n+        }\n+    );\n+\n     @Session_ {\n         targ_cfg: target_cfg,\n         opts: sopts,\n         cstore: cstore,\n         parse_sess: p_s,\n-        codemap: cm,\n+        codemap: codemap,\n         // For a library crate, this is always none\n         entry_fn: RefCell::new(None),\n         entry_type: Cell::new(None),\n         macro_registrar_fn: RefCell::new(None),\n         span_diagnostic: span_diagnostic_handler,\n         filesearch: filesearch,\n         building_library: Cell::new(false),\n+        local_crate_source_file: local_crate_source_file,\n         working_dir: os::getcwd(),\n         lints: RefCell::new(HashMap::new()),\n         node_id: Cell::new(1),\n@@ -1164,13 +1178,8 @@ mod test {\n               Ok(m) => m,\n               Err(f) => fail!(\"test_switch_implies_cfg_test: {}\", f.to_err_msg())\n             };\n-        let sessopts = build_session_options(\n-            ~\"rustc\",\n-            matches,\n-            @diagnostic::DefaultEmitter as @diagnostic::Emitter);\n-        let sess = build_session(sessopts,\n-                                 @diagnostic::DefaultEmitter as\n-                                    @diagnostic::Emitter);\n+        let sessopts = build_session_options(~\"rustc\", matches, @diagnostic::DefaultEmitter);\n+        let sess = build_session(sessopts, None, @diagnostic::DefaultEmitter);\n         let cfg = build_configuration(sess);\n         assert!((attr::contains_name(cfg, \"test\")));\n     }\n@@ -1187,13 +1196,8 @@ mod test {\n                        f.to_err_msg());\n               }\n             };\n-        let sessopts = build_session_options(\n-            ~\"rustc\",\n-            matches,\n-            @diagnostic::DefaultEmitter as @diagnostic::Emitter);\n-        let sess = build_session(sessopts,\n-                                 @diagnostic::DefaultEmitter as\n-                                    @diagnostic::Emitter);\n+        let sessopts = build_session_options(~\"rustc\", matches, @diagnostic::DefaultEmitter);\n+        let sess = build_session(sessopts, None, @diagnostic::DefaultEmitter);\n         let cfg = build_configuration(sess);\n         let mut test_items = cfg.iter().filter(|m| \"test\" == m.name());\n         assert!(test_items.next().is_some());"}, {"sha": "b70ca03977f428489db05d428b45f94638a69e88", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=4176343073d0b28380b478fea941913567ebdd5c", "patch": "@@ -211,6 +211,9 @@ pub struct Session_ {\n     macro_registrar_fn: RefCell<Option<ast::DefId>>,\n     filesearch: @filesearch::FileSearch,\n     building_library: Cell<bool>,\n+    // The name of the root source file of the crate, in the local file system. The path is always\n+    // expected to be absolute. `None` means that there is no source file.\n+    local_crate_source_file: Option<Path>,\n     working_dir: Path,\n     lints: RefCell<HashMap<ast::NodeId,\n                            ~[(lint::Lint, codemap::Span, ~str)]>>,"}, {"sha": "9056d6e5d4ff67d72ef9c5021029d8d3fdaf2e26", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4176343073d0b28380b478fea941913567ebdd5c", "patch": "@@ -230,22 +230,22 @@ pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n         version(binary);\n         return;\n     }\n-    let input = match matches.free.len() {\n+    let (input, input_file_path) = match matches.free.len() {\n       0u => d::early_error(demitter, \"no input filename given\"),\n       1u => {\n         let ifile = matches.free[0].as_slice();\n         if \"-\" == ifile {\n             let src = str::from_utf8_owned(io::stdin().read_to_end()).unwrap();\n-            d::StrInput(src.to_managed())\n+            (d::StrInput(src.to_managed()), None)\n         } else {\n-            d::FileInput(Path::new(ifile))\n+            (d::FileInput(Path::new(ifile)), Some(Path::new(ifile)))\n         }\n       }\n       _ => d::early_error(demitter, \"multiple input filenames provided\")\n     };\n \n     let sopts = d::build_session_options(binary, matches, demitter);\n-    let sess = d::build_session(sopts, demitter);\n+    let sess = d::build_session(sopts, input_file_path, demitter);\n     let odir = matches.opt_str(\"out-dir\").map(|o| Path::new(o));\n     let ofile = matches.opt_str(\"o\").map(|o| Path::new(o));\n     let cfg = d::build_configuration(sess);"}, {"sha": "87667d3ff48d39ff46e06d22176868313bae40ee", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4176343073d0b28380b478fea941913567ebdd5c", "patch": "@@ -2670,15 +2670,15 @@ pub fn trans_crate(sess: session::Session,\n     let link_meta = link::build_link_meta(sess, crate.attrs, output,\n                                           &mut symbol_hasher);\n \n-    // Append \".rc\" to crate name as LLVM module identifier.\n+    // Append \".rs\" to crate name as LLVM module identifier.\n     //\n     // LLVM code generator emits a \".file filename\" directive\n     // for ELF backends. Value of the \"filename\" is set as the\n     // LLVM module identifier.  Due to a LLVM MC bug[1], LLVM\n     // crashes if the module identifer is same as other symbols\n     // such as a function name in the module.\n     // 1. http://llvm.org/bugs/show_bug.cgi?id=11479\n-    let llmod_id = link_meta.crateid.name.clone() + \".rc\";\n+    let llmod_id = link_meta.crateid.name.clone() + \".rs\";\n \n     let ccx = @CrateContext::new(sess,\n                                      llmod_id,"}, {"sha": "8503ce9066bc3d07a2c52009e9bd4594d0966e83", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=4176343073d0b28380b478fea941913567ebdd5c", "patch": "@@ -168,7 +168,7 @@ impl CrateContext {\n \n             let (crate_map_name, crate_map) = decl_crate_map(sess, link_meta.clone(), llmod);\n             let dbg_cx = if sess.opts.debuginfo {\n-                Some(debuginfo::CrateDebugContext::new(llmod, name.to_owned()))\n+                Some(debuginfo::CrateDebugContext::new(llmod))\n             } else {\n                 None\n             };"}, {"sha": "fa8ff7666aa305bde6b2f775ad062657dd9cd6ea", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=4176343073d0b28380b478fea941913567ebdd5c", "patch": "@@ -140,7 +140,7 @@ use middle::ty;\n use middle::pat_util;\n use util::ppaux;\n \n-use std::c_str::ToCStr;\n+use std::c_str::{CString, ToCStr};\n use std::cell::{Cell, RefCell};\n use std::hashmap::HashMap;\n use std::hashmap::HashSet;\n@@ -171,7 +171,6 @@ static DW_ATE_unsigned_char: c_uint = 0x08;\n \n /// A context object for maintaining all state needed by the debuginfo module.\n pub struct CrateDebugContext {\n-    priv crate_file: ~str,\n     priv llcontext: ContextRef,\n     priv builder: DIBuilderRef,\n     priv current_debug_location: Cell<DebugLocation>,\n@@ -184,13 +183,12 @@ pub struct CrateDebugContext {\n }\n \n impl CrateDebugContext {\n-    pub fn new(llmod: ModuleRef, crate: ~str) -> CrateDebugContext {\n+    pub fn new(llmod: ModuleRef) -> CrateDebugContext {\n         debug!(\"CrateDebugContext::new\");\n         let builder = unsafe { llvm::LLVMDIBuilderCreate(llmod) };\n         // DIBuilder inherits context from the module, so we'd better use the same one\n         let llcontext = unsafe { llvm::LLVMGetModuleContext(llmod) };\n         return CrateDebugContext {\n-            crate_file: crate,\n             llcontext: llcontext,\n             builder: builder,\n             current_debug_location: Cell::new(UnknownLocation),\n@@ -849,26 +847,49 @@ fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray {\n     };\n }\n \n-fn compile_unit_metadata(cx: @CrateContext) {\n-    let dcx = debug_context(cx);\n-    let crate_name: &str = dcx.crate_file;\n-\n-    debug!(\"compile_unit_metadata: {:?}\", crate_name);\n+fn compile_unit_metadata(cx: &CrateContext) {\n+    let work_dir = &cx.sess.working_dir;\n+    let compile_unit_name = match cx.sess.local_crate_source_file {\n+        None => fallback_path(cx),\n+        Some(ref abs_path) => {\n+            if abs_path.is_relative() {\n+                cx.sess.warn(\"debuginfo: Invalid path to crate's local root source file!\");\n+                fallback_path(cx)\n+            } else {\n+                match abs_path.path_relative_from(work_dir) {\n+                    Some(ref p) if p.is_relative() => {\n+                            // prepend \"./\" if necessary\n+                            let dotdot = bytes!(\"..\");\n+                            let prefix = &[dotdot[0], ::std::path::SEP_BYTE];\n+                            let mut path_bytes = p.as_vec().to_owned();\n+\n+                            if path_bytes.slice_to(2) != prefix &&\n+                               path_bytes.slice_to(2) != dotdot {\n+                                path_bytes.insert(0, prefix[0]);\n+                                path_bytes.insert(1, prefix[1]);\n+                            }\n+\n+                            path_bytes.to_c_str()\n+                        }\n+                    _ => fallback_path(cx)\n+                }\n+            }\n+        }\n+    };\n \n-    // FIXME (#9639): This needs to handle non-utf8 paths\n-    let work_dir = cx.sess.working_dir.as_str().unwrap();\n+    debug!(\"compile_unit_metadata: {:?}\", compile_unit_name);\n     let producer = format!(\"rustc version {}\", env!(\"CFG_VERSION\"));\n \n-    crate_name.with_c_str(|crate_name| {\n-        work_dir.with_c_str(|work_dir| {\n+    compile_unit_name.with_ref(|compile_unit_name| {\n+        work_dir.as_vec().with_c_str(|work_dir| {\n             producer.with_c_str(|producer| {\n                 \"\".with_c_str(|flags| {\n                     \"\".with_c_str(|split_name| {\n                         unsafe {\n                             llvm::LLVMDIBuilderCreateCompileUnit(\n-                                dcx.builder,\n+                                debug_context(cx).builder,\n                                 DW_LANG_RUST,\n-                                crate_name,\n+                                compile_unit_name,\n                                 work_dir,\n                                 producer,\n                                 cx.sess.opts.optimize != session::No,\n@@ -881,6 +902,10 @@ fn compile_unit_metadata(cx: @CrateContext) {\n             })\n         })\n     });\n+\n+    fn fallback_path(cx: &CrateContext) -> CString {\n+        cx.link_meta.crateid.name.to_c_str()\n+    }\n }\n \n fn declare_local(bcx: &Block,"}, {"sha": "6ac4c5ff395ce3790d1085be2ebe2aa181638c3b", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=4176343073d0b28380b478fea941913567ebdd5c", "patch": "@@ -52,7 +52,7 @@ fn setup_env(test_name: &str, source_string: &str) -> Env {\n     let matches = getopts(~[~\"-Z\", ~\"verbose\"], optgroups()).get();\n     let diag = diagnostic::collect(messages);\n     let sessopts = build_session_options(~\"rustc\", &matches, diag);\n-    let sess = build_session(sessopts, diag);\n+    let sess = build_session(sessopts, None, diag);\n     let cfg = build_configuration(sess, ~\"whatever\", str_input(~\"\"));\n     let dm = HashMap();\n     let amap = HashMap();"}, {"sha": "e4260e367a879d592d4cea21f04a7711c23876be", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=4176343073d0b28380b478fea941913567ebdd5c", "patch": "@@ -64,9 +64,9 @@ fn get_ast_and_resolve(cpath: &Path,\n         syntax::diagnostic::mk_span_handler(diagnostic_handler, parsesess.cm);\n \n     let sess = driver::driver::build_session_(sessopts,\n+                                              Some(cpath.clone()),\n                                               parsesess.cm,\n-                                              @diagnostic::DefaultEmitter as\n-                                                @diagnostic::Emitter,\n+                                              @diagnostic::DefaultEmitter,\n                                               span_diagnostic_handler);\n \n     let mut cfg = build_configuration(sess);"}, {"sha": "9271af9d575eafba3314308df06091931a7c5344", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=4176343073d0b28380b478fea941913567ebdd5c", "patch": "@@ -34,7 +34,8 @@ use visit_ast::RustdocVisitor;\n \n pub fn run(input: &str, matches: &getopts::Matches) -> int {\n     let parsesess = parse::new_parse_sess(None);\n-    let input = driver::FileInput(Path::new(input));\n+    let input_path = Path::new(input);\n+    let input = driver::FileInput(input_path.clone());\n     let libs = matches.opt_strs(\"L\").map(|s| Path::new(s.as_slice()));\n     let libs = @RefCell::new(libs.move_iter().collect());\n \n@@ -52,9 +53,9 @@ pub fn run(input: &str, matches: &getopts::Matches) -> int {\n         diagnostic::mk_span_handler(diagnostic_handler, parsesess.cm);\n \n     let sess = driver::build_session_(sessopts,\n+                                      Some(input_path),\n                                       parsesess.cm,\n-                                      @diagnostic::DefaultEmitter as\n-                                            @diagnostic::Emitter,\n+                                      @diagnostic::DefaultEmitter,\n                                       span_diagnostic_handler);\n \n     let cfg = driver::build_configuration(sess);\n@@ -113,9 +114,9 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>) {\n         diagnostic::mk_span_handler(diagnostic_handler, parsesess.cm);\n \n     let sess = driver::build_session_(sessopts,\n+                                      None,\n                                       parsesess.cm,\n-                                      @diagnostic::DefaultEmitter as\n-                                            @diagnostic::Emitter,\n+                                      @diagnostic::DefaultEmitter,\n                                       span_diagnostic_handler);\n \n     let outdir = TempDir::new(\"rustdoctest\").expect(\"rustdoc needs a tempdir\");"}, {"sha": "14936cee4f03dea4ec1619ba6621a2285bd4dfd6", "filename": "src/librustpkg/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustpkg%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustpkg%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Flib.rs?ref=4176343073d0b28380b478fea941913567ebdd5c", "patch": "@@ -114,8 +114,8 @@ impl<'a> PkgScript<'a> {\n         };\n         let input = driver::FileInput(script.clone());\n         let sess = driver::build_session(options,\n-                                         @diagnostic::DefaultEmitter as\n-                                            @diagnostic::Emitter);\n+                                         Some(script.clone()),\n+                                         @diagnostic::DefaultEmitter);\n         let cfg = driver::build_configuration(sess);\n         let crate = driver::phase_1_parse_input(sess, cfg.clone(), &input);\n         let loader = &mut Loader::new(sess);"}, {"sha": "ea69a25ddc42d07673efa9566afef618cb21fa58", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=4176343073d0b28380b478fea941913567ebdd5c", "patch": "@@ -1770,11 +1770,8 @@ fn test_linker_build() {\n     let matches = getopts([], optgroups());\n     let options = build_session_options(~\"rustpkg\",\n                                         matches.as_ref().unwrap(),\n-                                        @diagnostic::DefaultEmitter as\n-                                            @diagnostic::Emitter);\n-    let sess = build_session(options,\n-                             @diagnostic::DefaultEmitter as\n-                                @diagnostic::Emitter);\n+                                        @diagnostic::DefaultEmitter);\n+    let sess = build_session(options, None, @diagnostic::DefaultEmitter);\n     let test_sys = test_sysroot();\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     let cc = get_cc_prog(sess);"}, {"sha": "1f8962fbd3af085545e2bc94e2baaa930b4a0feb", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4176343073d0b28380b478fea941913567ebdd5c/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=4176343073d0b28380b478fea941913567ebdd5c", "patch": "@@ -264,6 +264,7 @@ pub fn compile_input(context: &BuildContext,\n     debug!(\"About to build session...\");\n \n     let sess = driver::build_session(options,\n+                                     Some(in_file.clone()),\n                                      @diagnostic::DefaultEmitter as\n                                         @diagnostic::Emitter);\n "}, {"sha": "425aff8d44172859247faa6e5c644aef4d2889c0", "filename": "src/test/debug-info/issue11600.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4176343073d0b28380b478fea941913567ebdd5c/src%2Ftest%2Fdebug-info%2Fissue11600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4176343073d0b28380b478fea941913567ebdd5c/src%2Ftest%2Fdebug-info%2Fissue11600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fissue11600.rs?ref=4176343073d0b28380b478fea941913567ebdd5c", "patch": "@@ -0,0 +1,27 @@\n+fn main() {\n+    let args : ~[~str] = ::std::os::args();\n+    ::std::io::println(args[0]);\n+}\n+\n+\n+// xfail-android: FIXME(#10381)\n+\n+// This test case checks whether compile unit names are set correctly, so that the correct default\n+// source file can be found.\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:list\n+// check:1[...]fn main() {\n+// check:2[...]let args : ~[~str] = ::std::os::args();\n+// check:3[...]::std::io::println(args[0]);\n+// check:4[...]}\n+\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms."}]}