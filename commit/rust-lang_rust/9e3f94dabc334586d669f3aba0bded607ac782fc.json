{"sha": "9e3f94dabc334586d669f3aba0bded607ac782fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllM2Y5NGRhYmMzMzQ1ODZkNjY5ZjNhYmEwYmRlZDYwN2FjNzgyZmM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-20T10:39:07Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-21T18:43:44Z"}, "message": "Don't unwrap but report a fatal error for TargetDataLayout::parse.", "tree": {"sha": "c48a961d6a964a5cf3a14caa0cfe9338cc30dd53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c48a961d6a964a5cf3a14caa0cfe9338cc30dd53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e3f94dabc334586d669f3aba0bded607ac782fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e3f94dabc334586d669f3aba0bded607ac782fc", "html_url": "https://github.com/rust-lang/rust/commit/9e3f94dabc334586d669f3aba0bded607ac782fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e3f94dabc334586d669f3aba0bded607ac782fc/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db74e1f1e3e5c7497bb9af68814497c8df1fd0b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/db74e1f1e3e5c7497bb9af68814497c8df1fd0b8", "html_url": "https://github.com/rust-lang/rust/commit/db74e1f1e3e5c7497bb9af68814497c8df1fd0b8"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "ab96b0333f43fd3617dd0617e9962c7b8ca62779", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e3f94dabc334586d669f3aba0bded607ac782fc/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3f94dabc334586d669f3aba0bded607ac782fc/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=9e3f94dabc334586d669f3aba0bded607ac782fc", "patch": "@@ -749,7 +749,9 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n     let min_atomic_width = sess.target.target.min_atomic_width();\n     let max_atomic_width = sess.target.target.max_atomic_width();\n     let atomic_cas = sess.target.target.options.atomic_cas;\n-    let layout = TargetDataLayout::parse(&sess.target.target).unwrap();\n+    let layout = TargetDataLayout::parse(&sess.target.target).unwrap_or_else(|err| {\n+        sess.fatal(&err);\n+    });\n \n     let mut ret = FxHashSet::default();\n     ret.reserve(6); // the minimum number of insertions"}]}