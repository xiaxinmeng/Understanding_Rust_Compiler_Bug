{"sha": "4ad2e4ce4e88c809abc7a8006d306fb038eb2d18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZDJlNGNlNGU4OGM4MDlhYmM3YTgwMDZkMzA2ZmIwMzhlYjJkMTg=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-20T16:13:50Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-20T16:13:50Z"}, "message": "Merge #1154\n\n1154: Initial support for lang items (and str completion) r=flodiebold a=marcogroppo\n\nThis PR adds partial support for lang items.\r\nFor now, the only supported lang items are the ones that target an impl block.\r\n\r\nLang items are now resolved during type inference - this means that `str` completion now works.\r\n\r\nFixes #1139.\r\n\r\n(thanks Florian Diebold for the help!)\r\n\n\nCo-authored-by: Marco Groppo <marco.groppo@gmail.com>", "tree": {"sha": "21cc19a5b4fd27b42e09fa12642254227275e88f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21cc19a5b4fd27b42e09fa12642254227275e88f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18", "html_url": "https://github.com/rust-lang/rust/commit/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "526a6aba104a32eb9f0f5a65232783d5570c35d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/526a6aba104a32eb9f0f5a65232783d5570c35d5", "html_url": "https://github.com/rust-lang/rust/commit/526a6aba104a32eb9f0f5a65232783d5570c35d5"}, {"sha": "8ac3d1f9aa892fc891b69c7d8d00d39b9371d246", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac3d1f9aa892fc891b69c7d8d00d39b9371d246", "html_url": "https://github.com/rust-lang/rust/commit/8ac3d1f9aa892fc891b69c7d8d00d39b9371d246"}], "stats": {"total": 193, "additions": 174, "deletions": 19}, "files": [{"sha": "8af0a317612d0d72bd8f4150183c2001d893bcfa", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=4ad2e4ce4e88c809abc7a8006d306fb038eb2d18", "patch": "@@ -1,6 +1,6 @@\n use std::sync::Arc;\n \n-use ra_syntax::{SyntaxNode, TreeArc, SourceFile, ast};\n+use ra_syntax::{SyntaxNode, TreeArc, SourceFile, SmolStr, ast};\n use ra_db::{SourceDatabase, salsa};\n \n use crate::{\n@@ -16,6 +16,7 @@ use crate::{\n     generics::{GenericParams, GenericDef},\n     type_ref::TypeRef,\n     traits::TraitData, Trait, ty::TraitRef,\n+    lang_item::{LangItems, LangItemTarget},\n     ids\n };\n \n@@ -100,6 +101,12 @@ pub trait DefDatabase: SourceDatabase {\n \n     #[salsa::invoke(crate::ConstSignature::static_signature_query)]\n     fn static_signature(&self, konst: Static) -> Arc<ConstSignature>;\n+\n+    #[salsa::invoke(crate::lang_item::LangItems::lang_items_query)]\n+    fn lang_items(&self, krate: Crate) -> Arc<LangItems>;\n+\n+    #[salsa::invoke(crate::lang_item::LangItems::lang_item_query)]\n+    fn lang_item(&self, start_crate: Crate, item: SmolStr) -> Option<LangItemTarget>;\n }\n \n #[salsa::query_group(HirDatabaseStorage)]"}, {"sha": "5f3f91cba2c3a7e6a272adc5c2f4d4abba7d3fb8", "filename": "crates/ra_hir/src/lang_item.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=4ad2e4ce4e88c809abc7a8006d306fb038eb2d18", "patch": "@@ -0,0 +1,102 @@\n+use std::sync::Arc;\n+use rustc_hash::FxHashMap;\n+\n+use ra_syntax::{SmolStr, ast::AttrsOwner};\n+\n+use crate::{\n+    Crate, DefDatabase, Enum, Function, HirDatabase, ImplBlock, Module, Static, Struct, Trait\n+};\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum LangItemTarget {\n+    Enum(Enum),\n+    Function(Function),\n+    ImplBlock(ImplBlock),\n+    Static(Static),\n+    Struct(Struct),\n+    Trait(Trait),\n+}\n+\n+impl LangItemTarget {\n+    pub(crate) fn krate(&self, db: &impl HirDatabase) -> Option<Crate> {\n+        match self {\n+            LangItemTarget::Enum(e) => e.module(db).krate(db),\n+            LangItemTarget::Function(f) => f.module(db).krate(db),\n+            LangItemTarget::ImplBlock(i) => i.module().krate(db),\n+            LangItemTarget::Static(s) => s.module(db).krate(db),\n+            LangItemTarget::Struct(s) => s.module(db).krate(db),\n+            LangItemTarget::Trait(t) => t.module(db).krate(db),\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct LangItems {\n+    items: FxHashMap<SmolStr, LangItemTarget>,\n+}\n+\n+impl LangItems {\n+    pub fn target<'a>(&'a self, item: &str) -> Option<&'a LangItemTarget> {\n+        self.items.get(item)\n+    }\n+\n+    /// Salsa query. This will look for lang items in a specific crate.\n+    pub(crate) fn lang_items_query(db: &impl DefDatabase, krate: Crate) -> Arc<LangItems> {\n+        let mut lang_items = LangItems { items: FxHashMap::default() };\n+\n+        if let Some(module) = krate.root_module(db) {\n+            lang_items.collect_lang_items_recursive(db, &module);\n+        }\n+\n+        Arc::new(lang_items)\n+    }\n+\n+    /// Salsa query. Look for a lang item, starting from the specified crate and recursively\n+    /// traversing its dependencies.\n+    pub(crate) fn lang_item_query(\n+        db: &impl DefDatabase,\n+        start_crate: Crate,\n+        item: SmolStr,\n+    ) -> Option<LangItemTarget> {\n+        let lang_items = db.lang_items(start_crate);\n+        let start_crate_target = lang_items.items.get(&item);\n+        if let Some(target) = start_crate_target {\n+            Some(*target)\n+        } else {\n+            for dep in start_crate.dependencies(db) {\n+                let dep_crate = dep.krate;\n+                let dep_target = db.lang_item(dep_crate, item.clone());\n+                if dep_target.is_some() {\n+                    return dep_target;\n+                }\n+            }\n+            None\n+        }\n+    }\n+\n+    fn collect_lang_items_recursive(&mut self, db: &impl DefDatabase, module: &Module) {\n+        // Look for impl targets\n+        let (impl_blocks, source_map) = db.impls_in_module_with_source_map(module.clone());\n+        let source = module.definition_source(db).1;\n+        for (impl_id, _) in impl_blocks.impls.iter() {\n+            let impl_block = source_map.get(&source, impl_id);\n+            let lang_item_name = impl_block\n+                .attrs()\n+                .filter_map(|a| a.as_key_value())\n+                .filter(|(key, _)| key == \"lang\")\n+                .map(|(_, val)| val)\n+                .nth(0);\n+            if let Some(lang_item_name) = lang_item_name {\n+                let imp = ImplBlock::from_id(*module, impl_id);\n+                self.items.entry(lang_item_name).or_insert(LangItemTarget::ImplBlock(imp));\n+            }\n+        }\n+\n+        // FIXME we should look for the other lang item targets (traits, structs, ...)\n+\n+        // Look for lang items in the children\n+        for child in module.children(db) {\n+            self.collect_lang_items_recursive(db, &child);\n+        }\n+    }\n+}"}, {"sha": "4411715dea42b7a8abbe177bd9f7813637e75edb", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=4ad2e4ce4e88c809abc7a8006d306fb038eb2d18", "patch": "@@ -36,6 +36,7 @@ mod type_ref;\n mod ty;\n mod impl_block;\n mod expr;\n+mod lang_item;\n mod generics;\n mod docs;\n mod resolve;"}, {"sha": "39152360c44181bf2f7f498ced65c7ca866220f2", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=4ad2e4ce4e88c809abc7a8006d306fb038eb2d18", "patch": "@@ -202,6 +202,10 @@ impl CrateDefMap {\n         Arc::new(def_map)\n     }\n \n+    pub(crate) fn krate(&self) -> Crate {\n+        self.krate\n+    }\n+\n     pub(crate) fn root(&self) -> CrateModuleId {\n         self.root\n     }"}, {"sha": "f2c85eb668e4bad0375876bbaee635a83da1abd8", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=4ad2e4ce4e88c809abc7a8006d306fb038eb2d18", "patch": "@@ -5,13 +5,15 @@ use rustc_hash::FxHashMap;\n \n use crate::{\n     ModuleDef,\n+    code_model_api::Crate,\n     db::HirDatabase,\n     name::{Name, KnownName},\n     nameres::{PerNs, CrateDefMap, CrateModuleId},\n     generics::GenericParams,\n     expr::{scope::{ExprScopes, ScopeId}, PatId},\n     impl_block::ImplBlock,\n-    path::Path, Trait\n+    path::Path,\n+    Trait\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -197,6 +199,10 @@ impl Resolver {\n             _ => None,\n         })\n     }\n+\n+    pub(crate) fn krate(&self) -> Option<Crate> {\n+        self.module().map(|t| t.0.krate())\n+    }\n }\n \n impl Resolver {"}, {"sha": "c7772a7f6d03479226a407d3d8a4744a88c97c58", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=4ad2e4ce4e88c809abc7a8006d306fb038eb2d18", "patch": "@@ -462,6 +462,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let remaining_index = remaining_index.unwrap_or(path.segments.len());\n         let mut actual_def_ty: Option<Ty> = None;\n \n+        let krate = resolver.krate()?;\n         // resolve intermediate segments\n         for (i, segment) in path.segments[remaining_index..].iter().enumerate() {\n             let ty = match resolved {\n@@ -500,9 +501,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             // Attempt to find an impl_item for the type which has a name matching\n             // the current segment\n             log::debug!(\"looking for path segment: {:?}\", segment);\n+\n             actual_def_ty = Some(ty.clone());\n \n-            let item: crate::ModuleDef = ty.iterate_impl_items(self.db, |item| {\n+            let item: crate::ModuleDef = ty.iterate_impl_items(self.db, krate, |item| {\n                 let matching_def: Option<crate::ModuleDef> = match item {\n                     crate::ImplItem::Method(func) => {\n                         let sig = func.signature(self.db);"}, {"sha": "ea6e0dc0f7a4cac4aadd5c1f267de179fc06817f", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=4ad2e4ce4e88c809abc7a8006d306fb038eb2d18", "patch": "@@ -14,6 +14,7 @@ use crate::{\n     resolve::Resolver,\n     traits::TraitItem,\n     generics::HasGenericParams,\n+    ty::primitive::{UncertainIntTy, UncertainFloatTy}\n };\n use super::{TraitRef, Substs};\n \n@@ -110,10 +111,19 @@ impl CrateImplBlocks {\n     }\n }\n \n-fn def_crate(db: &impl HirDatabase, ty: &Ty) -> Option<Crate> {\n+fn def_crate(db: &impl HirDatabase, cur_crate: Crate, ty: &Ty) -> Option<Crate> {\n     match ty {\n         Ty::Apply(a_ty) => match a_ty.ctor {\n             TypeCtor::Adt(def_id) => def_id.krate(db),\n+            TypeCtor::Bool => db.lang_item(cur_crate, \"bool\".into())?.krate(db),\n+            TypeCtor::Char => db.lang_item(cur_crate, \"char\".into())?.krate(db),\n+            TypeCtor::Float(UncertainFloatTy::Known(f)) => {\n+                db.lang_item(cur_crate, f.ty_to_string().into())?.krate(db)\n+            }\n+            TypeCtor::Int(UncertainIntTy::Known(i)) => {\n+                db.lang_item(cur_crate, i.ty_to_string().into())?.krate(db)\n+            }\n+            TypeCtor::Str => db.lang_item(cur_crate, \"str\".into())?.krate(db),\n             _ => None,\n         },\n         _ => None,\n@@ -150,8 +160,11 @@ impl Ty {\n         // find in the end takes &self, we still do the autoderef step (just as\n         // rustc does an autoderef and then autoref again).\n \n+        let krate = resolver.krate()?;\n         for derefed_ty in self.autoderef(db) {\n-            if let Some(result) = derefed_ty.iterate_inherent_methods(db, name, &mut callback) {\n+            if let Some(result) =\n+                derefed_ty.iterate_inherent_methods(db, name, krate, &mut callback)\n+            {\n                 return Some(result);\n             }\n             if let Some(result) =\n@@ -208,9 +221,10 @@ impl Ty {\n         &self,\n         db: &impl HirDatabase,\n         name: Option<&Name>,\n+        krate: Crate,\n         mut callback: impl FnMut(&Ty, Function) -> Option<T>,\n     ) -> Option<T> {\n-        let krate = match def_crate(db, self) {\n+        let krate = match def_crate(db, krate, self) {\n             Some(krate) => krate,\n             None => return None,\n         };\n@@ -239,9 +253,10 @@ impl Ty {\n     pub fn iterate_impl_items<T>(\n         self,\n         db: &impl HirDatabase,\n+        krate: Crate,\n         mut callback: impl FnMut(ImplItem) -> Option<T>,\n     ) -> Option<T> {\n-        let krate = def_crate(db, &self)?;\n+        let krate = def_crate(db, krate, &self)?;\n         let impls = db.impls_in_crate(krate);\n \n         for impl_block in impls.lookup_impl_blocks(&self) {"}, {"sha": "c41752ae7fce07354b13a0a8915256d359cf571a", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=4ad2e4ce4e88c809abc7a8006d306fb038eb2d18", "patch": "@@ -38,19 +38,22 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n         }\n         hir::ModuleDef::Struct(s) => {\n             let ty = s.ty(ctx.db);\n-            ty.iterate_impl_items(ctx.db, |item| {\n-                match item {\n-                    hir::ImplItem::Method(func) => {\n-                        let sig = func.signature(ctx.db);\n-                        if !sig.has_self_param() {\n-                            acc.add_function(ctx, func);\n+            let krate = ctx.module.and_then(|m| m.krate(ctx.db));\n+            if let Some(krate) = krate {\n+                ty.iterate_impl_items(ctx.db, krate, |item| {\n+                    match item {\n+                        hir::ImplItem::Method(func) => {\n+                            let sig = func.signature(ctx.db);\n+                            if !sig.has_self_param() {\n+                                acc.add_function(ctx, func);\n+                            }\n                         }\n+                        hir::ImplItem::Const(ct) => acc.add_const(ctx, ct),\n+                        hir::ImplItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n                     }\n-                    hir::ImplItem::Const(ct) => acc.add_const(ctx, ct),\n-                    hir::ImplItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n-                }\n-                None::<()>\n-            });\n+                    None::<()>\n+                });\n+            }\n         }\n         _ => return,\n     };"}, {"sha": "5c4c0ffc16a3aa759ad6ae15cb498db5a00fda28", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=4ad2e4ce4e88c809abc7a8006d306fb038eb2d18", "patch": "@@ -65,6 +65,20 @@ impl ast::Attr {\n             None\n         }\n     }\n+\n+    pub fn as_key_value(&self) -> Option<(SmolStr, SmolStr)> {\n+        let tt = self.value()?;\n+        let tt_node = tt.syntax();\n+        let attr = tt_node.children_with_tokens().nth(1)?;\n+        if attr.kind() == IDENT {\n+            let key = attr.as_token()?.text().clone();\n+            let val_node = tt_node.children_with_tokens().find(|t| t.kind() == STRING)?;\n+            let val = val_node.as_token()?.text().trim_start_matches(\"\\\"\").trim_end_matches(\"\\\"\");\n+            Some((key, SmolStr::new(val)))\n+        } else {\n+            None\n+        }\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]"}, {"sha": "fae371509f18c0864239006fbc5e167235abb205", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=4ad2e4ce4e88c809abc7a8006d306fb038eb2d18", "patch": "@@ -1325,6 +1325,7 @@ impl ToOwned for ImplBlock {\n \n \n impl ast::TypeParamsOwner for ImplBlock {}\n+impl ast::AttrsOwner for ImplBlock {}\n impl ImplBlock {\n     pub fn item_list(&self) -> Option<&ItemList> {\n         super::child_opt(self)"}, {"sha": "5bdcf9c84b447dd368209698c7bb1a8ec2f12fcf", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/4ad2e4ce4e88c809abc7a8006d306fb038eb2d18/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=4ad2e4ce4e88c809abc7a8006d306fb038eb2d18", "patch": "@@ -345,7 +345,7 @@ Grammar(\n             ],\n             options: [\"TypeRef\"]\n         ),\n-        \"ImplBlock\": (options: [\"ItemList\"], traits: [\"TypeParamsOwner\"]),\n+        \"ImplBlock\": (options: [\"ItemList\"], traits: [\"TypeParamsOwner\", \"AttrsOwner\"]),\n \n         \"ParenType\": (options: [\"TypeRef\"]),\n         \"TupleType\": ( collections: [[\"fields\", \"TypeRef\"]] ),"}]}