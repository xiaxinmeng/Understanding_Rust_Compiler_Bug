{"sha": "bdcc21cbc4dabe73662634ffada8d0f353bc1ce9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkY2MyMWNiYzRkYWJlNzM2NjI2MzRmZmFkYThkMGYzNTNiYzFjZTk=", "commit": {"author": {"name": "Fe\u0301lix Saparelli", "email": "felix@passcod.name", "date": "2019-09-21T10:56:05Z"}, "committer": {"name": "Fe\u0301lix Saparelli", "email": "felix@passcod.name", "date": "2019-10-08T22:00:29Z"}, "message": "Implement (HashMap) Entry::insert as per #60142", "tree": {"sha": "a8e19a0bc03e3a6c534c44c8087cd3cf0b2a5d5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8e19a0bc03e3a6c534c44c8087cd3cf0b2a5d5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdcc21cbc4dabe73662634ffada8d0f353bc1ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdcc21cbc4dabe73662634ffada8d0f353bc1ce9", "html_url": "https://github.com/rust-lang/rust/commit/bdcc21cbc4dabe73662634ffada8d0f353bc1ce9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdcc21cbc4dabe73662634ffada8d0f353bc1ce9/comments", "author": {"login": "passcod", "id": 155787, "node_id": "MDQ6VXNlcjE1NTc4Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/155787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/passcod", "html_url": "https://github.com/passcod", "followers_url": "https://api.github.com/users/passcod/followers", "following_url": "https://api.github.com/users/passcod/following{/other_user}", "gists_url": "https://api.github.com/users/passcod/gists{/gist_id}", "starred_url": "https://api.github.com/users/passcod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/passcod/subscriptions", "organizations_url": "https://api.github.com/users/passcod/orgs", "repos_url": "https://api.github.com/users/passcod/repos", "events_url": "https://api.github.com/users/passcod/events{/privacy}", "received_events_url": "https://api.github.com/users/passcod/received_events", "type": "User", "site_admin": false}, "committer": {"login": "passcod", "id": 155787, "node_id": "MDQ6VXNlcjE1NTc4Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/155787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/passcod", "html_url": "https://github.com/passcod", "followers_url": "https://api.github.com/users/passcod/followers", "following_url": "https://api.github.com/users/passcod/following{/other_user}", "gists_url": "https://api.github.com/users/passcod/gists{/gist_id}", "starred_url": "https://api.github.com/users/passcod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/passcod/subscriptions", "organizations_url": "https://api.github.com/users/passcod/orgs", "repos_url": "https://api.github.com/users/passcod/repos", "events_url": "https://api.github.com/users/passcod/events{/privacy}", "received_events_url": "https://api.github.com/users/passcod/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "html_url": "https://github.com/rust-lang/rust/commit/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91"}], "stats": {"total": 70, "additions": 66, "deletions": 4}, "files": [{"sha": "6c05efcbec5e3affd5c760efdbfb8e7fac6b7691", "filename": "Cargo.lock", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bdcc21cbc4dabe73662634ffada8d0f353bc1ce9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bdcc21cbc4dabe73662634ffada8d0f353bc1ce9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bdcc21cbc4dabe73662634ffada8d0f353bc1ce9", "patch": "@@ -107,6 +107,12 @@ dependencies = [\n  \"winapi 0.3.6\",\n ]\n \n+[[package]]\n+name = \"autocfg\"\n+version = \"0.1.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b671c8fb71b457dd4ae18c4ba1e59aa81793daacc361d82fcd410cef0d491875\"\n+\n [[package]]\n name = \"backtrace\"\n version = \"0.3.37\"\n@@ -1259,7 +1265,7 @@ version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"df044dd42cdb7e32f28557b661406fc0f2494be75199779998810dbc35030e0d\"\n dependencies = [\n- \"hashbrown\",\n+ \"hashbrown 0.5.0\",\n  \"lazy_static 1.3.0\",\n  \"log\",\n  \"pest\",\n@@ -1276,10 +1282,19 @@ version = \"0.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"e1de41fb8dba9714efd92241565cdff73f78508c95697dd56787d3cba27e2353\"\n dependencies = [\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"hashbrown\"\n+version = \"0.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6587d09be37fb98a11cb08b9000a3f592451c1b1b613ca69d949160e313a430a\"\n+dependencies = [\n+ \"autocfg\",\n  \"compiler_builtins\",\n  \"rustc-std-workspace-alloc\",\n  \"rustc-std-workspace-core\",\n- \"serde\",\n ]\n \n [[package]]\n@@ -4073,7 +4088,7 @@ dependencies = [\n  \"core\",\n  \"dlmalloc\",\n  \"fortanix-sgx-abi\",\n- \"hashbrown\",\n+ \"hashbrown 0.6.1\",\n  \"libc\",\n  \"panic_abort\",\n  \"panic_unwind\","}, {"sha": "5309af6f4c342eb9e99f67b4135506ff750bd18f", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdcc21cbc4dabe73662634ffada8d0f353bc1ce9/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bdcc21cbc4dabe73662634ffada8d0f353bc1ce9/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=bdcc21cbc4dabe73662634ffada8d0f353bc1ce9", "patch": "@@ -23,7 +23,7 @@ libc = { version = \"0.2.51\", default-features = false, features = ['rustc-dep-of\n compiler_builtins = { version = \"0.1.16\" }\n profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n-hashbrown = { version = \"0.5.0\", features = ['rustc-dep-of-std'] }\n+hashbrown = { version = \"0.6.1\", default-features = false, features = ['rustc-dep-of-std'] }\n \n [dependencies.backtrace_rs]\n package = \"backtrace\""}, {"sha": "fcca112563d2da04ae415174cc2d888b8b4404b7", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bdcc21cbc4dabe73662634ffada8d0f353bc1ce9/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdcc21cbc4dabe73662634ffada8d0f353bc1ce9/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=bdcc21cbc4dabe73662634ffada8d0f353bc1ce9", "patch": "@@ -2030,6 +2030,31 @@ impl<'a, K, V> Entry<'a, K, V> {\n             Vacant(entry) => Vacant(entry),\n         }\n     }\n+\n+    /// Sets the value of the entry, and returns an OccupiedEntry.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(entry_insert)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map: HashMap<&str, String> = HashMap::new();\n+    /// let entry = map.entry(\"poneyland\").insert(\"hoho\".to_string());\n+    ///\n+    /// assert_eq!(entry.key(), &\"poneyland\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"entry_insert\", issue = \"65225\")]\n+    pub fn insert(self, value: V) -> OccupiedEntry<'a, K, V> {\n+        match self {\n+            Occupied(mut entry) => {\n+                entry.insert(value);\n+                entry\n+            },\n+            Vacant(entry) => entry.insert_entry(value),\n+        }\n+    }\n }\n \n impl<'a, K, V: Default> Entry<'a, K, V> {\n@@ -2347,6 +2372,28 @@ impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n     pub fn insert(self, value: V) -> &'a mut V {\n         self.base.insert(value)\n     }\n+\n+    /// Sets the value of the entry with the VacantEntry's key,\n+    /// and returns an OccupiedEntry.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    /// use std::collections::hash_map::Entry;\n+    ///\n+    /// let mut map: HashMap<&str, u32> = HashMap::new();\n+    ///\n+    /// if let Entry::Vacant(o) = map.entry(\"poneyland\") {\n+    ///     o.insert(37);\n+    /// }\n+    /// assert_eq!(map[\"poneyland\"], 37);\n+    /// ```\n+    #[inline]\n+    fn insert_entry(self, value: V) -> OccupiedEntry<'a, K, V> {\n+        let base = self.base.insert_entry(value);\n+        OccupiedEntry { base }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}