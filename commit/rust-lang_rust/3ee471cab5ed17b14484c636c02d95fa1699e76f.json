{"sha": "3ee471cab5ed17b14484c636c02d95fa1699e76f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZTQ3MWNhYjVlZDE3YjE0NDg0YzYzNmMwMmQ5NWZhMTY5OWU3NmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-30T17:21:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-30T17:21:48Z"}, "message": "auto merge of #19411 : lifthrasiir/rust/asm-clobbers-expanded, r=alexcrichton\n\nI.e. we should not prematurely build operand constraints at the expansion time. Otherwise `--pretty expanded` diverges:\r\n\r\n```\r\n$ cat t.rs\r\n#![feature(asm)]\r\n\r\npub fn main() { unsafe { asm!(\"\" : : : \"hello\", \"world\") }; }\r\n\r\n$ rustc t.rs --pretty\r\n#![feature(asm)]\r\n\r\npub fn main() { unsafe { asm!(\"\" : : : \"hello\" , \"world\") }; }\r\n\r\n$ rustc t.rs --pretty expanded\r\n#![feature(asm)]\r\n#![feature(phase)]\r\n#![no_std]\r\n#![feature(globs)]\r\n#[phase(plugin, link)]\r\nextern crate \"std\" as std;\r\n#[prelude_import]\r\nuse std::prelude::*;\r\n\r\npub fn main() { unsafe { asm!(\"\":  :  : \"~{hello},~{world}\") }; }\r\n```\r\n\r\n(The last code *does* compile, but won't do the expected thing.)", "tree": {"sha": "c25d47d9b3f73697072fac3d96e53b37c244c3dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c25d47d9b3f73697072fac3d96e53b37c244c3dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ee471cab5ed17b14484c636c02d95fa1699e76f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee471cab5ed17b14484c636c02d95fa1699e76f", "html_url": "https://github.com/rust-lang/rust/commit/3ee471cab5ed17b14484c636c02d95fa1699e76f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ee471cab5ed17b14484c636c02d95fa1699e76f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52888a7c47ce409fc80e56430056701d7349d27e", "url": "https://api.github.com/repos/rust-lang/rust/commits/52888a7c47ce409fc80e56430056701d7349d27e", "html_url": "https://github.com/rust-lang/rust/commit/52888a7c47ce409fc80e56430056701d7349d27e"}, {"sha": "133266f01ca6bd1a75cdb0887c3c9f6ea500795f", "url": "https://api.github.com/repos/rust-lang/rust/commits/133266f01ca6bd1a75cdb0887c3c9f6ea500795f", "html_url": "https://github.com/rust-lang/rust/commit/133266f01ca6bd1a75cdb0887c3c9f6ea500795f"}], "stats": {"total": 61, "additions": 39, "deletions": 22}, "files": [{"sha": "77102d2db39bb751e00fc5ad74ceadac1cdd0ea2", "filename": "src/librustc_trans/trans/asm.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3ee471cab5ed17b14484c636c02d95fa1699e76f/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee471cab5ed17b14484c636c02d95fa1699e76f/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fasm.rs?ref=3ee471cab5ed17b14484c636c02d95fa1699e76f", "patch": "@@ -77,19 +77,22 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n     // no failure occurred preparing operands, no need to cleanup\n     fcx.pop_custom_cleanup_scope(temp_scope);\n \n-    let mut constraints =\n-        String::from_str(constraints.iter()\n-                                    .map(|s| s.get().to_string())\n-                                    .chain(ext_constraints.into_iter())\n-                                    .collect::<Vec<String>>()\n-                                    .connect(\",\")\n-                                    .as_slice());\n-\n-    let mut clobbers = get_clobbers();\n-    if !ia.clobbers.get().is_empty() && !clobbers.is_empty() {\n-        clobbers = format!(\"{},{}\", ia.clobbers.get(), clobbers);\n-    } else {\n-        clobbers.push_str(ia.clobbers.get());\n+    let mut constraints = constraints.iter()\n+                                     .map(|s| s.get().to_string())\n+                                     .chain(ext_constraints.into_iter())\n+                                     .collect::<Vec<String>>()\n+                                     .connect(\",\");\n+\n+    let mut clobbers = ia.clobbers.iter()\n+                                  .map(|s| format!(\"~{{{}}}\", s.get()))\n+                                  .collect::<Vec<String>>()\n+                                  .connect(\",\");\n+    let more_clobbers = get_clobbers();\n+    if !more_clobbers.is_empty() {\n+        if !clobbers.is_empty() {\n+            clobbers.push(',');\n+        }\n+        clobbers.push_str(more_clobbers.as_slice());\n     }\n \n     // Add the clobbers to our constraints list"}, {"sha": "7e421df505d6c8c98426fc86c9e554528fa002ee", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ee471cab5ed17b14484c636c02d95fa1699e76f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee471cab5ed17b14484c636c02d95fa1699e76f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3ee471cab5ed17b14484c636c02d95fa1699e76f", "patch": "@@ -1177,7 +1177,7 @@ pub struct InlineAsm {\n     pub asm_str_style: StrStyle,\n     pub outputs: Vec<(InternedString, P<Expr>, bool)>,\n     pub inputs: Vec<(InternedString, P<Expr>)>,\n-    pub clobbers: InternedString,\n+    pub clobbers: Vec<InternedString>,\n     pub volatile: bool,\n     pub alignstack: bool,\n     pub dialect: AsmDialect,"}, {"sha": "a1c4c0a0a10c54320ea169b8f543e6ff0a614f37", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ee471cab5ed17b14484c636c02d95fa1699e76f/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee471cab5ed17b14484c636c02d95fa1699e76f/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=3ee471cab5ed17b14484c636c02d95fa1699e76f", "patch": "@@ -53,7 +53,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     let mut asm_str_style = None;\n     let mut outputs = Vec::new();\n     let mut inputs = Vec::new();\n-    let mut cons = \"\".to_string();\n+    let mut clobs = Vec::new();\n     let mut volatile = false;\n     let mut alignstack = false;\n     let mut dialect = ast::AsmAtt;\n@@ -138,7 +138,6 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                 }\n             }\n             Clobbers => {\n-                let mut clobs = Vec::new();\n                 while p.token != token::Eof &&\n                       p.token != token::Colon &&\n                       p.token != token::ModSep {\n@@ -148,15 +147,12 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                     }\n \n                     let (s, _str_style) = p.parse_str();\n-                    let clob = format!(\"~{{{}}}\", s);\n-                    clobs.push(clob);\n \n                     if OPTIONS.iter().any(|opt| s.equiv(opt)) {\n                         cx.span_warn(p.last_span, \"expected a clobber, found an option\");\n                     }\n+                    clobs.push(s);\n                 }\n-\n-                cons = clobs.connect(\",\");\n             }\n             Options => {\n                 let (option, _str_style) = p.parse_str();\n@@ -216,7 +212,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n             asm_str_style: asm_str_style.unwrap(),\n             outputs: outputs,\n             inputs: inputs,\n-            clobbers: token::intern_and_get_ident(cons.as_slice()),\n+            clobbers: clobs,\n             volatile: volatile,\n             alignstack: alignstack,\n             dialect: dialect,"}, {"sha": "b2c783b4bd91b9fba1b0db72ff65c26ff3134010", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ee471cab5ed17b14484c636c02d95fa1699e76f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee471cab5ed17b14484c636c02d95fa1699e76f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3ee471cab5ed17b14484c636c02d95fa1699e76f", "patch": "@@ -1839,7 +1839,11 @@ impl<'a> State<'a> {\n                 try!(space(&mut self.s));\n                 try!(self.word_space(\":\"));\n \n-                try!(self.print_string(a.clobbers.get(), ast::CookedStr));\n+                try!(self.commasep(Inconsistent, a.clobbers.as_slice(),\n+                                   |s, co| {\n+                    try!(s.print_string(co.get(), ast::CookedStr));\n+                    Ok(())\n+                }));\n                 try!(self.pclose());\n             }\n             ast::ExprMac(ref m) => try!(self.print_mac(m)),"}, {"sha": "20a3ac226bdc5f1459d3c70ddaab553a43e1ca0e", "filename": "src/test/pretty/asm-clobbers.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3ee471cab5ed17b14484c636c02d95fa1699e76f/src%2Ftest%2Fpretty%2Fasm-clobbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee471cab5ed17b14484c636c02d95fa1699e76f/src%2Ftest%2Fpretty%2Fasm-clobbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fasm-clobbers.rs?ref=3ee471cab5ed17b14484c636c02d95fa1699e76f", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(asm)]\n+\n+pub fn main() { unsafe { asm!(\"\" : : : \"hello\", \"world\") }; }\n+"}]}