{"sha": "60b06369eea523b9d8fe606357177f126bef4b42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYjA2MzY5ZWVhNTIzYjlkOGZlNjA2MzU3MTc3ZjEyNmJlZjRiNDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-19T10:28:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-01T22:33:03Z"}, "message": "test nth better", "tree": {"sha": "03f06b7439fb9874aaceacc4836a4fb93ca9e48d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03f06b7439fb9874aaceacc4836a4fb93ca9e48d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60b06369eea523b9d8fe606357177f126bef4b42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60b06369eea523b9d8fe606357177f126bef4b42", "html_url": "https://github.com/rust-lang/rust/commit/60b06369eea523b9d8fe606357177f126bef4b42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60b06369eea523b9d8fe606357177f126bef4b42/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbdba2b4c25ef884e05587b0fc2e4b21e0d302cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbdba2b4c25ef884e05587b0fc2e4b21e0d302cb", "html_url": "https://github.com/rust-lang/rust/commit/cbdba2b4c25ef884e05587b0fc2e4b21e0d302cb"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "7968521f7b461ee841d5747a524cf2777c67413b", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/60b06369eea523b9d8fe606357177f126bef4b42/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60b06369eea523b9d8fe606357177f126bef4b42/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=60b06369eea523b9d8fe606357177f126bef4b42", "patch": "@@ -395,24 +395,36 @@ fn test_windows_zip() {\n fn test_iter_ref_consistency() {\n     use std::fmt::Debug;\n \n-    fn helper<T : Copy + Debug + PartialEq>(x : T) {\n+    fn test<T : Copy + Debug + PartialEq>(x : T) {\n         let v : &[T] = &[x, x, x];\n         let v_ptrs : [*const T; 3] = match v {\n             [ref v1, ref v2, ref v3] => [v1 as *const _, v2 as *const _, v3 as *const _],\n             _ => unreachable!()\n         };\n         let len = v.len();\n \n+        // nth(i)\n         for i in 0..len {\n             assert_eq!(&v[i] as *const _, v_ptrs[i]); // check the v_ptrs array, just to be sure\n             let nth = v.iter().nth(i).unwrap();\n             assert_eq!(nth as *const _, v_ptrs[i]);\n         }\n         assert_eq!(v.iter().nth(len), None, \"nth(len) should return None\");\n \n+        // stepping through with nth(0)\n         {\n             let mut it = v.iter();\n-            for i in 0..len{\n+            for i in 0..len {\n+                let next = it.nth(0).unwrap();\n+                assert_eq!(next as *const _, v_ptrs[i]);\n+            }\n+            assert_eq!(it.nth(0), None);\n+        }\n+\n+        // next()\n+        {\n+            let mut it = v.iter();\n+            for i in 0..len {\n                 let remaining = len - i;\n                 assert_eq!(it.size_hint(), (remaining, Some(remaining)));\n \n@@ -423,9 +435,10 @@ fn test_iter_ref_consistency() {\n             assert_eq!(it.next(), None, \"The final call to next() should return None\");\n         }\n \n+        // next_back()\n         {\n             let mut it = v.iter();\n-            for i in 0..len{\n+            for i in 0..len {\n                 let remaining = len - i;\n                 assert_eq!(it.size_hint(), (remaining, Some(remaining)));\n \n@@ -437,7 +450,7 @@ fn test_iter_ref_consistency() {\n         }\n     }\n \n-    fn helper_mut<T : Copy + Debug + PartialEq>(x : T) {\n+    fn test_mut<T : Copy + Debug + PartialEq>(x : T) {\n         let v : &mut [T] = &mut [x, x, x];\n         let v_ptrs : [*mut T; 3] = match v {\n             [ref v1, ref v2, ref v3] =>\n@@ -446,13 +459,25 @@ fn test_iter_ref_consistency() {\n         };\n         let len = v.len();\n \n+        // nth(i)\n         for i in 0..len {\n             assert_eq!(&mut v[i] as *mut _, v_ptrs[i]); // check the v_ptrs array, just to be sure\n             let nth = v.iter_mut().nth(i).unwrap();\n             assert_eq!(nth as *mut _, v_ptrs[i]);\n         }\n         assert_eq!(v.iter().nth(len), None, \"nth(len) should return None\");\n \n+        // stepping through with nth(0)\n+        {\n+            let mut it = v.iter();\n+            for i in 0..len {\n+                let next = it.nth(0).unwrap();\n+                assert_eq!(next as *const _, v_ptrs[i]);\n+            }\n+            assert_eq!(it.nth(0), None);\n+        }\n+\n+        // next()\n         {\n             let mut it = v.iter_mut();\n             for i in 0..len {\n@@ -466,9 +491,10 @@ fn test_iter_ref_consistency() {\n             assert_eq!(it.next(), None, \"The final call to next() should return None\");\n         }\n \n+        // next_back()\n         {\n             let mut it = v.iter_mut();\n-            for i in 0..len{\n+            for i in 0..len {\n                 let remaining = len - i;\n                 assert_eq!(it.size_hint(), (remaining, Some(remaining)));\n \n@@ -482,12 +508,12 @@ fn test_iter_ref_consistency() {\n \n     // Make sure iterators and slice patterns yield consistent addresses for various types,\n     // including ZSTs.\n-    helper(0u32);\n-    helper(());\n-    helper([0u32; 0]); // ZST with alignment > 0\n-    helper_mut(0u32);\n-    helper_mut(());\n-    helper_mut([0u32; 0]); // ZST with alignment > 0\n+    test(0u32);\n+    test(());\n+    test([0u32; 0]); // ZST with alignment > 0\n+    test_mut(0u32);\n+    test_mut(());\n+    test_mut([0u32; 0]); // ZST with alignment > 0\n }\n \n // The current implementation of SliceIndex fails to handle methods"}]}