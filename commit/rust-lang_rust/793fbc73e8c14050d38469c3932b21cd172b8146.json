{"sha": "793fbc73e8c14050d38469c3932b21cd172b8146", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5M2ZiYzczZThjMTQwNTBkMzg0NjljMzkzMmIyMWNkMTcyYjgxNDY=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-08-29T20:28:58Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-08-29T20:28:58Z"}, "message": "2229: Drop any deref in move closure", "tree": {"sha": "ab3dbe9b492c72c4809b3959c671d720a5ceee8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab3dbe9b492c72c4809b3959c671d720a5ceee8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/793fbc73e8c14050d38469c3932b21cd172b8146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/793fbc73e8c14050d38469c3932b21cd172b8146", "html_url": "https://github.com/rust-lang/rust/commit/793fbc73e8c14050d38469c3932b21cd172b8146", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/793fbc73e8c14050d38469c3932b21cd172b8146/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef524710669a003cf2b24361dc6b04b566e560fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef524710669a003cf2b24361dc6b04b566e560fa", "html_url": "https://github.com/rust-lang/rust/commit/ef524710669a003cf2b24361dc6b04b566e560fa"}], "stats": {"total": 129, "additions": 77, "deletions": 52}, "files": [{"sha": "076df82f9b04212ff1b3eeb5c545b7e6db704780", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/793fbc73e8c14050d38469c3932b21cd172b8146/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/793fbc73e8c14050d38469c3932b21cd172b8146/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=793fbc73e8c14050d38469c3932b21cd172b8146", "patch": "@@ -1896,31 +1896,20 @@ fn restrict_capture_precision<'tcx>(\n     return (place, curr_mode);\n }\n \n-/// Take ownership if data being accessed is owned by the variable used to access it\n-/// (or if closure attempts to move data that it doesn\u2019t own).\n-/// Note: When taking ownership, only capture data found on the stack.\n+/// Truncate deref of any reference.\n fn adjust_for_move_closure<'tcx>(\n     mut place: Place<'tcx>,\n     mut kind: ty::UpvarCapture<'tcx>,\n ) -> (Place<'tcx>, ty::UpvarCapture<'tcx>) {\n-    let contains_deref_of_ref = place.deref_tys().any(|ty| ty.is_ref());\n     let first_deref = place.projections.iter().position(|proj| proj.kind == ProjectionKind::Deref);\n \n-    match kind {\n-        ty::UpvarCapture::ByRef(..) if contains_deref_of_ref => (place, kind),\n-\n-        // If there's any Deref and the data needs to be moved into the closure body,\n-        // or it's a Deref of a Box, truncate the path to the first deref\n-        _ => {\n-            if let Some(idx) = first_deref {\n-                truncate_place_to_len_and_update_capture_kind(&mut place, &mut kind, idx);\n-            }\n-\n-            // AMAN: I think we don't need the span inside the ByValue anymore\n-            //       we have more detailed span in CaptureInfo\n-            (place, ty::UpvarCapture::ByValue(None))\n-        }\n+    if let Some(idx) = first_deref {\n+        truncate_place_to_len_and_update_capture_kind(&mut place, &mut kind, idx);\n     }\n+\n+    // AMAN: I think we don't need the span inside the ByValue anymore\n+    //       we have more detailed span in CaptureInfo\n+    (place, ty::UpvarCapture::ByValue(None))\n }\n \n /// Adjust closure capture just that if taking ownership of data, only move data"}, {"sha": "b542fa2430c348cdf0deb7b9394071e302ba1771", "filename": "src/test/ui/closures/2229_closure_analysis/move_closure.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/793fbc73e8c14050d38469c3932b21cd172b8146/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/793fbc73e8c14050d38469c3932b21cd172b8146/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs?ref=793fbc73e8c14050d38469c3932b21cd172b8146", "patch": "@@ -35,7 +35,7 @@ fn simple_ref() {\n     //~| ERROR: Min Capture analysis includes:\n         *ref_s += 10;\n         //~^ NOTE: Capturing ref_s[Deref] -> MutBorrow\n-        //~| NOTE: Min Capture ref_s[Deref] -> MutBorrow\n+        //~| NOTE: Min Capture ref_s[] -> ByValue\n     };\n     c();\n }\n@@ -56,7 +56,7 @@ fn struct_contains_ref_to_another_struct_1() {\n     //~| ERROR: Min Capture analysis includes:\n         t.0.0 = \"new s\".into();\n         //~^ NOTE: Capturing t[(0, 0),Deref,(0, 0)] -> MutBorrow\n-        //~| NOTE: Min Capture t[(0, 0),Deref,(0, 0)] -> MutBorrow\n+        //~| NOTE: Min Capture t[(0, 0)] -> ByValue\n     };\n \n     c();\n@@ -79,7 +79,7 @@ fn struct_contains_ref_to_another_struct_2() {\n     //~| ERROR: Min Capture analysis includes:\n         let _t = t.0.0;\n         //~^ NOTE: Capturing t[(0, 0),Deref,(0, 0)] -> ImmBorrow\n-        //~| NOTE: Min Capture t[(0, 0),Deref] -> ImmBorrow\n+        //~| NOTE: Min Capture t[(0, 0)] -> ByValue\n     };\n \n     c();\n@@ -175,7 +175,7 @@ fn box_mut_1() {\n     //~| First Pass analysis includes:\n     //~| NOTE: Capturing box_p_foo[Deref,Deref,(0, 0)] -> MutBorrow\n     //~| Min Capture analysis includes:\n-    //~| NOTE: Min Capture box_p_foo[Deref,Deref,(0, 0)] -> MutBorrow\n+    //~| NOTE: Min Capture box_p_foo[] -> ByValue\n }\n \n // Ensure that even in move closures, if the data is not owned by the root variable\n@@ -192,7 +192,7 @@ fn box_mut_2() {\n     //~| First Pass analysis includes:\n     //~| NOTE: Capturing p_foo[Deref,Deref,(0, 0)] -> MutBorrow\n     //~| Min Capture analysis includes:\n-    //~| NOTE: Min Capture p_foo[Deref,Deref,(0, 0)] -> MutBorrow\n+    //~| NOTE: Min Capture p_foo[] -> ByValue\n }\n \n // Test that move closures can take ownership of Copy type"}, {"sha": "fd80e05c6893fb057ca452a19dcc0ed552deabf3", "filename": "src/test/ui/closures/2229_closure_analysis/move_closure.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/793fbc73e8c14050d38469c3932b21cd172b8146/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/793fbc73e8c14050d38469c3932b21cd172b8146/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr?ref=793fbc73e8c14050d38469c3932b21cd172b8146", "patch": "@@ -187,7 +187,7 @@ LL | |\n LL | |     };\n    | |_____^\n    |\n-note: Min Capture ref_s[Deref] -> MutBorrow\n+note: Min Capture ref_s[] -> ByValue\n   --> $DIR/move_closure.rs:36:9\n    |\n LL |         *ref_s += 10;\n@@ -223,7 +223,7 @@ LL | |\n LL | |     };\n    | |_____^\n    |\n-note: Min Capture t[(0, 0),Deref,(0, 0)] -> MutBorrow\n+note: Min Capture t[(0, 0)] -> ByValue\n   --> $DIR/move_closure.rs:57:9\n    |\n LL |         t.0.0 = \"new s\".into();\n@@ -259,7 +259,7 @@ LL | |\n LL | |     };\n    | |_____^\n    |\n-note: Min Capture t[(0, 0),Deref] -> ImmBorrow\n+note: Min Capture t[(0, 0)] -> ByValue\n   --> $DIR/move_closure.rs:80:18\n    |\n LL |         let _t = t.0.0;\n@@ -427,7 +427,7 @@ error: Min Capture analysis includes:\n LL |     let c = #[rustc_capture_analysis] move || box_p_foo.x += 10;\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: Min Capture box_p_foo[Deref,Deref,(0, 0)] -> MutBorrow\n+note: Min Capture box_p_foo[] -> ByValue\n   --> $DIR/move_closure.rs:172:47\n    |\n LL |     let c = #[rustc_capture_analysis] move || box_p_foo.x += 10;\n@@ -451,7 +451,7 @@ error: Min Capture analysis includes:\n LL |     let c = #[rustc_capture_analysis] move || p_foo.x += 10;\n    |                                       ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: Min Capture p_foo[Deref,Deref,(0, 0)] -> MutBorrow\n+note: Min Capture p_foo[] -> ByValue\n   --> $DIR/move_closure.rs:189:47\n    |\n LL |     let c = #[rustc_capture_analysis] move || p_foo.x += 10;"}, {"sha": "99962053077a961ab83de38d15d61e0722fc58a0", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/issue-88431.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/793fbc73e8c14050d38469c3932b21cd172b8146/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fissue-88431.rs", "raw_url": "https://github.com/rust-lang/rust/raw/793fbc73e8c14050d38469c3932b21cd172b8146/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fissue-88431.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fissue-88431.rs?ref=793fbc73e8c14050d38469c3932b21cd172b8146", "patch": "@@ -0,0 +1,59 @@\n+// edition:2021\n+// check-pass\n+\n+use std::collections::HashMap;\n+use std::future::Future;\n+use std::pin::Pin;\n+\n+pub struct GameMode {}\n+\n+struct GameStateManager<'a> {\n+    gamestate_stack: Vec<Box<dyn GameState<'a> + 'a>>,\n+}\n+\n+pub trait GameState<'a> {}\n+\n+async fn construct_gamestate_replay<'a>(\n+    _gamemode: &GameMode,\n+    _factory: &mut GameStateManager<'a>,\n+) -> Box<dyn GameState<'a> + 'a> {\n+    unimplemented!()\n+}\n+\n+type FutureGameState<'a, 'b> = Pin<Box<dyn Future<Output = Box<dyn GameState<'a> + 'a>> + 'b>>;\n+\n+struct MenuOption<'a> {\n+    command: Box<dyn for<'b> Fn(&'b mut GameStateManager<'a>) -> FutureGameState<'a, 'b> + 'a>,\n+}\n+\n+impl<'a> MenuOption<'a> {\n+    fn new(\n+        _command: impl for<'b> Fn(&'b mut GameStateManager<'a>) -> FutureGameState<'a, 'b> + 'a,\n+    ) -> Self {\n+        unimplemented!()\n+    }\n+}\n+\n+struct MenuState<'a> {\n+    options: Vec<MenuOption<'a>>,\n+}\n+\n+impl<'a> GameState<'a> for MenuState<'a> {}\n+\n+pub async fn get_replay_menu<'a>(\n+    gamemodes: &'a HashMap<&str, GameMode>,\n+) -> Box<dyn GameState<'a> + 'a> {\n+    let recordings: Vec<String> = vec![];\n+    let _ = recordings\n+        .into_iter()\n+        .map(|entry| {\n+            MenuOption::new(move |f| {\n+                Box::pin(construct_gamestate_replay(&gamemodes[entry.as_str()], f))\n+            })\n+        })\n+        .collect::<Vec<_>>();\n+\n+    todo!()\n+}\n+\n+fn main() {}"}, {"sha": "f76965bdd3fccbf4711438a5739ce35b9eabeed0", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/move_closure.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/793fbc73e8c14050d38469c3932b21cd172b8146/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/793fbc73e8c14050d38469c3932b21cd172b8146/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs?ref=793fbc73e8c14050d38469c3932b21cd172b8146", "patch": "@@ -56,28 +56,6 @@ fn no_ref_nested() {\n     c();\n }\n \n-struct A<'a>(&'a mut String,  &'a mut String);\n-// Test that reborrowing works as expected for move closures\n-// by attempting a disjoint capture through a reference.\n-fn disjoint_via_ref() {\n-    let mut x = String::new();\n-    let mut y = String::new();\n-\n-    let mut a = A(&mut x, &mut y);\n-    let a = &mut a;\n-\n-    let mut c1 = move || {\n-        a.0.truncate(0);\n-    };\n-\n-    let mut c2 = move || {\n-        a.1.truncate(0);\n-    };\n-\n-    c1();\n-    c2();\n-}\n-\n // Test that even if a path is moved into the closure, the closure is not FnOnce\n // if the path is not moved by the closure call.\n fn data_moved_but_not_fn_once() {\n@@ -109,7 +87,6 @@ fn main() {\n     no_ref();\n     no_ref_nested();\n \n-    disjoint_via_ref();\n     data_moved_but_not_fn_once();\n \n     returned_closure_owns_copy_type_data();"}, {"sha": "ad928f1bbc984373031b9be3ebaec01b64d027d3", "filename": "src/test/ui/nll/closure-use-spans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/793fbc73e8c14050d38469c3932b21cd172b8146/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/793fbc73e8c14050d38469c3932b21cd172b8146/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-use-spans.stderr?ref=793fbc73e8c14050d38469c3932b21cd172b8146", "patch": "@@ -26,7 +26,7 @@ LL |     let y = &x;\n LL |     x = 0;\n    |     ^^^^^ assignment to borrowed `x` occurs here\n LL |     move || *y;\n-   |              - borrow later captured here by closure\n+   |             -- borrow later captured here by closure\n \n error: aborting due to 3 previous errors\n "}]}