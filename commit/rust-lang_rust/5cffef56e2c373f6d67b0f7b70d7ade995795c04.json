{"sha": "5cffef56e2c373f6d67b0f7b70d7ade995795c04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZmZlZjU2ZTJjMzczZjZkNjdiMGY3YjcwZDdhZGU5OTU3OTVjMDQ=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-08T13:26:57Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-08T21:00:50Z"}, "message": "Consider crate declaration names", "tree": {"sha": "4549fa9ccf4e204057d35f4bbc6c18987690f0ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4549fa9ccf4e204057d35f4bbc6c18987690f0ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cffef56e2c373f6d67b0f7b70d7ade995795c04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cffef56e2c373f6d67b0f7b70d7ade995795c04", "html_url": "https://github.com/rust-lang/rust/commit/5cffef56e2c373f6d67b0f7b70d7ade995795c04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cffef56e2c373f6d67b0f7b70d7ade995795c04/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32f5276465266522ebc01b8417feeba99bf00f6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/32f5276465266522ebc01b8417feeba99bf00f6f", "html_url": "https://github.com/rust-lang/rust/commit/32f5276465266522ebc01b8417feeba99bf00f6f"}], "stats": {"total": 221, "additions": 135, "deletions": 86}, "files": [{"sha": "947d6ad568a731ca2091b88f512428bef40e5c05", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=5cffef56e2c373f6d67b0f7b70d7ade995795c04", "patch": "@@ -56,6 +56,7 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, text: &str) -> FileId {\n     crate_graph.add_crate_root(\n         file_id,\n         Edition::Edition2018,\n+        None,\n         CfgOptions::default(),\n         Env::default(),\n     );\n@@ -98,8 +99,13 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n         assert!(meta.path.starts_with(&source_root_prefix));\n \n         if let Some(krate) = meta.krate {\n-            let crate_id =\n-                crate_graph.add_crate_root(file_id, meta.edition, meta.cfg, Env::default());\n+            let crate_id = crate_graph.add_crate_root(\n+                file_id,\n+                meta.edition,\n+                Some(krate.clone()),\n+                meta.cfg,\n+                Env::default(),\n+            );\n             let prev = crates.insert(krate.clone(), crate_id);\n             assert!(prev.is_none());\n             for dep in meta.deps {\n@@ -132,6 +138,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n         crate_graph.add_crate_root(\n             crate_root,\n             Edition::Edition2018,\n+            None,\n             CfgOptions::default(),\n             Env::default(),\n         );"}, {"sha": "7b9f4efe4116b08785cbdae58f983ee13ca748d1", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 78, "deletions": 21, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=5cffef56e2c373f6d67b0f7b70d7ade995795c04", "patch": "@@ -86,7 +86,7 @@ pub struct CrateId(pub u32);\n pub struct CrateName(SmolStr);\n \n impl CrateName {\n-    /// Crates a crate name, checking for dashes in the string provided.\n+    /// Creates a crate name, checking for dashes in the string provided.\n     /// Dashes are not allowed in the crate names,\n     /// hence the input string is returned as `Err` for those cases.\n     pub fn new(name: &str) -> Result<CrateName, &str> {\n@@ -97,7 +97,7 @@ impl CrateName {\n         }\n     }\n \n-    /// Crates a crate name, unconditionally replacing the dashes with underscores.\n+    /// Creates a crate name, unconditionally replacing the dashes with underscores.\n     pub fn normalize_dashes(name: &str) -> CrateName {\n         Self(SmolStr::new(name.replace('-', \"_\")))\n     }\n@@ -107,6 +107,7 @@ impl CrateName {\n struct CrateData {\n     file_id: FileId,\n     edition: Edition,\n+    declaration_name: Option<String>,\n     cfg_options: CfgOptions,\n     env: Env,\n     dependencies: Vec<Dependency>,\n@@ -134,10 +135,11 @@ impl CrateGraph {\n         &mut self,\n         file_id: FileId,\n         edition: Edition,\n+        declaration_name: Option<String>,\n         cfg_options: CfgOptions,\n         env: Env,\n     ) -> CrateId {\n-        let data = CrateData::new(file_id, edition, cfg_options, env);\n+        let data = CrateData::new(file_id, edition, declaration_name, cfg_options, env);\n         let crate_id = CrateId(self.arena.len() as u32);\n         let prev = self.arena.insert(crate_id, data);\n         assert!(prev.is_none());\n@@ -177,6 +179,15 @@ impl CrateGraph {\n         self.arena[&crate_id].edition\n     }\n \n+    /// Returns a name of a crate, declared in the root project.\n+    /// May be missing for some cases, such as when the crate definition was created for a code snippet.\n+    ///\n+    /// This should not be considered as a normal crate name, since the actual name can be different in\n+    /// a particular dependent crate, where it is specified.\n+    pub fn declaration_name(&self, crate_id: &CrateId) -> Option<&String> {\n+        self.arena[crate_id].declaration_name.as_ref()\n+    }\n+\n     // FIXME: this only finds one crate with the given root; we could have multiple\n     pub fn crate_id_for_crate_root(&self, file_id: FileId) -> Option<CrateId> {\n         let (&crate_id, _) = self.arena.iter().find(|(_crate_id, data)| data.file_id == file_id)?;\n@@ -230,8 +241,14 @@ impl CrateId {\n }\n \n impl CrateData {\n-    fn new(file_id: FileId, edition: Edition, cfg_options: CfgOptions, env: Env) -> CrateData {\n-        CrateData { file_id, edition, dependencies: Vec::new(), cfg_options, env }\n+    fn new(\n+        file_id: FileId,\n+        edition: Edition,\n+        declaration_name: Option<String>,\n+        cfg_options: CfgOptions,\n+        env: Env,\n+    ) -> CrateData {\n+        CrateData { file_id, edition, declaration_name, dependencies: Vec::new(), cfg_options, env }\n     }\n \n     fn add_dep(&mut self, name: SmolStr, crate_id: CrateId) {\n@@ -290,12 +307,27 @@ mod tests {\n     #[test]\n     fn it_should_panic_because_of_cycle_dependencies() {\n         let mut graph = CrateGraph::default();\n-        let crate1 =\n-            graph.add_crate_root(FileId(1u32), Edition2018, CfgOptions::default(), Env::default());\n-        let crate2 =\n-            graph.add_crate_root(FileId(2u32), Edition2018, CfgOptions::default(), Env::default());\n-        let crate3 =\n-            graph.add_crate_root(FileId(3u32), Edition2018, CfgOptions::default(), Env::default());\n+        let crate1 = graph.add_crate_root(\n+            FileId(1u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n+        let crate2 = graph.add_crate_root(\n+            FileId(2u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n+        let crate3 = graph.add_crate_root(\n+            FileId(3u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n         assert!(graph.add_dep(crate3, CrateName::new(\"crate1\").unwrap(), crate1).is_err());\n@@ -304,23 +336,48 @@ mod tests {\n     #[test]\n     fn it_works() {\n         let mut graph = CrateGraph::default();\n-        let crate1 =\n-            graph.add_crate_root(FileId(1u32), Edition2018, CfgOptions::default(), Env::default());\n-        let crate2 =\n-            graph.add_crate_root(FileId(2u32), Edition2018, CfgOptions::default(), Env::default());\n-        let crate3 =\n-            graph.add_crate_root(FileId(3u32), Edition2018, CfgOptions::default(), Env::default());\n+        let crate1 = graph.add_crate_root(\n+            FileId(1u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n+        let crate2 = graph.add_crate_root(\n+            FileId(2u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n+        let crate3 = graph.add_crate_root(\n+            FileId(3u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n     }\n \n     #[test]\n     fn dashes_are_normalized() {\n         let mut graph = CrateGraph::default();\n-        let crate1 =\n-            graph.add_crate_root(FileId(1u32), Edition2018, CfgOptions::default(), Env::default());\n-        let crate2 =\n-            graph.add_crate_root(FileId(2u32), Edition2018, CfgOptions::default(), Env::default());\n+        let crate1 = graph.add_crate_root(\n+            FileId(1u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n+        let crate2 = graph.add_crate_root(\n+            FileId(2u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n         assert!(graph\n             .add_dep(crate1, CrateName::normalize_dashes(\"crate-name-with-dashes\"), crate2)\n             .is_ok());"}, {"sha": "f870548384edd353ab5b80f83b5c29e70db4a6e1", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 13, "deletions": 30, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=5cffef56e2c373f6d67b0f7b70d7ade995795c04", "patch": "@@ -1,8 +1,10 @@\n //! FIXME: write short doc here\n \n use hir::{\n-    Adt, AsAssocItem, AssocItemContainer, HasSource, HirDisplay, ModuleDef, ModuleSource, Semantics,\n+    Adt, AsAssocItem, AssocItemContainer, FieldSource, HasSource, HirDisplay, ModuleDef,\n+    ModuleSource, Semantics,\n };\n+use ra_db::SourceDatabase;\n use ra_ide_db::{\n     defs::{classify_name, classify_name_ref, Definition},\n     RootDatabase,\n@@ -119,7 +121,7 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n \n fn determine_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n     let mod_path = def.module(db).map(|module| {\n-        once(db.get_crate_original_name(&module.krate().into()))\n+        once(db.crate_graph().declaration_name(&module.krate().into()).cloned())\n             .chain(\n                 module\n                     .path_to_root(db)\n@@ -144,7 +146,7 @@ fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<Strin\n         Definition::StructField(it) => {\n             let src = it.source(db);\n             match src.value {\n-                hir::FieldSource::Named(it) => {\n+                FieldSource::Named(it) => {\n                     hover_text(it.doc_comment_text(), it.short_label(), mod_path)\n                 }\n                 _ => None,\n@@ -576,21 +578,23 @@ fn func(foo: i32) { if true { <|>foo; }; }\n     fn test_hover_infer_associated_method_exact() {\n         let (analysis, position) = single_file_with_position(\n             \"\n-            struct Thing { x: u32 }\n+            mod wrapper {\n+                struct Thing { x: u32 }\n \n-            impl Thing {\n-                fn new() -> Thing {\n-                    Thing { x: 0 }\n+                impl Thing {\n+                    fn new() -> Thing {\n+                        Thing { x: 0 }\n+                    }\n                 }\n             }\n \n             fn main() {\n-                let foo_test = Thing::new<|>();\n+                let foo_test = wrapper::Thing::new<|>();\n             }\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"fn new() -> Thing\"));\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"wrapper::Thing\\nfn new() -> Thing\"));\n         assert_eq!(hover.info.is_exact(), true);\n     }\n \n@@ -863,25 +867,4 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             &[\"fn foo()\\n```\\n\\n<- `\\u{3000}` here\"],\n         );\n     }\n-\n-    #[test]\n-    fn zzz() {\n-        check_hover_result(\n-            \"\n-            //- /main.rs\n-            mod vvv {\n-                pub struct Test;\n-\n-                impl Test {\n-                    pub fn whatever() {}\n-                }\n-            }\n-\n-            fn main() {\n-                vvv::Test::what<|>ever();\n-            }\n-            \",\n-            &[\"vvv::Test\\npub fn whatever()\"],\n-        );\n-    }\n }"}, {"sha": "56bc57d5cd4e97c812fc10665236f7679677c40d", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=5cffef56e2c373f6d67b0f7b70d7ade995795c04", "patch": "@@ -211,7 +211,13 @@ impl Analysis {\n         // Default to enable test for single file.\n         let mut cfg_options = CfgOptions::default();\n         cfg_options.insert_atom(\"test\".into());\n-        crate_graph.add_crate_root(file_id, Edition::Edition2018, cfg_options, Env::default());\n+        crate_graph.add_crate_root(\n+            file_id,\n+            Edition::Edition2018,\n+            None,\n+            cfg_options,\n+            Env::default(),\n+        );\n         change.add_file(source_root, file_id, \"main.rs\".into(), Arc::new(text));\n         change.set_crate_graph(crate_graph);\n         host.apply_change(change);"}, {"sha": "90f84b052b8f05ac57e70e4747818379719201e0", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=5cffef56e2c373f6d67b0f7b70d7ade995795c04", "patch": "@@ -99,13 +99,19 @@ impl MockAnalysis {\n                 root_crate = Some(crate_graph.add_crate_root(\n                     file_id,\n                     Edition2018,\n+                    None,\n                     cfg_options,\n                     Env::default(),\n                 ));\n             } else if path.ends_with(\"/lib.rs\") {\n-                let other_crate =\n-                    crate_graph.add_crate_root(file_id, Edition2018, cfg_options, Env::default());\n                 let crate_name = path.parent().unwrap().file_name().unwrap();\n+                let other_crate = crate_graph.add_crate_root(\n+                    file_id,\n+                    Edition2018,\n+                    Some(crate_name.to_owned()),\n+                    cfg_options,\n+                    Env::default(),\n+                );\n                 if let Some(root_crate) = root_crate {\n                     crate_graph\n                         .add_dep(root_crate, CrateName::new(crate_name).unwrap(), other_crate)"}, {"sha": "b73cefd9773ec98731943b9d33cdf71f4fb276d7", "filename": "crates/ra_ide/src/parent_module.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fparent_module.rs?ref=5cffef56e2c373f6d67b0f7b70d7ade995795c04", "patch": "@@ -133,6 +133,7 @@ mod tests {\n         let crate_id = crate_graph.add_crate_root(\n             root_file,\n             Edition2018,\n+            None,\n             CfgOptions::default(),\n             Env::default(),\n         );"}, {"sha": "628cf6416a9c40af0a067ad84f8f801db8f544c9", "filename": "crates/ra_ide_db/src/change.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fchange.rs?ref=5cffef56e2c373f6d67b0f7b70d7ade995795c04", "patch": "@@ -5,7 +5,7 @@ use std::{fmt, sync::Arc, time};\n \n use ra_db::{\n     salsa::{Database, Durability, SweepStrategy},\n-    CrateGraph, CrateId, FileId, RelativePathBuf, SourceDatabase, SourceDatabaseExt, SourceRoot,\n+    CrateGraph, FileId, RelativePathBuf, SourceDatabase, SourceDatabaseExt, SourceRoot,\n     SourceRootId,\n };\n use ra_prof::{memory_usage, profile, Bytes};\n@@ -88,10 +88,6 @@ impl AnalysisChange {\n         self.crate_graph = Some(graph);\n     }\n \n-    pub fn set_debug_crate_name(&mut self, crate_id: CrateId, name: String) {\n-        self.debug_data.crate_names.insert(crate_id, name);\n-    }\n-\n     pub fn set_debug_root_path(&mut self, source_root_id: SourceRootId, path: String) {\n         self.debug_data.root_paths.insert(source_root_id, path);\n     }"}, {"sha": "a105c755674bc3c8cba7f9984da8d958ba02cb20", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=5cffef56e2c373f6d67b0f7b70d7ade995795c04", "patch": "@@ -104,10 +104,6 @@ impl RootDatabase {\n         db.query_mut(hir::db::MacroExpandQuery).set_lru_capacity(lru_capacity);\n         db\n     }\n-\n-    pub fn get_crate_original_name(&self, crate_id: &CrateId) -> Option<String> {\n-        self.debug_data.crate_names.get(crate_id).cloned()\n-    }\n }\n \n impl salsa::ParallelDatabase for RootDatabase {\n@@ -135,12 +131,10 @@ fn line_index(db: &impl LineIndexDatabase, file_id: FileId) -> Arc<LineIndex> {\n #[derive(Debug, Default, Clone)]\n pub(crate) struct DebugData {\n     pub(crate) root_paths: FxHashMap<SourceRootId, String>,\n-    pub(crate) crate_names: FxHashMap<CrateId, String>,\n }\n \n impl DebugData {\n     pub(crate) fn merge(&mut self, other: DebugData) {\n         self.root_paths.extend(other.root_paths.into_iter());\n-        self.crate_names.extend(other.crate_names.into_iter());\n     }\n }"}, {"sha": "37845ca56f93404453f5e2534571414fbbd31587", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=5cffef56e2c373f6d67b0f7b70d7ade995795c04", "patch": "@@ -14,7 +14,7 @@ use std::{\n \n use anyhow::{bail, Context, Result};\n use ra_cfg::CfgOptions;\n-use ra_db::{CrateGraph, CrateId, CrateName, Edition, Env, FileId};\n+use ra_db::{CrateGraph, CrateName, Edition, Env, FileId};\n use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n \n@@ -163,9 +163,8 @@ impl ProjectWorkspace {\n         &self,\n         default_cfg_options: &CfgOptions,\n         load: &mut dyn FnMut(&Path) -> Option<FileId>,\n-    ) -> (CrateGraph, FxHashMap<CrateId, String>) {\n+    ) -> CrateGraph {\n         let mut crate_graph = CrateGraph::default();\n-        let mut names = FxHashMap::default();\n         match self {\n             ProjectWorkspace::Json { project } => {\n                 let mut crates = FxHashMap::default();\n@@ -191,6 +190,8 @@ impl ProjectWorkspace {\n                             crate_graph.add_crate_root(\n                                 file_id,\n                                 edition,\n+                                // FIXME json definitions can store the crate name\n+                                None,\n                                 cfg_options,\n                                 Env::default(),\n                             ),\n@@ -233,11 +234,11 @@ impl ProjectWorkspace {\n                         let crate_id = crate_graph.add_crate_root(\n                             file_id,\n                             Edition::Edition2018,\n+                            Some(krate.name(&sysroot).to_string()),\n                             cfg_options,\n                             Env::default(),\n                         );\n                         sysroot_crates.insert(krate, crate_id);\n-                        names.insert(crate_id, krate.name(&sysroot).to_string());\n                     }\n                 }\n                 for from in sysroot.crates() {\n@@ -277,10 +278,10 @@ impl ProjectWorkspace {\n                             let crate_id = crate_graph.add_crate_root(\n                                 file_id,\n                                 edition,\n+                                Some(pkg.name(&cargo).to_string()),\n                                 cfg_options,\n                                 Env::default(),\n                             );\n-                            names.insert(crate_id, pkg.name(&cargo).to_string());\n                             if tgt.kind(&cargo) == TargetKind::Lib {\n                                 lib_tgt = Some(crate_id);\n                                 pkg_to_lib_crate.insert(pkg, crate_id);\n@@ -381,7 +382,7 @@ impl ProjectWorkspace {\n                 }\n             }\n         }\n-        (crate_graph, names)\n+        crate_graph\n     }\n \n     pub fn workspace_root_for(&self, path: &Path) -> Option<&Path> {"}, {"sha": "4be987860d157dff11965cb63585cbe53203087d", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=5cffef56e2c373f6d67b0f7b70d7ade995795c04", "patch": "@@ -52,12 +52,11 @@ pub(crate) fn load_cargo(\n         opts\n     };\n \n-    let (crate_graph, _crate_names) =\n-        ws.to_crate_graph(&default_cfg_options, &mut |path: &Path| {\n-            let vfs_file = vfs.load(path);\n-            log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n-            vfs_file.map(vfs_file_to_id)\n-        });\n+    let crate_graph = ws.to_crate_graph(&default_cfg_options, &mut |path: &Path| {\n+        let vfs_file = vfs.load(path);\n+        log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n+        vfs_file.map(vfs_file_to_id)\n+    });\n     log::debug!(\"crate graph: {:?}\", crate_graph);\n \n     let source_roots = roots"}, {"sha": "c92cf137c40d9ce2be43748614ab45db71f4bea8", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cffef56e2c373f6d67b0f7b70d7ade995795c04/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=5cffef56e2c373f6d67b0f7b70d7ade995795c04", "patch": "@@ -123,13 +123,12 @@ impl WorldState {\n             let vfs_file = vfs.load(path);\n             vfs_file.map(|f| FileId(f.0))\n         };\n-        for ws in workspaces.iter() {\n-            let (graph, crate_names) = ws.to_crate_graph(&default_cfg_options, &mut load);\n-            let shift = crate_graph.extend(graph);\n-            for (crate_id, name) in crate_names {\n-                change.set_debug_crate_name(crate_id.shift(shift), name)\n-            }\n-        }\n+\n+        workspaces.iter().map(|ws| ws.to_crate_graph(&default_cfg_options, &mut load)).for_each(\n+            |graph| {\n+                crate_graph.extend(graph);\n+            },\n+        );\n         change.set_crate_graph(crate_graph);\n \n         // FIXME: Figure out the multi-workspace situation"}]}