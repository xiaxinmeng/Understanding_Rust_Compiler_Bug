{"sha": "50a79693e171dbf20a979334b1d38dc1a61d1138", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYTc5NjkzZTE3MWRiZjIwYTk3OTMzNGIxZDM4ZGMxYTYxZDExMzg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-16T13:02:41Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-24T02:53:43Z"}, "message": "Add some timing info to rustdoc\n\nThere are various improvements, but the main one is to time each pass\nthat rustdoc performs (`rustdoc::passes`).\n\nBefore, these were the top five timings for `cargo doc` on the cargo\nrepository:\n\n```\n+---------------------------------+-----------+-----------------+----------+------------+\n| Item                            | Self time | % of total time | Time     | Item count |\n+---------------------------------+-----------+-----------------+----------+------------+\n| <unknown>                       | 854.70ms  | 20.888          | 2.47s    | 744823     |\n+---------------------------------+-----------+-----------------+----------+------------+\n| expand_crate                    | 795.29ms  | 19.436          | 848.00ms | 1          |\n+---------------------------------+-----------+-----------------+----------+------------+\n| metadata_decode_entry           | 256.73ms  | 6.274           | 279.49ms | 518344     |\n+---------------------------------+-----------+-----------------+----------+------------+\n| resolve_crate                   | 240.56ms  | 5.879           | 242.86ms | 1          |\n+---------------------------------+-----------+-----------------+----------+------------+\n| hir_lowering                    | 146.79ms  | 3.587           | 146.79ms | 1          |\n+---------------------------------+-----------+-----------------+----------+------------+\n```\n\nNow the timings are:\n\n```\n+---------------------------------+-----------+-----------------+----------+------------+\n| Item                            | Self time | % of total time | Time     | Item count |\n+---------------------------------+-----------+-----------------+----------+------------+\n| <unknown>                       | 1.40s     | 22.662          | 3.73s    | 771430     |\n+---------------------------------+-----------+-----------------+----------+------------+\n| collect-trait-impls             | 1.34s     | 21.672          | 2.87s    | 1          |\n+---------------------------------+-----------+-----------------+----------+------------+\n| expand_crate                    | 1.21s     | 19.577          | 1.28s    | 1          |\n+---------------------------------+-----------+-----------------+----------+------------+\n| build extern trait impl         | 704.66ms  | 11.427          | 1.07s    | 21893      |\n+---------------------------------+-----------+-----------------+----------+------------+\n| metadata_decode_entry           | 354.84ms  | 5.754           | 391.81ms | 544919     |\n+---------------------------------+-----------+-----------------+----------+------------+\n```", "tree": {"sha": "a3624c161401db893dcae6842820e61ef94326c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3624c161401db893dcae6842820e61ef94326c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50a79693e171dbf20a979334b1d38dc1a61d1138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50a79693e171dbf20a979334b1d38dc1a61d1138", "html_url": "https://github.com/rust-lang/rust/commit/50a79693e171dbf20a979334b1d38dc1a61d1138", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50a79693e171dbf20a979334b1d38dc1a61d1138/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fdce9bbb9eb25defd9429cc5122fe6eb59f5ffd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fdce9bbb9eb25defd9429cc5122fe6eb59f5ffd", "html_url": "https://github.com/rust-lang/rust/commit/8fdce9bbb9eb25defd9429cc5122fe6eb59f5ffd"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "cb50200ae675a2868f91392770ec3328cb4fbf60", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/50a79693e171dbf20a979334b1d38dc1a61d1138/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50a79693e171dbf20a979334b1d38dc1a61d1138/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=50a79693e171dbf20a979334b1d38dc1a61d1138", "patch": "@@ -407,7 +407,9 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 let hir = tcx.hir();\n                 let body = hir.body(hir.body_owned_by(hir.local_def_id_to_hir_id(def_id)));\n                 debug!(\"visiting body for {:?}\", def_id);\n+                tcx.sess.time(\"emit ignored resolution errors\", || {\n                 EmitIgnoredResolutionErrors::new(tcx).visit_body(body);\n+                });\n                 (rustc_interface::DEFAULT_QUERY_PROVIDERS.typeck)(tcx, def_id)\n             };\n         }),\n@@ -430,6 +432,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 // intra-doc-links\n                 resolver.borrow_mut().access(|resolver| {\n                     for extern_name in &extern_names {\n+                        sess.time(\"load extern crate\", || {\n                         resolver\n                             .resolve_str_path_error(\n                                 DUMMY_SP,\n@@ -440,6 +443,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                             .unwrap_or_else(|()| {\n                                 panic!(\"Unable to resolve external crate {}\", extern_name)\n                             });\n+                        });\n                     }\n                 });\n \n@@ -480,7 +484,9 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                     tcx.ensure().check_mod_attrs(local_def_id);\n                 }\n \n-                let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);\n+                let access_levels = tcx\n+                    .sess\n+                    .time(\"privacy_access_levels\", || tcx.privacy_access_levels(LOCAL_CRATE));\n                 // Convert from a HirId set to a DefId set since we don't always have easy access\n                 // to the map from defid -> hirid\n                 let access_levels = AccessLevels {\n@@ -519,7 +525,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 };\n                 debug!(\"crate: {:?}\", tcx.hir().krate());\n \n-                let mut krate = clean::krate(&mut ctxt);\n+                let mut krate = tcx.sess.time(\"clean crate\", || clean::krate(&mut ctxt));\n \n                 if let Some(ref m) = krate.module {\n                     if let None | Some(\"\") = m.doc_value() {\n@@ -618,7 +624,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                     };\n                     if run {\n                         debug!(\"running pass {}\", p.pass.name);\n-                        krate = (p.pass.run)(krate, &ctxt);\n+                        krate = ctxt.tcx.sess.time(p.pass.name, || (p.pass.run)(krate, &ctxt));\n                     }\n                 }\n "}, {"sha": "b6bb96ef455ef7e2dc4d790438b5455ac89bc6b9", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50a79693e171dbf20a979334b1d38dc1a61d1138/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50a79693e171dbf20a979334b1d38dc1a61d1138/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=50a79693e171dbf20a979334b1d38dc1a61d1138", "patch": "@@ -29,7 +29,9 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n \n     for &cnum in cx.tcx.crates().iter() {\n         for &(did, _) in cx.tcx.all_trait_implementations(cnum).iter() {\n-            inline::build_impl(cx, did, None, &mut new_items);\n+            cx.tcx.sess.time(\"build extern trait impl\", || {\n+                inline::build_impl(cx, did, None, &mut new_items);\n+            });\n         }\n     }\n \n@@ -87,7 +89,9 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n     for &trait_did in cx.tcx.all_traits(LOCAL_CRATE).iter() {\n         for &impl_node in cx.tcx.hir().trait_impls(trait_did) {\n             let impl_did = cx.tcx.hir().local_def_id(impl_node);\n-            inline::build_impl(cx, impl_did.to_def_id(), None, &mut new_items);\n+            cx.tcx.sess.time(\"build local trait impl\", || {\n+                inline::build_impl(cx, impl_did.to_def_id(), None, &mut new_items);\n+            });\n         }\n     }\n "}]}