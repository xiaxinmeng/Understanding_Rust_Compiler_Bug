{"sha": "56203be06f3671ce73d5634bf5c098eb3b8b1c1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MjAzYmUwNmYzNjcxY2U3M2Q1NjM0YmY1YzA5OGViM2I4YjFjMWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-29T21:57:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-29T21:57:33Z"}, "message": "Rollup merge of #66766 - RalfJung:panic-comments, r=SimonSapin\n\nPanic machinery comments and tweaks\n\nThis is mostly more comments, but I also renamed some things:\n* `BoxMeUp::box_me_up` is not terribly descriptive, and since this is a \"take\"-style method (the argument is `&mut self` but the return type is fully owned, even though you can't tell from the type) I chose a name involving \"take\".\n* `continue_panic_fmt` was very confusing as it was entirely unclear what was being continued -- for some time I thought \"continue\" might be the same as \"resume\" for a panic, but that's something entirely different. So I renamed this to `begin_panic_handler`, matching the `begin_panic*` theme of the other entry points.\n\nr? @Dylan-DPC @SimonSapin", "tree": {"sha": "a8a74fd3b9ca28fc3ef073b4d7f79c709852303c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8a74fd3b9ca28fc3ef073b4d7f79c709852303c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56203be06f3671ce73d5634bf5c098eb3b8b1c1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd4ZRNCRBK7hj4Ov3rIwAAdHIIADn2SxQ1AaknMSi3gefs9lTo\nMrwdxY2tmTd+zYB8gUZVLbeqv730X+AYg4gJdMBaNMpIgif2sSo4WbETuBoIHl/D\n4lCJuyPZ9pXya1+nYAbm6dmUZHBgo66fJJkX/kWrjMhD02wuDwazhtLht/vKkUKR\n8AHDExu/ZHrIZuCty505ExtxXPMroL4/ylgc9sOy+klT7YW3g0UVgzUW7a2zc9QO\n4QjQ36l5Boq33lH70hhdHhn5NgNyVJ/oAgDsUUkCMJca23+RGneQZgMtswgvetcM\nulELibHGx46Jan0ydPc+5hIzhHEr57ik2mIUdhu1XFcv9HO5AD3lx+SJXqf1/M0=\n=Umfh\n-----END PGP SIGNATURE-----\n", "payload": "tree a8a74fd3b9ca28fc3ef073b4d7f79c709852303c\nparent 64efc45bb9f550374df302d219dd721f19604b2b\nparent babe9fcbc1d5aa5a6a53b7d2e34777cfe28e2c41\nauthor Ralf Jung <post@ralfj.de> 1575064653 +0100\ncommitter GitHub <noreply@github.com> 1575064653 +0100\n\nRollup merge of #66766 - RalfJung:panic-comments, r=SimonSapin\n\nPanic machinery comments and tweaks\n\nThis is mostly more comments, but I also renamed some things:\n* `BoxMeUp::box_me_up` is not terribly descriptive, and since this is a \"take\"-style method (the argument is `&mut self` but the return type is fully owned, even though you can't tell from the type) I chose a name involving \"take\".\n* `continue_panic_fmt` was very confusing as it was entirely unclear what was being continued -- for some time I thought \"continue\" might be the same as \"resume\" for a panic, but that's something entirely different. So I renamed this to `begin_panic_handler`, matching the `begin_panic*` theme of the other entry points.\n\nr? @Dylan-DPC @SimonSapin\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56203be06f3671ce73d5634bf5c098eb3b8b1c1c", "html_url": "https://github.com/rust-lang/rust/commit/56203be06f3671ce73d5634bf5c098eb3b8b1c1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56203be06f3671ce73d5634bf5c098eb3b8b1c1c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64efc45bb9f550374df302d219dd721f19604b2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/64efc45bb9f550374df302d219dd721f19604b2b", "html_url": "https://github.com/rust-lang/rust/commit/64efc45bb9f550374df302d219dd721f19604b2b"}, {"sha": "babe9fcbc1d5aa5a6a53b7d2e34777cfe28e2c41", "url": "https://api.github.com/repos/rust-lang/rust/commits/babe9fcbc1d5aa5a6a53b7d2e34777cfe28e2c41", "html_url": "https://github.com/rust-lang/rust/commit/babe9fcbc1d5aa5a6a53b7d2e34777cfe28e2c41"}], "stats": {"total": 73, "additions": 45, "deletions": 28}, "files": [{"sha": "99b372d92c8b6c4945aa5f8761a35442a71a2306", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56203be06f3671ce73d5634bf5c098eb3b8b1c1c/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56203be06f3671ce73d5634bf5c098eb3b8b1c1c/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=56203be06f3671ce73d5634bf5c098eb3b8b1c1c", "patch": "@@ -266,6 +266,16 @@ impl fmt::Display for Location<'_> {\n #[unstable(feature = \"std_internals\", issue = \"0\")]\n #[doc(hidden)]\n pub unsafe trait BoxMeUp {\n-    fn box_me_up(&mut self) -> *mut (dyn Any + Send);\n+    /// Take full ownership of the contents.\n+    /// The return type is actually `Box<dyn Any + Send>`, but we cannot use `Box` in libcore.\n+    ///\n+    /// After this method got called, only some dummy default value is left in `self`.\n+    /// Calling this method twice, or calling `get` after calling this method, is an error.\n+    ///\n+    /// The argument is borrowed because the panic runtime (`__rust_start_panic`) only\n+    /// gets a borrowed `dyn BoxMeUp`.\n+    fn take_box(&mut self) -> *mut (dyn Any + Send);\n+\n+    /// Just borrow the contents.\n     fn get(&mut self) -> &(dyn Any + Send);\n }"}, {"sha": "5a8d647396ddab6b3f5512f0d35e69b43332b355", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56203be06f3671ce73d5634bf5c098eb3b8b1c1c/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56203be06f3671ce73d5634bf5c098eb3b8b1c1c/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=56203be06f3671ce73d5634bf5c098eb3b8b1c1c", "patch": "@@ -11,13 +11,13 @@\n //! ```\n //!\n //! This definition allows for panicking with any general message, but it does not\n-//! allow for failing with a `Box<Any>` value. The reason for this is that libcore\n-//! is not allowed to allocate.\n+//! allow for failing with a `Box<Any>` value. (`PanicInfo` just contains a `&(dyn Any + Send)`,\n+//! for which we fill in a dummy value in `PanicInfo::internal_constructor`.)\n+//! The reason for this is that libcore is not allowed to allocate.\n //!\n //! This module contains a few other panicking functions, but these are just the\n //! necessary lang items for the compiler. All panics are funneled through this\n-//! one function. Currently, the actual symbol is declared in the standard\n-//! library, but the location of this may change over time.\n+//! one function. The actual symbol is declared through the `#[panic_handler]` attribute.\n \n // ignore-tidy-undocumented-unsafe\n \n@@ -72,6 +72,7 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>, location: &Location<'_>) -> ! {\n     }\n \n     // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n+    // that gets resolved to the `#[panic_handler]` function.\n     extern \"Rust\" {\n         #[lang = \"panic_impl\"]\n         fn panic_impl(pi: &PanicInfo<'_>) -> !;"}, {"sha": "0c834e5c2a05c3bce0e2cd7b45e14efda6b8f582", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56203be06f3671ce73d5634bf5c098eb3b8b1c1c/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56203be06f3671ce73d5634bf5c098eb3b8b1c1c/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=56203be06f3671ce73d5634bf5c098eb3b8b1c1c", "patch": "@@ -94,5 +94,5 @@ pub unsafe extern \"C\" fn __rust_maybe_catch_panic(f: fn(*mut u8),\n #[unwind(allowed)]\n pub unsafe extern \"C\" fn __rust_start_panic(payload: usize) -> u32 {\n     let payload = payload as *mut &mut dyn BoxMeUp;\n-    imp::panic(Box::from_raw((*payload).box_me_up()))\n+    imp::panic(Box::from_raw((*payload).take_box()))\n }"}, {"sha": "cd024068d2d47bfeda8c2cb7e43954280c097917", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56203be06f3671ce73d5634bf5c098eb3b8b1c1c/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56203be06f3671ce73d5634bf5c098eb3b8b1c1c/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=56203be06f3671ce73d5634bf5c098eb3b8b1c1c", "patch": "@@ -425,5 +425,5 @@ pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n /// ```\n #[stable(feature = \"resume_unwind\", since = \"1.9.0\")]\n pub fn resume_unwind(payload: Box<dyn Any + Send>) -> ! {\n-    panicking::update_count_then_panic(payload)\n+    panicking::rust_panic_without_hook(payload)\n }"}, {"sha": "c028ddcd676fca021d548399a18aaa59bf6a33ce", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/56203be06f3671ce73d5634bf5c098eb3b8b1c1c/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56203be06f3671ce73d5634bf5c098eb3b8b1c1c/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=56203be06f3671ce73d5634bf5c098eb3b8b1c1c", "patch": "@@ -20,6 +20,7 @@ use crate::sys_common::rwlock::RWLock;\n use crate::sys_common::{thread_info, util};\n use crate::sys_common::backtrace::{self, RustBacktrace};\n use crate::thread;\n+use crate::process;\n \n #[cfg(not(test))]\n use crate::io::set_panic;\n@@ -46,6 +47,8 @@ extern {\n                                 vtable_ptr: *mut usize) -> u32;\n \n     /// `payload` is actually a `*mut &mut dyn BoxMeUp` but that would cause FFI warnings.\n+    /// It cannot be `Box<dyn BoxMeUp>` because the other end of this call does not depend\n+    /// on liballoc, and thus cannot use `Box`.\n     #[unwind(allowed)]\n     fn __rust_start_panic(payload: usize) -> u32;\n }\n@@ -296,14 +299,6 @@ pub fn panicking() -> bool {\n     update_panic_count(0) != 0\n }\n \n-/// Entry point of panic from the libcore crate (`panic_impl` lang item).\n-#[cfg(not(test))]\n-#[panic_handler]\n-#[unwind(allowed)]\n-pub fn rust_begin_panic(info: &PanicInfo<'_>) -> ! {\n-    continue_panic_fmt(&info)\n-}\n-\n /// The entry point for panicking with a formatted message.\n ///\n /// This is designed to reduce the amount of code required at the call\n@@ -324,13 +319,17 @@ pub fn begin_panic_fmt(msg: &fmt::Arguments<'_>,\n         unsafe { intrinsics::abort() }\n     }\n \n+    // Just package everything into a `PanicInfo` and continue like libcore panics.\n     let (file, line, col) = *file_line_col;\n     let location = Location::internal_constructor(file, line, col);\n     let info = PanicInfo::internal_constructor(Some(msg), &location);\n-    continue_panic_fmt(&info)\n+    begin_panic_handler(&info)\n }\n \n-fn continue_panic_fmt(info: &PanicInfo<'_>) -> ! {\n+/// Entry point of panics from the libcore crate (`panic_impl` lang item).\n+#[cfg_attr(not(test), panic_handler)]\n+#[unwind(allowed)]\n+pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n     struct PanicPayload<'a> {\n         inner: &'a fmt::Arguments<'a>,\n         string: Option<String>,\n@@ -345,6 +344,7 @@ fn continue_panic_fmt(info: &PanicInfo<'_>) -> ! {\n             use crate::fmt::Write;\n \n             let inner = self.inner;\n+            // Lazily, the first time this gets called, run the actual string formatting.\n             self.string.get_or_insert_with(|| {\n                 let mut s = String::new();\n                 drop(s.write_fmt(*inner));\n@@ -354,7 +354,7 @@ fn continue_panic_fmt(info: &PanicInfo<'_>) -> ! {\n     }\n \n     unsafe impl<'a> BoxMeUp for PanicPayload<'a> {\n-        fn box_me_up(&mut self) -> *mut (dyn Any + Send) {\n+        fn take_box(&mut self) -> *mut (dyn Any + Send) {\n             let contents = mem::take(self.fill());\n             Box::into_raw(Box::new(contents))\n         }\n@@ -378,7 +378,9 @@ fn continue_panic_fmt(info: &PanicInfo<'_>) -> ! {\n         &file_line_col);\n }\n \n-/// This is the entry point of panicking for panic!() and assert!().\n+/// This is the entry point of panicking for the non-format-string variants of\n+/// panic!() and assert!(). In particular, this is the only entry point that supports\n+/// arbitrary payloads, not just format strings.\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n@@ -412,18 +414,18 @@ pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u3\n     }\n \n     unsafe impl<A: Send + 'static> BoxMeUp for PanicPayload<A> {\n-        fn box_me_up(&mut self) -> *mut (dyn Any + Send) {\n+        fn take_box(&mut self) -> *mut (dyn Any + Send) {\n             let data = match self.inner.take() {\n                 Some(a) => Box::new(a) as Box<dyn Any + Send>,\n-                None => Box::new(()),\n+                None => process::abort(),\n             };\n             Box::into_raw(data)\n         }\n \n         fn get(&mut self) -> &(dyn Any + Send) {\n             match self.inner {\n                 Some(ref a) => a,\n-                None => &(),\n+                None => process::abort(),\n             }\n         }\n     }\n@@ -457,9 +459,12 @@ fn rust_panic_with_hook(payload: &mut dyn BoxMeUp,\n         let mut info = PanicInfo::internal_constructor(message, &location);\n         HOOK_LOCK.read();\n         match HOOK {\n-            // Some platforms know that printing to stderr won't ever actually\n+            // Some platforms (like wasm) know that printing to stderr won't ever actually\n             // print anything, and if that's the case we can skip the default\n-            // hook.\n+            // hook. Since string formatting happens lazily when calling `payload`\n+            // methods, this means we avoid formatting the string at all!\n+            // (The panic runtime might still call `payload.take_box()` though and trigger\n+            // formatting.)\n             Hook::Default if panic_output().is_none() => {}\n             Hook::Default => {\n                 info.set_payload(payload.get());\n@@ -486,14 +491,15 @@ fn rust_panic_with_hook(payload: &mut dyn BoxMeUp,\n     rust_panic(payload)\n }\n \n-/// Shim around rust_panic. Called by resume_unwind.\n-pub fn update_count_then_panic(msg: Box<dyn Any + Send>) -> ! {\n+/// This is the entry point for `resume_unwind`.\n+/// It just forwards the payload to the panic runtime.\n+pub fn rust_panic_without_hook(payload: Box<dyn Any + Send>) -> ! {\n     update_panic_count(1);\n \n     struct RewrapBox(Box<dyn Any + Send>);\n \n     unsafe impl BoxMeUp for RewrapBox {\n-        fn box_me_up(&mut self) -> *mut (dyn Any + Send) {\n+        fn take_box(&mut self) -> *mut (dyn Any + Send) {\n             Box::into_raw(mem::replace(&mut self.0, Box::new(())))\n         }\n \n@@ -502,7 +508,7 @@ pub fn update_count_then_panic(msg: Box<dyn Any + Send>) -> ! {\n         }\n     }\n \n-    rust_panic(&mut RewrapBox(msg))\n+    rust_panic(&mut RewrapBox(payload))\n }\n \n /// An unmangled function (through `rustc_std_internal_symbol`) on which to slap"}]}