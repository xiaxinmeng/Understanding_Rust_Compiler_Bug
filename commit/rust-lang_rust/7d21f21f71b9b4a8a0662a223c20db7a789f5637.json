{"sha": "7d21f21f71b9b4a8a0662a223c20db7a789f5637", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMjFmMjFmNzFiOWI0YThhMDY2MmEyMjNjMjBkYjdhNzg5ZjU2Mzc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-29T01:47:12Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-08-10T23:06:27Z"}, "message": "syntax: Relax path grammar", "tree": {"sha": "1bec81f1d13749cf2b3b31e877715fdfef5da2cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bec81f1d13749cf2b3b31e877715fdfef5da2cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d21f21f71b9b4a8a0662a223c20db7a789f5637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d21f21f71b9b4a8a0662a223c20db7a789f5637", "html_url": "https://github.com/rust-lang/rust/commit/7d21f21f71b9b4a8a0662a223c20db7a789f5637", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d21f21f71b9b4a8a0662a223c20db7a789f5637/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13d94d5fa8129a34f5c77a1bcd76983f5aed2434", "url": "https://api.github.com/repos/rust-lang/rust/commits/13d94d5fa8129a34f5c77a1bcd76983f5aed2434", "html_url": "https://github.com/rust-lang/rust/commit/13d94d5fa8129a34f5c77a1bcd76983f5aed2434"}], "stats": {"total": 52, "additions": 20, "deletions": 32}, "files": [{"sha": "9e36adf3d35963effcf01bc83b041fe7b0411645", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7d21f21f71b9b4a8a0662a223c20db7a789f5637/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d21f21f71b9b4a8a0662a223c20db7a789f5637/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7d21f21f71b9b4a8a0662a223c20db7a789f5637", "patch": "@@ -84,7 +84,7 @@ pub enum PathStyle {\n     Expr,\n     /// In other contexts, notably in types, no ambiguity exists and paths can be written\n     /// without the disambiguator, e.g. `x<y>` - unambiguously a path.\n-    /// Paths with disambiguators are rejected for now, but may be allowed in the future.\n+    /// Paths with disambiguators are still accepted, `x::<Y>` - unambiguously a path too.\n     Type,\n     /// A path with generic arguments disallowed, e.g. `foo::bar::Baz`, used in imports,\n     /// visibilities or attributes.\n@@ -1835,18 +1835,7 @@ impl<'a> Parser<'a> {\n                                       && self.look_ahead(1, |t| is_args_start(t)) {\n             // Generic arguments are found - `<`, `(`, `::<` or `::(`.\n             let lo = self.span;\n-            if self.eat(&token::ModSep) {\n-                // These errors are not strictly necessary and may be removed in the future.\n-                if style == PathStyle::Type {\n-                    let mut err = self.diagnostic().struct_span_err(self.prev_span,\n-                        \"unnecessary path disambiguator\");\n-                    err.span_label(self.prev_span, \"try removing `::`\");\n-                    err.emit();\n-                } else if self.token == token::OpenDelim(token::Paren) {\n-                    self.diagnostic().span_err(self.prev_span,\n-                        \"`::` is not supported before parenthesized generic arguments\")\n-                }\n-            }\n+            self.eat(&token::ModSep);\n \n             let parameters = if self.eat_lt() {\n                 // `<'a, T, A = U>`"}, {"sha": "ffbd0c0c22a7c07d2b7513e12a7fdcb18444222a", "filename": "src/test/compile-fail/issue-32995.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d21f21f71b9b4a8a0662a223c20db7a789f5637/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d21f21f71b9b4a8a0662a223c20db7a789f5637/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs?ref=7d21f21f71b9b4a8a0662a223c20db7a789f5637", "patch": "@@ -19,15 +19,11 @@ fn main() {\n     //~^ ERROR parenthesized parameters may only be used with a trait\n     //~| WARN previously accepted\n \n-    macro_rules! pathexpr {\n-        ($p:path) => { $p }\n-    }\n-\n-    let p = pathexpr!(::std::str()::from_utf8)(b\"foo\").unwrap();\n+    let p = ::std::str::()::from_utf8(b\"foo\").unwrap();\n     //~^ ERROR parenthesized parameters may only be used with a trait\n     //~| WARN previously accepted\n \n-    let p = pathexpr!(::std::str::from_utf8())(b\"foo\").unwrap();\n+    let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n     //~^ ERROR parenthesized parameters may only be used with a trait\n     //~| WARN previously accepted\n "}, {"sha": "18a6e430b84ded2c8b237f352d72cb88c988c28b", "filename": "src/test/compile-fail/issue-36116.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7d21f21f71b9b4a8a0662a223c20db7a789f5637/src%2Ftest%2Fcompile-fail%2Fissue-36116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d21f21f71b9b4a8a0662a223c20db7a789f5637/src%2Ftest%2Fcompile-fail%2Fissue-36116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-36116.rs?ref=7d21f21f71b9b4a8a0662a223c20db7a789f5637", "patch": "@@ -8,16 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Unnecessary path disambiguator is ok\n+\n+#![feature(rustc_attrs)]\n+#![allow(unused)]\n+\n struct Foo<T> {\n     _a: T,\n }\n \n-fn main() {\n+fn f() {\n     let f = Some(Foo { _a: 42 }).map(|a| a as Foo::<i32>);\n-    //~^ ERROR unnecessary path disambiguator\n-    //~| NOTE try removing `::`\n-\n     let g: Foo::<i32> = Foo { _a: 42 };\n-    //~^ ERROR unnecessary path disambiguator\n-    //~| NOTE try removing `::`\n }\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}, {"sha": "42fffe546c20c171bb57f56890008de761184328", "filename": "src/test/compile-fail/unboxed-closure-sugar-used-on-struct-3.rs", "status": "renamed", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d21f21f71b9b4a8a0662a223c20db7a789f5637/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-used-on-struct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d21f21f71b9b4a8a0662a223c20db7a789f5637/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-used-on-struct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-used-on-struct-3.rs?ref=7d21f21f71b9b4a8a0662a223c20db7a789f5637", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n-\n-// Test that parentheses form doesn't work in expression paths.\n+// Test that parentheses form parses in expression paths.\n \n struct Bar<A,R> {\n     f: A, r: R\n@@ -21,10 +19,10 @@ impl<A,B> Bar<A,B> {\n }\n \n fn bar() {\n-    let b = Box::Bar::<isize,usize>::new(); // OK\n+    let b = Bar::<isize, usize>::new(); // OK\n \n-    let b = Box::Bar::()::new();\n-    //~^ ERROR `::` is not supported before parenthesized generic arguments\n+    let b = Bar::(isize, usize)::new(); // OK too (for the parser)\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n }\n \n-fn main() { }\n+fn main() {}", "previous_filename": "src/test/parse-fail/unboxed-closure-sugar-used-on-struct-3.rs"}, {"sha": "cb018ff1bfa398f5272ca7e87c34add1747157a7", "filename": "src/test/parse-fail/type-parameters-in-field-exprs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d21f21f71b9b4a8a0662a223c20db7a789f5637/src%2Ftest%2Fparse-fail%2Ftype-parameters-in-field-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d21f21f71b9b4a8a0662a223c20db7a789f5637/src%2Ftest%2Fparse-fail%2Ftype-parameters-in-field-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftype-parameters-in-field-exprs.rs?ref=7d21f21f71b9b4a8a0662a223c20db7a789f5637", "patch": "@@ -24,4 +24,6 @@ fn main() {\n     //~^ ERROR field expressions may not have generic arguments\n     f.x::<>;\n     //~^ ERROR field expressions may not have generic arguments\n+    f.x::();\n+    //~^ ERROR field expressions may not have generic arguments\n }"}]}