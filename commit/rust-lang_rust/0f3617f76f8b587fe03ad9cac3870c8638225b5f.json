{"sha": "0f3617f76f8b587fe03ad9cac3870c8638225b5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMzYxN2Y3NmY4YjU4N2ZlMDNhZDljYWMzODcwYzg2MzgyMjViNWY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-26T01:32:34Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-26T01:32:45Z"}, "message": "fix: Fix multiple derives in one attribute not expanding all in expand_macro", "tree": {"sha": "f07082b49133446870a80b50ec7f2d43134db463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f07082b49133446870a80b50ec7f2d43134db463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f3617f76f8b587fe03ad9cac3870c8638225b5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3617f76f8b587fe03ad9cac3870c8638225b5f", "html_url": "https://github.com/rust-lang/rust/commit/0f3617f76f8b587fe03ad9cac3870c8638225b5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f3617f76f8b587fe03ad9cac3870c8638225b5f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f9f63c1bdc388d48d8b75315029e9d426069122", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f9f63c1bdc388d48d8b75315029e9d426069122", "html_url": "https://github.com/rust-lang/rust/commit/3f9f63c1bdc388d48d8b75315029e9d426069122"}], "stats": {"total": 78, "additions": 59, "deletions": 19}, "files": [{"sha": "2cd8bf68497735bc5aef52e1744f8be71d708d72", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0f3617f76f8b587fe03ad9cac3870c8638225b5f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3617f76f8b587fe03ad9cac3870c8638225b5f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=0f3617f76f8b587fe03ad9cac3870c8638225b5f", "patch": "@@ -148,7 +148,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.expand_attr_macro(item)\n     }\n \n-    pub fn expand_derive_macro(&self, derive: &ast::Attr) -> Option<SyntaxNode> {\n+    pub fn expand_derive_macro(&self, derive: &ast::Attr) -> Option<Vec<SyntaxNode>> {\n         self.imp.expand_derive_macro(derive)\n     }\n \n@@ -389,16 +389,29 @@ impl<'db> SemanticsImpl<'db> {\n         Some(node)\n     }\n \n-    fn expand_derive_macro(&self, attr: &ast::Attr) -> Option<SyntaxNode> {\n+    fn expand_derive_macro(&self, attr: &ast::Attr) -> Option<Vec<SyntaxNode>> {\n         let item = attr.syntax().parent().and_then(ast::Item::cast)?;\n         let sa = self.analyze(item.syntax());\n         let item = InFile::new(sa.file_id, &item);\n         let src = InFile::new(sa.file_id, attr.clone());\n-        let macro_call_id = self.with_ctx(|ctx| ctx.attr_to_derive_macro_call(item, src))?;\n-        let file_id = macro_call_id.as_file();\n-        let node = self.db.parse_or_expand(file_id)?;\n-        self.cache(node.clone(), file_id);\n-        Some(node)\n+        self.with_ctx(|ctx| {\n+            let macro_call_ids = ctx.attr_to_derive_macro_call(item, src)?;\n+\n+            let expansions: Vec<_> = macro_call_ids\n+                .iter()\n+                .map(|call| call.as_file())\n+                .flat_map(|file_id| {\n+                    let node = self.db.parse_or_expand(file_id)?;\n+                    self.cache(node.clone(), file_id);\n+                    Some(node)\n+                })\n+                .collect();\n+            if expansions.is_empty() {\n+                None\n+            } else {\n+                Some(expansions)\n+            }\n+        })\n     }\n \n     fn is_attr_macro_call(&self, item: &ast::Item) -> bool {"}, {"sha": "1f80fd3404e6865335036410605ef14f02edc164", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f3617f76f8b587fe03ad9cac3870c8638225b5f/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3617f76f8b587fe03ad9cac3870c8638225b5f/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=0f3617f76f8b587fe03ad9cac3870c8638225b5f", "patch": "@@ -246,9 +246,9 @@ impl SourceToDefCtx<'_, '_> {\n         &mut self,\n         item: InFile<&ast::Item>,\n         src: InFile<ast::Attr>,\n-    ) -> Option<MacroCallId> {\n+    ) -> Option<&[MacroCallId]> {\n         let map = self.dyn_map(item)?;\n-        map[keys::DERIVE_MACRO].get(&src).copied()\n+        map[keys::DERIVE_MACRO].get(&src).map(AsRef::as_ref)\n     }\n \n     fn to_def<Ast: AstNode + 'static, ID: Copy + 'static>("}, {"sha": "e4580a0ca335913f9398c0ba19410d5277a03e64", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f3617f76f8b587fe03ad9cac3870c8638225b5f/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3617f76f8b587fe03ad9cac3870c8638225b5f/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=0f3617f76f8b587fe03ad9cac3870c8638225b5f", "patch": "@@ -6,6 +6,7 @@\n \n use either::Either;\n use hir_expand::HirFileId;\n+use itertools::Itertools;\n use syntax::ast::AttrsOwner;\n \n use crate::{\n@@ -109,10 +110,13 @@ impl ChildBySource for ItemScope {\n             let item = ast_id.with_value(ast_id.to_node(db.upcast()));\n             res[keys::ATTR_MACRO].insert(item, call_id);\n         });\n-        self.derive_macro_invocs().for_each(|(ast_id, (attr_id, call_id))| {\n+        self.derive_macro_invocs().for_each(|(ast_id, calls)| {\n             let item = ast_id.to_node(db.upcast());\n-            if let Some(attr) = item.attrs().nth(attr_id.ast_index as usize) {\n-                res[keys::DERIVE_MACRO].insert(ast_id.with_value(attr), call_id);\n+            let grouped = calls.iter().copied().into_group_map();\n+            for (attr_id, calls) in grouped {\n+                if let Some(attr) = item.attrs().nth(attr_id.ast_index as usize) {\n+                    res[keys::DERIVE_MACRO].insert(ast_id.with_value(attr), calls.into());\n+                }\n             }\n         });\n "}, {"sha": "ec8c3a87c0f17318a68efd3c74a2b49c7851ee2d", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f3617f76f8b587fe03ad9cac3870c8638225b5f/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3617f76f8b587fe03ad9cac3870c8638225b5f/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=0f3617f76f8b587fe03ad9cac3870c8638225b5f", "patch": "@@ -195,8 +195,8 @@ impl ItemScope {\n \n     pub(crate) fn derive_macro_invocs(\n         &self,\n-    ) -> impl Iterator<Item = (AstId<ast::Item>, (AttrId, MacroCallId))> + '_ {\n-        self.derive_macros.iter().flat_map(|(k, v)| v.iter().map(move |v| (*k, *v)))\n+    ) -> impl Iterator<Item = (AstId<ast::Item>, &[(AttrId, MacroCallId)])> + '_ {\n+        self.derive_macros.iter().map(|(k, v)| (*k, v.as_ref()))\n     }\n \n     pub(crate) fn unnamed_trait_vis(&self, tr: TraitId) -> Option<Visibility> {"}, {"sha": "c554540391fbe3ea7d4c6abc6202f16c812ac65f", "filename": "crates/hir_def/src/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f3617f76f8b587fe03ad9cac3870c8638225b5f/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3617f76f8b587fe03ad9cac3870c8638225b5f/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fkeys.rs?ref=0f3617f76f8b587fe03ad9cac3870c8638225b5f", "patch": "@@ -33,7 +33,7 @@ pub const CONST_PARAM: Key<ast::ConstParam, ConstParamId> = Key::new();\n \n pub const MACRO: Key<ast::MacroCall, MacroDefId> = Key::new();\n pub const ATTR_MACRO: Key<ast::Item, MacroCallId> = Key::new();\n-pub const DERIVE_MACRO: Key<ast::Attr, MacroCallId> = Key::new();\n+pub const DERIVE_MACRO: Key<ast::Attr, Box<[MacroCallId]>> = Key::new();\n \n /// XXX: AST Nodes and SyntaxNodes have identity equality semantics: nodes are\n /// equal if they point to exactly the same object."}, {"sha": "8ec5e10c4df56fa565a7ede18d386c78fc738dc9", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0f3617f76f8b587fe03ad9cac3870c8638225b5f/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3617f76f8b587fe03ad9cac3870c8638225b5f/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=0f3617f76f8b587fe03ad9cac3870c8638225b5f", "patch": "@@ -37,10 +37,11 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n             if path == \"derive\" {\n                 let mut tt = tt.syntax().children_with_tokens().skip(1).join(\"\");\n                 tt.pop();\n-                return sema\n-                    .expand_derive_macro(&attr)\n-                    .map(insert_whitespaces)\n-                    .map(|expansion| ExpandedMacro { name: tt, expansion });\n+                let expansions = sema.expand_derive_macro(&attr)?;\n+                return Some(ExpandedMacro {\n+                    name: tt,\n+                    expansion: expansions.into_iter().map(insert_whitespaces).join(\"\"),\n+                });\n             }\n         }\n     }\n@@ -382,4 +383,26 @@ struct Foo {}\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn macro_expand_derive_multi() {\n+        check(\n+            r#\"\n+#[rustc_builtin_macro]\n+pub macro Clone {}\n+#[rustc_builtin_macro]\n+pub macro Copy {}\n+\n+#[derive(Cop$0y, Clone)]\n+struct Foo {}\n+\"#,\n+            expect![[r#\"\n+                Copy, Clone\n+                impl< >crate::marker::Copy for Foo< >{}\n+\n+                impl< >crate::clone::Clone for Foo< >{}\n+\n+            \"#]],\n+        );\n+    }\n }"}]}