{"sha": "03932f0b84e94f0ef96e4a6de6cb16ab436311e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzOTMyZjBiODRlOTRmMGVmOTZlNGE2ZGU2Y2IxNmFiNDM2MzExZTQ=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-24T10:08:08Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-24T22:20:00Z"}, "message": "Move impls of `Num` out of core::num and clean up imports", "tree": {"sha": "15cdbafa83d1ac03c9d39f7d76d4d82a12cfa683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15cdbafa83d1ac03c9d39f7d76d4d82a12cfa683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03932f0b84e94f0ef96e4a6de6cb16ab436311e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03932f0b84e94f0ef96e4a6de6cb16ab436311e4", "html_url": "https://github.com/rust-lang/rust/commit/03932f0b84e94f0ef96e4a6de6cb16ab436311e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03932f0b84e94f0ef96e4a6de6cb16ab436311e4/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "593bdd9be3959f166c303e3da0678cc9598bffc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/593bdd9be3959f166c303e3da0678cc9598bffc4", "html_url": "https://github.com/rust-lang/rust/commit/593bdd9be3959f166c303e3da0678cc9598bffc4"}], "stats": {"total": 130, "additions": 53, "deletions": 77}, "files": [{"sha": "e72356aa3cbd31d3487f9b55b859311891107f03", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/03932f0b84e94f0ef96e4a6de6cb16ab436311e4/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03932f0b84e94f0ef96e4a6de6cb16ab436311e4/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=03932f0b84e94f0ef96e4a6de6cb16ab436311e4", "patch": "@@ -10,20 +10,10 @@\n \n //! Operations and constants for `f32`\n \n-use num::strconv;\n-use num::Signed;\n-use num;\n-use option::Option;\n use from_str;\n-use to_str;\n-\n-#[cfg(notest)] use cmp::{Eq, Ord};\n-#[cfg(stage0,notest)]\n-use ops::{Add, Sub, Mul, Div, Modulo, Neg};\n-#[cfg(stage1,notest)]\n-#[cfg(stage2,notest)]\n-#[cfg(stage3,notest)]\n-use ops::{Add, Sub, Mul, Quot, Rem, Neg};\n+use libc::c_int;\n+use num::strconv;\n+use prelude::*;\n \n pub use cmath::c_float_targ_consts::*;\n \n@@ -233,6 +223,8 @@ pub fn logarithm(n: f32, b: f32) -> f32 {\n     return log2(n) / log2(b);\n }\n \n+impl Num for f32 {}\n+\n #[cfg(notest)]\n impl Eq for f32 {\n     #[inline(always)]\n@@ -588,6 +580,13 @@ impl num::FromStrRadix for f32 {\n #[cfg(test)]\n mod tests {\n     use f32::*;\n+    use super::*;\n+    use prelude::*;\n+\n+    #[test]\n+    fn test_num() {\n+        num::test_num(10f32, 2f32);\n+    }\n \n     #[test]\n     pub fn test_signed() {"}, {"sha": "c9867f5e6d40f735e66806e4cda996503c7a1cbf", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/03932f0b84e94f0ef96e4a6de6cb16ab436311e4/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03932f0b84e94f0ef96e4a6de6cb16ab436311e4/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=03932f0b84e94f0ef96e4a6de6cb16ab436311e4", "patch": "@@ -10,20 +10,10 @@\n \n //! Operations and constants for `f64`\n \n-use num::strconv;\n-use num::Signed;\n-use num;\n-use option::Option;\n-use to_str;\n use from_str;\n-\n-#[cfg(notest)] use cmp::{Eq, Ord};\n-#[cfg(stage0,notest)]\n-use ops::{Add, Sub, Mul, Div, Modulo, Neg};\n-#[cfg(stage1,notest)]\n-#[cfg(stage2,notest)]\n-#[cfg(stage3,notest)]\n-use ops::{Add, Sub, Mul, Quot, Rem, Neg};\n+use libc::c_int;\n+use num::strconv;\n+use prelude::*;\n \n pub use cmath::c_double_targ_consts::*;\n pub use cmp::{min, max};\n@@ -254,6 +244,8 @@ pub fn logarithm(n: f64, b: f64) -> f64 {\n     return log2(n) / log2(b);\n }\n \n+impl Num for f64 {}\n+\n #[cfg(notest)]\n impl Eq for f64 {\n     #[inline(always)]\n@@ -596,6 +588,13 @@ impl num::FromStrRadix for f64 {\n #[cfg(test)]\n mod tests {\n     use f64::*;\n+    use super::*;\n+    use prelude::*;\n+\n+    #[test]\n+    fn test_num() {\n+        num::test_num(10f64, 2f64);\n+    }\n \n     #[test]\n     pub fn test_signed() {"}, {"sha": "e2f3a4cbcdb1318173cd559f7edc4269812c2326", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/03932f0b84e94f0ef96e4a6de6cb16ab436311e4/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03932f0b84e94f0ef96e4a6de6cb16ab436311e4/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=03932f0b84e94f0ef96e4a6de6cb16ab436311e4", "patch": "@@ -20,21 +20,10 @@\n \n // PORT this must match in width according to architecture\n \n-use f64;\n-use num::strconv;\n-use num::Signed;\n-use num;\n-use option::Option;\n-use to_str;\n use from_str;\n-\n-#[cfg(notest)] use cmp::{Eq, Ord};\n-#[cfg(stage0,notest)]\n-use ops::{Add, Sub, Mul, Div, Modulo, Neg};\n-#[cfg(stage1,notest)]\n-#[cfg(stage2,notest)]\n-#[cfg(stage3,notest)]\n-use ops::{Add, Sub, Mul, Quot, Rem, Neg};\n+use libc::c_int;\n+use num::strconv;\n+use prelude::*;\n \n pub use f64::{add, sub, mul, quot, rem, lt, le, eq, ne, ge, gt};\n pub use f64::logarithm;\n@@ -382,6 +371,8 @@ pub fn tan(x: float) -> float {\n     f64::tan(x as f64) as float\n }\n \n+impl Num for float {}\n+\n #[cfg(notest)]\n impl Eq for float {\n     #[inline(always)]\n@@ -524,6 +515,11 @@ mod tests {\n     use super::*;\n     use prelude::*;\n \n+    #[test]\n+    fn test_num() {\n+        num::test_num(10f, 2f);\n+    }\n+\n     #[test]\n     pub fn test_signed() {\n         assert_eq!(infinity.abs(), infinity);"}, {"sha": "6598efa759ec216f8f08eb8a145c44c842aa51b1", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/03932f0b84e94f0ef96e4a6de6cb16ab436311e4/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03932f0b84e94f0ef96e4a6de6cb16ab436311e4/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=03932f0b84e94f0ef96e4a6de6cb16ab436311e4", "patch": "@@ -10,12 +10,9 @@\n \n use T = self::inst::T;\n \n-use to_str::ToStr;\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n-use num::Signed;\n-use num;\n use prelude::*;\n \n pub use cmp::{min, max};\n@@ -133,6 +130,8 @@ pub fn compl(i: T) -> T {\n #[inline(always)]\n pub fn abs(i: T) -> T { i.abs() }\n \n+impl Num for T {}\n+\n #[cfg(notest)]\n impl Ord for T {\n     #[inline(always)]\n@@ -522,6 +521,11 @@ mod tests {\n     use super::inst::T;\n     use prelude::*;\n \n+    #[test]\n+    fn test_num() {\n+        num::test_num(10 as T, 2 as T);\n+    }\n+\n     #[test]\n     pub fn test_signed() {\n         assert_eq!((1 as T).abs(), 1 as T);"}, {"sha": "62ed80114d3452410ac7dd3ba9e4e5d4dd7e82e7", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/03932f0b84e94f0ef96e4a6de6cb16ab436311e4/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03932f0b84e94f0ef96e4a6de6cb16ab436311e4/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=03932f0b84e94f0ef96e4a6de6cb16ab436311e4", "patch": "@@ -33,30 +33,18 @@ pub trait Num: Eq + Zero + One\n              + Quot<Self,Self>\n              + Rem<Self,Self> {}\n \n-impl Num for u8 {}\n-impl Num for u16 {}\n-impl Num for u32 {}\n-impl Num for u64 {}\n-impl Num for uint {}\n-impl Num for i8 {}\n-impl Num for i16 {}\n-impl Num for i32 {}\n-impl Num for i64 {}\n-impl Num for int {}\n-impl Num for f32 {}\n-impl Num for f64 {}\n-impl Num for float {}\n-\n pub trait IntConvertible {\n     fn to_int(&self) -> int;\n     fn from_int(n: int) -> Self;\n }\n \n pub trait Zero {\n+    // FIXME (#5527): These should be associated constants\n     fn zero() -> Self;\n }\n \n pub trait One {\n+    // FIXME (#5527): These should be associated constants\n     fn one() -> Self;\n }\n \n@@ -230,8 +218,9 @@ pub fn pow_with_uint<T:NumCast+One+Zero+Copy+Quot<T,T>+Mul<T,T>>(\n     total\n }\n \n+/// Helper function for testing numeric operations\n #[cfg(stage0,test)]\n-fn test_num<T:Num + NumCast>(ten: T, two: T) {\n+pub fn test_num<T:Num + NumCast>(ten: T, two: T) {\n     assert_eq!(ten.add(&two),    cast(12));\n     assert_eq!(ten.sub(&two),    cast(8));\n     assert_eq!(ten.mul(&two),    cast(20));\n@@ -247,7 +236,7 @@ fn test_num<T:Num + NumCast>(ten: T, two: T) {\n #[cfg(stage1,test)]\n #[cfg(stage2,test)]\n #[cfg(stage3,test)]\n-fn test_num<T:Num + NumCast>(ten: T, two: T) {\n+pub fn test_num<T:Num + NumCast>(ten: T, two: T) {\n     assert_eq!(ten.add(&two),  cast(12));\n     assert_eq!(ten.sub(&two),  cast(8));\n     assert_eq!(ten.mul(&two),  cast(20));\n@@ -261,20 +250,6 @@ fn test_num<T:Num + NumCast>(ten: T, two: T) {\n     assert_eq!(ten.rem(&two),  ten % two);\n }\n \n-#[test] fn test_u8_num()    { test_num(10u8,  2u8)  }\n-#[test] fn test_u16_num()   { test_num(10u16, 2u16) }\n-#[test] fn test_u32_num()   { test_num(10u32, 2u32) }\n-#[test] fn test_u64_num()   { test_num(10u64, 2u64) }\n-#[test] fn test_uint_num()  { test_num(10u,   2u)   }\n-#[test] fn test_i8_num()    { test_num(10i8,  2i8)  }\n-#[test] fn test_i16_num()   { test_num(10i16, 2i16) }\n-#[test] fn test_i32_num()   { test_num(10i32, 2i32) }\n-#[test] fn test_i64_num()   { test_num(10i64, 2i64) }\n-#[test] fn test_int_num()   { test_num(10i,   2i)   }\n-#[test] fn test_f32_num()   { test_num(10f32, 2f32) }\n-#[test] fn test_f64_num()   { test_num(10f64, 2f64) }\n-#[test] fn test_float_num() { test_num(10f,   2f)   }\n-\n macro_rules! test_cast_20(\n     ($_20:expr) => ({\n         let _20 = $_20;"}, {"sha": "fc0fe2d3a4d2869bea619062838562dc644f9d0f", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/03932f0b84e94f0ef96e4a6de6cb16ab436311e4/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03932f0b84e94f0ef96e4a6de6cb16ab436311e4/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=03932f0b84e94f0ef96e4a6de6cb16ab436311e4", "patch": "@@ -11,13 +11,9 @@\n use T = self::inst::T;\n use T_SIGNED = self::inst::T_SIGNED;\n \n-use to_str::ToStr;\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n-use num::Unsigned;\n-use num;\n-use option::Option;\n use prelude::*;\n \n pub use cmp::{min, max};\n@@ -100,6 +96,8 @@ pub fn compl(i: T) -> T {\n     max_value ^ i\n }\n \n+impl Num for T {}\n+\n #[cfg(notest)]\n impl Ord for T {\n     #[inline(always)]\n@@ -356,6 +354,11 @@ mod tests {\n     use super::inst::T;\n     use prelude::*;\n \n+    #[test]\n+    fn test_num() {\n+        num::test_num(10 as T, 2 as T);\n+    }\n+\n     #[test]\n     fn test_gcd() {\n         assert_eq!((10 as T).gcd(2), 2 as T);"}]}