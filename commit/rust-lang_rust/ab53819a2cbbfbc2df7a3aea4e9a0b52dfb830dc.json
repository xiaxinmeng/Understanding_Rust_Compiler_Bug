{"sha": "ab53819a2cbbfbc2df7a3aea4e9a0b52dfb830dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNTM4MTlhMmNiYmZiYzJkZjdhM2FlYTRlOWEwYjUyZGZiODMwZGM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-30T19:25:48Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-30T19:25:48Z"}, "message": "libstd: Fix another std test", "tree": {"sha": "58fe244383e4123aa91af83df16ad7c52b1f06a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58fe244383e4123aa91af83df16ad7c52b1f06a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab53819a2cbbfbc2df7a3aea4e9a0b52dfb830dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab53819a2cbbfbc2df7a3aea4e9a0b52dfb830dc", "html_url": "https://github.com/rust-lang/rust/commit/ab53819a2cbbfbc2df7a3aea4e9a0b52dfb830dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab53819a2cbbfbc2df7a3aea4e9a0b52dfb830dc/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c721bd8108476fb40bf3510002eba8e6eea4c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c721bd8108476fb40bf3510002eba8e6eea4c91", "html_url": "https://github.com/rust-lang/rust/commit/5c721bd8108476fb40bf3510002eba8e6eea4c91"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "dff9cbc1559232ff052ffb6215fc07b15bfc448e", "filename": "src/libstd/test.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab53819a2cbbfbc2df7a3aea4e9a0b52dfb830dc/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab53819a2cbbfbc2df7a3aea4e9a0b52dfb830dc/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=ab53819a2cbbfbc2df7a3aea4e9a0b52dfb830dc", "patch": "@@ -5,6 +5,7 @@\n // simplest interface possible for representing and running tests\n // while providing a base that other test frameworks may build off of.\n \n+import core::cmp::Eq;\n import either::Either;\n import result::{Ok, Err};\n import io::WriterUtil;\n@@ -91,6 +92,12 @@ fn parse_opts(args: ~[~str]) -> opt_res {\n \n enum test_result { tr_ok, tr_failed, tr_ignored, }\n \n+impl test_result : Eq {\n+    pure fn eq(&&other: test_result) -> bool {\n+        (self as uint) == (other as uint)\n+    }\n+}\n+\n type console_test_state =\n     @{out: io::Writer,\n       log_out: Option<io::Writer>,"}]}