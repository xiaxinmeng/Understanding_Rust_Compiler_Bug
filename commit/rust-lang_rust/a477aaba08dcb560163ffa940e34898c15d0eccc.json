{"sha": "a477aaba08dcb560163ffa940e34898c15d0eccc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NzdhYWJhMDhkY2I1NjAxNjNmZmE5NDBlMzQ4OThjMTVkMGVjY2M=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-22T21:56:56Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-27T00:16:26Z"}, "message": "rustc: Move eval_const_expr to its own mod", "tree": {"sha": "4a1d646d782cb93a2ac274c76f7e9459576d62a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a1d646d782cb93a2ac274c76f7e9459576d62a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a477aaba08dcb560163ffa940e34898c15d0eccc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a477aaba08dcb560163ffa940e34898c15d0eccc", "html_url": "https://github.com/rust-lang/rust/commit/a477aaba08dcb560163ffa940e34898c15d0eccc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a477aaba08dcb560163ffa940e34898c15d0eccc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7a741b5d0df5a57680aab14b4b6150803082983", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a741b5d0df5a57680aab14b4b6150803082983", "html_url": "https://github.com/rust-lang/rust/commit/b7a741b5d0df5a57680aab14b4b6150803082983"}], "stats": {"total": 358, "additions": 180, "deletions": 178}, "files": [{"sha": "1a97b276afe1d17cfe75a8cac68687e7bbf8dfd6", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=a477aaba08dcb560163ffa940e34898c15d0eccc", "patch": "@@ -1,7 +1,7 @@\n \n import syntax::ast::*;\n-import syntax::ast_util::{variant_def_ids, dummy_sp, compare_lit_exprs,\n-        lit_expr_eq, unguarded_pat};\n+import syntax::ast_util::{variant_def_ids, dummy_sp, unguarded_pat};\n+import middle::const_eval::{compare_lit_exprs, lit_expr_eq};\n import syntax::codemap::span;\n import pat_util::*;\n import syntax::visit;"}, {"sha": "ca066b127bc25bc267988648d92f97c733bde351", "filename": "src/rustc/middle/const_eval.rs", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fconst_eval.rs?ref=a477aaba08dcb560163ffa940e34898c15d0eccc", "patch": "@@ -0,0 +1,167 @@\n+import syntax::ast::*;\n+\n+// FIXME this doesn't handle big integer/float literals correctly (nor does\n+// the rest of our literal handling)\n+enum const_val {\n+    const_float(float),\n+    const_int(i64),\n+    const_uint(u64),\n+    const_str(str),\n+}\n+\n+// FIXME: issue #1417\n+fn eval_const_expr(tcx: middle::ty::ctxt, e: @expr) -> const_val {\n+    import middle::ty;\n+    fn fromb(b: bool) -> const_val { const_int(b as i64) }\n+    alt check e.node {\n+      expr_unary(neg, inner) {\n+        alt check eval_const_expr(tcx, inner) {\n+          const_float(f) { const_float(-f) }\n+          const_int(i) { const_int(-i) }\n+          const_uint(i) { const_uint(-i) }\n+        }\n+      }\n+      expr_unary(not, inner) {\n+        alt check eval_const_expr(tcx, inner) {\n+          const_int(i) { const_int(!i) }\n+          const_uint(i) { const_uint(!i) }\n+        }\n+      }\n+      expr_binary(op, a, b) {\n+        alt check (eval_const_expr(tcx, a), eval_const_expr(tcx, b)) {\n+          (const_float(a), const_float(b)) {\n+            alt check op {\n+              add { const_float(a + b) } subtract { const_float(a - b) }\n+              mul { const_float(a * b) } div { const_float(a / b) }\n+              rem { const_float(a % b) } eq { fromb(a == b) }\n+              lt { fromb(a < b) } le { fromb(a <= b) } ne { fromb(a != b) }\n+              ge { fromb(a >= b) } gt { fromb(a > b) }\n+            }\n+          }\n+          (const_int(a), const_int(b)) {\n+            alt check op {\n+              add { const_int(a + b) } subtract { const_int(a - b) }\n+              mul { const_int(a * b) } div { const_int(a / b) }\n+              rem { const_int(a % b) } and | bitand { const_int(a & b) }\n+              or | bitor { const_int(a | b) } bitxor { const_int(a ^ b) }\n+              lsl { const_int(a << b) } lsr { const_int(a >> b) }\n+              asr { const_int(a >>> b) }\n+              eq { fromb(a == b) } lt { fromb(a < b) }\n+              le { fromb(a <= b) } ne { fromb(a != b) }\n+              ge { fromb(a >= b) } gt { fromb(a > b) }\n+            }\n+\n+          }\n+          (const_uint(a), const_uint(b)) {\n+            alt check op {\n+              add { const_uint(a + b) } subtract { const_uint(a - b) }\n+              mul { const_uint(a * b) } div { const_uint(a / b) }\n+              rem { const_uint(a % b) } and | bitand { const_uint(a & b) }\n+              or | bitor { const_uint(a | b) } bitxor { const_uint(a ^ b) }\n+              lsl { const_int((a << b) as i64) }\n+              lsr { const_int((a >> b) as i64) }\n+              asr { const_int((a >>> b) as i64) }\n+              eq { fromb(a == b) } lt { fromb(a < b) }\n+              le { fromb(a <= b) } ne { fromb(a != b) }\n+              ge { fromb(a >= b) } gt { fromb(a > b) }\n+            }\n+          }\n+        }\n+      }\n+      expr_cast(base, _) {\n+        let ety = ty::expr_ty(tcx, e);\n+        let base = eval_const_expr(tcx, base);\n+        alt check ty::get(ety).struct {\n+          ty::ty_float(_) {\n+            alt check base {\n+              const_uint(u) { const_float(u as f64) }\n+              const_int(i) { const_float(i as f64) }\n+              const_float(_) { base }\n+            }\n+          }\n+          ty::ty_uint(_) {\n+            alt check base {\n+              const_uint(_) { base }\n+              const_int(i) { const_uint(i as u64) }\n+              const_float(f) { const_uint(f as u64) }\n+            }\n+          }\n+          ty::ty_int(_) | ty::ty_bool {\n+            alt check base {\n+              const_uint(u) { const_int(u as i64) }\n+              const_int(_) { base }\n+              const_float(f) { const_int(f as i64) }\n+            }\n+          }\n+        }\n+      }\n+      expr_lit(lit) { lit_to_const(lit) }\n+    }\n+}\n+\n+fn lit_to_const(lit: @lit) -> const_val {\n+    alt lit.node {\n+      lit_str(s) { const_str(s) }\n+      lit_int(n, _) { const_int(n) }\n+      lit_uint(n, _) { const_uint(n) }\n+      lit_float(n, _) { const_float(option::get(float::from_str(n))) }\n+      lit_nil { const_int(0i64) }\n+      lit_bool(b) { const_int(b as i64) }\n+    }\n+}\n+\n+fn compare_const_vals(a: const_val, b: const_val) -> int {\n+  alt (a, b) {\n+    (const_int(a), const_int(b)) {\n+        if a == b {\n+            0\n+        } else if a < b {\n+            -1\n+        } else {\n+            1\n+        }\n+    }\n+    (const_uint(a), const_uint(b)) {\n+        if a == b {\n+            0\n+        } else if a < b {\n+            -1\n+        } else {\n+            1\n+        }\n+    }\n+    (const_float(a), const_float(b)) {\n+        if a == b {\n+            0\n+        } else if a < b {\n+            -1\n+        } else {\n+            1\n+        }\n+    }\n+    (const_str(a), const_str(b)) {\n+        if a == b {\n+            0\n+        } else if a < b {\n+            -1\n+        } else {\n+            1\n+        }\n+    }\n+    _ {\n+        fail \"compare_const_vals: ill-typed comparison\";\n+    }\n+  }\n+}\n+\n+fn compare_lit_exprs(tcx: middle::ty::ctxt, a: @expr, b: @expr) -> int {\n+  compare_const_vals(eval_const_expr(tcx, a), eval_const_expr(tcx, b))\n+}\n+\n+fn lit_expr_eq(tcx: middle::ty::ctxt, a: @expr, b: @expr) -> bool {\n+    compare_lit_exprs(tcx, a, b) == 0\n+}\n+\n+fn lit_eq(a: @lit, b: @lit) -> bool {\n+    compare_const_vals(lit_to_const(a), lit_to_const(b)) == 0\n+}"}, {"sha": "8b8ee1fe81b713a04448489b1407b47a08f469f8", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=a477aaba08dcb560163ffa940e34898c15d0eccc", "patch": "@@ -25,10 +25,10 @@ enum opt {\n }\n fn opt_eq(tcx: ty::ctxt, a: opt, b: opt) -> bool {\n     alt (a, b) {\n-      (lit(a), lit(b)) { ast_util::compare_lit_exprs(tcx, a, b) == 0 }\n+      (lit(a), lit(b)) { const_eval::compare_lit_exprs(tcx, a, b) == 0 }\n       (range(a1, a2), range(b1, b2)) {\n-        ast_util::compare_lit_exprs(tcx, a1, b1) == 0 &&\n-        ast_util::compare_lit_exprs(tcx, a2, b2) == 0\n+        const_eval::compare_lit_exprs(tcx, a1, b1) == 0 &&\n+        const_eval::compare_lit_exprs(tcx, a2, b2) == 0\n       }\n       (var(a, _), var(b, _)) { a == b }\n       _ { false }"}, {"sha": "c973d15b40d30ecd2b36d31cdfe77fe3e7ae1685", "filename": "src/rustc/middle/tstate/auxiliary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=a477aaba08dcb560163ffa940e34898c15d0eccc", "patch": "@@ -676,7 +676,7 @@ fn pred_args_matches(pattern: [constr_arg_general_<inst>], desc: pred_args) ->\n           carg_base { if n != carg_base { ret false; } }\n           carg_lit(l) {\n             alt n {\n-              carg_lit(m) { if !lit_eq(l, m) { ret false; } }\n+              carg_lit(m) { if !const_eval::lit_eq(l, m) { ret false; } }\n               _ { ret false; }\n             }\n           }"}, {"sha": "deeef4f6826d5496e3ef3ce1e989126edf5f9dc0", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=a477aaba08dcb560163ffa940e34898c15d0eccc", "patch": "@@ -1306,7 +1306,7 @@ fn arg_eq<T>(eq: fn(T, T) -> bool,\n       }\n       ast::carg_lit(l) {\n         alt b.node {\n-          ast::carg_lit(m) { ret ast_util::lit_eq(l, m); } _ { ret false; }\n+          ast::carg_lit(m) { ret const_eval::lit_eq(l, m); } _ { ret false; }\n         }\n       }\n     }\n@@ -1894,8 +1894,8 @@ fn enum_variants(cx: ctxt, id: ast::def_id) -> @[variant_info] {\n                 alt variant.node.disr_expr {\n                   some (ex) {\n                     // FIXME: issue #1417\n-                    disr_val = alt syntax::ast_util::eval_const_expr(cx, ex) {\n-                      ast_util::const_int(val) {val as int}\n+                    disr_val = alt const_eval::eval_const_expr(cx, ex) {\n+                      const_eval::const_int(val) {val as int}\n                       _ { cx.sess.bug(\"tag_variants: bad disr expr\"); }\n                     }\n                   }"}, {"sha": "8ef8841754c52223af3839fcd041def3e9ec2fa0", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=a477aaba08dcb560163ffa940e34898c15d0eccc", "patch": "@@ -1645,7 +1645,7 @@ fn check_lit(ccx: @crate_ctxt, lit: @ast::lit) -> ty::t {\n \n fn valid_range_bounds(tcx: ty::ctxt, from: @ast::expr, to: @ast::expr)\n     -> bool {\n-    ast_util::compare_lit_exprs(tcx, from, to) <= 0\n+    const_eval::compare_lit_exprs(tcx, from, to) <= 0\n }\n \n type pat_ctxt = {\n@@ -3404,8 +3404,8 @@ fn check_enum_variants(ccx: @crate_ctxt, sp: span, vs: [ast::variant],\n             // Also, check_expr (from check_const pass) doesn't guarantee that\n             // the expression in an form that eval_const_expr can handle, so\n             // we may still get an internal compiler error\n-            alt syntax::ast_util::eval_const_expr(ccx.tcx, e) {\n-              syntax::ast_util::const_int(val) {\n+            alt const_eval::eval_const_expr(ccx.tcx, e) {\n+              const_eval::const_int(val) {\n                 disr_val = val as int;\n               }\n               _ {"}, {"sha": "4993f63cfc0df9c9fd10186af7b6f55f04114adb", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=a477aaba08dcb560163ffa940e34898c15d0eccc", "patch": "@@ -50,6 +50,7 @@ mod middle {\n     mod pat_util;\n     mod region;\n     mod regionck;\n+    mod const_eval;\n \n     mod tstate {\n         mod ck;"}, {"sha": "4ab7c325a69044d2d65e729edb4ccd620923fb53", "filename": "src/rustc/syntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 166, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477aaba08dcb560163ffa940e34898c15d0eccc/src%2Frustc%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fast_util.rs?ref=a477aaba08dcb560163ffa940e34898c15d0eccc", "patch": "@@ -242,172 +242,6 @@ fn default_block(stmts1: [@stmt], expr1: option<@expr>, id1: node_id) ->\n     {view_items: [], stmts: stmts1, expr: expr1, id: id1, rules: default_blk}\n }\n \n-// FIXME this doesn't handle big integer/float literals correctly (nor does\n-// the rest of our literal handling)\n-enum const_val {\n-    const_float(float),\n-    const_int(i64),\n-    const_uint(u64),\n-    const_str(str),\n-}\n-\n-// FIXME: issue #1417\n-fn eval_const_expr(tcx: middle::ty::ctxt, e: @expr) -> const_val {\n-    import middle::ty;\n-    fn fromb(b: bool) -> const_val { const_int(b as i64) }\n-    alt check e.node {\n-      expr_unary(neg, inner) {\n-        alt check eval_const_expr(tcx, inner) {\n-          const_float(f) { const_float(-f) }\n-          const_int(i) { const_int(-i) }\n-          const_uint(i) { const_uint(-i) }\n-        }\n-      }\n-      expr_unary(not, inner) {\n-        alt check eval_const_expr(tcx, inner) {\n-          const_int(i) { const_int(!i) }\n-          const_uint(i) { const_uint(!i) }\n-        }\n-      }\n-      expr_binary(op, a, b) {\n-        alt check (eval_const_expr(tcx, a), eval_const_expr(tcx, b)) {\n-          (const_float(a), const_float(b)) {\n-            alt check op {\n-              add { const_float(a + b) } subtract { const_float(a - b) }\n-              mul { const_float(a * b) } div { const_float(a / b) }\n-              rem { const_float(a % b) } eq { fromb(a == b) }\n-              lt { fromb(a < b) } le { fromb(a <= b) } ne { fromb(a != b) }\n-              ge { fromb(a >= b) } gt { fromb(a > b) }\n-            }\n-          }\n-          (const_int(a), const_int(b)) {\n-            alt check op {\n-              add { const_int(a + b) } subtract { const_int(a - b) }\n-              mul { const_int(a * b) } div { const_int(a / b) }\n-              rem { const_int(a % b) } and | bitand { const_int(a & b) }\n-              or | bitor { const_int(a | b) } bitxor { const_int(a ^ b) }\n-              lsl { const_int(a << b) } lsr { const_int(a >> b) }\n-              asr { const_int(a >>> b) }\n-              eq { fromb(a == b) } lt { fromb(a < b) }\n-              le { fromb(a <= b) } ne { fromb(a != b) }\n-              ge { fromb(a >= b) } gt { fromb(a > b) }\n-            }\n-\n-          }\n-          (const_uint(a), const_uint(b)) {\n-            alt check op {\n-              add { const_uint(a + b) } subtract { const_uint(a - b) }\n-              mul { const_uint(a * b) } div { const_uint(a / b) }\n-              rem { const_uint(a % b) } and | bitand { const_uint(a & b) }\n-              or | bitor { const_uint(a | b) } bitxor { const_uint(a ^ b) }\n-              lsl { const_int((a << b) as i64) }\n-              lsr { const_int((a >> b) as i64) }\n-              asr { const_int((a >>> b) as i64) }\n-              eq { fromb(a == b) } lt { fromb(a < b) }\n-              le { fromb(a <= b) } ne { fromb(a != b) }\n-              ge { fromb(a >= b) } gt { fromb(a > b) }\n-            }\n-          }\n-        }\n-      }\n-      expr_cast(base, _) {\n-        let ety = ty::expr_ty(tcx, e);\n-        let base = eval_const_expr(tcx, base);\n-        alt check ty::get(ety).struct {\n-          ty::ty_float(_) {\n-            alt check base {\n-              const_uint(u) { const_float(u as f64) }\n-              const_int(i) { const_float(i as f64) }\n-              const_float(_) { base }\n-            }\n-          }\n-          ty::ty_uint(_) {\n-            alt check base {\n-              const_uint(_) { base }\n-              const_int(i) { const_uint(i as u64) }\n-              const_float(f) { const_uint(f as u64) }\n-            }\n-          }\n-          ty::ty_int(_) | ty::ty_bool {\n-            alt check base {\n-              const_uint(u) { const_int(u as i64) }\n-              const_int(_) { base }\n-              const_float(f) { const_int(f as i64) }\n-            }\n-          }\n-        }\n-      }\n-      expr_lit(lit) { lit_to_const(lit) }\n-    }\n-}\n-\n-fn lit_to_const(lit: @lit) -> const_val {\n-    alt lit.node {\n-      lit_str(s) { const_str(s) }\n-      lit_int(n, _) { const_int(n) }\n-      lit_uint(n, _) { const_uint(n) }\n-      lit_float(n, _) { const_float(option::get(float::from_str(n))) }\n-      lit_nil { const_int(0i64) }\n-      lit_bool(b) { const_int(b as i64) }\n-    }\n-}\n-\n-fn compare_const_vals(a: const_val, b: const_val) -> int {\n-  alt (a, b) {\n-    (const_int(a), const_int(b)) {\n-        if a == b {\n-            0\n-        } else if a < b {\n-            -1\n-        } else {\n-            1\n-        }\n-    }\n-    (const_uint(a), const_uint(b)) {\n-        if a == b {\n-            0\n-        } else if a < b {\n-            -1\n-        } else {\n-            1\n-        }\n-    }\n-    (const_float(a), const_float(b)) {\n-        if a == b {\n-            0\n-        } else if a < b {\n-            -1\n-        } else {\n-            1\n-        }\n-    }\n-    (const_str(a), const_str(b)) {\n-        if a == b {\n-            0\n-        } else if a < b {\n-            -1\n-        } else {\n-            1\n-        }\n-    }\n-    _ {\n-        fail \"compare_const_vals: ill-typed comparison\";\n-    }\n-  }\n-}\n-\n-fn compare_lit_exprs(tcx: middle::ty::ctxt, a: @expr, b: @expr) -> int {\n-  compare_const_vals(eval_const_expr(tcx, a), eval_const_expr(tcx, b))\n-}\n-\n-fn lit_expr_eq(tcx: middle::ty::ctxt, a: @expr, b: @expr) -> bool {\n-    compare_lit_exprs(tcx, a, b) == 0\n-}\n-\n-fn lit_eq(a: @lit, b: @lit) -> bool {\n-    compare_const_vals(lit_to_const(a), lit_to_const(b)) == 0\n-}\n-\n fn ident_to_path(s: span, i: ident) -> @path {\n     @respan(s, {global: false, idents: [i], types: []})\n }"}]}