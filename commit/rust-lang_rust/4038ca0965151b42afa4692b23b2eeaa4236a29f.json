{"sha": "4038ca0965151b42afa4692b23b2eeaa4236a29f", "node_id": "C_kwDOAAsO6NoAKDQwMzhjYTA5NjUxNTFiNDJhZmE0NjkyYjIzYjJlZWFhNDIzNmEyOWY", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-01-08T02:11:59Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-01-19T23:55:29Z"}, "message": "Refactor tests of Write for Cursor<_>", "tree": {"sha": "ca3fdd70ce610034e16d5326931a9561a9ecd93b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca3fdd70ce610034e16d5326931a9561a9ecd93b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4038ca0965151b42afa4692b23b2eeaa4236a29f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4038ca0965151b42afa4692b23b2eeaa4236a29f", "html_url": "https://github.com/rust-lang/rust/commit/4038ca0965151b42afa4692b23b2eeaa4236a29f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4038ca0965151b42afa4692b23b2eeaa4236a29f/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e57faa78aa7661c6000204591558f6665f11abc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e57faa78aa7661c6000204591558f6665f11abc", "html_url": "https://github.com/rust-lang/rust/commit/5e57faa78aa7661c6000204591558f6665f11abc"}], "stats": {"total": 72, "additions": 28, "deletions": 44}, "files": [{"sha": "2d0836d9a85950a4d71a622f98baa6deb32fd4db", "filename": "library/std/src/io/cursor/tests.rs", "status": "modified", "additions": 28, "deletions": 44, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4038ca0965151b42afa4692b23b2eeaa4236a29f/library%2Fstd%2Fsrc%2Fio%2Fcursor%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4038ca0965151b42afa4692b23b2eeaa4236a29f/library%2Fstd%2Fsrc%2Fio%2Fcursor%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcursor%2Ftests.rs?ref=4038ca0965151b42afa4692b23b2eeaa4236a29f", "patch": "@@ -50,9 +50,11 @@ fn test_mem_mut_writer() {\n     assert_eq!(&writer.get_ref()[..], b);\n }\n \n-#[test]\n-fn test_box_slice_writer() {\n-    let mut writer = Cursor::new(vec![0u8; 9].into_boxed_slice());\n+fn test_slice_writer<T>(writer: &mut Cursor<T>)\n+where\n+    T: AsRef<[u8]>,\n+    Cursor<T>: Write,\n+{\n     assert_eq!(writer.position(), 0);\n     assert_eq!(writer.write(&[0]).unwrap(), 1);\n     assert_eq!(writer.position(), 1);\n@@ -65,12 +67,14 @@ fn test_box_slice_writer() {\n     assert_eq!(writer.write(&[8, 9]).unwrap(), 1);\n     assert_eq!(writer.write(&[10]).unwrap(), 0);\n     let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8];\n-    assert_eq!(&**writer.get_ref(), b);\n+    assert_eq!(writer.get_ref().as_ref(), b);\n }\n \n-#[test]\n-fn test_box_slice_writer_vectored() {\n-    let mut writer = Cursor::new(vec![0u8; 9].into_boxed_slice());\n+fn test_slice_writer_vectored<T>(writer: &mut Cursor<T>)\n+where\n+    T: AsRef<[u8]>,\n+    Cursor<T>: Write,\n+{\n     assert_eq!(writer.position(), 0);\n     assert_eq!(writer.write_vectored(&[IoSlice::new(&[0])]).unwrap(), 1);\n     assert_eq!(writer.position(), 1);\n@@ -85,53 +89,33 @@ fn test_box_slice_writer_vectored() {\n     assert_eq!(writer.write_vectored(&[IoSlice::new(&[8, 9])]).unwrap(), 1);\n     assert_eq!(writer.write_vectored(&[IoSlice::new(&[10])]).unwrap(), 0);\n     let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8];\n-    assert_eq!(&**writer.get_ref(), b);\n+    assert_eq!(writer.get_ref().as_ref(), b);\n+}\n+\n+#[test]\n+fn test_box_slice_writer() {\n+    let mut writer = Cursor::new(vec![0u8; 9].into_boxed_slice());\n+    test_slice_writer(&mut writer);\n+}\n+\n+#[test]\n+fn test_box_slice_writer_vectored() {\n+    let mut writer = Cursor::new(vec![0u8; 9].into_boxed_slice());\n+    test_slice_writer_vectored(&mut writer);\n }\n \n #[test]\n fn test_buf_writer() {\n     let mut buf = [0 as u8; 9];\n-    {\n-        let mut writer = Cursor::new(&mut buf[..]);\n-        assert_eq!(writer.position(), 0);\n-        assert_eq!(writer.write(&[0]).unwrap(), 1);\n-        assert_eq!(writer.position(), 1);\n-        assert_eq!(writer.write(&[1, 2, 3]).unwrap(), 3);\n-        assert_eq!(writer.write(&[4, 5, 6, 7]).unwrap(), 4);\n-        assert_eq!(writer.position(), 8);\n-        assert_eq!(writer.write(&[]).unwrap(), 0);\n-        assert_eq!(writer.position(), 8);\n-\n-        assert_eq!(writer.write(&[8, 9]).unwrap(), 1);\n-        assert_eq!(writer.write(&[10]).unwrap(), 0);\n-    }\n-    let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8];\n-    assert_eq!(buf, b);\n+    let mut writer = Cursor::new(&mut buf[..]);\n+    test_slice_writer(&mut writer);\n }\n \n #[test]\n fn test_buf_writer_vectored() {\n     let mut buf = [0 as u8; 9];\n-    {\n-        let mut writer = Cursor::new(&mut buf[..]);\n-        assert_eq!(writer.position(), 0);\n-        assert_eq!(writer.write_vectored(&[IoSlice::new(&[0])]).unwrap(), 1);\n-        assert_eq!(writer.position(), 1);\n-        assert_eq!(\n-            writer\n-                .write_vectored(&[IoSlice::new(&[1, 2, 3]), IoSlice::new(&[4, 5, 6, 7])],)\n-                .unwrap(),\n-            7,\n-        );\n-        assert_eq!(writer.position(), 8);\n-        assert_eq!(writer.write_vectored(&[]).unwrap(), 0);\n-        assert_eq!(writer.position(), 8);\n-\n-        assert_eq!(writer.write_vectored(&[IoSlice::new(&[8, 9])]).unwrap(), 1);\n-        assert_eq!(writer.write_vectored(&[IoSlice::new(&[10])]).unwrap(), 0);\n-    }\n-    let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8];\n-    assert_eq!(buf, b);\n+    let mut writer = Cursor::new(&mut buf[..]);\n+    test_slice_writer_vectored(&mut writer);\n }\n \n #[test]"}]}