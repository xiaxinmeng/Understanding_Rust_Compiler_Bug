{"sha": "bc4f86909ea5e08a9114c70eef29942a4ea2c459", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNGY4NjkwOWVhNWUwOGE5MTE0YzcwZWVmMjk5NDJhNGVhMmM0NTk=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-04T10:20:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-04T10:20:07Z"}, "message": "Rollup merge of #54746 - llogiq:simplify-unused-lints, r=michaelwoerister\n\nsimplify some unused lints code\n\nThose are but small simplifications for readability.", "tree": {"sha": "4818e26d63304b6921b8aeba3395a9132aead3f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4818e26d63304b6921b8aeba3395a9132aead3f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc4f86909ea5e08a9114c70eef29942a4ea2c459", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbtelXCRBK7hj4Ov3rIwAAdHIIAKL3LwAGZIh99EFFnxCAF08V\nFfxd62wyZ/8al/4TsiFKVPnBMfJG7YTyQz0LBdK49EFGK6LKmzAtxmv1/D/c6UUP\nibV9VmZLuiolJ22biOvQEQg6zBIsNPhybSgWZbXvqAx13/LluwIehpeZZvQHK1+g\ngwI4v4LzfMVGDY2jy2nn6rkMpe/FHsOLJOrIhsGis5NSkU1XlKSckMpTdf5V6tE7\nkccF7YLg2D1T0tmGIi1t5tf9LulaFkbX21YzQc4NYtiSMvTSjEMlDa+k7q03WnJt\nZwWYYQANuOPc2SM4Um4rBf78M3nIDpHiATLDZjcvWwlYkzlNpGkaig3xsEy6h9M=\n=yr6d\n-----END PGP SIGNATURE-----\n", "payload": "tree 4818e26d63304b6921b8aeba3395a9132aead3f2\nparent 1dbc8b0d4bcdc404bdc2029b6a87972ec92707dc\nparent 989f480297cabee936403fd66baa429f2b8ed4ee\nauthor Pietro Albini <pietro@pietroalbini.org> 1538648407 +0200\ncommitter GitHub <noreply@github.com> 1538648407 +0200\n\nRollup merge of #54746 - llogiq:simplify-unused-lints, r=michaelwoerister\n\nsimplify some unused lints code\n\nThose are but small simplifications for readability.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4f86909ea5e08a9114c70eef29942a4ea2c459", "html_url": "https://github.com/rust-lang/rust/commit/bc4f86909ea5e08a9114c70eef29942a4ea2c459", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc4f86909ea5e08a9114c70eef29942a4ea2c459/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dbc8b0d4bcdc404bdc2029b6a87972ec92707dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dbc8b0d4bcdc404bdc2029b6a87972ec92707dc", "html_url": "https://github.com/rust-lang/rust/commit/1dbc8b0d4bcdc404bdc2029b6a87972ec92707dc"}, {"sha": "989f480297cabee936403fd66baa429f2b8ed4ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/989f480297cabee936403fd66baa429f2b8ed4ee", "html_url": "https://github.com/rust-lang/rust/commit/989f480297cabee936403fd66baa429f2b8ed4ee"}], "stats": {"total": 37, "additions": 11, "deletions": 26}, "files": [{"sha": "ae178888b6a1cda42a65a67f3ccddb11cbce2a4a", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bc4f86909ea5e08a9114c70eef29942a4ea2c459/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4f86909ea5e08a9114c70eef29942a4ea2c459/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=bc4f86909ea5e08a9114c70eef29942a4ea2c459", "patch": "@@ -65,9 +65,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             ty::Adt(def, _) => {\n                 if def.variants.is_empty() {\n                     return;\n-                } else {\n-                    check_must_use(cx, def.did, s.span, \"\")\n                 }\n+                check_must_use(cx, def.did, s.span, \"\")\n             },\n             _ => false,\n         };\n@@ -337,21 +336,13 @@ impl EarlyLintPass for UnusedParens {\n             AssignOp(.., ref value) => (value, \"assigned value\", false),\n             // either function/method call, or something this lint doesn't care about\n             ref call_or_other => {\n-                let args_to_check;\n-                let call_kind;\n-                match *call_or_other {\n-                    Call(_, ref args) => {\n-                        call_kind = \"function\";\n-                        args_to_check = &args[..];\n-                    },\n-                    MethodCall(_, ref args) => {\n-                        call_kind = \"method\";\n-                        // first \"argument\" is self (which sometimes needs parens)\n-                        args_to_check = &args[1..];\n-                    }\n+                let (args_to_check, call_kind) = match *call_or_other {\n+                    Call(_, ref args) => (&args[..], \"function\"),\n+                    // first \"argument\" is self (which sometimes needs parens)\n+                    MethodCall(_, ref args) => (&args[1..], \"method\"),\n                     // actual catch-all arm\n                     _ => { return; }\n-                }\n+                };\n                 // Don't lint if this is a nested macro expansion: otherwise, the lint could\n                 // trigger in situations that macro authors shouldn't have to care about, e.g.,\n                 // when a parenthesized token tree matched in one macro expansion is matched as\n@@ -372,16 +363,11 @@ impl EarlyLintPass for UnusedParens {\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext, s: &ast::Stmt) {\n-        let (value, msg) = match s.node {\n-            ast::StmtKind::Local(ref local) => {\n-                match local.init {\n-                    Some(ref value) => (value, \"assigned value\"),\n-                    None => return,\n-                }\n+        if let ast::StmtKind::Local(ref local) = s.node {\n+            if let Some(ref value) = local.init {\n+                self.check_unused_parens_core(cx, &value, \"assigned value\", false);\n             }\n-            _ => return,\n-        };\n-        self.check_unused_parens_core(cx, &value, msg, false);\n+        }\n     }\n }\n \n@@ -414,9 +400,8 @@ impl UnusedImportBraces {\n                     let orig_ident = items[0].0.prefix.segments.last().unwrap().ident;\n                     if orig_ident.name == keywords::SelfValue.name() {\n                         return;\n-                    } else {\n-                        node_ident = rename.unwrap_or(orig_ident);\n                     }\n+                    node_ident = rename.unwrap_or(orig_ident);\n                 }\n                 ast::UseTreeKind::Glob => {\n                     node_ident = ast::Ident::from_str(\"*\");"}]}