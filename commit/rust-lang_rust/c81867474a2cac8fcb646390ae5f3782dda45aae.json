{"sha": "c81867474a2cac8fcb646390ae5f3782dda45aae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MTg2NzQ3NGEyY2FjOGZjYjY0NjM5MGFlNWYzNzgyZGRhNDVhYWU=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-13T06:00:56Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-13T09:56:58Z"}, "message": "(core::str) add find_bytes and export it...", "tree": {"sha": "69b3cf2bf0b51eb664349599399d8a4ec379f705", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69b3cf2bf0b51eb664349599399d8a4ec379f705"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c81867474a2cac8fcb646390ae5f3782dda45aae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c81867474a2cac8fcb646390ae5f3782dda45aae", "html_url": "https://github.com/rust-lang/rust/commit/c81867474a2cac8fcb646390ae5f3782dda45aae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c81867474a2cac8fcb646390ae5f3782dda45aae/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "748b63f63f4fb2ac8583900adb5a283990be276b", "url": "https://api.github.com/repos/rust-lang/rust/commits/748b63f63f4fb2ac8583900adb5a283990be276b", "html_url": "https://github.com/rust-lang/rust/commit/748b63f63f4fb2ac8583900adb5a283990be276b"}], "stats": {"total": 105, "additions": 60, "deletions": 45}, "files": [{"sha": "3d345c1a2508a4cea759c795b5bb9f64c1d8656b", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=c81867474a2cac8fcb646390ae5f3782dda45aae", "patch": "@@ -568,10 +568,11 @@ fn link_binary(sess: session,\n     // Converts a library file name into a cc -l argument\n     fn unlib(config: @session::config, filename: str) -> str unsafe {\n         let rmlib = fn@(filename: str) -> str {\n+            let found = str::find_bytes(filename, \"lib\");\n             if config.os == session::os_macos ||\n                 (config.os == session::os_linux ||\n                  config.os == session::os_freebsd) &&\n-                str::find(filename, \"lib\") == 0 {\n+                option::is_some(found) && option::get(found) == 0u {\n                 ret str::unsafe::slice_bytes(filename, 3u,\n                                str::len_bytes(filename));\n             } else { ret filename; }"}, {"sha": "62cffd970993136d54da4977033a3512976414df", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=c81867474a2cac8fcb646390ae5f3782dda45aae", "patch": "@@ -269,28 +269,28 @@ fn pretty_print_input(sess: session, cfg: ast::crate_cfg, input: str,\n }\n \n fn get_os(triple: str) -> option<session::os> {\n-    ret if str::find(triple, \"win32\") >= 0 ||\n-               str::find(triple, \"mingw32\") >= 0 {\n+    ret if str::contains(triple, \"win32\") ||\n+               str::contains(triple, \"mingw32\") {\n             some(session::os_win32)\n-        } else if str::find(triple, \"darwin\") >= 0 {\n+        } else if str::contains(triple, \"darwin\") {\n             some(session::os_macos)\n-        } else if str::find(triple, \"linux\") >= 0 {\n+        } else if str::contains(triple, \"linux\") {\n             some(session::os_linux)\n-        } else if str::find(triple, \"freebsd\") >= 0 {\n+        } else if str::contains(triple, \"freebsd\") {\n             some(session::os_freebsd)\n         } else { none };\n }\n \n fn get_arch(triple: str) -> option<session::arch> {\n-    ret if str::find(triple, \"i386\") >= 0 || str::find(triple, \"i486\") >= 0 ||\n-               str::find(triple, \"i586\") >= 0 ||\n-               str::find(triple, \"i686\") >= 0 ||\n-               str::find(triple, \"i786\") >= 0 {\n+    ret if str::contains(triple, \"i386\") || str::contains(triple, \"i486\") ||\n+               str::contains(triple, \"i586\") ||\n+               str::contains(triple, \"i686\") ||\n+               str::contains(triple, \"i786\") {\n             some(session::arch_x86)\n-        } else if str::find(triple, \"x86_64\") >= 0 {\n+        } else if str::contains(triple, \"x86_64\") {\n             some(session::arch_x86_64)\n-        } else if str::find(triple, \"arm\") >= 0 ||\n-                      str::find(triple, \"xscale\") >= 0 {\n+        } else if str::contains(triple, \"arm\") ||\n+                      str::contains(triple, \"xscale\") {\n             some(session::arch_arm)\n         } else { none };\n }"}, {"sha": "f6b32e2fd311b3edc6102e85a1b32a91282a13a3", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=c81867474a2cac8fcb646390ae5f3782dda45aae", "patch": "@@ -24,9 +24,11 @@ fn load_errors(testfile: str) -> [expected_error] {\n \n fn parse_expected(line_num: uint, line: str) -> [expected_error] unsafe {\n     let error_tag = \"//!\";\n-    let idx0 = str::find(line, error_tag);\n-    if idx0 < 0 { ret []; }\n-    let idx = (idx0 as uint) + str::len_bytes(error_tag);\n+    let idx;\n+    alt str::find_bytes(line, error_tag) {\n+         option::none { ret []; }\n+         option::some(nn) { idx = (nn as uint) + str::len_bytes(error_tag); }\n+    }\n \n     // \"//!^^^ kind msg\" denotes a message expected\n     // three lines above current line:"}, {"sha": "a976c5fb98c7c50bf9ec7d215b0544e4f2367460", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=c81867474a2cac8fcb646390ae5f3782dda45aae", "patch": "@@ -100,18 +100,21 @@ fn parse_pp_exact(line: str, testfile: str) -> option<str> {\n }\n \n fn parse_name_directive(line: str, directive: str) -> bool {\n-    str::find(line, directive) >= 0\n+    str::contains(line, directive)\n }\n \n fn parse_name_value_directive(line: str,\n                               directive: str) -> option<str> unsafe {\n     let keycolon = directive + \":\";\n-    if str::find(line, keycolon) >= 0 {\n-        let colon = str::find(line, keycolon) as uint;\n-        let value =\n-            str::unsafe::slice_bytes(line, colon + str::len_bytes(keycolon),\n-                       str::len_bytes(line));\n-        #debug(\"%s: %s\", directive,  value);\n-        option::some(value)\n-    } else { option::none }\n+    alt str::find_bytes(line, keycolon) {\n+        option::some(colon) {\n+            let value =\n+                str::unsafe::slice_bytes(line,\n+                                         colon + str::len_bytes(keycolon),\n+                                         str::len_bytes(line));\n+            #debug(\"%s: %s\", directive,  value);\n+            option::some(value)\n+        }\n+        option::none { option::none }\n+    }\n }"}, {"sha": "5fb0bca25fa938755617a64607ee581369bef4bb", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=c81867474a2cac8fcb646390ae5f3782dda45aae", "patch": "@@ -199,7 +199,7 @@ fn check_error_patterns(props: test_props,\n     let next_err_idx = 0u;\n     let next_err_pat = props.error_patterns[next_err_idx];\n     for line: str in str::split_byte(procres.stderr, '\\n' as u8) {\n-        if str::find(line, next_err_pat) > 0 {\n+        if str::contains(line, next_err_pat) {\n             #debug(\"found error pattern %s\", next_err_pat);\n             next_err_idx += 1u;\n             if next_err_idx == vec::len(props.error_patterns) {"}, {"sha": "40d218640214fe70202358ee9e88ec8b8e3f56f2", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=c81867474a2cac8fcb646390ae5f3782dda45aae", "patch": "@@ -16,7 +16,7 @@ fn write_file(filename: str, content: str) {\n }\n \n fn contains(haystack: str, needle: str) -> bool {\n-    str::find(haystack, needle) != -1\n+    str::contains(haystack, needle)\n }\n \n fn find_rust_files(&files: [str], path: str) {"}, {"sha": "0612d0fa9bc3fef03415f2dc0791d287dcb768e9", "filename": "src/libcore/str.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=c81867474a2cac8fcb646390ae5f3782dda45aae", "patch": "@@ -69,7 +69,9 @@ export\n    // Searching\n    index,\n    rindex,\n-   find,\n+   //find,\n+   find_bytes,\n+   find_chars,\n    contains,\n    starts_with,\n    ends_with,\n@@ -663,9 +665,10 @@ fn replace(s: str, from: str, to: str) : is_not_empty(from) -> str unsafe {\n                      unsafe::slice_bytes(s, len_bytes(from), len_bytes(s)),\n                                        from, to);\n     } else {\n-        let idx = find(s, from);\n-        if idx == -1 {\n-            ret s;\n+        let idx;\n+        alt find_bytes(s, from) {\n+            option::some(x) { idx = x; }\n+            option::none { ret s; }\n         }\n         let before = unsafe::slice_bytes(s, 0u, idx as uint);\n         let after  = unsafe::slice_bytes(s, idx as uint + len_bytes(from),\n@@ -916,9 +919,16 @@ fn find(haystack: str, needle: str) -> int {\n // FIXME: rename find_chars -> find,\n //               find -> find_bytes\n fn find_chars(hay: str, pin: str) -> option<uint> {\n+   alt find_bytes(hay, pin) {\n+      option::none { ret option::none; }\n+      option::some(nn) { ret option::some(b2c_pos(hay, nn)); }\n+   }\n+}\n+\n+fn find_bytes(hay: str, pin: str) -> option<uint> {\n    alt find(hay, pin) {\n       -1 { ret option::none; }\n-       n { ret option::some(b2c_pos(hay, n as uint)); }\n+      nn { ret option::some(nn as uint); }\n    }\n }\n \n@@ -952,7 +962,7 @@ haystack - The string to look in\n needle - The string to look for\n */\n fn contains(haystack: str, needle: str) -> bool {\n-    0 <= find(haystack, needle)\n+    option::is_some(find_bytes(haystack, needle))\n }\n \n /*\n@@ -1730,7 +1740,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_find() {\n+    fn test_find_bytes() {\n         fn t(haystack: str, needle: str, i: int) {\n             let j: int = find(haystack, needle);\n             log(debug, \"searched for \" + needle);\n@@ -1743,12 +1753,11 @@ mod tests {\n         t(\"this is a simple\", \"simple\", 10);\n         t(\"this\", \"simple\", -1);\n \n-        // FIXME: return option<char> position instead\n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        assert (find(data, \"\u0e1b\u0e23\u0e30\u0e40\") ==  0);\n-        assert (find(data, \"\u0e30\u0e40\")   ==  6); // byte position\n-        assert (find(data, \"\u4e2d\u534e\") ==  27); // byte position\n-        assert (find(data, \"\u0e44\u0e17\u534e\") == -1);\n+        assert (find_bytes(data, \"\u0e1b\u0e23\u0e30\u0e40\") == option::some( 0u));\n+        assert (find_bytes(data, \"\u0e30\u0e40\")   == option::some( 6u));\n+        assert (find_bytes(data, \"\u4e2d\u534e\") == option::some(27u));\n+        assert (find_bytes(data, \"\u0e44\u0e17\u534e\") == option::none);\n     }\n \n     #[test]"}, {"sha": "5fd4d59f74da4fa1f1573a59c9e2baae6c334bcb", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=c81867474a2cac8fcb646390ae5f3782dda45aae", "patch": "@@ -258,7 +258,7 @@ fn filter_tests(opts: test_opts,\n \n         fn filter_fn(test: test_desc, filter_str: str) ->\n             option<test_desc> {\n-            if str::find(test.name, filter_str) >= 0 {\n+            if str::contains(test.name, filter_str) {\n                 ret option::some(test);\n             } else { ret option::none; }\n         }"}, {"sha": "21a7e68cd2087d8116202cbaf9674dd792aa0536", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81867474a2cac8fcb646390ae5f3782dda45aae/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=c81867474a2cac8fcb646390ae5f3782dda45aae", "patch": "@@ -56,10 +56,10 @@ fn should_write_modules_last() {\n          fn d() { }\"\n     );\n \n-    let idx_a = str::find(markdown, \"# Module `a`\");\n-    let idx_b = str::find(markdown, \"## Function `b`\");\n-    let idx_c = str::find(markdown, \"# Module `c`\");\n-    let idx_d = str::find(markdown, \"## Function `d`\");\n+    let idx_a = option::get(str::find_bytes(markdown, \"# Module `a`\"));\n+    let idx_b = option::get(str::find_bytes(markdown, \"## Function `b`\"));\n+    let idx_c = option::get(str::find_bytes(markdown, \"# Module `c`\"));\n+    let idx_d = option::get(str::find_bytes(markdown, \"## Function `d`\"));\n \n     assert idx_b < idx_d;\n     assert idx_d < idx_a;\n@@ -854,4 +854,4 @@ mod test {\n         let markdown = render(\"mod morp { }\");\n         assert str::contains(markdown, \"Module `morp`\\n\\n\");\n     }\n-}\n\\ No newline at end of file\n+}"}]}