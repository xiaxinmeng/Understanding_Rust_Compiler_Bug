{"sha": "e133f929b782a0697c4aa9ad708ad88e7fe08491", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMzNmOTI5Yjc4MmEwNjk3YzRhYTlhZDcwOGFkODhlN2ZlMDg0OTE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-26T14:47:13Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-26T15:13:48Z"}, "message": "Convert all code that uses walk.rs in the straightforward way to simple_visit\n\nCode that needs the keep_going functionality is still using walk. I will\nadd an equivalent to visit.rs later.", "tree": {"sha": "42c4e95e653296f976600845642ad59a43a3be26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42c4e95e653296f976600845642ad59a43a3be26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e133f929b782a0697c4aa9ad708ad88e7fe08491", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e133f929b782a0697c4aa9ad708ad88e7fe08491", "html_url": "https://github.com/rust-lang/rust/commit/e133f929b782a0697c4aa9ad708ad88e7fe08491", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e133f929b782a0697c4aa9ad708ad88e7fe08491/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "473a03a214ca724adff6f6c8fc921b0bf132f378", "url": "https://api.github.com/repos/rust-lang/rust/commits/473a03a214ca724adff6f6c8fc921b0bf132f378", "html_url": "https://github.com/rust-lang/rust/commit/473a03a214ca724adff6f6c8fc921b0bf132f378"}], "stats": {"total": 113, "additions": 53, "deletions": 60}, "files": [{"sha": "816294a78533ccbe2e40e958f76748368eb3d884", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e133f929b782a0697c4aa9ad708ad88e7fe08491/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e133f929b782a0697c4aa9ad708ad88e7fe08491/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=e133f929b782a0697c4aa9ad708ad88e7fe08491", "patch": "@@ -8,7 +8,7 @@ import lib::llvm::mk_object_file;\n import lib::llvm::mk_section_iter;\n import front::attr;\n import middle::resolve;\n-import syntax::walk;\n+import syntax::visit;\n import syntax::codemap::span;\n import back::x86;\n import util::common;\n@@ -36,11 +36,11 @@ fn read_crates(session::session sess,\n              crate_cache=@std::map::new_str_hash[int](),\n              library_search_paths=sess.get_opts().library_search_paths,\n              mutable next_crate_num=1);\n-    auto v =\n-        rec(visit_view_item_pre=bind visit_view_item(e, _),\n-            visit_item_pre=bind visit_item(e, _)\n-            with walk::default_visitor());\n-    walk::walk_crate(v, crate);\n+    auto v = visit::mk_simple_visitor\n+        (@rec(visit_view_item=bind visit_view_item(e, _),\n+              visit_item=bind visit_item(e, _)\n+              with *visit::default_simple_visitor()));\n+    visit::visit_crate(crate, (), v);\n }\n \n type env ="}, {"sha": "ab95af5567092e51fa4cd2782da3c9430df25798", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e133f929b782a0697c4aa9ad708ad88e7fe08491/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e133f929b782a0697c4aa9ad708ad88e7fe08491/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=e133f929b782a0697c4aa9ad708ad88e7fe08491", "patch": "@@ -8,7 +8,7 @@ import std::option;\n import std::int;\n import std::option::*;\n import syntax::ast;\n-import syntax::walk;\n+import syntax::visit;\n import driver::session;\n import middle::resolve;\n import syntax::codemap::span;\n@@ -33,7 +33,7 @@ type freevar_map = hashmap[ast::node_id, freevar_info];\n // of the AST, we take a walker function that we invoke with a visitor\n // in order to start the search.\n fn collect_freevars(&resolve::def_map def_map, &session::session sess,\n-                    &fn (&walk::ast_visitor) walker,\n+                    &fn (&visit::vt[()]) walker,\n                     ast::node_id[] initial_decls) -> freevar_info {\n     type env =\n         @rec(mutable ast::node_id[] refs,\n@@ -76,18 +76,16 @@ fn collect_freevars(&resolve::def_map def_map, &session::session sess,\n     let hashset[ast::node_id] decls = new_int_hash();\n     for (ast::node_id decl in initial_decls) { set_add(decls, decl); }\n \n-    let env e =\n-        @rec(mutable refs=~[],\n-             decls=decls,\n-             def_map=def_map,\n-             sess=sess);\n-    auto visitor =\n-        @rec(visit_fn_pre=bind walk_fn(e, _, _, _, _, _),\n-             visit_local_pre=bind walk_local(e, _),\n-             visit_expr_pre=bind walk_expr(e, _),\n-             visit_pat_pre=bind walk_pat(e, _)\n-             with walk::default_visitor());\n-    walker(*visitor);\n+    let env e = @rec(mutable refs=~[],\n+                     decls=decls,\n+                     def_map=def_map,\n+                     sess=sess);\n+    walker(visit::mk_simple_visitor(\n+        @rec(visit_local=bind walk_local(e, _),\n+             visit_pat=bind walk_pat(e, _),\n+             visit_expr=bind walk_expr(e, _),\n+             visit_fn=bind walk_fn(e, _, _, _, _, _)\n+             with *visit::default_simple_visitor())));\n \n     // Calculate (refs - decls). This is the set of captured upvars.\n     // We build a vec of the node ids of the uses and a set of the\n@@ -119,16 +117,16 @@ fn annotate_freevars(&session::session sess, &resolve::def_map def_map,\n \n     fn walk_fn(env e, &ast::_fn f, &ast::ty_param[] tps, &span sp,\n                &ast::fn_ident i, ast::node_id nid) {\n-        auto walker = bind walk::walk_fn(_, f, tps, sp, i, nid);\n+        auto walker = bind visit::visit_fn(f, tps, sp, i, nid, (), _);\n         auto vars = collect_freevars(e.def_map, e.sess, walker, ~[]);\n         e.freevars.insert(nid, vars);\n     }\n     fn walk_expr(env e, &@ast::expr expr) {\n         alt (expr.node) {\n             ast::expr_for_each(?local, _, ?body) {\n-                auto vars = collect_freevars(e.def_map, e.sess,\n-                                             bind walk::walk_block(_, body),\n-                                             ~[local.node.id]);\n+                auto vars = collect_freevars\n+                    (e.def_map, e.sess, bind visit::visit_block(body, (), _),\n+                     ~[local.node.id]);\n                 e.freevars.insert(body.node.id, vars);\n             }\n             _ {}\n@@ -137,11 +135,11 @@ fn annotate_freevars(&session::session sess, &resolve::def_map def_map,\n \n     let env e =\n         rec(freevars = new_int_hash(), def_map=def_map, sess=sess);\n-    auto visitor =\n-        rec(visit_fn_pre=bind walk_fn(e, _, _, _, _, _),\n-            visit_expr_pre=bind walk_expr(e, _)\n-            with walk::default_visitor());\n-    walk::walk_crate(visitor, *crate);\n+    auto visitor = visit::mk_simple_visitor\n+        (@rec(visit_fn=bind walk_fn(e, _, _, _, _, _),\n+              visit_expr=bind walk_expr(e, _)\n+              with *visit::default_simple_visitor()));\n+    visit::visit_crate(*crate, (), visitor);\n \n     ret e.freevars;\n }"}, {"sha": "22be9065ab109bbfb937dd0f5f9a036f52fe6833", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e133f929b782a0697c4aa9ad708ad88e7fe08491/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e133f929b782a0697c4aa9ad708ad88e7fe08491/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=e133f929b782a0697c4aa9ad708ad88e7fe08491", "patch": "@@ -5,7 +5,7 @@ import std::option::none;\n import std::int;\n import std::uint;\n import syntax::ast::*;\n-import syntax::walk;\n+import syntax::visit;\n import syntax::codemap::span;\n import std::map::new_str_hash;\n import util::common::log_expr_err;\n@@ -53,13 +53,13 @@ fn collect_ids_local(&@local l, @mutable node_id[] rs) {\n \n fn node_ids_in_fn(&_fn f, &ty_param[] tps, &span sp, &fn_ident i,\n                   node_id id, @mutable node_id[] rs) {\n-    auto collect_ids = walk::default_visitor();\n-    collect_ids =\n-        rec(visit_expr_pre=bind collect_ids_expr(_, rs),\n-            visit_block_pre=bind collect_ids_block(_, rs),\n-            visit_stmt_pre=bind collect_ids_stmt(_, rs),\n-            visit_local_pre=bind collect_ids_local(_, rs) with collect_ids);\n-    walk::walk_fn(collect_ids, f, tps, sp, i, id);\n+    auto collect_ids = visit::mk_simple_visitor\n+        (@rec(visit_expr=bind collect_ids_expr(_, rs),\n+              visit_block=bind collect_ids_block(_, rs),\n+              visit_stmt=bind collect_ids_stmt(_, rs),\n+              visit_local=bind collect_ids_local(_, rs)\n+              with *visit::default_simple_visitor()));\n+    visit::visit_fn(f, tps, sp, i, id, (), collect_ids);\n }\n \n fn init_vecs(&crate_ctxt ccx, &node_id[] node_ids, uint len) {\n@@ -84,10 +84,10 @@ fn annotate_in_fn(&crate_ctxt ccx, &_fn f, &ty_param[] tps,\n }\n \n fn annotate_crate(&crate_ctxt ccx, &crate crate) {\n-    auto do_ann = walk::default_visitor();\n-    do_ann =\n-        rec(visit_fn_pre=bind annotate_in_fn(ccx, _, _, _, _, _) with do_ann);\n-    walk::walk_crate(do_ann, crate);\n+    auto do_ann = visit::mk_simple_visitor\n+        (@rec(visit_fn=bind annotate_in_fn(ccx, _, _, _, _, _)\n+              with *visit::default_simple_visitor()));\n+    visit::visit_crate(crate, (), do_ann);\n }\n //\n // Local Variables:"}, {"sha": "d1f211817279821f4fe4a3b0c807abd0e9f5a84b", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e133f929b782a0697c4aa9ad708ad88e7fe08491/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e133f929b782a0697c4aa9ad708ad88e7fe08491/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=e133f929b782a0697c4aa9ad708ad88e7fe08491", "patch": "@@ -4,11 +4,7 @@ import std::ivec;\n import syntax::ast::*;\n import util::ppaux::fn_ident_to_string;\n import std::option::*;\n-import syntax::walk;\n import syntax::visit;\n-import walk::walk_crate;\n-import walk::walk_fn;\n-import walk::ast_visitor;\n import aux::*;\n import std::map::new_int_hash;\n import util::common::new_def_hash;\n@@ -137,11 +133,10 @@ fn mk_fn_info(&crate_ctxt ccx, &_fn f, &ty_param[] tp,\n    nested locally defined functions, onto a mapping from local variable name\n    to bit number) */\n fn mk_f_to_fn_info(&crate_ctxt ccx, @crate c) {\n-    let ast_visitor vars_visitor = walk::default_visitor();\n-    vars_visitor =\n-        rec(visit_fn_pre=bind mk_fn_info(ccx, _, _, _, _, _)\n-            with vars_visitor);\n-    walk_crate(vars_visitor, *c);\n+    auto visitor = visit::mk_simple_visitor\n+        (@rec(visit_fn=bind mk_fn_info(ccx, _, _, _, _, _)\n+              with *visit::default_simple_visitor()));\n+    visit::visit_crate(*c, (), visitor);\n }\n //\n // Local Variables:"}, {"sha": "f72762a588a8ec2dd791110a9af4b1ff2d52b847", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e133f929b782a0697c4aa9ad708ad88e7fe08491/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e133f929b782a0697c4aa9ad708ad88e7fe08491/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=e133f929b782a0697c4aa9ad708ad88e7fe08491", "patch": "@@ -853,11 +853,11 @@ mod collect {\n \n         auto abi = @mutable none[ast::native_abi];\n         auto cx = @rec(tcx=tcx);\n-        auto visit =\n-            rec(visit_item_pre=bind convert(cx, abi, _),\n-                visit_native_item_pre=bind convert_native(cx, abi, _)\n-                with walk::default_visitor());\n-        walk::walk_crate(visit, *crate);\n+        auto visit = visit::mk_simple_visitor\n+            (@rec(visit_item=bind convert(cx, abi, _),\n+                  visit_native_item=bind convert_native(cx, abi, _)\n+                  with *visit::default_simple_visitor()));\n+        visit::visit_crate(*crate, (), visit);\n     }\n }\n "}, {"sha": "a6cd47278b6e3b20e9a84f9b3ba3e31814cbbaab", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e133f929b782a0697c4aa9ad708ad88e7fe08491/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e133f929b782a0697c4aa9ad708ad88e7fe08491/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=e133f929b782a0697c4aa9ad708ad88e7fe08491", "patch": "@@ -13,7 +13,7 @@ import syntax::codemap::codemap;\n import syntax::codemap::span;\n import ast::lit;\n import ast::path;\n-import syntax::walk;\n+import syntax::visit;\n import std::ioivec::stdout;\n import std::ioivec::str_writer;\n import std::ioivec::string_writer;\n@@ -98,10 +98,10 @@ fn has_nonlocal_exits(&ast::blk b) -> bool {\n             case (_) { }\n         }\n     }\n-    auto v =\n-        rec(visit_expr_pre=bind visit_expr(has_exits, _)\n-            with walk::default_visitor());\n-    walk::walk_block(v, b);\n+    auto v = visit::mk_simple_visitor\n+        (@rec(visit_expr=bind visit_expr(has_exits, _)\n+              with *visit::default_simple_visitor()));\n+    visit::visit_block(b, (), v);\n     ret *has_exits;\n }\n "}]}