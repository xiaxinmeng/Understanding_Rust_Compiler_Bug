{"sha": "06b2e659d3b7784b041a332920ae8630eaf954fd", "node_id": "C_kwDOAAsO6NoAKDA2YjJlNjU5ZDNiNzc4NGIwNDFhMzMyOTIwYWU4NjMwZWFmOTU0ZmQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-21T17:22:44Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-11-28T20:48:28Z"}, "message": "Remove unused root_parent.", "tree": {"sha": "61839a55877586aee915c18d3e0e9b15263bc27e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61839a55877586aee915c18d3e0e9b15263bc27e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06b2e659d3b7784b041a332920ae8630eaf954fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06b2e659d3b7784b041a332920ae8630eaf954fd", "html_url": "https://github.com/rust-lang/rust/commit/06b2e659d3b7784b041a332920ae8630eaf954fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06b2e659d3b7784b041a332920ae8630eaf954fd/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6d2de9483a27f846f003fc745713339a9122473", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d2de9483a27f846f003fc745713339a9122473", "html_url": "https://github.com/rust-lang/rust/commit/e6d2de9483a27f846f003fc745713339a9122473"}], "stats": {"total": 30, "additions": 5, "deletions": 25}, "files": [{"sha": "39ca41c92ff7569f749f4371fef9696591020bb3", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/06b2e659d3b7784b041a332920ae8630eaf954fd/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b2e659d3b7784b041a332920ae8630eaf954fd/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=06b2e659d3b7784b041a332920ae8630eaf954fd", "patch": "@@ -7,13 +7,12 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/borrow_check.html\n \n use crate::ty::TyCtxt;\n-use rustc_hir as hir;\n-use rustc_hir::Node;\n-use rustc_query_system::ich::{NodeIdHashingMode, StableHashingContext};\n-\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_hir as hir;\n+use rustc_hir::Node;\n use rustc_macros::HashStable;\n+use rustc_query_system::ich::{NodeIdHashingMode, StableHashingContext};\n use rustc_span::{Span, DUMMY_SP};\n \n use std::fmt;\n@@ -210,11 +209,6 @@ pub struct ScopeTree {\n     /// If not empty, this body is the root of this region hierarchy.\n     pub root_body: Option<hir::HirId>,\n \n-    /// The parent of the root body owner, if the latter is an\n-    /// an associated const or method, as impls/traits can also\n-    /// have lifetime parameters free in this body.\n-    pub root_parent: Option<hir::HirId>,\n-\n     /// Maps from a scope ID to the enclosing scope id;\n     /// this is usually corresponding to the lexical nesting, though\n     /// in the case of closures the parent scope is the innermost\n@@ -445,7 +439,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for ScopeTree {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let ScopeTree {\n             root_body,\n-            root_parent,\n             ref body_expr_count,\n             ref parent_map,\n             ref var_map,\n@@ -455,8 +448,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ScopeTree {\n         } = *self;\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            root_body.hash_stable(hcx, hasher);\n-            root_parent.hash_stable(hcx, hasher);\n+            root_body.hash_stable(hcx, hasher)\n         });\n \n         body_expr_count.hash_stable(hcx, hasher);"}, {"sha": "ae423070392e1804d9a0baf249a976c5d20b4c58", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/06b2e659d3b7784b041a332920ae8630eaf954fd/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b2e659d3b7784b041a332920ae8630eaf954fd/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=06b2e659d3b7784b041a332920ae8630eaf954fd", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{Arm, Block, Expr, Local, Node, Pat, PatKind, Stmt};\n+use rustc_hir::{Arm, Block, Expr, Local, Pat, PatKind, Stmt};\n use rustc_index::vec::Idx;\n use rustc_middle::middle::region::*;\n use rustc_middle::ty::query::Providers;\n@@ -837,19 +837,7 @@ fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n \n         let body = tcx.hir().body(body_id);\n         visitor.scope_tree.root_body = Some(body.value.hir_id);\n-\n-        // If the item is an associated const or a method,\n-        // record its impl/trait parent, as it can also have\n-        // lifetime parameters free in this body.\n-        match tcx.hir().get(id) {\n-            Node::ImplItem(_) | Node::TraitItem(_) => {\n-                visitor.scope_tree.root_parent = Some(tcx.hir().get_parent_item(id));\n-            }\n-            _ => {}\n-        }\n-\n         visitor.visit_body(body);\n-\n         visitor.scope_tree\n     } else {\n         ScopeTree::default()"}]}