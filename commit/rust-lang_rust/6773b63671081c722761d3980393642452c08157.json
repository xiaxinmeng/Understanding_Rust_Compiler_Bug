{"sha": "6773b63671081c722761d3980393642452c08157", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NzNiNjM2NzEwODFjNzIyNzYxZDM5ODAzOTM2NDI0NTJjMDgxNTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-19T01:22:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-19T19:05:18Z"}, "message": "core: Don't use managed boxes in TaskBuilder", "tree": {"sha": "2d804973eb244c1a18f82941b5b8b12f6dad3bd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d804973eb244c1a18f82941b5b8b12f6dad3bd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6773b63671081c722761d3980393642452c08157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6773b63671081c722761d3980393642452c08157", "html_url": "https://github.com/rust-lang/rust/commit/6773b63671081c722761d3980393642452c08157", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6773b63671081c722761d3980393642452c08157/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b96765179ec16bc306bf0f1cc76c7ff67ea36670", "url": "https://api.github.com/repos/rust-lang/rust/commits/b96765179ec16bc306bf0f1cc76c7ff67ea36670", "html_url": "https://github.com/rust-lang/rust/commit/b96765179ec16bc306bf0f1cc76c7ff67ea36670"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "9a0063b746a982bf5dc94a5e59531682bfa01527", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6773b63671081c722761d3980393642452c08157/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6773b63671081c722761d3980393642452c08157/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=6773b63671081c722761d3980393642452c08157", "patch": "@@ -175,7 +175,7 @@ pub struct TaskOpts {\n // FIXME (#3724): Replace the 'consumed' bit with move mode on self\n pub struct TaskBuilder {\n     opts: TaskOpts,\n-    gen_body: @fn(v: ~fn()) -> ~fn(),\n+    mut gen_body: Option<~fn(v: ~fn()) -> ~fn()>,\n     can_not_copy: Option<util::NonCopyable>,\n     mut consumed: bool,\n }\n@@ -188,7 +188,7 @@ pub struct TaskBuilder {\n pub fn task() -> TaskBuilder {\n     TaskBuilder {\n         opts: default_task_opts(),\n-        gen_body: |body| body, // Identity function\n+        gen_body: None,\n         can_not_copy: None,\n         mut consumed: false,\n     }\n@@ -201,6 +201,7 @@ priv impl TaskBuilder {\n             fail!(~\"Cannot copy a task_builder\"); // Fake move mode on self\n         }\n         self.consumed = true;\n+        let gen_body = replace(&mut self.gen_body, None);\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder {\n             opts: TaskOpts {\n@@ -209,7 +210,7 @@ priv impl TaskBuilder {\n                 notify_chan: notify_chan,\n                 sched: self.opts.sched\n             },\n-            gen_body: self.gen_body,\n+            gen_body: gen_body,\n             can_not_copy: None,\n             consumed: false\n         }\n@@ -341,8 +342,23 @@ pub impl TaskBuilder {\n      * generator by applying the task body which results from the\n      * existing body generator to the new body generator.\n      */\n-    fn add_wrapper(&self, wrapper: @fn(v: ~fn()) -> ~fn()) -> TaskBuilder {\n-        let prev_gen_body = self.gen_body;\n+    fn add_wrapper(&self, wrapper: ~fn(v: ~fn()) -> ~fn()) -> TaskBuilder {\n+        let prev_gen_body = replace(&mut self.gen_body, None);\n+        let prev_gen_body = match prev_gen_body {\n+            Some(gen) => gen,\n+            None => {\n+                let f: ~fn(~fn()) -> ~fn() = |body| body;\n+                f\n+            }\n+        };\n+        let prev_gen_body = Cell(prev_gen_body);\n+        let next_gen_body = {\n+            let f: ~fn(~fn()) -> ~fn() = |body| {\n+                let prev_gen_body = prev_gen_body.take();\n+                wrapper(prev_gen_body(body))\n+            };\n+            f\n+        };\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder {\n             opts: TaskOpts {\n@@ -351,7 +367,7 @@ pub impl TaskBuilder {\n                 notify_chan: notify_chan,\n                 sched: self.opts.sched\n             },\n-            gen_body: |body| { wrapper(prev_gen_body(body)) },\n+            gen_body: Some(next_gen_body),\n             can_not_copy: None,\n             .. self.consume()\n         }\n@@ -370,6 +386,7 @@ pub impl TaskBuilder {\n      * must be greater than zero.\n      */\n     fn spawn(&self, f: ~fn()) {\n+        let gen_body = replace(&mut self.gen_body, None);\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n         let x = self.consume();\n         let opts = TaskOpts {\n@@ -378,7 +395,15 @@ pub impl TaskBuilder {\n             notify_chan: notify_chan,\n             sched: x.opts.sched\n         };\n-        spawn::spawn_raw(opts, (x.gen_body)(f));\n+        let f = match gen_body {\n+            Some(gen) => {\n+                gen(f)\n+            }\n+            None => {\n+                f\n+            }\n+        };\n+        spawn::spawn_raw(opts, f);\n     }\n     /// Runs a task, while transfering ownership of one argument to the child.\n     fn spawn_with<A:Owned>(&self, arg: A, f: ~fn(v: A)) {"}]}