{"sha": "8040fd86bf3cf27b842b1076f3cfab7439938785", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNDBmZDg2YmYzY2YyN2I4NDJiMTA3NmYzY2ZhYjc0Mzk5Mzg3ODU=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-20T22:44:37Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-20T22:44:58Z"}, "message": "Call the correct type formatting function for more typecheck diagnostics. Closes #2652.", "tree": {"sha": "0b9ace8a775e0ea3025effb55940f936d22999e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b9ace8a775e0ea3025effb55940f936d22999e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8040fd86bf3cf27b842b1076f3cfab7439938785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8040fd86bf3cf27b842b1076f3cfab7439938785", "html_url": "https://github.com/rust-lang/rust/commit/8040fd86bf3cf27b842b1076f3cfab7439938785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8040fd86bf3cf27b842b1076f3cfab7439938785/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60a658250ea2ee6dd10425d7070c373262762b1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/60a658250ea2ee6dd10425d7070c373262762b1c", "html_url": "https://github.com/rust-lang/rust/commit/60a658250ea2ee6dd10425d7070c373262762b1c"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "b1672ef31bcc31e18e6ccfa73024f7bca1d44479", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8040fd86bf3cf27b842b1076f3cfab7439938785/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8040fd86bf3cf27b842b1076f3cfab7439938785/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=8040fd86bf3cf27b842b1076f3cfab7439938785", "patch": "@@ -1334,7 +1334,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                 tcx.sess.span_fatal(\n                     expr.span, #fmt(\"a loop function's last argument \\\n                                      should return `bool`, not `%s`\",\n-                                    ty_to_str(tcx, fty.output)));\n+                                    fcx.infcx.ty_to_str(fty.output)));\n               }\n             }\n             (ty::mk_fn(tcx, {output: ty::mk_nil(tcx) with fty}), fty.proto)\n@@ -1471,12 +1471,12 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n           _ {\n             if ty::type_is_nil(t_e) {\n                 tcx.sess.span_err(expr.span, \"cast from nil: \" +\n-                                  ty_to_str(tcx, t_e) + \" as \" +\n-                                  ty_to_str(tcx, t_1));\n+                                  fcx.infcx.ty_to_str(t_e) + \" as \" +\n+                                  fcx.infcx.ty_to_str(t_1));\n             } else if ty::type_is_nil(t_1) {\n                 tcx.sess.span_err(expr.span, \"cast to nil: \" +\n-                                  ty_to_str(tcx, t_e) + \" as \" +\n-                                  ty_to_str(tcx, t_1));\n+                                  fcx.infcx.ty_to_str(t_e) + \" as \" +\n+                                  fcx.infcx.ty_to_str(t_1));\n             }\n \n             let t_1_is_scalar = type_is_scalar(fcx, expr.span, t_1);\n@@ -1490,8 +1490,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                 */\n                 tcx.sess.span_err(expr.span,\n                                   \"non-scalar cast: \" +\n-                                  ty_to_str(tcx, t_e) + \" as \" +\n-                                  ty_to_str(tcx, t_1));\n+                                  fcx.infcx.ty_to_str(t_e) + \" as \" +\n+                                  fcx.infcx.ty_to_str(t_1));\n             }\n           }\n         }\n@@ -1639,7 +1639,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                 let t_err = fcx.infcx.resolve_type_vars_if_possible(expr_t);\n                 let msg = #fmt[\"attempted access of field %s on type %s, but \\\n                           no public field or method with that name was found\",\n-                               *field, ty_to_str(tcx, t_err)];\n+                               *field, fcx.infcx.ty_to_str(t_err)];\n                 tcx.sess.span_err(expr.span, msg);\n                 // NB: Adding a bogus type to allow typechecking to continue\n                 fcx.write_ty(id, fcx.infcx.next_ty_var());\n@@ -1667,7 +1667,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n               _ {\n                 tcx.sess.span_fatal(\n                     expr.span, \"cannot index a value of type `\" +\n-                    ty_to_str(tcx, base_t) + \"`\");\n+                    fcx.infcx.ty_to_str(base_t) + \"`\");\n               }\n             }\n           }\n@@ -1708,7 +1708,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n           none {\n             let t_err = fcx.infcx.resolve_type_vars_if_possible(p_ty);\n             let msg = #fmt[\"no `alloc()` method found for type `%s`\",\n-                           ty_to_str(tcx, t_err)];\n+                           fcx.infcx.ty_to_str(t_err)];\n             tcx.sess.span_err(expr.span, msg);\n           }\n         }"}, {"sha": "638786a6c1b5be09bbe88ad0fb437ea0a426f50d", "filename": "src/test/compile-fail/index_message.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8040fd86bf3cf27b842b1076f3cfab7439938785/src%2Ftest%2Fcompile-fail%2Findex_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8040fd86bf3cf27b842b1076f3cfab7439938785/src%2Ftest%2Fcompile-fail%2Findex_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findex_message.rs?ref=8040fd86bf3cf27b842b1076f3cfab7439938785", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let z = ();\n+    log(error, z[0]); //! ERROR cannot index a value of type `()`\n+}"}]}