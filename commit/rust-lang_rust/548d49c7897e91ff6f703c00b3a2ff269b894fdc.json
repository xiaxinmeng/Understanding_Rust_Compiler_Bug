{"sha": "548d49c7897e91ff6f703c00b3a2ff269b894fdc", "node_id": "C_kwDOAAsO6NoAKDU0OGQ0OWM3ODk3ZTkxZmY2ZjcwM2MwMGIzYTJmZjI2OWI4OTRmZGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-22T18:36:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-22T18:36:13Z"}, "message": "Rollup merge of #105847 - compiler-errors:issue-104396, r=oli-obk\n\nEnsure param-env is const before calling `eval_to_valtree`\n\nOther queries call `ParamEnv::with_const` *inside* of the query itself (e.g. `const_eval_global_id_for_typeck`), so this could alternatively be moved into the provider of `eval_to_valtree` instead. I don't have a particularly strong opinion, though *theoretically* caching is better if we make the query keys more constrained.\n\nI'm not exactly sure how this is an effect of the `-Zmir-opt-level=3` flag. Maybe something about the inliner causes us to inline an unevaluated const into a body where it can be evaluated, but where it has not yet been normalized.\n\nThis seems likely, since we're inlining `from_fn_1::<{ N / 2 }, _>` in `from_fn_2`, which means that we will need to evaluate that constant during the const prop pass after inlining.\n\nFixes #104396", "tree": {"sha": "ede72316e486c7f220b87e692b4330b7a4a83f01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ede72316e486c7f220b87e692b4330b7a4a83f01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/548d49c7897e91ff6f703c00b3a2ff269b894fdc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjpKOdCRBK7hj4Ov3rIwAADh0IAB6tpvtgzQ55jdvr5bGFPA5W\n08qfC9TG+07u9VA4rf7WBJhJ8gDBRDFGsfw2xO4EzmtqTzi6p3xChYQS7PrssMG3\n2jCQ2DwqT71GxQA+QPAkc9jkzkPcwkZzKNS9/Mt5lc2ZjGWTpVhzQDZ0QYYe2Cda\n9WFFvRsNqZuUzhOsdvzfTpDyNQb26+e2/cGKe25pfYr8ralKV0UKzNzhFXTDfltO\n+fQR3t2zhcrcCVFW310JMhxHkqzWPbfKJrq0KvhOt2/1SLnHAc3mAlHe6JhhWYz+\nNO8Wp9fp30HFPlbz/KWLNKbnsJp1why2LRHn8SbGG0SFWCU4Err05AhYm9fdk4w=\n=xf2v\n-----END PGP SIGNATURE-----\n", "payload": "tree ede72316e486c7f220b87e692b4330b7a4a83f01\nparent 17b3b97e08e3266e8e2ce0e0c0b2e6f19267f610\nparent c1181e12243f078b1cc562249569e6766d90f8f6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671734173 +0100\ncommitter GitHub <noreply@github.com> 1671734173 +0100\n\nRollup merge of #105847 - compiler-errors:issue-104396, r=oli-obk\n\nEnsure param-env is const before calling `eval_to_valtree`\n\nOther queries call `ParamEnv::with_const` *inside* of the query itself (e.g. `const_eval_global_id_for_typeck`), so this could alternatively be moved into the provider of `eval_to_valtree` instead. I don't have a particularly strong opinion, though *theoretically* caching is better if we make the query keys more constrained.\n\nI'm not exactly sure how this is an effect of the `-Zmir-opt-level=3` flag. Maybe something about the inliner causes us to inline an unevaluated const into a body where it can be evaluated, but where it has not yet been normalized.\n\nThis seems likely, since we're inlining `from_fn_1::<{ N / 2 }, _>` in `from_fn_2`, which means that we will need to evaluate that constant during the const prop pass after inlining.\n\nFixes #104396\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/548d49c7897e91ff6f703c00b3a2ff269b894fdc", "html_url": "https://github.com/rust-lang/rust/commit/548d49c7897e91ff6f703c00b3a2ff269b894fdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/548d49c7897e91ff6f703c00b3a2ff269b894fdc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17b3b97e08e3266e8e2ce0e0c0b2e6f19267f610", "url": "https://api.github.com/repos/rust-lang/rust/commits/17b3b97e08e3266e8e2ce0e0c0b2e6f19267f610", "html_url": "https://github.com/rust-lang/rust/commit/17b3b97e08e3266e8e2ce0e0c0b2e6f19267f610"}, {"sha": "c1181e12243f078b1cc562249569e6766d90f8f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1181e12243f078b1cc562249569e6766d90f8f6", "html_url": "https://github.com/rust-lang/rust/commit/c1181e12243f078b1cc562249569e6766d90f8f6"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "fcc6f8ea85282673c6f790d08ab13af0a85520f0", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/548d49c7897e91ff6f703c00b3a2ff269b894fdc/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548d49c7897e91ff6f703c00b3a2ff269b894fdc/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=548d49c7897e91ff6f703c00b3a2ff269b894fdc", "patch": "@@ -577,8 +577,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::ConstKind::Unevaluated(uv) => {\n                 let instance = self.resolve(uv.def, uv.substs)?;\n                 let cid = GlobalId { instance, promoted: None };\n-                self.ctfe_query(span, |tcx| tcx.eval_to_valtree(self.param_env.and(cid)))?\n-                    .unwrap_or_else(|| bug!(\"unable to create ValTree for {uv:?}\"))\n+                self.ctfe_query(span, |tcx| {\n+                    tcx.eval_to_valtree(self.param_env.with_const().and(cid))\n+                })?\n+                .unwrap_or_else(|| bug!(\"unable to create ValTree for {uv:?}\"))\n             }\n             ty::ConstKind::Bound(..) | ty::ConstKind::Infer(..) => {\n                 span_bug!(self.cur_span(), \"unexpected ConstKind in ctfe: {val:?}\")"}, {"sha": "315b0cf0fd6bfd4639fb8832955f83ac4f37d468", "filename": "src/test/ui/consts/issue-104396.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/548d49c7897e91ff6f703c00b3a2ff269b894fdc/src%2Ftest%2Fui%2Fconsts%2Fissue-104396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548d49c7897e91ff6f703c00b3a2ff269b894fdc/src%2Ftest%2Fui%2Fconsts%2Fissue-104396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-104396.rs?ref=548d49c7897e91ff6f703c00b3a2ff269b894fdc", "patch": "@@ -0,0 +1,36 @@\n+// compile-flags: -Zmir-opt-level=3\n+// check-pass\n+\n+#![feature(generic_const_exprs)]\n+//~^ WARN the feature `generic_const_exprs` is incomplete\n+\n+#[inline(always)]\n+fn from_fn_1<const N: usize, F: FnMut(usize) -> f32>(mut f: F) -> [f32; N] {\n+    let mut result = [0.0; N];\n+    let mut i = 0;\n+    while i < N {\n+        result[i] = f(i);\n+        i += 1;\n+    }\n+    result\n+}\n+\n+pub struct TestArray<const N: usize>\n+where\n+    [(); N / 2]:,\n+{\n+    array: [f32; N / 2],\n+}\n+\n+impl<const N: usize> TestArray<N>\n+where\n+    [(); N / 2]:,\n+{\n+    fn from_fn_2<F: FnMut(usize) -> f32>(f: F) -> Self {\n+        Self { array: from_fn_1(f) }\n+    }\n+}\n+\n+fn main() {\n+    TestArray::<4>::from_fn_2(|i| 0.0);\n+}"}, {"sha": "5856bee09a3fc09539fe44f4b1bf2a00af4f6aae", "filename": "src/test/ui/consts/issue-104396.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/548d49c7897e91ff6f703c00b3a2ff269b894fdc/src%2Ftest%2Fui%2Fconsts%2Fissue-104396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/548d49c7897e91ff6f703c00b3a2ff269b894fdc/src%2Ftest%2Fui%2Fconsts%2Fissue-104396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-104396.stderr?ref=548d49c7897e91ff6f703c00b3a2ff269b894fdc", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-104396.rs:4:12\n+   |\n+LL | #![feature(generic_const_exprs)]\n+   |            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}