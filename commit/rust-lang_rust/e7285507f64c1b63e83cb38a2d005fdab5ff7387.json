{"sha": "e7285507f64c1b63e83cb38a2d005fdab5ff7387", "node_id": "C_kwDOAAsO6NoAKGU3Mjg1NTA3ZjY0YzFiNjNlODNjYjM4YTJkMDA1ZmRhYjVmZjczODc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-18T13:57:49Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-22T06:27:10Z"}, "message": "Restructure symbol queries", "tree": {"sha": "f8d40aa69b526bc5f2d9ef59b522b2e2b64556c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8d40aa69b526bc5f2d9ef59b522b2e2b64556c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7285507f64c1b63e83cb38a2d005fdab5ff7387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7285507f64c1b63e83cb38a2d005fdab5ff7387", "html_url": "https://github.com/rust-lang/rust/commit/e7285507f64c1b63e83cb38a2d005fdab5ff7387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7285507f64c1b63e83cb38a2d005fdab5ff7387/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c408970eaff9c1b993903e5dea9f2558edfc013", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c408970eaff9c1b993903e5dea9f2558edfc013", "html_url": "https://github.com/rust-lang/rust/commit/9c408970eaff9c1b993903e5dea9f2558edfc013"}], "stats": {"total": 99, "additions": 56, "deletions": 43}, "files": [{"sha": "da5aaf22570b9dcace88baacf5462e1f9afce98b", "filename": "crates/hir/src/symbols.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e7285507f64c1b63e83cb38a2d005fdab5ff7387/crates%2Fhir%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7285507f64c1b63e83cb38a2d005fdab5ff7387/crates%2Fhir%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsymbols.rs?ref=e7285507f64c1b63e83cb38a2d005fdab5ff7387", "patch": "@@ -102,21 +102,33 @@ pub struct SymbolCollector<'a> {\n /// Given a [`ModuleId`] and a [`HirDatabase`], use the DefMap for the module's crate to collect\n /// all symbols that should be indexed for the given module.\n impl<'a> SymbolCollector<'a> {\n-    pub fn collect(db: &dyn HirDatabase, module: Module) -> Vec<FileSymbol> {\n-        let mut symbol_collector = SymbolCollector {\n+    pub fn new(db: &'a dyn HirDatabase) -> Self {\n+        SymbolCollector {\n             db,\n             symbols: Default::default(),\n+            work: Default::default(),\n             current_container_name: None,\n-            // The initial work is the root module we're collecting, additional work will\n-            // be populated as we traverse the module's definitions.\n-            work: vec![SymbolCollectorWork { module_id: module.into(), parent: None }],\n-        };\n+        }\n+    }\n+\n+    pub fn collect(&mut self, module: Module) {\n+        // The initial work is the root module we're collecting, additional work will\n+        // be populated as we traverse the module's definitions.\n+        self.work.push(SymbolCollectorWork { module_id: module.into(), parent: None });\n \n-        while let Some(work) = symbol_collector.work.pop() {\n-            symbol_collector.do_work(work);\n+        while let Some(work) = self.work.pop() {\n+            self.do_work(work);\n         }\n+    }\n+\n+    pub fn finish(self) -> Vec<FileSymbol> {\n+        self.symbols\n+    }\n \n-        symbol_collector.symbols\n+    pub fn collect_module(db: &dyn HirDatabase, module: Module) -> Vec<FileSymbol> {\n+        let mut symbol_collector = SymbolCollector::new(db);\n+        symbol_collector.collect(module);\n+        symbol_collector.finish()\n     }\n \n     fn do_work(&mut self, work: SymbolCollectorWork) {"}, {"sha": "5631741e1e87f83d21f0f0158565aea8fe4ec100", "filename": "crates/ide-db/src/items_locator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7285507f64c1b63e83cb38a2d005fdab5ff7387/crates%2Fide-db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7285507f64c1b63e83cb38a2d005fdab5ff7387/crates%2Fide-db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fitems_locator.rs?ref=e7285507f64c1b63e83cb38a2d005fdab5ff7387", "patch": "@@ -115,7 +115,8 @@ fn find_items<'a>(\n         });\n \n     // Query the local crate using the symbol index.\n-    let local_results = symbol_index::crate_symbols(db, krate, local_query)\n+    let local_results = local_query\n+        .search(&symbol_index::crate_symbols(db, krate))\n         .into_iter()\n         .filter_map(move |local_candidate| get_name_definition(sema, &local_candidate))\n         .filter_map(|name_definition_to_import| match name_definition_to_import {"}, {"sha": "6f953dba0c353164a873900e9068be35ec2b6a28", "filename": "crates/ide-db/src/symbol_index.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e7285507f64c1b63e83cb38a2d005fdab5ff7387/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7285507f64c1b63e83cb38a2d005fdab5ff7387/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsymbol_index.rs?ref=e7285507f64c1b63e83cb38a2d005fdab5ff7387", "patch": "@@ -93,12 +93,15 @@ impl Query {\n pub trait SymbolsDatabase: HirDatabase + SourceDatabaseExt + Upcast<dyn HirDatabase> {\n     /// The symbol index for a given module. These modules should only be in source roots that\n     /// are inside local_roots.\n-    // FIXME: We should probably LRU  this\n     fn module_symbols(&self, module: Module) -> Arc<SymbolIndex>;\n \n     /// The symbol index for a given source root within library_roots.\n     fn library_symbols(&self, source_root_id: SourceRootId) -> Arc<SymbolIndex>;\n \n+    #[salsa::transparent]\n+    /// The symbol indices of modules that make up a given crate.\n+    fn crate_symbols(&self, krate: Crate) -> Box<[Arc<SymbolIndex>]>;\n+\n     /// The set of \"local\" (that is, from the current workspace) roots.\n     /// Files in local roots are assumed to change frequently.\n     #[salsa::input]\n@@ -113,26 +116,33 @@ pub trait SymbolsDatabase: HirDatabase + SourceDatabaseExt + Upcast<dyn HirDatab\n fn library_symbols(db: &dyn SymbolsDatabase, source_root_id: SourceRootId) -> Arc<SymbolIndex> {\n     let _p = profile::span(\"library_symbols\");\n \n-    // todo: this could be parallelized, once I figure out how to do that...\n-    let symbols = db\n-        .source_root_crates(source_root_id)\n+    let mut symbol_collector = SymbolCollector::new(db.upcast());\n+\n+    db.source_root_crates(source_root_id)\n         .iter()\n         .flat_map(|&krate| Crate::from(krate).modules(db.upcast()))\n-        // we specifically avoid calling SymbolsDatabase::module_symbols here, even they do the same thing,\n+        // we specifically avoid calling other SymbolsDatabase queries here, even though they do the same thing,\n         // as the index for a library is not going to really ever change, and we do not want to store each\n-        // module's index in salsa.\n-        .flat_map(|module| SymbolCollector::collect(db.upcast(), module))\n-        .collect();\n+        // the module or crate indices for those in salsa unless we need to.\n+        .for_each(|module| symbol_collector.collect(module));\n \n+    let mut symbols = symbol_collector.finish();\n+    symbols.shrink_to_fit();\n     Arc::new(SymbolIndex::new(symbols))\n }\n \n fn module_symbols(db: &dyn SymbolsDatabase, module: Module) -> Arc<SymbolIndex> {\n     let _p = profile::span(\"module_symbols\");\n-    let symbols = SymbolCollector::collect(db.upcast(), module);\n+\n+    let symbols = SymbolCollector::collect_module(db.upcast(), module);\n     Arc::new(SymbolIndex::new(symbols))\n }\n \n+pub fn crate_symbols(db: &dyn SymbolsDatabase, krate: Crate) -> Box<[Arc<SymbolIndex>]> {\n+    let _p = profile::span(\"crate_symbols\");\n+    krate.modules(db.upcast()).into_iter().map(|module| db.module_symbols(module)).collect()\n+}\n+\n /// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n struct Snap<DB>(DB);\n impl<DB: ParallelDatabase> Snap<salsa::Snapshot<DB>> {\n@@ -188,36 +198,21 @@ pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n             .map_with(Snap::new(db), |snap, &root| snap.library_symbols(root))\n             .collect()\n     } else {\n-        let mut modules = Vec::new();\n+        let mut crates = Vec::new();\n \n         for &root in db.local_roots().iter() {\n-            let crates = db.source_root_crates(root);\n-            for &krate in crates.iter() {\n-                modules.extend(Crate::from(krate).modules(db));\n-            }\n+            crates.extend(db.source_root_crates(root).iter().copied())\n         }\n-\n-        modules\n-            .par_iter()\n-            .map_with(Snap::new(db), |snap, &module| snap.module_symbols(module))\n-            .collect()\n+        let indices: Vec<_> = crates\n+            .into_par_iter()\n+            .map_with(Snap::new(db), |snap, krate| snap.crate_symbols(krate.into()))\n+            .collect();\n+        indices.iter().flat_map(|indices| indices.iter().cloned()).collect()\n     };\n \n     query.search(&indices)\n }\n \n-pub fn crate_symbols(db: &RootDatabase, krate: Crate, query: Query) -> Vec<FileSymbol> {\n-    let _p = profile::span(\"crate_symbols\").detail(|| format!(\"{query:?}\"));\n-\n-    let modules = krate.modules(db);\n-    let indices: Vec<_> = modules\n-        .par_iter()\n-        .map_with(Snap::new(db), |snap, &module| snap.module_symbols(module))\n-        .collect();\n-\n-    query.search(&indices)\n-}\n-\n #[derive(Default)]\n pub struct SymbolIndex {\n     symbols: Vec<FileSymbol>,\n@@ -275,7 +270,12 @@ impl SymbolIndex {\n             builder.insert(key, value).unwrap();\n         }\n \n-        let map = fst::Map::new(builder.into_inner().unwrap()).unwrap();\n+        let map = fst::Map::new({\n+            let mut buf = builder.into_inner().unwrap();\n+            buf.shrink_to_fit();\n+            buf\n+        })\n+        .unwrap();\n         SymbolIndex { symbols, map }\n     }\n \n@@ -419,7 +419,7 @@ struct StructInModB;\n             .modules(&db)\n             .into_iter()\n             .map(|module_id| {\n-                let mut symbols = SymbolCollector::collect(&db, module_id);\n+                let mut symbols = SymbolCollector::collect_module(&db, module_id);\n                 symbols.sort_by_key(|it| it.name.clone());\n                 (module_id, symbols)\n             })"}]}