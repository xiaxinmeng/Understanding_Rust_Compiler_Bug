{"sha": "ea892dc70b1a773b85410716b5822cc814542ecc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhODkyZGM3MGIxYTc3M2I4NTQxMDcxNmI1ODIyY2M4MTQ1NDJlY2M=", "commit": {"author": {"name": "Geoffry Song", "email": "goffrie@gmail.com", "date": "2015-03-08T18:41:08Z"}, "committer": {"name": "Geoffry Song", "email": "goffrie@gmail.com", "date": "2015-04-26T01:42:10Z"}, "message": "Remove remaining tests for hygiene-encoded identifiers.\n\nSuch things no longer exist.", "tree": {"sha": "c1cb0ad3b54090e6633d39a7e3c68db62515038d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1cb0ad3b54090e6633d39a7e3c68db62515038d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea892dc70b1a773b85410716b5822cc814542ecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea892dc70b1a773b85410716b5822cc814542ecc", "html_url": "https://github.com/rust-lang/rust/commit/ea892dc70b1a773b85410716b5822cc814542ecc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea892dc70b1a773b85410716b5822cc814542ecc/comments", "author": {"login": "goffrie", "id": 1240398, "node_id": "MDQ6VXNlcjEyNDAzOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1240398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goffrie", "html_url": "https://github.com/goffrie", "followers_url": "https://api.github.com/users/goffrie/followers", "following_url": "https://api.github.com/users/goffrie/following{/other_user}", "gists_url": "https://api.github.com/users/goffrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/goffrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goffrie/subscriptions", "organizations_url": "https://api.github.com/users/goffrie/orgs", "repos_url": "https://api.github.com/users/goffrie/repos", "events_url": "https://api.github.com/users/goffrie/events{/privacy}", "received_events_url": "https://api.github.com/users/goffrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "goffrie", "id": 1240398, "node_id": "MDQ6VXNlcjEyNDAzOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1240398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goffrie", "html_url": "https://github.com/goffrie", "followers_url": "https://api.github.com/users/goffrie/followers", "following_url": "https://api.github.com/users/goffrie/following{/other_user}", "gists_url": "https://api.github.com/users/goffrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/goffrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goffrie/subscriptions", "organizations_url": "https://api.github.com/users/goffrie/orgs", "repos_url": "https://api.github.com/users/goffrie/repos", "events_url": "https://api.github.com/users/goffrie/events{/privacy}", "received_events_url": "https://api.github.com/users/goffrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d9831dea598d8a45c69e8c799503e8a397aacc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d9831dea598d8a45c69e8c799503e8a397aacc0", "html_url": "https://github.com/rust-lang/rust/commit/2d9831dea598d8a45c69e8c799503e8a397aacc0"}], "stats": {"total": 126, "additions": 0, "deletions": 126}, "files": [{"sha": "54aac5195aee3bab71ec7c0c2bc9bc9121040f5b", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ea892dc70b1a773b85410716b5822cc814542ecc/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea892dc70b1a773b85410716b5822cc814542ecc/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=ea892dc70b1a773b85410716b5822cc814542ecc", "patch": "@@ -32,7 +32,6 @@ macro_rules! unexported_macro { () => (3) }\n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_macro(\"make_a_1\", expand_make_a_1);\n-    reg.register_macro(\"forged_ident\", expand_forged_ident);\n     reg.register_macro(\"identity\", expand_identity);\n     reg.register_syntax_extension(\n         token::intern(\"into_foo\"),\n@@ -104,29 +103,4 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n     }\n }\n \n-fn expand_forged_ident(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree]) -> Box<MacResult+'static> {\n-    use syntax::ext::quote::rt::*;\n-\n-    if !tts.is_empty() {\n-        cx.span_fatal(sp, \"forged_ident takes no arguments\");\n-    }\n-\n-    // Most of this is modelled after the expansion of the `quote_expr!`\n-    // macro ...\n-    let parse_sess = cx.parse_sess();\n-    let cfg = cx.cfg();\n-\n-    // ... except this is where we inject a forged identifier,\n-    // and deliberately do not call `cx.parse_tts_with_hygiene`\n-    // (because we are testing that this will be *rejected*\n-    //  by the default parser).\n-\n-    let expr = {\n-        let tt = cx.parse_tts(\"\\x00name_2,ctxt_0\\x00\".to_string());\n-        let mut parser = new_parser_from_tts(parse_sess, cfg, tt);\n-        parser.parse_expr()\n-    };\n-    MacEager::expr(expr)\n-}\n-\n pub fn foo() {}"}, {"sha": "fd1deffb59d4da94a3f81b8253ee63752b1cb0fc", "filename": "src/test/compile-fail-fulldeps/macro-crate-cannot-read-embedded-ident.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2d9831dea598d8a45c69e8c799503e8a397aacc0/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-cannot-read-embedded-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d9831dea598d8a45c69e8c799503e8a397aacc0/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-cannot-read-embedded-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-cannot-read-embedded-ident.rs?ref=2d9831dea598d8a45c69e8c799503e8a397aacc0", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:macro_crate_test.rs\n-// ignore-stage1\n-// error-pattern: unknown start of token: \\u{0}\n-\n-// Issue #15750 and #15962 : this test is checking that the standard\n-// parser rejects embedded idents.  pnkfelix did not want to attempt\n-// to make a test file that itself used the embedded ident input form,\n-// since he worried that would be difficult to work with in many text\n-// editors, so instead he made a macro that expands into the embedded\n-// ident form.\n-\n-#![feature(plugin)]\n-#![plugin(macro_crate_test)]\n-\n-fn main() {\n-    let x = 0;\n-    assert_eq!(3, forged_ident!());\n-}"}, {"sha": "0d047be02ca1dc7c135392b8765817c8ad7e3b40", "filename": "src/test/run-make/cannot-read-embedded-idents/Makefile", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2d9831dea598d8a45c69e8c799503e8a397aacc0/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2d9831dea598d8a45c69e8c799503e8a397aacc0/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2FMakefile?ref=2d9831dea598d8a45c69e8c799503e8a397aacc0", "patch": "@@ -1,28 +0,0 @@\n--include ../tools.mk\n-\n-# Issue #15750, #15962 : This test ensures that our special embedded\n-# ident syntax hack is not treated as legitimate input by the lexer in\n-# normal mode.\n-#\n-# It is modelled after the `unicode-input/` test, since we need to\n-# create files with syntax that can trip up normal text editting tools\n-# (namely text with embedded nul-bytes).\n-\n-# This test attempts to run rustc itself from the compiled binary; but\n-# that means that you need to set the LD_LIBRARY_PATH for rustc itself\n-# while running create_and_compile, and that won't work for stage1.\n-\n-# FIXME ignore windows\n-ifndef IS_WINDOWS\n-ifeq ($(RUST_BUILD_STAGE),1)\n-DOTEST=\n-else\n-DOTEST=dotest\n-endif\n-endif\n-\n-all: $(DOTEST)\n-\n-dotest:\n-\t$(RUSTC) create_and_compile.rs\n-\t$(call RUN,create_and_compile)  \"$(RUSTC)\" \"$(TMPDIR)\""}, {"sha": "fd69d2786b8d0800adb74bc000a7b73b638e1c0f", "filename": "src/test/run-make/cannot-read-embedded-idents/create_and_compile.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2d9831dea598d8a45c69e8c799503e8a397aacc0/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d9831dea598d8a45c69e8c799503e8a397aacc0/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs?ref=2d9831dea598d8a45c69e8c799503e8a397aacc0", "patch": "@@ -1,44 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::env;\n-use std::fs::File;\n-use std::process::Command;\n-use std::io::Write;\n-use std::path::Path;\n-\n-// creates broken.rs, which has the Ident \\x00name_0,ctxt_0\\x00\n-// embedded within it, and then attempts to compile broken.rs with the\n-// provided `rustc`\n-\n-fn main() {\n-    let args: Vec<String> = env::args().collect();\n-    let rustc = &args[1];\n-    let tmpdir = Path::new(&args[2]);\n-\n-    let main_file = tmpdir.join(\"broken.rs\");\n-    let _ = File::create(&main_file).unwrap()\n-        .write_all(b\"pub fn main() {\n-                   let \\x00name_0,ctxt_0\\x00 = 3;\n-                   println!(\\\"{}\\\", \\x00name_0,ctxt_0\\x00);\n-        }\").unwrap();\n-\n-    // rustc is passed to us with --out-dir and -L etc., so we\n-    // can't exec it directly\n-    let result = Command::new(\"sh\")\n-        .arg(\"-c\")\n-        .arg(&format!(\"{} {}\", rustc, main_file.display()))\n-        .output().unwrap();\n-    let err = String::from_utf8_lossy(&result.stderr);\n-\n-    // positive test so that this test will be updated when the\n-    // compiler changes.\n-    assert!(err.contains(\"unknown start of token\"))\n-}"}]}