{"sha": "530a113bfa2702b415e38f3168d5c95ee1d93718", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMGExMTNiZmEyNzAyYjQxNWUzOGYzMTY4ZDVjOTVlZTFkOTM3MTg=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-13T21:13:41Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-15T02:15:53Z"}, "message": "convert ast::item into a struct", "tree": {"sha": "042a0580b8982f8d466cb975a1aae75ac88436c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/042a0580b8982f8d466cb975a1aae75ac88436c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/530a113bfa2702b415e38f3168d5c95ee1d93718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/530a113bfa2702b415e38f3168d5c95ee1d93718", "html_url": "https://github.com/rust-lang/rust/commit/530a113bfa2702b415e38f3168d5c95ee1d93718", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/530a113bfa2702b415e38f3168d5c95ee1d93718/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebea895d026722e5887bd6544639152b87a80cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebea895d026722e5887bd6544639152b87a80cc5", "html_url": "https://github.com/rust-lang/rust/commit/ebea895d026722e5887bd6544639152b87a80cc5"}], "stats": {"total": 168, "additions": 93, "deletions": 75}, "files": [{"sha": "03b89a428faa8a9087ac3d91f4d2038a38195827", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -225,13 +225,14 @@ fn mk_test_module(cx: test_ctxt) -> @ast::item {\n     // This attribute tells resolve to let us call unexported functions\n     let resolve_unexported_attr =\n         attr::mk_attr(attr::mk_word_item(~\"!resolve_unexported\"));\n-    let item: ast::item =\n-        {ident: cx.sess.ident_of(~\"__test\"),\n-         attrs: ~[resolve_unexported_attr],\n-         id: cx.sess.next_node_id(),\n-         node: item_,\n-         vis: ast::public,\n-         span: dummy_sp()};\n+    let item = ast::item {\n+        ident: cx.sess.ident_of(~\"__test\"),\n+        attrs: ~[resolve_unexported_attr],\n+        id: cx.sess.next_node_id(),\n+        node: item_,\n+        vis: ast::public,\n+        span: dummy_sp(),\n+    };\n \n     debug!(\"Synthetic test module:\\n%s\\n\",\n            pprust::item_to_str(@copy item, cx.sess.intr()));\n@@ -293,13 +294,14 @@ fn mk_tests(cx: test_ctxt) -> @ast::item {\n     let body = nospan(body_);\n \n     let item_ = ast::item_fn(decl, ast::impure_fn, ~[], body);\n-    let item: ast::item =\n-        {ident: cx.sess.ident_of(~\"tests\"),\n-         attrs: ~[],\n-         id: cx.sess.next_node_id(),\n-         node: item_,\n-         vis: ast::public,\n-         span: dummy_sp()};\n+    let item = ast::item {\n+        ident: cx.sess.ident_of(~\"tests\"),\n+        attrs: ~[],\n+        id: cx.sess.next_node_id(),\n+        node: item_,\n+        vis: ast::public,\n+        span: dummy_sp(),\n+    };\n     return @item;\n }\n \n@@ -503,13 +505,14 @@ fn mk_main(cx: test_ctxt) -> @ast::item {\n     let body = ast::spanned { node: body_, span: dummy_sp() };\n \n     let item_ = ast::item_fn(decl, ast::impure_fn, ~[], body);\n-    let item: ast::item =\n-        {ident: cx.sess.ident_of(~\"main\"),\n-         attrs: ~[attr::mk_attr(attr::mk_word_item(~\"main\"))],\n-         id: cx.sess.next_node_id(),\n-         node: item_,\n-         vis: ast::public,\n-         span: dummy_sp()};\n+    let item = ast::item {\n+        ident: cx.sess.ident_of(~\"main\"),\n+        attrs: ~[attr::mk_attr(attr::mk_word_item(~\"main\"))],\n+        id: cx.sess.next_node_id(),\n+        node: item_,\n+        vis: ast::public,\n+        span: dummy_sp(),\n+    };\n     return @item;\n }\n "}, {"sha": "645f7f2ad227a08d3677d13bf0982d7163ade425", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -126,7 +126,7 @@ fn get_const_val(cx: @crate_ctxt, def_id: ast::def_id) -> ValueRef {\n     }\n     if !cx.const_values.contains_key(def_id.node) {\n         match cx.tcx.items.get(def_id.node) {\n-            ast_map::node_item(@{\n+            ast_map::node_item(@ast::item {\n                 node: ast::item_const(_, subexpr), _\n             }, _) => {\n                 trans_const(cx, subexpr, def_id.node);"}, {"sha": "f904f4660640bc6e551348c7afdf72d766e2a3a5", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -327,7 +327,7 @@ fn method_with_name(ccx: @crate_ctxt, impl_id: ast::def_id,\n                     name: ast::ident) -> ast::def_id {\n     if impl_id.crate == ast::local_crate {\n         match ccx.tcx.items.get(impl_id.node) {\n-          ast_map::node_item(@{\n+          ast_map::node_item(@ast::item {\n                 node: ast::item_impl(_, _, _, ref ms),\n                 _\n             }, _) => {\n@@ -344,7 +344,7 @@ fn method_with_name_or_default(ccx: @crate_ctxt, impl_id: ast::def_id,\n                                name: ast::ident) -> ast::def_id {\n     if impl_id.crate == ast::local_crate {\n         match ccx.tcx.items.get(impl_id.node) {\n-          ast_map::node_item(@{\n+          ast_map::node_item(@ast::item {\n                 node: ast::item_impl(_, _, _, ref ms), _\n           }, _) => {\n               let did = method_from_methods(/*bad*/copy *ms, name);"}, {"sha": "9cdbbffcef8962f04fe5677a361ee3c34e503aeb", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -167,7 +167,7 @@ fn monomorphic_fn(ccx: @crate_ctxt,\n     });\n \n     let lldecl = match map_node {\n-      ast_map::node_item(i@@{\n+      ast_map::node_item(i@@ast::item {\n                 // XXX: Bad copy.\n                 node: ast::item_fn(copy decl, _, _, ref body),\n                 _"}, {"sha": "a151bddf6f7cdcee46b9da79b91d487d2bcf9691", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -94,7 +94,8 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n                                      fn_id_loc))\n     };\n     match map_node {\n-      ast_map::node_item(@{node: item_fn(_, _, _, ref body), _}, _) |\n+      ast_map::node_item(@ast::item { node: item_fn(_, _, _, ref body),\n+                                      _ }, _) |\n       ast_map::node_method(@{body: ref body, _}, _, _) => {\n         handle_body(cx, (*body));\n       }"}, {"sha": "b2fdec855190f974f9b36bbbb5f663385b595258", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -3609,7 +3609,7 @@ fn store_trait_methods(cx: ctxt, id: ast::node_id, ms: @~[method]) {\n fn provided_trait_methods(cx: ctxt, id: ast::def_id) -> ~[ast::ident] {\n     if is_local(id) {\n         match cx.items.find(id.node) {\n-            Some(ast_map::node_item(@{\n+            Some(ast_map::node_item(@ast::item {\n                         node: item_trait(_, _, ref ms),\n                         _\n                     }, _)) =>\n@@ -3690,7 +3690,7 @@ fn impl_traits(cx: ctxt, id: ast::def_id, vstore: vstore) -> ~[t] {\n     if id.crate == ast::local_crate {\n         debug!(\"(impl_traits) searching for trait impl %?\", id);\n         match cx.items.find(id.node) {\n-           Some(ast_map::node_item(@{\n+           Some(ast_map::node_item(@ast::item {\n                         node: ast::item_impl(_, opt_trait, _, _),\n                         _},\n                     _)) => {\n@@ -3797,7 +3797,7 @@ fn ty_dtor(cx: ctxt, struct_id: def_id) -> DtorKind {\n \n     if is_local(struct_id) {\n        match cx.items.find(struct_id.node) {\n-           Some(ast_map::node_item(@{\n+           Some(ast_map::node_item(@ast::item {\n                node: ast::item_struct(@{ dtor: Some(ref dtor), _ }, _),\n                _\n            }, _)) =>\n@@ -3900,7 +3900,7 @@ fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[VariantInfo] {\n           expr, since check_enum_variants also updates the enum_var_cache\n          */\n         match cx.items.get(id.node) {\n-          ast_map::node_item(@{\n+          ast_map::node_item(@ast::item {\n                     node: ast::item_enum(ref enum_definition, _),\n                     _\n                 }, _) => {"}, {"sha": "792588a8cd3a3f4bb3304c6da2d62e226e19a72d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -1008,14 +1008,19 @@ pub fn impl_self_ty(vcx: &VtableContext,\n     let {n_tps, region_param, raw_ty} = if did.crate == ast::local_crate {\n         let region_param = tcx.region_paramd_items.find(did.node);\n         match tcx.items.find(did.node) {\n-          Some(ast_map::node_item(@{node: ast::item_impl(ref ts, _, st, _),\n-                                  _}, _)) => {\n+          Some(ast_map::node_item(@ast::item {\n+                  node: ast::item_impl(ref ts, _, st, _),\n+                  _\n+              }, _)) => {\n             {n_tps: ts.len(),\n              region_param: region_param,\n              raw_ty: vcx.ccx.to_ty(rscope::type_rscope(region_param), st)}\n           }\n-          Some(ast_map::node_item(@{node: ast::item_struct(_, ref ts),\n-                                    id: class_id, _},_)) => {\n+          Some(ast_map::node_item(@ast::item {\n+                  node: ast::item_struct(_, ref ts),\n+                  id: class_id,\n+                  _\n+              },_)) => {\n               /* If the impl is a class, the self ty is just the class ty\n                  (doing a no-op subst for the ty params; in the next step,\n                  we substitute in fresh vars for them)\n@@ -1768,7 +1773,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n             region_parameterized =\n                 tcx.region_paramd_items.find(class_id.node);\n             match tcx.items.find(class_id.node) {\n-                Some(ast_map::node_item(@{\n+                Some(ast_map::node_item(@ast::item {\n                         node: ast::item_struct(_, ref type_parameters),\n                         _\n                     }, _)) => {\n@@ -1851,7 +1856,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n             region_parameterized =\n                 tcx.region_paramd_items.find(enum_id.node);\n             match tcx.items.find(enum_id.node) {\n-                Some(ast_map::node_item(@{\n+                Some(ast_map::node_item(@ast::item {\n                         node: ast::item_enum(_, ref type_parameters),\n                         _\n                     }, _)) => {"}, {"sha": "edbe271b900aca08d38da5c13d402a1a192ccb0e", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -282,7 +282,7 @@ fn ensure_trait_methods(ccx: @crate_ctxt, id: ast::node_id, trait_ty: ty::t) {\n     let tcx = ccx.tcx;\n     let region_paramd = tcx.region_paramd_items.find(id);\n     match tcx.items.get(id) {\n-      ast_map::node_item(@{\n+      ast_map::node_item(@ast::item {\n                 node: ast::item_trait(ref params, _, ref ms),\n                 _\n             }, _) => {"}, {"sha": "1ab3ce2d6f368145f01cc5e2f791693c14312d0e", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -167,7 +167,7 @@ fn fold_enum(\n             let variant = *variant;\n             let desc = do astsrv::exec(srv) |ctxt| {\n                 match ctxt.ast_map.get(doc_id) {\n-                  ast_map::node_item(@{\n+                  ast_map::node_item(@ast::item {\n                     node: ast::item_enum(enum_definition, _), _\n                   }, _) => {\n                     let ast_variant = option::get(\n@@ -226,7 +226,7 @@ fn merge_method_attrs(\n     // Create an assoc list from method name to attributes\n     let attrs: ~[(~str, Option<~str>)] = do astsrv::exec(srv) |ctxt| {\n         match ctxt.ast_map.get(item_id) {\n-          ast_map::node_item(@{\n+          ast_map::node_item(@ast::item {\n             node: ast::item_trait(_, _, methods), _\n           }, _) => {\n             vec::map(methods, |method| {\n@@ -240,7 +240,7 @@ fn merge_method_attrs(\n                 }\n             })\n           }\n-          ast_map::node_item(@{\n+          ast_map::node_item(@ast::item {\n             node: ast::item_impl(_, _, _, methods), _\n           }, _) => {\n             vec::map(methods, |method| {"}, {"sha": "5309c38e3cdf00468b1b2a8611248dabcdbf93e8", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -68,7 +68,7 @@ fn fold_fn(\n fn get_fn_sig(srv: astsrv::Srv, fn_id: doc::AstId) -> Option<~str> {\n     do astsrv::exec(srv) |ctxt| {\n         match ctxt.ast_map.get(fn_id) {\n-          ast_map::node_item(@{\n+          ast_map::node_item(@ast::item {\n             ident: ident,\n             node: ast::item_fn(decl, _, tys, _), _\n           }, _) |\n@@ -104,7 +104,7 @@ fn fold_const(\n     {\n         sig: Some(do astsrv::exec(srv) |ctxt| {\n             match ctxt.ast_map.get(doc.id()) {\n-              ast_map::node_item(@{\n+              ast_map::node_item(@ast::item {\n                 node: ast::item_const(ty, _), _\n               }, _) => {\n                 pprust::ty_to_str(ty, extract::interner())\n@@ -134,7 +134,7 @@ fn fold_enum(\n             let variant = *variant;\n             let sig = do astsrv::exec(srv) |ctxt| {\n                 match ctxt.ast_map.get(doc_id) {\n-                  ast_map::node_item(@{\n+                  ast_map::node_item(@ast::item {\n                     node: ast::item_enum(enum_definition, _), _\n                   }, _) => {\n                     let ast_variant =\n@@ -193,7 +193,7 @@ fn get_method_sig(\n ) -> Option<~str> {\n     do astsrv::exec(srv) |ctxt| {\n         match ctxt.ast_map.get(item_id) {\n-          ast_map::node_item(@{\n+          ast_map::node_item(@ast::item {\n             node: ast::item_trait(_, _, methods), _\n           }, _) => {\n             match vec::find(methods, |method| {\n@@ -225,7 +225,7 @@ fn get_method_sig(\n                 _ => fail ~\"method not found\"\n             }\n           }\n-          ast_map::node_item(@{\n+          ast_map::node_item(@ast::item {\n             node: ast::item_impl(_, _, _, methods), _\n           }, _) => {\n             match vec::find(methods, |method| {\n@@ -263,7 +263,7 @@ fn fold_impl(\n \n     let (trait_types, self_ty) = do astsrv::exec(srv) |ctxt| {\n         match ctxt.ast_map.get(doc.id()) {\n-          ast_map::node_item(@{\n+          ast_map::node_item(@ast::item {\n             node: ast::item_impl(_, opt_trait_type, self_ty, _), _\n           }, _) => {\n             let trait_types = opt_trait_type.map_default(~[], |p| {\n@@ -319,7 +319,7 @@ fn fold_type(\n     {\n         sig: do astsrv::exec(srv) |ctxt| {\n             match ctxt.ast_map.get(doc.id()) {\n-              ast_map::node_item(@{\n+              ast_map::node_item(@ast::item {\n                 ident: ident,\n                 node: ast::item_ty(ty, params), _\n               }, _) => {\n@@ -380,7 +380,7 @@ fn strip_struct_extra_stuff(item: @ast::item) -> @ast::item {\n         _ => fail ~\"not a struct\"\n     };\n \n-    @{\n+    @ast::item {\n         attrs: ~[], // Remove the attributes\n         node: node,\n         .. *item"}, {"sha": "cbcb790a6a88778fedf39cd9a48001a4787b1461", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -1517,9 +1517,14 @@ type struct_def = {\n  */\n #[auto_encode]\n #[auto_decode]\n-type item = {ident: ident, attrs: ~[attribute],\n-             id: node_id, node: item_,\n-             vis: visibility, span: span};\n+struct item {\n+    ident: ident,\n+    attrs: ~[attribute],\n+    id: node_id,\n+    node: item_,\n+    vis: visibility,\n+    span: span,\n+}\n \n #[auto_encode]\n #[auto_decode]"}, {"sha": "35b5f4be9a441be15ab6b1e04bd2c0f94810ea80", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -121,8 +121,10 @@ fn expand_auto_encode(\n     }\n \n     fn filter_attrs(item: @ast::item) -> @ast::item {\n-        @{attrs: item.attrs.filtered(|a| !is_auto_encode(a)),\n-          .. *item}\n+        @ast::item {\n+            attrs: item.attrs.filtered(|a| !is_auto_encode(a)),\n+            .. *item\n+        }\n     }\n \n     do vec::flat_map(in_items) |item| {\n@@ -185,8 +187,10 @@ fn expand_auto_decode(\n     }\n \n     fn filter_attrs(item: @ast::item) -> @ast::item {\n-        @{attrs: item.attrs.filtered(|a| !is_auto_decode(a)),\n-          .. *item}\n+        @ast::item {\n+            attrs: item.attrs.filtered(|a| !is_auto_decode(a)),\n+            .. *item\n+        }\n     }\n \n     do vec::flat_map(in_items) |item| {\n@@ -444,7 +448,7 @@ fn mk_impl(\n         tps.map(|tp| cx.ty_path(span, ~[tp.ident], ~[]))\n     );\n \n-    @{\n+    @ast::item {\n         // This is a new-style impl declaration.\n         // XXX: clownshoes\n         ident: parse::token::special_idents::clownshoes_extensions,"}, {"sha": "5b98868cd04bec3ffc2e6842665f0262d2beb8f5", "filename": "src/libsyntax/ext/deriving.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibsyntax%2Fext%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibsyntax%2Fext%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -111,7 +111,7 @@ fn expand_deriving(cx: ext_ctxt,\n }\n \n fn create_impl_item(cx: ext_ctxt, span: span, +item: item_) -> @item {\n-    @{\n+    @ast::item {\n         ident: clownshoes_extensions,\n         attrs: ~[],\n         id: cx.next_id(),"}, {"sha": "3bec9c6ea9912709734a5ff8e74442133edaca60", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -229,12 +229,12 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n             is_sugared_doc: false\n         });\n \n-        @{ident: name,\n-         attrs: ~[non_camel_case_attribute],\n-         id: self.next_id(),\n-         node: node,\n-         vis: ast::public,\n-         span: span}\n+        @ast::item { ident: name,\n+                     attrs: ~[non_camel_case_attribute],\n+                     id: self.next_id(),\n+                     node: node,\n+                     vis: ast::public,\n+                     span: span }\n     }\n \n     fn item_fn_poly(name: ident,"}, {"sha": "8dfefbe55f3f5c9e541f6d6f166f6ff293bdaf24", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -206,12 +206,12 @@ fn noop_fold_foreign_item(&&ni: @foreign_item, fld: ast_fold)\n fn noop_fold_item(&&i: @item, fld: ast_fold) -> Option<@item> {\n     let fold_attribute = |x| fold_attribute_(x, fld);\n \n-    return Some(@{ident: fld.fold_ident(i.ident),\n-               attrs: vec::map(i.attrs, |e| fold_attribute(*e)),\n-               id: fld.new_id(i.id),\n-               node: fld.fold_item_underscore(i.node),\n-               vis: i.vis,\n-               span: fld.new_span(i.span)});\n+    Some(@ast::item { ident: fld.fold_ident(i.ident),\n+                      attrs: i.attrs.map(|e| fold_attribute(*e)),\n+                      id: fld.new_id(i.id),\n+                      node: fld.fold_item_underscore(i.node),\n+                      vis: i.vis,\n+                      span: fld.new_span(i.span) })\n }\n \n fn noop_fold_struct_field(&&sf: @struct_field, fld: ast_fold)"}, {"sha": "b0aa96f2222d22cce5856e771879c20a516fbbd4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a113bfa2702b415e38f3168d5c95ee1d93718/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=530a113bfa2702b415e38f3168d5c95ee1d93718", "patch": "@@ -2621,12 +2621,12 @@ impl Parser {\n     fn mk_item(+lo: BytePos, +hi: BytePos, +ident: ident,\n                +node: item_, vis: visibility,\n                +attrs: ~[attribute]) -> @item {\n-        return @{ident: ident,\n-              attrs: attrs,\n-              id: self.get_id(),\n-              node: node,\n-              vis: vis,\n-              span: mk_sp(lo, hi)};\n+        @ast::item { ident: ident,\n+                     attrs: attrs,\n+                     id: self.get_id(),\n+                     node: node,\n+                     vis: vis,\n+                     span: mk_sp(lo, hi) }\n     }\n \n     fn parse_item_fn(purity: purity) -> item_info {"}]}