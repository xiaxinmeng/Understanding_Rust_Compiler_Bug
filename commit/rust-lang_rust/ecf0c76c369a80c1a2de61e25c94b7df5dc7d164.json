{"sha": "ecf0c76c369a80c1a2de61e25c94b7df5dc7d164", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZjBjNzZjMzY5YTgwYzFhMmRlNjFlMjVjOTRiN2RmNWRjN2QxNjQ=", "commit": {"author": {"name": "Ben Boeckel", "email": "mathstuf@gmail.com", "date": "2020-03-26T01:13:24Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-14T21:31:55Z"}, "message": "Fix suspicious_map false positives", "tree": {"sha": "9808234cbfa0fa90c64b47e708e592c9e9d06c87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9808234cbfa0fa90c64b47e708e592c9e9d06c87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecf0c76c369a80c1a2de61e25c94b7df5dc7d164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf0c76c369a80c1a2de61e25c94b7df5dc7d164", "html_url": "https://github.com/rust-lang/rust/commit/ecf0c76c369a80c1a2de61e25c94b7df5dc7d164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecf0c76c369a80c1a2de61e25c94b7df5dc7d164/comments", "author": {"login": "mathstuf", "id": 97253, "node_id": "MDQ6VXNlcjk3MjUz", "avatar_url": "https://avatars.githubusercontent.com/u/97253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mathstuf", "html_url": "https://github.com/mathstuf", "followers_url": "https://api.github.com/users/mathstuf/followers", "following_url": "https://api.github.com/users/mathstuf/following{/other_user}", "gists_url": "https://api.github.com/users/mathstuf/gists{/gist_id}", "starred_url": "https://api.github.com/users/mathstuf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mathstuf/subscriptions", "organizations_url": "https://api.github.com/users/mathstuf/orgs", "repos_url": "https://api.github.com/users/mathstuf/repos", "events_url": "https://api.github.com/users/mathstuf/events{/privacy}", "received_events_url": "https://api.github.com/users/mathstuf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52c25e9136f533c350fa1916b5bf5103f69c0f4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/52c25e9136f533c350fa1916b5bf5103f69c0f4d", "html_url": "https://github.com/rust-lang/rust/commit/52c25e9136f533c350fa1916b5bf5103f69c0f4d"}], "stats": {"total": 148, "additions": 132, "deletions": 16}, "files": [{"sha": "45e906cf46866d114dacdb8581ac790eba323e0d", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecf0c76c369a80c1a2de61e25c94b7df5dc7d164/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf0c76c369a80c1a2de61e25c94b7df5dc7d164/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=ecf0c76c369a80c1a2de61e25c94b7df5dc7d164", "patch": "@@ -1739,7 +1739,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 unnecessary_filter_map::check(cx, expr, arg_lists[0]);\n                 filter_map_identity::check(cx, expr, arg_lists[0], method_spans[0]);\n             },\n-            [\"count\", \"map\"] => suspicious_map::check(cx, expr),\n+            [\"count\", \"map\"] => suspicious_map::check(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"assume_init\"] => uninit_assumed_init::check(cx, &arg_lists[0][0], expr),\n             [\"unwrap_or\", arith @ (\"checked_add\" | \"checked_sub\" | \"checked_mul\")] => {\n                 manual_saturating_arithmetic::check(cx, expr, &arg_lists, &arith[\"checked_\".len()..])"}, {"sha": "0ffa71de30cc75f8e7f5c51fcbf3f69a45bad3ba", "filename": "clippy_lints/src/methods/suspicious_map.rs", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ecf0c76c369a80c1a2de61e25c94b7df5dc7d164/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf0c76c369a80c1a2de61e25c94b7df5dc7d164/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs?ref=ecf0c76c369a80c1a2de61e25c94b7df5dc7d164", "patch": "@@ -1,16 +1,41 @@\n-use crate::utils::span_lint_and_help;\n+use crate::utils::usage::mutated_variables;\n+use crate::utils::{expr_or_init, is_trait_method, span_lint_and_help};\n+use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::SUSPICIOUS_MAP;\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n-    span_lint_and_help(\n-        cx,\n-        SUSPICIOUS_MAP,\n-        expr.span,\n-        \"this call to `map()` won't have an effect on the call to `count()`\",\n-        None,\n-        \"make sure you did not confuse `map` with `filter` or `for_each`\",\n-    );\n+pub fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &hir::Expr<'_>,\n+    map_args: &[hir::Expr<'_>],\n+    count_args: &[hir::Expr<'_>],\n+) {\n+    if_chain! {\n+        if let [count_recv] = count_args;\n+        if let [_, map_arg] = map_args;\n+        if is_trait_method(cx, count_recv, sym::Iterator);\n+        let closure = expr_or_init(cx, map_arg);\n+        if let Some(body_id) = cx.tcx.hir().maybe_body_owned_by(closure.hir_id);\n+        let closure_body = cx.tcx.hir().body(body_id);\n+        if !cx.typeck_results().expr_ty(&closure_body.value).is_unit();\n+        then {\n+            if let Some(map_mutated_vars) = mutated_variables(&closure_body.value, cx) {\n+                // A variable is used mutably inside of the closure. Suppress the lint.\n+                if !map_mutated_vars.is_empty() {\n+                    return;\n+                }\n+            }\n+            span_lint_and_help(\n+                cx,\n+                SUSPICIOUS_MAP,\n+                expr.span,\n+                \"this call to `map()` won't have an effect on the call to `count()`\",\n+                None,\n+                \"make sure you did not confuse `map` with `filter` or `for_each`\",\n+            );\n+        }\n+    }\n }"}, {"sha": "98cdeae739f5805566bc0d58d88cd8e3eca922de", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 60, "deletions": 4, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ecf0c76c369a80c1a2de61e25c94b7df5dc7d164/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf0c76c369a80c1a2de61e25c94b7df5dc7d164/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=ecf0c76c369a80c1a2de61e25c94b7df5dc7d164", "patch": "@@ -62,10 +62,10 @@ use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    def, Arm, Block, Body, Constness, CrateItem, Expr, ExprKind, FnDecl, ForeignItem, GenericArgs, GenericParam, HirId,\n-    Impl, ImplItem, ImplItemKind, Item, ItemKind, LangItem, Lifetime, Local, MacroDef, MatchSource, Node, Param, Pat,\n-    PatKind, Path, PathSegment, QPath, Stmt, StructField, TraitItem, TraitItemKind, TraitRef, TyKind, Unsafety,\n-    Variant, Visibility,\n+    def, Arm, BindingAnnotation, Block, Body, Constness, CrateItem, Expr, ExprKind, FnDecl, ForeignItem, GenericArgs,\n+    GenericParam, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, LangItem, Lifetime, Local, MacroDef,\n+    MatchSource, Node, Param, Pat, PatKind, Path, PathSegment, QPath, Stmt, StructField, TraitItem, TraitItemKind,\n+    TraitRef, TyKind, Unsafety, Variant, Visibility,\n };\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n@@ -138,6 +138,62 @@ pub fn differing_macro_contexts(lhs: Span, rhs: Span) -> bool {\n     rhs.ctxt() != lhs.ctxt()\n }\n \n+/// If the given expression is a local binding, find the initializer expression.\n+/// If that initializer expression is another local binding, find its initializer again.\n+/// This process repeats as long as possible (but usually no more than once). Initializer\n+/// expressions with adjustments are ignored. If this is not desired, use [`find_binding_init`]\n+/// instead.\n+///\n+/// Examples:\n+/// ```ignore\n+/// let abc = 1;\n+/// //        ^ output\n+/// let def = abc;\n+/// dbg!(def)\n+/// //   ^^^ input\n+///\n+/// // or...\n+/// let abc = 1;\n+/// let def = abc + 2;\n+/// //        ^^^^^^^ output\n+/// dbg!(def)\n+/// //   ^^^ input\n+/// ```\n+pub fn expr_or_init<'a, 'b, 'tcx: 'b>(cx: &LateContext<'tcx>, mut expr: &'a Expr<'b>) -> &'a Expr<'b> {\n+    while let Some(init) = path_to_local(expr)\n+        .and_then(|id| find_binding_init(cx, id))\n+        .filter(|init| cx.typeck_results().expr_adjustments(init).is_empty())\n+    {\n+        expr = init;\n+    }\n+    expr\n+}\n+\n+/// Finds the initializer expression for a local binding. Returns `None` if the binding is mutable.\n+/// By only considering immutable bindings, we guarantee that the returned expression represents the\n+/// value of the binding wherever it is referenced.\n+///\n+/// Example:\n+/// ```ignore\n+/// let abc = 1;\n+/// //        ^ output\n+/// dbg!(abc)\n+/// //   ^^^ input\n+/// ```\n+pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<&'tcx Expr<'tcx>> {\n+    let hir = cx.tcx.hir();\n+    if_chain! {\n+        if let Some(Node::Binding(pat)) = hir.find(hir_id);\n+        if matches!(pat.kind, PatKind::Binding(BindingAnnotation::Unannotated, ..));\n+        let parent = hir.get_parent_node(hir_id);\n+        if let Some(Node::Local(local)) = hir.find(parent);\n+        then {\n+            return local.init;\n+        }\n+    }\n+    None\n+}\n+\n /// Returns `true` if the given `NodeId` is inside a constant context\n ///\n /// # Example"}, {"sha": "3a2a10cf09ea51082cacd662a474d28ef8cdd252", "filename": "tests/ui/suspicious_map.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ecf0c76c369a80c1a2de61e25c94b7df5dc7d164/tests%2Fui%2Fsuspicious_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf0c76c369a80c1a2de61e25c94b7df5dc7d164/tests%2Fui%2Fsuspicious_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_map.rs?ref=ecf0c76c369a80c1a2de61e25c94b7df5dc7d164", "patch": "@@ -2,4 +2,31 @@\n \n fn main() {\n     let _ = (0..3).map(|x| x + 2).count();\n+\n+    let f = |x| x + 1;\n+    let _ = (0..3).map(f).count();\n+}\n+\n+fn negative() {\n+    // closure with side effects\n+    let mut sum = 0;\n+    let _ = (0..3).map(|x| sum += x).count();\n+\n+    // closure variable with side effects\n+    let ext_closure = |x| sum += x;\n+    let _ = (0..3).map(ext_closure).count();\n+\n+    // closure that returns unit\n+    let _ = (0..3)\n+        .map(|x| {\n+            // do nothing\n+        })\n+        .count();\n+\n+    // external function\n+    let _ = (0..3).map(do_something).count();\n+}\n+\n+fn do_something<T>(t: T) -> String {\n+    unimplemented!()\n }"}, {"sha": "8c3f36584a5bd1bcee836fdeeef230d59c140d04", "filename": "tests/ui/suspicious_map.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ecf0c76c369a80c1a2de61e25c94b7df5dc7d164/tests%2Fui%2Fsuspicious_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecf0c76c369a80c1a2de61e25c94b7df5dc7d164/tests%2Fui%2Fsuspicious_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_map.stderr?ref=ecf0c76c369a80c1a2de61e25c94b7df5dc7d164", "patch": "@@ -7,5 +7,13 @@ LL |     let _ = (0..3).map(|x| x + 2).count();\n    = note: `-D clippy::suspicious-map` implied by `-D warnings`\n    = help: make sure you did not confuse `map` with `filter` or `for_each`\n \n-error: aborting due to previous error\n+error: this call to `map()` won't have an effect on the call to `count()`\n+  --> $DIR/suspicious_map.rs:7:13\n+   |\n+LL |     let _ = (0..3).map(f).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: make sure you did not confuse `map` with `filter` or `for_each`\n+\n+error: aborting due to 2 previous errors\n "}]}