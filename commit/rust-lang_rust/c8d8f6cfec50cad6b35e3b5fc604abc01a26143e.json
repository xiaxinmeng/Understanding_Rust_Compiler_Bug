{"sha": "c8d8f6cfec50cad6b35e3b5fc604abc01a26143e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZDhmNmNmZWM1MGNhZDZiMzVlM2I1ZmM2MDRhYmMwMWEyNjE0M2U=", "commit": {"author": {"name": "Armin Ronacher", "email": "armin.ronacher@active-4.com", "date": "2013-02-18T22:48:18Z"}, "committer": {"name": "Armin Ronacher", "email": "armin.ronacher@active-4.com", "date": "2013-02-18T22:48:18Z"}, "message": "Refactored make_absolute into functionality on the Path", "tree": {"sha": "74dd499c39957457b78045076bfd72021b39a017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74dd499c39957457b78045076bfd72021b39a017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8d8f6cfec50cad6b35e3b5fc604abc01a26143e", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8d8f6cfec50cad6b35e3b5fc604abc01a26143e", "html_url": "https://github.com/rust-lang/rust/commit/c8d8f6cfec50cad6b35e3b5fc604abc01a26143e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8d8f6cfec50cad6b35e3b5fc604abc01a26143e/comments", "author": {"login": "mitsuhiko", "id": 7396, "node_id": "MDQ6VXNlcjczOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitsuhiko", "html_url": "https://github.com/mitsuhiko", "followers_url": "https://api.github.com/users/mitsuhiko/followers", "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}", "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions", "organizations_url": "https://api.github.com/users/mitsuhiko/orgs", "repos_url": "https://api.github.com/users/mitsuhiko/repos", "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}", "received_events_url": "https://api.github.com/users/mitsuhiko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitsuhiko", "id": 7396, "node_id": "MDQ6VXNlcjczOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitsuhiko", "html_url": "https://github.com/mitsuhiko", "followers_url": "https://api.github.com/users/mitsuhiko/followers", "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}", "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions", "organizations_url": "https://api.github.com/users/mitsuhiko/orgs", "repos_url": "https://api.github.com/users/mitsuhiko/repos", "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}", "received_events_url": "https://api.github.com/users/mitsuhiko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1171a214a633128bbbd067bd0e582f8b40172e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/1171a214a633128bbbd067bd0e582f8b40172e01", "html_url": "https://github.com/rust-lang/rust/commit/1171a214a633128bbbd067bd0e582f8b40172e01"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "8667efb746806cb6da9dea453e6edaaa83392790", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8d8f6cfec50cad6b35e3b5fc604abc01a26143e/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8d8f6cfec50cad6b35e3b5fc604abc01a26143e/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=c8d8f6cfec50cad6b35e3b5fc604abc01a26143e", "patch": "@@ -565,17 +565,13 @@ pub fn path_exists(p: &Path) -> bool {\n  *\n  * If the given path is relative, return it prepended with the current working\n  * directory. If the given path is already an absolute path, return it\n- * as is.\n+ * as is.  This is a shortcut for calling os::getcwd().unsafe_join(p)\n  */\n // NB: this is here rather than in path because it is a form of environment\n // querying; what it does depends on the process working directory, not just\n // the input paths.\n pub fn make_absolute(p: &Path) -> Path {\n-    if p.is_absolute {\n-        copy *p\n-    } else {\n-        getcwd().push_many(p.components)\n-    }\n+    getcwd().unsafe_join(p)\n }\n \n "}, {"sha": "46f8743ff15fdb690c924a85c15d1cce6989f20f", "filename": "src/libcore/path.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c8d8f6cfec50cad6b35e3b5fc604abc01a26143e/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8d8f6cfec50cad6b35e3b5fc604abc01a26143e/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=c8d8f6cfec50cad6b35e3b5fc604abc01a26143e", "patch": "@@ -64,6 +64,8 @@ pub trait GenericPath {\n     pure fn push_many((&[~str])) -> Self;\n     pure fn pop() -> Self;\n \n+    pure fn unsafe_join((&Self)) -> Self;\n+\n     pure fn normalize() -> Self;\n }\n \n@@ -485,6 +487,15 @@ impl GenericPath for PosixPath {\n         self.push_many(other.components)\n     }\n \n+    pure fn unsafe_join(other: &PosixPath) -> PosixPath {\n+        if other.is_absolute {\n+            PosixPath { is_absolute: true,\n+                        components: copy other.components }\n+        } else {\n+            self.push_rel(other)\n+        }\n+    }\n+\n     pure fn push_many(cs: &[~str]) -> PosixPath {\n         let mut v = copy self.components;\n         for cs.each |e| {\n@@ -685,6 +696,25 @@ impl GenericPath for WindowsPath {\n         self.push_many(other.components)\n     }\n \n+    pure fn unsafe_join(other: &WindowsPath) -> WindowsPath {\n+        if !other.is_absolute {\n+            self.push_rel(other)\n+        } else {\n+            WindowsPath {\n+                host: match other.host {\n+                    None => copy self.host,\n+                    Some(copy x) => Some(x)\n+                },\n+                device: match other.device {\n+                    None => copy self.device,\n+                    Some(copy x) => Some(x)\n+                },\n+                is_absolute: true,\n+                components: copy other.components\n+            }\n+        }\n+    }\n+\n     pure fn push_many(cs: &[~str]) -> WindowsPath {\n         let mut v = copy self.components;\n         for cs.each |e| {"}]}