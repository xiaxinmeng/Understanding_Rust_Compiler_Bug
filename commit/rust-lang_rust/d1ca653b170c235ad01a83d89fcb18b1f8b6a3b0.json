{"sha": "d1ca653b170c235ad01a83d89fcb18b1f8b6a3b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxY2E2NTNiMTcwYzIzNWFkMDFhODNkODlmY2IxOGIxZjhiNmEzYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-14T00:28:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-14T00:28:27Z"}, "message": "Auto merge of #44484 - tirr-c:issue-44332, r=petrochenkov\n\nParse nested closure with two consecutive parameter lists properly\n\nThis is a followup of #44332.\n\n---\n\nCurrently, in nightly, this does not compile:\n\n```rust\nfn main() {\n    let f = |_||x, y| x+y;\n    println!(\"{}\", f(())(1, 2)); // should print 3\n}\n```\n\n`|_||x, y| x+y` should be parsed as `|_| (|x, y| x+y)`, but the parser didn't accept `||` between `_` and `x`. This patch fixes the problem.\n\nr? @petrochenkov", "tree": {"sha": "8164bdb3d77369f108c1f02b997ae656cfb1e9a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8164bdb3d77369f108c1f02b997ae656cfb1e9a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1ca653b170c235ad01a83d89fcb18b1f8b6a3b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ca653b170c235ad01a83d89fcb18b1f8b6a3b0", "html_url": "https://github.com/rust-lang/rust/commit/d1ca653b170c235ad01a83d89fcb18b1f8b6a3b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1ca653b170c235ad01a83d89fcb18b1f8b6a3b0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94211416bcde4d1049f241b6c95594e28c8865e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/94211416bcde4d1049f241b6c95594e28c8865e6", "html_url": "https://github.com/rust-lang/rust/commit/94211416bcde4d1049f241b6c95594e28c8865e6"}, {"sha": "31cf11a157242184a11cc2a05f3eef9bf5c74309", "url": "https://api.github.com/repos/rust-lang/rust/commits/31cf11a157242184a11cc2a05f3eef9bf5c74309", "html_url": "https://github.com/rust-lang/rust/commit/31cf11a157242184a11cc2a05f3eef9bf5c74309"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "cd1a7e7b794ba16578b910363f981734eebb08ef", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d1ca653b170c235ad01a83d89fcb18b1f8b6a3b0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ca653b170c235ad01a83d89fcb18b1f8b6a3b0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d1ca653b170c235ad01a83d89fcb18b1f8b6a3b0", "patch": "@@ -481,6 +481,12 @@ fn dummy_arg(span: Span) -> Arg {\n     Arg { ty: P(ty), pat: pat, id: ast::DUMMY_NODE_ID }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+enum TokenExpectType {\n+    Expect,\n+    NoExpect,\n+}\n+\n impl<'a> Parser<'a> {\n     pub fn new(sess: &'a ParseSess,\n                tokens: TokenStream,\n@@ -797,6 +803,23 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Expect and consume an `|`. If `||` is seen, replace it with a single\n+    /// `|` and continue. If an `|` is not seen, signal an error.\n+    fn expect_or(&mut self) -> PResult<'a, ()> {\n+        self.expected_tokens.push(TokenType::Token(token::BinOp(token::Or)));\n+        match self.token {\n+            token::BinOp(token::Or) => {\n+                self.bump();\n+                Ok(())\n+            }\n+            token::OrOr => {\n+                let span = self.span.with_lo(self.span.lo() + BytePos(1));\n+                Ok(self.bump_with(token::BinOp(token::Or), span))\n+            }\n+            _ => self.unexpected()\n+        }\n+    }\n+\n     pub fn expect_no_suffix(&self, sp: Span, kind: &str, suffix: Option<ast::Name>) {\n         match suffix {\n             None => {/* everything ok */}\n@@ -946,6 +969,7 @@ impl<'a> Parser<'a> {\n \n         self.parse_seq_to_before_tokens(kets,\n                                         SeqSep::none(),\n+                                        TokenExpectType::Expect,\n                                         |p| Ok(p.parse_token_tree()),\n                                         |mut e| handler.cancel(&mut e));\n     }\n@@ -975,13 +999,14 @@ impl<'a> Parser<'a> {\n                                          -> Vec<T>\n         where F: FnMut(&mut Parser<'a>) -> PResult<'a,  T>\n     {\n-        self.parse_seq_to_before_tokens(&[ket], sep, f, |mut e| e.emit())\n+        self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f, |mut e| e.emit())\n     }\n \n     // `fe` is an error handler.\n     fn parse_seq_to_before_tokens<T, F, Fe>(&mut self,\n                                             kets: &[&token::Token],\n                                             sep: SeqSep,\n+                                            expect: TokenExpectType,\n                                             mut f: F,\n                                             mut fe: Fe)\n                                             -> Vec<T>\n@@ -1005,7 +1030,12 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n             }\n-            if sep.trailing_sep_allowed && kets.iter().any(|k| self.check(k)) {\n+            if sep.trailing_sep_allowed && kets.iter().any(|k| {\n+                match expect {\n+                    TokenExpectType::Expect => self.check(k),\n+                    TokenExpectType::NoExpect => self.token == **k,\n+                }\n+            }) {\n                 break;\n             }\n \n@@ -4694,12 +4724,14 @@ impl<'a> Parser<'a> {\n                 Vec::new()\n             } else {\n                 self.expect(&token::BinOp(token::Or))?;\n-                let args = self.parse_seq_to_before_end(\n-                    &token::BinOp(token::Or),\n+                let args = self.parse_seq_to_before_tokens(\n+                    &[&token::BinOp(token::Or), &token::OrOr],\n                     SeqSep::trailing_allowed(token::Comma),\n-                    |p| p.parse_fn_block_arg()\n+                    TokenExpectType::NoExpect,\n+                    |p| p.parse_fn_block_arg(),\n+                    |mut e| e.emit()\n                 );\n-                self.expect(&token::BinOp(token::Or))?;\n+                self.expect_or()?;\n                 args\n             }\n         };"}, {"sha": "2c00f770cd91dce3a3cb8beb64b5a2908db9779f", "filename": "src/test/run-pass/closure-returning-closure.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d1ca653b170c235ad01a83d89fcb18b1f8b6a3b0/src%2Ftest%2Frun-pass%2Fclosure-returning-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ca653b170c235ad01a83d89fcb18b1f8b6a3b0/src%2Ftest%2Frun-pass%2Fclosure-returning-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-returning-closure.rs?ref=d1ca653b170c235ad01a83d89fcb18b1f8b6a3b0", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let f = |_||x, y| x+y;\n+    assert_eq!(f(())(1, 2), 3);\n+}"}]}