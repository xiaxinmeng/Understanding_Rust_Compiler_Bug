{"sha": "b984ef6797ff17faa2b1e0ebb54b78de1491e5fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ODRlZjY3OTdmZjE3ZmFhMmIxZTBlYmI1NGI3OGRlMTQ5MWU1ZmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-25T12:22:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-25T12:22:05Z"}, "message": "Auto merge of #77152 - vandenheuvel:update_chalk_further, r=jackh726\n\nUpdate chalk to 0.28.0", "tree": {"sha": "2812f06573f5567dcc49358359d16326cb98dccd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2812f06573f5567dcc49358359d16326cb98dccd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd", "html_url": "https://github.com/rust-lang/rust/commit/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "521d8d8a2236a239e3327336844ed5948857ea31", "url": "https://api.github.com/repos/rust-lang/rust/commits/521d8d8a2236a239e3327336844ed5948857ea31", "html_url": "https://github.com/rust-lang/rust/commit/521d8d8a2236a239e3327336844ed5948857ea31"}, {"sha": "51c781f6138ec541c9e3dff30e8d049027075e79", "url": "https://api.github.com/repos/rust-lang/rust/commits/51c781f6138ec541c9e3dff30e8d049027075e79", "html_url": "https://github.com/rust-lang/rust/commit/51c781f6138ec541c9e3dff30e8d049027075e79"}], "stats": {"total": 146, "additions": 104, "deletions": 42}, "files": [{"sha": "9a5ba74174948819bf901fa10bd3ff768d801dcd", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b984ef6797ff17faa2b1e0ebb54b78de1491e5fd", "patch": "@@ -427,9 +427,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.21.0\"\n+version = \"0.28.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c1df0dbb57d74b4acd20f20fa66ab2acd09776b79eaeb9d8f947b2f3e01c40bf\"\n+checksum = \"8c85b013e2dc1b46ac4a279f54e62e55556a8c4d859f7b7c4e340a9b1d013640\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -439,9 +439,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.21.0\"\n+version = \"0.28.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fb7c65a13f32f02aba8f1d9a37f206af615f77ac564624b81a4c593c6c1735b9\"\n+checksum = \"2a499f81860f6eadfe0c76c5bb606cd2df701939d5a596ed3724c7db04aec14b\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -452,19 +452,19 @@ dependencies = [\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.21.0\"\n+version = \"0.28.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"44361a25dbdb1dc428f56ad7a3c21ba9ca12f3225c26a47919ff6fcb10a583d4\"\n+checksum = \"2135d844688dc920e3ece3012c5d3d4f06e26986fe38bc041bc98f0e7a9f4e2b\"\n dependencies = [\n  \"chalk-derive\",\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.21.0\"\n+version = \"0.28.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a886da37a0dc457057d86f78f026f7a09c6d8088aa13f4f4127fdb8dc80119a3\"\n+checksum = \"bc69e4e94ffd4b39f1a865824b431bb82a7b4c8f14a0ba3d461cd86e56a590ac\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\","}, {"sha": "5136e2743cdb16443d16ec31e468e2fb7585b90f", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=b984ef6797ff17faa2b1e0ebb54b78de1491e5fd", "patch": "@@ -26,7 +26,7 @@ rustc_index = { path = \"../rustc_index\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-chalk-ir = \"0.21.0\"\n+chalk-ir = \"0.28.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"0.7.1\"\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "369d003eb22f7543130082320484dba9c0947545", "filename": "compiler/rustc_traits/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd/compiler%2Frustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd/compiler%2Frustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2FCargo.toml?ref=b984ef6797ff17faa2b1e0ebb54b78de1491e5fd", "patch": "@@ -12,9 +12,9 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-chalk-ir = \"0.21.0\"\n-chalk-solve = \"0.21.0\"\n-chalk-engine = \"0.21.0\"\n+chalk-ir = \"0.28.0\"\n+chalk-solve = \"0.28.0\"\n+chalk-engine = \"0.28.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }"}, {"sha": "828ee6dea625689fa8c38de116c9af1fc886d214", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 74, "deletions": 22, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=b984ef6797ff17faa2b1e0ebb54b78de1491e5fd", "patch": "@@ -11,14 +11,14 @@ use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::{self, AssocItemContainer, AssocKind, TyCtxt, TypeFoldable};\n \n use rustc_hir::def_id::DefId;\n-use rustc_hir::Unsafety;\n \n use rustc_span::symbol::sym;\n \n use std::fmt;\n use std::sync::Arc;\n \n use crate::chalk::lowering::{self, LowerInto};\n+use rustc_ast::ast;\n \n pub struct RustIrDatabase<'tcx> {\n     pub(crate) interner: RustInterner<'tcx>,\n@@ -247,12 +247,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         };\n         Arc::new(chalk_solve::rust_ir::FnDefDatum {\n             id: fn_def_id,\n-            abi: sig.abi(),\n-            safety: match sig.unsafety() {\n-                Unsafety::Normal => chalk_ir::Safety::Safe,\n-                Unsafety::Unsafe => chalk_ir::Safety::Unsafe,\n-            },\n-            variadic: sig.c_variadic(),\n+            sig: sig.lower_into(&self.interner),\n             binders: chalk_ir::Binders::new(binders, bound),\n         })\n     }\n@@ -327,21 +322,75 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     fn impl_provided_for(\n         &self,\n         auto_trait_id: chalk_ir::TraitId<RustInterner<'tcx>>,\n-        adt_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n+        app_ty: &chalk_ir::ApplicationTy<RustInterner<'tcx>>,\n     ) -> bool {\n+        use chalk_ir::Scalar::*;\n+        use chalk_ir::TypeName::*;\n+\n         let trait_def_id = auto_trait_id.0;\n-        let adt_def = adt_id.0;\n         let all_impls = self.interner.tcx.all_impls(trait_def_id);\n         for impl_def_id in all_impls {\n             let trait_ref = self.interner.tcx.impl_trait_ref(impl_def_id).unwrap();\n             let self_ty = trait_ref.self_ty();\n-            match *self_ty.kind() {\n-                ty::Adt(impl_adt_def, _) => {\n-                    if impl_adt_def == adt_def {\n-                        return true;\n+            let provides = match (self_ty.kind(), app_ty.name) {\n+                (&ty::Adt(impl_adt_def, ..), Adt(id)) => impl_adt_def.did == id.0.did,\n+                (_, AssociatedType(_ty_id)) => {\n+                    // FIXME(chalk): See https://github.com/rust-lang/rust/pull/77152#discussion_r494484774\n+                    false\n+                }\n+                (ty::Bool, Scalar(Bool)) => true,\n+                (ty::Char, Scalar(Char)) => true,\n+                (ty::Int(ty1), Scalar(Int(ty2))) => match (ty1, ty2) {\n+                    (ast::IntTy::Isize, chalk_ir::IntTy::Isize)\n+                    | (ast::IntTy::I8, chalk_ir::IntTy::I8)\n+                    | (ast::IntTy::I16, chalk_ir::IntTy::I16)\n+                    | (ast::IntTy::I32, chalk_ir::IntTy::I32)\n+                    | (ast::IntTy::I64, chalk_ir::IntTy::I64)\n+                    | (ast::IntTy::I128, chalk_ir::IntTy::I128) => true,\n+                    _ => false,\n+                },\n+                (ty::Uint(ty1), Scalar(Uint(ty2))) => match (ty1, ty2) {\n+                    (ast::UintTy::Usize, chalk_ir::UintTy::Usize)\n+                    | (ast::UintTy::U8, chalk_ir::UintTy::U8)\n+                    | (ast::UintTy::U16, chalk_ir::UintTy::U16)\n+                    | (ast::UintTy::U32, chalk_ir::UintTy::U32)\n+                    | (ast::UintTy::U64, chalk_ir::UintTy::U64)\n+                    | (ast::UintTy::U128, chalk_ir::UintTy::U128) => true,\n+                    _ => false,\n+                },\n+                (ty::Float(ty1), Scalar(Float(ty2))) => match (ty1, ty2) {\n+                    (ast::FloatTy::F32, chalk_ir::FloatTy::F32)\n+                    | (ast::FloatTy::F64, chalk_ir::FloatTy::F64) => true,\n+                    _ => false,\n+                },\n+                (&ty::Tuple(..), Tuple(..)) => true,\n+                (&ty::Array(..), Array) => true,\n+                (&ty::Slice(..), Slice) => true,\n+                (&ty::RawPtr(type_and_mut), Raw(mutability)) => {\n+                    match (type_and_mut.mutbl, mutability) {\n+                        (ast::Mutability::Mut, chalk_ir::Mutability::Mut) => true,\n+                        (ast::Mutability::Mut, chalk_ir::Mutability::Not) => false,\n+                        (ast::Mutability::Not, chalk_ir::Mutability::Mut) => false,\n+                        (ast::Mutability::Not, chalk_ir::Mutability::Not) => true,\n                     }\n                 }\n-                _ => {}\n+                (&ty::Ref(.., mutability1), Ref(mutability2)) => match (mutability1, mutability2) {\n+                    (ast::Mutability::Mut, chalk_ir::Mutability::Mut) => true,\n+                    (ast::Mutability::Mut, chalk_ir::Mutability::Not) => false,\n+                    (ast::Mutability::Not, chalk_ir::Mutability::Mut) => false,\n+                    (ast::Mutability::Not, chalk_ir::Mutability::Not) => true,\n+                },\n+                (&ty::Opaque(def_id, ..), OpaqueType(opaque_ty_id)) => def_id == opaque_ty_id.0,\n+                (&ty::FnDef(def_id, ..), FnDef(fn_def_id)) => def_id == fn_def_id.0,\n+                (&ty::Str, Str) => true,\n+                (&ty::Never, Never) => true,\n+                (&ty::Closure(def_id, ..), Closure(closure_id)) => def_id == closure_id.0,\n+                (&ty::Foreign(def_id), Foreign(foreign_def_id)) => def_id == foreign_def_id.0,\n+                (&ty::Error(..), Error) => false,\n+                _ => false,\n+            };\n+            if provides {\n+                return true;\n             }\n         }\n         false\n@@ -416,15 +465,18 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         well_known_trait: chalk_solve::rust_ir::WellKnownTrait,\n     ) -> Option<chalk_ir::TraitId<RustInterner<'tcx>>> {\n         use chalk_solve::rust_ir::WellKnownTrait::*;\n+        let lang_items = self.interner.tcx.lang_items();\n         let def_id = match well_known_trait {\n-            Sized => self.interner.tcx.lang_items().sized_trait(),\n-            Copy => self.interner.tcx.lang_items().copy_trait(),\n-            Clone => self.interner.tcx.lang_items().clone_trait(),\n-            Drop => self.interner.tcx.lang_items().drop_trait(),\n-            Fn => self.interner.tcx.lang_items().fn_trait(),\n-            FnMut => self.interner.tcx.lang_items().fn_mut_trait(),\n-            FnOnce => self.interner.tcx.lang_items().fn_once_trait(),\n-            Unsize => self.interner.tcx.lang_items().unsize_trait(),\n+            Sized => lang_items.sized_trait(),\n+            Copy => lang_items.copy_trait(),\n+            Clone => lang_items.clone_trait(),\n+            Drop => lang_items.drop_trait(),\n+            Fn => lang_items.fn_trait(),\n+            FnMut => lang_items.fn_mut_trait(),\n+            FnOnce => lang_items.fn_once_trait(),\n+            Unsize => lang_items.unsize_trait(),\n+            Unpin => lang_items.unpin_trait(),\n+            CoerceUnsized => lang_items.coerce_unsized_trait(),\n         };\n         def_id.map(chalk_ir::TraitId)\n     }"}, {"sha": "1e1841a57f8185cedd311d126d56449961a1a5ab", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b984ef6797ff17faa2b1e0ebb54b78de1491e5fd/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=b984ef6797ff17faa2b1e0ebb54b78de1491e5fd", "patch": "@@ -39,6 +39,8 @@ use rustc_middle::ty::{\n };\n use rustc_span::def_id::DefId;\n \n+use chalk_ir::{FnSig, ForeignDefId};\n+use rustc_hir::Unsafety;\n use std::collections::btree_map::{BTreeMap, Entry};\n \n /// Essentially an `Into` with a `&RustInterner` parameter\n@@ -269,8 +271,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 ast::FloatTy::F64 => float(chalk_ir::FloatTy::F64),\n             },\n             Adt(def, substs) => apply(struct_ty(def.did), substs.lower_into(interner)),\n-            // FIXME(chalk): lower Foreign\n-            Foreign(def_id) => apply(chalk_ir::TypeName::FnDef(chalk_ir::FnDefId(def_id)), empty()),\n+            Foreign(def_id) => apply(chalk_ir::TypeName::Foreign(ForeignDefId(def_id)), empty()),\n             Str => apply(chalk_ir::TypeName::Str, empty()),\n             Array(ty, len) => {\n                 let value = match len.val {\n@@ -340,18 +341,13 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                     collect_bound_vars(interner, interner.tcx, &sig.inputs_and_output());\n                 TyData::Function(chalk_ir::FnPointer {\n                     num_binders: binders.len(interner),\n+                    sig: sig.lower_into(interner),\n                     substitution: chalk_ir::Substitution::from_iter(\n                         interner,\n                         inputs_and_outputs.iter().map(|ty| {\n                             chalk_ir::GenericArgData::Ty(ty.lower_into(interner)).intern(interner)\n                         }),\n                     ),\n-                    abi: sig.abi(),\n-                    safety: match sig.unsafety() {\n-                        rustc_hir::Unsafety::Normal => chalk_ir::Safety::Safe,\n-                        rustc_hir::Unsafety::Unsafe => chalk_ir::Safety::Unsafe,\n-                    },\n-                    variadic: sig.c_variadic(),\n                 })\n                 .intern(interner)\n             }\n@@ -480,6 +476,7 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n                     substs: application_ty.substitution.lower_into(interner),\n                     item_def_id: assoc_ty.0,\n                 }),\n+                chalk_ir::TypeName::Foreign(def_id) => ty::Foreign(def_id.0),\n                 chalk_ir::TypeName::Error => unimplemented!(),\n             },\n             TyData::Placeholder(placeholder) => ty::Placeholder(ty::Placeholder {\n@@ -718,6 +715,19 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n     }\n }\n \n+impl<'tcx> LowerInto<'tcx, chalk_ir::FnSig<RustInterner<'tcx>>> for ty::Binder<ty::FnSig<'tcx>> {\n+    fn lower_into(self, _interner: &RustInterner<'_>) -> FnSig<RustInterner<'tcx>> {\n+        chalk_ir::FnSig {\n+            abi: self.abi(),\n+            safety: match self.unsafety() {\n+                Unsafety::Normal => chalk_ir::Safety::Safe,\n+                Unsafety::Unsafe => chalk_ir::Safety::Unsafe,\n+            },\n+            variadic: self.c_variadic(),\n+        }\n+    }\n+}\n+\n /// To collect bound vars, we have to do two passes. In the first pass, we\n /// collect all `BoundRegion`s and `ty::Bound`s. In the second pass, we then\n /// replace `BrNamed` into `BrAnon`. The two separate passes are important,"}]}