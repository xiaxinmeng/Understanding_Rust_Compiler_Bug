{"sha": "7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a", "node_id": "C_kwDOAAsO6NoAKDdlZTNmZDJlZGNlNzk0YTQ1MmY5YjkxZGQyY2I4ZmU4ZjViYzE1MWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-11T20:08:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-11T20:08:07Z"}, "message": "Rollup merge of #106620 - estebank:issue-82051, r=davidtwco\n\nDetect struct literal needing parentheses\n\nFix #82051.", "tree": {"sha": "02cb97bec9ae9941481353f692f995294f6c83d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02cb97bec9ae9941481353f692f995294f6c83d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvxcnCRBK7hj4Ov3rIwAARIUIAGZWehsDJZsDjNcc3taYaRJD\npyw7Spjkz6ne4RWv+diedcfmAL4R4vqCp42jCGmxvN8hU/hhu6rvl76007BNCUr3\nNQu6VCaHXKgGQ70Hjox/yqRuFjN68ZAnq602J5LpXOCSipNJm5gUnf7ie+3U1II5\nofiYJhQjuc84FwxdgOqyyco6abeW5/Xlqs5PNpy9Hdnu5XbEPlj7dXzSeiAXxQXv\nT1At8kiof/CxE6QdRC14WLppEwGa3E6G2ONCSlcWZVEQX7au73sen78PqzYnMuQz\ndHPC+ILE6pEArqSDLQzy/Gq17kTcDEVUmdISE6q+Ldkow+GaniYHlsdGQyk7GhU=\n=lb12\n-----END PGP SIGNATURE-----\n", "payload": "tree 02cb97bec9ae9941481353f692f995294f6c83d8\nparent ef4046e4f3932991971cdb64915172899532aece\nparent 531193853142a2564f1c667c9e8ca96c524a380b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673467687 +0100\ncommitter GitHub <noreply@github.com> 1673467687 +0100\n\nRollup merge of #106620 - estebank:issue-82051, r=davidtwco\n\nDetect struct literal needing parentheses\n\nFix #82051.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a", "html_url": "https://github.com/rust-lang/rust/commit/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef4046e4f3932991971cdb64915172899532aece", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4046e4f3932991971cdb64915172899532aece", "html_url": "https://github.com/rust-lang/rust/commit/ef4046e4f3932991971cdb64915172899532aece"}, {"sha": "531193853142a2564f1c667c9e8ca96c524a380b", "url": "https://api.github.com/repos/rust-lang/rust/commits/531193853142a2564f1c667c9e8ca96c524a380b", "html_url": "https://github.com/rust-lang/rust/commit/531193853142a2564f1c667c9e8ca96c524a380b"}], "stats": {"total": 101, "additions": 86, "deletions": 15}, "files": [{"sha": "f3f00fff230a0a08eccd1db78e2b1659733d8828", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a", "patch": "@@ -2,6 +2,10 @@ parse_struct_literal_body_without_path =\n     struct literal body without path\n     .suggestion = you might have forgotten to add the struct literal inside the block\n \n+parse_struct_literal_needing_parens =\n+    invalid struct literal\n+    .suggestion = you might need to surround the struct literal in parentheses\n+\n parse_maybe_report_ambiguous_plus =\n     ambiguous `+` in a type\n     .suggestion = use parentheses to disambiguate"}, {"sha": "19eeb069a259880645e90bee5f7fa66d275554c5", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a", "patch": "@@ -970,6 +970,24 @@ pub(crate) struct StructLiteralBodyWithoutPathSugg {\n     pub after: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parse_struct_literal_needing_parens)]\n+pub(crate) struct StructLiteralNeedingParens {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub sugg: StructLiteralNeedingParensSugg,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n+pub(crate) struct StructLiteralNeedingParensSugg {\n+    #[suggestion_part(code = \"(\")]\n+    pub before: Span,\n+    #[suggestion_part(code = \")\")]\n+    pub after: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parse_unmatched_angle_brackets)]\n pub(crate) struct UnmatchedAngleBrackets {"}, {"sha": "4c918c6702ed9b19f3a2ed08af51506c50e17666", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a", "patch": "@@ -12,9 +12,10 @@ use crate::errors::{\n     IncorrectAwait, IncorrectSemicolon, IncorrectUseOfAwait, ParenthesesInForHead,\n     ParenthesesInForHeadSugg, PatternMethodParamWithoutBody, QuestionMarkInType,\n     QuestionMarkInTypeSugg, SelfParamNotFirst, StructLiteralBodyWithoutPath,\n-    StructLiteralBodyWithoutPathSugg, SuggEscapeToUseAsIdentifier, SuggRemoveComma,\n-    UnexpectedConstInGenericParam, UnexpectedConstParamDeclaration,\n-    UnexpectedConstParamDeclarationSugg, UnmatchedAngleBrackets, UseEqInstead,\n+    StructLiteralBodyWithoutPathSugg, StructLiteralNeedingParens, StructLiteralNeedingParensSugg,\n+    SuggEscapeToUseAsIdentifier, SuggRemoveComma, UnexpectedConstInGenericParam,\n+    UnexpectedConstParamDeclaration, UnexpectedConstParamDeclarationSugg, UnmatchedAngleBrackets,\n+    UseEqInstead,\n };\n \n use crate::lexer::UnmatchedBrace;\n@@ -623,12 +624,15 @@ impl<'a> Parser<'a> {\n         &mut self,\n         lo: Span,\n         s: BlockCheckMode,\n+        maybe_struct_name: token::Token,\n+        can_be_struct_literal: bool,\n     ) -> Option<PResult<'a, P<Block>>> {\n         if self.token.is_ident() && self.look_ahead(1, |t| t == &token::Colon) {\n             // We might be having a struct literal where people forgot to include the path:\n             // fn foo() -> Foo {\n             //     field: value,\n             // }\n+            info!(?maybe_struct_name, ?self.token);\n             let mut snapshot = self.create_snapshot_for_diagnostic();\n             let path = Path {\n                 segments: ThinVec::new(),\n@@ -648,21 +652,32 @@ impl<'a> Parser<'a> {\n                     //     field: value,\n                     // } }\n                     err.delay_as_bug();\n-                    self.sess.emit_err(StructLiteralBodyWithoutPath {\n-                        span: expr.span,\n-                        sugg: StructLiteralBodyWithoutPathSugg {\n-                            before: expr.span.shrink_to_lo(),\n-                            after: expr.span.shrink_to_hi(),\n-                        },\n-                    });\n                     self.restore_snapshot(snapshot);\n                     let mut tail = self.mk_block(\n                         vec![self.mk_stmt_err(expr.span)],\n                         s,\n                         lo.to(self.prev_token.span),\n                     );\n                     tail.could_be_bare_literal = true;\n-                    Ok(tail)\n+                    if maybe_struct_name.is_ident() && can_be_struct_literal {\n+                        // Account for `if Example { a: one(), }.is_pos() {}`.\n+                        Err(self.sess.create_err(StructLiteralNeedingParens {\n+                            span: maybe_struct_name.span.to(expr.span),\n+                            sugg: StructLiteralNeedingParensSugg {\n+                                before: maybe_struct_name.span.shrink_to_lo(),\n+                                after: expr.span.shrink_to_hi(),\n+                            },\n+                        }))\n+                    } else {\n+                        self.sess.emit_err(StructLiteralBodyWithoutPath {\n+                            span: expr.span,\n+                            sugg: StructLiteralBodyWithoutPathSugg {\n+                                before: expr.span.shrink_to_lo(),\n+                                after: expr.span.shrink_to_hi(),\n+                            },\n+                        });\n+                        Ok(tail)\n+                    }\n                 }\n                 (Err(err), Ok(tail)) => {\n                     // We have a block tail that contains a somehow valid type ascription expr."}, {"sha": "f5093fb02a8750b4a198a0cdfd9e485193cfcda1", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a", "patch": "@@ -2039,7 +2039,7 @@ impl<'a> Parser<'a> {\n             });\n         }\n \n-        let (attrs, blk) = self.parse_block_common(lo, blk_mode)?;\n+        let (attrs, blk) = self.parse_block_common(lo, blk_mode, true)?;\n         Ok(self.mk_expr_with_attrs(blk.span, ExprKind::Block(blk, opt_label), attrs))\n     }\n "}, {"sha": "a251e3ded2f56b081c2d24fa0878ec8c3595da49", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a", "patch": "@@ -2214,7 +2214,8 @@ impl<'a> Parser<'a> {\n             *sig_hi = self.prev_token.span;\n             (AttrVec::new(), None)\n         } else if self.check(&token::OpenDelim(Delimiter::Brace)) || self.token.is_whole_block() {\n-            self.parse_inner_attrs_and_block().map(|(attrs, body)| (attrs, Some(body)))?\n+            self.parse_block_common(self.token.span, BlockCheckMode::Default, false)\n+                .map(|(attrs, body)| (attrs, Some(body)))?\n         } else if self.token.kind == token::Eq {\n             // Recover `fn foo() = $expr;`.\n             self.bump(); // `=`"}, {"sha": "1e5c2834960352c03082ef1e40994755af26dff4", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a", "patch": "@@ -498,24 +498,31 @@ impl<'a> Parser<'a> {\n \n     /// Parses a block. Inner attributes are allowed.\n     pub(super) fn parse_inner_attrs_and_block(&mut self) -> PResult<'a, (AttrVec, P<Block>)> {\n-        self.parse_block_common(self.token.span, BlockCheckMode::Default)\n+        self.parse_block_common(self.token.span, BlockCheckMode::Default, true)\n     }\n \n     /// Parses a block. Inner attributes are allowed.\n     pub(super) fn parse_block_common(\n         &mut self,\n         lo: Span,\n         blk_mode: BlockCheckMode,\n+        can_be_struct_literal: bool,\n     ) -> PResult<'a, (AttrVec, P<Block>)> {\n         maybe_whole!(self, NtBlock, |x| (AttrVec::new(), x));\n \n+        let maybe_ident = self.prev_token.clone();\n         self.maybe_recover_unexpected_block_label();\n         if !self.eat(&token::OpenDelim(Delimiter::Brace)) {\n             return self.error_block_no_opening_brace();\n         }\n \n         let attrs = self.parse_inner_attributes()?;\n-        let tail = match self.maybe_suggest_struct_literal(lo, blk_mode) {\n+        let tail = match self.maybe_suggest_struct_literal(\n+            lo,\n+            blk_mode,\n+            maybe_ident,\n+            can_be_struct_literal,\n+        ) {\n             Some(tail) => tail?,\n             None => self.parse_block_tail(lo, blk_mode, AttemptLocalParseRecovery::Yes)?,\n         };"}, {"sha": "8be7c9ee8ac3acbc5e9c1ceae280e026fe897198", "filename": "tests/ui/parser/method-call-on-struct-literal-in-if-condition.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.rs?ref=7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a", "patch": "@@ -0,0 +1,13 @@\n+pub struct Example { a: i32 }\n+\n+impl Example {\n+    fn is_pos(&self) -> bool { self.a > 0 }\n+}\n+\n+fn one() -> i32 { 1 }\n+\n+fn main() {\n+    if Example { a: one(), }.is_pos() { //~ ERROR invalid struct literal\n+        println!(\"Positive!\");\n+    }\n+}"}, {"sha": "7fd7ffc94a513d20401223fdb0a007fcc375a568", "filename": "tests/ui/parser/method-call-on-struct-literal-in-if-condition.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.stderr?ref=7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a", "patch": "@@ -0,0 +1,13 @@\n+error: invalid struct literal\n+  --> $DIR/method-call-on-struct-literal-in-if-condition.rs:10:8\n+   |\n+LL |     if Example { a: one(), }.is_pos() {\n+   |        ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you might need to surround the struct literal in parentheses\n+   |\n+LL |     if (Example { a: one(), }).is_pos() {\n+   |        +                     +\n+\n+error: aborting due to previous error\n+"}]}