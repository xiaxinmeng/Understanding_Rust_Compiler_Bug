{"sha": "38112321908e824a56943f8e2a461510206e2409", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MTEyMzIxOTA4ZTgyNGE1Njk0M2Y4ZTJhNDYxNTEwMjA2ZTI0MDk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-23T01:53:50Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-27T23:28:20Z"}, "message": "review comments", "tree": {"sha": "628ab429038466a7f6cfd5f393e3db91c0902271", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/628ab429038466a7f6cfd5f393e3db91c0902271"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38112321908e824a56943f8e2a461510206e2409", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38112321908e824a56943f8e2a461510206e2409", "html_url": "https://github.com/rust-lang/rust/commit/38112321908e824a56943f8e2a461510206e2409", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38112321908e824a56943f8e2a461510206e2409/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb0f4d51df3be5b149ec032d62e9431ba4faf038", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb0f4d51df3be5b149ec032d62e9431ba4faf038", "html_url": "https://github.com/rust-lang/rust/commit/eb0f4d51df3be5b149ec032d62e9431ba4faf038"}], "stats": {"total": 70, "additions": 24, "deletions": 46}, "files": [{"sha": "7ad7e8897df38e3b0bde9d8ed93b2905ff2b4c77", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 18, "deletions": 40, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/38112321908e824a56943f8e2a461510206e2409/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38112321908e824a56943f8e2a461510206e2409/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=38112321908e824a56943f8e2a461510206e2409", "patch": "@@ -63,78 +63,56 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         err.span_label(trait_sp, &format!(\"expected {:?}\", expected));\n         let trait_fn_sig = tcx.fn_sig(trait_def_id);\n \n+        // Check the `trait`'s method's output to look for type parameters that might have\n+        // unconstrained lifetimes. If the method returns a type parameter and the `impl` has a\n+        // borrow as the type parameter being implemented, the lifetimes will not match because\n+        // a new lifetime is being introduced in the `impl` that is not present in the `trait`.\n+        // Because this is confusing as hell the first time you see it, we give a short message\n+        // explaining the situation and proposing constraining the type param with a named lifetime\n+        // so that the `impl` will have one to tie them together.\n         struct AssocTypeFinder(FxHashSet<ty::ParamTy>);\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for AssocTypeFinder {\n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n                 debug!(\"assoc type finder ty {:?} {:?}\", ty, ty.kind);\n-                match ty.kind {\n-                    ty::Param(param) => {\n-                        self.0.insert(param);\n-                    }\n-                    _ => {}\n+                if let ty::Param(param) = ty.kind {\n+                    self.0.insert(param);\n                 }\n                 ty.super_visit_with(self)\n             }\n         }\n         let mut visitor = AssocTypeFinder(FxHashSet::default());\n         trait_fn_sig.output().visit_with(&mut visitor);\n-\n         if let Some(id) = tcx.hir().as_local_hir_id(trait_def_id) {\n             let parent_id = tcx.hir().get_parent_item(id);\n             let trait_item = tcx.hir().expect_item(parent_id);\n             if let hir::ItemKind::Trait(_, _, generics, _, _) = &trait_item.kind {\n                 for param_ty in visitor.0 {\n                     if let Some(generic) = generics.get_named(param_ty.name) {\n                         err.span_label(generic.span, &format!(\n-                            \"in order for `impl` items to be able to implement the method, this \\\n-                             type parameter might need a lifetime restriction like `{}: 'a`\",\n+                            \"for `impl` items to implement the method, this type parameter might \\\n+                             need a lifetime restriction like `{}: 'a`\",\n                             param_ty.name,\n                         ));\n                     }\n                 }\n             }\n         }\n \n-        struct EarlyBoundRegionHighlighter(FxHashSet<DefId>);\n-        impl<'tcx> ty::fold::TypeVisitor<'tcx> for EarlyBoundRegionHighlighter {\n-            fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n-                match *r {\n-                    ty::ReFree(free) => {\n-                        self.0.insert(free.scope);\n-                    }\n-                    ty::ReEarlyBound(bound) => {\n-                        self.0.insert(bound.def_id);\n-                    }\n-                    _ => {}\n-                }\n-                r.super_visit_with(self)\n-            }\n-        }\n-\n-        let mut visitor = EarlyBoundRegionHighlighter(FxHashSet::default());\n-        expected.visit_with(&mut visitor);\n-\n-        let note = !visitor.0.is_empty();\n-\n-        if let Some((expected, found)) = self\n-            .tcx()\n+        if let Some((expected, found)) = tcx\n             .infer_ctxt()\n             .enter(|infcx| infcx.expected_found_str_ty(&ExpectedFound { expected, found }))\n         {\n+            // Highlighted the differences when showing the \"expected/found\" note.\n             err.note_expected_found(&\"\", expected, &\"\", found);\n         } else {\n             // This fallback shouldn't be necessary, but let's keep it in just in case.\n             err.note(&format!(\"expected `{:?}`\\n   found `{:?}`\", expected, found));\n         }\n-        if note {\n-            err.note(\n-                \"the lifetime requirements from the `trait` could not be fulfilled by the `impl`\",\n-            );\n-            err.help(\n-                \"verify the lifetime relationships in the `trait` and `impl` between the \\\n-                 `self` argument, the other inputs and its output\",\n-            );\n-        }\n+        err.note(\"the lifetime requirements from the `trait` could not be satisfied by the `impl`\");\n+        err.help(\n+            \"verify the lifetime relationships in the `trait` and `impl` between the `self` \\\n+             argument, the other inputs and its output\",\n+        );\n         err.emit();\n     }\n }"}, {"sha": "05413c3a2923a6e8ec3d9ab681fd1482cf64a345", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38112321908e824a56943f8e2a461510206e2409/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38112321908e824a56943f8e2a461510206e2409/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=38112321908e824a56943f8e2a461510206e2409", "patch": "@@ -11,7 +11,7 @@ LL |     fn deref(&self) -> &Self::Target;\n    |\n    = note: expected `fn(&Struct) -> &(dyn Trait + 'static)`\n               found `fn(&Struct) -> &dyn Trait`\n-   = note: the lifetime requirements from the `trait` could not be fulfilled by the `impl`\n+   = note: the lifetime requirements from the `trait` could not be satisfied by the `impl`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error: aborting due to previous error"}, {"sha": "c58f78b6719a11ae4bc4d6bb608ce4022122b495", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38112321908e824a56943f8e2a461510206e2409/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38112321908e824a56943f8e2a461510206e2409/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr?ref=38112321908e824a56943f8e2a461510206e2409", "patch": "@@ -9,7 +9,7 @@ LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n    |\n    = note: expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n               found `fn(&i32, &u32, &u32) -> &u32`\n-   = note: the lifetime requirements from the `trait` could not be fulfilled by the `impl`\n+   = note: the lifetime requirements from the `trait` could not be satisfied by the `impl`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error: aborting due to previous error"}, {"sha": "4dbd4ac6a852b02355ae17ec51509d0e98c9f8ef", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38112321908e824a56943f8e2a461510206e2409/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38112321908e824a56943f8e2a461510206e2409/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=38112321908e824a56943f8e2a461510206e2409", "patch": "@@ -9,7 +9,7 @@ LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n    |\n    = note: expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n               found `fn(&i32, &u32, &u32) -> &u32`\n-   = note: the lifetime requirements from the `trait` could not be fulfilled by the `impl`\n+   = note: the lifetime requirements from the `trait` could not be satisfied by the `impl`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error[E0623]: lifetime mismatch"}, {"sha": "0e56473c5b6ac5d990d4215e717089b6aa4e18d3", "filename": "src/test/ui/lifetimes/lifetime-mismatch-between-trait-and-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38112321908e824a56943f8e2a461510206e2409/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38112321908e824a56943f8e2a461510206e2409/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr?ref=38112321908e824a56943f8e2a461510206e2409", "patch": "@@ -9,7 +9,7 @@ LL |     fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n    |\n    = note: expected `fn(&i32, &'a i32) -> &'a i32`\n               found `fn(&i32, &i32) -> &i32`\n-   = note: the lifetime requirements from the `trait` could not be fulfilled by the `impl`\n+   = note: the lifetime requirements from the `trait` could not be satisfied by the `impl`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error: aborting due to previous error"}, {"sha": "724062b1a589f239e54e04daed015f3b26cddff9", "filename": "src/test/ui/traits/trait-param-without-lifetime-constraint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38112321908e824a56943f8e2a461510206e2409/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38112321908e824a56943f8e2a461510206e2409/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.stderr?ref=38112321908e824a56943f8e2a461510206e2409", "patch": "@@ -2,7 +2,7 @@ error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/trait-param-without-lifetime-constraint.rs:14:5\n    |\n LL | pub trait HaveRelationship<To> {\n-   |                            -- in order for `impl` items to be able to implement the method, this type parameter might need a lifetime restriction like `To: 'a`\n+   |                            -- for `impl` items to implement the method, this type parameter might need a lifetime restriction like `To: 'a`\n LL |     fn get_relation(&self) -> To;\n    |     ----------------------------- expected fn(&Article) -> &ProofReader\n ...\n@@ -11,7 +11,7 @@ LL |     fn get_relation(&self) -> &ProofReader {\n    |\n    = note: expected `fn(&Article) -> &ProofReader`\n               found `fn(&Article) -> &ProofReader`\n-   = note: the lifetime requirements from the `trait` could not be fulfilled by the `impl`\n+   = note: the lifetime requirements from the `trait` could not be satisfied by the `impl`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n \n error: aborting due to previous error"}]}