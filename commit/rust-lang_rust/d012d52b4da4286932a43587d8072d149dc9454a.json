{"sha": "d012d52b4da4286932a43587d8072d149dc9454a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMTJkNTJiNGRhNDI4NjkzMmE0MzU4N2Q4MDcyZDE0OWRjOTQ1NGE=", "commit": {"author": {"name": "David Lukes", "email": "dafydd.lukes@gmail.com", "date": "2018-02-19T10:00:07Z"}, "committer": {"name": "David Lukes", "email": "dafydd.lukes@gmail.com", "date": "2018-03-05T12:11:21Z"}, "message": "Parse template with state machine instead of regex\n\nThis allows occurrences of `{` and `}` within `{}` placeholders in the\ntemplate, and also for having literal `{` and `}` in the template by\nmeans of escaping (`\\{`).\n\nUnbalanced, unescaped `}` at the toplevel is a syntax error which\ncurrently triggers a panic; I'll add proper error handling as I move the\nlicense template parsing code into the config parsing phase.", "tree": {"sha": "2fc962880cd886d3852e4f785d7342fec48c1a10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fc962880cd886d3852e4f785d7342fec48c1a10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d012d52b4da4286932a43587d8072d149dc9454a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d012d52b4da4286932a43587d8072d149dc9454a", "html_url": "https://github.com/rust-lang/rust/commit/d012d52b4da4286932a43587d8072d149dc9454a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d012d52b4da4286932a43587d8072d149dc9454a/comments", "author": {"login": "dlukes", "id": 2734517, "node_id": "MDQ6VXNlcjI3MzQ1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlukes", "html_url": "https://github.com/dlukes", "followers_url": "https://api.github.com/users/dlukes/followers", "following_url": "https://api.github.com/users/dlukes/following{/other_user}", "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions", "organizations_url": "https://api.github.com/users/dlukes/orgs", "repos_url": "https://api.github.com/users/dlukes/repos", "events_url": "https://api.github.com/users/dlukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dlukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dlukes", "id": 2734517, "node_id": "MDQ6VXNlcjI3MzQ1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2734517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlukes", "html_url": "https://github.com/dlukes", "followers_url": "https://api.github.com/users/dlukes/followers", "following_url": "https://api.github.com/users/dlukes/following{/other_user}", "gists_url": "https://api.github.com/users/dlukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlukes/subscriptions", "organizations_url": "https://api.github.com/users/dlukes/orgs", "repos_url": "https://api.github.com/users/dlukes/repos", "events_url": "https://api.github.com/users/dlukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dlukes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eebe614c7ce829cf158e33ca4cce7c7cdda2217", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eebe614c7ce829cf158e33ca4cce7c7cdda2217", "html_url": "https://github.com/rust-lang/rust/commit/2eebe614c7ce829cf158e33ca4cce7c7cdda2217"}], "stats": {"total": 99, "additions": 72, "deletions": 27}, "files": [{"sha": "6771a2ab79406598f0bb26707b652ba2df500384", "filename": "src/lib.rs", "status": "modified", "additions": 72, "deletions": 27, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/d012d52b4da4286932a43587d8072d149dc9454a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d012d52b4da4286932a43587d8072d149dc9454a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d012d52b4da4286932a43587d8072d149dc9454a", "patch": "@@ -43,7 +43,7 @@ use syntax::ast;\n use syntax::codemap::{CodeMap, FilePathMapping};\n pub use syntax::codemap::FileName;\n use syntax::parse::{self, ParseSess};\n-use regex::{Regex, RegexBuilder};\n+use regex::Regex;\n \n use checkstyle::{output_footer, output_header};\n use comment::{CharClasses, FullCodeCharKind};\n@@ -416,33 +416,77 @@ fn should_report_error(\n }\n \n fn check_license(text: &str, license_template: &str) -> Result<bool, regex::Error> {\n+    // the template is parsed using a state machine\n+    enum State {\n+        Lit,\n+        LitEsc,\n+        // the u32 keeps track of brace nesting\n+        Re(u32),\n+        ReEsc(u32),\n+    }\n+\n     let mut template_re = String::from(\"^\");\n-    // the template is parsed as a series of pairs of capture groups of (1) lazy whatever, which\n-    // will be matched literally, followed by (2) a {}-delimited block, which will be matched as a\n-    // regex\n-    let template_parser = RegexBuilder::new(r\"(.*?)\\{(.*?)\\}\")\n-        .dot_matches_new_line(true)\n-        .build()\n-        .unwrap();\n-    // keep track of the last matched offset and ultimately append the tail of the template (if any)\n-    // after the last {} block\n-    let mut last_matched_offset = 0;\n-    for caps in template_parser.captures_iter(license_template) {\n-        if let Some(mat) = caps.get(0) {\n-            last_matched_offset = mat.end()\n-        }\n-        if let Some(mat) = caps.get(1) {\n-            template_re.push_str(&regex::escape(mat.as_str()))\n-        }\n-        if let Some(mat) = caps.get(2) {\n-            let mut re = mat.as_str();\n-            if re.is_empty() {\n-                re = \".*?\";\n+    let mut buffer = String::new();\n+    let mut state = State::Lit;\n+    for chr in license_template.chars() {\n+        state = match state {\n+            State::Lit => match chr {\n+                '{' => {\n+                    template_re.push_str(&regex::escape(&buffer));\n+                    buffer.clear();\n+                    State::Re(1)\n+                }\n+                '}' => panic!(\"license template syntax error\"),\n+                '\\\\' => State::LitEsc,\n+                _ => {\n+                    buffer.push(chr);\n+                    State::Lit\n+                }\n+            },\n+            State::LitEsc => {\n+                buffer.push(chr);\n+                State::Lit\n+            }\n+            State::Re(brace_nesting) => {\n+                match chr {\n+                    '{' => {\n+                        buffer.push(chr);\n+                        State::Re(brace_nesting + 1)\n+                    }\n+                    '}' => {\n+                        match brace_nesting {\n+                            1 => {\n+                                // default regex for empty placeholder {}\n+                                if buffer.is_empty() {\n+                                    buffer = \".*?\".to_string();\n+                                }\n+                                template_re.push_str(&buffer);\n+                                buffer.clear();\n+                                State::Lit\n+                            }\n+                            _ => {\n+                                buffer.push(chr);\n+                                State::Re(brace_nesting - 1)\n+                            }\n+                        }\n+                    }\n+                    '\\\\' => {\n+                        buffer.push(chr);\n+                        State::ReEsc(brace_nesting)\n+                    }\n+                    _ => {\n+                        buffer.push(chr);\n+                        State::Re(brace_nesting)\n+                    }\n+                }\n+            }\n+            State::ReEsc(brace_nesting) => {\n+                buffer.push(chr);\n+                State::Re(brace_nesting)\n             }\n-            template_re.push_str(re)\n         }\n     }\n-    template_re.push_str(&regex::escape(&license_template[last_matched_offset..]));\n+    template_re.push_str(&regex::escape(&buffer));\n     let template_re = Regex::new(&template_re)?;\n     Ok(template_re.is_match(text))\n }\n@@ -1035,9 +1079,10 @@ false,\n         assert!(check_license(\"\", \"this is not a valid {[regex}\").is_err());\n         assert!(\n             check_license(\n-                \"can't parse nested delimiters with regex\",\n-                r\"can't parse nested delimiters with regex{\\.{3}}\"\n-            ).is_err()\n+                \"parse unbalanced nested delimiters{{{\",\n+                r\"parse unbalanced nested delimiters{\\{{3}}\"\n+            ).unwrap()\n         );\n+        assert!(check_license(\"escaping }\", r\"escaping \\}\").unwrap());\n     }\n }"}]}