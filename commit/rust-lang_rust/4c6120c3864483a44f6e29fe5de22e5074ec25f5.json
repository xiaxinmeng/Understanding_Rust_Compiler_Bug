{"sha": "4c6120c3864483a44f6e29fe5de22e5074ec25f5", "node_id": "C_kwDOAAsO6NoAKDRjNjEyMGMzODY0NDgzYTQ0ZjZlMjlmZTVkZTIyZTUwNzRlYzI1ZjU", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-06T04:13:41Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-06T04:13:41Z"}, "message": "rustc_metadata: Make attribute decoding slightly faster and stricter\n\nRename `CStore::item_attrs` -> `CStore::item_attrs_untracked` top follow conventions", "tree": {"sha": "aaa0a7309f52fa0764cc122a809b454bc3ef64d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaa0a7309f52fa0764cc122a809b454bc3ef64d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c6120c3864483a44f6e29fe5de22e5074ec25f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c6120c3864483a44f6e29fe5de22e5074ec25f5", "html_url": "https://github.com/rust-lang/rust/commit/4c6120c3864483a44f6e29fe5de22e5074ec25f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c6120c3864483a44f6e29fe5de22e5074ec25f5/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "636fd495c81d9b92820461de8e56e4cce7614256", "url": "https://api.github.com/repos/rust-lang/rust/commits/636fd495c81d9b92820461de8e56e4cce7614256", "html_url": "https://github.com/rust-lang/rust/commit/636fd495c81d9b92820461de8e56e4cce7614256"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "ab3a74c8ed1b827ebb94f0a180cd4b917fa5a499", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4c6120c3864483a44f6e29fe5de22e5074ec25f5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6120c3864483a44f6e29fe5de22e5074ec25f5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=4c6120c3864483a44f6e29fe5de22e5074ec25f5", "patch": "@@ -1309,24 +1309,26 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn get_item_attrs(\n         &'a self,\n-        node_id: DefIndex,\n+        id: DefIndex,\n         sess: &'a Session,\n     ) -> impl Iterator<Item = ast::Attribute> + 'a {\n-        // The attributes for a tuple struct/variant are attached to the definition, not the ctor;\n-        // we assume that someone passing in a tuple struct ctor is actually wanting to\n-        // look at the definition\n-        let def_key = self.def_key(node_id);\n-        let item_id = if def_key.disambiguated_data.data == DefPathData::Ctor {\n-            def_key.parent.unwrap()\n-        } else {\n-            node_id\n-        };\n-\n         self.root\n             .tables\n             .attributes\n-            .get(self, item_id)\n-            .unwrap_or_else(Lazy::empty)\n+            .get(self, id)\n+            .unwrap_or_else(|| {\n+                // Structure and variant constructors don't have any attributes encoded for them,\n+                // but we assume that someone passing a constructor ID actually wants to look at\n+                // the attributes on the corresponding struct or variant.\n+                let def_key = self.def_key(id);\n+                assert_eq!(def_key.disambiguated_data.data, DefPathData::Ctor);\n+                let parent_id = def_key.parent.expect(\"no parent for a constructor\");\n+                self.root\n+                    .tables\n+                    .attributes\n+                    .get(self, parent_id)\n+                    .expect(\"no encoded attributes for a structure or variant\")\n+            })\n             .decode((self, sess))\n     }\n "}, {"sha": "4677e09932b7256c365ffe7090fe5ac8f7e6351a", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c6120c3864483a44f6e29fe5de22e5074ec25f5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6120c3864483a44f6e29fe5de22e5074ec25f5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=4c6120c3864483a44f6e29fe5de22e5074ec25f5", "patch": "@@ -145,9 +145,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     lookup_deprecation_entry => {\n         cdata.get_deprecation(def_id.index).map(DeprecationEntry::external)\n     }\n-    item_attrs => { tcx.arena.alloc_from_iter(\n-        cdata.get_item_attrs(def_id.index, tcx.sess)\n-    ) }\n+    item_attrs => { tcx.arena.alloc_from_iter(cdata.get_item_attrs(def_id.index, tcx.sess)) }\n     fn_arg_names => { cdata.get_fn_param_names(tcx, def_id.index) }\n     rendered_const => { cdata.get_rendered_const(def_id.index) }\n     impl_parent => { cdata.get_parent_impl(def_id.index) }\n@@ -470,7 +468,7 @@ impl CStore {\n         self.get_crate_data(cnum).num_def_ids()\n     }\n \n-    pub fn item_attrs(&self, def_id: DefId, sess: &Session) -> Vec<ast::Attribute> {\n+    pub fn item_attrs_untracked(&self, def_id: DefId, sess: &Session) -> Vec<ast::Attribute> {\n         self.get_crate_data(def_id.krate).get_item_attrs(def_id.index, sess).collect()\n     }\n "}, {"sha": "4feeae5cab1ded3c12fefa1e327e220330038133", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c6120c3864483a44f6e29fe5de22e5074ec25f5/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6120c3864483a44f6e29fe5de22e5074ec25f5/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=4c6120c3864483a44f6e29fe5de22e5074ec25f5", "patch": "@@ -895,17 +895,19 @@ impl<'a> Resolver<'a> {\n                             // a note about editions\n                             let note = if let Some(did) = did {\n                                 let requires_note = !did.is_local()\n-                                    && this.cstore().item_attrs(did, this.session).iter().any(\n-                                        |attr| {\n+                                    && this\n+                                        .cstore()\n+                                        .item_attrs_untracked(did, this.session)\n+                                        .iter()\n+                                        .any(|attr| {\n                                             if attr.has_name(sym::rustc_diagnostic_item) {\n                                                 [sym::TryInto, sym::TryFrom, sym::FromIterator]\n                                                     .map(|x| Some(x))\n                                                     .contains(&attr.value_str())\n                                             } else {\n                                                 false\n                                             }\n-                                        },\n-                                    );\n+                                        });\n \n                                 requires_note.then(|| {\n                                     format!("}, {"sha": "b46a93c06734bf0e2ecab496b9532df74d47803b", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6120c3864483a44f6e29fe5de22e5074ec25f5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6120c3864483a44f6e29fe5de22e5074ec25f5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=4c6120c3864483a44f6e29fe5de22e5074ec25f5", "patch": "@@ -3420,7 +3420,7 @@ impl<'a> Resolver<'a> {\n \n                 let attr = self\n                     .cstore()\n-                    .item_attrs(def_id, self.session)\n+                    .item_attrs_untracked(def_id, self.session)\n                     .into_iter()\n                     .find(|a| a.has_name(sym::rustc_legacy_const_generics))?;\n                 let mut ret = Vec::new();"}]}