{"sha": "8ddad18283e304753e09ef651209b4a6b54148b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZGFkMTgyODNlMzA0NzUzZTA5ZWY2NTEyMDliNGE2YjU0MTQ4YjA=", "commit": {"author": {"name": "Philippe Laflamme", "email": "philippe.laflamme@gmail.com", "date": "2020-10-22T03:02:20Z"}, "committer": {"name": "Philippe Laflamme", "email": "philippe.laflamme@gmail.com", "date": "2021-01-14T04:13:55Z"}, "message": "Avoid ident concatenation in macro.\n\nAFAIK it isn't currently possible to do this. It is also more in line with other tests in the surrounding modules.", "tree": {"sha": "5a545eebe14ca6651f3f1dfbda6a8c1b5a7ff14f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a545eebe14ca6651f3f1dfbda6a8c1b5a7ff14f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ddad18283e304753e09ef651209b4a6b54148b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJQBAABCgA6FiEE+HocooijKK2PufZZCLxEPNEOTcQFAl//xQMcHHBoaWxpcHBl\nLmxhZmxhbW1lQGdtYWlsLmNvbQAKCRAIvEQ80Q5NxFelEACgByEzWMaU399n+FzD\nb3rVSL+GWaSQbPDz/M7WtRWX8p1FQFbLe9Y+q0KX089jqhVEXcGYvRDh0JJtq6Yx\nqa5XT1HjcEgNXuHXqjVARrEtwZqbu8lKUejb8YsNbujEhiydHMskwcmLNlH/11tP\nuKS+UhBIMgiwmB9w3Q+XJHTPChbl8pAnm2/OSjB79bmQNEw6RjGhqgieCuyV/8hg\nYzXY4mMqsuNhdfqs9gF80flYZpnjauGp/UsIPnnCXlWhXjQbmydKblLkflT690NC\nxdZdleGt5ZyRluvtmE237Z+aYmqTicyvewq+dytTQIAQieBw+F+rpqscUG1pGiHP\nPCfOOrERwxBrOJRgHAmV9+SSTDegJS3oX1yXZNwsW1YH4TBCdQADhVTPZR7kPZTg\n+ehF2fz+9l5VoGsDTmecaI9G2NGoKkJdeNvM3iyEe8hNWn8ni8KXXG/8kljLIKXI\nr+N24yLb6jCSjnbEObrcVzjDxZ0qcyclp0gl7dv3Jka0TWiPrCkAeJIfrt2w32aO\nw40fYj3cxOEj0Yxx2awWzw28lIPDAkwsZQWQ+7GGmi1Tgcu3U01MwVd1pXMSyvBc\ng86mMySfL4dgK3e8OJE/IqyJN/2Vury2VPLlsENnq/IonuUQSwcCHERfPiO7tAqq\nEtXkZ2+142s/iaKcjUK1uxrmdg==\n=62Qv\n-----END PGP SIGNATURE-----", "payload": "tree 5a545eebe14ca6651f3f1dfbda6a8c1b5a7ff14f\nparent 872dc60ed203d16d43140c1d1623474cf8a9aedc\nauthor Philippe Laflamme <philippe.laflamme@gmail.com> 1603335740 -0400\ncommitter Philippe Laflamme <philippe.laflamme@gmail.com> 1610597635 -0500\n\nAvoid ident concatenation in macro.\n\nAFAIK it isn't currently possible to do this. It is also more in line with other tests in the surrounding modules.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ddad18283e304753e09ef651209b4a6b54148b0", "html_url": "https://github.com/rust-lang/rust/commit/8ddad18283e304753e09ef651209b4a6b54148b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ddad18283e304753e09ef651209b4a6b54148b0/comments", "author": {"login": "plaflamme", "id": 484152, "node_id": "MDQ6VXNlcjQ4NDE1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/484152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/plaflamme", "html_url": "https://github.com/plaflamme", "followers_url": "https://api.github.com/users/plaflamme/followers", "following_url": "https://api.github.com/users/plaflamme/following{/other_user}", "gists_url": "https://api.github.com/users/plaflamme/gists{/gist_id}", "starred_url": "https://api.github.com/users/plaflamme/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/plaflamme/subscriptions", "organizations_url": "https://api.github.com/users/plaflamme/orgs", "repos_url": "https://api.github.com/users/plaflamme/repos", "events_url": "https://api.github.com/users/plaflamme/events{/privacy}", "received_events_url": "https://api.github.com/users/plaflamme/received_events", "type": "User", "site_admin": false}, "committer": {"login": "plaflamme", "id": 484152, "node_id": "MDQ6VXNlcjQ4NDE1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/484152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/plaflamme", "html_url": "https://github.com/plaflamme", "followers_url": "https://api.github.com/users/plaflamme/followers", "following_url": "https://api.github.com/users/plaflamme/following{/other_user}", "gists_url": "https://api.github.com/users/plaflamme/gists{/gist_id}", "starred_url": "https://api.github.com/users/plaflamme/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/plaflamme/subscriptions", "organizations_url": "https://api.github.com/users/plaflamme/orgs", "repos_url": "https://api.github.com/users/plaflamme/repos", "events_url": "https://api.github.com/users/plaflamme/events{/privacy}", "received_events_url": "https://api.github.com/users/plaflamme/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "872dc60ed203d16d43140c1d1623474cf8a9aedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/872dc60ed203d16d43140c1d1623474cf8a9aedc", "html_url": "https://github.com/rust-lang/rust/commit/872dc60ed203d16d43140c1d1623474cf8a9aedc"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "c4fb321ef26cff9d4e5146fe8e1c380800f9827f", "filename": "library/core/tests/num/wrapping.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8ddad18283e304753e09ef651209b4a6b54148b0/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ddad18283e304753e09ef651209b4a6b54148b0/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs?ref=8ddad18283e304753e09ef651209b4a6b54148b0", "patch": "@@ -26,9 +26,9 @@ macro_rules! wrapping_assignment {\n }\n \n macro_rules! wrapping_test {\n-    ($type:ty, $min:expr, $max:expr) => {\n+    ($fn_name:ident, $type:ty, $min:expr, $max:expr) => {\n         #[test]\n-        fn wrapping_$type() {\n+        fn $fn_name() {\n             let zero: Wrapping<$type> = Wrapping(0);\n             let one: Wrapping<$type> = Wrapping(1);\n             let min: Wrapping<$type> = Wrapping($min);\n@@ -60,23 +60,24 @@ macro_rules! wrapping_test {\n     };\n }\n \n-wrapping_test!(i8, i8::MIN, i8::MAX);\n-wrapping_test!(i16, i16::MIN, i16::MAX);\n-wrapping_test!(i32, i32::MIN, i32::MAX);\n-wrapping_test!(i64, i64::MIN, i64::MAX);\n+wrapping_test!(test_wrapping_i8, i8, i8::MIN, i8::MAX);\n+wrapping_test!(test_wrapping_i16, i16, i16::MIN, i16::MAX);\n+wrapping_test!(test_wrapping_i32, i32, i32::MIN, i32::MAX);\n+wrapping_test!(test_wrapping_i64, i64, i64::MIN, i64::MAX);\n #[cfg(not(target_os = \"emscripten\"))]\n-wrapping_test!(i128, i128::MIN, i128::MAX);\n-wrapping_test!(isize, isize::MIN, isize::MAX);\n-wrapping_test!(u8, u8::MIN, u8::MAX);\n-wrapping_test!(u16, u16::MIN, u16::MAX);\n-wrapping_test!(u32, u32::MIN, u32::MAX);\n-wrapping_test!(u64, u64::MIN, u64::MAX);\n+wrapping_test!(test_wrapping_i128, i128, i128::MIN, i128::MAX);\n+wrapping_test!(test_wrapping_isize, isize, isize::MIN, isize::MAX);\n+wrapping_test!(test_wrapping_u8, u8, u8::MIN, u8::MAX);\n+wrapping_test!(test_wrapping_u16, u16, u16::MIN, u16::MAX);\n+wrapping_test!(test_wrapping_u32, u32, u32::MIN, u32::MAX);\n+wrapping_test!(test_wrapping_u64, u64, u64::MIN, u64::MAX);\n #[cfg(not(target_os = \"emscripten\"))]\n-wrapping_test!(u128, u128::MIN, u128::MAX);\n-wrapping_test!(usize, usize::MIN, usize::MAX);\n+wrapping_test!(test_wrapping_u128, u128, u128::MIN, u128::MAX);\n+wrapping_test!(test_wrapping_usize, usize, usize::MIN, usize::MAX);\n \n // Don't warn about overflowing ops on 32-bit platforms\n #[cfg_attr(target_pointer_width = \"32\", allow(const_err))]\n+#[test]\n fn wrapping_int_api() {\n     assert_eq!(i8::MAX.wrapping_add(1), i8::MIN);\n     assert_eq!(i16::MAX.wrapping_add(1), i16::MIN);"}]}