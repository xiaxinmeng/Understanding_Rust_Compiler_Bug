{"sha": "e41920a1c304487e64506adf27100a224c6ef6e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MTkyMGExYzMwNDQ4N2U2NDUwNmFkZjI3MTAwYTIyNGM2ZWY2ZTY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-01-03T19:51:28Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-01-03T19:51:28Z"}, "message": "rustfmt coherence::builtin", "tree": {"sha": "6a316d61e262e6b79c2c2a155ab3796ae16b5f13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a316d61e262e6b79c2c2a155ab3796ae16b5f13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e41920a1c304487e64506adf27100a224c6ef6e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e41920a1c304487e64506adf27100a224c6ef6e6", "html_url": "https://github.com/rust-lang/rust/commit/e41920a1c304487e64506adf27100a224c6ef6e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e41920a1c304487e64506adf27100a224c6ef6e6/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "243e45aac3fccf9403ad1bed162073f4f314b270", "url": "https://api.github.com/repos/rust-lang/rust/commits/243e45aac3fccf9403ad1bed162073f4f314b270", "html_url": "https://github.com/rust-lang/rust/commit/243e45aac3fccf9403ad1bed162073f4f314b270"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "d6eb7d4b183c0d413c119be63c51be0bcc459b1d", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e41920a1c304487e64506adf27100a224c6ef6e6/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41920a1c304487e64506adf27100a224c6ef6e6/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=e41920a1c304487e64506adf27100a224c6ef6e6", "patch": "@@ -28,15 +28,13 @@ use rustc::hir::{self, ItemImpl};\n \n pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     if let Some(drop_trait) = tcx.lang_items.drop_trait() {\n-        tcx.lookup_trait_def(drop_trait).for_each_impl(tcx, |impl_did| {\n-            visit_implementation_of_drop(tcx, impl_did)\n-        });\n+        tcx.lookup_trait_def(drop_trait)\n+            .for_each_impl(tcx, |impl_did| visit_implementation_of_drop(tcx, impl_did));\n     }\n \n     if let Some(copy_trait) = tcx.lang_items.copy_trait() {\n-        tcx.lookup_trait_def(copy_trait).for_each_impl(tcx, |impl_did| {\n-            visit_implementation_of_copy(tcx, impl_did)\n-        });\n+        tcx.lookup_trait_def(copy_trait)\n+            .for_each_impl(tcx, |impl_did| visit_implementation_of_copy(tcx, impl_did));\n     }\n \n     if let Some(coerce_unsized_trait) = tcx.lang_items.coerce_unsized_trait() {\n@@ -48,8 +46,10 @@ pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         };\n \n         tcx.lookup_trait_def(coerce_unsized_trait).for_each_impl(tcx, |impl_did| {\n-            visit_implementation_of_coerce_unsized(tcx, impl_did,\n-                                                   unsize_trait, coerce_unsized_trait)\n+            visit_implementation_of_coerce_unsized(tcx,\n+                                                   impl_did,\n+                                                   unsize_trait,\n+                                                   coerce_unsized_trait)\n         });\n     }\n }\n@@ -81,8 +81,7 @@ fn visit_implementation_of_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did:\n                                          E0120,\n                                          \"the Drop trait may only be implemented on \\\n                                          structures\")\n-                            .span_label(span,\n-                                        &format!(\"implementing Drop requires a struct\"))\n+                            .span_label(span, &format!(\"implementing Drop requires a struct\"))\n                             .emit();\n                     }\n                     _ => {\n@@ -173,10 +172,10 @@ fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did:\n     }\n }\n \n-fn visit_implementation_of_coerce_unsized<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did: DefId,\n-    unsize_trait: DefId, coerce_unsized_trait: DefId)\n-{\n+fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                                    impl_did: DefId,\n+                                                    unsize_trait: DefId,\n+                                                    coerce_unsized_trait: DefId) {\n     debug!(\"visit_implementation_of_coerce_unsized: impl_did={:?}\",\n            impl_did);\n \n@@ -212,10 +211,10 @@ fn visit_implementation_of_coerce_unsized<'a, 'tcx>(\n                            mk_ptr: &Fn(Ty<'tcx>) -> Ty<'tcx>| {\n             if (mt_a.mutbl, mt_b.mutbl) == (hir::MutImmutable, hir::MutMutable) {\n                 infcx.report_mismatched_types(&cause,\n-                                              mk_ptr(mt_b.ty),\n-                                              target,\n-                                              ty::error::TypeError::Mutability)\n-                         .emit();\n+                                             mk_ptr(mt_b.ty),\n+                                             target,\n+                                             ty::error::TypeError::Mutability)\n+                    .emit();\n             }\n             (mt_a.ty, mt_b.ty, unsize_trait, None)\n         };\n@@ -232,8 +231,8 @@ fn visit_implementation_of_coerce_unsized<'a, 'tcx>(\n                 check_mutbl(mt_a, mt_b, &|ty| tcx.mk_imm_ptr(ty))\n             }\n \n-            (&ty::TyAdt(def_a, substs_a), &ty::TyAdt(def_b, substs_b))\n-                if def_a.is_struct() && def_b.is_struct() => {\n+            (&ty::TyAdt(def_a, substs_a), &ty::TyAdt(def_b, substs_b)) if def_a.is_struct() &&\n+                                                                          def_b.is_struct() => {\n                 if def_a != def_b {\n                     let source_path = tcx.item_path_str(def_a.did);\n                     let target_path = tcx.item_path_str(def_b.did);\n@@ -299,11 +298,11 @@ fn visit_implementation_of_coerce_unsized<'a, 'tcx>(\n                     err.note(&format!(\"currently, {} fields need coercions: {}\",\n                                       diff_fields.len(),\n                                       diff_fields.iter()\n-                                      .map(|&(i, a, b)| {\n-                                          format!(\"{} ({} to {})\", fields[i].name, a, b)\n-                                      })\n-                                      .collect::<Vec<_>>()\n-                                      .join(\", \")));\n+                                          .map(|&(i, a, b)| {\n+                                              format!(\"{} ({} to {})\", fields[i].name, a, b)\n+                                          })\n+                                          .collect::<Vec<_>>()\n+                                          .join(\", \")));\n                     err.span_label(span, &format!(\"requires multiple coercions\"));\n                     err.emit();\n                     return;\n@@ -328,8 +327,7 @@ fn visit_implementation_of_coerce_unsized<'a, 'tcx>(\n \n         // Register an obligation for `A: Trait<B>`.\n         let cause = traits::ObligationCause::misc(span, impl_node_id);\n-        let predicate =\n-            tcx.predicate_for_trait_def(cause, trait_def_id, 0, source, &[target]);\n+        let predicate = tcx.predicate_for_trait_def(cause, trait_def_id, 0, source, &[target]);\n         fulfill_cx.register_predicate_obligation(&infcx, predicate);\n \n         // Check that all transitive obligations are satisfied.\n@@ -340,7 +338,7 @@ fn visit_implementation_of_coerce_unsized<'a, 'tcx>(\n         // Finally, resolve all regions.\n         let mut free_regions = FreeRegionMap::new();\n         free_regions.relate_free_regions_from_predicates(&infcx.parameter_environment\n-                                                         .caller_bounds);\n+            .caller_bounds);\n         infcx.resolve_regions_and_report_errors(&free_regions, impl_node_id);\n \n         if let Some(kind) = kind {"}]}