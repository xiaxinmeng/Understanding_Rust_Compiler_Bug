{"sha": "ffa77332c630b43cb92f6256b8e404198820fa03", "node_id": "C_kwDOAAsO6NoAKGZmYTc3MzMyYzYzMGI0M2NiOTJmNjI1NmI4ZTQwNDE5ODgyMGZhMDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-22T16:52:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-22T16:52:10Z"}, "message": "Auto merge of #99598 - GuillaumeGomez:clean-trait-fields-on-demand, r=notriddle\n\nMake some clean::Trait fields computation on demand\n\nr? `@notriddle`", "tree": {"sha": "336331a981a17f4a2fee78142c104e0e27071324", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/336331a981a17f4a2fee78142c104e0e27071324"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffa77332c630b43cb92f6256b8e404198820fa03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa77332c630b43cb92f6256b8e404198820fa03", "html_url": "https://github.com/rust-lang/rust/commit/ffa77332c630b43cb92f6256b8e404198820fa03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffa77332c630b43cb92f6256b8e404198820fa03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22d25f21dc008785f52e7c2833de4f4236b1066b", "url": "https://api.github.com/repos/rust-lang/rust/commits/22d25f21dc008785f52e7c2833de4f4236b1066b", "html_url": "https://github.com/rust-lang/rust/commit/22d25f21dc008785f52e7c2833de4f4236b1066b"}, {"sha": "edb9add193def7fdbb83beefaf5b040499d332f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/edb9add193def7fdbb83beefaf5b040499d332f8", "html_url": "https://github.com/rust-lang/rust/commit/edb9add193def7fdbb83beefaf5b040499d332f8"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "6b37b8e4db46ecc8bb58b537f88a61523668e367", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ffa77332c630b43cb92f6256b8e404198820fa03/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa77332c630b43cb92f6256b8e404198820fa03/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=ffa77332c630b43cb92f6256b8e404198820fa03", "patch": "@@ -214,14 +214,7 @@ pub(crate) fn build_external_trait(cx: &mut DocContext<'_>, did: DefId) -> clean\n     let generics = clean_ty_generics(cx, cx.tcx.generics_of(did), predicates);\n     let generics = filter_non_trait_generics(did, generics);\n     let (generics, supertrait_bounds) = separate_supertrait_bounds(generics);\n-    let is_auto = cx.tcx.trait_is_auto(did);\n-    clean::Trait {\n-        unsafety: cx.tcx.trait_def(did).unsafety,\n-        generics,\n-        items: trait_items,\n-        bounds: supertrait_bounds,\n-        is_auto,\n-    }\n+    clean::Trait { def_id: did, generics, items: trait_items, bounds: supertrait_bounds }\n }\n \n fn build_external_function<'tcx>(cx: &mut DocContext<'tcx>, did: DefId) -> clean::Function {"}, {"sha": "43ebaab98db60e14a1aef075148c731693fb8cec", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffa77332c630b43cb92f6256b8e404198820fa03/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa77332c630b43cb92f6256b8e404198820fa03/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ffa77332c630b43cb92f6256b8e404198820fa03", "patch": "@@ -1972,15 +1972,14 @@ fn clean_maybe_renamed_item<'tcx>(\n                     source: display_macro_source(cx, name, macro_def, def_id, ty_vis),\n                 })\n             }\n-            ItemKind::Trait(is_auto, unsafety, generics, bounds, item_ids) => {\n+            ItemKind::Trait(_, _, generics, bounds, item_ids) => {\n                 let items =\n                     item_ids.iter().map(|ti| cx.tcx.hir().trait_item(ti.id).clean(cx)).collect();\n                 TraitItem(Trait {\n-                    unsafety,\n+                    def_id,\n                     items,\n                     generics: generics.clean(cx),\n                     bounds: bounds.iter().filter_map(|x| x.clean(cx)).collect(),\n-                    is_auto: is_auto.clean(cx),\n                 })\n             }\n             ItemKind::ExternCrate(orig_name) => {"}, {"sha": "2d364f3402e9630f3958987abc9fbabd2217ad08", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffa77332c630b43cb92f6256b8e404198820fa03/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa77332c630b43cb92f6256b8e404198820fa03/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=ffa77332c630b43cb92f6256b8e404198820fa03", "patch": "@@ -1513,11 +1513,19 @@ impl FnRetTy {\n \n #[derive(Clone, Debug)]\n pub(crate) struct Trait {\n-    pub(crate) unsafety: hir::Unsafety,\n+    pub(crate) def_id: DefId,\n     pub(crate) items: Vec<Item>,\n     pub(crate) generics: Generics,\n     pub(crate) bounds: Vec<GenericBound>,\n-    pub(crate) is_auto: bool,\n+}\n+\n+impl Trait {\n+    pub(crate) fn is_auto(&self, tcx: TyCtxt<'_>) -> bool {\n+        tcx.trait_is_auto(self.def_id)\n+    }\n+    pub(crate) fn unsafety(&self, tcx: TyCtxt<'_>) -> hir::Unsafety {\n+        tcx.trait_def(self.def_id).unsafety\n+    }\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "f46fde7b35a6d2a4d4c7cc7bc5f413dd7ad57e51", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffa77332c630b43cb92f6256b8e404198820fa03/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa77332c630b43cb92f6256b8e404198820fa03/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=ffa77332c630b43cb92f6256b8e404198820fa03", "patch": "@@ -390,8 +390,7 @@ pub(crate) fn run_global_ctxt(\n     //\n     // Note that in case of `#![no_core]`, the trait is not available.\n     if let Some(sized_trait_did) = ctxt.tcx.lang_items().sized_trait() {\n-        let mut sized_trait = build_external_trait(&mut ctxt, sized_trait_did);\n-        sized_trait.is_auto = true;\n+        let sized_trait = build_external_trait(&mut ctxt, sized_trait_did);\n         ctxt.external_traits\n             .borrow_mut()\n             .insert(sized_trait_did, TraitWithExtraInfo { trait_: sized_trait, is_notable: false });"}, {"sha": "89d372da32278063e1b1e90a99596f4884785b24", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffa77332c630b43cb92f6256b8e404198820fa03/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa77332c630b43cb92f6256b8e404198820fa03/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=ffa77332c630b43cb92f6256b8e404198820fa03", "patch": "@@ -2295,7 +2295,7 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n     sidebar_assoc_items(cx, buf, it);\n \n     print_sidebar_title(buf, \"implementors\", \"Implementors\");\n-    if t.is_auto {\n+    if t.is_auto(cx.tcx()) {\n         print_sidebar_title(buf, \"synthetic-implementors\", \"Auto Implementors\");\n     }\n "}, {"sha": "81cc12c9d55961dc23407e07c9488d00ee6ec7d2", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffa77332c630b43cb92f6256b8e404198820fa03/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa77332c630b43cb92f6256b8e404198820fa03/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=ffa77332c630b43cb92f6256b8e404198820fa03", "patch": "@@ -548,8 +548,8 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n                 w,\n                 \"{}{}{}trait {}{}{}\",\n                 it.visibility.print_with_space(it.item_id, cx),\n-                t.unsafety.print_with_space(),\n-                if t.is_auto { \"auto \" } else { \"\" },\n+                t.unsafety(cx.tcx()).print_with_space(),\n+                if t.is_auto(cx.tcx()) { \"auto \" } else { \"\" },\n                 it.name.unwrap(),\n                 t.generics.print(cx),\n                 bounds\n@@ -883,7 +883,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n         }\n         w.write_str(\"</div>\");\n \n-        if t.is_auto {\n+        if t.is_auto(cx.tcx()) {\n             write_small_section_header(\n                 w,\n                 \"synthetic-implementors\",\n@@ -912,7 +912,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n             \"<div class=\\\"item-list\\\" id=\\\"implementors-list\\\"></div>\",\n         );\n \n-        if t.is_auto {\n+        if t.is_auto(cx.tcx()) {\n             write_small_section_header(\n                 w,\n                 \"synthetic-implementors\","}, {"sha": "5f3dd57061051f68db82c968adb17e2ce2f5a35b", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffa77332c630b43cb92f6256b8e404198820fa03/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa77332c630b43cb92f6256b8e404198820fa03/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=ffa77332c630b43cb92f6256b8e404198820fa03", "patch": "@@ -554,10 +554,12 @@ impl FromWithTcx<clean::FnDecl> for FnDecl {\n \n impl FromWithTcx<clean::Trait> for Trait {\n     fn from_tcx(trait_: clean::Trait, tcx: TyCtxt<'_>) -> Self {\n-        let clean::Trait { unsafety, items, generics, bounds, is_auto } = trait_;\n+        let is_auto = trait_.is_auto(tcx);\n+        let is_unsafe = trait_.unsafety(tcx) == rustc_hir::Unsafety::Unsafe;\n+        let clean::Trait { items, generics, bounds, .. } = trait_;\n         Trait {\n             is_auto,\n-            is_unsafe: unsafety == rustc_hir::Unsafety::Unsafe,\n+            is_unsafe,\n             items: ids(items, tcx),\n             generics: generics.into_tcx(tcx),\n             bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),"}]}