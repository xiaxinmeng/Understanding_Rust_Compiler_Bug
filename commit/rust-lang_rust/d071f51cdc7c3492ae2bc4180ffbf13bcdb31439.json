{"sha": "d071f51cdc7c3492ae2bc4180ffbf13bcdb31439", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNzFmNTFjZGM3YzM0OTJhZTJiYzQxODBmZmJmMTNiY2RiMzE0Mzk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-23T21:15:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-25T00:07:03Z"}, "message": "std::rt: deny(unused_unsafe)", "tree": {"sha": "66c0dbf70798728bf0adeaed716e716bec06b450", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66c0dbf70798728bf0adeaed716e716bec06b450"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d071f51cdc7c3492ae2bc4180ffbf13bcdb31439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d071f51cdc7c3492ae2bc4180ffbf13bcdb31439", "html_url": "https://github.com/rust-lang/rust/commit/d071f51cdc7c3492ae2bc4180ffbf13bcdb31439", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d071f51cdc7c3492ae2bc4180ffbf13bcdb31439/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b530ca103388c99e774868645758785d6ad6b9a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b530ca103388c99e774868645758785d6ad6b9a9", "html_url": "https://github.com/rust-lang/rust/commit/b530ca103388c99e774868645758785d6ad6b9a9"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "8713cf05a4772c7dd13b3a5086bd8cc2379c54d9", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d071f51cdc7c3492ae2bc4180ffbf13bcdb31439/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d071f51cdc7c3492ae2bc4180ffbf13bcdb31439/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=d071f51cdc7c3492ae2bc4180ffbf13bcdb31439", "patch": "@@ -58,6 +58,7 @@ Several modules in `core` are clients of `rt`:\n #[deny(unused_imports)];\n #[deny(unused_mut)];\n #[deny(unused_variable)];\n+#[deny(unused_unsafe)];\n \n use cell::Cell;\n use clone::Clone;\n@@ -224,7 +225,7 @@ pub fn run(main: ~fn()) -> int {\n \n     let nthreads = match os::getenv(\"RUST_THREADS\") {\n         Some(nstr) => FromStr::from_str(nstr).get(),\n-        None => unsafe { util::num_cpus() }\n+        None => util::num_cpus()\n     };\n \n     // The shared list of sleeping schedulers. Schedulers wake each other"}, {"sha": "b0e4968401474750e2c449e22c3877d918e51185", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d071f51cdc7c3492ae2bc4180ffbf13bcdb31439/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d071f51cdc7c3492ae2bc4180ffbf13bcdb31439/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=d071f51cdc7c3492ae2bc4180ffbf13bcdb31439", "patch": "@@ -74,7 +74,7 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n     do run_in_bare_thread {\n         let nthreads = match os::getenv(\"RUST_TEST_THREADS\") {\n             Some(nstr) => FromStr::from_str(nstr).get(),\n-            None => unsafe {\n+            None => {\n                 // Using more threads than cores in test code\n                 // to force the OS to preempt them frequently.\n                 // Assuming that this help stress test concurrent types."}, {"sha": "14465eb7dfd3afade41774d752c0c5e18ee99955", "filename": "src/libstd/rt/uv/timer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d071f51cdc7c3492ae2bc4180ffbf13bcdb31439/src%2Flibstd%2Frt%2Fuv%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d071f51cdc7c3492ae2bc4180ffbf13bcdb31439/src%2Flibstd%2Frt%2Fuv%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Ftimer.rs?ref=d071f51cdc7c3492ae2bc4180ffbf13bcdb31439", "patch": "@@ -160,14 +160,14 @@ mod test {\n                         let mut timer2 = TimerWatcher::new(&mut loop_);\n                         do timer2.start(10, 0) |timer2, _| {\n \n-                            unsafe { *count_ptr += 1; }\n+                            *count_ptr += 1;\n \n                             timer2.close(||());\n \n                             // Restart the original timer\n                             let mut timer = timer;\n                             do timer.start(1, 0) |timer, _| {\n-                                unsafe { *count_ptr += 1; }\n+                                *count_ptr += 1;\n                                 timer.close(||());\n                             }\n                         }"}]}