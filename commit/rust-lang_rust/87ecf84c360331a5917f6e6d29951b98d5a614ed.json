{"sha": "87ecf84c360331a5917f6e6d29951b98d5a614ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZWNmODRjMzYwMzMxYTU5MTdmNmU2ZDI5OTUxYjk4ZDVhNjE0ZWQ=", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-06-13T20:40:42Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-06-13T20:40:42Z"}, "message": "Improve CTFE validation error message", "tree": {"sha": "723149fe9aeda02d093c0cb8e245beda4153bc5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/723149fe9aeda02d093c0cb8e245beda4153bc5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87ecf84c360331a5917f6e6d29951b98d5a614ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87ecf84c360331a5917f6e6d29951b98d5a614ed", "html_url": "https://github.com/rust-lang/rust/commit/87ecf84c360331a5917f6e6d29951b98d5a614ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87ecf84c360331a5917f6e6d29951b98d5a614ed/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "html_url": "https://github.com/rust-lang/rust/commit/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "b01eb28e946fd8af0e606da8b87f1d41f5dce6b6", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87ecf84c360331a5917f6e6d29951b98d5a614ed/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ecf84c360331a5917f6e6d29951b98d5a614ed/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=87ecf84c360331a5917f6e6d29951b98d5a614ed", "patch": "@@ -256,7 +256,10 @@ pub enum UndefinedBehaviorInfo<'tcx> {\n     /// The value validity check found a problem.\n     /// Should only be thrown by `validity.rs` and always point out which part of the value\n     /// is the problem.\n-    ValidationFailure(String),\n+    ValidationFailure {\n+        path: Option<String>,\n+        msg: String,\n+    },\n     /// Using a non-boolean `u8` as bool.\n     InvalidBool(u8),\n     /// Using a non-character `u32` as character.\n@@ -331,7 +334,10 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n             ),\n             WriteToReadOnly(a) => write!(f, \"writing to {} which is read-only\", a),\n             DerefFunctionPointer(a) => write!(f, \"accessing {} which contains a function\", a),\n-            ValidationFailure(ref err) => write!(f, \"type validation failed: {}\", err),\n+            ValidationFailure { path: None, msg } => write!(f, \"type validation failed: {}\", msg),\n+            ValidationFailure { path: Some(path), msg } => {\n+                write!(f, \"type validation failed at {}: {}\", path, msg)\n+            }\n             InvalidBool(b) => {\n                 write!(f, \"interpreting an invalid 8-bit value as a bool: 0x{:02x}\", b)\n             }\n@@ -499,13 +505,13 @@ impl fmt::Debug for InterpError<'_> {\n }\n \n impl InterpError<'_> {\n-    /// Some errors to string formatting even if the error is never printed.\n+    /// Some errors do string formatting even if the error is never printed.\n     /// To avoid performance issues, there are places where we want to be sure to never raise these formatting errors,\n     /// so this method lets us detect them and `bug!` on unexpected errors.\n     pub fn formatted_string(&self) -> bool {\n         match self {\n             InterpError::Unsupported(UnsupportedOpInfo::Unsupported(_))\n-            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::ValidationFailure(_))\n+            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::ValidationFailure { .. })\n             | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_)) => true,\n             _ => false,\n         }"}, {"sha": "7511890090b172e77b4cb91008bac8145fdcdcbe", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/87ecf84c360331a5917f6e6d29951b98d5a614ed/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ecf84c360331a5917f6e6d29951b98d5a614ed/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=87ecf84c360331a5917f6e6d29951b98d5a614ed", "patch": "@@ -26,23 +26,27 @@ use super::{\n \n macro_rules! throw_validation_failure {\n     ($where:expr, { $( $what_fmt:expr ),+ } $( expected { $( $expected_fmt:expr ),+ } )?) => {{\n-        let msg = rustc_middle::ty::print::with_no_trimmed_paths(|| {\n+        let (path, msg) = rustc_middle::ty::print::with_no_trimmed_paths(|| {\n             let mut msg = String::new();\n             msg.push_str(\"encountered \");\n             write!(&mut msg, $($what_fmt),+).unwrap();\n-            let where_ = &$where;\n-            if !where_.is_empty() {\n-                msg.push_str(\" at \");\n-                write_path(&mut msg, where_);\n-            }\n             $(\n                 msg.push_str(\", but expected \");\n                 write!(&mut msg, $($expected_fmt),+).unwrap();\n             )?\n \n-            msg\n+            let where_ = &$where;\n+            let path = if !where_.is_empty() {\n+                let mut path = String::new();\n+                write_path(&mut path, where_);\n+                Some(path)\n+            } else {\n+                None\n+            };\n+\n+            (path, msg)\n         });\n-        throw_ub!(ValidationFailure(msg))\n+        throw_ub!(ValidationFailure { path, msg })\n     }};\n }\n "}]}