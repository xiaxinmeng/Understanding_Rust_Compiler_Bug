{"sha": "6d2ec8765d418b365dfaf472ab9b2b53b8eeafa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMmVjODc2NWQ0MThiMzY1ZGZhZjQ3MmFiOWIyYjUzYjhlZWFmYTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T15:44:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T15:44:36Z"}, "message": "Use TypeAliasId in Ty, pt 1", "tree": {"sha": "90d744b6d80d779b60e081b02c9960ec41791705", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90d744b6d80d779b60e081b02c9960ec41791705"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d2ec8765d418b365dfaf472ab9b2b53b8eeafa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2ec8765d418b365dfaf472ab9b2b53b8eeafa9", "html_url": "https://github.com/rust-lang/rust/commit/6d2ec8765d418b365dfaf472ab9b2b53b8eeafa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d2ec8765d418b365dfaf472ab9b2b53b8eeafa9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9", "html_url": "https://github.com/rust-lang/rust/commit/3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "8a184de71d2e9fe1e9240986ec51408ce6a170b8", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6d2ec8765d418b365dfaf472ab9b2b53b8eeafa9/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2ec8765d418b365dfaf472ab9b2b53b8eeafa9/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=6d2ec8765d418b365dfaf472ab9b2b53b8eeafa9", "patch": "@@ -17,7 +17,10 @@ use std::ops::Deref;\n use std::sync::Arc;\n use std::{fmt, iter, mem};\n \n-use hir_def::{generics::GenericParams, AdtId, DefWithBodyId, GenericDefId};\n+use hir_def::{\n+    generics::GenericParams, AdtId, ContainerId, DefWithBodyId, GenericDefId, HasModule, Lookup,\n+    TypeAliasId,\n+};\n use ra_db::{impl_intern_key, salsa};\n \n use crate::{\n@@ -107,7 +110,7 @@ pub enum TypeCtor {\n     /// when we have tried to normalize a projection like `T::Item` but\n     /// couldn't find a better representation.  In that case, we generate\n     /// an **application type** like `(Iterator::Item)<T>`.\n-    AssociatedType(TypeAlias),\n+    AssociatedType(TypeAliasId),\n \n     /// The type of a specific closure.\n     ///\n@@ -147,7 +150,7 @@ impl TypeCtor {\n                 generic_params.count_params_including_parent()\n             }\n             TypeCtor::AssociatedType(type_alias) => {\n-                let generic_params = db.generic_params(type_alias.id.into());\n+                let generic_params = db.generic_params(type_alias.into());\n                 generic_params.count_params_including_parent()\n             }\n             TypeCtor::FnPtr { num_args } => num_args as usize + 1,\n@@ -173,7 +176,9 @@ impl TypeCtor {\n             TypeCtor::Closure { .. } => None,\n             TypeCtor::Adt(adt) => adt.krate(db),\n             TypeCtor::FnDef(callable) => Some(callable.krate(db).into()),\n-            TypeCtor::AssociatedType(type_alias) => type_alias.krate(db),\n+            TypeCtor::AssociatedType(type_alias) => {\n+                Some(type_alias.lookup(db).module(db).krate.into())\n+            }\n         }\n     }\n \n@@ -194,7 +199,7 @@ impl TypeCtor {\n             | TypeCtor::Closure { .. } => None,\n             TypeCtor::Adt(adt) => Some(adt.into()),\n             TypeCtor::FnDef(callable) => Some(callable.into()),\n-            TypeCtor::AssociatedType(type_alias) => Some(type_alias.id.into()),\n+            TypeCtor::AssociatedType(type_alias) => Some(type_alias.into()),\n         }\n     }\n }\n@@ -896,11 +901,12 @@ impl HirDisplay for ApplicationTy {\n                 }\n             }\n             TypeCtor::AssociatedType(type_alias) => {\n-                let trait_name = type_alias\n-                    .parent_trait(f.db)\n-                    .and_then(|t| t.name(f.db))\n-                    .unwrap_or_else(Name::missing);\n-                let name = type_alias.name(f.db);\n+                let trait_ = match type_alias.lookup(f.db).container {\n+                    ContainerId::TraitId(it) => it,\n+                    _ => panic!(\"not an associated type\"),\n+                };\n+                let trait_name = f.db.trait_data(trait_).name.clone().unwrap_or_else(Name::missing);\n+                let name = f.db.type_alias_data(type_alias).name.clone();\n                 write!(f, \"{}::{}\", trait_name, name)?;\n                 if self.parameters.len() > 0 {\n                     write!(f, \"<\")?;"}, {"sha": "fd2f1b1742392ff5b87dd6365948def46f54fcf2", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d2ec8765d418b365dfaf472ab9b2b53b8eeafa9/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2ec8765d418b365dfaf472ab9b2b53b8eeafa9/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=6d2ec8765d418b365dfaf472ab9b2b53b8eeafa9", "patch": "@@ -9,7 +9,7 @@ use chalk_ir::{\n };\n use chalk_rust_ir::{AssociatedTyDatum, AssociatedTyValue, ImplDatum, StructDatum, TraitDatum};\n \n-use hir_def::{lang_item::LangItemTarget, GenericDefId};\n+use hir_def::{lang_item::LangItemTarget, GenericDefId, TypeAliasId};\n use hir_expand::name;\n \n use ra_db::salsa::{InternId, InternKey};\n@@ -215,6 +215,18 @@ impl ToChalk for TypeAlias {\n     }\n }\n \n+impl ToChalk for TypeAliasId {\n+    type Chalk = chalk_ir::TypeId;\n+\n+    fn to_chalk(self, _db: &impl HirDatabase) -> chalk_ir::TypeId {\n+        chalk_ir::TypeId(id_to_chalk(self))\n+    }\n+\n+    fn from_chalk(_db: &impl HirDatabase, type_alias_id: chalk_ir::TypeId) -> TypeAliasId {\n+        id_from_chalk(type_alias_id.0)\n+    }\n+}\n+\n impl ToChalk for AssocTyValue {\n     type Chalk = chalk_rust_ir::AssociatedTyValueId;\n "}]}