{"sha": "c61f22932d12bac42db554dff96d6a5b74860990", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MWYyMjkzMmQxMmJhYzQyZGI1NTRkZmY5NmQ2YTViNzQ4NjA5OTA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-04-21T19:36:57Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-04-28T18:36:34Z"}, "message": "Let the translation item collector make a distinction between drop-glue kinds", "tree": {"sha": "af2a5f7028962b5c4d016568e32dbcc1c3c13be6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af2a5f7028962b5c4d016568e32dbcc1c3c13be6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c61f22932d12bac42db554dff96d6a5b74860990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c61f22932d12bac42db554dff96d6a5b74860990", "html_url": "https://github.com/rust-lang/rust/commit/c61f22932d12bac42db554dff96d6a5b74860990", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c61f22932d12bac42db554dff96d6a5b74860990/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea6b3ddee9663e27221f366671261b21618394a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea6b3ddee9663e27221f366671261b21618394a0", "html_url": "https://github.com/rust-lang/rust/commit/ea6b3ddee9663e27221f366671261b21618394a0"}], "stats": {"total": 87, "additions": 55, "deletions": 32}, "files": [{"sha": "3dbcd8c05be3eb03c77d2edf1431c0dd471c8c1d", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c61f22932d12bac42db554dff96d6a5b74860990/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f22932d12bac42db554dff96d6a5b74860990/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=c61f22932d12bac42db554dff96d6a5b74860990", "patch": "@@ -211,7 +211,7 @@ use base::{custom_coerce_unsize_info, llvm_linkage_by_name};\n use context::CrateContext;\n use common::{fulfill_obligation, normalize_and_test_predicates,\n                     type_is_sized};\n-use glue;\n+use glue::{self, DropGlueKind};\n use llvm;\n use meth;\n use monomorphize::{self, Instance};\n@@ -227,7 +227,7 @@ pub enum TransItemCollectionMode {\n \n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n pub enum TransItem<'tcx> {\n-    DropGlue(Ty<'tcx>),\n+    DropGlue(DropGlueKind<'tcx>),\n     Fn(Instance<'tcx>),\n     Static(NodeId)\n }\n@@ -326,7 +326,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(ccx: &CrateContext<'a, 'tcx>,\n             let def_id = ccx.tcx().map.local_def_id(node_id);\n             let ty = ccx.tcx().lookup_item_type(def_id).ty;\n             let ty = glue::get_drop_glue_type(ccx, ty);\n-            neighbors.push(TransItem::DropGlue(ty));\n+            neighbors.push(TransItem::DropGlue(DropGlueKind::Ty(ty)));\n             recursion_depth_reset = None;\n         }\n         TransItem::Fn(instance) => {\n@@ -485,7 +485,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                                                       &ty);\n             let ty = self.ccx.tcx().erase_regions(&ty);\n             let ty = glue::get_drop_glue_type(self.ccx, ty);\n-            self.output.push(TransItem::DropGlue(ty));\n+            self.output.push(TransItem::DropGlue(DropGlueKind::Ty(ty)));\n         }\n \n         self.super_lvalue(lvalue, context);\n@@ -575,9 +575,17 @@ fn can_have_local_instance<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n }\n \n fn find_drop_glue_neighbors<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                      ty: ty::Ty<'tcx>,\n-                                      output: &mut Vec<TransItem<'tcx>>)\n-{\n+                                      dg: DropGlueKind<'tcx>,\n+                                      output: &mut Vec<TransItem<'tcx>>) {\n+    let ty = match dg {\n+        DropGlueKind::Ty(ty) => ty,\n+        DropGlueKind::TyContents(_) => {\n+            // We already collected the neighbors of this item via the\n+            // DropGlueKind::Ty variant.\n+            return\n+        }\n+    };\n+\n     debug!(\"find_drop_glue_neighbors: {}\", type_to_string(ccx, ty));\n \n     // Make sure the exchange_free_fn() lang-item gets translated if\n@@ -634,6 +642,10 @@ fn find_drop_glue_neighbors<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                                   &Substs::empty());\n             output.push(trans_item);\n         }\n+\n+        // This type has a Drop implementation, we'll need the contents-only\n+        // version of the glue too.\n+        output.push(TransItem::DropGlue(DropGlueKind::TyContents(ty)));\n     }\n \n     // Finally add the types of nested values\n@@ -661,30 +673,30 @@ fn find_drop_glue_neighbors<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                 let field_type = glue::get_drop_glue_type(ccx, field_type);\n \n                 if glue::type_needs_drop(ccx.tcx(), field_type) {\n-                    output.push(TransItem::DropGlue(field_type));\n+                    output.push(TransItem::DropGlue(DropGlueKind::Ty(field_type)));\n                 }\n             }\n         }\n         ty::TyClosure(_, ref substs) => {\n             for upvar_ty in &substs.upvar_tys {\n                 let upvar_ty = glue::get_drop_glue_type(ccx, upvar_ty);\n                 if glue::type_needs_drop(ccx.tcx(), upvar_ty) {\n-                    output.push(TransItem::DropGlue(upvar_ty));\n+                    output.push(TransItem::DropGlue(DropGlueKind::Ty(upvar_ty)));\n                 }\n             }\n         }\n         ty::TyBox(inner_type)      |\n         ty::TyArray(inner_type, _) => {\n             let inner_type = glue::get_drop_glue_type(ccx, inner_type);\n             if glue::type_needs_drop(ccx.tcx(), inner_type) {\n-                output.push(TransItem::DropGlue(inner_type));\n+                output.push(TransItem::DropGlue(DropGlueKind::Ty(inner_type)));\n             }\n         }\n         ty::TyTuple(ref args) => {\n             for arg in args {\n                 let arg = glue::get_drop_glue_type(ccx, arg);\n                 if glue::type_needs_drop(ccx.tcx(), arg) {\n-                    output.push(TransItem::DropGlue(arg));\n+                    output.push(TransItem::DropGlue(DropGlueKind::Ty(arg)));\n                 }\n             }\n         }\n@@ -1000,7 +1012,7 @@ impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n                                                 self.ccx.tcx().map.local_def_id(item.id)));\n \n                         let ty = glue::get_drop_glue_type(self.ccx, ty);\n-                        self.output.push(TransItem::DropGlue(ty));\n+                        self.output.push(TransItem::DropGlue(DropGlueKind::Ty(ty)));\n                     }\n                 }\n             }\n@@ -1413,10 +1425,13 @@ impl<'tcx> TransItem<'tcx> {\n         let hir_map = &ccx.tcx().map;\n \n         return match *self {\n-            TransItem::DropGlue(t) => {\n+            TransItem::DropGlue(dg) => {\n                 let mut s = String::with_capacity(32);\n-                s.push_str(\"drop-glue \");\n-                push_unique_type_name(ccx, t, &mut s);\n+                match dg {\n+                    DropGlueKind::Ty(_) => s.push_str(\"drop-glue \"),\n+                    DropGlueKind::TyContents(_) => s.push_str(\"drop-glue-contents \"),\n+                };\n+                push_unique_type_name(ccx, dg.ty(), &mut s);\n                 s\n             }\n             TransItem::Fn(instance) => {\n@@ -1442,8 +1457,8 @@ impl<'tcx> TransItem<'tcx> {\n \n     fn to_raw_string(&self) -> String {\n         match *self {\n-            TransItem::DropGlue(t) => {\n-                format!(\"DropGlue({})\", t as *const _ as usize)\n+            TransItem::DropGlue(dg) => {\n+                format!(\"DropGlue({})\", dg.ty() as *const _ as usize)\n             }\n             TransItem::Fn(instance) => {\n                 format!(\"Fn({:?}, {})\","}, {"sha": "06761a7016add15a5dbd03da7d12a13c456a8e53", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c61f22932d12bac42db554dff96d6a5b74860990/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f22932d12bac42db554dff96d6a5b74860990/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=c61f22932d12bac42db554dff96d6a5b74860990", "patch": "@@ -98,7 +98,7 @@ pub fn get_drop_glue_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // Even if there is no dtor for t, there might be one deeper down and we\n     // might need to pass in the vtable ptr.\n     if !type_is_sized(tcx, t) {\n-        return t\n+        return ccx.tcx().erase_regions(&t);\n     }\n \n     // FIXME (#22815): note that type_needs_drop conservatively\n@@ -121,10 +121,10 @@ pub fn get_drop_glue_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             if llsize_of_alloc(ccx, llty) == 0 {\n                 tcx.types.i8\n             } else {\n-                t\n+                ccx.tcx().erase_regions(&t)\n             }\n         }\n-        _ => t\n+        _ => ccx.tcx().erase_regions(&t)\n     }\n }\n \n@@ -215,11 +215,11 @@ pub enum DropGlueKind<'tcx> {\n }\n \n impl<'tcx> DropGlueKind<'tcx> {\n-    fn ty(&self) -> Ty<'tcx> {\n+    pub fn ty(&self) -> Ty<'tcx> {\n         match *self { DropGlueKind::Ty(t) | DropGlueKind::TyContents(t) => t }\n     }\n \n-    fn map_ty<F>(&self, mut f: F) -> DropGlueKind<'tcx> where F: FnMut(Ty<'tcx>) -> Ty<'tcx>\n+    pub fn map_ty<F>(&self, mut f: F) -> DropGlueKind<'tcx> where F: FnMut(Ty<'tcx>) -> Ty<'tcx>\n     {\n         match *self {\n             DropGlueKind::Ty(t) => DropGlueKind::Ty(f(t)),\n@@ -487,14 +487,13 @@ pub fn size_and_align_of_dst<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n \n fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueKind<'tcx>)\n                               -> Block<'blk, 'tcx> {\n-    let t = g.ty();\n-\n     if collector::collecting_debug_information(bcx.ccx()) {\n         bcx.ccx()\n-           .record_translation_item_as_generated(TransItem::DropGlue(bcx.tcx()\n-                                                                        .erase_regions(&t)));\n+           .record_translation_item_as_generated(TransItem::DropGlue(g));\n     }\n \n+    let t = g.ty();\n+\n     let skip_dtor = match g { DropGlueKind::Ty(_) => false, DropGlueKind::TyContents(_) => true };\n     // NB: v0 is an *alias* of type t here, not a direct value.\n     let _icx = push_ctxt(\"make_drop_glue\");"}, {"sha": "d482814961fbc726d4a7036d3db3bfb91d75bf01", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61f22932d12bac42db554dff96d6a5b74860990/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f22932d12bac42db554dff96d6a5b74860990/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=c61f22932d12bac42db554dff96d6a5b74860990", "patch": "@@ -304,7 +304,7 @@ fn characteristic_def_id_of_trans_item<'tcx>(tcx: &TyCtxt<'tcx>,\n \n             Some(instance.def)\n         }\n-        TransItem::DropGlue(t) => characteristic_def_id_of_type(t),\n+        TransItem::DropGlue(dg) => characteristic_def_id_of_type(dg.ty()),\n         TransItem::Static(node_id) => Some(tcx.map.local_def_id(node_id)),\n     }\n }"}, {"sha": "6da8154540574f9cc73616d7fa7520bc26a5f2f6", "filename": "src/test/codegen-units/item-collection/generic-drop-glue.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c61f22932d12bac42db554dff96d6a5b74860990/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f22932d12bac42db554dff96d6a5b74860990/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs?ref=c61f22932d12bac42db554dff96d6a5b74860990", "patch": "@@ -46,19 +46,22 @@ struct NonGenericNoDrop(i32);\n \n struct NonGenericWithDrop(i32);\n //~ TRANS_ITEM drop-glue generic_drop_glue::NonGenericWithDrop[0]\n+//~ TRANS_ITEM drop-glue-contents generic_drop_glue::NonGenericWithDrop[0]\n \n impl Drop for NonGenericWithDrop {\n+    //~ TRANS_ITEM fn generic_drop_glue::{{impl}}[2]::drop[0]\n     fn drop(&mut self) {}\n-//~ TRANS_ITEM fn generic_drop_glue::{{impl}}[2]::drop[0]\n }\n \n //~ TRANS_ITEM fn generic_drop_glue::main[0]\n fn main() {\n     //~ TRANS_ITEM drop-glue generic_drop_glue::StructWithDrop[0]<i8, char>\n+    //~ TRANS_ITEM drop-glue-contents generic_drop_glue::StructWithDrop[0]<i8, char>\n     //~ TRANS_ITEM fn generic_drop_glue::{{impl}}[0]::drop[0]<i8, char>\n     let _ = StructWithDrop { x: 0i8, y: 'a' }.x;\n \n     //~ TRANS_ITEM drop-glue generic_drop_glue::StructWithDrop[0]<&str, generic_drop_glue::NonGenericNoDrop[0]>\n+    //~ TRANS_ITEM drop-glue-contents generic_drop_glue::StructWithDrop[0]<&str, generic_drop_glue::NonGenericNoDrop[0]>\n     //~ TRANS_ITEM fn generic_drop_glue::{{impl}}[0]::drop[0]<&str, generic_drop_glue::NonGenericNoDrop[0]>\n     let _ = StructWithDrop { x: \"&str\", y: NonGenericNoDrop(0) }.y;\n \n@@ -71,13 +74,15 @@ fn main() {\n     let _ = StructNoDrop { x: NonGenericWithDrop(0), y: 0f64 }.y;\n \n     //~ TRANS_ITEM drop-glue generic_drop_glue::EnumWithDrop[0]<i32, i64>\n+    //~ TRANS_ITEM drop-glue-contents generic_drop_glue::EnumWithDrop[0]<i32, i64>\n     //~ TRANS_ITEM fn generic_drop_glue::{{impl}}[1]::drop[0]<i32, i64>\n     let _ = match EnumWithDrop::A::<i32, i64>(0) {\n         EnumWithDrop::A(x) => x,\n         EnumWithDrop::B(x) => x as i32\n     };\n \n     //~ TRANS_ITEM drop-glue generic_drop_glue::EnumWithDrop[0]<f64, f32>\n+    //~ TRANS_ITEM drop-glue-contents generic_drop_glue::EnumWithDrop[0]<f64, f32>\n     //~ TRANS_ITEM fn generic_drop_glue::{{impl}}[1]::drop[0]<f64, f32>\n     let _ = match EnumWithDrop::B::<f64, f32>(1.0) {\n         EnumWithDrop::A(x) => x,"}, {"sha": "91be81a0b8996ab81dd806deef1a102cec6e8d5b", "filename": "src/test/codegen-units/item-collection/non-generic-drop-glue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61f22932d12bac42db554dff96d6a5b74860990/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f22932d12bac42db554dff96d6a5b74860990/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs?ref=c61f22932d12bac42db554dff96d6a5b74860990", "patch": "@@ -14,6 +14,7 @@\n #![deny(dead_code)]\n \n //~ TRANS_ITEM drop-glue non_generic_drop_glue::StructWithDrop[0]\n+//~ TRANS_ITEM drop-glue-contents non_generic_drop_glue::StructWithDrop[0]\n struct StructWithDrop {\n     x: i32\n }\n@@ -28,6 +29,7 @@ struct StructNoDrop {\n }\n \n //~ TRANS_ITEM drop-glue non_generic_drop_glue::EnumWithDrop[0]\n+//~ TRANS_ITEM drop-glue-contents non_generic_drop_glue::EnumWithDrop[0]\n enum EnumWithDrop {\n     A(i32)\n }"}, {"sha": "81a7059fe209f4c7099fd167c600b97bc91270b0", "filename": "src/test/codegen-units/item-collection/transitive-drop-glue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c61f22932d12bac42db554dff96d6a5b74860990/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f22932d12bac42db554dff96d6a5b74860990/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs?ref=c61f22932d12bac42db554dff96d6a5b74860990", "patch": "@@ -18,18 +18,16 @@ struct Root(Intermediate);\n //~ TRANS_ITEM drop-glue transitive_drop_glue::Intermediate[0]\n struct Intermediate(Leaf);\n //~ TRANS_ITEM drop-glue transitive_drop_glue::Leaf[0]\n+//~ TRANS_ITEM drop-glue-contents transitive_drop_glue::Leaf[0]\n struct Leaf;\n \n impl Drop for Leaf {\n     //~ TRANS_ITEM fn transitive_drop_glue::{{impl}}[0]::drop[0]\n     fn drop(&mut self) {}\n }\n \n-//~ TRANS_ITEM drop-glue transitive_drop_glue::Root[0]\n struct RootGen<T>(IntermediateGen<T>);\n-//~ TRANS_ITEM drop-glue transitive_drop_glue::Root[0]\n struct IntermediateGen<T>(LeafGen<T>);\n-//~ TRANS_ITEM drop-glue transitive_drop_glue::Root[0]\n struct LeafGen<T>(T);\n \n impl<T> Drop for LeafGen<T> {\n@@ -44,12 +42,14 @@ fn main() {\n     //~ TRANS_ITEM drop-glue transitive_drop_glue::RootGen[0]<u32>\n     //~ TRANS_ITEM drop-glue transitive_drop_glue::IntermediateGen[0]<u32>\n     //~ TRANS_ITEM drop-glue transitive_drop_glue::LeafGen[0]<u32>\n+    //~ TRANS_ITEM drop-glue-contents transitive_drop_glue::LeafGen[0]<u32>\n     //~ TRANS_ITEM fn transitive_drop_glue::{{impl}}[1]::drop[0]<u32>\n     let _ = RootGen(IntermediateGen(LeafGen(0u32)));\n \n     //~ TRANS_ITEM drop-glue transitive_drop_glue::RootGen[0]<i16>\n     //~ TRANS_ITEM drop-glue transitive_drop_glue::IntermediateGen[0]<i16>\n     //~ TRANS_ITEM drop-glue transitive_drop_glue::LeafGen[0]<i16>\n+    //~ TRANS_ITEM drop-glue-contents transitive_drop_glue::LeafGen[0]<i16>\n     //~ TRANS_ITEM fn transitive_drop_glue::{{impl}}[1]::drop[0]<i16>\n     let _ = RootGen(IntermediateGen(LeafGen(0i16)));\n }"}, {"sha": "ef4bc1dca594cc6174d0aa355841df65cbb2e987", "filename": "src/test/codegen-units/item-collection/tuple-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c61f22932d12bac42db554dff96d6a5b74860990/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f22932d12bac42db554dff96d6a5b74860990/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs?ref=c61f22932d12bac42db554dff96d6a5b74860990", "patch": "@@ -14,6 +14,7 @@\n #![deny(dead_code)]\n \n //~ TRANS_ITEM drop-glue tuple_drop_glue::Dropped[0]\n+//~ TRANS_ITEM drop-glue-contents tuple_drop_glue::Dropped[0]\n struct Dropped;\n \n impl Drop for Dropped {"}, {"sha": "bd57a09fadd349eb992078508ce455110d2b05e2", "filename": "src/test/codegen-units/partitioning/extern-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61f22932d12bac42db554dff96d6a5b74860990/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f22932d12bac42db554dff96d6a5b74860990/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs?ref=c61f22932d12bac42db554dff96d6a5b74860990", "patch": "@@ -18,6 +18,7 @@\n extern crate cgu_extern_drop_glue;\n \n //~ TRANS_ITEM drop-glue cgu_extern_drop_glue::Struct[0] @@ extern_drop_glue[OnceODR] extern_drop_glue-mod1[OnceODR]\n+//~ TRANS_ITEM drop-glue-contents cgu_extern_drop_glue::Struct[0] @@ extern_drop_glue[OnceODR] extern_drop_glue-mod1[OnceODR]\n \n struct LocalStruct(cgu_extern_drop_glue::Struct);\n \n@@ -40,4 +41,3 @@ mod mod1 {\n         let _ = LocalStruct(cgu_extern_drop_glue::Struct(0));\n     }\n }\n-"}, {"sha": "a42a34a0766b71fb2b1dd2ef063b1e1a266708f7", "filename": "src/test/codegen-units/partitioning/local-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c61f22932d12bac42db554dff96d6a5b74860990/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f22932d12bac42db554dff96d6a5b74860990/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs?ref=c61f22932d12bac42db554dff96d6a5b74860990", "patch": "@@ -15,6 +15,7 @@\n #![crate_type=\"lib\"]\n \n //~ TRANS_ITEM drop-glue local_drop_glue::Struct[0] @@ local_drop_glue[OnceODR] local_drop_glue-mod1[OnceODR]\n+//~ TRANS_ITEM drop-glue-contents local_drop_glue::Struct[0] @@ local_drop_glue[OnceODR] local_drop_glue-mod1[OnceODR]\n struct Struct {\n     _a: u32\n }"}]}