{"sha": "a2ab7ee3bd255970421f53b20092995892408f22", "node_id": "C_kwDOAAsO6NoAKGEyYWI3ZWUzYmQyNTU5NzA0MjFmNTNiMjAwOTI5OTU4OTI0MDhmMjI", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2023-04-27T02:03:13Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2023-04-27T02:03:13Z"}, "message": "Address code review comments", "tree": {"sha": "6ff7d1ee570b7c9804d86235c69cc1b1ac220eaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ff7d1ee570b7c9804d86235c69cc1b1ac220eaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2ab7ee3bd255970421f53b20092995892408f22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ab7ee3bd255970421f53b20092995892408f22", "html_url": "https://github.com/rust-lang/rust/commit/a2ab7ee3bd255970421f53b20092995892408f22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2ab7ee3bd255970421f53b20092995892408f22/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "734fe66f71a237f9bfdf3b8d235fceda8a114c64", "url": "https://api.github.com/repos/rust-lang/rust/commits/734fe66f71a237f9bfdf3b8d235fceda8a114c64", "html_url": "https://github.com/rust-lang/rust/commit/734fe66f71a237f9bfdf3b8d235fceda8a114c64"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "26f3c192617e14d81a1239e2c9945e3de4225fdb", "filename": "crates/ide-assists/src/handlers/unwrap_result_return_type.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a2ab7ee3bd255970421f53b20092995892408f22/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funwrap_result_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ab7ee3bd255970421f53b20092995892408f22/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funwrap_result_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funwrap_result_return_type.rs?ref=a2ab7ee3bd255970421f53b20092995892408f22", "patch": "@@ -5,7 +5,7 @@ use ide_db::{\n use itertools::Itertools;\n use syntax::{\n     ast::{self, Expr},\n-    match_ast, AstNode, NodeOrToken, SyntaxKind, TextRange, TextSize,\n+    match_ast, AstNode, NodeOrToken, SyntaxKind, TextRange,\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -71,10 +71,7 @@ pub(crate) fn unwrap_result_return_type(acc: &mut Assists, ctx: &AssistContext<'\n \n                 if let Some(NodeOrToken::Token(token)) = ret_type.syntax().next_sibling_or_token() {\n                     if token.kind() == SyntaxKind::WHITESPACE {\n-                        text_range = TextRange::new(\n-                            text_range.start(),\n-                            text_range.end() + TextSize::from(1u32),\n-                        );\n+                        text_range = TextRange::new(text_range.start(), token.text_range().end());\n                     }\n                 }\n \n@@ -134,11 +131,11 @@ fn tail_cb_impl(acc: &mut Vec<ast::Expr>, e: &ast::Expr) {\n // Tries to extract `T` from `Result<T, E>`.\n fn unwrap_result_type(ty: &ast::Type) -> Option<ast::Type> {\n     let ast::Type::PathType(path_ty) = ty else { return None; };\n-    let Some(path) = path_ty.path() else { return None; };\n-    let Some(segment) = path.first_segment() else { return None; };\n-    let Some(generic_arg_list) = segment.generic_arg_list() else { return None; };\n+    let path = path_ty.path()?;\n+    let segment = path.first_segment()?;\n+    let generic_arg_list = segment.generic_arg_list()?;\n     let generic_args: Vec<_> = generic_arg_list.generic_args().collect();\n-    let Some(ast::GenericArg::TypeArg(ok_type)) = generic_args.first() else { return None; };\n+    let ast::GenericArg::TypeArg(ok_type) = generic_args.first()? else { return None; };\n     ok_type.ty()\n }\n "}]}