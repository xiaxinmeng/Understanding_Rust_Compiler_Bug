{"sha": "9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMDVmYjI5ZDIyYTcyNzViN2I3ZDUyYjJkNWQ1NzdjMGI1MDVhZDE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-06-11T15:47:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-07-08T09:42:57Z"}, "message": "Merge PatKind::QPath into PatKind::Path in HIR", "tree": {"sha": "f02173674abb3cfa22bf0553557aede83b60a04f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f02173674abb3cfa22bf0553557aede83b60a04f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "html_url": "https://github.com/rust-lang/rust/commit/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a397b60ebba531fb4de7e88111e0d489e44c549e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a397b60ebba531fb4de7e88111e0d489e44c549e", "html_url": "https://github.com/rust-lang/rust/commit/a397b60ebba531fb4de7e88111e0d489e44c549e"}], "stats": {"total": 95, "additions": 40, "deletions": 55}, "files": [{"sha": "601d3866b02d452be8808bcb3db6c936fa03d771", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -101,7 +101,6 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n         match pat.node {\n             PatKind::Binding(_, _, None) |\n             PatKind::Path(..) |\n-            PatKind::QPath(..) |\n             PatKind::Lit(..) |\n             PatKind::Range(..) |\n             PatKind::Wild => {"}, {"sha": "5e0e6622185f8b50336cc4409b033a5be0f4793b", "filename": "src/librustc/hir/fold.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fhir%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fhir%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Ffold.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -930,12 +930,11 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n                     PatKind::TupleStruct(folder.fold_path(pth),\n                             pats.move_map(|x| folder.fold_pat(x)), ddpos)\n                 }\n-                PatKind::Path(pth) => {\n-                    PatKind::Path(folder.fold_path(pth))\n-                }\n-                PatKind::QPath(qself, pth) => {\n-                    let qself = QSelf { ty: folder.fold_ty(qself.ty), ..qself };\n-                    PatKind::QPath(qself, folder.fold_path(pth))\n+                PatKind::Path(opt_qself, pth) => {\n+                    let opt_qself = opt_qself.map(|qself| {\n+                        QSelf { ty: folder.fold_ty(qself.ty), position: qself.position }\n+                    });\n+                    PatKind::Path(opt_qself, folder.fold_path(pth))\n                 }\n                 PatKind::Struct(pth, fields, etc) => {\n                     let pth = folder.fold_path(pth);"}, {"sha": "442c85af22a262967f707484de232e8b06c443ef", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -460,11 +460,10 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n             visitor.visit_path(path, pattern.id);\n             walk_list!(visitor, visit_pat, children);\n         }\n-        PatKind::Path(ref path) => {\n-            visitor.visit_path(path, pattern.id);\n-        }\n-        PatKind::QPath(ref qself, ref path) => {\n-            visitor.visit_ty(&qself.ty);\n+        PatKind::Path(ref opt_qself, ref path) => {\n+            if let Some(ref qself) = *opt_qself {\n+                visitor.visit_ty(&qself.ty);\n+            }\n             visitor.visit_path(path, pattern.id)\n         }\n         PatKind::Struct(ref path, ref fields, _) => {"}, {"sha": "3e6a82ed476174e8430987fbc1850c363a1cd874", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -862,7 +862,8 @@ impl<'a> LoweringContext<'a> {\n                                                       respan(pth1.span, pth1.node.name),\n                                                       sub.as_ref().map(|x| this.lower_pat(x)))\n                             }\n-                            _ => hir::PatKind::Path(hir::Path::from_name(pth1.span, pth1.node.name))\n+                            _ => hir::PatKind::Path(None, hir::Path::from_name(pth1.span,\n+                                                                               pth1.node.name))\n                         }\n                     })\n                 }\n@@ -872,15 +873,11 @@ impl<'a> LoweringContext<'a> {\n                                               pats.iter().map(|x| self.lower_pat(x)).collect(),\n                                               ddpos)\n                 }\n-                PatKind::Path(None, ref pth) => {\n-                    hir::PatKind::Path(self.lower_path(pth))\n-                }\n-                PatKind::Path(Some(ref qself), ref pth) => {\n-                    let qself = hir::QSelf {\n-                        ty: self.lower_ty(&qself.ty),\n-                        position: qself.position,\n-                    };\n-                    hir::PatKind::QPath(qself, self.lower_path(pth))\n+                PatKind::Path(ref opt_qself, ref path) => {\n+                    let opt_qself = opt_qself.map(|qself| {\n+                        hir::QSelf { ty: self.lower_ty(&qself.ty), position: qself.position }\n+                    });\n+                    hir::PatKind::Path(opt_qself, self.lower_path(path))\n                 }\n                 PatKind::Struct(ref pth, ref fields, etc) => {\n                     let pth = self.lower_path(pth);\n@@ -1831,7 +1828,7 @@ impl<'a> LoweringContext<'a> {\n                 -> P<hir::Pat> {\n         let def = self.resolver.resolve_generated_global_path(&path, true);\n         let pt = if subpats.is_empty() {\n-            hir::PatKind::Path(path)\n+            hir::PatKind::Path(None, path)\n         } else {\n             hir::PatKind::TupleStruct(path, subpats, None)\n         };"}, {"sha": "655f80ec07238ff9ba97fdb99057415fd6dec35b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -487,8 +487,7 @@ impl Pat {\n             PatKind::Lit(_) |\n             PatKind::Range(_, _) |\n             PatKind::Binding(..) |\n-            PatKind::Path(..) |\n-            PatKind::QPath(_, _) => {\n+            PatKind::Path(..) => {\n                 true\n             }\n         }\n@@ -538,15 +537,9 @@ pub enum PatKind {\n     /// 0 <= position <= subpats.len()\n     TupleStruct(Path, HirVec<P<Pat>>, Option<usize>),\n \n-    /// A path pattern.\n+    /// A possibly qualified path pattern.\n     /// Such pattern can be resolved to a unit struct/variant or a constant.\n-    Path(Path),\n-\n-    /// An associated const named using the qualified path `<T>::CONST` or\n-    /// `<T as Trait>::CONST`. Associated consts from inherent impls can be\n-    /// referred to as simply `T::CONST`, in which case they will end up as\n-    /// PatKind::Path, and the resolver will have to sort that out.\n-    QPath(QSelf, Path),\n+    Path(Option<QSelf>, Path),\n \n     /// A tuple pattern `(a, b)`.\n     /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position."}, {"sha": "593d10ef4f7c4a9910c020b9a4218dc5f345fbba", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -53,7 +53,7 @@ impl<T: ExactSizeIterator> EnumerateAndAdjustIterator for T {\n \n pub fn pat_is_refutable(dm: &DefMap, pat: &hir::Pat) -> bool {\n     match pat.node {\n-        PatKind::Lit(_) | PatKind::Range(_, _) | PatKind::QPath(..) => true,\n+        PatKind::Lit(_) | PatKind::Range(_, _) | PatKind::Path(Some(..), _) => true,\n         PatKind::TupleStruct(..) |\n         PatKind::Path(..) |\n         PatKind::Struct(..) => {\n@@ -69,7 +69,7 @@ pub fn pat_is_refutable(dm: &DefMap, pat: &hir::Pat) -> bool {\n \n pub fn pat_is_const(dm: &DefMap, pat: &hir::Pat) -> bool {\n     match pat.node {\n-        PatKind::Path(..) | PatKind::QPath(..) => {\n+        PatKind::Path(..) => {\n             match dm.get(&pat.id).map(|d| d.full_def()) {\n                 Some(Def::Const(..)) | Some(Def::AssociatedConst(..)) => true,\n                 _ => false"}, {"sha": "5f2fac5c01b30df8b719ef301e13cafde1a1cbbd", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -1750,10 +1750,10 @@ impl<'a> State<'a> {\n                 }\n                 try!(self.pclose());\n             }\n-            PatKind::Path(ref path) => {\n+            PatKind::Path(None, ref path) => {\n                 self.print_path(path, true, 0)?;\n             }\n-            PatKind::QPath(ref qself, ref path) => {\n+            PatKind::Path(Some(ref qself), ref path) => {\n                 self.print_qpath(path, qself, false)?;\n             }\n             PatKind::Struct(ref path, ref fields, etc) => {"}, {"sha": "28bfb460a14faf75c9fdbbe10fb5a195cfc3e600", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -1193,7 +1193,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             }\n           }\n \n-          PatKind::Path(..) | PatKind::QPath(..) | PatKind::Binding(_, _, None) |\n+          PatKind::Path(..) | PatKind::Binding(_, _, None) |\n           PatKind::Lit(..) | PatKind::Range(..) | PatKind::Wild => {\n             // always ok\n           }"}, {"sha": "866a91b4d95100d81bbee6b850795114db49d77d", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -489,7 +489,7 @@ impl<'map> IdVisitingOperation for RenamingRecorder<'map> {\n impl<'a, 'tcx> Folder for StaticInliner<'a, 'tcx> {\n     fn fold_pat(&mut self, pat: P<Pat>) -> P<Pat> {\n         return match pat.node {\n-            PatKind::Path(..) | PatKind::QPath(..) => {\n+            PatKind::Path(..) => {\n                 match self.tcx.expect_def(pat.id) {\n                     Def::AssociatedConst(did) | Def::Const(did) => {\n                         let substs = Some(self.tcx.node_id_item_substs(pat.id).substs);\n@@ -583,7 +583,7 @@ fn construct_witness<'a,'tcx>(cx: &MatchCheckCtxt<'a,'tcx>, ctor: &Constructor,\n                     PatKind::TupleStruct(def_to_path(cx.tcx, v.did), pats.collect(), None)\n                 }\n                 VariantKind::Unit => {\n-                    PatKind::Path(def_to_path(cx.tcx, v.did))\n+                    PatKind::Path(None, def_to_path(cx.tcx, v.did))\n                 }\n             }\n         }\n@@ -784,7 +784,7 @@ fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,\n                     left_ty: Ty, max_slice_length: usize) -> Vec<Constructor> {\n     let pat = raw_pat(p);\n     match pat.node {\n-        PatKind::Struct(..) | PatKind::TupleStruct(..) | PatKind::Path(..) | PatKind::QPath(..) =>\n+        PatKind::Struct(..) | PatKind::TupleStruct(..) | PatKind::Path(..) =>\n             match cx.tcx.expect_def(pat.id) {\n                 Def::Variant(_, id) => vec![Variant(id)],\n                 Def::Struct(..) | Def::TyAlias(..) | Def::AssociatedTy(..) => vec![Single],\n@@ -895,7 +895,7 @@ pub fn specialize<'a, 'b, 'tcx>(\n         PatKind::Binding(..) | PatKind::Wild =>\n             Some(vec![dummy_pat; arity]),\n \n-        PatKind::Path(..) | PatKind::QPath(..) => {\n+        PatKind::Path(..) => {\n             match cx.tcx.expect_def(pat_id) {\n                 Def::Const(..) | Def::AssociatedConst(..) =>\n                     span_bug!(pat_span, \"const pattern should've \\"}, {"sha": "a3c707e82a0ff45e45be5c74e951c184296f8cb5", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -323,7 +323,7 @@ pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         hir::ExprPath(_, ref path) => {\n             match tcx.expect_def(expr.id) {\n-                Def::Struct(..) | Def::Variant(..) => PatKind::Path(path.clone()),\n+                Def::Struct(..) | Def::Variant(..) => PatKind::Path(None, path.clone()),\n                 Def::Const(def_id) | Def::AssociatedConst(def_id) => {\n                     let substs = Some(tcx.node_id_item_substs(expr.id).substs);\n                     let (expr, _ty) = lookup_const_by_id(tcx, def_id, substs).unwrap();"}, {"sha": "15914838acf0db85289b97ececd3fa5c90696a4b", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -360,7 +360,7 @@ impl LateLintPass for NonUpperCaseGlobals {\n \n     fn check_pat(&mut self, cx: &LateContext, p: &hir::Pat) {\n         // Lint for constants that look like binding identifiers (#7526)\n-        if let PatKind::Path(ref path) = p.node {\n+        if let PatKind::Path(None, ref path) = p.node {\n             if !path.global && path.segments.len() == 1 && path.segments[0].parameters.is_empty() {\n                 if let Def::Const(..) = cx.tcx.expect_def(p.id) {\n                     NonUpperCaseGlobals::check_upper_case(cx, \"constant in pattern\","}, {"sha": "c54c8bfb5981ed6d8469510cc76c47a212992f36", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -76,7 +76,7 @@ impl<'patcx, 'cx, 'gcx, 'tcx> PatCx<'patcx, 'cx, 'gcx, 'tcx> {\n                 PatternKind::Range { lo: lo, hi: hi }\n             },\n \n-            PatKind::Path(..) | PatKind::QPath(..) => {\n+            PatKind::Path(..) => {\n                 match self.cx.tcx.expect_def(pat.id) {\n                     Def::Const(def_id) | Def::AssociatedConst(def_id) => {\n                         let tcx = self.cx.tcx.global_tcx();"}, {"sha": "08e894ffbcfd48c4e37fde4d75f6565713c79f80", "filename": "src/librustc_trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc_trans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc_trans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2F_match.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -2003,7 +2003,7 @@ pub fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                         cleanup_scope)\n                 });\n         }\n-        PatKind::Path(..) | PatKind::QPath(..) | PatKind::Wild |\n+        PatKind::Path(..) | PatKind::Wild |\n         PatKind::Lit(..) | PatKind::Range(..) => ()\n     }\n     return bcx;"}, {"sha": "0b75402486812b4706706c1363a284cdd2341ffd", "filename": "src/librustc_trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -313,7 +313,7 @@ fn walk_pattern(cx: &CrateContext,\n             }\n         }\n \n-        PatKind::Path(..) | PatKind::QPath(..) => {\n+        PatKind::Path(..) => {\n             scope_map.insert(pat.id, scope_stack.last().unwrap().scope_metadata);\n         }\n "}, {"sha": "e4ed4c1c0b1368ebdf7a3da6e22ac69cd4159eae", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -168,11 +168,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             PatKind::TupleStruct(ref path, ref subpats, ddpos) => {\n                 self.check_pat_tuple_struct(pat, path, &subpats, ddpos, expected);\n             }\n-            PatKind::Path(ref path) => {\n-                self.check_pat_path(pat, None, path, expected);\n-            }\n-            PatKind::QPath(ref qself, ref path) => {\n-                self.check_pat_path(pat, Some(self.to_ty(&qself.ty)), path, expected);\n+            PatKind::Path(ref opt_qself, ref path) => {\n+                let opt_qself_ty = opt_qself.as_ref().map(|qself| self.to_ty(&qself.ty));\n+                self.check_pat_path(pat, opt_qself_ty, path, expected);\n             }\n             PatKind::Struct(ref path, ref fields, etc) => {\n                 self.check_pat_struct(pat, path, fields, etc, expected);"}, {"sha": "c33e8159d19c4b7747f118274f013b18836d6bf7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9c05fb29d22a7275b7b7d52b2d5d577c0b505ad1", "patch": "@@ -2578,9 +2578,9 @@ fn name_from_pat(p: &hir::Pat) -> String {\n     match p.node {\n         PatKind::Wild => \"_\".to_string(),\n         PatKind::Binding(_, ref p, _) => p.node.to_string(),\n-        PatKind::TupleStruct(ref p, _, _) | PatKind::Path(ref p) => path_to_string(p),\n-        PatKind::QPath(..) => panic!(\"tried to get argument name from PatKind::QPath, \\\n-                                which is not allowed in function arguments\"),\n+        PatKind::TupleStruct(ref p, _, _) | PatKind::Path(None, ref p) => path_to_string(p),\n+        PatKind::Path(..) => panic!(\"tried to get argument name from qualified PatKind::Path, \\\n+                                     which is not allowed in function arguments\"),\n         PatKind::Struct(ref name, ref fields, etc) => {\n             format!(\"{} {{ {}{} }}\", path_to_string(name),\n                 fields.iter().map(|&Spanned { node: ref fp, .. }|"}]}