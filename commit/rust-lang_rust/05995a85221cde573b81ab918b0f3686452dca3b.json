{"sha": "05995a85221cde573b81ab918b0f3686452dca3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1OTk1YTg1MjIxY2RlNTczYjgxYWI5MThiMGYzNjg2NDUyZGNhM2I=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-02T17:48:24Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-24T00:24:40Z"}, "message": "Introduce `TyKind::Placeholder` variant", "tree": {"sha": "b1886c58d3b37a5fdaa0e5e689cf111bd3c9d9ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1886c58d3b37a5fdaa0e5e689cf111bd3c9d9ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05995a85221cde573b81ab918b0f3686452dca3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05995a85221cde573b81ab918b0f3686452dca3b", "html_url": "https://github.com/rust-lang/rust/commit/05995a85221cde573b81ab918b0f3686452dca3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05995a85221cde573b81ab918b0f3686452dca3b/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7401e3def59452e795468d4d5e4f30c7ef100fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/7401e3def59452e795468d4d5e4f30c7ef100fec", "html_url": "https://github.com/rust-lang/rust/commit/7401e3def59452e795468d4d5e4f30c7ef100fec"}], "stats": {"total": 59, "additions": 46, "deletions": 13}, "files": [{"sha": "4b465c7ad54a94e41b3c31d11dbd75db55b4c8d5", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -687,6 +687,9 @@ for ty::TyKind<'gcx>\n             Bound(bound_ty) => {\n                 bound_ty.hash_stable(hcx, hasher);\n             }\n+            ty::Placeholder(placeholder_ty) => {\n+                placeholder_ty.hash_stable(hcx, hasher);\n+            }\n             Foreign(def_id) => {\n                 def_id.hash_stable(hcx, hasher);\n             }"}, {"sha": "a3cbae2ff71c10943d433b362751f22bbfd42d34", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -380,6 +380,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n             | ty::Never\n             | ty::Tuple(..)\n             | ty::Projection(..)\n+            | ty::Placeholder(..)\n             | ty::UnnormalizedProjection(..)\n             | ty::Foreign(..)\n             | ty::Param(..)"}, {"sha": "d17cf0c7b47a4f54592509a44b4ea47eb19441d7", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -170,9 +170,6 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n                 t\n             }\n \n-            ty::Bound(..) =>\n-                bug!(\"encountered bound ty during freshening\"),\n-\n             ty::Generator(..) |\n             ty::Bool |\n             ty::Char |\n@@ -200,6 +197,9 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n             ty::Opaque(..) => {\n                 t.super_fold_with(self)\n             }\n+\n+            ty::Placeholder(..) |\n+            ty::Bound(..) => bug!(\"unexpected type {:?}\", t),\n         }\n     }\n }"}, {"sha": "b7a84c99308f8cfbddc2affe8ca39933b6f0e934", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -455,7 +455,7 @@ fn ty_is_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> bool {\n             false\n         }\n \n-        ty::Bound(..) | ty::Infer(..) => match in_crate {\n+        ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) => match in_crate {\n             InCrate::Local => false,\n             // The inference variable might be unified with a local\n             // type in that remote crate."}, {"sha": "7e97dc3c84a790536bb5c580dc561bfe887d815b", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -281,7 +281,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 ty::Generator(..) => Some(18),\n                 ty::Foreign(..) => Some(19),\n                 ty::GeneratorWitness(..) => Some(20),\n-                ty::Bound(..) | ty::Infer(..) | ty::Error => None,\n+                ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error => None,\n                 ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n             }\n         }"}, {"sha": "b8bf0fcc15307addcf3032c64740c3daaeda6315", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -251,6 +251,7 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'_, '_, 'tcx>, ty: Ty<'tcx>) ->\n         | ty::Projection(..)\n         | ty::Param(_)\n         | ty::Opaque(..)\n+        | ty::Placeholder(..)\n         | ty::Infer(_)\n         | ty::Bound(..)\n         | ty::Generator(..) => false,"}, {"sha": "6a91ad59d98e4ff33206f4732534ca0899b0eda5", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -2470,6 +2470,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::Infer(ty::TyVar(_)) => Ambiguous,\n \n             ty::UnnormalizedProjection(..)\n+            | ty::Placeholder(..)\n             | ty::Bound(_)\n             | ty::Infer(ty::FreshTy(_))\n             | ty::Infer(ty::FreshIntTy(_))\n@@ -2555,6 +2556,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             ty::UnnormalizedProjection(..)\n+            | ty::Placeholder(..)\n             | ty::Bound(_)\n             | ty::Infer(ty::FreshTy(_))\n             | ty::Infer(ty::FreshIntTy(_))\n@@ -2594,6 +2596,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             | ty::Char => Vec::new(),\n \n             ty::UnnormalizedProjection(..)\n+            | ty::Placeholder(..)\n             | ty::Dynamic(..)\n             | ty::Param(..)\n             | ty::Foreign(..)"}, {"sha": "d9d1b81fd8fe0ec4410b6f19750c312a74320289", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -2250,7 +2250,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     pub fn print_debug_stats(self) {\n         sty_debug_print!(\n             self,\n-            Adt, Array, Slice, RawPtr, Ref, FnDef, FnPtr,\n+            Adt, Array, Slice, RawPtr, Ref, FnDef, FnPtr, Placeholder,\n             Generator, GeneratorWitness, Dynamic, Closure, Tuple, Bound,\n             Param, Infer, UnnormalizedProjection, Projection, Opaque, Foreign);\n "}, {"sha": "e78759e3e79611b4e46a73228c2947b43a04960b", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -212,6 +212,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::Infer(ty::TyVar(_)) => \"inferred type\".into(),\n             ty::Infer(ty::IntVar(_)) => \"integral variable\".into(),\n             ty::Infer(ty::FloatVar(_)) => \"floating-point variable\".into(),\n+            ty::Placeholder(..) => \"placeholder type\".into(),\n             ty::Bound(_) |\n             ty::Infer(ty::FreshTy(_)) => \"fresh type\".into(),\n             ty::Infer(ty::FreshIntTy(_)) => \"fresh integral type\".into(),"}, {"sha": "8304e363815728a489cd1b5dec2d9d2cb8410dbe", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -122,7 +122,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::Foreign(def_id) => {\n             Some(ForeignSimplifiedType(def_id))\n         }\n-        ty::Bound(..) | ty::Infer(_) | ty::Error => None,\n+        ty::Placeholder(..) | ty::Bound(..) | ty::Infer(_) | ty::Error => None,\n     }\n }\n "}, {"sha": "9cdeb300393b9b3013fc25321665524d141d305e", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -74,6 +74,7 @@ impl FlagComputation {\n             &ty::Uint(_) |\n             &ty::Never |\n             &ty::Str |\n+            &ty::Placeholder(..) |\n             &ty::Foreign(..) => {\n             }\n "}, {"sha": "f6c90ab0a1ad2b04a4bb8fb49a2cf53d56b1ac0c", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -515,6 +515,7 @@ pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n         ty::Str |\n         ty::FnPtr(_) |\n         ty::Projection(_) |\n+        ty::Placeholder(..) |\n         ty::UnnormalizedProjection(..) |\n         ty::Param(_) |\n         ty::Opaque(..) |"}, {"sha": "5406495226d798cd041e7fc90d39739991773099", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -1159,6 +1159,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             }\n \n             ty::Bound(..) |\n+            ty::Placeholder(..) |\n             ty::UnnormalizedProjection(..) |\n             ty::GeneratorWitness(..) |\n             ty::Infer(_) => {\n@@ -1743,7 +1744,8 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n             }\n \n             ty::Projection(_) | ty::UnnormalizedProjection(..) | ty::Bound(..) |\n-            ty::Opaque(..) | ty::Param(_) | ty::Infer(_) | ty::Error => {\n+            ty::Placeholder(..) | ty::Opaque(..) | ty::Param(_) | ty::Infer(_) |\n+            ty::Error => {\n                 bug!(\"TyLayout::field_type: unexpected type `{}`\", this.ty)\n             }\n         })"}, {"sha": "baedbc8214976dfaa57340abdaf91d5c3c49eed0", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -2445,6 +2445,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 }\n             }\n \n+            Placeholder(..) |\n             Bound(..) |\n             Infer(..) => {\n                 bug!(\"unexpected type `{:?}` in sized_constraint_for_ty\","}, {"sha": "0e3fc62e4ca9aeb6f3cce9ce12c7e6476d795c32", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -155,6 +155,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::FnDef(..) |       // OutlivesFunction (*)\n             ty::FnPtr(_) |        // OutlivesFunction (*)\n             ty::Dynamic(..) |       // OutlivesObject, OutlivesFragment (*)\n+            ty::Placeholder(..) |\n             ty::Bound(..) |\n             ty::Error => {\n                 // (*) Bare functions and traits are both binders. In the"}, {"sha": "d6aeb288b5cdcbe2b533f94301eef4f57fb37b93", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -746,6 +746,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::Infer(_) |\n             ty::Param(..) |\n             ty::Bound(..) |\n+            ty::Placeholder(..) |\n             ty::Never |\n             ty::Foreign(..) => return self\n         };\n@@ -792,6 +793,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::Error |\n             ty::Infer(_) |\n             ty::Bound(..) |\n+            ty::Placeholder(..) |\n             ty::Param(..) |\n             ty::Never |\n             ty::Foreign(..) => false,"}, {"sha": "7e6673a3dcdc15a2e11e3a819b59b9eece845a72", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -203,6 +203,9 @@ pub enum TyKind<'tcx> {\n     /// Bound type variable, used only when preparing a trait query.\n     Bound(BoundTy),\n \n+    /// A placeholder type - universally quantified higher-ranked type.\n+    Placeholder(ty::PlaceholderType),\n+\n     /// A type variable used during type checking.\n     Infer(InferTy),\n \n@@ -1890,6 +1893,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             Foreign(..) |\n             Param(_) |\n             Bound(..) |\n+            Placeholder(..) |\n             Infer(_) |\n             Error => {}\n         }\n@@ -1954,6 +1958,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             ty::Infer(ty::TyVar(_)) => false,\n \n             ty::Bound(_) |\n+            ty::Placeholder(..) |\n             ty::Infer(ty::FreshTy(_)) |\n             ty::Infer(ty::FreshIntTy(_)) |\n             ty::Infer(ty::FreshFloatTy(_)) =>"}, {"sha": "f0885f960516d6c7ab7301335da3a8d5aff9caee", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -952,7 +952,7 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // Can refer to a type which may drop.\n         // FIXME(eddyb) check this against a ParamEnv.\n         ty::Dynamic(..) | ty::Projection(..) | ty::Param(_) | ty::Bound(..) |\n-        ty::Opaque(..) | ty::Infer(_) | ty::Error => true,\n+        ty::Placeholder(..) | ty::Opaque(..) | ty::Infer(_) | ty::Error => true,\n \n         ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n "}, {"sha": "82b95b9df603148f349d53f25ab7e0d89c0b37d5", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -82,7 +82,7 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n     match parent_ty.sty {\n         ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) |\n         ty::Str | ty::Infer(_) | ty::Param(_) | ty::Never | ty::Error |\n-        ty::Bound(..) | ty::Foreign(..) => {\n+        ty::Placeholder(..) | ty::Bound(..) | ty::Foreign(..) => {\n         }\n         ty::Array(ty, len) => {\n             push_const(stack, len);"}, {"sha": "6ae0793d9247120ee9c06793514a232902a1f8c0", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -259,6 +259,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                 ty::Never |\n                 ty::Param(_) |\n                 ty::Bound(..) |\n+                ty::Placeholder(..) |\n                 ty::Foreign(..) => {\n                     // WfScalar, WfParameter, etc\n                 }"}, {"sha": "0c424b344159d6e4934d6385150cd99c46a88802", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -18,7 +18,7 @@ use ty::{Bool, Char, Adt};\n use ty::{Error, Str, Array, Slice, Float, FnDef, FnPtr};\n use ty::{Param, Bound, RawPtr, Ref, Never, Tuple};\n use ty::{Closure, Generator, GeneratorWitness, Foreign, Projection, Opaque};\n-use ty::{UnnormalizedProjection, Dynamic, Int, Uint, Infer};\n+use ty::{Placeholder, UnnormalizedProjection, Dynamic, Int, Uint, Infer};\n use ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n use util::nodemap::FxHashSet;\n \n@@ -1144,6 +1144,9 @@ define_print! {\n                     data.print(f, cx)?;\n                     write!(f, \")\")\n                 }\n+                Placeholder(placeholder) => {\n+                    write!(f, \"Placeholder({:?})\", placeholder)\n+                }\n                 Opaque(def_id, substs) => {\n                     if cx.is_verbose {\n                         return write!(f, \"Opaque({:?}, {:?})\", def_id, substs);"}, {"sha": "60545f9e193d130dfda0cb7c40908aebf4c75035", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -172,6 +172,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         }\n         ty::Error |\n         ty::Infer(_) |\n+        ty::Placeholder(..) |\n         ty::UnnormalizedProjection(..) |\n         ty::Projection(..) |\n         ty::Bound(..) |"}, {"sha": "82ace620c8ab2f9afbd97ef008455de948ab14b5", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -727,6 +727,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::Closure(..) |\n             ty::Generator(..) |\n             ty::GeneratorWitness(..) |\n+            ty::Placeholder(..) |\n             ty::UnnormalizedProjection(..) |\n             ty::Projection(..) |\n             ty::Opaque(..) |"}, {"sha": "24de92e79f0e4a4f0552265fb8312f861af58516", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -378,6 +378,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             ty::Error |\n             ty::Bound(..) |\n             ty::Infer(_) |\n+            ty::Placeholder(..) |\n             ty::UnnormalizedProjection(..) |\n             ty::Projection(..) |\n             ty::Param(_) |"}, {"sha": "5592d2a583cfbebbda73190055203bed0000b1d6", "filename": "src/librustc_traits/chalk_context/program_clauses.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -418,6 +418,7 @@ impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n                     }\n \n                     ty::GeneratorWitness(..) |\n+                    ty::Placeholder(..) |\n                     ty::UnnormalizedProjection(..) |\n                     ty::Infer(..) |\n                     ty::Bound(..) |"}, {"sha": "9ab86daf654497c0ebcd9944d024d54dd00d237d", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -274,7 +274,7 @@ fn dtorck_constraint_for_ty<'a, 'gcx, 'tcx>(\n \n         ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n \n-        ty::Bound(..) | ty::Infer(..) | ty::Error => {\n+        ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error => {\n             // By the time this code runs, all type variables ought to\n             // be fully resolved.\n             Err(NoSolution)"}, {"sha": "c3573f47cebfe8741fdb3029fca01f465e8e922a", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -114,6 +114,7 @@ impl ClauseVisitor<'set, 'a, 'tcx> {\n             ty::Tuple(..) |\n             ty::Never |\n             ty::Infer(..) |\n+            ty::Placeholder(..) |\n             ty::Bound(..) => (),\n \n             ty::GeneratorWitness(..) |"}, {"sha": "c35aee7883f499af196f8823b863a3eed238d082", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ty::Opaque(def_id, substs) => Some(PointerKind::OfOpaque(def_id, substs)),\n             ty::Param(ref p) => Some(PointerKind::OfParam(p)),\n             // Insufficient type information.\n-            ty::Bound(..) | ty::Infer(_) => None,\n+            ty::Placeholder(..) | ty::Bound(..) | ty::Infer(_) => None,\n \n             ty::Bool | ty::Char | ty::Int(..) | ty::Uint(..) |\n             ty::Float(_) | ty::Array(..) | ty::GeneratorWitness(..) |"}, {"sha": "ed32e5a8d9b3829b66042792b7048ea0dd9e3e97", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -336,6 +336,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 // types, where we use Error as the Self type\n             }\n \n+            ty::Placeholder(..) |\n             ty::UnnormalizedProjection(..) |\n             ty::GeneratorWitness(..) |\n             ty::Bound(..) |"}, {"sha": "fd8f70b19e7ecb919165f36300d7b28f9180a63f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05995a85221cde573b81ab918b0f3686452dca3b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=05995a85221cde573b81ab918b0f3686452dca3b", "patch": "@@ -2744,6 +2744,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Closure(..) | ty::Generator(..) => Tuple(vec![]), // FIXME(pcwalton)\n \n             ty::Bound(..) => panic!(\"Bound\"),\n+            ty::Placeholder(..) => panic!(\"Placeholder\"),\n             ty::UnnormalizedProjection(..) => panic!(\"UnnormalizedProjection\"),\n             ty::GeneratorWitness(..) => panic!(\"GeneratorWitness\"),\n             ty::Infer(..) => panic!(\"Infer\"),"}]}