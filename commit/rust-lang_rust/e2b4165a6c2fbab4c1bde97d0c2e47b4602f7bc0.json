{"sha": "e2b4165a6c2fbab4c1bde97d0c2e47b4602f7bc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYjQxNjVhNmMyZmJhYjRjMWJkZTk3ZDBjMmU0N2I0NjAyZjdiYzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-26T04:10:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-26T04:10:54Z"}, "message": "Auto merge of #62891 - vext01:improve-black-box-docs, r=RalfJung,Centril,gnzlbg\n\nImprove the documentation for std::hint::black_box.\n\nThe other day a colleague was reviewing some of my code which was using `black_box` to block constant propogation. There was a little confusion because the documentation kind of implies that `black_box` is only useful for dead code elimination, and only in benchmarking scenarios.\n\nThe docs currently say:\n\n> A function that is opaque to the optimizer, to allow benchmarks to pretend to use outputs to assist in avoiding dead-code elimination.\n\nHere is our discussion, in which I show (using godbolt) that a black box can also block constant propagation:\nhttps://github.com/softdevteam/yk/pull/21#discussion_r302985038\n\nThis change makes the docstring for `black_box` a little more general, and while we are here, I've added an example (the same one from our discussion).\n\n![image](https://user-images.githubusercontent.com/604955/61701322-ddf1e400-ad35-11e9-878c-b5b44a20770c.png)\n\nOK to go in?", "tree": {"sha": "b8497775c78ef5bff55599fb4e6acd94b357cc5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8497775c78ef5bff55599fb4e6acd94b357cc5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2b4165a6c2fbab4c1bde97d0c2e47b4602f7bc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b4165a6c2fbab4c1bde97d0c2e47b4602f7bc0", "html_url": "https://github.com/rust-lang/rust/commit/e2b4165a6c2fbab4c1bde97d0c2e47b4602f7bc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2b4165a6c2fbab4c1bde97d0c2e47b4602f7bc0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c58535d09d1261d21569df0036b974811544256", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c58535d09d1261d21569df0036b974811544256", "html_url": "https://github.com/rust-lang/rust/commit/4c58535d09d1261d21569df0036b974811544256"}, {"sha": "a4b3dbe4c1b225b4b911438861e98e4b1aa70183", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b3dbe4c1b225b4b911438861e98e4b1aa70183", "html_url": "https://github.com/rust-lang/rust/commit/a4b3dbe4c1b225b4b911438861e98e4b1aa70183"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "6439fa0e0c8b82425762e311bd2a59e2ea57a1ef", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e2b4165a6c2fbab4c1bde97d0c2e47b4602f7bc0/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b4165a6c2fbab4c1bde97d0c2e47b4602f7bc0/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=e2b4165a6c2fbab4c1bde97d0c2e47b4602f7bc0", "patch": "@@ -104,11 +104,19 @@ pub fn spin_loop() {\n     }\n }\n \n-/// A function that is opaque to the optimizer, to allow benchmarks to\n-/// pretend to use outputs to assist in avoiding dead-code\n-/// elimination.\n+/// An identity function that *__hints__* to the compiler to be maximally pessimistic about what\n+/// `black_box` could do.\n ///\n-/// This function is a no-op, and does not even read from `dummy`.\n+/// [`std::convert::identity`]: https://doc.rust-lang.org/core/convert/fn.identity.html\n+///\n+/// Unlike [`std::convert::identity`], a Rust compiler is encouraged to assume that `black_box` can\n+/// use `x` in any possible valid way that Rust code is allowed to without introducing undefined\n+/// behavior in the calling code. This property makes `black_box` useful for writing code in which\n+/// certain optimizations are not desired, such as benchmarks.\n+///\n+/// Note however, that `black_box` is only (and can only be) provided on a \"best-effort\" basis. The\n+/// extent to which it can block optimisations may vary depending upon the platform and code-gen\n+/// backend used. Programs cannot rely on `black_box` for *correctness* in any way.\n #[inline]\n #[unstable(feature = \"test\", issue = \"50297\")]\n #[allow(unreachable_code)] // this makes #[cfg] a bit easier below."}]}