{"sha": "9318babf6cf5c2d053d78dfb788575905226215e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMThiYWJmNmNmNWMyZDA1M2Q3OGRmYjc4ODU3NTkwNTIyNjIxNWU=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-08T09:52:55Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-08T09:52:55Z"}, "message": "Fix const array index limit calculation.\n\nThe number of operands of the LLVM node initializing the array\nunderlying a const vector isn't always the array length -- if the\narray is of a sufficiently primitive type and all the elements' values\nare known (or something like that), LLVM uses a specialized Constant\nsubclass that stores the data packed, and thus has no operands.  Oops.\n\nBut, because llsize_of now gives us a ConstantInt, we can just fix\nmozilla/rust#3169 and this all goes away.", "tree": {"sha": "a8b72355b8005d6c2401ca0a459f4e4583ebf336", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8b72355b8005d6c2401ca0a459f4e4583ebf336"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9318babf6cf5c2d053d78dfb788575905226215e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9318babf6cf5c2d053d78dfb788575905226215e", "html_url": "https://github.com/rust-lang/rust/commit/9318babf6cf5c2d053d78dfb788575905226215e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9318babf6cf5c2d053d78dfb788575905226215e/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd7a81d025802021d49e9a69016a890f421d1833", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7a81d025802021d49e9a69016a890f421d1833", "html_url": "https://github.com/rust-lang/rust/commit/dd7a81d025802021d49e9a69016a890f421d1833"}], "stats": {"total": 33, "additions": 2, "deletions": 31}, "files": [{"sha": "515239883e2d8098513deab6757cd073377dee7a", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9318babf6cf5c2d053d78dfb788575905226215e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9318babf6cf5c2d053d78dfb788575905226215e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=9318babf6cf5c2d053d78dfb788575905226215e", "patch": "@@ -254,7 +254,7 @@ pub fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                                         ~\"index is not an integer-constant \\\n                                           expression\")\n               };\n-              let (arr, _len) = match ty::get(bt).sty {\n+              let (arr, len) = match ty::get(bt).sty {\n                   ty::ty_evec(_, vstore) | ty::ty_estr(vstore) =>\n                       match vstore {\n                       ty::vstore_fixed(u) =>\n@@ -278,36 +278,7 @@ pub fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                                            a vector or string type\")\n               };\n \n-              // FIXME #3169: This is a little odd but it arises due to a\n-              // weird wrinkle in LLVM: it doesn't appear willing to let us\n-              // call LLVMConstIntGetZExtValue on the size element of the\n-              // slice, or seemingly any integer-const involving a sizeof()\n-              // call. Despite that being \"a const\", it's not the kind of\n-              // const you can ask for the integer-value of, evidently. This\n-              // might be an LLVM bug, not sure. In any case, to work around\n-              // this we obtain the initializer and count how many elements it\n-              // has, ignoring the length we pulled out of the slice. (Note\n-              // that the initializer might be a struct rather than an array,\n-              // if enums are involved.) This only works because we picked out\n-              // the original globalvar via const_deref and so can recover the\n-              // array-size of the underlying array (or the element count of\n-              // the underlying struct), and all this will hold together\n-              // exactly as long as we _don't_ support const sub-slices (that\n-              // is, slices that represent something other than a whole\n-              // array).  At that point we'll have more and uglier work to do\n-              // here, but for now this should work.\n-              //\n-              // In the future, what we should be doing here is the\n-              // moral equivalent of:\n-              //\n-              // let len = llvm::LLVMConstIntGetZExtValue(len) as u64;\n-              //\n-              // but we might have to do substantially more magic to\n-              // make it work. Or figure out what is causing LLVM to\n-              // not want to consider sizeof() a constant expression\n-              // we can get the value (as a number) out of.\n-\n-              let len = llvm::LLVMGetNumOperands(arr) as u64;\n+              let len = llvm::LLVMConstIntGetZExtValue(len) as u64;\n               let len = match ty::get(bt).sty {\n                   ty::ty_estr(*) => {assert len > 0; len - 1},\n                   _ => len"}]}