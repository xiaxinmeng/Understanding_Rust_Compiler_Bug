{"sha": "d58aecb6b32bbedce22fa9dad36c4aa669f28cba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1OGFlY2I2YjMyYmJlZGNlMjJmYTlkYWQzNmM0YWE2NjlmMjhjYmE=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-12-05T18:07:45Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-12-05T18:07:45Z"}, "message": "rollup merge of #19518: csouth3/trieset-bitops\n\nImplement the `BitOr`, `BitAnd`, `BitXor`, and `Sub` traits from `std::ops` for TrieSet.  The behavior of these operator overloads is consistent with [RFC 235](https://github.com/rust-lang/rfcs/blob/master/text/0235-collections-conventions.md#combinations).", "tree": {"sha": "13456065547d857671a56f83d14be82824cce868", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13456065547d857671a56f83d14be82824cce868"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d58aecb6b32bbedce22fa9dad36c4aa669f28cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d58aecb6b32bbedce22fa9dad36c4aa669f28cba", "html_url": "https://github.com/rust-lang/rust/commit/d58aecb6b32bbedce22fa9dad36c4aa669f28cba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d58aecb6b32bbedce22fa9dad36c4aa669f28cba/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e492cbaf8f999967644acceeb9661555ac9e25a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e492cbaf8f999967644acceeb9661555ac9e25a", "html_url": "https://github.com/rust-lang/rust/commit/4e492cbaf8f999967644acceeb9661555ac9e25a"}, {"sha": "d424af480fac92849fe9ac99bd606024865a8fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d424af480fac92849fe9ac99bd606024865a8fc5", "html_url": "https://github.com/rust-lang/rust/commit/d424af480fac92849fe9ac99bd606024865a8fc5"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "9ddb8dd879870d8a7c7fe92611de36642a0147ce", "filename": "src/libcollections/trie/set.rs", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d58aecb6b32bbedce22fa9dad36c4aa669f28cba/src%2Flibcollections%2Ftrie%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d58aecb6b32bbedce22fa9dad36c4aa669f28cba/src%2Flibcollections%2Ftrie%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fset.rs?ref=d58aecb6b32bbedce22fa9dad36c4aa669f28cba", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // FIXME(conventions): implement bounded iterators\n-// FIXME(conventions): implement BitOr, BitAnd, BitXor, and Sub\n // FIXME(conventions): replace each_reverse by making iter DoubleEnded\n // FIXME(conventions): implement iter_mut and into_iter\n \n@@ -463,6 +462,30 @@ impl Extend<uint> for TrieSet {\n     }\n }\n \n+impl BitOr<TrieSet, TrieSet> for TrieSet {\n+    fn bitor(&self, rhs: &TrieSet) -> TrieSet {\n+        self.union(rhs).collect()\n+    }\n+}\n+\n+impl BitAnd<TrieSet, TrieSet> for TrieSet {\n+    fn bitand(&self, rhs: &TrieSet) -> TrieSet {\n+        self.intersection(rhs).collect()\n+    }\n+}\n+\n+impl BitXor<TrieSet, TrieSet> for TrieSet {\n+    fn bitxor(&self, rhs: &TrieSet) -> TrieSet {\n+        self.symmetric_difference(rhs).collect()\n+    }\n+}\n+\n+impl Sub<TrieSet, TrieSet> for TrieSet {\n+    fn sub(&self, rhs: &TrieSet) -> TrieSet {\n+        self.difference(rhs).collect()\n+    }\n+}\n+\n /// A forward iterator over a set.\n pub struct SetItems<'a> {\n     iter: Entries<'a, ()>\n@@ -569,6 +592,7 @@ impl<'a> Iterator<uint> for UnionItems<'a> {\n mod test {\n     use std::prelude::*;\n     use std::uint;\n+    use vec::Vec;\n \n     use super::TrieSet;\n \n@@ -738,4 +762,44 @@ mod test {\n                     &[1, 5, 9, 13, 19],\n                     &[1, 3, 5, 9, 11, 13, 16, 19, 24]);\n     }\n+\n+    #[test]\n+    fn test_bit_or() {\n+        let a: TrieSet = vec![1, 2, 3].into_iter().collect();\n+        let b: TrieSet = vec![3, 4, 5].into_iter().collect();\n+\n+        let set: TrieSet = a | b;\n+        let v: Vec<uint> = set.iter().collect();\n+        assert_eq!(v, vec![1u, 2, 3, 4, 5]);\n+    }\n+\n+    #[test]\n+    fn test_bit_and() {\n+        let a: TrieSet = vec![1, 2, 3].into_iter().collect();\n+        let b: TrieSet = vec![2, 3, 4].into_iter().collect();\n+\n+        let set: TrieSet = a & b;\n+        let v: Vec<uint> = set.iter().collect();\n+        assert_eq!(v, vec![2u, 3]);\n+    }\n+\n+    #[test]\n+    fn test_bit_xor() {\n+        let a: TrieSet = vec![1, 2, 3].into_iter().collect();\n+        let b: TrieSet = vec![3, 4, 5].into_iter().collect();\n+\n+        let set: TrieSet = a ^ b;\n+        let v: Vec<uint> = set.iter().collect();\n+        assert_eq!(v, vec![1u, 2, 4, 5]);\n+    }\n+\n+    #[test]\n+    fn test_sub() {\n+        let a: TrieSet = vec![1, 2, 3].into_iter().collect();\n+        let b: TrieSet = vec![3, 4, 5].into_iter().collect();\n+\n+        let set: TrieSet = a - b;\n+        let v: Vec<uint> = set.iter().collect();\n+        assert_eq!(v, vec![1u, 2]);\n+    }\n }"}]}