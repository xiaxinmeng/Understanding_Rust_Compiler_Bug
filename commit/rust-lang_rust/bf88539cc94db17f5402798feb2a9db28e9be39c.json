{"sha": "bf88539cc94db17f5402798feb2a9db28e9be39c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmODg1MzljYzk0ZGIxN2Y1NDAyNzk4ZmViMmE5ZGIyOGU5YmUzOWM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-09T16:47:08Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-09T23:39:06Z"}, "message": "TRPL: new introduction", "tree": {"sha": "7403156471cec857a68b74cc07eb568e0f92e01f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7403156471cec857a68b74cc07eb568e0f92e01f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf88539cc94db17f5402798feb2a9db28e9be39c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf88539cc94db17f5402798feb2a9db28e9be39c", "html_url": "https://github.com/rust-lang/rust/commit/bf88539cc94db17f5402798feb2a9db28e9be39c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf88539cc94db17f5402798feb2a9db28e9be39c/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e57410cd9254d68684255c0a6f95aaa8af603ddd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e57410cd9254d68684255c0a6f95aaa8af603ddd", "html_url": "https://github.com/rust-lang/rust/commit/e57410cd9254d68684255c0a6f95aaa8af603ddd"}], "stats": {"total": 203, "additions": 178, "deletions": 25}, "files": [{"sha": "b2e1a6ec0bc19a078d1d50921d03f721cfb4f413", "filename": "src/doc/trpl/README.md", "status": "modified", "additions": 178, "deletions": 25, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/bf88539cc94db17f5402798feb2a9db28e9be39c/src%2Fdoc%2Ftrpl%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/bf88539cc94db17f5402798feb2a9db28e9be39c/src%2Fdoc%2Ftrpl%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FREADME.md?ref=bf88539cc94db17f5402798feb2a9db28e9be39c", "patch": "@@ -1,39 +1,192 @@\n % The Rust Programming Language\n \n-Welcome! This book will teach you about [the Rust Programming\n-Language](http://www.rust-lang.org/). Rust is a modern systems programming\n-language focusing on safety and speed. It accomplishes these goals by being\n-memory safe without using garbage collection.\n+Welcome! This book will teach you about the [Rust Programming Language][rust].\n+Rust is a systems programming language focused on three goals: safety, speed,\n+and concurrency. It maintains these goals without having a garbage collector,\n+making it a useful language for a number of use cases other languages aren\u2019t\n+good at: embedding in other languages, programs with specific space and time\n+requirements, and writing low-level code, like device drivers and operating\n+systems. It improves on current languages targeting this space by having a\n+number of compile-time safety checks that produce no runtime overhead, while\n+eliminating all data races. Rust also aims to achieve \u2018zero-cost abstrations\u2019\n+even though some of these abstractions feel like those of a high-level\n+language. Even then, Rust still allows precise control like a low-level\n+language would.\n \n-\"The Rust Programming Language\" is split into three sections, which you can\n-navigate through the menu on the left.\n+[rust]: http://rust-lang.org\n \n-<h2 class=\"section-header\"><a href=\"basic.html\">Basics</a></h2>\n+\u201cThe Rust Programming Language\u201d is split into seven sections. This introduction\n+is the first. After this:\n \n-This section is a linear introduction to the basic syntax and semantics of\n-Rust. It has individual sections on each part of Rust's syntax.\n+* [Getting started][gs] - Set up your computer for Rust development.\n+* [Learn Rust][lr] - Learn Rust programming through small projects.\n+* [Effective Rust][er] - Higher-level concepts for writing excellent Rust code.\n+* [Syntax and Semantics][ss] - Each bit of Rust, broken down into small chunks.\n+* [Nightly Rust][nr] - Cutting-edge features that aren\u2019t in stable builds yet.\n+* [Glossary][gl] - A reference of terms used in the book.\n \n-After reading \"Basics,\" you will have a good foundation to learn more about\n-Rust, and can write very simple programs.\n+[gs]: getting-started.html\n+[lr]: learn-rust.html\n+[er]: effective-rust.html\n+[ss]: syntax-and-semantics.html\n+[nr]: nightly-rust.html\n+[gl]: glossary.html\n \n-<h2 class=\"section-header\"><a href=\"intermediate.html\">Intermediate</a></h2>\n+After reading this introduction, you\u2019ll want to dive into either \u2018Learn Rust\u2019\n+or \u2018Syntax and Semantics\u2019, depending on your preference: \u2018Learn Rust\u2019 if you\n+want to dive in with a project, or \u2018Syntax and Semantics\u2019 if you prefer to\n+start small, and learn a single concept thoroughly before moving onto the next.\n+Copious cross-linking connects these parts together.\n \n-This section contains individual chapters, which are self-contained. They focus\n-on specific topics, and can be read in any order.\n+## A brief introduction to Rust\n \n-After reading \"Intermediate,\" you will have a solid understanding of Rust,\n-and will be able to understand most Rust code and write more complex programs.\n+Is Rust a language you might be interested in? Let\u2019s examine a few small code\n+samples to show off a few of its strengths.\n \n-<h2 class=\"section-header\"><a href=\"advanced.html\">Advanced</a></h2>\n+The main concept that makes Rust unique is called \u2018ownership\u2019. Consider this\n+small example:\n \n-In a similar fashion to \"Intermediate,\" this section is full of individual,\n-deep-dive chapters, which stand alone and can be read in any order. These\n-chapters focus on Rust's most complex features.\n+```rust\n+fn main() {\n+    let mut x = vec![\"Hello\", \"world\"];\n+}\n+```\n \n-<h2 class=\"section-header\"><a href=\"unstable.html\">Unstable</a></h2>\n+This program makes a [variable binding][var] named `x`. The value of this\n+binding is a `Vec<T>`, a \u2018vector\u2019, that we create through a [macro][macro]\n+defined in the standard library. This macro is called `vec`, and we invoke\n+macros with a `!`. This follows a general principle of Rust: make things\n+explicit. Macros can do significantly more complicated things than function\n+calls, and so they\u2019re visually distinct. The `!` also helps with parsing,\n+making tooling easier to write, which is also important.\n \n-In a similar fashion to \"Intermediate,\" this section is full of individual,\n-deep-dive chapters, which stand alone and can be read in any order.\n+We used `mut` to make `x` mutable: bindings are immutable by default in Rust.\n+We\u2019ll be mutating this vector later in the example.\n \n-This chapter contains things that are only available on the nightly channel of\n-Rust.\n+It\u2019s also worth noting that we didn\u2019t need a type annotation here: while Rust\n+is statically typed, we didn\u2019t need to explicitly annotate the type. Rust has\n+type inference to balance out the power of static typing with the verbosity of\n+annotating types.\n+\n+Rust prefers stack allocation to heap allocation: `x` is placed directly on the\n+stack. However, the `Vec<T>` type allocates space for the elements of the\n+vector on the heap. If you\u2019re not familiar with this distinction, you can\n+ignore it for now, or check out [\u2018The Stack and the Heap\u2019][heap]. As a systems\n+programming language, Rust gives you the ability to control how your memory is\n+allocated, but when we\u2019re getting started, it\u2019s less of a big deal.\n+\n+[var]: variable-bindings.html\n+[macro]: macros.html\n+[heap]: the-stack-and-the-heap.html\n+\n+Earlier, we mentioned that \u2018ownership\u2019 is the key new concept in Rust. In Rust\n+parlance, `x` is said to \u2018own\u2019 the vector. This means that when `x` goes out of\n+scope, the vector\u2019s memory will be de-allocated. This is done deterministically\n+by the Rust compiler, rather than through a mechanism such as a garbage\n+collector. In other words, in Rust, you don\u2019t call functions like `malloc` and\n+`free` yourself: the compiler statically determines when you need to allocate\n+or deallocate memory, and inserts those calls itself. To err is to be human,\n+but compilers never forget.\n+\n+Let\u2019s add another line to our example:\n+\n+```rust\n+fn main() {\n+    let mut x = vec![\"Hello\", \"world\"];\n+\n+    let y = &x[0];\n+}\n+```\n+\n+We\u2019ve introduced another binding, `y`. In this case, `y` is a \u2018reference\u2019 to\n+the first element of the vector. Rust\u2019s references are similar to pointers in\n+other languages, but with additional compile-time safety checks. References\n+interact with the ownership system by [\u2018borrowing\u2019][borrowing] what they point\n+to, rather than owning it. The difference is, when the reference goes out of\n+scope, it will not deallocate the underlying memory. If it did, we\u2019d\n+de-allocate twice, which is bad!\n+\n+[borrowing]: references-and-borrowing.html\n+\n+Let\u2019s add a third line. It looks innocent enough, but causes a compiler error:\n+\n+```rust,ignore\n+fn main() {\n+    let mut x = vec![\"Hello\", \"world\"];\n+\n+    let y = &x[0];\n+\n+    x.push(4);\n+}\n+```\n+\n+`push` is a method on vectors that appends another element to the end of the\n+vector. When we try to compile this program, we get an error:\n+\n+```text\n+error: cannot borrow `x` as mutable because it is also borrowed as immutable\n+    x.push(4);\n+    ^\n+note: previous borrow of `x` occurs here; the immutable borrow prevents\n+subsequent moves or mutable borrows of `x` until the borrow ends\n+    let y = &x[0];\n+             ^\n+note: previous borrow ends here\n+fn main() {\n+\n+}\n+^\n+```\n+\n+Whew! The Rust compiler gives quite detailed errors at times, and this is one\n+of those times. As the error explains, while we made our binding mutable, we\n+still cannot call `push`. This is because we already have a reference to an\n+element of the vector, `y`. Mutating something while another reference exists\n+is dangerous, because we may invalidate the reference. In this specific case,\n+when we create the vector, we may have only allocated space for three elements.\n+Adding a fourth would mean allocating a new chunk of memory for all those elements,\n+copying the old values over, and updating the internal pointer to that memory.\n+That all works just fine. The problem is that `y` wouldn\u2019t get updated, and so\n+we\u2019d have a \u2018dangling pointer\u2019. That\u2019s bad. Any use of `y` would be an error in\n+this case, and so the compiler has caught this for us.\n+\n+So how do we solve this problem? There are two approaches we can take. The first\n+is making a copy rather than using a reference:\n+\n+```rust\n+fn main() {\n+    let mut x = vec![\"Hello\", \"world\"];\n+\n+    let y = x[0].clone();\n+\n+    x.push(4);\n+}\n+```\n+\n+Rust has [move semantics][move] by default, so if we want to make a copy of some\n+data, we call the `clone()` method. In this example, `y` is no longer a reference\n+to the vector stored in `x`, but a copy of its first element, `\"hello\"`. Now\n+that we don\u2019t have a reference, our `push()` works just fine.\n+\n+[move]: move-semantics.html\n+\n+If we truly want a reference, we need the other option: ensure that our reference\n+goes out of scope before we try to do the mutation. That looks like this:\n+\n+```rust\n+fn main() {\n+    let mut x = vec![\"Hello\", \"world\"];\n+\n+    {\n+        let y = &x[0];\n+    }\n+\n+    x.push(4);\n+}\n+```\n+\n+We created an inner scope with an additional set of curly braces. `y` will go out of\n+scope before we call `push()`, and so we\u2019re all good.\n+\n+This concept of ownership isn\u2019t just good for preventing danging pointers, but an\n+entire set of related problems, like iterator invalidation, concurrency, and more."}]}