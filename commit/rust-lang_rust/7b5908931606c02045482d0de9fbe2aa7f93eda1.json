{"sha": "7b5908931606c02045482d0de9fbe2aa7f93eda1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNTkwODkzMTYwNmMwMjA0NTQ4MmQwZGU5ZmJlMmFhN2Y5M2VkYTE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-10T20:03:51Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-24T20:52:20Z"}, "message": "Split clean::Constant enum into a struct and an enum", "tree": {"sha": "072b485eb4ecdaca5f7e2893cf71e6b345b33447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/072b485eb4ecdaca5f7e2893cf71e6b345b33447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b5908931606c02045482d0de9fbe2aa7f93eda1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b5908931606c02045482d0de9fbe2aa7f93eda1", "html_url": "https://github.com/rust-lang/rust/commit/7b5908931606c02045482d0de9fbe2aa7f93eda1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b5908931606c02045482d0de9fbe2aa7f93eda1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee5093374e036f740d4d7fe12c115bce589d7531", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee5093374e036f740d4d7fe12c115bce589d7531", "html_url": "https://github.com/rust-lang/rust/commit/ee5093374e036f740d4d7fe12c115bce589d7531"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "a4c1ee7a0f065ff566fb8daa75dd8480ff7c3d45", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b5908931606c02045482d0de9fbe2aa7f93eda1/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b5908931606c02045482d0de9fbe2aa7f93eda1/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=7b5908931606c02045482d0de9fbe2aa7f93eda1", "patch": "@@ -500,7 +500,10 @@ crate fn print_inlined_const(tcx: TyCtxt<'_>, did: DefId) -> String {\n }\n \n fn build_const(cx: &mut DocContext<'_>, def_id: DefId) -> clean::Constant {\n-    clean::Constant::Extern { type_: cx.tcx.type_of(def_id).clean(cx), def_id }\n+    clean::Constant {\n+        type_: cx.tcx.type_of(def_id).clean(cx),\n+        kind: clean::ConstantKind::Extern { def_id },\n+    }\n }\n \n fn build_static(cx: &mut DocContext<'_>, did: DefId, mutable: bool) -> clean::Static {"}, {"sha": "80054469f9d6ee2e7d8b5c8130a52fd303f008a9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b5908931606c02045482d0de9fbe2aa7f93eda1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b5908931606c02045482d0de9fbe2aa7f93eda1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7b5908931606c02045482d0de9fbe2aa7f93eda1", "patch": "@@ -393,12 +393,12 @@ impl Clean<Lifetime> for hir::GenericParam<'_> {\n \n impl Clean<Constant> for hir::ConstArg {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Constant {\n-        Constant::Anonymous {\n+        Constant {\n             type_: cx\n                 .tcx\n                 .type_of(cx.tcx.hir().body_owner_def_id(self.value.body).to_def_id())\n                 .clean(cx),\n-            body: self.value.body,\n+            kind: ConstantKind::Anonymous { body: self.value.body },\n         }\n     }\n }\n@@ -1744,7 +1744,10 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n impl<'tcx> Clean<Constant> for ty::Const<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Constant {\n         // FIXME: instead of storing the stringified expression, store `self` directly instead.\n-        Constant::TyConst { type_: self.ty.clean(cx), expr: self.to_string() }\n+        Constant {\n+            type_: self.ty.clean(cx),\n+            kind: ConstantKind::TyConst { expr: self.to_string() },\n+        }\n     }\n }\n \n@@ -1945,9 +1948,10 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                 ItemKind::Static(ty, mutability, body_id) => {\n                     StaticItem(Static { type_: ty.clean(cx), mutability, expr: Some(body_id) })\n                 }\n-                ItemKind::Const(ty, body_id) => {\n-                    ConstantItem(Constant::Local { type_: ty.clean(cx), body: body_id, def_id })\n-                }\n+                ItemKind::Const(ty, body_id) => ConstantItem(Constant {\n+                    type_: ty.clean(cx),\n+                    kind: ConstantKind::Local { body: body_id, def_id },\n+                }),\n                 ItemKind::OpaqueTy(ref ty) => OpaqueTyItem(OpaqueTy {\n                     bounds: ty.bounds.clean(cx),\n                     generics: ty.generics.clean(cx),"}, {"sha": "4132e187c72a199430b0eda2149e1556348f2222", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 30, "deletions": 37, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/7b5908931606c02045482d0de9fbe2aa7f93eda1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b5908931606c02045482d0de9fbe2aa7f93eda1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7b5908931606c02045482d0de9fbe2aa7f93eda1", "patch": "@@ -1987,67 +1987,60 @@ crate struct Static {\n }\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n-crate enum Constant {\n+crate struct Constant {\n+    crate type_: Type,\n+    crate kind: ConstantKind,\n+}\n+\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+crate enum ConstantKind {\n     /// This is the wrapper around `ty::Const` for a non-local constant. Because it doesn't have a\n     /// `BodyId`, we need to handle it on its own.\n-    TyConst { type_: Type, expr: String },\n-    /// A constant (expression) that\u2019s not an item or associated item. These are usually found\n+    ///\n+    /// Note that `ty::Const` includes generic parameters, and may not always be uniquely identified\n+    /// by a DefId. So this field must be different from `Extern`.\n+    TyConst { expr: String },\n+    /// A constant (expression) that's not an item or associated item. These are usually found\n     /// nested inside types (e.g., array lengths) or expressions (e.g., repeat counts), and also\n     /// used to define explicit discriminant values for enum variants.\n-    Anonymous { type_: Type, body: BodyId },\n+    Anonymous { body: BodyId },\n     /// A constant from a different crate.\n-    Extern { type_: Type, def_id: DefId },\n-    /// const FOO: u32 = ...;\n-    Local { type_: Type, def_id: DefId, body: BodyId },\n+    Extern { def_id: DefId },\n+    /// `const FOO: u32 = ...;`\n+    Local { def_id: DefId, body: BodyId },\n }\n \n impl Constant {\n     crate fn expr(&self, tcx: TyCtxt<'_>) -> String {\n-        match self {\n-            Self::TyConst { expr, .. } => expr.clone(),\n-            Self::Extern { def_id, .. } => print_inlined_const(tcx, *def_id),\n-            Self::Local { body, .. } | Self::Anonymous { body, .. } => print_const_expr(tcx, *body),\n+        match self.kind {\n+            ConstantKind::TyConst { ref expr } => expr.clone(),\n+            ConstantKind::Extern { def_id } => print_inlined_const(tcx, def_id),\n+            ConstantKind::Local { body, .. } | ConstantKind::Anonymous { body } => {\n+                print_const_expr(tcx, body)\n+            }\n         }\n     }\n \n     crate fn value(&self, tcx: TyCtxt<'_>) -> Option<String> {\n-        match self {\n-            Self::TyConst { .. } | Self::Anonymous { .. } => None,\n-            Self::Extern { def_id, .. } | Self::Local { def_id, .. } => {\n-                print_evaluated_const(tcx, *def_id)\n+        match self.kind {\n+            ConstantKind::TyConst { .. } | ConstantKind::Anonymous { .. } => None,\n+            ConstantKind::Extern { def_id } | ConstantKind::Local { def_id, .. } => {\n+                print_evaluated_const(tcx, def_id)\n             }\n         }\n     }\n \n     crate fn is_literal(&self, tcx: TyCtxt<'_>) -> bool {\n-        match self {\n-            Self::TyConst { .. } => false,\n-            Self::Extern { def_id, .. } => def_id.as_local().map_or(false, |def_id| {\n+        match self.kind {\n+            ConstantKind::TyConst { .. } => false,\n+            ConstantKind::Extern { def_id } => def_id.as_local().map_or(false, |def_id| {\n                 is_literal_expr(tcx, tcx.hir().local_def_id_to_hir_id(def_id))\n             }),\n-            Self::Local { body, .. } | Self::Anonymous { body, .. } => {\n+            ConstantKind::Local { body, .. } | ConstantKind::Anonymous { body } => {\n                 is_literal_expr(tcx, body.hir_id)\n             }\n         }\n     }\n-\n-    crate fn type_(&self) -> &Type {\n-        match *self {\n-            Self::TyConst { ref type_, .. }\n-            | Self::Extern { ref type_, .. }\n-            | Self::Local { ref type_, .. }\n-            | Self::Anonymous { ref type_, .. } => type_,\n-        }\n-    }\n-\n-    crate fn to_type(self) -> Type {\n-        match self {\n-            Self::TyConst { type_, .. }\n-            | Self::Extern { type_, .. }\n-            | Self::Local { type_, .. }\n-            | Self::Anonymous { type_, .. } => type_,\n-        }\n-    }\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "cc93e55fc676ea3e61f87c07e98c943c2d21abc8", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b5908931606c02045482d0de9fbe2aa7f93eda1/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b5908931606c02045482d0de9fbe2aa7f93eda1/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=7b5908931606c02045482d0de9fbe2aa7f93eda1", "patch": "@@ -982,7 +982,7 @@ fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::\n         \"{vis}const {name}: {typ}\",\n         vis = it.visibility.print_with_space(cx.tcx(), it.def_id, cx.cache()),\n         name = it.name.as_ref().unwrap(),\n-        typ = c.type_().print(cx.cache(), cx.tcx()),\n+        typ = c.type_.print(cx.cache(), cx.tcx()),\n     );\n \n     let value = c.value(cx.tcx());"}, {"sha": "7516fc1eaa17a0e664a1e47fe8cd2b3ad9653b59", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b5908931606c02045482d0de9fbe2aa7f93eda1/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b5908931606c02045482d0de9fbe2aa7f93eda1/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=7b5908931606c02045482d0de9fbe2aa7f93eda1", "patch": "@@ -142,7 +142,7 @@ impl FromWithTcx<clean::Constant> for Constant {\n         let expr = constant.expr(tcx);\n         let value = constant.value(tcx);\n         let is_literal = constant.is_literal(tcx);\n-        Constant { type_: constant.to_type().into_tcx(tcx), expr, value, is_literal }\n+        Constant { type_: constant.type_.into_tcx(tcx), expr, value, is_literal }\n     }\n }\n "}]}