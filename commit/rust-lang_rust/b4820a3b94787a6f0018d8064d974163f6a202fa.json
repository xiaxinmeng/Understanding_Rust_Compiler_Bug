{"sha": "b4820a3b94787a6f0018d8064d974163f6a202fa", "node_id": "C_kwDOAAsO6NoAKGI0ODIwYTNiOTQ3ODdhNmYwMDE4ZDgwNjRkOTc0MTYzZjZhMjAyZmE", "commit": {"author": {"name": "SLASHLogin", "email": "loginmlgxd@gmail.com", "date": "2022-11-02T18:23:05Z"}, "committer": {"name": "SLASHLogin", "email": "loginmlgxd@gmail.com", "date": "2022-11-09T13:56:21Z"}, "message": "Delay diagnostic translation in `rustc_codegen_ssa`", "tree": {"sha": "550daa0c2bfd3a1ff2658fec7f61331823ab3148", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/550daa0c2bfd3a1ff2658fec7f61331823ab3148"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4820a3b94787a6f0018d8064d974163f6a202fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4820a3b94787a6f0018d8064d974163f6a202fa", "html_url": "https://github.com/rust-lang/rust/commit/b4820a3b94787a6f0018d8064d974163f6a202fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4820a3b94787a6f0018d8064d974163f6a202fa/comments", "author": {"login": "SLASHLogin", "id": 24846525, "node_id": "MDQ6VXNlcjI0ODQ2NTI1", "avatar_url": "https://avatars.githubusercontent.com/u/24846525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SLASHLogin", "html_url": "https://github.com/SLASHLogin", "followers_url": "https://api.github.com/users/SLASHLogin/followers", "following_url": "https://api.github.com/users/SLASHLogin/following{/other_user}", "gists_url": "https://api.github.com/users/SLASHLogin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SLASHLogin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SLASHLogin/subscriptions", "organizations_url": "https://api.github.com/users/SLASHLogin/orgs", "repos_url": "https://api.github.com/users/SLASHLogin/repos", "events_url": "https://api.github.com/users/SLASHLogin/events{/privacy}", "received_events_url": "https://api.github.com/users/SLASHLogin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SLASHLogin", "id": 24846525, "node_id": "MDQ6VXNlcjI0ODQ2NTI1", "avatar_url": "https://avatars.githubusercontent.com/u/24846525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SLASHLogin", "html_url": "https://github.com/SLASHLogin", "followers_url": "https://api.github.com/users/SLASHLogin/followers", "following_url": "https://api.github.com/users/SLASHLogin/following{/other_user}", "gists_url": "https://api.github.com/users/SLASHLogin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SLASHLogin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SLASHLogin/subscriptions", "organizations_url": "https://api.github.com/users/SLASHLogin/orgs", "repos_url": "https://api.github.com/users/SLASHLogin/repos", "events_url": "https://api.github.com/users/SLASHLogin/events{/privacy}", "received_events_url": "https://api.github.com/users/SLASHLogin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a1545861e7e2d0d63b730c39a115d89d2eeb21c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1545861e7e2d0d63b730c39a115d89d2eeb21c", "html_url": "https://github.com/rust-lang/rust/commit/9a1545861e7e2d0d63b730c39a115d89d2eeb21c"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "6e1a87ae9ebbf546eccecd30bd642a1954bfa561", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b4820a3b94787a6f0018d8064d974163f6a202fa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4820a3b94787a6f0018d8064d974163f6a202fa/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=b4820a3b94787a6f0018d8064d974163f6a202fa", "patch": "@@ -15,10 +15,8 @@ use rustc_data_structures::profiling::TimingGuard;\n use rustc_data_structures::profiling::VerboseTimingGuard;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::Emitter;\n-use rustc_errors::{\n-    translation::{to_fluent_args, Translate},\n-    DiagnosticId, FatalError, Handler, Level,\n-};\n+use rustc_errors::{translation::Translate, DiagnosticId, FatalError, Handler, Level};\n+use rustc_errors::{DiagnosticMessage, Style};\n use rustc_fs_util::link_or_copy;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_incremental::{\n@@ -38,6 +36,7 @@ use rustc_span::{BytePos, FileName, InnerSpan, Pos, Span};\n use rustc_target::spec::{MergeFunctions, SanitizerSet};\n \n use std::any::Any;\n+use std::borrow::Cow;\n use std::fs;\n use std::io;\n use std::marker::PhantomData;\n@@ -969,8 +968,11 @@ pub enum Message<B: WriteBackendMethods> {\n     CodegenAborted,\n }\n \n+type DiagnosticArgName<'source> = Cow<'source, str>;\n+\n struct Diagnostic {\n-    msg: String,\n+    msg: Vec<(DiagnosticMessage, Style)>,\n+    args: FxHashMap<DiagnosticArgName<'static>, rustc_errors::DiagnosticArgValue<'static>>,\n     code: Option<DiagnosticId>,\n     lvl: Level,\n }\n@@ -1743,15 +1745,18 @@ impl Translate for SharedEmitter {\n \n impl Emitter for SharedEmitter {\n     fn emit_diagnostic(&mut self, diag: &rustc_errors::Diagnostic) {\n-        let fluent_args = to_fluent_args(diag.args());\n+        let args: FxHashMap<Cow<'_, str>, rustc_errors::DiagnosticArgValue<'_>> =\n+            diag.args().map(|(name, arg)| (name.clone(), arg.clone())).collect();\n         drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n-            msg: self.translate_messages(&diag.message, &fluent_args).to_string(),\n+            msg: diag.message.clone(),\n+            args: args.clone(),\n             code: diag.code.clone(),\n             lvl: diag.level(),\n         })));\n         for child in &diag.children {\n             drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n-                msg: self.translate_messages(&child.message, &fluent_args).to_string(),\n+                msg: child.message.clone(),\n+                args: args.clone(),\n                 code: None,\n                 lvl: child.level,\n             })));\n@@ -1782,10 +1787,14 @@ impl SharedEmitterMain {\n             match message {\n                 Ok(SharedEmitterMessage::Diagnostic(diag)) => {\n                     let handler = sess.diagnostic();\n-                    let mut d = rustc_errors::Diagnostic::new(diag.lvl, &diag.msg);\n+                    let mut d = rustc_errors::Diagnostic::new(diag.lvl, String::new());\n+                    d.message = diag.msg;\n                     if let Some(code) = diag.code {\n                         d.code(code);\n                     }\n+                    for (name, arg) in diag.args {\n+                        d.set_arg(name, arg);\n+                    }\n                     handler.emit_diagnostic(&mut d);\n                 }\n                 Ok(SharedEmitterMessage::InlineAsmError(cookie, msg, level, source)) => {"}, {"sha": "b6370354b248136de8496a88d24c872c911d0224", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4820a3b94787a6f0018d8064d974163f6a202fa/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4820a3b94787a6f0018d8064d974163f6a202fa/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=b4820a3b94787a6f0018d8064d974163f6a202fa", "patch": "@@ -44,6 +44,15 @@ pub trait IntoDiagnosticArg {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static>;\n }\n \n+impl<'source> IntoDiagnosticArg for DiagnosticArgValue<'source> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        match self {\n+            DiagnosticArgValue::Str(s) => DiagnosticArgValue::Str(Cow::Owned(s.into_owned())),\n+            DiagnosticArgValue::Number(n) => DiagnosticArgValue::Number(n),\n+        }\n+    }\n+}\n+\n impl<'source> Into<FluentValue<'source>> for DiagnosticArgValue<'source> {\n     fn into(self) -> FluentValue<'source> {\n         match self {"}]}