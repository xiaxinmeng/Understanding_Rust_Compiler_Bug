{"sha": "11adc1300cbff4970f97f9f647ab51bb0db872df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYWRjMTMwMGNiZmY0OTcwZjk3ZjlmNjQ3YWI1MWJiMGRiODcyZGY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-22T23:21:35Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:32Z"}, "message": "Address minor comments", "tree": {"sha": "abca5442d3e9e594bd0d845b4c77646aa56c8915", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abca5442d3e9e594bd0d845b4c77646aa56c8915"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11adc1300cbff4970f97f9f647ab51bb0db872df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11adc1300cbff4970f97f9f647ab51bb0db872df", "html_url": "https://github.com/rust-lang/rust/commit/11adc1300cbff4970f97f9f647ab51bb0db872df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11adc1300cbff4970f97f9f647ab51bb0db872df/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfc3b20663e1abfff0499332f9168f60c3269c33", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc3b20663e1abfff0499332f9168f60c3269c33", "html_url": "https://github.com/rust-lang/rust/commit/bfc3b20663e1abfff0499332f9168f60c3269c33"}], "stats": {"total": 38, "additions": 12, "deletions": 26}, "files": [{"sha": "4479c7239df50288a21942c62eb808318cc08180", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11adc1300cbff4970f97f9f647ab51bb0db872df/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11adc1300cbff4970f97f9f647ab51bb0db872df/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=11adc1300cbff4970f97f9f647ab51bb0db872df", "patch": "@@ -931,7 +931,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n     pub fn requires_monomorphization(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n         for param in &self.params {\n             match param.kind {\n-                GenericParamDefKind::Type {..} => return true,\n+                GenericParamDefKind::Type { .. } => return true,\n                 GenericParamDefKind::Lifetime => {}\n             }\n         }"}, {"sha": "a6ff979f472af46bd7b4ee1c677e7237510237a0", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11adc1300cbff4970f97f9f647ab51bb0db872df/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11adc1300cbff4970f97f9f647ab51bb0db872df/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=11adc1300cbff4970f97f9f647ab51bb0db872df", "patch": "@@ -231,7 +231,6 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                     mk_kind: &mut F)\n     where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n-\n         if let Some(def_id) = defs.parent {\n             let parent_defs = tcx.generics_of(def_id);\n             Substs::fill_item(substs, tcx, parent_defs, mk_kind);"}, {"sha": "2a30aeb6a39d6a7193a7c03835681b20412fb68e", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11adc1300cbff4970f97f9f647ab51bb0db872df/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11adc1300cbff4970f97f9f647ab51bb0db872df/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=11adc1300cbff4970f97f9f647ab51bb0db872df", "patch": "@@ -819,14 +819,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         if let hir::ItemKind::Enum(ref enum_definition, _) = it.node {\n             let item_def_id = cx.tcx.hir.local_def_id(it.id);\n-            let generics = cx.tcx.generics_of(item_def_id);\n-            for param in &generics.params {\n-                match param.kind {\n-                    ty::GenericParamDefKind::Lifetime { .. } => {},\n-                    ty::GenericParamDefKind::Type { .. } => return,\n-                }\n-            }\n-            // Sizes only make sense for non-generic types.\n             let t = cx.tcx.type_of(item_def_id);\n             let ty = cx.tcx.erase_regions(&t);\n             match cx.layout_of(ty) {"}, {"sha": "110797a59cb7c06b09996b440f4eafb8f244ff60", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11adc1300cbff4970f97f9f647ab51bb0db872df/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11adc1300cbff4970f97f9f647ab51bb0db872df/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=11adc1300cbff4970f97f9f647ab51bb0db872df", "patch": "@@ -539,10 +539,7 @@ impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n     fn visit_generic_args(&mut self, _: Span, generic_args: &'a GenericArgs) {\n         match *generic_args {\n             GenericArgs::AngleBracketed(ref data) => {\n-                data.args.iter().for_each(|arg| match arg {\n-                    GenericArg::Type(ty) => self.visit_ty(ty),\n-                    _ => {}\n-                });\n+                data.args.iter().for_each(|arg| self.visit_generic_arg(arg));\n                 for type_binding in &data.bindings {\n                     // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n                     // are allowed to contain nested `impl Trait`."}, {"sha": "d9c3fc221dce1c6b9deae099665e2ab3f76fded2", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11adc1300cbff4970f97f9f647ab51bb0db872df/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11adc1300cbff4970f97f9f647ab51bb0db872df/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=11adc1300cbff4970f97f9f647ab51bb0db872df", "patch": "@@ -23,7 +23,7 @@ extern crate rustc_typeck;\n extern crate syntax_pos;\n extern crate rustc_data_structures;\n \n-use rustc::hir::{self, GenericParamKind, PatKind};\n+use rustc::hir::{self, PatKind};\n use rustc::hir::def::Def;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, CrateNum, DefId};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n@@ -1270,14 +1270,11 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_generics(&mut self, generics: &'tcx hir::Generics) {\n-        generics.params.iter().for_each(|param| match param.kind {\n-            GenericParamKind::Lifetime { .. } => {}\n-            GenericParamKind::Type { .. } => {\n-                for bound in &param.bounds {\n-                    self.check_generic_bound(bound);\n-                }\n+        for param in &generics.params {\n+            for bound in &param.bounds {\n+                self.check_generic_bound(bound);\n             }\n-        });\n+        }\n         for predicate in &generics.where_clause.predicates {\n             match predicate {\n                 &hir::WherePredicate::BoundPredicate(ref bound_pred) => {"}, {"sha": "83d068a3df807fd7c7dd62da3439a3c004f0a409", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/11adc1300cbff4970f97f9f647ab51bb0db872df/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11adc1300cbff4970f97f9f647ab51bb0db872df/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=11adc1300cbff4970f97f9f647ab51bb0db872df", "patch": "@@ -822,11 +822,12 @@ impl<'a, 'tcx, 'cl> Visitor<'tcx> for Resolver<'a, 'cl> {\n             .filter_map(|param| match param.kind {\n                 GenericParamKind::Lifetime { .. } => None,\n                 GenericParamKind::Type { ref default, .. } => {\n-                    if found_default || default.is_some() {\n-                        found_default = true;\n-                        return Some((Ident::with_empty_ctxt(param.ident.name), Def::Err));\n+                    found_default |= default.is_some();\n+                    if found_default {\n+                        Some((Ident::with_empty_ctxt(param.ident.name), Def::Err));\n+                    } else {\n+                        None\n                     }\n-                    None\n                 }\n             }));\n "}]}