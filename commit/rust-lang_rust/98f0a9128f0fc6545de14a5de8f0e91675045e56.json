{"sha": "98f0a9128f0fc6545de14a5de8f0e91675045e56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZjBhOTEyOGYwZmM2NTQ1ZGUxNGE1ZGU4ZjBlOTE2NzUwNDVlNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-23T19:33:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-23T19:33:04Z"}, "message": "Auto merge of #32454 - eddyb:rollup, r=eddyb\n\nRollup of 11 pull requests\n\n- Successful merges: #32404, #32420, #32423, #32425, #32429, #32430, #32431, #32434, #32437, #32441, #32443\n- Failed merges:", "tree": {"sha": "07e04a07ac24db795165e0fa2f62c65797d5c57e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07e04a07ac24db795165e0fa2f62c65797d5c57e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98f0a9128f0fc6545de14a5de8f0e91675045e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98f0a9128f0fc6545de14a5de8f0e91675045e56", "html_url": "https://github.com/rust-lang/rust/commit/98f0a9128f0fc6545de14a5de8f0e91675045e56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98f0a9128f0fc6545de14a5de8f0e91675045e56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b76f818cad31c7910fb6f0fa5e628dbaf4db1108", "url": "https://api.github.com/repos/rust-lang/rust/commits/b76f818cad31c7910fb6f0fa5e628dbaf4db1108", "html_url": "https://github.com/rust-lang/rust/commit/b76f818cad31c7910fb6f0fa5e628dbaf4db1108"}, {"sha": "2e9b40f57638303d81eb9731784732e6491f0082", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9b40f57638303d81eb9731784732e6491f0082", "html_url": "https://github.com/rust-lang/rust/commit/2e9b40f57638303d81eb9731784732e6491f0082"}], "stats": {"total": 205, "additions": 173, "deletions": 32}, "files": [{"sha": "9a0143a353275bd645795bfd594722918da96505", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/configure", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -1034,7 +1034,7 @@ then\n         if [ -n \"$CFG_OSX_CLANG_VERSION\" ]\n         then\n             case $CFG_OSX_CLANG_VERSION in\n-                (7.0* | 7.1* | 7.2*)\n+                (7.0* | 7.1* | 7.2* | 7.3*)\n                 step_msg \"found ok version of APPLE CLANG: $CFG_OSX_CLANG_VERSION\"\n                 ;;\n                 (*)"}, {"sha": "e7a4045d9b2491fbee269f99b689d7c55fb856f3", "filename": "src/doc/book/lifetimes.md", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Fdoc%2Fbook%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Fdoc%2Fbook%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Flifetimes.md?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -282,14 +282,12 @@ to it.\n \n ## Lifetime Elision\n \n-Rust supports powerful local type inference in function bodies, but it\u2019s\n-forbidden in item signatures to allow reasoning about the types based on\n-the item signature alone. However, for ergonomic reasons a very restricted\n-secondary inference algorithm called \u201clifetime elision\u201d applies in function\n-signatures. It infers only based on the signature components themselves and not\n-based on the body of the function, only infers lifetime parameters, and does\n-this with only three easily memorizable and unambiguous rules. This makes\n-lifetime elision a shorthand for writing an item signature, while not hiding\n+Rust supports powerful local type inference in the bodies of functions but not in their item signatures. \n+It's forbidden to allow reasoning about types based on the item signature alone. \n+However, for ergonomic reasons, a very restricted secondary inference algorithm called \n+\u201clifetime elision\u201d does apply when judging lifetimes. Lifetime elision is concerned solely to infer \n+lifetime parameters using three easily memorizable and unambiguous rules. This means lifetime elision \n+acts as a shorthand for writing an item signature, while not hiding\n away the actual types involved as full local inference would if applied to it.\n \n When talking about lifetime elision, we use the term *input lifetime* and"}, {"sha": "7ecfdcfcc1e025d78fea05f938405de33fb1d201", "filename": "src/doc/book/patterns.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Fdoc%2Fbook%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Fdoc%2Fbook%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fpatterns.md?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -1,7 +1,7 @@\n % Patterns\n \n Patterns are quite common in Rust. We use them in [variable\n-bindings][bindings], [match statements][match], and other places, too. Let\u2019s go\n+bindings][bindings], [match expressions][match], and other places, too. Let\u2019s go\n on a whirlwind tour of all of the things patterns can do!\n \n [bindings]: variable-bindings.html"}, {"sha": "a1ba05840a1aea503d1fd02024dfdb9a53538086", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -381,7 +381,7 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                     llconst = addr_of(cx, llconst, type_of::align_of(cx, ty), \"autoref\");\n                     ty = cx.tcx().mk_imm_ref(cx.tcx().mk_region(ty::ReStatic), ty);\n                 }\n-            } else {\n+            } else if adj.autoderefs > 0 {\n                 let (dv, dt) = const_deref(cx, llconst, ty);\n                 llconst = dv;\n "}, {"sha": "e9c55c56a9d7226216aef54ade59825e99b1a654", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -256,7 +256,7 @@ pub fn build_impls(cx: &DocContext,\n                 cstore::DlImpl(did) => build_impl(cx, tcx, did, impls),\n                 cstore::DlDef(Def::Mod(did)) => {\n                     // Don't recurse if this is a #[doc(hidden)] module\n-                    if load_attrs(cx, tcx, did).list_def(\"doc\").has_word(\"hidden\") {\n+                    if load_attrs(cx, tcx, did).list(\"doc\").has_word(\"hidden\") {\n                         return;\n                     }\n \n@@ -299,7 +299,7 @@ pub fn build_impl(cx: &DocContext,\n     if let Some(ref t) = associated_trait {\n         // If this is an impl for a #[doc(hidden)] trait, be sure to not inline\n         let trait_attrs = load_attrs(cx, tcx, t.def_id);\n-        if trait_attrs.list_def(\"doc\").has_word(\"hidden\") {\n+        if trait_attrs.list(\"doc\").has_word(\"hidden\") {\n             return\n         }\n     }"}, {"sha": "cca027ca17a016d1b32eadea1796af2cad471855", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -418,7 +418,7 @@ impl Clean<Item> for doctree::Module {\n pub trait Attributes {\n     fn has_word(&self, &str) -> bool;\n     fn value<'a>(&'a self, &str) -> Option<&'a str>;\n-    fn list_def<'a>(&'a self, &str) -> &'a [Attribute];\n+    fn list<'a>(&'a self, &str) -> &'a [Attribute];\n }\n \n impl Attributes for [Attribute] {\n@@ -447,7 +447,7 @@ impl Attributes for [Attribute] {\n     }\n \n     /// Finds an attribute as List and returns the list of attributes nested inside.\n-    fn list_def<'a>(&'a self, name: &str) -> &'a [Attribute] {\n+    fn list<'a>(&'a self, name: &str) -> &'a [Attribute] {\n         for attr in self {\n             if let List(ref x, ref list) = *attr {\n                 if name == *x {\n@@ -1535,7 +1535,7 @@ impl PrimitiveType {\n     }\n \n     fn find(attrs: &[Attribute]) -> Option<PrimitiveType> {\n-        for attr in attrs.list_def(\"doc\") {\n+        for attr in attrs.list(\"doc\") {\n             if let NameValue(ref k, ref v) = *attr {\n                 if \"primitive\" == *k {\n                     if let ret@Some(..) = PrimitiveType::from_str(v) {\n@@ -1885,7 +1885,7 @@ impl<'tcx> Clean<Item> for ty::VariantDefData<'tcx, 'static> {\n                             source: Span::empty(),\n                             name: Some(field.name.clean(cx)),\n                             attrs: Vec::new(),\n-                            visibility: Some(hir::Public),\n+                            visibility: Some(field.vis),\n                             // FIXME: this is not accurate, we need an id for\n                             //        the specific field but we're using the id\n                             //        for the whole variant. Thus we read the"}, {"sha": "071e3dd6bd010e358e282a09ab7b22db57e2a10f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -432,7 +432,7 @@ pub fn run(mut krate: clean::Crate,\n \n     // Crawl the crate attributes looking for attributes which control how we're\n     // going to emit HTML\n-    if let Some(attrs) = krate.module.as_ref().map(|m| m.attrs.list_def(\"doc\")) {\n+    if let Some(attrs) = krate.module.as_ref().map(|m| m.attrs.list(\"doc\")) {\n         for attr in attrs {\n             match *attr {\n                 clean::NameValue(ref x, ref s)\n@@ -832,7 +832,7 @@ fn extern_location(e: &clean::ExternalCrate, dst: &Path) -> ExternalLocation {\n \n     // Failing that, see if there's an attribute specifying where to find this\n     // external crate\n-    e.attrs.list_def(\"doc\").value(\"html_root_url\").map(|url| {\n+    e.attrs.list(\"doc\").value(\"html_root_url\").map(|url| {\n         let mut url = url.to_owned();\n         if !url.ends_with(\"/\") {\n             url.push('/')\n@@ -1845,6 +1845,7 @@ fn item_static(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n+    // FIXME(#24111): remove when `const_fn` is stabilized\n     let vis_constness = match get_unstable_features_setting() {\n         UnstableFeatures::Allow => f.constness,\n         _ => hir::Constness::NotConst"}, {"sha": "90cb78f46a67c435c552d370db1391b9e307cb1f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -384,7 +384,7 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n \n     // Process all of the crate attributes, extracting plugin metadata along\n     // with the passes which we are supposed to run.\n-    for attr in krate.module.as_ref().unwrap().attrs.list_def(\"doc\") {\n+    for attr in krate.module.as_ref().unwrap().attrs.list(\"doc\") {\n         match *attr {\n             clean::Word(ref w) if \"no_default_passes\" == *w => {\n                 default_passes = false;"}, {"sha": "154b812cdff3ed5fe271feccc16cd987c2eab1be", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -33,7 +33,7 @@ pub fn strip_hidden(krate: clean::Crate) -> plugins::PluginResult {\n         }\n         impl<'a> fold::DocFolder for Stripper<'a> {\n             fn fold_item(&mut self, i: Item) -> Option<Item> {\n-                if i.attrs.list_def(\"doc\").has_word(\"hidden\") {\n+                if i.attrs.list(\"doc\").has_word(\"hidden\") {\n                     debug!(\"found one in strip_hidden; removing\");\n                     self.stripped.insert(i.def_id);\n "}, {"sha": "e4ef0c1a4d6304bc4e167608c030f7a831b24838", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -229,7 +229,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             while let Some(id) = cx.map.get_enclosing_scope(node) {\n                 node = id;\n                 let attrs = cx.map.attrs(node).clean(cx);\n-                if attrs.list_def(\"doc\").has_word(\"hidden\") {\n+                if attrs.list(\"doc\").has_word(\"hidden\") {\n                     return true;\n                 }\n                 if node == ast::CRATE_NODE_ID {\n@@ -251,11 +251,14 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             Some(analysis) => analysis, None => return false\n         };\n \n+        let use_attrs = tcx.map.attrs(id).clean(self.cx);\n+\n         let is_private = !analysis.access_levels.is_public(def);\n         let is_hidden = inherits_doc_hidden(self.cx, def_node_id);\n+        let is_no_inline = use_attrs.list(\"doc\").has_word(\"no_inline\");\n \n         // Only inline if requested or if the item would otherwise be stripped\n-        if !please_inline && !is_private && !is_hidden {\n+        if (!please_inline && !is_private && !is_hidden) || is_no_inline {\n             return false\n         }\n "}, {"sha": "de840457a01f471c31e30d665818d204b5bd1204", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -173,6 +173,14 @@ impl ops::Deref for OsString {\n     }\n }\n \n+#[stable(feature = \"osstring_default\", since = \"1.9.0\")]\n+impl Default for OsString {\n+    #[inline]\n+    fn default() -> OsString {\n+        OsString::new()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for OsString {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n@@ -302,6 +310,14 @@ impl OsStr {\n     }\n }\n \n+#[stable(feature = \"osstring_default\", since = \"1.9.0\")]\n+impl<'a> Default for &'a OsStr {\n+    #[inline]\n+    fn default() -> &'a OsStr {\n+        OsStr::new(\"\")\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq for OsStr {\n     fn eq(&self, other: &OsStr) -> bool {\n@@ -554,6 +570,12 @@ mod tests {\n         assert!(os_string.capacity() >= 33)\n     }\n \n+    #[test]\n+    fn test_os_string_default() {\n+        let os_string: OsString = Default::default();\n+        assert_eq!(\"\", &os_string);\n+    }\n+\n     #[test]\n     fn test_os_str_is_empty() {\n         let mut os_string = OsString::new();\n@@ -577,4 +599,10 @@ mod tests {\n         os_string.clear();\n         assert_eq!(0, os_string.len());\n     }\n+\n+    #[test]\n+    fn test_os_str_default() {\n+        let os_str: &OsStr = Default::default();\n+        assert_eq!(\"\", os_str);\n+    }\n }"}, {"sha": "a915872d8ac94166df960dfd05ab5ef51cb3d934", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -143,8 +143,8 @@ impl SocketAddrV6 {\n                 sin6_family: c::AF_INET6 as c::sa_family_t,\n                 sin6_port: hton(port),\n                 sin6_addr: *ip.as_inner(),\n-                sin6_flowinfo: hton(flowinfo),\n-                sin6_scope_id: hton(scope_id),\n+                sin6_flowinfo: flowinfo,\n+                sin6_scope_id: scope_id,\n                 .. unsafe { mem::zeroed() }\n             },\n         }\n@@ -173,23 +173,23 @@ impl SocketAddrV6 {\n     /// Returns the flow information associated with this address,\n     /// corresponding to the `sin6_flowinfo` field in C.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn flowinfo(&self) -> u32 { ntoh(self.inner.sin6_flowinfo) }\n+    pub fn flowinfo(&self) -> u32 { self.inner.sin6_flowinfo }\n \n     /// Change the flow information associated with this socket address.\n     #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n     pub fn set_flowinfo(&mut self, new_flowinfo: u32) {\n-        self.inner.sin6_flowinfo = hton(new_flowinfo)\n+        self.inner.sin6_flowinfo = new_flowinfo;\n     }\n \n     /// Returns the scope ID associated with this address,\n     /// corresponding to the `sin6_scope_id` field in C.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn scope_id(&self) -> u32 { ntoh(self.inner.sin6_scope_id) }\n+    pub fn scope_id(&self) -> u32 { self.inner.sin6_scope_id }\n \n     /// Change the scope ID associated with this socket address.\n     #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n     pub fn set_scope_id(&mut self, new_scope_id: u32) {\n-        self.inner.sin6_scope_id = hton(new_scope_id)\n+        self.inner.sin6_scope_id = new_scope_id;\n     }\n }\n "}, {"sha": "c8ea28c5ca39f324c5fd1986c3e42638fdbec12a", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -77,7 +77,7 @@ mod prim_bool { }\n /// # Representation\n ///\n /// `char` is always four bytes in size. This is a different representation than\n-/// a given character would have as part of a [`String`], for example:\n+/// a given character would have as part of a [`String`]. For example:\n ///\n /// ```\n /// let v = vec!['h', 'e', 'l', 'l', 'o'];\n@@ -116,8 +116,8 @@ mod prim_bool { }\n ///             ^~\n /// ```\n ///\n-/// Another implication of the 4-byte fixed size of a `char`, is that\n-/// per-`char`acter processing can end up using a lot more memory:\n+/// Another implication of the 4-byte fixed size of a `char` is that\n+/// per-`char` processing can end up using a lot more memory:\n ///\n /// ```\n /// let s = String::from(\"love: \u2764\ufe0f\");"}, {"sha": "d846c0adf61716d2dfa858789a32031df77f961b", "filename": "src/test/auxiliary/variant-struct.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Ftest%2Fauxiliary%2Fvariant-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Ftest%2Fauxiliary%2Fvariant-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fvariant-struct.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub enum Foo {\n+    Bar {\n+        qux: (),\n+    }\n+}"}, {"sha": "2a98706351a8b6797427b59feba16291e6ad7a73", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_attrs)]\n+\n // no-pretty-expanded FIXME #15189\n // ignore-android FIXME #17520\n // compile-flags:-g\n@@ -16,6 +18,8 @@ use std::env;\n use std::process::{Command, Stdio};\n use std::str;\n \n+// FIXME #31005 MIR missing debuginfo currently.\n+#[cfg_attr(target_env = \"msvc\", rustc_no_mir)]\n #[inline(never)]\n fn foo() {\n     let _v = vec![1, 2, 3];\n@@ -24,6 +28,8 @@ fn foo() {\n     }\n }\n \n+// FIXME #31005 MIR missing debuginfo currently.\n+#[cfg_attr(target_env = \"msvc\", rustc_no_mir)]\n #[inline(never)]\n fn double() {\n     struct Double;"}, {"sha": "e7ecf68f10897e608ae348980444c668eb16f888", "filename": "src/test/run-pass/issue-26997.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Ftest%2Frun-pass%2Fissue-26997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Ftest%2Frun-pass%2Fissue-26997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-26997.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Foo {\n+    x: isize,\n+    y: isize\n+}\n+\n+impl Foo {\n+    pub extern fn foo_new() -> Foo {\n+        Foo { x: 21, y: 33 }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a26509d19829c83f58882406566ad9cc98d99757", "filename": "src/test/run-pass/issue-30615.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Ftest%2Frun-pass%2Fissue-30615.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Ftest%2Frun-pass%2Fissue-30615.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-30615.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    &0u8 as *const u8 as *const PartialEq<u8>;\n+    &[0u8] as *const [u8; 1] as *const [u8];\n+}"}, {"sha": "a045c9624b1a1c5bb029bd928f5ff5b75f478965", "filename": "src/test/rustdoc/inline_local/issue-32343.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Ftest%2Frustdoc%2Finline_local%2Fissue-32343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Ftest%2Frustdoc%2Finline_local%2Fissue-32343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fissue-32343.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// @!has issue_32343/struct.Foo.html\n+// @has issue_32343/index.html\n+// @has - '//code' 'pub use foo::Foo'\n+// @!has - '//code/a' 'Foo'\n+#[doc(no_inline)]\n+pub use foo::Foo;\n+\n+// @!has issue_32343/struct.Bar.html\n+// @has issue_32343/index.html\n+// @has - '//code' 'pub use foo::Bar'\n+// @has - '//code/a' 'Bar'\n+#[doc(no_inline)]\n+pub use foo::Bar;\n+\n+mod foo {\n+    pub struct Foo;\n+    pub struct Bar;\n+}\n+\n+pub mod bar {\n+    // @has issue_32343/bar/struct.Bar.html\n+    pub use ::foo::Bar;\n+}"}, {"sha": "fba2a6ad4877c8703be2a310d735b58b6c24abda", "filename": "src/test/rustdoc/issue-32395.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Ftest%2Frustdoc%2Fissue-32395.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f0a9128f0fc6545de14a5de8f0e91675045e56/src%2Ftest%2Frustdoc%2Fissue-32395.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-32395.rs?ref=98f0a9128f0fc6545de14a5de8f0e91675045e56", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:variant-struct.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+// @has variant_struct/enum.Foo.html\n+// @!has - 'pub qux'\n+extern crate variant_struct;\n+\n+// @has issue_32395/enum.Foo.html\n+// @!has - 'pub qux'\n+pub use variant_struct::Foo;"}]}