{"sha": "18fab45aab8622b0bfbcd336d57652bfb2f4f4ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZmFiNDVhYWI4NjIyYjBiZmJjZDMzNmQ1NzY1MmJmYjJmNGY0YWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-19T22:25:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-20T22:20:50Z"}, "message": "core::rt: Make local_sched a wrapper around Local", "tree": {"sha": "5d922fc603c182f45e70e01199f714e8eb655ba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d922fc603c182f45e70e01199f714e8eb655ba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18fab45aab8622b0bfbcd336d57652bfb2f4f4ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18fab45aab8622b0bfbcd336d57652bfb2f4f4ac", "html_url": "https://github.com/rust-lang/rust/commit/18fab45aab8622b0bfbcd336d57652bfb2f4f4ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18fab45aab8622b0bfbcd336d57652bfb2f4f4ac/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71aa6b6631547a7b2e6839931e73286e0bf6ce5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/71aa6b6631547a7b2e6839931e73286e0bf6ce5d", "html_url": "https://github.com/rust-lang/rust/commit/71aa6b6631547a7b2e6839931e73286e0bf6ce5d"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "09e6ecda6a04a39db68379c218f575e3202f00fa", "filename": "src/libcore/rt/local.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/18fab45aab8622b0bfbcd336d57652bfb2f4f4ac/src%2Flibcore%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18fab45aab8622b0bfbcd336d57652bfb2f4f4ac/src%2Flibcore%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flocal.rs?ref=18fab45aab8622b0bfbcd336d57652bfb2f4f4ac", "patch": "@@ -8,10 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use rt::sched::Scheduler;\n+use rt::local_ptr;\n+\n pub trait Local {\n     fn put_local(value: ~Self);\n     fn take_local() -> ~Self;\n-    fn exists() -> bool;\n-    fn borrow(f: &fn(&mut Self));\n-    fn unsafe_borrow() -> *mut Self;\n+    fn exists_local() -> bool;\n+    fn borrow_local(f: &fn(&mut Self));\n+    unsafe fn unsafe_borrow_local() -> *mut Self;\n }\n+\n+impl Local for Scheduler {\n+    fn put_local(value: ~Scheduler) { unsafe { local_ptr::put(value) }}\n+    fn take_local() -> ~Scheduler { unsafe { local_ptr::take() } }\n+    fn exists_local() -> bool { local_ptr::exists() }\n+    fn borrow_local(f: &fn(&mut Scheduler)) { unsafe { local_ptr::borrow(f) } }\n+    unsafe fn unsafe_borrow_local() -> *mut Scheduler { local_ptr::unsafe_borrow() }\n+}\n\\ No newline at end of file"}, {"sha": "8923bb45f58dbb539518f271873fa942e4e83db6", "filename": "src/libcore/rt/local_sched.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18fab45aab8622b0bfbcd336d57652bfb2f4f4ac/src%2Flibcore%2Frt%2Flocal_sched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18fab45aab8622b0bfbcd336d57652bfb2f4f4ac/src%2Flibcore%2Frt%2Flocal_sched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flocal_sched.rs?ref=18fab45aab8622b0bfbcd336d57652bfb2f4f4ac", "patch": "@@ -21,29 +21,30 @@ use rt::rtio::{EventLoop, IoFactoryObject};\n use unstable::finally::Finally;\n use rt::local_ptr;\n use tls = rt::thread_local_storage;\n+use rt::local::Local;\n \n #[cfg(test)] use rt::uv::uvio::UvEventLoop;\n \n /// Give the Scheduler to thread-local storage\n-pub fn put(sched: ~Scheduler) { unsafe { local_ptr::put(sched) } }\n+pub fn put(sched: ~Scheduler) { Local::put_local(sched) }\n \n /// Take ownership of the Scheduler from thread-local storage\n-pub fn take() -> ~Scheduler { unsafe { local_ptr::take() } }\n+pub fn take() -> ~Scheduler { Local::take_local() }\n \n /// Check whether there is a thread-local Scheduler attached to the running thread\n-pub fn exists() -> bool { local_ptr::exists() }\n+pub fn exists() -> bool { Local::exists_local::<Scheduler>() }\n \n /// Borrow the thread-local scheduler from thread-local storage.\n /// While the scheduler is borrowed it is not available in TLS.\n-pub fn borrow(f: &fn(&mut Scheduler)) { unsafe { local_ptr::borrow(f) } }\n+pub fn borrow(f: &fn(&mut Scheduler)) { Local::borrow_local(f) }\n \n /// Borrow a mutable reference to the thread-local Scheduler\n ///\n /// # Safety Note\n ///\n /// Because this leaves the Scheduler in thread-local storage it is possible\n /// For the Scheduler pointer to be aliased\n-pub unsafe fn unsafe_borrow() -> *mut Scheduler { local_ptr::unsafe_borrow() }\n+pub unsafe fn unsafe_borrow() -> *mut Scheduler { Local::unsafe_borrow_local() }\n \n pub unsafe fn unsafe_borrow_io() -> *mut IoFactoryObject {\n     let sched = unsafe_borrow();"}]}