{"sha": "09856c85b73feff1db93990cd3d80f2c585b40c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ODU2Yzg1YjczZmVmZjFkYjkzOTkwY2QzZDgwZjJjNTg1YjQwYzQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-24T16:24:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-29T22:53:32Z"}, "message": "expansion: Give names to some fields of `SyntaxExtension`", "tree": {"sha": "fb0ad936c77b081e9b99160e78be675faa7c9844", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb0ad936c77b081e9b99160e78be675faa7c9844"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09856c85b73feff1db93990cd3d80f2c585b40c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09856c85b73feff1db93990cd3d80f2c585b40c4", "html_url": "https://github.com/rust-lang/rust/commit/09856c85b73feff1db93990cd3d80f2c585b40c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09856c85b73feff1db93990cd3d80f2c585b40c4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1328bdeef8451779831d3ddc26e16ee64c3d65b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1328bdeef8451779831d3ddc26e16ee64c3d65b5", "html_url": "https://github.com/rust-lang/rust/commit/1328bdeef8451779831d3ddc26e16ee64c3d65b5"}], "stats": {"total": 78, "additions": 44, "deletions": 34}, "files": [{"sha": "cdeee92cb073fc4914539e6ce61af79bc02144ce", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09856c85b73feff1db93990cd3d80f2c585b40c4/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09856c85b73feff1db93990cd3d80f2c585b40c4/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=09856c85b73feff1db93990cd3d80f2c585b40c4", "patch": "@@ -569,9 +569,11 @@ impl<'a> CrateLoader<'a> {\n             fn register_bang_proc_macro(&mut self,\n                                         name: &str,\n                                         expand: fn(TokenStream) -> TokenStream) {\n-                let expand = SyntaxExtension::ProcMacro(\n-                    Box::new(BangProcMacro { inner: expand }), false, self.edition\n-                );\n+                let expand = SyntaxExtension::ProcMacro {\n+                    expander: Box::new(BangProcMacro { inner: expand }),\n+                    allow_internal_unstable: false,\n+                    edition: self.edition,\n+                };\n                 self.extensions.push((Symbol::intern(name), Lrc::new(expand)));\n             }\n         }"}, {"sha": "23da82f5a4514241ca5fc56fed10f80fef37bd6d", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09856c85b73feff1db93990cd3d80f2c585b40c4/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09856c85b73feff1db93990cd3d80f2c585b40c4/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=09856c85b73feff1db93990cd3d80f2c585b40c4", "patch": "@@ -518,8 +518,11 @@ impl CrateStore for cstore::CStore {\n             return LoadedMacro::ProcMacro(proc_macros[id.index.to_proc_macro_index()].1.clone());\n         } else if data.name == \"proc_macro\" &&\n                   self.get_crate_data(id.krate).item_name(id.index) == \"quote\" {\n-            let ext = SyntaxExtension::ProcMacro(Box::new(::proc_macro::__internal::Quoter),\n-                                                 true, data.root.edition);\n+            let ext = SyntaxExtension::ProcMacro {\n+                expander: Box::new(::proc_macro::__internal::Quoter),\n+                allow_internal_unstable: true,\n+                edition: data.root.edition,\n+            };\n             return LoadedMacro::ProcMacro(Lrc::new(ext));\n         }\n "}, {"sha": "c4a20bea68504a5ffa565797f33076465399798b", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/09856c85b73feff1db93990cd3d80f2c585b40c4/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09856c85b73feff1db93990cd3d80f2c585b40c4/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=09856c85b73feff1db93990cd3d80f2c585b40c4", "patch": "@@ -350,8 +350,8 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn check_unused_macros(&self) {\n         for did in self.unused_macros.iter() {\n             let id_span = match *self.macro_map[did] {\n-                SyntaxExtension::NormalTT { def_info, .. } => def_info,\n-                SyntaxExtension::DeclMacro(.., osp, _) => osp,\n+                SyntaxExtension::NormalTT { def_info, .. } |\n+                SyntaxExtension::DeclMacro { def_info, .. } => def_info,\n                 _ => None,\n             };\n             if let Some((id, span)) = id_span {\n@@ -848,8 +848,6 @@ impl<'a> Resolver<'a> {\n     /// Error if `ext` is a Macros 1.1 procedural macro being imported by `#[macro_use]`\n     fn err_if_macro_use_proc_macro(&mut self, name: Name, use_span: Span,\n                                    binding: &NameBinding<'a>) {\n-        use self::SyntaxExtension::*;\n-\n         let krate = binding.def().def_id().krate;\n \n         // Plugin-based syntax extensions are exempt from this check\n@@ -859,15 +857,16 @@ impl<'a> Resolver<'a> {\n \n         match *ext {\n             // If `ext` is a procedural macro, check if we've already warned about it\n-            AttrProcMacro(..) | ProcMacro(..) =>\n+            SyntaxExtension::AttrProcMacro(..) | SyntaxExtension::ProcMacro { .. } =>\n                 if !self.warned_proc_macros.insert(name) { return; },\n             _ => return,\n         }\n \n         let warn_msg = match *ext {\n-            AttrProcMacro(..) => \"attribute procedural macros cannot be \\\n-                                  imported with `#[macro_use]`\",\n-            ProcMacro(..) => \"procedural macros cannot be imported with `#[macro_use]`\",\n+            SyntaxExtension::AttrProcMacro(..) =>\n+                \"attribute procedural macros cannot be imported with `#[macro_use]`\",\n+            SyntaxExtension::ProcMacro { .. } =>\n+                \"procedural macros cannot be imported with `#[macro_use]`\",\n             _ => return,\n         };\n "}, {"sha": "23c367da48d3bff9ee39b7382b266ed0300a4fd6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09856c85b73feff1db93990cd3d80f2c585b40c4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09856c85b73feff1db93990cd3d80f2c585b40c4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=09856c85b73feff1db93990cd3d80f2c585b40c4", "patch": "@@ -1219,7 +1219,7 @@ fn macro_resolve(cx: &DocContext, path_str: &str) -> Option<Def> {\n     let res = resolver\n         .resolve_macro_to_def_inner(mark, &path, MacroKind::Bang, false);\n     if let Ok(def) = res {\n-        if let SyntaxExtension::DeclMacro(..) = *resolver.get_macro(def) {\n+        if let SyntaxExtension::DeclMacro { .. } = *resolver.get_macro(def) {\n             Some(def)\n         } else {\n             None"}, {"sha": "78fa3f326d6b25824bcd626e64bb6ab4b8b05840", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/09856c85b73feff1db93990cd3d80f2c585b40c4/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09856c85b73feff1db93990cd3d80f2c585b40c4/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=09856c85b73feff1db93990cd3d80f2c585b40c4", "patch": "@@ -597,11 +597,11 @@ pub enum SyntaxExtension {\n     MultiModifier(Box<MultiItemModifier + sync::Sync + sync::Send>),\n \n     /// A function-like procedural macro. TokenStream -> TokenStream.\n-    ProcMacro(\n-        /* expander: */ Box<ProcMacro + sync::Sync + sync::Send>,\n-        /* allow_internal_unstable: */ bool,\n-        /* edition: */ Edition,\n-    ),\n+    ProcMacro {\n+        expander: Box<ProcMacro + sync::Sync + sync::Send>,\n+        allow_internal_unstable: bool,\n+        edition: Edition,\n+    },\n \n     /// An attribute-like procedural macro. TokenStream, TokenStream -> TokenStream.\n     /// The first TokenSteam is the attribute, the second is the annotated item.\n@@ -646,19 +646,21 @@ pub enum SyntaxExtension {\n     BuiltinDerive(BuiltinDeriveFn),\n \n     /// A declarative macro, e.g. `macro m() {}`.\n-    ///\n-    /// The second element is the definition site span.\n-    DeclMacro(Box<TTMacroExpander + sync::Sync + sync::Send>, Option<(ast::NodeId, Span)>, Edition),\n+    DeclMacro {\n+        expander: Box<TTMacroExpander + sync::Sync + sync::Send>,\n+        def_info: Option<(ast::NodeId, Span)>,\n+        edition: Edition,\n+    }\n }\n \n impl SyntaxExtension {\n     /// Return which kind of macro calls this syntax extension.\n     pub fn kind(&self) -> MacroKind {\n         match *self {\n-            SyntaxExtension::DeclMacro(..) |\n+            SyntaxExtension::DeclMacro { .. } |\n             SyntaxExtension::NormalTT { .. } |\n             SyntaxExtension::IdentTT(..) |\n-            SyntaxExtension::ProcMacro(..) =>\n+            SyntaxExtension::ProcMacro { .. } =>\n                 MacroKind::Bang,\n             SyntaxExtension::MultiDecorator(..) |\n             SyntaxExtension::MultiModifier(..) |\n@@ -672,8 +674,8 @@ impl SyntaxExtension {\n \n     pub fn is_modern(&self) -> bool {\n         match *self {\n-            SyntaxExtension::DeclMacro(..) |\n-            SyntaxExtension::ProcMacro(..) |\n+            SyntaxExtension::DeclMacro { .. } |\n+            SyntaxExtension::ProcMacro { .. } |\n             SyntaxExtension::AttrProcMacro(..) |\n             SyntaxExtension::ProcMacroDerive(..) => true,\n             _ => false,\n@@ -683,8 +685,8 @@ impl SyntaxExtension {\n     pub fn edition(&self) -> Edition {\n         match *self {\n             SyntaxExtension::NormalTT { edition, .. } |\n-            SyntaxExtension::DeclMacro(.., edition) |\n-            SyntaxExtension::ProcMacro(.., edition) |\n+            SyntaxExtension::DeclMacro { edition, .. } |\n+            SyntaxExtension::ProcMacro { edition, .. } |\n             SyntaxExtension::AttrProcMacro(.., edition) |\n             SyntaxExtension::ProcMacroDerive(.., edition) => edition,\n             // Unstable legacy stuff"}, {"sha": "38fa92f2c9399a18fcd8b2b0d7d7f073acb1c48c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09856c85b73feff1db93990cd3d80f2c585b40c4/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09856c85b73feff1db93990cd3d80f2c585b40c4/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=09856c85b73feff1db93990cd3d80f2c585b40c4", "patch": "@@ -738,13 +738,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n \n         let opt_expanded = match *ext {\n-            DeclMacro(ref expand, def_span, edition) => {\n-                if let Err(dummy_span) = validate_and_set_expn_info(self, def_span.map(|(_, s)| s),\n+            DeclMacro { ref expander, def_info, edition } => {\n+                if let Err(dummy_span) = validate_and_set_expn_info(self, def_info.map(|(_, s)| s),\n                                                                     false, false, false, None,\n                                                                     edition) {\n                     dummy_span\n                 } else {\n-                    kind.make_from(expand.expand(self.cx, span, mac.node.stream()))\n+                    kind.make_from(expander.expand(self.cx, span, mac.node.stream()))\n                 }\n             }\n \n@@ -804,7 +804,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 kind.dummy(span)\n             }\n \n-            ProcMacro(ref expandfun, allow_internal_unstable, edition) => {\n+            SyntaxExtension::ProcMacro { ref expander, allow_internal_unstable, edition } => {\n                 if ident.name != keywords::Invalid.name() {\n                     let msg =\n                         format!(\"macro {}! expects no ident argument, given '{}'\", path, ident);\n@@ -826,7 +826,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         edition,\n                     });\n \n-                    let tok_result = expandfun.expand(self.cx, span, mac.node.stream());\n+                    let tok_result = expander.expand(self.cx, span, mac.node.stream());\n                     let result = self.parse_ast_fragment(tok_result, kind, path, span);\n                     self.gate_proc_macro_expansion(span, &result);\n                     result"}, {"sha": "0c81a68e99972450caa9d66955590fce9d078d85", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09856c85b73feff1db93990cd3d80f2c585b40c4/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09856c85b73feff1db93990cd3d80f2c585b40c4/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=09856c85b73feff1db93990cd3d80f2c585b40c4", "patch": "@@ -312,7 +312,11 @@ pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item, edition:\n             edition,\n         }\n     } else {\n-        SyntaxExtension::DeclMacro(expander, Some((def.id, def.span)), edition)\n+        SyntaxExtension::DeclMacro {\n+            expander,\n+            def_info: Some((def.id, def.span)),\n+            edition,\n+        }\n     }\n }\n "}]}