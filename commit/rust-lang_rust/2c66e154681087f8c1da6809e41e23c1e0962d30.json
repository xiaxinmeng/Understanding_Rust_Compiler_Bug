{"sha": "2c66e154681087f8c1da6809e41e23c1e0962d30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNjZlMTU0NjgxMDg3ZjhjMWRhNjgwOWU0MWUyM2MxZTA5NjJkMzA=", "commit": {"author": {"name": "hi-rustin", "email": "rustin.liu@gmail.com", "date": "2021-03-25T13:42:21Z"}, "committer": {"name": "hi-rustin", "email": "rustin.liu@gmail.com", "date": "2021-04-01T15:14:14Z"}, "message": "add OR_PATTERNS_BACK_COMPAT lint\n\ntest: add more cases\n\ntest: add comments\n\nrefine msg", "tree": {"sha": "75c02a8c7cd0ec22c01c4cd2137194bd2e827a8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75c02a8c7cd0ec22c01c4cd2137194bd2e827a8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c66e154681087f8c1da6809e41e23c1e0962d30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c66e154681087f8c1da6809e41e23c1e0962d30", "html_url": "https://github.com/rust-lang/rust/commit/2c66e154681087f8c1da6809e41e23c1e0962d30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c66e154681087f8c1da6809e41e23c1e0962d30/comments", "author": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "803ddb83598838fb9de308d283b759ba463e5e80", "url": "https://api.github.com/repos/rust-lang/rust/commits/803ddb83598838fb9de308d283b759ba463e5e80", "html_url": "https://github.com/rust-lang/rust/commit/803ddb83598838fb9de308d283b759ba463e5e80"}], "stats": {"total": 165, "additions": 162, "deletions": 3}, "files": [{"sha": "a85ed18055b77ad4af76098e2ace0e4e561893a3", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2c66e154681087f8c1da6809e41e23c1e0962d30/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c66e154681087f8c1da6809e41e23c1e0962d30/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=2c66e154681087f8c1da6809e41e23c1e0962d30", "patch": "@@ -18,7 +18,8 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_feature::Features;\n-use rustc_lint_defs::builtin::SEMICOLON_IN_EXPRESSIONS_FROM_MACROS;\n+use rustc_lint_defs::builtin::{OR_PATTERNS_BACK_COMPAT, SEMICOLON_IN_EXPRESSIONS_FROM_MACROS};\n+use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::parser::Parser;\n use rustc_session::parse::ParseSess;\n use rustc_session::Session;\n@@ -951,8 +952,32 @@ fn check_matcher_core(\n         // Now `last` holds the complete set of NT tokens that could\n         // end the sequence before SUFFIX. Check that every one works with `suffix`.\n         for token in &last.tokens {\n-            if let TokenTree::MetaVarDecl(_, name, Some(kind)) = *token {\n+            if let TokenTree::MetaVarDecl(span, name, Some(kind)) = *token {\n                 for next_token in &suffix_first.tokens {\n+                    // Check if the old pat is used and the next token is `|`.\n+                    if let NonterminalKind::Pat2015 { inferred: true } = kind {\n+                        if let TokenTree::Token(token) = next_token {\n+                            if let BinOp(token) = token.kind {\n+                                if let token::BinOpToken::Or = token {\n+                                    // It is suggestion to use pat2015, for example: $x:pat -> $x:pat2015.\n+                                    let suggestion = quoted_tt_to_string(&TokenTree::MetaVarDecl(\n+                                        span,\n+                                        name,\n+                                        Some(NonterminalKind::Pat2015 { inferred: false }),\n+                                    ));\n+                                    sess.buffer_lint_with_diagnostic(\n+                                        &OR_PATTERNS_BACK_COMPAT,\n+                                        span,\n+                                        ast::CRATE_NODE_ID,\n+                                        &*format!(\"the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\",),\n+                                        BuiltinLintDiagnostics::OrPatternsBackCompat(\n+                                            span, suggestion,\n+                                        ),\n+                                    );\n+                                }\n+                            }\n+                        }\n+                    }\n                     match is_in_follow(next_token, kind) {\n                         IsInFollow::Yes => {}\n                         IsInFollow::No(possible) => {\n@@ -1080,7 +1105,7 @@ fn is_in_follow(tok: &mbe::TokenTree, kind: NonterminalKind) -> IsInFollow {\n                     _ => IsInFollow::No(TOKENS),\n                 }\n             }\n-            NonterminalKind::Pat2015 { .. } | NonterminalKind::Pat2021 { .. } => {\n+            NonterminalKind::Pat2015 { .. } => {\n                 const TOKENS: &[&str] = &[\"`=>`\", \"`,`\", \"`=`\", \"`|`\", \"`if`\", \"`in`\"];\n                 match tok {\n                     TokenTree::Token(token) => match token.kind {\n@@ -1091,6 +1116,17 @@ fn is_in_follow(tok: &mbe::TokenTree, kind: NonterminalKind) -> IsInFollow {\n                     _ => IsInFollow::No(TOKENS),\n                 }\n             }\n+            NonterminalKind::Pat2021 { .. } => {\n+                const TOKENS: &[&str] = &[\"`=>`\", \"`,`\", \"`=`\", \"`if`\", \"`in`\"];\n+                match tok {\n+                    TokenTree::Token(token) => match token.kind {\n+                        FatArrow | Comma | Eq => IsInFollow::Yes,\n+                        Ident(name, false) if name == kw::If || name == kw::In => IsInFollow::Yes,\n+                        _ => IsInFollow::No(TOKENS),\n+                    },\n+                    _ => IsInFollow::No(TOKENS),\n+                }\n+            }\n             NonterminalKind::Path | NonterminalKind::Ty => {\n                 const TOKENS: &[&str] = &[\n                     \"`{`\", \"`[`\", \"`=>`\", \"`,`\", \"`>`\", \"`=`\", \"`:`\", \"`;`\", \"`|`\", \"`as`\","}, {"sha": "b3a19bfbf7532469f2773d190cab06b0a93b46aa", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c66e154681087f8c1da6809e41e23c1e0962d30/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c66e154681087f8c1da6809e41e23c1e0962d30/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=2c66e154681087f8c1da6809e41e23c1e0962d30", "patch": "@@ -709,6 +709,9 @@ pub trait LintContext: Sized {\n                 BuiltinLintDiagnostics::ProcMacroBackCompat(note) => {\n                     db.note(&note);\n                 }\n+                BuiltinLintDiagnostics::OrPatternsBackCompat(span,suggestion) => {\n+                    db.span_suggestion(span, \"use pat2015 to preserve semantics\", suggestion, Applicability::MachineApplicable);\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "b602490905c296a2544a79d71da1c2b04361b9d7", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2c66e154681087f8c1da6809e41e23c1e0962d30/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c66e154681087f8c1da6809e41e23c1e0962d30/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=2c66e154681087f8c1da6809e41e23c1e0962d30", "patch": "@@ -2959,6 +2959,7 @@ declare_lint_pass! {\n         DISJOINT_CAPTURE_DROP_REORDER,\n         LEGACY_DERIVE_HELPERS,\n         PROC_MACRO_BACK_COMPAT,\n+        OR_PATTERNS_BACK_COMPAT,\n     ]\n }\n \n@@ -3136,3 +3137,37 @@ declare_lint! {\n         })\n     };\n }\n+\n+declare_lint! {\n+    /// The `or_patterns_back_compat` lint detects usage of old versions of or-patterns.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(or_patterns_back_compat)]\n+    /// macro_rules! match_any {\n+    ///     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n+    ///         match $expr {\n+    ///             $(\n+    ///                 $( $pat => $expr_arm, )+\n+    ///             )+\n+    ///         }\n+    ///     };\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let result: Result<i64, i32> = Err(42);\n+    ///     let int: i64 = match_any!(result, Ok(i) | Err(i) => i.into());\n+    ///     assert_eq!(int, 42);\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// In Rust 2021, the pat matcher will match new patterns, which include the | character.\n+    pub OR_PATTERNS_BACK_COMPAT,\n+    Allow,\n+    \"detects usage of old versions of or-patterns\",\n+}"}, {"sha": "70475563a4abe4921881c11bfe2f5ace6428c0a0", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c66e154681087f8c1da6809e41e23c1e0962d30/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c66e154681087f8c1da6809e41e23c1e0962d30/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=2c66e154681087f8c1da6809e41e23c1e0962d30", "patch": "@@ -267,6 +267,7 @@ pub enum BuiltinLintDiagnostics {\n     LegacyDeriveHelpers(Span),\n     ExternDepSpec(String, ExternDepSpec),\n     ProcMacroBackCompat(String),\n+    OrPatternsBackCompat(Span, String),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "60ec0f7430de39081e771904a8cc818f0698f965", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2c66e154681087f8c1da6809e41e23c1e0962d30/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2c66e154681087f8c1da6809e41e23c1e0962d30/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed?ref=2c66e154681087f8c1da6809e41e23c1e0962d30", "patch": "@@ -0,0 +1,26 @@\n+// ignore-tidy-linelength\n+// run-rustfix\n+\n+#![feature(edition_macro_pats)]\n+#![deny(or_patterns_back_compat)]\n+#![allow(unused_macros)]\n+macro_rules! foo { ($x:pat2015 | $y:pat) => {} } //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+macro_rules! bar { ($($x:pat2015)+ | $($y:pat)+) => {} } //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+macro_rules! baz { ($x:pat2015 | $y:pat2015) => {} } // should be ok\n+macro_rules! qux { ($x:pat2015 | $y:pat) => {} } // should be ok\n+macro_rules! ogg { ($x:pat2015 | $y:pat2015) => {} } //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+macro_rules! match_any {\n+    ( $expr:expr , $( $( $pat:pat2015 )|+ => $expr_arm:expr ),+ ) => { //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+        match $expr {\n+            $(\n+                $( $pat => $expr_arm, )+\n+            )+\n+        }\n+    };\n+}\n+\n+fn main() {\n+    let result: Result<i64, i32> = Err(42);\n+    let int: i64 = match_any!(result, Ok(i) | Err(i) => i.into());\n+    assert_eq!(int, 42);\n+}"}, {"sha": "dc9e8595ca291d7447202e6bba444c744c308f4b", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2c66e154681087f8c1da6809e41e23c1e0962d30/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c66e154681087f8c1da6809e41e23c1e0962d30/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs?ref=2c66e154681087f8c1da6809e41e23c1e0962d30", "patch": "@@ -0,0 +1,26 @@\n+// ignore-tidy-linelength\n+// run-rustfix\n+\n+#![feature(edition_macro_pats)]\n+#![deny(or_patterns_back_compat)]\n+#![allow(unused_macros)]\n+macro_rules! foo { ($x:pat | $y:pat) => {} } //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} } //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+macro_rules! baz { ($x:pat2015 | $y:pat2015) => {} } // should be ok\n+macro_rules! qux { ($x:pat2015 | $y:pat) => {} } // should be ok\n+macro_rules! ogg { ($x:pat | $y:pat2015) => {} } //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+macro_rules! match_any {\n+    ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => { //~ ERROR the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+        match $expr {\n+            $(\n+                $( $pat => $expr_arm, )+\n+            )+\n+        }\n+    };\n+}\n+\n+fn main() {\n+    let result: Result<i64, i32> = Err(42);\n+    let int: i64 = match_any!(result, Ok(i) | Err(i) => i.into());\n+    assert_eq!(int, 42);\n+}"}, {"sha": "630a11c17345d7909844e2e457eb56f62f10ae45", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2c66e154681087f8c1da6809e41e23c1e0962d30/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c66e154681087f8c1da6809e41e23c1e0962d30/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr?ref=2c66e154681087f8c1da6809e41e23c1e0962d30", "patch": "@@ -0,0 +1,32 @@\n+error: the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+  --> $DIR/macro-or-patterns-back-compat.rs:7:21\n+   |\n+LL | macro_rules! foo { ($x:pat | $y:pat) => {} }\n+   |                     ^^^^^^ help: use pat2015 to preserve semantics: `$x:pat2015`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/macro-or-patterns-back-compat.rs:5:9\n+   |\n+LL | #![deny(or_patterns_back_compat)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+  --> $DIR/macro-or-patterns-back-compat.rs:8:23\n+   |\n+LL | macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} }\n+   |                       ^^^^^^ help: use pat2015 to preserve semantics: `$x:pat2015`\n+\n+error: the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+  --> $DIR/macro-or-patterns-back-compat.rs:11:21\n+   |\n+LL | macro_rules! ogg { ($x:pat | $y:pat2015) => {} }\n+   |                     ^^^^^^ help: use pat2015 to preserve semantics: `$x:pat2015`\n+\n+error: the meaning of the pat fragment specific is changing in Rust 2021, which may affect this macro\n+  --> $DIR/macro-or-patterns-back-compat.rs:13:26\n+   |\n+LL |     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n+   |                          ^^^^^^^^ help: use pat2015 to preserve semantics: `$pat:pat2015`\n+\n+error: aborting due to 4 previous errors\n+"}]}