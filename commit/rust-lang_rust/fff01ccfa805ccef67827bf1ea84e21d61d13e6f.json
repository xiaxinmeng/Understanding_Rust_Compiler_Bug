{"sha": "fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZjAxY2NmYTgwNWNjZWY2NzgyN2JmMWVhODRlMjFkNjFkMTNlNmY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-16T17:23:27Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-27T12:51:36Z"}, "message": "Do not abort compilation if expansion produces errors\n\nFix a number of uncovered deficiencies in diagnostics", "tree": {"sha": "9ef9748b8f3257c362077a8b3a6c421ae851d020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ef9748b8f3257c362077a8b3a6c421ae851d020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "html_url": "https://github.com/rust-lang/rust/commit/fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7", "html_url": "https://github.com/rust-lang/rust/commit/a5c52c72ae3c1d8b3896756541b115a1d5ea94b7"}], "stats": {"total": 705, "additions": 538, "deletions": 167}, "files": [{"sha": "62dc8691e65df8ef8112e5e02383ab29c28314b6", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -987,7 +987,6 @@ where\n         };\n \n         let mut ecx = ExtCtxt::new(&sess.parse_sess, cfg, &mut resolver);\n-        let err_count = ecx.parse_sess.span_diagnostic.err_count();\n \n         // Expand macros now!\n         let krate = time(sess, \"expand crate\", || {\n@@ -1013,9 +1012,6 @@ where\n             let msg = \"missing fragment specifier\";\n             sess.buffer_lint(lint, ast::CRATE_NODE_ID, span, msg);\n         }\n-        if ecx.parse_sess.span_diagnostic.err_count() - ecx.resolve_err_count > err_count {\n-            ecx.parse_sess.span_diagnostic.abort_if_errors();\n-        }\n         if cfg!(windows) {\n             env::set_var(\"PATH\", &old_path);\n         }\n@@ -1119,12 +1115,6 @@ where\n         })\n     })?;\n \n-    // Unresolved macros might be due to mistyped `#[macro_use]`,\n-    // so abort after checking for unknown attributes. (#49074)\n-    if resolver.found_unresolved_macro {\n-        sess.diagnostic().abort_if_errors();\n-    }\n-\n     // Lower ast -> hir.\n     // First, we need to collect the dep_graph.\n     let dep_graph = match future_dep_graph {"}, {"sha": "584f0ba0449e1213f007ad7658aaf27bcfbe75f7", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -278,25 +278,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_ty(self, ty)\n     }\n \n-    fn visit_use_tree(&mut self, use_tree: &'a UseTree, id: NodeId, _nested: bool) {\n-        // Check if the path in this `use` is not generic, such as `use foo::bar<T>;` While this\n-        // can't happen normally thanks to the parser, a generic might sneak in if the `use` is\n-        // built using a macro.\n-        //\n-        // macro_use foo {\n-        //     ($p:path) => { use $p; }\n-        // }\n-        // foo!(bar::baz<T>);\n-        use_tree.prefix.segments.iter().find(|segment| {\n-            segment.args.is_some()\n-        }).map(|segment| {\n-            self.err_handler().span_err(segment.args.as_ref().unwrap().span(),\n-                                        \"generic arguments in import path\");\n-        });\n-\n-        visit::walk_use_tree(self, use_tree, id);\n-    }\n-\n     fn visit_label(&mut self, label: &'a Label) {\n         self.check_label(label.ident);\n         visit::walk_label(self, label);\n@@ -433,17 +414,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_foreign_item(self, fi)\n     }\n \n-    fn visit_vis(&mut self, vis: &'a Visibility) {\n-        if let VisibilityKind::Restricted { ref path, .. } = vis.node {\n-            path.segments.iter().find(|segment| segment.args.is_some()).map(|segment| {\n-                self.err_handler().span_err(segment.args.as_ref().unwrap().span(),\n-                                            \"generic arguments in visibility path\");\n-            });\n-        }\n-\n-        visit::walk_vis(self, vis)\n-    }\n-\n     fn visit_generics(&mut self, generics: &'a Generics) {\n         let mut seen_non_lifetime_param = false;\n         let mut seen_default = None;"}, {"sha": "0db6dbafb6cc6c54e31eaa29355a9c5f133bd0a5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1576,7 +1576,6 @@ pub struct Resolver<'a> {\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n     macro_defs: FxHashMap<Mark, DefId>,\n     local_macro_def_scopes: FxHashMap<NodeId, Module<'a>>,\n-    pub found_unresolved_macro: bool,\n \n     /// List of crate local macros that we need to warn about as being unused.\n     /// Right now this only includes macro_rules! macros, and macros 2.0.\n@@ -1911,7 +1910,6 @@ impl<'a> Resolver<'a> {\n             name_already_seen: FxHashMap::default(),\n             potentially_unused_imports: Vec::new(),\n             struct_constructors: Default::default(),\n-            found_unresolved_macro: false,\n             unused_macros: FxHashSet::default(),\n             current_type_ascription: Vec::new(),\n             injected_crate: None,\n@@ -2024,8 +2022,10 @@ impl<'a> Resolver<'a> {\n                                       record_used_id: Option<NodeId>,\n                                       path_span: Span)\n                                       -> Option<LexicalScopeBinding<'a>> {\n-        let record_used = record_used_id.is_some();\n         assert!(ns == TypeNS  || ns == ValueNS);\n+        if ident.name == keywords::Invalid.name() {\n+            return Some(LexicalScopeBinding::Def(Def::Err));\n+        }\n         if ns == TypeNS {\n             ident.span = if ident.name == keywords::SelfUpper.name() {\n                 // FIXME(jseyfried) improve `Self` hygiene\n@@ -2038,6 +2038,7 @@ impl<'a> Resolver<'a> {\n         }\n \n         // Walk backwards up the ribs in scope.\n+        let record_used = record_used_id.is_some();\n         let mut module = self.graph_root;\n         for i in (0 .. self.ribs[ns].len()).rev() {\n             if let Some(def) = self.ribs[ns][i].bindings.get(&ident).cloned() {"}, {"sha": "9c0c8a6016fe5d2076907fb8d2338433b0d7e5da", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -182,7 +182,14 @@ impl<'a> base::Resolver for Resolver<'a> {\n         };\n \n         let parent_scope = self.invoc_parent_scope(invoc_id, derives_in_scope);\n-        let (def, ext) = self.resolve_macro_to_def(path, kind, &parent_scope, true, force)?;\n+        let (def, ext) = match self.resolve_macro_to_def(path, kind, &parent_scope, true, force) {\n+            Ok((def, ext)) => (def, ext),\n+            Err(Determinacy::Determined) if kind == MacroKind::Attr => {\n+                // Replace unresolved attributes with used inert attributes for better recovery.\n+                return Ok(Some(self.get_macro(Def::NonMacroAttr(NonMacroAttrKind::Tool))));\n+            }\n+            Err(determinacy) => return Err(determinacy),\n+        };\n \n         if let Def::Macro(def_id, _) = def {\n             if after_derive {\n@@ -337,7 +344,6 @@ impl<'a> Resolver<'a> {\n                 }\n                 PathResult::Indeterminate if !force => return Err(Determinacy::Undetermined),\n                 PathResult::NonModule(..) | PathResult::Indeterminate | PathResult::Failed(..) => {\n-                    self.found_unresolved_macro = true;\n                     Err(Determinacy::Determined)\n                 }\n                 PathResult::Module(..) => unreachable!(),\n@@ -353,10 +359,8 @@ impl<'a> Resolver<'a> {\n             let binding = self.early_resolve_ident_in_lexical_scope(\n                 path[0].ident, ScopeSet::Macro(kind), parent_scope, false, force, path_span\n             );\n-            match binding {\n-                Ok(..) => {}\n-                Err(Determinacy::Determined) => self.found_unresolved_macro = true,\n-                Err(Determinacy::Undetermined) => return Err(Determinacy::Undetermined),\n+            if let Err(Determinacy::Undetermined) = binding {\n+                return Err(Determinacy::Undetermined);\n             }\n \n             if trace {\n@@ -858,14 +862,23 @@ impl<'a> Resolver<'a> {\n     pub fn finalize_current_module_macro_resolutions(&mut self) {\n         let module = self.current_module;\n \n-        let check_consistency = |this: &mut Self, path: &[Segment], span,\n-                                 kind: MacroKind, initial_def, def| {\n+        let check_consistency = |this: &mut Self, path: &[Segment], span, kind: MacroKind,\n+                                 initial_def: Option<Def>, def: Def| {\n             if let Some(initial_def) = initial_def {\n                 if def != initial_def && def != Def::Err && this.ambiguity_errors.is_empty() {\n                     // Make sure compilation does not succeed if preferred macro resolution\n                     // has changed after the macro had been expanded. In theory all such\n                     // situations should be reported as ambiguity errors, so this is a bug.\n-                    span_bug!(span, \"inconsistent resolution for a macro\");\n+                    if initial_def == Def::NonMacroAttr(NonMacroAttrKind::Custom) {\n+                        // Yeah, legacy custom attributes are implemented using forced resolution\n+                        // (which is a best effort error recovery tool, basically), so we can't\n+                        // promise their resolution won't change later.\n+                        let msg = format!(\"inconsistent resolution for a macro: first {}, then {}\",\n+                                          initial_def.kind_name(), def.kind_name());\n+                        this.session.span_err(span, &msg);\n+                    } else {\n+                        span_bug!(span, \"inconsistent resolution for a macro\");\n+                    }\n                 }\n             } else {\n                 // It's possible that the macro was unresolved (indeterminate) and silently"}, {"sha": "84aa57d7d86e6f845b28719e5dcafd9fec1f254d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -2,7 +2,7 @@ pub use self::SyntaxExtension::*;\n \n use ast::{self, Attribute, Name, PatKind, MetaItem};\n use attr::HasAttrs;\n-use source_map::{self, SourceMap, Spanned, respan};\n+use source_map::{SourceMap, Spanned, respan};\n use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n use edition::Edition;\n use errors::{DiagnosticBuilder, DiagnosticId};\n@@ -481,7 +481,7 @@ impl DummyResult {\n     pub fn raw_expr(sp: Span) -> P<ast::Expr> {\n         P(ast::Expr {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::ExprKind::Lit(source_map::respan(sp, ast::LitKind::Bool(false))),\n+            node: ast::ExprKind::Err,\n             span: sp,\n             attrs: ThinVec::new(),\n         })\n@@ -496,10 +496,11 @@ impl DummyResult {\n         }\n     }\n \n+    /// A plain dummy type.\n     pub fn raw_ty(sp: Span) -> P<ast::Ty> {\n         P(ast::Ty {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::TyKind::Infer,\n+            node: ast::TyKind::Err,\n             span: sp\n         })\n     }\n@@ -796,7 +797,6 @@ pub struct ExtCtxt<'a> {\n     pub ecfg: expand::ExpansionConfig<'a>,\n     pub root_path: PathBuf,\n     pub resolver: &'a mut dyn Resolver,\n-    pub resolve_err_count: usize,\n     pub current_expansion: ExpansionData,\n     pub expansions: FxHashMap<Span, Vec<String>>,\n }\n@@ -811,7 +811,6 @@ impl<'a> ExtCtxt<'a> {\n             ecfg,\n             root_path: PathBuf::new(),\n             resolver,\n-            resolve_err_count: 0,\n             current_expansion: ExpansionData {\n                 mark: Mark::root(),\n                 depth: 0,"}, {"sha": "f8f1e830770282318afb3ce65598ddebf6b81ce1", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -344,8 +344,10 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             // FIXME(jseyfried): Refactor out the following logic\n             let (expanded_fragment, new_invocations) = if let Some(ext) = ext {\n                 if let Some(ext) = ext {\n-                    let dummy = invoc.fragment_kind.dummy(invoc.span()).unwrap();\n-                    let fragment = self.expand_invoc(invoc, &*ext).unwrap_or(dummy);\n+                    let (invoc_fragment_kind, invoc_span) = (invoc.fragment_kind, invoc.span());\n+                    let fragment = self.expand_invoc(invoc, &*ext).unwrap_or_else(|| {\n+                        invoc_fragment_kind.dummy(invoc_span).unwrap()\n+                    });\n                     self.collect_invocations(fragment, &[])\n                 } else if let InvocationKind::Attr { attr: None, traits, item, .. } = invoc.kind {\n                     if !item.derive_allowed() {\n@@ -431,9 +433,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n     fn resolve_imports(&mut self) {\n         if self.monotonic {\n-            let err_count = self.cx.parse_sess.span_diagnostic.err_count();\n             self.cx.resolver.resolve_imports();\n-            self.cx.resolve_err_count += self.cx.parse_sess.span_diagnostic.err_count() - err_count;\n         }\n     }\n \n@@ -457,11 +457,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n \n         if self.monotonic {\n-            let err_count = self.cx.parse_sess.span_diagnostic.err_count();\n-            let mark = self.cx.current_expansion.mark;\n-            self.cx.resolver.visit_ast_fragment_with_placeholders(mark, &fragment_with_placeholders,\n-                                                                  derives);\n-            self.cx.resolve_err_count += self.cx.parse_sess.span_diagnostic.err_count() - err_count;\n+            self.cx.resolver.visit_ast_fragment_with_placeholders(\n+                self.cx.current_expansion.mark, &fragment_with_placeholders, derives\n+            );\n         }\n \n         (fragment_with_placeholders, invocations)"}, {"sha": "70df403d0c2ea8e019c4682b4998c70f87668bfe", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1272,16 +1272,15 @@ impl<'a> Context<'a> {\n                 return;\n             }\n         }\n-        if name.starts_with(\"rustc_\") {\n-            gate_feature!(self, rustc_attrs, attr.span,\n-                          \"unless otherwise specified, attributes \\\n-                           with the prefix `rustc_` \\\n-                           are reserved for internal compiler diagnostics\");\n-        } else if !attr::is_known(attr) {\n-            // Only run the custom attribute lint during regular feature gate\n-            // checking. Macro gating runs before the plugin attributes are\n-            // registered, so we skip this in that case.\n-            if !is_macro {\n+        if !attr::is_known(attr) {\n+            if name.starts_with(\"rustc_\") {\n+                let msg = \"unless otherwise specified, attributes with the prefix `rustc_` \\\n+                           are reserved for internal compiler diagnostics\";\n+                gate_feature!(self, rustc_attrs, attr.span, msg);\n+            } else if !is_macro {\n+                // Only run the custom attribute lint during regular feature gate\n+                // checking. Macro gating runs before the plugin attributes are\n+                // registered, so we skip this in that case.\n                 let msg = format!(\"The attribute `{}` is currently unknown to the compiler and \\\n                                    may have meaning added to it in the future\", attr.path);\n                 gate_feature!(self, custom_attribute, attr.span, &msg);"}, {"sha": "771a559b37ccfc832ab4d039082886944cfe435a", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -3,7 +3,7 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast::{Expr, MetaItem};\n-use syntax::ext::base::{Annotatable, ExtCtxt};\n+use syntax::ext::base::{Annotatable, DummyResult, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n@@ -69,7 +69,7 @@ fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructur\n             span_err!(cx, trait_span, E0665,\n                       \"`Default` cannot be derived for enums, only structs\");\n             // let compilation continue\n-            cx.expr_usize(trait_span, 0)\n+            DummyResult::raw_expr(trait_span)\n         }\n         _ => cx.span_bug(trait_span, \"Non-static method in `derive(Default)`\"),\n     };"}, {"sha": "c6f427e63cd8da3257135a70b5fa4766b78019a9", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -666,7 +666,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     \"X\" => \"UpperHex\",\n                     _ => {\n                         ecx.span_err(sp, &format!(\"unknown format trait `{}`\", *tyname));\n-                        \"Dummy\"\n+                        return DummyResult::raw_expr(sp);\n                     }\n                 }\n             }\n@@ -713,7 +713,7 @@ pub fn expand_format_args_nl<'cx>(\n                                        sp,\n                                        feature_gate::GateIssue::Language,\n                                        feature_gate::EXPLAIN_FORMAT_ARGS_NL);\n-        return base::DummyResult::expr(sp);\n+        return DummyResult::expr(sp);\n     }\n     sp = sp.apply_mark(ecx.current_expansion.mark);\n     match parse_args(ecx, sp, tts) {"}, {"sha": "496d196c94ae57cbfe107f45964b8990ea00b855", "filename": "src/test/ui/conditional-compilation/cfg-attr-invalid-predicate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,2 +1,4 @@\n #[cfg(foo(bar))] //~ ERROR invalid predicate `foo`\n+fn check() {}\n+\n fn main() {}"}, {"sha": "c7e1b4435e49baa43834db82683cd571f1387aec", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -33,3 +33,5 @@ macro_rules! generate_s10 {\n }\n \n generate_s10!(concat!(\"nonexistent\"));\n+\n+fn main() {}"}, {"sha": "fbda3dbe9481f43ee53e2c15111f876be9b930bc", "filename": "src/test/ui/cross/cross-crate-macro-backtrace/auxiliary/extern_macro_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fauxiliary%2Fextern_macro_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fauxiliary%2Fextern_macro_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fauxiliary%2Fextern_macro_crate.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -4,7 +4,7 @@ pub fn print(_args: std::fmt::Arguments) {}\n \n #[macro_export]\n macro_rules! myprint {\n-    ($($arg:tt)*) => (print(format_args!($($arg)*)));\n+    ($($arg:tt)*) => ($crate::print(format_args!($($arg)*)));\n }\n \n #[macro_export]"}, {"sha": "b847000a81d80089c9d3bc98a1c043b4494d0962", "filename": "src/test/ui/derives/derive-on-trait-item-or-impl-item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -4,6 +4,8 @@ trait Foo {\n     type Bar;\n }\n \n+struct Bar;\n+\n impl Bar {\n     #[derive(Clone)]\n     //~^ ERROR `derive` may only be applied to structs, enums and unions"}, {"sha": "0088add7e7f6e444e5b2ca8d9e70939625254f40", "filename": "src/test/ui/derives/derive-on-trait-item-or-impl-item.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -11,4 +11,3 @@ LL |     #[derive(Clone)]\n    |     ^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n-"}, {"sha": "63eec50c2d29f06b37c849bd10bdacc6e23c9ab6", "filename": "src/test/ui/did_you_mean/issue-40396.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,14 +1,27 @@\n fn foo() {\n-    println!(\"{:?}\", (0..13).collect<Vec<i32>>()); //~ ERROR chained comparison\n+    (0..13).collect<Vec<i32>>();\n+    //~^ ERROR chained comparison\n+    //~| ERROR expected value, found struct `Vec`\n+    //~| ERROR expected value, found builtin type `i32`\n+    //~| ERROR attempted to take value of method `collect`\n }\n \n fn bar() {\n-    println!(\"{:?}\", Vec<i32>::new()); //~ ERROR chained comparison\n+    Vec<i32>::new();\n+    //~^ ERROR chained comparison\n+    //~| ERROR expected value, found struct `Vec`\n+    //~| ERROR expected value, found builtin type `i32`\n+    //~| ERROR cannot find function `new` in the crate root\n }\n \n fn qux() {\n-    println!(\"{:?}\", (0..13).collect<Vec<i32>()); //~ ERROR chained comparison\n+    (0..13).collect<Vec<i32>();\n     //~^ ERROR chained comparison\n+    //~| ERROR chained comparison\n+    //~| ERROR expected value, found struct `Vec`\n+    //~| ERROR expected value, found builtin type `i32`\n+    //~| ERROR attempted to take value of method `collect`\n+    //~| ERROR mismatched types\n }\n \n fn main() {}"}, {"sha": "33884bbfecfcc8a07b965b2fe943e2d3267f3d6f", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 78, "deletions": 9, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,38 +1,107 @@\n error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:2:37\n    |\n-LL |     println!(\"{:?}\", (0..13).collect<Vec<i32>>()); //~ ERROR chained comparison\n-   |                                     ^^^^^^^^\n+LL |     (0..13).collect<Vec<i32>>();\n+   |                    ^^^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:6:25\n    |\n-LL |     println!(\"{:?}\", Vec<i32>::new()); //~ ERROR chained comparison\n-   |                         ^^^^^^^\n+LL |     Vec<i32>::new();\n+   |        ^^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:10:37\n    |\n-LL |     println!(\"{:?}\", (0..13).collect<Vec<i32>()); //~ ERROR chained comparison\n-   |                                     ^^^^^^^^\n+LL |     (0..13).collect<Vec<i32>();\n+   |                    ^^^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:10:41\n    |\n-LL |     println!(\"{:?}\", (0..13).collect<Vec<i32>()); //~ ERROR chained comparison\n-   |                                         ^^^^^^\n+LL |     (0..13).collect<Vec<i32>();\n+   |                        ^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n-error: aborting due to 4 previous errors\n+error[E0423]: expected value, found struct `Vec`\n+  --> $DIR/issue-40396.rs:12:21\n+   |\n+LL |     (0..13).collect<Vec<i32>>();\n+   |                     ^^^ did you mean `Vec { /* fields */ }`?\n+\n+error[E0423]: expected value, found builtin type `i32`\n+  --> $DIR/issue-40396.rs:12:25\n+   |\n+LL |     (0..13).collect<Vec<i32>>();\n+   |                         ^^^ not a value\n+\n+error[E0423]: expected value, found struct `Vec`\n+  --> $DIR/issue-40396.rs:20:5\n+   |\n+LL |     Vec<i32>::new();\n+   |     ^^^ did you mean `Vec { /* fields */ }`?\n+\n+error[E0423]: expected value, found builtin type `i32`\n+  --> $DIR/issue-40396.rs:20:9\n+   |\n+LL |     Vec<i32>::new();\n+   |         ^^^ not a value\n+\n+error[E0425]: cannot find function `new` in the crate root\n+  --> $DIR/issue-40396.rs:20:15\n+   |\n+LL |     Vec<i32>::new();\n+   |               ^^^ not found in the crate root\n+\n+error[E0423]: expected value, found struct `Vec`\n+  --> $DIR/issue-40396.rs:28:21\n+   |\n+LL |     (0..13).collect<Vec<i32>();\n+   |                     ^^^ did you mean `Vec { /* fields */ }`?\n+\n+error[E0423]: expected value, found builtin type `i32`\n+  --> $DIR/issue-40396.rs:28:25\n+   |\n+LL |     (0..13).collect<Vec<i32>();\n+   |                         ^^^ not a value\n+\n+error[E0615]: attempted to take value of method `collect` on type `std::ops::Range<{integer}>`\n+  --> $DIR/issue-40396.rs:12:13\n+   |\n+LL |     (0..13).collect<Vec<i32>>();\n+   |             ^^^^^^^\n+   |\n+   = help: maybe a `()` to call it is missing?\n+\n+error[E0615]: attempted to take value of method `collect` on type `std::ops::Range<{integer}>`\n+  --> $DIR/issue-40396.rs:28:13\n+   |\n+LL |     (0..13).collect<Vec<i32>();\n+   |             ^^^^^^^\n+   |\n+   = help: maybe a `()` to call it is missing?\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-40396.rs:28:29\n+   |\n+LL |     (0..13).collect<Vec<i32>();\n+   |                             ^^ expected bool, found ()\n+   |\n+   = note: expected type `bool`\n+              found type `()`\n+\n+error: aborting due to 14 previous errors\n \n+Some errors occurred: E0308, E0423, E0425, E0615.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "d1752a7ec71ddcb6ef2220fba8252577eed6d975", "filename": "src/test/ui/editions/edition-keywords-2015-2015-parsing.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -4,6 +4,10 @@\n #[macro_use]\n extern crate edition_kw_macro_2015;\n \n+mod module {\n+    pub fn async() {}\n+}\n+\n pub fn check_async() {\n     let mut async = 1; // OK\n     let mut r#async = 1; // OK\n@@ -18,3 +22,5 @@ pub fn check_async() {\n     module::async(); // OK\n     module::r#async(); // OK\n }\n+\n+fn main() {}"}, {"sha": "06901ad6ef0eeaaee9b033c2bfec5528d5124745", "filename": "src/test/ui/editions/edition-keywords-2015-2015-parsing.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -11,4 +11,3 @@ LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the t\n    |                                   ^^^^^ no rules expected this token in macro call\n \n error: aborting due to 2 previous errors\n-"}, {"sha": "2684c8e00b2e11d762f25b6809f9169512114a8f", "filename": "src/test/ui/editions/edition-keywords-2015-2018-expansion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -10,3 +10,5 @@ mod one_async {\n mod two_async {\n     produces_async_raw! {} // OK\n }\n+\n+fn main() {}"}, {"sha": "44455f43856c6347a8677c7291921349193e6a94", "filename": "src/test/ui/editions/edition-keywords-2015-2018-parsing.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -4,6 +4,10 @@\n #[macro_use]\n extern crate edition_kw_macro_2018;\n \n+mod module {\n+    pub fn async() {}\n+}\n+\n pub fn check_async() {\n     let mut async = 1; // OK\n     let mut r#async = 1; // OK\n@@ -18,3 +22,5 @@ pub fn check_async() {\n     module::async(); // OK\n     module::r#async(); // OK\n }\n+\n+fn main() {}"}, {"sha": "98fa249394081ef7e882792e8ae9ead84b63012c", "filename": "src/test/ui/editions/edition-keywords-2015-2018-parsing.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -11,4 +11,3 @@ LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the t\n    |                                   ^^^^^ no rules expected this token in macro call\n \n error: aborting due to 2 previous errors\n-"}, {"sha": "6f766550d47341356abdf839d70db44e729e4a1e", "filename": "src/test/ui/editions/edition-keywords-2018-2018-expansion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -10,3 +10,5 @@ mod one_async {\n mod two_async {\n     produces_async_raw! {} // OK\n }\n+\n+fn main() {}"}, {"sha": "5f276f6b65ebcf23792086ef54320faef1800f4f", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-derive-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -13,3 +13,5 @@ mod derive {\n     //~^ ERROR cannot find derive macro `x3300` in this scope\n     struct S;\n }\n+\n+fn main() {}"}, {"sha": "1397412988491afd703781f1d1e0fdaf62cc309c", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-derive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -31,3 +31,5 @@ mod derive {\n     //~^ ERROR `derive` may only be applied to structs, enums and unions\n     impl S { }\n }\n+\n+fn main() {}"}, {"sha": "db1a7dad06bc36e129835175c2e2a5442a2cd34d", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-has-atomic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-has-atomic.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,3 +1,5 @@\n+#![feature(intrinsics, lang_items, no_core)]\n+\n #![crate_type=\"rlib\"]\n #![no_core]\n "}, {"sha": "125af64fef05c7bb99dea8969773eb7806588037", "filename": "src/test/ui/feature-gates/feature-gate-macros_in_extern.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macros_in_extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macros_in_extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-macros_in_extern.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -23,3 +23,5 @@ extern {\n     emits_nothing!();\n     //~^ ERROR macro invocations in `extern {}` blocks are experimental\n }\n+\n+fn main() {}"}, {"sha": "5ec413cc71de0b26cab7e75dece06d26e3a7a8ec", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,8 +1,6 @@\n-// ignore-tidy-linelength\n-\n // Test that `#[rustc_*]` attributes are gated by `rustc_attrs` feature gate.\n \n #[rustc_foo]\n-//~^ ERROR unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n+//~^ ERROR unless otherwise specified, attributes with the prefix `rustc_` are reserved\n \n fn main() {}"}, {"sha": "a2df2913afb9169104f5e4db658802fa01e8c7b2", "filename": "src/test/ui/issues/issue-10536.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-10536.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-10536.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10536.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,8 +1,6 @@\n // We only want to assert that this doesn't ICE, we don't particularly care\n // about whether it nor it fails to compile.\n \n-// error-pattern:\n-\n macro_rules! foo{\n     () => {{\n         macro_rules! bar{() => (())}\n@@ -15,9 +13,12 @@ pub fn main() {\n \n     assert!({one! two()});\n     //~^ ERROR macros that expand to items must either be surrounded with braces or followed by a\n+    //~| ERROR cannot find macro `one!` in this scope\n+    //~| ERROR mismatched types\n \n     // regardless of whether nested macro_rules works, the following should at\n     // least throw a conventional error.\n     assert!({one! two});\n-    //~^ ERROR expected\n+    //~^ ERROR expected `(` or `{`, found `}`\n+    //~| ERROR cannot apply unary operator `!` to type `!`\n }"}, {"sha": "6b2424d3a45dd7ace71feef44ca5a3a44ab515d5", "filename": "src/test/ui/issues/issue-10536.stderr", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -10,5 +10,28 @@ error: expected `(` or `{`, found `}`\n LL |     assert!({one! two});\n    |                      ^ expected `(` or `{`\n \n-error: aborting due to 2 previous errors\n+error: cannot find macro `one!` in this scope\n+  --> $DIR/issue-10536.rs:24:14\n+   |\n+LL |     assert!({one! two()});\n+   |              ^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-10536.rs:24:13\n+   |\n+LL |     assert!({one! two()});\n+   |             ^^^^^^^^^^^^ expected bool, found ()\n+   |\n+   = note: expected type `bool`\n+              found type `()`\n+\n+error[E0600]: cannot apply unary operator `!` to type `!`\n+  --> $DIR/issue-10536.rs:31:5\n+   |\n+LL |     assert!({one! two});\n+   |     ^^^^^^^^^^^^^^^^^^^^ cannot apply unary operator `!`\n+\n+error: aborting due to 5 previous errors\n \n+Some errors occurred: E0308, E0600.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "2277778040292092af60a1ae95766b1716967e51", "filename": "src/test/ui/issues/issue-11692-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n     print!(testo!());\n     //~^ ERROR: format argument must be a string literal\n+    //~| ERROR: cannot find macro `testo!` in this scope\n }"}, {"sha": "e0c4642ea60f17038e2a17e1c63e8a0f436cd879", "filename": "src/test/ui/issues/issue-11692-1.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11692-1.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -8,5 +8,11 @@ help: you might be missing a string literal to format with\n LL |     print!(\"{}\", testo!());\n    |            ^^^^^\n \n-error: aborting due to previous error\n+error: cannot find macro `testo!` in this scope\n+  --> $DIR/issue-11692-1.rs:12:12\n+   |\n+LL |     print!(testo!());\n+   |            ^^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "6103931657342d77511e1c9e231f18c4b5983e00", "filename": "src/test/ui/issues/issue-11692-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,3 +1,4 @@\n fn main() {\n     concat!(test!()); //~ ERROR cannot find macro `test!` in this scope\n+                      //~| ERROR expected a literal\n }"}, {"sha": "16cf7b0dca7e137f1fd2f7968ebaf5fcb8338ede", "filename": "src/test/ui/issues/issue-11692-2.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,8 +1,16 @@\n+error: expected a literal\n+  --> $DIR/issue-11692-2.rs:12:13\n+   |\n+LL |     concat!(test!()); //~ ERROR cannot find macro `test!` in this scope\n+   |             ^^^^^^^\n+   |\n+   = note: only literals (like `\"foo\"`, `42` and `3.14`) can be passed to `concat!()`\n+\n error: cannot find macro `test!` in this scope\n   --> $DIR/issue-11692-2.rs:2:13\n    |\n LL |     concat!(test!()); //~ ERROR cannot find macro `test!` in this scope\n    |             ^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "27d68a11c1f160d6e456c2c6d9ba3691d6d7e766", "filename": "src/test/ui/issues/issue-32950.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-32950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-32950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32950.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -3,6 +3,7 @@\n #[derive(Debug)]\n struct Baz<T>(\n     concat_idents!(Foo, Bar) //~ ERROR `derive` cannot be used on items with type macros\n+                             //~^ ERROR cannot find type `FooBar` in this scope\n );\n \n fn main() {}"}, {"sha": "af148cbb5c6925904e3c5520e142bc0f10f38004", "filename": "src/test/ui/issues/issue-32950.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-32950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-32950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32950.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -4,5 +4,12 @@ error: `derive` cannot be used on items with type macros\n LL |     concat_idents!(Foo, Bar) //~ ERROR `derive` cannot be used on items with type macros\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0412]: cannot find type `FooBar` in this scope\n+  --> $DIR/issue-32950.rs:15:5\n+   |\n+LL |     concat_idents!(Foo, Bar) //~ ERROR `derive` cannot be used on items with type macros\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "223bbc3ff5e2190f35519ca5b3ee1665fe1f9fbc", "filename": "src/test/ui/issues/issue-33571.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-33571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-33571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33571.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -2,3 +2,5 @@\n          Sync, //~ ERROR this unsafe trait should be implemented explicitly\n          Copy)]\n enum Foo {}\n+\n+fn main() {}"}, {"sha": "71e2125ffd2ccc7d992f8f8797721480882286e8", "filename": "src/test/ui/issues/issue-35677.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-35677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-35677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35677.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -3,3 +3,5 @@ fn intersect_map<K, V>(this: &mut HashMap<K, V>, other: HashMap<K, V>) -> bool {\n     this.drain()\n     //~^ ERROR no method named\n }\n+\n+fn main() {}"}, {"sha": "61ddb75b3b52c3a8203e191594bd3232c10d7004", "filename": "src/test/ui/issues/issue-35677.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,7 +1,3 @@\n-error[E0601]: `main` function not found in crate `issue_35677`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-35677.rs`\n-\n error[E0599]: no method named `drain` found for type `&mut std::collections::HashMap<K, V>` in the current scope\n   --> $DIR/issue-35677.rs:3:10\n    |\n@@ -12,7 +8,6 @@ LL |     this.drain()\n            `K : std::cmp::Eq`\n            `K : std::hash::Hash`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0599, E0601.\n-For more information about an error, try `rustc --explain E0599`.\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "87092689a281d418b15cc6f63c7635b645187ad0", "filename": "src/test/ui/issues/issue-36617.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-36617.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-36617.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36617.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1 +1,3 @@\n #![derive(Copy)] //~ ERROR `derive` may only be applied to structs, enums and unions\n+\n+fn main() {}"}, {"sha": "072243d881ca68f1507b631ef6f47cfb532f035f", "filename": "src/test/ui/issues/issue-43023.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-43023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-43023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43023.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -16,3 +16,5 @@ trait Tr2 {\n     #[derive(Debug)] //~ ERROR `derive` may only be applied to structs, enums and unions\n     type F;\n }\n+\n+fn main() {}"}, {"sha": "d78b958463fcb8e14e253ee91d468541fe5738e8", "filename": "src/test/ui/issues/issue-46438.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-46438.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-46438.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46438.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -4,7 +4,7 @@ macro_rules! m {\n     }\n }\n \n-trait Trait {}\n+trait Tr {}\n \n m!(Tr);\n "}, {"sha": "ad66e421c6b9de848382eb619323ba1eac75f26e", "filename": "src/test/ui/issues/issue-49074.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-49074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-49074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49074.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -9,5 +9,5 @@ mod foo {\n }\n \n fn main() {\n-   bar!();\n+   bar!(); //~ ERROR cannot find macro `bar!` in this scope\n }"}, {"sha": "6b5e979082e93986863f52927cc2b2ec920bd55b", "filename": "src/test/ui/issues/issue-49074.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -6,6 +6,14 @@ LL | #[marco_use] // typo\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: cannot find macro `bar!` in this scope\n+  --> $DIR/issue-49074.rs:22:4\n+   |\n+LL |    bar!(); //~ ERROR cannot find macro `bar!` in this scope\n+   |    ^^^\n+   |\n+   = help: have you added the `#[macro_use]` on the module/import?\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "ad5438fbd46cbd80e6aea86762ed55444ae69af0", "filename": "src/test/ui/issues/issue-51279.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-51279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-51279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51279.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -22,3 +22,4 @@ unsafe impl<#[cfg_attr(none, may_dangle)] T> Drop for M<T> {\n \n type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n //~^ ERROR #[cfg] cannot be applied on a generic parameter\n+//~| ERROR attribute `ignored` is currently unknown to the compiler"}, {"sha": "33afac39865ad257809f9660248dfce5074cf1ea", "filename": "src/test/ui/issues/issue-51279.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51279.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -46,5 +46,14 @@ error: #[cfg] cannot be applied on a generic parameter\n LL | type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n    |                       ^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error[E0658]: The attribute `ignored` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/issue-51279.rs:33:8\n+   |\n+LL | type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n+   |        ^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: aborting due to 9 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "efdea5c9b1e16e44c2cd536a99f12ab4f641aa78", "filename": "src/test/ui/issues/issue-55796.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -22,3 +22,5 @@ pub trait Graph<'a> {\n //~^ ERROR cannot infer\n     }\n }\n+\n+fn main() {}"}, {"sha": "c05f8b85d0e989c16ca92b2c2887be8b7ca75972", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,7 +1,3 @@\n-error[E0601]: `main` function not found in crate `issue_55796`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-55796.rs`\n-\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/issue-55796.rs:16:9\n    |\n@@ -44,7 +40,6 @@ LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n            expected std::boxed::Box<(dyn std::iter::Iterator<Item=<Self as Graph<'a>>::Node> + 'static)>\n               found std::boxed::Box<dyn std::iter::Iterator<Item=<Self as Graph<'a>>::Node>>\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors occurred: E0495, E0601.\n-For more information about an error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "6a5986c355e1cd64283ce187b147c5fd7ffeaf71", "filename": "src/test/ui/issues/issue-6596-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -2,6 +2,7 @@ macro_rules! e {\n     ($inp:ident) => (\n         $nonexistent\n         //~^ ERROR unknown macro variable `nonexistent`\n+        //~| ERROR cannot find value `nonexistent` in this scope\n     );\n }\n "}, {"sha": "face872591456ca528327643fc2a986cb6a9df47", "filename": "src/test/ui/issues/issue-6596-1.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -7,5 +7,15 @@ LL |         $nonexistent\n LL |     e!(foo);\n    |     -------- in this macro invocation\n \n-error: aborting due to previous error\n+error[E0425]: cannot find value `nonexistent` in this scope\n+  --> $DIR/issue-6596-1.rs:14:9\n+   |\n+LL |         $nonexistent\n+   |         ^^^^^^^^^^^^ not found in this scope\n+...\n+LL |     e!(foo);\n+   |     -------- in this macro invocation\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "4ff7cfe386553f1d4d19881b684eb6a68e79708c", "filename": "src/test/ui/issues/issue-6596-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -9,5 +9,6 @@ macro_rules! g {\n }\n \n fn main() {\n+    let foo = 0;\n     g!(foo);\n }"}, {"sha": "2c11ce56f8b838b66ea508a78b2b248cb2c1ba2e", "filename": "src/test/ui/macro_backtrace/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -12,6 +12,8 @@ macro_rules! pong {\n //~| ERROR expected one of\n //~| ERROR expected one of\n \n+struct syntax;\n+\n fn main() {\n     pong!();\n     ping!();"}, {"sha": "7a4b9278e0a610b871c073f9a590b62a3a38d652", "filename": "src/test/ui/macros/macro-comma-behavior.core.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.core.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -40,5 +40,11 @@ error: 1 positional argument in format string, but no arguments were given\n LL |             write!(f, \"{}\",)?;\n    |                        ^^\n \n-error: aborting due to 7 previous errors\n+error: `#[panic_handler]` function required, but not found\n+\n+error: language item required, but not found: `eh_personality`\n+\n+error: language item required, but not found: `eh_unwind_resume`\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "2c8ebc497728b73a5ee6be3d35ec5c09a111ab0b", "filename": "src/test/ui/malformed/malformed-derive-entry.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -13,3 +13,5 @@ struct Test3;\n #[derive]\n //~^ WARNING empty trait list\n struct Test4;\n+\n+fn main() {}"}, {"sha": "866c5b2e34bbd01071509b4eb14bbcc8a0d31ff6", "filename": "src/test/ui/panic-runtime/runtime-depend-on-needs-runtime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fpanic-runtime%2Fruntime-depend-on-needs-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fpanic-runtime%2Fruntime-depend-on-needs-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fruntime-depend-on-needs-runtime.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -3,3 +3,5 @@\n // error-pattern:cannot depend on a crate that needs a panic runtime\n \n extern crate depends;\n+\n+fn main() {}"}, {"sha": "27e27dda5effe256ea9513fe3f5ac8c22c2a870a", "filename": "src/test/ui/panic-runtime/runtime-depend-on-needs-runtime.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fpanic-runtime%2Fruntime-depend-on-needs-runtime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fpanic-runtime%2Fruntime-depend-on-needs-runtime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fruntime-depend-on-needs-runtime.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,9 +1,4 @@\n error: the crate `depends` cannot depend on a crate that needs a panic runtime, but it depends on `needs_panic_runtime`\n \n-error[E0601]: `main` function not found in crate `runtime_depend_on_needs_runtime`\n-   |\n-   = note: consider adding a `main` function to `$DIR/runtime-depend-on-needs-runtime.rs`\n+error: aborting due to previous error\n \n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "bae90227c62f405d3b1bae2a7eddf36539d2ddd4", "filename": "src/test/ui/parser/macro/pub-item-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -14,5 +14,5 @@ mod foo {\n }\n \n fn main() {\n-    let y: u32 = foo::x;\n+    let y: u32 = foo::x; //~ ERROR static `x` is private\n }"}, {"sha": "fb7a1fce54955b14b62543be7c47a32880410675", "filename": "src/test/ui/parser/macro/pub-item-macro.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -9,5 +9,12 @@ LL |     pub_x!();\n    |\n    = help: try adjusting the macro to put `pub` inside the invocation\n \n-error: aborting due to previous error\n+error[E0603]: static `x` is private\n+  --> $DIR/pub-item-macro.rs:27:23\n+   |\n+LL |     let y: u32 = foo::x; //~ ERROR static `x` is private\n+   |                       ^\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0603`."}, {"sha": "0b082f4818f1b53fa32f72cc1e13df96ec721cd3", "filename": "src/test/ui/proc-macro/issue-41211.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -7,6 +7,7 @@\n \n #![emit_unchanged]\n //~^ ERROR attribute `emit_unchanged` is currently unknown to the compiler\n+//~| ERROR inconsistent resolution for a macro: first custom attribute, then attribute macro\n extern crate issue_41211;\n use issue_41211::emit_unchanged;\n "}, {"sha": "2c702c7871d0578572bfe67b125546dad817c86f", "filename": "src/test/ui/proc-macro/issue-41211.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -6,6 +6,12 @@ LL | #![emit_unchanged]\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: inconsistent resolution for a macro: first custom attribute, then attribute macro\n+  --> $DIR/issue-41211.rs:18:4\n+   |\n+LL | #![emit_unchanged]\n+   |    ^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "d0dd1b4603b168b4409fe05738794eeb66c77bc1", "filename": "src/test/ui/proc-macro/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -7,3 +7,5 @@ extern crate lifetimes;\n use lifetimes::*;\n \n type A = single_quote_alone!(); //~ ERROR expected type, found `'`\n+\n+fn main() {}"}, {"sha": "b870b438a65406101839550ab906fca5a9123ad3", "filename": "src/test/ui/proc-macro/more-gates.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmore-gates.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,5 +1,7 @@\n // aux-build:more-gates.rs\n \n+#![feature(decl_macro)]\n+\n extern crate more_gates as foo;\n \n use foo::*;"}, {"sha": "799f1de586ed4d10774eed84c4f4b89563f25902", "filename": "src/test/ui/proc-macro/parent-source-spans.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -28,6 +28,9 @@ macro three($($tokens:tt)*) {\n \n macro four($($tokens:tt)*) {\n     parent_source_spans!($($tokens)*);\n+    //~^ ERROR cannot find value `ok` in this scope\n+    //~| ERROR cannot find value `ok` in this scope\n+    //~| ERROR cannot find value `ok` in this scope\n }\n \n fn main() {"}, {"sha": "2d9ebff88cb668d56551db40808c69ce49bf9ac1", "filename": "src/test/ui/proc-macro/parent-source-spans.stderr", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -124,5 +124,33 @@ error: second source: \"hop\"\n LL |     three!(\"hip\", \"hop\");\n    |                   ^^^^^\n \n-error: aborting due to 18 previous errors\n+error[E0425]: cannot find value `ok` in this scope\n+  --> $DIR/parent-source-spans.rs:40:5\n+   |\n+LL |     parent_source_spans!($($tokens)*);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ did you mean `Ok`?\n+...\n+LL |     one!(\"hello\", \"world\");\n+   |     ----------------------- in this macro invocation\n+\n+error[E0425]: cannot find value `ok` in this scope\n+  --> $DIR/parent-source-spans.rs:40:5\n+   |\n+LL |     parent_source_spans!($($tokens)*);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ did you mean `Ok`?\n+...\n+LL |     two!(\"yay\", \"rust\");\n+   |     -------------------- in this macro invocation\n+\n+error[E0425]: cannot find value `ok` in this scope\n+  --> $DIR/parent-source-spans.rs:40:5\n+   |\n+LL |     parent_source_spans!($($tokens)*);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ did you mean `Ok`?\n+...\n+LL |     three!(\"hip\", \"hop\");\n+   |     --------------------- in this macro invocation\n+\n+error: aborting due to 21 previous errors\n \n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "1cc824e943c75b7ce14848ded7fd7eaf8a4e987d", "filename": "src/test/ui/proc-macro/proc-macro-attributes.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -3,11 +3,12 @@\n #[macro_use]\n extern crate derive_b;\n \n-#[B]\n+#[B] //~ ERROR `B` is ambiguous\n #[C] //~ ERROR attribute `C` is currently unknown to the compiler\n-#[B(D)]\n-#[B(E = \"foo\")]\n-#[B(arbitrary tokens)]\n+#[B(D)] //~ ERROR `B` is ambiguous\n+#[B(E = \"foo\")] //~ ERROR `B` is ambiguous\n+#[B(arbitrary tokens)] //~ ERROR `B` is ambiguous\n+                       //~^ ERROR expected one of `(`, `)`, `,`, `::`, or `=`, found `tokens`\n #[derive(B)]\n struct B;\n "}, {"sha": "8b87e482282bd6c936e2508c233d6bbcbfdc4a02", "filename": "src/test/ui/proc-macro/proc-macro-attributes.stderr", "status": "modified", "additions": 77, "deletions": 2, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-attributes.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -6,6 +6,81 @@ LL | #[C] //~ ERROR attribute `C` is currently unknown to the compiler\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0659]: `B` is ambiguous (derive helper attribute vs any other name)\n+  --> $DIR/proc-macro-attributes.rs:16:3\n+   |\n+LL | #[B] //~ ERROR `B` is ambiguous\n+   |   ^ ambiguous name\n+   |\n+note: `B` could refer to the derive helper attribute defined here\n+  --> $DIR/proc-macro-attributes.rs:22:10\n+   |\n+LL | #[derive(B)]\n+   |          ^\n+note: `B` could also refer to the derive macro imported here\n+  --> $DIR/proc-macro-attributes.rs:13:1\n+   |\n+LL | #[macro_use]\n+   | ^^^^^^^^^^^^\n+\n+error[E0659]: `B` is ambiguous (derive helper attribute vs any other name)\n+  --> $DIR/proc-macro-attributes.rs:18:3\n+   |\n+LL | #[B(D)] //~ ERROR `B` is ambiguous\n+   |   ^ ambiguous name\n+   |\n+note: `B` could refer to the derive helper attribute defined here\n+  --> $DIR/proc-macro-attributes.rs:22:10\n+   |\n+LL | #[derive(B)]\n+   |          ^\n+note: `B` could also refer to the derive macro imported here\n+  --> $DIR/proc-macro-attributes.rs:13:1\n+   |\n+LL | #[macro_use]\n+   | ^^^^^^^^^^^^\n+\n+error[E0659]: `B` is ambiguous (derive helper attribute vs any other name)\n+  --> $DIR/proc-macro-attributes.rs:19:3\n+   |\n+LL | #[B(E = \"foo\")] //~ ERROR `B` is ambiguous\n+   |   ^ ambiguous name\n+   |\n+note: `B` could refer to the derive helper attribute defined here\n+  --> $DIR/proc-macro-attributes.rs:22:10\n+   |\n+LL | #[derive(B)]\n+   |          ^\n+note: `B` could also refer to the derive macro imported here\n+  --> $DIR/proc-macro-attributes.rs:13:1\n+   |\n+LL | #[macro_use]\n+   | ^^^^^^^^^^^^\n+\n+error[E0659]: `B` is ambiguous (derive helper attribute vs any other name)\n+  --> $DIR/proc-macro-attributes.rs:20:3\n+   |\n+LL | #[B(arbitrary tokens)] //~ ERROR `B` is ambiguous\n+   |   ^ ambiguous name\n+   |\n+note: `B` could refer to the derive helper attribute defined here\n+  --> $DIR/proc-macro-attributes.rs:22:10\n+   |\n+LL | #[derive(B)]\n+   |          ^\n+note: `B` could also refer to the derive macro imported here\n+  --> $DIR/proc-macro-attributes.rs:13:1\n+   |\n+LL | #[macro_use]\n+   | ^^^^^^^^^^^^\n+\n+error: expected one of `(`, `)`, `,`, `::`, or `=`, found `tokens`\n+  --> $DIR/proc-macro-attributes.rs:20:15\n+   |\n+LL | #[B(arbitrary tokens)] //~ ERROR `B` is ambiguous\n+   |               ^^^^^^ expected one of `(`, `)`, `,`, `::`, or `=` here\n+\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors occurred: E0658, E0659.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "b948226652b45fbca46b0d6c0394f8be685218c8", "filename": "src/test/ui/quote-with-interpolated.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fquote-with-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fquote-with-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquote-with-interpolated.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -2,7 +2,12 @@\n fn main() {\n     macro_rules! foo {\n         ($bar:expr)  => {\n-            quote_expr!(cx, $bar) //~ ERROR quote! with interpolated token\n+            quote_expr!(cx, $bar)\n+            //~^ ERROR quote! with interpolated token\n+            //~| ERROR failed to resolve: maybe a missing `extern crate syntax;`?\n+            //~| ERROR failed to resolve: maybe a missing `extern crate syntax;`?\n+            //~| ERROR cannot find value `cx` in this scope\n+            //~| ERROR cannot find function `new_parser_from_tts` in this scope\n         }\n     }\n     foo!(bar);"}, {"sha": "3c582286662afccc38cbf1f302e9a985aef9786a", "filename": "src/test/ui/quote-with-interpolated.stderr", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fquote-with-interpolated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fquote-with-interpolated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquote-with-interpolated.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,11 +1,40 @@\n error: quote! with interpolated token\n   --> $DIR/quote-with-interpolated.rs:5:29\n    |\n-LL |             quote_expr!(cx, $bar) //~ ERROR quote! with interpolated token\n+LL |             quote_expr!(cx, $bar)\n    |                             ^^^^\n ...\n LL |     foo!(bar);\n    |     ---------- in this macro invocation\n \n-error: aborting due to previous error\n+error[E0433]: failed to resolve: maybe a missing `extern crate syntax;`?\n+  --> $DIR/quote-with-interpolated.rs:15:13\n+   |\n+LL |             quote_expr!(cx, $bar)\n+   |             ^^^^^^^^^^^^^^^^^^^^^ maybe a missing `extern crate syntax;`?\n+\n+error[E0433]: failed to resolve: maybe a missing `extern crate syntax;`?\n+  --> $DIR/quote-with-interpolated.rs:15:29\n+   |\n+LL |             quote_expr!(cx, $bar)\n+   |                             ^^^^ maybe a missing `extern crate syntax;`?\n+\n+error[E0425]: cannot find value `cx` in this scope\n+  --> $DIR/quote-with-interpolated.rs:15:25\n+   |\n+LL |             quote_expr!(cx, $bar)\n+   |                         ^^ not found in this scope\n+...\n+LL |     foo!(bar);\n+   |     ---------- in this macro invocation\n+\n+error[E0425]: cannot find function `new_parser_from_tts` in this scope\n+  --> $DIR/quote-with-interpolated.rs:15:13\n+   |\n+LL |             quote_expr!(cx, $bar)\n+   |             ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to 5 previous errors\n \n+Some errors occurred: E0425, E0433.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "96c63ba4db8c9dfb0879a0a8023c340f3e34a7a9", "filename": "src/test/ui/reserved/reserved-attr-on-macro.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,8 +1,9 @@\n-#[rustc_attribute_should_be_reserved] //~ ERROR attributes with the prefix `rustc_` are reserved\n+#[rustc_attribute_should_be_reserved]\n+//~^ ERROR unless otherwise specified, attributes with the prefix `rustc_` are reserved\n macro_rules! foo {\n     () => (());\n }\n \n fn main() {\n-    foo!();\n+    foo!(); //~ ERROR cannot determine resolution for the macro `foo`\n }"}, {"sha": "4f1c0e1aa707416bb5d92e62b489b2060bca00c4", "filename": "src/test/ui/reserved/reserved-attr-on-macro.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,11 +1,19 @@\n error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics (see issue #29642)\n   --> $DIR/reserved-attr-on-macro.rs:1:3\n    |\n-LL | #[rustc_attribute_should_be_reserved] //~ ERROR attributes with the prefix `rustc_` are reserved\n+LL | #[rustc_attribute_should_be_reserved]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: cannot determine resolution for the macro `foo`\n+  --> $DIR/reserved-attr-on-macro.rs:18:5\n+   |\n+LL |     foo!(); //~ ERROR cannot determine resolution for the macro `foo`\n+   |     ^^^\n+   |\n+   = note: import resolution is stuck, try simplifying macro imports\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "4a1681e4e2b8a83b1a496ca9fe0009698453154a", "filename": "src/test/ui/self/self_type_keyword.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -7,6 +7,7 @@ mod foo {\n \n struct Bar<'Self>;\n //~^ ERROR lifetimes cannot use keyword names\n+//~| ERROR parameter `'Self` is never used\n \n struct Foo;\n "}, {"sha": "1981e23c88a1c809f47a0c46861436dcd3e5e13a", "filename": "src/test/ui/self/self_type_keyword.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -58,5 +58,14 @@ error: cannot find macro `Self!` in this scope\n LL |         Self!() => (),\n    |         ^^^^\n \n-error: aborting due to 10 previous errors\n+error[E0392]: parameter `'Self` is never used\n+  --> $DIR/self_type_keyword.rs:18:12\n+   |\n+LL | struct Bar<'Self>;\n+   |            ^^^^^ unused type parameter\n+   |\n+   = help: consider removing `'Self` or using a marker such as `std::marker::PhantomData`\n+\n+error: aborting due to 11 previous errors\n \n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "e11be9e17f20de30acda43f1f865b4149f6a968b", "filename": "src/test/ui/span/issue-36530.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fspan%2Fissue-36530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fspan%2Fissue-36530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36530.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -5,3 +5,5 @@ mod foo {\n     #![foo] //~ ERROR is currently unknown to the compiler\n             //~| ERROR non-builtin inner attributes are unstable\n }\n+\n+fn main() {}"}, {"sha": "b077d590915cb04932847f11f934fad105f84cad", "filename": "src/test/ui/span/macro-ty-params.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -4,9 +4,11 @@ macro_rules! m {\n     }\n }\n \n+macro_rules! foo { () => () }\n+\n fn main() {\n     foo::<T>!(); //~ ERROR generic arguments in macro path\n     foo::<>!(); //~ ERROR generic arguments in macro path\n-    m!(MyTrait<>); //~ ERROR generic arguments in macro path\n+    m!(Default<>); //~ ERROR generic arguments in macro path\n     //~^ ERROR unexpected generic arguments in path\n }"}, {"sha": "c1dcc513f3a0a948075a24a175379ec0bcf6d88e", "filename": "src/test/ui/span/macro-ty-params.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -1,26 +1,25 @@\n error: unexpected generic arguments in path\n   --> $DIR/macro-ty-params.rs:10:8\n    |\n-LL |     m!(MyTrait<>); //~ ERROR generic arguments in macro path\n-   |        ^^^^^^^^^\n+LL |     foo::<T>!(); //~ ERROR generic arguments in macro path\n+   |        ^^^^^\n \n error: generic arguments in macro path\n   --> $DIR/macro-ty-params.rs:10:15\n    |\n-LL |     m!(MyTrait<>); //~ ERROR generic arguments in macro path\n-   |               ^^\n+LL |     foo::<>!(); //~ ERROR generic arguments in macro path\n+   |        ^^^^\n \n error: generic arguments in macro path\n   --> $DIR/macro-ty-params.rs:8:8\n    |\n-LL |     foo::<T>!(); //~ ERROR generic arguments in macro path\n-   |        ^^^^^\n+LL |     m!(Default<>); //~ ERROR generic arguments in macro path\n+   |        ^^^^^^^^^\n \n error: generic arguments in macro path\n   --> $DIR/macro-ty-params.rs:9:8\n    |\n-LL |     foo::<>!(); //~ ERROR generic arguments in macro path\n-   |        ^^^^\n+LL |     m!(Default<>); //~ ERROR generic arguments in macro path\n+   |               ^^\n \n error: aborting due to 4 previous errors\n-"}, {"sha": "d77febe0aa22bb1eaf0c77eb17e7a980029deaee", "filename": "src/test/ui/span/visibility-ty-params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -4,6 +4,7 @@ macro_rules! m {\n \n struct S<T>(T);\n m!{ S<u8> } //~ ERROR unexpected generic arguments in path\n+            //~| ERROR expected module, found struct `S`\n \n mod m {\n     m!{ m<> } //~ ERROR unexpected generic arguments in path"}, {"sha": "9a11eea6532b2d9f918635cdd3a4412a85af5ca4", "filename": "src/test/ui/span/visibility-ty-params.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -10,5 +10,14 @@ error: unexpected generic arguments in path\n LL |     m!{ m<> } //~ ERROR unexpected generic arguments in path\n    |         ^^^\n \n-error: aborting due to 2 previous errors\n+error[E0577]: expected module, found struct `S`\n+  --> $DIR/visibility-ty-params.rs:16:5\n+   |\n+LL | m!{ S<u8> } //~ ERROR unexpected generic arguments in path\n+   |     -^^^^\n+   |     |\n+   |     did you mean `m`?\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0577`."}, {"sha": "fc0f78b12c9f7fe6f668518d0eaa9577f600cf14", "filename": "src/test/ui/tuple/tuple-struct-fields/test2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -8,5 +8,7 @@ macro_rules! define_struct {\n }\n \n mod foo {\n-    define_struct! { (foo) }\n+    define_struct! { (foo) } //~ ERROR cannot find type `foo` in this scope\n }\n+\n+fn main() {}"}, {"sha": "baca625b0bde5d1f508322f487a1f14b790985c4", "filename": "src/test/ui/tuple/tuple-struct-fields/test2.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest2.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -4,8 +4,15 @@ error: expected one of `)` or `,`, found `(`\n LL |         struct S3(pub $t ());\n    |                          ^ expected one of `)` or `,` here\n ...\n-LL |     define_struct! { (foo) }\n+LL |     define_struct! { (foo) } //~ ERROR cannot find type `foo` in this scope\n    |     ------------------------ in this macro invocation\n \n-error: aborting due to previous error\n+error[E0412]: cannot find type `foo` in this scope\n+  --> $DIR/test2.rs:21:23\n+   |\n+LL |     define_struct! { (foo) } //~ ERROR cannot find type `foo` in this scope\n+   |                       ^^^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "6b8534b452411eb5bdd42f900f8e17b9fb4a4867", "filename": "src/test/ui/tuple/tuple-struct-fields/test3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.rs?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -8,5 +8,7 @@ macro_rules! define_struct {\n }\n \n mod foo {\n-    define_struct! { foo }\n+    define_struct! { foo } //~ ERROR cannot find type `foo` in this scope\n }\n+\n+fn main() {}"}, {"sha": "2da34fff53da63997158b131c51713cdc6a5eb34", "filename": "src/test/ui/tuple/tuple-struct-fields/test3.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff01ccfa805ccef67827bf1ea84e21d61d13e6f/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-struct-fields%2Ftest3.stderr?ref=fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "patch": "@@ -4,8 +4,15 @@ error: expected one of `)` or `,`, found `(`\n LL |         struct S3(pub($t) ());\n    |                           ^ expected one of `)` or `,` here\n ...\n-LL |     define_struct! { foo }\n+LL |     define_struct! { foo } //~ ERROR cannot find type `foo` in this scope\n    |     ---------------------- in this macro invocation\n \n-error: aborting due to previous error\n+error[E0412]: cannot find type `foo` in this scope\n+  --> $DIR/test3.rs:21:22\n+   |\n+LL |     define_struct! { foo } //~ ERROR cannot find type `foo` in this scope\n+   |                      ^^^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0412`."}]}