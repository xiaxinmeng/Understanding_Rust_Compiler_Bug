{"sha": "9bd9cbb28e6fafdc5835fe0c5d496bbaea8504e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZDljYmIyOGU2ZmFmZGM1ODM1ZmUwYzVkNDk2YmJhZWE4NTA0ZTg=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-14T18:35:20Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-19T11:29:35Z"}, "message": "Fix `vxworks` compilation errors", "tree": {"sha": "5e4a5d9e5840139120df63722e4df24ee1ce4e73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e4a5d9e5840139120df63722e4df24ee1ce4e73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bd9cbb28e6fafdc5835fe0c5d496bbaea8504e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bd9cbb28e6fafdc5835fe0c5d496bbaea8504e8", "html_url": "https://github.com/rust-lang/rust/commit/9bd9cbb28e6fafdc5835fe0c5d496bbaea8504e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bd9cbb28e6fafdc5835fe0c5d496bbaea8504e8/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12120409d56ecfb5bd8ddd06bfecd0443b043834", "url": "https://api.github.com/repos/rust-lang/rust/commits/12120409d56ecfb5bd8ddd06bfecd0443b043834", "html_url": "https://github.com/rust-lang/rust/commit/12120409d56ecfb5bd8ddd06bfecd0443b043834"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "bf649f6d76f815725d2b9b6c3e533c4705729575", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bd9cbb28e6fafdc5835fe0c5d496bbaea8504e8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bd9cbb28e6fafdc5835fe0c5d496bbaea8504e8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=9bd9cbb28e6fafdc5835fe0c5d496bbaea8504e8", "patch": "@@ -85,11 +85,6 @@ pub fn errno() -> i32 {\n     unsafe { libc::errnoGet() }\n }\n \n-#[cfg(target_os = \"vxworks\")]\n-pub fn set_errno(e: i32) {\n-    unsafe { libc::errnoSet(e as c_int) };\n-}\n-\n #[cfg(target_os = \"dragonfly\")]\n pub fn errno() -> i32 {\n     extern \"C\" {\n@@ -642,7 +637,7 @@ pub fn getppid() -> u32 {\n     unsafe { libc::getppid() as u32 }\n }\n \n-#[cfg(target_env = \"gnu\")]\n+#[cfg(all(target_env = \"gnu\", not(target_os = \"vxworks\")))]\n pub fn glibc_version() -> Option<(usize, usize)> {\n     if let Some(Ok(version_str)) = glibc_version_cstr().map(CStr::to_str) {\n         parse_glibc_version(version_str)\n@@ -651,7 +646,7 @@ pub fn glibc_version() -> Option<(usize, usize)> {\n     }\n }\n \n-#[cfg(target_env = \"gnu\")]\n+#[cfg(all(target_env = \"gnu\", not(target_os = \"vxworks\")))]\n fn glibc_version_cstr() -> Option<&'static CStr> {\n     weak! {\n         fn gnu_get_libc_version() -> *const libc::c_char\n@@ -665,7 +660,7 @@ fn glibc_version_cstr() -> Option<&'static CStr> {\n \n // Returns Some((major, minor)) if the string is a valid \"x.y\" version,\n // ignoring any extra dot-separated parts. Otherwise return None.\n-#[cfg(target_env = \"gnu\")]\n+#[cfg(all(target_env = \"gnu\", not(target_os = \"vxworks\")))]\n fn parse_glibc_version(version: &str) -> Option<(usize, usize)> {\n     let mut parsed_ints = version.split('.').map(str::parse::<usize>).fuse();\n     match (parsed_ints.next(), parsed_ints.next()) {"}, {"sha": "1ef6df0fe95c6d2554f644eed6d647ac99dbbf28", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bd9cbb28e6fafdc5835fe0c5d496bbaea8504e8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bd9cbb28e6fafdc5835fe0c5d496bbaea8504e8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=9bd9cbb28e6fafdc5835fe0c5d496bbaea8504e8", "patch": "@@ -223,7 +223,7 @@ impl Command {\n     pub fn get_groups(&self) -> Option<&[gid_t]> {\n         self.groups.as_deref()\n     }\n-\n+    #[allow(dead_code)]\n     pub fn get_closures(&mut self) -> &mut Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>> {\n         &mut self.closures\n     }"}, {"sha": "68467da284f23303b4e327884a20e6784e525049", "filename": "library/std/src/sys/unix/process/process_vxworks.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9bd9cbb28e6fafdc5835fe0c5d496bbaea8504e8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bd9cbb28e6fafdc5835fe0c5d496bbaea8504e8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs?ref=9bd9cbb28e6fafdc5835fe0c5d496bbaea8504e8", "patch": "@@ -18,7 +18,7 @@ impl Command {\n         needs_stdin: bool,\n     ) -> io::Result<(Process, StdioPipes)> {\n         use crate::sys::cvt_r;\n-        const CLOEXEC_MSG_FOOTER: &'static [u8] = b\"NOEX\";\n+        // const CLOEXEC_MSG_FOOTER: &'static [u8] = b\"NOEX\";\n         let envp = self.capture_env();\n \n         if self.saw_nul() {\n@@ -196,6 +196,24 @@ impl ExitStatus {\n     pub fn signal(&self) -> Option<i32> {\n         if !self.exited() { Some(libc::WTERMSIG(self.0)) } else { None }\n     }\n+\n+    pub fn core_dumped(&self) -> bool {\n+        // This method is not yet properly implemented on VxWorks\n+        false\n+    }\n+\n+    pub fn stopped_signal(&self) -> Option<i32> {\n+        if libc::WIFSTOPPED(self.0) { Some(libc::WSTOPSIG(self.0)) } else { None }\n+    }\n+\n+    pub fn continued(&self) -> bool {\n+        // This method is not yet properly implemented on VxWorks\n+        false\n+    }\n+\n+    pub fn into_raw(&self) -> c_int {\n+        self.0\n+    }\n }\n \n /// Converts a raw `c_int` to a type-safe `ExitStatus` by wrapping it without copying."}]}