{"sha": "9152ded3bfd11d9bd3273a1e35dac1565545c7ca", "node_id": "C_kwDOAAsO6NoAKDkxNTJkZWQzYmZkMTFkOWJkMzI3M2ExZTM1ZGFjMTU2NTU0NWM3Y2E", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-30T11:34:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-30T11:34:40Z"}, "message": "Merge pull request #1225 from bjorn3/build_system_rework\n\nUse -Zcodegen-backend instead of a custom rustc driver", "tree": {"sha": "6d4700f4845bd4ed6441f0653cb6c7a56004e6a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d4700f4845bd4ed6441f0653cb6c7a56004e6a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9152ded3bfd11d9bd3273a1e35dac1565545c7ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJibR7QCRBK7hj4Ov3rIwAAI50IAH0M8yPh6WP7vdSTe5LXD35F\nONG6BpW5zshkodhyi77pEdszdpC3jl8LXi6WmUq8K6fWWRCfIHR9Vfb7P7COOGTC\nRs42h38/GVu+SGNPkOP+xZlL7psarp22j2RbuwqBGOOEoIzCgYiDPE+aai2cgdly\nmo54BtO95KWFqNfTuAR7T1gy2HcPmtQJ24EJfWWObSriTgVRR/VbHq3Uvky+cqp7\n3SjTuDa24ndDDu5paGIAOjWcZ+z6Ehdw1VPfoCbZ9jmjb8WLOZQUqw9HaF9oFH9X\nN0wfccYAskponepr+PI1z1OodmFGXTuZ+ReHfBXtsMkoirYBEZkB7xfIiCqvy4c=\n=YL/+\n-----END PGP SIGNATURE-----\n", "payload": "tree 6d4700f4845bd4ed6441f0653cb6c7a56004e6a6\nparent 944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b\nparent 88d058fef3a1b583edf86b326265ed59c614da2e\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1651318480 +0200\ncommitter GitHub <noreply@github.com> 1651318480 +0200\n\nMerge pull request #1225 from bjorn3/build_system_rework\n\nUse -Zcodegen-backend instead of a custom rustc driver"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9152ded3bfd11d9bd3273a1e35dac1565545c7ca", "html_url": "https://github.com/rust-lang/rust/commit/9152ded3bfd11d9bd3273a1e35dac1565545c7ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b", "html_url": "https://github.com/rust-lang/rust/commit/944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b"}, {"sha": "88d058fef3a1b583edf86b326265ed59c614da2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d058fef3a1b583edf86b326265ed59c614da2e", "html_url": "https://github.com/rust-lang/rust/commit/88d058fef3a1b583edf86b326265ed59c614da2e"}], "stats": {"total": 419, "additions": 118, "deletions": 301}, "files": [{"sha": "48faec8bc4b9434f5e9f278d88d3e8a2f5149455", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=9152ded3bfd11d9bd3273a1e35dac1565545c7ca", "patch": "@@ -34,18 +34,6 @@ pub(crate) fn build_backend(\n         _ => unreachable!(),\n     }\n \n-    // Set the rpath to make the cg_clif executable find librustc_codegen_cranelift without changing\n-    // LD_LIBRARY_PATH\n-    if cfg!(unix) {\n-        if cfg!(target_os = \"macos\") {\n-            rustflags += \" -Csplit-debuginfo=unpacked \\\n-                -Clink-arg=-Wl,-rpath,@loader_path/../lib \\\n-                -Zosx-rpath-install-name\";\n-        } else {\n-            rustflags += \" -Clink-arg=-Wl,-rpath=$ORIGIN/../lib \";\n-        }\n-    }\n-\n     cmd.env(\"RUSTFLAGS\", rustflags);\n \n     eprintln!(\"[BUILD] rustc_codegen_cranelift\");"}, {"sha": "8682204f4fd30b355fa0d11f83adbb1705af8eae", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 40, "deletions": 37, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=9152ded3bfd11d9bd3273a1e35dac1565545c7ca", "patch": "@@ -1,4 +1,3 @@\n-use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n@@ -22,35 +21,28 @@ pub(crate) fn build_sysroot(\n     fs::create_dir_all(target_dir.join(\"lib\")).unwrap();\n \n     // Copy the backend\n-    for file in [\"cg_clif\", \"cg_clif_build_sysroot\"] {\n-        try_hard_link(\n-            cg_clif_build_dir.join(get_file_name(file, \"bin\")),\n-            target_dir.join(\"bin\").join(get_file_name(file, \"bin\")),\n-        );\n-    }\n-\n     let cg_clif_dylib = get_file_name(\"rustc_codegen_cranelift\", \"dylib\");\n-    try_hard_link(\n-        cg_clif_build_dir.join(&cg_clif_dylib),\n-        target_dir\n-            .join(if cfg!(windows) {\n-                // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n-                // binaries.\n-                \"bin\"\n-            } else {\n-                \"lib\"\n-            })\n-            .join(cg_clif_dylib),\n-    );\n-\n-    // Build and copy cargo wrapper\n-    let mut build_cargo_wrapper_cmd = Command::new(\"rustc\");\n-    build_cargo_wrapper_cmd\n-        .arg(\"scripts/cargo-clif.rs\")\n-        .arg(\"-o\")\n-        .arg(target_dir.join(\"cargo-clif\"))\n-        .arg(\"-g\");\n-    spawn_and_wait(build_cargo_wrapper_cmd);\n+    let cg_clif_dylib_path = target_dir\n+        .join(if cfg!(windows) {\n+            // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n+            // binaries.\n+            \"bin\"\n+        } else {\n+            \"lib\"\n+        })\n+        .join(&cg_clif_dylib);\n+    try_hard_link(cg_clif_build_dir.join(cg_clif_dylib), &cg_clif_dylib_path);\n+\n+    // Build and copy rustc and cargo wrappers\n+    for wrapper in [\"rustc-clif\", \"cargo-clif\"] {\n+        let mut build_cargo_wrapper_cmd = Command::new(\"rustc\");\n+        build_cargo_wrapper_cmd\n+            .arg(PathBuf::from(\"scripts\").join(format!(\"{wrapper}.rs\")))\n+            .arg(\"-o\")\n+            .arg(target_dir.join(wrapper))\n+            .arg(\"-g\");\n+        spawn_and_wait(build_cargo_wrapper_cmd);\n+    }\n \n     let default_sysroot = super::rustc_info::get_default_sysroot();\n \n@@ -117,7 +109,13 @@ pub(crate) fn build_sysroot(\n             }\n         }\n         SysrootKind::Clif => {\n-            build_clif_sysroot_for_triple(channel, target_dir, host_triple, None);\n+            build_clif_sysroot_for_triple(\n+                channel,\n+                target_dir,\n+                host_triple,\n+                &cg_clif_dylib_path,\n+                None,\n+            );\n \n             if host_triple != target_triple {\n                 // When cross-compiling it is often necessary to manually pick the right linker\n@@ -126,14 +124,21 @@ pub(crate) fn build_sysroot(\n                 } else {\n                     None\n                 };\n-                build_clif_sysroot_for_triple(channel, target_dir, target_triple, linker);\n+                build_clif_sysroot_for_triple(\n+                    channel,\n+                    target_dir,\n+                    target_triple,\n+                    &cg_clif_dylib_path,\n+                    linker,\n+                );\n             }\n \n             // Copy std for the host to the lib dir. This is necessary for the jit mode to find\n             // libstd.\n             for file in fs::read_dir(host_rustlib_lib).unwrap() {\n                 let file = file.unwrap().path();\n-                if file.file_name().unwrap().to_str().unwrap().contains(\"std-\") {\n+                let filename = file.file_name().unwrap().to_str().unwrap();\n+                if filename.contains(\"std-\") && !filename.contains(\".rlib\") {\n                     try_hard_link(&file, target_dir.join(\"lib\").join(file.file_name().unwrap()));\n                 }\n             }\n@@ -145,6 +150,7 @@ fn build_clif_sysroot_for_triple(\n     channel: &str,\n     target_dir: &Path,\n     triple: &str,\n+    cg_clif_dylib_path: &Path,\n     linker: Option<&str>,\n ) {\n     match fs::read_to_string(Path::new(\"build_sysroot\").join(\"rustc_version\")) {\n@@ -178,7 +184,8 @@ fn build_clif_sysroot_for_triple(\n     // Build sysroot\n     let mut build_cmd = Command::new(\"cargo\");\n     build_cmd.arg(\"build\").arg(\"--target\").arg(triple).current_dir(\"build_sysroot\");\n-    let mut rustflags = \"--clif -Zforce-unstable-if-unmarked\".to_string();\n+    let mut rustflags = \"-Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n+    rustflags.push_str(&format!(\" -Zcodegen-backend={}\", cg_clif_dylib_path.to_str().unwrap()));\n     if channel == \"release\" {\n         build_cmd.arg(\"--release\");\n         rustflags.push_str(\" -Zmir-opt-level=3\");\n@@ -188,10 +195,6 @@ fn build_clif_sysroot_for_triple(\n         write!(rustflags, \" -Clinker={}\", linker).unwrap();\n     }\n     build_cmd.env(\"RUSTFLAGS\", rustflags);\n-    build_cmd.env(\n-        \"RUSTC\",\n-        env::current_dir().unwrap().join(target_dir).join(\"bin\").join(\"cg_clif_build_sysroot\"),\n-    );\n     build_cmd.env(\"__CARGO_DEFAULT_LIB_METADATA\", \"cg_clif\");\n     spawn_and_wait(build_cmd);\n "}, {"sha": "b897b7fbacfcdf54426583790ed5116d2450ddd6", "filename": "build_system/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=9152ded3bfd11d9bd3273a1e35dac1565545c7ca", "patch": "@@ -86,6 +86,7 @@ pub fn main() {\n             arg => arg_error!(\"Unexpected argument {}\", arg),\n         }\n     }\n+    target_dir = std::env::current_dir().unwrap().join(target_dir);\n \n     let host_triple = if let Ok(host_triple) = std::env::var(\"HOST_TRIPLE\") {\n         host_triple"}, {"sha": "33f146e7ba27aec13e57e55d40ebb79e3f28e359", "filename": "docs/usage.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/docs%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/docs%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fusage.md?ref=9152ded3bfd11d9bd3273a1e35dac1565545c7ca", "patch": "@@ -19,7 +19,7 @@ This will build your project with rustc_codegen_cranelift instead of the usual L\n > You should prefer using the Cargo method.\n \n ```bash\n-$ $cg_clif_dir/build/bin/cg_clif my_crate.rs\n+$ $cg_clif_dir/build/rustc-clif my_crate.rs\n ```\n \n ## Jit mode\n@@ -38,7 +38,7 @@ $ $cg_clif_dir/build/cargo-clif jit\n or\n \n ```bash\n-$ $cg_clif_dir/build/bin/cg_clif -Zunstable-features -Cllvm-args=mode=jit -Cprefer-dynamic my_crate.rs\n+$ $cg_clif_dir/build/rustc-clif -Zunstable-features -Cllvm-args=mode=jit -Cprefer-dynamic my_crate.rs\n ```\n \n There is also an experimental lazy jit mode. In this mode functions are only compiled once they are\n@@ -54,7 +54,7 @@ These are a few functions that allow you to easily run rust code from the shell\n \n ```bash\n function jit_naked() {\n-    echo \"$@\" | $cg_clif_dir/build/bin/cg_clif - -Zunstable-features -Cllvm-args=mode=jit -Cprefer-dynamic\n+    echo \"$@\" | $cg_clif_dir/build/rustc-clif - -Zunstable-features -Cllvm-args=mode=jit -Cprefer-dynamic\n }\n \n function jit() {"}, {"sha": "20aee5ff81b9de3154d275e6a57fe5e196eeba45", "filename": "scripts/cargo-clif.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/scripts%2Fcargo-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/scripts%2Fcargo-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fcargo-clif.rs?ref=9152ded3bfd11d9bd3273a1e35dac1565545c7ca", "patch": "@@ -5,20 +5,11 @@ use std::path::PathBuf;\n use std::process::Command;\n \n fn main() {\n-    if env::var(\"RUSTC_WRAPPER\").map_or(false, |wrapper| wrapper.contains(\"sccache\")) {\n-        eprintln!(\n-            \"\\x1b[1;93m=== Warning: Unsetting RUSTC_WRAPPER to prevent interference with sccache ===\\x1b[0m\"\n-        );\n-        env::remove_var(\"RUSTC_WRAPPER\");\n-    }\n-\n     let sysroot = PathBuf::from(env::current_exe().unwrap().parent().unwrap());\n \n-    env::set_var(\"RUSTC\", sysroot.join(\"bin/cg_clif\".to_string() + env::consts::EXE_SUFFIX));\n-\n-    let mut rustdoc_flags = env::var(\"RUSTDOCFLAGS\").unwrap_or(String::new());\n-    rustdoc_flags.push_str(\" -Cpanic=abort -Zpanic-abort-tests -Zcodegen-backend=\");\n-    rustdoc_flags.push_str(\n+    let mut rustflags = String::new();\n+    rustflags.push_str(\" -Cpanic=abort -Zpanic-abort-tests -Zcodegen-backend=\");\n+    rustflags.push_str(\n         sysroot\n             .join(if cfg!(windows) { \"bin\" } else { \"lib\" })\n             .join(\n@@ -29,9 +20,10 @@ fn main() {\n             .to_str()\n             .unwrap(),\n     );\n-    rustdoc_flags.push_str(\" --sysroot \");\n-    rustdoc_flags.push_str(sysroot.to_str().unwrap());\n-    env::set_var(\"RUSTDOCFLAGS\", rustdoc_flags);\n+    rustflags.push_str(\" --sysroot \");\n+    rustflags.push_str(sysroot.to_str().unwrap());\n+    env::set_var(\"RUSTFLAGS\", env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + &rustflags);\n+    env::set_var(\"RUSTDOCFLAGS\", env::var(\"RUSTDOCFLAGS\").unwrap_or(String::new()) + &rustflags);\n \n     // Ensure that the right toolchain is used\n     env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"RUSTUP_TOOLCHAIN\"));"}, {"sha": "53ada369b089a28ee63b3c183603a36153239821", "filename": "scripts/config.sh", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b/scripts%2Fconfig.sh", "raw_url": "https://github.com/rust-lang/rust/raw/944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b/scripts%2Fconfig.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fconfig.sh?ref=944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b", "patch": "@@ -1,6 +0,0 @@\n-# Note to people running shellcheck: this file should only be sourced, not executed directly.\n-\n-set -e\n-\n-export LD_LIBRARY_PATH=\"$(rustc --print sysroot)/lib:$LD_LIBRARY_PATH\"\n-export DYLD_LIBRARY_PATH=\"$(rustc --print sysroot)/lib:$DYLD_LIBRARY_PATH\""}, {"sha": "11d6c4c83186743f2751a2403c2996eab66746be", "filename": "scripts/ext_config.sh", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b/scripts%2Fext_config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b/scripts%2Fext_config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fext_config.sh?ref=944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b", "patch": "@@ -1,32 +0,0 @@\n-# Note to people running shellcheck: this file should only be sourced, not executed directly.\n-\n-# Various env vars that should only be set for the build system\n-\n-set -e\n-\n-export CG_CLIF_DISPLAY_CG_TIME=1\n-export CG_CLIF_DISABLE_INCR_CACHE=1\n-\n-export HOST_TRIPLE=$(rustc -vV | grep host | cut -d: -f2 | tr -d \" \")\n-export TARGET_TRIPLE=${TARGET_TRIPLE:-$HOST_TRIPLE}\n-\n-export RUN_WRAPPER=''\n-export JIT_SUPPORTED=1\n-if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n-   export JIT_SUPPORTED=0\n-   if [[ \"$TARGET_TRIPLE\" == \"aarch64-unknown-linux-gnu\" ]]; then\n-      # We are cross-compiling for aarch64. Use the correct linker and run tests in qemu.\n-      export RUSTFLAGS='-Clinker=aarch64-linux-gnu-gcc '$RUSTFLAGS\n-      export RUN_WRAPPER='qemu-aarch64 -L /usr/aarch64-linux-gnu'\n-   elif [[ \"$TARGET_TRIPLE\" == \"x86_64-pc-windows-gnu\" ]]; then\n-      # We are cross-compiling for Windows. Run tests in wine.\n-      export RUN_WRAPPER='wine'\n-   else\n-      echo \"Unknown non-native platform\"\n-   fi\n-fi\n-\n-# FIXME fix `#[linkage = \"extern_weak\"]` without this\n-if [[ \"$(uname)\" == 'Darwin' ]]; then\n-   export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n-fi"}, {"sha": "e6f60d1c0cb230985bf85311076b15199291a807", "filename": "scripts/filter_profile.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/scripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/scripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ffilter_profile.rs?ref=9152ded3bfd11d9bd3273a1e35dac1565545c7ca", "patch": "@@ -2,8 +2,7 @@\n #![forbid(unsafe_code)]/* This line is ignored by bash\n # This block is ignored by rustc\n pushd $(dirname \"$0\")/../\n-source scripts/config.sh\n-RUSTC=\"$(pwd)/build/bin/cg_clif\"\n+RUSTC=\"$(pwd)/build/rustc-clif\"\n popd\n PROFILE=$1 OUTPUT=$2 exec $RUSTC -Zunstable-options -Cllvm-args=mode=jit -Cprefer-dynamic $0\n #*/"}, {"sha": "3abfcd8ddc824e493c5f3a3f4086c6a9b4c989f4", "filename": "scripts/rustc-clif.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/scripts%2Frustc-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/scripts%2Frustc-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Frustc-clif.rs?ref=9152ded3bfd11d9bd3273a1e35dac1565545c7ca", "patch": "@@ -0,0 +1,36 @@\n+use std::env;\n+use std::ffi::OsString;\n+#[cfg(unix)]\n+use std::os::unix::process::CommandExt;\n+use std::path::PathBuf;\n+use std::process::Command;\n+\n+fn main() {\n+    let sysroot = PathBuf::from(env::current_exe().unwrap().parent().unwrap());\n+\n+    let cg_clif_dylib_path = sysroot.join(if cfg!(windows) { \"bin\" } else { \"lib\" }).join(\n+        env::consts::DLL_PREFIX.to_string() + \"rustc_codegen_cranelift\" + env::consts::DLL_SUFFIX,\n+    );\n+\n+    let mut args = std::env::args_os().skip(1).collect::<Vec<_>>();\n+    args.push(OsString::from(\"-Cpanic=abort\"));\n+    args.push(OsString::from(\"-Zpanic-abort-tests\"));\n+    let mut codegen_backend_arg = OsString::from(\"-Zcodegen-backend=\");\n+    codegen_backend_arg.push(cg_clif_dylib_path);\n+    args.push(codegen_backend_arg);\n+    if !args.contains(&OsString::from(\"--sysroot\")) {\n+        args.push(OsString::from(\"--sysroot\"));\n+        args.push(OsString::from(sysroot.to_str().unwrap()));\n+    }\n+\n+    // Ensure that the right toolchain is used\n+    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"RUSTUP_TOOLCHAIN\"));\n+\n+    #[cfg(unix)]\n+    Command::new(\"rustc\").args(args).exec();\n+\n+    #[cfg(not(unix))]\n+    std::process::exit(\n+        Command::new(\"rustc\").args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n+    );\n+}"}, {"sha": "4d0dfa16c5ecf88488e6a360b752e65fbb200012", "filename": "scripts/setup_rust_fork.sh", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/scripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/scripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fsetup_rust_fork.sh?ref=9152ded3bfd11d9bd3273a1e35dac1565545c7ca", "patch": "@@ -2,7 +2,6 @@\n set -e\n \n ./y.rs build --no-unstable-features\n-source scripts/config.sh\n \n echo \"[SETUP] Rust fork\"\n git clone https://github.com/rust-lang/rust.git || true\n@@ -52,7 +51,7 @@ changelog-seen = 2\n ninja = false\n \n [build]\n-rustc = \"$(pwd)/../build/bin/cg_clif\"\n+rustc = \"$(pwd)/../build/rustc-clif\"\n cargo = \"$(rustup which cargo)\"\n full-bootstrap = true\n local-rebuild = true"}, {"sha": "cd6b2181ace2cf4e0b7e0ecd9ee74af64432d7f7", "filename": "scripts/tests.sh", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/scripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9152ded3bfd11d9bd3273a1e35dac1565545c7ca/scripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftests.sh?ref=9152ded3bfd11d9bd3273a1e35dac1565545c7ca", "patch": "@@ -2,10 +2,34 @@\n \n set -e\n \n-source scripts/config.sh\n-source scripts/ext_config.sh\n-export RUSTC=false # ensure that cg_llvm isn't accidentally used\n-MY_RUSTC=\"$(pwd)/build/bin/cg_clif $RUSTFLAGS -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n+export CG_CLIF_DISPLAY_CG_TIME=1\n+export CG_CLIF_DISABLE_INCR_CACHE=1\n+\n+export HOST_TRIPLE=$(rustc -vV | grep host | cut -d: -f2 | tr -d \" \")\n+export TARGET_TRIPLE=${TARGET_TRIPLE:-$HOST_TRIPLE}\n+\n+export RUN_WRAPPER=''\n+export JIT_SUPPORTED=1\n+if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n+   export JIT_SUPPORTED=0\n+   if [[ \"$TARGET_TRIPLE\" == \"aarch64-unknown-linux-gnu\" ]]; then\n+      # We are cross-compiling for aarch64. Use the correct linker and run tests in qemu.\n+      export RUSTFLAGS='-Clinker=aarch64-linux-gnu-gcc '$RUSTFLAGS\n+      export RUN_WRAPPER='qemu-aarch64 -L /usr/aarch64-linux-gnu'\n+   elif [[ \"$TARGET_TRIPLE\" == \"x86_64-pc-windows-gnu\" ]]; then\n+      # We are cross-compiling for Windows. Run tests in wine.\n+      export RUN_WRAPPER='wine'\n+   else\n+      echo \"Unknown non-native platform\"\n+   fi\n+fi\n+\n+# FIXME fix `#[linkage = \"extern_weak\"]` without this\n+if [[ \"$(uname)\" == 'Darwin' ]]; then\n+   export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n+fi\n+\n+MY_RUSTC=\"$(pwd)/build/rustc-clif $RUSTFLAGS -L crate=target/out --out-dir target/out -Cdebuginfo=2\"\n \n function no_sysroot_tests() {\n     echo \"[BUILD] mini_core\"\n@@ -97,7 +121,7 @@ function extended_sysroot_tests() {\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n         hyperfine --runs \"${RUN_RUNS:-10}\" --warmup 1 --prepare \"../build/cargo-clif clean\" \\\n-        \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n+        \"RUSTFLAGS='' cargo build\" \\\n         \"../build/cargo-clif build\"\n \n         echo \"[BENCH RUN] ebobby/simple-raytracer\""}, {"sha": "5984ec8412ad71acfdf304f10faf98183d929762", "filename": "src/bin/cg_clif.rs", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b/src%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b/src%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif.rs?ref=944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b", "patch": "@@ -1,94 +0,0 @@\n-#![feature(rustc_private)]\n-#![warn(rust_2018_idioms)]\n-#![warn(unused_lifetimes)]\n-#![warn(unreachable_pub)]\n-\n-extern crate rustc_data_structures;\n-extern crate rustc_driver;\n-extern crate rustc_interface;\n-extern crate rustc_session;\n-extern crate rustc_target;\n-\n-use std::panic;\n-\n-use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n-use rustc_interface::interface;\n-use rustc_session::config::{ErrorOutputType, TrimmedDefPaths};\n-use rustc_session::early_error;\n-use rustc_target::spec::PanicStrategy;\n-\n-// FIXME use std::lazy::SyncLazy once it stabilizes\n-use once_cell::sync::Lazy;\n-\n-const BUG_REPORT_URL: &str = \"https://github.com/bjorn3/rustc_codegen_cranelift/issues/new\";\n-\n-static DEFAULT_HOOK: Lazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static>> =\n-    Lazy::new(|| {\n-        let hook = panic::take_hook();\n-        panic::set_hook(Box::new(|info| {\n-            // Invoke the default handler, which prints the actual panic message and optionally a backtrace\n-            (*DEFAULT_HOOK)(info);\n-\n-            // Separate the output with an empty line\n-            eprintln!();\n-\n-            // Print the ICE message\n-            rustc_driver::report_ice(info, BUG_REPORT_URL);\n-        }));\n-        hook\n-    });\n-\n-#[derive(Default)]\n-pub struct CraneliftPassesCallbacks {\n-    time_passes: bool,\n-}\n-\n-impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n-    fn config(&mut self, config: &mut interface::Config) {\n-        // If a --prints=... option has been given, we don't print the \"total\"\n-        // time because it will mess up the --prints output. See #64339.\n-        self.time_passes = config.opts.prints.is_empty()\n-            && (config.opts.debugging_opts.time_passes || config.opts.debugging_opts.time);\n-\n-        config.opts.cg.panic = Some(PanicStrategy::Abort);\n-        config.opts.debugging_opts.panic_abort_tests = true;\n-        config.opts.maybe_sysroot = Some(config.opts.maybe_sysroot.clone().unwrap_or_else(|| {\n-            std::env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_owned()\n-        }));\n-\n-        config.opts.trimmed_def_paths = TrimmedDefPaths::GoodPath;\n-    }\n-}\n-\n-fn main() {\n-    let start_time = std::time::Instant::now();\n-    let start_rss = get_resident_set_size();\n-    rustc_driver::init_rustc_env_logger();\n-    let mut callbacks = CraneliftPassesCallbacks::default();\n-    Lazy::force(&DEFAULT_HOOK); // Install ice hook\n-    let exit_code = rustc_driver::catch_with_exit_code(|| {\n-        let args = std::env::args_os()\n-            .enumerate()\n-            .map(|(i, arg)| {\n-                arg.into_string().unwrap_or_else(|arg| {\n-                    early_error(\n-                        ErrorOutputType::default(),\n-                        &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg),\n-                    )\n-                })\n-            })\n-            .collect::<Vec<_>>();\n-        let mut run_compiler = rustc_driver::RunCompiler::new(&args, &mut callbacks);\n-        run_compiler.set_make_codegen_backend(Some(Box::new(move |_| {\n-            Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend { config: None })\n-        })));\n-        run_compiler.run()\n-    });\n-\n-    if callbacks.time_passes {\n-        let end_rss = get_resident_set_size();\n-        print_time_passes_entry(\"total\", start_time.elapsed(), start_rss, end_rss);\n-    }\n-\n-    std::process::exit(exit_code)\n-}"}, {"sha": "bde4d71b9a33c4f385b9640410e68b0bff51d5e5", "filename": "src/bin/cg_clif_build_sysroot.rs", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b/src%2Fbin%2Fcg_clif_build_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b/src%2Fbin%2Fcg_clif_build_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif_build_sysroot.rs?ref=944a48d3afb0fa27390ecbd2ceb0f1c666cf4c5b", "patch": "@@ -1,93 +0,0 @@\n-//! The only difference between this and cg_clif.rs is that this binary defaults to using cg_llvm\n-//! instead of cg_clif and requires `--clif` to use cg_clif and that this binary doesn't have JIT\n-//! support.\n-//! This is necessary as with Cargo `RUSTC` applies to both target crates and host crates. The host\n-//! crates must be built with cg_llvm as we are currently building a sysroot for cg_clif.\n-//! `RUSTFLAGS` however is only applied to target crates, so `--clif` would only be passed to the\n-//! target crates.\n-\n-#![feature(rustc_private)]\n-#![warn(rust_2018_idioms)]\n-#![warn(unused_lifetimes)]\n-#![warn(unreachable_pub)]\n-\n-extern crate rustc_driver;\n-extern crate rustc_interface;\n-extern crate rustc_session;\n-extern crate rustc_target;\n-\n-use std::path::PathBuf;\n-\n-use rustc_interface::interface;\n-use rustc_session::config::ErrorOutputType;\n-use rustc_session::early_error;\n-use rustc_target::spec::PanicStrategy;\n-\n-fn find_sysroot() -> String {\n-    // Taken from https://github.com/Manishearth/rust-clippy/pull/911.\n-    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-    match (home, toolchain) {\n-        (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n-        _ => option_env!(\"RUST_SYSROOT\")\n-            .expect(\"need to specify RUST_SYSROOT env var or use rustup or multirust\")\n-            .to_owned(),\n-    }\n-}\n-\n-pub struct CraneliftPassesCallbacks {\n-    use_clif: bool,\n-}\n-\n-impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n-    fn config(&mut self, config: &mut interface::Config) {\n-        if !self.use_clif {\n-            config.opts.maybe_sysroot = Some(PathBuf::from(find_sysroot()));\n-            return;\n-        }\n-\n-        config.opts.cg.panic = Some(PanicStrategy::Abort);\n-        config.opts.debugging_opts.panic_abort_tests = true;\n-        config.opts.maybe_sysroot =\n-            Some(std::env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_owned());\n-    }\n-}\n-\n-fn main() {\n-    rustc_driver::init_rustc_env_logger();\n-    rustc_driver::install_ice_hook();\n-    let exit_code = rustc_driver::catch_with_exit_code(|| {\n-        let mut use_clif = false;\n-\n-        let args = std::env::args_os()\n-            .enumerate()\n-            .map(|(i, arg)| {\n-                arg.into_string().unwrap_or_else(|arg| {\n-                    early_error(\n-                        ErrorOutputType::default(),\n-                        &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg),\n-                    )\n-                })\n-            })\n-            .filter(|arg| {\n-                if arg == \"--clif\" {\n-                    use_clif = true;\n-                    false\n-                } else {\n-                    true\n-                }\n-            })\n-            .collect::<Vec<_>>();\n-\n-        let mut callbacks = CraneliftPassesCallbacks { use_clif };\n-\n-        let mut run_compiler = rustc_driver::RunCompiler::new(&args, &mut callbacks);\n-        if use_clif {\n-            run_compiler.set_make_codegen_backend(Some(Box::new(move |_| {\n-                Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend { config: None })\n-            })));\n-        }\n-        run_compiler.run()\n-    });\n-    std::process::exit(exit_code)\n-}"}]}