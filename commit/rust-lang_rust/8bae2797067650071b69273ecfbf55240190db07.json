{"sha": "8bae2797067650071b69273ecfbf55240190db07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYWUyNzk3MDY3NjUwMDcxYjY5MjczZWNmYmY1NTI0MDE5MGRiMDc=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-02-26T06:49:03Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-02-27T05:16:02Z"}, "message": "remove if_chain", "tree": {"sha": "330a6941274ba743412bb6d454fcce58387d4ab5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/330a6941274ba743412bb6d454fcce58387d4ab5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bae2797067650071b69273ecfbf55240190db07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bae2797067650071b69273ecfbf55240190db07", "html_url": "https://github.com/rust-lang/rust/commit/8bae2797067650071b69273ecfbf55240190db07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bae2797067650071b69273ecfbf55240190db07/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc2b00055ccc18f4b345a1f6d50865ada9093e88", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2b00055ccc18f4b345a1f6d50865ada9093e88", "html_url": "https://github.com/rust-lang/rust/commit/cc2b00055ccc18f4b345a1f6d50865ada9093e88"}], "stats": {"total": 72, "additions": 34, "deletions": 38}, "files": [{"sha": "06ce06126e62c9335d75da2b4d2d65ddb5c76b1c", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "modified", "additions": 34, "deletions": 38, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8bae2797067650071b69273ecfbf55240190db07/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bae2797067650071b69273ecfbf55240190db07/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=8bae2797067650071b69273ecfbf55240190db07", "patch": "@@ -21,42 +21,38 @@ pub(crate) fn lints<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, iter_args: &'\n         return;\n     };\n     let ty = cx.typeck_results().expr_ty(&iter_args[0]);\n-    if_chain! {\n-        let caller_type = if derefs_to_slice(cx, &iter_args[0], ty).is_some() {\n-            \"slice\"\n-        } else if is_type_diagnostic_item(cx, ty, sym::vec_type) {\n-            \"Vec\"\n-        } else if is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) {\n-            \"VecDeque\"\n-        } else if is_type_diagnostic_item(cx, ty, sym!(hashset_type)) {\n-            \"HashSet\"\n-        } else if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) {\n-            \"HashMap\"\n-        } else if match_type(cx, ty, &paths::BTREEMAP) {\n-            \"BTreeMap\"\n-        } else if match_type(cx, ty, &paths::BTREESET) {\n-            \"BTreeSet\"\n-        } else if match_type(cx, ty, &paths::LINKED_LIST) {\n-            \"LinkedList\"\n-        } else if match_type(cx, ty, &paths::BINARY_HEAP) {\n-            \"BinaryHeap\"\n-        } else {\n-            return\n-        };\n-        then {\n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_and_sugg(\n-                cx,\n-                ITER_COUNT,\n-                expr.span,\n-                &format!(\"called `.{}{}().count()` on a `{}`\", iter_method, mut_str, caller_type),\n-                \"try\",\n-                format!(\n-                    \"{}.len()\",\n-                    snippet_with_applicability(cx, iter_args[0].span, \"..\", &mut applicability),\n-                ),\n-                applicability,\n-            );\n-        }\n-    }\n+    let caller_type = if derefs_to_slice(cx, &iter_args[0], ty).is_some() {\n+        \"slice\"\n+    } else if is_type_diagnostic_item(cx, ty, sym::vec_type) {\n+        \"Vec\"\n+    } else if is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) {\n+        \"VecDeque\"\n+    } else if is_type_diagnostic_item(cx, ty, sym!(hashset_type)) {\n+        \"HashSet\"\n+    } else if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) {\n+        \"HashMap\"\n+    } else if match_type(cx, ty, &paths::BTREEMAP) {\n+        \"BTreeMap\"\n+    } else if match_type(cx, ty, &paths::BTREESET) {\n+        \"BTreeSet\"\n+    } else if match_type(cx, ty, &paths::LINKED_LIST) {\n+        \"LinkedList\"\n+    } else if match_type(cx, ty, &paths::BINARY_HEAP) {\n+        \"BinaryHeap\"\n+    } else {\n+        return;\n+    };\n+    let mut applicability = Applicability::MachineApplicable;\n+    span_lint_and_sugg(\n+        cx,\n+        ITER_COUNT,\n+        expr.span,\n+        &format!(\"called `.{}{}().count()` on a `{}`\", iter_method, mut_str, caller_type),\n+        \"try\",\n+        format!(\n+            \"{}.len()\",\n+            snippet_with_applicability(cx, iter_args[0].span, \"..\", &mut applicability),\n+        ),\n+        applicability,\n+    );\n }"}]}