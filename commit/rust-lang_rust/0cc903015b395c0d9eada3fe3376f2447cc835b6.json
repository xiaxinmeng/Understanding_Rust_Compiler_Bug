{"sha": "0cc903015b395c0d9eada3fe3376f2447cc835b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYzkwMzAxNWIzOTVjMGQ5ZWFkYTNmZTMzNzZmMjQ0N2NjODM1YjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-03T05:24:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-03T05:24:41Z"}, "message": "auto merge of #5202 : dbaupp/rust/std-fileinput, r=graydon\n\nAs per https://github.com/mozilla/rust/wiki/Note-wanted-libraries.\r\n\r\nIterates over lines in a series of files, e.g. a basic `cat`\r\n\r\n```rust\r\nuse std::fileinput;\r\nfn main() {\r\n    for fileinput::input |line| {\r\n        io::println(line);\r\n    }   \r\n}\r\n```\r\n\r\nThe API is essentially a subset of [Python's fileinput module](http://docs.python.org/3.3/library/fileinput.html), although the lack of default arguments and global mutable state means that there are extra functions to handle a few different cases (files from command line arguments, files from a vector, accessing current filename/line number).\r\n\r\nA few points that possibly require adjustment:\r\n- Most functions take vectors of `Path` (well, `Option<Path>`) rather than just `~str`, since this seems safer, and allows finer control without the number of different functions/methods increasing exponentially.\r\n- `pathify` has a stupid name.\r\n- I'm not quite sure how to mock tests that require external files: the tests in `libcore/io.rs` seem to indicate using a `tmp` subdirectory, so that's what I did, but I can't reliably build rust on this computer to test (sorry! although I have run the tests in just `fileinput.rs`  after creating `./tmp/` manually).\r\n- The documentation I've written seems pretty crappy and not particularly clear.\r\n- Only UTF8 files are supported.", "tree": {"sha": "9c4f4a2d1f9aaed428f73da8cdd456a50ca1eb0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c4f4a2d1f9aaed428f73da8cdd456a50ca1eb0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cc903015b395c0d9eada3fe3376f2447cc835b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc903015b395c0d9eada3fe3376f2447cc835b6", "html_url": "https://github.com/rust-lang/rust/commit/0cc903015b395c0d9eada3fe3376f2447cc835b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cc903015b395c0d9eada3fe3376f2447cc835b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26d8b5188a248a597c9c0b70242ce85e02ccf652", "url": "https://api.github.com/repos/rust-lang/rust/commits/26d8b5188a248a597c9c0b70242ce85e02ccf652", "html_url": "https://github.com/rust-lang/rust/commit/26d8b5188a248a597c9c0b70242ce85e02ccf652"}, {"sha": "fea1380a9a0ca94738132db4d51ec4bd86bac3dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fea1380a9a0ca94738132db4d51ec4bd86bac3dd", "html_url": "https://github.com/rust-lang/rust/commit/fea1380a9a0ca94738132db4d51ec4bd86bac3dd"}], "stats": {"total": 612, "additions": 612, "deletions": 0}, "files": [{"sha": "df733425f3ef0cf155a6b2a98849cb05cb33f1f5", "filename": "src/libstd/fileinput.rs", "status": "added", "additions": 611, "deletions": 0, "changes": 611, "blob_url": "https://github.com/rust-lang/rust/blob/0cc903015b395c0d9eada3fe3376f2447cc835b6/src%2Flibstd%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc903015b395c0d9eada3fe3376f2447cc835b6/src%2Flibstd%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffileinput.rs?ref=0cc903015b395c0d9eada3fe3376f2447cc835b6", "patch": "@@ -0,0 +1,611 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*!\n+A library for iterating through the lines in a series of\n+files. Very similar to [the Python module of the same\n+name](http://docs.python.org/3.3/library/fileinput.html).\n+\n+It allows the programmer to automatically take filenames from the\n+command line arguments (via `input` and `input_state`), as well as\n+specify them as a vector directly (`input_vec` and\n+`input_vec_state`). The files are opened as necessary, so any files\n+that can't be opened only cause an error when reached in the\n+iteration.\n+\n+On the command line, `stdin` is represented by a filename of `-` (a\n+single hyphen) and in the functions that take a vector directly\n+(e.g. `input_vec`) it is represented by `None`. Note `stdin` is *not*\n+reset once it has been finished, so attempting to iterate on `[None,\n+None]` will only take input once unless `io::stdin().seek(0, SeekSet)`\n+is called between.\n+\n+The `pathify` function handles converting a list of file paths as\n+strings to the appropriate format, including the (optional) conversion\n+of `\"-\"` to `stdin`.\n+\n+# Basic\n+\n+In many cases, one can use the `input_*` functions without having\n+to handle any `FileInput` structs. E.g. a simple `cat` program\n+\n+    for input |line| {\n+        io::println(line)\n+    }\n+\n+or a program that numbers lines after concatenating two files\n+\n+    for input_vec_state(pathify([~\"a.txt\", ~\"b.txt\"])) |line, state| {\n+        io::println(fmt!(\"%u: %s\", state.line_num,\n+                                   line));\n+    }\n+\n+The two `input_vec*` functions take a vec of file names (where empty\n+means read from `stdin`), the other two functions use the command line\n+arguments.\n+\n+# Advanced\n+\n+For more complicated uses (e.g. if one needs to pause iteration and\n+resume it later), a `FileInput` instance can be constructed via the\n+`from_vec`, `from_vec_raw` and `from_args` functions.\n+\n+Once created, the `each_line` (from the `core::io::ReaderUtil` trait)\n+and `each_line_state` methods allow one to iterate on the lines; the\n+latter provides more information about the position within the\n+iteration to the caller.\n+\n+It is possible (and safe) to skip lines and files using the\n+`read_line` and `next_file` methods. Also, `FileInput` implements\n+`core::io::Reader`, and the state will be updated correctly while\n+using any of those methods.\n+\n+E.g. the following program reads until an empty line, pauses for user\n+input, skips the current file and then numbers the remaining lines\n+(where the numbers are from the start of each file, rather than the\n+total line count).\n+\n+    let in = FileInput::from_vec(pathify([~\"a.txt\", ~\"b.txt\", ~\"c.txt\"],\n+                                             true));\n+\n+    for in.each_line |line| {\n+        if line.is_empty() {\n+            break\n+        }\n+        io::println(line);\n+    }\n+\n+    io::println(\"Continue?\");\n+\n+    if io::stdin().read_line() == ~\"yes\" {\n+        in.next_file(); // skip!\n+\n+        for in.each_line_state |line, state| {\n+           io::println(fmt!(\"%u: %s\", state.line_num_file,\n+                                      line))\n+        }\n+    }\n+*/\n+\n+#[allow(deprecated_mutable_fields)];\n+\n+use core::prelude::*;\n+use core::io::ReaderUtil;\n+\n+/**\n+A summary of the internal state of a `FileInput` object. `line_num`\n+and `line_num_file` represent the number of lines read in total and in\n+the current file respectively. `current_path` is `None` if the current\n+file is `stdin`.\n+*/\n+pub struct FileInputState {\n+    current_path: Option<Path>,\n+    line_num: uint,\n+    line_num_file: uint\n+}\n+\n+impl FileInputState {\n+    fn is_stdin(&self) -> bool {\n+        self.current_path.is_none()\n+    }\n+\n+    fn is_first_line(&self) -> bool {\n+        self.line_num_file == 1\n+    }\n+}\n+\n+struct FileInput_ {\n+    /**\n+    `Some(path)` is the file represented by `path`, `None` is\n+    `stdin`. Consumed as the files are read.\n+    */\n+    priv files: ~[Option<Path>],\n+    /**\n+    The current file: `Some(r)` for an open file, `None` before\n+    starting and after reading everything.\n+    */\n+    priv current_reader: Option<@io::Reader>,\n+    priv state: FileInputState,\n+\n+    /**\n+    Used to keep track of whether we need to insert the newline at the\n+    end of a file that is missing it, which is needed to separate the\n+    last and first lines.\n+    */\n+    priv previous_was_newline: bool\n+}\n+\n+// XXX: remove this when Reader has &mut self. Should be removable via\n+// \"self.fi.\" -> \"self.\" and renaming FileInput_. Documentation above\n+// will likely have to be updated to use `let mut in = ...`.\n+pub struct FileInput  {\n+    priv mut fi: FileInput_\n+}\n+\n+impl FileInput {\n+    /**\n+    Create a `FileInput` object from a vec of files. An empty\n+    vec means lines are read from `stdin` (use `from_vec_raw` to stop\n+    this behaviour). Any occurence of `None` represents `stdin`.\n+    */\n+    pub fn from_vec(files: ~[Option<Path>]) -> FileInput {\n+        FileInput::from_vec_raw(\n+            if files.is_empty() {\n+                ~[None]\n+            } else {\n+                files\n+            })\n+    }\n+\n+    /**\n+    Identical to `from_vec`, but an empty `files` vec stays\n+    empty. (`None` is `stdin`.)\n+    */\n+    pub fn from_vec_raw(files: ~[Option<Path>])\n+                                         -> FileInput {\n+        FileInput{\n+            fi: FileInput_ {\n+                files: files,\n+                current_reader: None,\n+                state: FileInputState {\n+                    current_path: None,\n+                    line_num: 0,\n+                    line_num_file: 0\n+                },\n+                // there was no previous unended line\n+                previous_was_newline: true\n+            }\n+        }\n+    }\n+\n+    /**\n+    Create a `FileInput` object from the command line\n+    arguments. `\"-\"` represents `stdin`.\n+    */\n+    pub fn from_args() -> FileInput {\n+        let args = os::args(),\n+            pathed = pathify(args.tail(), true);\n+        FileInput::from_vec(pathed)\n+    }\n+\n+    priv fn current_file_eof(&self) -> bool {\n+        match self.fi.current_reader {\n+            None => false,\n+            Some(r) => r.eof()\n+        }\n+    }\n+\n+    /**\n+    Skip to the next file in the queue. Can `fail` when opening\n+    a file.\n+\n+    Returns `false` if there is no more files, and `true` when it\n+    successfully opens the next file.\n+    */\n+\n+    pub fn next_file(&self) -> bool {\n+        // No more files\n+\n+        // Compiler whines about \"illegal borrow unless pure\" for\n+        // files.is_empty()\n+        if unsafe { self.fi.files.is_empty() } {\n+            self.fi.current_reader = None;\n+            return false;\n+        }\n+\n+        let path_option = self.fi.files.shift(),\n+            file = match path_option {\n+                None => io::stdin(),\n+                Some(ref path) => io::file_reader(path).get()\n+            };\n+\n+        self.fi.current_reader = Some(file);\n+        self.fi.state.current_path = path_option;\n+        self.fi.state.line_num_file = 0;\n+        true\n+    }\n+\n+    /**\n+    Attempt to open the next file if there is none currently open,\n+    or if the current one is EOF'd.\n+\n+    Returns `true` if it had to move to the next file and did\n+    so successfully.\n+    */\n+    priv fn next_file_if_eof(&self) -> bool {\n+        match self.fi.current_reader {\n+            None => self.next_file(),\n+            Some(r) => {\n+                if r.eof() {\n+                    self.next_file()\n+                } else {\n+                    false\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+    Apply `f` to each line successively, along with some state\n+    (line numbers and file names, see documentation for\n+    `FileInputState`). Otherwise identical to `lines_each`.\n+    */\n+    pub fn each_line_state(&self,\n+                            f: &fn(&str, FileInputState) -> bool) {\n+         self.each_line(|line| f(line, copy self.fi.state));\n+    }\n+\n+\n+    /**\n+    Retrieve the current `FileInputState` information.\n+    */\n+    pub fn state(&self) -> FileInputState {\n+        copy self.fi.state\n+    }\n+}\n+\n+impl io::Reader for FileInput {\n+    fn read_byte(&self) -> int {\n+        loop {\n+            let stepped = self.next_file_if_eof();\n+\n+            // if we moved to the next file, and the previous\n+            // character wasn't \\n, then there is an unfinished line\n+            // from the previous file. This library models\n+            // line-by-line processing and the trailing line of the\n+            // previous file and the leading of the current file\n+            // should be considered different, so we need to insert a\n+            // fake line separator\n+            if stepped && !self.fi.previous_was_newline {\n+                self.fi.state.line_num += 1;\n+                self.fi.state.line_num_file += 1;\n+                self.fi.previous_was_newline = true;\n+                return '\\n' as int;\n+            }\n+\n+            match self.fi.current_reader {\n+                None => return -1,\n+                Some(r) => {\n+                    let b = r.read_byte();\n+\n+                    if b < 0 {\n+                        loop;\n+                    }\n+\n+                    if b == '\\n' as int {\n+                        self.fi.state.line_num += 1;\n+                        self.fi.state.line_num_file += 1;\n+                        self.fi.previous_was_newline = true;\n+                    } else {\n+                        self.fi.previous_was_newline = false;\n+                    }\n+\n+                    return b;\n+                }\n+            }\n+        }\n+    }\n+    fn read(&self, buf: &mut [u8], len: uint) -> uint {\n+        let mut count = 0;\n+        while count < len {\n+            let b = self.read_byte();\n+            if b < 0 { break }\n+\n+            buf[count] = b as u8;\n+            count += 1;\n+        }\n+\n+        count\n+    }\n+    fn eof(&self) -> bool {\n+        // we've run out of files, and current_reader is either None or eof.\n+\n+        // compiler whines about illegal borrows for files.is_empty()\n+        (unsafe { self.fi.files.is_empty() }) &&\n+            match self.fi.current_reader { None => true, Some(r) => r.eof() }\n+\n+    }\n+    fn seek(&self, offset: int, whence: io::SeekStyle) {\n+        match self.fi.current_reader {\n+            None => {},\n+            Some(r) => r.seek(offset, whence)\n+        }\n+    }\n+    fn tell(&self) -> uint {\n+        match self.fi.current_reader {\n+            None => 0,\n+            Some(r) => r.tell()\n+        }\n+    }\n+}\n+\n+/**\n+Convert a list of strings to an appropriate form for a `FileInput`\n+instance. `stdin_hyphen` controls whether `-` represents `stdin` or\n+a literal `-`.\n+*/\n+// XXX: stupid, unclear name\n+pub fn pathify(vec: &[~str], stdin_hyphen : bool) -> ~[Option<Path>] {\n+    vec::map(vec, |&str : & ~str| {\n+        if stdin_hyphen && str == ~\"-\" {\n+            None\n+        } else {\n+            Some(Path(str))\n+        }\n+    })\n+}\n+\n+/**\n+Iterate directly over the command line arguments (no arguments implies\n+reading from `stdin`).\n+\n+Fails when attempting to read from a file that can't be opened.\n+*/\n+pub fn input(f: &fn(&str) -> bool) {\n+    let mut i = FileInput::from_args();\n+    i.each_line(f);\n+}\n+\n+/**\n+Iterate directly over the command line arguments (no arguments\n+implies reading from `stdin`) with the current state of the iteration\n+provided at each call.\n+\n+Fails when attempting to read from a file that can't be opened.\n+*/\n+pub fn input_state(f: &fn(&str, FileInputState) -> bool) {\n+    let mut i = FileInput::from_args();\n+    i.each_line_state(f);\n+}\n+\n+/**\n+Iterate over a vector of files (an empty vector implies just `stdin`).\n+\n+Fails when attempting to read from a file that can't be opened.\n+*/\n+pub fn input_vec(files: ~[Option<Path>], f: &fn(&str) -> bool) {\n+    let mut i = FileInput::from_vec(files);\n+    i.each_line(f);\n+}\n+\n+/**\n+Iterate over a vector of files (an empty vector implies just `stdin`)\n+with the current state of the iteration provided at each call.\n+\n+Fails when attempting to read from a file that can't be opened.\n+*/\n+pub fn input_vec_state(files: ~[Option<Path>],\n+                       f: &fn(&str, FileInputState) -> bool) {\n+    let mut i = FileInput::from_vec(files);\n+    i.each_line_state(f);\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use core::io::WriterUtil;\n+    use core::prelude::*;\n+    use super::{FileInput, pathify, input_vec, input_vec_state};\n+\n+    fn make_file(path : &Path, contents: &[~str]) {\n+        let file = io::file_writer(path, [io::Create, io::Truncate]).get();\n+\n+        for contents.each |&str| {\n+            file.write_str(str);\n+            file.write_char('\\n');\n+        }\n+    }\n+\n+    #[test]\n+    fn test_pathify() {\n+        let strs = [~\"some/path\",\n+                    ~\"some/other/path\"],\n+            paths = ~[Some(Path(\"some/path\")),\n+                      Some(Path(\"some/other/path\"))];\n+\n+        assert_eq!(pathify(strs, true), copy paths);\n+        assert_eq!(pathify(strs, false), paths);\n+\n+        assert_eq!(pathify([~\"-\"], true), ~[None]);\n+        assert_eq!(pathify([~\"-\"], false), ~[Some(Path(\"-\"))]);\n+    }\n+\n+    #[test]\n+    fn test_fileinput_read_byte() {\n+        let filenames = pathify(vec::from_fn(\n+            3,\n+            |i| fmt!(\"tmp/lib-fileinput-test-fileinput-read-byte-%u.tmp\", i)), true);\n+\n+        // 3 files containing 0\\n, 1\\n, and 2\\n respectively\n+        for filenames.eachi |i, &filename| {\n+            make_file(filename.get_ref(), ~[fmt!(\"%u\", i)]);\n+        }\n+\n+        let fi = FileInput::from_vec(copy filenames);\n+\n+        for \"012\".each_chari |line, c| {\n+            assert_eq!(fi.read_byte(), c as int);\n+            assert_eq!(fi.state().line_num, line);\n+            assert_eq!(fi.state().line_num_file, 0);\n+            assert_eq!(fi.read_byte(), '\\n' as int);\n+            assert_eq!(fi.state().line_num, line + 1);\n+            assert_eq!(fi.state().line_num_file, 1);\n+\n+            assert_eq!(copy fi.state().current_path, copy filenames[line]);\n+        }\n+\n+        assert_eq!(fi.read_byte(), -1);\n+        assert!(fi.eof());\n+        assert_eq!(fi.state().line_num, 3)\n+\n+    }\n+\n+    #[test]\n+    fn test_fileinput_read() {\n+        let filenames = pathify(vec::from_fn(\n+            3,\n+            |i| fmt!(\"tmp/lib-fileinput-test-fileinput-read-%u.tmp\", i)), true);\n+\n+        // 3 files containing 1\\n, 2\\n, and 3\\n respectively\n+        for filenames.eachi |i, &filename| {\n+            make_file(filename.get_ref(), ~[fmt!(\"%u\", i)]);\n+        }\n+\n+        let fi = FileInput::from_vec(filenames);\n+        let mut buf : ~[u8] = vec::from_elem(6, 0u8);\n+        let count = fi.read(buf, 10);\n+        assert_eq!(count, 6);\n+        assert_eq!(buf, \"0\\n1\\n2\\n\".to_bytes());\n+        assert!(fi.eof())\n+        assert_eq!(fi.state().line_num, 3);\n+    }\n+\n+    #[test]\n+    fn test_input_vec() {\n+        let mut all_lines = ~[];\n+        let filenames = pathify(vec::from_fn(\n+            3,\n+            |i| fmt!(\"tmp/lib-fileinput-test-input-vec-%u.tmp\", i)), true);\n+\n+        for filenames.eachi |i, &filename| {\n+            let contents =\n+                vec::from_fn(3, |j| fmt!(\"%u %u\", i, j));\n+            make_file(filename.get_ref(), contents);\n+            all_lines.push_all(contents);\n+        }\n+\n+        let mut read_lines = ~[];\n+        for input_vec(filenames) |line| {\n+            read_lines.push(line.to_owned());\n+        }\n+        assert_eq!(read_lines, all_lines);\n+    }\n+\n+    #[test]\n+    fn test_input_vec_state() {\n+        let filenames = pathify(vec::from_fn(\n+            3,\n+            |i| fmt!(\"tmp/lib-fileinput-test-input-vec-state-%u.tmp\", i)),true);\n+\n+        for filenames.eachi |i, &filename| {\n+            let contents =\n+                vec::from_fn(3, |j| fmt!(\"%u %u\", i, j + 1));\n+            make_file(filename.get_ref(), contents);\n+        }\n+\n+        for input_vec_state(filenames) |line, state| {\n+            let nums = do vec::build |p| {\n+                for str::each_split_char(line, ' ') |s| { p(s.to_owned()); }\n+            };\n+            let file_num = uint::from_str(nums[0]).get();\n+            let line_num = uint::from_str(nums[1]).get();\n+            assert_eq!(line_num, state.line_num_file);\n+            assert_eq!(file_num * 3 + line_num, state.line_num);\n+        }\n+    }\n+\n+    #[test]\n+    fn test_empty_files() {\n+        let filenames = pathify(vec::from_fn(\n+            3,\n+            |i| fmt!(\"tmp/lib-fileinput-test-next-file-%u.tmp\", i)),true);\n+\n+        make_file(filenames[0].get_ref(), ~[~\"1\", ~\"2\"]);\n+        make_file(filenames[1].get_ref(), ~[]);\n+        make_file(filenames[2].get_ref(), ~[~\"3\", ~\"4\"]);\n+\n+        let mut count = 0;\n+        for input_vec_state(copy filenames) |line, state| {\n+            let expected_path = match line {\n+                \"1\" | \"2\" => copy filenames[0],\n+                \"3\" | \"4\" => copy filenames[2],\n+                _ => fail!(~\"unexpected line\")\n+            };\n+            assert_eq!(copy state.current_path, expected_path);\n+            count += 1;\n+        }\n+        assert_eq!(count, 4);\n+    }\n+\n+    #[test]\n+    fn test_no_trailing_newline() {\n+        let f1 = Some(Path(\"tmp/lib-fileinput-test-no-trailing-newline-1.tmp\")),\n+            f2 = Some(Path(\"tmp/lib-fileinput-test-no-trailing-newline-2.tmp\"));\n+\n+        let wr = io::file_writer(f1.get_ref(), [io::Create, io::Truncate]).get();\n+        wr.write_str(\"1\\n2\");\n+        let wr = io::file_writer(f2.get_ref(), [io::Create, io::Truncate]).get();\n+        wr.write_str(\"3\\n4\");\n+\n+        let mut lines = ~[];\n+        for input_vec(~[f1, f2]) |line| {\n+            lines.push(line.to_owned());\n+        }\n+        assert_eq!(lines, ~[~\"1\", ~\"2\", ~\"3\", ~\"4\"]);\n+    }\n+\n+\n+    #[test]\n+    fn test_next_file() {\n+        let filenames = pathify(vec::from_fn(\n+            3,\n+            |i| fmt!(\"tmp/lib-fileinput-test-next-file-%u.tmp\", i)),true);\n+\n+        for filenames.eachi |i, &filename| {\n+            let contents =\n+                vec::from_fn(3, |j| fmt!(\"%u %u\", i, j + 1));\n+            make_file(&filename.get(), contents);\n+        }\n+\n+        let mut in = FileInput::from_vec(filenames);\n+\n+        // read once from 0\n+        assert_eq!(in.read_line(), ~\"0 1\");\n+        in.next_file(); // skip the rest of 1\n+\n+        // read all lines from 1 (but don't read any from 2),\n+        for uint::range(1, 4) |i| {\n+            assert_eq!(in.read_line(), fmt!(\"1 %u\", i));\n+        }\n+        // 1 is finished, but 2 hasn't been started yet, so this will\n+        // just \"skip\" to the beginning of 2 (Python's fileinput does\n+        // the same)\n+        in.next_file();\n+\n+        assert_eq!(in.read_line(), ~\"2 1\");\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_input_vec_missing_file() {\n+        for input_vec(pathify([~\"this/file/doesnt/exist\"], true)) |line| {\n+            io::println(line);\n+        }\n+    }\n+}"}, {"sha": "74ef229a033536e372ecc617a7dd0f9eeb7fac49", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cc903015b395c0d9eada3fe3376f2447cc835b6/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/0cc903015b395c0d9eada3fe3376f2447cc835b6/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=0cc903015b395c0d9eada3fe3376f2447cc835b6", "patch": "@@ -98,6 +98,7 @@ pub mod workcache;\n pub mod bigint;\n pub mod stats;\n pub mod semver;\n+pub mod fileinput;\n \n #[cfg(unicode)]\n mod unicode;"}]}