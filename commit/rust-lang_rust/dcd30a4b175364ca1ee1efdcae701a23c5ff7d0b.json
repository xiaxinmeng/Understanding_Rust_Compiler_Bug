{"sha": "dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZDMwYTRiMTc1MzY0Y2ExZWUxZWZkY2FlNzAxYTIzYzVmZjdkMGI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-07T10:02:05Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-10T21:12:57Z"}, "message": "hygiene: Fix wording of desugaring descriptions\n\nUse variant names rather than descriptions for identifying desugarings in `#[rustc_on_unimplemented]`.\nBoth are highly unstable, but variant name is at least a single identifier.", "tree": {"sha": "bda92f926da4cad9671855d921e773b6aef7225e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bda92f926da4cad9671855d921e773b6aef7225e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b", "html_url": "https://github.com/rust-lang/rust/commit/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99c7432896bbfdab1f7f70f8d763cab5f3efe64a", "url": "https://api.github.com/repos/rust-lang/rust/commits/99c7432896bbfdab1f7f70f8d763cab5f3efe64a", "html_url": "https://github.com/rust-lang/rust/commit/99c7432896bbfdab1f7f70f8d763cab5f3efe64a"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "8db241e4b4ebf7f0e67713dc0240b112745a83c0", "filename": "src/doc/unstable-book/src/language-features/on-unimplemented.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "raw_url": "https://github.com/rust-lang/rust/raw/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md?ref=dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b", "patch": "@@ -98,7 +98,8 @@ application of these fields based on a variety of attributes when using\n    `crate_local`) or matching against a particular method. Currently used\n    for `try`.\n  - `from_desugaring`: usable both as boolean (whether the flag is present)\n-   or matching against a particular desugaring.\n+   or matching against a particular desugaring. The desugaring is identified\n+   with its variant name in the `DesugaringKind` enum.\n \n For example, the `Iterator` trait can be annotated in the following way:\n "}, {"sha": "76fec1020f1eff572d8c8c5890efeffce81bc207", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b", "patch": "@@ -8,12 +8,12 @@\n #[rustc_on_unimplemented(\n    on(all(\n        any(from_method=\"from_error\", from_method=\"from_ok\"),\n-       from_desugaring=\"?\"),\n+       from_desugaring=\"QuestionMark\"),\n       message=\"the `?` operator can only be used in a \\\n                function that returns `Result` or `Option` \\\n                (or another type that implements `{Try}`)\",\n       label=\"cannot use the `?` operator in a function that returns `{Self}`\"),\n-   on(all(from_method=\"into_result\", from_desugaring=\"?\"),\n+   on(all(from_method=\"into_result\", from_desugaring=\"QuestionMark\"),\n       message=\"the `?` operator can only be applied to values \\\n                that implement `{Try}`\",\n       label=\"the `?` operator cannot be applied to type `{Self}`\")"}, {"sha": "352d318ba7931ab5940670e70f9d0974a217c202", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b", "patch": "@@ -372,7 +372,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         if let Some(k) = obligation.cause.span.desugaring_kind() {\n             flags.push((sym::from_desugaring, None));\n-            flags.push((sym::from_desugaring, Some(k.descr().to_string())));\n+            flags.push((sym::from_desugaring, Some(format!(\"{:?}\", k))));\n         }\n         let generics = self.tcx.generics_of(def_id);\n         let self_ty = trait_ref.self_ty();"}, {"sha": "b72da042d04652b81398df151d294e79051fc695", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b", "patch": "@@ -734,15 +734,16 @@ pub enum DesugaringKind {\n }\n \n impl DesugaringKind {\n-    pub fn descr(self) -> &'static str {\n+    /// The description wording should combine well with \"desugaring of {}\".\n+    fn descr(self) -> &'static str {\n         match self {\n-            DesugaringKind::CondTemporary => \"if and while condition\",\n-            DesugaringKind::Async => \"async\",\n-            DesugaringKind::Await => \"await\",\n-            DesugaringKind::QuestionMark => \"?\",\n-            DesugaringKind::TryBlock => \"try block\",\n-            DesugaringKind::ExistentialType => \"existential type\",\n-            DesugaringKind::ForLoop => \"for loop\",\n+            DesugaringKind::CondTemporary => \"`if` or `while` condition\",\n+            DesugaringKind::Async => \"`async` block or function\",\n+            DesugaringKind::Await => \"`await` expression\",\n+            DesugaringKind::QuestionMark => \"operator `?`\",\n+            DesugaringKind::TryBlock => \"`try` block\",\n+            DesugaringKind::ExistentialType => \"`existential type`\",\n+            DesugaringKind::ForLoop => \"`for` loop\",\n         }\n     }\n }"}, {"sha": "9258b71518ff1be4c6f0a3817e4a9a9b5fc137f5", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=dcd30a4b175364ca1ee1efdcae701a23c5ff7d0b", "patch": "@@ -442,7 +442,7 @@ impl Span {\n             // Don't print recursive invocations.\n             if !info.call_site.source_equal(&prev_span) {\n                 let (pre, post) = match info.kind {\n-                    ExpnKind::Desugaring(..) => (\"desugaring of `\", \"`\"),\n+                    ExpnKind::Desugaring(..) => (\"desugaring of \", \"\"),\n                     ExpnKind::Macro(macro_kind, _) => match macro_kind {\n                         MacroKind::Bang => (\"\", \"!\"),\n                         MacroKind::Attr => (\"#[\", \"]\"),"}]}