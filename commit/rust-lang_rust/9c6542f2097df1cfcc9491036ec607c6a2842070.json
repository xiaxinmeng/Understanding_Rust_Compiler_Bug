{"sha": "9c6542f2097df1cfcc9491036ec607c6a2842070", "node_id": "C_kwDOAAsO6NoAKDljNjU0MmYyMDk3ZGYxY2ZjYzk0OTEwMzZlYzYwN2M2YTI4NDIwNzA", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-02-21T10:29:38Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-02-21T10:29:38Z"}, "message": "parameters.split_last()", "tree": {"sha": "b1e73e41d1ac06a8c2e9c20f2df31d12046cb0fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1e73e41d1ac06a8c2e9c20f2df31d12046cb0fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c6542f2097df1cfcc9491036ec607c6a2842070", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmITaZIACgkQeO9fUvOM\nSb1N6wwApdOGlBj3F2S+S2xQXHbVa8EZ85hL16Iyi0FW9iXRktKlRLT9u4Xwan4Y\nefd1Z0vARqM/IofVvP8uo/fO+YK6MJvu6Fd9s8C/mk4OWQxtkMdWVQodiAKLBUJl\n/4WzvzYblwkAnSOPFC874HRVvtYp3xmmY1hMGBVVnWFxG60byi5hBNWEKUQO9DPs\nGkkSE9yXNBWESNdF3ftBDr69PvC5K/uIRqJwVYAbplaEtpI/BDVr4JDD5HaCSVRC\nJmBq22H8kvwvAIgR2yXo5UhyYJyKTi+YokbEwGEPVv3jJ4r6aiyyniW13cnjSkb6\n5JI/7RkobcaXr57pzOMMtgjDpfR492HgjlZZcgF2WVJSBfKhR94n1hr1MYfY66FM\n2DG6+5atjrypl0A2m4mD39cxhchoLx8dUYjdua+0XFxjqlCkDxu8KM/3XgITPVml\nvdwpf0fidA0BfePUdXiQj2X9F6rX/ZBdv+IUiYGh8YYFtggiPYGFydMeHd7sJFGv\ncxBkR7JV\n=Ebw+\n-----END PGP SIGNATURE-----", "payload": "tree b1e73e41d1ac06a8c2e9c20f2df31d12046cb0fc\nparent d1fc208c9ceb959d616fa790fca5d282bc8d820d\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1645439378 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1645439378 +0000\n\nparameters.split_last()\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c6542f2097df1cfcc9491036ec607c6a2842070", "html_url": "https://github.com/rust-lang/rust/commit/9c6542f2097df1cfcc9491036ec607c6a2842070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c6542f2097df1cfcc9491036ec607c6a2842070/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1fc208c9ceb959d616fa790fca5d282bc8d820d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1fc208c9ceb959d616fa790fca5d282bc8d820d", "html_url": "https://github.com/rust-lang/rust/commit/d1fc208c9ceb959d616fa790fca5d282bc8d820d"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "0e75ddeabcdff4c028b85c44bc50570da71478a5", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9c6542f2097df1cfcc9491036ec607c6a2842070/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6542f2097df1cfcc9491036ec607c6a2842070/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=9c6542f2097df1cfcc9491036ec607c6a2842070", "patch": "@@ -1097,29 +1097,28 @@ impl HirDisplay for TypeRef {\n             TypeRef::Fn(parameters, is_varargs) => {\n                 // FIXME: Function pointer qualifiers.\n                 write!(f, \"fn(\")?;\n-                for index in 0..parameters.len() - 1 {\n-                    let (param_name, param_type) = &parameters[index];\n-                    if let Some(name) = param_name {\n-                        write!(f, \"{}: \", name)?;\n-                    }\n+                if let Some(((_, return_type), function_parameters)) = parameters.split_last() {\n+                    for index in 0..function_parameters.len() {\n+                        let (param_name, param_type) = &function_parameters[index];\n+                        if let Some(name) = param_name {\n+                            write!(f, \"{}: \", name)?;\n+                        }\n \n-                    param_type.hir_fmt(f)?;\n+                        param_type.hir_fmt(f)?;\n \n-                    // Last index contains the return type so we stop writing commas on the second-to-last index\n-                    if index != parameters.len() - 2 {\n-                        write!(f, \", \")?;\n+                        if index != function_parameters.len() - 1 {\n+                            write!(f, \", \")?;\n+                        }\n                     }\n-                }\n-                if *is_varargs {\n-                    write!(f, \"{}...\", if parameters.len() == 1 { \"\" } else { \", \" })?;\n-                }\n-                write!(f, \")\")?;\n-                if let Some((_, ret_ty)) = &parameters.last() {\n-                    match ret_ty {\n+                    if *is_varargs {\n+                        write!(f, \"{}...\", if parameters.len() == 1 { \"\" } else { \", \" })?;\n+                    }\n+                    write!(f, \")\")?;\n+                    match &return_type {\n                         TypeRef::Tuple(tup) if tup.is_empty() => {}\n                         _ => {\n                             write!(f, \" -> \")?;\n-                            ret_ty.hir_fmt(f)?;\n+                            return_type.hir_fmt(f)?;\n                         }\n                     }\n                 }"}]}