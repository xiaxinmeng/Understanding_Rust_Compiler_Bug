{"sha": "435477dc6528932ebf81e038aeceec83aa1c03b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNTQ3N2RjNjUyODkzMmViZjgxZTAzOGFlY2VlYzgzYWExYzAzYjQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-03-06T09:18:48Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-04-06T10:14:08Z"}, "message": "Move export level computation to reachable_non_generics query.", "tree": {"sha": "c735e0167ebc4ced310ae34b580ab94de043c960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c735e0167ebc4ced310ae34b580ab94de043c960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/435477dc6528932ebf81e038aeceec83aa1c03b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/435477dc6528932ebf81e038aeceec83aa1c03b4", "html_url": "https://github.com/rust-lang/rust/commit/435477dc6528932ebf81e038aeceec83aa1c03b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/435477dc6528932ebf81e038aeceec83aa1c03b4/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dad194a10d1e05d77516f4052859c2f9315e434a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dad194a10d1e05d77516f4052859c2f9315e434a", "html_url": "https://github.com/rust-lang/rust/commit/dad194a10d1e05d77516f4052859c2f9315e434a"}], "stats": {"total": 102, "additions": 49, "deletions": 53}, "files": [{"sha": "9843eaf77e73828890d1ba7a6f5f5fe500afb92c", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 49, "deletions": 53, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/435477dc6528932ebf81e038aeceec83aa1c03b4/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435477dc6528932ebf81e038aeceec83aa1c03b4/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=435477dc6528932ebf81e038aeceec83aa1c03b4", "patch": "@@ -20,7 +20,7 @@ use rustc::middle::exported_symbols::{SymbolExportLevel, ExportedSymbol, metadat\n use rustc::session::config;\n use rustc::ty::{TyCtxt, SymbolName};\n use rustc::ty::maps::Providers;\n-use rustc::util::nodemap::{FxHashMap, DefIdSet};\n+use rustc::util::nodemap::{FxHashMap, DefIdMap};\n use rustc_allocator::ALLOCATOR_METHODS;\n \n pub type ExportedSymbols = FxHashMap<\n@@ -56,51 +56,12 @@ pub fn crates_export_threshold(crate_types: &[config::CrateType])\n \n fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                              cnum: CrateNum)\n-                                             -> Lrc<DefIdSet>\n+                                             -> Lrc<DefIdMap<SymbolExportLevel>>\n {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_trans() {\n-        return Lrc::new(DefIdSet())\n-    }\n-\n-    let export_threshold = threshold(tcx);\n-\n-    // We already collect all potentially reachable non-generic items for\n-    // `exported_symbols`. Now we just filter them down to what is actually\n-    // exported for the given crate we are compiling.\n-    let reachable_non_generics = tcx\n-        .exported_symbols(LOCAL_CRATE)\n-        .iter()\n-        .filter_map(|&(exported_symbol, level)| {\n-            if let ExportedSymbol::NonGeneric(def_id) = exported_symbol {\n-                if level.is_below_threshold(export_threshold) {\n-                    return Some(def_id)\n-                }\n-            }\n-\n-            None\n-        })\n-        .collect();\n-\n-    Lrc::new(reachable_non_generics)\n-}\n-\n-fn is_reachable_non_generic_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                               def_id: DefId)\n-                                               -> bool {\n-    tcx.reachable_non_generics(def_id.krate).contains(&def_id)\n-}\n-\n-fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                             cnum: CrateNum)\n-                                             -> Arc<Vec<(ExportedSymbol<'tcx>,\n-                                                         SymbolExportLevel)>>\n-{\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n-    if !tcx.sess.opts.output_types.should_trans() {\n-        return Arc::new(vec![])\n+        return Lrc::new(DefIdMap())\n     }\n \n     // Check to see if this crate is a \"special runtime crate\". These\n@@ -113,7 +74,7 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let special_runtime_crate = tcx.is_panic_runtime(LOCAL_CRATE) ||\n         tcx.is_compiler_builtins(LOCAL_CRATE);\n \n-    let reachable_non_generics: DefIdSet = tcx.reachable_set(LOCAL_CRATE).0\n+    let mut reachable_non_generics: DefIdMap<_> = tcx.reachable_set(LOCAL_CRATE).0\n         .iter()\n         .filter_map(|&node_id| {\n             // We want to ignore some FFI functions that are not exposed from\n@@ -166,11 +127,7 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 _ => None\n             }\n         })\n-        .collect();\n-\n-    let mut symbols: Vec<_> = reachable_non_generics\n-        .iter()\n-        .map(|&def_id| {\n+        .map(|def_id| {\n             let export_level = if special_runtime_crate {\n                 let name = tcx.symbol_name(Instance::mono(tcx, def_id));\n                 // We can probably do better here by just ensuring that\n@@ -193,20 +150,59 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             debug!(\"EXPORTED SYMBOL (local): {} ({:?})\",\n                    tcx.symbol_name(Instance::mono(tcx, def_id)),\n                    export_level);\n-            (ExportedSymbol::NonGeneric(def_id), export_level)\n+            (def_id, export_level)\n         })\n         .collect();\n \n     if let Some(id) = tcx.sess.derive_registrar_fn.get() {\n         let def_id = tcx.hir.local_def_id(id);\n-        symbols.push((ExportedSymbol::NonGeneric(def_id), SymbolExportLevel::C));\n+        reachable_non_generics.insert(def_id, SymbolExportLevel::C);\n     }\n \n     if let Some(id) = tcx.sess.plugin_registrar_fn.get() {\n         let def_id = tcx.hir.local_def_id(id);\n-        symbols.push((ExportedSymbol::NonGeneric(def_id), SymbolExportLevel::C));\n+        reachable_non_generics.insert(def_id, SymbolExportLevel::C);\n     }\n \n+    Lrc::new(reachable_non_generics)\n+}\n+\n+fn is_reachable_non_generic_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                                     def_id: DefId)\n+                                                     -> bool {\n+    let export_threshold = threshold(tcx);\n+\n+    if let Some(&level) = tcx.reachable_non_generics(def_id.krate).get(&def_id) {\n+        level.is_below_threshold(export_threshold)\n+    } else {\n+        false\n+    }\n+}\n+\n+fn is_reachable_non_generic_provider_extern<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                                      def_id: DefId)\n+                                                      -> bool {\n+    tcx.reachable_non_generics(def_id.krate).contains_key(&def_id)\n+}\n+\n+fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                             cnum: CrateNum)\n+                                             -> Arc<Vec<(ExportedSymbol<'tcx>,\n+                                                         SymbolExportLevel)>>\n+{\n+    assert_eq!(cnum, LOCAL_CRATE);\n+\n+    if !tcx.sess.opts.output_types.should_trans() {\n+        return Arc::new(vec![])\n+    }\n+\n+    let mut symbols: Vec<_> = tcx.reachable_non_generics(LOCAL_CRATE)\n+                                 .iter()\n+                                 .map(|(&def_id, &level)| {\n+                                    (ExportedSymbol::NonGeneric(def_id), level)\n+                                 })\n+                                 .collect();\n+\n     if let Some(_) = *tcx.sess.entry_fn.borrow() {\n         let symbol_name = \"main\".to_string();\n         let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(&symbol_name));\n@@ -254,13 +250,13 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n pub fn provide(providers: &mut Providers) {\n     providers.reachable_non_generics = reachable_non_generics_provider;\n-    providers.is_reachable_non_generic = is_reachable_non_generic_provider;\n+    providers.is_reachable_non_generic = is_reachable_non_generic_provider_local;\n     providers.exported_symbols = exported_symbols_provider_local;\n     providers.symbol_export_level = symbol_export_level_provider;\n }\n \n pub fn provide_extern(providers: &mut Providers) {\n-    providers.is_reachable_non_generic = is_reachable_non_generic_provider;\n+    providers.is_reachable_non_generic = is_reachable_non_generic_provider_extern;\n     providers.symbol_export_level = symbol_export_level_provider;\n }\n "}]}