{"sha": "cccae83d922f5aade2b7cca96579521cc35ced59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjY2FlODNkOTIyZjVhYWRlMmI3Y2NhOTY1Nzk1MjFjYzM1Y2VkNTk=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-06-25T18:26:14Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-06-25T18:26:14Z"}, "message": "Guide: Hello, world!\n\nLet's write our first Rust program!", "tree": {"sha": "616944e24f9214761944abd9740f9f9a4d30dd64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/616944e24f9214761944abd9740f9f9a4d30dd64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cccae83d922f5aade2b7cca96579521cc35ced59", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cccae83d922f5aade2b7cca96579521cc35ced59", "html_url": "https://github.com/rust-lang/rust/commit/cccae83d922f5aade2b7cca96579521cc35ced59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cccae83d922f5aade2b7cca96579521cc35ced59/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d574c17311e98e2a908406d306c32a780396147", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d574c17311e98e2a908406d306c32a780396147", "html_url": "https://github.com/rust-lang/rust/commit/1d574c17311e98e2a908406d306c32a780396147"}], "stats": {"total": 180, "additions": 180, "deletions": 0}, "files": [{"sha": "67f40d8edcf9536308644850581df76b28ca88b0", "filename": "src/doc/guide.md", "status": "modified", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/cccae83d922f5aade2b7cca96579521cc35ced59/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/cccae83d922f5aade2b7cca96579521cc35ced59/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=cccae83d922f5aade2b7cca96579521cc35ced59", "patch": "@@ -106,4 +106,184 @@ call ourselves), and we can help you out. Other great resources include our\n \n ## Hello, world!\n \n+Now that you have Rust installed, let's write your first Rust program. It's\n+traditional to make your first program in any new language one that prints the\n+text \"Hello, world!\" to the screen. The nice thing about starting with such a\n+simple program is that you can verify that your compiler isn't just installed,\n+but also working properly. And printing information to the screen is a pretty\n+common thing to do.\n+\n+The first thing that we need to do is make a file to put our code in. I like\n+to make a projects directory in my home directory, and keep all my projects\n+there. Rust does not care where your code lives.\n+\n+This actually leads to one other concern we should address: this tutorial will\n+assume that you have basic familiarity with the command-line. Rust does not\n+require that you know a whole ton about the command line, but until the\n+language is in a more finished state, IDE support is spotty. Rust makes no\n+specific demands on your editing tooling, or where your code lives.\n+\n+With that said, let's make a directory in our projects directory. Note that you\n+don't need to type in the `$`s, they just indicate the start of each command:\n+\n+```{bash}\n+$ mkdir ~/projects\n+$ cd ~/projects\n+$ mkdir hello_world\n+$ cd hello_world\n+```\n+\n+If you're on Windows and not using PowerShell, the `~` may not work. Consult\n+the documentation for your shell for more details.\n+\n+Let's make a new source file next. I'm going to use the syntax `editor\n+filename` to represent editing a file in these examples, but you should use\n+whatever method you want. We'll call our file `hello_world.rs`:\n+\n+```{bash}\n+$ editor hello_world.rs\n+```\n+\n+Rust files always end in a `.rs` extension. If you're using more than one word\n+in your file name, use an underscore. `hello_world.rs` versus `goodbye.rs`.\n+\n+Now that you've got your file open, type this in:\n+\n+```\n+fn main() {\n+    println!(\"Hello, world\");\n+}\n+```\n+\n+Save the file, and then type this into your terminal window:\n+\n+```{bash}\n+$ rustc hello_world.rs\n+$ ./hello_world  # on Windows, this is ./hello_world.exe\n+Hello, world\n+```\n+\n+Success! Let's go over what just happened in detail.\n+\n+```\n+fn main() {\n+   \n+}\n+```\n+\n+These two lines define a **function** in Rust. The `main` function is special:\n+it's the beginning of every Rust program. The first line says \"I'm declaring a\n+function named `main`, which takes no arguments and returns nothing.\" If there\n+were arguments, they would go inside the parentheses (`(` and `)`), and because\n+we aren't returning anything from this function, we've dropped that notation\n+entirely.  We'll get to it later.\n+\n+You'll also note that the function is wrapped in curly braces (`{` and `}`).\n+Rust requires these around all function bodies. It is also considered good\n+style to put the curly brace on the same line as the function declaration, with\n+one space in between.\n+\n+Next up is this line:\n+\n+```\n+    println!(\"Hello, world\");\n+```\n+\n+This line does all of the work in our little program. There are a number of\n+details that are important here. The first is that it's indented with four\n+spaces, not tabs. Please configure your editor of choice to insert four spaces\n+with the tab key. We provide some sample configurations for various editors\n+[here](https://github.com/rust-lang/rust/tree/master/src/etc).\n+\n+The second point is the `println!()` part. This is calling a Rust **macro**,\n+which is how metaprogramming is done in Rust. If it were a function instead, it\n+would look like this: `println()`. For our purposes, we don't need to worry\n+about this difference. Just know that sometimes, you'll see a `!`, and that\n+means that you're calling a macro instead of a normal function.\n+\n+Next, `\"Hello, world\"` is a **string**. Strings are a surprisingly\n+complicated topic in a systems programming language, and this is a **staticly\n+allocated** string. We will talk more about different kinds of allocation\n+later. We pass this string as an argument to `println!`, which prints the\n+string to the screen. Easy enough!\n+\n+Finally, the line ends with a semicolon (`;`). Rust is an **expression\n+oriented** language, which means that most things are expressions. The `;` is\n+used to indicate that this expression is over, and the next one is ready to\n+begin. Most lines of Rust code end with a `;`. We will cover this in-depth\n+later in the tutorial.\n+\n+Finally, actually **compiling** and **running** our program. We can compile\n+with our compiler, `rustc`, by passing it the name of our source file:\n+\n+```{bash}\n+$ rustc hello_world.rs\n+```\n+\n+This is similar to `gcc` or `clang`, if you come from a C or C++ background. Rust\n+will output a binary executable. You can see it with `ls`:\n+\n+```{bash}\n+$ ls\n+hello_world  hello_world.rs\n+```\n+\n+Or on Windows:\n+\n+```{bash}\n+$ dir\n+hello_world.exe  hello_world.rs\n+```\n+\n+There are now two files: our source code, with the `.rs`, and the executable.\n+We ran the executable like this:\n+\n+```{bash}\n+$ ./hello_world  # or ./hello_world.exe on Windows\n+```\n+\n+This prints out our `Hello, world!` text to our terminal.\n+\n+If you come from a dynamically typed language like Ruby, Python, or JavaScript,\n+you may not be used to these two steps being separate. Rust is an\n+**ahead-of-time compiled language**, which means that you can compile a\n+program, give it to someone else, and they don't need to have Rust installed.\n+If you give someone a `.rb` or `.py` or `.js` file, they need to have\n+Ruby/Python/JavaScript installed, but you just need one command to both compile\n+and run your program. Everything is a tradeoff in language design, and Rust has\n+made its choice.\n+\n+Congratulations! You have officially written a Rust program. That makes you a\n+Rust programmer! Welcome.\n+\n+Next, I'd like to introduce you to another tool, Cargo, which is used to write\n+real-world Rust programs. Just using `rustc` is nice for simple things, but as\n+your project grows, you'll want something to help you manage all of the options\n+that it has, and to make it easy to share your code with other people and\n+projects.\n+\n ## Hello, Cargo!\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"}]}