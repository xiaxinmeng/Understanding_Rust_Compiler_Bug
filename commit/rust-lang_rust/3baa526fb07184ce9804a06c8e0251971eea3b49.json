{"sha": "3baa526fb07184ce9804a06c8e0251971eea3b49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYWE1MjZmYjA3MTg0Y2U5ODA0YTA2YzhlMDI1MTk3MWVlYTNiNDk=", "commit": {"author": {"name": "Anatol Liu", "email": "axlui@anatols-mbp.lan", "date": "2020-11-05T04:08:46Z"}, "committer": {"name": "Anatol Liu", "email": "axlui@anatols-mbp.lan", "date": "2020-11-05T04:08:46Z"}, "message": "Add static semantic token modifier for associated functions with no &self", "tree": {"sha": "f895bdab50f6a839b30da4a4acb7d11a79e83ac3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f895bdab50f6a839b30da4a4acb7d11a79e83ac3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3baa526fb07184ce9804a06c8e0251971eea3b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3baa526fb07184ce9804a06c8e0251971eea3b49", "html_url": "https://github.com/rust-lang/rust/commit/3baa526fb07184ce9804a06c8e0251971eea3b49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3baa526fb07184ce9804a06c8e0251971eea3b49/comments", "author": null, "committer": null, "parents": [{"sha": "678a29e938f5833ecbf5a50eee0e29c5d99b56c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/678a29e938f5833ecbf5a50eee0e29c5d99b56c4", "html_url": "https://github.com/rust-lang/rust/commit/678a29e938f5833ecbf5a50eee0e29c5d99b56c4"}], "stats": {"total": 112, "additions": 110, "deletions": 2}, "files": [{"sha": "afb849b4d96d4c769f921025870c871ae1f53825", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=3baa526fb07184ce9804a06c8e0251971eea3b49", "patch": "@@ -787,6 +787,10 @@ impl Function {\n     pub fn has_body(self, db: &dyn HirDatabase) -> bool {\n         db.function_data(self.id).has_body\n     }\n+\n+    pub fn source(self, db: &dyn HirDatabase) -> InFile<ast::Fn> {\n+        self.id.lookup(db.upcast()).source(db.upcast())\n+    }\n }\n \n // Note: logically, this belongs to `hir_ty`, but we are not using it there yet."}, {"sha": "c28ff849a216d93e3b2efc091672a89d01d5c369", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=3baa526fb07184ce9804a06c8e0251971eea3b49", "patch": "@@ -746,6 +746,21 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                 if func.is_unsafe(db) {\n                     h |= HighlightModifier::Unsafe;\n                 }\n+                if let None = func.self_param(db) {\n+                    // if enclosing IMPL or TRAIT exists, this is a static method\n+                    let fn_parent_kind = func\n+                        .source(db)\n+                        .value\n+                        .syntax()\n+                        .parent()\n+                        .and_then(|s| s.parent())\n+                        .and_then(|s| Some(s.kind()));\n+                    if let Some(SyntaxKind::IMPL) = fn_parent_kind {\n+                        h |= HighlightModifier::Static;\n+                    } else if let Some(SyntaxKind::TRAIT) = fn_parent_kind {\n+                        h |= HighlightModifier::Static;\n+                    }\n+                }\n                 return h;\n             }\n             hir::ModuleDef::Adt(hir::Adt::Struct(_)) => HighlightTag::Struct,"}, {"sha": "65e0671a5a970a363869bb46bdc2828c4100bb27", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=3baa526fb07184ce9804a06c8e0251971eea3b49", "patch": "@@ -65,6 +65,8 @@ pub enum HighlightModifier {\n     Consuming,\n     Unsafe,\n     Callable,\n+    /// Used for associated functions\n+    Static,\n }\n \n impl HighlightTag {\n@@ -124,6 +126,7 @@ impl HighlightModifier {\n         HighlightModifier::Consuming,\n         HighlightModifier::Unsafe,\n         HighlightModifier::Callable,\n+        HighlightModifier::Static,\n     ];\n \n     fn as_str(self) -> &'static str {\n@@ -137,6 +140,7 @@ impl HighlightModifier {\n             HighlightModifier::Consuming => \"consuming\",\n             HighlightModifier::Unsafe => \"unsafe\",\n             HighlightModifier::Callable => \"callable\",\n+            HighlightModifier::Static => \"static\",\n         }\n     }\n "}, {"sha": "cd80d72b79890a196c1e668bf7303fedf48888e5", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "raw_url": "https://github.com/rust-lang/rust/raw/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html?ref=3baa526fb07184ce9804a06c8e0251971eea3b49", "patch": "@@ -0,0 +1,56 @@\n+\n+<style>\n+body                { margin: 0; }\n+pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n+.comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.injected           { opacity: 0.65 ; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n+.field              { color: #94BFF3; }\n+.function           { color: #93E0E3; }\n+.function.unsafe    { color: #BC8383; }\n+.operator.unsafe    { color: #BC8383; }\n+.parameter          { color: #94BFF3; }\n+.text               { color: #DCDCCC; }\n+.type               { color: #7CB8BB; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n+.attribute          { color: #94BFF3; }\n+.numeric_literal    { color: #BFEBBF; }\n+.bool_literal       { color: #BFE6EB; }\n+.macro              { color: #94BFF3; }\n+.module             { color: #AFD8AF; }\n+.value_param        { color: #DCDCCC; }\n+.variable           { color: #DCDCCC; }\n+.format_specifier   { color: #CC696B; }\n+.mutable            { text-decoration: underline; }\n+.escape_sequence    { color: #94BFF3; }\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.control            { font-style: italic; }\n+\n+.unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n+</style>\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">not_static</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">foo</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+\n+<span class=\"keyword\">impl</span> <span class=\"struct\">foo</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static\">is_static</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">is_not_static</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<span class=\"punctuation\">}</span>\n+\n+<span class=\"keyword\">trait</span> <span class=\"trait declaration\">t</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration static\">t_is_static</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">t_is_not_static</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<span class=\"punctuation\">}</span>\n+\n+<span class=\"keyword\">impl</span> <span class=\"trait\">t</span> <span class=\"keyword\">for</span> <span class=\"struct\">foo</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static\">is_static</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">is_not_static</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<span class=\"punctuation\">}</span>\n+        </code></pre>\n\\ No newline at end of file"}, {"sha": "65fba8b02e0608249ed06237ad79289bc108ac57", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=3baa526fb07184ce9804a06c8e0251971eea3b49", "patch": "@@ -53,7 +53,7 @@\n     <span class=\"comment documentation\">/// #</span><span class=\"generic injected\"> </span><span class=\"attribute injected\">#</span><span class=\"attribute injected\">!</span><span class=\"attribute injected\">[</span><span class=\"function attribute injected\">allow</span><span class=\"punctuation injected\">(</span><span class=\"attribute injected\">unused_mut</span><span class=\"punctuation injected\">)</span><span class=\"attribute injected\">]</span>\n     <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"generic injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"generic injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"punctuation injected\">:</span><span class=\"generic injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"generic injected\"> </span><span class=\"operator injected\">=</span><span class=\"generic injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span><span class=\"punctuation injected\">\n </span>    <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">new</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static\">new</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n         <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">bar</span><span class=\"punctuation\">:</span> <span class=\"bool_literal\">true</span> <span class=\"punctuation\">}</span>\n     <span class=\"punctuation\">}</span>\n "}, {"sha": "57c178916f6afa7d7fc1de5f0e816dd8ae2c412e", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_injection.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html?ref=3baa526fb07184ce9804a06c8e0251971eea3b49", "patch": "@@ -40,7 +40,7 @@\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n     <span class=\"function\">fixture</span><span class=\"punctuation\">(</span><span class=\"string_literal\">r#\"</span>\n         <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Foo</span> <span class=\"punctuation\">{</span>\n-            <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n+            <span class=\"keyword\">fn</span> <span class=\"function declaration static\">foo</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n                 <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"2 + 2 = {}\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">4</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n             <span class=\"punctuation\">}</span>\n         <span class=\"punctuation\">}</span><span class=\"string_literal\">\"#</span>"}, {"sha": "5c22e2fce36071372e00ba8737fd8a25acf6657d", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=3baa526fb07184ce9804a06c8e0251971eea3b49", "patch": "@@ -513,6 +513,34 @@ fn test_extern_crate() {\n     );\n }\n \n+#[test]\n+fn test_associated_function() {\n+    check_highlighting(\n+        r#\"\n+fn not_static() {}\n+\n+struct foo {}\n+\n+impl foo {\n+    pub fn is_static() {}\n+    pub fn is_not_static(&self) {}\n+}\n+\n+trait t {\n+    fn t_is_static() {}\n+    fn t_is_not_static(&self) {}\n+}\n+\n+impl t for foo {\n+    pub fn is_static() {}\n+    pub fn is_not_static(&self) {}\n+}\n+        \"#,\n+        expect_file![\"./test_data/highlight_assoc_functions.html\"],\n+        false,\n+    )\n+}\n+\n /// Highlights the code given by the `ra_fixture` argument, renders the\n /// result as HTML, and compares it with the HTML file given as `snapshot`.\n /// Note that the `snapshot` file is overwritten by the rendered HTML."}, {"sha": "f8ecd8e8392043a28e018cf858989620942b907e", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baa526fb07184ce9804a06c8e0251971eea3b49/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=3baa526fb07184ce9804a06c8e0251971eea3b49", "patch": "@@ -426,6 +426,7 @@ fn semantic_token_type_and_modifiers(\n             HighlightModifier::Consuming => semantic_tokens::CONSUMING,\n             HighlightModifier::Unsafe => semantic_tokens::UNSAFE,\n             HighlightModifier::Callable => semantic_tokens::CALLABLE,\n+            HighlightModifier::Static => lsp_types::SemanticTokenModifier::STATIC,\n         };\n         mods |= modifier;\n     }"}]}