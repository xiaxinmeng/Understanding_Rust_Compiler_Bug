{"sha": "bb09c39f4454577c9346fcce24db0f53ca49dce7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMDljMzlmNDQ1NDU3N2M5MzQ2ZmNjZTI0ZGIwZjUzY2E0OWRjZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-15T06:31:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-15T06:31:24Z"}, "message": "Auto merge of #52360 - Mark-Simulacrum:fix-keep-stage-for-cg-backends, r=alexcrichton\n\nDo not attempt to recompile codegen backend(s) with --keep-stage\n\nPreviously we'd attempt to recompile them and that would fail since\nwe've essentially not built the entire compiler yet, or we're faking\nthat fact. This commit should make us ignore the codegen backend build\nas well.\n\nUnlike the other compile steps, there is no CodegenBackendLink step that\nwe run here, because that is done later as a part of assembling the\nfinal compiler and as an explicit function call.\n\nr? @alexcrichton\n\nI think this may fix or at least assist with #52174.\n\ncc @RalfJung @tinco -- if you can test this patch locally that'd be\namazing; I don't want to recompile for the next couple hours to test it\nlocally. I don't think it can make the situation worse, and in fact, if\nI've interpreted the cause of the failure correctly then this will fix\nyour problem.", "tree": {"sha": "bf7d7c3b7cfb8eb66b8884f118fbf0fa6351fb9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf7d7c3b7cfb8eb66b8884f118fbf0fa6351fb9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb09c39f4454577c9346fcce24db0f53ca49dce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb09c39f4454577c9346fcce24db0f53ca49dce7", "html_url": "https://github.com/rust-lang/rust/commit/bb09c39f4454577c9346fcce24db0f53ca49dce7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb09c39f4454577c9346fcce24db0f53ca49dce7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc903c64eb52a3904a4f269ff58363528c4e96cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc903c64eb52a3904a4f269ff58363528c4e96cd", "html_url": "https://github.com/rust-lang/rust/commit/cc903c64eb52a3904a4f269ff58363528c4e96cd"}, {"sha": "8eddabaafd91e476956a1c52a1f966f11b4edb85", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eddabaafd91e476956a1c52a1f966f11b4edb85", "html_url": "https://github.com/rust-lang/rust/commit/8eddabaafd91e476956a1c52a1f966f11b4edb85"}], "stats": {"total": 80, "additions": 42, "deletions": 38}, "files": [{"sha": "04e8e133b03a11ffca2991a1eb639524b413cc41", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/bb09c39f4454577c9346fcce24db0f53ca49dce7/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb09c39f4454577c9346fcce24db0f53ca49dce7/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=bb09c39f4454577c9346fcce24db0f53ca49dce7", "patch": "@@ -67,16 +67,14 @@ impl Step for Std {\n         let target = self.target;\n         let compiler = self.compiler;\n \n-        if let Some(keep_stage) = builder.config.keep_stage {\n-            if keep_stage <= compiler.stage {\n-                println!(\"Warning: Using a potentially old libstd. This may not behave well.\");\n-                builder.ensure(StdLink {\n-                    compiler: compiler,\n-                    target_compiler: compiler,\n-                    target,\n-                });\n-                return;\n-            }\n+        if builder.config.keep_stage.contains(&compiler.stage) {\n+            builder.info(\"Warning: Using a potentially old libstd. This may not behave well.\");\n+            builder.ensure(StdLink {\n+                compiler: compiler,\n+                target_compiler: compiler,\n+                target,\n+            });\n+            return;\n         }\n \n         builder.ensure(StartupObjects { compiler, target });\n@@ -362,20 +360,18 @@ impl Step for Test {\n         let target = self.target;\n         let compiler = self.compiler;\n \n-        if let Some(keep_stage) = builder.config.keep_stage {\n-            if keep_stage <= compiler.stage {\n-                println!(\"Warning: Using a potentially old libtest. This may not behave well.\");\n-                builder.ensure(TestLink {\n-                    compiler: compiler,\n-                    target_compiler: compiler,\n-                    target,\n-                });\n-                return;\n-            }\n-        }\n-\n         builder.ensure(Std { compiler, target });\n \n+        if builder.config.keep_stage.contains(&compiler.stage) {\n+            builder.info(\"Warning: Using a potentially old libtest. This may not behave well.\");\n+            builder.ensure(TestLink {\n+                compiler: compiler,\n+                target_compiler: compiler,\n+                target,\n+            });\n+            return;\n+        }\n+\n         if builder.force_use_stage1(compiler, target) {\n             builder.ensure(Test {\n                 compiler: builder.compiler(1, builder.config.build),\n@@ -490,20 +486,18 @@ impl Step for Rustc {\n         let compiler = self.compiler;\n         let target = self.target;\n \n-        if let Some(keep_stage) = builder.config.keep_stage {\n-            if keep_stage <= compiler.stage {\n-                println!(\"Warning: Using a potentially old librustc. This may not behave well.\");\n-                builder.ensure(RustcLink {\n-                    compiler: compiler,\n-                    target_compiler: compiler,\n-                    target,\n-                });\n-                return;\n-            }\n-        }\n-\n         builder.ensure(Test { compiler, target });\n \n+        if builder.config.keep_stage.contains(&compiler.stage) {\n+            builder.info(\"Warning: Using a potentially old librustc. This may not behave well.\");\n+            builder.ensure(RustcLink {\n+                compiler: compiler,\n+                target_compiler: compiler,\n+                target,\n+            });\n+            return;\n+        }\n+\n         if builder.force_use_stage1(compiler, target) {\n             builder.ensure(Rustc {\n                 compiler: builder.compiler(1, builder.config.build),\n@@ -660,6 +654,14 @@ impl Step for CodegenBackend {\n \n         builder.ensure(Rustc { compiler, target });\n \n+        if builder.config.keep_stage.contains(&compiler.stage) {\n+            builder.info(\"Warning: Using a potentially old codegen backend. \\\n+                This may not behave well.\");\n+            // Codegen backends are linked separately from this step today, so we don't do\n+            // anything here.\n+            return;\n+        }\n+\n         if builder.force_use_stage1(compiler, target) {\n             builder.ensure(CodegenBackend {\n                 compiler: builder.compiler(1, builder.config.build),"}, {"sha": "0a8a5c87d0da1a4b1a90cbd5aad26b634f02ae34", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb09c39f4454577c9346fcce24db0f53ca49dce7/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb09c39f4454577c9346fcce24db0f53ca49dce7/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=bb09c39f4454577c9346fcce24db0f53ca49dce7", "patch": "@@ -63,7 +63,7 @@ pub struct Config {\n \n     pub on_fail: Option<String>,\n     pub stage: Option<u32>,\n-    pub keep_stage: Option<u32>,\n+    pub keep_stage: Vec<u32>,\n     pub src: PathBuf,\n     pub jobs: Option<u32>,\n     pub cmd: Subcommand,"}, {"sha": "6a013053e580c78f8a26f1b6e105c7960073b65f", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb09c39f4454577c9346fcce24db0f53ca49dce7/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb09c39f4454577c9346fcce24db0f53ca49dce7/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=bb09c39f4454577c9346fcce24db0f53ca49dce7", "patch": "@@ -31,7 +31,7 @@ pub struct Flags {\n     pub verbose: usize, // number of -v args; each extra -v after the first is passed to Cargo\n     pub on_fail: Option<String>,\n     pub stage: Option<u32>,\n-    pub keep_stage: Option<u32>,\n+    pub keep_stage: Vec<u32>,\n \n     pub host: Vec<Interned<String>>,\n     pub target: Vec<Interned<String>>,\n@@ -122,7 +122,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\"\n         opts.optopt(\"\", \"on-fail\", \"command to run on failure\", \"CMD\");\n         opts.optflag(\"\", \"dry-run\", \"dry run; don't build anything\");\n         opts.optopt(\"\", \"stage\", \"stage to build\", \"N\");\n-        opts.optopt(\"\", \"keep-stage\", \"stage to keep without recompiling\", \"N\");\n+        opts.optmulti(\"\", \"keep-stage\", \"stage(s) to keep without recompiling\", \"N\");\n         opts.optopt(\"\", \"src\", \"path to the root of the rust checkout\", \"DIR\");\n         opts.optopt(\"j\", \"jobs\", \"number of jobs to run in parallel\", \"JOBS\");\n         opts.optflag(\"h\", \"help\", \"print this help message\");\n@@ -402,7 +402,9 @@ Arguments:\n             dry_run: matches.opt_present(\"dry-run\"),\n             on_fail: matches.opt_str(\"on-fail\"),\n             rustc_error_format: matches.opt_str(\"error-format\"),\n-            keep_stage: matches.opt_str(\"keep-stage\").map(|j| j.parse().unwrap()),\n+            keep_stage: matches.opt_strs(\"keep-stage\")\n+                .into_iter().map(|j| j.parse().unwrap())\n+                .collect(),\n             host: split(matches.opt_strs(\"host\"))\n                 .into_iter()\n                 .map(|x| INTERNER.intern_string(x))"}]}