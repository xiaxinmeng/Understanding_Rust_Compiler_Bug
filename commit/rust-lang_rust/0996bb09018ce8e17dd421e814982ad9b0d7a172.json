{"sha": "0996bb09018ce8e17dd421e814982ad9b0d7a172", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5OTZiYjA5MDE4Y2U4ZTE3ZGQ0MjFlODE0OTgyYWQ5YjBkN2ExNzI=", "commit": {"author": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2017-11-19T12:26:23Z"}, "committer": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2017-11-24T20:00:59Z"}, "message": "Kill the storage for all locals on returning terminators", "tree": {"sha": "fba6e8ea86d55cd557e51d4c50e8a88a52ddc85f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fba6e8ea86d55cd557e51d4c50e8a88a52ddc85f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0996bb09018ce8e17dd421e814982ad9b0d7a172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0996bb09018ce8e17dd421e814982ad9b0d7a172", "html_url": "https://github.com/rust-lang/rust/commit/0996bb09018ce8e17dd421e814982ad9b0d7a172", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0996bb09018ce8e17dd421e814982ad9b0d7a172/comments", "author": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f44c653cff61d0f55f53e07a188f755c7acddd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f44c653cff61d0f55f53e07a188f755c7acddd1", "html_url": "https://github.com/rust-lang/rust/commit/5f44c653cff61d0f55f53e07a188f755c7acddd1"}], "stats": {"total": 127, "additions": 125, "deletions": 2}, "files": [{"sha": "4d54c6f473cde692dc2552b4605fe8014cdf2923", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0996bb09018ce8e17dd421e814982ad9b0d7a172/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0996bb09018ce8e17dd421e814982ad9b0d7a172/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=0996bb09018ce8e17dd421e814982ad9b0d7a172", "patch": "@@ -373,10 +373,41 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                                      Consume, (value, span), flow_state);\n             }\n \n-            TerminatorKind::Goto { target: _ } |\n             TerminatorKind::Resume |\n             TerminatorKind::Return |\n-            TerminatorKind::GeneratorDrop |\n+            TerminatorKind::GeneratorDrop => {\n+                // Returning from the function implicitly kills storage for all locals and statics.\n+                // Often, the storage will already have been killed by an explicit\n+                // StorageDead, but we don't always emit those (notably on unwind paths),\n+                // so this \"extra check\" serves as a kind of backup.\n+                let domain = flow_state.borrows.base_results.operator();\n+                for borrow in domain.borrows() {\n+                    let root_lvalue = self.prefixes(\n+                        &borrow.lvalue,\n+                        PrefixSet::All\n+                    ).last().unwrap();\n+                    match root_lvalue {\n+                        Lvalue::Static(_) => {\n+                            self.access_lvalue(\n+                                ContextKind::StorageDead.new(loc),\n+                                (&root_lvalue, self.mir.source_info(borrow.location).span),\n+                                (Deep, Write(WriteKind::StorageDeadOrDrop)),\n+                                flow_state\n+                            );\n+                        }\n+                        Lvalue::Local(_) => {\n+                            self.access_lvalue(\n+                                ContextKind::StorageDead.new(loc),\n+                                (&root_lvalue, self.mir.source_info(borrow.location).span),\n+                                (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),\n+                                flow_state\n+                            );\n+                        }\n+                        Lvalue::Projection(_) => ()\n+                    }\n+                }\n+            }\n+            TerminatorKind::Goto { target: _ } |\n             TerminatorKind::Unreachable |\n             TerminatorKind::FalseEdges { .. } => {\n                 // no data used, thus irrelevant to borrowck"}, {"sha": "7e2d86003b051bb131987dd5506b2e39fc81e0dd", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0996bb09018ce8e17dd421e814982ad9b0d7a172/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0996bb09018ce8e17dd421e814982ad9b0d7a172/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=0996bb09018ce8e17dd421e814982ad9b0d7a172", "patch": "@@ -233,6 +233,35 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n     fn terminator_effect(&self,\n                          sets: &mut BlockSets<BorrowIndex>,\n                          location: Location) {\n+        let block = &self.mir.basic_blocks().get(location.block).unwrap_or_else(|| {\n+            panic!(\"could not find block at location {:?}\", location);\n+        });\n+        match block.terminator().kind {\n+            mir::TerminatorKind::Resume |\n+            mir::TerminatorKind::Return |\n+            mir::TerminatorKind::GeneratorDrop => {\n+                // When we return from the function, then all `ReScope`-style regions\n+                // are guaranteed to have ended.\n+                // Normally, there would be `EndRegion` statements that come before,\n+                // and hence most of these loans will already be dead -- but, in some cases\n+                // like unwind paths, we do not always emit `EndRegion` statements, so we\n+                // add some kills here as a \"backup\" and to avoid spurious error messages.\n+                for (borrow_index, borrow_data) in self.borrows.iter_enumerated() {\n+                    if let ReScope(..) = borrow_data.region {\n+                        sets.kill(&borrow_index);\n+                    }\n+                }\n+            }\n+            mir::TerminatorKind::SwitchInt {..} |\n+            mir::TerminatorKind::Drop {..} |\n+            mir::TerminatorKind::DropAndReplace {..} |\n+            mir::TerminatorKind::Call {..} |\n+            mir::TerminatorKind::Assert {..} |\n+            mir::TerminatorKind::Yield {..} |\n+            mir::TerminatorKind::Goto {..} |\n+            mir::TerminatorKind::FalseEdges {..} |\n+            mir::TerminatorKind::Unreachable => {}\n+        }\n         self.kill_loans_out_of_scope_at_location(sets, location);\n     }\n "}, {"sha": "7ff3aa3feb33fa8d76dc58458c9777366ac35dc3", "filename": "src/test/compile-fail/borrowck/borrowck-local-borrow-outlives-fn.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0996bb09018ce8e17dd421e814982ad9b0d7a172/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0996bb09018ce8e17dd421e814982ad9b0d7a172/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs?ref=0996bb09018ce8e17dd421e814982ad9b0d7a172", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n+fn cplusplus_mode(x: isize) -> &'static isize {\n+    &x //[ast]~ ERROR `x` does not live long enough\n+       //[mir]~^ ERROR `x` does not live long enough (Ast)\n+       //[mir]~| ERROR borrowed value does not live long enough (Mir)\n+}\n+\n+fn main() {}"}, {"sha": "5a6c86fd82b60cf554c0b82363e87848cb8a7060", "filename": "src/test/compile-fail/borrowck/borrowck-thread-local-static-borrow-outlives-fn.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0996bb09018ce8e17dd421e814982ad9b0d7a172/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0996bb09018ce8e17dd421e814982ad9b0d7a172/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.rs?ref=0996bb09018ce8e17dd421e814982ad9b0d7a172", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n+#![feature(thread_local)]\n+\n+#[thread_local]\n+static FOO: u8 = 3;\n+\n+fn assert_static(_t: &'static u8) {}\n+fn main() {\n+     assert_static(&FOO); //[ast]~ ERROR [E0597]\n+                          //[mir]~^ ERROR (Ast) [E0597]\n+                          //[mir]~| ERROR (Mir) [E0597]\n+}"}, {"sha": "7f11f45cbd818d969722886dc885aabf17d97b68", "filename": "src/test/run-fail/borrowck-local-borrow.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0996bb09018ce8e17dd421e814982ad9b0d7a172/src%2Ftest%2Frun-fail%2Fborrowck-local-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0996bb09018ce8e17dd421e814982ad9b0d7a172/src%2Ftest%2Frun-fail%2Fborrowck-local-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-local-borrow.rs?ref=0996bb09018ce8e17dd421e814982ad9b0d7a172", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+// error-pattern:panic 1\n+\n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n+fn main() {\n+    let x = 2;\n+    let y = &x;\n+    panic!(\"panic 1\");\n+}"}]}