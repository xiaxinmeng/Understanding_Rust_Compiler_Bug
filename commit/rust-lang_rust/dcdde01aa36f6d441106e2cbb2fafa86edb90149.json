{"sha": "dcdde01aa36f6d441106e2cbb2fafa86edb90149", "node_id": "C_kwDOAAsO6NoAKGRjZGRlMDFhYTM2ZjZkNDQxMTA2ZTJjYmIyZmFmYTg2ZWRiOTAxNDk", "commit": {"author": {"name": "Jendrik", "email": "buhtig@jendrik.eu", "date": "2022-01-13T13:57:57Z"}, "committer": {"name": "Jendrik", "email": "buhtig@jendrik.eu", "date": "2022-03-24T14:21:03Z"}, "message": "add #[must_use] to functions of slice and its iterators.", "tree": {"sha": "5b3aa308c0d63cf19080dbe90b33afdfcb8bf26f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b3aa308c0d63cf19080dbe90b33afdfcb8bf26f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcdde01aa36f6d441106e2cbb2fafa86edb90149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdde01aa36f6d441106e2cbb2fafa86edb90149", "html_url": "https://github.com/rust-lang/rust/commit/dcdde01aa36f6d441106e2cbb2fafa86edb90149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcdde01aa36f6d441106e2cbb2fafa86edb90149/comments", "author": {"login": "jendrikw", "id": 12938023, "node_id": "MDQ6VXNlcjEyOTM4MDIz", "avatar_url": "https://avatars.githubusercontent.com/u/12938023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jendrikw", "html_url": "https://github.com/jendrikw", "followers_url": "https://api.github.com/users/jendrikw/followers", "following_url": "https://api.github.com/users/jendrikw/following{/other_user}", "gists_url": "https://api.github.com/users/jendrikw/gists{/gist_id}", "starred_url": "https://api.github.com/users/jendrikw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jendrikw/subscriptions", "organizations_url": "https://api.github.com/users/jendrikw/orgs", "repos_url": "https://api.github.com/users/jendrikw/repos", "events_url": "https://api.github.com/users/jendrikw/events{/privacy}", "received_events_url": "https://api.github.com/users/jendrikw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jendrikw", "id": 12938023, "node_id": "MDQ6VXNlcjEyOTM4MDIz", "avatar_url": "https://avatars.githubusercontent.com/u/12938023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jendrikw", "html_url": "https://github.com/jendrikw", "followers_url": "https://api.github.com/users/jendrikw/followers", "following_url": "https://api.github.com/users/jendrikw/following{/other_user}", "gists_url": "https://api.github.com/users/jendrikw/gists{/gist_id}", "starred_url": "https://api.github.com/users/jendrikw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jendrikw/subscriptions", "organizations_url": "https://api.github.com/users/jendrikw/orgs", "repos_url": "https://api.github.com/users/jendrikw/repos", "events_url": "https://api.github.com/users/jendrikw/events{/privacy}", "received_events_url": "https://api.github.com/users/jendrikw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0bf9efc939341b48c6e9a335dee8a280085100", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0bf9efc939341b48c6e9a335dee8a280085100", "html_url": "https://github.com/rust-lang/rust/commit/7b0bf9efc939341b48c6e9a335dee8a280085100"}], "stats": {"total": 107, "additions": 92, "deletions": 15}, "files": [{"sha": "c02a6f2d78c64974497db9dabd71cb5cfa7232af", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcdde01aa36f6d441106e2cbb2fafa86edb90149/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdde01aa36f6d441106e2cbb2fafa86edb90149/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=dcdde01aa36f6d441106e2cbb2fafa86edb90149", "patch": "@@ -172,6 +172,7 @@ impl_fn_for_zst! {\n /// documentation for more information.\n #[stable(feature = \"inherent_ascii_escape\", since = \"1.60.0\")]\n #[derive(Clone)]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct EscapeAscii<'a> {\n     inner: iter::FlatMap<super::Iter<'a, u8>, ascii::EscapeDefault, EscapeByte>,\n }"}, {"sha": "a23de54ef20e9c8cdbea18b9ed9fb68c67412c21", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dcdde01aa36f6d441106e2cbb2fafa86edb90149/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdde01aa36f6d441106e2cbb2fafa86edb90149/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=dcdde01aa36f6d441106e2cbb2fafa86edb90149", "patch": "@@ -549,28 +549,29 @@ unsafe impl<T> const SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n ///\n /// use std::slice;\n ///\n-/// slice::range(2..1, ..3);\n+/// let _ = slice::range(2..1, ..3);\n /// ```\n ///\n /// ```should_panic\n /// #![feature(slice_range)]\n ///\n /// use std::slice;\n ///\n-/// slice::range(1..4, ..3);\n+/// let _ = slice::range(1..4, ..3);\n /// ```\n ///\n /// ```should_panic\n /// #![feature(slice_range)]\n ///\n /// use std::slice;\n ///\n-/// slice::range(1..=usize::MAX, ..3);\n+/// let _ = slice::range(1..=usize::MAX, ..3);\n /// ```\n ///\n /// [`Index::index`]: ops::Index::index\n #[track_caller]\n #[unstable(feature = \"slice_range\", issue = \"76393\")]\n+#[must_use]\n pub fn range<R>(range: R, bounds: ops::RangeTo<usize>) -> ops::Range<usize>\n where\n     R: ops::RangeBounds<usize>,"}, {"sha": "22662f7d18d07da1bb1d533a1e0d73711fa43c1b", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dcdde01aa36f6d441106e2cbb2fafa86edb90149/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdde01aa36f6d441106e2cbb2fafa86edb90149/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=dcdde01aa36f6d441106e2cbb2fafa86edb90149", "patch": "@@ -62,6 +62,7 @@ fn size_from_ptr<T>(_: *const T) -> usize {\n /// [`iter`]: slice::iter\n /// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct Iter<'a, T: 'a> {\n     ptr: NonNull<T>,\n     end: *const T, // If T is a ZST, this is actually ptr+len.  This encoding is picked so that\n@@ -182,6 +183,7 @@ impl<T> AsRef<[T]> for Iter<'_, T> {\n /// [`iter_mut`]: slice::iter_mut\n /// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct IterMut<'a, T: 'a> {\n     ptr: NonNull<T>,\n     end: *mut T, // If T is a ZST, this is actually ptr+len.  This encoding is picked so that\n@@ -339,6 +341,7 @@ pub(super) trait SplitIter: DoubleEndedIterator {\n /// [`split`]: slice::split\n /// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct Split<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -469,6 +472,7 @@ impl<T, P> FusedIterator for Split<'_, T, P> where P: FnMut(&T) -> bool {}\n /// [`split_inclusive`]: slice::split_inclusive\n /// [slices]: slice\n #[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct SplitInclusive<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -589,6 +593,7 @@ impl<T, P> FusedIterator for SplitInclusive<'_, T, P> where P: FnMut(&T) -> bool\n /// [`split_mut`]: slice::split_mut\n /// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct SplitMut<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -718,6 +723,7 @@ impl<T, P> FusedIterator for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {}\n /// [`split_inclusive_mut`]: slice::split_inclusive_mut\n /// [slices]: slice\n #[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct SplitInclusiveMut<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -841,6 +847,7 @@ impl<T, P> FusedIterator for SplitInclusiveMut<'_, T, P> where P: FnMut(&T) -> b\n /// [`rsplit`]: slice::rsplit\n /// [slices]: slice\n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct RSplit<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -937,6 +944,7 @@ impl<T, P> FusedIterator for RSplit<'_, T, P> where P: FnMut(&T) -> bool {}\n /// [`rsplit_mut`]: slice::rsplit_mut\n /// [slices]: slice\n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct RSplitMut<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -1059,6 +1067,7 @@ impl<T, I: SplitIter<Item = T>> Iterator for GenericSplitN<I> {\n /// [`splitn`]: slice::splitn\n /// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct SplitN<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -1099,6 +1108,7 @@ where\n /// [`rsplitn`]: slice::rsplitn\n /// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct RSplitN<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -1138,6 +1148,7 @@ where\n /// [`splitn_mut`]: slice::splitn_mut\n /// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct SplitNMut<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -1178,6 +1189,7 @@ where\n /// [`rsplitn_mut`]: slice::rsplitn_mut\n /// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct RSplitNMut<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n@@ -1222,6 +1234,7 @@ forward_iterator! { RSplitNMut: T, &'a mut [T] }\n /// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct Windows<'a, T: 'a> {\n     v: &'a [T],\n     size: NonZeroUsize,\n@@ -1370,6 +1383,7 @@ unsafe impl<'a, T> TrustedRandomAccessNoCoerce for Windows<'a, T> {\n /// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct Chunks<'a, T: 'a> {\n     v: &'a [T],\n     chunk_size: usize,\n@@ -1553,6 +1567,7 @@ unsafe impl<'a, T> TrustedRandomAccessNoCoerce for Chunks<'a, T> {\n /// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct ChunksMut<'a, T: 'a> {\n     v: &'a mut [T],\n     chunk_size: usize,\n@@ -1722,6 +1737,7 @@ unsafe impl<'a, T> TrustedRandomAccessNoCoerce for ChunksMut<'a, T> {\n /// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct ChunksExact<'a, T: 'a> {\n     v: &'a [T],\n     rem: &'a [T],\n@@ -1881,6 +1897,7 @@ unsafe impl<'a, T> TrustedRandomAccessNoCoerce for ChunksExact<'a, T> {\n /// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct ChunksExactMut<'a, T: 'a> {\n     v: &'a mut [T],\n     rem: &'a mut [T],\n@@ -2034,6 +2051,7 @@ unsafe impl<'a, T> TrustedRandomAccessNoCoerce for ChunksExactMut<'a, T> {\n /// [slices]: slice\n #[derive(Debug, Clone, Copy)]\n #[unstable(feature = \"array_windows\", issue = \"75027\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct ArrayWindows<'a, T: 'a, const N: usize> {\n     slice_head: *const T,\n     num: usize,\n@@ -2156,6 +2174,7 @@ impl<T, const N: usize> ExactSizeIterator for ArrayWindows<'_, T, N> {\n /// [slices]: slice\n #[derive(Debug)]\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct ArrayChunks<'a, T: 'a, const N: usize> {\n     iter: Iter<'a, [T; N]>,\n     rem: &'a [T],\n@@ -2282,6 +2301,7 @@ unsafe impl<'a, T, const N: usize> TrustedRandomAccessNoCoerce for ArrayChunks<'\n /// [slices]: slice\n #[derive(Debug)]\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct ArrayChunksMut<'a, T: 'a, const N: usize> {\n     iter: IterMut<'a, [T; N]>,\n     rem: &'a mut [T],\n@@ -2396,6 +2416,7 @@ unsafe impl<'a, T, const N: usize> TrustedRandomAccessNoCoerce for ArrayChunksMu\n /// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct RChunks<'a, T: 'a> {\n     v: &'a [T],\n     chunk_size: usize,\n@@ -2569,6 +2590,7 @@ unsafe impl<'a, T> TrustedRandomAccessNoCoerce for RChunks<'a, T> {\n /// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct RChunksMut<'a, T: 'a> {\n     v: &'a mut [T],\n     chunk_size: usize,\n@@ -2742,6 +2764,7 @@ unsafe impl<'a, T> TrustedRandomAccessNoCoerce for RChunksMut<'a, T> {\n /// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct RChunksExact<'a, T: 'a> {\n     v: &'a [T],\n     rem: &'a [T],\n@@ -2905,6 +2928,7 @@ unsafe impl<'a, T> TrustedRandomAccessNoCoerce for RChunksExact<'a, T> {\n /// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct RChunksExactMut<'a, T: 'a> {\n     v: &'a mut [T],\n     rem: &'a mut [T],\n@@ -3071,6 +3095,7 @@ unsafe impl<'a, T> TrustedRandomAccessNoCoerce for IterMut<'a, T> {\n /// [`group_by`]: slice::group_by\n /// [slices]: slice\n #[unstable(feature = \"slice_group_by\", issue = \"80552\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct GroupBy<'a, T: 'a, P> {\n     slice: &'a [T],\n     predicate: P,\n@@ -3157,6 +3182,7 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for GroupBy<'a, T, P> {\n /// [`group_by_mut`]: slice::group_by_mut\n /// [slices]: slice\n #[unstable(feature = \"slice_group_by\", issue = \"80552\")]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct GroupByMut<'a, T: 'a, P> {\n     slice: &'a mut [T],\n     predicate: P,"}, {"sha": "c661f47387fba8ac7994758fbf0d57a291d53571", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/dcdde01aa36f6d441106e2cbb2fafa86edb90149/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdde01aa36f6d441106e2cbb2fafa86edb90149/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=dcdde01aa36f6d441106e2cbb2fafa86edb90149", "patch": "@@ -124,6 +124,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_slice_len\", since = \"1.39.0\")]\n     #[inline]\n+    #[must_use]\n     // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n     pub const fn len(&self) -> usize {\n         // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.\n@@ -147,6 +148,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_slice_is_empty\", since = \"1.39.0\")]\n     #[inline]\n+    #[must_use]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n@@ -165,6 +167,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_slice_first_last_not_mut\", since = \"1.56.0\")]\n     #[inline]\n+    #[must_use]\n     pub const fn first(&self) -> Option<&T> {\n         if let [first, ..] = self { Some(first) } else { None }\n     }\n@@ -184,6 +187,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_slice_first_last\", issue = \"83570\")]\n     #[inline]\n+    #[must_use]\n     pub const fn first_mut(&mut self) -> Option<&mut T> {\n         if let [first, ..] = self { Some(first) } else { None }\n     }\n@@ -203,6 +207,7 @@ impl<T> [T] {\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[rustc_const_stable(feature = \"const_slice_first_last_not_mut\", since = \"1.56.0\")]\n     #[inline]\n+    #[must_use]\n     pub const fn split_first(&self) -> Option<(&T, &[T])> {\n         if let [first, tail @ ..] = self { Some((first, tail)) } else { None }\n     }\n@@ -224,6 +229,7 @@ impl<T> [T] {\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[rustc_const_unstable(feature = \"const_slice_first_last\", issue = \"83570\")]\n     #[inline]\n+    #[must_use]\n     pub const fn split_first_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n         if let [first, tail @ ..] = self { Some((first, tail)) } else { None }\n     }\n@@ -243,6 +249,7 @@ impl<T> [T] {\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[rustc_const_stable(feature = \"const_slice_first_last_not_mut\", since = \"1.56.0\")]\n     #[inline]\n+    #[must_use]\n     pub const fn split_last(&self) -> Option<(&T, &[T])> {\n         if let [init @ .., last] = self { Some((last, init)) } else { None }\n     }\n@@ -264,6 +271,7 @@ impl<T> [T] {\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[rustc_const_unstable(feature = \"const_slice_first_last\", issue = \"83570\")]\n     #[inline]\n+    #[must_use]\n     pub const fn split_last_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n         if let [init @ .., last] = self { Some((last, init)) } else { None }\n     }\n@@ -282,6 +290,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_slice_first_last_not_mut\", since = \"1.56.0\")]\n     #[inline]\n+    #[must_use]\n     pub const fn last(&self) -> Option<&T> {\n         if let [.., last] = self { Some(last) } else { None }\n     }\n@@ -301,6 +310,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_slice_first_last\", issue = \"83570\")]\n     #[inline]\n+    #[must_use]\n     pub const fn last_mut(&mut self) -> Option<&mut T> {\n         if let [.., last] = self { Some(last) } else { None }\n     }\n@@ -325,6 +335,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n+    #[must_use]\n     pub const fn get<I>(&self, index: I) -> Option<&I::Output>\n     where\n         I: ~const SliceIndex<Self>,\n@@ -350,6 +361,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n+    #[must_use]\n     pub const fn get_mut<I>(&mut self, index: I) -> Option<&mut I::Output>\n     where\n         I: ~const SliceIndex<Self>,\n@@ -382,6 +394,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n+    #[must_use]\n     pub const unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output\n     where\n         I: ~const SliceIndex<Self>,\n@@ -419,6 +432,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]\n     #[inline]\n+    #[must_use]\n     pub const unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output\n     where\n         I: ~const SliceIndex<Self>,\n@@ -458,6 +472,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_slice_as_ptr\", since = \"1.32.0\")]\n     #[inline]\n+    #[must_use]\n     pub const fn as_ptr(&self) -> *const T {\n         self as *const [T] as *const T\n     }\n@@ -486,6 +501,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n+    #[must_use]\n     pub const fn as_mut_ptr(&mut self) -> *mut T {\n         self as *mut [T] as *mut T\n     }\n@@ -521,6 +537,7 @@ impl<T> [T] {\n     #[stable(feature = \"slice_ptr_range\", since = \"1.48.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n+    #[must_use]\n     pub const fn as_ptr_range(&self) -> Range<*const T> {\n         let start = self.as_ptr();\n         // SAFETY: The `add` here is safe, because:\n@@ -563,6 +580,7 @@ impl<T> [T] {\n     #[stable(feature = \"slice_ptr_range\", since = \"1.48.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n+    #[must_use]\n     pub const fn as_mut_ptr_range(&mut self) -> Range<*mut T> {\n         let start = self.as_mut_ptr();\n         // SAFETY: See as_ptr_range() above for why `add` here is safe.\n@@ -948,6 +966,7 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[must_use]\n     pub unsafe fn as_chunks_unchecked<const N: usize>(&self) -> &[[T; N]] {\n         debug_assert_ne!(N, 0);\n         debug_assert_eq!(self.len() % N, 0);\n@@ -979,6 +998,7 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[must_use]\n     pub fn as_chunks<const N: usize>(&self) -> (&[[T; N]], &[T]) {\n         assert_ne!(N, 0);\n         let len = self.len() / N;\n@@ -1009,6 +1029,7 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[must_use]\n     pub fn as_rchunks<const N: usize>(&self) -> (&[T], &[[T; N]]) {\n         assert_ne!(N, 0);\n         let len = self.len() / N;\n@@ -1084,6 +1105,7 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[must_use]\n     pub unsafe fn as_chunks_unchecked_mut<const N: usize>(&mut self) -> &mut [[T; N]] {\n         debug_assert_ne!(N, 0);\n         debug_assert_eq!(self.len() % N, 0);\n@@ -1121,6 +1143,7 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[must_use]\n     pub fn as_chunks_mut<const N: usize>(&mut self) -> (&mut [[T; N]], &mut [T]) {\n         assert_ne!(N, 0);\n         let len = self.len() / N;\n@@ -1157,6 +1180,7 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[must_use]\n     pub fn as_rchunks_mut<const N: usize>(&mut self) -> (&mut [T], &mut [[T; N]]) {\n         assert_ne!(N, 0);\n         let len = self.len() / N;\n@@ -1515,6 +1539,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     #[track_caller]\n+    #[must_use]\n     pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {\n         assert!(mid <= self.len());\n         // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which\n@@ -1546,6 +1571,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     #[track_caller]\n+    #[must_use]\n     pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {\n         assert!(mid <= self.len());\n         // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which\n@@ -1597,6 +1623,7 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_split_at_unchecked\", reason = \"new API\", issue = \"76014\")]\n     #[inline]\n+    #[must_use]\n     pub unsafe fn split_at_unchecked(&self, mid: usize) -> (&[T], &[T]) {\n         // SAFETY: Caller has to check that `0 <= mid <= self.len()`\n         unsafe { (self.get_unchecked(..mid), self.get_unchecked(mid..)) }\n@@ -1637,6 +1664,7 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_split_at_unchecked\", reason = \"new API\", issue = \"76014\")]\n     #[inline]\n+    #[must_use]\n     pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {\n         let len = self.len();\n         let ptr = self.as_mut_ptr();\n@@ -1686,6 +1714,7 @@ impl<T> [T] {\n     #[unstable(feature = \"split_array\", reason = \"new API\", issue = \"90091\")]\n     #[inline]\n     #[track_caller]\n+    #[must_use]\n     pub fn split_array_ref<const N: usize>(&self) -> (&[T; N], &[T]) {\n         let (a, b) = self.split_at(N);\n         // SAFETY: a points to [T; N]? Yes it's [T] of length N (checked by split_at)\n@@ -1718,6 +1747,7 @@ impl<T> [T] {\n     #[unstable(feature = \"split_array\", reason = \"new API\", issue = \"90091\")]\n     #[inline]\n     #[track_caller]\n+    #[must_use]\n     pub fn split_array_mut<const N: usize>(&mut self) -> (&mut [T; N], &mut [T]) {\n         let (a, b) = self.split_at_mut(N);\n         // SAFETY: a points to [T; N]? Yes it's [T] of length N (checked by split_at_mut)\n@@ -1762,6 +1792,7 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"split_array\", reason = \"new API\", issue = \"90091\")]\n     #[inline]\n+    #[must_use]\n     pub fn rsplit_array_ref<const N: usize>(&self) -> (&[T], &[T; N]) {\n         assert!(N <= self.len());\n         let (a, b) = self.split_at(self.len() - N);\n@@ -1795,6 +1826,7 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"split_array\", reason = \"new API\", issue = \"90091\")]\n     #[inline]\n+    #[must_use]\n     pub fn rsplit_array_mut<const N: usize>(&mut self) -> (&mut [T], &mut [T; N]) {\n         assert!(N <= self.len());\n         let (a, b) = self.split_at_mut(self.len() - N);\n@@ -2126,6 +2158,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[must_use]\n     pub fn contains(&self, x: &T) -> bool\n     where\n         T: PartialEq,\n@@ -2154,6 +2187,7 @@ impl<T> [T] {\n     /// assert!(v.starts_with(&[]));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn starts_with(&self, needle: &[T]) -> bool\n     where\n         T: PartialEq,\n@@ -2183,6 +2217,7 @@ impl<T> [T] {\n     /// assert!(v.ends_with(&[]));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn ends_with(&self, needle: &[T]) -> bool\n     where\n         T: PartialEq,\n@@ -3390,6 +3425,7 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[stable(feature = \"slice_align_to\", since = \"1.30.0\")]\n+    #[must_use]\n     pub unsafe fn align_to<U>(&self) -> (&[T], &[U], &[T]) {\n         // Note that most of this function will be constant-evaluated,\n         if mem::size_of::<U>() == 0 || mem::size_of::<T>() == 0 {\n@@ -3450,6 +3486,7 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[stable(feature = \"slice_align_to\", since = \"1.30.0\")]\n+    #[must_use]\n     pub unsafe fn align_to_mut<U>(&mut self) -> (&mut [T], &mut [U], &mut [T]) {\n         // Note that most of this function will be constant-evaluated,\n         if mem::size_of::<U>() == 0 || mem::size_of::<T>() == 0 {\n@@ -3543,6 +3580,7 @@ impl<T> [T] {\n     /// assert_eq!(basic_simd_sum(&numbers[1..99]), 4949.0);\n     /// ```\n     #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n+    #[must_use]\n     pub fn as_simd<const LANES: usize>(&self) -> (&[T], &[Simd<T, LANES>], &[T])\n     where\n         Simd<T, LANES>: AsRef<[T; LANES]>,\n@@ -3586,6 +3624,7 @@ impl<T> [T] {\n     /// be lifted in a way that would make it possible to see panics from this\n     /// method for something like `LANES == 3`.\n     #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n+    #[must_use]\n     pub fn as_simd_mut<const LANES: usize>(&mut self) -> (&mut [T], &mut [Simd<T, LANES>], &mut [T])\n     where\n         Simd<T, LANES>: AsMut<[T; LANES]>,\n@@ -3625,6 +3664,7 @@ impl<T> [T] {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n+    #[must_use]\n     pub fn is_sorted(&self) -> bool\n     where\n         T: PartialOrd,\n@@ -3640,6 +3680,7 @@ impl<T> [T] {\n     ///\n     /// [`is_sorted`]: slice::is_sorted\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n+    #[must_use]\n     pub fn is_sorted_by<F>(&self, mut compare: F) -> bool\n     where\n         F: FnMut(&T, &T) -> Option<Ordering>,\n@@ -3665,6 +3706,7 @@ impl<T> [T] {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n+    #[must_use]\n     pub fn is_sorted_by_key<F, K>(&self, f: F) -> bool\n     where\n         F: FnMut(&T) -> K,\n@@ -3702,6 +3744,7 @@ impl<T> [T] {\n     /// assert!(v[i..].iter().all(|&x| !(x < 5)));\n     /// ```\n     #[stable(feature = \"partition_point\", since = \"1.52.0\")]\n+    #[must_use]\n     pub fn partition_point<P>(&self, mut pred: P) -> usize\n     where\n         P: FnMut(&T) -> bool,"}, {"sha": "6744400c304a17ee83ababd8d6dc0d23886ee212", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcdde01aa36f6d441106e2cbb2fafa86edb90149/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdde01aa36f6d441106e2cbb2fafa86edb90149/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=dcdde01aa36f6d441106e2cbb2fafa86edb90149", "patch": "@@ -85,6 +85,7 @@ use crate::ptr;\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+#[must_use]\n pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n     debug_check_data_len(data, len);\n \n@@ -124,6 +125,7 @@ pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T]\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+#[must_use]\n pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n     debug_check_data_len(data as _, len);\n \n@@ -168,13 +170,15 @@ const fn debug_check_data_len<T>(_data: *const T, _len: usize) {}\n /// Converts a reference to T into a slice of length 1 (without copying).\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n #[rustc_const_unstable(feature = \"const_slice_from_ref\", issue = \"90206\")]\n+#[must_use]\n pub const fn from_ref<T>(s: &T) -> &[T] {\n     array::from_ref(s)\n }\n \n /// Converts a reference to T into a slice of length 1 (without copying).\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n #[rustc_const_unstable(feature = \"const_slice_from_ref\", issue = \"90206\")]\n+#[must_use]\n pub const fn from_mut<T>(s: &mut T) -> &mut [T] {\n     array::from_mut(s)\n }"}, {"sha": "6e02a7024b94911c846d0347a2a739d3c2ec78b3", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcdde01aa36f6d441106e2cbb2fafa86edb90149/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dcdde01aa36f6d441106e2cbb2fafa86edb90149/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed?ref=dcdde01aa36f6d441106e2cbb2fafa86edb90149", "patch": "@@ -2,6 +2,7 @@\n // run-rustfix\n // rustfix-only-machine-applicable\n \n+#[allow(unused_must_use)]\n fn main() {\n     let small = [1, 2];\n     let big = [0u8; 33];"}, {"sha": "582d5cadd065894fed9ff6b8ac7a8404e5963f5c", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dcdde01aa36f6d441106e2cbb2fafa86edb90149/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdde01aa36f6d441106e2cbb2fafa86edb90149/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs?ref=dcdde01aa36f6d441106e2cbb2fafa86edb90149", "patch": "@@ -2,6 +2,7 @@\n // run-rustfix\n // rustfix-only-machine-applicable\n \n+#[allow(unused_must_use)]\n fn main() {\n     let small = [1, 2];\n     let big = [0u8; 33];"}, {"sha": "e32d35d8638d736bf89fc56a4e4960120aeed6c7", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dcdde01aa36f6d441106e2cbb2fafa86edb90149/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcdde01aa36f6d441106e2cbb2fafa86edb90149/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=dcdde01aa36f6d441106e2cbb2fafa86edb90149", "patch": "@@ -1,5 +1,5 @@\n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n-  --> $DIR/into-iter-on-arrays-lint.rs:10:11\n+  --> $DIR/into-iter-on-arrays-lint.rs:11:11\n    |\n LL |     small.into_iter();\n    |           ^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     IntoIterator::into_iter(small);\n    |     ++++++++++++++++++++++++     ~\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n-  --> $DIR/into-iter-on-arrays-lint.rs:13:12\n+  --> $DIR/into-iter-on-arrays-lint.rs:14:12\n    |\n LL |     [1, 2].into_iter();\n    |            ^^^^^^^^^\n@@ -34,7 +34,7 @@ LL |     IntoIterator::into_iter([1, 2]);\n    |     ++++++++++++++++++++++++      ~\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n-  --> $DIR/into-iter-on-arrays-lint.rs:16:9\n+  --> $DIR/into-iter-on-arrays-lint.rs:17:9\n    |\n LL |     big.into_iter();\n    |         ^^^^^^^^^\n@@ -51,7 +51,7 @@ LL |     IntoIterator::into_iter(big);\n    |     ++++++++++++++++++++++++   ~\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n-  --> $DIR/into-iter-on-arrays-lint.rs:19:15\n+  --> $DIR/into-iter-on-arrays-lint.rs:20:15\n    |\n LL |     [0u8; 33].into_iter();\n    |               ^^^^^^^^^\n@@ -68,7 +68,7 @@ LL |     IntoIterator::into_iter([0u8; 33]);\n    |     ++++++++++++++++++++++++         ~\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n-  --> $DIR/into-iter-on-arrays-lint.rs:23:21\n+  --> $DIR/into-iter-on-arrays-lint.rs:24:21\n    |\n LL |     Box::new(small).into_iter();\n    |                     ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -77,7 +77,7 @@ LL |     Box::new(small).into_iter();\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n-  --> $DIR/into-iter-on-arrays-lint.rs:26:22\n+  --> $DIR/into-iter-on-arrays-lint.rs:27:22\n    |\n LL |     Box::new([1, 2]).into_iter();\n    |                      ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -86,7 +86,7 @@ LL |     Box::new([1, 2]).into_iter();\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n-  --> $DIR/into-iter-on-arrays-lint.rs:29:19\n+  --> $DIR/into-iter-on-arrays-lint.rs:30:19\n    |\n LL |     Box::new(big).into_iter();\n    |                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -95,7 +95,7 @@ LL |     Box::new(big).into_iter();\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n-  --> $DIR/into-iter-on-arrays-lint.rs:32:25\n+  --> $DIR/into-iter-on-arrays-lint.rs:33:25\n    |\n LL |     Box::new([0u8; 33]).into_iter();\n    |                         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -104,7 +104,7 @@ LL |     Box::new([0u8; 33]).into_iter();\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n-  --> $DIR/into-iter-on-arrays-lint.rs:36:31\n+  --> $DIR/into-iter-on-arrays-lint.rs:37:31\n    |\n LL |     Box::new(Box::new(small)).into_iter();\n    |                               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -113,7 +113,7 @@ LL |     Box::new(Box::new(small)).into_iter();\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n-  --> $DIR/into-iter-on-arrays-lint.rs:39:32\n+  --> $DIR/into-iter-on-arrays-lint.rs:40:32\n    |\n LL |     Box::new(Box::new([1, 2])).into_iter();\n    |                                ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -122,7 +122,7 @@ LL |     Box::new(Box::new([1, 2])).into_iter();\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n-  --> $DIR/into-iter-on-arrays-lint.rs:42:29\n+  --> $DIR/into-iter-on-arrays-lint.rs:43:29\n    |\n LL |     Box::new(Box::new(big)).into_iter();\n    |                             ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -131,7 +131,7 @@ LL |     Box::new(Box::new(big)).into_iter();\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021\n-  --> $DIR/into-iter-on-arrays-lint.rs:45:35\n+  --> $DIR/into-iter-on-arrays-lint.rs:46:35\n    |\n LL |     Box::new(Box::new([0u8; 33])).into_iter();\n    |                                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`"}]}