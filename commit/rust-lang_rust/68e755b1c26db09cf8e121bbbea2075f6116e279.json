{"sha": "68e755b1c26db09cf8e121bbbea2075f6116e279", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZTc1NWIxYzI2ZGIwOWNmOGUxMjFiYmJlYTIwNzVmNjExNmUyNzk=", "commit": {"author": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2012-09-14T13:01:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-19T21:01:53Z"}, "message": "core: Allocate threads on demand, not on scheduler startup\n\nAPI change: rust_kernel::create_scheduler() or\nrust_scheduler::rust_scheduler() respecitevly now take ownership of the\nlaunch factory argument, it is needed to create new threads on demand.\n\nAlso renames rustrt::sched_threads() to rustrt::rust_sched_threads() for\nconsistency. Added rustrt::rust_max_sched_threads() to return the\nmaximal number of scheduled threads of the current scheduler.\n\nFixes #3493.", "tree": {"sha": "8d48dc089bb9effd2090117fd6033c4ca81470d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d48dc089bb9effd2090117fd6033c4ca81470d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68e755b1c26db09cf8e121bbbea2075f6116e279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68e755b1c26db09cf8e121bbbea2075f6116e279", "html_url": "https://github.com/rust-lang/rust/commit/68e755b1c26db09cf8e121bbbea2075f6116e279", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68e755b1c26db09cf8e121bbbea2075f6116e279/comments", "author": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a935377483823ca1fbaede5a87406b494b0488", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a935377483823ca1fbaede5a87406b494b0488", "html_url": "https://github.com/rust-lang/rust/commit/35a935377483823ca1fbaede5a87406b494b0488"}], "stats": {"total": 150, "additions": 102, "deletions": 48}, "files": [{"sha": "d9b5eb15a7124cc643ed88a9a64a02b2cd05afac", "filename": "src/libcore/task.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=68e755b1c26db09cf8e121bbbea2075f6116e279", "patch": "@@ -1661,7 +1661,8 @@ extern mod rustrt {\n \n     fn rust_get_sched_id() -> sched_id;\n     fn rust_new_sched(num_threads: libc::uintptr_t) -> sched_id;\n-    fn sched_threads() -> libc::size_t;\n+    fn rust_max_sched_threads() -> libc::size_t;\n+    fn rust_sched_threads() -> libc::size_t;\n     fn rust_num_threads() -> libc::uintptr_t;\n \n     fn get_task_id() -> task_id;\n@@ -2435,10 +2436,36 @@ fn test_sched_thread_per_core() {\n \n     do spawn_sched(ThreadPerCore) {\n         let cores = rustrt::rust_num_threads();\n-        let reported_threads = rustrt::sched_threads();\n+        let reported_threads = rustrt::rust_max_sched_threads();\n         assert(cores as uint == reported_threads as uint);\n         chan.send(());\n     }\n \n     port.recv();\n }\n+\n+#[test]\n+fn test_spawn_thread_on_demand() {\n+    let (chan, port) = pipes::stream();\n+\n+    do spawn_sched(ManualThreads(2)) {\n+        let max_threads = rustrt::rust_max_sched_threads();\n+        assert(max_threads as int == 2);\n+        let running_threads = rustrt::rust_sched_threads();\n+        assert(running_threads as int == 1);\n+\n+        let (chan2, port2) = pipes::stream();\n+\n+        do spawn() {\n+            chan2.send(());\n+        }\n+\n+        let running_threads2 = rustrt::rust_sched_threads();\n+        assert(running_threads2 as int == 2);\n+\n+        port2.recv();\n+        chan.send(());\n+    }\n+\n+    port.recv();\n+}"}, {"sha": "ad0003934e498f8c61517ccca80e55dec9eca75e", "filename": "src/libstd/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=68e755b1c26db09cf8e121bbbea2075f6116e279", "patch": "@@ -26,7 +26,7 @@ export run_tests_console;\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    fn sched_threads() -> libc::size_t;\n+    fn rust_max_sched_threads() -> libc::size_t;\n }\n \n // The name of a test. By convention this follows the rules for rust\n@@ -327,7 +327,7 @@ const sched_overcommit : uint = 1u;\n const sched_overcommit : uint = 4u;\n \n fn get_concurrency() -> uint {\n-    let threads = rustrt::sched_threads() as uint;\n+    let threads = rustrt::rust_max_sched_threads() as uint;\n     if threads == 1u { 1u }\n     else { threads * sched_overcommit }\n }"}, {"sha": "f1c2afc0f4b3bbf89d12d7159039c5eb09b5022d", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=68e755b1c26db09cf8e121bbbea2075f6116e279", "patch": "@@ -627,11 +627,17 @@ start_task(rust_task *target, fn_env_pair *f) {\n }\n \n extern \"C\" CDECL size_t\n-sched_threads() {\n+rust_sched_threads() {\n     rust_task *task = rust_get_current_task();\n     return task->sched->number_of_threads();\n }\n \n+extern \"C\" CDECL size_t\n+rust_max_sched_threads() {\n+    rust_task *task = rust_get_current_task();\n+    return task->sched->max_number_of_threads();\n+}\n+\n extern \"C\" CDECL rust_port*\n rust_port_take(rust_port_id id) {\n     rust_task *task = rust_get_current_task();"}, {"sha": "669ebd55a7c9cf24bc3147ac80b10f76a80573ec", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=68e755b1c26db09cf8e121bbbea2075f6116e279", "patch": "@@ -31,9 +31,10 @@ rust_kernel::rust_kernel(rust_env *env) :\n \n     // Create the single threaded scheduler that will run on the platform's\n     // main thread\n-    rust_manual_sched_launcher_factory launchfac;\n-    osmain_scheduler = create_scheduler(&launchfac, 1, false);\n-    osmain_driver = launchfac.get_driver();\n+    rust_manual_sched_launcher_factory *launchfac =\n+        new rust_manual_sched_launcher_factory();\n+    osmain_scheduler = create_scheduler(launchfac, 1, false);\n+    osmain_driver = launchfac->get_driver();\n     sched_reaper.start();\n }\n \n@@ -79,8 +80,9 @@ void rust_kernel::free(void *mem) {\n \n rust_sched_id\n rust_kernel::create_scheduler(size_t num_threads) {\n-    rust_thread_sched_launcher_factory launchfac;\n-    return create_scheduler(&launchfac, num_threads, true);\n+    rust_thread_sched_launcher_factory *launchfac =\n+        new rust_thread_sched_launcher_factory();\n+    return create_scheduler(launchfac, num_threads, true);\n }\n \n rust_sched_id"}, {"sha": "aa288cf3b94b3c3bc122f17ce5e84f1cc7a550f6", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 47, "deletions": 28, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=68e755b1c26db09cf8e121bbbea2075f6116e279", "patch": "@@ -6,34 +6,39 @@\n #include \"rust_sched_launcher.h\"\n \n rust_scheduler::rust_scheduler(rust_kernel *kernel,\n-                               size_t num_threads,\n+                               size_t max_num_threads,\n                                rust_sched_id id,\n                                bool allow_exit,\n                                bool killed,\n                                rust_sched_launcher_factory *launchfac) :\n     ref_count(1),\n     kernel(kernel),\n-    live_threads(num_threads),\n+    live_threads(0),\n     live_tasks(0),\n     cur_thread(0),\n     may_exit(allow_exit),\n-    num_threads(num_threads),\n+    killed(killed),\n+    launchfac(launchfac),\n+    max_num_threads(max_num_threads),\n     id(id)\n {\n-    create_task_threads(launchfac, killed);\n+    // Create the first thread\n+    threads.push(create_task_thread(0));\n }\n \n void rust_scheduler::delete_this() {\n     destroy_task_threads();\n+    delete launchfac;\n     delete this;\n }\n \n rust_sched_launcher *\n-rust_scheduler::create_task_thread(rust_sched_launcher_factory *launchfac,\n-                                   int id, bool killed) {\n+rust_scheduler::create_task_thread(int id) {\n+    live_threads++;\n     rust_sched_launcher *thread = launchfac->create(this, id, killed);\n-    KLOG(kernel, kern, \"created task thread: \" PTR \", id: %d\",\n-          thread, id);\n+    KLOG(kernel, kern, \"created task thread: \" PTR\n+         \", id: %d, live_threads: %d\",\n+         thread, id, live_threads);\n     return thread;\n }\n \n@@ -43,27 +48,17 @@ rust_scheduler::destroy_task_thread(rust_sched_launcher *thread) {\n     delete thread;\n }\n \n-void\n-rust_scheduler::create_task_threads(rust_sched_launcher_factory *launchfac,\n-                                    bool killed) {\n-    KLOG(kernel, kern, \"Using %d scheduler threads.\", num_threads);\n-\n-    for(size_t i = 0; i < num_threads; ++i) {\n-        threads.push(create_task_thread(launchfac, i, killed));\n-    }\n-}\n-\n void\n rust_scheduler::destroy_task_threads() {\n-    for(size_t i = 0; i < num_threads; ++i) {\n+    for(size_t i = 0; i < threads.size(); ++i) {\n         destroy_task_thread(threads[i]);\n     }\n }\n \n void\n rust_scheduler::start_task_threads()\n {\n-    for(size_t i = 0; i < num_threads; ++i) {\n+    for(size_t i = 0; i < threads.size(); ++i) {\n         rust_sched_launcher *thread = threads[i];\n         thread->start();\n     }\n@@ -72,15 +67,15 @@ rust_scheduler::start_task_threads()\n void\n rust_scheduler::join_task_threads()\n {\n-    for(size_t i = 0; i < num_threads; ++i) {\n+    for(size_t i = 0; i < threads.size(); ++i) {\n         rust_sched_launcher *thread = threads[i];\n         thread->join();\n     }\n }\n \n void\n rust_scheduler::kill_all_tasks() {\n-    for(size_t i = 0; i < num_threads; ++i) {\n+    for(size_t i = 0; i < threads.size(); ++i) {\n         rust_sched_launcher *thread = threads[i];\n         thread->get_loop()->kill_all_tasks();\n     }\n@@ -92,10 +87,29 @@ rust_scheduler::create_task(rust_task *spawner, const char *name) {\n     {\n         scoped_lock with(lock);\n         live_tasks++;\n-        thread_no = cur_thread++;\n-        if (cur_thread >= num_threads)\n-            cur_thread = 0;\n+\n+        // Find unoccupied thread\n+        for (thread_no = 0; thread_no < threads.size(); ++thread_no) {\n+            if (threads[thread_no]->get_loop()->number_of_live_tasks() == 0)\n+                break;\n+        }\n+\n+        if (thread_no == threads.size()) {\n+            if (threads.size() < max_num_threads) {\n+                // Else create new thread\n+                thread_no = threads.size();\n+                rust_sched_launcher *thread = create_task_thread(thread_no);\n+                thread->start();\n+                threads.push(thread);\n+            } else {\n+                // Or use round robin allocation\n+                thread_no = cur_thread++;\n+                if (cur_thread >= max_num_threads)\n+                    cur_thread = 0;\n+            }\n+        }\n     }\n+    KLOG(kernel, kern, \"Creating task %s, on thread %d.\", name, thread_no);\n     kernel->register_task();\n     rust_sched_launcher *thread = threads[thread_no];\n     return thread->get_loop()->create_task(spawner, name);\n@@ -119,17 +133,22 @@ rust_scheduler::release_task() {\n \n void\n rust_scheduler::exit() {\n-    // Take a copy of num_threads. After the last thread exits this\n+    // Take a copy of the number of threads. After the last thread exits this\n     // scheduler will get destroyed, and our fields will cease to exist.\n-    size_t current_num_threads = num_threads;\n+    size_t current_num_threads = threads.size();\n     for(size_t i = 0; i < current_num_threads; ++i) {\n         threads[i]->get_loop()->exit();\n     }\n }\n \n+size_t\n+rust_scheduler::max_number_of_threads() {\n+    return max_num_threads;\n+}\n+\n size_t\n rust_scheduler::number_of_threads() {\n-    return num_threads;\n+    return threads.size();\n }\n \n void"}, {"sha": "019f69f7a31603c331b695d9d38fce3a072f668e", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=68e755b1c26db09cf8e121bbbea2075f6116e279", "patch": "@@ -30,19 +30,17 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n     uintptr_t live_tasks;\n     size_t cur_thread;\n     bool may_exit;\n+    bool killed;\n \n+    rust_sched_launcher_factory *launchfac;\n     array_list<rust_sched_launcher *> threads;\n-    const size_t num_threads;\n+    const size_t max_num_threads;\n \n     rust_sched_id id;\n \n-    void create_task_threads(rust_sched_launcher_factory *launchfac,\n-                             bool killed);\n     void destroy_task_threads();\n \n-    rust_sched_launcher *\n-    create_task_thread(rust_sched_launcher_factory *launchfac, int id,\n-                       bool killed);\n+    rust_sched_launcher *create_task_thread(int id);\n     void destroy_task_thread(rust_sched_launcher *thread);\n \n     void exit();\n@@ -51,7 +49,7 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n     void delete_this();\n \n public:\n-    rust_scheduler(rust_kernel *kernel, size_t num_threads,\n+    rust_scheduler(rust_kernel *kernel, size_t max_num_threads,\n                    rust_sched_id id, bool allow_exit, bool killed,\n                    rust_sched_launcher_factory *launchfac);\n \n@@ -62,6 +60,7 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n \n     void release_task();\n \n+    size_t max_number_of_threads();\n     size_t number_of_threads();\n     // Called by each thread when it terminates. When all threads\n     // terminate the scheduler does as well."}, {"sha": "e0930dbf753627646d78d281004cf1d1115b30f3", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=68e755b1c26db09cf8e121bbbea2075f6116e279", "patch": "@@ -30,6 +30,7 @@ rand_new_seeded\n rand_next\n rand_seed\n rust_get_sched_id\n+rust_max_sched_threads\n rust_new_sched\n rust_new_task_in_sched\n rust_num_threads\n@@ -48,6 +49,7 @@ rust_port_size\n rust_process_wait\n rust_ptr_eq\n rust_run_program\n+rust_sched_threads\n rust_set_exit_status\n rust_start\n rust_getcwd\n@@ -58,7 +60,6 @@ rust_get_task\n rust_get_stack_segment\n rust_task_weaken\n rust_task_unweaken\n-sched_threads\n shape_log_str\n start_task\n vec_reserve_shared_actual"}, {"sha": "b10c18ffd3e0241ef1d2516e1b855bb0bf102f7d", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e755b1c26db09cf8e121bbbea2075f6116e279/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=68e755b1c26db09cf8e121bbbea2075f6116e279", "patch": "@@ -8,15 +8,15 @@ extern mod rustrt {\n     fn last_os_error() -> ~str;\n     fn rust_getcwd() -> ~str;\n     fn get_task_id() -> libc::intptr_t;\n-    fn sched_threads();\n+    fn rust_max_sched_threads();\n     fn rust_get_task();\n }\n \n fn calllink01() { rustrt::rust_get_sched_id(); }\n fn calllink02() { rustrt::last_os_error(); }\n fn calllink03() { rustrt::rust_getcwd(); }\n fn calllink08() { rustrt::get_task_id(); }\n-fn calllink09() { rustrt::sched_threads(); }\n+fn calllink09() { rustrt::rust_max_sched_threads(); }\n fn calllink10() { rustrt::rust_get_task(); }\n \n fn runtest(f: fn~(), frame_backoff: u32) {"}]}