{"sha": "e7d0fa340f904829abf28907c7f1add11a65389e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZDBmYTM0MGY5MDQ4MjlhYmYyODkwN2M3ZjFhZGQxMWE2NTM4OWU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-07-26T12:29:13Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-31T13:15:09Z"}, "message": "async-llvm(17): Create MSVC __imp_ symbols immediately for each module.", "tree": {"sha": "bb06752208ca2a4df2ed2714c9d1fee544e705f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb06752208ca2a4df2ed2714c9d1fee544e705f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7d0fa340f904829abf28907c7f1add11a65389e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d0fa340f904829abf28907c7f1add11a65389e", "html_url": "https://github.com/rust-lang/rust/commit/e7d0fa340f904829abf28907c7f1add11a65389e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7d0fa340f904829abf28907c7f1add11a65389e/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad9eaa998d597bfa9597c4d6c751cfb66ed2e7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad9eaa998d597bfa9597c4d6c751cfb66ed2e7e", "html_url": "https://github.com/rust-lang/rust/commit/0ad9eaa998d597bfa9597c4d6c751cfb66ed2e7e"}], "stats": {"total": 66, "additions": 27, "deletions": 39}, "files": [{"sha": "9e6fe5ab4349f0bcce62da94a2783dbb7ecee257", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 27, "deletions": 39, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e7d0fa340f904829abf28907c7f1add11a65389e/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d0fa340f904829abf28907c7f1add11a65389e/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=e7d0fa340f904829abf28907c7f1add11a65389e", "patch": "@@ -804,7 +804,7 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n // code references on its own.\n // See #26591, #27438\n fn create_imps(sess: &Session,\n-               llvm_modules: &[ModuleLlvm]) {\n+               llvm_module: &ModuleLlvm) {\n     // The x86 ABI seems to require that leading underscores are added to symbol\n     // names, so we need an extra underscore on 32-bit. There's also a leading\n     // '\\x01' here which disables LLVM's symbol mangling (e.g. no extra\n@@ -815,28 +815,26 @@ fn create_imps(sess: &Session,\n         \"\\x01__imp_\"\n     };\n     unsafe {\n-        for ll in llvm_modules {\n-            let exported: Vec<_> = iter_globals(ll.llmod)\n-                                       .filter(|&val| {\n-                                           llvm::LLVMRustGetLinkage(val) ==\n-                                           llvm::Linkage::ExternalLinkage &&\n-                                           llvm::LLVMIsDeclaration(val) == 0\n-                                       })\n-                                       .collect();\n-\n-            let i8p_ty = Type::i8p_llcx(ll.llcx);\n-            for val in exported {\n-                let name = CStr::from_ptr(llvm::LLVMGetValueName(val));\n-                let mut imp_name = prefix.as_bytes().to_vec();\n-                imp_name.extend(name.to_bytes());\n-                let imp_name = CString::new(imp_name).unwrap();\n-                let imp = llvm::LLVMAddGlobal(ll.llmod,\n-                                              i8p_ty.to_ref(),\n-                                              imp_name.as_ptr() as *const _);\n-                let init = llvm::LLVMConstBitCast(val, i8p_ty.to_ref());\n-                llvm::LLVMSetInitializer(imp, init);\n-                llvm::LLVMRustSetLinkage(imp, llvm::Linkage::ExternalLinkage);\n-            }\n+        let exported: Vec<_> = iter_globals(llvm_module.llmod)\n+                                   .filter(|&val| {\n+                                       llvm::LLVMRustGetLinkage(val) ==\n+                                       llvm::Linkage::ExternalLinkage &&\n+                                       llvm::LLVMIsDeclaration(val) == 0\n+                                   })\n+                                   .collect();\n+\n+        let i8p_ty = Type::i8p_llcx(llvm_module.llcx);\n+        for val in exported {\n+            let name = CStr::from_ptr(llvm::LLVMGetValueName(val));\n+            let mut imp_name = prefix.as_bytes().to_vec();\n+            imp_name.extend(name.to_bytes());\n+            let imp_name = CString::new(imp_name).unwrap();\n+            let imp = llvm::LLVMAddGlobal(llvm_module.llmod,\n+                                          i8p_ty.to_ref(),\n+                                          imp_name.as_ptr() as *const _);\n+            let init = llvm::LLVMConstBitCast(val, i8p_ty.to_ref());\n+            llvm::LLVMSetInitializer(imp, init);\n+            llvm::LLVMRustSetLinkage(imp, llvm::Linkage::ExternalLinkage);\n         }\n     }\n }\n@@ -1125,6 +1123,12 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 }\n             }\n \n+            // Adjust exported symbols for MSVC dllimport\n+            if ccx.sess().target.target.options.is_like_msvc &&\n+               ccx.sess().crate_types.borrow().iter().any(|ct| *ct == config::CrateTypeRlib) {\n+                create_imps(ccx.sess(), &llvm_module);\n+            }\n+\n             ModuleTranslation {\n                 name: cgu_name,\n                 symbol_name_hash,\n@@ -1170,22 +1174,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let sess = shared_ccx.sess();\n \n-    // Get the list of llvm modules we created. We'll do a few wacky\n-    // transforms on them now.\n-\n-    let llvm_modules: Vec<_> =\n-        modules.iter()\n-               .filter_map(|module| match module.source {\n-                   ModuleSource::Translated(llvm) => Some(llvm),\n-                   _ => None,\n-               })\n-               .collect();\n-\n-    if sess.target.target.options.is_like_msvc &&\n-       sess.crate_types.borrow().iter().any(|ct| *ct == config::CrateTypeRlib) {\n-        create_imps(sess, &llvm_modules);\n-    }\n-\n     // Translate an allocator shim, if any\n     //\n     // If LTO is enabled and we've got some previous LLVM module we translated"}]}