{"sha": "eaa809037ff17b389da9f015349b24941cb3c06e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYTgwOTAzN2ZmMTdiMzg5ZGE5ZjAxNTM0OWIyNDk0MWNiM2MwNmU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-07T19:03:09Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-07T19:03:09Z"}, "message": "Merge #951\n\n951: Fix EnumVariants not showing properly when hovering r=matklad a=vipentti\n\nThis fixes #950 \r\n\r\nThis also fixes hovering over the name of an EnumVariant.\r\n\r\nAdditionally this changes the way enum variants are shown, now instead of the `Some<T>... -> Option` you just get `Some`. I'm not sure what would be the optimal display for enum variants in this case.\r\n\n\nCo-authored-by: Ville Penttinen <villem.penttinen@gmail.com>", "tree": {"sha": "10bfff78a34a476ca62fdc56af90fd77ffe2aba7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10bfff78a34a476ca62fdc56af90fd77ffe2aba7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaa809037ff17b389da9f015349b24941cb3c06e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa809037ff17b389da9f015349b24941cb3c06e", "html_url": "https://github.com/rust-lang/rust/commit/eaa809037ff17b389da9f015349b24941cb3c06e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaa809037ff17b389da9f015349b24941cb3c06e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "4ce962f64e219a9e65f080fe98ebaba2008ae64e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce962f64e219a9e65f080fe98ebaba2008ae64e", "html_url": "https://github.com/rust-lang/rust/commit/4ce962f64e219a9e65f080fe98ebaba2008ae64e"}, {"sha": "b168104d95d112d254512090db3bc35ebf0fd5c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b168104d95d112d254512090db3bc35ebf0fd5c2", "html_url": "https://github.com/rust-lang/rust/commit/b168104d95d112d254512090db3bc35ebf0fd5c2"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "bf08f5203ab294793489a968a94426a0edc75d17", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/eaa809037ff17b389da9f015349b24941cb3c06e/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa809037ff17b389da9f015349b24941cb3c06e/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=eaa809037ff17b389da9f015349b24941cb3c06e", "patch": "@@ -195,6 +195,7 @@ impl NavigationTarget {\n             .visit(doc_comments::<ast::ConstDef>)\n             .visit(doc_comments::<ast::StaticDef>)\n             .visit(doc_comments::<ast::NamedFieldDef>)\n+            .visit(doc_comments::<ast::EnumVariant>)\n             .accept(&node)?\n     }\n \n@@ -226,7 +227,7 @@ impl NavigationTarget {\n             let mut string =\n                 node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n             string.push_str(label);\n-            node.name()?.syntax().text().push_to(&mut string);\n+            string.push_str(node.name()?.text().as_str());\n             Some(string)\n         }\n \n@@ -240,6 +241,7 @@ impl NavigationTarget {\n             .visit(|node: &ast::ConstDef| visit_ascribed_node(node, \"const \"))\n             .visit(|node: &ast::StaticDef| visit_ascribed_node(node, \"static \"))\n             .visit(|node: &ast::NamedFieldDef| visit_ascribed_node(node, \"\"))\n+            .visit(|node: &ast::EnumVariant| Some(node.name()?.text().to_string()))\n             .accept(&node)?\n     }\n }\n@@ -428,8 +430,60 @@ mod tests {\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        // not the nicest way to show it currently\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Some<i32>(T) -> Option<T>\"));\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Some\"));\n+\n+        let (analysis, position) = single_file_with_position(\n+            \"\n+            enum Option<T> { Some(T) }\n+            use Option::Some;\n+\n+            fn main() {\n+                let b<|>ar = Some(12);\n+            }\n+            \",\n+        );\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Option<i32>\"));\n+    }\n+\n+    #[test]\n+    fn hover_enum_variant() {\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            enum Option<T> {\n+                /// The None variant\n+                Non<|>e\n+            }\n+        \"#,\n+            &[\"\n+None\n+```\n+\n+The None variant\n+            \"\n+            .trim()],\n+        );\n+\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            enum Option<T> {\n+                /// The Some variant\n+                Some(T)\n+            }\n+            fn main() {\n+                let s = Option::Som<|>e(12);\n+            }\n+        \"#,\n+            &[\"\n+Some\n+```\n+\n+The Some variant\n+            \"\n+            .trim()],\n+        );\n     }\n \n     #[test]"}]}