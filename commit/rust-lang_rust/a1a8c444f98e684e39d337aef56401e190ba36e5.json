{"sha": "a1a8c444f98e684e39d337aef56401e190ba36e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYThjNDQ0Zjk4ZTY4NGUzOWQzMzdhZWY1NjQwMWUxOTBiYTM2ZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-01T23:34:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-01T23:34:14Z"}, "message": "Auto merge of #53842 - estebank:various, r=petrochenkov\n\nVarious small diagnostic and code clean up\n\n - Point at def span on incorrect `panic` or `oom` function\n - Use structured suggestion instead of note for `+=` that can be performed on a dereference of the left binding\n - Small code formatting cleanup", "tree": {"sha": "dbcaab044e3816b45108c11c2cca40ac053ddc0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbcaab044e3816b45108c11c2cca40ac053ddc0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1a8c444f98e684e39d337aef56401e190ba36e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a8c444f98e684e39d337aef56401e190ba36e5", "html_url": "https://github.com/rust-lang/rust/commit/a1a8c444f98e684e39d337aef56401e190ba36e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1a8c444f98e684e39d337aef56401e190ba36e5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28bcffead74d5e17c6cb1f7de432e37f93a6b50c", "url": "https://api.github.com/repos/rust-lang/rust/commits/28bcffead74d5e17c6cb1f7de432e37f93a6b50c", "html_url": "https://github.com/rust-lang/rust/commit/28bcffead74d5e17c6cb1f7de432e37f93a6b50c"}, {"sha": "013710e8e8b322f1e902b1234ee674e395c44859", "url": "https://api.github.com/repos/rust-lang/rust/commits/013710e8e8b322f1e902b1234ee674e395c44859", "html_url": "https://github.com/rust-lang/rust/commit/013710e8e8b322f1e902b1234ee674e395c44859"}], "stats": {"total": 74, "additions": 43, "deletions": 31}, "files": [{"sha": "bf878145e1fb972ba906caa194f7928044db9e65", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a1a8c444f98e684e39d337aef56401e190ba36e5/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a8c444f98e684e39d337aef56401e190ba36e5/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=a1a8c444f98e684e39d337aef56401e190ba36e5", "patch": "@@ -542,12 +542,16 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n                       \"cannot bind by-move into a pattern guard\")\n                 .span_label(p.span, \"moves value into pattern guard\")\n                 .emit();\n-        } else if by_ref_span.is_some() {\n-            struct_span_err!(cx.tcx.sess, p.span, E0009,\n-                            \"cannot bind by-move and by-ref in the same pattern\")\n-                    .span_label(p.span, \"by-move pattern here\")\n-                    .span_label(by_ref_span.unwrap(), \"both by-ref and by-move used\")\n-                    .emit();\n+        } else if let Some(by_ref_span) = by_ref_span {\n+            struct_span_err!(\n+                cx.tcx.sess,\n+                p.span,\n+                E0009,\n+                \"cannot bind by-move and by-ref in the same pattern\",\n+            )\n+            .span_label(p.span, \"by-move pattern here\")\n+            .span_label(by_ref_span, \"both by-ref and by-move used\")\n+            .emit();\n         }\n     };\n "}, {"sha": "cc5c722e4f6193bdc99ef229b474fc7ed3b47a5b", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1a8c444f98e684e39d337aef56401e190ba36e5/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a8c444f98e684e39d337aef56401e190ba36e5/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=a1a8c444f98e684e39d337aef56401e190ba36e5", "patch": "@@ -154,8 +154,7 @@ impl<'a> SpanUtils<'a> {\n                 let loc = self.sess.source_map().lookup_char_pos(span.lo());\n                 span_bug!(\n                     span,\n-                    \"Mis-counted brackets when breaking path? Parsing '{}' \\\n-                     in {}, line {}\",\n+                    \"Mis-counted brackets when breaking path? Parsing '{}' in {}, line {}\",\n                     self.snippet(span),\n                     loc.file.name,\n                     loc.line"}, {"sha": "5cc87e12ed06959a712f745b4db84db26dc7e830", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1a8c444f98e684e39d337aef56401e190ba36e5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a8c444f98e684e39d337aef56401e190ba36e5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a1a8c444f98e684e39d337aef56401e190ba36e5", "patch": "@@ -1178,6 +1178,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n                         }\n                     }\n                 } else {\n+                    let span = fcx.tcx.sess.source_map().def_span(span);\n                     fcx.tcx.sess.span_err(span, \"function should have one argument\");\n                 }\n             } else {\n@@ -1226,6 +1227,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n                         }\n                     }\n                 } else {\n+                    let span = fcx.tcx.sess.source_map().def_span(span);\n                     fcx.tcx.sess.span_err(span, \"function should have one argument\");\n                 }\n             } else {"}, {"sha": "edfa62f10953877f9f7e0ef26a99ef0c07edf949", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a1a8c444f98e684e39d337aef56401e190ba36e5/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a8c444f98e684e39d337aef56401e190ba36e5/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=a1a8c444f98e684e39d337aef56401e190ba36e5", "patch": "@@ -256,14 +256,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     let source_map = self.tcx.sess.source_map();\n                     match is_assign {\n                         IsAssign::Yes => {\n-                            let mut err = struct_span_err!(self.tcx.sess, expr.span, E0368,\n-                                                \"binary assignment operation `{}=` \\\n-                                                cannot be applied to type `{}`\",\n-                                                op.node.as_str(),\n-                                                lhs_ty);\n-                            err.span_label(lhs_expr.span,\n-                                    format!(\"cannot use `{}=` on type `{}`\",\n-                                    op.node.as_str(), lhs_ty));\n+                            let mut err = struct_span_err!(\n+                                self.tcx.sess,\n+                                expr.span,\n+                                E0368,\n+                                \"binary assignment operation `{}=` cannot be applied to type `{}`\",\n+                                op.node.as_str(),\n+                                lhs_ty,\n+                            );\n+                            err.span_label(\n+                                lhs_expr.span,\n+                                format!(\"cannot use `{}=` on type `{}`\",\n+                                op.node.as_str(), lhs_ty),\n+                            );\n                             let mut suggested_deref = false;\n                             if let Ref(_, mut rty, _) = lhs_ty.sty {\n                                 if {\n@@ -280,13 +285,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                             rty = rty_inner;\n                                         }\n                                         let msg = &format!(\n-                                                \"`{}=` can be used on '{}', you can \\\n-                                                dereference `{2}`: `*{2}`\",\n-                                                op.node.as_str(),\n-                                                rty,\n-                                                lstring\n+                                            \"`{}=` can be used on '{}', you can dereference `{}`\",\n+                                            op.node.as_str(),\n+                                            rty,\n+                                            lstring,\n+                                        );\n+                                        err.span_suggestion_with_applicability(\n+                                            lhs_expr.span,\n+                                            msg,\n+                                            format!(\"*{}\", lstring),\n+                                            errors::Applicability::MachineApplicable,\n                                         );\n-                                        err.help(msg);\n                                         suggested_deref = true;\n                                     }\n                                 }"}, {"sha": "e7885537b06bb38a8dce71ab0d58d328a50dbec4", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-3.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1a8c444f98e684e39d337aef56401e190ba36e5/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1a8c444f98e684e39d337aef56401e190ba36e5/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr?ref=a1a8c444f98e684e39d337aef56401e190ba36e5", "patch": "@@ -1,10 +1,8 @@\n error: function should have one argument\n   --> $DIR/alloc-error-handler-bad-signature-3.rs:20:1\n    |\n-LL | / fn oom() -> ! { //~ ERROR function should have one argument\n-LL | |     loop {}\n-LL | | }\n-   | |_^\n+LL | fn oom() -> ! { //~ ERROR function should have one argument\n+   | ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f9191a9fd8229acc496517ffd08bbd07daa5cbaa", "filename": "src/test/ui/issues/issue-5239-1.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1a8c444f98e684e39d337aef56401e190ba36e5/src%2Ftest%2Fui%2Fissues%2Fissue-5239-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1a8c444f98e684e39d337aef56401e190ba36e5/src%2Ftest%2Fui%2Fissues%2Fissue-5239-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5239-1.stderr?ref=a1a8c444f98e684e39d337aef56401e190ba36e5", "patch": "@@ -5,8 +5,10 @@ LL |     let x = |ref x: isize| { x += 1; };\n    |                              -^^^^^\n    |                              |\n    |                              cannot use `+=` on type `&isize`\n+help: `+=` can be used on 'isize', you can dereference `x`\n    |\n-   = help: `+=` can be used on 'isize', you can dereference `x`: `*x`\n+LL |     let x = |ref x: isize| { *x += 1; };\n+   |                              ^^\n \n error: aborting due to previous error\n "}, {"sha": "5d0395e17f54df32c2c77ed628d1a5eb6c324496", "filename": "src/test/ui/panic-handler/panic-handler-bad-signature-3.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1a8c444f98e684e39d337aef56401e190ba36e5/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-bad-signature-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1a8c444f98e684e39d337aef56401e190ba36e5/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-bad-signature-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-bad-signature-3.stderr?ref=a1a8c444f98e684e39d337aef56401e190ba36e5", "patch": "@@ -1,10 +1,8 @@\n error: function should have one argument\n   --> $DIR/panic-handler-bad-signature-3.rs:20:1\n    |\n-LL | / fn panic() -> ! { //~ ERROR function should have one argument\n-LL | |     loop {}\n-LL | | }\n-   | |_^\n+LL | fn panic() -> ! { //~ ERROR function should have one argument\n+   | ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}