{"sha": "1679a376f30c5ad8971c0f855074a3f489fee5fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NzlhMzc2ZjMwYzVhZDg5NzFjMGY4NTUwNzRhM2Y0ODlmZWU1ZmE=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-05-03T15:03:28Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-05-03T15:03:28Z"}, "message": "Resolve single assist only", "tree": {"sha": "1ffe5d504426f6e1d9cbf1c56d9e6b91ab9ac43d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ffe5d504426f6e1d9cbf1c56d9e6b91ab9ac43d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1679a376f30c5ad8971c0f855074a3f489fee5fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1679a376f30c5ad8971c0f855074a3f489fee5fa", "html_url": "https://github.com/rust-lang/rust/commit/1679a376f30c5ad8971c0f855074a3f489fee5fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1679a376f30c5ad8971c0f855074a3f489fee5fa/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5cdcb8b124f5b7d59950429787e760e46388f72", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5cdcb8b124f5b7d59950429787e760e46388f72", "html_url": "https://github.com/rust-lang/rust/commit/e5cdcb8b124f5b7d59950429787e760e46388f72"}], "stats": {"total": 110, "additions": 78, "deletions": 32}, "files": [{"sha": "b14f908b75e189963742bce6065774a8cef1ee22", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=1679a376f30c5ad8971c0f855074a3f489fee5fa", "patch": "@@ -85,7 +85,7 @@ pub struct DiagnosticsConfig {\n pub(crate) fn diagnostics(\n     db: &RootDatabase,\n     config: &DiagnosticsConfig,\n-    resolve: AssistResolveStrategy,\n+    resolve: &AssistResolveStrategy,\n     file_id: FileId,\n ) -> Vec<Diagnostic> {\n     let _p = profile::span(\"diagnostics\");\n@@ -213,7 +213,7 @@ pub(crate) fn diagnostics(\n fn diagnostic_with_fix<D: DiagnosticWithFix>(\n     d: &D,\n     sema: &Semantics<RootDatabase>,\n-    resolve: AssistResolveStrategy,\n+    resolve: &AssistResolveStrategy,\n ) -> Diagnostic {\n     Diagnostic::error(sema.diagnostics_display_range(d.display_source()).range, d.message())\n         .with_fix(d.fix(&sema, resolve))\n@@ -223,7 +223,7 @@ fn diagnostic_with_fix<D: DiagnosticWithFix>(\n fn warning_with_fix<D: DiagnosticWithFix>(\n     d: &D,\n     sema: &Semantics<RootDatabase>,\n-    resolve: AssistResolveStrategy,\n+    resolve: &AssistResolveStrategy,\n ) -> Diagnostic {\n     Diagnostic::hint(sema.diagnostics_display_range(d.display_source()).range, d.message())\n         .with_fix(d.fix(&sema, resolve))"}, {"sha": "15821500f1acc765daddb7d5450335157617de59", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=1679a376f30c5ad8971c0f855074a3f489fee5fa", "patch": "@@ -39,15 +39,15 @@ pub(crate) trait DiagnosticWithFix: Diagnostic {\n     fn fix(\n         &self,\n         sema: &Semantics<RootDatabase>,\n-        _resolve: AssistResolveStrategy,\n+        _resolve: &AssistResolveStrategy,\n     ) -> Option<Assist>;\n }\n \n impl DiagnosticWithFix for UnresolvedModule {\n     fn fix(\n         &self,\n         sema: &Semantics<RootDatabase>,\n-        _resolve: AssistResolveStrategy,\n+        _resolve: &AssistResolveStrategy,\n     ) -> Option<Assist> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         let unresolved_module = self.decl.to_node(&root);\n@@ -71,7 +71,7 @@ impl DiagnosticWithFix for NoSuchField {\n     fn fix(\n         &self,\n         sema: &Semantics<RootDatabase>,\n-        _resolve: AssistResolveStrategy,\n+        _resolve: &AssistResolveStrategy,\n     ) -> Option<Assist> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         missing_record_expr_field_fix(\n@@ -86,7 +86,7 @@ impl DiagnosticWithFix for MissingFields {\n     fn fix(\n         &self,\n         sema: &Semantics<RootDatabase>,\n-        _resolve: AssistResolveStrategy,\n+        _resolve: &AssistResolveStrategy,\n     ) -> Option<Assist> {\n         // Note that although we could add a diagnostics to\n         // fill the missing tuple field, e.g :\n@@ -126,7 +126,7 @@ impl DiagnosticWithFix for MissingOkOrSomeInTailExpr {\n     fn fix(\n         &self,\n         sema: &Semantics<RootDatabase>,\n-        _resolve: AssistResolveStrategy,\n+        _resolve: &AssistResolveStrategy,\n     ) -> Option<Assist> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         let tail_expr = self.expr.to_node(&root);\n@@ -143,7 +143,7 @@ impl DiagnosticWithFix for RemoveThisSemicolon {\n     fn fix(\n         &self,\n         sema: &Semantics<RootDatabase>,\n-        _resolve: AssistResolveStrategy,\n+        _resolve: &AssistResolveStrategy,\n     ) -> Option<Assist> {\n         let root = sema.db.parse_or_expand(self.file)?;\n \n@@ -167,7 +167,7 @@ impl DiagnosticWithFix for IncorrectCase {\n     fn fix(\n         &self,\n         sema: &Semantics<RootDatabase>,\n-        resolve: AssistResolveStrategy,\n+        resolve: &AssistResolveStrategy,\n     ) -> Option<Assist> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         let name_node = self.ident.to_node(&root);\n@@ -191,7 +191,7 @@ impl DiagnosticWithFix for ReplaceFilterMapNextWithFindMap {\n     fn fix(\n         &self,\n         sema: &Semantics<RootDatabase>,\n-        _resolve: AssistResolveStrategy,\n+        _resolve: &AssistResolveStrategy,\n     ) -> Option<Assist> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         let next_expr = self.next_expr.to_node(&root);"}, {"sha": "93fd25dea47d5b3306b2bb6a30fbd2f4db97c24e", "filename": "crates/ide/src/diagnostics/unlinked_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Fide%2Fsrc%2Fdiagnostics%2Funlinked_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Fide%2Fsrc%2Fdiagnostics%2Funlinked_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Funlinked_file.rs?ref=1679a376f30c5ad8971c0f855074a3f489fee5fa", "patch": "@@ -54,7 +54,7 @@ impl DiagnosticWithFix for UnlinkedFile {\n     fn fix(\n         &self,\n         sema: &hir::Semantics<RootDatabase>,\n-        _resolve: AssistResolveStrategy,\n+        _resolve: &AssistResolveStrategy,\n     ) -> Option<Assist> {\n         // If there's an existing module that could add a `mod` item to include the unlinked file,\n         // suggest that as a fix."}, {"sha": "6a88236e3f461af2d3c5b17505f85f26fcb58094", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=1679a376f30c5ad8971c0f855074a3f489fee5fa", "patch": "@@ -522,7 +522,7 @@ impl Analysis {\n         frange: FileRange,\n     ) -> Cancelable<Vec<Assist>> {\n         self.with_db(|db| {\n-            let ssr_assists = ssr::ssr_assists(db, resolve, frange);\n+            let ssr_assists = ssr::ssr_assists(db, &resolve, frange);\n             let mut acc = Assist::get(db, config, resolve, frange);\n             acc.extend(ssr_assists.into_iter());\n             acc\n@@ -536,7 +536,7 @@ impl Analysis {\n         resolve: AssistResolveStrategy,\n         file_id: FileId,\n     ) -> Cancelable<Vec<Diagnostic>> {\n-        self.with_db(|db| diagnostics::diagnostics(db, config, resolve, file_id))\n+        self.with_db(|db| diagnostics::diagnostics(db, config, &resolve, file_id))\n     }\n \n     /// Convenience function to return assists + quick fixes for diagnostics\n@@ -553,9 +553,9 @@ impl Analysis {\n         };\n \n         self.with_db(|db| {\n-            let ssr_assists = ssr::ssr_assists(db, resolve, frange);\n+            let ssr_assists = ssr::ssr_assists(db, &resolve, frange);\n             let diagnostic_assists = if include_fixes {\n-                diagnostics::diagnostics(db, diagnostics_config, resolve, frange.file_id)\n+                diagnostics::diagnostics(db, diagnostics_config, &resolve, frange.file_id)\n                     .into_iter()\n                     .filter_map(|it| it.fix)\n                     .filter(|it| it.target.intersect(frange.range).is_some())"}, {"sha": "1695e52ece8bd8212fd7f0756d86472a07585d3e", "filename": "crates/ide/src/ssr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Fide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Fide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fssr.rs?ref=1679a376f30c5ad8971c0f855074a3f489fee5fa", "patch": "@@ -7,7 +7,7 @@ use ide_db::{base_db::FileRange, label::Label, source_change::SourceChange, Root\n \n pub(crate) fn ssr_assists(\n     db: &RootDatabase,\n-    resolve: AssistResolveStrategy,\n+    resolve: &AssistResolveStrategy,\n     frange: FileRange,\n ) -> Vec<Assist> {\n     let mut ssr_assists = Vec::with_capacity(2);\n@@ -73,7 +73,7 @@ mod tests {\n         let mut local_roots = FxHashSet::default();\n         local_roots.insert(ide_db::base_db::fixture::WORKSPACE);\n         db.set_local_roots_with_durability(Arc::new(local_roots), Durability::HIGH);\n-        ssr_assists(&db, resolve, FileRange { file_id, range: range_or_offset.into() })\n+        ssr_assists(&db, &resolve, FileRange { file_id, range: range_or_offset.into() })\n     }\n \n     #[test]"}, {"sha": "01addffe9491af288a6e9cdd93b4519290125b83", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=1679a376f30c5ad8971c0f855074a3f489fee5fa", "patch": "@@ -17,6 +17,8 @@ mod tests;\n pub mod utils;\n pub mod ast_transform;\n \n+use std::str::FromStr;\n+\n use hir::Semantics;\n use ide_db::base_db::FileRange;\n use ide_db::{label::Label, source_change::SourceChange, RootDatabase};\n@@ -56,6 +58,35 @@ impl AssistKind {\n             _ => return false,\n         }\n     }\n+\n+    pub fn name(&self) -> &str {\n+        match self {\n+            AssistKind::None => \"None\",\n+            AssistKind::QuickFix => \"QuickFix\",\n+            AssistKind::Generate => \"Generate\",\n+            AssistKind::Refactor => \"Refactor\",\n+            AssistKind::RefactorExtract => \"RefactorExtract\",\n+            AssistKind::RefactorInline => \"RefactorInline\",\n+            AssistKind::RefactorRewrite => \"RefactorRewrite\",\n+        }\n+    }\n+}\n+\n+impl FromStr for AssistKind {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"None\" => Ok(AssistKind::None),\n+            \"QuickFix\" => Ok(AssistKind::QuickFix),\n+            \"Generate\" => Ok(AssistKind::Generate),\n+            \"Refactor\" => Ok(AssistKind::Refactor),\n+            \"RefactorExtract\" => Ok(AssistKind::RefactorExtract),\n+            \"RefactorInline\" => Ok(AssistKind::RefactorInline),\n+            \"RefactorRewrite\" => Ok(AssistKind::RefactorRewrite),\n+            unknown => Err(format!(\"Unknown AssistKind: '{}'\", unknown)),\n+        }\n+    }\n }\n \n /// Unique identifier of the assist, should not be shown to the user\n@@ -64,19 +95,21 @@ impl AssistKind {\n pub struct AssistId(pub &'static str, pub AssistKind);\n \n // TODO kb docs\n-#[derive(Debug, Clone, Copy)]\n+#[derive(Debug, Clone)]\n pub enum AssistResolveStrategy {\n     None,\n     All,\n-    Single(AssistId),\n+    Single(String, AssistKind),\n }\n \n impl AssistResolveStrategy {\n     pub fn should_resolve(&self, id: &AssistId) -> bool {\n         match self {\n             AssistResolveStrategy::None => false,\n             AssistResolveStrategy::All => true,\n-            AssistResolveStrategy::Single(id_to_resolve) => id_to_resolve == id,\n+            AssistResolveStrategy::Single(id_to_resolve, kind) => {\n+                id_to_resolve == id.0 && kind == &id.1\n+            }\n         }\n     }\n }"}, {"sha": "cd6bbf30333bf05c7f49feb5a9705a276c59984a", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=1679a376f30c5ad8971c0f855074a3f489fee5fa", "patch": "@@ -8,9 +8,9 @@ use std::{\n };\n \n use ide::{\n-    AnnotationConfig, AssistResolveStrategy, FileId, FilePosition, FileRange, HoverAction,\n-    HoverGotoTypeData, Query, RangeInfo, Runnable, RunnableKind, SearchScope, SourceChange,\n-    TextEdit,\n+    AnnotationConfig, AssistKind, AssistResolveStrategy, FileId, FilePosition, FileRange,\n+    HoverAction, HoverGotoTypeData, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n+    SourceChange, TextEdit,\n };\n use ide_db::SymbolKind;\n use itertools::Itertools;\n@@ -28,7 +28,7 @@ use lsp_types::{\n use project_model::TargetKind;\n use serde::{Deserialize, Serialize};\n use serde_json::to_value;\n-use stdx::{format_to, split_once};\n+use stdx::format_to;\n use syntax::{algo, ast, AstNode, TextRange, TextSize};\n \n use crate::{\n@@ -1058,18 +1058,27 @@ pub(crate) fn handle_code_action_resolve(\n         .only\n         .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n \n+    let assist_kind: AssistKind = match params.kind.parse() {\n+        Ok(kind) => kind,\n+        Err(e) => {\n+            return Err(LspError::new(\n+                ErrorCode::InvalidParams as i32,\n+                format!(\"For the assist to resolve, failed to parse the kind: {}\", e),\n+            )\n+            .into())\n+        }\n+    };\n+\n     let assists = snap.analysis.assists_with_fixes(\n         &assists_config,\n         &snap.config.diagnostics(),\n-        // TODO kb pass a certain id\n-        AssistResolveStrategy::All,\n+        AssistResolveStrategy::Single(params.id.clone(), assist_kind),\n         frange,\n     )?;\n \n-    let (id, index) = split_once(&params.id, ':').unwrap();\n-    let index = index.parse::<usize>().unwrap();\n-    let assist = &assists[index];\n-    assert!(assist.id.0 == id);\n+    let assist = &assists[params.index];\n+    assert!(assist.id.0 == params.id);\n+    assert!(assist.id.1 == assist_kind);\n     let edit = to_proto::code_action(&snap, assist.clone(), None)?.edit;\n     code_action.edit = edit;\n     Ok(code_action)"}, {"sha": "292aedc9c2cdd4c81ada8cd4017d487b21301411", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=1679a376f30c5ad8971c0f855074a3f489fee5fa", "patch": "@@ -303,6 +303,8 @@ pub struct CodeAction {\n pub struct CodeActionData {\n     pub code_action_params: lsp_types::CodeActionParams,\n     pub id: String,\n+    pub kind: String,\n+    pub index: usize,\n }\n \n #[derive(Debug, Eq, PartialEq, Clone, Default, Deserialize, Serialize)]"}, {"sha": "62e16680b4a6d6747118ff9735c23ceec6ae4d7e", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1679a376f30c5ad8971c0f855074a3f489fee5fa/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=1679a376f30c5ad8971c0f855074a3f489fee5fa", "patch": "@@ -897,8 +897,10 @@ pub(crate) fn code_action(\n         (Some(it), _) => res.edit = Some(snippet_workspace_edit(snap, it)?),\n         (None, Some((index, code_action_params))) => {\n             res.data = Some(lsp_ext::CodeActionData {\n-                id: format!(\"{}:{}\", assist.id.0, index.to_string()),\n+                id: assist.id.0.to_string(),\n                 code_action_params,\n+                kind: assist.id.1.name().to_string(),\n+                index,\n             });\n         }\n         (None, None) => {"}]}