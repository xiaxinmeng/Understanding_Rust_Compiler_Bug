{"sha": "6a98383fa5fb307f657edf92143608179fab8734", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOTgzODNmYTVmYjMwN2Y2NTdlZGY5MjE0MzYwODE3OWZhYjg3MzQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-20T22:54:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-20T22:54:39Z"}, "message": "Merge #10299\n\n10299: minor: Rename some assists r=Veykril a=Veykril\n\nTrying to make our assist names a bit more uniform\r\n`fill_match_arms` -> `add_missing_match_arms`\r\n`infer_function_return_type` -> `add_return_type`\r\n`replace_impl_trait_with_generic` -> `introduce_named_generic`\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "0adeafc6fe8d72e1e2bb9c10d8eb7c650895f718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0adeafc6fe8d72e1e2bb9c10d8eb7c650895f718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a98383fa5fb307f657edf92143608179fab8734", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhSREvCRBK7hj4Ov3rIwAAbM4IALGYVlIoBkAN5GTmZb6Hb0fW\nMB0vxcSI/a7L2ob9KS8VveS3yEMT6vA9gI+/eot6FXexp64fVE/2lllGkt5gYgPc\nhM/FKrTT29fCDBZmBWsMyH+mANcxkzKFADUa5dHOC/er0KWHl3MMhXknGdBLfpYk\nNAOe0A4alIQw7ceBn/jK4siIP0yWArobp8fPBfz31TJe38PdEQ7Li+YFGUNssmVM\nE5esOUD7z+qoKYJtH/CeZRw+aHzQMRPQQoFUIpdN6xNSmQQB8dwOqUVj4RDmhfm3\n+lqtpfnA+Ee+wwz2vHsBMNS5hNIRb7bDuYv7OCUSwJmzZak9STSHQnnp7Fv44GM=\n=9o9y\n-----END PGP SIGNATURE-----\n", "payload": "tree 0adeafc6fe8d72e1e2bb9c10d8eb7c650895f718\nparent f1d7f98ed07b9934286b9c4809dd4d7a47537879\nparent 8b2be8572f0854b0a8fed9ee3aa1901b24b2851a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1632178479 +0000\ncommitter GitHub <noreply@github.com> 1632178479 +0000\n\nMerge #10299\n\n10299: minor: Rename some assists r=Veykril a=Veykril\n\nTrying to make our assist names a bit more uniform\r\n`fill_match_arms` -> `add_missing_match_arms`\r\n`infer_function_return_type` -> `add_return_type`\r\n`replace_impl_trait_with_generic` -> `introduce_named_generic`\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a98383fa5fb307f657edf92143608179fab8734", "html_url": "https://github.com/rust-lang/rust/commit/6a98383fa5fb307f657edf92143608179fab8734", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a98383fa5fb307f657edf92143608179fab8734/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1d7f98ed07b9934286b9c4809dd4d7a47537879", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d7f98ed07b9934286b9c4809dd4d7a47537879", "html_url": "https://github.com/rust-lang/rust/commit/f1d7f98ed07b9934286b9c4809dd4d7a47537879"}, {"sha": "8b2be8572f0854b0a8fed9ee3aa1901b24b2851a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b2be8572f0854b0a8fed9ee3aa1901b24b2851a", "html_url": "https://github.com/rust-lang/rust/commit/8b2be8572f0854b0a8fed9ee3aa1901b24b2851a"}], "stats": {"total": 297, "additions": 147, "deletions": 150}, "files": [{"sha": "cdbd8ac183bb4d30350d46649982135e38805211", "filename": "crates/ide_assists/src/handlers/add_missing_match_arms.rs", "status": "renamed", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/6a98383fa5fb307f657edf92143608179fab8734/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a98383fa5fb307f657edf92143608179fab8734/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=6a98383fa5fb307f657edf92143608179fab8734", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n-// Assist: fill_match_arms\n+// Assist: add_missing_match_arms\n //\n // Adds missing clauses to a `match` expression.\n //\n@@ -36,7 +36,7 @@ use crate::{\n //     }\n // }\n // ```\n-pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let match_expr = ctx.find_node_at_offset_with_descend::<ast::MatchExpr>()?;\n     let match_arm_list = match_expr.match_arm_list()?;\n \n@@ -105,7 +105,7 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         let missing_pats = variants_of_enums\n             .into_iter()\n             .multi_cartesian_product()\n-            .inspect(|_| cov_mark::hit!(fill_match_arms_lazy_computation))\n+            .inspect(|_| cov_mark::hit!(add_missing_match_arms_lazy_computation))\n             .map(|variants| {\n                 let patterns =\n                     variants.into_iter().filter_map(|variant| build_pat(ctx.db(), module, variant));\n@@ -123,7 +123,7 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n \n     let target = ctx.sema.original_range(match_expr.syntax()).range;\n     acc.add(\n-        AssistId(\"fill_match_arms\", AssistKind::QuickFix),\n+        AssistId(\"add_missing_match_arms\", AssistKind::QuickFix),\n         \"Fill match arms\",\n         target,\n         |builder| {\n@@ -146,7 +146,7 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n                 if is_empty_expr {\n                     arm.remove();\n                 } else {\n-                    cov_mark::hit!(fill_match_arms_empty_expr);\n+                    cov_mark::hit!(add_missing_match_arms_empty_expr);\n                 }\n             }\n             let mut first_new_arm = None;\n@@ -283,12 +283,12 @@ mod tests {\n         check_assist, check_assist_not_applicable, check_assist_target, check_assist_unresolved,\n     };\n \n-    use super::fill_match_arms;\n+    use super::add_missing_match_arms;\n \n     #[test]\n     fn all_match_arms_provided() {\n         check_assist_not_applicable(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A {\n     As,\n@@ -309,7 +309,7 @@ fn main() {\n     #[test]\n     fn all_boolean_match_arms_provided() {\n         check_assist_not_applicable(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n fn foo(a: bool) {\n     match a$0 {\n@@ -326,7 +326,7 @@ fn foo(a: bool) {\n         // for now this case is not handled, although it potentially could be\n         // in the future\n         check_assist_not_applicable(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n fn main() {\n     match (0, false)$0 {\n@@ -337,9 +337,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn fill_match_arms_boolean() {\n+    fn add_missing_match_arms_boolean() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n fn foo(a: bool) {\n     match a$0 {\n@@ -360,7 +360,7 @@ fn foo(a: bool) {\n     #[test]\n     fn partial_fill_boolean() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n fn foo(a: bool) {\n     match a$0 {\n@@ -382,7 +382,7 @@ fn foo(a: bool) {\n     #[test]\n     fn all_boolean_tuple_arms_provided() {\n         check_assist_not_applicable(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n fn foo(a: bool) {\n     match (a, a)$0 {\n@@ -399,7 +399,7 @@ fn foo(a: bool) {\n     #[test]\n     fn fill_boolean_tuple() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n fn foo(a: bool) {\n     match (a, a)$0 {\n@@ -422,7 +422,7 @@ fn foo(a: bool) {\n     #[test]\n     fn partial_fill_boolean_tuple() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n fn foo(a: bool) {\n     match (a, a)$0 {\n@@ -446,7 +446,7 @@ fn foo(a: bool) {\n     #[test]\n     fn partial_fill_record_tuple() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A {\n     As,\n@@ -480,7 +480,7 @@ fn main() {\n     #[test]\n     fn partial_fill_option() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n //- minicore: option\n fn main() {\n@@ -503,7 +503,7 @@ fn main() {\n     #[test]\n     fn partial_fill_or_pat() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A { As, Bs, Cs(Option<i32>) }\n fn main() {\n@@ -527,7 +527,7 @@ fn main() {\n     #[test]\n     fn partial_fill() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A { As, Bs, Cs, Ds(String), Es(B) }\n enum B { Xs, Ys }\n@@ -558,7 +558,7 @@ fn main() {\n     #[test]\n     fn partial_fill_bind_pat() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A { As, Bs, Cs(Option<i32>) }\n fn main() {\n@@ -582,9 +582,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn fill_match_arms_empty_body() {\n+    fn add_missing_match_arms_empty_body() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A { As, Bs, Cs(String), Ds(String, String), Es { x: usize, y: usize } }\n \n@@ -611,9 +611,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn fill_match_arms_tuple_of_enum() {\n+    fn add_missing_match_arms_tuple_of_enum() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A { One, Two }\n enum B { One, Two }\n@@ -643,9 +643,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn fill_match_arms_tuple_of_enum_ref() {\n+    fn add_missing_match_arms_tuple_of_enum_ref() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A { One, Two }\n enum B { One, Two }\n@@ -675,9 +675,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn fill_match_arms_tuple_of_enum_partial() {\n+    fn add_missing_match_arms_tuple_of_enum_partial() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A { One, Two }\n enum B { One, Two }\n@@ -709,9 +709,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn fill_match_arms_tuple_of_enum_partial_with_wildcards() {\n+    fn add_missing_match_arms_tuple_of_enum_partial_with_wildcards() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n //- minicore: option\n fn main() {\n@@ -738,10 +738,10 @@ fn main() {\n     }\n \n     #[test]\n-    fn fill_match_arms_partial_with_deep_pattern() {\n+    fn add_missing_match_arms_partial_with_deep_pattern() {\n         // Fixme: cannot handle deep patterns\n         check_assist_not_applicable(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n //- minicore: option\n fn main() {\n@@ -755,9 +755,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn fill_match_arms_tuple_of_enum_not_applicable() {\n+    fn add_missing_match_arms_tuple_of_enum_not_applicable() {\n         check_assist_not_applicable(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A { One, Two }\n enum B { One, Two }\n@@ -777,9 +777,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn fill_match_arms_single_element_tuple_of_enum() {\n+    fn add_missing_match_arms_single_element_tuple_of_enum() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A { One, Two }\n \n@@ -806,7 +806,7 @@ fn main() {\n     #[test]\n     fn test_fill_match_arm_refs() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A { As }\n \n@@ -827,7 +827,7 @@ fn foo(a: &A) {\n         );\n \n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A {\n     Es { x: usize, y: usize }\n@@ -853,9 +853,9 @@ fn foo(a: &mut A) {\n     }\n \n     #[test]\n-    fn fill_match_arms_target() {\n+    fn add_missing_match_arms_target() {\n         check_assist_target(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum E { X, Y }\n \n@@ -868,9 +868,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn fill_match_arms_trivial_arm() {\n+    fn add_missing_match_arms_trivial_arm() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum E { X, Y }\n \n@@ -894,9 +894,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn fill_match_arms_qualifies_path() {\n+    fn add_missing_match_arms_qualifies_path() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n mod foo { pub enum E { X, Y } }\n use foo::E::X;\n@@ -922,9 +922,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn fill_match_arms_preserves_comments() {\n+    fn add_missing_match_arms_preserves_comments() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A { One, Two }\n fn foo(a: A) {\n@@ -950,9 +950,9 @@ fn foo(a: A) {\n     }\n \n     #[test]\n-    fn fill_match_arms_preserves_comments_empty() {\n+    fn add_missing_match_arms_preserves_comments_empty() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A { One, Two }\n fn foo(a: A) {\n@@ -975,9 +975,9 @@ fn foo(a: A) {\n     }\n \n     #[test]\n-    fn fill_match_arms_placeholder() {\n+    fn add_missing_match_arms_placeholder() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A { One, Two, }\n fn foo(a: A) {\n@@ -1002,7 +1002,7 @@ fn foo(a: A) {\n     fn option_order() {\n         cov_mark::check!(option_order);\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n //- minicore: option\n fn foo(opt: Option<i32>) {\n@@ -1024,7 +1024,7 @@ fn foo(opt: Option<i32>) {\n     #[test]\n     fn works_inside_macro_call() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n macro_rules! m { ($expr:expr) => {$expr}}\n enum Test {\n@@ -1057,9 +1057,9 @@ fn foo(t: Test) {\n     #[test]\n     fn lazy_computation() {\n         // Computing a single missing arm is enough to determine applicability of the assist.\n-        cov_mark::check_count!(fill_match_arms_lazy_computation, 1);\n+        cov_mark::check_count!(add_missing_match_arms_lazy_computation, 1);\n         check_assist_unresolved(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n enum A { One, Two, }\n fn foo(tuple: (A, A)) {\n@@ -1072,7 +1072,7 @@ fn foo(tuple: (A, A)) {\n     #[test]\n     fn adds_comma_before_new_arms() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n fn foo(t: bool) {\n     match $0t {\n@@ -1092,7 +1092,7 @@ fn foo(t: bool) {\n     #[test]\n     fn does_not_add_extra_comma() {\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n fn foo(t: bool) {\n     match $0t {\n@@ -1111,9 +1111,9 @@ fn foo(t: bool) {\n \n     #[test]\n     fn does_not_remove_catch_all_with_non_empty_expr() {\n-        cov_mark::check!(fill_match_arms_empty_expr);\n+        cov_mark::check!(add_missing_match_arms_empty_expr);\n         check_assist(\n-            fill_match_arms,\n+            add_missing_match_arms,\n             r#\"\n fn foo(t: bool) {\n     match $0t {", "previous_filename": "crates/ide_assists/src/handlers/fill_match_arms.rs"}, {"sha": "ce5981b406e5e0af48309d8ec6e080a5c97bc223", "filename": "crates/ide_assists/src/handlers/add_return_type.rs", "status": "renamed", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6a98383fa5fb307f657edf92143608179fab8734/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a98383fa5fb307f657edf92143608179fab8734/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs?ref=6a98383fa5fb307f657edf92143608179fab8734", "patch": "@@ -3,7 +3,7 @@ use syntax::{ast, AstNode, TextRange, TextSize};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n-// Assist: infer_function_return_type\n+// Assist: add_return_type\n //\n // Adds the return type to a function or closure inferred from its tail expression if it doesn't have a return\n // type specified. This assists is useable in a functions or closures tail expression or return type position.\n@@ -15,7 +15,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n // fn foo() -> i32 { 42i32 }\n // ```\n-pub(crate) fn infer_function_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+pub(crate) fn add_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let (fn_type, tail_expr, builder_edit_pos) = extract_tail(ctx)?;\n     let module = ctx.sema.scope(tail_expr.syntax()).module()?;\n     let ty = ctx.sema.type_of_expr(&tail_expr)?.adjusted();\n@@ -25,7 +25,7 @@ pub(crate) fn infer_function_return_type(acc: &mut Assists, ctx: &AssistContext)\n     let ty = ty.display_source_code(ctx.db(), module.into()).ok()?;\n \n     acc.add(\n-        AssistId(\"infer_function_return_type\", AssistKind::RefactorRewrite),\n+        AssistId(\"add_return_type\", AssistKind::RefactorRewrite),\n         match fn_type {\n             FnType::Function => \"Add this function's return type\",\n             FnType::Closure { .. } => \"Add this closure's return type\",\n@@ -129,7 +129,7 @@ mod tests {\n     fn infer_return_type_specified_inferred() {\n         cov_mark::check!(existing_infer_ret_type);\n         check_assist(\n-            infer_function_return_type,\n+            add_return_type,\n             r#\"fn foo() -> $0_ {\n     45\n }\"#,\n@@ -143,7 +143,7 @@ mod tests {\n     fn infer_return_type_specified_inferred_closure() {\n         cov_mark::check!(existing_infer_ret_type_closure);\n         check_assist(\n-            infer_function_return_type,\n+            add_return_type,\n             r#\"fn foo() {\n     || -> _ {$045};\n }\"#,\n@@ -157,7 +157,7 @@ mod tests {\n     fn infer_return_type_cursor_at_return_type_pos() {\n         cov_mark::check!(cursor_in_ret_position);\n         check_assist(\n-            infer_function_return_type,\n+            add_return_type,\n             r#\"fn foo() $0{\n     45\n }\"#,\n@@ -171,7 +171,7 @@ mod tests {\n     fn infer_return_type_cursor_at_return_type_pos_closure() {\n         cov_mark::check!(cursor_in_ret_position_closure);\n         check_assist(\n-            infer_function_return_type,\n+            add_return_type,\n             r#\"fn foo() {\n     || $045\n }\"#,\n@@ -185,7 +185,7 @@ mod tests {\n     fn infer_return_type() {\n         cov_mark::check!(cursor_on_tail);\n         check_assist(\n-            infer_function_return_type,\n+            add_return_type,\n             r#\"fn foo() {\n     45$0\n }\"#,\n@@ -198,7 +198,7 @@ mod tests {\n     #[test]\n     fn infer_return_type_nested() {\n         check_assist(\n-            infer_function_return_type,\n+            add_return_type,\n             r#\"fn foo() {\n     if true {\n         3$0\n@@ -220,7 +220,7 @@ mod tests {\n     fn not_applicable_ret_type_specified() {\n         cov_mark::check!(existing_ret_type);\n         check_assist_not_applicable(\n-            infer_function_return_type,\n+            add_return_type,\n             r#\"fn foo() -> i32 {\n     ( 45$0 + 32 ) * 123\n }\"#,\n@@ -230,7 +230,7 @@ mod tests {\n     #[test]\n     fn not_applicable_non_tail_expr() {\n         check_assist_not_applicable(\n-            infer_function_return_type,\n+            add_return_type,\n             r#\"fn foo() {\n     let x = $03;\n     ( 45 + 32 ) * 123\n@@ -241,7 +241,7 @@ mod tests {\n     #[test]\n     fn not_applicable_unit_return_type() {\n         check_assist_not_applicable(\n-            infer_function_return_type,\n+            add_return_type,\n             r#\"fn foo() {\n     ($0)\n }\"#,\n@@ -252,7 +252,7 @@ mod tests {\n     fn infer_return_type_closure_block() {\n         cov_mark::check!(cursor_on_tail_closure);\n         check_assist(\n-            infer_function_return_type,\n+            add_return_type,\n             r#\"fn foo() {\n     |x: i32| {\n         x$0\n@@ -269,7 +269,7 @@ mod tests {\n     #[test]\n     fn infer_return_type_closure() {\n         check_assist(\n-            infer_function_return_type,\n+            add_return_type,\n             r#\"fn foo() {\n     |x: i32| { x$0 };\n }\"#,\n@@ -283,7 +283,7 @@ mod tests {\n     fn infer_return_type_closure_wrap() {\n         cov_mark::check!(wrap_closure_non_block_expr);\n         check_assist(\n-            infer_function_return_type,\n+            add_return_type,\n             r#\"fn foo() {\n     |x: i32| x$0;\n }\"#,\n@@ -296,7 +296,7 @@ mod tests {\n     #[test]\n     fn infer_return_type_nested_closure() {\n         check_assist(\n-            infer_function_return_type,\n+            add_return_type,\n             r#\"fn foo() {\n     || {\n         if true {\n@@ -322,7 +322,7 @@ mod tests {\n     fn not_applicable_ret_type_specified_closure() {\n         cov_mark::check!(existing_ret_type_closure);\n         check_assist_not_applicable(\n-            infer_function_return_type,\n+            add_return_type,\n             r#\"fn foo() {\n     || -> i32 { 3$0 }\n }\"#,\n@@ -332,7 +332,7 @@ mod tests {\n     #[test]\n     fn not_applicable_non_tail_expr_closure() {\n         check_assist_not_applicable(\n-            infer_function_return_type,\n+            add_return_type,\n             r#\"fn foo() {\n     || -> i32 {\n         let x = 3$0;", "previous_filename": "crates/ide_assists/src/handlers/infer_function_return_type.rs"}, {"sha": "636b05dca9aeefae991d46750e3b4d6b3cde6c82", "filename": "crates/ide_assists/src/handlers/introduce_named_generic.rs", "status": "renamed", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6a98383fa5fb307f657edf92143608179fab8734/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a98383fa5fb307f657edf92143608179fab8734/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_generic.rs?ref=6a98383fa5fb307f657edf92143608179fab8734", "patch": "@@ -5,7 +5,7 @@ use syntax::{\n \n use crate::{utils::suggest_name, AssistContext, AssistId, AssistKind, Assists};\n \n-// Assist: replace_impl_trait_with_generic\n+// Assist: introduce_named_generic\n //\n // Replaces `impl Trait` function argument with the named generic.\n //\n@@ -16,10 +16,7 @@ use crate::{utils::suggest_name, AssistContext, AssistId, AssistKind, Assists};\n // ```\n // fn foo<B: Bar>(bar: B) {}\n // ```\n-pub(crate) fn replace_impl_trait_with_generic(\n-    acc: &mut Assists,\n-    ctx: &AssistContext,\n-) -> Option<()> {\n+pub(crate) fn introduce_named_generic(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let impl_trait_type = ctx.find_node_at_offset::<ast::ImplTraitType>()?;\n     let param = impl_trait_type.syntax().parent().and_then(ast::Param::cast)?;\n     let fn_ = param.syntax().ancestors().find_map(ast::Fn::cast)?;\n@@ -28,7 +25,7 @@ pub(crate) fn replace_impl_trait_with_generic(\n \n     let target = fn_.syntax().text_range();\n     acc.add(\n-        AssistId(\"replace_impl_trait_with_generic\", AssistKind::RefactorRewrite),\n+        AssistId(\"introduce_named_generic\", AssistKind::RefactorRewrite),\n         \"Replace impl trait with generic\",\n         target,\n         |edit| {\n@@ -54,9 +51,9 @@ mod tests {\n     use crate::tests::check_assist;\n \n     #[test]\n-    fn replace_impl_trait_with_generic_params() {\n+    fn introduce_named_generic_params() {\n         check_assist(\n-            replace_impl_trait_with_generic,\n+            introduce_named_generic,\n             r#\"fn foo<G>(bar: $0impl Bar) {}\"#,\n             r#\"fn foo<G, B: Bar>(bar: B) {}\"#,\n         );\n@@ -65,7 +62,7 @@ mod tests {\n     #[test]\n     fn replace_impl_trait_without_generic_params() {\n         check_assist(\n-            replace_impl_trait_with_generic,\n+            introduce_named_generic,\n             r#\"fn foo(bar: $0impl Bar) {}\"#,\n             r#\"fn foo<B: Bar>(bar: B) {}\"#,\n         );\n@@ -74,7 +71,7 @@ mod tests {\n     #[test]\n     fn replace_two_impl_trait_with_generic_params() {\n         check_assist(\n-            replace_impl_trait_with_generic,\n+            introduce_named_generic,\n             r#\"fn foo<G>(foo: impl Foo, bar: $0impl Bar) {}\"#,\n             r#\"fn foo<G, B: Bar>(foo: impl Foo, bar: B) {}\"#,\n         );\n@@ -83,7 +80,7 @@ mod tests {\n     #[test]\n     fn replace_impl_trait_with_empty_generic_params() {\n         check_assist(\n-            replace_impl_trait_with_generic,\n+            introduce_named_generic,\n             r#\"fn foo<>(bar: $0impl Bar) {}\"#,\n             r#\"fn foo<B: Bar>(bar: B) {}\"#,\n         );\n@@ -92,7 +89,7 @@ mod tests {\n     #[test]\n     fn replace_impl_trait_with_empty_multiline_generic_params() {\n         check_assist(\n-            replace_impl_trait_with_generic,\n+            introduce_named_generic,\n             r#\"\n fn foo<\n >(bar: $0impl Bar) {}\n@@ -109,7 +106,7 @@ fn foo<B: Bar\n         // FIXME: This is wrong, we should pick a different name if the one we\n         // want is already bound.\n         check_assist(\n-            replace_impl_trait_with_generic,\n+            introduce_named_generic,\n             r#\"fn foo<B>(bar: $0impl Bar) {}\"#,\n             r#\"fn foo<B, B: Bar>(bar: B) {}\"#,\n         );\n@@ -118,7 +115,7 @@ fn foo<B: Bar\n     #[test]\n     fn replace_impl_trait_with_multiline_generic_params() {\n         check_assist(\n-            replace_impl_trait_with_generic,\n+            introduce_named_generic,\n             r#\"\n fn foo<\n     G: Foo,\n@@ -139,7 +136,7 @@ fn foo<\n     #[test]\n     fn replace_impl_trait_multiple() {\n         check_assist(\n-            replace_impl_trait_with_generic,\n+            introduce_named_generic,\n             r#\"fn foo(bar: $0impl Foo + Bar) {}\"#,\n             r#\"fn foo<F: Foo + Bar>(bar: F) {}\"#,\n         );", "previous_filename": "crates/ide_assists/src/handlers/replace_impl_trait_with_generic.rs"}, {"sha": "6632b7e78d4dab7c9513376c2be7179739e0d2cd", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a98383fa5fb307f657edf92143608179fab8734/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a98383fa5fb307f657edf92143608179fab8734/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=6a98383fa5fb307f657edf92143608179fab8734", "patch": "@@ -125,7 +125,7 @@ mod handlers {\n     mod extract_struct_from_enum_variant;\n     mod extract_type_alias;\n     mod extract_variable;\n-    mod fill_match_arms;\n+    mod add_missing_match_arms;\n     mod fix_visibility;\n     mod flip_binexpr;\n     mod flip_comma;\n@@ -143,7 +143,7 @@ mod handlers {\n     mod generate_is_empty_from_len;\n     mod generate_new;\n     mod generate_setter;\n-    mod infer_function_return_type;\n+    mod add_return_type;\n     mod inline_call;\n     mod inline_local_variable;\n     mod introduce_named_lifetime;\n@@ -164,7 +164,7 @@ mod handlers {\n     mod replace_derive_with_manual_impl;\n     mod replace_for_loop_with_for_each;\n     mod replace_if_let_with_match;\n-    mod replace_impl_trait_with_generic;\n+    mod introduce_named_generic;\n     mod replace_let_with_if_let;\n     mod replace_qualified_name_with_use;\n     mod replace_string_with_char;\n@@ -179,7 +179,9 @@ mod handlers {\n         &[\n             // These are alphabetic for the foolish consistency\n             add_explicit_type::add_explicit_type,\n+            add_missing_match_arms::add_missing_match_arms,\n             add_lifetime_to_type::add_lifetime_to_type,\n+            add_return_type::add_return_type,\n             add_turbo_fish::add_turbo_fish,\n             apply_demorgan::apply_demorgan,\n             auto_import::auto_import,\n@@ -197,7 +199,6 @@ mod handlers {\n             expand_glob_import::expand_glob_import,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,\n             extract_type_alias::extract_type_alias,\n-            fill_match_arms::fill_match_arms,\n             fix_visibility::fix_visibility,\n             flip_binexpr::flip_binexpr,\n             flip_comma::flip_comma,\n@@ -214,9 +215,9 @@ mod handlers {\n             generate_impl::generate_impl,\n             generate_is_empty_from_len::generate_is_empty_from_len,\n             generate_new::generate_new,\n-            infer_function_return_type::infer_function_return_type,\n             inline_call::inline_call,\n             inline_local_variable::inline_local_variable,\n+            introduce_named_generic::introduce_named_generic,\n             introduce_named_lifetime::introduce_named_lifetime,\n             invert_if::invert_if,\n             merge_imports::merge_imports,\n@@ -239,7 +240,6 @@ mod handlers {\n             replace_for_loop_with_for_each::replace_for_loop_with_for_each,\n             replace_if_let_with_match::replace_if_let_with_match,\n             replace_if_let_with_match::replace_match_with_if_let,\n-            replace_impl_trait_with_generic::replace_impl_trait_with_generic,\n             replace_let_with_if_let::replace_let_with_if_let,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n             sort_items::sort_items,"}, {"sha": "252f375d857a7fff03aa2a503c37527ea9b23f22", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/6a98383fa5fb307f657edf92143608179fab8734/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a98383fa5fb307f657edf92143608179fab8734/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=6a98383fa5fb307f657edf92143608179fab8734", "patch": "@@ -121,6 +121,45 @@ struct Point<'a> {\n     )\n }\n \n+#[test]\n+fn doctest_add_missing_match_arms() {\n+    check_doc_test(\n+        \"add_missing_match_arms\",\n+        r#####\"\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        $0\n+    }\n+}\n+\"#####,\n+        r#####\"\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        $0Action::Move { distance } => todo!(),\n+        Action::Stop => todo!(),\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_add_return_type() {\n+    check_doc_test(\n+        \"add_return_type\",\n+        r#####\"\n+fn foo() { 4$02i32 }\n+\"#####,\n+        r#####\"\n+fn foo() -> i32 { 42i32 }\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_add_turbo_fish() {\n     check_doc_test(\n@@ -516,32 +555,6 @@ fn main() {\n     )\n }\n \n-#[test]\n-fn doctest_fill_match_arms() {\n-    check_doc_test(\n-        \"fill_match_arms\",\n-        r#####\"\n-enum Action { Move { distance: u32 }, Stop }\n-\n-fn handle(action: Action) {\n-    match action {\n-        $0\n-    }\n-}\n-\"#####,\n-        r#####\"\n-enum Action { Move { distance: u32 }, Stop }\n-\n-fn handle(action: Action) {\n-    match action {\n-        $0Action::Move { distance } => todo!(),\n-        Action::Stop => todo!(),\n-    }\n-}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_fix_visibility() {\n     check_doc_test(\n@@ -994,19 +1007,6 @@ impl Person {\n     )\n }\n \n-#[test]\n-fn doctest_infer_function_return_type() {\n-    check_doc_test(\n-        \"infer_function_return_type\",\n-        r#####\"\n-fn foo() { 4$02i32 }\n-\"#####,\n-        r#####\"\n-fn foo() -> i32 { 42i32 }\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_inline_call() {\n     check_doc_test(\n@@ -1046,6 +1046,19 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_introduce_named_generic() {\n+    check_doc_test(\n+        \"introduce_named_generic\",\n+        r#####\"\n+fn foo(bar: $0impl Bar) {}\n+\"#####,\n+        r#####\"\n+fn foo<B: Bar>(bar: B) {}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_introduce_named_lifetime() {\n     check_doc_test(\n@@ -1528,19 +1541,6 @@ fn handle(action: Action) {\n     )\n }\n \n-#[test]\n-fn doctest_replace_impl_trait_with_generic() {\n-    check_doc_test(\n-        \"replace_impl_trait_with_generic\",\n-        r#####\"\n-fn foo(bar: $0impl Bar) {}\n-\"#####,\n-        r#####\"\n-fn foo<B: Bar>(bar: B) {}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_replace_let_with_if_let() {\n     check_doc_test("}, {"sha": "e98f207c1d64bd59c5eeef671412e794932a8c0f", "filename": "crates/rust-analyzer/tests/slow-tests/tidy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a98383fa5fb307f657edf92143608179fab8734/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a98383fa5fb307f657edf92143608179fab8734/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs?ref=6a98383fa5fb307f657edf92143608179fab8734", "patch": "@@ -273,7 +273,7 @@ fn check_todo(path: &Path, text: &str) {\n         // Some of our assists generate `todo!()`.\n         \"handlers/add_turbo_fish.rs\",\n         \"handlers/generate_function.rs\",\n-        \"handlers/fill_match_arms.rs\",\n+        \"handlers/add_missing_match_arms.rs\",\n         \"handlers/replace_derive_with_manual_impl.rs\",\n         // To support generating `todo!()` in assists, we have `expr_todo()` in\n         // `ast::make`."}]}