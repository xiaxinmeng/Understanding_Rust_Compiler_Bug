{"sha": "f2980e71d936be7a39b9a472664363d93f2c7fd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOTgwZTcxZDkzNmJlN2EzOWI5YTQ3MjY2NDM2M2Q5M2YyYzdmZDg=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-15T14:21:50Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-15T14:41:34Z"}, "message": "Add fast path for is_freeze", "tree": {"sha": "4b3fafdc1e883db7e3bafc1449617c86647625a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b3fafdc1e883db7e3bafc1449617c86647625a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2980e71d936be7a39b9a472664363d93f2c7fd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2980e71d936be7a39b9a472664363d93f2c7fd8", "html_url": "https://github.com/rust-lang/rust/commit/f2980e71d936be7a39b9a472664363d93f2c7fd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2980e71d936be7a39b9a472664363d93f2c7fd8/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0663f253757ab0d360f540e9d7bc7882db1dc8bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0663f253757ab0d360f540e9d7bc7882db1dc8bd", "html_url": "https://github.com/rust-lang/rust/commit/0663f253757ab0d360f540e9d7bc7882db1dc8bd"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "f27b66314f9e618e1e737f4c2296f70adc1fd79b", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f2980e71d936be7a39b9a472664363d93f2c7fd8/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2980e71d936be7a39b9a472664363d93f2c7fd8/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=f2980e71d936be7a39b9a472664363d93f2c7fd8", "patch": "@@ -697,7 +697,7 @@ impl<'tcx> ty::TyS<'tcx> {\n     /// strange rules like `<T as Foo<'static>>::Bar: Sized` that\n     /// actually carry lifetime requirements.\n     pub fn is_sized(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {\n-        tcx_at.is_sized_raw(param_env.and(self))\n+        self.is_trivially_sized(tcx_at.tcx) || tcx_at.is_sized_raw(param_env.and(self))\n     }\n \n     /// Checks whether values of this type `T` implement the `Freeze`\n@@ -713,7 +713,43 @@ impl<'tcx> ty::TyS<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         span: Span,\n     ) -> bool {\n-        tcx.at(span).is_freeze_raw(param_env.and(self))\n+        self.is_trivially_freeze() || tcx.at(span).is_freeze_raw(param_env.and(self))\n+    }\n+\n+    /// Fast path helper for testing if a type is `Freeze`.\n+    ///\n+    /// Returning true means the type is known to be `Freeze`. Returning\n+    /// `false` means nothing -- could be `Freeze`, might not be.\n+    fn is_trivially_freeze(&self) -> bool {\n+        match self.kind {\n+            ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Bool\n+            | ty::Char\n+            | ty::Str\n+            | ty::Never\n+            | ty::Ref(..)\n+            | ty::RawPtr(_)\n+            | ty::FnDef(..)\n+            | ty::Error\n+            | ty::FnPtr(_) => true,\n+            ty::Tuple(_) => self.tuple_fields().all(Self::is_trivially_freeze),\n+            ty::Slice(elem_ty) | ty::Array(elem_ty, _) => elem_ty.is_trivially_freeze(),\n+            ty::Adt(..)\n+            | ty::Bound(..)\n+            | ty::Closure(..)\n+            | ty::Dynamic(..)\n+            | ty::Foreign(_)\n+            | ty::Generator(..)\n+            | ty::GeneratorWitness(_)\n+            | ty::Infer(_)\n+            | ty::Opaque(..)\n+            | ty::Param(_)\n+            | ty::Placeholder(_)\n+            | ty::Projection(_)\n+            | ty::UnnormalizedProjection(_) => false,\n+        }\n     }\n \n     /// If `ty.needs_drop(...)` returns `true`, then `ty` is definitely"}]}