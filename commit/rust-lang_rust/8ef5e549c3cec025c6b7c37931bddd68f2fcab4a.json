{"sha": "8ef5e549c3cec025c6b7c37931bddd68f2fcab4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZjVlNTQ5YzNjZWMwMjVjNmI3YzM3OTMxYmRkZDY4ZjJmY2FiNGE=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-12-27T21:53:27Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-20T10:09:23Z"}, "message": "Remove `Box::from_non_null_raw`\n\nPer https://github.com/rust-lang/rust/pull/46952#issuecomment-353956225", "tree": {"sha": "1c5ccef9003a57b58aeb297e5d37c0d863c9a472", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c5ccef9003a57b58aeb297e5d37c0d863c9a472"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ef5e549c3cec025c6b7c37931bddd68f2fcab4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef5e549c3cec025c6b7c37931bddd68f2fcab4a", "html_url": "https://github.com/rust-lang/rust/commit/8ef5e549c3cec025c6b7c37931bddd68f2fcab4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ef5e549c3cec025c6b7c37931bddd68f2fcab4a/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1772fa2aa1262e5efae8172bbd9154a937269eb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1772fa2aa1262e5efae8172bbd9154a937269eb7", "html_url": "https://github.com/rust-lang/rust/commit/1772fa2aa1262e5efae8172bbd9154a937269eb7"}], "stats": {"total": 38, "additions": 3, "deletions": 35}, "files": [{"sha": "60998bc677b8e552c7b77d63e3977874368f47fc", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 35, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8ef5e549c3cec025c6b7c37931bddd68f2fcab4a/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef5e549c3cec025c6b7c37931bddd68f2fcab4a/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=8ef5e549c3cec025c6b7c37931bddd68f2fcab4a", "patch": "@@ -272,34 +272,6 @@ impl<T: ?Sized> Box<T> {\n         Box(Unique::new_unchecked(raw))\n     }\n \n-    /// Constructs a `Box` from a `NonNull<T>` pointer.\n-    ///\n-    /// After calling this function, the memory is owned by a `Box` and `T` can\n-    /// then be destroyed and released upon drop.\n-    ///\n-    /// # Safety\n-    ///\n-    /// A `NonNull<T>` can be safely created via [`NonNull::new`] and thus doesn't\n-    /// necessarily own the data pointed to nor is the data guaranteed to live\n-    /// as long as the pointer.\n-    ///\n-    /// [`NonNull::new`]: ../../core/ptr/struct.NonNull.html#method.new\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// fn main() {\n-    ///     let x = Box::new(5);\n-    ///     let ptr = Box::into_non_null_raw(x);\n-    ///     let x = unsafe { Box::from_non_null_raw(ptr) };\n-    /// }\n-    /// ```\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n-    #[inline]\n-    pub unsafe fn from_non_null_raw(u: NonNull<T>) -> Self {\n-        Box(u.into())\n-    }\n-\n     /// Consumes the `Box`, returning the wrapped raw pointer.\n     ///\n     /// After calling this function, the caller is responsible for the\n@@ -331,19 +303,15 @@ impl<T: ?Sized> Box<T> {\n     /// After calling this function, the caller is responsible for the\n     /// memory previously managed by the `Box`. In particular, the\n     /// caller should properly destroy `T` and release the memory. The\n-    /// proper way to do so is to either convert the `NonNull<T>` pointer:\n-    ///\n-    /// - Into a `Box` with the [`Box::from_non_null_raw`] function.\n-    ///\n-    /// - Into a raw pointer and back into a `Box` with the [`Box::from_raw`]\n-    ///   function.\n+    /// proper way to do so is to convert the `NonNull<T>` pointer\n+    /// into a raw pointer and back into a `Box` with the [`Box::from_raw`]\n+    /// function.\n     ///\n     /// Note: this is an associated function, which means that you have\n     /// to call it as `Box::into_non_null_raw(b)`\n     /// instead of `b.into_non_null_raw()`. This\n     /// is so that there is no conflict with a method on the inner type.\n     ///\n-    /// [`Box::from_non_null_raw`]: struct.Box.html#method.from_non_null_raw\n     /// [`Box::from_raw`]: struct.Box.html#method.from_raw\n     ///\n     /// # Examples"}]}