{"sha": "bac6484a315a805287b98adc3c9c0909579c8393", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYzY0ODRhMzE1YTgwNTI4N2I5OGFkYzNjOWMwOTA5NTc5YzgzOTM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-03-19T22:25:55Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-03-19T22:25:55Z"}, "message": "Fix automatic urls with backticks", "tree": {"sha": "f8a978da5621894377b2029a807a1bc5e2c25327", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8a978da5621894377b2029a807a1bc5e2c25327"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bac6484a315a805287b98adc3c9c0909579c8393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bac6484a315a805287b98adc3c9c0909579c8393", "html_url": "https://github.com/rust-lang/rust/commit/bac6484a315a805287b98adc3c9c0909579c8393", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bac6484a315a805287b98adc3c9c0909579c8393/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa27ee30972f16320ae4a8887c8f54616fff819", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa27ee30972f16320ae4a8887c8f54616fff819", "html_url": "https://github.com/rust-lang/rust/commit/8aa27ee30972f16320ae4a8887c8f54616fff819"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "72e303e19820272d055dda6b2046bf2c6f051d50", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bac6484a315a805287b98adc3c9c0909579c8393/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac6484a315a805287b98adc3c9c0909579c8393/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=bac6484a315a805287b98adc3c9c0909579c8393", "patch": "@@ -929,7 +929,7 @@ fn ambiguity_error(cx: &DocContext, attrs: &Attributes,\n                       select the {}\",\n                       disambig1, kind1, disambig2,\n                       kind2))\n-             .emit();\n+      .emit();\n }\n \n /// Given an enum variant's def, return the def of its enum and the associated fragment\n@@ -1074,6 +1074,7 @@ fn macro_resolve(cx: &DocContext, path_str: &str) -> Option<Def> {\n     }\n }\n \n+#[derive(Debug)]\n enum PathKind {\n     /// can be either value or type, not a macro\n     Unknown,\n@@ -1082,7 +1083,7 @@ enum PathKind {\n     /// values, functions, consts, statics, everything in the value namespace\n     Value,\n     /// types, traits, everything in the type namespace\n-    Type\n+    Type,\n }\n \n impl Clean<Attributes> for [ast::Attribute] {\n@@ -1091,12 +1092,13 @@ impl Clean<Attributes> for [ast::Attribute] {\n \n         if UnstableFeatures::from_environment().is_nightly_build() {\n             let dox = attrs.collapsed_doc_value().unwrap_or_else(String::new);\n-            for link in markdown_links(&dox) {\n+            for ori_link in markdown_links(&dox) {\n                 // bail early for real links\n-                if link.contains('/') {\n+                if ori_link.contains('/') {\n                     continue;\n                 }\n-                let (def, fragment)  = {\n+                let link = ori_link.replace(\"`\", \"\");\n+                let (def, fragment) = {\n                     let mut kind = PathKind::Unknown;\n                     let path_str = if let Some(prefix) =\n                         [\"struct@\", \"enum@\", \"type@\",\n@@ -1132,7 +1134,6 @@ impl Clean<Attributes> for [ast::Attribute] {\n                         continue;\n                     }\n \n-\n                     match kind {\n                         PathKind::Value => {\n                             if let Ok(def) = resolve(cx, path_str, true) {\n@@ -1206,9 +1207,8 @@ impl Clean<Attributes> for [ast::Attribute] {\n                     }\n                 };\n \n-\n                 let id = register_def(cx, def);\n-                attrs.links.push((link, id, fragment));\n+                attrs.links.push((ori_link, id, fragment));\n             }\n \n             cx.sess().abort_if_errors();"}, {"sha": "8d1c9e4575e263037cad984b4c58e3af7b98b438", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bac6484a315a805287b98adc3c9c0909579c8393/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac6484a315a805287b98adc3c9c0909579c8393/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=bac6484a315a805287b98adc3c9c0909579c8393", "patch": "@@ -232,14 +232,14 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n /// Make headings links with anchor ids and build up TOC.\n struct LinkReplacer<'a, 'b, I: Iterator<Item = Event<'a>>> {\n     inner: I,\n-    links: &'b [(String, String)]\n+    links: &'b [(String, String)],\n }\n \n impl<'a, 'b, I: Iterator<Item = Event<'a>>> LinkReplacer<'a, 'b, I> {\n     fn new(iter: I, links: &'b [(String, String)]) -> Self {\n         LinkReplacer {\n             inner: iter,\n-            links\n+            links,\n         }\n     }\n }"}, {"sha": "1633711e83d9afa2fd9af978773c867ca1f31e50", "filename": "src/test/rustdoc/check-styled-link.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bac6484a315a805287b98adc3c9c0909579c8393/src%2Ftest%2Frustdoc%2Fcheck-styled-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac6484a315a805287b98adc3c9c0909579c8393/src%2Ftest%2Frustdoc%2Fcheck-styled-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcheck-styled-link.rs?ref=bac6484a315a805287b98adc3c9c0909579c8393", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+pub struct Foo;\n+\n+// @has foo/struct.Bar.html '//a[@href=\"../foo/struct.Foo.html\"]' 'Foo'\n+\n+/// Code-styled reference to [`Foo`].\n+pub struct Bar;"}]}