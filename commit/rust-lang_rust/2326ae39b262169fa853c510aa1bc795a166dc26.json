{"sha": "2326ae39b262169fa853c510aa1bc795a166dc26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMjZhZTM5YjI2MjE2OWZhODUzYzUxMGFhMWJjNzk1YTE2NmRjMjY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-20T23:21:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-23T22:15:08Z"}, "message": "Merge ensure_node_can_be_forced into force_from_dep_node.", "tree": {"sha": "68debed64e0ecfc01438fb52f70606bf2e2408a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68debed64e0ecfc01438fb52f70606bf2e2408a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2326ae39b262169fa853c510aa1bc795a166dc26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2326ae39b262169fa853c510aa1bc795a166dc26", "html_url": "https://github.com/rust-lang/rust/commit/2326ae39b262169fa853c510aa1bc795a166dc26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2326ae39b262169fa853c510aa1bc795a166dc26/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db7bd5f828faa85880fc3cbac0c7b679e2225321", "url": "https://api.github.com/repos/rust-lang/rust/commits/db7bd5f828faa85880fc3cbac0c7b679e2225321", "html_url": "https://github.com/rust-lang/rust/commit/db7bd5f828faa85880fc3cbac0c7b679e2225321"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "d739223f6cb5e423101f7abf1ef2f10f7a0d623b", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2326ae39b262169fa853c510aa1bc795a166dc26/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2326ae39b262169fa853c510aa1bc795a166dc26/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=2326ae39b262169fa853c510aa1bc795a166dc26", "patch": "@@ -110,10 +110,6 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n         TyCtxt::create_stable_hashing_context(*self)\n     }\n \n-    fn force_from_dep_node(&self, node: &DepNode) -> bool {\n-        ty::query::force_from_dep_node(*self, node)\n-    }\n-\n     /// Extracts the DefId corresponding to this DepNode. This will work\n     /// if two conditions are met:\n     ///\n@@ -133,7 +129,7 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n         }\n     }\n \n-    fn ensure_node_can_be_forced(&self, dep_dep_node: &DepNode) -> Option<()> {\n+    fn try_force_previous_green(&self, dep_dep_node: &DepNode) -> bool {\n         // FIXME: This match is just a workaround for incremental bugs and should\n         // be removed. https://github.com/rust-lang/rust/issues/62649 is one such\n         // bug that must be fixed before removing this.\n@@ -162,20 +158,22 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n                         // Since the given `DefPath` does not\n                         // denote the item that previously\n                         // existed, we just fail to mark green.\n-                        return None;\n+                        return false;\n                     }\n                 } else {\n                     // If the node does not exist anymore, we\n                     // just fail to mark green.\n-                    return None;\n+                    return false;\n                 }\n             }\n             _ => {\n                 // For other kinds of nodes it's OK to be\n                 // forced.\n             }\n         }\n-        Some(())\n+\n+        debug!(\"try_force_previous_green({:?}) --- trying to force\", dep_dep_node);\n+        ty::query::force_from_dep_node(*self, dep_dep_node)\n     }\n \n     fn has_errors_or_delayed_span_bugs(&self) -> bool {"}, {"sha": "36edf255a775eb35ab6e065dbd44f57d25ac29e9", "filename": "src/librustc_query_system/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2326ae39b262169fa853c510aa1bc795a166dc26/src%2Flibrustc_query_system%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2326ae39b262169fa853c510aa1bc795a166dc26/src%2Flibrustc_query_system%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fgraph.rs?ref=2326ae39b262169fa853c510aa1bc795a166dc26", "patch": "@@ -635,8 +635,6 @@ impl<K: DepKind> DepGraph<K> {\n                             current_deps.push(node_index);\n                             continue;\n                         }\n-                    } else {\n-                        tcx.ensure_node_can_be_forced(dep_dep_node)?;\n                     }\n \n                     // We failed to mark it green, so we try to force the query.\n@@ -645,7 +643,7 @@ impl<K: DepKind> DepGraph<K> {\n                             dependency {:?}\",\n                         dep_node, dep_dep_node\n                     );\n-                    if tcx.force_from_dep_node(dep_dep_node) {\n+                    if tcx.try_force_previous_green(dep_dep_node) {\n                         let dep_dep_node_color = data.colors.get(dep_dep_node_index);\n \n                         match dep_dep_node_color {"}, {"sha": "c9983013d3896ba26ae5ced5a128d0daf6caabe0", "filename": "src/librustc_query_system/dep_graph/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2326ae39b262169fa853c510aa1bc795a166dc26/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2326ae39b262169fa853c510aa1bc795a166dc26/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs?ref=2326ae39b262169fa853c510aa1bc795a166dc26", "patch": "@@ -31,8 +31,8 @@ pub trait DepContext: Copy {\n     /// Create a hashing context for hashing new results.\n     fn create_stable_hashing_context(&self) -> Self::StableHashingContext;\n \n-    /// Force the execution of a query given the associated `DepNode`.\n-    fn force_from_dep_node(&self, node: &DepNode<Self::DepKind>) -> bool;\n+    /// Try to force a dep node to execute and see if it's green.\n+    fn try_force_previous_green(&self, node: &DepNode<Self::DepKind>) -> bool;\n \n     /// Extracts the DefId corresponding to this DepNode. This will work\n     /// if two conditions are met:\n@@ -46,9 +46,6 @@ pub trait DepContext: Copy {\n     /// has been removed.\n     fn extract_def_id(&self, node: &DepNode<Self::DepKind>) -> Option<DefId>;\n \n-    /// Check the legality of forcing this node.\n-    fn ensure_node_can_be_forced(&self, dep_dep_node: &DepNode<Self::DepKind>) -> Option<()>;\n-\n     /// Return whether the current session is tainted by errors.\n     fn has_errors_or_delayed_span_bugs(&self) -> bool;\n "}]}