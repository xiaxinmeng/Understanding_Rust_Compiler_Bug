{"sha": "208665836eef558e92925e48bf35d162dfd4d5a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwODY2NTgzNmVlZjU1OGU5MjkyNWU0OGJmMzVkMTYyZGZkNGQ1YTM=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-22T14:02:25Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-22T14:02:29Z"}, "message": "panic if target platform is incorrect instead", "tree": {"sha": "1349bffe874bbebd8e708143dfc67a65719ddc9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1349bffe874bbebd8e708143dfc67a65719ddc9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/208665836eef558e92925e48bf35d162dfd4d5a3", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXlE0eQAKCRAnUl7150IK\nUB0/AQDUBKKLhUS0pIjctgsU/IZhSN0YlKXCz1RYIdum/4IfmgD+Igl9yBAwE4Mh\nNyAKYNswLdw4GqF/zgVrwIWoaNqg2ww=\n=0s3Y\n-----END PGP SIGNATURE-----", "payload": "tree 1349bffe874bbebd8e708143dfc67a65719ddc9e\nparent c2bcab55b09db9adc5d33b48011a31587a8e80a1\nauthor Christian Poveda <git@christianpoveda.xyz> 1582380145 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1582380149 -0500\n\npanic if target platform is incorrect instead\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/208665836eef558e92925e48bf35d162dfd4d5a3", "html_url": "https://github.com/rust-lang/rust/commit/208665836eef558e92925e48bf35d162dfd4d5a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/208665836eef558e92925e48bf35d162dfd4d5a3/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2bcab55b09db9adc5d33b48011a31587a8e80a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2bcab55b09db9adc5d33b48011a31587a8e80a1", "html_url": "https://github.com/rust-lang/rust/commit/c2bcab55b09db9adc5d33b48011a31587a8e80a1"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "2ae6910fce2dcd31c2f5fd2de0807228700ce044", "filename": "src/helpers.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/208665836eef558e92925e48bf35d162dfd4d5a3/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208665836eef558e92925e48bf35d162dfd4d5a3/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=208665836eef558e92925e48bf35d162dfd4d5a3", "patch": "@@ -368,18 +368,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         Ok(())\n     }\n-    /// Helper function used inside the shims of foreign functions to check that the target\n-    /// platform is `platform`. It returns an error using the `name` of the foreign function if\n-    /// this is not the case.\n-    fn check_platform(&mut self, platform: &str, name: &str) -> InterpResult<'tcx> {\n-        if self.eval_context_mut().tcx.sess.target.target.target_os.to_lowercase() != platform {\n-            throw_unsup_format!(\n-                \"`{}` is only available on the `{}` platform\",\n-                name,\n-                platform,\n-            )\n-        }\n-        Ok(())\n+    /// Helper function used inside the shims of foreign functions to assert that the target\n+    /// platform is `platform`. It panics showing a message with the `name` of the foreign function\n+    /// if this is not the case.\n+    fn assert_platform(&mut self, platform: &str, name: &str) {\n+        assert_eq!(\n+            self.eval_context_mut().tcx.sess.target.target.target_os.to_lowercase(),\n+            platform,\n+            \"`{}` is only available on the `{}` platform\",\n+            name,\n+            platform\n+        )\n     }\n \n     /// Sets the last error variable."}, {"sha": "f846c339defe04c7d0920c13335e0a407f649aee", "filename": "src/shims/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/208665836eef558e92925e48bf35d162dfd4d5a3/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208665836eef558e92925e48bf35d162dfd4d5a3/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=208665836eef558e92925e48bf35d162dfd4d5a3", "patch": "@@ -347,7 +347,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         this.check_no_isolation(\"stat\")?;\n-        this.check_platform(\"macos\", \"stat\")?;\n+        this.assert_platform(\"macos\", \"stat\");\n         // `stat` always follows symlinks.\n         this.macos_stat_or_lstat(true, path_op, buf_op)\n     }\n@@ -360,7 +360,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         this.check_no_isolation(\"lstat\")?;\n-        this.check_platform(\"macos\", \"lstat\")?;\n+        this.assert_platform(\"macos\", \"lstat\");\n         this.macos_stat_or_lstat(false, path_op, buf_op)\n     }\n \n@@ -372,7 +372,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.check_no_isolation(\"fstat\")?;\n-        this.check_platform(\"macos\", \"fstat\")?;\n+        this.assert_platform(\"macos\", \"fstat\");\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n@@ -416,7 +416,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.check_no_isolation(\"statx\")?;\n-        this.check_platform(\"linux\", \"statx\")?;\n+        this.assert_platform(\"linux\", \"statx\");\n \n         let statxbuf_scalar = this.read_scalar(statxbuf_op)?.not_undef()?;\n         let pathname_scalar = this.read_scalar(pathname_op)?.not_undef()?;"}]}