{"sha": "0b3e018137fa911a3c67aec6be4d4d67c75cfee8", "node_id": "C_kwDOAAsO6NoAKDBiM2UwMTgxMzdmYTkxMWEzYzY3YWVjNmJlNGQ0ZDY3Yzc1Y2ZlZTg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-23T09:50:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-23T09:50:18Z"}, "message": "Rollup merge of #103249 - petrochenkov:revaddids, r=oli-obk\n\nresolve: Revert \"Set effective visibilities for imports more precisely\"\n\nIn theory the change was correct, but in practice the use of import items in HIR is limited and hacky, and it expects that (effective) visibilities for all (up to) 3 IDs of the import are set to the value reflecting (effective) visibility of the whole syntactic `use` item rather than its individual components.\n\nFixes https://github.com/rust-lang/rust/issues/102352\nr? `@oli-obk`", "tree": {"sha": "c9442434066d7ba74bdb37fa5577ec3fe74cc005", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9442434066d7ba74bdb37fa5577ec3fe74cc005"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b3e018137fa911a3c67aec6be4d4d67c75cfee8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjVQ5aCRBK7hj4Ov3rIwAAl9UIAAUcxo58gPbxMwN3DJODJ+pj\ndUX/ZGLRUl7jL51UGerGMXiY+Qla6KMxZ9/YYbsTjfe+MFiU8O1LzlTr6VjUo/FE\nUQqMjDKHFwPph9B55p+IFxnQZNq4eR5gDZwRWieuMLj1rOZcKLDGQYHu2m6Fy51y\nFbzcNl/waMfwrJ6HTNfEEDvOR3vaGHvyssPSWnrXvlDrf5h8MArJnMfU48U5E0xc\nvBo8sRokguMYjBGPF7iQU6xykvgW7Y+5V0HhMANLWtcJtDhKWD79Pfw5KKoFvBIR\neXStXvaC+GlWHjvwpzCYJtrkVz/BhCBAcdaCZ44S5jxIn2RQcCLmDKFFaIa88W8=\n=gMQq\n-----END PGP SIGNATURE-----\n", "payload": "tree c9442434066d7ba74bdb37fa5577ec3fe74cc005\nparent 8440b09d1705c0c0120b7c6cb2c74d128136d2d4\nparent ba4834c092ed524e7839d21ea40a644db6e6555f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666518618 +0530\ncommitter GitHub <noreply@github.com> 1666518618 +0530\n\nRollup merge of #103249 - petrochenkov:revaddids, r=oli-obk\n\nresolve: Revert \"Set effective visibilities for imports more precisely\"\n\nIn theory the change was correct, but in practice the use of import items in HIR is limited and hacky, and it expects that (effective) visibilities for all (up to) 3 IDs of the import are set to the value reflecting (effective) visibility of the whole syntactic `use` item rather than its individual components.\n\nFixes https://github.com/rust-lang/rust/issues/102352\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b3e018137fa911a3c67aec6be4d4d67c75cfee8", "html_url": "https://github.com/rust-lang/rust/commit/0b3e018137fa911a3c67aec6be4d4d67c75cfee8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b3e018137fa911a3c67aec6be4d4d67c75cfee8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8440b09d1705c0c0120b7c6cb2c74d128136d2d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8440b09d1705c0c0120b7c6cb2c74d128136d2d4", "html_url": "https://github.com/rust-lang/rust/commit/8440b09d1705c0c0120b7c6cb2c74d128136d2d4"}, {"sha": "ba4834c092ed524e7839d21ea40a644db6e6555f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba4834c092ed524e7839d21ea40a644db6e6555f", "html_url": "https://github.com/rust-lang/rust/commit/ba4834c092ed524e7839d21ea40a644db6e6555f"}], "stats": {"total": 62, "additions": 26, "deletions": 36}, "files": [{"sha": "257784341e3f8de3ed6d6064d81d2f18168fa437", "filename": "compiler/rustc_resolve/src/access_levels.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0b3e018137fa911a3c67aec6be4d4d67c75cfee8/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3e018137fa911a3c67aec6be4d4d67c75cfee8/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs?ref=0b3e018137fa911a3c67aec6be4d4d67c75cfee8", "patch": "@@ -1,5 +1,4 @@\n-use crate::NameBindingKind;\n-use crate::Resolver;\n+use crate::{ImportKind, NameBindingKind, Resolver};\n use rustc_ast::ast;\n use rustc_ast::visit;\n use rustc_ast::visit::Visitor;\n@@ -45,31 +44,40 @@ impl<'r, 'a> AccessLevelsVisitor<'r, 'a> {\n         let module = self.r.get_module(module_id.to_def_id()).unwrap();\n         let resolutions = self.r.resolutions(module);\n \n-        for (key, name_resolution) in resolutions.borrow().iter() {\n+        for (_, name_resolution) in resolutions.borrow().iter() {\n             if let Some(mut binding) = name_resolution.borrow().binding() && !binding.is_ambiguity() {\n                 // Set the given binding access level to `AccessLevel::Public` and\n                 // sets the rest of the `use` chain to `AccessLevel::Exported` until\n                 // we hit the actual exported item.\n \n-                // FIXME: tag and is_public() condition must be deleted,\n-                // but assertion fail occurs in import_id_for_ns\n+                // FIXME: tag and is_public() condition should be removed, but assertions occur.\n                 let tag = if binding.is_import() { AccessLevel::Exported } else { AccessLevel::Public };\n                 if binding.vis.is_public() {\n                     let mut prev_parent_id = module_id;\n                     let mut level = AccessLevel::Public;\n                     while let NameBindingKind::Import { binding: nested_binding, import, .. } =\n                         binding.kind\n                     {\n-                        let id = self.r.local_def_id(self.r.import_id_for_ns(import, key.ns));\n-                        self.update(\n-                            id,\n+                        let mut update = |node_id| self.update(\n+                            self.r.local_def_id(node_id),\n                             binding.vis.expect_local(),\n                             prev_parent_id,\n                             level,\n                         );\n+                        // In theory all the import IDs have individual visibilities and effective\n+                        // visibilities, but in practice these IDs go straigth to HIR where all\n+                        // their few uses assume that their (effective) visibility applies to the\n+                        // whole syntactic `use` item. So we update them all to the maximum value\n+                        // among the potential individual effective visibilities. Maybe HIR for\n+                        // imports shouldn't use three IDs at all.\n+                        update(import.id);\n+                        if let ImportKind::Single { additional_ids, .. } = import.kind {\n+                            update(additional_ids.0);\n+                            update(additional_ids.1);\n+                        }\n \n                         level = AccessLevel::Exported;\n-                        prev_parent_id = id;\n+                        prev_parent_id = self.r.local_def_id(import.id);\n                         binding = nested_binding;\n                     }\n                 }"}, {"sha": "f2cc50c199fc8119dda242d66136d406d4e77adf", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0b3e018137fa911a3c67aec6be4d4d67c75cfee8/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3e018137fa911a3c67aec6be4d4d67c75cfee8/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=0b3e018137fa911a3c67aec6be4d4d67c75cfee8", "patch": "@@ -2,7 +2,7 @@\n \n use crate::diagnostics::{import_candidates, Suggestion};\n use crate::Determinacy::{self, *};\n-use crate::Namespace::{self, *};\n+use crate::Namespace::*;\n use crate::{module_to_string, names_to_string, ImportSuggestion};\n use crate::{AmbiguityKind, BindingKey, ModuleKind, ResolutionError, Resolver, Segment};\n use crate::{Finalize, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet};\n@@ -371,31 +371,6 @@ impl<'a> Resolver<'a> {\n             self.used_imports.insert(import.id);\n         }\n     }\n-\n-    /// Take primary and additional node IDs from an import and select one that corresponds to the\n-    /// given namespace. The logic must match the corresponding logic from `fn lower_use_tree` that\n-    /// assigns resolutons to IDs.\n-    pub(crate) fn import_id_for_ns(&self, import: &Import<'_>, ns: Namespace) -> NodeId {\n-        if let ImportKind::Single { additional_ids: (id1, id2), .. } = import.kind {\n-            if let Some(resolutions) = self.import_res_map.get(&import.id) {\n-                assert!(resolutions[ns].is_some(), \"incorrectly finalized import\");\n-                return match ns {\n-                    TypeNS => import.id,\n-                    ValueNS => match resolutions.type_ns {\n-                        Some(_) => id1,\n-                        None => import.id,\n-                    },\n-                    MacroNS => match (resolutions.type_ns, resolutions.value_ns) {\n-                        (Some(_), Some(_)) => id2,\n-                        (Some(_), None) | (None, Some(_)) => id1,\n-                        (None, None) => import.id,\n-                    },\n-                };\n-            }\n-        }\n-\n-        import.id\n-    }\n }\n \n /// An error that may be transformed into a diagnostic later. Used to combine multiple unresolved"}, {"sha": "42c9975bedb70995a8d4efde11ec499d2954b130", "filename": "src/test/ui/privacy/access_levels.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b3e018137fa911a3c67aec6be4d4d67c75cfee8/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3e018137fa911a3c67aec6be4d4d67c75cfee8/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs?ref=0b3e018137fa911a3c67aec6be4d4d67c75cfee8", "patch": "@@ -70,5 +70,6 @@ mod half_public_import {\n \n #[rustc_effective_visibility]\n pub use half_public_import::HalfPublicImport; //~ ERROR Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+                                              //~^ ERROR Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n \n fn main() {}"}, {"sha": "111e02bc329ccc483246525ebc6e3b4c703f99c0", "filename": "src/test/ui/privacy/access_levels.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b3e018137fa911a3c67aec6be4d4d67c75cfee8/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b3e018137fa911a3c67aec6be4d4d67c75cfee8/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr?ref=0b3e018137fa911a3c67aec6be4d4d67c75cfee8", "patch": "@@ -112,6 +112,12 @@ error: Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n LL | pub use half_public_import::HalfPublicImport;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:72:9\n+   |\n+LL | pub use half_public_import::HalfPublicImport;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: Public: pub(crate), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n   --> $DIR/access_levels.rs:14:13\n    |\n@@ -124,5 +130,5 @@ error: Public: pub(crate), Exported: pub, Reachable: pub, ReachableFromImplTrait\n LL |             type B;\n    |             ^^^^^^\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 22 previous errors\n "}]}