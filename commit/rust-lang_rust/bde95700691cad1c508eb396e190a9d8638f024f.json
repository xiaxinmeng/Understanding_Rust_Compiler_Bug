{"sha": "bde95700691cad1c508eb396e190a9d8638f024f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZTk1NzAwNjkxY2FkMWM1MDhlYjM5NmUxOTBhOWQ4NjM4ZjAyNGY=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-06-08T21:09:56Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-06-16T22:17:17Z"}, "message": "Lazify is_really_default condition in the RustdocGUI bootstrap step\n\nThe `RustdocGUI::should_run` condition spawns `npm list` several times\nwhich adds up to seconds of wall-time.\nEvaluate the condition lazily to to keep `./x.py test tidy` and similar\nshort-running tasks fast.", "tree": {"sha": "645f77f90dd524e129ad0624add8db631600adc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/645f77f90dd524e129ad0624add8db631600adc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bde95700691cad1c508eb396e190a9d8638f024f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bde95700691cad1c508eb396e190a9d8638f024f", "html_url": "https://github.com/rust-lang/rust/commit/bde95700691cad1c508eb396e190a9d8638f024f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bde95700691cad1c508eb396e190a9d8638f024f/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fef8d91b4a6c5bfe07c025c434f2d623ad83337", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fef8d91b4a6c5bfe07c025c434f2d623ad83337", "html_url": "https://github.com/rust-lang/rust/commit/9fef8d91b4a6c5bfe07c025c434f2d623ad83337"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "f476466235cbb578f3cc0b5a48c32790d3886926", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bde95700691cad1c508eb396e190a9d8638f024f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bde95700691cad1c508eb396e190a9d8638f024f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bde95700691cad1c508eb396e190a9d8638f024f", "patch": "@@ -179,6 +179,7 @@ dependencies = [\n  \"libc\",\n  \"merge\",\n  \"num_cpus\",\n+ \"once_cell\",\n  \"opener\",\n  \"pretty_assertions\",\n  \"serde\","}, {"sha": "d1e666936f88a3b778bbd33574c38061a3297cd7", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bde95700691cad1c508eb396e190a9d8638f024f/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bde95700691cad1c508eb396e190a9d8638f024f/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=bde95700691cad1c508eb396e190a9d8638f024f", "patch": "@@ -50,6 +50,7 @@ time = \"0.1\"\n ignore = \"0.4.10\"\n opener = \"0.4\"\n merge = \"0.1.0\"\n+once_cell = \"1.7.2\"\n \n [target.'cfg(windows)'.dependencies.winapi]\n version = \"0.3\""}, {"sha": "e2f605257bd9548235776640c268f435708d3851", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bde95700691cad1c508eb396e190a9d8638f024f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde95700691cad1c508eb396e190a9d8638f024f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=bde95700691cad1c508eb396e190a9d8638f024f", "patch": "@@ -29,6 +29,8 @@ use crate::util::{self, add_dylib_path, add_link_lib_path, exe, libdir};\n use crate::{Build, DocTests, GitRepo, Mode};\n \n pub use crate::Compiler;\n+// FIXME: replace with std::lazy after it gets stabilized and reaches beta\n+use once_cell::sync::Lazy;\n \n pub struct Builder<'a> {\n     pub build: &'a Build,\n@@ -195,7 +197,7 @@ impl StepDescription {\n \n         if paths.is_empty() || builder.config.include_default_paths {\n             for (desc, should_run) in v.iter().zip(&should_runs) {\n-                if desc.default && should_run.is_really_default {\n+                if desc.default && should_run.is_really_default() {\n                     for pathset in &should_run.paths {\n                         desc.maybe_run(builder, pathset);\n                     }\n@@ -228,31 +230,47 @@ impl StepDescription {\n     }\n }\n \n-#[derive(Clone)]\n+enum ReallyDefault<'a> {\n+    Bool(bool),\n+    Lazy(Lazy<bool, Box<dyn Fn() -> bool + 'a>>),\n+}\n+\n pub struct ShouldRun<'a> {\n     pub builder: &'a Builder<'a>,\n     // use a BTreeSet to maintain sort order\n     paths: BTreeSet<PathSet>,\n \n     // If this is a default rule, this is an additional constraint placed on\n     // its run. Generally something like compiler docs being enabled.\n-    is_really_default: bool,\n+    is_really_default: ReallyDefault<'a>,\n }\n \n impl<'a> ShouldRun<'a> {\n     fn new(builder: &'a Builder<'_>) -> ShouldRun<'a> {\n         ShouldRun {\n             builder,\n             paths: BTreeSet::new(),\n-            is_really_default: true, // by default no additional conditions\n+            is_really_default: ReallyDefault::Bool(true), // by default no additional conditions\n         }\n     }\n \n     pub fn default_condition(mut self, cond: bool) -> Self {\n-        self.is_really_default = cond;\n+        self.is_really_default = ReallyDefault::Bool(cond);\n+        self\n+    }\n+\n+    pub fn lazy_default_condition(mut self, lazy_cond: Box<dyn Fn() -> bool + 'a>) -> Self {\n+        self.is_really_default = ReallyDefault::Lazy(Lazy::new(lazy_cond));\n         self\n     }\n \n+    pub fn is_really_default(&self) -> bool {\n+        match &self.is_really_default {\n+            ReallyDefault::Bool(val) => *val,\n+            ReallyDefault::Lazy(lazy) => *lazy.deref(),\n+        }\n+    }\n+\n     /// Indicates it should run if the command-line selects the given crate or\n     /// any of its (local) dependencies.\n     ///"}, {"sha": "319b56a0b7006af83d377c14cce669ef6ac26983", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bde95700691cad1c508eb396e190a9d8638f024f/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde95700691cad1c508eb396e190a9d8638f024f/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=bde95700691cad1c508eb396e190a9d8638f024f", "patch": "@@ -806,15 +806,15 @@ impl Step for RustdocGUI {\n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n         let run = run.suite_path(\"src/test/rustdoc-gui\");\n-        run.default_condition(\n+        run.lazy_default_condition(Box::new(move || {\n             builder.config.nodejs.is_some()\n                 && builder\n                     .config\n                     .npm\n                     .as_ref()\n                     .map(|p| check_if_browser_ui_test_is_installed(p))\n-                    .unwrap_or(false),\n-        )\n+                    .unwrap_or(false)\n+        }))\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}]}