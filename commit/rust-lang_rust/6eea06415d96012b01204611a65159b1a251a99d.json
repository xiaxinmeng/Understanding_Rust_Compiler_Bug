{"sha": "6eea06415d96012b01204611a65159b1a251a99d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZWEwNjQxNWQ5NjAxMmIwMTIwNDYxMWE2NTE1OWIxYTI1MWE5OWQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-17T13:28:23Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-17T13:28:23Z"}, "message": "Give `ExternCrate` a `Name`, not a `ModPath`", "tree": {"sha": "939afa0f475610c3b618b7366ffd05101334c8c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/939afa0f475610c3b618b7366ffd05101334c8c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eea06415d96012b01204611a65159b1a251a99d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eea06415d96012b01204611a65159b1a251a99d", "html_url": "https://github.com/rust-lang/rust/commit/6eea06415d96012b01204611a65159b1a251a99d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eea06415d96012b01204611a65159b1a251a99d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d84c18d989d07785127d00395b929fc69eca19e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d84c18d989d07785127d00395b929fc69eca19e6", "html_url": "https://github.com/rust-lang/rust/commit/d84c18d989d07785127d00395b929fc69eca19e6"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "0fd91b9d01700a80a04164688198e450e500d0da", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eea06415d96012b01204611a65159b1a251a99d/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eea06415d96012b01204611a65159b1a251a99d/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=6eea06415d96012b01204611a65159b1a251a99d", "patch": "@@ -491,7 +491,7 @@ pub struct Import {\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct ExternCrate {\n-    pub path: ModPath,\n+    pub name: Name,\n     pub alias: Option<ImportAlias>,\n     pub visibility: RawVisibilityId,\n     /// Whether this is a `#[macro_use] extern crate ...`."}, {"sha": "54814f141419f7be6d4aadd6920eb51beb7c503c", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eea06415d96012b01204611a65159b1a251a99d/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eea06415d96012b01204611a65159b1a251a99d/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=6eea06415d96012b01204611a65159b1a251a99d", "patch": "@@ -503,7 +503,7 @@ impl Ctx {\n         &mut self,\n         extern_crate: &ast::ExternCrate,\n     ) -> Option<FileItemTreeId<ExternCrate>> {\n-        let path = ModPath::from_name_ref(&extern_crate.name_ref()?);\n+        let name = extern_crate.name_ref()?.as_name();\n         let alias = extern_crate.rename().map(|a| {\n             a.name().map(|it| it.as_name()).map_or(ImportAlias::Underscore, ImportAlias::Alias)\n         });\n@@ -512,7 +512,7 @@ impl Ctx {\n         // FIXME: cfg_attr\n         let is_macro_use = extern_crate.has_atom_attr(\"macro_use\");\n \n-        let res = ExternCrate { path, alias, visibility, is_macro_use, ast_id };\n+        let res = ExternCrate { name, alias, visibility, is_macro_use, ast_id };\n         Some(id(self.data().extern_crates.alloc(res)))\n     }\n "}, {"sha": "1a806cda52c3fd3ecf5d1196c46ed5c123ddd0d8", "filename": "crates/hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eea06415d96012b01204611a65159b1a251a99d/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eea06415d96012b01204611a65159b1a251a99d/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=6eea06415d96012b01204611a65159b1a251a99d", "patch": "@@ -232,7 +232,7 @@ fn smoke() {\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_on_use\"))] }, input: None }]) }]\n             Import { path: ModPath { kind: Plain, segments: [Name(Text(\"b\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_glob: true, is_prelude: false, ast_id: FileAstId::<syntax::ast::generated::nodes::Use>(0), index: 1 }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"ext_crate\"))] }, input: None }]) }]\n-            ExternCrate { path: ModPath { kind: Plain, segments: [Name(Text(\"krate\"))] }, alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_macro_use: false, ast_id: FileAstId::<syntax::ast::generated::nodes::ExternCrate>(1) }\n+            ExternCrate { name: Name(Text(\"krate\")), alias: None, visibility: RawVisibilityId(\"pub(self)\"), is_macro_use: false, ast_id: FileAstId::<syntax::ast::generated::nodes::ExternCrate>(1) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_trait\"))] }, input: None }]) }]\n             Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [TypeAlias(Idx::<TypeAlias>(0)), Const(Idx::<Const>(0)), Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<syntax::ast::generated::nodes::Trait>(2) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_ty\"))] }, input: None }]) }]"}, {"sha": "c1e1d53f67048cb16fdfc12ea0281ea59ba955b3", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6eea06415d96012b01204611a65159b1a251a99d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eea06415d96012b01204611a65159b1a251a99d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=6eea06415d96012b01204611a65159b1a251a99d", "patch": "@@ -3,6 +3,8 @@\n //! `DefCollector::collect` contains the fixed-point iteration loop which\n //! resolves imports and expands macros.\n \n+use std::iter;\n+\n use base_db::{CrateId, FileId, ProcMacroId};\n use cfg::CfgOptions;\n use hir_expand::InFile;\n@@ -149,7 +151,7 @@ impl Import {\n         let it = &tree[id.value];\n         let visibility = &tree[it.visibility];\n         Self {\n-            path: it.path.clone(),\n+            path: ModPath::from_segments(PathKind::Plain, iter::once(it.name.clone())),\n             alias: it.alias.clone(),\n             visibility: visibility.clone(),\n             is_glob: false,\n@@ -356,20 +358,15 @@ impl DefCollector<'_> {\n     fn import_macros_from_extern_crate(\n         &mut self,\n         current_module_id: LocalModuleId,\n-        import: &item_tree::ExternCrate,\n+        extern_crate: &item_tree::ExternCrate,\n     ) {\n         log::debug!(\n             \"importing macros from extern crate: {:?} ({:?})\",\n-            import,\n+            extern_crate,\n             self.def_map.edition,\n         );\n \n-        let res = self.def_map.resolve_name_in_extern_prelude(\n-            &import\n-                .path\n-                .as_ident()\n-                .expect(\"extern crate should have been desugared to one-element path\"),\n-        );\n+        let res = self.def_map.resolve_name_in_extern_prelude(&extern_crate.name);\n \n         if let Some(ModuleDefId::ModuleId(m)) = res.take_types() {\n             mark::hit!(macro_rules_from_other_crates_are_visible_with_macro_use);\n@@ -802,7 +799,7 @@ impl DefCollector<'_> {\n                 let item_tree = self.db.item_tree(krate.file_id);\n                 let extern_crate = &item_tree[krate.value];\n \n-                diagnosed_extern_crates.insert(extern_crate.path.segments[0].clone());\n+                diagnosed_extern_crates.insert(extern_crate.name.clone());\n \n                 self.def_map.diagnostics.push(DefDiagnostic::unresolved_extern_crate(\n                     directive.module_id,"}, {"sha": "734310458f17e5e01077fee19cbafd7332fc706c", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eea06415d96012b01204611a65159b1a251a99d/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eea06415d96012b01204611a65159b1a251a99d/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=6eea06415d96012b01204611a65159b1a251a99d", "patch": "@@ -56,10 +56,6 @@ impl ModPath {\n         ModPath { kind, segments }\n     }\n \n-    pub(crate) fn from_name_ref(name_ref: &ast::NameRef) -> ModPath {\n-        name_ref.as_name().into()\n-    }\n-\n     /// Converts an `tt::Ident` into a single-identifier `Path`.\n     pub(crate) fn from_tt_ident(ident: &tt::Ident) -> ModPath {\n         ident.as_name().into()"}]}