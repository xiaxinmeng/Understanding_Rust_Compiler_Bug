{"sha": "3a75e80557a103497cffbcab395a2f37061a77ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNzVlODA1NTdhMTAzNDk3Y2ZmYmNhYjM5NWEyZjM3MDYxYTc3ZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-10T12:19:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-10T12:19:47Z"}, "message": "Auto merge of #56157 - RalfJung:park, r=nagisa\n\nexpand thread::park explanation\n\nCc @carllerche @parched @stjepang", "tree": {"sha": "177dcf312c7fb1ff47b4561f0616cf321385e9d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/177dcf312c7fb1ff47b4561f0616cf321385e9d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a75e80557a103497cffbcab395a2f37061a77ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a75e80557a103497cffbcab395a2f37061a77ea", "html_url": "https://github.com/rust-lang/rust/commit/3a75e80557a103497cffbcab395a2f37061a77ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a75e80557a103497cffbcab395a2f37061a77ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9567a1cf5993d46c00ee2f2b363f3eabe90b2a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9567a1cf5993d46c00ee2f2b363f3eabe90b2a0e", "html_url": "https://github.com/rust-lang/rust/commit/9567a1cf5993d46c00ee2f2b363f3eabe90b2a0e"}, {"sha": "76cd8f05945e5edd8272e2e8c8f41ffd0182f403", "url": "https://api.github.com/repos/rust-lang/rust/commits/76cd8f05945e5edd8272e2e8c8f41ffd0182f403", "html_url": "https://github.com/rust-lang/rust/commit/76cd8f05945e5edd8272e2e8c8f41ffd0182f403"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "b70dfc46af50714b89a898b0de9367f3f10e1c94", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3a75e80557a103497cffbcab395a2f37061a77ea/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a75e80557a103497cffbcab395a2f37061a77ea/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=3a75e80557a103497cffbcab395a2f37061a77ea", "patch": "@@ -822,9 +822,14 @@ const NOTIFIED: usize = 2;\n /// In other words, each [`Thread`] acts a bit like a spinlock that can be\n /// locked and unlocked using `park` and `unpark`.\n ///\n+/// Notice that being unblocked does not imply any synchronization with someone\n+/// that unparked this thread, it could also be spurious.\n+/// For example, it would be a valid, but inefficient, implementation to make both [`park`] and\n+/// [`unpark`] return immediately without doing anything.\n+///\n /// The API is typically used by acquiring a handle to the current thread,\n /// placing that handle in a shared data structure so that other threads can\n-/// find it, and then `park`ing. When some desired condition is met, another\n+/// find it, and then `park`ing in a loop. When some desired condition is met, another\n /// thread calls [`unpark`] on the handle.\n ///\n /// The motivation for this design is twofold:\n@@ -839,21 +844,33 @@ const NOTIFIED: usize = 2;\n ///\n /// ```\n /// use std::thread;\n+/// use std::sync::{Arc, atomic::{Ordering, AtomicBool}};\n /// use std::time::Duration;\n ///\n-/// let parked_thread = thread::Builder::new()\n-///     .spawn(|| {\n+/// let flag = Arc::new(AtomicBool::new(false));\n+/// let flag2 = Arc::clone(&flag);\n+///\n+/// let parked_thread = thread::spawn(move || {\n+///     // We want to wait until the flag is set.  We *could* just spin, but using\n+///     // park/unpark is more efficient.\n+///     while !flag2.load(Ordering::Acquire) {\n ///         println!(\"Parking thread\");\n ///         thread::park();\n+///         // We *could* get here spuriously, i.e., way before the 10ms below are over!\n+///         // But that is no problem, we are in a loop until the flag is set anyway.\n ///         println!(\"Thread unparked\");\n-///     })\n-///     .unwrap();\n+///     }\n+///     println!(\"Flag received\");\n+/// });\n ///\n /// // Let some time pass for the thread to be spawned.\n /// thread::sleep(Duration::from_millis(10));\n ///\n+/// // Set the flag, and let the thread wake up.\n /// // There is no race condition here, if `unpark`\n /// // happens first, `park` will return immediately.\n+/// // Hence there is no risk of a deadlock.\n+/// flag.store(true, Ordering::Release);\n /// println!(\"Unpark the thread\");\n /// parked_thread.thread().unpark();\n ///"}]}