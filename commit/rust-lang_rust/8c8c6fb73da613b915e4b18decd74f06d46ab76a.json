{"sha": "8c8c6fb73da613b915e4b18decd74f06d46ab76a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjOGM2ZmI3M2RhNjEzYjkxNWU0YjE4ZGVjZDc0ZjA2ZDQ2YWI3NmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-20T20:17:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-20T20:17:03Z"}, "message": "Merge #9655\n\n9655: fix: Determine expected parameters from expected return in calls r=flodiebold a=flodiebold\n\nFixes #9560\r\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "464aa96c05d168ec38af5c4fb1a38e4226bc2857", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/464aa96c05d168ec38af5c4fb1a38e4226bc2857"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c8c6fb73da613b915e4b18decd74f06d46ab76a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg9y8/CRBK7hj4Ov3rIwAAcE0IAJMzDX8LCdcvWRXeSw0ECZRx\nf4Gr4tmYS/MMu+OoMnOebeleFSJurPIckNOjuOhDz54/1ui1xjhSrGjOZOR2TZQv\nSztKfJ9GhenuLPj18x8ikgRvPuz25qsufMc8ClLRZaTNy6J2uUCgMfEb7/5zjPeO\nw2bmZvYnSVfLY5AZpIf+Uwv3zqXtsE5HEyHlKAQ0/lDJ0MQeeaWqBEvNiGIRRKZx\nTchbOtsuTE1BQZghT7ZMHRemS16Vq8a5NyUQFPnEio2FkckpWycoLBwnOXJc5jS3\nuBF0ZnFal3rTaXEebA4rxW0lzVlrEaKyv84bsCUeejJDiVnzqg7vcBcljLsu8PE=\n=+zh+\n-----END PGP SIGNATURE-----\n", "payload": "tree 464aa96c05d168ec38af5c4fb1a38e4226bc2857\nparent ec7b4cbf8f7d6d88ae5280b72a93a7e5d0adb7c4\nparent ae22050a42340c3c13d56f9185cc1f0e35d1f7fb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626812223 +0000\ncommitter GitHub <noreply@github.com> 1626812223 +0000\n\nMerge #9655\n\n9655: fix: Determine expected parameters from expected return in calls r=flodiebold a=flodiebold\n\nFixes #9560\r\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8c6fb73da613b915e4b18decd74f06d46ab76a", "html_url": "https://github.com/rust-lang/rust/commit/8c8c6fb73da613b915e4b18decd74f06d46ab76a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c8c6fb73da613b915e4b18decd74f06d46ab76a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec7b4cbf8f7d6d88ae5280b72a93a7e5d0adb7c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7b4cbf8f7d6d88ae5280b72a93a7e5d0adb7c4", "html_url": "https://github.com/rust-lang/rust/commit/ec7b4cbf8f7d6d88ae5280b72a93a7e5d0adb7c4"}, {"sha": "ae22050a42340c3c13d56f9185cc1f0e35d1f7fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae22050a42340c3c13d56f9185cc1f0e35d1f7fb", "html_url": "https://github.com/rust-lang/rust/commit/ae22050a42340c3c13d56f9185cc1f0e35d1f7fb"}], "stats": {"total": 157, "additions": 142, "deletions": 15}, "files": [{"sha": "7efa81013292b767eecd866951b77061ed6ec1dd", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c8c6fb73da613b915e4b18decd74f06d46ab76a/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8c6fb73da613b915e4b18decd74f06d46ab76a/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=8c8c6fb73da613b915e4b18decd74f06d46ab76a", "patch": "@@ -845,8 +845,9 @@ impl Expectation {\n     /// which still is useful, because it informs integer literals and the like.\n     /// See the test case `test/ui/coerce-expect-unsized.rs` and #20169\n     /// for examples of where this comes up,.\n-    fn rvalue_hint(ty: Ty) -> Self {\n-        match ty.strip_references().kind(&Interner) {\n+    fn rvalue_hint(table: &mut unify::InferenceTable, ty: Ty) -> Self {\n+        // FIXME: do struct_tail_without_normalization\n+        match table.resolve_ty_shallow(&ty).kind(&Interner) {\n             TyKind::Slice(_) | TyKind::Str | TyKind::Dyn(_) => Expectation::RValueLikeUnsized(ty),\n             _ => Expectation::has_type(ty),\n         }"}, {"sha": "bcc36b114dc53433c1b5002d2e54cc083e9a3680", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 83, "deletions": 9, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8c8c6fb73da613b915e4b18decd74f06d46ab76a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8c6fb73da613b915e4b18decd74f06d46ab76a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=8c8c6fb73da613b915e4b18decd74f06d46ab76a", "patch": "@@ -340,11 +340,25 @@ impl<'a> InferenceContext<'a> {\n                     None => (Vec::new(), self.err_ty()),\n                 };\n                 self.register_obligations_for_call(&callee_ty);\n-                self.check_call_arguments(args, &param_tys);\n+\n+                let expected_inputs = self.expected_inputs_for_expected_output(\n+                    expected,\n+                    ret_ty.clone(),\n+                    param_tys.clone(),\n+                );\n+\n+                self.check_call_arguments(args, &expected_inputs, &param_tys);\n                 self.normalize_associated_types_in(ret_ty)\n             }\n             Expr::MethodCall { receiver, args, method_name, generic_args } => self\n-                .infer_method_call(tgt_expr, *receiver, args, method_name, generic_args.as_deref()),\n+                .infer_method_call(\n+                    tgt_expr,\n+                    *receiver,\n+                    args,\n+                    method_name,\n+                    generic_args.as_deref(),\n+                    expected,\n+                ),\n             Expr::Match { expr, arms } => {\n                 let input_ty = self.infer_expr(*expr, &Expectation::none());\n \n@@ -575,7 +589,7 @@ impl<'a> InferenceContext<'a> {\n                         // FIXME: record type error - expected reference but found ptr,\n                         // which cannot be coerced\n                     }\n-                    Expectation::rvalue_hint(Ty::clone(exp_inner))\n+                    Expectation::rvalue_hint(&mut self.table, Ty::clone(exp_inner))\n                 } else {\n                     Expectation::none()\n                 };\n@@ -902,6 +916,7 @@ impl<'a> InferenceContext<'a> {\n         args: &[ExprId],\n         method_name: &Name,\n         generic_args: Option<&GenericArgs>,\n+        expected: &Expectation,\n     ) -> Ty {\n         let receiver_ty = self.infer_expr(receiver, &Expectation::none());\n         let canonicalized_receiver = self.canonicalize(receiver_ty.clone());\n@@ -935,7 +950,7 @@ impl<'a> InferenceContext<'a> {\n         };\n         let method_ty = method_ty.substitute(&Interner, &substs);\n         self.register_obligations_for_call(&method_ty);\n-        let (expected_receiver_ty, param_tys, ret_ty) = match method_ty.callable_sig(self.db) {\n+        let (formal_receiver_ty, param_tys, ret_ty) = match method_ty.callable_sig(self.db) {\n             Some(sig) => {\n                 if !sig.params().is_empty() {\n                     (sig.params()[0].clone(), sig.params()[1..].to_vec(), sig.ret().clone())\n@@ -945,28 +960,87 @@ impl<'a> InferenceContext<'a> {\n             }\n             None => (self.err_ty(), Vec::new(), self.err_ty()),\n         };\n-        self.unify(&expected_receiver_ty, &receiver_ty);\n+        self.unify(&formal_receiver_ty, &receiver_ty);\n+\n+        let expected_inputs =\n+            self.expected_inputs_for_expected_output(expected, ret_ty.clone(), param_tys.clone());\n \n-        self.check_call_arguments(args, &param_tys);\n+        self.check_call_arguments(args, &expected_inputs, &param_tys);\n         self.normalize_associated_types_in(ret_ty)\n     }\n \n-    fn check_call_arguments(&mut self, args: &[ExprId], param_tys: &[Ty]) {\n+    fn expected_inputs_for_expected_output(\n+        &mut self,\n+        expected_output: &Expectation,\n+        output: Ty,\n+        inputs: Vec<Ty>,\n+    ) -> Vec<Ty> {\n+        // rustc does a snapshot here and rolls back the unification, but since\n+        // we actually want to keep unbound variables in the result it then\n+        // needs to do 'fudging' to recreate them. So I'm not sure rustc's\n+        // approach is cleaner than ours, which is to create independent copies\n+        // of the variables before unifying. It might be more performant though,\n+        // so we might want to benchmark when we can actually do\n+        // snapshot/rollback.\n+        if let Some(expected_ty) = expected_output.to_option(&mut self.table) {\n+            let (expected_ret_ty, expected_params) = self.table.reinstantiate((output, inputs));\n+            if self.table.try_unify(&expected_ty, &expected_ret_ty).is_ok() {\n+                expected_params\n+            } else {\n+                Vec::new()\n+            }\n+        } else {\n+            Vec::new()\n+        }\n+    }\n+\n+    fn check_call_arguments(&mut self, args: &[ExprId], expected_inputs: &[Ty], param_tys: &[Ty]) {\n         // Quoting https://github.com/rust-lang/rust/blob/6ef275e6c3cb1384ec78128eceeb4963ff788dca/src/librustc_typeck/check/mod.rs#L3325 --\n         // We do this in a pretty awful way: first we type-check any arguments\n         // that are not closures, then we type-check the closures. This is so\n         // that we have more information about the types of arguments when we\n         // type-check the functions. This isn't really the right way to do this.\n         for &check_closures in &[false, true] {\n             let param_iter = param_tys.iter().cloned().chain(repeat(self.err_ty()));\n-            for (&arg, param_ty) in args.iter().zip(param_iter) {\n+            let expected_iter = expected_inputs\n+                .iter()\n+                .cloned()\n+                .chain(param_iter.clone().skip(expected_inputs.len()));\n+            for ((&arg, param_ty), expected_ty) in args.iter().zip(param_iter).zip(expected_iter) {\n                 let is_closure = matches!(&self.body[arg], Expr::Lambda { .. });\n                 if is_closure != check_closures {\n                     continue;\n                 }\n \n+                // the difference between param_ty and expected here is that\n+                // expected is the parameter when the expected *return* type is\n+                // taken into account. So in `let _: &[i32] = identity(&[1, 2])`\n+                // the expected type is already `&[i32]`, whereas param_ty is\n+                // still an unbound type variable. We don't always want to force\n+                // the parameter to coerce to the expected type (for example in\n+                // `coerce_unsize_expected_type_4`).\n                 let param_ty = self.normalize_associated_types_in(param_ty);\n-                self.infer_expr_coerce(arg, &Expectation::has_type(param_ty.clone()));\n+                let expected = Expectation::rvalue_hint(&mut self.table, expected_ty);\n+                // infer with the expected type we have...\n+                let ty = self.infer_expr_inner(arg, &expected);\n+\n+                // then coerce to either the expected type or just the formal parameter type\n+                let coercion_target = if let Some(ty) = expected.only_has_type(&mut self.table) {\n+                    // if we are coercing to the expectation, unify with the\n+                    // formal parameter type to connect everything\n+                    self.unify(&ty, &param_ty);\n+                    ty\n+                } else {\n+                    param_ty\n+                };\n+                if !coercion_target.is_unknown() {\n+                    if self.coerce(Some(arg), &ty, &coercion_target).is_err() {\n+                        self.result.type_mismatches.insert(\n+                            arg.into(),\n+                            TypeMismatch { expected: coercion_target, actual: ty.clone() },\n+                        );\n+                    }\n+                }\n             }\n         }\n     }"}, {"sha": "505e7ead03b61c56d3d6fc24249b7bbb08026f03", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c8c6fb73da613b915e4b18decd74f06d46ab76a/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8c6fb73da613b915e4b18decd74f06d46ab76a/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=8c8c6fb73da613b915e4b18decd74f06d46ab76a", "patch": "@@ -302,6 +302,18 @@ impl<'a> InferenceTable<'a> {\n         self.resolve_with_fallback(t, |_, _, d, _| d)\n     }\n \n+    /// This makes a copy of the given `t` where all unbound inference variables\n+    /// have been replaced by fresh ones. This is useful for 'speculatively'\n+    /// unifying the result with something, without affecting the original types.\n+    pub(crate) fn reinstantiate<T>(&mut self, t: T) -> T::Result\n+    where\n+        T: HasInterner<Interner = Interner> + Fold<Interner>,\n+        T::Result: HasInterner<Interner = Interner> + Fold<Interner, Result = T::Result>,\n+    {\n+        let canonicalized = self.canonicalize(t);\n+        self.var_unification_table.instantiate_canonical(&Interner, canonicalized.value)\n+    }\n+\n     /// Unify two types and register new trait goals that arise from that.\n     pub(crate) fn unify(&mut self, ty1: &Ty, ty2: &Ty) -> bool {\n         let result = if let Ok(r) = self.try_unify(ty1, ty2) {"}, {"sha": "8b022b6be9b0b6d9944d1da29d1c3083fbca5953", "filename": "crates/hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8c8c6fb73da613b915e4b18decd74f06d46ab76a/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8c6fb73da613b915e4b18decd74f06d46ab76a/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=8c8c6fb73da613b915e4b18decd74f06d46ab76a", "patch": "@@ -390,7 +390,7 @@ fn test() {\n     let _: &Foo<[usize]> = &Foo { t: [1, 2, 3] };\n                                    //^^^^^^^^^ expected [usize], got [usize; 3]\n     let _: &Bar<[usize]> = &Bar(Foo { t: [1, 2, 3] });\n-                         //^^^^^^^^^^^^^^^^^^^^^^^^^^ expected &Bar<[usize]>, got &Bar<[i32; 3]>\n+                                       //^^^^^^^^^ expected [usize], got [usize; 3]\n }\n \"#,\n     );\n@@ -522,8 +522,7 @@ fn main() {\n \n #[test]\n fn coerce_unsize_expected_type_2() {\n-    // FIXME: this is wrong, #9560\n-    check(\n+    check_no_mismatches(\n         r#\"\n //- minicore: coerce_unsized\n struct InFile<T>;\n@@ -540,7 +539,48 @@ fn test() {\n     let x: InFile<()> = InFile;\n     let n = &RecordField;\n     takes_dyn(x.with_value(n));\n-           // ^^^^^^^^^^^^^^^ expected InFile<&dyn AstNode>, got InFile<&RecordField>\n+}\n+        \"#,\n+    );\n+}\n+\n+#[test]\n+fn coerce_unsize_expected_type_3() {\n+    check_no_mismatches(\n+        r#\"\n+//- minicore: coerce_unsized\n+enum Option<T> { Some(T), None }\n+struct RecordField;\n+trait AstNode {}\n+impl AstNode for RecordField {}\n+\n+fn takes_dyn(it: Option<&dyn AstNode>) {}\n+\n+fn test() {\n+    let x: InFile<()> = InFile;\n+    let n = &RecordField;\n+    takes_dyn(Option::Some(n));\n+}\n+        \"#,\n+    );\n+}\n+\n+#[test]\n+fn coerce_unsize_expected_type_4() {\n+    check_no_mismatches(\n+        r#\"\n+//- minicore: coerce_unsized\n+use core::{marker::Unsize, ops::CoerceUnsized};\n+\n+struct B<T: ?Sized>(*const T);\n+impl<T: ?Sized> B<T> {\n+    fn new(t: T) -> Self { B(&t) }\n+}\n+\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<B<U>> for B<T> {}\n+\n+fn test() {\n+    let _: B<[isize]> = B::new({ [1, 2, 3] });\n }\n         \"#,\n     );"}]}