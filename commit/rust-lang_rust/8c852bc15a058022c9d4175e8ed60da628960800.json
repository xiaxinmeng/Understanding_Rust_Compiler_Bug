{"sha": "8c852bc15a058022c9d4175e8ed60da628960800", "node_id": "C_kwDOAAsO6NoAKDhjODUyYmMxNWEwNTgwMjJjOWQ0MTc1ZThlZDYwZGE2Mjg5NjA4MDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-13T23:27:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-13T23:27:57Z"}, "message": "Auto merge of #89858 - matthiaskrgr:rollup-evsnr2e, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #89347 (suggestion for typoed crate or module)\n - #89670 (Improve `std::thread::available_parallelism` docs)\n - #89757 (Use shallow clones for submodules)\n - #89759 (Assemble the compiler when running `x.py build`)\n - #89846 (Add `riscv32imc-esp-espidf` to 1.56 changelog)\n - #89853 (Update the 1.56.0 release header for consistency)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "49734c5e504dbe6d555f0cafde9fc54064e87784", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49734c5e504dbe6d555f0cafde9fc54064e87784"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c852bc15a058022c9d4175e8ed60da628960800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c852bc15a058022c9d4175e8ed60da628960800", "html_url": "https://github.com/rust-lang/rust/commit/8c852bc15a058022c9d4175e8ed60da628960800", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c852bc15a058022c9d4175e8ed60da628960800/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc5add915e8bf4accbb7cf4de00351a7c6126a1", "html_url": "https://github.com/rust-lang/rust/commit/dfc5add915e8bf4accbb7cf4de00351a7c6126a1"}, {"sha": "a624eef249ac5348e6f3d27a03766adffa2b1920", "url": "https://api.github.com/repos/rust-lang/rust/commits/a624eef249ac5348e6f3d27a03766adffa2b1920", "html_url": "https://github.com/rust-lang/rust/commit/a624eef249ac5348e6f3d27a03766adffa2b1920"}], "stats": {"total": 206, "additions": 180, "deletions": 26}, "files": [{"sha": "63af8ebac195a6e62218580a9e71e9be430670f2", "filename": "RELEASES.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c852bc15a058022c9d4175e8ed60da628960800/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/8c852bc15a058022c9d4175e8ed60da628960800/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=8c852bc15a058022c9d4175e8ed60da628960800", "patch": "@@ -1,4 +1,4 @@\n-Rust 1.56.0 (2021-10-21)\n+Version 1.56.0 (2021-10-21)\n ========================\n \n Language\n@@ -22,6 +22,7 @@ Compiler\n   This feature is primarily intended for usage by `cargo fix`, rather than end users.\n - [Promote `aarch64-apple-ios-sim` to Tier 2\\*.][rust#87760]\n - [Add `powerpc-unknown-freebsd` at Tier 3\\*.][rust#87370]\n+- [Add `riscv32imc-esp-espidf` at Tier 3\\*.][rust#87666]\n \n \\* Refer to Rust's [platform support page][platform-support-doc] for more\n information on Rust's tiered platform support.\n@@ -180,6 +181,7 @@ and related tools.\n [rust#87619]: https://github.com/rust-lang/rust/pull/87619\n [rust#81825]: https://github.com/rust-lang/rust/pull/81825#issuecomment-808406918\n [rust#88019]: https://github.com/rust-lang/rust/pull/88019\n+[rust#87666]: https://github.com/rust-lang/rust/pull/87666\n \n Version 1.55.0 (2021-09-09)\n ============================"}, {"sha": "e3970038a33b03dad9fbe195ecae9fd23a49add1", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8c852bc15a058022c9d4175e8ed60da628960800/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c852bc15a058022c9d4175e8ed60da628960800/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=8c852bc15a058022c9d4175e8ed60da628960800", "patch": "@@ -1277,6 +1277,34 @@ impl<'a> Resolver<'a> {\n \n         err.emit();\n     }\n+\n+    crate fn find_similarly_named_module_or_crate(\n+        &mut self,\n+        ident: Symbol,\n+        current_module: &Module<'a>,\n+    ) -> Option<Symbol> {\n+        let mut candidates = self\n+            .extern_prelude\n+            .iter()\n+            .map(|(ident, _)| ident.name)\n+            .chain(\n+                self.module_map\n+                    .iter()\n+                    .filter(|(_, module)| {\n+                        current_module.is_ancestor_of(module) && !ptr::eq(current_module, *module)\n+                    })\n+                    .map(|(_, module)| module.kind.name())\n+                    .flatten(),\n+            )\n+            .filter(|c| !c.to_string().is_empty())\n+            .collect::<Vec<_>>();\n+        candidates.sort();\n+        candidates.dedup();\n+        match find_best_match_for_name(&candidates, ident, None) {\n+            Some(sugg) if sugg == ident => None,\n+            sugg => sugg,\n+        }\n+    }\n }\n \n impl<'a, 'b> ImportResolver<'a, 'b> {"}, {"sha": "9652c483686f06558438b529328e8abe289e4393", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8c852bc15a058022c9d4175e8ed60da628960800/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c852bc15a058022c9d4175e8ed60da628960800/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=8c852bc15a058022c9d4175e8ed60da628960800", "patch": "@@ -2555,7 +2555,22 @@ impl<'a> Resolver<'a> {\n \n                             (format!(\"use of undeclared type `{}`\", ident), suggestion)\n                         } else {\n-                            (format!(\"use of undeclared crate or module `{}`\", ident), None)\n+                            (\n+                                format!(\"use of undeclared crate or module `{}`\", ident),\n+                                self.find_similarly_named_module_or_crate(\n+                                    ident.name,\n+                                    &parent_scope.module,\n+                                )\n+                                .map(|sugg| {\n+                                    (\n+                                        vec![(ident.span, sugg.to_string())],\n+                                        String::from(\n+                                            \"there is a crate or module with a similar name\",\n+                                        ),\n+                                        Applicability::MaybeIncorrect,\n+                                    )\n+                                }),\n+                            )\n                         }\n                     } else {\n                         let parent = path[i - 1].ident.name;"}, {"sha": "b2aa500a0fd8fc84f4009b5d207408f486cfa086", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 57, "deletions": 20, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8c852bc15a058022c9d4175e8ed60da628960800/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c852bc15a058022c9d4175e8ed60da628960800/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=8c852bc15a058022c9d4175e8ed60da628960800", "patch": "@@ -1428,39 +1428,76 @@ fn _assert_sync_and_send() {\n     _assert_both::<Thread>();\n }\n \n-/// Returns the number of hardware threads available to the program.\n-///\n-/// This value should be considered only a hint.\n-///\n-/// # Platform-specific behavior\n-///\n-/// If interpreted as the number of actual hardware threads, it may undercount on\n-/// Windows systems with more than 64 hardware threads. If interpreted as the\n-/// available concurrency for that process, it may overcount on Windows systems\n-/// when limited by a process wide affinity mask or job object limitations, and\n-/// it may overcount on Linux systems when limited by a process wide affinity\n-/// mask or affected by cgroups limits.\n+/// Returns an estimate of the default amount of parallelism a program should use.\n+///\n+/// Parallelism is a resource. A given machine provides a certain capacity for\n+/// parallelism, i.e., a bound on the number of computations it can perform\n+/// simultaneously. This number often corresponds to the amount of CPUs or\n+/// computer has, but it may diverge in various cases.\n+///\n+/// Host environments such as VMs or container orchestrators may want to\n+/// restrict the amount of parallelism made available to programs in them. This\n+/// is often done to limit the potential impact of (unintentionally)\n+/// resource-intensive programs on other programs running on the same machine.\n+///\n+/// # Limitations\n+///\n+/// The purpose of this API is to provide an easy and portable way to query\n+/// the default amount of parallelism the program should use. Among other things it\n+/// does not expose information on NUMA regions, does not account for\n+/// differences in (co)processor capabilities, and will not modify the program's\n+/// global state in order to more accurately query the amount of available\n+/// parallelism.\n+///\n+/// The value returned by this function should be considered a simplified\n+/// approximation of the actual amount of parallelism available at any given\n+/// time. To get a more detailed or precise overview of the amount of\n+/// parallelism available to the program, you may wish to use\n+/// platform-specific APIs as well. The following platform limitations currently\n+/// apply to `available_parallelism`:\n+///\n+/// On Windows:\n+/// - It may undercount the amount of parallelism available on systems with more\n+///   than 64 logical CPUs. However, programs typically need specific support to\n+///   take advantage of more than 64 logical CPUs, and in the absence of such\n+///   support, the number returned by this function accurately reflects the\n+///   number of logical CPUs the program can use by default.\n+/// - It may overcount the amount of parallelism available on systems limited by\n+///   process-wide affinity masks, or job object limitations.\n+///\n+/// On Linux:\n+/// - It may overcount the amount of parallelism available when limited by a\n+///   process-wide affinity mask, or when affected by cgroup limits.\n+///\n+/// On all targets:\n+/// - It may overcount the amount of parallelism available when running in a VM\n+/// with CPU usage limits (e.g. an overcommitted host).\n ///\n /// # Errors\n ///\n-/// This function will return an error in the following situations, but is not\n-/// limited to just these cases:\n+/// This function will, but is not limited to, return errors in the following\n+/// cases:\n ///\n-/// - If the number of hardware threads is not known for the target platform.\n-/// - The process lacks permissions to view the number of hardware threads\n-///   available.\n+/// - If the amount of parallelism is not known for the target platform.\n+/// - If the program lacks permission to query the amount of parallelism made\n+///   available to it.\n ///\n /// # Examples\n ///\n /// ```\n /// # #![allow(dead_code)]\n /// #![feature(available_parallelism)]\n-/// use std::thread;\n+/// use std::{io, thread};\n ///\n-/// let count = thread::available_parallelism().map(|n| n.get()).unwrap_or(1);\n+/// fn main() -> io::Result<()> {\n+///     let count = thread::available_parallelism()?.get();\n+///     assert!(count >= 1_usize);\n+///     Ok(())\n+/// }\n /// ```\n+#[doc(alias = \"available_concurrency\")] // Alias for a previous name we gave this API on unstable.\n #[doc(alias = \"hardware_concurrency\")] // Alias for C++ `std::thread::hardware_concurrency`.\n-#[doc(alias = \"available_concurrency\")] // Alias for a name we gave this API on unstable.\n+#[doc(alias = \"num_cpus\")] // Alias for a popular ecosystem crate which provides similar functionality.\n #[unstable(feature = \"available_parallelism\", issue = \"74479\")]\n pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     imp::available_parallelism()"}, {"sha": "0170be967e1e307c2410a53a77f1a719eda247e2", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c852bc15a058022c9d4175e8ed60da628960800/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/8c852bc15a058022c9d4175e8ed60da628960800/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=8c852bc15a058022c9d4175e8ed60da628960800", "patch": "@@ -1001,7 +1001,7 @@ def update_submodule(self, module, checked_out, recorded_submodules):\n         run([\"git\", \"submodule\", \"-q\", \"sync\", module],\n             cwd=self.rust_root, verbose=self.verbose)\n \n-        update_args = [\"git\", \"submodule\", \"update\", \"--init\", \"--recursive\"]\n+        update_args = [\"git\", \"submodule\", \"update\", \"--init\", \"--recursive\", \"--depth=1\"]\n         if self.git_version >= distutils.version.LooseVersion(\"2.11.0\"):\n             update_args.append(\"--progress\")\n         update_args.append(module)"}, {"sha": "6750f7a549dd6d338b027f223d87ff39f5eea916", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c852bc15a058022c9d4175e8ed60da628960800/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c852bc15a058022c9d4175e8ed60da628960800/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=8c852bc15a058022c9d4175e8ed60da628960800", "patch": "@@ -370,7 +370,7 @@ impl<'a> Builder<'a> {\n         match kind {\n             Kind::Build => describe!(\n                 compile::Std,\n-                compile::Rustc,\n+                compile::Assemble,\n                 compile::CodegenBackend,\n                 compile::StartupObjects,\n                 tool::BuildManifest,"}, {"sha": "e9cc7662e6397a9b8bd9c5b2a0392cd4f9115194", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8c852bc15a058022c9d4175e8ed60da628960800/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c852bc15a058022c9d4175e8ed60da628960800/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=8c852bc15a058022c9d4175e8ed60da628960800", "patch": "@@ -528,7 +528,7 @@ impl Step for Rustc {\n     const DEFAULT: bool = false;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"compiler/rustc\")\n+        run.never()\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1023,9 +1023,16 @@ pub struct Assemble {\n \n impl Step for Assemble {\n     type Output = Compiler;\n+    const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.never()\n+        run.path(\"compiler/rustc\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(Assemble {\n+            target_compiler: run.builder.compiler(run.builder.top_stage + 1, run.target),\n+        });\n     }\n \n     /// Prepare a new compiler from the artifacts in `stage`"}, {"sha": "77b6486155cd2eb44f139a32ae1aecc10f871c2f", "filename": "src/test/ui/macros/macro-inner-attributes.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c852bc15a058022c9d4175e8ed60da628960800/src%2Ftest%2Fui%2Fmacros%2Fmacro-inner-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c852bc15a058022c9d4175e8ed60da628960800/src%2Ftest%2Fui%2Fmacros%2Fmacro-inner-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-inner-attributes.stderr?ref=8c852bc15a058022c9d4175e8ed60da628960800", "patch": "@@ -3,6 +3,11 @@ error[E0433]: failed to resolve: use of undeclared crate or module `a`\n    |\n LL |     a::bar();\n    |     ^ use of undeclared crate or module `a`\n+   |\n+help: there is a crate or module with a similar name\n+   |\n+LL |     b::bar();\n+   |     ~\n \n error: aborting due to previous error\n "}, {"sha": "2471b11c61efd1106cb2baa901448131ca235ac6", "filename": "src/test/ui/suggestions/crate-or-module-typo.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8c852bc15a058022c9d4175e8ed60da628960800/src%2Ftest%2Fui%2Fsuggestions%2Fcrate-or-module-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c852bc15a058022c9d4175e8ed60da628960800/src%2Ftest%2Fui%2Fsuggestions%2Fcrate-or-module-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcrate-or-module-typo.rs?ref=8c852bc15a058022c9d4175e8ed60da628960800", "patch": "@@ -0,0 +1,17 @@\n+// edition:2018\n+\n+use st::cell::Cell; //~ ERROR failed to resolve: use of undeclared crate or module `st`\n+\n+mod bar {\n+    pub fn bar() { bar::baz(); } //~ ERROR failed to resolve: use of undeclared crate or module `bar`\n+\n+    fn baz() {}\n+}\n+\n+use bas::bar; //~ ERROR unresolved import `bas`\n+\n+struct Foo {\n+    bar: st::cell::Cell<bool> //~ ERROR failed to resolve: use of undeclared crate or module `st`\n+}\n+\n+fn main() {}"}, {"sha": "e8250c9fa5ff49971a87e91409bdb89320602937", "filename": "src/test/ui/suggestions/crate-or-module-typo.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8c852bc15a058022c9d4175e8ed60da628960800/src%2Ftest%2Fui%2Fsuggestions%2Fcrate-or-module-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c852bc15a058022c9d4175e8ed60da628960800/src%2Ftest%2Fui%2Fsuggestions%2Fcrate-or-module-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcrate-or-module-typo.stderr?ref=8c852bc15a058022c9d4175e8ed60da628960800", "patch": "@@ -0,0 +1,43 @@\n+error[E0433]: failed to resolve: use of undeclared crate or module `st`\n+  --> $DIR/crate-or-module-typo.rs:3:5\n+   |\n+LL | use st::cell::Cell;\n+   |     ^^ use of undeclared crate or module `st`\n+   |\n+help: there is a crate or module with a similar name\n+   |\n+LL | use std::cell::Cell;\n+   |     ~~~\n+\n+error[E0432]: unresolved import `bas`\n+  --> $DIR/crate-or-module-typo.rs:11:5\n+   |\n+LL | use bas::bar;\n+   |     ^^^ use of undeclared crate or module `bas`\n+   |\n+help: there is a crate or module with a similar name\n+   |\n+LL | use bar::bar;\n+   |     ~~~\n+\n+error[E0433]: failed to resolve: use of undeclared crate or module `bar`\n+  --> $DIR/crate-or-module-typo.rs:6:20\n+   |\n+LL |     pub fn bar() { bar::baz(); }\n+   |                    ^^^ use of undeclared crate or module `bar`\n+\n+error[E0433]: failed to resolve: use of undeclared crate or module `st`\n+  --> $DIR/crate-or-module-typo.rs:14:10\n+   |\n+LL |     bar: st::cell::Cell<bool>\n+   |          ^^ use of undeclared crate or module `st`\n+   |\n+help: there is a crate or module with a similar name\n+   |\n+LL |     bar: std::cell::Cell<bool>\n+   |          ~~~\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0432, E0433.\n+For more information about an error, try `rustc --explain E0432`."}]}