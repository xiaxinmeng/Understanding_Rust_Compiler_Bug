{"sha": "8d2706cca8c26d5e74b4c0111f89d49d61029875", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMjcwNmNjYThjMjZkNWU3NGI0YzAxMTFmODlkNDlkNjEwMjk4NzU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-14T01:13:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-14T17:27:02Z"}, "message": "Flag --test implies '--cfg test'. Issue #428\n\nSo certain code can be conditionally compiled only when building for testing", "tree": {"sha": "6fd6bf978e8a1073ae6ac5c276f25c4ddfecba54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fd6bf978e8a1073ae6ac5c276f25c4ddfecba54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d2706cca8c26d5e74b4c0111f89d49d61029875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2706cca8c26d5e74b4c0111f89d49d61029875", "html_url": "https://github.com/rust-lang/rust/commit/8d2706cca8c26d5e74b4c0111f89d49d61029875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d2706cca8c26d5e74b4c0111f89d49d61029875/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7376e751aeed046c29ff4b892b359002de145d2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7376e751aeed046c29ff4b892b359002de145d2d", "html_url": "https://github.com/rust-lang/rust/commit/7376e751aeed046c29ff4b892b359002de145d2d"}], "stats": {"total": 65, "additions": 59, "deletions": 6}, "files": [{"sha": "96d050f9f83c1a6624fbb2d3d9200c7b923e0d72", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 53, "deletions": 6, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8d2706cca8c26d5e74b4c0111f89d49d61029875/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2706cca8c26d5e74b4c0111f89d49d61029875/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=8d2706cca8c26d5e74b4c0111f89d49d61029875", "patch": "@@ -63,8 +63,19 @@ fn default_configuration(session::session sess, str argv0, str input) ->\n fn build_configuration(session::session sess, str argv0,\n                        str input) -> ast::crate_cfg {\n     // Combine the configuration requested by the session (command line) with\n-    // some default configuration items\n-    ret sess.get_opts().cfg + default_configuration(sess, argv0, input);\n+    // some default and generated configuration items\n+    auto default_cfg = default_configuration(sess, argv0, input);\n+    auto user_cfg = sess.get_opts().cfg;\n+    auto gen_cfg = {\n+        // If the user wants a test runner, then add the test cfg\n+        if (sess.get_opts().test\n+            && !attr::contains_name(user_cfg, \"test\")) {\n+            ~[attr::mk_word_item(\"test\")]\n+        } else {\n+            ~[]\n+        }\n+    };\n+    ret user_cfg + gen_cfg + default_cfg;\n }\n \n // Convert strings provided as --cfg [cfgspec] into a crate_cfg\n@@ -374,9 +385,8 @@ fn parse_pretty(session::session sess, &str name) -> pp_mode {\n                  \"`identified`\");\n }\n \n-fn main(vec[str] args) {\n-    auto opts =\n-        [optflag(\"h\"), optflag(\"help\"), optflag(\"v\"), optflag(\"version\"),\n+fn opts() -> vec[getopts::opt] {\n+    ret [optflag(\"h\"), optflag(\"help\"), optflag(\"v\"), optflag(\"version\"),\n          optflag(\"glue\"), optflag(\"emit-llvm\"), optflagopt(\"pretty\"),\n          optflag(\"ls\"), optflag(\"parse-only\"), optflag(\"O\"),\n          optopt(\"OptLevel\"), optmulti(\"L\"), optflag(\"S\"),\n@@ -385,10 +395,13 @@ fn main(vec[str] args) {\n          optflag(\"time-llvm-passes\"), optflag(\"no-typestate\"),\n          optflag(\"noverify\"), optmulti(\"cfg\"), optflag(\"test\"),\n          optflag(\"lib\"), optflag(\"static\")];\n+}\n+\n+fn main(vec[str] args) {\n     auto binary = vec::shift[str](args);\n     auto binary_dir = fs::dirname(binary);\n     auto match =\n-        alt (getopts::getopts(args, opts)) {\n+        alt (getopts::getopts(args, opts())) {\n             case (getopts::success(?m)) { m }\n             case (getopts::failure(?f)) {\n                 log_err #fmt(\"error: %s\", getopts::fail_str(f));\n@@ -572,6 +585,40 @@ fn main(vec[str] args) {\n         run::run_program(\"rm\", [saved_out_filename + \".o\"]);\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+\n+    import std::ivec;\n+\n+    // When the user supplies --test we should implicitly supply --cfg test\n+    #[test]\n+    fn test_switch_implies_cfg_test() {\n+        auto match = alt (getopts::getopts([\"--test\"], opts())) {\n+            getopts::success(?m) { m }\n+        };\n+        auto sessopts = build_session_options(\"whatever\", match, \"whatever\");\n+        auto sess = build_session(sessopts);\n+        auto cfg = build_configuration(sess, \"whatever\", \"whatever\");\n+        assert attr::contains_name(cfg, \"test\");\n+    }\n+\n+    // When the user supplies --test and --cfg test, don't implicitly add\n+    // another --cfg test\n+    #[test]\n+    fn test_switch_implies_cfg_test_unless_cfg_test() {\n+        auto match = alt (getopts::getopts([\"--test\",\n+                                            \"--cfg=test\"], opts())) {\n+            getopts::success(?m) { m }\n+        };\n+        auto sessopts = build_session_options(\"whatever\", match, \"whatever\");\n+        auto sess = build_session(sessopts);\n+        auto cfg = build_configuration(sess, \"whatever\", \"whatever\");\n+        auto test_items = attr::find_meta_items_by_name(cfg, \"test\");\n+        assert ivec::len(test_items) == 1u;\n+    }\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "667c785debfdb43a8f5a18d95f1b528c469e4b4c", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d2706cca8c26d5e74b4c0111f89d49d61029875/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d2706cca8c26d5e74b4c0111f89d49d61029875/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=8d2706cca8c26d5e74b4c0111f89d49d61029875", "patch": "@@ -14,6 +14,7 @@ export find_linkage_metas;\n export find_attrs_by_name;\n export find_meta_items_by_name;\n export contains;\n+export contains_name;\n export sort_meta_items;\n export remove_meta_items_by_name;\n export require_unique_names;\n@@ -145,6 +146,11 @@ fn contains(&(@ast::meta_item)[] haystack, @ast::meta_item needle) -> bool {\n     ret false;\n }\n \n+fn contains_name(&(@ast::meta_item)[] metas, ast::ident name) -> bool {\n+    auto matches = find_meta_items_by_name(metas, name);\n+    ret ivec::len(matches) > 0u;\n+}\n+\n // FIXME: This needs to sort by meta_item variant in addition to the item name\n fn sort_meta_items(&(@ast::meta_item)[] items) -> (@ast::meta_item)[] {\n     fn lteq(&@ast::meta_item ma, &@ast::meta_item mb) -> bool {"}]}