{"sha": "5b55e0706c3fff3fd015e5396422a2a1eda19779", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNTVlMDcwNmMzZmZmM2ZkMDE1ZTUzOTY0MjJhMmExZWRhMTk3Nzk=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-19T23:42:58Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Add more concurrency tests.", "tree": {"sha": "400a684c46b90e70378c968c23815bea0fe00912", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/400a684c46b90e70378c968c23815bea0fe00912"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b55e0706c3fff3fd015e5396422a2a1eda19779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b55e0706c3fff3fd015e5396422a2a1eda19779", "html_url": "https://github.com/rust-lang/rust/commit/5b55e0706c3fff3fd015e5396422a2a1eda19779", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b55e0706c3fff3fd015e5396422a2a1eda19779/comments", "author": null, "committer": null, "parents": [{"sha": "17f7bc86ae4bf5d160ae13552387afb922f75cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/17f7bc86ae4bf5d160ae13552387afb922f75cdc", "html_url": "https://github.com/rust-lang/rust/commit/17f7bc86ae4bf5d160ae13552387afb922f75cdc"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "e34d3f5c93bce1b59913e85dfe025f1c3a3d4a81", "filename": "tests/compile-fail/concurrency/libc_pthread_create_main_terminate.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5b55e0706c3fff3fd015e5396422a2a1eda19779/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b55e0706c3fff3fd015e5396422a2a1eda19779/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs?ref=5b55e0706c3fff3fd015e5396422a2a1eda19779", "patch": "@@ -0,0 +1,24 @@\n+// ignore-windows: Concurrency on Windows is not supported yet.\n+\n+// Check that we terminate the program when the main thread terminates.\n+\n+//~^^^^ ERROR: unsupported operation: the main thread terminated without waiting for other threads\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+use std::{mem, ptr};\n+\n+extern \"C\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {\n+    ptr::null_mut()\n+}\n+\n+fn main() {\n+    unsafe {\n+        let mut native: libc::pthread_t = mem::zeroed();\n+        let attr: libc::pthread_attr_t = mem::zeroed();\n+        // assert_eq!(libc::pthread_attr_init(&mut attr), 0); FIXME: this function is not yet implemented.\n+        assert_eq!(libc::pthread_create(&mut native, &attr, thread_start, ptr::null_mut()), 0);\n+    }\n+}"}, {"sha": "ad83fb2efef3dd1e10dca06e47a1cf140789791b", "filename": "tests/compile-fail/concurrency/libc_pthread_join_detached.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5b55e0706c3fff3fd015e5396422a2a1eda19779/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_detached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b55e0706c3fff3fd015e5396422a2a1eda19779/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_detached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_detached.rs?ref=5b55e0706c3fff3fd015e5396422a2a1eda19779", "patch": "@@ -0,0 +1,24 @@\n+// ignore-windows: Concurrency on Windows is not supported yet.\n+\n+// Joining a detached thread is undefined behavior.\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+use std::{mem, ptr};\n+\n+extern \"C\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {\n+    ptr::null_mut()\n+}\n+\n+fn main() {\n+    unsafe {\n+        let mut native: libc::pthread_t = mem::zeroed();\n+        let attr: libc::pthread_attr_t = mem::zeroed();\n+        // assert_eq!(libc::pthread_attr_init(&mut attr), 0); FIXME: this function is not yet implemented.\n+        assert_eq!(libc::pthread_create(&mut native, &attr, thread_start, ptr::null_mut()), 0);\n+        assert_eq!(libc::pthread_detach(native), 0);\n+        assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0); //~ ERROR: Undefined Behavior: trying to join a detached or already joined thread\n+    }\n+}"}, {"sha": "3ca04244969041510fec7cdbc3a0eebe301ecb48", "filename": "tests/compile-fail/concurrency/libc_pthread_join_joined.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5b55e0706c3fff3fd015e5396422a2a1eda19779/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_joined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b55e0706c3fff3fd015e5396422a2a1eda19779/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_joined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_joined.rs?ref=5b55e0706c3fff3fd015e5396422a2a1eda19779", "patch": "@@ -0,0 +1,24 @@\n+// ignore-windows: Concurrency on Windows is not supported yet.\n+\n+// Joining an already joined thread is undefined behavior.\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+use std::{mem, ptr};\n+\n+extern \"C\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {\n+    ptr::null_mut()\n+}\n+\n+fn main() {\n+    unsafe {\n+        let mut native: libc::pthread_t = mem::zeroed();\n+        let attr: libc::pthread_attr_t = mem::zeroed();\n+        // assert_eq!(libc::pthread_attr_init(&mut attr), 0); FIXME: this function is not yet implemented.\n+        assert_eq!(libc::pthread_create(&mut native, &attr, thread_start, ptr::null_mut()), 0);\n+        assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n+        assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0); //~ ERROR: Undefined Behavior: trying to join a detached or already joined thread\n+    }\n+}"}, {"sha": "08ce94022c6f1e3dabfa1c22db4b1ac4d131b16c", "filename": "tests/compile-fail/concurrency/libc_pthread_join_multiple.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5b55e0706c3fff3fd015e5396422a2a1eda19779/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b55e0706c3fff3fd015e5396422a2a1eda19779/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_multiple.rs?ref=5b55e0706c3fff3fd015e5396422a2a1eda19779", "patch": "@@ -0,0 +1,30 @@\n+// ignore-windows: Concurrency on Windows is not supported yet.\n+\n+// Joining the same thread multiple times is undefined behavior.\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+use std::thread;\n+use std::{mem, ptr};\n+\n+extern \"C\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {\n+    ptr::null_mut()\n+}\n+\n+fn main() {\n+    unsafe {\n+        let mut native: libc::pthread_t = mem::zeroed();\n+        let attr: libc::pthread_attr_t = mem::zeroed();\n+        // assert_eq!(libc::pthread_attr_init(&mut attr), 0); FIXME: this function is not yet implemented.\n+        assert_eq!(libc::pthread_create(&mut native, &attr, thread_start, ptr::null_mut()), 0);\n+        let mut native_copy: libc::pthread_t = mem::zeroed();\n+        ptr::copy_nonoverlapping(&native, &mut native_copy, 1);\n+        let handle = thread::spawn(move || {\n+            assert_eq!(libc::pthread_join(native_copy, ptr::null_mut()), 0); //~ ERROR: Undefined Behavior: trying to join a detached or already joined thread\n+        });\n+        assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n+        handle.join().unwrap();\n+    }\n+}"}, {"sha": "1aeb274dcd1dbb72ac3de57d4c32787315528ecd", "filename": "tests/compile-fail/concurrency/libc_pthread_join_self.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b55e0706c3fff3fd015e5396422a2a1eda19779/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b55e0706c3fff3fd015e5396422a2a1eda19779/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Flibc_pthread_join_self.rs?ref=5b55e0706c3fff3fd015e5396422a2a1eda19779", "patch": "@@ -0,0 +1,16 @@\n+// ignore-windows: Concurrency on Windows is not supported yet.\n+\n+// Joining itself is undefined behavior.\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+use std::ptr;\n+\n+fn main() {\n+    unsafe {\n+        let native: libc::pthread_t = libc::pthread_self();\n+        assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0); //~ ERROR: Undefined Behavior: trying to join itself\n+    }\n+}"}]}