{"sha": "1e40681f50bf820844480b375ab0379aef4ec429", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNDA2ODFmNTBiZjgyMDg0NDQ4MGIzNzVhYjAzNzlhZWY0ZWM0Mjk=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-13T23:01:12Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-26T21:46:22Z"}, "message": "Don't ICE on the use of integer addresses for ZST constants in pattern matching", "tree": {"sha": "53d2a0d1bd49536982ff52d3248d5711faf4ca29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53d2a0d1bd49536982ff52d3248d5711faf4ca29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e40681f50bf820844480b375ab0379aef4ec429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e40681f50bf820844480b375ab0379aef4ec429", "html_url": "https://github.com/rust-lang/rust/commit/1e40681f50bf820844480b375ab0379aef4ec429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e40681f50bf820844480b375ab0379aef4ec429/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e0a1c09108b52e41113520c7fa516480a8b67f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e0a1c09108b52e41113520c7fa516480a8b67f9", "html_url": "https://github.com/rust-lang/rust/commit/3e0a1c09108b52e41113520c7fa516480a8b67f9"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "957a028a59ebb646634478af5029ec761b8b5c90", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e40681f50bf820844480b375ab0379aef4ec429/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e40681f50bf820844480b375ab0379aef4ec429/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=1e40681f50bf820844480b375ab0379aef4ec429", "patch": "@@ -127,6 +127,10 @@ impl<Tag> Allocation<Tag> {\n             extra: (),\n         }\n     }\n+\n+    pub fn zst(align: Align) -> Self {\n+        Self::undef(Size::ZERO, align)\n+    }\n }\n \n impl Allocation<(), ()> {"}, {"sha": "9851f24689744900e7ab484a62aed9930cfacc0d", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1e40681f50bf820844480b375ab0379aef4ec429/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e40681f50bf820844480b375ab0379aef4ec429/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=1e40681f50bf820844480b375ab0379aef4ec429", "patch": "@@ -237,11 +237,11 @@ use super::{FieldPat, Pat, PatKind, PatRange};\n \n use rustc::hir::def_id::DefId;\n use rustc::hir::{HirId, RangeEnd};\n-use rustc::ty::layout::{Integer, IntegerExt, Size, VariantIdx};\n+use rustc::ty::layout::{Align, Integer, IntegerExt, Size, VariantIdx};\n use rustc::ty::{self, Const, Ty, TyCtxt, TypeFoldable, VariantDef};\n \n use rustc::lint;\n-use rustc::mir::interpret::{truncate, AllocId, ConstValue, Pointer, Scalar};\n+use rustc::mir::interpret::{truncate, AllocId, Allocation, ConstValue, Pointer, Scalar};\n use rustc::mir::Field;\n use rustc::util::captures::Captures;\n use rustc::util::common::ErrorReported;\n@@ -252,6 +252,7 @@ use syntax_pos::{Span, DUMMY_SP};\n use arena::TypedArena;\n \n use smallvec::{smallvec, SmallVec};\n+use std::borrow::Cow;\n use std::cmp::{self, max, min, Ordering};\n use std::convert::TryInto;\n use std::fmt;\n@@ -260,11 +261,12 @@ use std::ops::RangeInclusive;\n use std::u128;\n \n pub fn expand_pattern<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>, pat: Pat<'tcx>) -> Pat<'tcx> {\n-    LiteralExpander { tcx: cx.tcx }.fold_pattern(&pat)\n+    LiteralExpander { tcx: cx.tcx, param_env: cx.param_env }.fold_pattern(&pat)\n }\n \n struct LiteralExpander<'tcx> {\n     tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n }\n \n impl LiteralExpander<'tcx> {\n@@ -284,9 +286,23 @@ impl LiteralExpander<'tcx> {\n         debug!(\"fold_const_value_deref {:?} {:?} {:?}\", val, rty, crty);\n         match (val, &crty.kind, &rty.kind) {\n             // the easy case, deref a reference\n-            (ConstValue::Scalar(Scalar::Ptr(p)), x, y) if x == y => {\n-                let alloc = self.tcx.alloc_map.lock().unwrap_memory(p.alloc_id);\n-                ConstValue::ByRef { alloc, offset: p.offset }\n+            (ConstValue::Scalar(p), x, y) if x == y => {\n+                match p {\n+                    Scalar::Ptr(p) => {\n+                        let alloc = self.tcx.alloc_map.lock().unwrap_memory(p.alloc_id);\n+                        ConstValue::ByRef { alloc, offset: p.offset }\n+                    }\n+                    Scalar::Raw { .. } => {\n+                        let layout = self.tcx.layout_of(self.param_env.and(rty)).unwrap();\n+                        if layout.is_zst() {\n+                            // Deref of a reference to a ZST is a nop.\n+                            ConstValue::Scalar(Scalar::zst())\n+                        } else {\n+                            // FIXME(oli-obk): this is reachable for `const FOO: &&&u32 = &&&42;`\n+                            bug!(\"cannot deref {:#?}, {} -> {}\", val, crty, rty);\n+                        }\n+                    }\n+                }\n             }\n             // unsize array to slice if pattern is array but match value or other patterns are slice\n             (ConstValue::Scalar(Scalar::Ptr(p)), ty::Array(t, n), ty::Slice(u)) => {\n@@ -2348,16 +2364,28 @@ fn specialize_one_pattern<'p, 'tcx>(\n             // just integers. The only time they should be pointing to memory\n             // is when they are subslices of nonzero slices.\n             let (alloc, offset, n, ty) = match value.ty.kind {\n-                ty::Array(t, n) => match value.val {\n-                    ty::ConstKind::Value(ConstValue::ByRef { offset, alloc, .. }) => {\n-                        (alloc, offset, n.eval_usize(cx.tcx, cx.param_env), t)\n+                ty::Array(t, n) => {\n+                    let n = n.eval_usize(cx.tcx, cx.param_env);\n+                    match value.val {\n+                        ty::ConstKind::Value(ConstValue::ByRef { offset, alloc, .. }) => {\n+                            (Cow::Borrowed(alloc), offset, n, t)\n+                        }\n+                        ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data, .. }))\n+                            if n == 0 =>\n+                        {\n+                            let align = Align::from_bytes(data as u64).unwrap();\n+                            // empty array\n+                            (Cow::Owned(Allocation::zst(align)), Size::ZERO, 0, t)\n+                        }\n+                        _ => span_bug!(pat.span, \"array pattern is {:?}\", value,),\n                     }\n-                    _ => span_bug!(pat.span, \"array pattern is {:?}\", value,),\n-                },\n+                }\n                 ty::Slice(t) => {\n                     match value.val {\n                         ty::ConstKind::Value(ConstValue::Slice { data, start, end }) => {\n-                            (data, Size::from_bytes(start as u64), (end - start) as u64, t)\n+                            let offset = Size::from_bytes(start as u64);\n+                            let n = (end - start) as u64;\n+                            (Cow::Borrowed(data), offset, n, t)\n                         }\n                         ty::ConstKind::Value(ConstValue::ByRef { .. }) => {\n                             // FIXME(oli-obk): implement `deref` for `ConstValue`"}, {"sha": "a68ee3308bc23659cd362864273d0bbc72aee572", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e40681f50bf820844480b375ab0379aef4ec429/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e40681f50bf820844480b375ab0379aef4ec429/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=1e40681f50bf820844480b375ab0379aef4ec429", "patch": "@@ -993,6 +993,12 @@ pub fn compare_const_vals<'tcx>(\n         return fallback();\n     }\n \n+    // Early return for equal constants (so e.g. references to ZSTs can be compared, even if they\n+    // are just integer addresses).\n+    if a.val == b.val {\n+        return from_bool(true);\n+    }\n+\n     let a_bits = a.try_eval_bits(tcx, param_env, ty);\n     let b_bits = b.try_eval_bits(tcx, param_env, ty);\n "}, {"sha": "ee1e3cc22f77d13e3ff00cb53c4dc019b1041edc", "filename": "src/test/ui/consts/consts-in-patterns.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1e40681f50bf820844480b375ab0379aef4ec429/src%2Ftest%2Fui%2Fconsts%2Fconsts-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e40681f50bf820844480b375ab0379aef4ec429/src%2Ftest%2Fui%2Fconsts%2Fconsts-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconsts-in-patterns.rs?ref=1e40681f50bf820844480b375ab0379aef4ec429", "patch": "@@ -1,7 +1,10 @@\n // run-pass\n+#![feature(const_transmute)]\n \n const FOO: isize = 10;\n const BAR: isize = 3;\n+const ZST: &() = unsafe { std::mem::transmute(1usize) };\n+const ZST_ARR: &[u8; 0] = unsafe { std::mem::transmute(1usize) };\n \n const fn foo() -> isize { 4 }\n const BOO: isize = foo();\n@@ -15,4 +18,14 @@ pub fn main() {\n         _ => 3\n     };\n     assert_eq!(y, 2);\n+    let z = match &() {\n+        ZST => 9,\n+        // FIXME: this should not be required\n+        _ => 42,\n+    };\n+    assert_eq!(z, 9);\n+    let z = match b\"\" {\n+        ZST_ARR => 10,\n+    };\n+    assert_eq!(z, 10);\n }"}]}