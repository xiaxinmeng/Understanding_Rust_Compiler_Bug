{"sha": "18bffdb10e25ebaec6752fe4f18dba77e27a23ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YmZmZGIxMGUyNWViYWVjNjc1MmZlNGYxOGRiYTc3ZTI3YTIzZWQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-05T19:09:33Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-04-29T19:36:55Z"}, "message": "Move parenting info to index_hir.", "tree": {"sha": "9e8df294eae238fb90b225c383a92fe9435df205", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e8df294eae238fb90b225c383a92fe9435df205"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18bffdb10e25ebaec6752fe4f18dba77e27a23ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18bffdb10e25ebaec6752fe4f18dba77e27a23ed", "html_url": "https://github.com/rust-lang/rust/commit/18bffdb10e25ebaec6752fe4f18dba77e27a23ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18bffdb10e25ebaec6752fe4f18dba77e27a23ed/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99d3798b6cef2d1e427b6c50ffef65c28e43acbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/99d3798b6cef2d1e427b6c50ffef65c28e43acbf", "html_url": "https://github.com/rust-lang/rust/commit/99d3798b6cef2d1e427b6c50ffef65c28e43acbf"}], "stats": {"total": 96, "additions": 54, "deletions": 42}, "files": [{"sha": "719bbf04c95bd434bd525e6e1d8b6b64dbea0b9b", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/18bffdb10e25ebaec6752fe4f18dba77e27a23ed/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bffdb10e25ebaec6752fe4f18dba77e27a23ed/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=18bffdb10e25ebaec6752fe4f18dba77e27a23ed", "patch": "@@ -1,6 +1,6 @@\n use crate::arena::Arena;\n use crate::hir::map::{HirOwnerData, Map};\n-use crate::hir::{Owner, OwnerNodes, ParentedNode};\n+use crate::hir::{IndexedHir, Owner, OwnerNodes, ParentedNode};\n use crate::ich::StableHashingContext;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n@@ -29,6 +29,7 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     source_map: &'a SourceMap,\n \n     map: IndexVec<LocalDefId, HirOwnerData<'hir>>,\n+    parenting: FxHashMap<LocalDefId, HirId>,\n \n     /// The parent of this node\n     parent_node: hir::HirId,\n@@ -109,6 +110,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             map: (0..definitions.def_index_count())\n                 .map(|_| HirOwnerData { signature: None, with_bodies: None })\n                 .collect(),\n+            parenting: FxHashMap::default(),\n         };\n         collector.insert_entry(\n             hir::CRATE_HIR_ID,\n@@ -119,15 +121,13 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         collector\n     }\n \n-    pub(super) fn finalize_and_compute_crate_hash(\n-        mut self,\n-    ) -> IndexVec<LocalDefId, HirOwnerData<'hir>> {\n+    pub(super) fn finalize_and_compute_crate_hash(mut self) -> IndexedHir<'hir> {\n         // Insert bodies into the map\n         for (id, body) in self.krate.bodies.iter() {\n             let bodies = &mut self.map[id.hir_id.owner].with_bodies.as_mut().unwrap().bodies;\n             assert!(bodies.insert(id.hir_id.local_id, body).is_none());\n         }\n-        self.map\n+        IndexedHir { map: self.map, parenting: self.parenting }\n     }\n \n     fn insert_entry(&mut self, id: HirId, entry: Entry<'hir>, hash: Fingerprint) {\n@@ -152,8 +152,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             nodes.hash = hash;\n \n             debug_assert!(data.signature.is_none());\n-            data.signature =\n-                Some(self.arena.alloc(Owner { parent: entry.parent, node: entry.node }));\n+            data.signature = Some(self.arena.alloc(Owner { node: entry.node }));\n \n             let dk_parent = self.definitions.def_key(id.owner).parent;\n             if let Some(dk_parent) = dk_parent {\n@@ -165,6 +164,8 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                         id.owner, dk_parent, entry.parent,\n                     )\n                 }\n+\n+                debug_assert_eq!(self.parenting.get(&id.owner), Some(&entry.parent));\n             }\n         } else {\n             assert_eq!(entry.parent.owner, id.owner);\n@@ -234,6 +235,22 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         f(self, hash);\n         self.current_dep_node_owner = prev_owner;\n     }\n+\n+    fn insert_nested(&mut self, item: LocalDefId) {\n+        #[cfg(debug_assertions)]\n+        {\n+            let dk_parent = self.definitions.def_key(item).parent.unwrap();\n+            let dk_parent = LocalDefId { local_def_index: dk_parent };\n+            let dk_parent = self.definitions.local_def_id_to_hir_id(dk_parent);\n+            debug_assert_eq!(\n+                dk_parent.owner, self.parent_node.owner,\n+                \"Different parents for {:?}\",\n+                item\n+            )\n+        }\n+\n+        assert_eq!(self.parenting.insert(item, self.parent_node), None);\n+    }\n }\n \n impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n@@ -249,18 +266,22 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n \n     fn visit_nested_item(&mut self, item: ItemId) {\n         debug!(\"visit_nested_item: {:?}\", item);\n+        self.insert_nested(item.def_id);\n         self.visit_item(self.krate.item(item));\n     }\n \n     fn visit_nested_trait_item(&mut self, item_id: TraitItemId) {\n+        self.insert_nested(item_id.def_id);\n         self.visit_trait_item(self.krate.trait_item(item_id));\n     }\n \n     fn visit_nested_impl_item(&mut self, item_id: ImplItemId) {\n+        self.insert_nested(item_id.def_id);\n         self.visit_impl_item(self.krate.impl_item(item_id));\n     }\n \n     fn visit_nested_foreign_item(&mut self, foreign_id: ForeignItemId) {\n+        self.insert_nested(foreign_id.def_id);\n         self.visit_foreign_item(self.krate.foreign_item(foreign_id));\n     }\n \n@@ -448,6 +469,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n             self.definitions.local_def_id_to_hir_id(LocalDefId { local_def_index })\n         });\n         self.with_parent(parent, |this| {\n+            this.insert_nested(macro_def.def_id);\n             this.with_dep_node_owner(macro_def.def_id, macro_def, |this, hash| {\n                 this.insert_with_hash(\n                     macro_def.span,"}, {"sha": "3f5a65b9f3c1654d12ddb1c8d7ecce62dc6d7022", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/18bffdb10e25ebaec6752fe4f18dba77e27a23ed/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bffdb10e25ebaec6752fe4f18dba77e27a23ed/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=18bffdb10e25ebaec6752fe4f18dba77e27a23ed", "patch": "@@ -285,8 +285,8 @@ impl<'hir> Map<'hir> {\n \n     pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {\n         if id.local_id == ItemLocalId::from_u32(0) {\n-            let owner = self.tcx.hir_owner(id.owner)?;\n-            Some(owner.parent)\n+            let index = self.tcx.index_hir(LOCAL_CRATE);\n+            index.parenting.get(&id.owner).copied()\n         } else {\n             let owner = self.tcx.hir_owner_nodes(id.owner)?;\n             let node = owner.nodes[id.local_id].as_ref()?;\n@@ -296,7 +296,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn get_parent_node(&self, hir_id: HirId) -> HirId {\n-        self.find_parent_node(hir_id).unwrap()\n+        self.find_parent_node(hir_id).unwrap_or(CRATE_HIR_ID)\n     }\n \n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n@@ -934,17 +934,13 @@ pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx Indexe\n \n     let _prof_timer = tcx.sess.prof.generic_activity(\"build_hir_map\");\n \n-    let map = {\n-        let hcx = tcx.create_stable_hashing_context();\n-\n-        let mut collector =\n-            NodeCollector::root(tcx.sess, &**tcx.arena, tcx.untracked_crate, &tcx.definitions, hcx);\n-        intravisit::walk_crate(&mut collector, tcx.untracked_crate);\n-\n-        collector.finalize_and_compute_crate_hash()\n-    };\n+    let hcx = tcx.create_stable_hashing_context();\n+    let mut collector =\n+        NodeCollector::root(tcx.sess, &**tcx.arena, tcx.untracked_crate, &tcx.definitions, hcx);\n+    intravisit::walk_crate(&mut collector, tcx.untracked_crate);\n \n-    tcx.arena.alloc(IndexedHir { map })\n+    let map = collector.finalize_and_compute_crate_hash();\n+    tcx.arena.alloc(map)\n }\n \n pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {"}, {"sha": "7284b3ce114984efcad207d572184cccc1c787a0", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/18bffdb10e25ebaec6752fe4f18dba77e27a23ed/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bffdb10e25ebaec6752fe4f18dba77e27a23ed/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=18bffdb10e25ebaec6752fe4f18dba77e27a23ed", "patch": "@@ -28,21 +28,18 @@ struct HirOwnerData<'hir> {\n #[derive(Debug)]\n pub struct IndexedHir<'hir> {\n     map: IndexVec<LocalDefId, HirOwnerData<'hir>>,\n+    parenting: FxHashMap<LocalDefId, HirId>,\n }\n \n #[derive(Debug)]\n pub struct Owner<'tcx> {\n-    parent: HirId,\n     node: Node<'tcx>,\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Owner<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let Owner { node, parent } = self;\n-        hcx.while_hashing_hir_bodies(false, |hcx| {\n-            parent.hash_stable(hcx, hasher);\n-            node.hash_stable(hcx, hasher)\n-        });\n+        let Owner { node } = self;\n+        hcx.while_hashing_hir_bodies(false, |hcx| node.hash_stable(hcx, hasher));\n     }\n }\n "}, {"sha": "70ce81bd473df65d7c5c4972862f0f072ead7577", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18bffdb10e25ebaec6752fe4f18dba77e27a23ed/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bffdb10e25ebaec6752fe4f18dba77e27a23ed/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=18bffdb10e25ebaec6752fe4f18dba77e27a23ed", "patch": "@@ -23,7 +23,7 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,associated_item_def_ids\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,associated_item_def_ids\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -85,7 +85,7 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"associated_item,hir_owner,hir_owner_nodes\")]\n@@ -100,7 +100,7 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_dirty(cfg=\"cfail2\", except=\"type_of,predicates_of,promoted_mir\")]\n@@ -135,7 +135,7 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,associated_item_def_ids\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,associated_item_def_ids\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\")]\n@@ -468,7 +468,7 @@ impl Bar<u32> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Bar<u64> {\n     #[rustc_clean(cfg=\"cfail2\", except=\"fn_sig,optimized_mir,typeck\")]"}, {"sha": "d874be060c26a080c8d74fa0bb943450ac31cce0", "filename": "src/test/incremental/hashes/type_defs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/18bffdb10e25ebaec6752fe4f18dba77e27a23ed/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bffdb10e25ebaec6752fe4f18dba77e27a23ed/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs?ref=18bffdb10e25ebaec6752fe4f18dba77e27a23ed", "patch": "@@ -24,7 +24,7 @@\n type ChangePrimitiveType = i32;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangePrimitiveType = i64;\n \n@@ -35,7 +35,7 @@ type ChangePrimitiveType = i64;\n type ChangeMutability = &'static i32;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeMutability = &'static mut i32;\n \n@@ -60,7 +60,7 @@ struct Struct2;\n type ChangeTypeStruct = Struct1;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeTypeStruct = Struct2;\n \n@@ -71,7 +71,7 @@ type ChangeTypeStruct = Struct2;\n type ChangeTypeTuple = (u32, u64);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeTypeTuple = (u32, i64);\n \n@@ -91,7 +91,7 @@ enum Enum2 {\n type ChangeTypeEnum = Enum1;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeTypeEnum = Enum2;\n \n@@ -102,7 +102,7 @@ type ChangeTypeEnum = Enum2;\n type AddTupleField = (i32, i64);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddTupleField = (i32, i64, i16);\n \n@@ -113,7 +113,7 @@ type AddTupleField = (i32, i64, i16);\n type ChangeNestedTupleField = (i32, (i64, i16));\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeNestedTupleField = (i32, (i64, i8));\n "}, {"sha": "8df54467e5e5c20e006c495ef6b2521491bea55c", "filename": "src/test/incremental/ich_nested_items.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18bffdb10e25ebaec6752fe4f18dba77e27a23ed/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18bffdb10e25ebaec6752fe4f18dba77e27a23ed/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_nested_items.rs?ref=18bffdb10e25ebaec6752fe4f18dba77e27a23ed", "patch": "@@ -14,10 +14,7 @@ pub fn foo() {\n     #[cfg(cfail1)]\n     pub fn baz() {} // order is different...\n \n-    // FIXME: Make \"hir_owner\" use `rustc_clean` here. Currently \"hir_owner\" includes a reference to\n-    // the parent node, which is the statement holding this item. Changing the position of\n-    // `bar` in `foo` will update that reference and make `hir_owner(bar)` dirty.\n-    #[rustc_dirty(label = \"hir_owner\", cfg = \"cfail2\")]\n+    #[rustc_clean(label = \"hir_owner\", cfg = \"cfail2\")]\n     #[rustc_clean(label = \"hir_owner_nodes\", cfg = \"cfail2\")]\n     pub fn bar() {} // but that doesn't matter.\n "}]}