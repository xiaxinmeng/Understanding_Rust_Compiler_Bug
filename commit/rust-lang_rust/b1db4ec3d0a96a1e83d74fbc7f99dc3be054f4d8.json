{"sha": "b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZGI0ZWMzZDBhOTZhMWU4M2Q3NGZiYzdmOTlkYzNiZTA1NGY0ZDg=", "commit": {"author": {"name": "Sean Patrick Santos", "email": "SeanPatrickSantos@gmail.com", "date": "2015-03-26T19:06:26Z"}, "committer": {"name": "Sean Patrick Santos", "email": "SeanPatrickSantos@gmail.com", "date": "2015-04-24T03:02:29Z"}, "message": "Feature-gate associated constants.", "tree": {"sha": "b716e5a1dace81b0758069179b2fbd3e283f37db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b716e5a1dace81b0758069179b2fbd3e283f37db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "html_url": "https://github.com/rust-lang/rust/commit/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/comments", "author": {"login": "quantheory", "id": 1740206, "node_id": "MDQ6VXNlcjE3NDAyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1740206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantheory", "html_url": "https://github.com/quantheory", "followers_url": "https://api.github.com/users/quantheory/followers", "following_url": "https://api.github.com/users/quantheory/following{/other_user}", "gists_url": "https://api.github.com/users/quantheory/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantheory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantheory/subscriptions", "organizations_url": "https://api.github.com/users/quantheory/orgs", "repos_url": "https://api.github.com/users/quantheory/repos", "events_url": "https://api.github.com/users/quantheory/events{/privacy}", "received_events_url": "https://api.github.com/users/quantheory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "quantheory", "id": 1740206, "node_id": "MDQ6VXNlcjE3NDAyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1740206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantheory", "html_url": "https://github.com/quantheory", "followers_url": "https://api.github.com/users/quantheory/followers", "following_url": "https://api.github.com/users/quantheory/following{/other_user}", "gists_url": "https://api.github.com/users/quantheory/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantheory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantheory/subscriptions", "organizations_url": "https://api.github.com/users/quantheory/orgs", "repos_url": "https://api.github.com/users/quantheory/repos", "events_url": "https://api.github.com/users/quantheory/events{/privacy}", "received_events_url": "https://api.github.com/users/quantheory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29eb550ee6a9fd6961bb00e2680a5735aab95de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/29eb550ee6a9fd6961bb00e2680a5735aab95de1", "html_url": "https://github.com/rust-lang/rust/commit/29eb550ee6a9fd6961bb00e2680a5735aab95de1"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "2acd491c657876d850f4da60e872f1dc54ea0ef9", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -2340,7 +2340,10 @@ The currently implemented features of the reference compiler are:\n           semantics are likely to change, so this macro usage must be opted\n           into.\n \n-* `associated_types` - Allows type aliases in traits. Experimental.\n+* `associated_consts` - Allows constants to be defined in `impl` and `trait`\n+                        blocks, so that they can be associated with a type or\n+                        trait in a similar manner to methods and associated\n+                        types.\n \n * `box_patterns` - Allows `box` patterns, the exact semantics of which\n                    is subject to change."}, {"sha": "495bbd412ab72671998b74f1ee6e1f4493471c13", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -155,6 +155,10 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n \n     // Allows use of unary negate on unsigned integers, e.g. -e for e: u8\n     (\"negate_unsigned\", \"1.0.0\", Active),\n+\n+    // Allows the definition of associated constants in `trait` or `impl`\n+    // blocks.\n+    (\"associated_consts\", \"1.0.0\", Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -659,6 +663,30 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n         }\n         visit::walk_fn(self, fn_kind, fn_decl, block, span);\n     }\n+\n+    fn visit_trait_item(&mut self, ti: &'v ast::TraitItem) {\n+        match ti.node {\n+            ast::ConstTraitItem(..) => {\n+                self.gate_feature(\"associated_consts\",\n+                                  ti.span,\n+                                  \"associated constants are experimental\")\n+            }\n+            _ => {}\n+        }\n+        visit::walk_trait_item(self, ti);\n+    }\n+\n+    fn visit_impl_item(&mut self, ii: &'v ast::ImplItem) {\n+        match ii.node {\n+            ast::ConstImplItem(..) => {\n+                self.gate_feature(\"associated_consts\",\n+                                  ii.span,\n+                                  \"associated constants are experimental\")\n+            }\n+            _ => {}\n+        }\n+        visit::walk_impl_item(self, ii);\n+    }\n }\n \n fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,"}, {"sha": "3508fcd54af03c3fbdcb9479a74e447ee7601d67", "filename": "src/test/auxiliary/associated-const-cc-lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Fauxiliary%2Fassociated-const-cc-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Fauxiliary%2Fassociated-const-cc-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fassociated-const-cc-lib.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n #![crate_type=\"lib\"]\n \n use std::marker::MarkerTrait;"}, {"sha": "1ed156d45f5507644323e2302b9aa37436d6d9f5", "filename": "src/test/compile-fail/associated-const-dead-code.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Fcompile-fail%2Fassociated-const-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Fcompile-fail%2Fassociated-const-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-dead-code.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n #![deny(dead_code)]\n \n struct MyFoo;"}, {"sha": "d76147de3db2ce17192f6b4de351655e4c5adec8", "filename": "src/test/compile-fail/associated-const-impl-wrong-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n use std::marker::MarkerTrait;\n \n trait Foo: MarkerTrait {"}, {"sha": "4dfe7ea78c59ef691dcc9c3424fd1bab762986a2", "filename": "src/test/compile-fail/associated-const-private-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Fcompile-fail%2Fassociated-const-private-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Fcompile-fail%2Fassociated-const-private-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-private-impl.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n use std::marker::MarkerTrait;\n \n mod bar1 {"}, {"sha": "752691fa1c5500f691654a6357a360b28d8c25b9", "filename": "src/test/compile-fail/associated-const-upper-case-lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Fcompile-fail%2Fassociated-const-upper-case-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Fcompile-fail%2Fassociated-const-upper-case-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-upper-case-lint.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n #![deny(non_upper_case_globals)]\n #![allow(dead_code)]\n "}, {"sha": "d508016357c86aef9bb1bc4c140f09cfc7377fdc", "filename": "src/test/compile-fail/gated-associated_consts.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Fcompile-fail%2Fgated-associated_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Fcompile-fail%2Fgated-associated_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-associated_consts.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::marker::MarkerTrait;\n+\n+trait MyTrait: MarkerTrait {\n+    const C: bool;\n+    //~^ associated constants are experimental\n+    //~| add #![feature(associated_consts)] to the crate attributes to enable\n+}\n+\n+struct Foo;\n+\n+impl Foo {\n+    const C: bool = true;\n+    //~^ associated constants are experimental\n+    //~| add #![feature(associated_consts)] to the crate attributes to enable\n+}"}, {"sha": "9b3e28cbc01ee4eaa4cf98d746a6a9731c914a3c", "filename": "src/test/compile-fail/impl-wrong-item-for-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n trait Foo {\n     fn bar(&self);\n     const MY_CONST: u32;"}, {"sha": "92d2aae61c8e526d440b091be762cd2e8ccecc1d", "filename": "src/test/run-pass/associated-const-cross-crate-defaults.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-cross-crate-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-cross-crate-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-cross-crate-defaults.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:associated-const-cc-lib.rs\n \n+#![feature(associated_consts)]\n+\n extern crate associated_const_cc_lib as foolib;\n \n pub struct LocalFooUseDefault;"}, {"sha": "73d5dc5df96f6949b60ba63064eb2fd5875f6091", "filename": "src/test/run-pass/associated-const-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-cross-crate.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:associated-const-cc-lib.rs\n \n+#![feature(associated_consts)]\n+\n extern crate associated_const_cc_lib as foolib;\n \n pub struct LocalFoo;"}, {"sha": "e3a1e29d20f54387a7a83e8318264b430faf09cd", "filename": "src/test/run-pass/associated-const-in-global-const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-in-global-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-in-global-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-in-global-const.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n struct Foo;\n \n impl Foo {"}, {"sha": "5c9abf982b158253145f73a729a5404e1b07ba1e", "filename": "src/test/run-pass/associated-const-inherent-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-inherent-impl.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n struct Foo;\n \n impl Foo {"}, {"sha": "ea91a95312983a17cbe62723e1704d4b1e27ec1f", "filename": "src/test/run-pass/associated-const-marks-live-code.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-marks-live-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-marks-live-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-marks-live-code.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n #![deny(dead_code)]\n \n const GLOBAL_BAR: u32 = 1;"}, {"sha": "63f77b351704b356a62c4ae82e96feb9cf2cff08", "filename": "src/test/run-pass/associated-const-match-patterns.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-match-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-match-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-match-patterns.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n use std::marker::MarkerTrait;\n \n struct Foo;"}, {"sha": "5134ad35659561b1e02cd8932da58c002916af29", "filename": "src/test/run-pass/associated-const-overwrite-default.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-overwrite-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-overwrite-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-overwrite-default.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n use std::marker::MarkerTrait;\n \n trait Foo: MarkerTrait {"}, {"sha": "686ac19dad1554e6ae8a25b13e4af328a2ed9b93", "filename": "src/test/run-pass/associated-const-public-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-public-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-public-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-public-impl.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n use std::marker::MarkerTrait;\n \n mod bar1 {"}, {"sha": "ad20c084ff45880e9530c36d4879ad6e45a51440", "filename": "src/test/run-pass/associated-const-resolution-order.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-resolution-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-resolution-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-resolution-order.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n use std::marker::MarkerTrait;\n \n struct MyType;"}, {"sha": "dc8b1307f760728448b0712e47b740cb52378c83", "filename": "src/test/run-pass/associated-const-self-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-self-type.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n use std::marker::MarkerTrait;\n \n trait MyInt: MarkerTrait {"}, {"sha": "4cee76eb5aa421245b52b0c4976b7656abb14557", "filename": "src/test/run-pass/associated-const-ufcs-infer-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-ufcs-infer-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-ufcs-infer-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-ufcs-infer-trait.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n use std::marker::MarkerTrait;\n \n trait Foo: MarkerTrait {"}, {"sha": "59df2fc41ed3ac484753f694cf9220d2a64ad17a", "filename": "src/test/run-pass/associated-const-use-default.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-use-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-use-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-use-default.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n use std::marker::MarkerTrait;\n \n trait Foo: MarkerTrait {"}, {"sha": "6c9c6767cbd2caf5ba2303f2d5d499fdc45ebc32", "filename": "src/test/run-pass/associated-const-use-impl-of-same-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-use-impl-of-same-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const-use-impl-of-same-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-use-impl-of-same-trait.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n use std::marker::MarkerTrait;\n \n // The main purpose of this test is to ensure that different impls of the same"}, {"sha": "9214467275f5f774f9d5e2e4e0b056c243a6a2d2", "filename": "src/test/run-pass/associated-const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8/src%2Ftest%2Frun-pass%2Fassociated-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const.rs?ref=b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n use std::marker::MarkerTrait;\n \n trait Foo: MarkerTrait {"}]}