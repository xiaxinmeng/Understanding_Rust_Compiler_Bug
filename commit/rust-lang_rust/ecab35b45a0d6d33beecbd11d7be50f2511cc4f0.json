{"sha": "ecab35b45a0d6d33beecbd11d7be50f2511cc4f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYWIzNWI0NWEwZDZkMzNiZWVjYmQxMWQ3YmU1MGYyNTExY2M0ZjA=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-12T21:35:29Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-20T06:38:16Z"}, "message": "note for `ty::Error`.", "tree": {"sha": "65867055d9af4aa71fed5ea3885dfbd8caad99d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65867055d9af4aa71fed5ea3885dfbd8caad99d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecab35b45a0d6d33beecbd11d7be50f2511cc4f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecab35b45a0d6d33beecbd11d7be50f2511cc4f0", "html_url": "https://github.com/rust-lang/rust/commit/ecab35b45a0d6d33beecbd11d7be50f2511cc4f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecab35b45a0d6d33beecbd11d7be50f2511cc4f0/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "038523963ad884349edca1689e5b11ad4405d3ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/038523963ad884349edca1689e5b11ad4405d3ba", "html_url": "https://github.com/rust-lang/rust/commit/038523963ad884349edca1689e5b11ad4405d3ba"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "da207cf7d380416e471ad8a431a513a28eeaa7aa", "filename": "src/librustc_trait_selection/traits/structural_match.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ecab35b45a0d6d33beecbd11d7be50f2511cc4f0/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecab35b45a0d6d33beecbd11d7be50f2511cc4f0/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs?ref=ecab35b45a0d6d33beecbd11d7be50f2511cc4f0", "patch": "@@ -187,8 +187,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n             | ty::Uint(_)\n             | ty::Float(_)\n             | ty::Str\n-            | ty::Never\n-            | ty::Error => {\n+            | ty::Never => {\n                 // These primitive types are always structural match.\n                 //\n                 // `Never` is kind of special here, but as it is not inhabitable, this should be fine.\n@@ -200,17 +199,25 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n             | ty::Ref(..)\n             | ty::Closure(..)\n             | ty::Generator(..)\n-            | ty::GeneratorWitness(..)\n             | ty::Tuple(..)\n             | ty::Projection(..)\n-            | ty::UnnormalizedProjection(..)\n             | ty::Opaque(..)\n-            | ty::Bound(..)\n-            | ty::Placeholder(_)\n-            | ty::Infer(_) => {\n+            | ty::GeneratorWitness(..) => {\n                 ty.super_visit_with(self);\n                 return false;\n             }\n+            | ty::Infer(_)\n+            | ty::Placeholder(_)\n+            | ty::UnnormalizedProjection(..)\n+            | ty::Bound(..) => {\n+                bug!(\"unexpected type during structural-match checking: {:?}\", ty);\n+            }\n+            ty::Error => {\n+                self.tcx().delay_span_bug(self.span, \"ty::Error in structural-match check\");\n+                // We still want to check other types after encountering an error,\n+                // as this may still emit relevant errors.\n+                return false;\n+            }\n         };\n \n         if !self.seen.insert(adt_def.did) {"}]}