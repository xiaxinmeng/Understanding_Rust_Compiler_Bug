{"sha": "216e093f900d39b2e58127f66826f5bb3d33f21b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNmUwOTNmOTAwZDM5YjJlNTgxMjdmNjY4MjZmNWJiM2QzM2YyMWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T13:04:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T13:04:57Z"}, "message": "Macro tests", "tree": {"sha": "4a44eb4ef1f6e7510d64ebff9905ddd18e00b0ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a44eb4ef1f6e7510d64ebff9905ddd18e00b0ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/216e093f900d39b2e58127f66826f5bb3d33f21b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/216e093f900d39b2e58127f66826f5bb3d33f21b", "html_url": "https://github.com/rust-lang/rust/commit/216e093f900d39b2e58127f66826f5bb3d33f21b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/216e093f900d39b2e58127f66826f5bb3d33f21b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03ca33406e983e7748deab09c7677c7f4cdaeeb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/03ca33406e983e7748deab09c7677c7f4cdaeeb7", "html_url": "https://github.com/rust-lang/rust/commit/03ca33406e983e7748deab09c7677c7f4cdaeeb7"}], "stats": {"total": 189, "additions": 70, "deletions": 119}, "files": [{"sha": "d6613ed7bd8bcfe91a9801c0dc779bae5082c6ed", "filename": "crates/ra_ide/src/completion/complete_macro_in_item_position.rs", "status": "modified", "additions": 16, "deletions": 119, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/216e093f900d39b2e58127f66826f5bb3d33f21b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/216e093f900d39b2e58127f66826f5bb3d33f21b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs?ref=216e093f900d39b2e58127f66826f5bb3d33f21b", "patch": "@@ -15,130 +15,27 @@ pub(super) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &Compl\n \n #[cfg(test)]\n mod tests {\n-    use insta::assert_debug_snapshot;\n+    use expect::{expect, Expect};\n \n-    use crate::completion::{test_utils::do_completion, CompletionItem, CompletionKind};\n+    use crate::completion::{test_utils::completion_list, CompletionKind};\n \n-    fn do_reference_completion(code: &str) -> Vec<CompletionItem> {\n-        do_completion(code, CompletionKind::Reference)\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n+        expect.assert_eq(&actual)\n     }\n \n     #[test]\n     fn completes_macros_as_item() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /main.rs\n-                macro_rules! foo {\n-                    () => {}\n-                }\n-\n-                fn foo() {}\n-\n-                <|>\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"foo!(\u2026)\",\n-                source_range: 48..48,\n-                delete: 48..48,\n-                insert: \"foo!($0)\",\n-                kind: Macro,\n-                detail: \"macro_rules! foo\",\n-            },\n-        ]\n-        \"###\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_vec_macros_with_square_brackets() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /main.rs\n-                /// Creates a [`Vec`] containing the arguments.\n-                ///\n-                /// - Create a [`Vec`] containing a given list of elements:\n-                ///\n-                /// ```\n-                /// let v = vec![1, 2, 3];\n-                /// assert_eq!(v[0], 1);\n-                /// assert_eq!(v[1], 2);\n-                /// assert_eq!(v[2], 3);\n-                /// ```\n-                macro_rules! vec {\n-                    () => {}\n-                }\n-\n-                fn foo() {}\n-\n-                <|>\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"vec![\u2026]\",\n-                source_range: 282..282,\n-                delete: 282..282,\n-                insert: \"vec![$0]\",\n-                kind: Macro,\n-                detail: \"macro_rules! vec\",\n-                documentation: Documentation(\n-                    \"Creates a [`Vec`] containing the arguments.\\n\\n- Create a [`Vec`] containing a given list of elements:\\n\\n```\\nlet v = vec![1, 2, 3];\\nassert_eq!(v[0], 1);\\nassert_eq!(v[1], 2);\\nassert_eq!(v[2], 3);\\n```\",\n-                ),\n-            },\n-        ]\n-        \"###\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_macros_braces_guessing() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /main.rs\n-                /// Foo\n-                ///\n-                /// Not call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`.\n-                /// Call as `let _=foo!  { hello world };`\n-                macro_rules! foo {\n-                    () => {}\n-                }\n-\n-                fn main() {\n-                    <|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"foo! {\u2026}\",\n-                source_range: 164..164,\n-                delete: 164..164,\n-                insert: \"foo! {$0}\",\n-                kind: Macro,\n-                detail: \"macro_rules! foo\",\n-                documentation: Documentation(\n-                    \"Foo\\n\\nNot call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`.\\nCall as `let _=foo!  { hello world };`\",\n-                ),\n-            },\n-            CompletionItem {\n-                label: \"main()\",\n-                source_range: 164..164,\n-                delete: 164..164,\n-                insert: \"main()$0\",\n-                kind: Function,\n-                lookup: \"main\",\n-                detail: \"fn main()\",\n-            },\n-        ]\n-        \"###\n-        );\n+        check(\n+            r#\"\n+macro_rules! foo { () => {} }\n+fn foo() {}\n+\n+<|>\n+\"#,\n+            expect![[r#\"\n+                ma foo!(\u2026) macro_rules! foo\n+            \"#]],\n+        )\n     }\n }"}, {"sha": "946bbef7c94a09c7f06767ba86b100c15bdc9cba", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/216e093f900d39b2e58127f66826f5bb3d33f21b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/216e093f900d39b2e58127f66826f5bb3d33f21b/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=216e093f900d39b2e58127f66826f5bb3d33f21b", "patch": "@@ -174,6 +174,7 @@ impl Completions {\n                 builder\n                     .insert_snippet(cap, format!(\"{}!{}$0{}\", name, bra, ket))\n                     .label(format!(\"{}!{}\u2026{}\", name, bra, ket))\n+                    .lookup_by(format!(\"{}!\", name))\n             }\n             None if needs_bang => builder.insert_text(format!(\"{}!\", name)),\n             _ => {\n@@ -1079,4 +1080,57 @@ fn go(world: &WorldSnapshot) { go(w<|>) }\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn guesses_macro_braces() {\n+        check_edit(\n+            \"vec!\",\n+            r#\"\n+/// Creates a [`Vec`] containing the arguments.\n+///\n+/// ```\n+/// let v = vec![1, 2, 3];\n+/// assert_eq!(v[0], 1);\n+/// assert_eq!(v[1], 2);\n+/// assert_eq!(v[2], 3);\n+/// ```\n+macro_rules! vec { () => {} }\n+\n+fn fn main() { v<|> }\n+\"#,\n+            r#\"\n+/// Creates a [`Vec`] containing the arguments.\n+///\n+/// ```\n+/// let v = vec![1, 2, 3];\n+/// assert_eq!(v[0], 1);\n+/// assert_eq!(v[1], 2);\n+/// assert_eq!(v[2], 3);\n+/// ```\n+macro_rules! vec { () => {} }\n+\n+fn fn main() { vec![$0] }\n+\"#,\n+        );\n+\n+        check_edit(\n+            \"foo!\",\n+            r#\"\n+/// Foo\n+///\n+/// Don't call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`,\n+/// call as `let _=foo!  { hello world };`\n+macro_rules! foo { () => {} }\n+fn main() { <|> }\n+\"#,\n+            r#\"\n+/// Foo\n+///\n+/// Don't call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`,\n+/// call as `let _=foo!  { hello world };`\n+macro_rules! foo { () => {} }\n+fn main() { foo! {$0} }\n+\"#,\n+        )\n+    }\n }"}]}