{"sha": "7e795bdf03bd75cb9e502f5cdeac693da2f24dc7", "node_id": "C_kwDOAAsO6NoAKDdlNzk1YmRmMDNiZDc1Y2I5ZTUwMmY1Y2RlYWM2OTNkYTJmMjRkYzc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-18T21:45:10Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-18T21:45:10Z"}, "message": "Replace _with_overflow instrinsics in LowerIntrinsics.", "tree": {"sha": "792cf08ad6a5f93e984c0bdcdec931afcfaac8fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/792cf08ad6a5f93e984c0bdcdec931afcfaac8fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e795bdf03bd75cb9e502f5cdeac693da2f24dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e795bdf03bd75cb9e502f5cdeac693da2f24dc7", "html_url": "https://github.com/rust-lang/rust/commit/7e795bdf03bd75cb9e502f5cdeac693da2f24dc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e795bdf03bd75cb9e502f5cdeac693da2f24dc7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f79db599531d6e9cc651eb9ab22fc650782b70d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f79db599531d6e9cc651eb9ab22fc650782b70d3", "html_url": "https://github.com/rust-lang/rust/commit/f79db599531d6e9cc651eb9ab22fc650782b70d3"}], "stats": {"total": 116, "additions": 113, "deletions": 3}, "files": [{"sha": "f596cc1808fa2b491fc8b82170df85d88f75eef6", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7e795bdf03bd75cb9e502f5cdeac693da2f24dc7/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e795bdf03bd75cb9e502f5cdeac693da2f24dc7/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=7e795bdf03bd75cb9e502f5cdeac693da2f24dc7", "patch": "@@ -107,9 +107,29 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         }\n                     }\n                     sym::add_with_overflow | sym::sub_with_overflow | sym::mul_with_overflow => {\n-                        // The checked binary operations are not suitable target for lowering here,\n-                        // since their semantics depend on the value of overflow-checks flag used\n-                        // during codegen. Issue #35310.\n+                        if let Some(target) = *target {\n+                            let lhs;\n+                            let rhs;\n+                            {\n+                                let mut args = args.drain(..);\n+                                lhs = args.next().unwrap();\n+                                rhs = args.next().unwrap();\n+                            }\n+                            let bin_op = match intrinsic_name {\n+                                sym::add_with_overflow => BinOp::Add,\n+                                sym::sub_with_overflow => BinOp::Sub,\n+                                sym::mul_with_overflow => BinOp::Mul,\n+                                _ => bug!(\"unexpected intrinsic\"),\n+                            };\n+                            block.statements.push(Statement {\n+                                source_info: terminator.source_info,\n+                                kind: StatementKind::Assign(Box::new((\n+                                    *destination,\n+                                    Rvalue::CheckedBinaryOp(bin_op, Box::new((lhs, rhs))),\n+                                ))),\n+                            });\n+                            terminator.kind = TerminatorKind::Goto { target };\n+                        }\n                     }\n                     sym::size_of | sym::min_align_of => {\n                         if let Some(target) = *target {"}, {"sha": "7147be43ca5e36eb180f456633abdf25a9c082e7", "filename": "tests/mir-opt/lower_intrinsics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e795bdf03bd75cb9e502f5cdeac693da2f24dc7/tests%2Fmir-opt%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e795bdf03bd75cb9e502f5cdeac693da2f24dc7/tests%2Fmir-opt%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.rs?ref=7e795bdf03bd75cb9e502f5cdeac693da2f24dc7", "patch": "@@ -72,3 +72,10 @@ pub fn assume() {\n         std::intrinsics::assume(true);\n     }\n }\n+\n+// EMIT_MIR lower_intrinsics.with_overflow.LowerIntrinsics.diff\n+pub fn with_overflow(a: i32, b: i32) {\n+    let _x = core::intrinsics::add_with_overflow(a, b);\n+    let _y = core::intrinsics::sub_with_overflow(a, b);\n+    let _z = core::intrinsics::mul_with_overflow(a, b);\n+}"}, {"sha": "9870a70dec5eed17801559be9e1c7980d0ea588a", "filename": "tests/mir-opt/lower_intrinsics.with_overflow.LowerIntrinsics.diff", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7e795bdf03bd75cb9e502f5cdeac693da2f24dc7/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e795bdf03bd75cb9e502f5cdeac693da2f24dc7/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff?ref=7e795bdf03bd75cb9e502f5cdeac693da2f24dc7", "patch": "@@ -0,0 +1,83 @@\n+- // MIR for `with_overflow` before LowerIntrinsics\n++ // MIR for `with_overflow` after LowerIntrinsics\n+  \n+  fn with_overflow(_1: i32, _2: i32) -> () {\n+      debug a => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:22: +0:23\n+      debug b => _2;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:30: +0:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:38: +0:38\n+      let _3: (i32, bool);                 // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:11\n+      let mut _4: i32;                     // in scope 0 at $DIR/lower_intrinsics.rs:+1:50: +1:51\n+      let mut _5: i32;                     // in scope 0 at $DIR/lower_intrinsics.rs:+1:53: +1:54\n+      let mut _7: i32;                     // in scope 0 at $DIR/lower_intrinsics.rs:+2:50: +2:51\n+      let mut _8: i32;                     // in scope 0 at $DIR/lower_intrinsics.rs:+2:53: +2:54\n+      let mut _10: i32;                    // in scope 0 at $DIR/lower_intrinsics.rs:+3:50: +3:51\n+      let mut _11: i32;                    // in scope 0 at $DIR/lower_intrinsics.rs:+3:53: +3:54\n+      scope 1 {\n+          debug _x => _3;                  // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:11\n+          let _6: (i32, bool);             // in scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:11\n+          scope 2 {\n+              debug _y => _6;              // in scope 2 at $DIR/lower_intrinsics.rs:+2:9: +2:11\n+              let _9: (i32, bool);         // in scope 2 at $DIR/lower_intrinsics.rs:+3:9: +3:11\n+              scope 3 {\n+                  debug _z => _9;          // in scope 3 at $DIR/lower_intrinsics.rs:+3:9: +3:11\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:11\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:50: +1:51\n+          _4 = _1;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:50: +1:51\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:53: +1:54\n+          _5 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:53: +1:54\n+-         _3 = add_with_overflow::<i32>(move _4, move _5) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:78:14: 78:49\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {add_with_overflow::<i32>}, val: Value(<ZST>) }\n++         _3 = CheckedAdd(move _4, move _5); // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n++         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:54: +1:55\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:54: +1:55\n+          StorageLive(_6);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:11\n+          StorageLive(_7);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:50: +2:51\n+          _7 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:50: +2:51\n+          StorageLive(_8);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:53: +2:54\n+          _8 = _2;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:53: +2:54\n+-         _6 = sub_with_overflow::<i32>(move _7, move _8) -> bb2; // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:79:14: 79:49\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {sub_with_overflow::<i32>}, val: Value(<ZST>) }\n++         _6 = CheckedSub(move _7, move _8); // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n++         goto -> bb2;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n+      }\n+  \n+      bb2: {\n+          StorageDead(_8);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:54: +2:55\n+          StorageDead(_7);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:54: +2:55\n+          StorageLive(_9);                 // scope 2 at $DIR/lower_intrinsics.rs:+3:9: +3:11\n+          StorageLive(_10);                // scope 2 at $DIR/lower_intrinsics.rs:+3:50: +3:51\n+          _10 = _1;                        // scope 2 at $DIR/lower_intrinsics.rs:+3:50: +3:51\n+          StorageLive(_11);                // scope 2 at $DIR/lower_intrinsics.rs:+3:53: +3:54\n+          _11 = _2;                        // scope 2 at $DIR/lower_intrinsics.rs:+3:53: +3:54\n+-         _9 = mul_with_overflow::<i32>(move _10, move _11) -> bb3; // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:80:14: 80:49\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {mul_with_overflow::<i32>}, val: Value(<ZST>) }\n++         _9 = CheckedMul(move _10, move _11); // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55\n++         goto -> bb3;                     // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55\n+      }\n+  \n+      bb3: {\n+          StorageDead(_11);                // scope 2 at $DIR/lower_intrinsics.rs:+3:54: +3:55\n+          StorageDead(_10);                // scope 2 at $DIR/lower_intrinsics.rs:+3:54: +3:55\n+          _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:+0:38: +4:2\n+          StorageDead(_9);                 // scope 2 at $DIR/lower_intrinsics.rs:+4:1: +4:2\n+          StorageDead(_6);                 // scope 1 at $DIR/lower_intrinsics.rs:+4:1: +4:2\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:+4:2: +4:2\n+      }\n+  }\n+  "}]}