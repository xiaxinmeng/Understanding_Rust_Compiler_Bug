{"sha": "5af9e475f4acce54f8383ed22febc412cf2541d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZjllNDc1ZjRhY2NlNTRmODM4M2VkMjJmZWJjNDEyY2YyNTQxZDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-01T18:17:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-02T09:27:36Z"}, "message": "add AstDatabase", "tree": {"sha": "c6f5e240d385fd33f25a70d20b8244a721202264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6f5e240d385fd33f25a70d20b8244a721202264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5af9e475f4acce54f8383ed22febc412cf2541d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5af9e475f4acce54f8383ed22febc412cf2541d0", "html_url": "https://github.com/rust-lang/rust/commit/5af9e475f4acce54f8383ed22febc412cf2541d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5af9e475f4acce54f8383ed22febc412cf2541d0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8256dfdd713451cbe54ee61a176b79f1d1bab589", "url": "https://api.github.com/repos/rust-lang/rust/commits/8256dfdd713451cbe54ee61a176b79f1d1bab589", "html_url": "https://github.com/rust-lang/rust/commit/8256dfdd713451cbe54ee61a176b79f1d1bab589"}], "stats": {"total": 284, "additions": 186, "deletions": 98}, "files": [{"sha": "a4a8462de37bcc842999c769ac0231d0d22d92fc", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -16,7 +16,12 @@ use vfs_filter::IncludeRustFiles;\n \n type Result<T> = std::result::Result<T, failure::Error>;\n \n-#[salsa::database(ra_db::SourceDatabaseStorage, db::HirDatabaseStorage, db::DefDatabaseStorage)]\n+#[salsa::database(\n+    ra_db::SourceDatabaseStorage,\n+    db::AstDatabaseStorage,\n+    db::DefDatabaseStorage,\n+    db::HirDatabaseStorage\n+)]\n #[derive(Debug)]\n pub struct BatchDatabase {\n     runtime: salsa::Runtime<BatchDatabase>,"}, {"sha": "45a12dd4dfb93e7aa35905a7332b6518bc5d8254", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    Name, AsName, Struct, Union, Enum, EnumVariant, Crate,\n+    Name, AsName, Struct, Union, Enum, EnumVariant, Crate, AstDatabase,\n     HirDatabase, HirFileId, StructField, FieldSource,\n     type_ref::TypeRef, DefDatabase,\n };\n@@ -55,7 +55,10 @@ impl StructData {\n         StructData { name, variant_data }\n     }\n \n-    pub(crate) fn struct_data_query(db: &impl DefDatabase, struct_: Struct) -> Arc<StructData> {\n+    pub(crate) fn struct_data_query(\n+        db: &(impl DefDatabase + AstDatabase),\n+        struct_: Struct,\n+    ) -> Arc<StructData> {\n         let (_, struct_def) = struct_.source(db);\n         Arc::new(StructData::new(&*struct_def))\n     }\n@@ -68,7 +71,7 @@ fn variants(enum_def: &ast::EnumDef) -> impl Iterator<Item = &ast::EnumVariant>\n impl EnumVariant {\n     pub(crate) fn source_impl(\n         &self,\n-        db: &impl DefDatabase,\n+        db: &(impl DefDatabase + AstDatabase),\n     ) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n         let (file_id, enum_def) = self.parent.source(db);\n         let var = variants(&*enum_def)\n@@ -91,7 +94,7 @@ pub struct EnumData {\n }\n \n impl EnumData {\n-    pub(crate) fn enum_data_query(db: &impl DefDatabase, e: Enum) -> Arc<EnumData> {\n+    pub(crate) fn enum_data_query(db: &(impl DefDatabase + AstDatabase), e: Enum) -> Arc<EnumData> {\n         let (_file_id, enum_def) = e.source(db);\n         let name = enum_def.name().map(|n| n.as_name());\n         let variants = variants(&*enum_def)\n@@ -198,7 +201,10 @@ impl VariantDef {\n }\n \n impl StructField {\n-    pub(crate) fn source_impl(&self, db: &impl DefDatabase) -> (HirFileId, FieldSource) {\n+    pub(crate) fn source_impl(\n+        &self,\n+        db: &(impl DefDatabase + AstDatabase),\n+    ) -> (HirFileId, FieldSource) {\n         let var_data = self.parent.variant_data(db);\n         let fields = var_data.fields().unwrap();\n         let ss;"}, {"sha": "9c02b3995da038e5f67b1848b8127653f80ff92c", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 50, "deletions": 20, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{ast::{self, NameOwner, TypeAscriptionOwner}, TreeArc};\n \n use crate::{\n     Name, AsName, AstId, Ty, HirFileId, Either, KnownName,\n-    HirDatabase, DefDatabase,\n+    HirDatabase, DefDatabase, AstDatabase,\n     type_ref::TypeRef,\n     nameres::{ModuleScope, Namespace, ImportId, CrateModuleId},\n     expr::{Body, BodySourceMap, validation::ExprValidator},\n@@ -147,7 +147,7 @@ pub enum ModuleSource {\n \n impl ModuleSource {\n     pub(crate) fn new(\n-        db: &impl DefDatabase,\n+        db: &(impl DefDatabase + AstDatabase),\n         file_id: Option<FileId>,\n         decl_id: Option<AstId<ast::Module>>,\n     ) -> ModuleSource {\n@@ -168,7 +168,7 @@ impl ModuleSource {\n \n impl Module {\n     /// Name of this module.\n-    pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n+    pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n         let def_map = db.crate_def_map(self.krate);\n         let parent = def_map[self.module_id].parent?;\n         def_map[parent].children.iter().find_map(|(name, module_id)| {\n@@ -181,7 +181,10 @@ impl Module {\n     }\n \n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n-    pub fn definition_source(self, db: &impl DefDatabase) -> (HirFileId, ModuleSource) {\n+    pub fn definition_source(\n+        self,\n+        db: &(impl DefDatabase + AstDatabase),\n+    ) -> (HirFileId, ModuleSource) {\n         let def_map = db.crate_def_map(self.krate);\n         let decl_id = def_map[self.module_id].declaration;\n         let file_id = def_map[self.module_id].definition;\n@@ -340,7 +343,7 @@ impl StructField {\n         self.parent.variant_data(db).fields().unwrap()[self.id].name.clone()\n     }\n \n-    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, FieldSource) {\n+    pub fn source(&self, db: &(impl DefDatabase + AstDatabase)) -> (HirFileId, FieldSource) {\n         self.source_impl(db)\n     }\n \n@@ -368,15 +371,18 @@ pub struct Struct {\n }\n \n impl Struct {\n-    pub fn source(self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::StructDef>) {\n+    pub fn source(\n+        self,\n+        db: &(impl DefDatabase + AstDatabase),\n+    ) -> (HirFileId, TreeArc<ast::StructDef>) {\n         self.id.source(db)\n     }\n \n     pub fn module(self, db: &impl HirDatabase) -> Module {\n         self.id.module(db)\n     }\n \n-    pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n+    pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n         db.struct_data(self).name.clone()\n     }\n \n@@ -432,11 +438,14 @@ pub struct Union {\n }\n \n impl Union {\n-    pub fn source(self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::StructDef>) {\n+    pub fn source(\n+        self,\n+        db: &(impl DefDatabase + AstDatabase),\n+    ) -> (HirFileId, TreeArc<ast::StructDef>) {\n         self.id.source(db)\n     }\n \n-    pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n+    pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n         db.struct_data(Struct { id: self.id }).name.clone()\n     }\n \n@@ -468,15 +477,18 @@ pub struct Enum {\n }\n \n impl Enum {\n-    pub fn source(self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::EnumDef>) {\n+    pub fn source(\n+        self,\n+        db: &(impl DefDatabase + AstDatabase),\n+    ) -> (HirFileId, TreeArc<ast::EnumDef>) {\n         self.id.source(db)\n     }\n \n     pub fn module(self, db: &impl HirDatabase) -> Module {\n         self.id.module(db)\n     }\n \n-    pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n+    pub fn name(self, db: &impl DefDatabase) -> Option<Name> {\n         db.enum_data(self).name.clone()\n     }\n \n@@ -521,7 +533,10 @@ pub struct EnumVariant {\n }\n \n impl EnumVariant {\n-    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n+    pub fn source(\n+        &self,\n+        db: &(impl DefDatabase + AstDatabase),\n+    ) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n         self.source_impl(db)\n     }\n     pub fn module(&self, db: &impl HirDatabase) -> Module {\n@@ -610,7 +625,10 @@ pub struct FnSignature {\n }\n \n impl FnSignature {\n-    pub(crate) fn fn_signature_query(db: &impl DefDatabase, func: Function) -> Arc<FnSignature> {\n+    pub(crate) fn fn_signature_query(\n+        db: &(impl DefDatabase + AstDatabase),\n+        func: Function,\n+    ) -> Arc<FnSignature> {\n         let (_, node) = func.source(db);\n         let name = node.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n         let mut params = Vec::new();\n@@ -668,7 +686,7 @@ impl FnSignature {\n }\n \n impl Function {\n-    pub fn source(self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::FnDef>) {\n+    pub fn source(self, db: &(impl DefDatabase + AstDatabase)) -> (HirFileId, TreeArc<ast::FnDef>) {\n         self.id.source(db)\n     }\n \n@@ -752,7 +770,10 @@ pub struct Const {\n }\n \n impl Const {\n-    pub fn source(self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::ConstDef>) {\n+    pub fn source(\n+        self,\n+        db: &(impl DefDatabase + AstDatabase),\n+    ) -> (HirFileId, TreeArc<ast::ConstDef>) {\n         self.id.source(db)\n     }\n \n@@ -809,15 +830,15 @@ impl ConstSignature {\n     }\n \n     pub(crate) fn const_signature_query(\n-        db: &impl DefDatabase,\n+        db: &(impl DefDatabase + AstDatabase),\n         konst: Const,\n     ) -> Arc<ConstSignature> {\n         let (_, node) = konst.source(db);\n         const_signature_for(&*node)\n     }\n \n     pub(crate) fn static_signature_query(\n-        db: &impl DefDatabase,\n+        db: &(impl DefDatabase + AstDatabase),\n         konst: Static,\n     ) -> Arc<ConstSignature> {\n         let (_, node) = konst.source(db);\n@@ -838,7 +859,10 @@ pub struct Static {\n }\n \n impl Static {\n-    pub fn source(self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::StaticDef>) {\n+    pub fn source(\n+        self,\n+        db: &(impl DefDatabase + AstDatabase),\n+    ) -> (HirFileId, TreeArc<ast::StaticDef>) {\n         self.id.source(db)\n     }\n \n@@ -873,7 +897,10 @@ pub struct Trait {\n }\n \n impl Trait {\n-    pub fn source(self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::TraitDef>) {\n+    pub fn source(\n+        self,\n+        db: &(impl DefDatabase + AstDatabase),\n+    ) -> (HirFileId, TreeArc<ast::TraitDef>) {\n         self.id.source(db)\n     }\n \n@@ -922,7 +949,10 @@ pub struct TypeAlias {\n }\n \n impl TypeAlias {\n-    pub fn source(self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::TypeAliasDef>) {\n+    pub fn source(\n+        self,\n+        db: &(impl DefDatabase + AstDatabase),\n+    ) -> (HirFileId, TreeArc<ast::TypeAliasDef>) {\n         self.id.source(db)\n     }\n "}, {"sha": "87210321943ccddd9461d4ffec149ba9932f976f", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -21,10 +21,35 @@ use crate::{\n     lang_item::{LangItems, LangItemTarget},\n };\n \n-#[salsa::query_group(DefDatabaseStorage)]\n-pub trait DefDatabase: SourceDatabase {\n+// This database has access to source code, so queries here are not really\n+// incremental.\n+#[salsa::query_group(AstDatabaseStorage)]\n+pub trait AstDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_macro(&self, macro_call: MacroCallLoc) -> ids::MacroCallId;\n+\n+    #[salsa::invoke(crate::source_id::AstIdMap::ast_id_map_query)]\n+    fn ast_id_map(&self, file_id: HirFileId) -> Arc<AstIdMap>;\n+    #[salsa::transparent]\n+    #[salsa::invoke(crate::source_id::AstIdMap::file_item_query)]\n+    fn ast_id_to_node(&self, file_id: HirFileId, ast_id: ErasedFileAstId) -> TreeArc<SyntaxNode>;\n+    #[salsa::invoke(crate::ids::HirFileId::parse_or_expand_query)]\n+    fn parse_or_expand(&self, file_id: HirFileId) -> Option<TreeArc<SyntaxNode>>;\n+\n+    #[salsa::invoke(crate::ids::macro_def_query)]\n+    fn macro_def(&self, macro_id: MacroDefId) -> Option<Arc<mbe::MacroRules>>;\n+\n+    #[salsa::invoke(crate::ids::macro_arg_query)]\n+    fn macro_arg(&self, macro_call: ids::MacroCallId) -> Option<Arc<tt::Subtree>>;\n+\n+    #[salsa::invoke(crate::ids::macro_expand_query)]\n+    fn macro_expand(&self, macro_call: ids::MacroCallId) -> Result<Arc<tt::Subtree>, String>;\n+}\n+\n+// This database uses `AstDatabase` internally,\n+#[salsa::query_group(DefDatabaseStorage)]\n+#[salsa::requires(AstDatabase)]\n+pub trait DefDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_function(&self, loc: ids::ItemLoc<ast::FnDef>) -> ids::FunctionId;\n     #[salsa::interned]\n@@ -46,18 +71,6 @@ pub trait DefDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_impl_block(&self, impl_block: ImplBlock) -> ids::GlobalImplId;\n \n-    #[salsa::invoke(crate::ids::macro_def_query)]\n-    fn macro_def(&self, macro_id: MacroDefId) -> Option<Arc<mbe::MacroRules>>;\n-\n-    #[salsa::invoke(crate::ids::macro_arg_query)]\n-    fn macro_arg(&self, macro_call: ids::MacroCallId) -> Option<Arc<tt::Subtree>>;\n-\n-    #[salsa::invoke(crate::ids::macro_expand_query)]\n-    fn macro_expand(&self, macro_call: ids::MacroCallId) -> Result<Arc<tt::Subtree>, String>;\n-\n-    #[salsa::invoke(crate::ids::HirFileId::parse_or_expand_query)]\n-    fn parse_or_expand(&self, file_id: HirFileId) -> Option<TreeArc<SyntaxNode>>;\n-\n     #[salsa::invoke(crate::adt::StructData::struct_data_query)]\n     fn struct_data(&self, s: Struct) -> Arc<StructData>;\n \n@@ -70,13 +83,6 @@ pub trait DefDatabase: SourceDatabase {\n     #[salsa::invoke(crate::traits::TraitItemsIndex::trait_items_index)]\n     fn trait_items_index(&self, module: Module) -> crate::traits::TraitItemsIndex;\n \n-    #[salsa::invoke(crate::source_id::AstIdMap::ast_id_map_query)]\n-    fn ast_id_map(&self, file_id: HirFileId) -> Arc<AstIdMap>;\n-\n-    #[salsa::invoke(crate::source_id::AstIdMap::file_item_query)]\n-    #[salsa::transparent]\n-    fn ast_id_to_node(&self, file_id: HirFileId, ast_id: ErasedFileAstId) -> TreeArc<SyntaxNode>;\n-\n     #[salsa::invoke(RawItems::raw_items_query)]\n     fn raw_items(&self, file_id: HirFileId) -> Arc<RawItems>;\n \n@@ -121,7 +127,7 @@ pub trait DefDatabase: SourceDatabase {\n }\n \n #[salsa::query_group(HirDatabaseStorage)]\n-pub trait HirDatabase: DefDatabase {\n+pub trait HirDatabase: DefDatabase + AstDatabase {\n     #[salsa::invoke(ExprScopes::expr_scopes_query)]\n     fn expr_scopes(&self, def: DefWithBody) -> Arc<ExprScopes>;\n "}, {"sha": "b6c5e18d3cf7d2ed9f1f08aa22835360a4102eec", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -8,7 +8,7 @@ use std::sync::Arc;\n use ra_syntax::ast::{self, NameOwner, TypeParamsOwner, TypeBoundsOwner, DefaultTypeParamOwner};\n \n use crate::{\n-    db::{ HirDatabase, DefDatabase},\n+    db::{HirDatabase, DefDatabase, AstDatabase},\n     Name, AsName, Function, Struct, Union, Enum, Trait, TypeAlias, ImplBlock, Container, path::Path, type_ref::TypeRef, AdtDef\n };\n \n@@ -52,7 +52,7 @@ impl_froms!(GenericDef: Function, Struct, Union, Enum, Trait, TypeAlias, ImplBlo\n \n impl GenericParams {\n     pub(crate) fn generic_params_query(\n-        db: &impl DefDatabase,\n+        db: &(impl DefDatabase + AstDatabase),\n         def: GenericDef,\n     ) -> Arc<GenericParams> {\n         let mut generics = GenericParams::default();"}, {"sha": "79e32e579d8d8d33d72f9175bcd0fda64c6cf1d4", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -9,7 +9,7 @@ use ra_prof::profile;\n use mbe::MacroRules;\n \n use crate::{\n-    Module, DefDatabase, AstId, FileAstId,\n+    Module, DefDatabase, AstId, FileAstId, AstDatabase,\n };\n \n /// hir makes heavy use of ids: integer (u32) handlers to various things. You\n@@ -37,7 +37,7 @@ pub struct HirFileId(HirFileIdRepr);\n impl HirFileId {\n     /// For macro-expansion files, returns the file original source file the\n     /// expansion originated from.\n-    pub fn original_file(self, db: &impl DefDatabase) -> FileId {\n+    pub fn original_file(self, db: &impl AstDatabase) -> FileId {\n         match self.0 {\n             HirFileIdRepr::File(file_id) => file_id,\n             HirFileIdRepr::Macro(macro_file) => {\n@@ -58,7 +58,7 @@ impl HirFileId {\n     }\n \n     pub(crate) fn parse_or_expand_query(\n-        db: &impl DefDatabase,\n+        db: &impl AstDatabase,\n         file_id: HirFileId,\n     ) -> Option<TreeArc<SyntaxNode>> {\n         db.check_canceled();\n@@ -120,7 +120,7 @@ impl From<FileId> for HirFileId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct MacroDefId(pub(crate) AstId<ast::MacroCall>);\n \n-pub(crate) fn macro_def_query(db: &impl DefDatabase, id: MacroDefId) -> Option<Arc<MacroRules>> {\n+pub(crate) fn macro_def_query(db: &impl AstDatabase, id: MacroDefId) -> Option<Arc<MacroRules>> {\n     let macro_call = id.0.to_node(db);\n     let arg = macro_call.token_tree()?;\n     let (tt, _) = mbe::ast_to_token_tree(arg).or_else(|| {\n@@ -134,7 +134,7 @@ pub(crate) fn macro_def_query(db: &impl DefDatabase, id: MacroDefId) -> Option<A\n     Some(Arc::new(rules))\n }\n \n-pub(crate) fn macro_arg_query(db: &impl DefDatabase, id: MacroCallId) -> Option<Arc<tt::Subtree>> {\n+pub(crate) fn macro_arg_query(db: &impl AstDatabase, id: MacroCallId) -> Option<Arc<tt::Subtree>> {\n     let loc = id.loc(db);\n     let macro_call = loc.ast_id.to_node(db);\n     let arg = macro_call.token_tree()?;\n@@ -143,7 +143,7 @@ pub(crate) fn macro_arg_query(db: &impl DefDatabase, id: MacroCallId) -> Option<\n }\n \n pub(crate) fn macro_expand_query(\n-    db: &impl DefDatabase,\n+    db: &impl AstDatabase,\n     id: MacroCallId,\n ) -> Result<Arc<tt::Subtree>, String> {\n     let loc = id.loc(db);\n@@ -185,7 +185,7 @@ pub struct MacroCallLoc {\n }\n \n impl MacroCallId {\n-    pub(crate) fn loc(self, db: &impl DefDatabase) -> MacroCallLoc {\n+    pub(crate) fn loc(self, db: &impl AstDatabase) -> MacroCallLoc {\n         db.lookup_intern_macro(self)\n     }\n \n@@ -196,7 +196,7 @@ impl MacroCallId {\n }\n \n impl MacroCallLoc {\n-    pub(crate) fn id(self, db: &impl DefDatabase) -> MacroCallId {\n+    pub(crate) fn id(self, db: &impl AstDatabase) -> MacroCallId {\n         db.intern_macro(self)\n     }\n }\n@@ -233,7 +233,7 @@ pub(crate) struct LocationCtx<DB> {\n     file_id: HirFileId,\n }\n \n-impl<'a, DB: DefDatabase> LocationCtx<&'a DB> {\n+impl<'a, DB: DefDatabase + AstDatabase> LocationCtx<&'a DB> {\n     pub(crate) fn new(db: &'a DB, module: Module, file_id: HirFileId) -> LocationCtx<&'a DB> {\n         LocationCtx { db, module, file_id }\n     }\n@@ -250,16 +250,19 @@ pub(crate) trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n     fn intern(db: &impl DefDatabase, loc: ItemLoc<N>) -> Self;\n     fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<N>;\n \n-    fn from_ast(ctx: LocationCtx<&impl DefDatabase>, ast: &N) -> Self {\n+    fn from_ast(ctx: LocationCtx<&(impl AstDatabase + DefDatabase)>, ast: &N) -> Self {\n         let items = ctx.db.ast_id_map(ctx.file_id);\n         let item_id = items.ast_id(ast);\n         Self::from_ast_id(ctx, item_id)\n     }\n-    fn from_ast_id(ctx: LocationCtx<&impl DefDatabase>, ast_id: FileAstId<N>) -> Self {\n+    fn from_ast_id(\n+        ctx: LocationCtx<&(impl AstDatabase + DefDatabase)>,\n+        ast_id: FileAstId<N>,\n+    ) -> Self {\n         let loc = ItemLoc { module: ctx.module, ast_id: ast_id.with_file_id(ctx.file_id) };\n         Self::intern(ctx.db, loc)\n     }\n-    fn source(self, db: &impl DefDatabase) -> (HirFileId, TreeArc<N>) {\n+    fn source(self, db: &(impl AstDatabase + DefDatabase)) -> (HirFileId, TreeArc<N>) {\n         let loc = self.lookup_intern(db);\n         let ast = loc.ast_id.to_node(db);\n         (loc.ast_id.file_id(), ast)\n@@ -356,7 +359,7 @@ impl AstItemDef<ast::TypeAliasDef> for TypeAliasId {\n }\n \n impl MacroCallId {\n-    pub fn debug_dump(&self, db: &impl DefDatabase) -> String {\n+    pub fn debug_dump(&self, db: &impl AstDatabase) -> String {\n         let loc = self.clone().loc(db);\n         let node = loc.ast_id.to_node(db);\n         let syntax_str = node.syntax().text().chunks().collect::<Vec<_>>().join(\" \");\n@@ -367,7 +370,7 @@ impl MacroCallId {\n         let macro_rules = db.macro_def(loc.def);\n \n         format!(\n-            \"macro call [file: {:#?}] : {}\\nhas rules: {}\",\n+            \"macro call [file: {:?}] : {}\\nhas rules: {}\",\n             db.file_relative_path(original),\n             syntax_str,\n             macro_rules.is_some()"}, {"sha": "ba90e67e9a8277599b9aad6619cadfd098cb8af2", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    Const, TypeAlias, Function, HirFileId,\n+    Const, TypeAlias, Function, HirFileId, AstDatabase,\n     HirDatabase, DefDatabase, TraitRef,\n     type_ref::TypeRef,\n     ids::LocationCtx,\n@@ -58,7 +58,10 @@ impl ImplBlock {\n     }\n \n     /// Returns the syntax of the impl block\n-    pub fn source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::ImplBlock>) {\n+    pub fn source(\n+        &self,\n+        db: &(impl DefDatabase + AstDatabase),\n+    ) -> (HirFileId, TreeArc<ast::ImplBlock>) {\n         let source_map = db.impls_in_module_with_source_map(self.module).1;\n         let (file_id, source) = self.module.definition_source(db);\n         (file_id, source_map.get(&source, self.impl_id))\n@@ -117,7 +120,7 @@ pub struct ImplData {\n \n impl ImplData {\n     pub(crate) fn from_ast(\n-        db: &impl DefDatabase,\n+        db: &(impl DefDatabase + AstDatabase),\n         file_id: HirFileId,\n         module: Module,\n         node: &ast::ImplBlock,\n@@ -187,7 +190,11 @@ pub struct ModuleImplBlocks {\n }\n \n impl ModuleImplBlocks {\n-    fn collect(db: &impl DefDatabase, module: Module, source_map: &mut ImplSourceMap) -> Self {\n+    fn collect(\n+        db: &(impl DefDatabase + AstDatabase),\n+        module: Module,\n+        source_map: &mut ImplSourceMap,\n+    ) -> Self {\n         let mut m = ModuleImplBlocks {\n             module,\n             impls: Arena::default(),\n@@ -218,7 +225,7 @@ impl ModuleImplBlocks {\n }\n \n pub(crate) fn impls_in_module_with_source_map_query(\n-    db: &impl DefDatabase,\n+    db: &(impl DefDatabase + AstDatabase),\n     module: Module,\n ) -> (Arc<ModuleImplBlocks>, Arc<ImplSourceMap>) {\n     let mut source_map = ImplSourceMap::default();"}, {"sha": "4cacaeba431174e088deb5bc487e7e8ec44dc3fe", "filename": "crates/ra_hir/src/lang_item.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -4,7 +4,7 @@ use rustc_hash::FxHashMap;\n use ra_syntax::{SmolStr, ast::AttrsOwner};\n \n use crate::{\n-    Crate, DefDatabase, Enum, Function, HirDatabase, ImplBlock, Module, Static, Struct, Trait\n+    Crate, DefDatabase, Enum, Function, HirDatabase, ImplBlock, Module, Static, Struct, Trait, AstDatabase,\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -41,7 +41,10 @@ impl LangItems {\n     }\n \n     /// Salsa query. This will look for lang items in a specific crate.\n-    pub(crate) fn lang_items_query(db: &impl DefDatabase, krate: Crate) -> Arc<LangItems> {\n+    pub(crate) fn lang_items_query(\n+        db: &(impl DefDatabase + AstDatabase),\n+        krate: Crate,\n+    ) -> Arc<LangItems> {\n         let mut lang_items = LangItems { items: FxHashMap::default() };\n \n         if let Some(module) = krate.root_module(db) {\n@@ -74,7 +77,11 @@ impl LangItems {\n         }\n     }\n \n-    fn collect_lang_items_recursive(&mut self, db: &impl DefDatabase, module: &Module) {\n+    fn collect_lang_items_recursive(\n+        &mut self,\n+        db: &(impl DefDatabase + AstDatabase),\n+        module: &Module,\n+    ) {\n         // Look for impl targets\n         let (impl_blocks, source_map) = db.impls_in_module_with_source_map(module.clone());\n         let source = module.definition_source(db).1;"}, {"sha": "f2a31795df5946b5e413c02208da3632b0ce18dc", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -48,7 +48,7 @@ mod code_model;\n mod marks;\n \n use crate::{\n-    db::{HirDatabase, DefDatabase},\n+    db::{AstDatabase, DefDatabase, HirDatabase},\n     name::{AsName, KnownName},\n     source_id::{FileAstId, AstId},\n     resolve::Resolver,"}, {"sha": "5d38ac76c77a3bf7d0b8fd24d1d70ae2f28c2b6d", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -13,7 +13,12 @@ use crate::{db, diagnostics::DiagnosticSink};\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n \n-#[salsa::database(ra_db::SourceDatabaseStorage, db::HirDatabaseStorage, db::DefDatabaseStorage)]\n+#[salsa::database(\n+    ra_db::SourceDatabaseStorage,\n+    db::AstDatabaseStorage,\n+    db::DefDatabaseStorage,\n+    db::HirDatabaseStorage\n+)]\n #[derive(Debug)]\n pub struct MockDatabase {\n     events: Mutex<Option<Vec<salsa::Event<MockDatabase>>>>,"}, {"sha": "d649aa8209ca42b3aae856d53de4d951f6c5d016", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -65,7 +65,7 @@ use ra_prof::profile;\n use once_cell::sync::Lazy;\n \n use crate::{\n-    ModuleDef, Name, Crate, Module, MacroDef, AsName, BuiltinType,\n+    ModuleDef, Name, Crate, Module, MacroDef, AsName, BuiltinType, AstDatabase,\n     DefDatabase, Path, PathKind, HirFileId, Trait,\n     ids::MacroDefId,\n     diagnostics::DiagnosticSink,\n@@ -232,7 +232,10 @@ fn or(left: ItemOrMacro, right: ItemOrMacro) -> ItemOrMacro {\n }\n \n impl CrateDefMap {\n-    pub(crate) fn crate_def_map_query(db: &impl DefDatabase, krate: Crate) -> Arc<CrateDefMap> {\n+    pub(crate) fn crate_def_map_query(\n+        db: &(impl DefDatabase + AstDatabase),\n+        krate: Crate,\n+    ) -> Arc<CrateDefMap> {\n         db.check_canceled();\n         let _p = profile(\"crate_def_map_query\");\n         let def_map = {\n@@ -278,7 +281,7 @@ impl CrateDefMap {\n \n     pub(crate) fn add_diagnostics(\n         &self,\n-        db: &impl DefDatabase,\n+        db: &(impl DefDatabase + AstDatabase),\n         module: CrateModuleId,\n         sink: &mut DiagnosticSink,\n     ) {\n@@ -534,7 +537,7 @@ mod diagnostics {\n     use ra_syntax::{AstPtr, ast};\n \n     use crate::{\n-        AstId, DefDatabase,\n+        AstId, DefDatabase, AstDatabase,\n         nameres::CrateModuleId,\n         diagnostics::{DiagnosticSink, UnresolvedModule}\n };\n@@ -551,7 +554,7 @@ mod diagnostics {\n     impl DefDiagnostic {\n         pub(super) fn add_to(\n             &self,\n-            db: &impl DefDatabase,\n+            db: &(impl DefDatabase + AstDatabase),\n             target_module: CrateModuleId,\n             sink: &mut DiagnosticSink,\n         ) {"}, {"sha": "693c3fe8e898d4243e871ce7d579e28318e95ecb", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::ast;\n \n use crate::{\n     Function, Module, Struct, Union, Enum, Const, Static, Trait, TypeAlias, MacroDef,\n-    DefDatabase, HirFileId, Name, Path,\n+    DefDatabase, HirFileId, Name, Path, AstDatabase,\n     KnownName,\n     nameres::{\n         Resolution, PerNs, ModuleDef, ReachedFixedPoint, ResolveMode,\n@@ -20,7 +20,10 @@ use crate::{\n     AstId,\n };\n \n-pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n+pub(super) fn collect_defs(\n+    db: &(impl DefDatabase + AstDatabase),\n+    mut def_map: CrateDefMap,\n+) -> CrateDefMap {\n     // populate external prelude\n     for dep in def_map.krate.dependencies(db) {\n         log::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.krate);\n@@ -93,7 +96,7 @@ struct DefCollector<DB> {\n \n impl<'a, DB> DefCollector<&'a DB>\n where\n-    DB: DefDatabase,\n+    DB: DefDatabase + AstDatabase,\n {\n     fn collect(&mut self) {\n         let crate_graph = self.db.crate_graph();\n@@ -470,7 +473,7 @@ struct ModCollector<'a, D> {\n \n impl<DB> ModCollector<'_, &'_ mut DefCollector<&'_ DB>>\n where\n-    DB: DefDatabase,\n+    DB: DefDatabase + AstDatabase,\n {\n     fn collect(&mut self, items: &[raw::RawItem]) {\n         for item in items {\n@@ -615,7 +618,7 @@ fn is_macro_rules(path: &Path) -> bool {\n }\n \n fn resolve_submodule(\n-    db: &impl DefDatabase,\n+    db: &(impl DefDatabase + AstDatabase),\n     file_id: HirFileId,\n     name: &Name,\n     is_root: bool,\n@@ -658,7 +661,7 @@ mod tests {\n     use rustc_hash::FxHashSet;\n \n     fn do_collect_defs(\n-        db: &impl DefDatabase,\n+        db: &(impl DefDatabase + AstDatabase),\n         def_map: CrateDefMap,\n         monitor: MacroStackMonitor,\n     ) -> CrateDefMap {"}, {"sha": "21935dbb9d77067c35924d2b48e32cd679de8aa1", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::{\n     ast::{self, NameOwner, AttrsOwner},\n };\n \n-use crate::{DefDatabase, Name, AsName, Path, HirFileId, ModuleSource, AstIdMap, FileAstId, Either};\n+use crate::{DefDatabase, Name, AsName, Path, HirFileId, ModuleSource, AstIdMap, FileAstId, Either, AstDatabase};\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n ///\n@@ -56,12 +56,15 @@ impl ImportSourceMap {\n }\n \n impl RawItems {\n-    pub(crate) fn raw_items_query(db: &impl DefDatabase, file_id: HirFileId) -> Arc<RawItems> {\n+    pub(crate) fn raw_items_query(\n+        db: &(impl DefDatabase + AstDatabase),\n+        file_id: HirFileId,\n+    ) -> Arc<RawItems> {\n         db.raw_items_with_source_map(file_id).0\n     }\n \n     pub(crate) fn raw_items_with_source_map_query(\n-        db: &impl DefDatabase,\n+        db: &(impl DefDatabase + AstDatabase),\n         file_id: HirFileId,\n     ) -> (Arc<RawItems>, Arc<ImportSourceMap>) {\n         let mut collector = RawItemsCollector {"}, {"sha": "986269e00163ee93e402b748bd6569bfdefc560d", "filename": "crates/ra_hir/src/source_id.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_id.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -3,7 +3,7 @@ use std::{marker::PhantomData, sync::Arc, hash::{Hash, Hasher}};\n use ra_arena::{Arena, RawId, impl_arena_id};\n use ra_syntax::{SyntaxNodePtr, TreeArc, SyntaxNode, AstNode, ast};\n \n-use crate::{HirFileId, DefDatabase};\n+use crate::{HirFileId, AstDatabase};\n \n /// `AstId` points to an AST node in any file.\n ///\n@@ -38,7 +38,7 @@ impl<N: AstNode> AstId<N> {\n         self.file_id\n     }\n \n-    pub(crate) fn to_node(&self, db: &impl DefDatabase) -> TreeArc<N> {\n+    pub(crate) fn to_node(&self, db: &impl AstDatabase) -> TreeArc<N> {\n         let syntax_node = db.ast_id_to_node(self.file_id, self.file_ast_id.raw);\n         N::cast(&syntax_node).unwrap().to_owned()\n     }\n@@ -87,7 +87,7 @@ pub struct AstIdMap {\n }\n \n impl AstIdMap {\n-    pub(crate) fn ast_id_map_query(db: &impl DefDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n+    pub(crate) fn ast_id_map_query(db: &impl AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n         let map = if let Some(node) = db.parse_or_expand(file_id) {\n             AstIdMap::from_source(&*node)\n         } else {\n@@ -97,7 +97,7 @@ impl AstIdMap {\n     }\n \n     pub(crate) fn file_item_query(\n-        db: &impl DefDatabase,\n+        db: &impl AstDatabase,\n         file_id: HirFileId,\n         ast_id: ErasedFileAstId,\n     ) -> TreeArc<SyntaxNode> {"}, {"sha": "2a7c2b791fac6613fed3a0b5d026ca9c28fe9193", "filename": "crates/ra_hir/src/traits.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftraits.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -5,7 +5,10 @@ use rustc_hash::FxHashMap;\n \n use ra_syntax::ast::{self, NameOwner};\n \n-use crate::{Function, Const, TypeAlias, Name, DefDatabase, Trait, ids::LocationCtx, name::AsName, Module};\n+use crate::{\n+    Function, Const, TypeAlias, Name, DefDatabase, Trait, AstDatabase, Module,\n+    ids::LocationCtx, name::AsName,\n+};\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct TraitData {\n@@ -15,7 +18,10 @@ pub struct TraitData {\n }\n \n impl TraitData {\n-    pub(crate) fn trait_data_query(db: &impl DefDatabase, tr: Trait) -> Arc<TraitData> {\n+    pub(crate) fn trait_data_query(\n+        db: &(impl DefDatabase + AstDatabase),\n+        tr: Trait,\n+    ) -> Arc<TraitData> {\n         let (file_id, node) = tr.source(db);\n         let name = node.name().map(|n| n.as_name());\n         let module = tr.module(db);"}, {"sha": "970468e3cbffe1cf6800c9cd6e73d4985114007f", "filename": "crates/ra_hir/src/type_alias.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -2,9 +2,12 @@\n \n use std::sync::Arc;\n \n-use crate::{TypeAlias, db::DefDatabase, type_ref::TypeRef};\n+use crate::{TypeAlias, DefDatabase, AstDatabase, type_ref::TypeRef};\n \n-pub(crate) fn type_alias_ref_query(db: &impl DefDatabase, typ: TypeAlias) -> Arc<TypeRef> {\n+pub(crate) fn type_alias_ref_query(\n+    db: &(impl DefDatabase + AstDatabase),\n+    typ: TypeAlias,\n+) -> Arc<TypeRef> {\n     let (_, node) = typ.source(db);\n     Arc::new(TypeRef::from_ast_opt(node.type_ref()))\n }"}, {"sha": "d1a452ecb5753eca9881b4b3be1cafdf7ec7b7d3", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af9e475f4acce54f8383ed22febc412cf2541d0/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=5af9e475f4acce54f8383ed22febc412cf2541d0", "patch": "@@ -14,8 +14,9 @@ use crate::{LineIndex, symbol_index::{self, SymbolsDatabase}};\n     ra_db::SourceDatabaseStorage,\n     LineIndexDatabaseStorage,\n     symbol_index::SymbolsDatabaseStorage,\n-    hir::db::HirDatabaseStorage,\n-    hir::db::DefDatabaseStorage\n+    hir::db::AstDatabaseStorage,\n+    hir::db::DefDatabaseStorage,\n+    hir::db::HirDatabaseStorage\n )]\n #[derive(Debug)]\n pub(crate) struct RootDatabase {"}]}