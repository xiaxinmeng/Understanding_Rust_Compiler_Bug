{"sha": "b522ba02374169372a80d867894818c92e8c534a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MjJiYTAyMzc0MTY5MzcyYTgwZDg2Nzg5NDgxOGM5MmU4YzUzNGE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-08T01:31:37Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-08T17:30:27Z"}, "message": "review comments", "tree": {"sha": "95d075d4773c765cfb7b1271c951e199a8de41f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95d075d4773c765cfb7b1271c951e199a8de41f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b522ba02374169372a80d867894818c92e8c534a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b522ba02374169372a80d867894818c92e8c534a", "html_url": "https://github.com/rust-lang/rust/commit/b522ba02374169372a80d867894818c92e8c534a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b522ba02374169372a80d867894818c92e8c534a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "542be6fb6c3e3e3eae5aae04ac772aa0ab53b9a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/542be6fb6c3e3e3eae5aae04ac772aa0ab53b9a6", "html_url": "https://github.com/rust-lang/rust/commit/542be6fb6c3e3e3eae5aae04ac772aa0ab53b9a6"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "bc75e0a75f09dda2e9f49814982fa5f6f0c4ecdd", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b522ba02374169372a80d867894818c92e8c534a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b522ba02374169372a80d867894818c92e8c534a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b522ba02374169372a80d867894818c92e8c534a", "patch": "@@ -1303,10 +1303,39 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             _ => {}\n         }\n \n+        #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+        enum TyKind {\n+            Closure,\n+            Opaque,\n+            Generator,\n+            Foreign,\n+        }\n+\n+        impl TyKind {\n+            fn descr(&self) -> &'static str {\n+                match self {\n+                    Self::Closure => \"closure\",\n+                    Self::Opaque => \"opaque type\",\n+                    Self::Generator => \"generator\",\n+                    Self::Foreign => \"foreign type\",\n+                }\n+            }\n+\n+            fn from_ty(ty: Ty<'_>) -> Option<(Self, DefId)> {\n+                match ty.kind {\n+                    ty::Closure(def_id, _) => Some((Self::Closure, def_id)),\n+                    ty::Opaque(def_id, _) => Some((Self::Opaque, def_id)),\n+                    ty::Generator(def_id, ..) => Some((Self::Generator, def_id)),\n+                    ty::Foreign(def_id) => Some((Self::Foreign, def_id)),\n+                    _ => None,\n+                }\n+            }\n+        }\n+\n         struct OpaqueTypesVisitor<'tcx> {\n-            types: FxHashMap<&'static str, FxHashSet<Span>>,\n-            expected: FxHashMap<&'static str, FxHashSet<Span>>,\n-            found: FxHashMap<&'static str, FxHashSet<Span>>,\n+            types: FxHashMap<TyKind, FxHashSet<Span>>,\n+            expected: FxHashMap<TyKind, FxHashSet<Span>>,\n+            found: FxHashMap<TyKind, FxHashSet<Span>>,\n             ignore_span: Span,\n             tcx: TyCtxt<'tcx>,\n         }\n@@ -1350,7 +1379,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                     },\n                                     if count > 1 { \"one of the \" } else { \"\" },\n                                     target,\n-                                    key,\n+                                    key.descr(),\n                                     pluralize!(count),\n                                 ),\n                             );\n@@ -1362,18 +1391,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n-                let kind = match t.kind {\n-                    ty::Closure(..) => \"closure\",\n-                    ty::Opaque(..) => \"opaque type\",\n-                    ty::Generator(..) => \"generator\",\n-                    ty::Foreign(..) => \"foreign type\",\n-                    _ => \"\",\n-                };\n-                if let ty::Closure(def_id, _)\n-                | ty::Opaque(def_id, _)\n-                | ty::Generator(def_id, ..)\n-                | ty::Foreign(def_id) = t.kind\n-                {\n+                if let Some((kind, def_id)) = TyKind::from_ty(t) {\n                     let span = self.tcx.def_span(def_id);\n                     // Avoid cluttering the output when the \"found\" and error span overlap:\n                     //"}]}