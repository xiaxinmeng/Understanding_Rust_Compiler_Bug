{"sha": "ad54ee293982f65a4ea72f2eae3f14b52fe2284e", "node_id": "C_kwDOAAsO6NoAKGFkNTRlZTI5Mzk4MmY2NWE0ZWE3MmYyZWFlM2YxNGI1MmZlMjI4NGU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-08T22:51:19Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-08T22:51:19Z"}, "message": "Rename MacroDef to Macro", "tree": {"sha": "f398f448974c7f8c184da0c9e7480c3dc0f9bd1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f398f448974c7f8c184da0c9e7480c3dc0f9bd1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad54ee293982f65a4ea72f2eae3f14b52fe2284e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad54ee293982f65a4ea72f2eae3f14b52fe2284e", "html_url": "https://github.com/rust-lang/rust/commit/ad54ee293982f65a4ea72f2eae3f14b52fe2284e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad54ee293982f65a4ea72f2eae3f14b52fe2284e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42d46325a124c4820f3cab688785a2cd279cb974", "url": "https://api.github.com/repos/rust-lang/rust/commits/42d46325a124c4820f3cab688785a2cd279cb974", "html_url": "https://github.com/rust-lang/rust/commit/42d46325a124c4820f3cab688785a2cd279cb974"}], "stats": {"total": 88, "additions": 57, "deletions": 31}, "files": [{"sha": "94b801736ce0a0b052fbdb001e30b8fdd890c89d", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ad54ee293982f65a4ea72f2eae3f14b52fe2284e/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad54ee293982f65a4ea72f2eae3f14b52fe2284e/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=ad54ee293982f65a4ea72f2eae3f14b52fe2284e", "patch": "@@ -5,7 +5,7 @@ use std::{fmt, hash::Hash, ops, sync::Arc};\n use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n use either::Either;\n-use hir_expand::{hygiene::Hygiene, name::AsName, AstId, HirFileId, InFile};\n+use hir_expand::{hygiene::Hygiene, name::AsName, HirFileId, InFile};\n use itertools::Itertools;\n use la_arena::ArenaMap;\n use mbe::{syntax_node_to_token_tree, DelimiterKind, Punct};\n@@ -24,7 +24,7 @@ use crate::{\n     path::{ModPath, PathKind},\n     src::{HasChildSource, HasSource},\n     AdtId, AttrDefId, EnumId, GenericParamId, HasModule, LocalEnumVariantId, LocalFieldId, Lookup,\n-    VariantId,\n+    MacroId, VariantId,\n };\n \n /// Holds documentation\n@@ -358,9 +358,11 @@ impl AttrsWithOwner {\n                 AdtId::UnionId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n             },\n             AttrDefId::TraitId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n-            AttrDefId::MacroDefId(it) => it\n-                .ast_id()\n-                .either(|ast_id| attrs_from_ast(ast_id, db), |ast_id| attrs_from_ast(ast_id, db)),\n+            AttrDefId::MacroId(it) => match it {\n+                MacroId::Macro2Id(it) => attrs_from_item_tree(it.lookup(db).id, db),\n+                MacroId::MacroRulesId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n+                MacroId::ProcMacroId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n+            },\n             AttrDefId::ImplId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n             AttrDefId::ConstId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n             AttrDefId::StaticId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n@@ -461,10 +463,11 @@ impl AttrsWithOwner {\n             AttrDefId::ConstId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n             AttrDefId::TraitId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n             AttrDefId::TypeAliasId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n-            AttrDefId::MacroDefId(id) => id.ast_id().either(\n-                |it| it.with_value(ast::AnyHasAttrs::new(it.to_node(db.upcast()))),\n-                |it| it.with_value(ast::AnyHasAttrs::new(it.to_node(db.upcast()))),\n-            ),\n+            AttrDefId::MacroId(id) => match id {\n+                MacroId::Macro2Id(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n+                MacroId::MacroRulesId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n+                MacroId::ProcMacroId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n+            },\n             AttrDefId::ImplId(id) => id.lookup(db).source(db).map(ast::AnyHasAttrs::new),\n             AttrDefId::GenericParamId(id) => match id {\n                 GenericParamId::ConstParamId(id) => {\n@@ -845,14 +848,6 @@ impl<'attr> AttrQuery<'attr> {\n     }\n }\n \n-fn attrs_from_ast<N>(src: AstId<N>, db: &dyn DefDatabase) -> RawAttrs\n-where\n-    N: ast::HasAttrs,\n-{\n-    let src = InFile::new(src.file_id, src.to_node(db.upcast()));\n-    RawAttrs::from_attrs_owner(db, src.as_ref().map(|it| it as &dyn ast::HasAttrs))\n-}\n-\n fn attrs_from_item_tree<N: ItemTreeNode>(id: ItemTreeId<N>, db: &dyn DefDatabase) -> RawAttrs {\n     let tree = id.item_tree(db);\n     let mod_item = N::id_to_mod_item(id.value);"}, {"sha": "6a2212f1994006f2e2fbc989b3430e4f4da77a5a", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad54ee293982f65a4ea72f2eae3f14b52fe2284e/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad54ee293982f65a4ea72f2eae3f14b52fe2284e/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=ad54ee293982f65a4ea72f2eae3f14b52fe2284e", "patch": "@@ -102,6 +102,12 @@ impl ChildBySource for ItemScope {\n                 res[keys::ATTR_MACRO_CALL].insert(ast_id.to_node(db.upcast()), call_id);\n             },\n         );\n+        self.legacy_macros().for_each(|(_, id)| {\n+            let loc = id.lookup(db);\n+            if loc.id.file_id() == file_id {\n+                res[keys::MACRO_RULES].insert(loc.source(db).value, id);\n+            }\n+        });\n         self.derive_macro_invocs().filter(|(id, _)| id.file_id == file_id).for_each(\n             |(ast_id, calls)| {\n                 let adt = ast_id.to_node(db.upcast());\n@@ -145,7 +151,9 @@ impl ChildBySource for ItemScope {\n                     MacroId::MacroRulesId(id) => insert!(map[keys::MACRO_RULES].insert(id)),\n                     MacroId::ProcMacroId(id) => insert!(map[keys::PROC_MACRO].insert(id)),\n                 },\n-                _ => (),\n+                ModuleDefId::ModuleId(_)\n+                | ModuleDefId::EnumVariantId(_)\n+                | ModuleDefId::BuiltinType(_) => (),\n             }\n         }\n         fn add_impl(db: &dyn DefDatabase, map: &mut DynMap, file_id: HirFileId, imp: ImplId) {"}, {"sha": "000fe5ac7bb4b3788139ede359a7e4fd03780119", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad54ee293982f65a4ea72f2eae3f14b52fe2284e/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad54ee293982f65a4ea72f2eae3f14b52fe2284e/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=ad54ee293982f65a4ea72f2eae3f14b52fe2284e", "patch": "@@ -1069,9 +1069,9 @@ mod tests {\n             Query::new(\"\".to_string()).limit(2),\n             expect![[r#\"\n                 dep::fmt (t)\n-                dep::Fmt (m)\n                 dep::Fmt (t)\n                 dep::Fmt (v)\n+                dep::Fmt (m)\n             \"#]],\n         );\n     }"}, {"sha": "c2e2de309e8381ae5c0426c129891a3a03b55b66", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad54ee293982f65a4ea72f2eae3f14b52fe2284e/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad54ee293982f65a4ea72f2eae3f14b52fe2284e/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=ad54ee293982f65a4ea72f2eae3f14b52fe2284e", "patch": "@@ -538,7 +538,7 @@ pub enum AttrDefId {\n     ConstId(ConstId),\n     TraitId(TraitId),\n     TypeAliasId(TypeAliasId),\n-    MacroDefId(MacroDefId),\n+    MacroId(MacroId),\n     ImplId(ImplId),\n     GenericParamId(GenericParamId),\n     ExternBlockId(ExternBlockId),\n@@ -554,7 +554,7 @@ impl_from!(\n     FunctionId,\n     TraitId,\n     TypeAliasId,\n-    MacroDefId,\n+    MacroId,\n     ImplId,\n     GenericParamId\n     for AttrDefId\n@@ -757,9 +757,7 @@ impl AttrDefId {\n                 .module(db)\n                 .krate\n             }\n-            // FIXME: `MacroDefId` should store the defining module, then this can implement\n-            // `HasModule`\n-            AttrDefId::MacroDefId(it) => it.krate,\n+            AttrDefId::MacroId(it) => it.module(db).krate,\n         }\n     }\n }\n@@ -856,7 +854,7 @@ fn macro_call_as_call_id(\n     Ok(res)\n }\n \n-fn macro_id_to_def_id(db: &dyn db::DefDatabase, id: MacroId) -> MacroDefId {\n+pub fn macro_id_to_def_id(db: &dyn db::DefDatabase, id: MacroId) -> MacroDefId {\n     match id {\n         MacroId::Macro2Id(it) => {\n             let loc = it.lookup(db);"}, {"sha": "52901eb0b266b282687994a7b600c9476b801f1b", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad54ee293982f65a4ea72f2eae3f14b52fe2284e/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad54ee293982f65a4ea72f2eae3f14b52fe2284e/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=ad54ee293982f65a4ea72f2eae3f14b52fe2284e", "patch": "@@ -105,7 +105,7 @@ pub struct DefMap {\n     /// Side table with additional proc. macro info, for use by name resolution in downstream\n     /// crates.\n     ///\n-    /// (the primary purpose is to resolve derive helpers and fetch a proc-macros name)\n+    /// (the primary purpose is to resolve derive helpers)\n     exported_proc_macros: FxHashMap<MacroDefId, ProcMacroDef>,\n \n     /// Custom attributes registered with `#![register_attr]`.\n@@ -295,9 +295,6 @@ impl DefMap {\n     pub fn modules(&self) -> impl Iterator<Item = (LocalModuleId, &ModuleData)> + '_ {\n         self.modules.iter()\n     }\n-    pub fn exported_proc_macros(&self) -> impl Iterator<Item = (MacroDefId, Name)> + '_ {\n-        self.exported_proc_macros.iter().map(|(id, def)| (*id, def.name.clone()))\n-    }\n     pub fn registered_tools(&self) -> &[SmolStr] {\n         &self.registered_tools\n     }"}, {"sha": "22f66a0d621b71c371b6470f0c6ba8c0a0890d2c", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ad54ee293982f65a4ea72f2eae3f14b52fe2284e/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad54ee293982f65a4ea72f2eae3f14b52fe2284e/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=ad54ee293982f65a4ea72f2eae3f14b52fe2284e", "patch": "@@ -21,8 +21,8 @@ use crate::{\n     visibility::{RawVisibility, Visibility},\n     AdtId, AssocItemId, ConstId, ConstParamId, DefWithBodyId, EnumId, EnumVariantId, ExternBlockId,\n     FunctionId, GenericDefId, GenericParamId, HasModule, ImplId, ItemContainerId, LifetimeParamId,\n-    LocalModuleId, Lookup, MacroId, ModuleDefId, ModuleId, StaticId, StructId, TraitId,\n-    TypeAliasId, TypeOrConstParamId, TypeParamId, VariantId,\n+    LocalModuleId, Lookup, Macro2Id, MacroId, MacroRulesId, ModuleDefId, ModuleId, ProcMacroId,\n+    StaticId, StructId, TraitId, TypeAliasId, TypeOrConstParamId, TypeParamId, VariantId,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -864,3 +864,31 @@ impl HasResolver for VariantId {\n         }\n     }\n }\n+\n+impl HasResolver for MacroId {\n+    fn resolver(self, db: &dyn DefDatabase) -> Resolver {\n+        match self {\n+            MacroId::Macro2Id(it) => it.resolver(db),\n+            MacroId::MacroRulesId(it) => it.resolver(db),\n+            MacroId::ProcMacroId(it) => it.resolver(db),\n+        }\n+    }\n+}\n+\n+impl HasResolver for Macro2Id {\n+    fn resolver(self, db: &dyn DefDatabase) -> Resolver {\n+        self.lookup(db).container.resolver(db)\n+    }\n+}\n+\n+impl HasResolver for ProcMacroId {\n+    fn resolver(self, db: &dyn DefDatabase) -> Resolver {\n+        self.lookup(db).container.resolver(db)\n+    }\n+}\n+\n+impl HasResolver for MacroRulesId {\n+    fn resolver(self, db: &dyn DefDatabase) -> Resolver {\n+        self.lookup(db).container.resolver(db)\n+    }\n+}"}]}