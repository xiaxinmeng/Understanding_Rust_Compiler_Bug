{"sha": "c24a87315af884680332f850753b3eeef18c22c8", "node_id": "C_kwDOAAsO6NoAKGMyNGE4NzMxNWFmODg0NjgwMzMyZjg1MDc1M2IzZWVlZjE4YzIyYzg", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-09-21T20:05:15Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-07T19:19:27Z"}, "message": "always put ftl message on next line, resolve all but 1 output comparison error", "tree": {"sha": "21b61bb0484bfd3abeaf3139a15071efbdff0dd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21b61bb0484bfd3abeaf3139a15071efbdff0dd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c24a87315af884680332f850753b3eeef18c22c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c24a87315af884680332f850753b3eeef18c22c8", "html_url": "https://github.com/rust-lang/rust/commit/c24a87315af884680332f850753b3eeef18c22c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c24a87315af884680332f850753b3eeef18c22c8/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "2c3351c9a64caf76775c1335201a4762f5fdeaf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c3351c9a64caf76775c1335201a4762f5fdeaf8", "html_url": "https://github.com/rust-lang/rust/commit/2c3351c9a64caf76775c1335201a4762f5fdeaf8"}], "stats": {"total": 269, "additions": 180, "deletions": 89}, "files": [{"sha": "bd6a973e9163f6fd8430b624fad1ace3325ce412", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 180, "deletions": 89, "changes": 269, "blob_url": "https://github.com/rust-lang/rust/blob/c24a87315af884680332f850753b3eeef18c22c8/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c24a87315af884680332f850753b3eeef18c22c8/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=c24a87315af884680332f850753b3eeef18c22c8", "patch": "@@ -10,119 +10,159 @@ passes_outer_crate_level_attr =\n passes_inner_crate_level_attr =\n     crate-level attribute should be in the root module\n \n-passes_ignored_attr_with_macro = `#[{$sym}]` is ignored on struct fields, match arms and macro defs\n+passes_ignored_attr_with_macro =\n+    `#[{$sym}]` is ignored on struct fields, match arms and macro defs\n     .warn = {-passes_previously_accepted}\n     .note = {-passes_see_issue(issue: \"80564\")}\n \n-passes_ignored_attr = `#[{$sym}]` is ignored on struct fields and match arms\n+passes_ignored_attr =\n+    `#[{$sym}]` is ignored on struct fields and match arms\n     .warn = {-passes_previously_accepted}\n     .note = {-passes_see_issue(issue: \"80564\")}\n \n-passes_inline_ignored_function_prototype = `#[inline]` is ignored on function prototypes\n+passes_inline_ignored_function_prototype =\n+    `#[inline]` is ignored on function prototypes\n \n-passes_inline_ignored_constants = `#[inline]` is ignored on constants\n+passes_inline_ignored_constants =\n+    `#[inline]` is ignored on constants\n     .warn = {-passes_previously_accepted}\n     .note = {-passes_see_issue(issue: \"65833\")}\n \n-passes_inline_not_fn_or_closure = attribute should be applied to function or closure\n+passes_inline_not_fn_or_closure =\n+    attribute should be applied to function or closure\n     .label = not a function or closure\n \n-passes_no_coverage_ignored_function_prototype = `#[no_coverage]` is ignored on function prototypes\n+passes_no_coverage_ignored_function_prototype =\n+    `#[no_coverage]` is ignored on function prototypes\n \n passes_no_coverage_propagate =\n     `#[no_coverage]` does not propagate into items and must be applied to the contained functions directly\n \n-passes_no_coverage_fn_defn = `#[no_coverage]` may only be applied to function definitions\n+passes_no_coverage_fn_defn =\n+    `#[no_coverage]` may only be applied to function definitions\n \n-passes_no_coverage_not_coverable = `#[no_coverage]` must be applied to coverable code\n+passes_no_coverage_not_coverable =\n+    `#[no_coverage]` must be applied to coverable code\n     .label = not coverable code\n \n-passes_should_be_applied_to_fn = attribute should be applied to a function definition\n+passes_should_be_applied_to_fn =\n+    attribute should be applied to a function definition\n     .label = not a function definition\n \n-passes_naked_tracked_caller = cannot use `#[track_caller]` with `#[naked]`\n+passes_naked_tracked_caller =\n+    cannot use `#[track_caller]` with `#[naked]`\n \n-passes_should_be_applied_to_struct_enum = attribute should be applied to a struct or enum\n+passes_should_be_applied_to_struct_enum =\n+    attribute should be applied to a struct or enum\n     .label = not a struct or enum\n \n-passes_should_be_applied_to_trait = attribute should be applied to a trait\n+passes_should_be_applied_to_trait =\n+    attribute should be applied to a trait\n     .label = not a trait\n \n-passes_target_feature_on_statement = {passes_should_be_applied_to_fn}\n+passes_target_feature_on_statement =\n+    {passes_should_be_applied_to_fn}\n     .warn = {-passes_previously_accepted}\n     .label = {passes_should_be_applied_to_fn.label}\n \n-passes_should_be_applied_to_static = attribute should be applied to a static\n+passes_should_be_applied_to_static =\n+    attribute should be applied to a static\n     .label = not a static\n \n-passes_doc_expect_str = doc {$attr_name} attribute expects a string: #[doc({$attr_name} = \"a\")]\n+passes_doc_expect_str =\n+    doc {$attr_name} attribute expects a string: #[doc({$attr_name} = \"a\")]\n \n-passes_doc_alias_empty = {$attr_str} attribute cannot have empty value\n+passes_doc_alias_empty =\n+    {$attr_str} attribute cannot have empty value\n \n-passes_doc_alias_bad_char = {$char_} character isn't allowed in {$attr_str}\n+passes_doc_alias_bad_char =\n+    {$char_} character isn't allowed in {$attr_str}\n \n-passes_doc_alias_start_end = {$attr_str} cannot start or end with ' '\n+passes_doc_alias_start_end =\n+    {$attr_str} cannot start or end with ' '\n \n-passes_doc_alias_bad_location = {$attr_str} isn't allowed on {$location}\n+passes_doc_alias_bad_location =\n+    {$attr_str} isn't allowed on {$location}\n \n-passes_doc_alias_not_an_alias = {$attr_str} is the same as the item's name\n+passes_doc_alias_not_an_alias =\n+    {$attr_str} is the same as the item's name\n \n passes_doc_alias_duplicated = doc alias is duplicated\n     .label = first defined here\n \n-passes_doc_alias_not_string_literal = `#[doc(alias(\"a\"))]` expects string literals\n+passes_doc_alias_not_string_literal =\n+    `#[doc(alias(\"a\"))]` expects string literals\n \n passes_doc_alias_malformed =\n     doc alias attribute expects a string `#[doc(alias = \"a\")]` or a list of strings `#[doc(alias(\"a\", \"b\"))]`\n \n-passes_doc_keyword_empty_mod = `#[doc(keyword = \"...\")]` should be used on empty modules\n+passes_doc_keyword_empty_mod =\n+    `#[doc(keyword = \"...\")]` should be used on empty modules\n \n-passes_doc_keyword_not_mod = `#[doc(keyword = \"...\")]` should be used on modules\n+passes_doc_keyword_not_mod =\n+    `#[doc(keyword = \"...\")]` should be used on modules\n \n-passes_doc_keyword_invalid_ident = `{$doc_keyword}` is not a valid identifier\n+passes_doc_keyword_invalid_ident =\n+    `{$doc_keyword}` is not a valid identifier\n \n passes_doc_fake_variadic_not_valid =\n     `#[doc(fake_variadic)]` must be used on the first of a set of tuple or fn pointer trait impls with varying arity\n \n-passes_doc_keyword_only_impl = `#[doc(keyword = \"...\")]` should be used on impl blocks\n+passes_doc_keyword_only_impl =\n+    `#[doc(keyword = \"...\")]` should be used on impl blocks\n \n-passes_doc_inline_conflict_first = this attribute...\n-passes_doc_inline_conflict_second = ...conflicts with this attribute\n-passes_doc_inline_conflict = conflicting doc inlining attributes\n+passes_doc_inline_conflict_first =\n+    this attribute...\n+\n+passes_doc_inline_conflict_second =\n+    {\".\"}..conflicts with this attribute\n+\n+passes_doc_inline_conflict =\n+    conflicting doc inlining attributes\n     .help = remove one of the conflicting attributes\n \n-passes_doc_inline_only_use = this attribute can only be applied to a `use` item\n+passes_doc_inline_only_use =\n+    this attribute can only be applied to a `use` item\n     .label = only applicable on `use` items\n     .not_a_use_item_label = not a `use` item\n     .note = read <https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#inline-and-no_inline> for more information\n \n passes_doc_attr_not_crate_level =\n     `#![doc({$attr_name} = \"...\")]` isn't allowed as a crate-level attribute\n \n-passes_attr_crate_level = this attribute can only be applied at the crate level\n+passes_attr_crate_level =\n+    this attribute can only be applied at the crate level\n     .suggestion = to apply to the crate, use an inner attribute\n     .help = to apply to the crate, use an inner attribute\n     .note = read <https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level> for more information\n \n-passes_doc_test_unknown = unknown `doc(test)` attribute `{$path}`\n+passes_doc_test_unknown =\n+    unknown `doc(test)` attribute `{$path}`\n \n-passes_doc_test_takes_list = `#[doc(test(...)]` takes a list of attributes\n+passes_doc_test_takes_list =\n+    `#[doc(test(...)]` takes a list of attributes\n \n-passes_doc_primitive = `doc(primitive)` should never have been stable\n+passes_doc_primitive =\n+    `doc(primitive)` should never have been stable\n \n-passes_doc_test_unknown_any = unknown `doc` attribute `{$path}`\n+passes_doc_test_unknown_any =\n+    unknown `doc` attribute `{$path}`\n \n-passes_doc_test_unknown_spotlight = unknown `doc` attribute `{$path}`\n+passes_doc_test_unknown_spotlight =\n+    unknown `doc` attribute `{$path}`\n     .note = `doc(spotlight)` was renamed to `doc(notable_trait)`\n     .suggestion = use `notable_trait` instead\n     .no_op_note = `doc(spotlight)` is now a no-op\n \n-passes_doc_test_unknown_include = unknown `doc` attribute `{$path}`\n+passes_doc_test_unknown_include =\n+    unknown `doc` attribute `{$path}`\n     .suggestion = use `doc = include_str!` instead\n \n-passes_doc_invalid = invalid `doc` attribute\n+passes_doc_invalid =\n+    invalid `doc` attribute\n \n-passes_pass_by_value = `pass_by_value` attribute should be applied to a struct, enum or type alias\n+passes_pass_by_value =\n+    `pass_by_value` attribute should be applied to a struct, enum or type alias\n     .label = is not a struct, enum or type alias\n \n passes_allow_incoherent_impl =\n@@ -137,42 +177,54 @@ passes_must_use_async =\n     `must_use` attribute on `async` functions applies to the anonymous `Future` returned by the function, not the value within\n     .label = this attribute does nothing, the `Future`s returned by async functions are already `must_use`\n \n-passes_must_use_no_effect = `#[must_use]` has no effect when applied to {$article} {$target}\n+passes_must_use_no_effect =\n+    `#[must_use]` has no effect when applied to {$article} {$target}\n \n-passes_must_not_suspend = `must_not_suspend` attribute should be applied to a struct, enum, or trait\n+passes_must_not_suspend =\n+    `must_not_suspend` attribute should be applied to a struct, enum, or trait\n     .label = is not a struct, enum, or trait\n \n-passes_cold = {passes_should_be_applied_to_fn}\n+passes_cold =\n+    {passes_should_be_applied_to_fn}\n     .warn = {-passes_previously_accepted}\n     .label = {passes_should_be_applied_to_fn.label}\n \n-passes_link = attribute should be applied to an `extern` block with non-Rust ABI\n+passes_link =\n+    attribute should be applied to an `extern` block with non-Rust ABI\n     .warn = {-passes_previously_accepted}\n     .label = not an `extern` block\n \n-passes_link_name = attribute should be applied to a foreign function or static\n+passes_link_name =\n+    attribute should be applied to a foreign function or static\n     .warn = {-passes_previously_accepted}\n     .label = not a foreign function or static\n     .help = try `#[link(name = \"{$value}\")]` instead\n \n-passes_no_link = attribute should be applied to an `extern crate` item\n+passes_no_link =\n+    attribute should be applied to an `extern crate` item\n     .label = not an `extern crate` item\n \n-passes_export_name = attribute should be applied to a free function, impl method or static\n+passes_export_name =\n+    attribute should be applied to a free function, impl method or static\n     .label = not a free function, impl method or static\n \n-passes_rustc_layout_scalar_valid_range_not_struct = attribute should be applied to a struct\n+passes_rustc_layout_scalar_valid_range_not_struct =\n+    attribute should be applied to a struct\n     .label = not a struct\n \n-passes_rustc_layout_scalar_valid_range_arg = expected exactly one integer literal argument\n+passes_rustc_layout_scalar_valid_range_arg =\n+    expected exactly one integer literal argument\n \n-passes_rustc_legacy_const_generics_only = #[rustc_legacy_const_generics] functions must only have const generics\n+passes_rustc_legacy_const_generics_only =\n+    #[rustc_legacy_const_generics] functions must only have const generics\n     .label = non-const generic parameter\n \n-passes_rustc_legacy_const_generics_index = #[rustc_legacy_const_generics] must have one index for each generic parameter\n+passes_rustc_legacy_const_generics_index =\n+    #[rustc_legacy_const_generics] must have one index for each generic parameter\n     .label = generic parameters\n \n-passes_rustc_legacy_const_generics_index_exceed = index exceeds number of arguments\n+passes_rustc_legacy_const_generics_index_exceed =\n+    index exceeds number of arguments\n     .label = there {$arg_count ->\n         [one] is\n         *[other] are\n@@ -181,115 +233,154 @@ passes_rustc_legacy_const_generics_index_exceed = index exceeds number of argume\n         *[other] arguments\n     }\n \n-passes_rustc_legacy_const_generics_index_negative = arguments should be non-negative integers\n+passes_rustc_legacy_const_generics_index_negative =\n+    arguments should be non-negative integers\n \n-passes_rustc_dirty_clean = attribute requires -Z query-dep-graph to be enabled\n+passes_rustc_dirty_clean =\n+    attribute requires -Z query-dep-graph to be enabled\n \n-passes_link_section = attribute should be applied to a function or static\n+passes_link_section =\n+    attribute should be applied to a function or static\n     .warn = {-passes_previously_accepted}\n     .label = not a function or static\n \n-passes_no_mangle_foreign = `#[no_mangle]` has no effect on a foreign {$foreign_item_kind}\n+passes_no_mangle_foreign =\n+    `#[no_mangle]` has no effect on a foreign {$foreign_item_kind}\n     .warn = {-passes_previously_accepted}\n     .label = foreign {$foreign_item_kind}\n     .note = symbol names in extern blocks are not mangled\n     .suggestion = remove this attribute\n \n-passes_no_mangle = attribute should be applied to a free function, impl method or static\n+passes_no_mangle =\n+    attribute should be applied to a free function, impl method or static\n     .warn = {-passes_previously_accepted}\n     .label = not a free function, impl method or static\n \n-passes_repr_ident = meta item in `repr` must be an identifier\n+passes_repr_ident =\n+    meta item in `repr` must be an identifier\n \n-passes_repr_conflicting = conflicting representation hints\n+passes_repr_conflicting =\n+    conflicting representation hints\n \n-passes_used_static = attribute must be applied to a `static` variable\n+passes_used_static =\n+    attribute must be applied to a `static` variable\n \n-passes_used_compiler_linker = `used(compiler)` and `used(linker)` can't be used together\n+passes_used_compiler_linker =\n+    `used(compiler)` and `used(linker)` can't be used together\n \n-passes_allow_internal_unstable = attribute should be applied to a macro\n+passes_allow_internal_unstable =\n+    attribute should be applied to a macro\n     .label = not a macro\n \n-passes_debug_visualizer_placement = attribute should be applied to a module\n+passes_debug_visualizer_placement =\n+    attribute should be applied to a module\n \n-passes_debug_visualizer_invalid = invalid argument\n+passes_debug_visualizer_invalid =\n+    invalid argument\n     .note_1 = expected: `natvis_file = \"...\"`\n     .note_2 = OR\n     .note_3 = expected: `gdb_script_file = \"...\"`\n \n-passes_debug_visualizer_unreadable = couldn't read {$file}: {$error}\n+passes_debug_visualizer_unreadable =\n+    couldn't read {$file}: {$error}\n \n-passes_rustc_allow_const_fn_unstable = attribute should be applied to `const fn`\n+passes_rustc_allow_const_fn_unstable =\n+    attribute should be applied to `const fn`\n     .label = not a `const fn`\n \n-passes_rustc_std_internal_symbol = attribute should be applied to functions or statics\n+passes_rustc_std_internal_symbol =\n+    attribute should be applied to functions or statics\n     .label = not a function or static\n \n-passes_const_trait = attribute should be applied to a trait\n+passes_const_trait =\n+    attribute should be applied to a trait\n \n-passes_stability_promotable = attribute cannot be applied to an expression\n+passes_stability_promotable =\n+    attribute cannot be applied to an expression\n \n-passes_deprecated = attribute is ignored here\n+passes_deprecated =\n+    attribute is ignored here\n \n-passes_macro_use = `#[{$name}]` only has an effect on `extern crate` and modules\n+passes_macro_use =\n+    `#[{$name}]` only has an effect on `extern crate` and modules\n \n-passes_macro_export = `#[macro_export]` only has an effect on macro definitions\n+passes_macro_export =\n+    `#[macro_export]` only has an effect on macro definitions\n \n-passes_plugin_registrar = `#[plugin_registrar]` only has an effect on functions\n+passes_plugin_registrar =\n+    `#[plugin_registrar]` only has an effect on functions\n \n-passes_unused_empty_lints_note = attribute `{$name}` with an empty list has no effect\n+passes_unused_empty_lints_note =\n+    attribute `{$name}` with an empty list has no effect\n \n-passes_unused_no_lints_note = attribute `{$name}` without any lints has no effect\n+passes_unused_no_lints_note =\n+    attribute `{$name}` without any lints has no effect\n \n passes_unused_default_method_body_const_note =\n     `default_method_body_is_const` has been replaced with `#[const_trait]` on traits\n \n-passes_unused = unused attribute\n+passes_unused =\n+    unused attribute\n     .suggestion = remove this attribute\n \n-passes_non_exported_macro_invalid_attrs = attribute should be applied to function or closure\n+passes_non_exported_macro_invalid_attrs =\n+    attribute should be applied to function or closure\n     .label = not a function or closure\n \n-passes_unused_duplicate = unused attribute\n+passes_unused_duplicate =\n+    unused attribute\n     .suggestion = remove this attribute\n     .note = attribute also specified here\n     .warn = {-passes_previously_accepted}\n \n-passes_unused_multiple = multiple `{$name}` attributes\n+passes_unused_multiple =\n+    multiple `{$name}` attributes\n     .suggestion = remove this attribute\n     .note = attribute also specified here\n \n-passes_rustc_lint_opt_ty = `#[rustc_lint_opt_ty]` should be applied to a struct\n+passes_rustc_lint_opt_ty =\n+    `#[rustc_lint_opt_ty]` should be applied to a struct\n     .label = not a struct\n \n-passes_rustc_lint_opt_deny_field_access = `#[rustc_lint_opt_deny_field_access]` should be applied to a field\n+passes_rustc_lint_opt_deny_field_access =\n+    `#[rustc_lint_opt_deny_field_access]` should be applied to a field\n     .label = not a field\n \n-passes_link_ordinal = attribute should be applied to a foreign function or static\n+passes_link_ordinal =\n+    attribute should be applied to a foreign function or static\n     .label = not a foreign function or static\n \n-passes_collapse_debuginfo = `collapse_debuginfo` attribute should be applied to macro definitions\n+passes_collapse_debuginfo =\n+    `collapse_debuginfo` attribute should be applied to macro definitions\n     .label = not a macro definition\n \n-passes_deprecated_annotation_has_no_effect = this `#[deprecated]` annotation has no effect\n+passes_deprecated_annotation_has_no_effect =\n+    this `#[deprecated]` annotation has no effect\n     .suggestion = remove the unnecessary deprecation attribute\n     \n-passes_missing_panic_handler = `#[panic_handler]` function required, but not found\n+passes_missing_panic_handler =\n+    `#[panic_handler]` function required, but not found\n \n-passes_missing_alloc_error_handler = `#[alloc_error_handler]` function required, but not found\n+passes_missing_alloc_error_handler =\n+    `#[alloc_error_handler]` function required, but not found\n     .note = use `#![feature(default_alloc_error_handler)]` for a default error handler\n \n-passes_missing_lang_item = language item required, but not found: `{$name}`\n+passes_missing_lang_item =\n+    language item required, but not found: `{$name}`\n     .note = this can occur when a binary crate with `#![no_std]` is compiled for a target where `{$name}` is defined in the standard library\n     .help = you may be able to compile for a target that doesn't need `{$name}`, specify a target with `--target` or in `.cargo/config`\n \n-passes_lang_item_on_incorrect_target = `{$name}` language item must be applied to a {$expected_target}\n+passes_lang_item_on_incorrect_target =\n+    `{$name}` language item must be applied to a {$expected_target}\n     .label = attribute should be applied to a {$expected_target}, not a {$actual_target}\n \n-passes_unknown_lang_item = definition of an unknown language item: `{$name}`\n+passes_unknown_lang_item =\n+    definition of an unknown language item: `{$name}`\n     .label = definition of unknown language item `{$name}`\n \n-passes_local_duplicate_lang_item = found duplicate lang item `{$name}`\n+passes_local_duplicate_lang_item =\n+    found duplicate lang item `{$name}`\n \n-passes_invalid_attr_at_crate_level = `{$name}` attribute cannot be used at crate level\n+passes_invalid_attr_at_crate_level =\n+    `{$name}` attribute cannot be used at crate level\n     .suggestion = perhaps you meant to use an outer attribute"}]}