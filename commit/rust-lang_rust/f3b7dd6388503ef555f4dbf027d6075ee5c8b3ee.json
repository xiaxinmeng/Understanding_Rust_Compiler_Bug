{"sha": "f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "node_id": "C_kwDOAAsO6NoAKGYzYjdkZDYzODg1MDNlZjU1NWY0ZGJmMDI3ZDYwNzVlZTVjOGIzZWU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-07T12:03:11Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-06-16T19:39:48Z"}, "message": "Add `AliasKind::Weak` for type aliases.\n\nOnly use it when the type alias contains an opaque type.\n\nAlso does wf-checking on such type aliases.", "tree": {"sha": "632ff408ab2141425d8734791fd414cb76d28ddf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/632ff408ab2141425d8734791fd414cb76d28ddf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "html_url": "https://github.com/rust-lang/rust/commit/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fdd07fe88c8965daea60c5109913095e3042c9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdd07fe88c8965daea60c5109913095e3042c9c", "html_url": "https://github.com/rust-lang/rust/commit/4fdd07fe88c8965daea60c5109913095e3042c9c"}], "stats": {"total": 673, "additions": 474, "deletions": 199}, "files": [{"sha": "4f01e0a24a5d40f8fb1f5352f9bfbe416feee14c", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -63,6 +63,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),\n \n+            ty::Alias(ty::Weak, _) => bug!(\"type_name: unexpected weak projection\"),\n             ty::Alias(ty::Inherent, _) => bug!(\"type_name: unexpected inherent projection\"),\n             ty::GeneratorWitness(_) => bug!(\"type_name: unexpected `GeneratorWitness`\"),\n             ty::GeneratorWitnessMIR(..) => bug!(\"type_name: unexpected `GeneratorWitnessMIR`\"),"}, {"sha": "8afa0a46d32ffb909e64bf1200d93e43d5155f3b", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1458,7 +1458,19 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         item_segment: &hir::PathSegment<'_>,\n     ) -> Ty<'tcx> {\n         let substs = self.ast_path_substs_for_ty(span, did, item_segment);\n-        self.tcx().at(span).type_of(did).subst(self.tcx(), substs)\n+        let ty = self.tcx().at(span).type_of(did);\n+\n+        if matches!(self.tcx().def_kind(did), DefKind::TyAlias)\n+            && ty.skip_binder().has_opaque_types()\n+        {\n+            // Type aliases referring to types that contain opaque types (but aren't just directly\n+            // referencing a single opaque type) get encoded as a type alias that normalization will\n+            // then actually instantiate the where bounds of.\n+            let alias_ty = self.tcx().mk_alias_ty(did, substs);\n+            self.tcx().mk_alias(ty::Weak, alias_ty)\n+        } else {\n+            ty.subst(self.tcx(), substs)\n+        }\n     }\n \n     fn conv_object_ty_poly_trait_ref("}, {"sha": "f93f395caed68e57fbd530452173dc33d7cea90a", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -217,10 +217,10 @@ fn check_item<'tcx>(tcx: TyCtxt<'tcx>, item: &'tcx hir::Item<'tcx>) {\n             check_item_fn(tcx, def_id, item.ident, item.span, sig.decl);\n         }\n         hir::ItemKind::Static(ty, ..) => {\n-            check_item_type(tcx, def_id, ty.span, false);\n+            check_item_type(tcx, def_id, ty.span, UnsizedHandling::Forbid);\n         }\n         hir::ItemKind::Const(ty, ..) => {\n-            check_item_type(tcx, def_id, ty.span, false);\n+            check_item_type(tcx, def_id, ty.span, UnsizedHandling::Forbid);\n         }\n         hir::ItemKind::Struct(_, ast_generics) => {\n             check_type_defn(tcx, item, false);\n@@ -242,6 +242,12 @@ fn check_item<'tcx>(tcx: TyCtxt<'tcx>, item: &'tcx hir::Item<'tcx>) {\n         }\n         // `ForeignItem`s are handled separately.\n         hir::ItemKind::ForeignMod { .. } => {}\n+        hir::ItemKind::TyAlias(hir_ty, ..) => {\n+            if tcx.type_of(item.owner_id.def_id).skip_binder().has_opaque_types() {\n+                // Bounds are respected for `type X = impl Trait` and `type X = (impl Trait, Y);`\n+                check_item_type(tcx, def_id, hir_ty.span, UnsizedHandling::Allow);\n+            }\n+        }\n         _ => {}\n     }\n }\n@@ -258,7 +264,9 @@ fn check_foreign_item(tcx: TyCtxt<'_>, item: &hir::ForeignItem<'_>) {\n         hir::ForeignItemKind::Fn(decl, ..) => {\n             check_item_fn(tcx, def_id, item.ident, item.span, decl)\n         }\n-        hir::ForeignItemKind::Static(ty, ..) => check_item_type(tcx, def_id, ty.span, true),\n+        hir::ForeignItemKind::Static(ty, ..) => {\n+            check_item_type(tcx, def_id, ty.span, UnsizedHandling::AllowIfForeignTail)\n+        }\n         hir::ForeignItemKind::Type => (),\n     }\n }\n@@ -1100,20 +1108,32 @@ fn check_item_fn(\n     })\n }\n \n-fn check_item_type(tcx: TyCtxt<'_>, item_id: LocalDefId, ty_span: Span, allow_foreign_ty: bool) {\n+enum UnsizedHandling {\n+    Forbid,\n+    Allow,\n+    AllowIfForeignTail,\n+}\n+\n+fn check_item_type(\n+    tcx: TyCtxt<'_>,\n+    item_id: LocalDefId,\n+    ty_span: Span,\n+    unsized_handling: UnsizedHandling,\n+) {\n     debug!(\"check_item_type: {:?}\", item_id);\n \n     enter_wf_checking_ctxt(tcx, ty_span, item_id, |wfcx| {\n         let ty = tcx.type_of(item_id).subst_identity();\n         let item_ty = wfcx.normalize(ty_span, Some(WellFormedLoc::Ty(item_id)), ty);\n \n-        let mut forbid_unsized = true;\n-        if allow_foreign_ty {\n-            let tail = tcx.struct_tail_erasing_lifetimes(item_ty, wfcx.param_env);\n-            if let ty::Foreign(_) = tail.kind() {\n-                forbid_unsized = false;\n+        let forbid_unsized = match unsized_handling {\n+            UnsizedHandling::Forbid => true,\n+            UnsizedHandling::Allow => false,\n+            UnsizedHandling::AllowIfForeignTail => {\n+                let tail = tcx.struct_tail_erasing_lifetimes(item_ty, wfcx.param_env);\n+                !matches!(tail.kind(), ty::Foreign(_))\n             }\n-        }\n+        };\n \n         wfcx.register_wf_obligation(ty_span, Some(WellFormedLoc::Ty(item_id)), item_ty.into());\n         if forbid_unsized {"}, {"sha": "eb299a1ea7999c1860f48d75b4141853bac6c8e7", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -208,6 +208,9 @@ fn do_orphan_check_impl<'tcx>(\n                     // }\n                     // impl<T: ?Sized> AutoTrait for <T as Id>::This {}\n                     AliasKind::Projection => \"associated type\",\n+                    // type Foo = (impl Sized, bool)\n+                    // impl AutoTrait for Foo {}\n+                    AliasKind::Weak => \"type alias\",\n                     // type Opaque = impl Trait;\n                     // impl AutoTrait for Opaque {}\n                     AliasKind::Opaque => \"opaque type\","}, {"sha": "90e8e523ea3e8b3f53faabaa4d94607dbe141c36", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -122,6 +122,7 @@ pub(super) fn explicit_item_bounds(\n             };\n             opaque_type_bounds(tcx, def_id, bounds, item_ty, *span)\n         }\n+        hir::Node::Item(hir::Item { kind: hir::ItemKind::TyAlias(..), .. }) => &[],\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n     };\n     ty::EarlyBinder::bind(bounds)"}, {"sha": "a653a652231386f572e391c119b046a764cce275", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -128,7 +128,9 @@ fn diagnostic_hir_wf_check<'tcx>(\n                 ref item => bug!(\"Unexpected TraitItem {:?}\", item),\n             },\n             hir::Node::Item(item) => match item.kind {\n-                hir::ItemKind::Static(ty, _, _) | hir::ItemKind::Const(ty, _) => vec![ty],\n+                hir::ItemKind::TyAlias(ty, _)\n+                | hir::ItemKind::Static(ty, _, _)\n+                | hir::ItemKind::Const(ty, _) => vec![ty],\n                 hir::ItemKind::Impl(impl_) => match &impl_.of_trait {\n                     Some(t) => t\n                         .path"}, {"sha": "fc1f90fdc13f4267e87f8aa351f2b1e9dc267549", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -2375,6 +2375,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 ty::AliasKind::Projection | ty::AliasKind::Inherent => {\n                     format!(\"the associated type `{}`\", p)\n                 }\n+                ty::AliasKind::Weak => format!(\"the type alias `{}`\", p),\n                 ty::AliasKind::Opaque => format!(\"the opaque type `{}`\", p),\n             },\n         };"}, {"sha": "f02f3668dc1fbc4e8d721d6e1923651f8eef4d07", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1465,8 +1465,8 @@ impl<'tcx> LateLintPass<'tcx> for TypeAliasBounds {\n         let hir::ItemKind::TyAlias(ty, type_alias_generics) = &item.kind else {\n             return\n         };\n-        if let hir::TyKind::OpaqueDef(..) = ty.kind {\n-            // Bounds are respected for `type X = impl Trait`\n+        if cx.tcx.type_of(item.owner_id.def_id).skip_binder().has_opaque_types() {\n+            // Bounds are respected for `type X = impl Trait` and `type X = (impl Trait, Y);`\n             return;\n         }\n         if cx.tcx.type_of(item.owner_id).skip_binder().has_inherent_projections() {"}, {"sha": "9a2d45ccd663e96da528884fff1c0274b2465278", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1255,7 +1255,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             }\n \n             ty::Param(..)\n-            | ty::Alias(ty::Projection | ty::Inherent, ..)\n+            | ty::Alias(ty::Projection | ty::Inherent | ty::Weak, ..)\n             | ty::Infer(..)\n             | ty::Bound(..)\n             | ty::Error(_)"}, {"sha": "132b11b29eb32ca336503c8d0edccaa0f1738885", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1903,6 +1903,16 @@ rustc_queries! {\n         desc { \"normalizing `{}`\", goal.value.value }\n     }\n \n+    /// Do not call this query directly: invoke `normalize` instead.\n+    query normalize_weak_ty(\n+        goal: CanonicalProjectionGoal<'tcx>\n+    ) -> Result<\n+        &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, NormalizationResult<'tcx>>>,\n+        NoSolution,\n+    > {\n+        desc { \"normalizing `{}`\", goal.value.value }\n+    }\n+\n     /// Do not call this query directly: invoke `normalize` instead.\n     query normalize_inherent_projection_ty(\n         goal: CanonicalProjectionGoal<'tcx>"}, {"sha": "b63e049a520cb413208f2a032178565ab35d109e", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -448,6 +448,9 @@ pub enum ObligationCauseCode<'tcx> {\n \n     /// Requirement for a `const N: Ty` to implement `Ty: ConstParamTy`\n     ConstParam(Ty<'tcx>),\n+\n+    /// Obligations emitted during the normalization of a weak type alias.\n+    TypeAlias(InternedObligationCauseCode<'tcx>, Span, DefId),\n }\n \n /// The 'location' at which we try to perform HIR-based wf checking."}, {"sha": "449129b84188be05e1b1a44313f0e0f59f9b3a6c", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -2012,6 +2012,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             (ty::Opaque, DefKind::OpaqueTy)\n                 | (ty::Projection | ty::Inherent, DefKind::AssocTy)\n                 | (ty::Opaque | ty::Projection, DefKind::ImplTraitPlaceholder)\n+                | (ty::Weak, DefKind::TyAlias)\n         );\n         self.mk_ty_from_kind(Alias(kind, alias_ty))\n     }"}, {"sha": "c794c3faded112094774864b08bb4108d39bc1a4", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -300,6 +300,7 @@ impl<'tcx> Ty<'tcx> {\n             ty::Placeholder(..) => \"higher-ranked type\".into(),\n             ty::Bound(..) => \"bound type variable\".into(),\n             ty::Alias(ty::Projection | ty::Inherent, _) => \"associated type\".into(),\n+            ty::Alias(ty::Weak, _) => \"type alias\".into(),\n             ty::Param(_) => \"type parameter\".into(),\n             ty::Alias(ty::Opaque, ..) => \"opaque type\".into(),\n         }"}, {"sha": "9cce9d64d5d205775eea60bc3c6a33ce8a591111", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -178,7 +178,7 @@ impl FlagComputation {\n \n             &ty::Alias(kind, data) => {\n                 self.add_flags(match kind {\n-                    ty::Projection => TypeFlags::HAS_TY_PROJECTION,\n+                    ty::Weak | ty::Projection => TypeFlags::HAS_TY_PROJECTION,\n                     ty::Inherent => TypeFlags::HAS_TY_INHERENT,\n                     ty::Opaque => TypeFlags::HAS_TY_OPAQUE,\n                 });"}, {"sha": "f36b8ad8df6c7208b43627f7f3ea40cb84516691", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -731,7 +731,7 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Foreign(def_id) => {\n                 p!(print_def_path(def_id, &[]));\n             }\n-            ty::Alias(ty::Projection | ty::Inherent, ref data) => {\n+            ty::Alias(ty::Projection | ty::Inherent | ty::Weak, ref data) => {\n                 if !(self.should_print_verbose() || NO_QUERIES.with(|q| q.get()))\n                     && self.tcx().is_impl_trait_in_trait(data.def_id)\n                 {"}, {"sha": "74a3bddf2fae722a82d46f4f2296b908bfea1455", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -391,13 +391,13 @@ impl<'tcx> Relate<'tcx> for Ty<'tcx> {\n /// Relates `a` and `b` structurally, calling the relation for all nested values.\n /// Any semantic equality, e.g. of projections, and inference variables have to be\n /// handled by the caller.\n+#[instrument(level = \"trace\", skip(relation), ret)]\n pub fn structurally_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n     a: Ty<'tcx>,\n     b: Ty<'tcx>,\n ) -> RelateResult<'tcx, Ty<'tcx>> {\n     let tcx = relation.tcx();\n-    debug!(\"structurally_relate_tys: a={:?} b={:?}\", a, b);\n     match (a.kind(), b.kind()) {\n         (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {\n             // The caller should handle these cases!"}, {"sha": "5f2f241bc0dc08230ee0f9c0c4f1011344ed0a86", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1231,6 +1231,7 @@ impl<'tcx> AliasTy<'tcx> {\n             DefKind::AssocTy if let DefKind::Impl { of_trait: false } = tcx.def_kind(tcx.parent(self.def_id)) => ty::Inherent,\n             DefKind::AssocTy | DefKind::ImplTraitPlaceholder => ty::Projection,\n             DefKind::OpaqueTy => ty::Opaque,\n+            DefKind::TyAlias => ty::Weak,\n             kind => bug!(\"unexpected DefKind in AliasTy: {kind:?}\"),\n         }\n     }"}, {"sha": "5ef11acadceddd96db8a5fd7b6c236f0f10cceb6", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -242,6 +242,9 @@ where\n                     }\n                 }\n             }\n+            ty::Alias(ty::Weak, alias) => {\n+                self.def_id_visitor.visit_def_id(alias.def_id, \"type alias\", &ty);\n+            }\n             ty::Alias(ty::Projection, proj) => {\n                 if self.def_id_visitor.skip_assoc_tys() {\n                     // Visitors searching for minimal visibility/reachability want to"}, {"sha": "5dc00e3178636692e57a3a09a41721f3573bb09d", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -483,6 +483,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             }\n \n             ty::Alias(ty::Inherent, _) => bug!(\"symbol_names: unexpected inherent projection\"),\n+            ty::Alias(ty::Weak, _) => bug!(\"symbol_names: unexpected weak projection\"),\n             ty::GeneratorWitness(_) => bug!(\"symbol_names: unexpected `GeneratorWitness`\"),\n             ty::GeneratorWitnessMIR(..) => bug!(\"symbol_names: unexpected `GeneratorWitnessMIR`\"),\n         }"}, {"sha": "7ada389edbe68aecb8d969fdc695144f5ba83c0e", "filename": "compiler/rustc_trait_selection/src/solve/assembly/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -508,10 +508,11 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             | ty::Placeholder(..)\n             | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n             | ty::Alias(ty::Inherent, _)\n+            | ty::Alias(ty::Weak, _)\n             | ty::Error(_) => return,\n             ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_))\n             | ty::Bound(..) => bug!(\"unexpected self type for `{goal:?}`\"),\n-            // Excluding IATs here as they don't have meaningful item bounds.\n+            // Excluding IATs and type aliases here as they don't have meaningful item bounds.\n             ty::Alias(ty::Projection | ty::Opaque, alias_ty) => alias_ty,\n         };\n "}, {"sha": "97b86a06c8cade5651ba48f551d38520b5a03c0b", "filename": "compiler/rustc_trait_selection/src/solve/assembly/structural_traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -33,7 +33,7 @@ pub(in crate::solve) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n         ty::Dynamic(..)\n         | ty::Param(..)\n         | ty::Foreign(..)\n-        | ty::Alias(ty::Projection | ty::Inherent, ..)\n+        | ty::Alias(ty::Projection | ty::Inherent | ty::Weak, ..)\n         | ty::Placeholder(..)\n         | ty::Bound(..)\n         | ty::Infer(_) => {"}, {"sha": "a30a14df80b0fc86e1b8f372b2a560936da397d5", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -29,6 +29,7 @@ mod opaques;\n mod project_goals;\n mod search_graph;\n mod trait_goals;\n+mod weak_types;\n \n pub use eval_ctxt::{EvalCtxt, InferCtxtEvalExt};\n pub use fulfill::FulfillmentCtxt;"}, {"sha": "17f3404268d7ad4d32fee7674035eb8f77b7bb48", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -57,6 +57,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             }\n             DefKind::AnonConst => self.normalize_anon_const(goal),\n             DefKind::OpaqueTy => self.normalize_opaque_type(goal),\n+            DefKind::TyAlias => self.normalize_weak_type(goal),\n             kind => bug!(\"unknown DefKind {} in projection goal: {goal:#?}\", kind.descr(def_id)),\n         }\n     }"}, {"sha": "a212cc9453aa95b95202a8850a78fb05f19bf688", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -618,7 +618,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             ty::Dynamic(..)\n             | ty::Param(..)\n             | ty::Foreign(..)\n-            | ty::Alias(ty::Projection | ty::Inherent, ..)\n+            | ty::Alias(ty::Projection | ty::Weak | ty::Inherent, ..)\n             | ty::Placeholder(..) => Some(Err(NoSolution)),\n \n             ty::Infer(_) | ty::Bound(_, _) => bug!(\"unexpected type `{self_ty}`\"),"}, {"sha": "b095b54c554f15d21fad0f2cbb1a02f6c30c948c", "filename": "compiler/rustc_trait_selection/src/solve/weak_types.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fweak_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fweak_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fweak_types.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -0,0 +1,19 @@\n+use rustc_middle::traits::solve::{Certainty, Goal, QueryResult};\n+use rustc_middle::ty;\n+\n+use super::EvalCtxt;\n+\n+impl<'tcx> EvalCtxt<'_, 'tcx> {\n+    pub(super) fn normalize_weak_type(\n+        &mut self,\n+        goal: Goal<'tcx, ty::ProjectionPredicate<'tcx>>,\n+    ) -> QueryResult<'tcx> {\n+        let tcx = self.tcx();\n+        let weak_ty = goal.predicate.projection_ty;\n+        let expected = goal.predicate.term.ty().expect(\"no such thing as a const alias\");\n+\n+        let actual = tcx.type_of(weak_ty.def_id).subst(tcx, weak_ty.substs);\n+        self.eq(goal.param_env, expected, actual)?;\n+        self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n+    }\n+}"}, {"sha": "0065c7fc253b39019d91a664224dd2579d31906d", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -695,7 +695,9 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for OrphanChecker<'tcx> {\n             | ty::RawPtr(..)\n             | ty::Never\n             | ty::Tuple(..)\n-            | ty::Alias(ty::Projection | ty::Inherent, ..) => self.found_non_local_ty(ty),\n+            | ty::Alias(ty::Projection | ty::Inherent | ty::Weak, ..) => {\n+                self.found_non_local_ty(ty)\n+            }\n \n             ty::Param(..) => self.found_param_ty(ty),\n "}, {"sha": "ffbe2888bf8489934918955cce4397deac1d899a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1824,12 +1824,13 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 ty::Alias(ty::Projection, ..) => Some(12),\n                 ty::Alias(ty::Inherent, ..) => Some(13),\n                 ty::Alias(ty::Opaque, ..) => Some(14),\n-                ty::Never => Some(15),\n-                ty::Adt(..) => Some(16),\n-                ty::Generator(..) => Some(17),\n-                ty::Foreign(..) => Some(18),\n-                ty::GeneratorWitness(..) => Some(19),\n-                ty::GeneratorWitnessMIR(..) => Some(20),\n+                ty::Alias(ty::Weak, ..) => Some(15),\n+                ty::Never => Some(16),\n+                ty::Adt(..) => Some(17),\n+                ty::Generator(..) => Some(18),\n+                ty::Foreign(..) => Some(19),\n+                ty::GeneratorWitness(..) => Some(20),\n+                ty::GeneratorWitnessMIR(..) => Some(21),\n                 ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error(_) => None,\n             }\n         }"}, {"sha": "fcf813e3a393a7c27b2716a5cb729352287307b7", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -3198,6 +3198,29 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     )\n                 });\n             }\n+            ObligationCauseCode::TypeAlias(ref nested, span, def_id) => {\n+                // #74711: avoid a stack overflow\n+                ensure_sufficient_stack(|| {\n+                    self.note_obligation_cause_code(\n+                        body_id,\n+                        err,\n+                        predicate,\n+                        param_env,\n+                        nested,\n+                        obligated_types,\n+                        seen_requirements,\n+                    )\n+                });\n+                let mut multispan = MultiSpan::from(span);\n+                multispan.push_span_label(span, \"required by this bound\");\n+                err.span_note(\n+                    multispan,\n+                    format!(\n+                        \"required by a bound on the type alias `{}`\",\n+                        self.infcx.tcx.item_name(def_id)\n+                    ),\n+                );\n+            }\n             ObligationCauseCode::FunctionArgumentObligation {\n                 arg_hir_id,\n                 call_hir_id,"}, {"sha": "ff55eaf13ad5c5f4532008c5cbd55508e99f15d1", "filename": "compiler/rustc_trait_selection/src/traits/outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -9,7 +9,7 @@ use rustc_span::def_id::LocalDefId;\n \n pub use rustc_middle::traits::query::OutlivesBound;\n \n-type Bounds<'a, 'tcx: 'a> = impl Iterator<Item = OutlivesBound<'tcx>> + 'a;\n+pub type Bounds<'a, 'tcx: 'a> = impl Iterator<Item = OutlivesBound<'tcx>> + 'a;\n pub trait InferCtxtExt<'a, 'tcx> {\n     fn implied_outlives_bounds(\n         &self,"}, {"sha": "8466b3fc95455aee5845066b36fd941167476cfb", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -31,6 +31,7 @@ use rustc_infer::infer::at::At;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_infer::infer::DefineOpaqueTypes;\n use rustc_infer::traits::ImplSourceBuiltinData;\n+use rustc_infer::traits::ObligationCauseCode;\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::visit::{MaxUniverse, TypeVisitable, TypeVisitableExt};\n@@ -621,6 +622,30 @@ impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx\n                 );\n                 normalized_ty\n             }\n+            ty::Weak => {\n+                let infcx = self.selcx.infcx;\n+                self.obligations.extend(\n+                    infcx\n+                        .tcx\n+                        .predicates_of(data.def_id)\n+                        .instantiate_own(infcx.tcx, data.substs)\n+                        .map(|(mut predicate, span)| {\n+                            if data.has_escaping_bound_vars() {\n+                                (predicate, ..) = BoundVarReplacer::replace_bound_vars(\n+                                    infcx,\n+                                    &mut self.universes,\n+                                    predicate,\n+                                );\n+                            }\n+                            let mut cause = self.cause.clone();\n+                            cause.map_code(|code| {\n+                                ObligationCauseCode::TypeAlias(code, span, data.def_id)\n+                            });\n+                            Obligation::new(infcx.tcx, cause, self.param_env, predicate)\n+                        }),\n+                );\n+                infcx.tcx.type_of(data.def_id).subst(infcx.tcx, data.substs).fold_with(self)\n+            }\n \n             ty::Inherent if !data.has_escaping_bound_vars() => {\n                 // This branch is *mostly* just an optimization: when we don't\n@@ -1545,7 +1570,7 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n     // Check whether the self-type is itself a projection.\n     // If so, extract what we know from the trait and try to come up with a good answer.\n     let bounds = match *obligation.predicate.self_ty().kind() {\n-        // Excluding IATs here as they don't have meaningful item bounds.\n+        // Excluding IATs and type aliases here as they don't have meaningful item bounds.\n         ty::Alias(ty::Projection | ty::Opaque, ref data) => {\n             tcx.item_bounds(data.def_id).subst(tcx, data.substs)\n         }"}, {"sha": "2d97a80822581113c984a5f5dd2753ea9cc28aa3", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -257,7 +257,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for QueryNormalizer<'cx, 'tcx>\n \n             ty::Opaque => ty.try_super_fold_with(self)?,\n \n-            ty::Projection | ty::Inherent => {\n+            ty::Projection | ty::Inherent | ty::Weak => {\n                 // See note in `rustc_trait_selection::traits::project`\n \n                 let infcx = self.infcx;\n@@ -282,6 +282,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for QueryNormalizer<'cx, 'tcx>\n                 debug!(\"QueryNormalizer: orig_values = {:#?}\", orig_values);\n                 let result = match kind {\n                     ty::Projection => tcx.normalize_projection_ty(c_data),\n+                    ty::Weak => tcx.normalize_weak_ty(c_data),\n                     ty::Inherent => tcx.normalize_inherent_projection_ty(c_data),\n                     _ => unreachable!(),\n                 }?;"}, {"sha": "f2dfa6921f41c1876b736939f0936b12b5378082", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -143,7 +143,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Before we go into the whole placeholder thing, just\n         // quickly check if the self-type is a projection at all.\n         match obligation.predicate.skip_binder().trait_ref.self_ty().kind() {\n-            // Excluding IATs here as they don't have meaningful item bounds.\n+            // Excluding IATs and type aliases here as they don't have meaningful item bounds.\n             ty::Alias(ty::Projection | ty::Opaque, _) => {}\n             ty::Infer(ty::TyVar(_)) => {\n                 span_bug!("}, {"sha": "d2c2cadd617b4731e4a13caaf95a36f48a233c93", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -163,7 +163,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let placeholder_self_ty = placeholder_trait_predicate.self_ty();\n         let placeholder_trait_predicate = ty::Binder::dummy(placeholder_trait_predicate);\n         let (def_id, substs) = match *placeholder_self_ty.kind() {\n-            // Excluding IATs here as they don't have meaningful item bounds.\n+            // Excluding IATs and type aliases here as they don't have meaningful item bounds.\n             ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                 (def_id, substs)\n             }"}, {"sha": "e72d3ca97d7c9758326ad2c4e3c7512a373601f7", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -2314,7 +2314,7 @@ impl<'tcx> SelectionContext<'_, 'tcx> {\n             | ty::Dynamic(..)\n             | ty::Param(..)\n             | ty::Foreign(..)\n-            | ty::Alias(ty::Projection | ty::Inherent, ..)\n+            | ty::Alias(ty::Projection | ty::Inherent | ty::Weak, ..)\n             | ty::Bound(..)\n             | ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"asked to assemble constituent types of unexpected type: {:?}\", t);"}, {"sha": "92d899b0f1382f9168764d4a94e3480251c39bbd", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -731,6 +731,11 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     }\n                 }\n \n+                ty::Alias(ty::Weak, ty::AliasTy { def_id, substs, .. }) => {\n+                    let obligations = self.nominal_obligations(def_id, substs);\n+                    self.out.extend(obligations);\n+                }\n+\n                 ty::Dynamic(data, r, _) => {\n                     // WfObject\n                     //"}, {"sha": "f9a7c8c386ae9620ee8bc9a99a7c782400276b59", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -372,6 +372,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                     substitution: substs.lower_into(interner),\n                 }))\n             }\n+            ty::Alias(ty::Weak, ty::AliasTy { .. }) => unimplemented!(),\n             ty::Alias(ty::Inherent, _) => unimplemented!(),\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                 chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Opaque(chalk_ir::OpaqueTy {"}, {"sha": "83828f177bc841bf3a1229eaab62e74c7a607e8b", "filename": "compiler/rustc_traits/src/normalize_projection_ty.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_traits%2Fsrc%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_traits%2Fsrc%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_projection_ty.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -10,7 +10,12 @@ use rustc_trait_selection::traits::{self, ObligationCause, SelectionContext};\n use std::sync::atomic::Ordering;\n \n pub(crate) fn provide(p: &mut Providers) {\n-    *p = Providers { normalize_projection_ty, normalize_inherent_projection_ty, ..*p };\n+    *p = Providers {\n+        normalize_projection_ty,\n+        normalize_weak_ty,\n+        normalize_inherent_projection_ty,\n+        ..*p\n+    };\n }\n \n fn normalize_projection_ty<'tcx>(\n@@ -43,6 +48,33 @@ fn normalize_projection_ty<'tcx>(\n     )\n }\n \n+fn normalize_weak_ty<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    goal: CanonicalProjectionGoal<'tcx>,\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, NormalizationResult<'tcx>>>, NoSolution> {\n+    debug!(\"normalize_provider(goal={:#?})\", goal);\n+\n+    tcx.sess.perf_stats.normalize_projection_ty.fetch_add(1, Ordering::Relaxed);\n+    tcx.infer_ctxt().enter_canonical_trait_query(\n+        &goal,\n+        |ocx, ParamEnvAnd { param_env, value: goal }| {\n+            let obligations = tcx.predicates_of(goal.def_id).instantiate_own(tcx, goal.substs).map(\n+                |(predicate, span)| {\n+                    traits::Obligation::new(\n+                        tcx,\n+                        ObligationCause::dummy_with_span(span),\n+                        param_env,\n+                        predicate,\n+                    )\n+                },\n+            );\n+            ocx.register_obligations(obligations);\n+            let normalized_ty = tcx.type_of(goal.def_id).subst(tcx, goal.substs);\n+            Ok(NormalizationResult { normalized_ty })\n+        },\n+    )\n+}\n+\n fn normalize_inherent_projection_ty<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     goal: CanonicalProjectionGoal<'tcx>,"}, {"sha": "f621673f1d6f17679f9f4bea29d5538cf3a8af24", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -36,9 +36,17 @@ pub enum DynKind {\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n #[derive(Encodable, Decodable, HashStable_Generic)]\n pub enum AliasKind {\n+    /// A projection `<Type as Trait>::AssocType`.\n+    /// Can get normalized away if monomorphic enough.\n     Projection,\n     Inherent,\n+    /// An opaque type (usually from `impl Trait` in type aliases or function return types)\n+    /// Can only be normalized away in RevealAll mode\n     Opaque,\n+    /// A type alias that actually checks its trait bounds.\n+    /// Currently only used if the type alias references opaque types.\n+    /// Can always be normalized away.\n+    Weak,\n }\n \n /// Defines the kinds of types used by the type system."}, {"sha": "9f698a3b6bf9d5f6d8542c061f1c56398d809e44", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -2052,6 +2052,11 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             }))\n         }\n \n+        ty::Alias(ty::Weak, data) => {\n+            let ty = cx.tcx.type_of(data.def_id).subst(cx.tcx, data.substs);\n+            clean_middle_ty(bound_ty.rebind(ty), cx, None, None)\n+        }\n+\n         ty::Param(ref p) => {\n             if let Some(bounds) = cx.impl_trait_bounds.remove(&p.index.into()) {\n                 ImplTrait(bounds)"}, {"sha": "dbaf6aaa853c54904449c1d1ed9ebe6c226013fd", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1424,6 +1424,7 @@ fn ty_auto_deref_stability<'tcx>(\n                 continue;\n             },\n             ty::Param(_) => TyPosition::new_deref_stable_for_result(precedence, ty),\n+            ty::Alias(ty::Weak, _) => unreachable!(\"should have been normalized away above\"),\n             ty::Alias(ty::Inherent, _) => unreachable!(\"inherent projection should have been normalized away above\"),\n             ty::Alias(ty::Projection, _) if ty.has_non_region_param() => {\n                 TyPosition::new_deref_stable_for_result(precedence, ty)"}, {"sha": "204019130ede31d9a082dd01b0bcc7c76e09b8fd", "filename": "src/tools/clippy/tests/ui/from_over_into.fixed", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_over_into.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_over_into.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_over_into.fixed?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -82,10 +82,4 @@ fn msrv_1_41() {\n     }\n }\n \n-type Opaque = impl Sized;\n-struct IntoOpaque;\n-impl Into<Opaque> for IntoOpaque {\n-    fn into(self) -> Opaque {}\n-}\n-\n fn main() {}"}, {"sha": "46e02847e30840acd13d7c15edcca5b9bf8fcaf6", "filename": "src/tools/clippy/tests/ui/from_over_into.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_over_into.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -82,10 +82,4 @@ fn msrv_1_41() {\n     }\n }\n \n-type Opaque = impl Sized;\n-struct IntoOpaque;\n-impl Into<Opaque> for IntoOpaque {\n-    fn into(self) -> Opaque {}\n-}\n-\n fn main() {}"}, {"sha": "bd62c655216e85cfcc2a2f39fe58088871522b8e", "filename": "src/tools/clippy/tests/ui/from_over_into_unfixable.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_over_into_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_over_into_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_over_into_unfixable.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -32,4 +32,10 @@ impl Into<u8> for ContainsVal {\n     }\n }\n \n+type Opaque = impl Sized;\n+struct IntoOpaque;\n+impl Into<Opaque> for IntoOpaque {\n+    fn into(self) -> Opaque {}\n+}\n+\n fn main() {}"}, {"sha": "bb966af4b0ffd019f27311bcb492c2457846bd59", "filename": "src/tools/clippy/tests/ui/from_over_into_unfixable.stderr", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_over_into_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_over_into_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_over_into_unfixable.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1,29 +1,12 @@\n-error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into_unfixable.rs:11:1\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/from_over_into_unfixable.rs:35:15\n    |\n-LL | impl Into<InMacro> for String {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type Opaque = impl Sized;\n+   |               ^^^^^^^^^^\n    |\n-   = help: replace the `Into` implementation with `From<std::string::String>`\n-   = note: `-D clippy::from-over-into` implied by `-D warnings`\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n-error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into_unfixable.rs:19:1\n-   |\n-LL | impl Into<WeirdUpperSelf> for &'static [u8] {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: replace the `Into` implementation with `From<&'static [u8]>`\n-\n-error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n-  --> $DIR/from_over_into_unfixable.rs:28:1\n-   |\n-LL | impl Into<u8> for ContainsVal {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n-           https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n-   = help: replace the `Into` implementation with `From<ContainsVal>`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "4eff62b85ff68977bd524dd93d0b05dc42512de9", "filename": "src/tools/clippy/tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_ret_no_self.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -401,25 +401,3 @@ mod issue7344 {\n         }\n     }\n }\n-\n-mod issue10041 {\n-    struct Bomb;\n-\n-    impl Bomb {\n-        // Hidden <Rhs = Self> default generic parameter.\n-        pub fn new() -> impl PartialOrd {\n-            0i32\n-        }\n-    }\n-\n-    // TAIT with self-referencing bounds\n-    type X = impl std::ops::Add<Output = X>;\n-\n-    struct Bomb2;\n-\n-    impl Bomb2 {\n-        pub fn new() -> X {\n-            0i32\n-        }\n-    }\n-}"}, {"sha": "2b053b462b1641e818f9e282fe54c8d7996cab5b", "filename": "src/tools/clippy/tests/ui/new_ret_no_self.stderr", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_ret_no_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_ret_no_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_ret_no_self.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -92,21 +92,5 @@ LL | |             unimplemented!()\n LL | |         }\n    | |_________^\n \n-error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:410:9\n-   |\n-LL | /         pub fn new() -> impl PartialOrd {\n-LL | |             0i32\n-LL | |         }\n-   | |_________^\n-\n-error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:421:9\n-   |\n-LL | /         pub fn new() -> X {\n-LL | |             0i32\n-LL | |         }\n-   | |_________^\n-\n-error: aborting due to 14 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "7bc6fec10ba64f7f33a947a22861bbc1ba80d8bc", "filename": "src/tools/clippy/tests/ui/new_ret_no_self_overflow.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_ret_no_self_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_ret_no_self_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_ret_no_self_overflow.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -0,0 +1,26 @@\n+#![feature(type_alias_impl_trait)]\n+#![warn(clippy::new_ret_no_self)]\n+\n+mod issue10041 {\n+    struct Bomb;\n+\n+    impl Bomb {\n+        // Hidden <Rhs = Self> default generic parameter.\n+        pub fn new() -> impl PartialOrd {\n+            0i32\n+        }\n+    }\n+\n+    // TAIT with self-referencing bounds\n+    type X = impl std::ops::Add<Output = X>;\n+\n+    struct Bomb2;\n+\n+    impl Bomb2 {\n+        pub fn new() -> X {\n+            0i32\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "babb634fdcd1a96562acd97ecb51edb48da4ce72", "filename": "src/tools/clippy/tests/ui/new_ret_no_self_overflow.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_ret_no_self_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_ret_no_self_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fnew_ret_no_self_overflow.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -0,0 +1,9 @@\n+error[E0275]: overflow evaluating the requirement `<i32 as std::ops::Add>::Output == issue10041::X`\n+  --> $DIR/new_ret_no_self_overflow.rs:20:25\n+   |\n+LL |         pub fn new() -> X {\n+   |                         ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "4383e8ab3a0cd8efb8c5ead2388f078fb601c748", "filename": "tests/ui/impl-trait/nested-return-type2-tait.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -8,10 +8,6 @@ LL | fn foo() -> impl Trait<Assoc = Sendable> {\n    |                        ^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(opaque_hidden_inferred_bound)]` on by default\n-help: add this bound\n-   |\n-LL | type Sendable = impl Send + Duh;\n-   |                           +++++\n \n warning: 1 warning emitted\n "}, {"sha": "d32944a0d72148082607088c3bae3728caadfaf7", "filename": "tests/ui/impl-trait/nested-return-type3-tait.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Fimpl-trait%2Fnested-return-type3-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Fimpl-trait%2Fnested-return-type3-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type3-tait.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -8,10 +8,6 @@ LL | fn foo() -> impl Trait<Assoc = Sendable> {\n    |                        ^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(opaque_hidden_inferred_bound)]` on by default\n-help: add this bound\n-   |\n-LL | type Sendable = impl Send + Duh;\n-   |                           +++++\n \n warning: 1 warning emitted\n "}, {"sha": "a2eddd116653c081270984e2ec54d27e68b258e7", "filename": "tests/ui/impl-trait/nested-return-type3-tait2.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Fimpl-trait%2Fnested-return-type3-tait2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Fimpl-trait%2Fnested-return-type3-tait2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type3-tait2.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -8,10 +8,6 @@ LL | type Traitable = impl Trait<Assoc = Sendable>;\n    |                             ^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(opaque_hidden_inferred_bound)]` on by default\n-help: add this bound\n-   |\n-LL | type Sendable = impl Send + Duh;\n-   |                           +++++\n \n warning: 1 warning emitted\n "}, {"sha": "01c933473ea7190fcd6f8c14ff561bd86e7af24a", "filename": "tests/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1,5 +1,7 @@\n #![feature(type_alias_impl_trait)]\n \n+// check-pass\n+\n type Foo = impl PartialEq<(Foo, i32)>;\n \n struct Bar;\n@@ -11,7 +13,6 @@ impl PartialEq<(Foo, i32)> for Bar {\n }\n \n fn foo() -> Foo {\n-    //~^ ERROR can't compare `Bar` with `(Bar, i32)`\n     Bar\n }\n "}, {"sha": "7b63a3d0b9f104fbbe52c964cd4eef44293594ca", "filename": "tests/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4fdd07fe88c8965daea60c5109913095e3042c9c/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fdd07fe88c8965daea60c5109913095e3042c9c/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr?ref=4fdd07fe88c8965daea60c5109913095e3042c9c", "patch": "@@ -1,15 +0,0 @@\n-error[E0277]: can't compare `Bar` with `(Bar, i32)`\n-  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs:13:13\n-   |\n-LL | fn foo() -> Foo {\n-   |             ^^^ no implementation for `Bar == (Bar, i32)`\n-LL |\n-LL |     Bar\n-   |     --- return type was inferred to be `Bar` here\n-   |\n-   = help: the trait `PartialEq<(Bar, i32)>` is not implemented for `Bar`\n-   = help: the trait `PartialEq<(Foo, i32)>` is implemented for `Bar`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "bbd60d4398b746c0568b74d3b95fba7b448c3945", "filename": "tests/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -20,6 +20,11 @@ LL |         fn eq(&self, _other: &(Foo, i32)) -> bool {\n    |\n    = note: expected signature `fn(&a::Bar, &(a::Bar, i32)) -> _`\n               found signature `fn(&a::Bar, &(a::Foo, i32)) -> _`\n+note: this item must have the opaque type in its signature in order to be able to register hidden types\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:10:9\n+   |\n+LL |         fn eq(&self, _other: &(Foo, i32)) -> bool {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unconstrained opaque type\n   --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:18:16"}, {"sha": "aab10be2de27a9ae2b6f6165fe88836244502171", "filename": "tests/ui/impl-trait/recursive-type-alias-impl-trait-declaration.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1,5 +1,3 @@\n-// check-pass\n-\n #![feature(type_alias_impl_trait)]\n \n type Foo = impl PartialEq<(Foo, i32)>;\n@@ -13,6 +11,7 @@ impl PartialEq<(Bar, i32)> for Bar {\n }\n \n fn foo() -> Foo {\n+    //~^ ERROR can't compare `Bar` with `(Foo, i32)`\n     Bar\n }\n "}, {"sha": "b98b859a99bf8219872cba32d44e11dfc1ba2846", "filename": "tests/ui/impl-trait/recursive-type-alias-impl-trait-declaration.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: can't compare `Bar` with `(Foo, i32)`\n+  --> $DIR/recursive-type-alias-impl-trait-declaration.rs:13:13\n+   |\n+LL | fn foo() -> Foo {\n+   |             ^^^ no implementation for `Bar == (Foo, i32)`\n+LL |\n+LL |     Bar\n+   |     --- return type was inferred to be `Bar` here\n+   |\n+   = help: the trait `PartialEq<(Foo, i32)>` is not implemented for `Bar`\n+   = help: the trait `PartialEq<(Bar, i32)>` is implemented for `Bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f30377d6c16e3aff318c02c98dfb29455140a37f", "filename": "tests/ui/lint/lint-ctypes-73249-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Flint-ctypes-73249-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Flint-ctypes-73249-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-ctypes-73249-2.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1,15 +1,15 @@\n #![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n-pub trait Baz {}\n+trait Baz {}\n \n impl Baz for () {}\n \n type Qux = impl Baz;\n \n fn assign() -> Qux {}\n \n-pub trait Foo {\n+trait Foo {\n     type Assoc: 'static;\n }\n \n@@ -18,12 +18,12 @@ impl Foo for () {\n }\n \n #[repr(transparent)]\n-pub struct A<T: Foo> {\n+struct A<T: Foo> {\n     x: &'static <T as Foo>::Assoc,\n }\n \n extern \"C\" {\n-    pub fn lint_me() -> A<()>; //~ ERROR: uses type `Qux`\n+    fn lint_me() -> A<()>; //~ ERROR: uses type `Qux`\n }\n \n fn main() {}"}, {"sha": "49fa54114b21397834e2771e2d735b4b09be7838", "filename": "tests/ui/lint/lint-ctypes-73249-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Flint-ctypes-73249-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Flint-ctypes-73249-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-ctypes-73249-2.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1,8 +1,8 @@\n error: `extern` block uses type `Qux`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-2.rs:26:25\n+  --> $DIR/lint-ctypes-73249-2.rs:26:21\n    |\n-LL |     pub fn lint_me() -> A<()>;\n-   |                         ^^^^^ not FFI-safe\n+LL |     fn lint_me() -> A<()>;\n+   |                     ^^^^^ not FFI-safe\n    |\n    = note: opaque types have no C equivalent\n note: the lint level is defined here"}, {"sha": "fc11f23a1049c34c19d31879c2f01b0e0cd7ac07", "filename": "tests/ui/lint/lint-ctypes-73251-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Flint-ctypes-73251-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Flint-ctypes-73251-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-ctypes-73251-1.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1,13 +1,13 @@\n #![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n-pub trait Baz {}\n+trait Baz {}\n \n impl Baz for u32 {}\n \n type Qux = impl Baz;\n \n-pub trait Foo {\n+trait Foo {\n     type Assoc;\n }\n \n@@ -20,7 +20,7 @@ fn assign() -> Qux {\n }\n \n extern \"C\" {\n-    pub fn lint_me() -> <u32 as Foo>::Assoc; //~ ERROR: uses type `Qux`\n+    fn lint_me() -> <u32 as Foo>::Assoc; //~ ERROR: uses type `Qux`\n }\n \n fn main() {}"}, {"sha": "b4eb921b97e261d17a10a2fd591c41b5616991f1", "filename": "tests/ui/lint/lint-ctypes-73251-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Flint-ctypes-73251-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Flint-ctypes-73251-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-ctypes-73251-1.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1,8 +1,8 @@\n error: `extern` block uses type `Qux`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-1.rs:23:25\n+  --> $DIR/lint-ctypes-73251-1.rs:23:21\n    |\n-LL |     pub fn lint_me() -> <u32 as Foo>::Assoc;\n-   |                         ^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+LL |     fn lint_me() -> <u32 as Foo>::Assoc;\n+   |                     ^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: opaque types have no C equivalent\n note: the lint level is defined here"}, {"sha": "fbe0a58f3b5bbeba45c34105f79f8e3489c486d0", "filename": "tests/ui/lint/lint-ctypes-73251-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-ctypes-73251-2.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -33,7 +33,7 @@ fn use_of_b() -> AliasB {\n }\n \n extern \"C\" {\n-    pub fn lint_me() -> <AliasB as TraitB>::Assoc; //~ ERROR: uses type `AliasA`\n+    fn lint_me() -> <AliasB as TraitB>::Assoc; //~ ERROR: uses type `AliasA`\n }\n \n fn main() {}"}, {"sha": "e44cd45bd30fa064d6a5ec0a20e4575b3ae5f99c", "filename": "tests/ui/lint/lint-ctypes-73251-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-ctypes-73251-2.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1,8 +1,8 @@\n error: `extern` block uses type `AliasA`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-2.rs:36:25\n+  --> $DIR/lint-ctypes-73251-2.rs:36:21\n    |\n-LL |     pub fn lint_me() -> <AliasB as TraitB>::Assoc;\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+LL |     fn lint_me() -> <AliasB as TraitB>::Assoc;\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: opaque types have no C equivalent\n note: the lint level is defined here"}, {"sha": "a00d1a75aec2c483224c65db85ac396da27fbea8", "filename": "tests/ui/lint/lint-ctypes-73251.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Flint-ctypes-73251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Flint-ctypes-73251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-ctypes-73251.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -3,7 +3,7 @@\n #![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n-pub trait Foo {\n+trait Foo {\n     type Assoc;\n }\n \n@@ -16,7 +16,7 @@ type Bar = impl Foo<Assoc = u32>;\n fn assign() -> Bar {}\n \n extern \"C\" {\n-    pub fn lint_me() -> <Bar as Foo>::Assoc;\n+    fn lint_me() -> <Bar as Foo>::Assoc;\n }\n \n fn main() {}"}, {"sha": "5faeac9ed4c38c44c947b339c18f3621be7858c9", "filename": "tests/ui/lint/opaque-ty-ffi-unsafe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -3,12 +3,12 @@\n \n type A = impl Fn();\n \n-pub fn ret_closure() -> A {\n+pub(crate) fn ret_closure() -> A {\n     || {}\n }\n \n extern \"C\" {\n-    pub fn a(_: A);\n+    pub(crate) fn a(_: A);\n     //~^ ERROR `extern` block uses type `A`, which is not FFI-safe [improper_ctypes]\n }\n "}, {"sha": "ba9e18bcce5c75142c8ee88b32a9d937497da541", "filename": "tests/ui/lint/opaque-ty-ffi-unsafe.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1,8 +1,8 @@\n error: `extern` block uses type `A`, which is not FFI-safe\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:11:17\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:11:24\n    |\n-LL |     pub fn a(_: A);\n-   |                 ^ not FFI-safe\n+LL |     pub(crate) fn a(_: A);\n+   |                        ^ not FFI-safe\n    |\n    = note: opaque types have no C equivalent\n note: the lint level is defined here"}, {"sha": "d9f7c7809b98c6c3f55df72fd17543c5e06709c4", "filename": "tests/ui/type-alias-impl-trait/auto-trait-leakage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -4,9 +4,9 @@\n #![allow(dead_code)]\n \n mod m {\n-    type Foo = impl std::fmt::Debug;\n+    pub(crate) type Foo = impl std::fmt::Debug;\n \n-    pub fn foo() -> Foo {\n+    pub(crate) fn foo() -> Foo {\n         22_u32\n     }\n }"}, {"sha": "5a9e87c091961b309c39d4e822658373e5edb92e", "filename": "tests/ui/type-alias-impl-trait/bounds-are-checked3.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked3.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -0,0 +1,16 @@\n+#![feature(type_alias_impl_trait)]\n+\n+use std::fmt::{Debug, Display};\n+\n+struct Struct<V: Display>(Option<V>);\n+\n+// Make sure that, in contrast to type aliases without opaque types,\n+// we actually do a wf check for the aliased type.\n+type Foo<T: Debug> = (impl Debug, Struct<T>);\n+//~^ ERROR: `T` doesn't implement `std::fmt::Display`\n+\n+fn foo<U: Debug + Display>() -> Foo<U> {\n+    (Vec::<U>::new(), Struct(None))\n+}\n+\n+fn main() {}"}, {"sha": "a845cba7716378bff8f00bebef87594f848534d5", "filename": "tests/ui/type-alias-impl-trait/bounds-are-checked3.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked3.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -0,0 +1,20 @@\n+error[E0277]: `T` doesn't implement `std::fmt::Display`\n+  --> $DIR/bounds-are-checked3.rs:9:35\n+   |\n+LL | type Foo<T: Debug> = (impl Debug, Struct<T>);\n+   |                                   ^^^^^^^^^ `T` cannot be formatted with the default formatter\n+   |\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+note: required by a bound in `Struct`\n+  --> $DIR/bounds-are-checked3.rs:5:18\n+   |\n+LL | struct Struct<V: Display>(Option<V>);\n+   |                  ^^^^^^^ required by this bound in `Struct`\n+help: consider further restricting this bound\n+   |\n+LL | type Foo<T: Debug + std::fmt::Display> = (impl Debug, Struct<T>);\n+   |                   +++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "dc05b70c5cc9cc93304ee23510b5d6c5f30e1e48", "filename": "tests/ui/type-alias-impl-trait/bounds.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -0,0 +1,16 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// check-pass\n+\n+use std::fmt::Debug;\n+\n+// No need to report the `type_alias_bounds` lint, as\n+// the moment an opaque type is mentioned, we actually do check\n+// type alias bounds.\n+type Foo<T: Debug> = (impl Debug, usize);\n+\n+fn foo<U: Debug>() -> Foo<U> {\n+    (Vec::<U>::new(), 1234)\n+}\n+\n+fn main() {}"}, {"sha": "c923eb08ab312fa5d5cb112b834d1b0dee596624", "filename": "tests/ui/type-alias-impl-trait/coherence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fcoherence.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -4,7 +4,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n LL | impl<T> foreign_crate::ForeignTrait for AliasOfForeignType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------\n    | |                                       |\n-   | |                                       type alias impl trait is treated as if it were foreign, because its hidden type could be from a foreign crate\n+   | |                                       `AliasOfForeignType<T>` is not defined in the current crate\n    | impl doesn't use only types from inside the current crate\n    |\n    = note: define and implement a trait or new type instead"}, {"sha": "4d84b2cbbe9a5f8c9dda8646121deed421bc65f2", "filename": "tests/ui/type-alias-impl-trait/defining-use-submodule.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fdefining-use-submodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fdefining-use-submodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fdefining-use-submodule.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -11,12 +11,12 @@ type Foo = impl std::fmt::Display;\n type Bar = impl std::fmt::Display;\n \n mod foo {\n-    pub fn foo() -> super::Foo {\n+    pub(crate) fn foo() -> super::Foo {\n         \"foo\"\n     }\n \n-    pub mod bar {\n-        pub fn bar() -> crate::Bar {\n+    pub(crate) mod bar {\n+        pub(crate) fn bar() -> crate::Bar {\n             1\n         }\n     }"}, {"sha": "bc9280127acca67999a9d3cb5ade0b5cf515fd7d", "filename": "tests/ui/type-alias-impl-trait/generic_underconstrained.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -4,11 +4,11 @@ error[E0277]: the trait bound `T: Trait` is not satisfied\n LL | fn underconstrain<T>(_: T) -> Underconstrained<T> {\n    |                               ^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n    |\n-note: required by a bound in `Underconstrained`\n+note: required by a bound on the type alias `Underconstrained`\n   --> $DIR/generic_underconstrained.rs:6:26\n    |\n LL | type Underconstrained<T: Trait> = impl Send;\n-   |                          ^^^^^ required by this bound in `Underconstrained`\n+   |                          ^^^^^ required by this bound\n help: consider restricting type parameter `T`\n    |\n LL | fn underconstrain<T: Trait>(_: T) -> Underconstrained<T> {"}, {"sha": "fdc9ec090dbee746b10d9ed3f7f437b21f322f50", "filename": "tests/ui/type-alias-impl-trait/generic_underconstrained2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -4,11 +4,11 @@ error[E0277]: `U` doesn't implement `Debug`\n LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n    |                                 ^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-note: required by a bound in `Underconstrained`\n+note: required by a bound on the type alias `Underconstrained`\n   --> $DIR/generic_underconstrained2.rs:5:26\n    |\n LL | type Underconstrained<T: std::fmt::Debug> = impl Send;\n-   |                          ^^^^^^^^^^^^^^^ required by this bound in `Underconstrained`\n+   |                          ^^^^^^^^^^^^^^^ required by this bound\n help: consider restricting type parameter `U`\n    |\n LL | fn underconstrained<U: std::fmt::Debug>(_: U) -> Underconstrained<U> {\n@@ -20,11 +20,11 @@ error[E0277]: `V` doesn't implement `Debug`\n LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n    |                                           ^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-note: required by a bound in `Underconstrained2`\n+note: required by a bound on the type alias `Underconstrained2`\n   --> $DIR/generic_underconstrained2.rs:13:27\n    |\n LL | type Underconstrained2<T: std::fmt::Debug> = impl Send;\n-   |                           ^^^^^^^^^^^^^^^ required by this bound in `Underconstrained2`\n+   |                           ^^^^^^^^^^^^^^^ required by this bound\n help: consider restricting type parameter `V`\n    |\n LL | fn underconstrained2<U, V: std::fmt::Debug>(_: U, _: V) -> Underconstrained2<V> {"}, {"sha": "00d1a1a226d2f9d73bbc51b18862efc1c8f53187", "filename": "tests/ui/type-alias-impl-trait/impl_for_weak_alias.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fimpl_for_weak_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fimpl_for_weak_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fimpl_for_weak_alias.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -0,0 +1,14 @@\n+#![feature(type_alias_impl_trait)]\n+#![feature(auto_traits)]\n+\n+type Alias = (impl Sized, u8);\n+\n+auto trait Trait {}\n+impl Trait for Alias {}\n+//~^ ERROR traits with a default impl, like `Trait`, cannot be implemented for type alias `Alias`\n+\n+fn _def() -> Alias {\n+    (42, 42)\n+}\n+\n+fn main() {}"}, {"sha": "c312ee7dece8d68b3bb403e26f277f90bcaf35d0", "filename": "tests/ui/type-alias-impl-trait/impl_for_weak_alias.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fimpl_for_weak_alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fimpl_for_weak_alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fimpl_for_weak_alias.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -0,0 +1,11 @@\n+error[E0321]: traits with a default impl, like `Trait`, cannot be implemented for type alias `Alias`\n+  --> $DIR/impl_for_weak_alias.rs:7:1\n+   |\n+LL | impl Trait for Alias {}\n+   | ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: a trait object implements `Trait` if and only if `Trait` is one of the trait object's trait bounds\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0321`."}, {"sha": "b89c3e4590f22b5275ff8eba956ac1d245bc5170", "filename": "tests/ui/type-alias-impl-trait/issue-53398-cyclic-types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1,9 +1,10 @@\n #![feature(type_alias_impl_trait)]\n \n+// check-pass\n+\n type Foo = impl Fn() -> Foo;\n \n fn foo() -> Foo {\n-//~^ ERROR: overflow evaluating the requirement\n     foo\n }\n "}, {"sha": "0a34e8486a55184d2a166fe50aef8af435ac36b3", "filename": "tests/ui/type-alias-impl-trait/issue-53398-cyclic-types.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4fdd07fe88c8965daea60c5109913095e3042c9c/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fdd07fe88c8965daea60c5109913095e3042c9c/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr?ref=4fdd07fe88c8965daea60c5109913095e3042c9c", "patch": "@@ -1,12 +0,0 @@\n-error[E0275]: overflow evaluating the requirement `Foo: Sized`\n-  --> $DIR/issue-53398-cyclic-types.rs:5:13\n-   |\n-LL | fn foo() -> Foo {\n-   |             ^^^\n-   |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_53398_cyclic_types`)\n-   = note: required because it appears within the type `fn() -> Foo {foo}`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0275`."}, {"sha": "5aef04ff19c0bbba69ea688d2eb1261dfb2ad885", "filename": "tests/ui/type-alias-impl-trait/obligation_ice.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fobligation_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fobligation_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fobligation_ice.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -0,0 +1,17 @@\n+#![feature(type_alias_impl_trait)]\n+// check-pass\n+\n+use std::iter::{once, Chain};\n+\n+trait Trait<'a, 'b: 'a> {}\n+\n+impl<'a, 'b: 'a, T> Trait<'a, 'b> for std::iter::Cloned<T> {}\n+\n+type I<'a, 'b: 'a, A: Trait<'a, 'b>> = Chain<A, impl Iterator<Item = &'static str>>;\n+fn test2<'a, 'b, A: Trait<'a, 'b> + Iterator<Item = &'static str>>(x: A) -> I<'a, 'b, A> {\n+    x.chain(once(\"5\"))\n+}\n+\n+fn main() {\n+    assert_eq!(vec![\"1\", \"3\", \"5\"], test2([\"1\", \"3\"].iter().cloned()).collect::<Vec<_>>());\n+}"}, {"sha": "aa092f6f8ecc6f45c622137ac53b91a536c260da", "filename": "tests/ui/type-alias-impl-trait/privacy.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fprivacy.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -0,0 +1,8 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Foo = (impl Sized, u8);\n+pub fn foo() -> Foo {\n+    //~^ ERROR private type alias `Foo` in public interface\n+    (42, 42)\n+}\n+fn main() {}"}, {"sha": "e8c6039cdc84b46a175ed7c535fb4769c45ff26e", "filename": "tests/ui/type-alias-impl-trait/privacy.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fprivacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fprivacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fprivacy.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -0,0 +1,11 @@\n+error[E0446]: private type alias `Foo` in public interface\n+  --> $DIR/privacy.rs:4:1\n+   |\n+LL | type Foo = (impl Sized, u8);\n+   | -------- `Foo` declared as private\n+LL | pub fn foo() -> Foo {\n+   | ^^^^^^^^^^^^^^^^^^^ can't leak private type alias\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0446`."}, {"sha": "18f09b548675a7379aee6a867646076feede6df6", "filename": "tests/ui/type-alias-impl-trait/self-referential-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fself-referential-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fself-referential-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fself-referential-3.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -1,9 +1,9 @@\n-// run-pass\n #![feature(type_alias_impl_trait)]\n \n type Bar<'a, 'b> = impl PartialEq<Bar<'a, 'b>> + std::fmt::Debug;\n \n fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+    //~^ ERROR can't compare `&i32` with `Bar<'a, 'b>`\n     i\n }\n "}, {"sha": "4155a114b4f985caeb706f1c7a293ae684220249", "filename": "tests/ui/type-alias-impl-trait/self-referential-3.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fself-referential-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fself-referential-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fself-referential-3.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: can't compare `&i32` with `Bar<'a, 'b>`\n+  --> $DIR/self-referential-3.rs:5:31\n+   |\n+LL | fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+   |                               ^^^^^^^^^^^ no implementation for `&i32 == Bar<'a, 'b>`\n+LL |\n+LL |     i\n+   |     - return type was inferred to be `&i32` here\n+   |\n+   = help: the trait `PartialEq<Bar<'a, 'b>>` is not implemented for `&i32`\n+   = help: the trait `PartialEq` is implemented for `i32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "34b7c24df9f64c591ef543650ef747c5e8a856cb", "filename": "tests/ui/type-alias-impl-trait/self-referential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fself-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fself-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fself-referential.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -10,7 +10,7 @@ fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n type Foo<'a, 'b> = (i32, impl PartialEq<Foo<'a, 'b>> + std::fmt::Debug);\n \n fn foo<'a, 'b>(i: &'a i32) -> Foo<'a, 'b> {\n-    //~^ ERROR can't compare `&i32` with `(i32, &i32)`\n+    //~^ ERROR can't compare `&i32` with `(i32, Foo<'a, 'b>::{opaque#0})`\n     (42, i)\n }\n "}, {"sha": "9a17d495b62929a3a742846d1cd5452c9a420c53", "filename": "tests/ui/type-alias-impl-trait/self-referential.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -10,16 +10,16 @@ LL |     i\n    = help: the trait `PartialEq<Bar<'b, 'a>>` is not implemented for `&i32`\n    = help: the trait `PartialEq` is implemented for `i32`\n \n-error[E0277]: can't compare `&i32` with `(i32, &i32)`\n+error[E0277]: can't compare `&i32` with `(i32, Foo<'a, 'b>::{opaque#0})`\n   --> $DIR/self-referential.rs:12:31\n    |\n LL | fn foo<'a, 'b>(i: &'a i32) -> Foo<'a, 'b> {\n-   |                               ^^^^^^^^^^^ no implementation for `&i32 == (i32, &i32)`\n+   |                               ^^^^^^^^^^^ no implementation for `&i32 == (i32, Foo<'a, 'b>::{opaque#0})`\n LL |\n LL |     (42, i)\n    |     ------- return type was inferred to be `(i32, &i32)` here\n    |\n-   = help: the trait `PartialEq<(i32, &i32)>` is not implemented for `&i32`\n+   = help: the trait `PartialEq<(i32, Foo<'a, 'b>::{opaque#0})>` is not implemented for `&i32`\n    = help: the trait `PartialEq` is implemented for `i32`\n \n error[E0277]: can't compare `&i32` with `(i32, Moo<'b, 'a>::{opaque#0})`"}, {"sha": "4e7388517a5eb9c16fc8df9671b22b9a7a05fa33", "filename": "tests/ui/type-alias-impl-trait/type-alias-impl-trait-fns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fns.rs?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -4,20 +4,20 @@\n \n // Regression test for issue #61863\n \n-pub trait MyTrait {}\n+trait MyTrait {}\n \n #[derive(Debug)]\n-pub struct MyStruct {\n+struct MyStruct {\n     v: u64,\n }\n \n impl MyTrait for MyStruct {}\n \n-pub fn bla() -> TE {\n+fn bla() -> TE {\n     return MyStruct { v: 1 };\n }\n \n-pub fn bla2() -> TE {\n+fn bla2() -> TE {\n     bla()\n }\n "}, {"sha": "24f5cc8c7339bdea1ac12f42a29464f38a33a352", "filename": "tests/ui/type-alias-impl-trait/unnameable_type.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Funnameable_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee/tests%2Fui%2Ftype-alias-impl-trait%2Funnameable_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Funnameable_type.stderr?ref=f3b7dd6388503ef555f4dbf027d6075ee5c8b3ee", "patch": "@@ -25,6 +25,11 @@ LL |         fn dont_define_this(_private: Private) {}\n    |                                       ^^^^^^^\n    = note: expected signature `fn(Private)`\n               found signature `fn(MyPrivate)`\n+note: this item must have the opaque type in its signature in order to be able to register hidden types\n+  --> $DIR/unnameable_type.rs:20:5\n+   |\n+LL |     fn dont_define_this(_private: MyPrivate) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}]}