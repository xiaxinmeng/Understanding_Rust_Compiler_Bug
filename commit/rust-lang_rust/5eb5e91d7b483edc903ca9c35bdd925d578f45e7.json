{"sha": "5eb5e91d7b483edc903ca9c35bdd925d578f45e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYjVlOTFkN2I0ODNlZGM5MDNjYTljMzViZGQ5MjVkNTc4ZjQ1ZTc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-11-12T19:56:59Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-11-23T02:45:32Z"}, "message": "Use multiline text for crate conflict diagnostics", "tree": {"sha": "2a3a343b9216bbbd7874788eac93cbbc389bba53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a3a343b9216bbbd7874788eac93cbbc389bba53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eb5e91d7b483edc903ca9c35bdd925d578f45e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb5e91d7b483edc903ca9c35bdd925d578f45e7", "html_url": "https://github.com/rust-lang/rust/commit/5eb5e91d7b483edc903ca9c35bdd925d578f45e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d2dc6e9402824f5fecba4f076d0bf2bcd01cbeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2dc6e9402824f5fecba4f076d0bf2bcd01cbeb", "html_url": "https://github.com/rust-lang/rust/commit/3d2dc6e9402824f5fecba4f076d0bf2bcd01cbeb"}], "stats": {"total": 198, "additions": 95, "deletions": 103}, "files": [{"sha": "8abccb503d6fa1b3e5d854657de7da6aac62c803", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 85, "deletions": 84, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=5eb5e91d7b483edc903ca9c35bdd925d578f45e7", "patch": "@@ -311,98 +311,96 @@ impl<'a> Context<'a> {\n             &None => String::new(),\n             &Some(ref r) => format!(\" which `{}` depends on\", r.ident),\n         };\n+        let mut msg = \"the following crate versions were found:\".to_string();\n         let mut err = if !self.rejected_via_hash.is_empty() {\n-            struct_span_err!(self.sess,\n-                             self.span,\n-                             E0460,\n-                             \"found possibly newer version of crate `{}`{}\",\n-                             self.ident,\n-                             add)\n-        } else if !self.rejected_via_triple.is_empty() {\n-            struct_span_err!(self.sess,\n-                             self.span,\n-                             E0461,\n-                             \"couldn't find crate `{}` with expected target triple {}{}\",\n-                             self.ident,\n-                             self.triple,\n-                             add)\n-        } else if !self.rejected_via_kind.is_empty() {\n-            struct_span_err!(self.sess,\n-                             self.span,\n-                             E0462,\n-                             \"found staticlib `{}` instead of rlib or dylib{}\",\n-                             self.ident,\n-                             add)\n-        } else if !self.rejected_via_version.is_empty() {\n-            struct_span_err!(self.sess,\n-                             self.span,\n-                             E0514,\n-                             \"found crate `{}` compiled by an incompatible version of rustc{}\",\n-                             self.ident,\n-                             add)\n-        } else {\n             let mut err = struct_span_err!(self.sess,\n                                            self.span,\n-                                           E0463,\n-                                           \"can't find crate for `{}`{}\",\n+                                           E0460,\n+                                           \"found possibly newer version of crate `{}`{}\",\n                                            self.ident,\n                                            add);\n-\n-            if (self.ident == \"std\" || self.ident == \"core\")\n-                && self.triple != config::host_triple() {\n-                err.note(&format!(\"the `{}` target may not be installed\", self.triple));\n-            }\n-            err.span_label(self.span, \"can't find crate\");\n-            err\n-        };\n-\n-        if !self.rejected_via_triple.is_empty() {\n-            let mismatches = self.rejected_via_triple.iter();\n-            for (i, &CrateMismatch { ref path, ref got }) in mismatches.enumerate() {\n-                err.note(&format!(\"crate `{}`, path #{}, triple {}: {}\",\n-                                  self.ident,\n-                                  i + 1,\n-                                  got,\n-                                  path.display()));\n-            }\n-        }\n-        if !self.rejected_via_hash.is_empty() {\n             err.note(\"perhaps that crate needs to be recompiled?\");\n             let mismatches = self.rejected_via_hash.iter();\n-            for (i, &CrateMismatch { ref path, .. }) in mismatches.enumerate() {\n-                err.note(&format!(\"crate `{}` path #{}: {}\", self.ident, i + 1, path.display()));\n+            for &CrateMismatch { ref path, .. } in mismatches {\n+                msg.push_str(&format!(\"\\ncrate `{}`: {}\", self.ident, path.display()));\n             }\n             match self.root {\n                 &None => {}\n                 &Some(ref r) => {\n-                    for (i, path) in r.paths().iter().enumerate() {\n-                        err.note(&format!(\"crate `{}` path #{}: {}\",\n-                                          r.ident,\n-                                          i + 1,\n-                                          path.display()));\n+                    for path in r.paths().iter() {\n+                        msg.push_str(&format!(\"\\ncrate `{}`: {}\", r.ident, path.display()));\n                     }\n                 }\n             }\n-        }\n-        if !self.rejected_via_kind.is_empty() {\n+            err.note(&msg);\n+            err\n+        } else if !self.rejected_via_triple.is_empty() {\n+            let mut err = struct_span_err!(self.sess,\n+                                           self.span,\n+                                           E0461,\n+                                           \"couldn't find crate `{}` \\\n+                                            with expected target triple {}{}\",\n+                                           self.ident,\n+                                           self.triple,\n+                                           add);\n+            let mismatches = self.rejected_via_triple.iter();\n+            for &CrateMismatch { ref path, ref got } in mismatches {\n+                msg.push_str(&format!(\"\\ncrate `{}`, target triple {}: {}\",\n+                                      self.ident,\n+                                      got,\n+                                      path.display()));\n+            }\n+            err.note(&msg);\n+            err\n+        } else if !self.rejected_via_kind.is_empty() {\n+            let mut err = struct_span_err!(self.sess,\n+                                           self.span,\n+                                           E0462,\n+                                           \"found staticlib `{}` instead of rlib or dylib{}\",\n+                                           self.ident,\n+                                           add);\n             err.help(\"please recompile that crate using --crate-type lib\");\n             let mismatches = self.rejected_via_kind.iter();\n-            for (i, &CrateMismatch { ref path, .. }) in mismatches.enumerate() {\n-                err.note(&format!(\"crate `{}` path #{}: {}\", self.ident, i + 1, path.display()));\n+            for &CrateMismatch { ref path, .. } in mismatches {\n+                msg.push_str(&format!(\"\\ncrate `{}`: {}\", self.ident, path.display()));\n             }\n-        }\n-        if !self.rejected_via_version.is_empty() {\n+            err.note(&msg);\n+            err\n+        } else if !self.rejected_via_version.is_empty() {\n+            let mut err = struct_span_err!(self.sess,\n+                                           self.span,\n+                                           E0514,\n+                                           \"found crate `{}` compiled by an incompatible version \\\n+                                            of rustc{}\",\n+                                           self.ident,\n+                                           add);\n             err.help(&format!(\"please recompile that crate using this compiler ({})\",\n                               rustc_version()));\n             let mismatches = self.rejected_via_version.iter();\n-            for (i, &CrateMismatch { ref path, ref got }) in mismatches.enumerate() {\n-                err.note(&format!(\"crate `{}` path #{}: {} compiled by {:?}\",\n-                                  self.ident,\n-                                  i + 1,\n-                                  path.display(),\n-                                  got));\n+            for &CrateMismatch { ref path, ref got } in mismatches {\n+                msg.push_str(&format!(\"\\ncrate `{}` compiled by {}: {}\",\n+                                      self.ident,\n+                                      got,\n+                                      path.display()));\n             }\n-        }\n+            err.note(&msg);\n+            err\n+        } else {\n+            let mut err = struct_span_err!(self.sess,\n+                                           self.span,\n+                                           E0463,\n+                                           \"can't find crate for `{}`{}\",\n+                                           self.ident,\n+                                           add);\n+\n+            if (self.ident == \"std\" || self.ident == \"core\")\n+                && self.triple != config::host_triple() {\n+                err.note(&format!(\"the `{}` target may not be installed\", self.triple));\n+            }\n+            err.span_label(self.span, \"can't find crate\");\n+            err\n+        };\n+\n         if !self.rejected_via_filename.is_empty() {\n             let dylibname = self.dylibname();\n             let mismatches = self.rejected_via_filename.iter();\n@@ -534,16 +532,23 @@ impl<'a> Context<'a> {\n                                                E0464,\n                                                \"multiple matching crates for `{}`\",\n                                                self.crate_name);\n-                err.note(\"candidates:\");\n-                for (_, lib) in libraries {\n-                    if let Some((ref p, _)) = lib.dylib {\n-                        err.note(&format!(\"path: {}\", p.display()));\n-                    }\n-                    if let Some((ref p, _)) = lib.rlib {\n-                        err.note(&format!(\"path: {}\", p.display()));\n+                let candidates = libraries.iter().filter_map(|(_, lib)| {\n+                    let crate_name = &lib.metadata.get_root().name.as_str();\n+                    match &(&lib.dylib, &lib.rlib) {\n+                        &(&Some((ref pd, _)), &Some((ref pr, _))) => {\n+                            Some(format!(\"\\ncrate `{}`: {}\\n{:>padding$}\",\n+                                         crate_name,\n+                                         pd.display(),\n+                                         pr.display(),\n+                                         padding=8 + crate_name.len()))\n+                        }\n+                        &(&Some((ref p, _)), &None) | &(&None, &Some((ref p, _))) => {\n+                            Some(format!(\"\\ncrate `{}`: {}\", crate_name, p.display()))\n+                        }\n+                        &(&None, &None) => None,\n                     }\n-                    note_crate_name(&mut err, &lib.metadata.get_root().name.as_str());\n-                }\n+                }).collect::<String>();\n+                err.note(&format!(\"candidates:{}\", candidates));\n                 err.emit();\n                 None\n             }\n@@ -815,10 +820,6 @@ impl<'a> Context<'a> {\n     }\n }\n \n-pub fn note_crate_name(err: &mut DiagnosticBuilder, name: &str) {\n-    err.note(&format!(\"crate name: {}\", name));\n-}\n-\n // Just a small wrapper to time how long reading metadata takes.\n fn get_metadata_section(target: &Target,\n                         flavor: CrateFlavor,"}, {"sha": "89310706b52ed2a93e6f4fd8617fa2769eaf4ac2", "filename": "src/test/compile-fail/changing-crates.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fchanging-crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fchanging-crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fchanging-crates.rs?ref=5eb5e91d7b483edc903ca9c35bdd925d578f45e7", "patch": "@@ -17,8 +17,7 @@\n \n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n+//~| NOTE: the following crate versions were found\n //~| NOTE: perhaps that crate needs to be recompiled\n-//~| NOTE: crate `a` path #1:\n-//~| NOTE: crate `b` path #1:\n \n fn main() {}"}, {"sha": "f24a3905cc3c8df8504fc52dd1d841dc4e5e163c", "filename": "src/test/compile-fail/svh-change-lit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fsvh-change-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fsvh-change-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-lit.rs?ref=5eb5e91d7b483edc903ca9c35bdd925d578f45e7", "patch": "@@ -18,8 +18,7 @@\n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n //~| NOTE: perhaps that crate needs to be recompiled\n-//~| NOTE: crate `a` path #1:\n-//~| NOTE: crate `b` path #1:\n+//~| NOTE: the following crate versions were found:\n \n fn main() {\n     b::foo()"}, {"sha": "7a197fc6ae92ebbbcd3c4dee6eaeb52e1975dc53", "filename": "src/test/compile-fail/svh-change-significant-cfg.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fsvh-change-significant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fsvh-change-significant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-significant-cfg.rs?ref=5eb5e91d7b483edc903ca9c35bdd925d578f45e7", "patch": "@@ -18,8 +18,7 @@\n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n //~| NOTE: perhaps that crate needs to be recompiled\n-//~| NOTE: crate `a` path #1:\n-//~| NOTE: crate `b` path #1:\n+//~| NOTE: the following crate versions were found:\n \n fn main() {\n     b::foo()"}, {"sha": "560feb960f6f03e5a8b388ff6f593a03d95b997c", "filename": "src/test/compile-fail/svh-change-trait-bound.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fsvh-change-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fsvh-change-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-trait-bound.rs?ref=5eb5e91d7b483edc903ca9c35bdd925d578f45e7", "patch": "@@ -18,8 +18,7 @@\n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n //~| NOTE: perhaps that crate needs to be recompiled\n-//~| NOTE: crate `a` path #1:\n-//~| NOTE: crate `b` path #1:\n+//~| NOTE: the following crate versions were found:\n \n fn main() {\n     b::foo()"}, {"sha": "b8928c09562b69ac2e935dd9f7c6fc8f3ce90484", "filename": "src/test/compile-fail/svh-change-type-arg.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-arg.rs?ref=5eb5e91d7b483edc903ca9c35bdd925d578f45e7", "patch": "@@ -18,8 +18,7 @@\n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n //~| NOTE: perhaps that crate needs to be recompiled\n-//~| NOTE: crate `a` path #1:\n-//~| NOTE: crate `b` path #1:\n+//~| NOTE: the following crate versions were found:\n \n fn main() {\n     b::foo()"}, {"sha": "14973baafbd619d79fb8be97413c222598cf4ed2", "filename": "src/test/compile-fail/svh-change-type-ret.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-ret.rs?ref=5eb5e91d7b483edc903ca9c35bdd925d578f45e7", "patch": "@@ -18,8 +18,7 @@\n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n //~| NOTE: perhaps that crate needs to be recompiled\n-//~| NOTE: crate `a` path #1:\n-//~| NOTE: crate `b` path #1:\n+//~| NOTE: the following crate versions were found:\n \n fn main() {\n     b::foo()"}, {"sha": "cac95b4df8c973029db485e80b314daba944cb3b", "filename": "src/test/compile-fail/svh-change-type-static.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-change-type-static.rs?ref=5eb5e91d7b483edc903ca9c35bdd925d578f45e7", "patch": "@@ -18,8 +18,7 @@\n extern crate a;\n extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n //~| NOTE: perhaps that crate needs to be recompiled\n-//~| NOTE: crate `a` path #1:\n-//~| NOTE: crate `b` path #1:\n+//~| NOTE: the following crate versions were found:\n \n fn main() {\n     b::foo()"}, {"sha": "c875fa8a0b2b9ff51d8c30c959f7119564cab44f", "filename": "src/test/compile-fail/svh-use-trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fsvh-use-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Fcompile-fail%2Fsvh-use-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsvh-use-trait.rs?ref=5eb5e91d7b483edc903ca9c35bdd925d578f45e7", "patch": "@@ -23,8 +23,7 @@\n extern crate uta;\n extern crate utb; //~ ERROR: found possibly newer version of crate `uta` which `utb` depends\n //~| NOTE: perhaps that crate needs to be recompiled?\n-//~| NOTE: crate `uta` path #1:\n-//~| NOTE: crate `utb` path #1:\n+//~| NOTE: the following crate versions were found:\n \n fn main() {\n     utb::foo()"}, {"sha": "0371dff15853b93eec5c966f61494dec14ae7cf7", "filename": "src/test/run-make/many-crates-but-no-match/Makefile", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Frun-make%2Fmany-crates-but-no-match%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5eb5e91d7b483edc903ca9c35bdd925d578f45e7/src%2Ftest%2Frun-make%2Fmany-crates-but-no-match%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmany-crates-but-no-match%2FMakefile?ref=5eb5e91d7b483edc903ca9c35bdd925d578f45e7", "patch": "@@ -29,6 +29,5 @@ all:\n \t$(RUSTC) -L $(A2) -L $(A3) crateC.rs >$(LOG) 2>&1 || true\n \tgrep \"found possibly newer version of crate \\`crateA\\` which \\`crateB\\` depends on\" $(LOG)\n \tgrep \"note: perhaps that crate needs to be recompiled?\" $(LOG)\n-\tgrep \"note: crate \\`crateA\\` path #1:\" $(LOG)\n-\tgrep \"note: crate \\`crateA\\` path #2:\" $(LOG)\n-\tgrep \"note: crate \\`crateB\\` path #1:\" $(LOG)\n+\tgrep \"crate \\`crateA\\`:\" $(LOG)  # this will match two entries\n+\tgrep \"crate \\`crateB\\`:\" $(LOG)"}]}