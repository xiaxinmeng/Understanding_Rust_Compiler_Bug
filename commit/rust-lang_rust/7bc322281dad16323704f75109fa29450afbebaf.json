{"sha": "7bc322281dad16323704f75109fa29450afbebaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYzMyMjI4MWRhZDE2MzIzNzA0Zjc1MTA5ZmEyOTQ1MGFmYmViYWY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-02T21:22:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-02T21:22:26Z"}, "message": "Rollup merge of #39383 - nagisa:mir-uninhabited-destinations, r=pnkfelix\n\nRemove the workaround for gh32959\n\nThis workaround is no longer necessary as Rust, and by extension MIR, now support uninhabited type\nproperly. This removes the workaround for the gh32959 that was introduced in gh33267.\n\nFixes #32959", "tree": {"sha": "c921adce489aeccb4d893a85b70f0a315fbab8c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c921adce489aeccb4d893a85b70f0a315fbab8c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bc322281dad16323704f75109fa29450afbebaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc322281dad16323704f75109fa29450afbebaf", "html_url": "https://github.com/rust-lang/rust/commit/7bc322281dad16323704f75109fa29450afbebaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bc322281dad16323704f75109fa29450afbebaf/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a768827c240a09ef70d67fe7f8869fdd6623f250", "url": "https://api.github.com/repos/rust-lang/rust/commits/a768827c240a09ef70d67fe7f8869fdd6623f250", "html_url": "https://github.com/rust-lang/rust/commit/a768827c240a09ef70d67fe7f8869fdd6623f250"}, {"sha": "d880bbb35ff19a6e7c257eae6ef7c48df5eda9e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d880bbb35ff19a6e7c257eae6ef7c48df5eda9e6", "html_url": "https://github.com/rust-lang/rust/commit/d880bbb35ff19a6e7c257eae6ef7c48df5eda9e6"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "121d592da0316881621fc53468fffc0da11eca32", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7bc322281dad16323704f75109fa29450afbebaf/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc322281dad16323704f75109fa29450afbebaf/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=7bc322281dad16323704f75109fa29450afbebaf", "patch": "@@ -16,8 +16,6 @@ use rustc::hir;\n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub fn ast_block(&mut self,\n                      destination: &Lvalue<'tcx>,\n-                     // FIXME(#32959): temporary measure for the issue\n-                     dest_is_unit: bool,\n                      mut block: BasicBlock,\n                      ast_block: &'tcx hir::Block)\n                      -> BlockAnd<()> {\n@@ -83,8 +81,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             // of the block.\n             if let Some(expr) = expr {\n                 unpack!(block = this.into(destination, block, expr));\n-            } else if dest_is_unit {\n-                // FIXME(#31472)\n+            } else {\n                 let source_info = this.source_info(span);\n                 this.cfg.push_assign_unit(block, source_info, destination);\n             }"}, {"sha": "3d4af259ec9f72550ed8ce17f51692872bc00392", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bc322281dad16323704f75109fa29450afbebaf/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc322281dad16323704f75109fa29450afbebaf/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=7bc322281dad16323704f75109fa29450afbebaf", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 this.in_scope(extent, block, |this| this.into(destination, block, value))\n             }\n             ExprKind::Block { body: ast_block } => {\n-                this.ast_block(destination, expr.ty.is_nil(), block, ast_block)\n+                this.ast_block(destination, block, ast_block)\n             }\n             ExprKind::Match { discriminant, arms } => {\n                 this.match_expr(destination, expr_span, block, discriminant, arms)"}]}