{"sha": "176956c115c2b797471a3f59eef3e17789229007", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3Njk1NmMxMTVjMmI3OTc0NzFhM2Y1OWVlZjNlMTc3ODkyMjkwMDc=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-09-14T22:02:48Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-09-15T11:46:35Z"}, "message": "Test and fix Sync & Send traits of BTreeMap artefacts", "tree": {"sha": "ff89bd470bb82cb5ab4de5e7284a1e70f672466f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff89bd470bb82cb5ab4de5e7284a1e70f672466f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/176956c115c2b797471a3f59eef3e17789229007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/176956c115c2b797471a3f59eef3e17789229007", "html_url": "https://github.com/rust-lang/rust/commit/176956c115c2b797471a3f59eef3e17789229007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/176956c115c2b797471a3f59eef3e17789229007/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb0067c75ea82efa8a09213bfba0dc2583ac0a4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb0067c75ea82efa8a09213bfba0dc2583ac0a4c", "html_url": "https://github.com/rust-lang/rust/commit/bb0067c75ea82efa8a09213bfba0dc2583ac0a4c"}], "stats": {"total": 143, "additions": 143, "deletions": 0}, "files": [{"sha": "016f139a501a00da5749e941e4c1d47df2fdaccb", "filename": "library/alloc/src/collections/btree/borrow.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/176956c115c2b797471a3f59eef3e17789229007/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176956c115c2b797471a3f59eef3e17789229007/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fborrow.rs?ref=176956c115c2b797471a3f59eef3e17789229007", "patch": "@@ -16,6 +16,9 @@ pub struct DormantMutRef<'a, T> {\n     _marker: PhantomData<&'a mut T>,\n }\n \n+unsafe impl<'a, T> Sync for DormantMutRef<'a, T> where &'a mut T: Sync {}\n+unsafe impl<'a, T> Send for DormantMutRef<'a, T> where &'a mut T: Send {}\n+\n impl<'a, T> DormantMutRef<'a, T> {\n     /// Capture a unique borrow, and immediately reborrow it. For the compiler,\n     /// the lifetime of the new reference is the same as the lifetime of the"}, {"sha": "d2cd6b8e5241ad7e2fbd7dc0ee469eb7bd7826aa", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/176956c115c2b797471a3f59eef3e17789229007/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/176956c115c2b797471a3f59eef3e17789229007/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=176956c115c2b797471a3f59eef3e17789229007", "patch": "@@ -1418,6 +1418,146 @@ fn test_variance() {\n     }\n }\n \n+#[test]\n+#[allow(dead_code)]\n+fn test_sync() {\n+    fn map<T: Sync>(v: &BTreeMap<T, T>) -> impl Sync + '_ {\n+        v\n+    }\n+\n+    fn into_iter<T: Sync>(v: BTreeMap<T, T>) -> impl Sync {\n+        v.into_iter()\n+    }\n+\n+    fn into_keys<T: Sync + Ord>(v: BTreeMap<T, T>) -> impl Sync {\n+        v.into_keys()\n+    }\n+\n+    fn into_values<T: Sync + Ord>(v: BTreeMap<T, T>) -> impl Sync {\n+        v.into_values()\n+    }\n+\n+    fn drain_filter<T: Sync + Ord>(v: &mut BTreeMap<T, T>) -> impl Sync + '_ {\n+        v.drain_filter(|_, _| false)\n+    }\n+\n+    fn iter<T: Sync>(v: &BTreeMap<T, T>) -> impl Sync + '_ {\n+        v.iter()\n+    }\n+\n+    fn iter_mut<T: Sync>(v: &mut BTreeMap<T, T>) -> impl Sync + '_ {\n+        v.iter_mut()\n+    }\n+\n+    fn keys<T: Sync>(v: &BTreeMap<T, T>) -> impl Sync + '_ {\n+        v.keys()\n+    }\n+\n+    fn values<T: Sync>(v: &BTreeMap<T, T>) -> impl Sync + '_ {\n+        v.values()\n+    }\n+\n+    fn values_mut<T: Sync>(v: &mut BTreeMap<T, T>) -> impl Sync + '_ {\n+        v.values_mut()\n+    }\n+\n+    fn range<T: Sync + Ord>(v: &BTreeMap<T, T>) -> impl Sync + '_ {\n+        v.range(..)\n+    }\n+\n+    fn range_mut<T: Sync + Ord>(v: &mut BTreeMap<T, T>) -> impl Sync + '_ {\n+        v.range_mut(..)\n+    }\n+\n+    fn entry<T: Sync + Ord + Default>(v: &mut BTreeMap<T, T>) -> impl Sync + '_ {\n+        v.entry(Default::default())\n+    }\n+\n+    fn occupied_entry<T: Sync + Ord + Default>(v: &mut BTreeMap<T, T>) -> impl Sync + '_ {\n+        match v.entry(Default::default()) {\n+            Occupied(entry) => entry,\n+            _ => unreachable!(),\n+        }\n+    }\n+\n+    fn vacant_entry<T: Sync + Ord + Default>(v: &mut BTreeMap<T, T>) -> impl Sync + '_ {\n+        match v.entry(Default::default()) {\n+            Vacant(entry) => entry,\n+            _ => unreachable!(),\n+        }\n+    }\n+}\n+\n+#[test]\n+#[allow(dead_code)]\n+fn test_send() {\n+    fn map<T: Send>(v: BTreeMap<T, T>) -> impl Send {\n+        v\n+    }\n+\n+    fn into_iter<T: Send>(v: BTreeMap<T, T>) -> impl Send {\n+        v.into_iter()\n+    }\n+\n+    fn into_keys<T: Send + Ord>(v: BTreeMap<T, T>) -> impl Send {\n+        v.into_keys()\n+    }\n+\n+    fn into_values<T: Send + Ord>(v: BTreeMap<T, T>) -> impl Send {\n+        v.into_values()\n+    }\n+\n+    fn drain_filter<T: Send + Ord>(v: &mut BTreeMap<T, T>) -> impl Send + '_ {\n+        v.drain_filter(|_, _| false)\n+    }\n+\n+    fn iter<T: Send + Sync>(v: &BTreeMap<T, T>) -> impl Send + '_ {\n+        v.iter()\n+    }\n+\n+    fn iter_mut<T: Send + Sync>(v: &mut BTreeMap<T, T>) -> impl Send + '_ {\n+        v.iter_mut()\n+    }\n+\n+    fn keys<T: Send + Sync>(v: &BTreeMap<T, T>) -> impl Send + '_ {\n+        v.keys()\n+    }\n+\n+    fn values<T: Send + Sync>(v: &BTreeMap<T, T>) -> impl Send + '_ {\n+        v.values()\n+    }\n+\n+    fn values_mut<T: Send + Sync>(v: &mut BTreeMap<T, T>) -> impl Send + '_ {\n+        v.values_mut()\n+    }\n+\n+    fn range<T: Send + Sync + Ord>(v: &BTreeMap<T, T>) -> impl Send + '_ {\n+        v.range(..)\n+    }\n+\n+    fn range_mut<T: Send + Sync + Ord>(v: &mut BTreeMap<T, T>) -> impl Send + '_ {\n+        v.range_mut(..)\n+    }\n+\n+    fn entry<T: Send + Ord + Default>(v: &mut BTreeMap<T, T>) -> impl Send + '_ {\n+        v.entry(Default::default())\n+    }\n+\n+    fn occupied_entry<T: Send + Ord + Default>(v: &mut BTreeMap<T, T>) -> impl Send + '_ {\n+        match v.entry(Default::default()) {\n+            Occupied(entry) => entry,\n+            _ => unreachable!(),\n+        }\n+    }\n+\n+    fn vacant_entry<T: Send + Ord + Default>(v: &mut BTreeMap<T, T>) -> impl Send + '_ {\n+        match v.entry(Default::default()) {\n+            Vacant(entry) => entry,\n+            _ => unreachable!(),\n+        }\n+    }\n+}\n+\n #[test]\n fn test_occupied_entry_key() {\n     let mut a = BTreeMap::new();"}]}