{"sha": "58d72aedeee8dcce9cf227d3ac34088e88494939", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZDcyYWVkZWVlOGRjY2U5Y2YyMjdkM2FjMzQwODhlODg0OTQ5Mzk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-12T21:53:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-12T21:53:30Z"}, "message": "Rollup merge of #81506 - vo4:hwasan, r=nagisa\n\nHWAddressSanitizer support\n\n#  Motivation\nCompared to regular ASan, HWASan has a [smaller overhead](https://source.android.com/devices/tech/debug/hwasan). The difference in practice is that HWASan'ed code is more usable, e.g. Android device compiled with HWASan can be used as a daily driver.\n\n# Example\n```\nfn main() {\n    let xs = vec![0, 1, 2, 3];\n    let _y = unsafe { *xs.as_ptr().offset(4) };\n}\n```\n```\n==223==ERROR: HWAddressSanitizer: tag-mismatch on address 0xefdeffff0050 at pc 0xaaaad00b3468\nREAD of size 4 at 0xefdeffff0050 tags: e5/00 (ptr/mem) in thread T0\n    #0 0xaaaad00b3464  (/root/main+0x53464)\n    #1 0xaaaad00b39b4  (/root/main+0x539b4)\n    #2 0xaaaad00b3dd0  (/root/main+0x53dd0)\n    #3 0xaaaad00b61dc  (/root/main+0x561dc)\n    #4 0xaaaad00c0574  (/root/main+0x60574)\n    #5 0xaaaad00b6290  (/root/main+0x56290)\n    #6 0xaaaad00b6170  (/root/main+0x56170)\n    #7 0xaaaad00b3578  (/root/main+0x53578)\n    #8 0xffff81345e70  (/lib64/libc.so.6+0x20e70)\n    #9 0xaaaad0096310  (/root/main+0x36310)\n\n[0xefdeffff0040,0xefdeffff0060) is a small allocated heap chunk; size: 32 offset: 16\n0xefdeffff0050 is located 0 bytes to the right of 16-byte region [0xefdeffff0040,0xefdeffff0050)\nallocated here:\n    #0 0xaaaad009bcdc  (/root/main+0x3bcdc)\n    #1 0xaaaad00b1eb0  (/root/main+0x51eb0)\n    #2 0xaaaad00b20d4  (/root/main+0x520d4)\n    #3 0xaaaad00b2800  (/root/main+0x52800)\n    #4 0xaaaad00b1cf4  (/root/main+0x51cf4)\n    #5 0xaaaad00b33d4  (/root/main+0x533d4)\n    #6 0xaaaad00b39b4  (/root/main+0x539b4)\n    #7 0xaaaad00b61dc  (/root/main+0x561dc)\n    #8 0xaaaad00b3578  (/root/main+0x53578)\n    #9 0xaaaad0096310  (/root/main+0x36310)\n\nThread: T0 0xeffe00002000 stack: [0xffffc0590000,0xffffc0d90000) sz: 8388608 tls: [0xffff81521020,0xffff815217d0)\nMemory tags around the buggy address (one tag corresponds to 16 bytes):\n  0xfefcefffef80: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffef90: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefa0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefb0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefc0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefd0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefe0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffeff0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n=>0xfefceffff000: a2  a2  05  00  e5 [00] 00  00  00  00  00  00  00  00  00  00\n  0xfefceffff010: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff020: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff030: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff040: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff050: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff060: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff070: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff080: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\nTags for short granules around the buggy address (one tag corresponds to 16 bytes):\n  0xfefcefffeff0: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n=>0xfefceffff000: ..  ..  c5  ..  .. [..] ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n  0xfefceffff010: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\nSee https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html#short-granules for a description of short granule tags\nRegisters where the failure occurred (pc 0xaaaad00b3468):\n    x0  e500efdeffff0050  x1  0000000000000004  x2  0000ffffc0d8f5a0  x3  0200efff00000000\n    x4  0000ffffc0d8f4c0  x5  000000000000004f  x6  00000ffffc0d8f36  x7  0000efff00000000\n    x8  e500efdeffff0050  x9  0200efff00000000  x10 0000000000000000  x11 0200efff00000000\n    x12 0200effe000006b0  x13 0200effe000006b0  x14 0000000000000008  x15 00000000c00000cf\n    x16 0000aaaad00a0afc  x17 0000000000000003  x18 0000000000000001  x19 0000ffffc0d8f718\n    x20 ba00ffffc0d8f7a0  x21 0000aaaad00962e0  x22 0000000000000000  x23 0000000000000000\n    x24 0000000000000000  x25 0000000000000000  x26 0000000000000000  x27 0000000000000000\n    x28 0000000000000000  x29 0000ffffc0d8f650  x30 0000aaaad00b3468\n```\n\n# Comments/Caveats\n* HWASan is only supported on arm64.\n* I'm not sure if I should add a feature gate or piggyback on the existing one for sanitizers.\n* HWASan requires `-C target-feature=+tagged-globals`. That flag should probably be set transparently to the user. Not sure how to go about that.\n\n# TODO\n* Need more tests.\n* Update documentation.\n* Fix symbolization.\n* Integrate with CI", "tree": {"sha": "c7818cdcf8c5886c86fab784040cdf28231f8ee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7818cdcf8c5886c86fab784040cdf28231f8ee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58d72aedeee8dcce9cf227d3ac34088e88494939", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgJvjbCRBK7hj4Ov3rIwAAdHIIAGVAtwnMngAAUwHxscP0iiMR\n4/lShDoebU56ZXlecQGHEVRAmpdJlkMvgyeG5m1FJgfXc2xizIC3/ao+dvC8dSYE\nRH1sxJ+IaFfXO5xHKYq6pG4PJ8uNg3DwGWrypYtfDjN+PabTByyFrD9CQ6H/cJTq\nxdmtLAA8SKM9GNIU0T7NbNNvaqoAkPeWrfOh7SzDbLjyZ5CdklREKH0crz6V84Kk\n3EoVV1c5opJlSDJ5nKZ6ohTm4VYuujXXhhkvxKd2EL0sropg1+BGnF2LkhzBUWuH\nO6L8q6mIlsI5Y5vK5TLXC6u2IJMhZyfSjhOZcrWN+lM5siMcgmGUE5SfBCv33g8=\n=Sc0z\n-----END PGP SIGNATURE-----\n", "payload": "tree c7818cdcf8c5886c86fab784040cdf28231f8ee8\nparent fc93e260e914aefb6896a65de025fb34127cccaf\nparent 9c34c140a76f4ddd26c6042e2d847827fee304b6\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613166810 +0100\ncommitter GitHub <noreply@github.com> 1613166810 +0100\n\nRollup merge of #81506 - vo4:hwasan, r=nagisa\n\nHWAddressSanitizer support\n\n#  Motivation\nCompared to regular ASan, HWASan has a [smaller overhead](https://source.android.com/devices/tech/debug/hwasan). The difference in practice is that HWASan'ed code is more usable, e.g. Android device compiled with HWASan can be used as a daily driver.\n\n# Example\n```\nfn main() {\n    let xs = vec![0, 1, 2, 3];\n    let _y = unsafe { *xs.as_ptr().offset(4) };\n}\n```\n```\n==223==ERROR: HWAddressSanitizer: tag-mismatch on address 0xefdeffff0050 at pc 0xaaaad00b3468\nREAD of size 4 at 0xefdeffff0050 tags: e5/00 (ptr/mem) in thread T0\n    #0 0xaaaad00b3464  (/root/main+0x53464)\n    #1 0xaaaad00b39b4  (/root/main+0x539b4)\n    #2 0xaaaad00b3dd0  (/root/main+0x53dd0)\n    #3 0xaaaad00b61dc  (/root/main+0x561dc)\n    #4 0xaaaad00c0574  (/root/main+0x60574)\n    #5 0xaaaad00b6290  (/root/main+0x56290)\n    #6 0xaaaad00b6170  (/root/main+0x56170)\n    #7 0xaaaad00b3578  (/root/main+0x53578)\n    #8 0xffff81345e70  (/lib64/libc.so.6+0x20e70)\n    #9 0xaaaad0096310  (/root/main+0x36310)\n\n[0xefdeffff0040,0xefdeffff0060) is a small allocated heap chunk; size: 32 offset: 16\n0xefdeffff0050 is located 0 bytes to the right of 16-byte region [0xefdeffff0040,0xefdeffff0050)\nallocated here:\n    #0 0xaaaad009bcdc  (/root/main+0x3bcdc)\n    #1 0xaaaad00b1eb0  (/root/main+0x51eb0)\n    #2 0xaaaad00b20d4  (/root/main+0x520d4)\n    #3 0xaaaad00b2800  (/root/main+0x52800)\n    #4 0xaaaad00b1cf4  (/root/main+0x51cf4)\n    #5 0xaaaad00b33d4  (/root/main+0x533d4)\n    #6 0xaaaad00b39b4  (/root/main+0x539b4)\n    #7 0xaaaad00b61dc  (/root/main+0x561dc)\n    #8 0xaaaad00b3578  (/root/main+0x53578)\n    #9 0xaaaad0096310  (/root/main+0x36310)\n\nThread: T0 0xeffe00002000 stack: [0xffffc0590000,0xffffc0d90000) sz: 8388608 tls: [0xffff81521020,0xffff815217d0)\nMemory tags around the buggy address (one tag corresponds to 16 bytes):\n  0xfefcefffef80: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffef90: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefa0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefb0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefc0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefd0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefe0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffeff0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n=>0xfefceffff000: a2  a2  05  00  e5 [00] 00  00  00  00  00  00  00  00  00  00\n  0xfefceffff010: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff020: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff030: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff040: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff050: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff060: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff070: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff080: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\nTags for short granules around the buggy address (one tag corresponds to 16 bytes):\n  0xfefcefffeff0: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n=>0xfefceffff000: ..  ..  c5  ..  .. [..] ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n  0xfefceffff010: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\nSee https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html#short-granules for a description of short granule tags\nRegisters where the failure occurred (pc 0xaaaad00b3468):\n    x0  e500efdeffff0050  x1  0000000000000004  x2  0000ffffc0d8f5a0  x3  0200efff00000000\n    x4  0000ffffc0d8f4c0  x5  000000000000004f  x6  00000ffffc0d8f36  x7  0000efff00000000\n    x8  e500efdeffff0050  x9  0200efff00000000  x10 0000000000000000  x11 0200efff00000000\n    x12 0200effe000006b0  x13 0200effe000006b0  x14 0000000000000008  x15 00000000c00000cf\n    x16 0000aaaad00a0afc  x17 0000000000000003  x18 0000000000000001  x19 0000ffffc0d8f718\n    x20 ba00ffffc0d8f7a0  x21 0000aaaad00962e0  x22 0000000000000000  x23 0000000000000000\n    x24 0000000000000000  x25 0000000000000000  x26 0000000000000000  x27 0000000000000000\n    x28 0000000000000000  x29 0000ffffc0d8f650  x30 0000aaaad00b3468\n```\n\n# Comments/Caveats\n* HWASan is only supported on arm64.\n* I'm not sure if I should add a feature gate or piggyback on the existing one for sanitizers.\n* HWASan requires `-C target-feature=+tagged-globals`. That flag should probably be set transparently to the user. Not sure how to go about that.\n\n# TODO\n* Need more tests.\n* Update documentation.\n* Fix symbolization.\n* Integrate with CI\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58d72aedeee8dcce9cf227d3ac34088e88494939", "html_url": "https://github.com/rust-lang/rust/commit/58d72aedeee8dcce9cf227d3ac34088e88494939", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58d72aedeee8dcce9cf227d3ac34088e88494939/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc93e260e914aefb6896a65de025fb34127cccaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc93e260e914aefb6896a65de025fb34127cccaf", "html_url": "https://github.com/rust-lang/rust/commit/fc93e260e914aefb6896a65de025fb34127cccaf"}, {"sha": "9c34c140a76f4ddd26c6042e2d847827fee304b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c34c140a76f4ddd26c6042e2d847827fee304b6", "html_url": "https://github.com/rust-lang/rust/commit/9c34c140a76f4ddd26c6042e2d847827fee304b6"}], "stats": {"total": 201, "additions": 187, "deletions": 14}, "files": [{"sha": "26111729ba5b237235640b00f2b915dc8bcc6c00", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -53,6 +53,9 @@ pub fn sanitize(cx: &CodegenCx<'ll, '_>, no_sanitize: SanitizerSet, llfn: &'ll V\n     if enabled.contains(SanitizerSet::THREAD) {\n         llvm::Attribute::SanitizeThread.apply_llfn(Function, llfn);\n     }\n+    if enabled.contains(SanitizerSet::HWADDRESS) {\n+        llvm::Attribute::SanitizeHWAddress.apply_llfn(Function, llfn);\n+    }\n }\n \n /// Tell LLVM to emit or not emit the information necessary to unwind the stack for the function."}, {"sha": "8b737c9a2e5576fcba8e80c9240a45a8a34b46bf", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -440,6 +440,8 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n             sanitize_memory_recover: config.sanitizer_recover.contains(SanitizerSet::MEMORY),\n             sanitize_memory_track_origins: config.sanitizer_memory_track_origins as c_int,\n             sanitize_thread: config.sanitizer.contains(SanitizerSet::THREAD),\n+            sanitize_hwaddress: config.sanitizer.contains(SanitizerSet::HWADDRESS),\n+            sanitize_hwaddress_recover: config.sanitizer_recover.contains(SanitizerSet::HWADDRESS),\n         })\n     } else {\n         None\n@@ -652,6 +654,10 @@ unsafe fn add_sanitizer_passes(config: &ModuleConfig, passes: &mut Vec<&'static\n     if config.sanitizer.contains(SanitizerSet::THREAD) {\n         passes.push(llvm::LLVMRustCreateThreadSanitizerPass());\n     }\n+    if config.sanitizer.contains(SanitizerSet::HWADDRESS) {\n+        let recover = config.sanitizer_recover.contains(SanitizerSet::HWADDRESS);\n+        passes.push(llvm::LLVMRustCreateHWAddressSanitizerPass(recover));\n+    }\n }\n \n pub(crate) fn link("}, {"sha": "8c1740d8f25f0d3a5590bd5bfd5046fa4e0d59b1", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -131,6 +131,7 @@ pub enum Attribute {\n     ReturnsTwice = 25,\n     ReadNone = 26,\n     InaccessibleMemOnly = 27,\n+    SanitizeHWAddress = 28,\n }\n \n /// LLVMIntPredicate\n@@ -439,6 +440,8 @@ pub struct SanitizerOptions {\n     pub sanitize_memory_recover: bool,\n     pub sanitize_memory_track_origins: c_int,\n     pub sanitize_thread: bool,\n+    pub sanitize_hwaddress: bool,\n+    pub sanitize_hwaddress_recover: bool,\n }\n \n /// LLVMRelocMode\n@@ -2128,6 +2131,7 @@ extern \"C\" {\n         Recover: bool,\n     ) -> &'static mut Pass;\n     pub fn LLVMRustCreateThreadSanitizerPass() -> &'static mut Pass;\n+    pub fn LLVMRustCreateHWAddressSanitizerPass(Recover: bool) -> &'static mut Pass;\n     pub fn LLVMRustAddPass(PM: &PassManager<'_>, Pass: &'static mut Pass);\n     pub fn LLVMRustAddLastExtensionPasses(\n         PMB: &PassManagerBuilder,"}, {"sha": "6c58417590e695f8914eccba4138c44338f2001c", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -893,6 +893,9 @@ fn link_sanitizers(sess: &Session, crate_type: CrateType, linker: &mut dyn Linke\n     if sanitizer.contains(SanitizerSet::THREAD) {\n         link_sanitizer_runtime(sess, linker, \"tsan\");\n     }\n+    if sanitizer.contains(SanitizerSet::HWADDRESS) {\n+        link_sanitizer_runtime(sess, linker, \"hwasan\");\n+    }\n }\n \n fn link_sanitizer_runtime(sess: &Session, linker: &mut dyn Linker, name: &str) {"}, {"sha": "0e3bf5615af7bc3b5ff02fe23e7338239f7b3d90", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -85,6 +85,7 @@ enum LLVMRustAttribute {\n   ReturnsTwice = 25,\n   ReadNone = 26,\n   InaccessibleMemOnly = 27,\n+  SanitizeHWAddress = 28,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "5263d5dcf3e8f2214cdfa3e9aff33e80598dcf23", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -33,6 +33,7 @@\n #include \"llvm/Support/TimeProfiler.h\"\n #include \"llvm/Transforms/Instrumentation/ThreadSanitizer.h\"\n #include \"llvm/Transforms/Instrumentation/MemorySanitizer.h\"\n+#include \"llvm/Transforms/Instrumentation/HWAddressSanitizer.h\"\n #include \"llvm/Transforms/Utils/CanonicalizeAliases.h\"\n #include \"llvm/Transforms/Utils/NameAnonGlobals.h\"\n \n@@ -133,6 +134,12 @@ extern \"C\" LLVMPassRef LLVMRustCreateThreadSanitizerPass() {\n   return wrap(createThreadSanitizerLegacyPassPass());\n }\n \n+extern \"C\" LLVMPassRef LLVMRustCreateHWAddressSanitizerPass(bool Recover) {\n+  const bool CompileKernel = false;\n+\n+  return wrap(createHWAddressSanitizerLegacyPassPass(CompileKernel, Recover));\n+}\n+\n extern \"C\" LLVMRustPassKind LLVMRustPassKind(LLVMPassRef RustPass) {\n   assert(RustPass);\n   Pass *Pass = unwrap(RustPass);\n@@ -722,6 +729,8 @@ struct LLVMRustSanitizerOptions {\n   bool SanitizeMemoryRecover;\n   int  SanitizeMemoryTrackOrigins;\n   bool SanitizeThread;\n+  bool SanitizeHWAddress;\n+  bool SanitizeHWAddressRecover;\n };\n \n extern \"C\" void\n@@ -886,6 +895,23 @@ LLVMRustOptimizeWithNewPassManager(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover));\n         }\n       );\n+#endif\n+    }\n+    if (SanitizerOptions->SanitizeHWAddress) {\n+#if LLVM_VERSION_GE(11, 0)\n+      OptimizerLastEPCallbacks.push_back(\n+        [SanitizerOptions](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+          MPM.addPass(HWAddressSanitizerPass(\n+              /*CompileKernel=*/false, SanitizerOptions->SanitizeHWAddressRecover));\n+        }\n+      );\n+#else\n+      PipelineStartEPCallbacks.push_back(\n+        [SanitizerOptions](ModulePassManager &MPM) {\n+          MPM.addPass(HWAddressSanitizerPass(\n+              /*CompileKernel=*/false, SanitizerOptions->SanitizeHWAddressRecover));\n+        }\n+      );\n #endif\n     }\n   }"}, {"sha": "45835990cecbb01fb267b85dcd4d7213690640e1", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -205,6 +205,8 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::ReadNone;\n   case InaccessibleMemOnly:\n     return Attribute::InaccessibleMemOnly;\n+  case SanitizeHWAddress:\n+    return Attribute::SanitizeHWAddress;\n   }\n   report_fatal_error(\"bad AttributeKind\");\n }"}, {"sha": "210dbb0ee993929c27e832ab4e3c5e0fcefee0c0", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -43,6 +43,7 @@ bitflags! {\n         const LEAK    = 1 << 1;\n         const MEMORY  = 1 << 2;\n         const THREAD  = 1 << 3;\n+        const HWADDRESS  = 1 << 4;\n     }\n }\n \n@@ -56,6 +57,7 @@ impl fmt::Display for SanitizerSet {\n                 SanitizerSet::LEAK => \"leak\",\n                 SanitizerSet::MEMORY => \"memory\",\n                 SanitizerSet::THREAD => \"thread\",\n+                SanitizerSet::HWADDRESS => \"hwaddress\",\n                 _ => panic!(\"unrecognized sanitizer {:?}\", s),\n             };\n             if !first {\n@@ -73,12 +75,18 @@ impl IntoIterator for SanitizerSet {\n     type IntoIter = std::vec::IntoIter<SanitizerSet>;\n \n     fn into_iter(self) -> Self::IntoIter {\n-        [SanitizerSet::ADDRESS, SanitizerSet::LEAK, SanitizerSet::MEMORY, SanitizerSet::THREAD]\n-            .iter()\n-            .copied()\n-            .filter(|&s| self.contains(s))\n-            .collect::<Vec<_>>()\n-            .into_iter()\n+        [\n+            SanitizerSet::ADDRESS,\n+            SanitizerSet::LEAK,\n+            SanitizerSet::MEMORY,\n+            SanitizerSet::THREAD,\n+            SanitizerSet::HWADDRESS,\n+        ]\n+        .iter()\n+        .copied()\n+        .filter(|&s| self.contains(s))\n+        .collect::<Vec<_>>()\n+        .into_iter()\n     }\n }\n "}, {"sha": "baa0502521da748769933adf39c413e51bedfccf", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -253,7 +253,7 @@ macro_rules! options {\n         pub const parse_passes: &str = \"a space-separated list of passes, or `all`\";\n         pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n         pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n-        pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `leak`, `memory` or `thread`\";\n+        pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `hwaddress`, `leak`, `memory` or `thread`\";\n         pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n         pub const parse_cfguard: &str =\n             \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n@@ -476,6 +476,7 @@ macro_rules! options {\n                         \"leak\" => SanitizerSet::LEAK,\n                         \"memory\" => SanitizerSet::MEMORY,\n                         \"thread\" => SanitizerSet::THREAD,\n+                        \"hwaddress\" => SanitizerSet::HWADDRESS,\n                         _ => return false,\n                     }\n                 }"}, {"sha": "a7ceb9e06a5192ca111f3ac9e463a0fe8eabee48", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -1126,7 +1126,8 @@ impl Session {\n         self.opts.optimize != config::OptLevel::No\n         // AddressSanitizer uses lifetimes to detect use after scope bugs.\n         // MemorySanitizer uses lifetimes to detect use of uninitialized stack variables.\n-        || self.opts.debugging_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY)\n+        // HWAddressSanitizer will use lifetimes to detect use after scope bugs in the future.\n+        || self.opts.debugging_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY | SanitizerSet::HWADDRESS)\n     }\n \n     pub fn link_dead_code(&self) -> bool {\n@@ -1562,6 +1563,8 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         \"x86_64-unknown-freebsd\",\n         \"x86_64-unknown-linux-gnu\",\n     ];\n+    const HWASAN_SUPPORTED_TARGETS: &[&str] =\n+        &[\"aarch64-linux-android\", \"aarch64-unknown-linux-gnu\"];\n \n     // Sanitizers can only be used on some tested platforms.\n     for s in sess.opts.debugging_opts.sanitizer {\n@@ -1570,6 +1573,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n             SanitizerSet::LEAK => LSAN_SUPPORTED_TARGETS,\n             SanitizerSet::MEMORY => MSAN_SUPPORTED_TARGETS,\n             SanitizerSet::THREAD => TSAN_SUPPORTED_TARGETS,\n+            SanitizerSet::HWADDRESS => HWASAN_SUPPORTED_TARGETS,\n             _ => panic!(\"unrecognized sanitizer {}\", s),\n         };\n         if !supported_targets.contains(&&*sess.opts.target_triple.triple()) {"}, {"sha": "1c37a6b2aca18a8b68feb1f532cb002b1955810c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -593,6 +593,7 @@ symbols! {\n         html_no_source,\n         html_playground_url,\n         html_root_url,\n+        hwaddress,\n         i,\n         i128,\n         i128_type,"}, {"sha": "2598f3e38ce00b4b6b07680b0be6d984feb2fbf9", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -2709,10 +2709,12 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY;\n                     } else if item.has_name(sym::thread) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD;\n+                    } else if item.has_name(sym::hwaddress) {\n+                        codegen_fn_attrs.no_sanitize |= SanitizerSet::HWADDRESS;\n                     } else {\n                         tcx.sess\n                             .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n-                            .note(\"expected one of: `address`, `memory` or `thread`\")\n+                            .note(\"expected one of: `address`, `hwaddress`, `memory` or `thread`\")\n                             .emit();\n                     }\n                 }"}, {"sha": "2e6e9142afe6c5a1be6a5b488d0e0c7efc79c3ce", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -51,7 +51,7 @@ def v(*args):\n o(\"ninja\", \"llvm.ninja\", \"build LLVM using the Ninja generator (for MSVC, requires building in the correct environment)\")\n o(\"locked-deps\", \"build.locked-deps\", \"force Cargo.lock to be up to date\")\n o(\"vendor\", \"build.vendor\", \"enable usage of vendored Rust crates\")\n-o(\"sanitizers\", \"build.sanitizers\", \"build the sanitizer runtimes (asan, lsan, msan, tsan)\")\n+o(\"sanitizers\", \"build.sanitizers\", \"build the sanitizer runtimes (asan, lsan, msan, tsan, hwasan)\")\n o(\"dist-src\", \"rust.dist-src\", \"when building tarballs enables building a source tarball\")\n o(\"cargo-native-static\", \"build.cargo-native-static\", \"static native libraries in cargo\")\n o(\"profiler\", \"build.profiler\", \"build the profiler runtime\")"}, {"sha": "b5a8b694c9420d14e75c937c25d734789be8633c", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -804,7 +804,7 @@ fn supported_sanitizers(\n         \"aarch64-apple-darwin\" => darwin_libs(\"osx\", &[\"asan\", \"lsan\", \"tsan\"]),\n         \"aarch64-fuchsia\" => common_libs(\"fuchsia\", \"aarch64\", &[\"asan\"]),\n         \"aarch64-unknown-linux-gnu\" => {\n-            common_libs(\"linux\", \"aarch64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])\n+            common_libs(\"linux\", \"aarch64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\", \"hwasan\"])\n         }\n         \"x86_64-apple-darwin\" => darwin_libs(\"osx\", &[\"asan\", \"lsan\", \"tsan\"]),\n         \"x86_64-fuchsia\" => common_libs(\"fuchsia\", \"x86_64\", &[\"asan\"]),"}, {"sha": "4f7a101d2acbd09a30404b845a46691b16bbb2a2", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 87, "deletions": 2, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -7,12 +7,15 @@ The tracking issue for this feature is: [#39699](https://github.com/rust-lang/ru\n This feature allows for use of one of following sanitizers:\n \n * [AddressSanitizer][clang-asan] a fast memory error detector.\n+* [HWAddressSanitizer][clang-hwasan] a memory error detector similar to\n+  AddressSanitizer, but based on partial hardware assistance.\n * [LeakSanitizer][clang-lsan] a run-time memory leak detector.\n * [MemorySanitizer][clang-msan] a detector of uninitialized reads.\n * [ThreadSanitizer][clang-tsan] a fast data race detector.\n \n-To enable a sanitizer compile with `-Zsanitizer=address`, `-Zsanitizer=leak`,\n-`-Zsanitizer=memory` or `-Zsanitizer=thread`.\n+To enable a sanitizer compile with `-Zsanitizer=address`,\n+`-Zsanitizer=hwaddress`, `-Zsanitizer=leak`, `-Zsanitizer=memory` or\n+`-Zsanitizer=thread`.\n \n # AddressSanitizer\n \n@@ -174,6 +177,86 @@ Shadow byte legend (one shadow byte represents 8 application bytes):\n ==39249==ABORTING\n ```\n \n+# HWAddressSanitizer\n+\n+HWAddressSanitizer is a newer variant of AddressSanitizer that consumes much\n+less memory.\n+\n+HWAddressSanitizer is supported on the following targets:\n+\n+* `aarch64-linux-android`\n+* `aarch64-unknown-linux-gnu`\n+\n+HWAddressSanitizer requires `tagged-globals` target feature to instrument\n+globals. To enable this target feature compile with `-C\n+target-feature=+tagged-globals`\n+\n+## Example\n+\n+Heap buffer overflow:\n+\n+```rust\n+fn main() {\n+    let xs = vec![0, 1, 2, 3];\n+    let _y = unsafe { *xs.as_ptr().offset(4) };\n+}\n+```\n+\n+```shell\n+$ rustc main.rs -Zsanitizer=hwaddress -C target-feature=+tagged-globals -C\n+linker=aarch64-linux-gnu-gcc -C link-arg=-fuse-ld=lld --target\n+aarch64-unknown-linux-gnu\n+```\n+\n+```shell\n+$ ./main\n+==241==ERROR: HWAddressSanitizer: tag-mismatch on address 0xefdeffff0050 at pc 0xaaaae0ae4a98\n+READ of size 4 at 0xefdeffff0050 tags: 2c/00 (ptr/mem) in thread T0\n+    #0 0xaaaae0ae4a94  (/.../main+0x54a94)\n+    ...\n+\n+[0xefdeffff0040,0xefdeffff0060) is a small allocated heap chunk; size: 32 offset: 16\n+0xefdeffff0050 is located 0 bytes to the right of 16-byte region [0xefdeffff0040,0xefdeffff0050)\n+allocated here:\n+    #0 0xaaaae0acb80c  (/.../main+0x3b80c)\n+    ...\n+\n+Thread: T0 0xeffe00002000 stack: [0xffffc28ad000,0xffffc30ad000) sz: 8388608 tls: [0xffffaa10a020,0xffffaa10a7d0)\n+Memory tags around the buggy address (one tag corresponds to 16 bytes):\n+  0xfefcefffef80: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffef90: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffefa0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffefb0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffefc0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffefd0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffefe0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefcefffeff0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+=>0xfefceffff000: d7  d7  05  00  2c [00] 00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff010: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff020: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff030: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff040: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff050: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff060: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff070: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+  0xfefceffff080: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n+Tags for short granules around the buggy address (one tag corresponds to 16 bytes):\n+  0xfefcefffeff0: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n+=>0xfefceffff000: ..  ..  8c  ..  .. [..] ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n+  0xfefceffff010: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n+See https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html#short-granules for a description of short granule tags\n+Registers where the failure occurred (pc 0xaaaae0ae4a98):\n+    x0  2c00efdeffff0050  x1  0000000000000004  x2  0000000000000004  x3  0000000000000000\n+    x4  0000fffefc30ac37  x5  000000000000005d  x6  00000ffffc30ac37  x7  0000efff00000000\n+    x8  2c00efdeffff0050  x9  0200efff00000000  x10 0000000000000000  x11 0200efff00000000\n+    x12 0200effe00000310  x13 0200effe00000310  x14 0000000000000008  x15 5d00ffffc30ac360\n+    x16 0000aaaae0ad062c  x17 0000000000000003  x18 0000000000000001  x19 0000ffffc30ac658\n+    x20 4e00ffffc30ac6e0  x21 0000aaaae0ac5e10  x22 0000000000000000  x23 0000000000000000\n+    x24 0000000000000000  x25 0000000000000000  x26 0000000000000000  x27 0000000000000000\n+    x28 0000000000000000  x29 0000ffffc30ac5a0  x30 0000aaaae0ae4a98\n+SUMMARY: HWAddressSanitizer: tag-mismatch (/.../main+0x54a94)\n+```\n+\n # LeakSanitizer\n \n LeakSanitizer is run-time memory leak detector.\n@@ -321,11 +404,13 @@ Sanitizers produce symbolized stacktraces when llvm-symbolizer binary is in `PAT\n \n * [Sanitizers project page](https://github.com/google/sanitizers/wiki/)\n * [AddressSanitizer in Clang][clang-asan]\n+* [HWAddressSanitizer in Clang][clang-hwasan]\n * [LeakSanitizer in Clang][clang-lsan]\n * [MemorySanitizer in Clang][clang-msan]\n * [ThreadSanitizer in Clang][clang-tsan]\n \n [clang-asan]: https://clang.llvm.org/docs/AddressSanitizer.html\n+[clang-hwasan]: https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html\n [clang-lsan]: https://clang.llvm.org/docs/LeakSanitizer.html\n [clang-msan]: https://clang.llvm.org/docs/MemorySanitizer.html\n [clang-tsan]: https://clang.llvm.org/docs/ThreadSanitizer.html"}, {"sha": "4c0b17c7d376979eb422c9f276f4ecbbaa03b2c2", "filename": "src/test/ui/invalid/invalid-no-sanitize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -4,7 +4,7 @@ error: invalid argument for `no_sanitize`\n LL | #[no_sanitize(brontosaurus)]\n    |               ^^^^^^^^^^^^\n    |\n-   = note: expected one of: `address`, `memory` or `thread`\n+   = note: expected one of: `address`, `hwaddress`, `memory` or `thread`\n \n error: aborting due to previous error\n "}, {"sha": "ad5d0245457ec9a65b789ff07564255ed63cda41", "filename": "src/test/ui/sanitize/hwaddress.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/src%2Ftest%2Fui%2Fsanitize%2Fhwaddress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/src%2Ftest%2Fui%2Fsanitize%2Fhwaddress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fhwaddress.rs?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -0,0 +1,19 @@\n+// needs-sanitizer-support\n+// needs-sanitizer-hwaddress\n+//\n+// compile-flags: -Z sanitizer=hwaddress -O -g\n+//\n+// run-fail\n+// error-pattern: HWAddressSanitizer: tag-mismatch\n+\n+#![feature(test)]\n+\n+use std::hint::black_box;\n+\n+fn main() {\n+    let xs = vec![0, 1, 2, 3];\n+    // Avoid optimizing everything out.\n+    let xs = black_box(xs.as_ptr());\n+    let code = unsafe { *xs.offset(4) };\n+    std::process::exit(code);\n+}"}, {"sha": "ff0d845be937c7102c1eb3726b4e8fb032a1b244", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -48,6 +48,7 @@ impl EarlyProps {\n         let has_lsan = util::LSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n         let has_msan = util::MSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n         let has_tsan = util::TSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n+        let has_hwasan = util::HWASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n \n         iter_header(testfile, None, rdr, &mut |ln| {\n             // we should check if any only-<platform> exists and if it exists\n@@ -101,6 +102,10 @@ impl EarlyProps {\n                     props.ignore = true;\n                 }\n \n+                if !has_hwasan && config.parse_name_directive(ln, \"needs-sanitizer-hwaddress\") {\n+                    props.ignore = true;\n+                }\n+\n                 if config.target == \"wasm32-unknown-unknown\" && config.parse_check_run_results(ln) {\n                     props.ignore = true;\n                 }"}, {"sha": "b302953708c18d879c75a0c576a4e5c930851964", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58d72aedeee8dcce9cf227d3ac34088e88494939/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d72aedeee8dcce9cf227d3ac34088e88494939/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=58d72aedeee8dcce9cf227d3ac34088e88494939", "patch": "@@ -110,6 +110,9 @@ pub const TSAN_SUPPORTED_TARGETS: &[&str] = &[\n     \"x86_64-unknown-linux-gnu\",\n ];\n \n+pub const HWASAN_SUPPORTED_TARGETS: &[&str] =\n+    &[\"aarch64-linux-android\", \"aarch64-unknown-linux-gnu\"];\n+\n const BIG_ENDIAN: &[&str] = &[\n     \"aarch64_be\",\n     \"armebv7r\","}]}