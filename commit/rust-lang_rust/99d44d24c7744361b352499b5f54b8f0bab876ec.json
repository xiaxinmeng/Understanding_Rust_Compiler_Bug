{"sha": "99d44d24c7744361b352499b5f54b8f0bab876ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZDQ0ZDI0Yzc3NDQzNjFiMzUyNDk5YjVmNTRiOGYwYmFiODc2ZWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-07-10T02:32:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-07-17T21:57:52Z"}, "message": "librustc: Remove `copy` expressions from the language.", "tree": {"sha": "d5766f1013555590b261546af0bf9b99e766d6dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5766f1013555590b261546af0bf9b99e766d6dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99d44d24c7744361b352499b5f54b8f0bab876ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99d44d24c7744361b352499b5f54b8f0bab876ec", "html_url": "https://github.com/rust-lang/rust/commit/99d44d24c7744361b352499b5f54b8f0bab876ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99d44d24c7744361b352499b5f54b8f0bab876ec/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99b33f721954bc5290f9201c8f64003c294d0571", "url": "https://api.github.com/repos/rust-lang/rust/commits/99b33f721954bc5290f9201c8f64003c294d0571", "html_url": "https://github.com/rust-lang/rust/commit/99b33f721954bc5290f9201c8f64003c294d0571"}], "stats": {"total": 116, "additions": 13, "deletions": 103}, "files": [{"sha": "eb03d154632885a9c89ea48f408b101b15bb33cd", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -394,7 +394,6 @@ impl CFGBuilder {\n             }\n \n             ast::expr_addr_of(_, e) |\n-            ast::expr_copy(e) |\n             ast::expr_loop_body(e) |\n             ast::expr_do_body(e) |\n             ast::expr_cast(e, _) |\n@@ -520,4 +519,4 @@ impl CFGBuilder {\n     fn is_method_call(&self, expr: &ast::expr) -> bool {\n         self.method_map.contains_key(&expr.id)\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ffec833c2a5d80d5e9b7f1a7df12246ba39843a9", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -90,7 +90,6 @@ pub fn classify(e: &expr,\n                 }\n               }\n \n-              ast::expr_copy(inner) |\n               ast::expr_unary(_, _, inner) |\n               ast::expr_paren(inner) => {\n                 classify(inner, tcx)"}, {"sha": "89cf0916a18dffd63b7db67545766c78e9b0146e", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -754,7 +754,6 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n             }\n \n             ast::expr_addr_of(_, e) |\n-            ast::expr_copy(e) |\n             ast::expr_loop_body(e) |\n             ast::expr_do_body(e) |\n             ast::expr_cast(e, _) |"}, {"sha": "95733678021eac77cbe403d521d9dd86d6d64a9f", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -298,17 +298,6 @@ pub fn check_expr(e: @expr, (cx, v): (Context, visit::vt<Context>)) {\n                 _ => { }\n             }\n         }\n-        expr_copy(expr) => {\n-            // Note: This is the only place where we must check whether the\n-            // argument is copyable.  This is not because this is the only\n-            // kind of expression that may copy things, but rather because all\n-            // other copies will have been converted to moves by by the\n-            // `moves` pass if the value is not copyable.\n-            check_copy(cx,\n-                       ty::expr_ty(cx.tcx, expr),\n-                       expr.span,\n-                       \"explicit copy requires a copyable argument\");\n-        }\n         expr_repeat(element, count_expr, _) => {\n             let count = ty::eval_repeat_count(&cx.tcx, count_expr);\n             if count > 1 {"}, {"sha": "6d3f50073f2755caf536a86b3f6c181c1b43ec2b", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -83,7 +83,6 @@ pub enum lint {\n     type_limits,\n     default_methods,\n     unused_unsafe,\n-    copy_implicitly_copyable,\n \n     managed_heap_memory,\n     owned_heap_memory,\n@@ -260,14 +259,6 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         default: warn\n     }),\n \n-    (\"copy_implicitly_copyable\",\n-     LintSpec {\n-        lint: copy_implicitly_copyable,\n-        desc: \"detect unnecessary uses of `copy` on implicitly copyable \\\n-               values\",\n-        default: warn\n-    }),\n-\n     (\"unused_variable\",\n      LintSpec {\n         lint: unused_variable,\n@@ -947,26 +938,6 @@ fn lint_unused_unsafe() -> visit::vt<@mut Context> {\n     })\n }\n \n-fn lint_copy_implicitly_copyable() -> visit::vt<@mut Context> {\n-    visit::mk_vt(@visit::Visitor {\n-        visit_expr: |e, (cx, vt): (@mut Context, visit::vt<@mut Context>)| {\n-            match e.node {\n-                ast::expr_copy(subexpr) => {\n-                    let ty = ty::expr_ty(cx.tcx, subexpr);\n-                    if !ty::type_moves_by_default(cx.tcx, ty) {\n-                        cx.span_lint(copy_implicitly_copyable,\n-                                     e.span,\n-                                     \"unnecessary `copy`; this value is implicitly copyable\");\n-                    }\n-                }\n-                _ => ()\n-            }\n-            visit::visit_expr(e, (cx, vt));\n-        },\n-        .. *visit::default_visitor()\n-    })\n-}\n-\n fn lint_unused_mut() -> visit::vt<@mut Context> {\n     fn check_pat(cx: &Context, p: @ast::pat) {\n         let mut used = false;\n@@ -1179,7 +1150,6 @@ pub fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n     cx.add_lint(lint_heap());\n     cx.add_lint(lint_type_limits());\n     cx.add_lint(lint_unused_unsafe());\n-    cx.add_lint(lint_copy_implicitly_copyable());\n     cx.add_lint(lint_unused_mut());\n     cx.add_lint(lint_session());\n     cx.add_lint(lint_unnecessary_allocations());"}, {"sha": "1116ae0fd2502c21451814656ed01cf2fe8a5f07", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -511,7 +511,7 @@ fn visit_expr(expr: @expr, (this, vt): (@mut IrMaps, vt<@mut IrMaps>)) {\n       // otherwise, live nodes are not required:\n       expr_index(*) | expr_field(*) | expr_vstore(*) | expr_vec(*) |\n       expr_call(*) | expr_method_call(*) | expr_tup(*) | expr_log(*) |\n-      expr_binary(*) | expr_addr_of(*) | expr_copy(*) | expr_loop_body(*) |\n+      expr_binary(*) | expr_addr_of(*) | expr_loop_body(*) |\n       expr_do_body(*) | expr_cast(*) | expr_unary(*) | expr_break(_) |\n       expr_again(_) | expr_lit(_) | expr_ret(*) | expr_block(*) |\n       expr_assign(*) | expr_assign_op(*) | expr_mac(*) |\n@@ -1206,7 +1206,6 @@ impl Liveness {\n           }\n \n           expr_addr_of(_, e) |\n-          expr_copy(e) |\n           expr_loop_body(e) |\n           expr_do_body(e) |\n           expr_cast(e, _) |\n@@ -1481,7 +1480,7 @@ fn check_expr(expr: @expr, (this, vt): (@Liveness, vt<@Liveness>)) {\n       expr_call(*) | expr_method_call(*) | expr_if(*) | expr_match(*) |\n       expr_while(*) | expr_loop(*) | expr_index(*) | expr_field(*) |\n       expr_vstore(*) | expr_vec(*) | expr_tup(*) | expr_log(*) |\n-      expr_binary(*) | expr_copy(*) | expr_loop_body(*) | expr_do_body(*) |\n+      expr_binary(*) | expr_loop_body(*) | expr_do_body(*) |\n       expr_cast(*) | expr_unary(*) | expr_ret(*) | expr_break(*) |\n       expr_again(*) | expr_lit(_) | expr_block(*) |\n       expr_mac(*) | expr_addr_of(*) | expr_struct(*) | expr_repeat(*) |"}, {"sha": "8416e0212d845def4fa5f90271e6b3d2191e7cd0", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -426,13 +426,13 @@ impl mem_categorization_ctxt {\n           ast::expr_assign(*) | ast::expr_assign_op(*) |\n           ast::expr_fn_block(*) | ast::expr_ret(*) | ast::expr_loop_body(*) |\n           ast::expr_do_body(*) | ast::expr_unary(*) |\n-          ast::expr_method_call(*) | ast::expr_copy(*) | ast::expr_cast(*) |\n-          ast::expr_vstore(*) | ast::expr_vec(*) | ast::expr_tup(*) |\n-          ast::expr_if(*) | ast::expr_log(*) | ast::expr_binary(*) |\n-          ast::expr_while(*) | ast::expr_block(*) | ast::expr_loop(*) |\n-          ast::expr_match(*) | ast::expr_lit(*) | ast::expr_break(*) |\n-          ast::expr_mac(*) | ast::expr_again(*) | ast::expr_struct(*) |\n-          ast::expr_repeat(*) | ast::expr_inline_asm(*) => {\n+          ast::expr_method_call(*) | ast::expr_cast(*) | ast::expr_vstore(*) |\n+          ast::expr_vec(*) | ast::expr_tup(*) | ast::expr_if(*) |\n+          ast::expr_log(*) | ast::expr_binary(*) | ast::expr_while(*) |\n+          ast::expr_block(*) | ast::expr_loop(*) | ast::expr_match(*) |\n+          ast::expr_lit(*) | ast::expr_break(*) | ast::expr_mac(*) |\n+          ast::expr_again(*) | ast::expr_struct(*) | ast::expr_repeat(*) |\n+          ast::expr_inline_asm(*) => {\n             return self.cat_rvalue_node(expr, expr_ty);\n           }\n         }"}, {"sha": "6070e7bd3a51bccbc2b6e4893f7e8f69858133c2", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -454,10 +454,6 @@ impl VisitContext {\n                 self.use_expr(discr, Read, visitor);\n             }\n \n-            expr_copy(base) => {\n-                self.use_expr(base, Read, visitor);\n-            }\n-\n             expr_paren(base) => {\n                 // Note: base is not considered a *component* here, so\n                 // use `expr_mode` not `comp_mode`."}, {"sha": "adfc0b584856d7ad8db690b5516296b642e23e06", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -631,17 +631,6 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n         ast::expr_do_body(blk) => {\n             return trans_into(bcx, blk, dest);\n         }\n-        ast::expr_copy(a) => {\n-            // If we just called `trans_into(bcx, a, dest)`, then this\n-            // might *move* the value into `dest` if the value is\n-            // non-copyable. So first get a datum and then do an\n-            // explicit copy.\n-            let datumblk = trans_to_datum(bcx, a);\n-            return match dest {\n-                Ignore => datumblk.bcx,\n-                SaveIn(llval) => datumblk.copy_to(INIT, llval)\n-            };\n-        }\n         ast::expr_call(f, ref args, _) => {\n             return callee::trans_call(\n                 bcx, expr, f, callee::ArgExprs(*args), expr.id, dest);"}, {"sha": "c708331e1c4441d4e2003ec1b999a8814c958025", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -306,7 +306,7 @@ pub fn mark_for_expr(cx: &Context, e: &expr) {\n     match e.node {\n       expr_vstore(_, _) | expr_vec(_, _) | expr_struct(*) | expr_tup(_) |\n       expr_unary(_, box(_), _) | expr_unary(_, uniq, _) |\n-      expr_binary(_, add, _, _) | expr_copy(_) | expr_repeat(*) => {\n+      expr_binary(_, add, _, _) | expr_repeat(*) => {\n         node_type_needs(cx, use_repr, e.id);\n       }\n       expr_cast(base, _) => {"}, {"sha": "5910eaacc5db710c0964fc1b3d42862d8c3738e8", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -3181,7 +3181,6 @@ pub fn expr_kind(tcx: ctxt,\n         ast::expr_loop_body(*) |\n         ast::expr_do_body(*) |\n         ast::expr_block(*) |\n-        ast::expr_copy(*) |\n         ast::expr_repeat(*) |\n         ast::expr_lit(@codemap::spanned {node: lit_str(_), _}) |\n         ast::expr_vstore(_, ast::expr_vstore_slice) |"}, {"sha": "42b861b73301bac51b53b6610fbd0398323a5136", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -2518,10 +2518,6 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             fcx.write_nil(id);\n         }\n       }\n-      ast::expr_copy(a) => {\n-        check_expr_with_opt_hint(fcx, a, expected);\n-        fcx.write_ty(id, fcx.expr_ty(a));\n-      }\n       ast::expr_paren(a) => {\n         check_expr_with_opt_hint(fcx, a, expected);\n         fcx.write_ty(id, fcx.expr_ty(a));"}, {"sha": "36f2eba430c9aebe182c91d213f39d694710570e", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -1035,7 +1035,6 @@ pub mod guarantor {\n             ast::expr_loop_body(*) |\n             ast::expr_do_body(*) |\n             ast::expr_block(*) |\n-            ast::expr_copy(*) |\n             ast::expr_repeat(*) |\n             ast::expr_vec(*) => {\n                 assert!(!ty::expr_is_lval("}, {"sha": "7dafa5c7dad8aa5682356e446ca472ac40def896", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -455,7 +455,6 @@ pub enum expr_ {\n     expr_do_body(@expr),\n     expr_block(blk),\n \n-    expr_copy(@expr),\n     expr_assign(@expr, @expr),\n     expr_assign_op(node_id, binop, @expr, @expr),\n     expr_field(@expr, ident, ~[Ty]),"}, {"sha": "59754f5519ee673c9ac1156b6d98c23fea121cd9", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -94,7 +94,6 @@ pub trait AstBuilder {\n     fn expr_deref(&self, sp: span, e: @ast::expr) -> @ast::expr;\n     fn expr_unary(&self, sp: span, op: ast::unop, e: @ast::expr) -> @ast::expr;\n \n-    fn expr_copy(&self, sp: span, e: @ast::expr) -> @ast::expr;\n     fn expr_managed(&self, sp: span, e: @ast::expr) -> @ast::expr;\n     fn expr_addr_of(&self, sp: span, e: @ast::expr) -> @ast::expr;\n     fn expr_mut_addr_of(&self, sp: span, e: @ast::expr) -> @ast::expr;\n@@ -442,9 +441,6 @@ impl AstBuilder for @ExtCtxt {\n         self.expr(sp, ast::expr_unary(self.next_id(), op, e))\n     }\n \n-    fn expr_copy(&self, sp: span, e: @ast::expr) -> @ast::expr {\n-        self.expr(sp, ast::expr_copy(e))\n-    }\n     fn expr_managed(&self, sp: span, e: @ast::expr) -> @ast::expr {\n         self.expr_unary(sp, ast::box(ast::m_imm), e)\n     }"}, {"sha": "a9e8fa10c649ddd5a39a916427ec6161a113dfca", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -580,7 +580,6 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n             )\n         }\n         expr_block(ref blk) => expr_block(fld.fold_block(blk)),\n-        expr_copy(e) => expr_copy(fld.fold_expr(e)),\n         expr_assign(el, er) => {\n             expr_assign(fld.fold_expr(el), fld.fold_expr(er))\n         }"}, {"sha": "b014c5668b675512f3d3ca3a963ee3c8284d3a34", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -63,7 +63,6 @@ pub enum ObsoleteSyntax {\n     ObsoleteNamedExternModule,\n     ObsoleteMultipleLocalDecl,\n     ObsoleteMutWithMultipleBindings,\n-    ObsoletePatternCopyKeyword,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -249,10 +248,6 @@ impl ParserObsoleteMethods for Parser {\n                 \"use multiple local declarations instead of e.g. `let mut \\\n                  (x, y) = ...`.\"\n             ),\n-            ObsoletePatternCopyKeyword => (\n-                \"`copy` in patterns\",\n-                \"`copy` in patterns no longer has any effect\"\n-            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "f0b9258eaeb6bfdcd46733cad23ef080da9b9076", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -22,7 +22,7 @@ use ast::{crate, crate_cfg, decl, decl_item};\n use ast::{decl_local, default_blk, deref, div, enum_def, explicit_self};\n use ast::{expr, expr_, expr_addr_of, expr_match, expr_again};\n use ast::{expr_assign, expr_assign_op, expr_binary, expr_block};\n-use ast::{expr_break, expr_call, expr_cast, expr_copy, expr_do_body};\n+use ast::{expr_break, expr_call, expr_cast, expr_do_body};\n use ast::{expr_field, expr_fn_block, expr_if, expr_index};\n use ast::{expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac};\n use ast::{expr_method_call, expr_paren, expr_path, expr_repeat};\n@@ -84,7 +84,7 @@ use parse::obsolete::{ObsoletePurity, ObsoleteStaticMethod};\n use parse::obsolete::{ObsoleteConstItem, ObsoleteFixedLengthVectorType};\n use parse::obsolete::{ObsoleteNamedExternModule, ObsoleteMultipleLocalDecl};\n use parse::obsolete::{ObsoleteMutWithMultipleBindings};\n-use parse::obsolete::{ObsoletePatternCopyKeyword, ParserObsoleteMethods};\n+use parse::obsolete::{ParserObsoleteMethods};\n use parse::token::{can_begin_expr, get_ident_interner, ident_to_str, is_ident};\n use parse::token::{is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, keywords, special_idents};\n@@ -1704,11 +1704,6 @@ impl Parser {\n                 ex = expr_break(None);\n             }\n             hi = self.span.hi;\n-        } else if self.eat_keyword(keywords::Copy) {\n-            // COPY expression\n-            let e = self.parse_expr();\n-            ex = expr_copy(e);\n-            hi = e.span.hi;\n         } else if *self.token == token::MOD_SEP ||\n                 is_ident(&*self.token) && !self.is_keyword(keywords::True) &&\n                 !self.is_keyword(keywords::False) {\n@@ -2799,10 +2794,6 @@ impl Parser {\n             // parse ref pat\n             let mutbl = self.parse_mutability();\n             pat = self.parse_pat_ident(bind_by_ref(mutbl));\n-        } else if self.eat_keyword(keywords::Copy) {\n-            // parse copy pat\n-            self.obsolete(*self.span, ObsoletePatternCopyKeyword);\n-            pat = self.parse_pat_ident(bind_infer);\n         } else {\n             let can_be_enum_or_struct = do self.look_ahead(1) |t| {\n                 match *t {"}, {"sha": "754b7268a4afd4dcbdc1a433b4bae0e96a6d75e1", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -566,7 +566,6 @@ pub mod keywords {\n         As,\n         Break,\n         Const,\n-        Copy,\n         Do,\n         Else,\n         Enum,\n@@ -609,7 +608,6 @@ pub mod keywords {\n                 As => ident { name: 32, ctxt: 0 },\n                 Break => ident { name: 33, ctxt: 0 },\n                 Const => ident { name: 34, ctxt: 0 },\n-                Copy => ident { name: 35, ctxt: 0 },\n                 Do => ident { name: 36, ctxt: 0 },\n                 Else => ident { name: 37, ctxt: 0 },\n                 Enum => ident { name: 38, ctxt: 0 },"}, {"sha": "f14129948659afa17e49b63aa3a9417943599339", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -1344,7 +1344,6 @@ pub fn print_expr(s: @ps, expr: &ast::expr) {\n         ibox(s, 0u);\n         print_block(s, blk);\n       }\n-      ast::expr_copy(e) => { word_space(s, \"copy\"); print_expr(s, e); }\n       ast::expr_assign(lhs, rhs) => {\n         print_expr(s, lhs);\n         space(s.s);"}, {"sha": "f57dcb1588e9041be707411620debcac1eb0c128", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d44d24c7744361b352499b5f54b8f0bab876ec/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=99d44d24c7744361b352499b5f54b8f0bab876ec", "patch": "@@ -532,7 +532,6 @@ pub fn visit_expr<E:Clone>(ex: @expr, (e, v): (E, vt<E>)) {\n             (v.visit_expr)(b, (e.clone(), v));\n             (v.visit_expr)(a, (e.clone(), v));\n         }\n-        expr_copy(a) => (v.visit_expr)(a, (e.clone(), v)),\n         expr_assign_op(_, _, a, b) => {\n             (v.visit_expr)(b, (e.clone(), v));\n             (v.visit_expr)(a, (e.clone(), v));"}]}