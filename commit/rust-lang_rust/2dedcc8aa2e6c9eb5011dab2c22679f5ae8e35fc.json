{"sha": "2dedcc8aa2e6c9eb5011dab2c22679f5ae8e35fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZWRjYzhhYTJlNmM5ZWI1MDExZGFiMmMyMjY3OWY1YWU4ZTM1ZmM=", "commit": {"author": {"name": "David Rajchenbach-Teller", "email": "dteller@mozilla.com", "date": "2011-11-06T12:09:24Z"}, "committer": {"name": "David Rajchenbach-Teller", "email": "dteller@mozilla.com", "date": "2011-11-06T17:10:22Z"}, "message": "[stdlib optim] rope::node improved balancing strategy", "tree": {"sha": "6e071c46355d6e3bf060cbaf13133152ef62a4e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e071c46355d6e3bf060cbaf13133152ef62a4e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dedcc8aa2e6c9eb5011dab2c22679f5ae8e35fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dedcc8aa2e6c9eb5011dab2c22679f5ae8e35fc", "html_url": "https://github.com/rust-lang/rust/commit/2dedcc8aa2e6c9eb5011dab2c22679f5ae8e35fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dedcc8aa2e6c9eb5011dab2c22679f5ae8e35fc/comments", "author": {"login": "Yoric", "id": 10190, "node_id": "MDQ6VXNlcjEwMTkw", "avatar_url": "https://avatars.githubusercontent.com/u/10190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yoric", "html_url": "https://github.com/Yoric", "followers_url": "https://api.github.com/users/Yoric/followers", "following_url": "https://api.github.com/users/Yoric/following{/other_user}", "gists_url": "https://api.github.com/users/Yoric/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yoric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yoric/subscriptions", "organizations_url": "https://api.github.com/users/Yoric/orgs", "repos_url": "https://api.github.com/users/Yoric/repos", "events_url": "https://api.github.com/users/Yoric/events{/privacy}", "received_events_url": "https://api.github.com/users/Yoric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Yoric", "id": 10190, "node_id": "MDQ6VXNlcjEwMTkw", "avatar_url": "https://avatars.githubusercontent.com/u/10190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yoric", "html_url": "https://github.com/Yoric", "followers_url": "https://api.github.com/users/Yoric/followers", "following_url": "https://api.github.com/users/Yoric/following{/other_user}", "gists_url": "https://api.github.com/users/Yoric/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yoric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yoric/subscriptions", "organizations_url": "https://api.github.com/users/Yoric/orgs", "repos_url": "https://api.github.com/users/Yoric/repos", "events_url": "https://api.github.com/users/Yoric/events{/privacy}", "received_events_url": "https://api.github.com/users/Yoric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81a93eff938003ad026297d589d83289fb5dce3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/81a93eff938003ad026297d589d83289fb5dce3f", "html_url": "https://github.com/rust-lang/rust/commit/81a93eff938003ad026297d589d83289fb5dce3f"}], "stats": {"total": 67, "additions": 59, "deletions": 8}, "files": [{"sha": "215434c8c7f2253466a4186138392190aace90e5", "filename": "src/lib/rope.rs", "status": "modified", "additions": 59, "deletions": 8, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2dedcc8aa2e6c9eb5011dab2c22679f5ae8e35fc/src%2Flib%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dedcc8aa2e6c9eb5011dab2c22679f5ae8e35fc/src%2Flib%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frope.rs?ref=2dedcc8aa2e6c9eb5011dab2c22679f5ae8e35fc", "patch": "@@ -95,6 +95,7 @@ Safety notes:\n  */\n fn of_substr(str: @str, byte_offset: uint, byte_len: uint) -> rope {\n     if byte_len == 0u { ret node::empty; }\n+    if byte_offset + byte_len  > str::byte_len(*str) { fail; }\n     ret node::content(node::of_substr(str, byte_offset, byte_len));\n }\n \n@@ -702,18 +703,50 @@ mod node {\n     }\n \n     /*\n+    Function: of_substr\n+\n     Adopt a slice of a string as a node.\n \n     If the slice is longer than `max_leaf_char_len`, it is logically split\n     between as many leaves as necessary. Regardless, the string itself\n     is not copied.\n \n-    @param byte_start The byte offset where the slice of `str` starts.\n-    @param byte_len   The number of bytes from `str` to use.\n+    Parameters:\n+    byte_start - The byte offset where the slice of `str` starts.\n+    byte_len   - The number of bytes from `str` to use.\n+\n+    Safety note:\n+    - Behavior is undefined if `byte_start` or `byte_len` do not represent\n+     valid positions in `str`\n      */\n     fn of_substr(str: @str, byte_start: uint, byte_len: uint) -> @node {\n-        assert (byte_len > 0u);\n-        let char_len = str::char_len_range(*str, byte_start, byte_len);\n+        ret of_substr_unsafer(str, byte_start, byte_len,\n+                  str::char_len_range(*str, byte_start, byte_len));\n+    }\n+\n+    /*\n+    Function: of_substr_unsafer\n+\n+    Adopt a slice of a string as a node.\n+\n+    If the slice is longer than `max_leaf_char_len`, it is logically split\n+    between as many leaves as necessary. Regardless, the string itself\n+    is not copied.\n+\n+    byte_start - The byte offset where the slice of `str` starts.\n+    byte_len   - The number of bytes from `str` to use.\n+    char_len   - The number of chars in `str` in the interval\n+          [byte_start, byte_start+byte_len(\n+\n+    Safety note:\n+    - Behavior is undefined if `byte_start` or `byte_len` do not represent\n+     valid positions in `str`\n+    - Behavior is undefined if `char_len` does not accurately represent the\n+     number of chars between byte_start and byte_start+byte_len\n+    */\n+    fn of_substr_unsafer(str: @str, byte_start: uint, byte_len: uint,\n+                          char_len: uint) -> @node {\n+        assert(byte_start + byte_len <= str::byte_len(*str));\n         let candidate = @leaf({\n                 byte_offset: byte_start,\n                 byte_len:    byte_len,\n@@ -784,6 +817,15 @@ mod node {\n     }\n \n \n+    /*\n+    Function: tree_from_forest_destructive\n+\n+    Concatenate a forest of nodes into one tree.\n+\n+    Parameters:\n+    forest - The forest. This vector is progressively rewritten during\n+    execution and should be discarded as meaningless afterwards.\n+    */\n     fn tree_from_forest_destructive(forest: [mutable @node]) -> @node {\n         let i = 0u;\n         let len = vec::len(forest);\n@@ -796,17 +838,26 @@ mod node {\n                 let right_len= char_len(right);\n                 let left_height= height(left);\n                 let right_height=height(right);\n-                if left_len + right_len > hint_max_leaf_char_len\n-                    //TODO: Improve strategy\n-                    || left_height  >= hint_max_node_height\n-                    || right_height >= hint_max_node_height {\n+                if left_len + right_len > hint_max_leaf_char_len {\n                     if left_len <= hint_max_leaf_char_len {\n                         left = flatten(left);\n+                        left_height = height(left);\n                     }\n                     if right_len <= hint_max_leaf_char_len {\n                         right = flatten(right);\n+                        right_height = height(right);\n                     }\n                 }\n+                if left_height >= hint_max_node_height {\n+                    left = of_substr_unsafer(@serialize_node(left),\n+                                             0u,byte_len(left),\n+                                             left_len);\n+                }\n+                if right_height >= hint_max_node_height {\n+                    right = of_substr_unsafer(@serialize_node(right),\n+                                             0u,byte_len(right),\n+                                             right_len);\n+                }\n                 forest[i/2u] = concat2(left, right);\n                 i += 2u;\n             }"}]}