{"sha": "648f491977546945afa31587390041d3fdb17c61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0OGY0OTE5Nzc1NDY5NDVhZmEzMTU4NzM5MDA0MWQzZmRiMTdjNjE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-07T12:29:38Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-07T12:29:38Z"}, "message": "Enable feature gate extern_crate_item_prelude", "tree": {"sha": "1de98e2ca6770e96cc326f5274af644c1cb29cf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1de98e2ca6770e96cc326f5274af644c1cb29cf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/648f491977546945afa31587390041d3fdb17c61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/648f491977546945afa31587390041d3fdb17c61", "html_url": "https://github.com/rust-lang/rust/commit/648f491977546945afa31587390041d3fdb17c61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/648f491977546945afa31587390041d3fdb17c61/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d20f54bb1a873a16681c687a58b7946dc6924913", "url": "https://api.github.com/repos/rust-lang/rust/commits/d20f54bb1a873a16681c687a58b7946dc6924913", "html_url": "https://github.com/rust-lang/rust/commit/d20f54bb1a873a16681c687a58b7946dc6924913"}], "stats": {"total": 77, "additions": 39, "deletions": 38}, "files": [{"sha": "217064e51b880912dfd3919aeecf3f6a41cf7cb3", "filename": "src/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/648f491977546945afa31587390041d3fdb17c61/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648f491977546945afa31587390041d3fdb17c61/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=648f491977546945afa31587390041d3fdb17c61", "patch": "@@ -1,7 +1,7 @@\n use std::iter;\n \n-use crate::rustc::hir;\n-use crate::rustc_target::spec::abi::Abi;\n+use rustc::hir;\n+use rustc_target::spec::abi::Abi;\n \n use crate::prelude::*;\n "}, {"sha": "72f1046a56b0c4d7da464a2cf99d94cb72b1c898", "filename": "src/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/648f491977546945afa31587390041d3fdb17c61/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648f491977546945afa31587390041d3fdb17c61/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=648f491977546945afa31587390041d3fdb17c61", "patch": "@@ -10,8 +10,8 @@\n \n use crate::prelude::*;\n \n-use crate::rustc::middle::allocator::AllocatorKind;\n-use crate::rustc_allocator::{ALLOCATOR_METHODS, AllocatorTy};\n+use rustc::middle::allocator::AllocatorKind;\n+use rustc_allocator::{ALLOCATOR_METHODS, AllocatorTy};\n \n pub fn codegen(tcx: TyCtxt, module: &mut Module<impl Backend + 'static>, kind: AllocatorKind) {\n     let usize_ty = module.target_config().pointer_type();"}, {"sha": "bdb40411ffa2634612686074ce27f08680fdcfe5", "filename": "src/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/648f491977546945afa31587390041d3fdb17c61/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648f491977546945afa31587390041d3fdb17c61/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=648f491977546945afa31587390041d3fdb17c61", "patch": "@@ -1,6 +1,6 @@\n use crate::prelude::*;\n \n-use crate::rustc::mir::StatementKind::*;\n+use rustc::mir::StatementKind::*;\n \n bitflags! {\n     pub struct Flags: u8 {"}, {"sha": "6c55e12fde78c3b90db49bfc0279e51c614d3ecf", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/648f491977546945afa31587390041d3fdb17c61/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648f491977546945afa31587390041d3fdb17c61/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=648f491977546945afa31587390041d3fdb17c61", "patch": "@@ -606,7 +606,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     lval.write_cvalue(fx, CValue::ByVal(len, usize_layout));\n                 }\n                 Rvalue::NullaryOp(NullOp::Box, content_ty) => {\n-                    use crate::rustc::middle::lang_items::ExchangeMallocFnLangItem;\n+                    use rustc::middle::lang_items::ExchangeMallocFnLangItem;\n \n                     let usize_type = fx.cton_type(fx.tcx.types.usize).unwrap();\n                     let (size, align) = fx.layout_of(content_ty).size_and_align();"}, {"sha": "8b3c019691e86d68f50c32212439790f8ca37321", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/648f491977546945afa31587390041d3fdb17c61/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648f491977546945afa31587390041d3fdb17c61/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=648f491977546945afa31587390041d3fdb17c61", "patch": "@@ -1,6 +1,6 @@\n use std::fmt;\n \n-use crate::rustc_target::spec::{HasTargetSpec, Target};\n+use rustc_target::spec::{HasTargetSpec, Target};\n \n use cranelift_module::Module;\n "}, {"sha": "f66abe052a595df23ecc17e5a2ef4c799e92edb6", "filename": "src/constant.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/648f491977546945afa31587390041d3fdb17c61/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648f491977546945afa31587390041d3fdb17c61/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=648f491977546945afa31587390041d3fdb17c61", "patch": "@@ -1,11 +1,14 @@\n-use cranelift_module::*;\n-use crate::prelude::*;\n-use crate::rustc::mir::interpret::{\n+use std::borrow::Cow;\n+\n+use rustc::mir::interpret::{\n     read_target_uint, AllocId, AllocType, Allocation, ConstValue, EvalResult, GlobalId, Scalar,\n };\n-use crate::rustc::ty::Const;\n-use crate::rustc_mir::interpret::{EvalContext, Machine, Memory, MemoryKind, MemPlace, OpTy, PlaceTy, Pointer};\n-use std::borrow::Cow;\n+use rustc::ty::Const;\n+use rustc_mir::interpret::{EvalContext, Machine, Memory, MemoryKind, MemPlace, OpTy, PlaceTy, Pointer};\n+\n+use cranelift_module::*;\n+\n+use crate::prelude::*;\n \n #[derive(Default)]\n pub struct ConstantCx {"}, {"sha": "c7b09c22a8b477c949737b8fb4bbd56721aa62dc", "filename": "src/lib.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/648f491977546945afa31587390041d3fdb17c61/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648f491977546945afa31587390041d3fdb17c61/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=648f491977546945afa31587390041d3fdb17c61", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_private, macro_at_most_once_rep, never_type)]\n+#![feature(rustc_private, macro_at_most_once_rep, never_type, extern_crate_item_prelude)]\n #![allow(intra_doc_link_resolution_failure)]\n \n extern crate byteorder;\n@@ -26,15 +26,15 @@ extern crate target_lexicon;\n \n use std::any::Any;\n use std::fs::File;\n-use std::sync::{mpsc, Arc};\n+use std::sync::mpsc;\n \n-use crate::rustc::dep_graph::DepGraph;\n-use crate::rustc::middle::cstore::MetadataLoader;\n-use crate::rustc::session::{config::OutputFilenames, CompileIncomplete};\n-use crate::rustc::ty::query::Providers;\n-use crate::rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use crate::rustc_codegen_utils::link::out_filename;\n-use crate::syntax::symbol::Symbol;\n+use rustc::dep_graph::DepGraph;\n+use rustc::middle::cstore::MetadataLoader;\n+use rustc::session::{config::OutputFilenames, CompileIncomplete};\n+use rustc::ty::query::Providers;\n+use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_codegen_utils::link::out_filename;\n+use syntax::symbol::Symbol;\n \n use cranelift::codegen::settings;\n use cranelift_faerie::*;\n@@ -63,24 +63,22 @@ mod prelude {\n     pub use std::any::Any;\n     pub use std::collections::{HashMap, HashSet};\n \n-    pub use crate::rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-    pub use crate::rustc::mir;\n-    pub use crate::rustc::mir::interpret::AllocId;\n-    pub use crate::rustc::mir::*;\n-    pub use crate::rustc::session::{config::CrateType, Session};\n-    pub use crate::rustc::ty::layout::{self, Abi, LayoutOf, Scalar, Size, TyLayout};\n-    pub use crate::rustc::ty::{\n+    pub use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+    pub use rustc::mir::{self, interpret::AllocId, *};\n+    pub use rustc::session::{config::CrateType, Session};\n+    pub use rustc::ty::layout::{self, Abi, LayoutOf, Scalar, Size, TyLayout};\n+    pub use rustc::ty::{\n         self, subst::Substs, FnSig, Instance, InstanceDef, ParamEnv, PolyFnSig, Ty, TyCtxt,\n         TypeAndMut, TypeFoldable,\n     };\n-    pub use crate::rustc_data_structures::{\n+    pub use rustc_data_structures::{\n         fx::{FxHashMap, FxHashSet},\n         indexed_vec::Idx,\n         sync::Lrc,\n     };\n-    pub use crate::rustc_mir::monomorphize::{collector, MonoItem};\n-    pub use crate::syntax::ast::{FloatTy, IntTy, UintTy};\n-    pub use crate::syntax::source_map::DUMMY_SP;\n+    pub use rustc_mir::monomorphize::{collector, MonoItem};\n+    pub use syntax::ast::{FloatTy, IntTy, UintTy};\n+    pub use syntax::source_map::DUMMY_SP;\n \n     pub use cranelift::codegen::isa::CallConv;\n     pub use cranelift::codegen::ir::{\n@@ -379,7 +377,7 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n     let any_dynamic_crate = tcx.sess.dependency_formats.borrow()\n         .iter()\n         .any(|(_, list)| {\n-            use crate::rustc::middle::dependency_format::Linkage;\n+            use rustc::middle::dependency_format::Linkage;\n             list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n         });\n     if any_dynamic_crate {"}, {"sha": "ef9409f4bb25d319b6f412e0e7214000973ef36c", "filename": "src/main_shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/648f491977546945afa31587390041d3fdb17c61/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648f491977546945afa31587390041d3fdb17c61/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=648f491977546945afa31587390041d3fdb17c61", "patch": "@@ -6,8 +6,8 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     module: &mut Module<impl Backend + 'static>,\n ) {\n-    use crate::rustc::middle::lang_items::StartFnLangItem;\n-    use crate::rustc::session::config::EntryFnType;\n+    use rustc::middle::lang_items::StartFnLangItem;\n+    use rustc::session::config::EntryFnType;\n \n     let (main_def_id, use_start_lang_item) = match *tcx.sess.entry_fn.borrow() {\n         Some((id, _, entry_ty)) => ("}, {"sha": "bbcbd083fa7e16d94f00c0eb2ae0840406488bc5", "filename": "src/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/648f491977546945afa31587390041d3fdb17c61/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648f491977546945afa31587390041d3fdb17c61/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=648f491977546945afa31587390041d3fdb17c61", "patch": "@@ -1,5 +1,5 @@\n-use crate::rustc::middle::cstore::MetadataLoader;\n-use crate::rustc_data_structures::owning_ref::{self, OwningRef};\n+use rustc::middle::cstore::MetadataLoader;\n+use rustc_data_structures::owning_ref::{self, OwningRef};\n use std::fs::File;\n use std::path::Path;\n "}]}