{"sha": "947d7cf16db583bae255260696f022fb0e7ea4db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0N2Q3Y2YxNmRiNTgzYmFlMjU1MjYwNjk2ZjAyMmZiMGU3ZWE0ZGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-06T00:37:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-06T00:37:56Z"}, "message": "Rollup merge of #62257 - RalfJung:miri-c-str, r=estebank\n\nforward read_c_str method from Memory to Alloc\n\nThis is more convenient to call when one starts with a `Scalar` (which is the common case).\n\n`read_c_str` is only used in Miri.", "tree": {"sha": "6b7731c088332535fbb63f216dd3f0588c9d3823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b7731c088332535fbb63f216dd3f0588c9d3823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/947d7cf16db583bae255260696f022fb0e7ea4db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdH+1kCRBK7hj4Ov3rIwAAdHIIABciaQXjG33MKSm2loIQbOUB\ntxR2i4HOGsgV6D2VELsRX81ZVcIeNr2afmPARpwQpp7iViPWCgBRTKxBtbzKQssI\nZJWRlkq5L58tCktMoJQL/QFWynESU7XjXTGn+4GvJAdsyGpSpluHshw1KGMg2JMX\nhgWpsAq1fxWsHFh7M+x/Y+wdlAlQq9cNrkDQuSc5IptS1VWtIGy73x56/BiHX1Wg\nrl/7Kt7gVq4DiXuXd2oiJOK0gsXUWxH/18kLxK2TLDsCH6Z0DBlBjzNvYX/90lCG\nt4F8wPTqPjaOq9wcWUy4TAzOI/dfQfnzZeb2DjkBTRYSA2aZDVpSHwKoLBXTYI0=\n=IMBf\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b7731c088332535fbb63f216dd3f0588c9d3823\nparent 182248a466468a7599f21b414904c12daeb8d827\nparent 05f4a574f6409c932475aea0f95b6d8adfe4222b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562373476 +0200\ncommitter GitHub <noreply@github.com> 1562373476 +0200\n\nRollup merge of #62257 - RalfJung:miri-c-str, r=estebank\n\nforward read_c_str method from Memory to Alloc\n\nThis is more convenient to call when one starts with a `Scalar` (which is the common case).\n\n`read_c_str` is only used in Miri.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/947d7cf16db583bae255260696f022fb0e7ea4db", "html_url": "https://github.com/rust-lang/rust/commit/947d7cf16db583bae255260696f022fb0e7ea4db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/947d7cf16db583bae255260696f022fb0e7ea4db/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "182248a466468a7599f21b414904c12daeb8d827", "url": "https://api.github.com/repos/rust-lang/rust/commits/182248a466468a7599f21b414904c12daeb8d827", "html_url": "https://github.com/rust-lang/rust/commit/182248a466468a7599f21b414904c12daeb8d827"}, {"sha": "05f4a574f6409c932475aea0f95b6d8adfe4222b", "url": "https://api.github.com/repos/rust-lang/rust/commits/05f4a574f6409c932475aea0f95b6d8adfe4222b", "html_url": "https://github.com/rust-lang/rust/commit/05f4a574f6409c932475aea0f95b6d8adfe4222b"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "8607a7c3f1ec3568c695a7c9aec32615021a26d1", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/947d7cf16db583bae255260696f022fb0e7ea4db/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947d7cf16db583bae255260696f022fb0e7ea4db/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=947d7cf16db583bae255260696f022fb0e7ea4db", "patch": "@@ -728,6 +728,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n /// Reading and writing.\n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n+    /// Reads the given number of bytes from memory. Returns them as a slice.\n+    ///\n     /// Performs appropriate bounds checks.\n     pub fn read_bytes(\n         &self,\n@@ -741,6 +743,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         self.get(ptr.alloc_id)?.get_bytes(self, ptr, size)\n     }\n \n+    /// Reads a 0-terminated sequence of bytes from memory. Returns them as a slice.\n+    ///\n+    /// Performs appropriate bounds checks.\n+    pub fn read_c_str(&self, ptr: Scalar<M::PointerTag>) -> InterpResult<'tcx, &[u8]> {\n+        let ptr = self.force_ptr(ptr)?; // We need to read at least 1 byte, so we *need* a ptr.\n+        self.get(ptr.alloc_id)?.read_c_str(self, ptr)\n+    }\n+\n     /// Performs appropriate bounds checks.\n     pub fn copy(\n         &mut self,"}]}