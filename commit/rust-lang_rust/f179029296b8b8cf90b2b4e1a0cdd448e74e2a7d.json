{"sha": "f179029296b8b8cf90b2b4e1a0cdd448e74e2a7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNzkwMjkyOTZiOGI4Y2Y5MGIyYjRlMWEwY2RkNDQ4ZTc0ZTJhN2Q=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-03-22T14:28:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-06T22:35:48Z"}, "message": "uv_write works, buffer passing still broke, can get sockaddr_in by val\n\n.. but passing sockaddr_in by val back to C is broken, still passing by\nptr\n.. the uv_write_cb is processed, but we have a status -1.. there is\nalso valgrind spew.. so buf passing is broken, still.", "tree": {"sha": "f8e4df66cd7afb57f3048cda78855fd853f3a296", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8e4df66cd7afb57f3048cda78855fd853f3a296"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f179029296b8b8cf90b2b4e1a0cdd448e74e2a7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f179029296b8b8cf90b2b4e1a0cdd448e74e2a7d", "html_url": "https://github.com/rust-lang/rust/commit/f179029296b8b8cf90b2b4e1a0cdd448e74e2a7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f179029296b8b8cf90b2b4e1a0cdd448e74e2a7d/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da779988d586690094cefc5091b44befeb90085f", "url": "https://api.github.com/repos/rust-lang/rust/commits/da779988d586690094cefc5091b44befeb90085f", "html_url": "https://github.com/rust-lang/rust/commit/da779988d586690094cefc5091b44befeb90085f"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "906771d53c87ba499f9022c860b946b364c17ca8", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f179029296b8b8cf90b2b4e1a0cdd448e74e2a7d/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f179029296b8b8cf90b2b4e1a0cdd448e74e2a7d/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=f179029296b8b8cf90b2b4e1a0cdd448e74e2a7d", "patch": "@@ -276,7 +276,7 @@ native mod rustrt {\n         -> *libc::c_void;\n     fn rust_uv_last_error(loop_handle: *libc::c_void) -> uv_err_t;\n     fn rust_uv_ip4_addr(ip: *u8, port: libc::c_int)\n-        -> *libc::c_void;\n+        -> sockaddr_in;\n     fn rust_uv_tcp_connect(connect_ptr: *uv_connect_t,\n                            tcp_handle_ptr: *uv_tcp_t,\n                            addr: *libc::c_void,\n@@ -373,22 +373,22 @@ mod direct {\n                         data: *libc::c_void) {\n         rustrt::rust_uv_set_data_for_req(req, data);\n     }\n-    // FIXME: see github issue #1402\n+    // TODO: see github issue #1402\n     unsafe fn buf_init(input: *u8, len: uint) -> *libc::c_void {\n         ret rustrt::rust_uv_buf_init(input, len);\n     }\n-    // FIXME: see github issue #1402\n+    // TODO: see github issue #1402\n     unsafe fn ip4_addr(ip: str, port: libc::c_int)\n-    -> *libc::c_void {\n-        let addr_vec = str::bytes(ip);\n+    -> sockaddr_in {\n+        let mut addr_vec = str::bytes(ip);\n         addr_vec += [0u8]; // add null terminator\n         let addr_vec_ptr = vec::unsafe::to_ptr(addr_vec);\n         let ip_back = str::from_bytes(addr_vec);\n         io::println(#fmt(\"vec val: '%s' length: %u\",ip_back, vec::len(addr_vec)));\n         ret rustrt::rust_uv_ip4_addr(addr_vec_ptr, port);\n     }\n     // this is lame.\n-    // FIXME: see github issue #1402\n+    // TODO: see github issue #1402\n     unsafe fn free_1402(ptr: *libc::c_void) {\n         rustrt::rust_uv_free(ptr);\n     }\n@@ -962,7 +962,8 @@ crust fn on_alloc(handle: *libc::c_void,\n \n crust fn on_write_complete_cb(write_handle: *uv_write_t,\n                               status: libc::c_int) unsafe {\n-    io::println(\"beginning on_write_complete_cb\");\n+    io::println(#fmt(\"beginning on_write_complete_cb status: %d\",\n+                     status as int));\n     io::println(\"ending on_write_complete_cb\");\n }\n \n@@ -979,11 +980,12 @@ crust fn on_connect_cb(connect_handle_ptr: *uv_connect_t,\n         let write_handle = (*data).write_req as *libc::c_void;\n         io::println(#fmt(\"on_connect_cb: tcp stream: %d write_handle addr %d\",\n                         stream as int, write_handle as int));\n-        direct::write(write_handle,\n+        let write_result = direct::write(write_handle,\n                           stream as *libc::c_void,\n                           (*data).req_buf,\n                           on_write_complete_cb);\n-        io::println(\"on_connect_cb: after direct::write()\");\n+        io::println(#fmt(\"on_connect_cb: direct::write() status: %d\",\n+                         write_result as int));\n     }\n     else {\n         let loop_handle = direct::get_loop_for_uv_handle(\n@@ -1015,31 +1017,38 @@ fn impl_uv_tcp_request() unsafe {\n     // this to C..\n     let write_handle = direct::write_t();\n     let write_handle_ptr = ptr::addr_of(write_handle);\n-    io::println(#fmt(\"tcp req setup: tcp stream: %d write_handle addr %d\",\n-                    tcp_handle_ptr as int, write_handle_ptr as int));\n+    io::println(#fmt(\"tcp req: tcp stream: %d write_handle: %d\",\n+                     tcp_handle_ptr as int,\n+                     write_handle_ptr as int));\n     let req = { writer_handle: write_handle_ptr,\n                 req_buf: ptr::addr_of(req_msg) };\n-    io::println(\"building addr...\");\n-    let addr = direct::ip4_addr(\"173.194.33.40\", 80i32);\n     \n     let tcp_init_result = direct::tcp_init(\n         test_loop as *libc::c_void, tcp_handle_ptr);\n     if (tcp_init_result == 0i32) {\n         io::println(\"sucessful tcp_init_result\");\n+        \n+        io::println(\"building addr...\");\n+        let addr_val = direct::ip4_addr(\"173.194.33.40\", 80i32);\n+        io::println(#fmt(\"after build addr in rust. port: %u\",\n+                         addr_val.sin_port as uint));\n+        let addr: *libc::c_void = ptr::addr_of(addr_val) as\n+                                    *libc::c_void;\n+        \n         // this should set up the connection request..\n         let tcp_connect_result = direct::tcp_connect(\n             connect_handle_ptr, tcp_handle_ptr,\n             addr, on_connect_cb);\n         if (tcp_connect_result == 0i32) {\n-            // not set the data on the connect_req until its initialized\n+            // not set the data on the connect_req\n+            // until its initialized\n             direct::set_data_for_req(\n                 connect_handle_ptr as *libc::c_void,\n                 ptr::addr_of(req) as *libc::c_void);\n             io::println(\"before run tcp req loop\");\n             direct::run(test_loop);\n             io::println(\"after run tcp req loop\");\n-            // FIXME: see github issue #1402\n-            direct::free_1402(addr);\n+            // TODO: see github issue #1402\n         }\n         else {\n            io::println(\"direct::tcp_connect() failure\");"}, {"sha": "54b95ac6fcbc99fe37a1a3f8e763d6796b493668", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f179029296b8b8cf90b2b4e1a0cdd448e74e2a7d/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f179029296b8b8cf90b2b4e1a0cdd448e74e2a7d/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=f179029296b8b8cf90b2b4e1a0cdd448e74e2a7d", "patch": "@@ -307,13 +307,10 @@ rust_uv_write(uv_write_t* req, uv_stream_t* handle,\n \treturn uv_write(req, handle, bufs, buf_cnt, cb);\n }\n \n-extern \"C\" void*\n+extern \"C\" sockaddr_in\n rust_uv_ip4_addr(const char* ip, int port) {\n-\tsockaddr_in* addr_ptr = (sockaddr_in*)current_kernel_malloc(\n-\t\t\t\t\t\t\t  sizeof(sockaddr_in),\n-\t\t\t\t\t\t\t  \"sockaddr_in\");\n \tprintf(\"before creating addr_ptr.. ip %s port %d\\n\", ip, port);\n-\t*addr_ptr = uv_ip4_addr(\"173.194.33.40\", 80);\n-\tprintf(\"after creating .. port: %d\\n\", addr_ptr->sin_port);\n-\treturn (void*)addr_ptr;\n+\tsockaddr_in addr = uv_ip4_addr(\"173.194.33.40\", 80);\n+\tprintf(\"after creating .. port: %d\\n\", addr.sin_port);\n+\treturn addr;\n }"}]}