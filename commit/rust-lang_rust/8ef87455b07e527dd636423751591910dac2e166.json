{"sha": "8ef87455b07e527dd636423751591910dac2e166", "node_id": "C_kwDOAAsO6NoAKDhlZjg3NDU1YjA3ZTUyN2RkNjM2NDIzNzUxNTkxOTEwZGFjMmUxNjY", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-01T15:53:25Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-01T15:58:01Z"}, "message": "Minor cleanup on transmute lints", "tree": {"sha": "d5a6a6fcbac2126be40226d64dd8e8150b61890a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5a6a6fcbac2126be40226d64dd8e8150b61890a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ef87455b07e527dd636423751591910dac2e166", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef87455b07e527dd636423751591910dac2e166", "html_url": "https://github.com/rust-lang/rust/commit/8ef87455b07e527dd636423751591910dac2e166", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ef87455b07e527dd636423751591910dac2e166/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bb69c0ae024eef65acb7fd6551fdd99f1563d38", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bb69c0ae024eef65acb7fd6551fdd99f1563d38", "html_url": "https://github.com/rust-lang/rust/commit/7bb69c0ae024eef65acb7fd6551fdd99f1563d38"}], "stats": {"total": 75, "additions": 37, "deletions": 38}, "files": [{"sha": "c370941dd9c21bcfeceb7761a198182cce2b5d36", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=8ef87455b07e527dd636423751591910dac2e166", "patch": "@@ -372,10 +372,9 @@ declare_lint_pass!(Transmute => [\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Transmute {\n-    #[allow(clippy::similar_names, clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::Call(path_expr, args) = e.kind;\n+            if let ExprKind::Call(path_expr, [arg]) = e.kind;\n             if let ExprKind::Path(ref qpath) = path_expr.kind;\n             if let Some(def_id) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id();\n             if cx.tcx.is_diagnostic_item(sym::transmute, def_id);\n@@ -385,28 +384,28 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 // And see https://github.com/rust-lang/rust/issues/51911 for dereferencing raw pointers.\n                 let const_context = in_constant(cx, e.hir_id);\n \n-                let from_ty = cx.typeck_results().expr_ty(&args[0]);\n+                let from_ty = cx.typeck_results().expr_ty(arg);\n                 let to_ty = cx.typeck_results().expr_ty(e);\n \n                 // If useless_transmute is triggered, the other lints can be skipped.\n-                if useless_transmute::check(cx, e, from_ty, to_ty, args) {\n+                if useless_transmute::check(cx, e, from_ty, to_ty, arg) {\n                     return;\n                 }\n \n-                let mut linted = wrong_transmute::check(cx, e, from_ty, to_ty);\n-                linted |= crosspointer_transmute::check(cx, e, from_ty, to_ty);\n-                linted |= transmute_ptr_to_ref::check(cx, e, from_ty, to_ty, args, qpath);\n-                linted |= transmute_int_to_char::check(cx, e, from_ty, to_ty, args);\n-                linted |= transmute_ref_to_ref::check(cx, e, from_ty, to_ty, args, const_context);\n-                linted |= transmute_ptr_to_ptr::check(cx, e, from_ty, to_ty, args);\n-                linted |= transmute_int_to_bool::check(cx, e, from_ty, to_ty, args);\n-                linted |= transmute_int_to_float::check(cx, e, from_ty, to_ty, args, const_context);\n-                linted |= transmute_float_to_int::check(cx, e, from_ty, to_ty, args, const_context);\n-                linted |= transmute_num_to_bytes::check(cx, e, from_ty, to_ty, args, const_context);\n-                linted |= unsound_collection_transmute::check(cx, e, from_ty, to_ty);\n+                let linted = wrong_transmute::check(cx, e, from_ty, to_ty)\n+                    | crosspointer_transmute::check(cx, e, from_ty, to_ty)\n+                    | transmute_ptr_to_ref::check(cx, e, from_ty, to_ty, arg, qpath)\n+                    | transmute_int_to_char::check(cx, e, from_ty, to_ty, arg)\n+                    | transmute_ref_to_ref::check(cx, e, from_ty, to_ty, arg, const_context)\n+                    | transmute_ptr_to_ptr::check(cx, e, from_ty, to_ty, arg)\n+                    | transmute_int_to_bool::check(cx, e, from_ty, to_ty, arg)\n+                    | transmute_int_to_float::check(cx, e, from_ty, to_ty, arg, const_context)\n+                    | transmute_float_to_int::check(cx, e, from_ty, to_ty, arg, const_context)\n+                    | transmute_num_to_bytes::check(cx, e, from_ty, to_ty, arg, const_context)\n+                    | unsound_collection_transmute::check(cx, e, from_ty, to_ty);\n \n                 if !linted {\n-                    transmutes_expressible_as_ptr_casts::check(cx, e, from_ty, to_ty, args);\n+                    transmutes_expressible_as_ptr_casts::check(cx, e, from_ty, to_ty, arg);\n                 }\n             }\n         }"}, {"sha": "f4656283b1c13d9415e826db6659c97cf65a5277", "filename": "clippy_lints/src/transmute/transmute_float_to_int.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs?ref=8ef87455b07e527dd636423751591910dac2e166", "patch": "@@ -15,7 +15,7 @@ pub(super) fn check<'tcx>(\n     e: &'tcx Expr<'_>,\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n-    args: &'tcx [Expr<'_>],\n+    arg: &'tcx Expr<'_>,\n     const_context: bool,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n@@ -26,7 +26,7 @@ pub(super) fn check<'tcx>(\n                 e.span,\n                 &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n                 |diag| {\n-                    let mut expr = &args[0];\n+                    let mut expr = arg;\n                     let mut arg = sugg::Sugg::hir(cx, expr, \"..\");\n \n                     if let ExprKind::Unary(UnOp::Neg, inner_expr) = &expr.kind {"}, {"sha": "8c50b58ca4b862af20360774f2a4654df4fa1085", "filename": "clippy_lints/src/transmute/transmute_int_to_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_bool.rs?ref=8ef87455b07e527dd636423751591910dac2e166", "patch": "@@ -15,7 +15,7 @@ pub(super) fn check<'tcx>(\n     e: &'tcx Expr<'_>,\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n-    args: &'tcx [Expr<'_>],\n+    arg: &'tcx Expr<'_>,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n         (ty::Int(ty::IntTy::I8) | ty::Uint(ty::UintTy::U8), ty::Bool) => {\n@@ -25,7 +25,7 @@ pub(super) fn check<'tcx>(\n                 e.span,\n                 &format!(\"transmute from a `{}` to a `bool`\", from_ty),\n                 |diag| {\n-                    let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n+                    let arg = sugg::Sugg::hir(cx, arg, \"..\");\n                     let zero = sugg::Sugg::NonParen(Cow::from(\"0\"));\n                     diag.span_suggestion(\n                         e.span,"}, {"sha": "3eb07b68992a89b96ff10c4a40277023c8878536", "filename": "clippy_lints/src/transmute/transmute_int_to_char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs?ref=8ef87455b07e527dd636423751591910dac2e166", "patch": "@@ -14,7 +14,7 @@ pub(super) fn check<'tcx>(\n     e: &'tcx Expr<'_>,\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n-    args: &'tcx [Expr<'_>],\n+    arg: &'tcx Expr<'_>,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n         (ty::Int(ty::IntTy::I32) | ty::Uint(ty::UintTy::U32), &ty::Char) => {\n@@ -24,7 +24,7 @@ pub(super) fn check<'tcx>(\n                 e.span,\n                 &format!(\"transmute from a `{}` to a `char`\", from_ty),\n                 |diag| {\n-                    let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n+                    let arg = sugg::Sugg::hir(cx, arg, \"..\");\n                     let arg = if let ty::Int(_) = from_ty.kind() {\n                         arg.as_ty(ast::UintTy::U32.name_str())\n                     } else {"}, {"sha": "b8703052e6c869750a09751579885123c0e1143a", "filename": "clippy_lints/src/transmute/transmute_int_to_float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_float.rs?ref=8ef87455b07e527dd636423751591910dac2e166", "patch": "@@ -13,7 +13,7 @@ pub(super) fn check<'tcx>(\n     e: &'tcx Expr<'_>,\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n-    args: &'tcx [Expr<'_>],\n+    arg: &'tcx Expr<'_>,\n     const_context: bool,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n@@ -24,7 +24,7 @@ pub(super) fn check<'tcx>(\n                 e.span,\n                 &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n                 |diag| {\n-                    let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n+                    let arg = sugg::Sugg::hir(cx, arg, \"..\");\n                     let arg = if let ty::Int(int_ty) = from_ty.kind() {\n                         arg.as_ty(format!(\n                             \"u{}\","}, {"sha": "52d193d11e1a08dab87adca2de3548d904b3d16f", "filename": "clippy_lints/src/transmute/transmute_num_to_bytes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_num_to_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_num_to_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_num_to_bytes.rs?ref=8ef87455b07e527dd636423751591910dac2e166", "patch": "@@ -13,7 +13,7 @@ pub(super) fn check<'tcx>(\n     e: &'tcx Expr<'_>,\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n-    args: &'tcx [Expr<'_>],\n+    arg: &'tcx Expr<'_>,\n     const_context: bool,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n@@ -33,7 +33,7 @@ pub(super) fn check<'tcx>(\n                 e.span,\n                 &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n                 |diag| {\n-                    let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n+                    let arg = sugg::Sugg::hir(cx, arg, \"..\");\n                     diag.span_suggestion(\n                         e.span,\n                         \"consider using `to_ne_bytes()`\","}, {"sha": "d712b33de9e1a49ead17804603354e5d09055bcd", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ptr.rs?ref=8ef87455b07e527dd636423751591910dac2e166", "patch": "@@ -13,7 +13,7 @@ pub(super) fn check<'tcx>(\n     e: &'tcx Expr<'_>,\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n-    args: &'tcx [Expr<'_>],\n+    arg: &'tcx Expr<'_>,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n         (ty::RawPtr(_), ty::RawPtr(to_ty)) => {\n@@ -23,7 +23,7 @@ pub(super) fn check<'tcx>(\n                 e.span,\n                 \"transmute from a pointer to a pointer\",\n                 |diag| {\n-                    if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                    if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n                         let sugg = arg.as_ty(cx.tcx.mk_ptr(*to_ty));\n                         diag.span_suggestion(e.span, \"try\", sugg.to_string(), Applicability::Unspecified);\n                     }"}, {"sha": "5699f8e92cfca82428614d957a7075a249f6e071", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=8ef87455b07e527dd636423751591910dac2e166", "patch": "@@ -14,7 +14,7 @@ pub(super) fn check<'tcx>(\n     e: &'tcx Expr<'_>,\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n-    args: &'tcx [Expr<'_>],\n+    arg: &'tcx Expr<'_>,\n     qpath: &'tcx QPath<'_>,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n@@ -28,7 +28,7 @@ pub(super) fn check<'tcx>(\n                     from_ty, to_ty\n                 ),\n                 |diag| {\n-                    let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n+                    let arg = sugg::Sugg::hir(cx, arg, \"..\");\n                     let (deref, cast) = if *mutbl == Mutability::Mut {\n                         (\"&mut *\", \"*mut\")\n                     } else {"}, {"sha": "fdef8bac7f9b093faf73679e13d3c319596b69c9", "filename": "clippy_lints/src/transmute/transmute_ref_to_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs?ref=8ef87455b07e527dd636423751591910dac2e166", "patch": "@@ -15,7 +15,7 @@ pub(super) fn check<'tcx>(\n     e: &'tcx Expr<'_>,\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n-    args: &'tcx [Expr<'_>],\n+    arg: &'tcx Expr<'_>,\n     const_context: bool,\n ) -> bool {\n     let mut triggered = false;\n@@ -41,7 +41,7 @@ pub(super) fn check<'tcx>(\n                     format!(\n                         \"std::str::from_utf8{}({}).unwrap()\",\n                         postfix,\n-                        snippet(cx, args[0].span, \"..\"),\n+                        snippet(cx, arg.span, \"..\"),\n                     ),\n                     Applicability::Unspecified,\n                 );\n@@ -54,7 +54,7 @@ pub(super) fn check<'tcx>(\n                         TRANSMUTE_PTR_TO_PTR,\n                         e.span,\n                         \"transmute from a reference to a reference\",\n-                        |diag| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                        |diag| if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n                             let ty_from_and_mut = ty::TypeAndMut {\n                                 ty: ty_from,\n                                 mutbl: *from_mutbl"}, {"sha": "626d7cd46fc43c1383717d3b670780df06bc6201", "filename": "clippy_lints/src/transmute/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs?ref=8ef87455b07e527dd636423751591910dac2e166", "patch": "@@ -14,7 +14,7 @@ pub(super) fn check<'tcx>(\n     e: &'tcx Expr<'_>,\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n-    args: &'tcx [Expr<'_>],\n+    arg: &'tcx Expr<'_>,\n ) -> bool {\n     if can_be_expressed_as_pointer_cast(cx, e, from_ty, to_ty) {\n         span_lint_and_then(\n@@ -26,7 +26,7 @@ pub(super) fn check<'tcx>(\n                 from_ty, to_ty\n             ),\n             |diag| {\n-                if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n                     let sugg = arg.as_ty(&to_ty.to_string()).to_string();\n                     diag.span_suggestion(e.span, \"try\", sugg, Applicability::MachineApplicable);\n                 }"}, {"sha": "998f97eb5d8c65990e2f7348a256a16c6b8072ec", "filename": "clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef87455b07e527dd636423751591910dac2e166/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=8ef87455b07e527dd636423751591910dac2e166", "patch": "@@ -13,7 +13,7 @@ pub(super) fn check<'tcx>(\n     e: &'tcx Expr<'_>,\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n-    args: &'tcx [Expr<'_>],\n+    arg: &'tcx Expr<'_>,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n         _ if from_ty == to_ty => {\n@@ -32,7 +32,7 @@ pub(super) fn check<'tcx>(\n                 e.span,\n                 \"transmute from a reference to a pointer\",\n                 |diag| {\n-                    if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                    if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n                         let rty_and_mut = ty::TypeAndMut {\n                             ty: rty,\n                             mutbl: *rty_mutbl,\n@@ -57,7 +57,7 @@ pub(super) fn check<'tcx>(\n                 e.span,\n                 \"transmute from an integer to a pointer\",\n                 |diag| {\n-                    if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                    if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n                         diag.span_suggestion(\n                             e.span,\n                             \"try\","}]}