{"sha": "c1e287af7788261bd50f47a166fbbd3493355a38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZTI4N2FmNzc4ODI2MWJkNTBmNDdhMTY2ZmJiZDM0OTMzNTVhMzg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-12T09:29:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-30T02:36:14Z"}, "message": "Make -Z gen-crate-map usable for I/O\n\nIn #10422, I didn't actually test to make sure that the '-Z gen-crate-map'\noption was usable before I implemented it. The crate map was indeed generated\nwhen '-Z gen-crate-map' was specified, but the I/O factory slot was empty\nbecause of an extra check in trans about filling in that location.\n\nThis commit both fixes that location, and checks in a \"fancy test\" which does\nlots of fun stuff. The test will use the rustc library to compile a rust crate,\nand then compile a C program to link against that crate and run the C program.\nTo my knowledge this is the first test of its kind, so it's a little ad-hoc, but\nit seems to get the job done. We could perhaps generalize running tests like\nthis, but for now I think it's fine to have this sort of functionality tucked\naway in a test.", "tree": {"sha": "d45b71b942fc8793a20338ba8406a2abe54a2d9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d45b71b942fc8793a20338ba8406a2abe54a2d9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1e287af7788261bd50f47a166fbbd3493355a38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1e287af7788261bd50f47a166fbbd3493355a38", "html_url": "https://github.com/rust-lang/rust/commit/c1e287af7788261bd50f47a166fbbd3493355a38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1e287af7788261bd50f47a166fbbd3493355a38/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d6ccb75ff2240ed294fcf6aa57e96c72316954c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6ccb75ff2240ed294fcf6aa57e96c72316954c", "html_url": "https://github.com/rust-lang/rust/commit/6d6ccb75ff2240ed294fcf6aa57e96c72316954c"}], "stats": {"total": 71, "additions": 61, "deletions": 10}, "files": [{"sha": "deb4f00d7a02fb425249a1f658d0d43408545ac0", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c1e287af7788261bd50f47a166fbbd3493355a38/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e287af7788261bd50f47a166fbbd3493355a38/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c1e287af7788261bd50f47a166fbbd3493355a38", "patch": "@@ -77,7 +77,7 @@ use extra::time;\n use extra::sort;\n use syntax::ast::Name;\n use syntax::ast_map::{path, path_elt_to_str, path_name, path_pretty_name};\n-use syntax::ast_util::{local_def};\n+use syntax::ast_util::{local_def, is_local};\n use syntax::attr;\n use syntax::codemap::Span;\n use syntax::parse::token;\n@@ -2996,7 +2996,7 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n     return map;\n }\n \n-pub fn fill_crate_map(ccx: &mut CrateContext, map: ValueRef) {\n+pub fn fill_crate_map(ccx: @mut CrateContext, map: ValueRef) {\n     let mut subcrates: ~[ValueRef] = ~[];\n     let mut i = 1;\n     let cstore = ccx.sess.cstore;\n@@ -3014,19 +3014,20 @@ pub fn fill_crate_map(ccx: &mut CrateContext, map: ValueRef) {\n         subcrates.push(p2i(ccx, cr));\n         i += 1;\n     }\n-    let event_loop_factory = if !*ccx.sess.building_library {\n-        match ccx.tcx.lang_items.event_loop_factory() {\n-            Some(did) => unsafe {\n+    let event_loop_factory = match ccx.tcx.lang_items.event_loop_factory() {\n+        Some(did) => unsafe {\n+            if is_local(did) {\n+                llvm::LLVMConstPointerCast(get_item_val(ccx, did.node),\n+                                           ccx.int_type.ptr_to().to_ref())\n+            } else {\n                 let name = csearch::get_symbol(ccx.sess.cstore, did);\n                 let global = name.with_c_str(|buf| {\n                     llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type.to_ref(), buf)\n                 });\n                 global\n-            },\n-            None => C_null(ccx.int_type.ptr_to())\n-        }\n-    } else {\n-        C_null(ccx.int_type.ptr_to())\n+            }\n+        },\n+        None => C_null(ccx.int_type.ptr_to())\n     };\n     unsafe {\n         let maptype = Type::array(&ccx.int_type, subcrates.len() as u64);"}, {"sha": "7f466573da73087c0b72de342dd54fdadde6cdb4", "filename": "src/test/run-make/bootstrap-from-c-with-uvio/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c1e287af7788261bd50f47a166fbbd3493355a38/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c1e287af7788261bd50f47a166fbbd3493355a38/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2FMakefile?ref=c1e287af7788261bd50f47a166fbbd3493355a38", "patch": "@@ -0,0 +1,9 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) lib.rs -Z gen-crate-map\n+\tln -nsf $(call DYLIB,boot-*) $(call DYLIB,boot)\n+\t$(CC) main.c -o $(call RUN,main) -lboot -Wl,-rpath,$(TMPDIR)\n+\t$(call RUN,main)\n+\trm $(call DYLIB,boot)\n+\t$(call FAIL,main)"}, {"sha": "85941ec74a8da64a0f87b6b429e00796a49ce6f4", "filename": "src/test/run-make/bootstrap-from-c-with-uvio/lib.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c1e287af7788261bd50f47a166fbbd3493355a38/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e287af7788261bd50f47a166fbbd3493355a38/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2Flib.rs?ref=c1e287af7788261bd50f47a166fbbd3493355a38", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[link(package_id = \"boot\", name = \"boot\", vers = \"0.1\")];\n+#[crate_type = \"lib\"];\n+\n+extern mod rustuv; // pull in uvio\n+\n+use std::rt;\n+\n+#[no_mangle] // this needs to get called from C\n+pub extern \"C\" fn foo(argc: int, argv: **u8) -> int {\n+    do rt::start(argc, argv) {\n+        do spawn {\n+            println!(\"hello\");\n+        }\n+    }\n+}"}, {"sha": "1872c1ea43b1139cfaf90e728d6f11d8c07c2c52", "filename": "src/test/run-make/bootstrap-from-c-with-uvio/main.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c1e287af7788261bd50f47a166fbbd3493355a38/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2Fmain.c", "raw_url": "https://github.com/rust-lang/rust/raw/c1e287af7788261bd50f47a166fbbd3493355a38/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2Fmain.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-uvio%2Fmain.c?ref=c1e287af7788261bd50f47a166fbbd3493355a38", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// this is the rust entry point that we're going to call.\n+int foo(int argc, char *argv[]);\n+\n+int main(int argc, char *argv[]) {\n+  return foo(argc, argv);\n+}"}]}