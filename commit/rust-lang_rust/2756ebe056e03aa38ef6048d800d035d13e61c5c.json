{"sha": "2756ebe056e03aa38ef6048d800d035d13e61c5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NTZlYmUwNTZlMDNhYTM4ZWY2MDQ4ZDgwMGQwMzVkMTNlNjFjNWM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-13T17:44:45Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-13T18:42:51Z"}, "message": "rustup", "tree": {"sha": "04410be323af8a2ab20ccf4b152befda945acff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04410be323af8a2ab20ccf4b152befda945acff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2756ebe056e03aa38ef6048d800d035d13e61c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2756ebe056e03aa38ef6048d800d035d13e61c5c", "html_url": "https://github.com/rust-lang/rust/commit/2756ebe056e03aa38ef6048d800d035d13e61c5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2756ebe056e03aa38ef6048d800d035d13e61c5c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d", "html_url": "https://github.com/rust-lang/rust/commit/426a3ee1e7a9832d9f3cd1ac0aba0bcf5a3caa0d"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "c966c49be85f619eb4d3f4763c89308195ace221", "filename": "src/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2756ebe056e03aa38ef6048d800d035d13e61c5c/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2756ebe056e03aa38ef6048d800d035d13e61c5c/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=2756ebe056e03aa38ef6048d800d035d13e61c5c", "patch": "@@ -18,15 +18,15 @@ declare_lint!(pub LINKEDLIST, Warn,\n /// Matches a type with a provided string, and returns its type parameters if successful\n pub fn match_ty_unwrap<'a>(ty: &'a Ty, segments: &[&str]) -> Option<&'a [P<Ty>]> {\n     match ty.node {\n-        TyPath(Path {segments: ref seg, ..}, _) => {\n+        TyPath(_, Path {segments: ref seg, ..}) => {\n             // So ast::Path isn't the full path, just the tokens that were provided.\n             // I could muck around with the maps and find the full path\n             // however the more efficient way is to simply reverse the iterators and zip them\n             // which will compare them in reverse until one of them runs out of segments\n             if seg.iter().rev().zip(segments.iter().rev()).all(|(a,b)| a.identifier.as_str() == *b) {\n-                match seg.as_slice().last() {\n+                match seg[..].last() {\n                     Some(&PathSegment {parameters: AngleBracketedParameters(ref a), ..}) => {\n-                        Some(a.types.as_slice())\n+                        Some(&a.types[..])\n                     }\n                     _ => None\n                 }\n@@ -74,7 +74,7 @@ impl LintPass for TypePass {\n                       vec![\"std\",\"collections\",\"linked_list\",\"LinkedList\"],\n                       vec![\"collections\",\"linked_list\",\"LinkedList\"]];\n         for path in dlists.iter() {\n-            if match_ty_unwrap(ty, path.as_slice()).is_some() {\n+            if match_ty_unwrap(ty, &path[..]).is_some() {\n                 span_note_and_lint(cx, LINKEDLIST, ty.span,\n                                    \"I see you're using a LinkedList! Perhaps you meant some other data structure?\",\n                                    \"A RingBuf might work.\");"}]}