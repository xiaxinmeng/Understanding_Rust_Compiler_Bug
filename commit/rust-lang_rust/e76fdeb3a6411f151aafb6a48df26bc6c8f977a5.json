{"sha": "e76fdeb3a6411f151aafb6a48df26bc6c8f977a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NmZkZWIzYTY0MTFmMTUxYWFmYjZhNDhkZjI2YmM2YzhmOTc3YTU=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-01T03:30:26Z"}, "committer": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-04T03:41:48Z"}, "message": "Change the type for the macro body to also store the span.\n\nNote: the body is the part of the macro syntax between the {}.", "tree": {"sha": "cf0615c34a821eef5c4d83248da911d9c81745d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf0615c34a821eef5c4d83248da911d9c81745d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5", "html_url": "https://github.com/rust-lang/rust/commit/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "099290bc7385477ab6c9908abb3b540e8cb6956a", "url": "https://api.github.com/repos/rust-lang/rust/commits/099290bc7385477ab6c9908abb3b540e8cb6956a", "html_url": "https://github.com/rust-lang/rust/commit/099290bc7385477ab6c9908abb3b540e8cb6956a"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "8ed392d011b716ce6788fc10a22bc942ce417e64", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=e76fdeb3a6411f151aafb6a48df26bc6c8f977a5", "patch": "@@ -272,8 +272,11 @@ enum blk_sort {\n \n type mac = spanned<mac_>;\n \n+type mac_body_ = {str: str, span: span};\n+type mac_body = option::t<mac_body_>;\n+\n enum mac_ {\n-    mac_invoc(@path, @expr, option<str>),\n+    mac_invoc(@path, @expr, mac_body),\n     mac_embed_type(@ty),\n     mac_embed_block(blk),\n     mac_ellipsis,"}, {"sha": "d15d74c895185f9ba9d6ba0d08fbe0090c611b71", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=e76fdeb3a6411f151aafb6a48df26bc6c8f977a5", "patch": "@@ -6,10 +6,10 @@ import std::map::new_str_hash;\n import codemap;\n \n type syntax_expander =\n-    fn@(ext_ctxt, span, @ast::expr, option<str>) -> @ast::expr;\n+    fn@(ext_ctxt, span, @ast::expr, ast::mac_body) -> @ast::expr;\n type macro_def = {ident: str, ext: syntax_extension};\n type macro_definer =\n-    fn@(ext_ctxt, span, @ast::expr, option<str>) -> macro_def;\n+    fn@(ext_ctxt, span, @ast::expr, ast::mac_body) -> macro_def;\n \n enum syntax_extension {\n     normal(syntax_expander),"}, {"sha": "3a4c59e4960cd73f4d25d6ea53582e1d4e97349d", "filename": "src/comp/syntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fconcat_idents.rs?ref=e76fdeb3a6411f151aafb6a48df26bc6c8f977a5", "patch": "@@ -3,7 +3,7 @@ import base::*;\n import syntax::ast;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: @ast::expr,\n-                     _body: option<str>) -> @ast::expr {\n+                     _body: ast::mac_body) -> @ast::expr {\n     let args: [@ast::expr] =\n         alt arg.node {\n           ast::expr_vec(elts, _) { elts }"}, {"sha": "509f721127c93dbbd70833b2f01dce5ebfeefba6", "filename": "src/comp/syntax/ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fenv.rs?ref=e76fdeb3a6411f151aafb6a48df26bc6c8f977a5", "patch": "@@ -10,7 +10,7 @@ import base::*;\n export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: @ast::expr,\n-                     _body: option<str>) -> @ast::expr {\n+                     _body: ast::mac_body) -> @ast::expr {\n     let args: [@ast::expr] =\n         alt arg.node {\n           ast::expr_vec(elts, _) { elts }"}, {"sha": "b0a346131d63a393df9e4fac6d87ba09f95921d0", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=e76fdeb3a6411f151aafb6a48df26bc6c8f977a5", "patch": "@@ -14,7 +14,7 @@ import syntax::ext::build::*;\n export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: span, arg: @ast::expr,\n-                     _body: option<str>) -> @ast::expr {\n+                     _body: ast::mac_body) -> @ast::expr {\n     let args: [@ast::expr] =\n         alt arg.node {\n           ast::expr_vec(elts, _) { elts }"}, {"sha": "f5e61bbae3ed76b3b74f9326cdad0873eff21285", "filename": "src/comp/syntax/ext/ident_to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fident_to_str.rs?ref=e76fdeb3a6411f151aafb6a48df26bc6c8f977a5", "patch": "@@ -3,7 +3,7 @@ import base::*;\n import syntax::ast;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: @ast::expr,\n-                     _body: option<str>) -> @ast::expr {\n+                     _body: ast::mac_body) -> @ast::expr {\n     let args: [@ast::expr] =\n         alt arg.node {\n           ast::expr_vec(elts, _) { elts }"}, {"sha": "bfdd336e1ef03b24e95a3142256b9ae63f98e438", "filename": "src/comp/syntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Flog_syntax.rs?ref=e76fdeb3a6411f151aafb6a48df26bc6c8f977a5", "patch": "@@ -3,7 +3,7 @@ import syntax::ast;\n import std::io::writer_util;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, arg: @ast::expr,\n-                     _body: option<str>) -> @ast::expr {\n+                     _body: ast::mac_body) -> @ast::expr {\n \n     cx.print_backtrace();\n     std::io::stdout().write_line(print::pprust::expr_to_str(arg));"}, {"sha": "d35c76838fce7b386cddc16db7b5c9f457d110a3", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e76fdeb3a6411f151aafb6a48df26bc6c8f977a5/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=e76fdeb3a6411f151aafb6a48df26bc6c8f977a5", "patch": "@@ -670,7 +670,7 @@ fn p_t_s_r_actual_vector(cx: ext_ctxt, elts: [@expr], _repeat_after: bool,\n }\n \n fn add_new_extension(cx: ext_ctxt, sp: span, arg: @expr,\n-                     _body: option<str>) -> base::macro_def {\n+                     _body: ast::mac_body) -> base::macro_def {\n     let args: [@ast::expr] =\n         alt arg.node {\n           ast::expr_vec(elts, _) { elts }\n@@ -754,7 +754,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, arg: @expr,\n          ext: normal(ext)};\n \n     fn generic_extension(cx: ext_ctxt, sp: span, arg: @expr,\n-                         _body: option<str>, clauses: [@clause]) -> @expr {\n+                         _body: ast::mac_body, clauses: [@clause]) -> @expr {\n         for c: @clause in clauses {\n             alt use_selectors_to_bind(c.params, arg) {\n               some(bindings) { ret transcribe(cx, bindings, c.body); }"}]}