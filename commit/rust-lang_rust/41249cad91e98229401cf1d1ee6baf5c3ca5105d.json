{"sha": "41249cad91e98229401cf1d1ee6baf5c3ca5105d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMjQ5Y2FkOTFlOTgyMjk0MDFjZjFkMWVlNmJhZjVjM2NhNTEwNWQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-31T15:54:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-31T15:54:57Z"}, "message": "Rollup merge of #88445 - inquisitivecrystal:ast-lowering, r=cjgillot\n\nClean up the lowering of AST items\n\nThis PR simplifies and improves `rustc_ast_lowering::item` in various minor ways. The reasons for the changes should mostly be self evident, though I'm happy to specifically explain anything if needed.\n\nThese changes used to be part of #88019, but I removed them after it was pointed out that some of my other changes to `rustc_ast_lowering` were unnecessary. It felt like a bad idea to clean up code which I didn't even need to touch anymore.\n\nr? `@cjgillot`", "tree": {"sha": "53cb3750b0f2e99f8ba9bf187e27b88c0bbbda99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53cb3750b0f2e99f8ba9bf187e27b88c0bbbda99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41249cad91e98229401cf1d1ee6baf5c3ca5105d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhLlDSCRBK7hj4Ov3rIwAAvpsIAK78Z82N6k+ySBY5Fse5Zaw5\nu2gD9X9/wIozJ/hf4noIvCz9qEu3HTgZLEATqZmLWXi0tORrOaglYHwsaBwqPf7Q\neSXf3h7pV2tzGiskk6+WKRdynk8X95Qbs4Ntoi5w+zrnjVDqnrwR/E5Jqun5w2Kt\nnN76TFlt4sDISIEYG0pFVPk7KAxeJvhDdAIbNRWfj8QiTY7h0ATSvU/Ea/SDbZzI\n56r5KrEZBDDHbtZM5w90pGb/JKet/bJFKKh13Ot8+Xw7ppOYhoNtLUZEbWBBlDuN\nj/4VbkXJ2Rm3CT6tpth+59jtWB8/IqDoUGuCWueRlaauGsMzkcvNy0x7u703p0Q=\n=cLeP\n-----END PGP SIGNATURE-----\n", "payload": "tree 53cb3750b0f2e99f8ba9bf187e27b88c0bbbda99\nparent ab37e49611367aa1dfeaf3b3003352a1afa2dd02\nparent 147f74a3c3dff673fc40f175161ab65c67c0ca82\nauthor Mara Bos <m-ou.se@m-ou.se> 1630425297 +0200\ncommitter GitHub <noreply@github.com> 1630425297 +0200\n\nRollup merge of #88445 - inquisitivecrystal:ast-lowering, r=cjgillot\n\nClean up the lowering of AST items\n\nThis PR simplifies and improves `rustc_ast_lowering::item` in various minor ways. The reasons for the changes should mostly be self evident, though I'm happy to specifically explain anything if needed.\n\nThese changes used to be part of #88019, but I removed them after it was pointed out that some of my other changes to `rustc_ast_lowering` were unnecessary. It felt like a bad idea to clean up code which I didn't even need to touch anymore.\n\nr? `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41249cad91e98229401cf1d1ee6baf5c3ca5105d", "html_url": "https://github.com/rust-lang/rust/commit/41249cad91e98229401cf1d1ee6baf5c3ca5105d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41249cad91e98229401cf1d1ee6baf5c3ca5105d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab37e49611367aa1dfeaf3b3003352a1afa2dd02", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab37e49611367aa1dfeaf3b3003352a1afa2dd02", "html_url": "https://github.com/rust-lang/rust/commit/ab37e49611367aa1dfeaf3b3003352a1afa2dd02"}, {"sha": "147f74a3c3dff673fc40f175161ab65c67c0ca82", "url": "https://api.github.com/repos/rust-lang/rust/commits/147f74a3c3dff673fc40f175161ab65c67c0ca82", "html_url": "https://github.com/rust-lang/rust/commit/147f74a3c3dff673fc40f175161ab65c67c0ca82"}], "stats": {"total": 62, "additions": 29, "deletions": 33}, "files": [{"sha": "8daeef0cbd95fbaa0e8c5f869fcf9eaf9079d84e", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 29, "deletions": 33, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/41249cad91e98229401cf1d1ee6baf5c3ca5105d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41249cad91e98229401cf1d1ee6baf5c3ca5105d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=41249cad91e98229401cf1d1ee6baf5c3ca5105d", "patch": "@@ -26,44 +26,43 @@ pub(super) struct ItemLowerer<'a, 'lowering, 'hir> {\n }\n \n impl ItemLowerer<'_, '_, '_> {\n-    fn with_trait_impl_ref(&mut self, impl_ref: &Option<TraitRef>, f: impl FnOnce(&mut Self)) {\n+    fn with_trait_impl_ref<T>(\n+        &mut self,\n+        impl_ref: &Option<TraitRef>,\n+        f: impl FnOnce(&mut Self) -> T,\n+    ) -> T {\n         let old = self.lctx.is_in_trait_impl;\n         self.lctx.is_in_trait_impl = impl_ref.is_some();\n-        f(self);\n+        let ret = f(self);\n         self.lctx.is_in_trait_impl = old;\n+        ret\n     }\n }\n \n impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n     fn visit_item(&mut self, item: &'a Item) {\n-        let mut item_hir_id = None;\n-        self.lctx.with_hir_id_owner(item.id, |lctx| {\n+        let hir_id = self.lctx.with_hir_id_owner(item.id, |lctx| {\n             lctx.without_in_scope_lifetime_defs(|lctx| {\n-                if let Some(hir_item) = lctx.lower_item(item) {\n-                    let id = lctx.insert_item(hir_item);\n-                    item_hir_id = Some(id);\n-                }\n+                let hir_item = lctx.lower_item(item);\n+                lctx.insert_item(hir_item)\n             })\n         });\n \n-        if let Some(hir_id) = item_hir_id {\n-            self.lctx.with_parent_item_lifetime_defs(hir_id, |this| {\n-                let this = &mut ItemLowerer { lctx: this };\n-                match item.kind {\n-                    ItemKind::Mod(..) => {\n-                        let def_id = this.lctx.lower_node_id(item.id).expect_owner();\n-                        let old_current_module =\n-                            mem::replace(&mut this.lctx.current_module, def_id);\n-                        visit::walk_item(this, item);\n-                        this.lctx.current_module = old_current_module;\n-                    }\n-                    ItemKind::Impl(box ImplKind { ref of_trait, .. }) => {\n-                        this.with_trait_impl_ref(of_trait, |this| visit::walk_item(this, item));\n-                    }\n-                    _ => visit::walk_item(this, item),\n+        self.lctx.with_parent_item_lifetime_defs(hir_id, |this| {\n+            let this = &mut ItemLowerer { lctx: this };\n+            match item.kind {\n+                ItemKind::Mod(..) => {\n+                    let def_id = this.lctx.lower_node_id(item.id).expect_owner();\n+                    let old_current_module = mem::replace(&mut this.lctx.current_module, def_id);\n+                    visit::walk_item(this, item);\n+                    this.lctx.current_module = old_current_module;\n                 }\n-            });\n-        }\n+                ItemKind::Impl(box ImplKind { ref of_trait, .. }) => {\n+                    this.with_trait_impl_ref(of_trait, |this| visit::walk_item(this, item));\n+                }\n+                _ => visit::walk_item(this, item),\n+            }\n+        });\n     }\n \n     fn visit_fn(&mut self, fk: FnKind<'a>, sp: Span, _: NodeId) {\n@@ -113,7 +112,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn with_parent_item_lifetime_defs<T>(\n         &mut self,\n         parent_hir_id: hir::ItemId,\n-        f: impl FnOnce(&mut LoweringContext<'_, '_>) -> T,\n+        f: impl FnOnce(&mut Self) -> T,\n     ) -> T {\n         let old_len = self.in_scope_lifetimes.len();\n \n@@ -137,10 +136,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     // Clears (and restores) the `in_scope_lifetimes` field. Used when\n     // visiting nested items, which never inherit in-scope lifetimes\n     // from their surrounding environment.\n-    fn without_in_scope_lifetime_defs<T>(\n-        &mut self,\n-        f: impl FnOnce(&mut LoweringContext<'_, '_>) -> T,\n-    ) -> T {\n+    fn without_in_scope_lifetime_defs<T>(&mut self, f: impl FnOnce(&mut Self) -> T) -> T {\n         let old_in_scope_lifetimes = mem::replace(&mut self.in_scope_lifetimes, vec![]);\n \n         // this vector is only used when walking over impl headers,\n@@ -208,19 +204,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    pub fn lower_item(&mut self, i: &Item) -> Option<hir::Item<'hir>> {\n+    pub fn lower_item(&mut self, i: &Item) -> hir::Item<'hir> {\n         let mut ident = i.ident;\n         let mut vis = self.lower_visibility(&i.vis, None);\n         let hir_id = self.lower_node_id(i.id);\n         let attrs = self.lower_attrs(hir_id, &i.attrs);\n         let kind = self.lower_item_kind(i.span, i.id, hir_id, &mut ident, attrs, &mut vis, &i.kind);\n-        Some(hir::Item {\n+        hir::Item {\n             def_id: hir_id.expect_owner(),\n             ident: self.lower_ident(ident),\n             kind,\n             vis,\n             span: self.lower_span(i.span),\n-        })\n+        }\n     }\n \n     fn lower_item_kind("}]}