{"sha": "0b9e227a1697e22b21d947f36bf1bd7695971d8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOWUyMjdhMTY5N2UyMmIyMWQ5NDdmMzZiZjFiZDc2OTU5NzFkOGY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-03T15:46:08Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-03T19:02:37Z"}, "message": "Move stability pass after privacy pass", "tree": {"sha": "029888e331c695daa07ed0a649e716114e6745a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/029888e331c695daa07ed0a649e716114e6745a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b9e227a1697e22b21d947f36bf1bd7695971d8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9e227a1697e22b21d947f36bf1bd7695971d8f", "html_url": "https://github.com/rust-lang/rust/commit/0b9e227a1697e22b21d947f36bf1bd7695971d8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b9e227a1697e22b21d947f36bf1bd7695971d8f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b2ed14906fd9f9daa27cc7d1dad263d2f5ff450", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b2ed14906fd9f9daa27cc7d1dad263d2f5ff450", "html_url": "https://github.com/rust-lang/rust/commit/3b2ed14906fd9f9daa27cc7d1dad263d2f5ff450"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "88719a9bbdd290f12731f2f4eb16585ddd8a1b44", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0b9e227a1697e22b21d947f36bf1bd7695971d8f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9e227a1697e22b21d947f36bf1bd7695971d8f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=0b9e227a1697e22b21d947f36bf1bd7695971d8f", "patch": "@@ -44,7 +44,7 @@ pub struct Index {\n // A private tree-walker for producing an Index.\n struct Annotator<'a> {\n     sess: &'a Session,\n-    index: Index,\n+    index: &'a mut Index,\n     parent: Option<Stability>\n }\n \n@@ -146,7 +146,20 @@ impl<'a, 'v> Visitor<'v> for Annotator<'a> {\n \n impl Index {\n     /// Construct the stability index for a crate being compiled.\n-    pub fn build(sess: &Session, krate: &Crate) -> Index {\n+    pub fn build(&mut self, sess: &Session, krate: &Crate) {\n+        if !self.staged_api {\n+            return;\n+        }\n+        let mut annotator = Annotator {\n+            sess: sess,\n+            index: self,\n+            parent: None\n+        };\n+        annotator.annotate(ast::CRATE_NODE_ID, true, &krate.attrs, krate.span,\n+                           |v| visit::walk_crate(v, krate));\n+    }\n+\n+    pub fn new(krate: &Crate) -> Index {\n         let mut staged_api = false;\n         for attr in &krate.attrs {\n             if attr.name().get() == \"staged_api\" {\n@@ -159,22 +172,11 @@ impl Index {\n                 }\n             }\n         }\n-        let index = Index {\n+        Index {\n             staged_api: staged_api,\n             local: NodeMap(),\n             extern_cache: DefIdMap()\n-        };\n-        if !staged_api {\n-            return index;\n         }\n-        let mut annotator = Annotator {\n-            sess: sess,\n-            index: index,\n-            parent: None\n-        };\n-        annotator.annotate(ast::CRATE_NODE_ID, true, &krate.attrs, krate.span,\n-                           |v| visit::walk_crate(v, krate));\n-        annotator.index\n     }\n }\n "}, {"sha": "166a1d6f809b3bce834c2ac21278a366eea97cff", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b9e227a1697e22b21d947f36bf1bd7695971d8f/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9e227a1697e22b21d947f36bf1bd7695971d8f/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=0b9e227a1697e22b21d947f36bf1bd7695971d8f", "patch": "@@ -594,9 +594,6 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n     time(time_passes, \"loop checking\", (), |_|\n          middle::check_loop::check_crate(&sess, krate));\n \n-    let stability_index = time(time_passes, \"stability index\", (), |_|\n-                               stability::Index::build(&sess, krate));\n-\n     time(time_passes, \"static item recursion checking\", (), |_|\n          middle::check_static_recursion::check_crate(&sess, krate, &def_map, &ast_map));\n \n@@ -608,7 +605,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n                             freevars,\n                             region_map,\n                             lang_items,\n-                            stability_index);\n+                            stability::Index::new(krate));\n \n     // passes are timed inside typeck\n     typeck::check_crate(&ty_cx, trait_map);\n@@ -628,6 +625,10 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n             time(time_passes, \"privacy checking\", maps, |(a, b)|\n                  rustc_privacy::check_crate(&ty_cx, &export_map, a, b));\n \n+    // Do not move this check past lint\n+    time(time_passes, \"stability index\", (), |_|\n+         ty_cx.stability.borrow_mut().build(&ty_cx.sess, krate));\n+\n     time(time_passes, \"intrinsic checking\", (), |_|\n          middle::intrinsicck::check_crate(&ty_cx));\n "}]}