{"sha": "3187cad8ec0e9c32272341028526d6f1e208a704", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxODdjYWQ4ZWMwZTljMzIyNzIzNDEwMjg1MjZkNmYxZTIwOGE3MDQ=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-12-08T22:17:12Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-12-08T22:17:12Z"}, "message": "Factor out some code in write.rs\n\nGet rid of the too-many-lines error.", "tree": {"sha": "ac0a7ad71383c0d0b6e1585a7b9544e4fc6c0167", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac0a7ad71383c0d0b6e1585a7b9544e4fc6c0167"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3187cad8ec0e9c32272341028526d6f1e208a704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3187cad8ec0e9c32272341028526d6f1e208a704", "html_url": "https://github.com/rust-lang/rust/commit/3187cad8ec0e9c32272341028526d6f1e208a704", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3187cad8ec0e9c32272341028526d6f1e208a704/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7063c36c912990bd67327a41445706a451fe5b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/7063c36c912990bd67327a41445706a451fe5b48", "html_url": "https://github.com/rust-lang/rust/commit/7063c36c912990bd67327a41445706a451fe5b48"}], "stats": {"total": 138, "additions": 77, "deletions": 61}, "files": [{"sha": "337f7a229b906c6244cbd265802812289b22b31f", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 50, "deletions": 60, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/3187cad8ec0e9c32272341028526d6f1e208a704/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3187cad8ec0e9c32272341028526d6f1e208a704/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=3187cad8ec0e9c32272341028526d6f1e208a704", "patch": "@@ -262,71 +262,22 @@ impl EarlyLintPass for Write {\n                 .map_or(false, |crate_name| crate_name == \"build_script_build\")\n         }\n \n-        if mac.path == sym!(println) {\n+        if mac.path == sym!(print) {\n             if !is_build_script(cx) {\n-                span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `println!`\");\n+                span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `print!`\");\n             }\n-            if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n-                if fmt_str.symbol == Symbol::intern(\"\") {\n-                    span_lint_and_sugg(\n-                        cx,\n-                        PRINTLN_EMPTY_STRING,\n-                        mac.span(),\n-                        \"using `println!(\\\"\\\")`\",\n-                        \"replace it with\",\n-                        \"println!()\".to_string(),\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n+            self.lint_print_with_newline(cx, mac);\n+        } else if mac.path == sym!(println) {\n+            if !is_build_script(cx) {\n+                span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `println!`\");\n             }\n-        } else if mac.path == sym!(eprintln) {\n-            span_lint(cx, PRINT_STDERR, mac.span(), \"use of `eprintln!`\");\n+            self.lint_println_empty_string(cx, mac);\n         } else if mac.path == sym!(eprint) {\n             span_lint(cx, PRINT_STDERR, mac.span(), \"use of `eprint!`\");\n-            if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n-                if check_newlines(&fmt_str) {\n-                    span_lint_and_then(\n-                        cx,\n-                        PRINT_WITH_NEWLINE,\n-                        mac.span(),\n-                        \"using `eprint!()` with a format string that ends in a single newline\",\n-                        |err| {\n-                            err.multipart_suggestion(\n-                                \"use `eprintln!` instead\",\n-                                vec![\n-                                    (mac.path.span, String::from(\"eprintln\")),\n-                                    (newline_span(&fmt_str), String::new()),\n-                                ],\n-                                Applicability::MachineApplicable,\n-                            );\n-                        },\n-                    );\n-                }\n-            }\n-        } else if mac.path == sym!(print) {\n-            if !is_build_script(cx) {\n-                span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `print!`\");\n-            }\n-            if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n-                if check_newlines(&fmt_str) {\n-                    span_lint_and_then(\n-                        cx,\n-                        PRINT_WITH_NEWLINE,\n-                        mac.span(),\n-                        \"using `print!()` with a format string that ends in a single newline\",\n-                        |err| {\n-                            err.multipart_suggestion(\n-                                \"use `println!` instead\",\n-                                vec![\n-                                    (mac.path.span, String::from(\"println\")),\n-                                    (newline_span(&fmt_str), String::new()),\n-                                ],\n-                                Applicability::MachineApplicable,\n-                            );\n-                        },\n-                    );\n-                }\n-            }\n+            self.lint_print_with_newline(cx, mac);\n+        } else if mac.path == sym!(eprintln) {\n+            span_lint(cx, PRINT_STDERR, mac.span(), \"use of `eprintln!`\");\n+            self.lint_println_empty_string(cx, mac);\n         } else if mac.path == sym!(write) {\n             if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), true) {\n                 if check_newlines(&fmt_str) {\n@@ -530,6 +481,45 @@ impl Write {\n             }\n         }\n     }\n+\n+    fn lint_println_empty_string(&self, cx: &EarlyContext<'_>, mac: &MacCall) {\n+        if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n+            if fmt_str.symbol == Symbol::intern(\"\") {\n+                let name = mac.path.segments[0].ident.name;\n+                span_lint_and_sugg(\n+                    cx,\n+                    PRINTLN_EMPTY_STRING,\n+                    mac.span(),\n+                    &format!(\"using `{}!(\\\"\\\")`\", name),\n+                    \"replace it with\",\n+                    format!(\"{}!()\", name),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+\n+    fn lint_print_with_newline(&self, cx: &EarlyContext<'_>, mac: &MacCall) {\n+        if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n+            if check_newlines(&fmt_str) {\n+                let name = mac.path.segments[0].ident.name;\n+                let suggested = format!(\"{}ln\", name);\n+                span_lint_and_then(\n+                    cx,\n+                    PRINT_WITH_NEWLINE,\n+                    mac.span(),\n+                    &format!(\"using `{}!()` with a format string that ends in a single newline\", name),\n+                    |err| {\n+                        err.multipart_suggestion(\n+                            &format!(\"use `{}!` instead\", suggested),\n+                            vec![(mac.path.span, suggested), (newline_span(&fmt_str), String::new())],\n+                            Applicability::MachineApplicable,\n+                        );\n+                    },\n+                );\n+            }\n+        }\n+    }\n }\n \n /// Checks if the format string contains a single newline that terminates it."}, {"sha": "9760680927a63d9b9772c929fd3bf700e66ba175", "filename": "tests/ui/println_empty_string.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3187cad8ec0e9c32272341028526d6f1e208a704/tests%2Fui%2Fprintln_empty_string.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3187cad8ec0e9c32272341028526d6f1e208a704/tests%2Fui%2Fprintln_empty_string.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.fixed?ref=3187cad8ec0e9c32272341028526d6f1e208a704", "patch": "@@ -8,4 +8,11 @@ fn main() {\n     match \"a\" {\n         _ => println!(),\n     }\n+\n+    eprintln!();\n+    eprintln!();\n+\n+    match \"a\" {\n+        _ => eprintln!(),\n+    }\n }"}, {"sha": "80fdb3e6e2105412918e757fa7790a8697d193e9", "filename": "tests/ui/println_empty_string.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3187cad8ec0e9c32272341028526d6f1e208a704/tests%2Fui%2Fprintln_empty_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3187cad8ec0e9c32272341028526d6f1e208a704/tests%2Fui%2Fprintln_empty_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.rs?ref=3187cad8ec0e9c32272341028526d6f1e208a704", "patch": "@@ -8,4 +8,11 @@ fn main() {\n     match \"a\" {\n         _ => println!(\"\"),\n     }\n+\n+    eprintln!();\n+    eprintln!(\"\");\n+\n+    match \"a\" {\n+        _ => eprintln!(\"\"),\n+    }\n }"}, {"sha": "17fe4ea74790c4de796cb0bbdf6342f7924fe65b", "filename": "tests/ui/println_empty_string.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3187cad8ec0e9c32272341028526d6f1e208a704/tests%2Fui%2Fprintln_empty_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3187cad8ec0e9c32272341028526d6f1e208a704/tests%2Fui%2Fprintln_empty_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.stderr?ref=3187cad8ec0e9c32272341028526d6f1e208a704", "patch": "@@ -12,5 +12,17 @@ error: using `println!(\"\")`\n LL |         _ => println!(\"\"),\n    |              ^^^^^^^^^^^^ help: replace it with: `println!()`\n \n-error: aborting due to 2 previous errors\n+error: using `eprintln!(\"\")`\n+  --> $DIR/println_empty_string.rs:13:5\n+   |\n+LL |     eprintln!(\"\");\n+   |     ^^^^^^^^^^^^^ help: replace it with: `eprintln!()`\n+\n+error: using `eprintln!(\"\")`\n+  --> $DIR/println_empty_string.rs:16:14\n+   |\n+LL |         _ => eprintln!(\"\"),\n+   |              ^^^^^^^^^^^^^ help: replace it with: `eprintln!()`\n+\n+error: aborting due to 4 previous errors\n "}]}