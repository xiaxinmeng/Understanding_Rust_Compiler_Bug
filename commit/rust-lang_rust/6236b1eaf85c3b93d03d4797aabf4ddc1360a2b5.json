{"sha": "6236b1eaf85c3b93d03d4797aabf4ddc1360a2b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMzZiMWVhZjg1YzNiOTNkMDNkNDc5N2FhYmY0ZGRjMTM2MGEyYjU=", "commit": {"author": {"name": "Luiz Carlos Mour\u00e3o Paes de Carvalho", "email": "luizcarlosmpc@gmail.com", "date": "2021-03-10T18:43:57Z"}, "committer": {"name": "Luiz Carlos Mour\u00e3o Paes de Carvalho", "email": "luizcarlosmpc@gmail.com", "date": "2021-03-10T18:43:57Z"}, "message": "fix: remove semicolon", "tree": {"sha": "de6a1a3a312a104e210be9bd6917801bf04f4c63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de6a1a3a312a104e210be9bd6917801bf04f4c63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6236b1eaf85c3b93d03d4797aabf4ddc1360a2b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6236b1eaf85c3b93d03d4797aabf4ddc1360a2b5", "html_url": "https://github.com/rust-lang/rust/commit/6236b1eaf85c3b93d03d4797aabf4ddc1360a2b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6236b1eaf85c3b93d03d4797aabf4ddc1360a2b5/comments", "author": {"login": "saiintbrisson", "id": 29989290, "node_id": "MDQ6VXNlcjI5OTg5Mjkw", "avatar_url": "https://avatars.githubusercontent.com/u/29989290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saiintbrisson", "html_url": "https://github.com/saiintbrisson", "followers_url": "https://api.github.com/users/saiintbrisson/followers", "following_url": "https://api.github.com/users/saiintbrisson/following{/other_user}", "gists_url": "https://api.github.com/users/saiintbrisson/gists{/gist_id}", "starred_url": "https://api.github.com/users/saiintbrisson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saiintbrisson/subscriptions", "organizations_url": "https://api.github.com/users/saiintbrisson/orgs", "repos_url": "https://api.github.com/users/saiintbrisson/repos", "events_url": "https://api.github.com/users/saiintbrisson/events{/privacy}", "received_events_url": "https://api.github.com/users/saiintbrisson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saiintbrisson", "id": 29989290, "node_id": "MDQ6VXNlcjI5OTg5Mjkw", "avatar_url": "https://avatars.githubusercontent.com/u/29989290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saiintbrisson", "html_url": "https://github.com/saiintbrisson", "followers_url": "https://api.github.com/users/saiintbrisson/followers", "following_url": "https://api.github.com/users/saiintbrisson/following{/other_user}", "gists_url": "https://api.github.com/users/saiintbrisson/gists{/gist_id}", "starred_url": "https://api.github.com/users/saiintbrisson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saiintbrisson/subscriptions", "organizations_url": "https://api.github.com/users/saiintbrisson/orgs", "repos_url": "https://api.github.com/users/saiintbrisson/repos", "events_url": "https://api.github.com/users/saiintbrisson/events{/privacy}", "received_events_url": "https://api.github.com/users/saiintbrisson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a224e0087d4faf8fbfae8074c384c4ba03217ba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a224e0087d4faf8fbfae8074c384c4ba03217ba5", "html_url": "https://github.com/rust-lang/rust/commit/a224e0087d4faf8fbfae8074c384c4ba03217ba5"}], "stats": {"total": 85, "additions": 56, "deletions": 29}, "files": [{"sha": "5700e6167be38e5fbd6d3316d4d738db57e011f1", "filename": "crates/ide_assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "modified", "additions": 56, "deletions": 29, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/6236b1eaf85c3b93d03d4797aabf4ddc1360a2b5/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6236b1eaf85c3b93d03d4797aabf4ddc1360a2b5/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=6236b1eaf85c3b93d03d4797aabf4ddc1360a2b5", "patch": "@@ -28,50 +28,54 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n /// }\n /// ```\n pub(crate) fn convert_iter_for_each_to_for(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let closure;\n-\n-    let total_expr = match ctx.find_node_at_offset::<ast::Expr>()? {\n-        ast::Expr::MethodCallExpr(expr) => {\n-            closure = match expr.arg_list()?.args().next()? {\n-                ast::Expr::ClosureExpr(expr) => expr,\n-                _ => {\n-                    return None;\n-                }\n-            };\n-\n-            expr\n-        }\n-        ast::Expr::ClosureExpr(expr) => {\n-            closure = expr;\n-            ast::MethodCallExpr::cast(closure.syntax().ancestors().nth(2)?)?\n-        }\n+    let method;\n+\n+    let stmt = if let Some(stmt) = ctx.find_node_at_offset::<ast::ExprStmt>() {\n+        method = ast::MethodCallExpr::cast(stmt.syntax().first_child()?)?;\n+        Some(stmt)\n+    } else {\n+        method = match ctx.find_node_at_offset::<ast::Expr>()? {\n+            ast::Expr::MethodCallExpr(expr) => expr,\n+            ast::Expr::ClosureExpr(expr) => {\n+                ast::MethodCallExpr::cast(expr.syntax().ancestors().nth(2)?)?\n+            }\n+            _ => {\n+                return None;\n+            }\n+        };\n+        None\n+    };\n+\n+    let closure = match method.arg_list()?.args().next()? {\n+        ast::Expr::ClosureExpr(expr) => expr,\n         _ => {\n             return None;\n         }\n     };\n \n-    let (total_expr, parent) = validate_method_call_expr(&ctx.sema, total_expr)?;\n+    let (method, parent) = validate_method_call_expr(&ctx.sema, method)?;\n \n     let param_list = closure.param_list()?;\n     let param = param_list.params().next()?.pat()?;\n     let body = closure.body()?;\n \n+    let indent = stmt.as_ref().map_or(method.indent_level(), |stmt| stmt.indent_level());\n+    let syntax = stmt.as_ref().map_or(method.syntax(), |stmt| stmt.syntax());\n+\n     acc.add(\n         AssistId(\"convert_iter_for_each_to_for\", AssistKind::RefactorRewrite),\n         \"Replace this `Iterator::for_each` with a for loop\",\n-        total_expr.syntax().text_range(),\n+        syntax.text_range(),\n         |builder| {\n-            let original_indentation = total_expr.indent_level();\n-\n             let block = match body {\n                 ast::Expr::BlockExpr(block) => block,\n                 _ => make::block_expr(Vec::new(), Some(body)),\n             }\n             .reset_indent()\n-            .indent(original_indentation);\n+            .indent(indent);\n \n             let expr_for_loop = make::expr_for_loop(param, parent, block);\n-            builder.replace_ast(total_expr, expr_for_loop)\n+            builder.replace(syntax.text_range(), expr_for_loop.syntax().text())\n         },\n     )\n }\n@@ -125,7 +129,7 @@ impl Empty {\n     }\n \n     #[test]\n-    fn test_for_each_in_method() {\n+    fn test_for_each_in_method_stmt() {\n         check_assist_with_fixtures(\n             r#\"\n use empty_iter::*;\n@@ -141,14 +145,37 @@ fn main() {\n     let x = Empty;\n     for (x, y) in x.iter() {\n         println!(\"x: {}, y: {}\", x, y);\n-    };\n+    }\n }\n \"#,\n         )\n     }\n \n     #[test]\n-    fn test_for_each_without_braces() {\n+    fn test_for_each_in_method() {\n+        check_assist_with_fixtures(\n+            r#\"\n+use empty_iter::*;\n+fn main() {\n+    let x = Empty;\n+    x.iter().$0for_each(|(x, y)| {\n+        println!(\"x: {}, y: {}\", x, y);\n+    })\n+}\"#,\n+            r#\"\n+use empty_iter::*;\n+fn main() {\n+    let x = Empty;\n+    for (x, y) in x.iter() {\n+        println!(\"x: {}, y: {}\", x, y);\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_for_each_without_braces_stmt() {\n         check_assist_with_fixtures(\n             r#\"\n use empty_iter::*;\n@@ -162,14 +189,14 @@ fn main() {\n     let x = Empty;\n     for (x, y) in x.iter() {\n         println!(\"x: {}, y: {}\", x, y)\n-    };\n+    }\n }\n \"#,\n         )\n     }\n \n     #[test]\n-    fn test_for_each_in_closure() {\n+    fn test_for_each_in_closure_stmt() {\n         check_assist_with_fixtures(\n             r#\"\n use empty_iter::*;\n@@ -183,7 +210,7 @@ fn main() {\n     let x = Empty;\n     for (x, y) in x.iter() {\n         println!(\"x: {}, y: {}\", x, y)\n-    };\n+    }\n }\n \"#,\n         )"}]}