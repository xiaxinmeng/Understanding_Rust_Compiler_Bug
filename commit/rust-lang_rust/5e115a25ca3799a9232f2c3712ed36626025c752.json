{"sha": "5e115a25ca3799a9232f2c3712ed36626025c752", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMTE1YTI1Y2EzNzk5YTkyMzJmMmMzNzEyZWQzNjYyNjAyNWM3NTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-16T15:09:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-16T15:09:45Z"}, "message": "avoid some casts", "tree": {"sha": "4a3ce8c50fbb580b7ec73fa532741c9a073db372", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a3ce8c50fbb580b7ec73fa532741c9a073db372"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e115a25ca3799a9232f2c3712ed36626025c752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e115a25ca3799a9232f2c3712ed36626025c752", "html_url": "https://github.com/rust-lang/rust/commit/5e115a25ca3799a9232f2c3712ed36626025c752", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e115a25ca3799a9232f2c3712ed36626025c752/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8952c8aa42209919c2980e99f11694e36f2b6845", "url": "https://api.github.com/repos/rust-lang/rust/commits/8952c8aa42209919c2980e99f11694e36f2b6845", "html_url": "https://github.com/rust-lang/rust/commit/8952c8aa42209919c2980e99f11694e36f2b6845"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "4277ce1d1f7546bd1f349abb3c705c400b865b8a", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5e115a25ca3799a9232f2c3712ed36626025c752/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e115a25ca3799a9232f2c3712ed36626025c752/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=5e115a25ca3799a9232f2c3712ed36626025c752", "patch": "@@ -28,7 +28,6 @@ use syntax_pos::Span;\n \n use std::cmp::Ordering;\n use std::{iter, i128, u128};\n-use std::convert::TryFrom;\n \n fn get_simple_intrinsic(cx: &CodegenCx<'ll, '_>, name: &str) -> Option<&'ll Value> {\n     let llvm_name = match name {\n@@ -1161,13 +1160,13 @@ fn generic_simd_intrinsic(\n     }\n \n     if name.starts_with(\"simd_shuffle\") {\n-        let n: usize = name[\"simd_shuffle\".len()..].parse().unwrap_or_else(|_|\n+        let n: u64 = name[\"simd_shuffle\".len()..].parse().unwrap_or_else(|_|\n             span_bug!(span, \"bad `simd_shuffle` instruction only caught in codegen?\"));\n \n         require_simd!(ret_ty, \"return\");\n \n         let out_len = ret_ty.simd_size(tcx);\n-        require!(out_len == n as u64,\n+        require!(out_len == n,\n                  \"expected return type of length {}, found `{}` with length {}\",\n                  n, ret_ty, out_len);\n         require!(in_elem == ret_ty.simd_type(tcx),\n@@ -1176,7 +1175,7 @@ fn generic_simd_intrinsic(\n                  in_elem, in_ty,\n                  ret_ty, ret_ty.simd_type(tcx));\n \n-        let total_len = in_len as u128 * 2;\n+        let total_len = u128::from(in_len) * 2;\n \n         let vector = args[2].immediate();\n \n@@ -1402,7 +1401,7 @@ fn generic_simd_intrinsic(\n     // FIXME: use:\n     //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Function.h#L182\n     //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Intrinsics.h#L81\n-    fn llvm_vector_str(elem_ty: Ty<'_>, vec_len: usize, no_pointers: usize) -> String {\n+    fn llvm_vector_str(elem_ty: Ty<'_>, vec_len: u64, no_pointers: usize) -> String {\n         let p0s: String = \"p0\".repeat(no_pointers);\n         match elem_ty.kind {\n             ty::Int(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n@@ -1412,7 +1411,7 @@ fn generic_simd_intrinsic(\n         }\n     }\n \n-    fn llvm_vector_ty(cx: &CodegenCx<'ll, '_>, elem_ty: Ty<'_>, vec_len: usize,\n+    fn llvm_vector_ty(cx: &CodegenCx<'ll, '_>, elem_ty: Ty<'_>, vec_len: u64,\n                       mut no_pointers: usize) -> &'ll Type {\n         // FIXME: use cx.layout_of(ty).llvm_type() ?\n         let mut elem_ty = match elem_ty.kind {\n@@ -1425,7 +1424,7 @@ fn generic_simd_intrinsic(\n             elem_ty = cx.type_ptr_to(elem_ty);\n             no_pointers -= 1;\n         }\n-        cx.type_vector(elem_ty, vec_len as u64)\n+        cx.type_vector(elem_ty, vec_len)\n     }\n \n \n@@ -1513,7 +1512,6 @@ fn generic_simd_intrinsic(\n         };\n \n         // Type of the vector of pointers:\n-        let in_len = usize::try_from(in_len).unwrap();\n         let llvm_pointer_vec_ty = llvm_vector_ty(bx, underlying_ty, in_len, pointer_count);\n         let llvm_pointer_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count);\n \n@@ -1616,7 +1614,6 @@ fn generic_simd_intrinsic(\n         let ret_t = bx.type_void();\n \n         // Type of the vector of pointers:\n-        let in_len = usize::try_from(in_len).unwrap();\n         let llvm_pointer_vec_ty = llvm_vector_ty(bx, underlying_ty, in_len, pointer_count);\n         let llvm_pointer_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count);\n "}]}