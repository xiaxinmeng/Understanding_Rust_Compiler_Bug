{"sha": "4c1ea0b628f949612b48dd3b65c7d8bb2255f572", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMWVhMGI2MjhmOTQ5NjEyYjQ4ZGQzYjY1YzdkOGJiMjI1NWY1NzI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-18T04:16:20Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-18T04:16:20Z"}, "message": "Merge #987\n\n987: Refactor maybe_item to use Marker argument r=pcpthm a=pcpthm\n\nAs suggested at <https://github.com/rust-analyzer/rust-analyzer/pull/980#issuecomment-473659745>.\r\nFor expression paring functions, changing signature\r\n- from `fn(&mut Parser) -> Option<CompletedMarker>` to `fn(&mut Parser, Marker) -> Result<CompletedMarker, Marker>`\r\n- from `fn(&mut Parser) -> CompletedMarker` to `fn(&mut Parser, Marker) -> CompletedMarker`\r\nis my plan.\n\nCo-authored-by: pcpthm <pcpthm@gmail.com>", "tree": {"sha": "b57d8b8b433fa06c9c6bd8795c2328507064e002", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b57d8b8b433fa06c9c6bd8795c2328507064e002"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c1ea0b628f949612b48dd3b65c7d8bb2255f572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c1ea0b628f949612b48dd3b65c7d8bb2255f572", "html_url": "https://github.com/rust-lang/rust/commit/4c1ea0b628f949612b48dd3b65c7d8bb2255f572", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c1ea0b628f949612b48dd3b65c7d8bb2255f572/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "40c6dd1f4c57d6a8ec26c1bdef24753c884c38aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/40c6dd1f4c57d6a8ec26c1bdef24753c884c38aa", "html_url": "https://github.com/rust-lang/rust/commit/40c6dd1f4c57d6a8ec26c1bdef24753c884c38aa"}, {"sha": "3d9c2beb8e0d4e0fbaded7dac259cadf7616a3ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9c2beb8e0d4e0fbaded7dac259cadf7616a3ad", "html_url": "https://github.com/rust-lang/rust/commit/3d9c2beb8e0d4e0fbaded7dac259cadf7616a3ad"}], "stats": {"total": 154, "additions": 70, "deletions": 84}, "files": [{"sha": "ccbc905ab5992733cba224836764b8ad16e7de27", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 32, "deletions": 38, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4c1ea0b628f949612b48dd3b65c7d8bb2255f572/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c1ea0b628f949612b48dd3b65c7d8bb2255f572/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=4c1ea0b628f949612b48dd3b65c7d8bb2255f572", "patch": "@@ -62,47 +62,41 @@ pub(crate) fn expr_block_contents(p: &mut Parser) {\n             continue;\n         }\n \n-        match items::maybe_item(p, items::ItemFlavor::Mod) {\n-            items::MaybeItem::Item(kind) => {\n-                m.complete(p, kind);\n-            }\n-            items::MaybeItem::Modifiers => {\n+        let m = match items::maybe_item(p, m, items::ItemFlavor::Mod) {\n+            Ok(()) => continue,\n+            Err(m) => m,\n+        };\n+\n+        // test pub_expr\n+        // fn foo() { pub 92; } //FIXME\n+        if has_attrs {\n+            m.abandon(p);\n+            p.error(\"expected a let statement or an item after attributes in block\");\n+        } else {\n+            let is_blocklike = expressions::expr_stmt(p) == BlockLike::Block;\n+            if p.at(R_CURLY) {\n                 m.abandon(p);\n-                p.error(\"expected an item\");\n-            }\n-            // test pub_expr\n-            // fn foo() { pub 92; } //FIXME\n-            items::MaybeItem::None => {\n-                if has_attrs {\n-                    m.abandon(p);\n-                    p.error(\"expected a let statement or an item after attributes in block\");\n+            } else {\n+                // test no_semi_after_block\n+                // fn foo() {\n+                //     if true {}\n+                //     loop {}\n+                //     match () {}\n+                //     while true {}\n+                //     for _ in () {}\n+                //     {}\n+                //     {}\n+                //     macro_rules! test {\n+                //          () => {}\n+                //     }\n+                //     test!{}\n+                // }\n+                if is_blocklike {\n+                    p.eat(SEMI);\n                 } else {\n-                    let is_blocklike = expressions::expr_stmt(p) == BlockLike::Block;\n-                    if p.at(R_CURLY) {\n-                        m.abandon(p);\n-                    } else {\n-                        // test no_semi_after_block\n-                        // fn foo() {\n-                        //     if true {}\n-                        //     loop {}\n-                        //     match () {}\n-                        //     while true {}\n-                        //     for _ in () {}\n-                        //     {}\n-                        //     {}\n-                        //     macro_rules! test {\n-                        //          () => {}\n-                        //     }\n-                        //     test!{}\n-                        // }\n-                        if is_blocklike {\n-                            p.eat(SEMI);\n-                        } else {\n-                            p.expect(SEMI);\n-                        }\n-                        m.complete(p, EXPR_STMT);\n-                    }\n+                    p.expect(SEMI);\n                 }\n+                m.complete(p, EXPR_STMT);\n             }\n         }\n     }"}, {"sha": "94b93a02b7ff8c1df96eba3ef4e97c98e7ffff19", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 38, "deletions": 46, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/4c1ea0b628f949612b48dd3b65c7d8bb2255f572/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c1ea0b628f949612b48dd3b65c7d8bb2255f572/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=4c1ea0b628f949612b48dd3b65c7d8bb2255f572", "patch": "@@ -37,52 +37,40 @@ pub(super) const ITEM_RECOVERY_SET: TokenSet = token_set![\n pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool, flavor: ItemFlavor) {\n     let m = p.start();\n     attributes::outer_attributes(p);\n-    match maybe_item(p, flavor) {\n-        MaybeItem::Item(kind) => {\n-            m.complete(p, kind);\n-        }\n-        MaybeItem::None => {\n-            if paths::is_path_start(p) {\n-                match macro_call(p) {\n-                    BlockLike::Block => (),\n-                    BlockLike::NotBlock => {\n-                        p.expect(SEMI);\n-                    }\n-                }\n-                m.complete(p, MACRO_CALL);\n-            } else {\n-                m.abandon(p);\n-                if p.at(L_CURLY) {\n-                    error_block(p, \"expected an item\");\n-                } else if p.at(R_CURLY) && !stop_on_r_curly {\n-                    let e = p.start();\n-                    p.error(\"unmatched `}`\");\n-                    p.bump();\n-                    e.complete(p, ERROR);\n-                } else if !p.at(EOF) && !p.at(R_CURLY) {\n-                    p.err_and_bump(\"expected an item\");\n-                } else {\n-                    p.error(\"expected an item\");\n-                }\n+    let m = match maybe_item(p, m, flavor) {\n+        Ok(()) => return,\n+        Err(m) => m,\n+    };\n+    if paths::is_path_start(p) {\n+        match macro_call(p) {\n+            BlockLike::Block => (),\n+            BlockLike::NotBlock => {\n+                p.expect(SEMI);\n             }\n         }\n-        MaybeItem::Modifiers => {\n-            p.error(\"expected fn, trait or impl\");\n-            m.complete(p, ERROR);\n+        m.complete(p, MACRO_CALL);\n+    } else {\n+        m.abandon(p);\n+        if p.at(L_CURLY) {\n+            error_block(p, \"expected an item\");\n+        } else if p.at(R_CURLY) && !stop_on_r_curly {\n+            let e = p.start();\n+            p.error(\"unmatched `}`\");\n+            p.bump();\n+            e.complete(p, ERROR);\n+        } else if !p.at(EOF) && !p.at(R_CURLY) {\n+            p.err_and_bump(\"expected an item\");\n+        } else {\n+            p.error(\"expected an item\");\n         }\n     }\n }\n \n-pub(super) enum MaybeItem {\n-    None,\n-    Item(SyntaxKind),\n-    Modifiers,\n-}\n-\n-pub(super) fn maybe_item(p: &mut Parser, flavor: ItemFlavor) -> MaybeItem {\n+pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Result<(), Marker> {\n     opt_visibility(p);\n     if let Some(kind) = items_without_modifiers(p) {\n-        return MaybeItem::Item(kind);\n+        m.complete(p, kind);\n+        return Ok(());\n     }\n \n     let mut has_mods = false;\n@@ -115,7 +103,7 @@ pub(super) fn maybe_item(p: &mut Parser, flavor: ItemFlavor) -> MaybeItem {\n     }\n \n     // items\n-    let kind = match p.current() {\n+    match p.current() {\n         // test async_fn\n         // async fn foo() {}\n \n@@ -135,7 +123,7 @@ pub(super) fn maybe_item(p: &mut Parser, flavor: ItemFlavor) -> MaybeItem {\n         // unsafe fn foo() {}\n         FN_KW => {\n             fn_def(p, flavor);\n-            FN_DEF\n+            m.complete(p, FN_DEF);\n         }\n \n         // test unsafe_trait\n@@ -148,7 +136,7 @@ pub(super) fn maybe_item(p: &mut Parser, flavor: ItemFlavor) -> MaybeItem {\n         // unsafe auto trait T {}\n         TRAIT_KW => {\n             traits::trait_def(p);\n-            TRAIT_DEF\n+            m.complete(p, TRAIT_DEF);\n         }\n \n         // test unsafe_impl\n@@ -161,14 +149,18 @@ pub(super) fn maybe_item(p: &mut Parser, flavor: ItemFlavor) -> MaybeItem {\n         // unsafe default impl Foo {}\n         IMPL_KW => {\n             traits::impl_block(p);\n-            IMPL_BLOCK\n+            m.complete(p, IMPL_BLOCK);\n         }\n         _ => {\n-            return if has_mods { MaybeItem::Modifiers } else { MaybeItem::None };\n+            if !has_mods {\n+                return Err(m);\n+            } else {\n+                p.error(\"expected fn, trait or impl\");\n+                m.complete(p, ERROR);\n+            }\n         }\n-    };\n-\n-    MaybeItem::Item(kind)\n+    }\n+    Ok(())\n }\n \n fn items_without_modifiers(p: &mut Parser) -> Option<SyntaxKind> {"}]}