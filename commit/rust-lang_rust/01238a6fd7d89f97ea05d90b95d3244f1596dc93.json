{"sha": "01238a6fd7d89f97ea05d90b95d3244f1596dc93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMjM4YTZmZDdkODlmOTdlYTA1ZDkwYjk1ZDMyNDRmMTU5NmRjOTM=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-10-28T14:48:40Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-10-28T14:48:40Z"}, "message": "Filter out non callable versions of Struct/EnumVariant", "tree": {"sha": "c56902871c42cf5a9875fa56c69932e7c4dca931", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c56902871c42cf5a9875fa56c69932e7c4dca931"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01238a6fd7d89f97ea05d90b95d3244f1596dc93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01238a6fd7d89f97ea05d90b95d3244f1596dc93", "html_url": "https://github.com/rust-lang/rust/commit/01238a6fd7d89f97ea05d90b95d3244f1596dc93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01238a6fd7d89f97ea05d90b95d3244f1596dc93/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddf25e9481d79abb6b583a195fd26b8ca1b9f060", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf25e9481d79abb6b583a195fd26b8ca1b9f060", "html_url": "https://github.com/rust-lang/rust/commit/ddf25e9481d79abb6b583a195fd26b8ca1b9f060"}], "stats": {"total": 122, "additions": 84, "deletions": 38}, "files": [{"sha": "d947ac50c2fc170c2c7eda17b366609414eeb275", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/01238a6fd7d89f97ea05d90b95d3244f1596dc93/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01238a6fd7d89f97ea05d90b95d3244f1596dc93/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=01238a6fd7d89f97ea05d90b95d3244f1596dc93", "patch": "@@ -28,8 +28,8 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n                 hir::CallableDef::Function(it) => {\n                     (CallInfo::with_fn(db, it), it.data(db).has_self_param())\n                 }\n-                hir::CallableDef::Struct(it) => (CallInfo::with_struct(db, it), false),\n-                hir::CallableDef::EnumVariant(it) => (CallInfo::with_enum_variant(db, it), false),\n+                hir::CallableDef::Struct(it) => (CallInfo::with_struct(db, it)?, false),\n+                hir::CallableDef::EnumVariant(it) => (CallInfo::with_enum_variant(db, it)?, false),\n             }\n         }\n         FnCallNode::MethodCallExpr(expr) => {\n@@ -123,16 +123,16 @@ impl CallInfo {\n         CallInfo { signature, active_parameter: None }\n     }\n \n-    fn with_struct(db: &RootDatabase, st: hir::Struct) -> Self {\n-        let signature = FunctionSignature::from_struct(db, st);\n+    fn with_struct(db: &RootDatabase, st: hir::Struct) -> Option<Self> {\n+        let signature = FunctionSignature::from_struct(db, st)?;\n \n-        CallInfo { signature, active_parameter: None }\n+        Some(CallInfo { signature, active_parameter: None })\n     }\n \n-    fn with_enum_variant(db: &RootDatabase, variant: hir::EnumVariant) -> Self {\n-        let signature = FunctionSignature::from_enum_variant(db, variant);\n+    fn with_enum_variant(db: &RootDatabase, variant: hir::EnumVariant) -> Option<Self> {\n+        let signature = FunctionSignature::from_enum_variant(db, variant)?;\n \n-        CallInfo { signature, active_parameter: None }\n+        Some(CallInfo { signature, active_parameter: None })\n     }\n \n     fn parameters(&self) -> &[String] {\n@@ -477,6 +477,7 @@ fn main() {\n         assert_eq!(info.label(), \"fn bar(&self, _: u32)\");\n     }\n \n+    #[test]\n     fn works_for_tuple_structs() {\n         let info = call_info(\n             r#\"\n@@ -487,11 +488,23 @@ fn main() {\n }\"#,\n         );\n \n-        assert_eq!(info.label(), \"struct TS(0: u32, 1: i32) -> TS\");\n+        assert_eq!(info.label(), \"struct TS(u32, i32) -> TS\");\n         assert_eq!(info.doc().map(|it| it.into()), Some(\"A cool tuple struct\".to_string()));\n         assert_eq!(info.active_parameter, Some(1));\n     }\n \n+    #[test]\n+    #[should_panic]\n+    fn cant_call_named_structs() {\n+        let _ = call_info(\n+            r#\"\n+struct TS { x: u32, y: i32 }\n+fn main() {\n+    let s = TS(<|>);\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn works_for_enum_variants() {\n         let info = call_info(\n@@ -515,4 +528,25 @@ fn main() {\n         assert_eq!(info.doc().map(|it| it.into()), Some(\"A Variant\".to_string()));\n         assert_eq!(info.active_parameter, Some(0));\n     }\n+\n+    #[test]\n+    #[should_panic]\n+    fn cant_call_enum_records() {\n+        let _ = call_info(\n+            r#\"\n+enum E {\n+    /// A Variant\n+    A(i32),\n+    /// Another\n+    B,\n+    /// And C\n+    C { a: i32, b: i32 }\n+}\n+\n+fn main() {\n+    let a = E::C(<|>);\n+}\n+            \"#,\n+        );\n+    }\n }"}, {"sha": "736b5d3dbedabe34b026e40b3f504d9bf68ffd78", "filename": "crates/ra_ide_api/src/display/function_signature.rs", "status": "modified", "additions": 41, "deletions": 29, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/01238a6fd7d89f97ea05d90b95d3244f1596dc93/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01238a6fd7d89f97ea05d90b95d3244f1596dc93/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=01238a6fd7d89f97ea05d90b95d3244f1596dc93", "patch": "@@ -51,36 +51,46 @@ impl FunctionSignature {\n         FunctionSignature::from(&ast_node).with_doc_opt(doc)\n     }\n \n-    pub(crate) fn from_struct(db: &db::RootDatabase, st: hir::Struct) -> Self {\n-        let doc = st.docs(db);\n-\n+    pub(crate) fn from_struct(db: &db::RootDatabase, st: hir::Struct) -> Option<Self> {\n         let node: ast::StructDef = st.source(db).ast;\n+        match node.kind() {\n+            ast::StructKind::Named(_) => return None,\n+            _ => (),\n+        };\n \n         let params = st\n             .fields(db)\n             .into_iter()\n             .map(|field: hir::StructField| {\n-                let name = field.name(db);\n                 let ty = field.ty(db);\n-                format!(\"{}: {}\", name, ty.display(db))\n+                format!(\"{}\", ty.display(db))\n             })\n             .collect();\n \n-        FunctionSignature {\n-            kind: SigKind::Struct,\n-            visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n-            name: node.name().map(|n| n.text().to_string()),\n-            ret_type: node.name().map(|n| n.text().to_string()),\n-            parameters: params,\n-            generic_parameters: generic_parameters(&node),\n-            where_predicates: where_predicates(&node),\n-            doc: None,\n-        }\n-        .with_doc_opt(doc)\n+        Some(\n+            FunctionSignature {\n+                kind: SigKind::Struct,\n+                visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n+                name: node.name().map(|n| n.text().to_string()),\n+                ret_type: node.name().map(|n| n.text().to_string()),\n+                parameters: params,\n+                generic_parameters: generic_parameters(&node),\n+                where_predicates: where_predicates(&node),\n+                doc: None,\n+            }\n+            .with_doc_opt(st.docs(db)),\n+        )\n     }\n \n-    pub(crate) fn from_enum_variant(db: &db::RootDatabase, variant: hir::EnumVariant) -> Self {\n-        let doc = variant.docs(db);\n+    pub(crate) fn from_enum_variant(\n+        db: &db::RootDatabase,\n+        variant: hir::EnumVariant,\n+    ) -> Option<Self> {\n+        let node: ast::EnumVariant = variant.source(db).ast;\n+        match node.kind() {\n+            ast::StructKind::Named(_) | ast::StructKind::Unit => return None,\n+            _ => (),\n+        };\n \n         let parent_name = match variant.parent_enum(db).name(db) {\n             Some(name) => name.to_string(),\n@@ -99,17 +109,19 @@ impl FunctionSignature {\n             })\n             .collect();\n \n-        FunctionSignature {\n-            kind: SigKind::EnumVariant,\n-            visibility: None,\n-            name: Some(name),\n-            ret_type: None,\n-            parameters: params,\n-            generic_parameters: vec![],\n-            where_predicates: vec![],\n-            doc: None,\n-        }\n-        .with_doc_opt(doc)\n+        Some(\n+            FunctionSignature {\n+                kind: SigKind::EnumVariant,\n+                visibility: None,\n+                name: Some(name),\n+                ret_type: None,\n+                parameters: params,\n+                generic_parameters: vec![],\n+                where_predicates: vec![],\n+                doc: None,\n+            }\n+            .with_doc_opt(variant.docs(db)),\n+        )\n     }\n }\n "}]}