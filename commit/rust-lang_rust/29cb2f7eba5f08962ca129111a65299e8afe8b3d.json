{"sha": "29cb2f7eba5f08962ca129111a65299e8afe8b3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5Y2IyZjdlYmE1ZjA4OTYyY2ExMjkxMTFhNjUyOTllOGFmZThiM2Q=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-05-12T10:02:42Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-05-12T10:02:42Z"}, "message": "Fix various wrong uses of NestedVisitorMap::All", "tree": {"sha": "402d838f03630d04a9fc6360a95810f5395804b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/402d838f03630d04a9fc6360a95810f5395804b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29cb2f7eba5f08962ca129111a65299e8afe8b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29cb2f7eba5f08962ca129111a65299e8afe8b3d", "html_url": "https://github.com/rust-lang/rust/commit/29cb2f7eba5f08962ca129111a65299e8afe8b3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29cb2f7eba5f08962ca129111a65299e8afe8b3d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2026f29fdf427f2f919921b9ccb336fa99c0a658", "url": "https://api.github.com/repos/rust-lang/rust/commits/2026f29fdf427f2f919921b9ccb336fa99c0a658", "html_url": "https://github.com/rust-lang/rust/commit/2026f29fdf427f2f919921b9ccb336fa99c0a658"}], "stats": {"total": 79, "additions": 47, "deletions": 32}, "files": [{"sha": "6c0523dc19809ea28e6efe0286635957fdba81d9", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=29cb2f7eba5f08962ca129111a65299e8afe8b3d", "patch": "@@ -67,7 +67,7 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.hir)\n+        NestedVisitorMap::None\n     }\n }\n "}, {"sha": "fd43b5bb6c61f54dcde92da9fb5c23f86191d5bf", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=29cb2f7eba5f08962ca129111a65299e8afe8b3d", "patch": "@@ -154,6 +154,6 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n         }\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.hir)\n+        NestedVisitorMap::None\n     }\n }"}, {"sha": "9f694dd1cff72b3046380022ea098e9ded11b1c4", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=29cb2f7eba5f08962ca129111a65299e8afe8b3d", "patch": "@@ -156,7 +156,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n         // don't continue over blocks, LateLintPass already does that\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.hir)\n+        NestedVisitorMap::None\n     }\n }\n \n@@ -341,7 +341,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.hir)\n+        NestedVisitorMap::None\n     }\n }\n "}, {"sha": "0c4712a591172bbd6ae276abe2ebb13c79c71a6f", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=29cb2f7eba5f08962ca129111a65299e8afe8b3d", "patch": "@@ -200,7 +200,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n         hir::intravisit::walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n-        intravisit::NestedVisitorMap::All(&self.cx.tcx.hir)\n+        intravisit::NestedVisitorMap::None\n     }\n }\n "}, {"sha": "adda97bbc507d5f2a148a1f2e86393c386d7837f", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=29cb2f7eba5f08962ca129111a65299e8afe8b3d", "patch": "@@ -146,7 +146,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n         hir::intravisit::walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> hir::intravisit::NestedVisitorMap<'this, 'tcx> {\n-        hir::intravisit::NestedVisitorMap::All(&self.cx.tcx.hir)\n+        hir::intravisit::NestedVisitorMap::None\n     }\n }\n "}, {"sha": "c54a82984f19be2a2f976087b86a5277eb7e19eb", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=29cb2f7eba5f08962ca129111a65299e8afe8b3d", "patch": "@@ -799,8 +799,8 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n             let (new_pat_span, kind, ty, mutbl) = match cx.tables.expr_ty(arg).sty {\n                 ty::TyRef(_, ref tam) => {\n                     match (&pat[0].node, &pat[1].node) {\n-                        (key, _) if pat_is_wild(cx, key, body) => (pat[1].span, \"value\", tam.ty, tam.mutbl),\n-                        (_, value) if pat_is_wild(cx, value, body) => (pat[0].span, \"key\", tam.ty, MutImmutable),\n+                        (key, _) if pat_is_wild(key, body) => (pat[1].span, \"value\", tam.ty, tam.mutbl),\n+                        (_, value) if pat_is_wild(value, body) => (pat[0].span, \"key\", tam.ty, MutImmutable),\n                         _ => return,\n                     }\n                 },\n@@ -834,14 +834,13 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n }\n \n /// Return true if the pattern is a `PatWild` or an ident prefixed with `'_'`.\n-fn pat_is_wild<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, pat: &'tcx PatKind, body: &'tcx Expr) -> bool {\n+fn pat_is_wild<'tcx>(pat: &'tcx PatKind, body: &'tcx Expr) -> bool {\n     match *pat {\n         PatKind::Wild => true,\n         PatKind::Binding(_, _, ident, None) if ident.node.as_str().starts_with('_') => {\n             let mut visitor = UsedVisitor {\n                 var: ident.node,\n                 used: false,\n-                cx: cx,\n             };\n             walk_expr(&mut visitor, body);\n             !visitor.used\n@@ -850,13 +849,12 @@ fn pat_is_wild<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, pat: &'tcx PatKind, bod\n     }\n }\n \n-struct UsedVisitor<'a, 'tcx: 'a> {\n+struct UsedVisitor {\n     var: ast::Name, // var to look for\n     used: bool, // has the var been used otherwise?\n-    cx: &'a LateContext<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx: 'a> Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for UsedVisitor {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n         if let ExprPath(QPath::Resolved(None, ref path)) = expr.node {\n             if path.segments.len() == 1 && path.segments[0].name == self.var {\n@@ -868,7 +866,7 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.hir)\n+        NestedVisitorMap::None\n     }\n }\n \n@@ -920,7 +918,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.hir)\n+        NestedVisitorMap::None\n     }\n }\n \n@@ -962,7 +960,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarUsedAfterLoopVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.hir)\n+        NestedVisitorMap::None\n     }\n }\n \n@@ -1105,7 +1103,7 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.hir)\n+        NestedVisitorMap::None\n     }\n }\n \n@@ -1192,7 +1190,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.hir)\n+        NestedVisitorMap::None\n     }\n }\n "}, {"sha": "681bbc42a6f74177dbc6fc5b8c402aaf3da98478", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=29cb2f7eba5f08962ca129111a65299e8afe8b3d", "patch": "@@ -91,6 +91,6 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n         intravisit::walk_ty(self, ty);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n-        intravisit::NestedVisitorMap::All(&self.cx.tcx.hir)\n+        intravisit::NestedVisitorMap::None\n     }\n }"}, {"sha": "8a6b950327b931ed3835a032a4acbba83607804f", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=29cb2f7eba5f08962ca129111a65299e8afe8b3d", "patch": "@@ -251,7 +251,7 @@ fn lint_shadow<'a, 'tcx: 'a>(\n                                         snippet(cx, pattern_span, \"_\"),\n                                         snippet(cx, expr.span, \"..\")),\n                                |db| { db.span_note(prev_span, \"previous binding is here\"); });\n-        } else if contains_self(cx, name, expr) {\n+        } else if contains_self(name, expr) {\n             span_lint_and_then(cx,\n                                SHADOW_REUSE,\n                                pattern_span,\n@@ -369,28 +369,26 @@ fn path_eq_name(name: Name, path: &Path) -> bool {\n     !path.is_global() && path.segments.len() == 1 && path.segments[0].name.as_str() == name.as_str()\n }\n \n-struct ContainsSelf<'a, 'tcx: 'a> {\n+struct ContainsSelf {\n     name: Name,\n     result: bool,\n-    cx: &'a LateContext<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx: 'a> Visitor<'tcx> for ContainsSelf<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for ContainsSelf {\n     fn visit_name(&mut self, _: Span, name: Name) {\n         if self.name == name {\n             self.result = true;\n         }\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.hir)\n+        NestedVisitorMap::None\n     }\n }\n \n-fn contains_self<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, name: Name, expr: &'tcx Expr) -> bool {\n+fn contains_self(name: Name, expr: &Expr) -> bool {\n     let mut cs = ContainsSelf {\n         name: name,\n         result: false,\n-        cx: cx,\n     };\n     cs.visit_expr(expr);\n     cs.result"}, {"sha": "7254862a38071f7adc8a440721d3664858b28a15", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29cb2f7eba5f08962ca129111a65299e8afe8b3d/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=29cb2f7eba5f08962ca129111a65299e8afe8b3d", "patch": "@@ -693,15 +693,14 @@ impl<'a, 'tcx> TypeComplexityPass {\n         }\n     }\n \n-    fn check_type(&self, cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty) {\n+    fn check_type(&self, cx: &LateContext, ty: &Ty) {\n         if in_macro(ty.span) {\n             return;\n         }\n         let score = {\n             let mut visitor = TypeComplexityVisitor {\n                 score: 0,\n                 nest: 1,\n-                cx: cx,\n             };\n             visitor.visit_ty(ty);\n             visitor.score\n@@ -717,15 +716,14 @@ impl<'a, 'tcx> TypeComplexityPass {\n }\n \n /// Walks a type and assigns a complexity score to it.\n-struct TypeComplexityVisitor<'a, 'tcx: 'a> {\n+struct TypeComplexityVisitor{\n     /// total complexity score of the type\n     score: u64,\n     /// current nesting level\n     nest: u64,\n-    cx: &'a LateContext<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx: 'a> Visitor<'tcx> for TypeComplexityVisitor<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n     fn visit_ty(&mut self, ty: &'tcx Ty) {\n         let (add_score, sub_nest) = match ty.node {\n             // _, &x and *x have only small overhead; don't mess with nesting level\n@@ -757,7 +755,7 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for TypeComplexityVisitor<'a, 'tcx> {\n         self.nest -= sub_nest;\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.hir)\n+        NestedVisitorMap::None\n     }\n }\n "}, {"sha": "6e8b6562f3655c822a3a38a7283e294e5c85c811", "filename": "tests/run-pass/regressions.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29cb2f7eba5f08962ca129111a65299e8afe8b3d/tests%2Frun-pass%2Fregressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29cb2f7eba5f08962ca129111a65299e8afe8b3d/tests%2Frun-pass%2Fregressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregressions.rs?ref=29cb2f7eba5f08962ca129111a65299e8afe8b3d", "patch": "@@ -0,0 +1,8 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+pub fn foo(bar: *const u8) {\n+    println!(\"{:#p}\", bar);\n+}\n+\n+fn main() {}"}, {"sha": "9c5129654e416f109ce9e33ebc92e604a3413860", "filename": "tests/ui/ices.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29cb2f7eba5f08962ca129111a65299e8afe8b3d/tests%2Fui%2Fices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29cb2f7eba5f08962ca129111a65299e8afe8b3d/tests%2Fui%2Fices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fices.rs?ref=29cb2f7eba5f08962ca129111a65299e8afe8b3d", "patch": "@@ -0,0 +1,5 @@\n+\n+// this used to ICE\n+fubar!();\n+\n+fn main() {}"}, {"sha": "cadd7cd417d4cc8187ca1831f32ea2a9ffb0e91a", "filename": "tests/ui/ices.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29cb2f7eba5f08962ca129111a65299e8afe8b3d/tests%2Fui%2Fices.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29cb2f7eba5f08962ca129111a65299e8afe8b3d/tests%2Fui%2Fices.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fices.stderr?ref=29cb2f7eba5f08962ca129111a65299e8afe8b3d", "patch": "@@ -0,0 +1,8 @@\n+error: cannot find macro `fubar!` in this scope\n+ --> $DIR/ices.rs:3:1\n+  |\n+3 | fubar!();\n+  | ^^^^^\n+\n+error: aborting due to previous error\n+"}]}