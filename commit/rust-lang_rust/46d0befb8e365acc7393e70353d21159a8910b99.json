{"sha": "46d0befb8e365acc7393e70353d21159a8910b99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZDBiZWZiOGUzNjVhY2M3MzkzZTcwMzUzZDIxMTU5YTg5MTBiOTk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-05T08:51:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-05T08:51:18Z"}, "message": "Rollup merge of #49253 - chmanchester:probing_fix, r=alexcrichton\n\nTake the original extra-filename passed to a crate into account when resolving it as a dependency\n\nresolving it as a dependency.\n\nFixes #46816", "tree": {"sha": "25523252fcb01a02a6f0d5e03a8e66c36b918936", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25523252fcb01a02a6f0d5e03a8e66c36b918936"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46d0befb8e365acc7393e70353d21159a8910b99", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaxeOGCRBK7hj4Ov3rIwAAdHIIAD0xmrnM2oyw7GyMBbePfsaS\nnYw18quqYs+Ge0Fi8/arf4fnnZGWmlqwsP2tu5q0vYye0jrdYTLCdb4aNyLXhO8t\nSA52WvgaiWjhE6BYEM7oiSj3asyL6xQeUr8rdHE1mmoV5qsuRACWHOP3jzmMAIf1\nH6ZryHppWR5mEMa+L8x0c2NBROHL5sWIs0BfftjvzOpyInldHeC1gqbOiBC0Sh3Y\nkiCSy8829u8+tXR6sbhy7mpdSVAzUYHdfhTUJuOeH0mGlAIAt2+VDhcsLReXgJlE\nn5z3r8UZnbAPUOmDTvGBRWM1sUPG9NsGgC563c11Ws9PinM6TA+UH+3m9iomLxY=\n=hQnW\n-----END PGP SIGNATURE-----\n", "payload": "tree 25523252fcb01a02a6f0d5e03a8e66c36b918936\nparent 920249abdd974caf4f0ea4ddbe068848beb0f1f2\nparent bd8154784ea205d78c30c18a5908e97718f7a489\nauthor kennytm <kennytm@gmail.com> 1522918278 +0800\ncommitter GitHub <noreply@github.com> 1522918278 +0800\n\nRollup merge of #49253 - chmanchester:probing_fix, r=alexcrichton\n\nTake the original extra-filename passed to a crate into account when resolving it as a dependency\n\nresolving it as a dependency.\n\nFixes #46816\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46d0befb8e365acc7393e70353d21159a8910b99", "html_url": "https://github.com/rust-lang/rust/commit/46d0befb8e365acc7393e70353d21159a8910b99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46d0befb8e365acc7393e70353d21159a8910b99/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920249abdd974caf4f0ea4ddbe068848beb0f1f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/920249abdd974caf4f0ea4ddbe068848beb0f1f2", "html_url": "https://github.com/rust-lang/rust/commit/920249abdd974caf4f0ea4ddbe068848beb0f1f2"}, {"sha": "bd8154784ea205d78c30c18a5908e97718f7a489", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8154784ea205d78c30c18a5908e97718f7a489", "html_url": "https://github.com/rust-lang/rust/commit/bd8154784ea205d78c30c18a5908e97718f7a489"}], "stats": {"total": 121, "additions": 107, "deletions": 14}, "files": [{"sha": "d1f3736556c5dc28eaff476814ae693bc0dc412e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=46d0befb8e365acc7393e70353d21159a8910b99", "patch": "@@ -589,6 +589,7 @@ define_dep_nodes!( <'tcx>\n     [input] CrateDisambiguator(CrateNum),\n     [input] CrateHash(CrateNum),\n     [input] OriginalCrateName(CrateNum),\n+    [input] ExtraFileName(CrateNum),\n \n     [] ImplementationsOfTrait { krate: CrateNum, trait_id: DefId },\n     [] AllTraitImplementations(CrateNum),"}, {"sha": "a08cd57b1f7e24639d4e1128419f4240f6f9428e", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=46d0befb8e365acc7393e70353d21159a8910b99", "patch": "@@ -466,6 +466,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::original_crate_name<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::extra_filename<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"looking up the extra filename for a crate\")\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::implementations_of_trait<'tcx> {\n     fn describe(_tcx: TyCtxt, _: (CrateNum, DefId)) -> String {\n         format!(\"looking up implementations of a trait in a crate\")"}, {"sha": "8651619705b4203680a513756eea95bab481330f", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=46d0befb8e365acc7393e70353d21159a8910b99", "patch": "@@ -328,6 +328,7 @@ define_maps! { <'tcx>\n     [] fn crate_disambiguator: CrateDisambiguator(CrateNum) -> CrateDisambiguator,\n     [] fn crate_hash: CrateHash(CrateNum) -> Svh,\n     [] fn original_crate_name: OriginalCrateName(CrateNum) -> Symbol,\n+    [] fn extra_filename: ExtraFileName(CrateNum) -> String,\n \n     [] fn implementations_of_trait: implementations_of_trait_node((CrateNum, DefId))\n         -> Lrc<Vec<DefId>>,"}, {"sha": "fa69eb8e5bc661f8b057538b6c88d1cd1b271cbd", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=46d0befb8e365acc7393e70353d21159a8910b99", "patch": "@@ -881,6 +881,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::CrateDisambiguator => { force!(crate_disambiguator, krate!()); }\n         DepKind::CrateHash => { force!(crate_hash, krate!()); }\n         DepKind::OriginalCrateName => { force!(original_crate_name, krate!()); }\n+        DepKind::ExtraFileName => { force!(extra_filename, krate!()); }\n \n         DepKind::AllTraitImplementations => {\n             force!(all_trait_implementations, krate!());"}, {"sha": "86f495c5fac3a2782e245ed06bc2364d0184f2ad", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=46d0befb8e365acc7393e70353d21159a8910b99", "patch": "@@ -262,6 +262,7 @@ impl<'a> CrateLoader<'a> {\n                      ident: Symbol,\n                      name: Symbol,\n                      hash: Option<&Svh>,\n+                     extra_filename: Option<&str>,\n                      span: Span,\n                      path_kind: PathKind,\n                      mut dep_kind: DepKind)\n@@ -277,6 +278,7 @@ impl<'a> CrateLoader<'a> {\n                 ident,\n                 crate_name: name,\n                 hash: hash.map(|a| &*a),\n+                extra_filename: extra_filename,\n                 filesearch: self.sess.target_filesearch(path_kind),\n                 target: &self.sess.target.target,\n                 triple: &self.sess.opts.target_triple,\n@@ -409,7 +411,8 @@ impl<'a> CrateLoader<'a> {\n         ::std::iter::once(krate).chain(crate_root.crate_deps\n                                                  .decode(metadata)\n                                                  .map(|dep| {\n-            debug!(\"resolving dep crate {} hash: `{}`\", dep.name, dep.hash);\n+            info!(\"resolving dep crate {} hash: `{}` extra filename: `{}`\", dep.name, dep.hash,\n+                  dep.extra_filename);\n             if dep.kind == DepKind::UnexportedMacrosOnly {\n                 return krate;\n             }\n@@ -418,7 +421,8 @@ impl<'a> CrateLoader<'a> {\n                 _ => dep.kind,\n             };\n             let (local_cnum, ..) = self.resolve_crate(\n-                root, dep.name, dep.name, Some(&dep.hash), span, PathKind::Dependency, dep_kind,\n+                root, dep.name, dep.name, Some(&dep.hash), Some(&dep.extra_filename), span,\n+                PathKind::Dependency, dep_kind,\n             );\n             local_cnum\n         })).collect()\n@@ -437,6 +441,7 @@ impl<'a> CrateLoader<'a> {\n             ident: orig_name,\n             crate_name: rename,\n             hash: None,\n+            extra_filename: None,\n             filesearch: self.sess.host_filesearch(PathKind::Crate),\n             target: &self.sess.host,\n             triple: &host_triple,\n@@ -664,7 +669,7 @@ impl<'a> CrateLoader<'a> {\n \n         let dep_kind = DepKind::Implicit;\n         let (cnum, data) =\n-            self.resolve_crate(&None, name, name, None, DUMMY_SP, PathKind::Crate, dep_kind);\n+            self.resolve_crate(&None, name, name, None, None, DUMMY_SP, PathKind::Crate, dep_kind);\n \n         // Sanity check the loaded crate to ensure it is indeed a panic runtime\n         // and the panic strategy is indeed what we thought it was.\n@@ -771,7 +776,7 @@ impl<'a> CrateLoader<'a> {\n                 let symbol = Symbol::intern(name);\n                 let dep_kind = DepKind::Explicit;\n                 let (_, data) =\n-                    self.resolve_crate(&None, symbol, symbol, None, DUMMY_SP,\n+                    self.resolve_crate(&None, symbol, symbol, None, None, DUMMY_SP,\n                                        PathKind::Crate, dep_kind);\n \n                 // Sanity check the loaded crate to ensure it is indeed a sanitizer runtime\n@@ -794,7 +799,7 @@ impl<'a> CrateLoader<'a> {\n             let symbol = Symbol::intern(\"profiler_builtins\");\n             let dep_kind = DepKind::Implicit;\n             let (_, data) =\n-                self.resolve_crate(&None, symbol, symbol, None, DUMMY_SP,\n+                self.resolve_crate(&None, symbol, symbol, None, None, DUMMY_SP,\n                                    PathKind::Crate, dep_kind);\n \n             // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n@@ -909,6 +914,7 @@ impl<'a> CrateLoader<'a> {\n                                                               name,\n                                                               name,\n                                                               None,\n+                                                              None,\n                                                               DUMMY_SP,\n                                                               PathKind::Crate,\n                                                               DepKind::Implicit);\n@@ -1059,7 +1065,8 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n                 };\n \n                 let (cnum, ..) = self.resolve_crate(\n-                    &None, item.ident.name, orig_name, None, item.span, PathKind::Crate, dep_kind,\n+                    &None, item.ident.name, orig_name, None, None,\n+                    item.span, PathKind::Crate, dep_kind,\n                 );\n \n                 let def_id = definitions.opt_local_def_id(item.id).unwrap();\n@@ -1074,6 +1081,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n     }\n \n     fn resolve_crate_from_path(&mut self, name: Symbol, span: Span) -> CrateNum {\n-        self.resolve_crate(&None, name, name, None, span, PathKind::Crate, DepKind::Explicit).0\n+        self.resolve_crate(&None, name, name, None, None, span, PathKind::Crate,\n+                           DepKind::Explicit).0\n     }\n }"}, {"sha": "f63edf07fa8ba5b6615079f4c1739e7e18864378", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=46d0befb8e365acc7393e70353d21159a8910b99", "patch": "@@ -213,6 +213,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     crate_hash => { cdata.hash() }\n     original_crate_name => { cdata.name() }\n \n+    extra_filename => { cdata.root.extra_filename.clone() }\n+\n+\n     implementations_of_trait => {\n         let mut result = vec![];\n         let filter = Some(other);"}, {"sha": "0da6fc5b9eda19267d012e54052a123a9f0b7f57", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=46d0befb8e365acc7393e70353d21159a8910b99", "patch": "@@ -462,6 +462,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let has_global_allocator = tcx.sess.has_global_allocator.get();\n         let root = self.lazy(&CrateRoot {\n             name: tcx.crate_name(LOCAL_CRATE),\n+            extra_filename: tcx.sess.opts.cg.extra_filename.clone(),\n             triple: tcx.sess.opts.target_triple.clone(),\n             hash: link_meta.crate_hash,\n             disambiguator: tcx.sess.local_crate_disambiguator(),\n@@ -1357,6 +1358,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                     name: self.tcx.original_crate_name(cnum),\n                     hash: self.tcx.crate_hash(cnum),\n                     kind: self.tcx.dep_kind(cnum),\n+                    extra_filename: self.tcx.extra_filename(cnum),\n                 };\n                 (cnum, dep)\n             })"}, {"sha": "f553c55ae56fad5cf5ef9f407c6111c56ee47e77", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=46d0befb8e365acc7393e70353d21159a8910b99", "patch": "@@ -83,7 +83,10 @@\n //! 1. Does the filename match an rlib/dylib pattern? That is to say, does the\n //!    filename have the right prefix/suffix?\n //! 2. Does the filename have the right prefix for the crate name being queried?\n-//!    This is filtering for files like `libfoo*.rlib` and such.\n+//!    This is filtering for files like `libfoo*.rlib` and such. If the crate\n+//!    we're looking for was originally compiled with -C extra-filename, the\n+//!    extra filename will be included in this prefix to reduce reading\n+//!    metadata from crates that would otherwise share our prefix.\n //! 3. Is the file an actual rust library? This is done by loading the metadata\n //!    from the library and making sure it's actually there.\n //! 4. Does the name in the metadata agree with the name of the library?\n@@ -236,6 +239,7 @@ use syntax_pos::Span;\n use rustc_back::target::{Target, TargetTriple};\n \n use std::cmp;\n+use std::collections::HashSet;\n use std::fmt;\n use std::fs;\n use std::io::{self, Read};\n@@ -256,6 +260,7 @@ pub struct Context<'a> {\n     pub ident: Symbol,\n     pub crate_name: Symbol,\n     pub hash: Option<&'a Svh>,\n+    pub extra_filename: Option<&'a str>,\n     // points to either self.sess.target.target or self.sess.host, must match triple\n     pub target: &'a Target,\n     pub triple: &'a TargetTriple,\n@@ -303,7 +308,12 @@ impl CratePaths {\n \n impl<'a> Context<'a> {\n     pub fn maybe_load_library_crate(&mut self) -> Option<Library> {\n-        self.find_library_crate()\n+        let mut seen_paths = HashSet::new();\n+        match self.extra_filename {\n+            Some(s) => self.find_library_crate(s, &mut seen_paths)\n+                .or_else(|| self.find_library_crate(\"\", &mut seen_paths)),\n+            None => self.find_library_crate(\"\", &mut seen_paths)\n+        }\n     }\n \n     pub fn report_errs(&mut self) -> ! {\n@@ -419,7 +429,10 @@ impl<'a> Context<'a> {\n         unreachable!();\n     }\n \n-    fn find_library_crate(&mut self) -> Option<Library> {\n+    fn find_library_crate(&mut self,\n+                          extra_prefix: &str,\n+                          seen_paths: &mut HashSet<PathBuf>)\n+                          -> Option<Library> {\n         // If an SVH is specified, then this is a transitive dependency that\n         // must be loaded via -L plus some filtering.\n         if self.hash.is_none() {\n@@ -434,9 +447,9 @@ impl<'a> Context<'a> {\n         let staticpair = self.staticlibname();\n \n         // want: crate_name.dir_part() + prefix + crate_name.file_part + \"-\"\n-        let dylib_prefix = format!(\"{}{}\", dypair.0, self.crate_name);\n-        let rlib_prefix = format!(\"lib{}\", self.crate_name);\n-        let staticlib_prefix = format!(\"{}{}\", staticpair.0, self.crate_name);\n+        let dylib_prefix = format!(\"{}{}{}\", dypair.0, self.crate_name, extra_prefix);\n+        let rlib_prefix = format!(\"lib{}{}\", self.crate_name, extra_prefix);\n+        let staticlib_prefix = format!(\"{}{}{}\", staticpair.0, self.crate_name, extra_prefix);\n \n         let mut candidates = FxHashMap();\n         let mut staticlibs = vec![];\n@@ -476,6 +489,7 @@ impl<'a> Context<'a> {\n                     }\n                     return FileDoesntMatch;\n                 };\n+\n             info!(\"lib candidate: {}\", path.display());\n \n             let hash_str = hash.to_string();\n@@ -484,6 +498,10 @@ impl<'a> Context<'a> {\n             let (ref mut rlibs, ref mut rmetas, ref mut dylibs) = *slot;\n             fs::canonicalize(path)\n                 .map(|p| {\n+                    if seen_paths.contains(&p) {\n+                        return FileDoesntMatch\n+                    };\n+                    seen_paths.insert(p.clone());\n                     match found_kind {\n                         CrateFlavor::Rlib => { rlibs.insert(p, kind); }\n                         CrateFlavor::Rmeta => { rmetas.insert(p, kind); }"}, {"sha": "a7ee0e7e9a961c7eb5b2eb461532d88dcbbf5588", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d0befb8e365acc7393e70353d21159a8910b99/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=46d0befb8e365acc7393e70353d21159a8910b99", "patch": "@@ -188,6 +188,7 @@ pub enum LazyState {\n pub struct CrateRoot {\n     pub name: Symbol,\n     pub triple: TargetTriple,\n+    pub extra_filename: String,\n     pub hash: hir::svh::Svh,\n     pub disambiguator: CrateDisambiguator,\n     pub panic_strategy: PanicStrategy,\n@@ -216,12 +217,14 @@ pub struct CrateDep {\n     pub name: ast::Name,\n     pub hash: hir::svh::Svh,\n     pub kind: DepKind,\n+    pub extra_filename: String,\n }\n \n impl_stable_hash_for!(struct CrateDep {\n     name,\n     hash,\n-    kind\n+    kind,\n+    extra_filename\n });\n \n #[derive(RustcEncodable, RustcDecodable)]"}, {"sha": "4b0c36d01b7a86feaecf8c95283c5b121d040798", "filename": "src/test/run-make-fulldeps/resolve-rename/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/46d0befb8e365acc7393e70353d21159a8910b99/src%2Ftest%2Frun-make-fulldeps%2Fresolve-rename%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/46d0befb8e365acc7393e70353d21159a8910b99/src%2Ftest%2Frun-make-fulldeps%2Fresolve-rename%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fresolve-rename%2FMakefile?ref=46d0befb8e365acc7393e70353d21159a8910b99", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) -C extra-filename=-hash foo.rs\n+\t$(RUSTC) bar.rs\n+\tmv $(TMPDIR)/libfoo-hash.rlib $(TMPDIR)/libfoo-another-hash.rlib\n+\t$(RUSTC) baz.rs"}, {"sha": "1552b45f2fc16075d27f459ae8c052c27078be6d", "filename": "src/test/run-make-fulldeps/resolve-rename/bar.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/46d0befb8e365acc7393e70353d21159a8910b99/src%2Ftest%2Frun-make-fulldeps%2Fresolve-rename%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d0befb8e365acc7393e70353d21159a8910b99/src%2Ftest%2Frun-make-fulldeps%2Fresolve-rename%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fresolve-rename%2Fbar.rs?ref=46d0befb8e365acc7393e70353d21159a8910b99", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+extern crate foo;\n+\n+pub fn bar() { foo::foo() }"}, {"sha": "27d801490e4256dd64e82aac7580e17673a3fe7a", "filename": "src/test/run-make-fulldeps/resolve-rename/baz.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/46d0befb8e365acc7393e70353d21159a8910b99/src%2Ftest%2Frun-make-fulldeps%2Fresolve-rename%2Fbaz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d0befb8e365acc7393e70353d21159a8910b99/src%2Ftest%2Frun-make-fulldeps%2Fresolve-rename%2Fbaz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fresolve-rename%2Fbaz.rs?ref=46d0befb8e365acc7393e70353d21159a8910b99", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+extern crate bar;\n+\n+pub fn baz() { bar::bar() }"}, {"sha": "830c289b65f1169a063d63885aeff1fe0141fd46", "filename": "src/test/run-make-fulldeps/resolve-rename/foo.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/46d0befb8e365acc7393e70353d21159a8910b99/src%2Ftest%2Frun-make-fulldeps%2Fresolve-rename%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d0befb8e365acc7393e70353d21159a8910b99/src%2Ftest%2Frun-make-fulldeps%2Fresolve-rename%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fresolve-rename%2Ffoo.rs?ref=46d0befb8e365acc7393e70353d21159a8910b99", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+pub fn foo() {}"}]}