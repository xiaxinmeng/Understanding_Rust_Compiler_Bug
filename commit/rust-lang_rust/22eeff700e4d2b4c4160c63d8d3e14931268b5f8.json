{"sha": "22eeff700e4d2b4c4160c63d8d3e14931268b5f8", "node_id": "C_kwDOAAsO6NoAKDIyZWVmZjcwMGU0ZDJiNGM0MTYwYzYzZDhkM2UxNDkzMTI2OGI1Zjg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-21T13:23:00Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-11-29T13:19:42Z"}, "message": "Prepare for more ParamEnv flags", "tree": {"sha": "03ad9017228525027483ee6d0a9aa65abad95b01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03ad9017228525027483ee6d0a9aa65abad95b01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22eeff700e4d2b4c4160c63d8d3e14931268b5f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmGk024ACgkQbQF6ltjm\nwvkwDw/9GfC2OeLXTHeYA2/siOMA+Eib9JCkwRkExmx3MgOAkwqrSWzK0EJRhcpc\nS1GMbhT2lFcYC7QyXptn6FQ9iG78K3YUHXSdECZfcLG50GDO2Po2FSpafyP3S55A\nwF9cjlQ1D0xiwwvkUP04zgNyEgdlBI6TBK4LJJ3tPMdRvHR+l8gFI/2BmVR+oqqy\nhY9+6Ka6ekUC8R10Eo8i8m3nKKdXT8Te/cWET6/QuUm+Gqt2ziPEVqHo8bwKko5m\n9bMlD4+xwlJvOyZ690ApDIAySyV6lAhPz38E5woC7O2t6v1f23E6pxRuL0OU4YuM\nNEay25sWOk62gqQpZStPxpsOfZhsOcGAtnXFFXUboxzQzBqDj+/x/o9ED1/7uom7\nUgfpxB+D6O3s5gCv06B04D9ZlBUUhVq5B08JJfzu8QxRQIWkXEIbJaOMd/2ERa89\nbEOaZBSjBsNff6RVyhIluDLKZK5xjFXRMF/yXbYvEa8o302yStu6aYWArxm8mOdg\nBhrzqJRAyv3DRM+a4HWt4Cr1O4wTR3/ySOUcY4n+Vmf5wZpJ31+aHPgX4JUBvIrf\nxTDsuc2MwEpWVSsxTquwOgRZGELj/Y1ARjtVib5/M31qdHXRINE4iLm9u1wojfCP\n9/qOJ4NtFsMx03nDhG6H+/OjCUCNIk0ejXFTVSTRWKX9sXlKi+I=\n=OPOx\n-----END PGP SIGNATURE-----", "payload": "tree 03ad9017228525027483ee6d0a9aa65abad95b01\nparent 44723c5d59ff00daeefbf2a01f67089acd75730d\nauthor Oli Scherer <git-spam-no-reply9815368754983@oli-obk.de> 1634822580 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1638191982 +0800\n\nPrepare for more ParamEnv flags\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22eeff700e4d2b4c4160c63d8d3e14931268b5f8", "html_url": "https://github.com/rust-lang/rust/commit/22eeff700e4d2b4c4160c63d8d3e14931268b5f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22eeff700e4d2b4c4160c63d8d3e14931268b5f8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44723c5d59ff00daeefbf2a01f67089acd75730d", "url": "https://api.github.com/repos/rust-lang/rust/commits/44723c5d59ff00daeefbf2a01f67089acd75730d", "html_url": "https://github.com/rust-lang/rust/commit/44723c5d59ff00daeefbf2a01f67089acd75730d"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "4720c895a1ee800f1eba2693d4a148a7bb5de166", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/22eeff700e4d2b4c4160c63d8d3e14931268b5f8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22eeff700e4d2b4c4160c63d8d3e14931268b5f8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=22eeff700e4d2b4c4160c63d8d3e14931268b5f8", "patch": "@@ -1221,23 +1221,28 @@ pub struct ParamEnv<'tcx> {\n     /// want `Reveal::All`.\n     ///\n     /// Note: This is packed, use the reveal() method to access it.\n-    packed: CopyTaggedPtr<&'tcx List<Predicate<'tcx>>, traits::Reveal, true>,\n+    packed: CopyTaggedPtr<&'tcx List<Predicate<'tcx>>, ParamTag, true>,\n }\n \n-unsafe impl rustc_data_structures::tagged_ptr::Tag for traits::Reveal {\n+#[derive(Copy, Clone)]\n+struct ParamTag {\n+    reveal: traits::Reveal,\n+}\n+\n+unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {\n     const BITS: usize = 1;\n     #[inline]\n     fn into_usize(self) -> usize {\n         match self {\n-            traits::Reveal::UserFacing => 0,\n-            traits::Reveal::All => 1,\n+            Self { reveal: traits::Reveal::UserFacing } => 0,\n+            Self { reveal: traits::Reveal::All } => 1,\n         }\n     }\n     #[inline]\n     unsafe fn from_usize(ptr: usize) -> Self {\n         match ptr {\n-            0 => traits::Reveal::UserFacing,\n-            1 => traits::Reveal::All,\n+            0 => Self { reveal: traits::Reveal::UserFacing },\n+            1 => Self { reveal: traits::Reveal::All },\n             _ => std::hint::unreachable_unchecked(),\n         }\n     }\n@@ -1290,7 +1295,7 @@ impl<'tcx> ParamEnv<'tcx> {\n \n     #[inline]\n     pub fn reveal(self) -> traits::Reveal {\n-        self.packed.tag()\n+        self.packed.tag().reveal\n     }\n \n     /// Construct a trait environment with no where-clauses in scope\n@@ -1308,11 +1313,11 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// Construct a trait environment with the given set of predicates.\n     #[inline]\n     pub fn new(caller_bounds: &'tcx List<Predicate<'tcx>>, reveal: Reveal) -> Self {\n-        ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, reveal) }\n+        ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal }) }\n     }\n \n     pub fn with_user_facing(mut self) -> Self {\n-        self.packed.set_tag(Reveal::UserFacing);\n+        self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });\n         self\n     }\n \n@@ -1326,7 +1331,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// will be normalized to their underlying types.\n     /// See PR #65989 and issue #65918 for more details\n     pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {\n-        if self.packed.tag() == traits::Reveal::All {\n+        if self.packed.tag().reveal == traits::Reveal::All {\n             return self;\n         }\n "}]}