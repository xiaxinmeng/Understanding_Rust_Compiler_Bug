{"sha": "ab3b65737380d2c2a15a868452026df49c58131a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiM2I2NTczNzM4MGQyYzJhMTVhODY4NDUyMDI2ZGY0OWM1ODEzMWE=", "commit": {"author": {"name": "Christian", "email": "chris_veenman@hotmail.com", "date": "2019-04-03T08:54:07Z"}, "committer": {"name": "Christian", "email": "chris_veenman@hotmail.com", "date": "2019-04-03T08:54:07Z"}, "message": "Updated the documentation of core::hints::spin_loop and core::sync::spin_loop_hint", "tree": {"sha": "b3f703dbd7924226682b978305545a7b8bffda8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3f703dbd7924226682b978305545a7b8bffda8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab3b65737380d2c2a15a868452026df49c58131a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3b65737380d2c2a15a868452026df49c58131a", "html_url": "https://github.com/rust-lang/rust/commit/ab3b65737380d2c2a15a868452026df49c58131a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab3b65737380d2c2a15a868452026df49c58131a/comments", "author": null, "committer": null, "parents": [{"sha": "f694222887cf31f51e68927716c25736e62f037f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f694222887cf31f51e68927716c25736e62f037f", "html_url": "https://github.com/rust-lang/rust/commit/f694222887cf31f51e68927716c25736e62f037f"}], "stats": {"total": 54, "additions": 40, "deletions": 14}, "files": [{"sha": "7d2006e03c409f9eb4f7941483c8c320c65dbc7f", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ab3b65737380d2c2a15a868452026df49c58131a/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3b65737380d2c2a15a868452026df49c58131a/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=ab3b65737380d2c2a15a868452026df49c58131a", "patch": "@@ -50,15 +50,28 @@ pub unsafe fn unreachable_unchecked() -> ! {\n     intrinsics::unreachable()\n }\n \n-/// Save power or switch hyperthreads in a busy-wait spin-loop.\n+/// Signals the processor that it is entering a busy-wait spin-loop.\n ///\n-/// This function is deliberately more primitive than\n-/// [`std::thread::yield_now`](../../std/thread/fn.yield_now.html) and\n-/// does not directly yield to the system's scheduler.\n-/// In some cases it might be useful to use a combination of both functions.\n-/// Careful benchmarking is advised.\n+/// Upon receiving spin-loop signal the processor can optimize its behavior by, for example, saving\n+/// power or switching hyper-threads.\n ///\n-/// On some platforms this function may not do anything at all.\n+/// This function is different than [`std::thread::yield_now`] which directly yields to the\n+/// system's scheduler, whereas `spin_loop` only signals the processor that it is entering a\n+/// busy-wait spin-loop without yielding control to the system's scheduler.\n+///\n+/// Using a busy-wait spin-loop with `spin_loop` is ideally used in situations where a\n+/// contended lock is held by another thread executed on a different CPU and where the waiting\n+/// times are relatively small. Because entering busy-wait spin-loop does not trigger the system's\n+/// scheduler, no overhead for switching threads occurs. However, if the thread holding the\n+/// contended lock is running on the same CPU, the spin-loop is likely to occupy an entire CPU slice\n+/// before switching to the thread that holds the lock. If the contending lock is held by a thread\n+/// on the same CPU or if the waiting times for acquiring the lock are longer, it is often better to\n+/// use [`std::thread::yield_now`].\n+///\n+/// **Note**: On platforms that do not support receiving spin-loop hints this function does not\n+/// do anything at all.\n+///\n+/// [`std::thread::yield_now`]: ../../../std/thread/fn.yield_now.html\n #[inline]\n #[unstable(feature = \"renamed_spin_loop\", issue = \"55002\")]\n pub fn spin_loop() {"}, {"sha": "26b59969e18afc20c4b31736f0eaed9d6cfb4fc5", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ab3b65737380d2c2a15a868452026df49c58131a/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3b65737380d2c2a15a868452026df49c58131a/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=ab3b65737380d2c2a15a868452026df49c58131a", "patch": "@@ -124,15 +124,28 @@ use fmt;\n \n use hint::spin_loop;\n \n-/// Save power or switch hyperthreads in a busy-wait spin-loop.\n+/// Signals the processor that it is entering a busy-wait spin-loop.\n ///\n-/// This function is deliberately more primitive than\n-/// [`std::thread::yield_now`](../../../std/thread/fn.yield_now.html) and\n-/// does not directly yield to the system's scheduler.\n-/// In some cases it might be useful to use a combination of both functions.\n-/// Careful benchmarking is advised.\n+/// Upon receiving spin-loop signal the processor can optimize its behavior by, for example, saving\n+/// power or switching hyper-threads.\n ///\n-/// On some platforms this function may not do anything at all.\n+/// This function is different than [`std::thread::yield_now`] which directly yields to the\n+/// system's scheduler, whereas `spin_loop_hint` only signals the processor that it is entering a\n+/// busy-wait spin-loop without yielding control to the system's scheduler.\n+///\n+/// Using a busy-wait spin-loop with `spin_loop_hint` is ideally used in situations where a\n+/// contended lock is held by another thread executed on a different CPU and where the waiting\n+/// times are relatively small. Because entering busy-wait spin-loop does not trigger the system's\n+/// scheduler, no overhead for switching threads occurs. However, if the thread holding the\n+/// contended lock is running on the same CPU, the spin-loop is likely to occupy an entire CPU slice\n+/// before switching to the thread that holds the lock. If the contending lock is held by a thread\n+/// on the same CPU or if the waiting times for acquiring the lock are longer, it is often better to\n+/// use [`std::thread::yield_now`].\n+///\n+/// **Note**: On platforms that do not support receiving spin-loop hints this function does not\n+/// do anything at all.\n+///\n+/// [`std::thread::yield_now`]: ../../../std/thread/fn.yield_now.html\n #[inline]\n #[stable(feature = \"spin_loop_hint\", since = \"1.24.0\")]\n pub fn spin_loop_hint() {"}]}