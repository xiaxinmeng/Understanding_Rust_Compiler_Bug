{"sha": "10c35959e74b26a9c83915e56c2225afbf177d5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYzM1OTU5ZTc0YjI2YTljODM5MTVlNTZjMjIyNWFmYmYxNzdkNWE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-09T23:58:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-10T00:47:44Z"}, "message": "rustc: Rename native_abi_c_stack_stdcall to native_abi_stdcall", "tree": {"sha": "3915a2dba1c08149e13ee770ebd455dd29381ceb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3915a2dba1c08149e13ee770ebd455dd29381ceb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10c35959e74b26a9c83915e56c2225afbf177d5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10c35959e74b26a9c83915e56c2225afbf177d5a", "html_url": "https://github.com/rust-lang/rust/commit/10c35959e74b26a9c83915e56c2225afbf177d5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10c35959e74b26a9c83915e56c2225afbf177d5a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7f0ca6063022e244ab6a2d4e85db1c13867b084", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7f0ca6063022e244ab6a2d4e85db1c13867b084", "html_url": "https://github.com/rust-lang/rust/commit/c7f0ca6063022e244ab6a2d4e85db1c13867b084"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "5efcaaa0c2a6957b89c80bb59fd83c97d4861181", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c35959e74b26a9c83915e56c2225afbf177d5a/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c35959e74b26a9c83915e56c2225afbf177d5a/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=10c35959e74b26a9c83915e56c2225afbf177d5a", "patch": "@@ -52,7 +52,7 @@ fn visit_item(e: env, i: @ast::item) {\n     alt i.node {\n       ast::item_native_mod(m) {\n         if m.abi != ast::native_abi_c_stack_cdecl &&\n-                m.abi != ast::native_abi_c_stack_stdcall {\n+                m.abi != ast::native_abi_stdcall {\n             ret;\n         }\n         let cstore = e.sess.get_cstore();"}, {"sha": "bda297fe1190e658bb32090f3052a7ca5a1811f9", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c35959e74b26a9c83915e56c2225afbf177d5a/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c35959e74b26a9c83915e56c2225afbf177d5a/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=10c35959e74b26a9c83915e56c2225afbf177d5a", "patch": "@@ -261,7 +261,7 @@ fn parse_ty(st: @pstate, sd: str_def) -> ty::t {\n         alt next(st) as char {\n           'i' { abi = ast::native_abi_rust_intrinsic; }\n           'C' { abi = ast::native_abi_c_stack_cdecl; }\n-          'S' { abi = ast::native_abi_c_stack_stdcall; }\n+          'S' { abi = ast::native_abi_stdcall; }\n         }\n         let func = parse_ty_fn(st, sd);\n         ret ty::mk_native_fn(st.tcx, abi, func.args, func.ty);"}, {"sha": "3b03c1920a243c75e82af3db4b3e3447c80a6d74", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c35959e74b26a9c83915e56c2225afbf177d5a/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c35959e74b26a9c83915e56c2225afbf177d5a/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=10c35959e74b26a9c83915e56c2225afbf177d5a", "patch": "@@ -144,7 +144,7 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n         alt abi {\n           native_abi_rust_intrinsic. { w.write_char('i'); }\n           native_abi_c_stack_cdecl. { w.write_char('C'); }\n-          native_abi_c_stack_stdcall. { w.write_char('S'); }\n+          native_abi_stdcall. { w.write_char('S'); }\n         }\n         enc_ty_fn(w, cx, args, out, return_val, []);\n       }"}, {"sha": "6ea8571b75f492a8727fcd103663d192f3b6206d", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c35959e74b26a9c83915e56c2225afbf177d5a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c35959e74b26a9c83915e56c2225afbf177d5a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=10c35959e74b26a9c83915e56c2225afbf177d5a", "patch": "@@ -5598,7 +5598,7 @@ pure fn native_abi_requires_pair(abi: ast::native_abi) -> bool {\n     alt abi {\n         ast::native_abi_rust_intrinsic. { ret true; }\n         ast::native_abi_c_stack_cdecl. |\n-        ast::native_abi_c_stack_stdcall. { ret false; }\n+        ast::native_abi_stdcall. { ret false; }\n     }\n }\n \n@@ -5647,7 +5647,7 @@ fn register_native_fn(ccx: @crate_ctxt, sp: span, path: [str], name: str,\n         ccx.item_symbols.insert(id, name);\n         ret;\n       }\n-      ast::native_abi_c_stack_stdcall. {\n+      ast::native_abi_stdcall. {\n         // The name of stdcall functions depend on their argument count\n         // so we have to declare them correctly\n         let fn_args_tys = ty::ty_fn_args(ccx.tcx, fn_type);"}, {"sha": "e72e4b6da32d52ffdb646ac9df4b685d9530eb33", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c35959e74b26a9c83915e56c2225afbf177d5a/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c35959e74b26a9c83915e56c2225afbf177d5a/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=10c35959e74b26a9c83915e56c2225afbf177d5a", "patch": "@@ -428,7 +428,7 @@ type _mod = {view_items: [@view_item], items: [@item]};\n tag native_abi {\n     native_abi_rust_intrinsic;\n     native_abi_c_stack_cdecl;\n-    native_abi_c_stack_stdcall;\n+    native_abi_stdcall;\n }\n \n type native_mod ="}, {"sha": "11d68160070ef80a7b61142b2fae742f3b738abf", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c35959e74b26a9c83915e56c2225afbf177d5a/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c35959e74b26a9c83915e56c2225afbf177d5a/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=10c35959e74b26a9c83915e56c2225afbf177d5a", "patch": "@@ -2011,7 +2011,7 @@ fn parse_item_native_mod(p: parser, attrs: [ast::attribute]) -> @ast::item {\n         } else if str::eq(t, \"c-stack-cdecl\") {\n             abi = ast::native_abi_c_stack_cdecl;\n         } else if str::eq(t, \"c-stack-stdcall\") {\n-            abi = ast::native_abi_c_stack_stdcall;\n+            abi = ast::native_abi_stdcall;\n         } else {\n             p.fatal(\"unsupported abi: \" + t);\n         }"}, {"sha": "83e5dad1ff5e774b86675a6e76373611855a142b", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c35959e74b26a9c83915e56c2225afbf177d5a/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c35959e74b26a9c83915e56c2225afbf177d5a/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=10c35959e74b26a9c83915e56c2225afbf177d5a", "patch": "@@ -407,7 +407,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n           ast::native_abi_c_stack_cdecl. {\n             word_nbsp(s, \"\\\"c-stack-cdecl\\\"\");\n           }\n-          ast::native_abi_c_stack_stdcall. {\n+          ast::native_abi_stdcall. {\n             word_nbsp(s, \"\\\"c-stack-stdcall\\\"\");\n           }\n         }"}]}