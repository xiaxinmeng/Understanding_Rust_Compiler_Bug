{"sha": "293f662ca94d6f1eac749da55f5ff924c87fd1d5", "node_id": "C_kwDOAAsO6NoAKDI5M2Y2NjJjYTk0ZDZmMWVhYzc0OWRhNTVmNWZmOTI0Yzg3ZmQxZDU", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-10-07T20:45:41Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-10-08T01:25:32Z"}, "message": "Make tests capture the error printed by a Result return", "tree": {"sha": "54c2b56d9288e3fced51c443fa1d871de6d7dd1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54c2b56d9288e3fced51c443fa1d871de6d7dd1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/293f662ca94d6f1eac749da55f5ff924c87fd1d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmNA0YwACgkQ+boUO5X/\nbYLcrBAAxeeODrM6YTnUqAGptlQWHo5RflXM2NarUYwvBFLQ2R1il9YZ//kNn30Y\nj0+5iqjTzVkmi1JqoYeyrDxrRE5/xqoabm3vJIlkm1JVBoTNhWClE+ewdbreLT75\nwbLRxTRZoZ1Gg80ekvvbmMiGpcCuf86tDnFZFz51xgErjV7fVlmYELjPU+wcVkfJ\n4qwPoDCr5ZS0i2EBcisTOi/C7qm+GQ03JKdOaMvWQjXPL89CpSgB/k5+7JgvprHB\nPUMsZ0owLXK0F3GnQXF2eB30mw1KU3dL7JUVlFJVJ185Pi0aI8wat/ijOFBul0wj\nriha/jLFU1EyG7L2lVpPegsVBRk/LZWlZ1jc5YGVJtJt3y5Jqgd46Kg5GArlZ3CJ\nan1Da8il6qhr10znnTlsYTqO8G6NkGCFZRuH9a+sVG+ANrq/4Q3/wu8lmAgfRQcN\nPANWrB3yBJHiwE7VRE3CLxnkTRSbDaVZ74l87hCvCftZ6w45zViR65Al76igBAD+\no2rwYu9xeG8YQ5cThkrFAT27lvOmU19NgLAYYa8f9DC7oEsWp4o5BiXgXQhEB1lQ\nFINtUheBoucz8iXZg6RuC0lxKL0L9Dy19ptVR2POaE0gOcaboKqQCcJBrW+5Kpu3\nXGX6k+SdtUdVNN44Hw1T4d10AHeSn1nXFdynK0G0alonZSg41hI=\n=10yd\n-----END PGP SIGNATURE-----", "payload": "tree 54c2b56d9288e3fced51c443fa1d871de6d7dd1a\nparent 43c22af267fd9337bc05382b2771dde49d2e9f26\nauthor David Tolnay <dtolnay@gmail.com> 1665175541 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1665192332 -0700\n\nMake tests capture the error printed by a Result return\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/293f662ca94d6f1eac749da55f5ff924c87fd1d5", "html_url": "https://github.com/rust-lang/rust/commit/293f662ca94d6f1eac749da55f5ff924c87fd1d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/293f662ca94d6f1eac749da55f5ff924c87fd1d5/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c22af267fd9337bc05382b2771dde49d2e9f26", "url": "https://api.github.com/repos/rust-lang/rust/commits/43c22af267fd9337bc05382b2771dde49d2e9f26", "html_url": "https://github.com/rust-lang/rust/commit/43c22af267fd9337bc05382b2771dde49d2e9f26"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "cceef539b90c7bca0241e9c0861d38e3eda0f00e", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/293f662ca94d6f1eac749da55f5ff924c87fd1d5/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293f662ca94d6f1eac749da55f5ff924c87fd1d5/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=293f662ca94d6f1eac749da55f5ff924c87fd1d5", "patch": "@@ -262,6 +262,7 @@ use crate::sys_common::memchr;\n \n #[stable(feature = \"bufwriter_into_parts\", since = \"1.56.0\")]\n pub use self::buffered::WriterPanicked;\n+pub(crate) use self::stdio::attempt_print_to_stderr;\n #[unstable(feature = \"internal_output_capture\", issue = \"none\")]\n #[doc(no_inline, hidden)]\n pub use self::stdio::set_output_capture;"}, {"sha": "4ccb2bf3231f53a92bdfc70cd89c5c7ff291204c", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/293f662ca94d6f1eac749da55f5ff924c87fd1d5/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293f662ca94d6f1eac749da55f5ff924c87fd1d5/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=293f662ca94d6f1eac749da55f5ff924c87fd1d5", "patch": "@@ -999,7 +999,18 @@ fn print_to<T>(args: fmt::Arguments<'_>, global_s: fn() -> T, label: &str)\n where\n     T: Write,\n {\n-    if OUTPUT_CAPTURE_USED.load(Ordering::Relaxed)\n+    if print_to_buffer_if_capture_used(args) {\n+        // Successfully wrote to capture buffer.\n+        return;\n+    }\n+\n+    if let Err(e) = global_s().write_fmt(args) {\n+        panic!(\"failed printing to {label}: {e}\");\n+    }\n+}\n+\n+fn print_to_buffer_if_capture_used(args: fmt::Arguments<'_>) -> bool {\n+    OUTPUT_CAPTURE_USED.load(Ordering::Relaxed)\n         && OUTPUT_CAPTURE.try_with(|s| {\n             // Note that we completely remove a local sink to write to in case\n             // our printing recursively panics/prints, so the recursive\n@@ -1009,14 +1020,19 @@ where\n                 s.set(Some(w));\n             })\n         }) == Ok(Some(()))\n-    {\n-        // Successfully wrote to capture buffer.\n+}\n+\n+/// Used by impl Termination for Result to print error after `main` or a test\n+/// has returned. Should avoid panicking, although we can't help it if one of\n+/// the Display impls inside args decides to.\n+pub(crate) fn attempt_print_to_stderr(args: fmt::Arguments<'_>) {\n+    if print_to_buffer_if_capture_used(args) {\n         return;\n     }\n \n-    if let Err(e) = global_s().write_fmt(args) {\n-        panic!(\"failed printing to {label}: {e}\");\n-    }\n+    // Ignore error if the write fails, for example because stderr is already\n+    // closed. There is not much point panicking at this point.\n+    let _ = stderr().write_fmt(args);\n }\n \n #[unstable("}, {"sha": "e08ea8f9a5fc9fde9d422d35fede1608e94fea3b", "filename": "library/std/src/process.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/293f662ca94d6f1eac749da55f5ff924c87fd1d5/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293f662ca94d6f1eac749da55f5ff924c87fd1d5/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=293f662ca94d6f1eac749da55f5ff924c87fd1d5", "patch": "@@ -2200,9 +2200,7 @@ impl<T: Termination, E: fmt::Debug> Termination for Result<T, E> {\n         match self {\n             Ok(val) => val.report(),\n             Err(err) => {\n-                // Ignore error if the write fails, for example because stderr is\n-                // already closed. There is not much point panicking at this point.\n-                let _ = writeln!(io::stderr(), \"Error: {err:?}\");\n+                io::attempt_print_to_stderr(format_args_nl!(\"Error: {err:?}\"));\n                 ExitCode::FAILURE\n             }\n         }"}]}