{"sha": "4789f65041d428a597f91cea9ad90b548b93cb28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ODlmNjUwNDFkNDI4YTU5N2Y5MWNlYTlhZDkwYjU0OGI5M2NiMjg=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-10-24T05:13:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-24T05:13:42Z"}, "message": "Merge pull request #3130 from JoshBrudnak/master\n\nAdded crates to the non-alphabetical treated imports", "tree": {"sha": "9e365effcc37de0f56541b4b5a69c182720611f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e365effcc37de0f56541b4b5a69c182720611f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4789f65041d428a597f91cea9ad90b548b93cb28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbz/+GCRBK7hj4Ov3rIwAAdHIIAIMFQ/5FxBVZHMorMYdmBXem\n1HviqoRz3u2pFu+2z5MUPrn2wbb3tB4OabPpw739FGnamTCKNIeq5uTVjkS1G4f1\nJmPMxHnsLJW9NAJ/eYdPvn9T270IaGe1wW8j+smtfws3vsgtKubR1yGEb4G6FK++\nds2r39idqpqPh2KUKkgBW2xPdVB4nM9ppy9MrCC6ejo3+tOri3nwxQ1+yHYFYQV4\n0ACipIsW8c8E9QY4NOoWPSvBCk0GRSicIErzCg3p2DL/cO9RB/mlW8R4p1BE1hty\n+JhH/yDAxMFsVWTJ11msRJ/dGyUJNUI0Gy2VzMhAGiliNgxsKzHBuTChLg77HFg=\n=jgV0\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e365effcc37de0f56541b4b5a69c182720611f6\nparent 19d60f813758d6d72627ceb93766ddb95e2e45a6\nparent c3ad58c3819e1857ceb6cf80430dd48e04704ac8\nauthor Nick Cameron <nrc@ncameron.org> 1540358022 +1300\ncommitter GitHub <noreply@github.com> 1540358022 +1300\n\nMerge pull request #3130 from JoshBrudnak/master\n\nAdded crates to the non-alphabetical treated imports"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4789f65041d428a597f91cea9ad90b548b93cb28", "html_url": "https://github.com/rust-lang/rust/commit/4789f65041d428a597f91cea9ad90b548b93cb28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4789f65041d428a597f91cea9ad90b548b93cb28/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19d60f813758d6d72627ceb93766ddb95e2e45a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/19d60f813758d6d72627ceb93766ddb95e2e45a6", "html_url": "https://github.com/rust-lang/rust/commit/19d60f813758d6d72627ceb93766ddb95e2e45a6"}, {"sha": "c3ad58c3819e1857ceb6cf80430dd48e04704ac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ad58c3819e1857ceb6cf80430dd48e04704ac8", "html_url": "https://github.com/rust-lang/rust/commit/c3ad58c3819e1857ceb6cf80430dd48e04704ac8"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "deef4d096c9e24ec250ceefba41cff3337644fea", "filename": "src/imports.rs", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4789f65041d428a597f91cea9ad90b548b93cb28/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4789f65041d428a597f91cea9ad90b548b93cb28/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=4789f65041d428a597f91cea9ad90b548b93cb28", "patch": "@@ -97,6 +97,7 @@ pub enum UseSegment {\n     Ident(String, Option<String>),\n     Slf(Option<String>),\n     Super(Option<String>),\n+    Crate(Option<String>),\n     Glob,\n     List(Vec<UseTree>),\n }\n@@ -138,6 +139,7 @@ impl UseSegment {\n             UseSegment::Ident(ref s, _) => UseSegment::Ident(s.clone(), None),\n             UseSegment::Slf(_) => UseSegment::Slf(None),\n             UseSegment::Super(_) => UseSegment::Super(None),\n+            UseSegment::Crate(_) => UseSegment::Crate(None),\n             _ => self.clone(),\n         }\n     }\n@@ -154,6 +156,7 @@ impl UseSegment {\n         Some(match name {\n             \"self\" => UseSegment::Slf(None),\n             \"super\" => UseSegment::Super(None),\n+            \"crate\" => UseSegment::Crate(None),\n             _ => {\n                 let mod_sep = if modsep { \"::\" } else { \"\" };\n                 UseSegment::Ident(format!(\"{}{}\", mod_sep, name), None)\n@@ -207,6 +210,7 @@ impl fmt::Display for UseSegment {\n             UseSegment::Ident(ref s, _) => write!(f, \"{}\", s),\n             UseSegment::Slf(..) => write!(f, \"self\"),\n             UseSegment::Super(..) => write!(f, \"super\"),\n+            UseSegment::Crate(..) => write!(f, \"crate\"),\n             UseSegment::List(ref list) => {\n                 write!(f, \"{{\")?;\n                 for (i, item) in list.iter().enumerate() {\n@@ -377,6 +381,7 @@ impl UseTree {\n                 let segment = match name.as_ref() {\n                     \"self\" => UseSegment::Slf(alias),\n                     \"super\" => UseSegment::Super(alias),\n+                    \"crate\" => UseSegment::Crate(alias),\n                     _ => UseSegment::Ident(name, alias),\n                 };\n \n@@ -617,7 +622,9 @@ impl Ord for UseSegment {\n         }\n \n         match (self, other) {\n-            (&Slf(ref a), &Slf(ref b)) | (&Super(ref a), &Super(ref b)) => a.cmp(b),\n+            (&Slf(ref a), &Slf(ref b))\n+            | (&Super(ref a), &Super(ref b))\n+            | (&Crate(ref a), &Crate(ref b)) => a.cmp(b),\n             (&Glob, &Glob) => Ordering::Equal,\n             (&Ident(ref ia, ref aa), &Ident(ref ib, ref ab)) => {\n                 // snake_case < CamelCase < UPPER_SNAKE_CASE\n@@ -659,6 +666,8 @@ impl Ord for UseSegment {\n             (_, &Slf(_)) => Ordering::Greater,\n             (&Super(_), _) => Ordering::Less,\n             (_, &Super(_)) => Ordering::Greater,\n+            (&Crate(_), _) => Ordering::Less,\n+            (_, &Crate(_)) => Ordering::Greater,\n             (&Ident(..), _) => Ordering::Less,\n             (_, &Ident(..)) => Ordering::Greater,\n             (&Glob, _) => Ordering::Less,\n@@ -768,6 +777,8 @@ impl Rewrite for UseSegment {\n             UseSegment::Slf(None) => \"self\".to_owned(),\n             UseSegment::Super(Some(ref rename)) => format!(\"super as {}\", rename),\n             UseSegment::Super(None) => \"super\".to_owned(),\n+            UseSegment::Crate(Some(ref rename)) => format!(\"crate as {}\", rename),\n+            UseSegment::Crate(None) => \"crate\".to_owned(),\n             UseSegment::Glob => \"*\".to_owned(),\n             UseSegment::List(ref use_tree_list) => rewrite_nested_use_tree(\n                 context,\n@@ -830,18 +841,28 @@ mod test {\n                 if !buf.is_empty() {\n                     let mut alias = None;\n                     swap(alias_buf, &mut alias);\n-                    if buf == \"self\" {\n-                        result.push(UseSegment::Slf(alias));\n-                        *buf = String::new();\n-                        *alias_buf = None;\n-                    } else if buf == \"super\" {\n-                        result.push(UseSegment::Super(alias));\n-                        *buf = String::new();\n-                        *alias_buf = None;\n-                    } else {\n-                        let mut name = String::new();\n-                        swap(buf, &mut name);\n-                        result.push(UseSegment::Ident(name, alias));\n+\n+                    match buf.as_ref() {\n+                        \"self\" => {\n+                            result.push(UseSegment::Slf(alias));\n+                            *buf = String::new();\n+                            *alias_buf = None;\n+                        }\n+                        \"super\" => {\n+                            result.push(UseSegment::Super(alias));\n+                            *buf = String::new();\n+                            *alias_buf = None;\n+                        }\n+                        \"crate\" => {\n+                            result.push(UseSegment::Crate(alias));\n+                            *buf = String::new();\n+                            *alias_buf = None;\n+                        }\n+                        _ => {\n+                            let mut name = String::new();\n+                            swap(buf, &mut name);\n+                            result.push(UseSegment::Ident(name, alias));\n+                        }\n                     }\n                 }\n             }"}, {"sha": "ce73a5c789cf71426fedb7a3db20c3d870df9859", "filename": "tests/target/issue-3118.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4789f65041d428a597f91cea9ad90b548b93cb28/tests%2Ftarget%2Fissue-3118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4789f65041d428a597f91cea9ad90b548b93cb28/tests%2Ftarget%2Fissue-3118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3118.rs?ref=4789f65041d428a597f91cea9ad90b548b93cb28", "patch": "@@ -0,0 +1,11 @@\n+use {\n+    crate::foo::bar,\n+    bytes::{Buf, BufMut},\n+    std::io,\n+};\n+\n+mod foo {\n+    pub mod bar {}\n+}\n+\n+fn main() {}"}]}