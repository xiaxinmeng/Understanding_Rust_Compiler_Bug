{"sha": "53791b3ff4322aec2a82a84952be91d1be4058b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNzkxYjNmZjQzMjJhZWMyYTgyYTg0OTUyYmU5MWQxYmU0MDU4YjU=", "commit": {"author": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-08-28T16:41:48Z"}, "committer": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-10-10T13:19:12Z"}, "message": "Move conditional compilation to the upper module and sort the target OS list alphabetically", "tree": {"sha": "221c4e534ef0c55a8e1b45ae98001eef58c5b4cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/221c4e534ef0c55a8e1b45ae98001eef58c5b4cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53791b3ff4322aec2a82a84952be91d1be4058b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53791b3ff4322aec2a82a84952be91d1be4058b5", "html_url": "https://github.com/rust-lang/rust/commit/53791b3ff4322aec2a82a84952be91d1be4058b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53791b3ff4322aec2a82a84952be91d1be4058b5/comments", "author": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07ed6afc6de728c6ea8d021156af318172b1dbbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/07ed6afc6de728c6ea8d021156af318172b1dbbc", "html_url": "https://github.com/rust-lang/rust/commit/07ed6afc6de728c6ea8d021156af318172b1dbbc"}], "stats": {"total": 388, "additions": 199, "deletions": 189}, "files": [{"sha": "1da3370b07d35f3b3b7a67dc653ee9c9d9740bab", "filename": "library/std/src/sys/unix/ext/net/ancillary.rs", "status": "modified", "additions": 71, "deletions": 189, "changes": 260, "blob_url": "https://github.com/rust-lang/rust/blob/53791b3ff4322aec2a82a84952be91d1be4058b5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53791b3ff4322aec2a82a84952be91d1be4058b5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs?ref=53791b3ff4322aec2a82a84952be91d1be4058b5", "patch": "@@ -158,10 +158,36 @@ impl<'a, T> Iterator for AncillaryDataIter<'a, T> {\n     }\n }\n \n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"dragonfly\",\n+    target_os = \"emscripten\",\n+    target_os = \"freebsd\",\n+    target_os = \"fuchsia\",\n+    target_os = \"ios\",\n+    target_os = \"linux\",\n+    target_os = \"macos\",\n+    target_os = \"netbsd\",\n+    target_os = \"openbsd\",\n+    target_env = \"uclibc\",\n+))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n #[derive(Clone)]\n pub struct UCred(libc::ucred);\n \n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"dragonfly\",\n+    target_os = \"emscripten\",\n+    target_os = \"freebsd\",\n+    target_os = \"fuchsia\",\n+    target_os = \"ios\",\n+    target_os = \"linux\",\n+    target_os = \"macos\",\n+    target_os = \"netbsd\",\n+    target_os = \"openbsd\",\n+    target_env = \"uclibc\",\n+))]\n impl UCred {\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn new() -> UCred {\n@@ -199,41 +225,9 @@ impl UCred {\n     }\n }\n \n-#[cfg(any(\n-    target_os = \"haiku\",\n-    target_os = \"solaris\",\n-    target_os = \"illumos\",\n-    target_os = \"macos\",\n-    target_os = \"ios\",\n-    target_os = \"freebsd\",\n-    target_os = \"dragonfly\",\n-    target_os = \"openbsd\",\n-    target_os = \"netbsd\",\n-    target_os = \"linux\",\n-    target_os = \"android\",\n-    target_os = \"emscripten\",\n-    target_os = \"fuchsia\",\n-    target_env = \"uclibc\",\n-))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n pub struct ScmRights<'a>(AncillaryDataIter<'a, RawFd>);\n \n-#[cfg(any(\n-    target_os = \"haiku\",\n-    target_os = \"solaris\",\n-    target_os = \"illumos\",\n-    target_os = \"macos\",\n-    target_os = \"ios\",\n-    target_os = \"freebsd\",\n-    target_os = \"dragonfly\",\n-    target_os = \"openbsd\",\n-    target_os = \"netbsd\",\n-    target_os = \"linux\",\n-    target_os = \"android\",\n-    target_os = \"emscripten\",\n-    target_os = \"fuchsia\",\n-    target_env = \"uclibc\",\n-))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n impl<'a> Iterator for ScmRights<'a> {\n     type Item = RawFd;\n@@ -244,32 +238,32 @@ impl<'a> Iterator for ScmRights<'a> {\n }\n \n #[cfg(any(\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-    target_os = \"freebsd\",\n-    target_os = \"dragonfly\",\n-    target_os = \"macos\",\n-    target_os = \"ios\",\n-    target_os = \"linux\",\n     target_os = \"android\",\n+    target_os = \"dragonfly\",\n     target_os = \"emscripten\",\n+    target_os = \"freebsd\",\n     target_os = \"fuchsia\",\n+    target_os = \"ios\",\n+    target_os = \"linux\",\n+    target_os = \"macos\",\n+    target_os = \"netbsd\",\n+    target_os = \"openbsd\",\n     target_env = \"uclibc\",\n ))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::ucred>);\n \n #[cfg(any(\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-    target_os = \"freebsd\",\n-    target_os = \"dragonfly\",\n-    target_os = \"macos\",\n-    target_os = \"ios\",\n-    target_os = \"linux\",\n     target_os = \"android\",\n+    target_os = \"dragonfly\",\n     target_os = \"emscripten\",\n+    target_os = \"freebsd\",\n     target_os = \"fuchsia\",\n+    target_os = \"ios\",\n+    target_os = \"linux\",\n+    target_os = \"macos\",\n+    target_os = \"netbsd\",\n+    target_os = \"openbsd\",\n     target_env = \"uclibc\",\n ))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n@@ -288,75 +282,43 @@ pub enum AncillaryError {\n     Unknown { cmsg_level: i32, cmsg_type: i32 },\n }\n \n-#[cfg(any(\n-    target_os = \"haiku\",\n-    target_os = \"solaris\",\n-    target_os = \"illumos\",\n-    target_os = \"macos\",\n-    target_os = \"ios\",\n-    target_os = \"freebsd\",\n-    target_os = \"dragonfly\",\n-    target_os = \"openbsd\",\n-    target_os = \"netbsd\",\n-    target_os = \"linux\",\n-    target_os = \"android\",\n-    target_os = \"emscripten\",\n-    target_os = \"fuchsia\",\n-    target_env = \"uclibc\",\n-))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n pub enum AncillaryData<'a> {\n     ScmRights(ScmRights<'a>),\n     #[cfg(any(\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-        target_os = \"freebsd\",\n-        target_os = \"dragonfly\",\n-        target_os = \"macos\",\n-        target_os = \"ios\",\n-        target_os = \"linux\",\n         target_os = \"android\",\n+        target_os = \"dragonfly\",\n         target_os = \"emscripten\",\n+        target_os = \"freebsd\",\n         target_os = \"fuchsia\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"netbsd\",\n+        target_os = \"openbsd\",\n         target_env = \"uclibc\",\n     ))]\n     ScmCredentials(ScmCredentials<'a>),\n }\n \n impl<'a> AncillaryData<'a> {\n-    #[cfg(any(\n-        target_os = \"haiku\",\n-        target_os = \"solaris\",\n-        target_os = \"illumos\",\n-        target_os = \"macos\",\n-        target_os = \"ios\",\n-        target_os = \"freebsd\",\n-        target_os = \"dragonfly\",\n-        target_os = \"openbsd\",\n-        target_os = \"netbsd\",\n-        target_os = \"linux\",\n-        target_os = \"android\",\n-        target_os = \"emscripten\",\n-        target_os = \"fuchsia\",\n-        target_env = \"uclibc\",\n-    ))]\n     fn as_rights(data: &'a [u8]) -> Self {\n         let ancillary_data_iter = AncillaryDataIter::new(data);\n         let scm_rights = ScmRights(ancillary_data_iter);\n         AncillaryData::ScmRights(scm_rights)\n     }\n \n     #[cfg(any(\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-        target_os = \"freebsd\",\n-        target_os = \"dragonfly\",\n-        target_os = \"macos\",\n-        target_os = \"ios\",\n-        target_os = \"linux\",\n         target_os = \"android\",\n+        target_os = \"dragonfly\",\n         target_os = \"emscripten\",\n+        target_os = \"freebsd\",\n         target_os = \"fuchsia\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"netbsd\",\n+        target_os = \"openbsd\",\n         target_env = \"uclibc\",\n     ))]\n     fn as_credentials(data: &'a [u8]) -> Self {\n@@ -365,22 +327,6 @@ impl<'a> AncillaryData<'a> {\n         AncillaryData::ScmCredentials(scm_credentials)\n     }\n \n-    #[cfg(any(\n-        target_os = \"haiku\",\n-        target_os = \"solaris\",\n-        target_os = \"illumos\",\n-        target_os = \"macos\",\n-        target_os = \"ios\",\n-        target_os = \"freebsd\",\n-        target_os = \"dragonfly\",\n-        target_os = \"openbsd\",\n-        target_os = \"netbsd\",\n-        target_os = \"linux\",\n-        target_os = \"android\",\n-        target_os = \"emscripten\",\n-        target_os = \"fuchsia\",\n-        target_env = \"uclibc\",\n-    ))]\n     fn try_from_cmsghdr(cmsg: &'a libc::cmsghdr) -> Result<Self, AncillaryError> {\n         unsafe {\n             let cmsg_len_zero = libc::CMSG_LEN(0) as usize;\n@@ -392,20 +338,20 @@ impl<'a> AncillaryData<'a> {\n                 libc::SOL_SOCKET => match (*cmsg).cmsg_type {\n                     libc::SCM_RIGHTS => Ok(AncillaryData::as_rights(data)),\n                     #[cfg(any(\n-                        target_os = \"linux\",\n                         target_os = \"android\",\n                         target_os = \"emscripten\",\n                         target_os = \"fuchsia\",\n+                        target_os = \"linux\",\n                         target_env = \"uclibc\",\n                     ))]\n                     libc::SCM_CREDENTIALS => Ok(AncillaryData::as_credentials(data)),\n                     #[cfg(any(\n-                        target_os = \"netbsd\",\n-                        target_os = \"openbsd\",\n-                        target_os = \"freebsd\",\n                         target_os = \"dragonfly\",\n-                        target_os = \"macos\",\n+                        target_os = \"freebsd\",\n                         target_os = \"ios\",\n+                        target_os = \"macos\",\n+                        target_os = \"netbsd\",\n+                        target_os = \"openbsd\",\n                     ))]\n                     libc::SCM_CREDS => Ok(AncillaryData::as_credentials(data)),\n                     cmsg_type => {\n@@ -420,44 +366,12 @@ impl<'a> AncillaryData<'a> {\n     }\n }\n \n-#[cfg(any(\n-    target_os = \"haiku\",\n-    target_os = \"solaris\",\n-    target_os = \"illumos\",\n-    target_os = \"macos\",\n-    target_os = \"ios\",\n-    target_os = \"freebsd\",\n-    target_os = \"dragonfly\",\n-    target_os = \"openbsd\",\n-    target_os = \"netbsd\",\n-    target_os = \"linux\",\n-    target_os = \"android\",\n-    target_os = \"emscripten\",\n-    target_os = \"fuchsia\",\n-    target_env = \"uclibc\",\n-))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n pub struct Messages<'a> {\n     buffer: &'a [u8],\n     current: Option<&'a libc::cmsghdr>,\n }\n \n-#[cfg(any(\n-    target_os = \"haiku\",\n-    target_os = \"solaris\",\n-    target_os = \"illumos\",\n-    target_os = \"macos\",\n-    target_os = \"ios\",\n-    target_os = \"freebsd\",\n-    target_os = \"dragonfly\",\n-    target_os = \"openbsd\",\n-    target_os = \"netbsd\",\n-    target_os = \"linux\",\n-    target_os = \"android\",\n-    target_os = \"emscripten\",\n-    target_os = \"fuchsia\",\n-    target_env = \"uclibc\",\n-))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n impl<'a> Iterator for Messages<'a> {\n     type Item = Result<AncillaryData<'a>, AncillaryError>;\n@@ -554,22 +468,6 @@ impl<'a> SocketAncillary<'a> {\n         self.length\n     }\n \n-    #[cfg(any(\n-        target_os = \"haiku\",\n-        target_os = \"solaris\",\n-        target_os = \"illumos\",\n-        target_os = \"macos\",\n-        target_os = \"ios\",\n-        target_os = \"freebsd\",\n-        target_os = \"dragonfly\",\n-        target_os = \"openbsd\",\n-        target_os = \"netbsd\",\n-        target_os = \"linux\",\n-        target_os = \"android\",\n-        target_os = \"emscripten\",\n-        target_os = \"fuchsia\",\n-        target_env = \"uclibc\",\n-    ))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn messages(&self) -> Messages<'_> {\n         Messages { buffer: &self.buffer[..self.length], current: None }\n@@ -631,22 +529,6 @@ impl<'a> SocketAncillary<'a> {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(\n-        target_os = \"haiku\",\n-        target_os = \"solaris\",\n-        target_os = \"illumos\",\n-        target_os = \"macos\",\n-        target_os = \"ios\",\n-        target_os = \"freebsd\",\n-        target_os = \"dragonfly\",\n-        target_os = \"openbsd\",\n-        target_os = \"netbsd\",\n-        target_os = \"linux\",\n-        target_os = \"android\",\n-        target_os = \"emscripten\",\n-        target_os = \"fuchsia\",\n-        target_env = \"uclibc\",\n-    ))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn add_fds(&mut self, fds: &[RawFd]) -> bool {\n         self.truncated = false;\n@@ -667,16 +549,16 @@ impl<'a> SocketAncillary<'a> {\n     /// and type `SCM_CREDENTIALS`.\n     ///\n     #[cfg(any(\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-        target_os = \"freebsd\",\n-        target_os = \"dragonfly\",\n-        target_os = \"macos\",\n-        target_os = \"ios\",\n-        target_os = \"linux\",\n         target_os = \"android\",\n+        target_os = \"dragonfly\",\n         target_os = \"emscripten\",\n+        target_os = \"freebsd\",\n         target_os = \"fuchsia\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"netbsd\",\n+        target_os = \"openbsd\",\n         target_env = \"uclibc\",\n     ))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n@@ -688,20 +570,20 @@ impl<'a> SocketAncillary<'a> {\n             creds,\n             libc::SOL_SOCKET,\n             #[cfg(any(\n-                target_os = \"linux\",\n                 target_os = \"android\",\n                 target_os = \"emscripten\",\n                 target_os = \"fuchsia\",\n+                target_os = \"linux\",\n                 target_env = \"uclibc\",\n             ))]\n             libc::SCM_CREDENTIALS,\n             #[cfg(any(\n-                target_os = \"netbsd\",\n-                target_os = \"openbsd\",\n-                target_os = \"freebsd\",\n                 target_os = \"dragonfly\",\n-                target_os = \"macos\",\n+                target_os = \"freebsd\",\n                 target_os = \"ios\",\n+                target_os = \"macos\",\n+                target_os = \"netbsd\",\n+                target_os = \"openbsd\",\n             ))]\n             libc::SCM_CREDS,\n         )"}, {"sha": "5df45e6465b4690586a3075be955fa9645f603cb", "filename": "library/std/src/sys/unix/ext/net/datagram.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/53791b3ff4322aec2a82a84952be91d1be4058b5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53791b3ff4322aec2a82a84952be91d1be4058b5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs?ref=53791b3ff4322aec2a82a84952be91d1be4058b5", "patch": "@@ -4,6 +4,22 @@ use crate::os::unix::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n use crate::path::Path;\n use crate::sys::unix::cvt;\n use crate::sys::unix::ext::net::addr::{sockaddr_un, SocketAddr};\n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"dragonfly\",\n+    target_os = \"emscripten\",\n+    target_os = \"freebsd\",\n+    target_os = \"fuchsia\",\n+    target_os = \"haiku\",\n+    target_os = \"illumos\",\n+    target_os = \"ios\",\n+    target_os = \"linux\",\n+    target_os = \"macos\",\n+    target_os = \"netbsd\",\n+    target_os = \"openbsd\",\n+    target_os = \"solaris\",\n+    target_env = \"uclibc\",\n+))]\n use crate::sys::unix::ext::net::ancillary::{\n     recv_vectored_with_ancillary_from, send_vectored_with_ancillary_to, SocketAncillary,\n };\n@@ -346,6 +362,22 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[cfg(any(\n+        target_os = \"android\",\n+        target_os = \"dragonfly\",\n+        target_os = \"emscripten\",\n+        target_os = \"freebsd\",\n+        target_os = \"fuchsia\",\n+        target_os = \"haiku\",\n+        target_os = \"illumos\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"netbsd\",\n+        target_os = \"openbsd\",\n+        target_os = \"solaris\",\n+        target_env = \"uclibc\",\n+    ))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn recv_vectored_with_ancillary_from(\n         &self,\n@@ -394,6 +426,22 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[cfg(any(\n+        target_os = \"android\",\n+        target_os = \"dragonfly\",\n+        target_os = \"emscripten\",\n+        target_os = \"freebsd\",\n+        target_os = \"fuchsia\",\n+        target_os = \"haiku\",\n+        target_os = \"illumos\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"netbsd\",\n+        target_os = \"openbsd\",\n+        target_os = \"solaris\",\n+        target_env = \"uclibc\",\n+    ))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn recv_vectored_with_ancillary(\n         &self,"}, {"sha": "125432b2b711d3014326c6e1fe57b51f5d02fb3f", "filename": "library/std/src/sys/unix/ext/net/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/53791b3ff4322aec2a82a84952be91d1be4058b5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53791b3ff4322aec2a82a84952be91d1be4058b5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fmod.rs?ref=53791b3ff4322aec2a82a84952be91d1be4058b5", "patch": "@@ -3,6 +3,22 @@\n #![stable(feature = \"unix_socket\", since = \"1.10.0\")]\n \n mod addr;\n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"dragonfly\",\n+    target_os = \"emscripten\",\n+    target_os = \"freebsd\",\n+    target_os = \"fuchsia\",\n+    target_os = \"haiku\",\n+    target_os = \"illumos\",\n+    target_os = \"ios\",\n+    target_os = \"linux\",\n+    target_os = \"macos\",\n+    target_os = \"netbsd\",\n+    target_os = \"openbsd\",\n+    target_os = \"solaris\",\n+    target_env = \"uclibc\",\n+))]\n mod ancillary;\n mod datagram;\n mod listener;\n@@ -13,6 +29,22 @@ mod test;\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n pub use self::addr::*;\n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"dragonfly\",\n+    target_os = \"emscripten\",\n+    target_os = \"freebsd\",\n+    target_os = \"fuchsia\",\n+    target_os = \"haiku\",\n+    target_os = \"illumos\",\n+    target_os = \"ios\",\n+    target_os = \"linux\",\n+    target_os = \"macos\",\n+    target_os = \"netbsd\",\n+    target_os = \"openbsd\",\n+    target_os = \"solaris\",\n+    target_env = \"uclibc\",\n+))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n pub use self::ancillary::*;\n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]"}, {"sha": "907832399d84df3798d84b28e99e8a87da65b9fc", "filename": "library/std/src/sys/unix/ext/net/stream.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/53791b3ff4322aec2a82a84952be91d1be4058b5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53791b3ff4322aec2a82a84952be91d1be4058b5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs?ref=53791b3ff4322aec2a82a84952be91d1be4058b5", "patch": "@@ -16,6 +16,22 @@ use crate::path::Path;\n use crate::sys::cvt;\n use crate::sys::net::Socket;\n use crate::sys::unix::ext::net::addr::{sockaddr_un, SocketAddr};\n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"dragonfly\",\n+    target_os = \"emscripten\",\n+    target_os = \"freebsd\",\n+    target_os = \"fuchsia\",\n+    target_os = \"haiku\",\n+    target_os = \"illumos\",\n+    target_os = \"ios\",\n+    target_os = \"linux\",\n+    target_os = \"macos\",\n+    target_os = \"netbsd\",\n+    target_os = \"openbsd\",\n+    target_os = \"solaris\",\n+    target_env = \"uclibc\",\n+))]\n use crate::sys::unix::ext::net::ancillary::{\n     recv_vectored_with_ancillary_from, send_vectored_with_ancillary_to, SocketAncillary,\n };\n@@ -458,6 +474,22 @@ impl UnixStream {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[cfg(any(\n+        target_os = \"android\",\n+        target_os = \"dragonfly\",\n+        target_os = \"emscripten\",\n+        target_os = \"freebsd\",\n+        target_os = \"fuchsia\",\n+        target_os = \"haiku\",\n+        target_os = \"illumos\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"netbsd\",\n+        target_os = \"openbsd\",\n+        target_os = \"solaris\",\n+        target_env = \"uclibc\",\n+    ))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn recv_vectored_with_ancillary(\n         &self,\n@@ -498,6 +530,22 @@ impl UnixStream {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[cfg(any(\n+        target_os = \"android\",\n+        target_os = \"dragonfly\",\n+        target_os = \"emscripten\",\n+        target_os = \"freebsd\",\n+        target_os = \"fuchsia\",\n+        target_os = \"haiku\",\n+        target_os = \"illumos\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"netbsd\",\n+        target_os = \"openbsd\",\n+        target_os = \"solaris\",\n+        target_env = \"uclibc\",\n+    ))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn send_vectored_with_ancillary(\n         &self,"}]}