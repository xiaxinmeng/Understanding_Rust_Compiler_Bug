{"sha": "64813d33d825cbd155ef237accc9fe8c8b670ed2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ODEzZDMzZDgyNWNiZDE1NWVmMjM3YWNjYzlmZThjOGI2NzBlZDI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-09-19T21:02:54Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-09-22T21:54:10Z"}, "message": "vectors are not in the language", "tree": {"sha": "18574a50a9d75b12caea78a388c6367f633536ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18574a50a9d75b12caea78a388c6367f633536ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64813d33d825cbd155ef237accc9fe8c8b670ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64813d33d825cbd155ef237accc9fe8c8b670ed2", "html_url": "https://github.com/rust-lang/rust/commit/64813d33d825cbd155ef237accc9fe8c8b670ed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64813d33d825cbd155ef237accc9fe8c8b670ed2/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c94d479a90ab4e99926ac218d1b2329056c7e04b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c94d479a90ab4e99926ac218d1b2329056c7e04b", "html_url": "https://github.com/rust-lang/rust/commit/c94d479a90ab4e99926ac218d1b2329056c7e04b"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "d56c8286fcb3ec32eeb87a99845c27160b5a50bd", "filename": "src/doc/reference.md", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/64813d33d825cbd155ef237accc9fe8c8b670ed2/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/64813d33d825cbd155ef237accc9fe8c8b670ed2/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=64813d33d825cbd155ef237accc9fe8c8b670ed2", "patch": "@@ -2810,9 +2810,8 @@ array_expr : '[' \"mut\" ? vec_elems? ']' ;\n array_elems : [expr [',' expr]*] | [expr ',' \"..\" expr] ;\n ```\n \n-An [array](#vector,-array,-and-slice-types) _expression_ is written by\n-enclosing zero or more comma-separated expressions of uniform type in square\n-brackets.\n+An [array](#array,-and-slice-types) _expression_ is written by enclosing zero\n+or more comma-separated expressions of uniform type in square brackets.\n \n In the `[expr ',' \"..\" expr]` form, the expression after the `\"..\"` must be a\n constant expression that can be evaluated at compile time, such as a\n@@ -2831,7 +2830,7 @@ constant expression that can be evaluated at compile time, such as a\n idx_expr : expr '[' expr ']' ;\n ```\n \n-[Array](#vector,-array,-and-slice-types)-typed expressions can be indexed by\n+[Array](#array,-and-slice-types)-typed expressions can be indexed by\n writing a square-bracket-enclosed expression (the index) after them. When the\n array is mutable, the resulting [lvalue](#lvalues,-rvalues-and-temporaries) can\n be assigned to.\n@@ -3551,23 +3550,17 @@ let (a, b) = p;\n assert!(b != \"world\");\n ```\n \n-### Vector, Array, and Slice types\n+### Array, and Slice types\n \n-Rust has three different types for a list of items:\n+Rust has two different types for a list of items:\n \n-* `Vec<T>`, a 'vector'\n * `[T ..N]`, an 'array'\n * `&[T]`, a 'slice'.\n \n-A vector is a heap-allocated list of `T`. A vector has ownership over the data\n-inside of it. It is also able to grow and change in size. It's important to\n-note that `Vec<T>` is a library type, it's not actually part of the core\n-language.\n-\n An array has a fixed size, and can be allocated on either the stack or the\n heap.\n \n-A slice is a 'view' into a vector or array. It doesn't own the data it points\n+A slice is a 'view' into an array. It doesn't own the data it points\n to, it borrows it.\n \n An example of each kind:\n@@ -3581,8 +3574,8 @@ let s: &[int]      = vec.as_slice();\n As you can see, the `vec!` macro allows you to create a `Vec<T>` easily. The\n `vec!` macro is also part of the standard library, rather than the language.\n \n-All in-bounds elements of vectors, arrays, and slices are always initialized,\n-and access to a vector, array, or slice is always bounds-checked.\n+All in-bounds elements of arrays, and slices are always initialized, and access\n+to an array or slice is always bounds-checked.\n \n ### Structure types\n \n@@ -3644,7 +3637,7 @@ enclosing `enum` or `struct` type itself. Such recursion has restrictions:\n \n * Recursive types must include a nominal type in the recursion\n   (not mere [type definitions](#type-definitions),\n-   or other structural types such as [arrays](#vector,-array,-and-slice-types) or [tuples](#tuple-types)).\n+   or other structural types such as [arrays](#array,-and-slice-types) or [tuples](#tuple-types)).\n * A recursive `enum` item must have at least one non-recursive constructor\n   (in order to give the recursion a basis case).\n * The size of a recursive type must be finite;"}]}