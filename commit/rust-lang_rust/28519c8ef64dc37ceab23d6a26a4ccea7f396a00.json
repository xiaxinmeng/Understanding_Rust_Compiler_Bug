{"sha": "28519c8ef64dc37ceab23d6a26a4ccea7f396a00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NTE5YzhlZjY0ZGMzN2NlYWIyM2Q2YTI2YTRjY2VhN2YzOTZhMDA=", "commit": {"author": {"name": "Glenn Willen", "email": "gwillen@nerdnet.org", "date": "2012-07-13T07:01:26Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-24T00:30:02Z"}, "message": "Add to_str for hashmap.", "tree": {"sha": "b34ea659924d488d6f88b0a842106e8c6b0388b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b34ea659924d488d6f88b0a842106e8c6b0388b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28519c8ef64dc37ceab23d6a26a4ccea7f396a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28519c8ef64dc37ceab23d6a26a4ccea7f396a00", "html_url": "https://github.com/rust-lang/rust/commit/28519c8ef64dc37ceab23d6a26a4ccea7f396a00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28519c8ef64dc37ceab23d6a26a4ccea7f396a00/comments", "author": {"login": "gwillen", "id": 458997, "node_id": "MDQ6VXNlcjQ1ODk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gwillen", "html_url": "https://github.com/gwillen", "followers_url": "https://api.github.com/users/gwillen/followers", "following_url": "https://api.github.com/users/gwillen/following{/other_user}", "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}", "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions", "organizations_url": "https://api.github.com/users/gwillen/orgs", "repos_url": "https://api.github.com/users/gwillen/repos", "events_url": "https://api.github.com/users/gwillen/events{/privacy}", "received_events_url": "https://api.github.com/users/gwillen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06ac0c2b1da2592c53462e1d3675bf1198175aed", "url": "https://api.github.com/repos/rust-lang/rust/commits/06ac0c2b1da2592c53462e1d3675bf1198175aed", "html_url": "https://github.com/rust-lang/rust/commit/06ac0c2b1da2592c53462e1d3675bf1198175aed"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "afb5f28ae0878bee2d573a4d6808a3180c50ea33", "filename": "src/libstd/map.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/28519c8ef64dc37ceab23d6a26a4ccea7f396a00/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28519c8ef64dc37ceab23d6a26a4ccea7f396a00/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=28519c8ef64dc37ceab23d6a26a4ccea7f396a00", "patch": "@@ -1,6 +1,8 @@\n //! A map type\n \n import chained::hashmap;\n+import io::writer_util;\n+import to_str::to_str;\n export hashmap, hashfn, eqfn, set, map, chained, hashmap, str_hash;\n export box_str_hash;\n export bytes_hash, int_hash, uint_hash, set_add;\n@@ -98,6 +100,7 @@ mod chained {\n         hasher: hashfn<K>,\n         eqer: eqfn<K>\n     };\n+    type t<K, V> = @hashmap_<K, V>;\n \n     enum hashmap_<K, V> {\n         hashmap_(@hashmap__<K, V>)\n@@ -111,7 +114,7 @@ mod chained {\n         found_after(@entry<K,V>, @entry<K,V>)\n     }\n \n-    impl private_methods<K, V: copy> for t<K, V> {\n+    impl private_methods<K, V: copy> for hashmap_<K, V> {\n         fn search_rem(k: K, h: uint, idx: uint,\n                       e_root: @entry<K,V>) -> search_result<K,V> {\n             let mut e0 = e_root;\n@@ -285,6 +288,33 @@ mod chained {\n         fn each_value(blk: fn(V) -> bool) { self.each(|_k, v| blk(v)) }\n     }\n \n+    impl hashmap<K: to_str, V: to_str copy> of to_str for hashmap_<K, V> {\n+        fn to_writer(wr: io::writer) {\n+            if self.count == 0u {\n+                wr.write_str(\"{}\");\n+                ret;\n+            }\n+\n+            wr.write_str(\"{ \");\n+            let mut first = true;\n+            for self.each_entry |entry| {\n+                if !first {\n+                    wr.write_str(\", \");\n+                }\n+                first = false;\n+                wr.write_str(entry.key.to_str());\n+                wr.write_str(\": \");\n+                wr.write_str((copy entry.value).to_str());\n+            };\n+            wr.write_str(\" }\");\n+        }\n+\n+        fn to_str() -> ~str {\n+            do io::with_str_writer |wr| { self.to_writer(wr) }\n+        }\n+    }\n+\n+\n     fn chains<K,V>(nchains: uint) -> ~[mut chain<K,V>] {\n         ret vec::to_mut(vec::from_elem(nchains, absent));\n     }"}]}