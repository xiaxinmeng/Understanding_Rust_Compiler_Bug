{"sha": "908304e2571e5f58937a98fd9a5adc37f660c62a", "node_id": "C_kwDOAAsO6NoAKDkwODMwNGUyNTcxZTVmNTg5MzdhOThmZDlhNWFkYzM3ZjY2MGM2MmE", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-10-01T15:55:24Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-10-01T16:31:39Z"}, "message": "Rewrite inbounds_gep with a loop", "tree": {"sha": "c5f9ad3e338e06f47784b5360969133a215cb8ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5f9ad3e338e06f47784b5360969133a215cb8ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/908304e2571e5f58937a98fd9a5adc37f660c62a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/908304e2571e5f58937a98fd9a5adc37f660c62a", "html_url": "https://github.com/rust-lang/rust/commit/908304e2571e5f58937a98fd9a5adc37f660c62a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/908304e2571e5f58937a98fd9a5adc37f660c62a/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "090cde9811ff6d14e3af334109214e58356f7457", "url": "https://api.github.com/repos/rust-lang/rust/commits/090cde9811ff6d14e3af334109214e58356f7457", "html_url": "https://github.com/rust-lang/rust/commit/090cde9811ff6d14e3af334109214e58356f7457"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "f0582fdcef2decbbf763b2c1dad26422f6ce59b3", "filename": "src/builder.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/908304e2571e5f58937a98fd9a5adc37f660c62a/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908304e2571e5f58937a98fd9a5adc37f660c62a/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=908304e2571e5f58937a98fd9a5adc37f660c62a", "patch": "@@ -876,17 +876,13 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n \n     fn inbounds_gep(&mut self, _typ: Type<'gcc>, ptr: RValue<'gcc>, indices: &[RValue<'gcc>]) -> RValue<'gcc> {\n         // NOTE: array indexing is always considered in bounds in GCC (TODO(antoyo): to be verified).\n-        // TODO: replace with a loop like gep.\n-        match indices.len() {\n-            1 => {\n-                self.context.new_array_access(None, ptr, indices[0]).get_address(None)\n-            },\n-            2 => {\n-                let array = ptr.dereference(None); // TODO(antoyo): assert that first index is 0?\n-                self.context.new_array_access(None, array, indices[1]).get_address(None)\n-            },\n-            _ => unimplemented!(),\n+        let mut indices = indices.into_iter();\n+        let index = indices.next().expect(\"first index in inbounds_gep\");\n+        let mut result = self.context.new_array_access(None, ptr, *index);\n+        for index in indices {\n+            result = self.context.new_array_access(None, result, *index);\n         }\n+        result.get_address(None)\n     }\n \n     fn struct_gep(&mut self, value_type: Type<'gcc>, ptr: RValue<'gcc>, idx: u64) -> RValue<'gcc> {"}]}