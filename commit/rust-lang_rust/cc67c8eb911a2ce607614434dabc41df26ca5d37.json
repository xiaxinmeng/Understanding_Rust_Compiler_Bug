{"sha": "cc67c8eb911a2ce607614434dabc41df26ca5d37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNjdjOGViOTExYTJjZTYwNzYxNDQzNGRhYmM0MWRmMjZjYTVkMzc=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2019-11-21T12:44:28Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:16Z"}, "message": "improve comments", "tree": {"sha": "c22c56c9221c00e06e8a39bc7ad9671219c0b489", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c22c56c9221c00e06e8a39bc7ad9671219c0b489"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc67c8eb911a2ce607614434dabc41df26ca5d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc67c8eb911a2ce607614434dabc41df26ca5d37", "html_url": "https://github.com/rust-lang/rust/commit/cc67c8eb911a2ce607614434dabc41df26ca5d37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc67c8eb911a2ce607614434dabc41df26ca5d37/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "290fe895ba6a507479a745cb9ce720b47570a52c", "url": "https://api.github.com/repos/rust-lang/rust/commits/290fe895ba6a507479a745cb9ce720b47570a52c", "html_url": "https://github.com/rust-lang/rust/commit/290fe895ba6a507479a745cb9ce720b47570a52c"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "fc4ccf043fd9f043966860e603c1a6b27d6402f3", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cc67c8eb911a2ce607614434dabc41df26ca5d37/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc67c8eb911a2ce607614434dabc41df26ca5d37/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=cc67c8eb911a2ce607614434dabc41df26ca5d37", "patch": "@@ -2213,8 +2213,10 @@ where\n         sink.did_panic = false;\n         sink.dst\n     } else {\n-        // use try-fold since it vectorizes better, does not take ownership and lets us thread the\n-        // write pointer through its innards\n+        // use try-fold\n+        // - it vectorizes better\n+        // - unlike most internal iteration methods methods it only takes a &mut self\n+        // - lets us thread the write pointer through its innards and get it back in the end\n         iterator\n             .try_fold::<_, _, Result<_, !>>(dst, move |mut dst, item| {\n                 unsafe {\n@@ -2232,7 +2234,7 @@ where\n \n     let src = iterator.as_inner();\n     // check if SourceIter and InPlaceIterable contracts were upheld.\n-    // but if they weren't we may not even make it to this point\n+    // caveat: if they weren't we may not even make it to this point\n     debug_assert_eq!(src_buf, src.buf.as_ptr());\n     debug_assert!(dst as *const _ <= src.ptr, \"InPlaceIterable contract violation\");\n \n@@ -2276,10 +2278,9 @@ impl<T> SpecFrom<T, IntoIter<T>> for Vec<T> {\n     }\n }\n \n-// Further specialization potential once lattice specialization exists\n-// and https://github.com/rust-lang/rust/issues/62645 has been solved:\n-// This can be broadened to only require size and alignment equality between\n-// input and output Item types.\n+// Further specialization potential once\n+// https://github.com/rust-lang/rust/issues/62645 has been solved:\n+// T can be split into IN and OUT which only need to have the same size and alignment\n impl<T, I> SpecFrom<T, I> for Vec<T>\n where\n     I: Iterator<Item = T> + InPlaceIterable + SourceIter<Source = IntoIter<T>>,\n@@ -2396,6 +2397,8 @@ where\n }\n \n impl<T> Vec<T> {\n+    // leaf method to which various SpecFrom/SpecExtend implementations delegate when\n+    // they have no further optimizations to apply\n     fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {\n         // This is the case for a general iterator.\n         //"}]}