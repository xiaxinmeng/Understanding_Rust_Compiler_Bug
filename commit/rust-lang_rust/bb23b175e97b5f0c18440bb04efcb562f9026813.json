{"sha": "bb23b175e97b5f0c18440bb04efcb562f9026813", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMjNiMTc1ZTk3YjVmMGMxODQ0MGJiMDRlZmNiNTYyZjkwMjY4MTM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-02-07T15:20:17Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-02-11T13:28:36Z"}, "message": "This fixes doctests in stage 1\n\nThe RUSTDOC_LIBDIR should be rustc_libdir, not sysroot_libdir; rustdoc\nis like the compiler and should link against rustc's libdir.\n\nSome people currently (i.e., in general, may not be on master) have doc\ntests working, but no attempt to determine why has been attempted.", "tree": {"sha": "009102ab52d67480579e3d867db7b1f6b7061367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/009102ab52d67480579e3d867db7b1f6b7061367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb23b175e97b5f0c18440bb04efcb562f9026813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb23b175e97b5f0c18440bb04efcb562f9026813", "html_url": "https://github.com/rust-lang/rust/commit/bb23b175e97b5f0c18440bb04efcb562f9026813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb23b175e97b5f0c18440bb04efcb562f9026813/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "861d007da39418cc145a054cd46c89664ba72e64", "url": "https://api.github.com/repos/rust-lang/rust/commits/861d007da39418cc145a054cd46c89664ba72e64", "html_url": "https://github.com/rust-lang/rust/commit/861d007da39418cc145a054cd46c89664ba72e64"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "75fe664ef3cf124a2e4ed6eb33f7b022e9a99b1a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb23b175e97b5f0c18440bb04efcb562f9026813/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb23b175e97b5f0c18440bb04efcb562f9026813/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=bb23b175e97b5f0c18440bb04efcb562f9026813", "patch": "@@ -677,10 +677,9 @@ impl<'a> Builder<'a> {\n         let compiler = self.compiler(self.top_stage, host);\n         cmd.env(\"RUSTC_STAGE\", compiler.stage.to_string())\n             .env(\"RUSTC_SYSROOT\", self.sysroot(compiler))\n-            .env(\n-                \"RUSTDOC_LIBDIR\",\n-                self.sysroot_libdir(compiler, self.config.build),\n-            )\n+            // Note that this is *not* the sysroot_libdir because rustdoc must be linked\n+            // equivalently to rustc.\n+            .env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(compiler))\n             .env(\"CFG_RELEASE_CHANNEL\", &self.config.channel)\n             .env(\"RUSTDOC_REAL\", self.rustdoc(host))\n             .env(\"RUSTDOC_CRATE_VERSION\", self.rust_version())\n@@ -874,7 +873,7 @@ impl<'a> Builder<'a> {\n         } else {\n             &maybe_sysroot\n         };\n-        let libdir = sysroot.join(libdir(&compiler.host));\n+        let libdir = self.rustc_libdir(compiler);\n \n         // Customize the compiler we're running. Specify the compiler to cargo\n         // as our shim and then pass it some various options used to configure\n@@ -916,7 +915,7 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_ERROR_FORMAT\", error_format);\n         }\n         if cmd != \"build\" && cmd != \"check\" && cmd != \"rustc\" && want_rustdoc {\n-            cargo.env(\"RUSTDOC_LIBDIR\", self.sysroot_libdir(compiler, self.config.build));\n+            cargo.env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(compiler));\n         }\n \n         if mode.is_tool() {"}, {"sha": "022f48d69d941371da5ed68e17143d2c0ed73e70", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bb23b175e97b5f0c18440bb04efcb562f9026813/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb23b175e97b5f0c18440bb04efcb562f9026813/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=bb23b175e97b5f0c18440bb04efcb562f9026813", "patch": "@@ -425,24 +425,18 @@ impl Step for Rustdoc {\n             return builder.initial_rustc.with_file_name(exe(\"rustdoc\", &target_compiler.host));\n         }\n         let target = target_compiler.host;\n-        let build_compiler = if target_compiler.stage == 0 {\n-            builder.compiler(0, builder.config.build)\n-        } else if target_compiler.stage >= 2 {\n-            // Past stage 2, we consider the compiler to be ABI-compatible and hence capable of\n-            // building rustdoc itself.\n-            builder.compiler(target_compiler.stage, builder.config.build)\n-        } else {\n-            // Similar to `compile::Assemble`, build with the previous stage's compiler. Otherwise\n-            // we'd have stageN/bin/rustc and stageN/bin/rustdoc be effectively different stage\n-            // compilers, which isn't what we want.\n-            builder.compiler(target_compiler.stage - 1, builder.config.build)\n-        };\n-\n-        builder.ensure(compile::Rustc { compiler: build_compiler, target });\n-        builder.ensure(compile::Rustc {\n-            compiler: build_compiler,\n-            target: builder.config.build,\n-        });\n+        // Similar to `compile::Assemble`, build with the previous stage's compiler. Otherwise\n+        // we'd have stageN/bin/rustc and stageN/bin/rustdoc be effectively different stage\n+        // compilers, which isn't what we want. Rustdoc should be linked in the same way as the\n+        // rustc compiler it's paired with, so it must be built with the previous stage compiler.\n+        let build_compiler = builder.compiler(target_compiler.stage - 1, builder.config.build);\n+\n+        // The presence of `target_compiler` ensures that the necessary libraries (codegen backends,\n+        // compiler libraries, ...) are built. Rustdoc does not require the presence of any\n+        // libraries within sysroot_libdir (i.e., rustlib), though doctests may want it (since\n+        // they'll be linked to those libraries). As such, don't explicitly `ensure` any additional\n+        // libraries here. The intuition here is that If we've built a compiler, we should be able\n+        // to build rustdoc.\n \n         let mut cargo = prepare_tool_cargo(\n             builder,"}]}