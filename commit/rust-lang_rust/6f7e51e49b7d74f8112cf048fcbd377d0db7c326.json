{"sha": "6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmN2U1MWU0OWI3ZDc0ZjgxMTJjZjA0OGZjYmQzNzdkMGRiN2MzMjY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-26T16:23:42Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-04T09:27:01Z"}, "message": "Replace `_, _, _` with `..`", "tree": {"sha": "603417fa7fdf74561479a4050f269e53d559cf2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/603417fa7fdf74561479a4050f269e53d559cf2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "html_url": "https://github.com/rust-lang/rust/commit/6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ca1de6b26ec4740e3f0e8bead7002589024bd14", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca1de6b26ec4740e3f0e8bead7002589024bd14", "html_url": "https://github.com/rust-lang/rust/commit/1ca1de6b26ec4740e3f0e8bead7002589024bd14"}], "stats": {"total": 220, "additions": 117, "deletions": 103}, "files": [{"sha": "71bc2693abd27dc95062f52e77ae407aa9a3af96", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -124,7 +124,7 @@ impl Def {\n             Def::Variant(_, id) | Def::Enum(id) | Def::TyAlias(id) | Def::AssociatedTy(_, id) |\n             Def::TyParam(id) | Def::Struct(id) | Def::Union(id) | Def::Trait(id) |\n             Def::Method(id) | Def::Const(id) | Def::AssociatedConst(id) |\n-            Def::Local(id, _) | Def::Upvar(id, _, _, _) => {\n+            Def::Local(id, _) | Def::Upvar(id, ..) => {\n                 id\n             }\n "}, {"sha": "81b1be53615d6b0fc97be162087f78c99d599f46", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -49,8 +49,8 @@ pub enum FnKind<'a> {\n impl<'a> FnKind<'a> {\n     pub fn attrs(&self) -> &'a [Attribute] {\n         match *self {\n-            FnKind::ItemFn(_, _, _, _, _, _, attrs) => attrs,\n-            FnKind::Method(_, _, _, attrs) => attrs,\n+            FnKind::ItemFn(.., attrs) => attrs,\n+            FnKind::Method(.., attrs) => attrs,\n             FnKind::Closure(attrs) => attrs,\n         }\n     }\n@@ -622,7 +622,7 @@ pub fn walk_fn_decl_nopat<'v, V: Visitor<'v>>(visitor: &mut V, function_declarat\n \n pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V, function_kind: FnKind<'v>) {\n     match function_kind {\n-        FnKind::ItemFn(_, generics, _, _, _, _, _) => {\n+        FnKind::ItemFn(_, generics, ..) => {\n             visitor.visit_generics(generics);\n         }\n         FnKind::Method(_, sig, _, _) => {"}, {"sha": "abb60840024484777ea4c4cb7f557d1a0489da89", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -62,7 +62,7 @@ pub fn pat_is_refutable(dm: &DefMap, pat: &hir::Pat) -> bool {\n                 _ => false\n             }\n         }\n-        PatKind::Vec(_, _, _) => true,\n+        PatKind::Vec(..) => true,\n         _ => false\n     }\n }"}, {"sha": "753dd01d87eeabc413fcc846cfc9ba54c7bd9e55", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -1787,7 +1787,7 @@ fn lifetimes_in_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     let method_id_opt = match tcx.map.find(parent) {\n         Some(node) => match node {\n             ast_map::NodeItem(item) => match item.node {\n-                hir::ItemFn(_, _, _, _, ref gen, _) => {\n+                hir::ItemFn(.., ref gen, _) => {\n                     taken.extend_from_slice(&gen.lifetimes);\n                     None\n                 },\n@@ -1811,7 +1811,7 @@ fn lifetimes_in_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         if let Some(node) = tcx.map.find(parent) {\n             match node {\n                 ast_map::NodeItem(item) => match item.node {\n-                    hir::ItemImpl(_, _, ref gen, _, _, _) => {\n+                    hir::ItemImpl(_, _, ref gen, ..) => {\n                         taken.extend_from_slice(&gen.lifetimes);\n                     }\n                     _ => ()"}, {"sha": "bc5ca76c3f857b1f0110555c6606d0d5128031b1", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -248,7 +248,7 @@ impl TypeOrigin {\n             &TypeOrigin::RelateOutputImplTypes(_) => {\n                 \"trait type parameters matches those specified on the impl\"\n             }\n-            &TypeOrigin::MatchExpressionArm(_, _, _) => \"match arms have compatible types\",\n+            &TypeOrigin::MatchExpressionArm(..) => \"match arms have compatible types\",\n             &TypeOrigin::IfExpression(_) => \"if and else have compatible types\",\n             &TypeOrigin::IfExpressionWithNoElse(_) => \"if missing an else returns ()\",\n             &TypeOrigin::RangeExpression(_) => \"start and end of range have compatible types\","}, {"sha": "f70349d0ee08bd80b80becca173598ecb950fc6d", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -30,6 +30,7 @@\n #![feature(conservative_impl_trait)]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(enumset)]\n #![feature(libc)]\n #![feature(nonzero)]"}, {"sha": "8cb362c1625a586a9b7bec09d41a8eac4938abe1", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -344,7 +344,7 @@ impl<'v> Visitor<'v> for LifeSeeder {\n                 self.worklist.extend(enum_def.variants.iter()\n                                                       .map(|variant| variant.node.data.id()));\n             }\n-            hir::ItemTrait(_, _, _, ref trait_items) => {\n+            hir::ItemTrait(.., ref trait_items) => {\n                 for trait_item in trait_items {\n                     match trait_item.node {\n                         hir::ConstTraitItem(_, Some(_)) |\n@@ -357,7 +357,7 @@ impl<'v> Visitor<'v> for LifeSeeder {\n                     }\n                 }\n             }\n-            hir::ItemImpl(_, _, _, ref opt_trait, _, ref impl_items) => {\n+            hir::ItemImpl(.., ref opt_trait, _, ref impl_items) => {\n                 for impl_item in impl_items {\n                     if opt_trait.is_some() ||\n                             has_allow_dead_code_or_lang_attr(&impl_item.attrs) {"}, {"sha": "66c55eb1f3e5f1674cf12c6b3a9974167516d6d3", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n                 block: &'v hir::Block, span: Span, id: ast::NodeId) {\n \n         let (is_item_fn, is_unsafe_fn) = match fn_kind {\n-            FnKind::ItemFn(_, _, unsafety, _, _, _, _) =>\n+            FnKind::ItemFn(_, _, unsafety, ..) =>\n                 (true, unsafety == hir::Unsafety::Unsafe),\n             FnKind::Method(_, sig, _, _) =>\n                 (true, sig.unsafety == hir::Unsafety::Unsafe),\n@@ -143,7 +143,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n \n     fn visit_expr(&mut self, expr: &hir::Expr) {\n         match expr.node {\n-            hir::ExprMethodCall(_, _, _) => {\n+            hir::ExprMethodCall(..) => {\n                 let method_call = MethodCall::expr(expr.id);\n                 let base_type = self.tcx.tables.borrow().method_map[&method_call].ty;\n                 debug!(\"effect: method call case, base type is {:?}\","}, {"sha": "66c8a8ac0d37b30e5a7c2396de1c37417bd91275", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -544,7 +544,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 self.consume_expr(&count);\n             }\n \n-            hir::ExprClosure(_, _, _, fn_decl_span) => {\n+            hir::ExprClosure(.., fn_decl_span) => {\n                 self.walk_captures(expr, fn_decl_span)\n             }\n "}, {"sha": "beffaff1e5b8a491f254593c2b080c28a070cb26", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -46,8 +46,8 @@ fn item_might_be_inlined(item: &hir::Item) -> bool {\n     }\n \n     match item.node {\n-        hir::ItemImpl(_, _, ref generics, _, _, _) |\n-        hir::ItemFn(_, _, _, _, ref generics, _) => {\n+        hir::ItemImpl(_, _, ref generics, ..) |\n+        hir::ItemFn(.., ref generics, _) => {\n             generics_require_inlining(generics)\n         }\n         _ => false,\n@@ -187,7 +187,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                             // does too.\n                             let impl_node_id = self.tcx.map.as_local_node_id(impl_did).unwrap();\n                             match self.tcx.map.expect_item(impl_node_id).node {\n-                                hir::ItemImpl(_, _, ref generics, _, _, _) => {\n+                                hir::ItemImpl(_, _, ref generics, ..) => {\n                                     generics_require_inlining(generics)\n                                 }\n                                 _ => false\n@@ -226,7 +226,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             // If we are building an executable, only explicitly extern\n             // types need to be exported.\n             if let ast_map::NodeItem(item) = *node {\n-                let reachable = if let hir::ItemFn(_, _, _, abi, _, _) = item.node {\n+                let reachable = if let hir::ItemFn(.., abi, _, _) = item.node {\n                     abi != Abi::Rust\n                 } else {\n                     false\n@@ -248,7 +248,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n         match *node {\n             ast_map::NodeItem(item) => {\n                 match item.node {\n-                    hir::ItemFn(_, _, _, _, _, ref search_block) => {\n+                    hir::ItemFn(.., ref search_block) => {\n                         if item_might_be_inlined(&item) {\n                             intravisit::walk_block(self, &search_block)\n                         }\n@@ -265,7 +265,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     // inherently and their children are already in the\n                     // worklist, as determined by the privacy pass\n                     hir::ItemExternCrate(_) | hir::ItemUse(_) |\n-                    hir::ItemTy(..) | hir::ItemStatic(_, _, _) |\n+                    hir::ItemTy(..) | hir::ItemStatic(..) |\n                     hir::ItemMod(..) | hir::ItemForeignMod(..) |\n                     hir::ItemImpl(..) | hir::ItemTrait(..) |\n                     hir::ItemStruct(..) | hir::ItemEnum(..) |\n@@ -329,7 +329,7 @@ struct CollectPrivateImplItemsVisitor<'a> {\n impl<'a, 'v> Visitor<'v> for CollectPrivateImplItemsVisitor<'a> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         // We need only trait impls here, not inherent impls, and only non-exported ones\n-        if let hir::ItemImpl(_, _, _, Some(_), _, ref impl_items) = item.node {\n+        if let hir::ItemImpl(.., Some(_), _, ref impl_items) = item.node {\n             if !self.access_levels.is_reachable(item.id) {\n                 for impl_item in impl_items {\n                     self.worklist.push(impl_item.id);"}, {"sha": "b6faf834b26f7fc0995093a56fba38564ff0ba3c", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -158,7 +158,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for LifetimeContext<'a, 'tcx> {\n                 hir::ItemStruct(_, ref generics) |\n                 hir::ItemUnion(_, ref generics) |\n                 hir::ItemTrait(_, ref generics, _, _) |\n-                hir::ItemImpl(_, _, ref generics, _, _, _) => {\n+                hir::ItemImpl(_, _, ref generics, ..) => {\n                     // These kinds of items have only early bound lifetime parameters.\n                     let lifetimes = &generics.lifetimes;\n                     let start = if let hir::ItemTrait(..) = item.node {\n@@ -204,7 +204,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for LifetimeContext<'a, 'tcx> {\n     fn visit_fn(&mut self, fk: FnKind<'v>, decl: &'v hir::FnDecl,\n                 b: &'v hir::Block, s: Span, fn_id: ast::NodeId) {\n         match fk {\n-            FnKind::ItemFn(_, generics, _, _, _, _, _) => {\n+            FnKind::ItemFn(_, generics, ..) => {\n                 self.visit_early_late(fn_id,decl, generics, |this| {\n                     this.add_scope_and_walk_fn(fk, decl, b, s, fn_id)\n                 })\n@@ -499,7 +499,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                  fn_id: ast::NodeId) {\n \n         match fk {\n-            FnKind::ItemFn(_, generics, _, _, _, _, _) => {\n+            FnKind::ItemFn(_, generics, ..) => {\n                 intravisit::walk_fn_decl(self, fd);\n                 self.visit_generics(generics);\n             }\n@@ -584,7 +584,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n             match parent.node {\n                 hir::ItemTrait(_, ref generics, _, _) |\n-                hir::ItemImpl(_, _, ref generics, _, _, _) => {\n+                hir::ItemImpl(_, _, ref generics, ..) => {\n                     start += generics.lifetimes.len() + generics.ty_params.len();\n                 }\n                 _ => {}"}, {"sha": "9fc83557fa44bc62ead9c1f0f237ef7110a7fae7", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -252,11 +252,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n             // they don't have their own stability. They still can be annotated as unstable\n             // and propagate this unstability to children, but this annotation is completely\n             // optional. They inherit stability from their parents when unannotated.\n-            hir::ItemImpl(_, _, _, None, _, _) | hir::ItemForeignMod(..) => {\n+            hir::ItemImpl(.., None, _, _) | hir::ItemForeignMod(..) => {\n                 self.in_trait_impl = false;\n                 kind = AnnotationKind::Container;\n             }\n-            hir::ItemImpl(_, _, _, Some(_), _, _) => {\n+            hir::ItemImpl(.., Some(_), _, _) => {\n                 self.in_trait_impl = true;\n             }\n             hir::ItemStruct(ref sd, _) => {\n@@ -528,7 +528,7 @@ pub fn check_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // For implementations of traits, check the stability of each item\n         // individually as it's possible to have a stable trait with unstable\n         // items.\n-        hir::ItemImpl(_, _, _, Some(ref t), _, ref impl_items) => {\n+        hir::ItemImpl(.., Some(ref t), _, ref impl_items) => {\n             let trait_did = tcx.expect_def(t.ref_id).def_id();\n             let trait_items = tcx.trait_items(trait_did);\n "}, {"sha": "a9b3833b401755f95c8ffc3e9e6832bf3fa8fe08", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -1336,7 +1336,7 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n             }\n             Some(ast_map::NodeItem(item)) => {\n                 match item.node {\n-                    hir::ItemFn(_, _, _, _, _, ref body) => {\n+                    hir::ItemFn(.., ref body) => {\n                         // We assume this is a function.\n                         let fn_def_id = tcx.map.local_def_id(id);\n \n@@ -2262,7 +2262,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn provided_trait_methods(self, id: DefId) -> Vec<Rc<Method<'gcx>>> {\n         if let Some(id) = self.map.as_local_node_id(id) {\n-            if let ItemTrait(_, _, _, ref ms) = self.map.expect_item(id).node {\n+            if let ItemTrait(.., ref ms) = self.map.expect_item(id).node {\n                 ms.iter().filter_map(|ti| {\n                     if let hir::MethodTraitItem(_, Some(_)) = ti.node {\n                         match self.impl_or_trait_item(self.map.local_def_id(ti.id)) {\n@@ -2288,7 +2288,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn associated_consts(self, id: DefId) -> Vec<Rc<AssociatedConst<'gcx>>> {\n         if let Some(id) = self.map.as_local_node_id(id) {\n             match self.map.expect_item(id).node {\n-                ItemTrait(_, _, _, ref tis) => {\n+                ItemTrait(.., ref tis) => {\n                     tis.iter().filter_map(|ti| {\n                         if let hir::ConstTraitItem(_, _) = ti.node {\n                             match self.impl_or_trait_item(self.map.local_def_id(ti.id)) {\n@@ -2304,7 +2304,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }).collect()\n                 }\n-                ItemImpl(_, _, _, _, _, ref iis) => {\n+                ItemImpl(.., ref iis) => {\n                     iis.iter().filter_map(|ii| {\n                         if let hir::ImplItemKind::Const(_, _) = ii.node {\n                             match self.impl_or_trait_item(self.map.local_def_id(ii.id)) {\n@@ -2334,7 +2334,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             match self.map.find(id) {\n                 Some(ast_map::NodeItem(item)) => {\n                     match item.node {\n-                        hir::ItemImpl(_, polarity, _, _, _, _) => Some(polarity),\n+                        hir::ItemImpl(_, polarity, ..) => Some(polarity),\n                         _ => None\n                     }\n                 }"}, {"sha": "9c462feeaadd7f0a7967b20433d4df0c8c8c1201", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -67,8 +67,8 @@ pub fn borrowck_mir<'a, 'tcx: 'a>(\n     id: ast::NodeId,\n     attributes: &[ast::Attribute]) {\n     match fk {\n-        FnKind::ItemFn(name, _, _, _, _, _, _) |\n-        FnKind::Method(name, _, _, _) => {\n+        FnKind::ItemFn(name, ..) |\n+        FnKind::Method(name, ..) => {\n             debug!(\"borrowck_mir({}) UNIMPLEMENTED\", name);\n         }\n         FnKind::Closure(_) => {"}, {"sha": "e25adadbb2443efffb0bb2e6904d1722bcbf4188", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -711,7 +711,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n             move_data::Captured =>\n                 (match self.tcx.map.expect_expr(the_move.id).node {\n-                    hir::ExprClosure(_, _, _, fn_decl_span) => fn_decl_span,\n+                    hir::ExprClosure(.., fn_decl_span) => fn_decl_span,\n                     ref r => bug!(\"Captured({}) maps to non-closure: {:?}\",\n                                   the_move.id, r),\n                 }, \" (into closure)\"),"}, {"sha": "22b590592fe168d3277d3f7a4e31b28b4706debc", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -19,6 +19,7 @@\n \n #![allow(non_camel_case_types)]\n \n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]"}, {"sha": "a74b8848c4d6bafc32889068f4c700183c23e3ea", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -228,7 +228,7 @@ pub fn lookup_const_fn_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefI\n     };\n \n     match fn_like.kind() {\n-        FnKind::ItemFn(_, _, _, hir::Constness::Const, _, _, _) => {\n+        FnKind::ItemFn(_, _, _, hir::Constness::Const, ..) => {\n             Some(fn_like)\n         }\n         FnKind::Method(_, m, _, _) => {"}, {"sha": "f926fef065ea6c228fed4cc17a473a5ac0e7930f", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -22,7 +22,7 @@\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "84d65308f952ffbbdd613ec43cff0bbeb5158b5a", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -239,7 +239,7 @@ impl LateLintPass for NonSnakeCase {\n                 fk: FnKind, _: &hir::FnDecl,\n                 _: &hir::Block, span: Span, id: ast::NodeId) {\n         match fk {\n-            FnKind::Method(name, _, _, _) => match method_context(cx, id, span) {\n+            FnKind::Method(name, ..) => match method_context(cx, id, span) {\n                 MethodLateContext::PlainImpl => {\n                     self.check_snake_case(cx, \"method\", &name.as_str(), Some(span))\n                 },\n@@ -248,7 +248,7 @@ impl LateLintPass for NonSnakeCase {\n                 },\n                 _ => (),\n             },\n-            FnKind::ItemFn(name, _, _, _, _, _, _) => {\n+            FnKind::ItemFn(name, ..) => {\n                 self.check_snake_case(cx, \"function\", &name.as_str(), Some(span))\n             },\n             FnKind::Closure(_) => (),"}, {"sha": "eb2ded45c04c55d282ddf0d1cf7e6d27bd07b11c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -203,10 +203,10 @@ impl LateLintPass for UnsafeCode {\n \n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n-            hir::ItemTrait(hir::Unsafety::Unsafe, _, _, _) =>\n+            hir::ItemTrait(hir::Unsafety::Unsafe, ..) =>\n                 cx.span_lint(UNSAFE_CODE, it.span, \"declaration of an `unsafe` trait\"),\n \n-            hir::ItemImpl(hir::Unsafety::Unsafe, _, _, _, _, _) =>\n+            hir::ItemImpl(hir::Unsafety::Unsafe, ..) =>\n                 cx.span_lint(UNSAFE_CODE, it.span, \"implementation of an `unsafe` trait\"),\n \n             _ => return,\n@@ -216,7 +216,7 @@ impl LateLintPass for UnsafeCode {\n     fn check_fn(&mut self, cx: &LateContext, fk: FnKind, _: &hir::FnDecl,\n                 _: &hir::Block, span: Span, _: ast::NodeId) {\n         match fk {\n-            FnKind::ItemFn(_, _, hir::Unsafety::Unsafe, _, _, _, _) =>\n+            FnKind::ItemFn(_, _, hir::Unsafety::Unsafe, ..) =>\n                 cx.span_lint(UNSAFE_CODE, span, \"declaration of an `unsafe` function\"),\n \n             FnKind::Method(_, sig, _, _) => {\n@@ -351,7 +351,7 @@ impl LateLintPass for MissingDoc {\n             hir::ItemEnum(..) => \"an enum\",\n             hir::ItemStruct(..) => \"a struct\",\n             hir::ItemUnion(..) => \"a union\",\n-            hir::ItemTrait(_, _, _, ref items) => {\n+            hir::ItemTrait(.., ref items) => {\n                 // Issue #11592, traits are always considered exported, even when private.\n                 if it.vis == hir::Visibility::Inherited {\n                     self.private_traits.insert(it.id);\n@@ -363,7 +363,7 @@ impl LateLintPass for MissingDoc {\n                 \"a trait\"\n             },\n             hir::ItemTy(..) => \"a type alias\",\n-            hir::ItemImpl(_, _, _, Some(ref trait_ref), _, ref impl_items) => {\n+            hir::ItemImpl(.., Some(ref trait_ref), _, ref impl_items) => {\n                 // If the trait is private, add the impl items to private_traits so they don't get\n                 // reported for missing docs.\n                 let real_trait = cx.tcx.expect_def(trait_ref.ref_id).def_id();\n@@ -1037,7 +1037,7 @@ impl LintPass for InvalidNoMangleItems {\n impl LateLintPass for InvalidNoMangleItems {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n-            hir::ItemFn(_, _, _, _, ref generics, _) => {\n+            hir::ItemFn(.., ref generics, _) => {\n                 if attr::contains_name(&it.attrs, \"no_mangle\") {\n                     if !cx.access_levels.is_reachable(it.id) {\n                         let msg = format!(\"function {} is marked #[no_mangle], but not exported\","}, {"sha": "b9817cc6ff45a11402e894dbfa426463bfe533c6", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -31,6 +31,7 @@\n #![cfg_attr(test, feature(test))]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]"}, {"sha": "583631d2e0ab589c3e121c809c6a1b2c14535452", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -1065,7 +1065,7 @@ impl<'a, 'tcx, 'encoder> ItemContentBuilder<'a, 'tcx, 'encoder> {\n                 let trait_ref = tcx.impl_trait_ref(ecx.tcx.map.local_def_id(item.id)).unwrap();\n                 encode_trait_ref(self.rbml_w, ecx, trait_ref, tag_item_trait_ref);\n             }\n-            hir::ItemImpl(unsafety, polarity, _, _, _, _) => {\n+            hir::ItemImpl(unsafety, polarity, ..) => {\n                 // We need to encode information about the default methods we\n                 // have inherited, so we drive self based on the impl structure.\n                 let impl_items = tcx.impl_items.borrow();\n@@ -1129,7 +1129,7 @@ impl<'a, 'tcx, 'encoder> ItemContentBuilder<'a, 'tcx, 'encoder> {\n                 encode_stability(self.rbml_w, stab);\n                 encode_deprecation(self.rbml_w, depr);\n             }\n-            hir::ItemTrait(_, _, _, _) => {\n+            hir::ItemTrait(..) => {\n                 encode_def_id_and_key(ecx, self.rbml_w, def_id);\n                 encode_family(self.rbml_w, 'I');\n                 encode_item_variances(self.rbml_w, ecx, item.id);\n@@ -1209,10 +1209,10 @@ impl<'a, 'tcx, 'encoder> IndexBuilder<'a, 'tcx, 'encoder> {\n             hir::ItemUnion(..) => {\n                 self.encode_addl_union_info(def_id);\n             }\n-            hir::ItemImpl(_, _, _, _, _, ref ast_items) => {\n+            hir::ItemImpl(.., ref ast_items) => {\n                 self.encode_addl_impl_info(def_id, item.id, ast_items);\n             }\n-            hir::ItemTrait(_, _, _, ref trait_items) => {\n+            hir::ItemTrait(.., ref trait_items) => {\n                 self.encode_addl_trait_info(def_id, trait_items);\n             }\n         }"}, {"sha": "84323d464660770cb01df4521722f3e900e59e5f", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -18,6 +18,7 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(box_patterns)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(enumset)]\n #![feature(question_mark)]\n #![feature(quote)]"}, {"sha": "919b23ffda540d08d446b751ad0d8fa6b6013c51", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n             MirSource::Fn(id) => {\n                 let fn_like = FnLikeNode::from_node(infcx.tcx.map.get(id));\n                 match fn_like.map(|f| f.kind()) {\n-                    Some(FnKind::ItemFn(_, _, _, c, _, _, _)) => c,\n+                    Some(FnKind::ItemFn(_, _, _, c, ..)) => c,\n                     Some(FnKind::Method(_, m, _, _)) => m.constness,\n                     _ => hir::Constness::NotConst\n                 }"}, {"sha": "f580ceeee5d7f9462d33489beefb7de4385060a4", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -22,6 +22,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n #![feature(associated_consts)]\n #![feature(box_patterns)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "751f25b27940156a8d1eeba7e1c594dd94ae86a5", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -119,7 +119,7 @@ fn is_const_fn(tcx: TyCtxt, def_id: DefId) -> bool {\n     if let Some(node_id) = tcx.map.as_local_node_id(def_id) {\n         let fn_like = FnLikeNode::from_node(tcx.map.get(node_id));\n         match fn_like.map(|f| f.kind()) {\n-            Some(FnKind::ItemFn(_, _, _, c, _, _, _)) => {\n+            Some(FnKind::ItemFn(_, _, _, c, ..)) => {\n                 c == hir::Constness::Const\n             }\n             Some(FnKind::Method(_, m, _, _)) => {"}, {"sha": "6a24742426ab0a77a41a116efb5e0a82757d3c88", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -100,8 +100,8 @@ impl<'a> Visitor for AstValidator<'a> {\n         match expr.node {\n             ExprKind::While(_, _, Some(ident)) |\n             ExprKind::Loop(_, Some(ident)) |\n-            ExprKind::WhileLet(_, _, _, Some(ident)) |\n-            ExprKind::ForLoop(_, _, _, Some(ident)) |\n+            ExprKind::WhileLet(.., Some(ident)) |\n+            ExprKind::ForLoop(.., Some(ident)) |\n             ExprKind::Break(Some(ident)) |\n             ExprKind::Continue(Some(ident)) => {\n                 self.check_label(ident.node, ident.span, expr.id);\n@@ -155,7 +155,7 @@ impl<'a> Visitor for AstValidator<'a> {\n                         .span_err(path.span, \"type or lifetime parameters in import path\");\n                 }\n             }\n-            ItemKind::Impl(_, _, _, Some(..), _, ref impl_items) => {\n+            ItemKind::Impl(.., Some(..), _, ref impl_items) => {\n                 self.invalid_visibility(&item.vis, item.span, None);\n                 for impl_item in impl_items {\n                     self.invalid_visibility(&impl_item.vis, impl_item.span, None);\n@@ -164,7 +164,7 @@ impl<'a> Visitor for AstValidator<'a> {\n                     }\n                 }\n             }\n-            ItemKind::Impl(_, _, _, None, _, _) => {\n+            ItemKind::Impl(.., None, _, _) => {\n                 self.invalid_visibility(&item.vis,\n                                         item.span,\n                                         Some(\"place qualifiers on individual impl items instead\"));\n@@ -185,7 +185,7 @@ impl<'a> Visitor for AstValidator<'a> {\n                     }\n                 }\n             }\n-            ItemKind::Trait(_, _, _, ref trait_items) => {\n+            ItemKind::Trait(.., ref trait_items) => {\n                 for trait_item in trait_items {\n                     if let TraitItemKind::Method(ref sig, _) = trait_item.node {\n                         self.check_trait_fn_not_const(sig.constness);"}, {"sha": "3094ff49f1f59b1d9b107ee526ccb5cde3b8c96a", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n         }\n \n         let mode = match fk {\n-            FnKind::ItemFn(_, _, _, hir::Constness::Const, _, _, _)\n+            FnKind::ItemFn(_, _, _, hir::Constness::Const, ..)\n                 => Mode::ConstFn,\n             FnKind::Method(_, m, _, _) => {\n                 if m.constness == hir::Constness::Const {"}, {"sha": "a4657251c9ce2f16a9497b5a2ec5f2ef4fcf6ee1", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -23,6 +23,7 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(staged_api)]\n #![feature(rustc_private)]"}, {"sha": "5e374ce7c580358324e9bf484e5883192847c003", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -17,6 +17,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n@@ -125,10 +126,10 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         let inherited_item_level = match item.node {\n             // Impls inherit level from their types and traits\n-            hir::ItemImpl(_, _, _, None, ref ty, _) => {\n+            hir::ItemImpl(.., None, ref ty, _) => {\n                 self.ty_level(&ty)\n             }\n-            hir::ItemImpl(_, _, _, Some(ref trait_ref), ref ty, _) => {\n+            hir::ItemImpl(.., Some(ref trait_ref), ref ty, _) => {\n                 cmp::min(self.ty_level(&ty), self.trait_level(trait_ref))\n             }\n             hir::ItemDefaultImpl(_, ref trait_ref) => {\n@@ -157,19 +158,19 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemImpl(_, _, _, None, _, ref impl_items) => {\n+            hir::ItemImpl(.., None, _, ref impl_items) => {\n                 for impl_item in impl_items {\n                     if impl_item.vis == hir::Public {\n                         self.update(impl_item.id, item_level);\n                     }\n                 }\n             }\n-            hir::ItemImpl(_, _, _, Some(_), _, ref impl_items) => {\n+            hir::ItemImpl(.., Some(_), _, ref impl_items) => {\n                 for impl_item in impl_items {\n                     self.update(impl_item.id, item_level);\n                 }\n             }\n-            hir::ItemTrait(_, _, _, ref trait_items) => {\n+            hir::ItemTrait(.., ref trait_items) => {\n                 for trait_item in trait_items {\n                     self.update(trait_item.id, item_level);\n                 }\n@@ -204,7 +205,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemUse(..) => {}\n             // Visit everything\n             hir::ItemConst(..) | hir::ItemStatic(..) | hir::ItemFn(..) |\n-            hir::ItemTrait(..) | hir::ItemTy(..) | hir::ItemImpl(_, _, _, Some(..), _, _) => {\n+            hir::ItemTrait(..) | hir::ItemTy(..) | hir::ItemImpl(.., Some(..), _, _) => {\n                 if item_level.is_some() {\n                     self.reach().visit_item(item);\n                 }"}, {"sha": "98ddff70462c91eb4face04fe747f7cce852205c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -232,7 +232,7 @@ impl<'b> Resolver<'b> {\n                 let def = Def::Const(self.definitions.local_def_id(item.id));\n                 self.define(parent, name, ValueNS, (def, sp, vis));\n             }\n-            ItemKind::Fn(_, _, _, _, _, _) => {\n+            ItemKind::Fn(..) => {\n                 let def = Def::Fn(self.definitions.local_def_id(item.id));\n                 self.define(parent, name, ValueNS, (def, sp, vis));\n             }\n@@ -294,7 +294,7 @@ impl<'b> Resolver<'b> {\n \n             ItemKind::DefaultImpl(_, _) | ItemKind::Impl(..) => {}\n \n-            ItemKind::Trait(_, _, _, ref items) => {\n+            ItemKind::Trait(.., ref items) => {\n                 let def_id = self.definitions.local_def_id(item.id);\n \n                 // Add all the items within to a new module."}, {"sha": "0a86eeef7c45b89bbdcdf1444b7f61a7e31d3e0b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -19,6 +19,7 @@\n \n #![feature(associated_consts)]\n #![feature(borrow_state)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n@@ -599,7 +600,7 @@ impl<'a> Visitor for Resolver<'a> {\n                 _: Span,\n                 node_id: NodeId) {\n         let rib_kind = match function_kind {\n-            FnKind::ItemFn(_, generics, _, _, _, _) => {\n+            FnKind::ItemFn(_, generics, ..) => {\n                 self.visit_generics(generics);\n                 ItemRibKind\n             }\n@@ -1634,7 +1635,7 @@ impl<'a> Resolver<'a> {\n             ItemKind::Ty(_, ref generics) |\n             ItemKind::Struct(_, ref generics) |\n             ItemKind::Union(_, ref generics) |\n-            ItemKind::Fn(_, _, _, _, ref generics, _) => {\n+            ItemKind::Fn(.., ref generics, _) => {\n                 self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind),\n                                              |this| visit::walk_item(this, item));\n             }"}, {"sha": "329527b304e3ed5b3997959e830a3df90c7c93d2", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -1137,7 +1137,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                     }.lower(self.tcx));\n                 }\n             }\n-            Fn(ref decl, _, _, _, ref ty_params, ref body) =>\n+            Fn(ref decl, .., ref ty_params, ref body) =>\n                 self.process_fn(item, &decl, ty_params, &body),\n             Static(ref typ, _, ref expr) =>\n                 self.process_static_or_const_item(item, typ, expr),"}, {"sha": "559893b26facccfa04ed7436612c9b2993184b30", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -18,6 +18,7 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(custom_attribute)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![allow(unused_attributes)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n@@ -124,7 +125,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n     pub fn get_item_data(&self, item: &ast::Item) -> Option<Data> {\n         match item.node {\n-            ast::ItemKind::Fn(ref decl, _, _, _, ref generics, _) => {\n+            ast::ItemKind::Fn(ref decl, .., ref generics, _) => {\n                 let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n                 let sub_span = self.span_utils.sub_span_after_keyword(item.span, keywords::Fn);\n                 filter!(self.span_utils, sub_span, item.span, None);\n@@ -217,7 +218,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     variants: def.variants.iter().map(|v| v.node.data.id()).collect(),\n                 }))\n             }\n-            ast::ItemKind::Impl(_, _, _, ref trait_ref, ref typ, _) => {\n+            ast::ItemKind::Impl(.., ref trait_ref, ref typ, _) => {\n                 let mut type_data = None;\n                 let sub_span;\n \n@@ -295,7 +296,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             Some(impl_id) => match self.tcx.map.get_if_local(impl_id) {\n                 Some(NodeItem(item)) => {\n                     match item.node {\n-                        hir::ItemImpl(_, _, _, _, ref ty, _) => {\n+                        hir::ItemImpl(.., ref ty, _) => {\n                             let mut result = String::from(\"<\");\n                             result.push_str(&rustc::hir::print::ty_to_string(&ty));\n "}, {"sha": "b5c922d7fda4bc575a8ec7edd8065c8c06e9d462", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -1152,7 +1152,7 @@ impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n                 // const items only generate translation items if they are\n                 // actually used somewhere. Just declaring them is insufficient.\n             }\n-            hir::ItemFn(_, _, _, _, ref generics, _) => {\n+            hir::ItemFn(.., ref generics, _) => {\n                 if !generics.is_type_parameterized() {\n                     let def_id = self.scx.tcx().map.local_def_id(item.id);\n \n@@ -1179,7 +1179,7 @@ impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n                 let parent_node_id = hir_map.get_parent_node(ii.id);\n                 let is_impl_generic = match hir_map.expect_item(parent_node_id) {\n                     &hir::Item {\n-                        node: hir::ItemImpl(_, _, ref generics, _, _, _),\n+                        node: hir::ItemImpl(_, _, ref generics, ..),\n                         ..\n                     } => {\n                         generics.is_type_parameterized()"}, {"sha": "6f5bac840a1dc8d184b9f455cf3e6f56089d5ea4", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -27,6 +27,7 @@\n #![feature(box_syntax)]\n #![feature(const_fn)]\n #![feature(custom_attribute)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![allow(unused_attributes)]\n #![feature(libc)]\n #![feature(quote)]"}, {"sha": "5925d222b446635867af87ed89a7309deea12abf", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -1358,7 +1358,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             // `ty::trait_items` used below requires information generated\n             // by type collection, which may be in progress at this point.\n             match tcx.map.expect_item(trait_id).node {\n-                hir::ItemTrait(_, _, _, ref trait_items) => {\n+                hir::ItemTrait(.., ref trait_items) => {\n                     let item = trait_items.iter()\n                                           .find(|i| i.name == assoc_name)\n                                           .expect(\"missing associated type\");"}, {"sha": "36c2494a006569b948f07e574fe94a29339c1b56", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -741,7 +741,7 @@ pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n                             it.id);\n       }\n       hir::ItemFn(..) => {} // entirely within check_item_body\n-      hir::ItemImpl(_, _, _, _, _, ref impl_items) => {\n+      hir::ItemImpl(.., ref impl_items) => {\n           debug!(\"ItemImpl {} with id {}\", it.name, it.id);\n           let impl_def_id = ccx.tcx.map.local_def_id(it.id);\n           match ccx.tcx.impl_trait_ref(impl_def_id) {\n@@ -808,10 +808,10 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n            ccx.tcx.item_path_str(ccx.tcx.map.local_def_id(it.id)));\n     let _indenter = indenter();\n     match it.node {\n-      hir::ItemFn(ref decl, _, _, _, _, ref body) => {\n+      hir::ItemFn(ref decl, .., ref body) => {\n         check_bare_fn(ccx, &decl, &body, it.id);\n       }\n-      hir::ItemImpl(_, _, _, _, _, ref impl_items) => {\n+      hir::ItemImpl(.., ref impl_items) => {\n         debug!(\"ItemImpl {} with id {}\", it.name, it.id);\n \n         for impl_item in impl_items {\n@@ -828,7 +828,7 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n             }\n         }\n       }\n-      hir::ItemTrait(_, _, _, ref trait_items) => {\n+      hir::ItemTrait(.., ref trait_items) => {\n         for trait_item in trait_items {\n             match trait_item.node {\n                 hir::ConstTraitItem(_, Some(ref expr)) => {"}, {"sha": "8eb7d34568762c219b5ae43743406bfbf84c503b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -126,7 +126,7 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n                     }\n                 }\n             }\n-            hir::ItemFn(_, _, _, _, _, ref body) => {\n+            hir::ItemFn(.., ref body) => {\n                 self.check_item_fn(item, body);\n             }\n             hir::ItemStatic(..) => {\n@@ -156,7 +156,7 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n \n                 self.check_variances_for_type_defn(item, ast_generics);\n             }\n-            hir::ItemTrait(_, _, _, ref items) => {\n+            hir::ItemTrait(.., ref items) => {\n                 self.check_trait(item, items);\n             }\n             _ => {}"}, {"sha": "70682bb8c8f35355fd5292ff88eff16ab0cc257e", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -195,7 +195,7 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n     // Converts an implementation in the AST to a vector of items.\n     fn create_impl_from_item(&self, item: &Item) -> Vec<ImplOrTraitItemId> {\n         match item.node {\n-            ItemImpl(_, _, _, _, _, ref impl_items) => {\n+            ItemImpl(.., ref impl_items) => {\n                 impl_items.iter().map(|impl_item| {\n                     let impl_def_id = self.crate_context.tcx.map.local_def_id(impl_item.id);\n                     match impl_item.node {\n@@ -252,7 +252,7 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n                         match tcx.map.find(impl_node_id) {\n                             Some(hir_map::NodeItem(item)) => {\n                                 let span = match item.node {\n-                                    ItemImpl(_, _, _, _, ref ty, _) => {\n+                                    ItemImpl(.., ref ty, _) => {\n                                         ty.span\n                                     },\n                                     _ => item.span\n@@ -324,7 +324,7 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n                 }\n                 Err(CopyImplementationError::InfrigingVariant(name)) => {\n                     let item = tcx.map.expect_item(impl_node_id);\n-                    let span = if let ItemImpl(_, _, _, Some(ref tr), _, _) = item.node {\n+                    let span = if let ItemImpl(.., Some(ref tr), _, _) = item.node {\n                         tr.path.span\n                     } else {\n                         span\n@@ -338,7 +338,7 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n                 }\n                 Err(CopyImplementationError::NotAnAdt) => {\n                     let item = tcx.map.expect_item(impl_node_id);\n-                    let span = if let ItemImpl(_, _, _, _, ref ty, _) = item.node {\n+                    let span = if let ItemImpl(.., ref ty, _) = item.node {\n                         ty.span\n                     } else {\n                         span\n@@ -463,7 +463,7 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n                             return;\n                         } else if diff_fields.len() > 1 {\n                             let item = tcx.map.expect_item(impl_node_id);\n-                            let span = if let ItemImpl(_, _, _, Some(ref t), _, _) = item.node {\n+                            let span = if let ItemImpl(.., Some(ref t), _, _) = item.node {\n                                 t.path.span\n                             } else {\n                                 tcx.map.span(impl_node_id)"}, {"sha": "cb424eb48e9328057e34ed1ebf2e6c87db6f9529", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -68,7 +68,7 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n     fn check_item(&self, item: &hir::Item) {\n         let def_id = self.tcx.map.local_def_id(item.id);\n         match item.node {\n-            hir::ItemImpl(_, _, _, None, ref ty, _) => {\n+            hir::ItemImpl(.., None, ref ty, _) => {\n                 // For inherent impls, self type must be a nominal type\n                 // defined in this crate.\n                 debug!(\"coherence2::orphan check: inherent impl {}\",\n@@ -222,7 +222,7 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemImpl(_, _, _, Some(_), _, _) => {\n+            hir::ItemImpl(.., Some(_), _, _) => {\n                 // \"Trait\" impl\n                 debug!(\"coherence2::orphan check: trait impl {}\",\n                        self.tcx.map.node_to_string(item.id));"}, {"sha": "890b6c72e6fee5baeae296751b6aef687cabf543", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -122,7 +122,7 @@ impl<'cx, 'tcx,'v> intravisit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n                     err.emit();\n                 }\n             }\n-            hir::ItemImpl(_, _, _, Some(_), _, _) => {\n+            hir::ItemImpl(.., Some(_), _, _) => {\n                 let impl_def_id = self.tcx.map.local_def_id(item.id);\n                 let trait_ref = self.tcx.impl_trait_ref(impl_def_id).unwrap();\n                 let trait_def_id = trait_ref.def_id;"}, {"sha": "cdf5478e692b2bc84bd6a10db881f817a0946613", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -81,7 +81,7 @@ impl<'cx, 'tcx,'v> intravisit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n             hir::ItemDefaultImpl(unsafety, _) => {\n                 self.check_unsafety_coherence(item, unsafety, hir::ImplPolarity::Positive);\n             }\n-            hir::ItemImpl(unsafety, polarity, _, _, _, _) => {\n+            hir::ItemImpl(unsafety, polarity, ..) => {\n                 self.check_unsafety_coherence(item, unsafety, polarity);\n             }\n             _ => { }"}, {"sha": "a012fd418cac63b67610f3f2db67eceb7311ae43", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -850,7 +850,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n \n             enforce_impl_lifetimes_are_constrained(ccx, generics, def_id, impl_items);\n         },\n-        hir::ItemTrait(_, _, _, ref trait_items) => {\n+        hir::ItemTrait(.., ref trait_items) => {\n             let trait_def = trait_def_of_item(ccx, it);\n             let def_id = trait_def.trait_ref.def_id;\n             let _: Result<(), ErrorReported> = // any error is already reported, can ignore\n@@ -1311,7 +1311,7 @@ fn trait_defines_associated_type_named(ccx: &CrateCtxt,\n     };\n \n     let trait_items = match item.node {\n-        hir::ItemTrait(_, _, _, ref trait_items) => trait_items,\n+        hir::ItemTrait(.., ref trait_items) => trait_items,\n         _ => bug!(\"trait_node_id {} is not a trait\", trait_node_id)\n     };\n \n@@ -1445,8 +1445,8 @@ fn generics_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n             NodeItem(item) => {\n                 match item.node {\n-                    ItemFn(_, _, _, _, ref generics, _) |\n-                    ItemImpl(_, _, ref generics, _, _, _) => generics,\n+                    ItemFn(.., ref generics, _) |\n+                    ItemImpl(_, _, ref generics, ..) => generics,\n \n                     ItemTy(_, ref generics) |\n                     ItemEnum(_, ref generics) |\n@@ -1651,7 +1651,7 @@ fn predicates_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n     let no_generics = hir::Generics::empty();\n     let generics = match it.node {\n-        hir::ItemFn(_, _, _, _, ref generics, _) |\n+        hir::ItemFn(.., ref generics, _) |\n         hir::ItemTy(_, ref generics) |\n         hir::ItemEnum(_, ref generics) |\n         hir::ItemStruct(_, ref generics) |"}, {"sha": "d2e2d578fcedbae8821ba3649a7775e070b88778", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -76,6 +76,7 @@ This API is completely unstable and subject to change.\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n@@ -215,7 +216,7 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n             match tcx.map.find(main_id) {\n                 Some(hir_map::NodeItem(it)) => {\n                     match it.node {\n-                        hir::ItemFn(_, _, _, _, ref generics, _) => {\n+                        hir::ItemFn(.., ref generics, _) => {\n                             if generics.is_parameterized() {\n                                 struct_span_err!(ccx.tcx.sess, generics.span, E0131,\n                                          \"main function is not allowed to have type parameters\")\n@@ -267,7 +268,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n             match tcx.map.find(start_id) {\n                 Some(hir_map::NodeItem(it)) => {\n                     match it.node {\n-                        hir::ItemFn(_,_,_,_,ref ps,_)\n+                        hir::ItemFn(..,ref ps,_)\n                         if ps.is_parameterized() => {\n                             struct_span_err!(tcx.sess, ps.span, E0132,\n                                 \"start function is not allowed to have type parameters\")"}, {"sha": "4a637b5cfcff7275b93625f900fa247f8a74ad45", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -227,6 +227,7 @@\n #![feature(const_fn)]\n #![feature(core_float)]\n #![feature(core_intrinsics)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(dropck_parametricity)]\n #![feature(float_extras)]\n #![feature(float_from_str_radix)]"}, {"sha": "90a16853d56dd43c60894d2648ffd5818b14bc3a", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -200,7 +200,7 @@ impl OpenOptions {\n         const ERROR_INVALID_PARAMETER: i32 = 87;\n \n         match (self.read, self.write, self.append, self.access_mode) {\n-            (_, _, _, Some(mode)) => Ok(mode),\n+            (.., Some(mode)) => Ok(mode),\n             (true,  false, false, None) => Ok(c::GENERIC_READ),\n             (false, true,  false, None) => Ok(c::GENERIC_WRITE),\n             (true,  true,  false, None) => Ok(c::GENERIC_READ | c::GENERIC_WRITE),"}, {"sha": "bbd334514458525b21ea3f68ba9abe926eda85fb", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -562,7 +562,7 @@ impl Pat {\n             PatKind::Wild |\n             PatKind::Lit(_) |\n             PatKind::Range(_, _) |\n-            PatKind::Ident(_, _, _) |\n+            PatKind::Ident(..) |\n             PatKind::Path(..) |\n             PatKind::Mac(_) => {\n                 true"}, {"sha": "5b1ecfed24278ed3f5fdc76db2f618a7c91bcc27", "filename": "src/test/compile-fail-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -10,6 +10,7 @@\n \n // force-host\n \n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(plugin_registrar, quote, rustc_private)]\n \n extern crate syntax;\n@@ -75,7 +76,7 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n         Annotatable::ImplItem(_) => {\n             quote_item!(cx, impl X { fn foo(&self) -> i32 { 42 } }).unwrap().and_then(|i| {\n                 match i.node {\n-                    ItemKind::Impl(_, _, _, _, _, mut items) => {\n+                    ItemKind::Impl(.., mut items) => {\n                         Annotatable::ImplItem(P(items.pop().expect(\"impl method not found\")))\n                     }\n                     _ => unreachable!(\"impl parsed to something other than impl\")\n@@ -85,7 +86,7 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n         Annotatable::TraitItem(_) => {\n             quote_item!(cx, trait X { fn foo(&self) -> i32 { 0 } }).unwrap().and_then(|i| {\n                 match i.node {\n-                    ItemKind::Trait(_, _, _, mut items) => {\n+                    ItemKind::Trait(.., mut items) => {\n                         Annotatable::TraitItem(P(items.pop().expect(\"trait method not found\")))\n                     }\n                     _ => unreachable!(\"trait parsed to something other than trait\")"}, {"sha": "4885863122c3bd86d969a18bb75ff868d5c17fcf", "filename": "src/test/run-pass-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e51e49b7d74f8112cf048fcbd377d0db7c326/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=6f7e51e49b7d74f8112cf048fcbd377d0db7c326", "patch": "@@ -10,6 +10,7 @@\n \n // force-host\n \n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(plugin_registrar, quote, rustc_private)]\n \n extern crate syntax;\n@@ -81,7 +82,7 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n         Annotatable::ImplItem(_it) => vec![\n             quote_item!(cx, impl X { fn foo(&self) -> i32 { 42 } }).unwrap().and_then(|i| {\n                 match i.node {\n-                    ItemKind::Impl(_, _, _, _, _, mut items) => {\n+                    ItemKind::Impl(.., mut items) => {\n                         Annotatable::ImplItem(P(items.pop().expect(\"impl method not found\")))\n                     }\n                     _ => unreachable!(\"impl parsed to something other than impl\")\n@@ -91,7 +92,7 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n         Annotatable::TraitItem(_it) => vec![\n             quote_item!(cx, trait X { fn foo(&self) -> i32 { 0 } }).unwrap().and_then(|i| {\n                 match i.node {\n-                    ItemKind::Trait(_, _, _, mut items) => {\n+                    ItemKind::Trait(.., mut items) => {\n                         Annotatable::TraitItem(P(items.pop().expect(\"trait method not found\")))\n                     }\n                     _ => unreachable!(\"trait parsed to something other than trait\")\n@@ -165,7 +166,7 @@ fn expand_caller(cx: &mut ExtCtxt,\n                  push: &mut FnMut(Annotatable)) {\n     let (orig_fn_name, ret_type) = match *it {\n         Annotatable::Item(ref item) => match item.node {\n-            ItemKind::Fn(ref decl, _, _, _, _, _) => {\n+            ItemKind::Fn(ref decl, ..) => {\n                 (item.ident, &decl.output)\n             }\n             _ => cx.span_fatal(item.span, \"Only functions with return types can be annotated.\")"}]}