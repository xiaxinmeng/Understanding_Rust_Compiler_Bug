{"sha": "1d8b91781189a1e859d4c7f73b153abb913a292c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkOGI5MTc4MTE4OWExZTg1OWQ0YzdmNzNiMTUzYWJiOTEzYTI5MmM=", "commit": {"author": {"name": "Barosl LEE", "email": "github@barosl.com", "date": "2015-01-20T17:16:45Z"}, "committer": {"name": "Barosl LEE", "email": "github@barosl.com", "date": "2015-01-20T17:16:45Z"}, "message": "Rollup merge of #20998 - estsauver:20984, r=steveklabnik\n\nThere are a large number of places that incorrectly refer\r\nto deriving in comments, instead of derives.\r\n\r\nIf someone could look at src/etc/generate-deriving-span-tests.py,\r\nI'm not sure how those tests were passing before/if they were.", "tree": {"sha": "caf856158366aa817667c8e1e71a740617f49fe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caf856158366aa817667c8e1e71a740617f49fe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d8b91781189a1e859d4c7f73b153abb913a292c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d8b91781189a1e859d4c7f73b153abb913a292c", "html_url": "https://github.com/rust-lang/rust/commit/1d8b91781189a1e859d4c7f73b153abb913a292c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d8b91781189a1e859d4c7f73b153abb913a292c/comments", "author": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffd8cb79a2d3da6629c8f54ef9ea9c29bd92fc9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd8cb79a2d3da6629c8f54ef9ea9c29bd92fc9e", "html_url": "https://github.com/rust-lang/rust/commit/ffd8cb79a2d3da6629c8f54ef9ea9c29bd92fc9e"}, {"sha": "6ab95bdd62095429139f1b24717cbf0e5aa4a235", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ab95bdd62095429139f1b24717cbf0e5aa4a235", "html_url": "https://github.com/rust-lang/rust/commit/6ab95bdd62095429139f1b24717cbf0e5aa4a235"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "54e1e92aa0ef98d8d058b1eba8e83118c6a35e5d", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -2451,7 +2451,7 @@ There are three different types of inline attributes:\n * `#[inline(always)]` asks the compiler to always perform an inline expansion.\n * `#[inline(never)]` asks the compiler to never perform an inline expansion.\n \n-### Derive\n+### `derive`\n \n The `derive` attribute allows certain traits to be automatically implemented\n for data structures. For example, the following will create an `impl` for the"}, {"sha": "eeb1b89472b3d36c82c14413fc2aa7d3804d1c04", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -12,8 +12,8 @@\n \n \"\"\"\n This script creates a pile of compile-fail tests check that all the\n-derivings have spans that point to the fields, rather than the\n-#[deriving(...)] line.\n+derives have spans that point to the fields, rather than the\n+#[derive(...)] line.\n \n sample usage: src/etc/generate-deriving-span-tests.py\n \"\"\"\n@@ -46,29 +46,29 @@\n \"\"\"\n \n ENUM_STRING = \"\"\"\n-#[deriving({traits})]\n+#[derive({traits})]\n enum Enum {{\n    A(\n      Error {errors}\n      )\n }}\n \"\"\"\n ENUM_STRUCT_VARIANT_STRING = \"\"\"\n-#[deriving({traits})]\n+#[derive({traits})]\n enum Enum {{\n    A {{\n      x: Error {errors}\n    }}\n }}\n \"\"\"\n STRUCT_STRING = \"\"\"\n-#[deriving({traits})]\n+#[derive({traits})]\n struct Struct {{\n     x: Error {errors}\n }}\n \"\"\"\n STRUCT_TUPLE_STRING = \"\"\"\n-#[deriving({traits})]\n+#[derive({traits})]\n struct Struct(\n     Error {errors}\n );\n@@ -80,14 +80,14 @@ def create_test_case(type, trait, super_traits, number_of_errors):\n     string = [ENUM_STRING, ENUM_STRUCT_VARIANT_STRING, STRUCT_STRING, STRUCT_TUPLE_STRING][type]\n     all_traits = ','.join([trait] + super_traits)\n     super_traits = ','.join(super_traits)\n-    error_deriving = '#[deriving(%s)]' % super_traits if super_traits else ''\n+    error_deriving = '#[derive(%s)]' % super_traits if super_traits else ''\n \n     errors = '\\n'.join('//~%s ERROR' % ('^' * n) for n in range(error_count))\n     code = string.format(traits = all_traits, errors = errors)\n     return TEMPLATE.format(year = YEAR, error_deriving=error_deriving, code = code)\n \n def write_file(name, string):\n-    test_file = os.path.join(TEST_DIR, 'deriving-span-%s.rs' % name)\n+    test_file = os.path.join(TEST_DIR, 'derives-span-%s.rs' % name)\n \n     # set write permission if file exists, so it can be changed\n     if os.path.exists(test_file):"}, {"sha": "4a0bb992fd9897c6d6b9c148e794f6e4c7510fb6", "filename": "src/etc/unicode.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -392,7 +392,7 @@ def emit_grapheme_module(f, grapheme_table, grapheme_cats):\n     use core::slice;\n \n     #[allow(non_camel_case_types)]\n-    #[deriving(Clone)]\n+    #[derive(Clone)]\n     pub enum GraphemeCat {\n \"\"\")\n     for cat in grapheme_cats + [\"Any\"]:"}, {"sha": "6a182add000644a6f4e47e2472b8bcc1a49bec96", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -102,10 +102,10 @@ pub fn fixme_14344_be_sure_to_link_to_collections() {}\n mod std {\n     pub use core::fmt;      // necessary for panic!()\n     pub use core::option;   // necessary for panic!()\n-    pub use core::clone;    // deriving(Clone)\n-    pub use core::cmp;      // deriving(Eq, Ord, etc.)\n-    pub use core::marker;  // deriving(Copy)\n-    pub use core::hash;     // deriving(Hash)\n+    pub use core::clone;    // derive(Clone)\n+    pub use core::cmp;      // derive(Eq, Ord, etc.)\n+    pub use core::marker;  // derive(Copy)\n+    pub use core::hash;     // derive(Hash)\n }\n \n #[cfg(test)]"}, {"sha": "b71e465b938f5c457cce45db63062f336109959e", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -156,7 +156,7 @@ mod svh_visitor {\n         StrictVersionHashVisitor { st: st }\n     }\n \n-    // To off-load the bulk of the hash-computation on deriving(Hash),\n+    // To off-load the bulk of the hash-computation on #[derive(Hash)],\n     // we define a set of enums corresponding to the content that our\n     // crate visitor will encounter as it traverses the ast.\n     //"}, {"sha": "88fb983361a9100feeed7a1ed3d433749e609436", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -221,7 +221,7 @@\n //! - `fmt::Show` implementations should be implemented for **all** public types.\n //!   Output will typically represent the internal state as faithfully as possible.\n //!   The purpose of the `Show` trait is to facilitate debugging Rust code. In\n-//!   most cases, using `#[deriving(Show)]` is sufficient and recommended.\n+//!   most cases, using `#[derive(Show)]` is sufficient and recommended.\n //!\n //! Some examples of the output from both traits:\n //!"}, {"sha": "6498e8d2d587a611c987f54aaaad89df214bfd35", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -80,11 +80,11 @@ fn cs_clone(\n         EnumNonMatchingCollapsed (..) => {\n             cx.span_bug(trait_span,\n                         &format!(\"non-matching enum variants in \\\n-                                 `deriving({})`\", name)[])\n+                                 `derive({})`\", name)[])\n         }\n         StaticEnum(..) | StaticStruct(..) => {\n             cx.span_bug(trait_span,\n-                        &format!(\"static method in `deriving({})`\", name)[])\n+                        &format!(\"static method in `derive({})`\", name)[])\n         }\n     }\n \n@@ -101,7 +101,7 @@ fn cs_clone(\n                 None => {\n                     cx.span_bug(trait_span,\n                                 &format!(\"unnamed field in normal struct in \\\n-                                         `deriving({})`\", name)[])\n+                                         `derive({})`\", name)[])\n                 }\n             };\n             cx.field_imm(field.span, ident, subcall(field))"}, {"sha": "c550c26c745727ddb166b3704d68220070551219", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -32,7 +32,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n             |cx, span, subexpr, self_f, other_fs| {\n                 let other_f = match other_fs {\n                     [ref o_f] => o_f,\n-                    _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialEq)`\")\n+                    _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\")\n                 };\n \n                 let eq = cx.expr_binary(span, ast::BiEq, self_f, other_f.clone());\n@@ -49,7 +49,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n             |cx, span, subexpr, self_f, other_fs| {\n                 let other_f = match other_fs {\n                     [ref o_f] => o_f,\n-                    _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialEq)`\")\n+                    _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\")\n                 };\n \n                 let eq = cx.expr_binary(span, ast::BiNe, self_f, other_f.clone());"}, {"sha": "9f1850145b6c592526e8c76e0cee5dfb1e2b9a71", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -152,7 +152,7 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n             let new = {\n                 let other_f = match other_fs {\n                     [ref o_f] => o_f,\n-                    _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\"),\n+                    _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\"),\n                 };\n \n                 let args = vec![\n@@ -176,7 +176,7 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n         equals_expr.clone(),\n         box |cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n-                cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\")\n+                cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")\n             } else {\n                 some_ordering_collapsed(cx, span, PartialCmpOp, tag_tuple)\n             }\n@@ -210,7 +210,7 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt,\n             */\n             let other_f = match other_fs {\n                 [ref o_f] => o_f,\n-                _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\")\n+                _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")\n             };\n \n             let cmp = cx.expr_binary(span, op, self_f.clone(), other_f.clone());\n@@ -224,7 +224,7 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt,\n         cx.expr_bool(span, equal),\n         box |cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n-                cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\")\n+                cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")\n             } else {\n                 let op = match (less, equal) {\n                     (true,  true) => LeOp, (true,  false) => LtOp,"}, {"sha": "9a2af6a3e0bee29bd939f45b90ef795f14d3ad81", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -32,7 +32,7 @@ pub fn expand_deriving_totaleq<F>(cx: &mut ExtCtxt,\n             let block = cx.block(span, stmts, None);\n             cx.expr_block(block)\n         },\n-                       box |cx, sp, _, _| cx.span_bug(sp, \"non matching enums in deriving(Eq)?\"),\n+                       box |cx, sp, _, _| cx.span_bug(sp, \"non matching enums in derive(Eq)?\"),\n                        cx,\n                        span,\n                        substr)"}, {"sha": "29d327142a6cf4785949574fa233abc175b2700d", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -108,7 +108,7 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n             let new = {\n                 let other_f = match other_fs {\n                     [ref o_f] => o_f,\n-                    _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\"),\n+                    _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\"),\n                 };\n \n                 let args = vec![\n@@ -132,7 +132,7 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n         cx.expr_path(equals_path.clone()),\n         box |cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n-                cx.span_bug(span, \"not exactly 2 arguments in `deriving(Ord)`\")\n+                cx.span_bug(span, \"not exactly 2 arguments in `derives(Ord)`\")\n             } else {\n                 ordering_collapsed(cx, span, tag_tuple)\n             }"}, {"sha": "8edbf018f22e32f568a05cdad84143148dc3a11c", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -173,7 +173,7 @@ fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                 cx.lambda_expr_1(trait_span, result, blkarg)\n             ))\n         }\n-        _ => cx.bug(\"expected StaticEnum or StaticStruct in deriving(Decodable)\")\n+        _ => cx.bug(\"expected StaticEnum or StaticStruct in derive(Decodable)\")\n     };\n }\n "}, {"sha": "36c3f2c0ccb34a7621eb40990f8291e35b17d67f", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -81,6 +81,6 @@ fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructur\n             // let compilation continue\n             cx.expr_uint(trait_span, 0)\n         }\n-        _ => cx.span_bug(trait_span, \"Non-static method in `deriving(Default)`\")\n+        _ => cx.span_bug(trait_span, \"Non-static method in `derive(Default)`\")\n     };\n }"}, {"sha": "801ae213a7bcfd373d9684f67edc235c4757be5f", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -276,6 +276,6 @@ fn encodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n             cx.expr_block(cx.block(trait_span, vec!(me), Some(ret)))\n         }\n \n-        _ => cx.bug(\"expected Struct or EnumMatching in deriving(Encodable)\")\n+        _ => cx.bug(\"expected Struct or EnumMatching in derive(Encodable)\")\n     };\n }"}, {"sha": "293e4befd3bb1f6a6925196b04e334761d9d74c6", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -1191,7 +1191,7 @@ impl<'a> TraitDef<'a> {\n         to_set.expn_id = cx.codemap().record_expansion(codemap::ExpnInfo {\n             call_site: to_set,\n             callee: codemap::NameAndSpan {\n-                name: format!(\"deriving({})\", trait_name),\n+                name: format!(\"derive({})\", trait_name),\n                 format: codemap::MacroAttribute,\n                 span: Some(self.span)\n             }"}, {"sha": "5e6a9c91ce032599fd8141f099c3dd57a114b4c4", "filename": "src/libsyntax/ext/deriving/generic/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -182,8 +182,8 @@ impl<'a> Ty<'a> {\n             Literal(ref p) => {\n                 p.to_path(cx, span, self_ty, self_generics)\n             }\n-            Ptr(..) => { cx.span_bug(span, \"pointer in a path in generic `deriving`\") }\n-            Tuple(..) => { cx.span_bug(span, \"tuple in a path in generic `deriving`\") }\n+            Ptr(..) => { cx.span_bug(span, \"pointer in a path in generic `derive`\") }\n+            Tuple(..) => { cx.span_bug(span, \"tuple in a path in generic `derive`\") }\n         }\n     }\n }"}, {"sha": "c45fe1ceb2049bf0525cb2ccbde0aabbcb254b34", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -74,7 +74,7 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {\n     let n = match substr.nonself_args {\n         [ref n] => n,\n-        _ => cx.span_bug(trait_span, \"incorrect number of arguments in `deriving(FromPrimitive)`\")\n+        _ => cx.span_bug(trait_span, \"incorrect number of arguments in `derive(FromPrimitive)`\")\n     };\n \n     match *substr.fields {\n@@ -144,6 +144,6 @@ fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure\n \n             cx.expr_match(trait_span, n.clone(), arms)\n         }\n-        _ => cx.span_bug(trait_span, \"expected StaticEnum in deriving(FromPrimitive)\")\n+        _ => cx.span_bug(trait_span, \"expected StaticEnum in derive(FromPrimitive)\")\n     }\n }"}, {"sha": "b5435896791cd6e92ab8d804695bffa3448af02c", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b91781189a1e859d4c7f73b153abb913a292c/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=1d8b91781189a1e859d4c7f73b153abb913a292c", "patch": "@@ -57,7 +57,7 @@ pub fn expand_deriving_rand<F>(cx: &mut ExtCtxt,\n fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {\n     let rng = match substr.nonself_args {\n         [ref rng] => rng,\n-        _ => cx.bug(\"Incorrect number of arguments to `rand` in `deriving(Rand)`\")\n+        _ => cx.bug(\"Incorrect number of arguments to `rand` in `derive(Rand)`\")\n     };\n     let rand_ident = vec!(\n         cx.ident_of(\"std\"),\n@@ -131,7 +131,7 @@ fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n             let block = cx.block(trait_span, vec!( let_statement ), Some(match_expr));\n             cx.expr_block(block)\n         }\n-        _ => cx.bug(\"Non-static method in `deriving(Rand)`\")\n+        _ => cx.bug(\"Non-static method in `derive(Rand)`\")\n     };\n \n     fn rand_thing<F>(cx: &mut ExtCtxt,"}]}