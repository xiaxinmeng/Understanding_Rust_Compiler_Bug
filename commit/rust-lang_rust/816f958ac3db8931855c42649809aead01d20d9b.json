{"sha": "816f958ac3db8931855c42649809aead01d20d9b", "node_id": "C_kwDOAAsO6NoAKDgxNmY5NThhYzNkYjg5MzE4NTVjNDI2NDk4MDlhZWFkMDFkMjBkOWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-05T22:02:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-05T22:02:26Z"}, "message": "Auto merge of #108157 - scottmcm:tuple-gt-via-partialcmp, r=dtolnay\n\nUse `partial_cmp` to implement tuple `lt`/`le`/`ge`/`gt`\n\nIn today's implementation, `(A, B)::gt` contains calls to *both* `A::eq` *and* `A::gt`.\n\nThat's fine for primitives, but for things like `String`s it's kinda weird -- `(String, usize)::gt` has a call to both `bcmp` and `memcmp` (<https://rust.godbolt.org/z/7jbbPMesf>) because when `bcmp` says the `String`s aren't equal, it turns around and calls `memcmp` to find out which one's bigger.\n\nThis PR changes the implementation to instead implement `(A, \u2026, C, Z)::gt` using `A::partial_cmp`, `\u2026::partial_cmp`, `C::partial_cmp`, and `Z::gt`.  (And analogously for `lt`, `le`, and `ge`.)  That way expensive comparisons don't need to be repeated.\n\nTechnically this is an observable change on stable, so I've marked it `needs-fcp` + `T-libs-api` and will\nr? rust-lang/libs-api\n\nI'm hoping that this will be non-controversial, however, since it's very similar to the observable changes that were made to the derives (#81384 #98655) -- like those, this only changes behaviour if a type overrode behaviour in a way inconsistent with the rules for the various traits involved.\n\n(The first commit here is #108156, adding the codegen test, which I used to make sure this doesn't regress behaviour for primitives.)\n\nZulip conversation about this change: <https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/.60.3E.60.20on.20Tuples/near/328392927>.", "tree": {"sha": "df605dfcb01056dd922e957e7890e2918b386862", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df605dfcb01056dd922e957e7890e2918b386862"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/816f958ac3db8931855c42649809aead01d20d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/816f958ac3db8931855c42649809aead01d20d9b", "html_url": "https://github.com/rust-lang/rust/commit/816f958ac3db8931855c42649809aead01d20d9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/816f958ac3db8931855c42649809aead01d20d9b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7820b62d20bc548096d4632a3487987308cb4b5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7820b62d20bc548096d4632a3487987308cb4b5d", "html_url": "https://github.com/rust-lang/rust/commit/7820b62d20bc548096d4632a3487987308cb4b5d"}, {"sha": "4492793e0ddc755b0db3a055fd9a2b9b215c656e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4492793e0ddc755b0db3a055fd9a2b9b215c656e", "html_url": "https://github.com/rust-lang/rust/commit/4492793e0ddc755b0db3a055fd9a2b9b215c656e"}], "stats": {"total": 192, "additions": 179, "deletions": 13}, "files": [{"sha": "74ef0949b8af27da959bc62ab3751dfa7c34e1f3", "filename": "library/core/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/816f958ac3db8931855c42649809aead01d20d9b/library%2Fcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816f958ac3db8931855c42649809aead01d20d9b/library%2Fcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Flib.rs?ref=816f958ac3db8931855c42649809aead01d20d9b", "patch": "@@ -20,6 +20,7 @@ mod ops;\n mod pattern;\n mod slice;\n mod str;\n+mod tuple;\n \n /// Returns a `rand::Rng` seeded with a consistent seed.\n ///"}, {"sha": "d9ff9d0dd9378feb4a21f5994e467e28c22a984f", "filename": "library/core/benches/tuple.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/816f958ac3db8931855c42649809aead01d20d9b/library%2Fcore%2Fbenches%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816f958ac3db8931855c42649809aead01d20d9b/library%2Fcore%2Fbenches%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Ftuple.rs?ref=816f958ac3db8931855c42649809aead01d20d9b", "patch": "@@ -0,0 +1,22 @@\n+use rand::prelude::*;\n+use test::{black_box, Bencher};\n+\n+#[bench]\n+fn bench_tuple_comparison(b: &mut Bencher) {\n+    let mut rng = black_box(super::bench_rng());\n+\n+    let data = black_box([\n+        (\"core::iter::adapters::Chain\", 123_usize),\n+        (\"core::iter::adapters::Clone\", 456_usize),\n+        (\"core::iter::adapters::Copie\", 789_usize),\n+        (\"core::iter::adapters::Cycle\", 123_usize),\n+        (\"core::iter::adapters::Flatt\", 456_usize),\n+        (\"core::iter::adapters::TakeN\", 789_usize),\n+    ]);\n+\n+    b.iter(|| {\n+        let x = data.choose(&mut rng).unwrap();\n+        let y = data.choose(&mut rng).unwrap();\n+        [x < y, x <= y, x > y, x >= y]\n+    });\n+}"}, {"sha": "0620e7173bc1779dc818f2e80afa5aa6bb1b0fac", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/816f958ac3db8931855c42649809aead01d20d9b/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816f958ac3db8931855c42649809aead01d20d9b/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=816f958ac3db8931855c42649809aead01d20d9b", "patch": "@@ -1,7 +1,7 @@\n // See src/libstd/primitive_docs.rs for documentation.\n \n-use crate::cmp::Ordering::*;\n-use crate::cmp::*;\n+use crate::cmp::Ordering::{self, *};\n+use crate::mem::transmute;\n \n // Recursive macro for implementing n-ary tuple functions and operations\n //\n@@ -61,19 +61,19 @@ macro_rules! tuple_impls {\n                 }\n                 #[inline]\n                 fn lt(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(lt, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n+                    lexical_ord!(lt, Less, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n                 #[inline]\n                 fn le(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(le, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n+                    lexical_ord!(le, Less, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n                 #[inline]\n                 fn ge(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(ge, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n+                    lexical_ord!(ge, Greater, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n                 #[inline]\n                 fn gt(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(gt, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n+                    lexical_ord!(gt, Greater, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n             }\n         }\n@@ -123,16 +123,38 @@ macro_rules! maybe_tuple_doc {\n     };\n }\n \n-// Constructs an expression that performs a lexical ordering using method $rel.\n+#[inline]\n+const fn ordering_is_some(c: Option<Ordering>, x: Ordering) -> bool {\n+    // FIXME: Just use `==` once that's const-stable on `Option`s.\n+    // This isn't using `match` because that optimizes worse due to\n+    // making a two-step check (`Some` *then* the inner value).\n+\n+    // SAFETY: There's no public guarantee for `Option<Ordering>`,\n+    // but we're core so we know that it's definitely a byte.\n+    unsafe {\n+        let c: i8 = transmute(c);\n+        let x: i8 = transmute(Some(x));\n+        c == x\n+    }\n+}\n+\n+// Constructs an expression that performs a lexical ordering using method `$rel`.\n // The values are interleaved, so the macro invocation for\n-// `(a1, a2, a3) < (b1, b2, b3)` would be `lexical_ord!(lt, a1, b1, a2, b2,\n-// a3, b3)` (and similarly for `lexical_cmp`)\n+// `(a1, a2, a3) < (b1, b2, b3)` would be `lexical_ord!(lt, opt_is_lt, a1, b1,\n+// a2, b2, a3, b3)` (and similarly for `lexical_cmp`)\n+//\n+// `$ne_rel` is only used to determine the result after checking that they're\n+// not equal, so `lt` and `le` can both just use `Less`.\n macro_rules! lexical_ord {\n-    ($rel: ident, $a:expr, $b:expr, $($rest_a:expr, $rest_b:expr),+) => {\n-        if $a != $b { lexical_ord!($rel, $a, $b) }\n-        else { lexical_ord!($rel, $($rest_a, $rest_b),+) }\n+    ($rel: ident, $ne_rel: ident, $a:expr, $b:expr, $($rest_a:expr, $rest_b:expr),+) => {{\n+        let c = PartialOrd::partial_cmp(&$a, &$b);\n+        if !ordering_is_some(c, Equal) { ordering_is_some(c, $ne_rel) }\n+        else { lexical_ord!($rel, $ne_rel, $($rest_a, $rest_b),+) }\n+    }};\n+    ($rel: ident, $ne_rel: ident, $a:expr, $b:expr) => {\n+        // Use the specific method for the last element\n+        PartialOrd::$rel(&$a, &$b)\n     };\n-    ($rel: ident, $a:expr, $b:expr) => { ($a) . $rel (& $b) };\n }\n \n macro_rules! lexical_partial_cmp {"}, {"sha": "a9d25e3b53cffa386c180a5540070e7a9bd3a576", "filename": "tests/codegen/comparison-operators-2-tuple.rs", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/816f958ac3db8931855c42649809aead01d20d9b/tests%2Fcodegen%2Fcomparison-operators-2-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816f958ac3db8931855c42649809aead01d20d9b/tests%2Fcodegen%2Fcomparison-operators-2-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcomparison-operators-2-tuple.rs?ref=816f958ac3db8931855c42649809aead01d20d9b", "patch": "@@ -0,0 +1,121 @@\n+// compile-flags: -C opt-level=1 -Z merge-functions=disabled\n+// min-llvm-version: 15.0\n+// only-x86_64\n+\n+#![crate_type = \"lib\"]\n+\n+use std::cmp::Ordering;\n+\n+type TwoTuple = (i16, u16);\n+\n+//\n+// The operators are all overridden directly, so should optimize easily.\n+//\n+// Yes, the `s[lg]t` is correct for the `[lg]e` version because it's only used\n+// in the side of the select where we know the values are *not* equal.\n+//\n+\n+// CHECK-LABEL: @check_lt_direct\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_lt_direct(a: TwoTuple, b: TwoTuple) -> bool {\n+    // CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP0:.+]] = icmp slt i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP1:.+]] = icmp ult i16 %[[A1]], %[[B1]]\n+    // CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // CHECK: ret i1 %[[R]]\n+    a < b\n+}\n+\n+// CHECK-LABEL: @check_le_direct\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_le_direct(a: TwoTuple, b: TwoTuple) -> bool {\n+    // CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP0:.+]] = icmp slt i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP1:.+]] = icmp ule i16 %[[A1]], %[[B1]]\n+    // CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // CHECK: ret i1 %[[R]]\n+    a <= b\n+}\n+\n+// CHECK-LABEL: @check_gt_direct\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_gt_direct(a: TwoTuple, b: TwoTuple) -> bool {\n+    // CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP0:.+]] = icmp sgt i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP1:.+]] = icmp ugt i16 %[[A1]], %[[B1]]\n+    // CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // CHECK: ret i1 %[[R]]\n+    a > b\n+}\n+\n+// CHECK-LABEL: @check_ge_direct\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_ge_direct(a: TwoTuple, b: TwoTuple) -> bool {\n+    // CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP0:.+]] = icmp sgt i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP1:.+]] = icmp uge i16 %[[A1]], %[[B1]]\n+    // CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // CHECK: ret i1 %[[R]]\n+    a >= b\n+}\n+\n+//\n+// These ones are harder, since there are more intermediate values to remove.\n+//\n+// `<` seems to be getting lucky right now, so test that doesn't regress.\n+//\n+// The others, however, aren't managing to optimize away the extra `select`s yet.\n+// See <https://github.com/rust-lang/rust/issues/106107> for more about this.\n+//\n+\n+// CHECK-LABEL: @check_lt_via_cmp\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_lt_via_cmp(a: TwoTuple, b: TwoTuple) -> bool {\n+    // CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP0:.+]] = icmp slt i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP1:.+]] = icmp ult i16 %[[A1]], %[[B1]]\n+    // CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // CHECK: ret i1 %[[R]]\n+    Ord::cmp(&a, &b).is_lt()\n+}\n+\n+// CHECK-LABEL: @check_le_via_cmp\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_le_via_cmp(a: TwoTuple, b: TwoTuple) -> bool {\n+    // FIXME-CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // FIXME-CHECK-DAG: %[[CMP0:.+]] = icmp sle i16 %[[A0]], %[[B0]]\n+    // FIXME-CHECK-DAG: %[[CMP1:.+]] = icmp ule i16 %[[A1]], %[[B1]]\n+    // FIXME-CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // FIXME-CHECK: ret i1 %[[R]]\n+    Ord::cmp(&a, &b).is_le()\n+}\n+\n+// CHECK-LABEL: @check_gt_via_cmp\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_gt_via_cmp(a: TwoTuple, b: TwoTuple) -> bool {\n+    // FIXME-CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // FIXME-CHECK-DAG: %[[CMP0:.+]] = icmp sgt i16 %[[A0]], %[[B0]]\n+    // FIXME-CHECK-DAG: %[[CMP1:.+]] = icmp ugt i16 %[[A1]], %[[B1]]\n+    // FIXME-CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // FIXME-CHECK: ret i1 %[[R]]\n+    Ord::cmp(&a, &b).is_gt()\n+}\n+\n+// CHECK-LABEL: @check_ge_via_cmp\n+// CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n+#[no_mangle]\n+pub fn check_ge_via_cmp(a: TwoTuple, b: TwoTuple) -> bool {\n+    // FIXME-CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n+    // FIXME-CHECK-DAG: %[[CMP0:.+]] = icmp sge i16 %[[A0]], %[[B0]]\n+    // FIXME-CHECK-DAG: %[[CMP1:.+]] = icmp uge i16 %[[A1]], %[[B1]]\n+    // FIXME-CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n+    // FIXME-CHECK: ret i1 %[[R]]\n+    Ord::cmp(&a, &b).is_ge()\n+}"}]}