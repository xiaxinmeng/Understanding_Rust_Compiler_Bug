{"sha": "9f8f994ad9cc996b304a90e5ca7c1d894c7eff4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmOGY5OTRhZDljYzk5NmIzMDRhOTBlNWNhN2MxZDg5NGM3ZWZmNGQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-18T22:20:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-18T22:20:59Z"}, "message": "Rollup merge of #73425 - poliorcetics:zeroed-functions-pointers, r=dtolnay\n\nMention functions pointers in the documentation\n\nFixes #51615.\n\nThis mentions function pointers in the documentation for `core::mem::zeroed`, adding them to the list of types that are **always** wrong when zeroed, with `&T` and `&mut T`.\n\n@rustbot modify labels: T-doc, C-enhancement, T-libs", "tree": {"sha": "d2a4d34bcd2b070dcbb34d59de68cb97ea67b287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2a4d34bcd2b070dcbb34d59de68cb97ea67b287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f8f994ad9cc996b304a90e5ca7c1d894c7eff4d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe6+jLCRBK7hj4Ov3rIwAAdHIIAHRLyZwOMNyTRt7ShguhVHo2\nTg04DOhdTjQYjNLkBirz9AV+ClvdwujEK05RNIncpwiex3MI1SH1NKr+WT+wlsbj\neilEE8YpJSFGZyK/rjDbBXLaXWB2tnvwjNwx6fU6xHb9g72m3MK0Xi/Ie3l+O5RH\nJGImoCYgUAdE3VevtM6f7UWkSkhke5HmoR5WWd9JzkLx/fz16i2ThW4Fvplq2p49\nX7lib1zFICe/4F2J/oEWIzyYexbbIPaShaR4ZFzeTUcEq5T9+nFv8/yV1TZUWmyM\n1ZbzBIUldGUsROnSXRhrNXj/VVOKgAzvXhWwJr8i0atFKVLZYYM6rjWqNyqxjAg=\n=dlmE\n-----END PGP SIGNATURE-----\n", "payload": "tree d2a4d34bcd2b070dcbb34d59de68cb97ea67b287\nparent 9ca811772c2fddefeda4567cdfb8c790c94e0085\nparent 2da9ca72bcdc6b67fbacf26d9245da367089a113\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592518859 -0700\ncommitter GitHub <noreply@github.com> 1592518859 -0700\n\nRollup merge of #73425 - poliorcetics:zeroed-functions-pointers, r=dtolnay\n\nMention functions pointers in the documentation\n\nFixes #51615.\n\nThis mentions function pointers in the documentation for `core::mem::zeroed`, adding them to the list of types that are **always** wrong when zeroed, with `&T` and `&mut T`.\n\n@rustbot modify labels: T-doc, C-enhancement, T-libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8f994ad9cc996b304a90e5ca7c1d894c7eff4d", "html_url": "https://github.com/rust-lang/rust/commit/9f8f994ad9cc996b304a90e5ca7c1d894c7eff4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f8f994ad9cc996b304a90e5ca7c1d894c7eff4d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ca811772c2fddefeda4567cdfb8c790c94e0085", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ca811772c2fddefeda4567cdfb8c790c94e0085", "html_url": "https://github.com/rust-lang/rust/commit/9ca811772c2fddefeda4567cdfb8c790c94e0085"}, {"sha": "2da9ca72bcdc6b67fbacf26d9245da367089a113", "url": "https://api.github.com/repos/rust-lang/rust/commits/2da9ca72bcdc6b67fbacf26d9245da367089a113", "html_url": "https://github.com/rust-lang/rust/commit/2da9ca72bcdc6b67fbacf26d9245da367089a113"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "066bb8b3dc787a40ec00d36d7883dbcffb7a9ad6", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f8f994ad9cc996b304a90e5ca7c1d894c7eff4d/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8f994ad9cc996b304a90e5ca7c1d894c7eff4d/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=9f8f994ad9cc996b304a90e5ca7c1d894c7eff4d", "patch": "@@ -581,11 +581,12 @@ pub const fn needs_drop<T>() -> bool {\n /// This means that, for example, the padding byte in `(u8, u16)` is not\n /// necessarily zeroed.\n ///\n-/// There is no guarantee that an all-zero byte-pattern represents a valid value of\n-/// some type `T`. For example, the all-zero byte-pattern is not a valid value\n-/// for reference types (`&T` and `&mut T`). Using `zeroed` on such types\n-/// causes immediate [undefined behavior][ub] because [the Rust compiler assumes][inv]\n-/// that there always is a valid value in a variable it considers initialized.\n+/// There is no guarantee that an all-zero byte-pattern represents a valid value\n+/// of some type `T`. For example, the all-zero byte-pattern is not a valid value\n+/// for reference types (`&T`, `&mut T`) and functions pointers. Using `zeroed`\n+/// on such types causes immediate [undefined behavior][ub] because [the Rust\n+/// compiler assumes][inv] that there always is a valid value in a variable it\n+/// considers initialized.\n ///\n /// This has the same effect as [`MaybeUninit::zeroed().assume_init()`][zeroed].\n /// It is useful for FFI sometimes, but should generally be avoided.\n@@ -612,6 +613,7 @@ pub const fn needs_drop<T>() -> bool {\n /// use std::mem;\n ///\n /// let _x: &i32 = unsafe { mem::zeroed() }; // Undefined behavior!\n+/// let _y: fn() = unsafe { mem::zeroed() }; // And again!\n /// ```\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}