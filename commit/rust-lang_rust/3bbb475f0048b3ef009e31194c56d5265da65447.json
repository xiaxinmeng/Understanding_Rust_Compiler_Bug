{"sha": "3bbb475f0048b3ef009e31194c56d5265da65447", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYmI0NzVmMDA0OGIzZWYwMDllMzExOTRjNTZkNTI2NWRhNjU0NDc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-31T10:03:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-31T10:03:22Z"}, "message": "Rollup merge of #72683 - RalfJung:char-debug-check, r=Mark-Simulacrum\n\nfrom_u32_unchecked: check validity, and fix UB in Wtf8\n\nFixes https://github.com/rust-lang/rust/issues/72760", "tree": {"sha": "1a5500915564ff8a21c46c280bcf45ed442e840f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a5500915564ff8a21c46c280bcf45ed442e840f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bbb475f0048b3ef009e31194c56d5265da65447", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe04DrCRBK7hj4Ov3rIwAAdHIIAKlM0LZBHEWrFzqhicGt1bCP\nas3QS1B0fM/zAMA3lKjeleyemY/jpP0QZX6ij3vfCpw1ZLI8QP3jNrp71dfemEZk\nj9Tx+y8lLPUG/c4JmnToVJ2jgCGo3x/AXyULDFbiko5N6qIwlCTYj1Cs623+jPYG\nG9d4QUl5X4D26y44E3KCTGrpvmDbx1TiKmhzQndSEBCP0DosonLavvZOTUIFFW6o\nL0IIZ4xXvGTfUnb82kJ0+2WhCa2K2xiSun7Bpud1KSqxWIL4r8N9zgBo0KtQ3xf/\nIIA6NSB+MPaOo3aXZdKMZkBon30kOFo9rbWI8K5yJZ16ughSM8cfAtsve2ocgJA=\n=BchZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 1a5500915564ff8a21c46c280bcf45ed442e840f\nparent b6fa392238a459c29a47e2cf824d79a49a8ba039\nparent 0fb6e63c0438ace4ad9d496376af955c0baacf04\nauthor Ralf Jung <post@ralfj.de> 1590919402 +0200\ncommitter GitHub <noreply@github.com> 1590919402 +0200\n\nRollup merge of #72683 - RalfJung:char-debug-check, r=Mark-Simulacrum\n\nfrom_u32_unchecked: check validity, and fix UB in Wtf8\n\nFixes https://github.com/rust-lang/rust/issues/72760\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bbb475f0048b3ef009e31194c56d5265da65447", "html_url": "https://github.com/rust-lang/rust/commit/3bbb475f0048b3ef009e31194c56d5265da65447", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bbb475f0048b3ef009e31194c56d5265da65447/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6fa392238a459c29a47e2cf824d79a49a8ba039", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6fa392238a459c29a47e2cf824d79a49a8ba039", "html_url": "https://github.com/rust-lang/rust/commit/b6fa392238a459c29a47e2cf824d79a49a8ba039"}, {"sha": "0fb6e63c0438ace4ad9d496376af955c0baacf04", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb6e63c0438ace4ad9d496376af955c0baacf04", "html_url": "https://github.com/rust-lang/rust/commit/0fb6e63c0438ace4ad9d496376af955c0baacf04"}], "stats": {"total": 180, "additions": 112, "deletions": 68}, "files": [{"sha": "87c56c4b0a1059b50bf5cf22577536196500e4b5", "filename": "src/libcore/char/convert.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bbb475f0048b3ef009e31194c56d5265da65447/src%2Flibcore%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bbb475f0048b3ef009e31194c56d5265da65447/src%2Flibcore%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fconvert.rs?ref=3bbb475f0048b3ef009e31194c56d5265da65447", "patch": "@@ -99,7 +99,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n #[inline]\n #[stable(feature = \"char_from_unchecked\", since = \"1.5.0\")]\n pub unsafe fn from_u32_unchecked(i: u32) -> char {\n-    transmute(i)\n+    if cfg!(debug_assertions) { char::from_u32(i).unwrap() } else { transmute(i) }\n }\n \n #[stable(feature = \"char_convert\", since = \"1.13.0\")]\n@@ -218,7 +218,7 @@ impl TryFrom<u32> for char {\n             Err(CharTryFromError(()))\n         } else {\n             // SAFETY: checked that it's a legal unicode value\n-            Ok(unsafe { from_u32_unchecked(i) })\n+            Ok(unsafe { transmute(i) })\n         }\n     }\n }"}, {"sha": "bf09b28ff693e1430aea78d31360c825b25901c4", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 101, "deletions": 62, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/3bbb475f0048b3ef009e31194c56d5265da65447/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bbb475f0048b3ef009e31194c56d5265da65447/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=3bbb475f0048b3ef009e31194c56d5265da65447", "patch": "@@ -593,16 +593,7 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn len_utf8(self) -> usize {\n-        let code = self as u32;\n-        if code < MAX_ONE_B {\n-            1\n-        } else if code < MAX_TWO_B {\n-            2\n-        } else if code < MAX_THREE_B {\n-            3\n-        } else {\n-            4\n-        }\n+        len_utf8(self as u32)\n     }\n \n     /// Returns the number of 16-bit code units this `char` would need if\n@@ -670,36 +661,8 @@ impl char {\n     #[stable(feature = \"unicode_encode_char\", since = \"1.15.0\")]\n     #[inline]\n     pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {\n-        let code = self as u32;\n-        let len = self.len_utf8();\n-        match (len, &mut dst[..]) {\n-            (1, [a, ..]) => {\n-                *a = code as u8;\n-            }\n-            (2, [a, b, ..]) => {\n-                *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;\n-                *b = (code & 0x3F) as u8 | TAG_CONT;\n-            }\n-            (3, [a, b, c, ..]) => {\n-                *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;\n-                *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n-                *c = (code & 0x3F) as u8 | TAG_CONT;\n-            }\n-            (4, [a, b, c, d, ..]) => {\n-                *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;\n-                *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;\n-                *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n-                *d = (code & 0x3F) as u8 | TAG_CONT;\n-            }\n-            _ => panic!(\n-                \"encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}\",\n-                len,\n-                code,\n-                dst.len(),\n-            ),\n-        };\n-        // SAFETY: We just wrote UTF-8 content in, so converting to str is fine.\n-        unsafe { from_utf8_unchecked_mut(&mut dst[..len]) }\n+        // SAFETY: `char` is not a surrogate, so this is valid UTF-8.\n+        unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }\n     }\n \n     /// Encodes this character as UTF-16 into the provided `u16` buffer,\n@@ -739,28 +702,7 @@ impl char {\n     #[stable(feature = \"unicode_encode_char\", since = \"1.15.0\")]\n     #[inline]\n     pub fn encode_utf16(self, dst: &mut [u16]) -> &mut [u16] {\n-        let mut code = self as u32;\n-        // SAFETY: each arm checks whether there are enough bits to write into\n-        unsafe {\n-            if (code & 0xFFFF) == code && !dst.is_empty() {\n-                // The BMP falls through (assuming non-surrogate, as it should)\n-                *dst.get_unchecked_mut(0) = code as u16;\n-                slice::from_raw_parts_mut(dst.as_mut_ptr(), 1)\n-            } else if dst.len() >= 2 {\n-                // Supplementary planes break into surrogates.\n-                code -= 0x1_0000;\n-                *dst.get_unchecked_mut(0) = 0xD800 | ((code >> 10) as u16);\n-                *dst.get_unchecked_mut(1) = 0xDC00 | ((code as u16) & 0x3FF);\n-                slice::from_raw_parts_mut(dst.as_mut_ptr(), 2)\n-            } else {\n-                panic!(\n-                    \"encode_utf16: need {} units to encode U+{:X}, but the buffer has {}\",\n-                    from_u32_unchecked(code).len_utf16(),\n-                    code,\n-                    dst.len(),\n-                )\n-            }\n-        }\n+        encode_utf16_raw(self as u32, dst)\n     }\n \n     /// Returns `true` if this `char` has the `Alphabetic` property.\n@@ -1673,3 +1615,100 @@ impl char {\n         }\n     }\n }\n+\n+#[inline]\n+fn len_utf8(code: u32) -> usize {\n+    if code < MAX_ONE_B {\n+        1\n+    } else if code < MAX_TWO_B {\n+        2\n+    } else if code < MAX_THREE_B {\n+        3\n+    } else {\n+        4\n+    }\n+}\n+\n+/// Encodes a raw u32 value as UTF-8 into the provided byte buffer,\n+/// and then returns the subslice of the buffer that contains the encoded character.\n+///\n+/// Unlike `char::encode_utf8`, this method also handles codepoints in the surrogate range.\n+/// (Creating a `char` in the surrogate range is UB.)\n+/// The result is valid [generalized UTF-8] but not valid UTF-8.\n+///\n+/// [generalized UTF-8]: https://simonsapin.github.io/wtf-8/#generalized-utf8\n+///\n+/// # Panics\n+///\n+/// Panics if the buffer is not large enough.\n+/// A buffer of length four is large enough to encode any `char`.\n+#[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n+#[doc(hidden)]\n+#[inline]\n+pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {\n+    let len = len_utf8(code);\n+    match (len, &mut dst[..]) {\n+        (1, [a, ..]) => {\n+            *a = code as u8;\n+        }\n+        (2, [a, b, ..]) => {\n+            *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;\n+            *b = (code & 0x3F) as u8 | TAG_CONT;\n+        }\n+        (3, [a, b, c, ..]) => {\n+            *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;\n+            *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n+            *c = (code & 0x3F) as u8 | TAG_CONT;\n+        }\n+        (4, [a, b, c, d, ..]) => {\n+            *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;\n+            *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;\n+            *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;\n+            *d = (code & 0x3F) as u8 | TAG_CONT;\n+        }\n+        _ => panic!(\n+            \"encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}\",\n+            len,\n+            code,\n+            dst.len(),\n+        ),\n+    };\n+    &mut dst[..len]\n+}\n+\n+/// Encodes a raw u32 value as UTF-16 into the provided `u16` buffer,\n+/// and then returns the subslice of the buffer that contains the encoded character.\n+///\n+/// Unlike `char::encode_utf16`, this method also handles codepoints in the surrogate range.\n+/// (Creating a `char` in the surrogate range is UB.)\n+///\n+/// # Panics\n+///\n+/// Panics if the buffer is not large enough.\n+/// A buffer of length 2 is large enough to encode any `char`.\n+#[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n+#[doc(hidden)]\n+#[inline]\n+pub fn encode_utf16_raw(mut code: u32, dst: &mut [u16]) -> &mut [u16] {\n+    // SAFETY: each arm checks whether there are enough bits to write into\n+    unsafe {\n+        if (code & 0xFFFF) == code && !dst.is_empty() {\n+            // The BMP falls through\n+            *dst.get_unchecked_mut(0) = code as u16;\n+            slice::from_raw_parts_mut(dst.as_mut_ptr(), 1)\n+        } else if dst.len() >= 2 {\n+            // Supplementary planes break into surrogates.\n+            code -= 0x1_0000;\n+            *dst.get_unchecked_mut(0) = 0xD800 | ((code >> 10) as u16);\n+            *dst.get_unchecked_mut(1) = 0xDC00 | ((code as u16) & 0x3FF);\n+            slice::from_raw_parts_mut(dst.as_mut_ptr(), 2)\n+        } else {\n+            panic!(\n+                \"encode_utf16: need {} units to encode U+{:X}, but the buffer has {}\",\n+                from_u32_unchecked(code).len_utf16(),\n+                code,\n+                dst.len(),\n+            )\n+        }\n+    }\n+}"}, {"sha": "1b4e906e4e47523615759379f91b63c7636db132", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bbb475f0048b3ef009e31194c56d5265da65447/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bbb475f0048b3ef009e31194c56d5265da65447/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=3bbb475f0048b3ef009e31194c56d5265da65447", "patch": "@@ -37,6 +37,12 @@ pub use self::decode::{decode_utf16, DecodeUtf16, DecodeUtf16Error};\n #[stable(feature = \"unicode_version\", since = \"1.45.0\")]\n pub use crate::unicode::UNICODE_VERSION;\n \n+// perma-unstable re-exports\n+#[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n+pub use self::methods::encode_utf16_raw;\n+#[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n+pub use self::methods::encode_utf8_raw;\n+\n use crate::fmt::{self, Write};\n use crate::iter::FusedIterator;\n "}, {"sha": "d6493454db591a2ad8cc15b398f628c39ec318ca", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bbb475f0048b3ef009e31194c56d5265da65447/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bbb475f0048b3ef009e31194c56d5265da65447/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=3bbb475f0048b3ef009e31194c56d5265da65447", "patch": "@@ -247,6 +247,7 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]\n+#![feature(char_internals)]\n #![feature(clamp)]\n #![feature(concat_idents)]\n #![feature(const_cstr_unchecked)]"}, {"sha": "bdb6a05464ed472b20b5b637963030271fe1bac1", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bbb475f0048b3ef009e31194c56d5265da65447/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bbb475f0048b3ef009e31194c56d5265da65447/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=3bbb475f0048b3ef009e31194c56d5265da65447", "patch": "@@ -201,9 +201,8 @@ impl Wtf8Buf {\n     /// Copied from String::push\n     /// This does **not** include the WTF-8 concatenation check.\n     fn push_code_point_unchecked(&mut self, code_point: CodePoint) {\n-        let c = unsafe { char::from_u32_unchecked(code_point.value) };\n         let mut bytes = [0; 4];\n-        let bytes = c.encode_utf8(&mut bytes).as_bytes();\n+        let bytes = char::encode_utf8_raw(code_point.value, &mut bytes);\n         self.bytes.extend_from_slice(bytes)\n     }\n \n@@ -840,8 +839,7 @@ impl<'a> Iterator for EncodeWide<'a> {\n \n         let mut buf = [0; 2];\n         self.code_points.next().map(|code_point| {\n-            let c = unsafe { char::from_u32_unchecked(code_point.value) };\n-            let n = c.encode_utf16(&mut buf).len();\n+            let n = char::encode_utf16_raw(code_point.value, &mut buf).len();\n             if n == 2 {\n                 self.extra = buf[1];\n             }"}]}