{"sha": "3a1b3b30c6cdd674049b144a3ced7b711de962b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMWIzYjMwYzZjZGQ2NzQwNDliMTQ0YTNjZWQ3YjcxMWRlOTYyYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-05T12:46:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-05T12:46:29Z"}, "message": "Auto merge of #66083 - RalfJung:miri-offset-from, r=oli-obk\n\nfix Miri offset_from\n\nThis is needed to make https://github.com/rust-lang/miri/pull/1032 pass.", "tree": {"sha": "b28aa0b22f11b2adc83b52c6eea06fc63236ed18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b28aa0b22f11b2adc83b52c6eea06fc63236ed18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a1b3b30c6cdd674049b144a3ced7b711de962b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1b3b30c6cdd674049b144a3ced7b711de962b2", "html_url": "https://github.com/rust-lang/rust/commit/3a1b3b30c6cdd674049b144a3ced7b711de962b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a1b3b30c6cdd674049b144a3ced7b711de962b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1fff4a4b213b3341c1ff994061b7965a5932c70", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1fff4a4b213b3341c1ff994061b7965a5932c70", "html_url": "https://github.com/rust-lang/rust/commit/d1fff4a4b213b3341c1ff994061b7965a5932c70"}, {"sha": "a593b5419901774c134e18433452c4dd5f7ff648", "url": "https://api.github.com/repos/rust-lang/rust/commits/a593b5419901774c134e18433452c4dd5f7ff648", "html_url": "https://github.com/rust-lang/rust/commit/a593b5419901774c134e18433452c4dd5f7ff648"}], "stats": {"total": 96, "additions": 85, "deletions": 11}, "files": [{"sha": "04032847385e9aaaceba08fe18f0dbb169f6aa2e", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3a1b3b30c6cdd674049b144a3ced7b711de962b2/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1b3b30c6cdd674049b144a3ced7b711de962b2/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=3a1b3b30c6cdd674049b144a3ced7b711de962b2", "patch": "@@ -251,8 +251,28 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             \"ptr_offset_from\" => {\n-                let a = self.read_immediate(args[0])?.to_scalar()?.to_ptr()?;\n-                let b = self.read_immediate(args[1])?.to_scalar()?.to_ptr()?;\n+                let isize_layout = self.layout_of(self.tcx.types.isize)?;\n+                let a = self.read_immediate(args[0])?.to_scalar()?;\n+                let b = self.read_immediate(args[1])?.to_scalar()?;\n+\n+                // Special case: if both scalars are *equal integers*\n+                // and not NULL, we pretend there is an allocation of size 0 right there,\n+                // and their offset is 0. (There's never a valid object at NULL, making it an\n+                // exception from the exception.)\n+                // This is the dual to the special exception for offset-by-0\n+                // in the inbounds pointer offset operation (see the Miri code, `src/operator.rs`).\n+                if a.is_bits() && b.is_bits() {\n+                    let a = a.to_usize(self)?;\n+                    let b = b.to_usize(self)?;\n+                    if a == b && a != 0 {\n+                        self.write_scalar(Scalar::from_int(0, isize_layout.size), dest)?;\n+                        return Ok(true);\n+                    }\n+                }\n+\n+                // General case: we need two pointers.\n+                let a = self.force_ptr(a)?;\n+                let b = self.force_ptr(b)?;\n                 if a.alloc_id != b.alloc_id {\n                     throw_ub_format!(\n                         \"ptr_offset_from cannot compute offset of pointers into different \\\n@@ -266,7 +286,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     BinOp::Sub, a_offset, b_offset,\n                 )?;\n                 let pointee_layout = self.layout_of(substs.type_at(0))?;\n-                let isize_layout = self.layout_of(self.tcx.types.isize)?;\n                 let val = ImmTy::from_scalar(val, isize_layout);\n                 let size = ImmTy::from_int(pointee_layout.size.bytes(), isize_layout);\n                 self.exact_div(val, size, dest)?;"}, {"sha": "8c1b27842628d991d1a709cd7fffb3e1498de9d5", "filename": "src/test/ui/consts/offset_from.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a1b3b30c6cdd674049b144a3ced7b711de962b2/src%2Ftest%2Fui%2Fconsts%2Foffset_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1b3b30c6cdd674049b144a3ced7b711de962b2/src%2Ftest%2Fui%2Fconsts%2Foffset_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from.rs?ref=3a1b3b30c6cdd674049b144a3ced7b711de962b2", "patch": "@@ -40,8 +40,14 @@ pub const OVERFLOW: isize = {\n     unsafe { (base_ptr as *const u8).offset_from(field_ptr) }\n };\n \n+pub const OFFSET_EQUAL_INTS: isize = {\n+    let ptr = 1 as *const u8;\n+    unsafe { ptr.offset_from(ptr) }\n+};\n+\n fn main() {\n     assert_eq!(OFFSET, 0);\n     assert_eq!(OFFSET_2, 1);\n     assert_eq!(OVERFLOW, -1);\n+    assert_eq!(OFFSET_EQUAL_INTS, 0);\n }"}, {"sha": "c9030915620a8052c332ffb1f545fd9b08b6637e", "filename": "src/test/ui/consts/offset_from_ub.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a1b3b30c6cdd674049b144a3ced7b711de962b2/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1b3b30c6cdd674049b144a3ced7b711de962b2/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs?ref=3a1b3b30c6cdd674049b144a3ced7b711de962b2", "patch": "@@ -25,13 +25,25 @@ pub const NOT_PTR: usize = {\n     unsafe { (42 as *const u8).offset_from(&5u8) as usize }\n };\n \n-pub const NOT_MULTIPLE_OF_SIZE: usize = {\n+pub const NOT_MULTIPLE_OF_SIZE: isize = {\n     //~^ NOTE\n     let data = [5u8, 6, 7];\n     let base_ptr = data.as_ptr();\n     let field_ptr = &data[1] as *const u8 as *const u16;\n-    let offset = unsafe { field_ptr.offset_from(base_ptr as *const u16) };\n-    offset as usize\n+    unsafe { field_ptr.offset_from(base_ptr as *const u16) }\n+};\n+\n+pub const OFFSET_FROM_NULL: isize = {\n+    //~^ NOTE\n+    let ptr = 0 as *const u8;\n+    unsafe { ptr.offset_from(ptr) }\n+};\n+\n+pub const DIFFERENT_INT: isize = { // offset_from with two different integers: like DIFFERENT_ALLOC\n+    //~^ NOTE\n+    let ptr1 = 8 as *const u8;\n+    let ptr2 = 16 as *const u8;\n+    unsafe { ptr2.offset_from(ptr1) }\n };\n \n fn main() {}"}, {"sha": "1bd09034bfc91978f479cf10c6dcf923e484828c", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 42, "deletions": 5, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3a1b3b30c6cdd674049b144a3ced7b711de962b2/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a1b3b30c6cdd674049b144a3ced7b711de962b2/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=3a1b3b30c6cdd674049b144a3ced7b711de962b2", "patch": "@@ -44,18 +44,55 @@ LL |           intrinsics::ptr_offset_from(self, origin)\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |           |\n    |           exact_div: 1 cannot be divided by 2 without remainder\n-   |           inside call to `std::ptr::<impl *const u16>::offset_from` at $DIR/offset_from_ub.rs:33:27\n+   |           inside call to `std::ptr::<impl *const u16>::offset_from` at $DIR/offset_from_ub.rs:33:14\n    | \n   ::: $DIR/offset_from_ub.rs:28:1\n    |\n-LL | / pub const NOT_MULTIPLE_OF_SIZE: usize = {\n+LL | / pub const NOT_MULTIPLE_OF_SIZE: isize = {\n LL | |\n LL | |     let data = [5u8, 6, 7];\n LL | |     let base_ptr = data.as_ptr();\n-...  |\n-LL | |     offset as usize\n+LL | |     let field_ptr = &data[1] as *const u8 as *const u16;\n+LL | |     unsafe { field_ptr.offset_from(base_ptr as *const u16) }\n+LL | | };\n+   | |__-\n+\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+   |\n+LL |           intrinsics::ptr_offset_from(self, origin)\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |           |\n+   |           invalid use of NULL pointer\n+   |           inside call to `std::ptr::<impl *const u8>::offset_from` at $DIR/offset_from_ub.rs:39:14\n+   | \n+  ::: $DIR/offset_from_ub.rs:36:1\n+   |\n+LL | / pub const OFFSET_FROM_NULL: isize = {\n+LL | |\n+LL | |     let ptr = 0 as *const u8;\n+LL | |     unsafe { ptr.offset_from(ptr) }\n+LL | | };\n+   | |__-\n+\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+   |\n+LL |           intrinsics::ptr_offset_from(self, origin)\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |           |\n+   |           a memory access tried to interpret some bytes as a pointer\n+   |           inside call to `std::ptr::<impl *const u8>::offset_from` at $DIR/offset_from_ub.rs:46:14\n+   | \n+  ::: $DIR/offset_from_ub.rs:42:1\n+   |\n+LL | / pub const DIFFERENT_INT: isize = { // offset_from with two different integers: like DIFFERENT_ALLOC\n+LL | |\n+LL | |     let ptr1 = 8 as *const u8;\n+LL | |     let ptr2 = 16 as *const u8;\n+LL | |     unsafe { ptr2.offset_from(ptr1) }\n LL | | };\n    | |__-\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n "}]}