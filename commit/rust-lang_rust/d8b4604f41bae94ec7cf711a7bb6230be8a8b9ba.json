{"sha": "d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YjQ2MDRmNDFiYWU5NGVjN2NmNzExYTdiYjYyMzBiZThhOGI5YmE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-23T20:10:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-23T20:10:13Z"}, "message": "Rollup merge of #73613 - oli-obk:const_prop_miscompile, r=wesleywiser\n\nThe const propagator cannot trace references.\n\nThus we avoid propagation of a local the moment we encounter references to it.\n\nfixes #73609\n\ncc @RalfJung\n\nr? @wesleywiser", "tree": {"sha": "26d141b105355af1cf082324c056ecd62da2fc78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26d141b105355af1cf082324c056ecd62da2fc78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8mGlCRBK7hj4Ov3rIwAAdHIIAEj3u4C68kkaS/dgdzNyM0sZ\n5B/YAho5BZ6j7zhIldcqDwFM4yJCqIk06A9aLiedIswcKoncUZqPj2oC5+eG41uN\nk4qII8HtpsCxgqE8h3plYZJ6TXrnGXK5ShqkmYRqcXrjnx8/ui+sF0ZtkEMc/8MC\nPOvEC76mwTTCrzVOdJCZCoNXGNK9cHMRhhoMlTlUCGaQIIiw7o0k2M7nSgwhJ2bR\nJwzaD2KPFmx8FTLMcDLBlVm0OY2gbCrm+ASD84TeBaFm5hzC+8p4BWRM0U1Lfdjq\ns/uMARgjgqoYyyf3f0vVTVAySpDF80MZhaeczlQC5j7bzKSsDHTjvbU1AO/IqQ0=\n=7l7I\n-----END PGP SIGNATURE-----\n", "payload": "tree 26d141b105355af1cf082324c056ecd62da2fc78\nparent 30fba22a9bef7c9b15dd9e15657135c1b7d6d1a9\nparent 5fa8b0880825d83eb01151e43e7de1e94e05cd2d\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592943013 -0700\ncommitter GitHub <noreply@github.com> 1592943013 -0700\n\nRollup merge of #73613 - oli-obk:const_prop_miscompile, r=wesleywiser\n\nThe const propagator cannot trace references.\n\nThus we avoid propagation of a local the moment we encounter references to it.\n\nfixes #73609\n\ncc @RalfJung\n\nr? @wesleywiser\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba", "html_url": "https://github.com/rust-lang/rust/commit/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30fba22a9bef7c9b15dd9e15657135c1b7d6d1a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/30fba22a9bef7c9b15dd9e15657135c1b7d6d1a9", "html_url": "https://github.com/rust-lang/rust/commit/30fba22a9bef7c9b15dd9e15657135c1b7d6d1a9"}, {"sha": "5fa8b0880825d83eb01151e43e7de1e94e05cd2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa8b0880825d83eb01151e43e7de1e94e05cd2d", "html_url": "https://github.com/rust-lang/rust/commit/5fa8b0880825d83eb01151e43e7de1e94e05cd2d"}], "stats": {"total": 260, "additions": 204, "deletions": 56}, "files": [{"sha": "eb614170baae5b943ea781159d052d4341388b85", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba", "patch": "@@ -574,8 +574,16 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             }\n \n             // Do not try creating references (#67862)\n-            Rvalue::Ref(_, _, place_ref) => {\n-                trace!(\"skipping Ref({:?})\", place_ref);\n+            Rvalue::AddressOf(_, place) | Rvalue::Ref(_, _, place) => {\n+                trace!(\"skipping AddressOf | Ref for {:?}\", place);\n+\n+                // This may be creating mutable references or immutable references to cells.\n+                // If that happens, the pointed to value could be mutated via that reference.\n+                // Since we aren't tracking references, the const propagator loses track of what\n+                // value the local has right now.\n+                // Thus, all locals that have their reference taken\n+                // must not take part in propagation.\n+                Self::remove_const(&mut self.ecx, place.local);\n \n                 return None;\n             }\n@@ -715,6 +723,9 @@ enum ConstPropMode {\n     OnlyInsideOwnBlock,\n     /// The `Local` can be propagated into but reads cannot be propagated.\n     OnlyPropagateInto,\n+    /// The `Local` cannot be part of propagation at all. Any statement\n+    /// referencing it either for reading or writing will not get propagated.\n+    NoPropagation,\n }\n \n struct CanConstProp {\n@@ -780,7 +791,9 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n                         // end of the block anyway, and inside the block we overwrite previous\n                         // states as applicable.\n                         ConstPropMode::OnlyInsideOwnBlock => {}\n-                        other => {\n+                        ConstPropMode::NoPropagation => {}\n+                        ConstPropMode::OnlyPropagateInto => {}\n+                        other @ ConstPropMode::FullConstProp => {\n                             trace!(\n                                 \"local {:?} can't be propagated because of multiple assignments\",\n                                 local,\n@@ -812,7 +825,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             | MutatingUse(MutatingUseContext::Borrow)\n             | MutatingUse(MutatingUseContext::AddressOf) => {\n                 trace!(\"local {:?} can't be propagaged because it's used: {:?}\", local, context);\n-                self.can_const_prop[local] = ConstPropMode::OnlyPropagateInto;\n+                self.can_const_prop[local] = ConstPropMode::NoPropagation;\n             }\n         }\n     }\n@@ -857,19 +870,22 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                             }\n                         }\n                     }\n-                    if can_const_prop == ConstPropMode::OnlyInsideOwnBlock {\n-                        trace!(\n-                            \"found local restricted to its block. Will remove it from const-prop after block is finished. Local: {:?}\",\n-                            place.local\n-                        );\n-                        self.locals_of_current_block.insert(place.local);\n-                    }\n-\n-                    if can_const_prop == ConstPropMode::OnlyPropagateInto {\n-                        trace!(\"can't propagate into {:?}\", place);\n-                        if place.local != RETURN_PLACE {\n-                            Self::remove_const(&mut self.ecx, place.local);\n+                    match can_const_prop {\n+                        ConstPropMode::OnlyInsideOwnBlock => {\n+                            trace!(\n+                                \"found local restricted to its block. \\\n+                                Will remove it from const-prop after block is finished. Local: {:?}\",\n+                                place.local\n+                            );\n+                            self.locals_of_current_block.insert(place.local);\n                         }\n+                        ConstPropMode::OnlyPropagateInto | ConstPropMode::NoPropagation => {\n+                            trace!(\"can't propagate into {:?}\", place);\n+                            if place.local != RETURN_PLACE {\n+                                Self::remove_const(&mut self.ecx, place.local);\n+                            }\n+                        }\n+                        ConstPropMode::FullConstProp => {}\n                     }\n                 } else {\n                     // Const prop failed, so erase the destination, ensuring that whatever happens\n@@ -889,6 +905,12 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                     );\n                     Self::remove_const(&mut self.ecx, place.local);\n                 }\n+            } else {\n+                trace!(\n+                    \"cannot propagate into {:?}, because the type of the local is generic.\",\n+                    place,\n+                );\n+                Self::remove_const(&mut self.ecx, place.local);\n             }\n         } else {\n             match statement.kind {"}, {"sha": "7ceec94d81e762ee32c19c428f6be95179eb9f7a", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff?ref=d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba", "patch": "@@ -46,22 +46,8 @@\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n--         _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n--         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+         _7 = const 3usize;               // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x00000003))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n-+         _8 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+          _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n           assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n       }\n   "}, {"sha": "483a6f232ef79677a0b2b7e31425a61d3b80f6bf", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff?ref=d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba", "patch": "@@ -46,22 +46,8 @@\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n--         _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n--         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+         _7 = const 3usize;               // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // ty::Const\n-+                                          // + ty: usize\n-+                                          // + val: Value(Scalar(0x0000000000000003))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n-+         _8 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x00))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+          _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+          _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n           assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n       }\n   "}, {"sha": "043b22870f49e047180b00fc363e8c3cb1f0787d", "filename": "src/test/mir-opt/const_prop_miscompile.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.rs?ref=d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba", "patch": "@@ -0,0 +1,22 @@\n+#![feature(raw_ref_op)]\n+\n+// EMIT_MIR rustc.foo.ConstProp.diff\n+fn foo() {\n+    let mut u = (1,);\n+    *&mut u.0 = 5;\n+    let y = { u.0 } == 5;\n+}\n+\n+// EMIT_MIR rustc.bar.ConstProp.diff\n+fn bar() {\n+    let mut v = (1,);\n+    unsafe {\n+        *&raw mut v.0 = 5;\n+    }\n+    let y = { v.0 } == 5;\n+}\n+\n+fn main() {\n+    foo();\n+    bar();\n+}"}, {"sha": "c87f67bf9f587b5ed1adc05e1d24638a34928a01", "filename": "src/test/mir-opt/const_prop_miscompile/rustc.bar.ConstProp.diff", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile%2Frustc.bar.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile%2Frustc.bar.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile%2Frustc.bar.ConstProp.diff?ref=d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba", "patch": "@@ -0,0 +1,75 @@\n+- // MIR for `bar` before ConstProp\n++ // MIR for `bar` after ConstProp\n+  \n+  fn bar() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_miscompile.rs:11:10: 11:10\n+      let mut _1: (i32,);                  // in scope 0 at $DIR/const_prop_miscompile.rs:12:9: 12:14\n+      let _2: ();                          // in scope 0 at $DIR/const_prop_miscompile.rs:13:5: 15:6\n+      let mut _3: *mut i32;                // in scope 0 at $DIR/const_prop_miscompile.rs:14:10: 14:22\n+      let mut _5: i32;                     // in scope 0 at $DIR/const_prop_miscompile.rs:16:13: 16:20\n+      scope 1 {\n+          debug v => _1;                   // in scope 1 at $DIR/const_prop_miscompile.rs:12:9: 12:14\n+          let _4: bool;                    // in scope 1 at $DIR/const_prop_miscompile.rs:16:9: 16:10\n+          scope 2 {\n+          }\n+          scope 3 {\n+              debug y => _4;               // in scope 3 at $DIR/const_prop_miscompile.rs:16:9: 16:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:12:9: 12:14\n+-         _1 = (const 1i32,);              // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n++         _1 = const (1i32,);              // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n+                                           // ty::Const\n+-                                          // + ty: i32\n++                                          // + ty: (i32,)\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/const_prop_miscompile.rs:12:18: 12:19\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n++                                          // + span: $DIR/const_prop_miscompile.rs:12:17: 12:21\n++                                          // + literal: Const { ty: (i32,), val: Value(Scalar(0x00000001)) }\n+          StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:13:5: 15:6\n+          StorageLive(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:14:10: 14:22\n+          _3 = &raw mut (_1.0: i32);       // scope 2 at $DIR/const_prop_miscompile.rs:14:10: 14:22\n+          (*_3) = const 5i32;              // scope 2 at $DIR/const_prop_miscompile.rs:14:9: 14:26\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000005))\n+                                           // mir::Constant\n+                                           // + span: $DIR/const_prop_miscompile.rs:14:25: 14:26\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n+          StorageDead(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:14:26: 14:27\n+          _2 = const ();                   // scope 2 at $DIR/const_prop_miscompile.rs:13:5: 15:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/const_prop_miscompile.rs:13:5: 15:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:15:5: 15:6\n+          StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:16:9: 16:10\n+          StorageLive(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:16:13: 16:20\n+          _5 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:16:15: 16:18\n+          _4 = Eq(move _5, const 5i32);    // scope 1 at $DIR/const_prop_miscompile.rs:16:13: 16:25\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000005))\n+                                           // mir::Constant\n+                                           // + span: $DIR/const_prop_miscompile.rs:16:24: 16:25\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n+          StorageDead(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:16:24: 16:25\n+          _0 = const ();                   // scope 0 at $DIR/const_prop_miscompile.rs:11:10: 17:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/const_prop_miscompile.rs:11:10: 17:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:17:1: 17:2\n+          StorageDead(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:17:1: 17:2\n+          return;                          // scope 0 at $DIR/const_prop_miscompile.rs:17:2: 17:2\n+      }\n+  }\n+  "}, {"sha": "8a6850d2fe3adaa7611579501650079b34d95364", "filename": "src/test/mir-opt/const_prop_miscompile/rustc.foo.ConstProp.diff", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile%2Frustc.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile%2Frustc.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile%2Frustc.foo.ConstProp.diff?ref=d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba", "patch": "@@ -0,0 +1,63 @@\n+- // MIR for `foo` before ConstProp\n++ // MIR for `foo` after ConstProp\n+  \n+  fn foo() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_miscompile.rs:4:10: 4:10\n+      let mut _1: (i32,);                  // in scope 0 at $DIR/const_prop_miscompile.rs:5:9: 5:14\n+      let mut _2: &mut i32;                // in scope 0 at $DIR/const_prop_miscompile.rs:6:6: 6:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/const_prop_miscompile.rs:7:13: 7:20\n+      scope 1 {\n+          debug u => _1;                   // in scope 1 at $DIR/const_prop_miscompile.rs:5:9: 5:14\n+          let _3: bool;                    // in scope 1 at $DIR/const_prop_miscompile.rs:7:9: 7:10\n+          scope 2 {\n+              debug y => _3;               // in scope 2 at $DIR/const_prop_miscompile.rs:7:9: 7:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:5:9: 5:14\n+-         _1 = (const 1i32,);              // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n++         _1 = const (1i32,);              // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n+                                           // ty::Const\n+-                                          // + ty: i32\n++                                          // + ty: (i32,)\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/const_prop_miscompile.rs:5:18: 5:19\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n++                                          // + span: $DIR/const_prop_miscompile.rs:5:17: 5:21\n++                                          // + literal: Const { ty: (i32,), val: Value(Scalar(0x00000001)) }\n+          StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:6:6: 6:14\n+          _2 = &mut (_1.0: i32);           // scope 1 at $DIR/const_prop_miscompile.rs:6:6: 6:14\n+          (*_2) = const 5i32;              // scope 1 at $DIR/const_prop_miscompile.rs:6:5: 6:18\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000005))\n+                                           // mir::Constant\n+                                           // + span: $DIR/const_prop_miscompile.rs:6:17: 6:18\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n+          StorageDead(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:6:18: 6:19\n+          StorageLive(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:7:9: 7:10\n+          StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:7:13: 7:20\n+          _4 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:7:15: 7:18\n+          _3 = Eq(move _4, const 5i32);    // scope 1 at $DIR/const_prop_miscompile.rs:7:13: 7:25\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000005))\n+                                           // mir::Constant\n+                                           // + span: $DIR/const_prop_miscompile.rs:7:24: 7:25\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n+          StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:7:24: 7:25\n+          _0 = const ();                   // scope 0 at $DIR/const_prop_miscompile.rs:4:10: 8:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/const_prop_miscompile.rs:4:10: 8:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:8:1: 8:2\n+          StorageDead(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:8:1: 8:2\n+          return;                          // scope 0 at $DIR/const_prop_miscompile.rs:8:2: 8:2\n+      }\n+  }\n+  "}, {"sha": "136c03cd9f1bcad4a1b1062f2fdc44515f81ffba", "filename": "src/test/ui/mir/mir_detects_invalid_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Ftest%2Fui%2Fmir%2Fmir_detects_invalid_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Ftest%2Fui%2Fmir%2Fmir_detects_invalid_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_detects_invalid_ops.rs?ref=d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba", "patch": "@@ -19,6 +19,6 @@ fn mod_by_zero() {\n fn oob_error_for_slices() {\n     let a: *const [_] = &[1, 2, 3];\n     unsafe {\n-        let _b = (*a)[3]; //~ ERROR this operation will panic at runtime [unconditional_panic]\n+        let _b = (*a)[3];\n     }\n }"}, {"sha": "0b6dbfd7c3d85f61c00c4f8aad2a1c3ac1c896fb", "filename": "src/test/ui/mir/mir_detects_invalid_ops.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Ftest%2Fui%2Fmir%2Fmir_detects_invalid_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba/src%2Ftest%2Fui%2Fmir%2Fmir_detects_invalid_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_detects_invalid_ops.stderr?ref=d8b4604f41bae94ec7cf711a7bb6230be8a8b9ba", "patch": "@@ -12,11 +12,5 @@ error: this operation will panic at runtime\n LL |     let _z = 1 % y;\n    |              ^^^^^ attempt to calculate the remainder with a divisor of zero\n \n-error: this operation will panic at runtime\n-  --> $DIR/mir_detects_invalid_ops.rs:22:18\n-   |\n-LL |         let _b = (*a)[3];\n-   |                  ^^^^^^^ index out of bounds: the len is 3 but the index is 3\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}]}