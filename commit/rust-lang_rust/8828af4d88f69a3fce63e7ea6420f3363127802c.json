{"sha": "8828af4d88f69a3fce63e7ea6420f3363127802c", "node_id": "C_kwDOAAsO6NoAKDg4MjhhZjRkODhmNjlhM2ZjZTYzZTdlYTY0MjBmMzM2MzEyNzgwMmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-20T17:45:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-20T17:45:10Z"}, "message": "Rollup merge of #99935 - CAD97:unstable-syntax-lints, r=petrochenkov\n\nReenable disabled early syntax gates as future-incompatibility lints\n\n- MCP: https://github.com/rust-lang/compiler-team/issues/535\n\nThe approach taken by this PR is\n\n- Introduce a new lint, `unstable_syntax_pre_expansion`, and reenable the early syntax gates to emit it\n- Use the diagnostic stashing mechanism to stash warnings the early warnings\n- When the hard error occurs post expansion, steal and cancel the early warning\n- Don't display any stashed warnings if errors are present to avoid the same noise problem that hiding type ascription errors is avoiding\n\nCommits are working commits, but in a coherent steps-to-implement manner. Can be squashed if desired.\n\nThe preexisting `soft_unstable` lint seems like it would've been a good fit, but it is deny-by-default (appropriate for `#[bench]`) and these gates should be introduced as warn-by-default.\n\nIt may be desirable to change the stash mechanism's behavior to not flush lint errors in the presence of other errors either (like is done for warnings here), but upgrading a stash-using lint from warn to error perhaps is enough of a request to see the lint that they shouldn't be hidden; additionally, fixing the last error to get new errors thrown at you always feels bad, so if we know the lint errors are present, we should show them.\n\nUsing a new flag/mechanism for a \"weak diagnostic\" which is suppressed by other errors may also be desirable over assuming any stashed warnings are \"weak,\" but this is the first user of stashing warnings and seems an appropriate use of stashing (it follows the \"know more later to refine the diagnostic\" pattern; here we learn that it's in a compiled position) so we get to define what it means to stash a non-hard-error diagnostic.\n\ncc `````@petrochenkov````` (seconded MCP)", "tree": {"sha": "d9395a73d00d8b8881655f26d3728c1ddacc04fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9395a73d00d8b8881655f26d3728c1ddacc04fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8828af4d88f69a3fce63e7ea6420f3363127802c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjAR2mCRBK7hj4Ov3rIwAAcR4IABJRth7A2vy6+IgKg51Dh7V6\n36HzcRy48YNb9jMVX4ga3PMUp26wcoMt05BiRnStbC6Fr2/pRUBN3wfm8NENOOLu\nOwiaRJu1EpeX1CsFKciEUibPRZS4Ij8hA1H7HqBK1lz3tcEHDuEl43qs3/ySWDLf\nEhvW6EzlFQfe7gg/U6LLrkSqTliyo6oyg262C2tbHnsor5EYo7lNp3hDwuEwAA7k\na7qZ42p8q5GS4VG/QoOyk9vItNA2m8mo/Yq5bumBTAAyGqb2dHVaorZOBkEM9ZwS\nt9SOwzZpbMyu8VWjDB9GJrotCwQNjzOxXvjg58OKDqc1DwroyassTDDq5PiuDRE=\n=kt+J\n-----END PGP SIGNATURE-----\n", "payload": "tree d9395a73d00d8b8881655f26d3728c1ddacc04fc\nparent d9789b6903482459ae97114a649b1a53e9b6101a\nparent 944c6b6d760d392552fc60ec4e3ba3ad84598350\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661017510 +0200\ncommitter GitHub <noreply@github.com> 1661017510 +0200\n\nRollup merge of #99935 - CAD97:unstable-syntax-lints, r=petrochenkov\n\nReenable disabled early syntax gates as future-incompatibility lints\n\n- MCP: https://github.com/rust-lang/compiler-team/issues/535\n\nThe approach taken by this PR is\n\n- Introduce a new lint, `unstable_syntax_pre_expansion`, and reenable the early syntax gates to emit it\n- Use the diagnostic stashing mechanism to stash warnings the early warnings\n- When the hard error occurs post expansion, steal and cancel the early warning\n- Don't display any stashed warnings if errors are present to avoid the same noise problem that hiding type ascription errors is avoiding\n\nCommits are working commits, but in a coherent steps-to-implement manner. Can be squashed if desired.\n\nThe preexisting `soft_unstable` lint seems like it would've been a good fit, but it is deny-by-default (appropriate for `#[bench]`) and these gates should be introduced as warn-by-default.\n\nIt may be desirable to change the stash mechanism's behavior to not flush lint errors in the presence of other errors either (like is done for warnings here), but upgrading a stash-using lint from warn to error perhaps is enough of a request to see the lint that they shouldn't be hidden; additionally, fixing the last error to get new errors thrown at you always feels bad, so if we know the lint errors are present, we should show them.\n\nUsing a new flag/mechanism for a \"weak diagnostic\" which is suppressed by other errors may also be desirable over assuming any stashed warnings are \"weak,\" but this is the first user of stashing warnings and seems an appropriate use of stashing (it follows the \"know more later to refine the diagnostic\" pattern; here we learn that it's in a compiled position) so we get to define what it means to stash a non-hard-error diagnostic.\n\ncc `````@petrochenkov````` (seconded MCP)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8828af4d88f69a3fce63e7ea6420f3363127802c", "html_url": "https://github.com/rust-lang/rust/commit/8828af4d88f69a3fce63e7ea6420f3363127802c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8828af4d88f69a3fce63e7ea6420f3363127802c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9789b6903482459ae97114a649b1a53e9b6101a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9789b6903482459ae97114a649b1a53e9b6101a", "html_url": "https://github.com/rust-lang/rust/commit/d9789b6903482459ae97114a649b1a53e9b6101a"}, {"sha": "944c6b6d760d392552fc60ec4e3ba3ad84598350", "url": "https://api.github.com/repos/rust-lang/rust/commits/944c6b6d760d392552fc60ec4e3ba3ad84598350", "html_url": "https://github.com/rust-lang/rust/commit/944c6b6d760d392552fc60ec4e3ba3ad84598350"}], "stats": {"total": 463, "additions": 417, "deletions": 46}, "files": [{"sha": "68fca08101891e24bbe345afbcc6668612813da7", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -2,10 +2,10 @@ use rustc_ast as ast;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::{AssocConstraint, AssocConstraintKind, NodeId};\n use rustc_ast::{PatKind, RangeEnd, VariantData};\n-use rustc_errors::{struct_span_err, Applicability};\n+use rustc_errors::{struct_span_err, Applicability, StashKey};\n+use rustc_feature::Features;\n use rustc_feature::{AttributeGate, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n-use rustc_feature::{Features, GateIssue};\n-use rustc_session::parse::{feature_err, feature_err_issue};\n+use rustc_session::parse::{feature_err, feature_warn};\n use rustc_session::Session;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::sym;\n@@ -20,9 +20,7 @@ macro_rules! gate_feature_fn {\n         let has_feature: bool = has_feature(visitor.features);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", name, span, has_feature);\n         if !has_feature && !span.allows_unstable($name) {\n-            feature_err_issue(&visitor.sess.parse_sess, name, span, GateIssue::Language, explain)\n-                .help(help)\n-                .emit();\n+            feature_err(&visitor.sess.parse_sess, name, span, explain).help(help).emit();\n         }\n     }};\n     ($visitor: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr) => {{\n@@ -31,8 +29,19 @@ macro_rules! gate_feature_fn {\n         let has_feature: bool = has_feature(visitor.features);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", name, span, has_feature);\n         if !has_feature && !span.allows_unstable($name) {\n-            feature_err_issue(&visitor.sess.parse_sess, name, span, GateIssue::Language, explain)\n-                .emit();\n+            feature_err(&visitor.sess.parse_sess, name, span, explain).emit();\n+        }\n+    }};\n+    (future_incompatible; $visitor: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr) => {{\n+        let (visitor, has_feature, span, name, explain) =\n+            (&*$visitor, $has_feature, $span, $name, $explain);\n+        let has_feature: bool = has_feature(visitor.features);\n+        debug!(\n+            \"gate_feature(feature = {:?}, span = {:?}); has? {} (future_incompatible)\",\n+            name, span, has_feature\n+        );\n+        if !has_feature && !span.allows_unstable($name) {\n+            feature_warn(&visitor.sess.parse_sess, name, span, explain);\n         }\n     }};\n }\n@@ -44,6 +53,9 @@ macro_rules! gate_feature_post {\n     ($visitor: expr, $feature: ident, $span: expr, $explain: expr) => {\n         gate_feature_fn!($visitor, |x: &Features| x.$feature, $span, sym::$feature, $explain)\n     };\n+    (future_incompatible; $visitor: expr, $feature: ident, $span: expr, $explain: expr) => {\n+        gate_feature_fn!(future_incompatible; $visitor, |x: &Features| x.$feature, $span, sym::$feature, $explain)\n+    };\n }\n \n pub fn check_attribute(attr: &ast::Attribute, sess: &Session, features: &Features) {\n@@ -588,11 +600,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         {\n             // When we encounter a statement of the form `foo: Ty = val;`, this will emit a type\n             // ascription error, but the likely intention was to write a `let` statement. (#78907).\n-            feature_err_issue(\n+            feature_err(\n                 &self.sess.parse_sess,\n                 sym::type_ascription,\n                 lhs.span,\n-                GateIssue::Language,\n                 \"type ascription is experimental\",\n             ).span_suggestion_verbose(\n                 lhs.span.shrink_to_lo(),\n@@ -615,15 +626,22 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 );\n             }\n             ast::ExprKind::Type(..) => {\n-                // To avoid noise about type ascription in common syntax errors, only emit if it\n-                // is the *only* error.\n                 if self.sess.parse_sess.span_diagnostic.err_count() == 0 {\n+                    // To avoid noise about type ascription in common syntax errors,\n+                    // only emit if it is the *only* error.\n                     gate_feature_post!(\n                         &self,\n                         type_ascription,\n                         e.span,\n                         \"type ascription is experimental\"\n                     );\n+                } else {\n+                    // And if it isn't, cancel the early-pass warning.\n+                    self.sess\n+                        .parse_sess\n+                        .span_diagnostic\n+                        .steal_diagnostic(e.span, StashKey::EarlySyntaxWarning)\n+                        .map(|err| err.cancel());\n                 }\n             }\n             ast::ExprKind::TryBlock(_) => {\n@@ -789,14 +807,12 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded).\n+    // We emit an early future-incompatible warning for these.\n+    // New syntax gates should go above here to get a hard error gate.\n     macro_rules! gate_all {\n         ($gate:ident, $msg:literal) => {\n-            // FIXME(eddyb) do something more useful than always\n-            // disabling these uses of early feature-gatings.\n-            if false {\n-                for span in spans.get(&sym::$gate).unwrap_or(&vec![]) {\n-                    gate_feature_post!(&visitor, $gate, *span, $msg);\n-                }\n+            for span in spans.get(&sym::$gate).unwrap_or(&vec![]) {\n+                gate_feature_post!(future_incompatible; &visitor, $gate, *span, $msg);\n             }\n         };\n     }\n@@ -809,11 +825,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(try_blocks, \"`try` blocks are unstable\");\n     gate_all!(label_break_value, \"labels on blocks are unstable\");\n     gate_all!(box_syntax, \"box expression syntax is experimental; you can call `Box::new` instead\");\n-    // To avoid noise about type ascription in common syntax errors,\n-    // only emit if it is the *only* error. (Also check it last.)\n-    if sess.parse_sess.span_diagnostic.err_count() == 0 {\n-        gate_all!(type_ascription, \"type ascription is experimental\");\n-    }\n+    gate_all!(type_ascription, \"type ascription is experimental\");\n \n     visit::walk_crate(&mut visitor, krate);\n }"}, {"sha": "18e84b70b1b10335262f514f3115db91274b2938", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 63, "deletions": 12, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -459,6 +459,7 @@ struct HandlerInner {\n pub enum StashKey {\n     ItemNoType,\n     UnderscoreForArrayLengths,\n+    EarlySyntaxWarning,\n }\n \n fn default_track_diagnostic(_: &Diagnostic) {}\n@@ -626,19 +627,13 @@ impl Handler {\n     /// Stash a given diagnostic with the given `Span` and `StashKey` as the key for later stealing.\n     pub fn stash_diagnostic(&self, span: Span, key: StashKey, diag: Diagnostic) {\n         let mut inner = self.inner.borrow_mut();\n-        // FIXME(Centril, #69537): Consider reintroducing panic on overwriting a stashed diagnostic\n-        // if/when we have a more robust macro-friendly replacement for `(span, key)` as a key.\n-        // See the PR for a discussion.\n-        inner.stashed_diagnostics.insert((span, key), diag);\n+        inner.stash((span, key), diag);\n     }\n \n     /// Steal a previously stashed diagnostic with the given `Span` and `StashKey` as the key.\n     pub fn steal_diagnostic(&self, span: Span, key: StashKey) -> Option<DiagnosticBuilder<'_, ()>> {\n-        self.inner\n-            .borrow_mut()\n-            .stashed_diagnostics\n-            .remove(&(span, key))\n-            .map(|diag| DiagnosticBuilder::new_diagnostic(self, diag))\n+        let mut inner = self.inner.borrow_mut();\n+        inner.steal((span, key)).map(|diag| DiagnosticBuilder::new_diagnostic(self, diag))\n     }\n \n     /// Emit all stashed diagnostics.\n@@ -1106,13 +1101,31 @@ impl HandlerInner {\n \n     /// Emit all stashed diagnostics.\n     fn emit_stashed_diagnostics(&mut self) -> Option<ErrorGuaranteed> {\n+        let has_errors = self.has_errors();\n         let diags = self.stashed_diagnostics.drain(..).map(|x| x.1).collect::<Vec<_>>();\n         let mut reported = None;\n         for mut diag in diags {\n+            // Decrement the count tracking the stash; emitting will increment it.\n             if diag.is_error() {\n-                reported = Some(ErrorGuaranteed(()));\n+                if matches!(diag.level, Level::Error { lint: true }) {\n+                    self.lint_err_count -= 1;\n+                } else {\n+                    self.err_count -= 1;\n+                }\n+            } else {\n+                if diag.is_force_warn() {\n+                    self.warn_count -= 1;\n+                } else {\n+                    // Unless they're forced, don't flush stashed warnings when\n+                    // there are errors, to avoid causing warning overload. The\n+                    // stash would've been stolen already if it were important.\n+                    if has_errors {\n+                        continue;\n+                    }\n+                }\n             }\n-            self.emit_diagnostic(&mut diag);\n+            let reported_this = self.emit_diagnostic(&mut diag);\n+            reported = reported.or(reported_this);\n         }\n         reported\n     }\n@@ -1302,9 +1315,47 @@ impl HandlerInner {\n         }\n     }\n \n+    fn stash(&mut self, key: (Span, StashKey), diagnostic: Diagnostic) {\n+        // Track the diagnostic for counts, but don't panic-if-treat-err-as-bug\n+        // yet; that happens when we actually emit the diagnostic.\n+        if diagnostic.is_error() {\n+            if matches!(diagnostic.level, Level::Error { lint: true }) {\n+                self.lint_err_count += 1;\n+            } else {\n+                self.err_count += 1;\n+            }\n+        } else {\n+            // Warnings are only automatically flushed if they're forced.\n+            if diagnostic.is_force_warn() {\n+                self.warn_count += 1;\n+            }\n+        }\n+\n+        // FIXME(Centril, #69537): Consider reintroducing panic on overwriting a stashed diagnostic\n+        // if/when we have a more robust macro-friendly replacement for `(span, key)` as a key.\n+        // See the PR for a discussion.\n+        self.stashed_diagnostics.insert(key, diagnostic);\n+    }\n+\n+    fn steal(&mut self, key: (Span, StashKey)) -> Option<Diagnostic> {\n+        let diagnostic = self.stashed_diagnostics.remove(&key)?;\n+        if diagnostic.is_error() {\n+            if matches!(diagnostic.level, Level::Error { lint: true }) {\n+                self.lint_err_count -= 1;\n+            } else {\n+                self.err_count -= 1;\n+            }\n+        } else {\n+            if diagnostic.is_force_warn() {\n+                self.warn_count -= 1;\n+            }\n+        }\n+        Some(diagnostic)\n+    }\n+\n     #[inline]\n     fn err_count(&self) -> usize {\n-        self.err_count + self.stashed_diagnostics.len()\n+        self.err_count\n     }\n \n     fn has_errors(&self) -> bool {"}, {"sha": "95e34da734d6ad9012212ad3ff4ae256dd17483a", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -3212,6 +3212,56 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    /// The `unstable_syntax_pre_expansion` lint detects the use of unstable\n+    /// syntax that is discarded during attribute expansion.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// #[cfg(FALSE)]\n+    /// macro foo() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// The input to active attributes such as `#[cfg]` or procedural macro\n+    /// attributes is required to be valid syntax. Previously, the compiler only\n+    /// gated the use of unstable syntax features after resolving `#[cfg]` gates\n+    /// and expanding procedural macros.\n+    ///\n+    /// To avoid relying on unstable syntax, move the use of unstable syntax\n+    /// into a position where the compiler does not parse the syntax, such as a\n+    /// functionlike macro.\n+    ///\n+    /// ```rust\n+    /// # #![deny(unstable_syntax_pre_expansion)]\n+    ///\n+    /// macro_rules! identity {\n+    ///    ( $($tokens:tt)* ) => { $($tokens)* }\n+    /// }\n+    ///\n+    /// #[cfg(FALSE)]\n+    /// identity! {\n+    ///    macro foo() {}\n+    /// }\n+    /// ```\n+    ///\n+    /// This is a [future-incompatible] lint to transition this\n+    /// to a hard error in the future. See [issue #65860] for more details.\n+    ///\n+    /// [issue #65860]: https://github.com/rust-lang/rust/issues/65860\n+    /// [future-incompatible]: ../index.md#future-incompatible-lints\n+    pub UNSTABLE_SYNTAX_PRE_EXPANSION,\n+    Warn,\n+    \"unstable syntax can change at any point in the future, causing a hard error!\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #65860 <https://github.com/rust-lang/rust/issues/65860>\",\n+    };\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -3280,6 +3330,7 @@ declare_lint_pass! {\n         POINTER_STRUCTURAL_MATCH,\n         NONTRIVIAL_STRUCTURAL_MATCH,\n         SOFT_UNSTABLE,\n+        UNSTABLE_SYNTAX_PRE_EXPANSION,\n         INLINE_NO_SANITIZE,\n         BAD_ASM_STYLE,\n         ASM_SUB_REGISTER,"}, {"sha": "9f0886cb2089c1b1b10a5dd013ed298ed94ea479", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 52, "deletions": 3, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -2,15 +2,17 @@\n //! It also serves as an input to the parser itself.\n \n use crate::config::CheckCfg;\n-use crate::lint::{BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId};\n+use crate::lint::{\n+    builtin::UNSTABLE_SYNTAX_PRE_EXPANSION, BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId,\n+};\n use crate::SessionDiagnostic;\n use rustc_ast::node_id::NodeId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n-    error_code, fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder,\n-    DiagnosticMessage, ErrorGuaranteed, MultiSpan,\n+    error_code, fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n+    DiagnosticMessage, ErrorGuaranteed, MultiSpan, StashKey,\n };\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n@@ -101,11 +103,58 @@ pub fn feature_err_issue<'a>(\n     issue: GateIssue,\n     explain: &str,\n ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+    let span = span.into();\n+\n+    // Cancel an earlier warning for this same error, if it exists.\n+    if let Some(span) = span.primary_span() {\n+        sess.span_diagnostic\n+            .steal_diagnostic(span, StashKey::EarlySyntaxWarning)\n+            .map(|err| err.cancel());\n+    }\n+\n     let mut err = sess.span_diagnostic.struct_span_err_with_code(span, explain, error_code!(E0658));\n     add_feature_diagnostics_for_issue(&mut err, sess, feature, issue);\n     err\n }\n \n+/// Construct a future incompatibility diagnostic for a feature gate.\n+///\n+/// This diagnostic is only a warning and *does not cause compilation to fail*.\n+pub fn feature_warn<'a>(sess: &'a ParseSess, feature: Symbol, span: Span, explain: &str) {\n+    feature_warn_issue(sess, feature, span, GateIssue::Language, explain);\n+}\n+\n+/// Construct a future incompatibility diagnostic for a feature gate.\n+///\n+/// This diagnostic is only a warning and *does not cause compilation to fail*.\n+///\n+/// This variant allows you to control whether it is a library or language feature.\n+/// Almost always, you want to use this for a language feature. If so, prefer `feature_warn`.\n+pub fn feature_warn_issue<'a>(\n+    sess: &'a ParseSess,\n+    feature: Symbol,\n+    span: Span,\n+    issue: GateIssue,\n+    explain: &str,\n+) {\n+    let mut err = sess.span_diagnostic.struct_span_warn(span, explain);\n+    add_feature_diagnostics_for_issue(&mut err, sess, feature, issue);\n+\n+    // Decorate this as a future-incompatibility lint as in rustc_middle::lint::struct_lint_level\n+    let lint = UNSTABLE_SYNTAX_PRE_EXPANSION;\n+    let future_incompatible = lint.future_incompatible.as_ref().unwrap();\n+    err.code(DiagnosticId::Lint {\n+        name: lint.name_lower(),\n+        has_future_breakage: false,\n+        is_force_warn: false,\n+    });\n+    err.warn(lint.desc);\n+    err.note(format!(\"for more information, see {}\", future_incompatible.reference));\n+\n+    // A later feature_err call can steal and cancel this warning.\n+    err.stash(span, StashKey::EarlySyntaxWarning);\n+}\n+\n /// Adds the diagnostics for a feature to an existing error.\n pub fn add_feature_diagnostics<'a>(err: &mut Diagnostic, sess: &'a ParseSess, feature: Symbol) {\n     add_feature_diagnostics_for_issue(err, sess, feature, GateIssue::Language);"}, {"sha": "49f1cba7151efb1f35e476c697727251b19c49b7", "filename": "src/test/ui/feature-gates/soft-syntax-gates-with-errors.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Ffeature-gates%2Fsoft-syntax-gates-with-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Ffeature-gates%2Fsoft-syntax-gates-with-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fsoft-syntax-gates-with-errors.rs?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -0,0 +1,30 @@\n+// check-fail\n+// This file is used to test the behavior of the early-pass syntax warnings.\n+// If macro syntax is stabilized, replace with a different unstable syntax.\n+\n+macro a() {}\n+//~^ ERROR: `macro` is experimental\n+\n+#[cfg(FALSE)]\n+macro b() {}\n+\n+macro_rules! identity {\n+    ($($x:tt)*) => ($($x)*);\n+}\n+\n+identity! {\n+    macro c() {}\n+    //~^ ERROR: `macro` is experimental\n+}\n+\n+#[cfg(FALSE)]\n+identity! {\n+    macro d() {} // No error\n+}\n+\n+identity! {\n+    #[cfg(FALSE)]\n+    macro e() {}\n+}\n+\n+fn main() {}"}, {"sha": "49550d811ba5201a426450cc4e572ab603dbf219", "filename": "src/test/ui/feature-gates/soft-syntax-gates-with-errors.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Ffeature-gates%2Fsoft-syntax-gates-with-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Ffeature-gates%2Fsoft-syntax-gates-with-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fsoft-syntax-gates-with-errors.stderr?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: `macro` is experimental\n+  --> $DIR/soft-syntax-gates-with-errors.rs:5:1\n+   |\n+LL | macro a() {}\n+   | ^^^^^^^^^^^^\n+   |\n+   = note: see issue #39412 <https://github.com/rust-lang/rust/issues/39412> for more information\n+   = help: add `#![feature(decl_macro)]` to the crate attributes to enable\n+\n+error[E0658]: `macro` is experimental\n+  --> $DIR/soft-syntax-gates-with-errors.rs:16:5\n+   |\n+LL |     macro c() {}\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: see issue #39412 <https://github.com/rust-lang/rust/issues/39412> for more information\n+   = help: add `#![feature(decl_macro)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "ca4ad2320f657401255f3e751ed6fd4f842e4296", "filename": "src/test/ui/feature-gates/soft-syntax-gates-without-errors.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Ffeature-gates%2Fsoft-syntax-gates-without-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Ffeature-gates%2Fsoft-syntax-gates-without-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fsoft-syntax-gates-without-errors.rs?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+// This file is used to test the behavior of the early-pass syntax warnings.\n+// If macro syntax is stabilized, replace with a different unstable syntax.\n+\n+#[cfg(FALSE)]\n+macro b() {}\n+//~^ WARN: `macro` is experimental\n+//~| WARN: unstable syntax\n+\n+macro_rules! identity {\n+    ($($x:tt)*) => ($($x)*);\n+}\n+\n+#[cfg(FALSE)]\n+identity! {\n+    macro d() {} // No error\n+}\n+\n+identity! {\n+    #[cfg(FALSE)]\n+    macro e() {}\n+    //~^ WARN: `macro` is experimental\n+    //~| WARN: unstable syntax\n+}\n+\n+fn main() {}"}, {"sha": "3d9c22e548710a16102fd9609c5865a871de23e9", "filename": "src/test/ui/feature-gates/soft-syntax-gates-without-errors.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Ffeature-gates%2Fsoft-syntax-gates-without-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Ffeature-gates%2Fsoft-syntax-gates-without-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fsoft-syntax-gates-without-errors.stderr?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -0,0 +1,24 @@\n+warning: `macro` is experimental\n+  --> $DIR/soft-syntax-gates-without-errors.rs:6:1\n+   |\n+LL | macro b() {}\n+   | ^^^^^^^^^^^^\n+   |\n+   = note: see issue #39412 <https://github.com/rust-lang/rust/issues/39412> for more information\n+   = help: add `#![feature(decl_macro)]` to the crate attributes to enable\n+   = warning: unstable syntax can change at any point in the future, causing a hard error!\n+   = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n+\n+warning: `macro` is experimental\n+  --> $DIR/soft-syntax-gates-without-errors.rs:21:5\n+   |\n+LL |     macro e() {}\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: see issue #39412 <https://github.com/rust-lang/rust/issues/39412> for more information\n+   = help: add `#![feature(decl_macro)]` to the crate attributes to enable\n+   = warning: unstable syntax can change at any point in the future, causing a hard error!\n+   = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "082c1abb8f2f4098571b5c7099d465aeb00021e9", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -3,11 +3,18 @@\n // compile-flags: --test\n \n #![feature(async_closure)]\n+#![feature(box_patterns)]\n+#![feature(box_syntax)]\n #![feature(const_trait_impl)]\n+#![feature(decl_macro)]\n #![feature(generators)]\n #![feature(half_open_range_patterns)]\n+#![feature(label_break_value)]\n #![feature(more_qualified_paths)]\n #![feature(raw_ref_op)]\n+#![feature(trait_alias)]\n+#![feature(try_blocks)]\n+#![feature(type_ascription)]\n #![deny(unused_macros)]\n \n macro_rules! stringify_block {"}, {"sha": "dda5c0bb59d2330ba8dca0829503180b0734764b", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-pass.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -7,7 +7,7 @@ fn main() {}\n \n // Test the `pat` macro fragment parser:\n macro_rules! accept_pat {\n-    ($p:pat) => {}\n+    ($p:pat) => {};\n }\n \n accept_pat!((p | q));\n@@ -21,28 +21,28 @@ accept_pat!([p | q]);\n #[cfg(FALSE)]\n fn or_patterns() {\n     // Top level of `let`:\n-    let (| A | B);\n+    let (A | B);\n     let (A | B);\n     let (A | B): u8;\n     let (A | B) = 0;\n     let (A | B): u8 = 0;\n \n     // Top level of `for`:\n-    for | A | B in 0 {}\n+    for A | B in 0 {}\n     for A | B in 0 {}\n \n     // Top level of `while`:\n-    while let | A | B = 0 {}\n+    while let A | B = 0 {}\n     while let A | B = 0 {}\n \n     // Top level of `if`:\n-    if let | A | B = 0 {}\n+    if let A | B = 0 {}\n     if let A | B = 0 {}\n \n     // Top level of `match` arms:\n     match 0 {\n-        | A | B => {},\n-        A | B => {},\n+        A | B => {}\n+        A | B => {}\n     }\n \n     // Functions:\n@@ -68,6 +68,8 @@ fn or_patterns() {\n \n     // These bind as `(prefix p) | q` as opposed to `prefix (p | q)`:\n     let (box 0 | 1); // Unstable; we *can* change the precedence if we want.\n+                     //~^ WARN box pattern syntax is experimental\n+                     //~| WARN unstable syntax\n     let (&0 | 1);\n     let (&mut 0 | 1);\n     let (x @ 0 | 1);"}, {"sha": "c43fe192a73b86fa7075da79bba804ede79306a9", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-pass.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.stderr?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -0,0 +1,13 @@\n+warning: box pattern syntax is experimental\n+  --> $DIR/or-patterns-syntactic-pass.rs:70:10\n+   |\n+LL |     let (box 0 | 1); // Unstable; we *can* change the precedence if we want.\n+   |          ^^^^^\n+   |\n+   = note: see issue #29641 <https://github.com/rust-lang/rust/issues/29641> for more information\n+   = help: add `#![feature(box_patterns)]` to the crate attributes to enable\n+   = warning: unstable syntax can change at any point in the future, causing a hard error!\n+   = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "d8346653c25aa01ac3d3e6f039a700bda678dec2", "filename": "src/test/ui/parser/constraints-before-generic-args-syntactic-pass.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fparser%2Fconstraints-before-generic-args-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fparser%2Fconstraints-before-generic-args-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fconstraints-before-generic-args-syntactic-pass.rs?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -3,7 +3,11 @@\n #[cfg(FALSE)]\n fn syntax() {\n     foo::<T = u8, T: Ord, String>();\n+    //~^ WARN associated type bounds are unstable\n+    //~| WARN unstable syntax\n     foo::<T = u8, 'a, T: Ord>();\n+    //~^ WARN associated type bounds are unstable\n+    //~| WARN unstable syntax\n }\n \n fn main() {}"}, {"sha": "7e843c7f4d006d2acbd5111cd579dbac70f530b4", "filename": "src/test/ui/parser/constraints-before-generic-args-syntactic-pass.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fparser%2Fconstraints-before-generic-args-syntactic-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fparser%2Fconstraints-before-generic-args-syntactic-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fconstraints-before-generic-args-syntactic-pass.stderr?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -0,0 +1,24 @@\n+warning: associated type bounds are unstable\n+  --> $DIR/constraints-before-generic-args-syntactic-pass.rs:5:19\n+   |\n+LL |     foo::<T = u8, T: Ord, String>();\n+   |                   ^^^^^^\n+   |\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n+   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n+   = warning: unstable syntax can change at any point in the future, causing a hard error!\n+   = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n+\n+warning: associated type bounds are unstable\n+  --> $DIR/constraints-before-generic-args-syntactic-pass.rs:8:23\n+   |\n+LL |     foo::<T = u8, 'a, T: Ord>();\n+   |                       ^^^^^^\n+   |\n+   = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n+   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n+   = warning: unstable syntax can change at any point in the future, causing a hard error!\n+   = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "4da5a2db76743ddaa01cf60729afc219d57e658a", "filename": "src/test/ui/pattern/rest-pat-syntactic.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.rs?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -19,6 +19,8 @@ fn rest_patterns() {\n \n     // Box patterns:\n     let box ..;\n+    //~^ WARN box pattern syntax is experimental\n+    //~| WARN unstable syntax\n \n     // In or-patterns:\n     match x {\n@@ -57,7 +59,7 @@ fn rest_patterns() {\n         .. |\n         [\n             (\n-                box ..,\n+                box .., //~ WARN box pattern syntax is experimental\n                 &(..),\n                 &mut ..,\n                 x @ ..\n@@ -67,4 +69,5 @@ fn rest_patterns() {\n         ref mut x @ ..\n         => {}\n     }\n+    //~| WARN unstable syntax\n }"}, {"sha": "37019b7d5ba7a2e93c3a8680d8b0c7775baca893", "filename": "src/test/ui/pattern/rest-pat-syntactic.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.stderr?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -0,0 +1,24 @@\n+warning: box pattern syntax is experimental\n+  --> $DIR/rest-pat-syntactic.rs:21:9\n+   |\n+LL |     let box ..;\n+   |         ^^^^^^\n+   |\n+   = note: see issue #29641 <https://github.com/rust-lang/rust/issues/29641> for more information\n+   = help: add `#![feature(box_patterns)]` to the crate attributes to enable\n+   = warning: unstable syntax can change at any point in the future, causing a hard error!\n+   = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n+\n+warning: box pattern syntax is experimental\n+  --> $DIR/rest-pat-syntactic.rs:62:17\n+   |\n+LL |                 box ..,\n+   |                 ^^^^^^\n+   |\n+   = note: see issue #29641 <https://github.com/rust-lang/rust/issues/29641> for more information\n+   = help: add `#![feature(box_patterns)]` to the crate attributes to enable\n+   = warning: unstable syntax can change at any point in the future, causing a hard error!\n+   = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "31ac556b9447c857a6d928617f1074ac9c842faa", "filename": "src/test/ui/suggestions/many-type-ascription.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fsuggestions%2Fmany-type-ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fsuggestions%2Fmany-type-ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmany-type-ascription.rs?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let _ = 0: i32; //~ ERROR: type ascription is experimental\n+    let _ = 0: i32; // (error only emitted once)\n+}"}, {"sha": "3706bbae9df9fbd3e38b18efc3908be43b372fbf", "filename": "src/test/ui/suggestions/many-type-ascription.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fsuggestions%2Fmany-type-ascription.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fsuggestions%2Fmany-type-ascription.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmany-type-ascription.stderr?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: type ascription is experimental\n+  --> $DIR/many-type-ascription.rs:2:13\n+   |\n+LL |     let _ = 0: i32;\n+   |             ^^^^^^\n+   |\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+   = help: add `#![feature(type_ascription)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "99ab2f3c858b9c6ec6aede6a352778ecc2dbdf1a", "filename": "src/test/ui/suggestions/type-ascription-and-other-error.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-and-other-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-and-other-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-and-other-error.rs?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    not rust; //~ ERROR\n+    let _ = 0: i32; // (error hidden by existing error)\n+    #[cfg(FALSE)]\n+    let _ = 0: i32; // (warning hidden by existing error)\n+}"}, {"sha": "eadf634bb14fd0bd24bed98fc998099474ba48e0", "filename": "src/test/ui/suggestions/type-ascription-and-other-error.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-and-other-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8828af4d88f69a3fce63e7ea6420f3363127802c/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-and-other-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-and-other-error.stderr?ref=8828af4d88f69a3fce63e7ea6420f3363127802c", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `rust`\n+  --> $DIR/type-ascription-and-other-error.rs:2:9\n+   |\n+LL |     not rust;\n+   |         ^^^^ expected one of 8 possible tokens\n+\n+error: aborting due to previous error\n+"}]}