{"sha": "32930d9ea7cc79239daa19a040cbae9867053af8", "node_id": "C_kwDOAAsO6NoAKDMyOTMwZDllYTdjYzc5MjM5ZGFhMTlhMDQwY2JhZTk4NjcwNTNhZjg", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-01-05T22:11:37Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-01-18T22:25:30Z"}, "message": "Safely handle partial drops\n\nWe previously weren't tracking partial re-inits while being too\naggressive around partial drops. With this change, we simply ignore\npartial drops, which is the safer, more conservative choice.", "tree": {"sha": "1fac2ecc51a35832b9c8f968ee19c53d6892be98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fac2ecc51a35832b9c8f968ee19c53d6892be98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32930d9ea7cc79239daa19a040cbae9867053af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32930d9ea7cc79239daa19a040cbae9867053af8", "html_url": "https://github.com/rust-lang/rust/commit/32930d9ea7cc79239daa19a040cbae9867053af8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32930d9ea7cc79239daa19a040cbae9867053af8/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78c5644de5ffea9d64200bd28eac7e49ca2c8f33", "url": "https://api.github.com/repos/rust-lang/rust/commits/78c5644de5ffea9d64200bd28eac7e49ca2c8f33", "html_url": "https://github.com/rust-lang/rust/commit/78c5644de5ffea9d64200bd28eac7e49ca2c8f33"}], "stats": {"total": 91, "additions": 88, "deletions": 3}, "files": [{"sha": "845cd01a44eed31a338be1219f4826775302449c", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32930d9ea7cc79239daa19a040cbae9867053af8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32930d9ea7cc79239daa19a040cbae9867053af8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=32930d9ea7cc79239daa19a040cbae9867053af8", "patch": "@@ -85,7 +85,11 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n             \"consume {:?}; diag_expr_id={:?}, using parent {:?}\",\n             place_with_id, diag_expr_id, parent\n         );\n-        self.mark_consumed(parent, place_with_id.into());\n+        // We do not currently support partial drops or reinits, so just ignore\n+        // any places with projections.\n+        if place_with_id.place.projections.is_empty() {\n+            self.mark_consumed(parent, place_with_id.into());\n+        }\n     }\n \n     fn borrow("}, {"sha": "73f0ca8153cb9d9c68d72842a12a4ee8cb4b6121", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/32930d9ea7cc79239daa19a040cbae9867053af8/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32930d9ea7cc79239daa19a040cbae9867053af8/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.rs?ref=32930d9ea7cc79239daa19a040cbae9867053af8", "patch": "@@ -0,0 +1,29 @@\n+// edition:2021\n+#![feature(negative_impls)]\n+#![allow(unused)]\n+\n+fn main() {\n+    gimme_send(foo());\n+    //~^ ERROR cannot be sent between threads safely\n+}\n+\n+fn gimme_send<T: Send>(t: T) {\n+    drop(t);\n+}\n+\n+struct NotSend {}\n+\n+impl Drop for NotSend {\n+    fn drop(&mut self) {}\n+}\n+\n+impl !Send for NotSend {}\n+\n+async fn foo() {\n+    let mut x = (NotSend {},);\n+    drop(x.0);\n+    x.0 = NotSend {};\n+    bar().await;\n+}\n+\n+async fn bar() {}"}, {"sha": "2097642eb24abb5d6d9fc91939c589e281f5d1e7", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/32930d9ea7cc79239daa19a040cbae9867053af8/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32930d9ea7cc79239daa19a040cbae9867053af8/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr?ref=32930d9ea7cc79239daa19a040cbae9867053af8", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: `NotSend` cannot be sent between threads safely\n+  --> $DIR/partial-drop-partial-reinit.rs:6:16\n+   |\n+LL |     gimme_send(foo());\n+   |     ---------- ^^^^^ `NotSend` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+...\n+LL | async fn foo() {\n+   |                - within this `impl Future<Output = ()>`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `NotSend`\n+   = note: required because it appears within the type `(NotSend,)`\n+   = note: required because it appears within the type `{ResumeTy, (NotSend,), impl Future<Output = ()>, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/partial-drop-partial-reinit.rs:22:16: 27:2]`\n+   = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/partial-drop-partial-reinit.rs:22:16: 27:2]>`\n+   = note: required because it appears within the type `impl Future<Output = [async output]>`\n+   = note: required because it appears within the type `impl Future<Output = ()>`\n+note: required by a bound in `gimme_send`\n+  --> $DIR/partial-drop-partial-reinit.rs:10:18\n+   |\n+LL | fn gimme_send<T: Send>(t: T) {\n+   |                  ^^^^ required by this bound in `gimme_send`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c8c07ba41c7e8046d25b0ff0ccf8dbe5294f7b22", "filename": "src/test/ui/generator/partial-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32930d9ea7cc79239daa19a040cbae9867053af8/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32930d9ea7cc79239daa19a040cbae9867053af8/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.rs?ref=32930d9ea7cc79239daa19a040cbae9867053af8", "patch": "@@ -1,5 +1,3 @@\n-// check-pass\n-\n #![feature(negative_impls, generators)]\n \n struct Foo;\n@@ -12,6 +10,8 @@ struct Bar {\n \n fn main() {\n     assert_send(|| {\n+        //~^ ERROR generator cannot be sent between threads safely\n+        // FIXME: it would be nice to make this work.\n         let guard = Bar { foo: Foo, x: 42 };\n         drop(guard.foo);\n         yield;"}, {"sha": "93112f52208a5fa33e44a6317111f412017ba93e", "filename": "src/test/ui/generator/partial-drop.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/32930d9ea7cc79239daa19a040cbae9867053af8/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32930d9ea7cc79239daa19a040cbae9867053af8/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.stderr?ref=32930d9ea7cc79239daa19a040cbae9867053af8", "patch": "@@ -0,0 +1,25 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/partial-drop.rs:12:5\n+   |\n+LL |     assert_send(|| {\n+   |     ^^^^^^^^^^^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/partial-drop.rs:12:17: 18:6]`, the trait `Send` is not implemented for `Foo`\n+note: generator is not `Send` as this value is used across a yield\n+  --> $DIR/partial-drop.rs:17:9\n+   |\n+LL |         let guard = Bar { foo: Foo, x: 42 };\n+   |             ----- has type `Bar` which is not `Send`\n+LL |         drop(guard.foo);\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `guard` maybe used later\n+LL |     })\n+   |     - `guard` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/partial-drop.rs:21:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}]}