{"sha": "fe87923b546b84dffd46c95ccecadafa57ab01dc", "node_id": "C_kwDOAAsO6NoAKGZlODc5MjNiNTQ2Yjg0ZGZmZDQ2Yzk1Y2NlY2FkYWZhNTdhYjAxZGM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-08T12:55:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-08T12:55:49Z"}, "message": "Rollup merge of #98654 - nnethercote:pest-2.1.3-opt, r=pnkfelix\n\nAn optimization for `pest-2.1.3`\n\nAn easy win I found while looking at a profile of `pest-2.1.3`. It's also a small code cleanup.\n\nr? `@pnkfelix`", "tree": {"sha": "c40e97181e7d91f49544c411c6304fb12b5dac2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c40e97181e7d91f49544c411c6304fb12b5dac2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe87923b546b84dffd46c95ccecadafa57ab01dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiyClVCRBK7hj4Ov3rIwAAJm4IAEFwncKp/qlWWDIx4Xa9I4cl\nJRtkqTu08Z+wFU1iU9XXSI34XiRpsngmVj1ybZMiw2tzOKM+xa8kzdLuCitVwGc6\nT8P/RnpeAVacFB72TfKJxZySbCbmWj22Cqi38uvzUGrdC83rVsbRvbld0d2igjT/\nJekHJFCODhxwJE4smRwnlBrWkOlbIDlyXbWev9y7H+CX01oHSjGyVqSRodUGBLB+\nV/fVJCdoe2wn4QoYKMIKkJ5Q6my8M9M8vW9q426D8NcB/dL3FnMi3JpqDCBUwRU6\nJESS0omJ/mirj+g66rjl/efsK28FUPOjHvs8OPAKBmQFwbUBi/dvbqbyp8eTckk=\n=cOx/\n-----END PGP SIGNATURE-----\n", "payload": "tree c40e97181e7d91f49544c411c6304fb12b5dac2a\nparent 1ce8de30871487ee79f26ef1723dd3b21f50ff79\nparent 687e391bc3a9682b6fe956a2e39a8a3935047158\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657284949 +0530\ncommitter GitHub <noreply@github.com> 1657284949 +0530\n\nRollup merge of #98654 - nnethercote:pest-2.1.3-opt, r=pnkfelix\n\nAn optimization for `pest-2.1.3`\n\nAn easy win I found while looking at a profile of `pest-2.1.3`. It's also a small code cleanup.\n\nr? `@pnkfelix`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe87923b546b84dffd46c95ccecadafa57ab01dc", "html_url": "https://github.com/rust-lang/rust/commit/fe87923b546b84dffd46c95ccecadafa57ab01dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe87923b546b84dffd46c95ccecadafa57ab01dc/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce8de30871487ee79f26ef1723dd3b21f50ff79", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce8de30871487ee79f26ef1723dd3b21f50ff79", "html_url": "https://github.com/rust-lang/rust/commit/1ce8de30871487ee79f26ef1723dd3b21f50ff79"}, {"sha": "687e391bc3a9682b6fe956a2e39a8a3935047158", "url": "https://api.github.com/repos/rust-lang/rust/commits/687e391bc3a9682b6fe956a2e39a8a3935047158", "html_url": "https://github.com/rust-lang/rust/commit/687e391bc3a9682b6fe956a2e39a8a3935047158"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "94ca138b9d20d64df7af6439cc20081fcdd91d21", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fe87923b546b84dffd46c95ccecadafa57ab01dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe87923b546b84dffd46c95ccecadafa57ab01dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=fe87923b546b84dffd46c95ccecadafa57ab01dc", "patch": "@@ -58,10 +58,7 @@ pub fn search_for_structural_match_violation<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n ) -> Option<NonStructuralMatchTy<'tcx>> {\n-    // FIXME: we should instead pass in an `infcx` from the outside.\n-    tcx.infer_ctxt().enter(|infcx| {\n-        ty.visit_with(&mut Search { infcx, span, seen: FxHashSet::default() }).break_value()\n-    })\n+    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default() }).break_value()\n }\n \n /// This method returns true if and only if `adt_ty` itself has been marked as\n@@ -114,27 +111,23 @@ fn type_marked_structural<'tcx>(\n /// This implements the traversal over the structure of a given type to try to\n /// find instances of ADTs (specifically structs or enums) that do not implement\n /// the structural-match traits (`StructuralPartialEq` and `StructuralEq`).\n-struct Search<'a, 'tcx> {\n+struct Search<'tcx> {\n     span: Span,\n \n-    infcx: InferCtxt<'a, 'tcx>,\n+    tcx: TyCtxt<'tcx>,\n \n     /// Tracks ADTs previously encountered during search, so that\n     /// we will not recur on them again.\n     seen: FxHashSet<hir::def_id::DefId>,\n }\n \n-impl<'a, 'tcx> Search<'a, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.infcx.tcx\n-    }\n-\n+impl<'tcx> Search<'tcx> {\n     fn type_marked_structural(&self, adt_ty: Ty<'tcx>) -> bool {\n-        adt_ty.is_structural_eq_shallow(self.tcx())\n+        adt_ty.is_structural_eq_shallow(self.tcx)\n     }\n }\n \n-impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n+impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n     type BreakTy = NonStructuralMatchTy<'tcx>;\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -193,7 +186,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 return ControlFlow::CONTINUE;\n             }\n             ty::Array(_, n)\n-                if { n.try_eval_usize(self.tcx(), ty::ParamEnv::reveal_all()) == Some(0) } =>\n+                if { n.try_eval_usize(self.tcx, ty::ParamEnv::reveal_all()) == Some(0) } =>\n             {\n                 // rust-lang/rust#62336: ignore type of contents\n                 // for empty array.\n@@ -214,7 +207,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 bug!(\"unexpected type during structural-match checking: {:?}\", ty);\n             }\n             ty::Error(_) => {\n-                self.tcx().sess.delay_span_bug(self.span, \"ty::Error in structural-match check\");\n+                self.tcx.sess.delay_span_bug(self.span, \"ty::Error in structural-match check\");\n                 // We still want to check other types after encountering an error,\n                 // as this may still emit relevant errors.\n                 return ControlFlow::CONTINUE;\n@@ -244,9 +237,9 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n \n         // even though we skip super_visit_with, we must recur on\n         // fields of ADT.\n-        let tcx = self.tcx();\n+        let tcx = self.tcx;\n         adt_def.all_fields().map(|field| field.ty(tcx, substs)).try_for_each(|field_ty| {\n-            let ty = self.tcx().normalize_erasing_regions(ty::ParamEnv::empty(), field_ty);\n+            let ty = self.tcx.normalize_erasing_regions(ty::ParamEnv::empty(), field_ty);\n             debug!(\"structural-match ADT: field_ty={:?}, ty={:?}\", field_ty, ty);\n             ty.visit_with(self)\n         })"}]}