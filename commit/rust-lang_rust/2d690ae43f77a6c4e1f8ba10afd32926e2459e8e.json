{"sha": "2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNjkwYWU0M2Y3N2E2YzRlMWY4YmExMGFmZDMyOTI2ZTI0NTllOGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-04T18:23:53Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-04T18:23:53Z"}, "message": "libstd: \"import\" -> \"use\"", "tree": {"sha": "abbd9c1b0d1be50ebc34a49e4d927113b4ecde49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abbd9c1b0d1be50ebc34a49e4d927113b4ecde49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "html_url": "https://github.com/rust-lang/rust/commit/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "437073868e590ff8d1aae7a6fad1d8c49056f0b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/437073868e590ff8d1aae7a6fad1d8c49056f0b0", "html_url": "https://github.com/rust-lang/rust/commit/437073868e590ff8d1aae7a6fad1d8c49056f0b0"}], "stats": {"total": 261, "additions": 126, "deletions": 135}, "files": [{"sha": "ce037dfec98216a8d30581d882bb0c263c3fc7e2", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -6,11 +6,10 @@\n  * between tasks.\n  */\n \n-import unsafe::{SharedMutableState, shared_mutable_state,\n+use unsafe::{SharedMutableState, shared_mutable_state,\n                 clone_shared_mutable_state, unwrap_shared_mutable_state,\n                 get_shared_mutable_state, get_shared_immutable_state};\n-import sync;\n-import sync::{Mutex,  mutex_with_condvars,\n+use sync::{Mutex,  mutex_with_condvars,\n               RWlock, rwlock_with_condvars};\n \n export ARC, clone, get;"}, {"sha": "7037752cc260974fa7d592b83d81a9eb962944f0", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -24,11 +24,10 @@\n \n export Arena, arena_with_size;\n \n-import list;\n-import list::{list, cons, nil};\n-import unsafe::reinterpret_cast;\n-import sys::TypeDesc;\n-import libc::size_t;\n+use list::{list, cons, nil};\n+use unsafe::reinterpret_cast;\n+use sys::TypeDesc;\n+use libc::size_t;\n \n #[abi = \"rust-intrinsic\"]\n extern mod rusti {"}, {"sha": "00499895d56cc253d5f4e0d1d169a34cd381f451", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -1,6 +1,6 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n-import io::Reader;\n+use io::Reader;\n \n trait ToBase64 {\n     fn to_base64() -> ~str;"}, {"sha": "7a48f924079ecc8c89a59b4b59bddea0ad2d26d0", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -1,4 +1,4 @@\n-import vec::{to_mut, from_elem};\n+use vec::{to_mut, from_elem};\n \n export Bitv;\n export union;"}, {"sha": "b9934e425b9f7c646637c5ea4590192400486993", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -8,7 +8,7 @@ Higher level communication abstractions.\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import pipes::{Channel, Recv, Chan, Port, Selectable};\n+use pipes::{Channel, Recv, Chan, Port, Selectable};\n \n export DuplexStream;\n "}, {"sha": "68bd363f416a694b7f36cdee14f693a71df57de4", "filename": "src/libstd/dbg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdbg.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -2,7 +2,7 @@\n #[forbid(deprecated_pattern)];\n //! Unsafe debugging functions for inspecting values.\n \n-import unsafe::reinterpret_cast;\n+use unsafe::reinterpret_cast;\n \n export debug_tydesc;\n export debug_opaque;"}, {"sha": "6cd229bc689e8326f56af6a20970355c26505c5e", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -1,7 +1,7 @@\n //! A deque. Untested as of yet. Likely buggy\n \n-import option::{Some, None};\n-import dvec::DVec;\n+use option::{Some, None};\n+use dvec::DVec;\n \n trait Deque<T> {\n     fn size() -> uint;"}, {"sha": "3e2ba9a24e59016062bf6a1f92daf1ae0660b72e", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -1,8 +1,8 @@\n // Simple Extensible Binary Markup Language (ebml) reader and writer on a\n // cursor model. See the specification here:\n //     http://www.matroska.org/technical/specs/rfc/index.html\n-import core::Option;\n-import option::{Some, None};\n+use core::Option;\n+use option::{Some, None};\n \n export Doc;\n export doc_at;"}, {"sha": "e7a92e5d8ccf5e5d093914ddcfd3b54b06f04005", "filename": "src/libstd/fun_treemap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffun_treemap.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -12,9 +12,9 @@\n  * of features.\n  */\n \n-import core::cmp::{Eq, Ord};\n-import option::{Some, None};\n-import option = option;\n+use core::cmp::{Eq, Ord};\n+use option::{Some, None};\n+use option = option;\n \n export Treemap;\n export init;"}, {"sha": "49d4e8bc26810366858619c7930103fabe92edd7", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -65,10 +65,10 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import core::cmp::Eq;\n-import core::result::{Err, Ok};\n-import core::option;\n-import core::option::{Some, None};\n+use core::cmp::Eq;\n+use core::result::{Err, Ok};\n+use core::option;\n+use core::option::{Some, None};\n export Opt;\n export reqopt;\n export optopt;"}, {"sha": "161fdf53b99ba2a3e4e7e5d5aa31ff1ed2875191", "filename": "src/libstd/json.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -3,14 +3,11 @@\n \n //! json serialization\n \n-import core::cmp::Eq;\n-import result::{Result, Ok, Err};\n-import io;\n-import io::WriterUtil;\n-import map;\n-import map::hashmap;\n-import map::map;\n-import sort;\n+use core::cmp::Eq;\n+use result::{Result, Ok, Err};\n+use io::WriterUtil;\n+use map::hashmap;\n+use map::map;\n \n export Json;\n export Error;"}, {"sha": "e73152cf1ac64c8ca100ffde46e64add5b7ca92d", "filename": "src/libstd/list.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -2,10 +2,10 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import core::cmp::Eq;\n-import core::option;\n-import option::*;\n-import option::{Some, None};\n+use core::cmp::Eq;\n+use core::option;\n+use option::*;\n+use option::{Some, None};\n \n enum list<T> {\n     cons(T, @list<T>),"}, {"sha": "c7eba5bb8eba0d717b634225eee80649cfd6e2bf", "filename": "src/libstd/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -3,14 +3,14 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import io::WriterUtil;\n-import to_str::ToStr;\n-import managed::Managed;\n-import send_map::linear::LinearMap;\n-\n-import core::cmp::Eq;\n-import hash::Hash;\n-import to_bytes::IterBytes;\n+use io::WriterUtil;\n+use to_str::ToStr;\n+use managed::Managed;\n+use send_map::linear::LinearMap;\n+\n+use core::cmp::Eq;\n+use hash::Hash;\n+use to_bytes::IterBytes;\n \n export hashmap, hashfn, eqfn, set, map, chained, hashmap, str_hash;\n export box_str_hash;"}, {"sha": "8665ea2e9cf5e6766c7bdc892520311049f21baf", "filename": "src/libstd/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -1,10 +1,10 @@\n //! Top-level module for network-related functionality\n \n-import tcp = net_tcp;\n+use tcp = net_tcp;\n export tcp;\n \n-import ip = net_ip;\n+use ip = net_ip;\n export ip;\n \n-import url = net_url;\n+use url = net_url;\n export url;\n\\ No newline at end of file"}, {"sha": "125b2f5544a4d20cedec0a6aa4d5d6a0d8384ed2", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -1,25 +1,23 @@\n //! Types/fns concerning Internet Protocol (IP), versions 4 & 6\n \n-import vec;\n-import uint;\n-import iotask = uv::iotask::IoTask;\n-import interact = uv::iotask::interact;\n+use iotask = uv::iotask::IoTask;\n+use interact = uv::iotask::interact;\n \n-import sockaddr_in = uv::ll::sockaddr_in;\n-import sockaddr_in6 = uv::ll::sockaddr_in6;\n-import addrinfo = uv::ll::addrinfo;\n-import uv_getaddrinfo_t = uv::ll::uv_getaddrinfo_t;\n-import uv_ip4_addr = uv::ll::ip4_addr;\n-import uv_ip4_name = uv::ll::ip4_name;\n-import uv_ip6_addr = uv::ll::ip6_addr;\n-import uv_ip6_name = uv::ll::ip6_name;\n-import uv_getaddrinfo = uv::ll::getaddrinfo;\n-import uv_freeaddrinfo = uv::ll::freeaddrinfo;\n-import create_uv_getaddrinfo_t = uv::ll::getaddrinfo_t;\n-import set_data_for_req = uv::ll::set_data_for_req;\n-import get_data_for_req = uv::ll::get_data_for_req;\n-import ll = uv::ll;\n-import comm = core::comm;\n+use sockaddr_in = uv::ll::sockaddr_in;\n+use sockaddr_in6 = uv::ll::sockaddr_in6;\n+use addrinfo = uv::ll::addrinfo;\n+use uv_getaddrinfo_t = uv::ll::uv_getaddrinfo_t;\n+use uv_ip4_addr = uv::ll::ip4_addr;\n+use uv_ip4_name = uv::ll::ip4_name;\n+use uv_ip6_addr = uv::ll::ip6_addr;\n+use uv_ip6_name = uv::ll::ip6_name;\n+use uv_getaddrinfo = uv::ll::getaddrinfo;\n+use uv_freeaddrinfo = uv::ll::freeaddrinfo;\n+use create_uv_getaddrinfo_t = uv::ll::getaddrinfo_t;\n+use set_data_for_req = uv::ll::set_data_for_req;\n+use get_data_for_req = uv::ll::get_data_for_req;\n+use ll = uv::ll;\n+use comm = core::comm;\n \n export IpAddr, parse_addr_err;\n export format_addr;"}, {"sha": "baddce5afe16b8b0b04ff1d1b9b3d21377e1f420", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -1,15 +1,15 @@\n //! High-level interface to libuv's TCP functionality\n \n-import ip = net_ip;\n-import uv::iotask;\n-import uv::iotask::IoTask;\n-import future_spawn = future::spawn;\n+use ip = net_ip;\n+use uv::iotask;\n+use uv::iotask::IoTask;\n+use future_spawn = future::spawn;\n // FIXME #1935\n // should be able to, but can't atm, replace w/ result::{result, extensions};\n-import result::*;\n-import libc::size_t;\n-import io::{Reader, ReaderUtil, Writer};\n-import comm = core::comm;\n+use result::*;\n+use libc::size_t;\n+use io::{Reader, ReaderUtil, Writer};\n+use comm = core::comm;\n \n // tcp interfaces\n export TcpSocket;"}, {"sha": "a502ab4239e44081a7131beee01b6f10625d80fa", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -1,13 +1,12 @@\n //! Types/fns concerning URLs (see RFC 3986)\n \n-import core::cmp::Eq;\n-import map;\n-import map::{hashmap, str_hash};\n-import io::{Reader, ReaderUtil};\n-import dvec::DVec;\n-import from_str::FromStr;\n-import result::{Err, Ok};\n-import to_str::ToStr;\n+use core::cmp::Eq;\n+use map::{hashmap, str_hash};\n+use io::{Reader, ReaderUtil};\n+use dvec::DVec;\n+use from_str::FromStr;\n+use result::{Err, Ok};\n+use to_str::ToStr;\n \n export Url, url, userinfo, query;\n export from_str, to_str;"}, {"sha": "97057ed20a56d597790a9d88cf9ec5d78bbabd31", "filename": "src/libstd/par.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -1,4 +1,4 @@\n-import future_spawn = future::spawn;\n+use future_spawn = future::spawn;\n \n export map, mapi, alli, any, mapi_factory;\n "}, {"sha": "2976927a78fe11717a50501ed8ddd92304eca228", "filename": "src/libstd/prettyprint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fprettyprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fprettyprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprettyprint.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -1,9 +1,9 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import io::Writer;\n-import io::WriterUtil;\n-import serialization::serializer;\n+use io::Writer;\n+use io::WriterUtil;\n+use serialization::serializer;\n \n impl Writer: serializer {\n     fn emit_nil() {"}, {"sha": "2173d67b10012b3dbba7493b0d9050ff60be7e46", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -2,10 +2,10 @@\n  * A simple map based on a vector for small integer keys. Space requirements\n  * are O(highest integer key).\n  */\n-import core::option;\n-import core::option::{Some, None};\n-import dvec::DVec;\n-import map::map;\n+use core::option;\n+use core::option::{Some, None};\n+use dvec::DVec;\n+use map::map;\n \n // FIXME (#2347): Should not be @; there's a bug somewhere in rustc that\n // requires this to be."}, {"sha": "fc5ffa3384c39d509fc84e83af1cf4ac58b377a5", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -2,8 +2,8 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import vec::{len, push};\n-import core::cmp::{Eq, Ord};\n+use vec::{len, push};\n+use core::cmp::{Eq, Ord};\n \n export le;\n export merge_sort;"}, {"sha": "d11c3419f7acb1f3f7a654598185d205b0ccee31", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -11,7 +11,7 @@\n export Condvar, Semaphore, Mutex, mutex_with_condvars;\n export RWlock, rwlock_with_condvars, RWlockReadMode, RWlockWriteMode;\n \n-import unsafe::{Exclusive, exclusive};\n+use unsafe::{Exclusive, exclusive};\n \n /****************************************************************************\n  * Internals"}, {"sha": "8b6b306d6b61d802236f959e74c4efa0cdc2721d", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -3,9 +3,8 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import core::option;\n-import option::{None, Some};\n-import rand;\n+use core::option;\n+use option::{None, Some};\n \n fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {\n     let r = rand::Rng();"}, {"sha": "7c6528b11379dd323d6fe625c269cb0cc78fb4f9", "filename": "src/libstd/term.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fterm.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -1,6 +1,6 @@\n //! Simple ANSI color library\n \n-import core::Option;\n+use core::Option;\n \n // FIXME (#2807): Windows support.\n "}, {"sha": "8e8380c68835368572b180ee846d9d0004e1fe96", "filename": "src/libstd/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -5,13 +5,13 @@\n // simplest interface possible for representing and running tests\n // while providing a base that other test frameworks may build off of.\n \n-import core::cmp::Eq;\n-import either::Either;\n-import result::{Ok, Err};\n-import io::WriterUtil;\n-import libc::size_t;\n-import task::TaskBuilder;\n-import comm = core::comm;\n+use core::cmp::Eq;\n+use either::Either;\n+use result::{Ok, Err};\n+use io::WriterUtil;\n+use libc::size_t;\n+use task::TaskBuilder;\n+use comm = core::comm;\n \n export test_name;\n export test_fn;"}, {"sha": "86104c117b5beabb9f7cec17fe49b7168ffca4a2", "filename": "src/libstd/time.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -1,10 +1,10 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import core::cmp::Eq;\n-import libc::{c_char, c_int, c_long, size_t, time_t};\n-import io::Reader;\n-import result::{Result, Ok, Err};\n+use core::cmp::Eq;\n+use libc::{c_char, c_int, c_long, size_t, time_t};\n+use io::Reader;\n+use result::{Result, Ok, Err};\n \n export\n     Timespec,"}, {"sha": "25bc5e58c4e247b31ceeba641fffea74ce36f821", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -3,10 +3,10 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-import uv = uv;\n-import uv::iotask;\n-import iotask::IoTask;\n-import comm = core::comm;\n+use uv = uv;\n+use uv::iotask;\n+use iotask::IoTask;\n+use comm = core::comm;\n \n export delayed_send, sleep, recv_timeout;\n "}, {"sha": "8eee59e029cef7c9bd64e8943f8ce1a239a98fb3", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -6,9 +6,9 @@\n  * red-black tree or something else.\n  */\n \n-import core::cmp::{Eq, Ord};\n-import core::option::{Some, None};\n-import Option = core::Option;\n+use core::cmp::{Eq, Ord};\n+use core::option::{Some, None};\n+use Option = core::Option;\n \n export treemap;\n export insert;"}, {"sha": "311c9f28dd842c0eedca87c0e237afdf6bb75814", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -23,11 +23,11 @@\n  * facilities.\n  */\n \n-import ll = uv_ll;\n+use ll = uv_ll;\n export ll;\n \n-import iotask = uv_iotask;\n+use iotask = uv_iotask;\n export iotask;\n \n-import global_loop = uv_global_loop;\n+use global_loop = uv_global_loop;\n export global_loop;"}, {"sha": "4713efd96b3b65cc004b57f0f377c75c9833d577", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -2,15 +2,15 @@\n \n export get;\n \n-import ll = uv_ll;\n-import iotask = uv_iotask;\n-import get_gl = get;\n-import iotask::{IoTask, spawn_iotask};\n-import priv::{chan_from_global_ptr, weaken_task};\n-import comm = core::comm;\n-import comm::{Port, Chan, select2, listen};\n-import task::TaskBuilder;\n-import either::{Left, Right};\n+use ll = uv_ll;\n+use iotask = uv_iotask;\n+use get_gl = get;\n+use iotask::{IoTask, spawn_iotask};\n+use priv::{chan_from_global_ptr, weaken_task};\n+use comm = core::comm;\n+use comm::{Port, Chan, select2, listen};\n+use task::TaskBuilder;\n+use either::{Left, Right};\n \n extern mod rustrt {\n     fn rust_uv_get_kernel_global_chan_ptr() -> *libc::uintptr_t;"}, {"sha": "6b2b9aa7210a6aee723af1c329a6767bb094932c", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -10,12 +10,12 @@ export spawn_iotask;\n export interact;\n export exit;\n \n-import libc::c_void;\n-import ptr::addr_of;\n-import comm = core::comm;\n-import comm::{Port, Chan, listen};\n-import task::TaskBuilder;\n-import ll = uv_ll;\n+use libc::c_void;\n+use ptr::addr_of;\n+use comm = core::comm;\n+use comm::{Port, Chan, listen};\n+use task::TaskBuilder;\n+use ll = uv_ll;\n \n /// Used to abstract-away direct interaction with a libuv loop.\n enum IoTask {"}, {"sha": "7b7fad5b9d44b2a24fc7e84dda5978d2caba0133", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d690ae43f77a6c4e1f8ba10afd32926e2459e8e/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=2d690ae43f77a6c4e1f8ba10afd32926e2459e8e", "patch": "@@ -22,9 +22,9 @@\n \n #[allow(non_camel_case_types)]; // C types\n \n-import libc::size_t;\n-import comm = core::comm;\n-import ptr::to_unsafe_ptr;\n+use libc::size_t;\n+use comm = core::comm;\n+use ptr::to_unsafe_ptr;\n \n // libuv struct mappings\n type uv_ip4_addr = {"}]}