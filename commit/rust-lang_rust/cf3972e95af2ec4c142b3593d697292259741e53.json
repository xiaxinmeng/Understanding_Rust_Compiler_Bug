{"sha": "cf3972e95af2ec4c142b3593d697292259741e53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMzk3MmU5NWFmMmVjNGMxNDJiMzU5M2Q2OTcyOTIyNTk3NDFlNTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-07T03:10:25Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-07T03:11:51Z"}, "message": "librustc: Propagate type uses correctly from method calls to the containing functions. rs=bugfix\n\nThis adds a new script, `monodebug.pl`. It can be used to diagnose problems stemming from incorrect combining of monomorphic generic instantiations.", "tree": {"sha": "49ecc0543d8cacee84da2140aca1f642386b57da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49ecc0543d8cacee84da2140aca1f642386b57da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf3972e95af2ec4c142b3593d697292259741e53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf3972e95af2ec4c142b3593d697292259741e53", "html_url": "https://github.com/rust-lang/rust/commit/cf3972e95af2ec4c142b3593d697292259741e53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf3972e95af2ec4c142b3593d697292259741e53/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddfd1eaeb5dcb75860768f5ab9f8bb8de5fad747", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddfd1eaeb5dcb75860768f5ab9f8bb8de5fad747", "html_url": "https://github.com/rust-lang/rust/commit/ddfd1eaeb5dcb75860768f5ab9f8bb8de5fad747"}], "stats": {"total": 88, "additions": 84, "deletions": 4}, "files": [{"sha": "324c576a4bda87d21aeb8977c0496b03d2fbb424", "filename": "src/etc/monodebug.pl", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/cf3972e95af2ec4c142b3593d697292259741e53/src%2Fetc%2Fmonodebug.pl", "raw_url": "https://github.com/rust-lang/rust/raw/cf3972e95af2ec4c142b3593d697292259741e53/src%2Fetc%2Fmonodebug.pl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmonodebug.pl?ref=cf3972e95af2ec4c142b3593d697292259741e53", "patch": "@@ -0,0 +1,80 @@\n+#!/usr/bin/perl\n+\n+#\n+# This is a tool that helps with debugging incorrect monomorphic instance collapse.\n+#\n+# To use:\n+#    $ RUST_LOG=rustc::middle::trans::monomorphize rustc ARGS 2>&1 >log.txt\n+#    $ ./monodebug.pl log.txt\n+#\n+# This will show all generics that got collapsed. You can inspect this list to find the instances\n+# that were mistakenly combined into one. Fixes will (most likely) be applied to type_use.rs.\n+#\n+# Questions about this tool go to pcwalton.\n+#\n+\n+use strict;\n+use warnings;\n+use Data::Dumper qw(Dumper);\n+use Text::Balanced qw(extract_bracketed);\n+\n+my %funcs;\n+while (<>) {\n+    chomp;\n+    /^rust: ~\"monomorphic_fn\\((.*)\"$/ or next;\n+    my $text = $1;\n+    $text =~ /fn_id=(\\{ crate: \\d+, node: \\d+ \\} \\([^)]+\\)), real_substs=(.*?), substs=(.*?), hash_id = \\@\\{ (.*) \\}$/ or next;\n+    my ($fn_id, $real_substs, $substs, $hash_id) = ($1, $2, $3, $4);\n+\n+    #print \"$hash_id\\n\";\n+    $hash_id =~ /^def: { crate: \\d+, node: \\d+ }, params: ~\\[ (.*) \\], impl_did_opt: (?:None|Some\\({ crate: \\d+, node: \\d+ }\\))$/ or next;\n+    my $params = $1;\n+\n+    my @real_substs;\n+    @real_substs = $real_substs =~ /\\\\\"(.*?)\\\\\"/g;\n+\n+    my @mono_params;\n+    while (1) {\n+        $params =~ s/^, //;\n+        if ($params =~ s/^mono_precise//) {\n+            extract_bracketed($params, '()');\n+            push @mono_params, 'precise';\n+            next;\n+        }\n+        if ($params =~ s/^mono_repr//) {\n+            my $sub = extract_bracketed($params, '()');\n+            push @mono_params, \"repr($sub)\";\n+            next;\n+        }\n+        if ($params =~ s/^mono_any//) {\n+            push @mono_params, \"any\";\n+            next;\n+        }\n+        last;\n+    }\n+\n+    my @key_params;\n+    for (my $i = 0; $i < @mono_params; ++$i) {\n+        if ($mono_params[$i] eq 'precise') {\n+            push @key_params, 'precise(' . $real_substs[$i] . ')';\n+        } else {\n+            push @key_params, $mono_params[$i];\n+        }\n+    }\n+\n+    my $key = \"$fn_id with \" . (join ', ', @key_params);\n+    $funcs{$key}{$real_substs} = 1;\n+}\n+\n+while (my ($key, $substs) = each %funcs) {\n+    my @params = keys %$substs;\n+    next if @params == 1;\n+\n+    print \"$key\\n\";\n+    print(('-' x (length $key)), $/);\n+    for my $param (@params) {\n+        print \"$param\\n\";\n+    }\n+    print \"\\n\";\n+}\n+"}, {"sha": "33200a2dd828aa74c6bf84e14bde7a174becea87", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf3972e95af2ec4c142b3593d697292259741e53/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3972e95af2ec4c142b3593d697292259741e53/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=cf3972e95af2ec4c142b3593d697292259741e53", "patch": "@@ -192,11 +192,11 @@ fn node_type_needs(cx: ctx, use_: uint, id: node_id) {\n     type_needs(cx, use_, ty::node_id_to_type(cx.ccx.tcx, id));\n }\n \n-fn mark_for_method_call(cx: ctx, e_id: node_id) {\n+fn mark_for_method_call(cx: ctx, e_id: node_id, callee_id: node_id) {\n     do option::iter(&cx.ccx.maps.method_map.find(e_id)) |mth| {\n         match mth.origin {\n           typeck::method_static(did) => {\n-            do cx.ccx.tcx.node_type_substs.find(e_id).iter |ts| {\n+            do cx.ccx.tcx.node_type_substs.find(callee_id).iter |ts| {\n                 let type_uses = type_uses_for(cx.ccx, did, ts.len());\n                 for vec::each2(type_uses, *ts) |uses, subst| {\n                     type_needs(cx, *uses, *subst)\n@@ -269,7 +269,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n         // the chosen field.\n         let base_ty = ty::node_id_to_type(cx.ccx.tcx, base.id);\n         type_needs(cx, use_repr, ty::type_autoderef(cx.ccx.tcx, base_ty));\n-        mark_for_method_call(cx, e.id);\n+        mark_for_method_call(cx, e.id, e.callee_id);\n       }\n       expr_log(_, _, val) => {\n         node_type_needs(cx, use_tydesc, val.id);\n@@ -299,7 +299,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n               _ => ()\n           }\n         }\n-        mark_for_method_call(cx, e.id);\n+        mark_for_method_call(cx, e.id, e.callee_id);\n       }\n       expr_paren(e) => mark_for_expr(cx, e),\n       expr_match(*) | expr_block(_) | expr_if(*) |"}]}