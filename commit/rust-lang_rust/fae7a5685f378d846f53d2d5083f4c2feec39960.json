{"sha": "fae7a5685f378d846f53d2d5083f4c2feec39960", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZTdhNTY4NWYzNzhkODQ2ZjUzZDJkNTA4M2Y0YzJmZWVjMzk5NjA=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-20T21:34:28Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-20T21:34:28Z"}, "message": "Refactor stack frames and pointers in preparation for aggregates like ADTs.", "tree": {"sha": "18b60ca6263d38ceff73ee69f87cb8b26b998bda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18b60ca6263d38ceff73ee69f87cb8b26b998bda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fae7a5685f378d846f53d2d5083f4c2feec39960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fae7a5685f378d846f53d2d5083f4c2feec39960", "html_url": "https://github.com/rust-lang/rust/commit/fae7a5685f378d846f53d2d5083f4c2feec39960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fae7a5685f378d846f53d2d5083f4c2feec39960/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f674aeba97748a7c55ef088c5b683a3981bee330", "url": "https://api.github.com/repos/rust-lang/rust/commits/f674aeba97748a7c55ef088c5b683a3981bee330", "html_url": "https://github.com/rust-lang/rust/commit/f674aeba97748a7c55ef088c5b683a3981bee330"}], "stats": {"total": 100, "additions": 87, "deletions": 13}, "files": [{"sha": "dc17516d5c5349da7694ab19cf3b1b7955322f8f", "filename": "src/interpreter.rs", "status": "modified", "additions": 87, "deletions": 13, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/fae7a5685f378d846f53d2d5083f4c2feec39960/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae7a5685f378d846f53d2d5083f4c2feec39960/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=fae7a5685f378d846f53d2d5083f4c2feec39960", "patch": "@@ -16,18 +16,65 @@ enum Value {\n     Func(def_id::DefId),\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+enum Pointer {\n+    Stack(usize),\n+    // TODO(tsion): Heap\n+}\n+\n+/// A stack frame:\n+///\n+/// ```text\n+/// +-----------------------+\n+/// | ReturnPointer         | return value\n+/// + - - - - - - - - - - - +\n+/// | Arg(0)                |\n+/// | Arg(1)                | arguments\n+/// | ...                   |\n+/// | Arg(num_args - 1)     |\n+/// + - - - - - - - - - - - +\n+/// | Var(0)                |\n+/// | Var(1)                | variables\n+/// | ...                   |\n+/// | Var(num_vars - 1)     |\n+/// + - - - - - - - - - - - +\n+/// | Temp(0)               |\n+/// | Temp(1)               | temporaries\n+/// | ...                   |\n+/// | Temp(num_temps - 1)   |\n+/// + - - - - - - - - - - - +\n+/// | Aggregates            | aggregates\n+/// +-----------------------+\n+/// ```\n #[derive(Debug)]\n struct Frame {\n     offset: usize,\n     num_args: usize,\n     num_vars: usize,\n     num_temps: usize,\n+    // aggregates\n }\n \n impl Frame {\n     fn size(&self) -> usize {\n         1 + self.num_args + self.num_vars + self.num_temps\n     }\n+\n+    fn return_val_offset(&self) -> usize {\n+        self.offset\n+    }\n+\n+    fn arg_offset(&self, i: u32) -> usize {\n+        self.offset + 1 + i as usize\n+    }\n+\n+    fn var_offset(&self, i: u32) -> usize {\n+        self.offset + 1 + self.num_args + i as usize\n+    }\n+\n+    fn temp_offset(&self, i: u32) -> usize {\n+        self.offset + 1 + self.num_args + self.num_vars + i as usize\n+    }\n }\n \n struct Interpreter<'a, 'tcx: 'a> {\n@@ -84,9 +131,9 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n \n                 match stmt.kind {\n                     Assign(ref lvalue, ref rvalue) => {\n-                        let index = self.eval_lvalue(lvalue);\n+                        let ptr = self.eval_lvalue(lvalue);\n                         let value = self.eval_rvalue(rvalue);\n-                        self.value_stack[index] = value;\n+                        self.write_pointer(ptr, value);\n                     }\n \n                     Drop(_kind, ref _lv) => {\n@@ -102,7 +149,7 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                 Goto { target } => block = target,\n \n                 Call { data: mir::CallData { ref destination, ref func, ref args }, targets } => {\n-                    let index = self.eval_lvalue(destination);\n+                    let ptr = self.eval_lvalue(destination);\n                     let func_val = self.eval_operand(func);\n \n                     if let Value::Func(def_id) = func_val {\n@@ -111,7 +158,10 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                         let arg_vals: Vec<Value> =\n                             args.iter().map(|arg| self.eval_operand(arg)).collect();\n \n-                        self.value_stack[index] = self.call(mir, &arg_vals);\n+                        // FIXME: Pass the destination lvalue such that the ReturnPointer inside\n+                        // the function call will point to the destination.\n+                        let return_val = self.call(mir, &arg_vals);\n+                        self.write_pointer(ptr, return_val);\n                         block = targets[0];\n                     } else {\n                         panic!(\"tried to call a non-function value: {:?}\", func_val);\n@@ -127,9 +177,9 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                 }\n \n                 SwitchInt { ref discr, switch_ty: _, ref values, ref targets } => {\n-                    let discr_val = &self.value_stack[self.eval_lvalue(discr)];\n+                    let discr_val = self.read_lvalue(discr);\n \n-                    let index = values.iter().position(|v| *discr_val == self.eval_constant(v))\n+                    let index = values.iter().position(|v| discr_val == self.eval_constant(v))\n                         .expect(\"discriminant matched no values\");\n \n                     block = targets[index];\n@@ -142,21 +192,21 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n             }\n         }\n \n-        let ret_val = self.value_stack[self.eval_lvalue(&mir::Lvalue::ReturnPointer)].clone();\n+        let ret_val = self.read_lvalue(&mir::Lvalue::ReturnPointer);\n         self.pop_stack_frame();\n         ret_val\n     }\n \n-    fn eval_lvalue(&self, lvalue: &mir::Lvalue) -> usize {\n+    fn eval_lvalue(&self, lvalue: &mir::Lvalue) -> Pointer {\n         use rustc_mir::repr::Lvalue::*;\n \n         let frame = self.call_stack.last().expect(\"missing call frame\");\n \n         match *lvalue {\n-            ReturnPointer => frame.offset,\n-            Arg(i)  => frame.offset + 1 + i as usize,\n-            Var(i)  => frame.offset + 1 + frame.num_args + i as usize,\n-            Temp(i) => frame.offset + 1 + frame.num_args + frame.num_vars + i as usize,\n+            ReturnPointer => Pointer::Stack(frame.return_val_offset()),\n+            Arg(i)  => Pointer::Stack(frame.arg_offset(i)),\n+            Var(i)  => Pointer::Stack(frame.var_offset(i)),\n+            Temp(i) => Pointer::Stack(frame.temp_offset(i)),\n             _ => unimplemented!(),\n         }\n     }\n@@ -203,6 +253,14 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                 }\n             }\n \n+            // Aggregate(mir::AggregateKind::Adt(ref adt_def, variant, substs), ref operands) => {\n+            //     let num_fields = adt_def.variants[variant].fields.len();\n+            //     debug_assert_eq!(num_fields, operands.len());\n+\n+            //     let data = operands.iter().map(|op| self.eval_operand(op)).collect();\n+            //     Value::Adt(variant, data)\n+            // }\n+\n             _ => unimplemented!(),\n         }\n     }\n@@ -211,7 +269,7 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n         use rustc_mir::repr::Operand::*;\n \n         match *op {\n-            Consume(ref lvalue) => self.value_stack[self.eval_lvalue(lvalue)].clone(),\n+            Consume(ref lvalue) => self.read_lvalue(lvalue),\n \n             Constant(ref constant) => {\n                 match constant.literal {\n@@ -240,6 +298,22 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n             Function(_def_id) => unimplemented!(),\n         }\n     }\n+\n+    fn read_lvalue(&self, lvalue: &mir::Lvalue) -> Value {\n+        self.read_pointer(self.eval_lvalue(lvalue))\n+    }\n+\n+    fn read_pointer(&self, p: Pointer) -> Value {\n+        match p {\n+            Pointer::Stack(offset) => self.value_stack[offset].clone(),\n+        }\n+    }\n+\n+    fn write_pointer(&mut self, p: Pointer, val: Value) {\n+        match p {\n+            Pointer::Stack(offset) => self.value_stack[offset] = val,\n+        }\n+    }\n }\n \n pub fn interpret_start_points<'tcx>(tcx: &ty::ctxt<'tcx>, mir_map: &MirMap<'tcx>) {"}]}