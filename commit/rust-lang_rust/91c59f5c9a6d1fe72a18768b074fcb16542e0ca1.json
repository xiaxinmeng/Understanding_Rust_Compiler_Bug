{"sha": "91c59f5c9a6d1fe72a18768b074fcb16542e0ca1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYzU5ZjVjOWE2ZDFmZTcyYTE4NzY4YjA3NGZjYjE2NTQyZTBjYTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-12T23:24:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-12T23:24:42Z"}, "message": "auto merge of #4880 : erickt/rust/hashmap-cleanup, r=catamorphism", "tree": {"sha": "9e062b207ccfbd3a7f8d36f3127967a3d79da162", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e062b207ccfbd3a7f8d36f3127967a3d79da162"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91c59f5c9a6d1fe72a18768b074fcb16542e0ca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91c59f5c9a6d1fe72a18768b074fcb16542e0ca1", "html_url": "https://github.com/rust-lang/rust/commit/91c59f5c9a6d1fe72a18768b074fcb16542e0ca1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91c59f5c9a6d1fe72a18768b074fcb16542e0ca1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc2d147847f2c8190250ddb25e3bc71b38cfaf0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc2d147847f2c8190250ddb25e3bc71b38cfaf0a", "html_url": "https://github.com/rust-lang/rust/commit/bc2d147847f2c8190250ddb25e3bc71b38cfaf0a"}, {"sha": "4fb4a4b66d5c988d79f77b081dabd8f62b880dfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb4a4b66d5c988d79f77b081dabd8f62b880dfe", "html_url": "https://github.com/rust-lang/rust/commit/4fb4a4b66d5c988d79f77b081dabd8f62b880dfe"}], "stats": {"total": 131, "additions": 98, "deletions": 33}, "files": [{"sha": "70358bab46874d4b15b8015dfd3421cb235d4f22", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 98, "deletions": 33, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/91c59f5c9a6d1fe72a18768b074fcb16542e0ca1/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91c59f5c9a6d1fe72a18768b074fcb16542e0ca1/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=91c59f5c9a6d1fe72a18768b074fcb16542e0ca1", "patch": "@@ -108,19 +108,17 @@ pub mod linear {\n         }\n \n         #[inline(always)]\n-        pure fn bucket_for_key(&self, buckets: &[Option<Bucket<K, V>>],\n-                               k: &K) -> SearchResult {\n+        pure fn bucket_for_key(&self, k: &K) -> SearchResult {\n             let hash = k.hash_keyed(self.k0, self.k1) as uint;\n-            self.bucket_for_key_with_hash(buckets, hash, k)\n+            self.bucket_for_key_with_hash(hash, k)\n         }\n \n         #[inline(always)]\n         pure fn bucket_for_key_with_hash(&self,\n-                                         buckets: &[Option<Bucket<K, V>>],\n                                          hash: uint,\n                                          k: &K) -> SearchResult {\n             let _ = for self.bucket_sequence(hash) |i| {\n-                match buckets[i] {\n+                match self.buckets[i] {\n                     Some(ref bkt) => if bkt.hash == hash && *k == bkt.key {\n                         return FoundEntry(i);\n                     },\n@@ -157,11 +155,19 @@ pub mod linear {\n             }\n         }\n \n+        #[inline(always)]\n+        pure fn value_for_bucket(&self, idx: uint) -> &self/V {\n+            match self.buckets[idx] {\n+                Some(ref bkt) => &bkt.value,\n+                None => die!(~\"LinearMap::find: internal logic error\"),\n+            }\n+        }\n+\n         /// Inserts the key value pair into the buckets.\n         /// Assumes that there will be a bucket.\n         /// True if there was no previous entry with that key\n         fn insert_internal(&mut self, hash: uint, k: K, v: V) -> bool {\n-            match self.bucket_for_key_with_hash(self.buckets, hash, &k) {\n+            match self.bucket_for_key_with_hash(hash, &k) {\n                 TableFull => { die!(~\"Internal logic error\"); }\n                 FoundHole(idx) => {\n                     debug!(\"insert fresh (%?->%?) at idx %?, hash %?\",\n@@ -196,8 +202,7 @@ pub mod linear {\n             //\n             // I found this explanation elucidating:\n             // http://www.maths.lse.ac.uk/Courses/MA407/del-hash.pdf\n-            let mut idx = match self.bucket_for_key_with_hash(self.buckets,\n-                                                              hash, k) {\n+            let mut idx = match self.bucket_for_key_with_hash(hash, k) {\n                 TableFull | FoundHole(_) => return None,\n                 FoundEntry(idx) => idx\n             };\n@@ -273,7 +278,7 @@ pub mod linear {\n     impl <K: Hash IterBytes Eq, V> LinearMap<K, V>: Map<K, V> {\n         /// Return true if the map contains a value for the specified key\n         pure fn contains_key(&self, k: &K) -> bool {\n-            match self.bucket_for_key(self.buckets, k) {\n+            match self.bucket_for_key(k) {\n                 FoundEntry(_) => {true}\n                 TableFull | FoundHole(_) => {false}\n             }\n@@ -291,20 +296,9 @@ pub mod linear {\n \n         /// Return the value corresponding to the key in the map\n         pure fn find(&self, k: &K) -> Option<&self/V> {\n-            match self.bucket_for_key(self.buckets, k) {\n-                FoundEntry(idx) => {\n-                    match self.buckets[idx] {\n-                        Some(ref bkt) => {\n-                            Some(&bkt.value)\n-                        }\n-                        None => {\n-                            die!(~\"LinearMap::find: internal logic error\")\n-                        }\n-                    }\n-                }\n-                TableFull | FoundHole(_) => {\n-                    None\n-                }\n+            match self.bucket_for_key(k) {\n+                FoundEntry(idx) => Some(self.value_for_bucket(idx)),\n+                TableFull | FoundHole(_) => None,\n             }\n         }\n \n@@ -364,6 +358,63 @@ pub mod linear {\n             old_value\n         }\n \n+        /// Return the value corresponding to the key in the map, or insert\n+        /// and return the value if it doesn't exist.\n+        fn find_or_insert(&mut self, k: K, v: V) -> &self/V {\n+            if self.size >= self.resize_at {\n+                // n.b.: We could also do this after searching, so\n+                // that we do not resize if this call to insert is\n+                // simply going to update a key in place.  My sense\n+                // though is that it's worse to have to search through\n+                // buckets to find the right spot twice than to just\n+                // resize in this corner case.\n+                self.expand();\n+            }\n+\n+            let hash = k.hash_keyed(self.k0, self.k1) as uint;\n+            let idx = match self.bucket_for_key_with_hash(hash, &k) {\n+                TableFull => die!(~\"Internal logic error\"),\n+                FoundEntry(idx) => idx,\n+                FoundHole(idx) => {\n+                    self.buckets[idx] = Some(Bucket{hash: hash, key: k,\n+                                         value: v});\n+                    self.size += 1;\n+                    idx\n+                },\n+            };\n+\n+            self.value_for_bucket(idx)\n+        }\n+\n+        /// Return the value corresponding to the key in the map, or create,\n+        /// insert, and return a new value if it doesn't exist.\n+        fn find_or_insert_with(&mut self, k: K, f: fn(&K) -> V) -> &self/V {\n+            if self.size >= self.resize_at {\n+                // n.b.: We could also do this after searching, so\n+                // that we do not resize if this call to insert is\n+                // simply going to update a key in place.  My sense\n+                // though is that it's worse to have to search through\n+                // buckets to find the right spot twice than to just\n+                // resize in this corner case.\n+                self.expand();\n+            }\n+\n+            let hash = k.hash_keyed(self.k0, self.k1) as uint;\n+            let idx = match self.bucket_for_key_with_hash(hash, &k) {\n+                TableFull => die!(~\"Internal logic error\"),\n+                FoundEntry(idx) => idx,\n+                FoundHole(idx) => {\n+                    let v = f(&k);\n+                    self.buckets[idx] = Some(Bucket{hash: hash, key: k,\n+                                         value: v});\n+                    self.size += 1;\n+                    idx\n+                },\n+            };\n+\n+            self.value_for_bucket(idx)\n+        }\n+\n         fn consume(&mut self, f: fn(K, V)) {\n             let mut buckets = ~[];\n             self.buckets <-> buckets;\n@@ -521,7 +572,7 @@ mod test_map {\n     use uint;\n \n     #[test]\n-    pub fn inserts() {\n+    pub fn test_insert() {\n         let mut m = LinearMap::new();\n         assert m.insert(1, 2);\n         assert m.insert(2, 4);\n@@ -530,7 +581,7 @@ mod test_map {\n     }\n \n     #[test]\n-    pub fn overwrite() {\n+    pub fn test_insert_overwrite() {\n         let mut m = LinearMap::new();\n         assert m.insert(1, 2);\n         assert *m.get(&1) == 2;\n@@ -539,7 +590,7 @@ mod test_map {\n     }\n \n     #[test]\n-    pub fn conflicts() {\n+    pub fn test_insert_conflicts() {\n         let mut m = linear::linear_map_with_capacity(4);\n         assert m.insert(1, 2);\n         assert m.insert(5, 3);\n@@ -550,7 +601,7 @@ mod test_map {\n     }\n \n     #[test]\n-    pub fn conflict_remove() {\n+    pub fn test_conflict_remove() {\n         let mut m = linear::linear_map_with_capacity(4);\n         assert m.insert(1, 2);\n         assert m.insert(5, 3);\n@@ -561,7 +612,7 @@ mod test_map {\n     }\n \n     #[test]\n-    pub fn empty() {\n+    pub fn test_is_empty() {\n         let mut m = linear::linear_map_with_capacity(4);\n         assert m.insert(1, 2);\n         assert !m.is_empty();\n@@ -570,23 +621,37 @@ mod test_map {\n     }\n \n     #[test]\n-    pub fn pops() {\n+    pub fn test_pop() {\n         let mut m = LinearMap::new();\n         m.insert(1, 2);\n         assert m.pop(&1) == Some(2);\n         assert m.pop(&1) == None;\n     }\n \n     #[test]\n-    pub fn swaps() {\n+    pub fn test_swap() {\n         let mut m = LinearMap::new();\n         assert m.swap(1, 2) == None;\n         assert m.swap(1, 3) == Some(2);\n         assert m.swap(1, 4) == Some(3);\n     }\n \n     #[test]\n-    pub fn consumes() {\n+    pub fn test_find_or_insert() {\n+        let mut m = LinearMap::new::<int, int>();\n+        assert m.find_or_insert(1, 2) == &2;\n+        assert m.find_or_insert(1, 3) == &2;\n+    }\n+\n+    #[test]\n+    pub fn test_find_or_insert_with() {\n+        let mut m = LinearMap::new::<int, int>();\n+        assert m.find_or_insert_with(1, |_| 2) == &2;\n+        assert m.find_or_insert_with(1, |_| 3) == &2;\n+    }\n+\n+    #[test]\n+    pub fn test_consume() {\n         let mut m = LinearMap::new();\n         assert m.insert(1, 2);\n         assert m.insert(2, 3);\n@@ -601,7 +666,7 @@ mod test_map {\n     }\n \n     #[test]\n-    pub fn iterate() {\n+    pub fn test_iterate() {\n         let mut m = linear::linear_map_with_capacity(4);\n         for uint::range(0, 32) |i| {\n             assert m.insert(i, i*2);\n@@ -615,7 +680,7 @@ mod test_map {\n     }\n \n     #[test]\n-    pub fn find() {\n+    pub fn test_find() {\n         let mut m = LinearMap::new();\n         assert m.find(&1).is_none();\n         m.insert(1, 2);"}]}