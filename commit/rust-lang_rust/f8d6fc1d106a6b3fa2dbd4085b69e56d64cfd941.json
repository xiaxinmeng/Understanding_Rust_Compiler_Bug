{"sha": "f8d6fc1d106a6b3fa2dbd4085b69e56d64cfd941", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZDZmYzFkMTA2YTZiM2ZhMmRiZDQwODViNjllNTZkNjRjZmQ5NDE=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-04-03T20:21:12Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-04-03T20:53:46Z"}, "message": "Open-code Fuse's Option matches", "tree": {"sha": "3da347a142d4fdf2b9b74844758cd37f0eaeeead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3da347a142d4fdf2b9b74844758cd37f0eaeeead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8d6fc1d106a6b3fa2dbd4085b69e56d64cfd941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d6fc1d106a6b3fa2dbd4085b69e56d64cfd941", "html_url": "https://github.com/rust-lang/rust/commit/f8d6fc1d106a6b3fa2dbd4085b69e56d64cfd941", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8d6fc1d106a6b3fa2dbd4085b69e56d64cfd941/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6fe99c798cb65280a9a56f442b371adcb7b8aa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6fe99c798cb65280a9a56f442b371adcb7b8aa2", "html_url": "https://github.com/rust-lang/rust/commit/f6fe99c798cb65280a9a56f442b371adcb7b8aa2"}], "stats": {"total": 77, "additions": 42, "deletions": 35}, "files": [{"sha": "bdfeb75a868c8290094dbc0b2b5251585345d634", "filename": "src/libcore/iter/adapters/fuse.rs", "status": "modified", "additions": 42, "deletions": 35, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/f8d6fc1d106a6b3fa2dbd4085b69e56d64cfd941/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d6fc1d106a6b3fa2dbd4085b69e56d64cfd941/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs?ref=f8d6fc1d106a6b3fa2dbd4085b69e56d64cfd941", "patch": "@@ -28,6 +28,22 @@ impl<I> Fuse<I> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I> FusedIterator for Fuse<I> where I: Iterator {}\n \n+/// Fuse the iterator if the expression is `None`.\n+macro_rules! fuse {\n+    ($self:ident . iter . $($call:tt)+) => {\n+        match $self.iter {\n+            Some(ref mut iter) => match iter.$($call)+ {\n+                None => {\n+                    $self.iter = None;\n+                    None\n+                }\n+                item => item,\n+            },\n+            None => None,\n+        }\n+    };\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I> Iterator for Fuse<I>\n where\n@@ -37,35 +53,36 @@ where\n \n     #[inline]\n     default fn next(&mut self) -> Option<<I as Iterator>::Item> {\n-        let next = self.iter.as_mut()?.next();\n-        if next.is_none() {\n-            self.iter = None;\n-        }\n-        next\n+        fuse!(self.iter.next())\n     }\n \n     #[inline]\n     default fn nth(&mut self, n: usize) -> Option<I::Item> {\n-        let nth = self.iter.as_mut()?.nth(n);\n-        if nth.is_none() {\n-            self.iter = None;\n-        }\n-        nth\n+        fuse!(self.iter.nth(n))\n     }\n \n     #[inline]\n     default fn last(self) -> Option<I::Item> {\n-        self.iter?.last()\n+        match self.iter {\n+            Some(iter) => iter.last(),\n+            None => None,\n+        }\n     }\n \n     #[inline]\n     default fn count(self) -> usize {\n-        self.iter.map_or(0, I::count)\n+        match self.iter {\n+            Some(iter) => iter.count(),\n+            None => 0,\n+        }\n     }\n \n     #[inline]\n     default fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.iter.as_ref().map_or((0, Some(0)), I::size_hint)\n+        match self.iter {\n+            Some(ref iter) => iter.size_hint(),\n+            None => (0, Some(0)),\n+        }\n     }\n \n     #[inline]\n@@ -98,11 +115,7 @@ where\n     where\n         P: FnMut(&Self::Item) -> bool,\n     {\n-        let found = self.iter.as_mut()?.find(predicate);\n-        if found.is_none() {\n-            self.iter = None;\n-        }\n-        found\n+        fuse!(self.iter.find(predicate))\n     }\n }\n \n@@ -113,20 +126,12 @@ where\n {\n     #[inline]\n     default fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n-        let next = self.iter.as_mut()?.next_back();\n-        if next.is_none() {\n-            self.iter = None;\n-        }\n-        next\n+        fuse!(self.iter.next_back())\n     }\n \n     #[inline]\n     default fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n-        let nth = self.iter.as_mut()?.nth_back(n);\n-        if nth.is_none() {\n-            self.iter = None;\n-        }\n-        nth\n+        fuse!(self.iter.nth_back(n))\n     }\n \n     #[inline]\n@@ -159,11 +164,7 @@ where\n     where\n         P: FnMut(&Self::Item) -> bool,\n     {\n-        let found = self.iter.as_mut()?.rfind(predicate);\n-        if found.is_none() {\n-            self.iter = None;\n-        }\n-        found\n+        fuse!(self.iter.rfind(predicate))\n     }\n }\n \n@@ -173,11 +174,17 @@ where\n     I: ExactSizeIterator,\n {\n     default fn len(&self) -> usize {\n-        self.iter.as_ref().map_or(0, I::len)\n+        match self.iter {\n+            Some(ref iter) => iter.len(),\n+            None => 0,\n+        }\n     }\n \n     default fn is_empty(&self) -> bool {\n-        self.iter.as_ref().map_or(true, I::is_empty)\n+        match self.iter {\n+            Some(ref iter) => iter.is_empty(),\n+            None => true,\n+        }\n     }\n }\n "}]}