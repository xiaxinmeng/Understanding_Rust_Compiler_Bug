{"sha": "ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMDhjNmJjNGRhMmQxMjU2ZmU0OWUzZWEwMjViZGY1YjA1MzViMjE=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-06-24T14:45:19Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-06-25T13:07:25Z"}, "message": "Fix new broken tests", "tree": {"sha": "3ca028b30290b74834b00542d9b2629320bea24a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ca028b30290b74834b00542d9b2629320bea24a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "html_url": "https://github.com/rust-lang/rust/commit/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15eae851de9e27d57daded0d116a6ad2878009e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/15eae851de9e27d57daded0d116a6ad2878009e7", "html_url": "https://github.com/rust-lang/rust/commit/15eae851de9e27d57daded0d116a6ad2878009e7"}], "stats": {"total": 130, "additions": 67, "deletions": 63}, "files": [{"sha": "f5a42670fdd1c62402b243bd17eb1342ad8e452e", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed?ref=ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "patch": "@@ -9,20 +9,20 @@ extern crate or_pattern;\n \n macro_rules! foo { ($x:pat_param | $y:pat) => {} }\n //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n macro_rules! bar { ($($x:pat_param)+ | $($y:pat)+) => {} }\n //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n \n macro_rules! baz { ($x:pat_param | $y:pat_param) => {} } // should be ok\n macro_rules! qux { ($x:pat_param | $y:pat) => {} } // should be ok\n macro_rules! ogg { ($x:pat_param | $y:pat_param) => {} }\n //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n macro_rules! match_any {\n     ( $expr:expr , $( $( $pat:pat_param )|+ => $expr_arm:expr ),+ ) => {\n         //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-        //~| WARN this was previously accepted\n+        //~| WARN this is accepted in the current edition\n         match $expr {\n             $(\n                 $( $pat => $expr_arm, )+"}, {"sha": "d6620f45f62705d371b1c9b65009a534c18aab60", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs?ref=ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "patch": "@@ -9,20 +9,20 @@ extern crate or_pattern;\n \n macro_rules! foo { ($x:pat | $y:pat) => {} }\n //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} }\n //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n \n macro_rules! baz { ($x:pat_param | $y:pat_param) => {} } // should be ok\n macro_rules! qux { ($x:pat_param | $y:pat) => {} } // should be ok\n macro_rules! ogg { ($x:pat | $y:pat_param) => {} }\n //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-//~| WARN this was previously accepted\n+//~| WARN this is accepted in the current edition\n macro_rules! match_any {\n     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n         //~^ ERROR the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n-        //~| WARN this was previously accepted\n+        //~| WARN this is accepted in the current edition\n         match $expr {\n             $(\n                 $( $pat => $expr_arm, )+"}, {"sha": "a48c926315403fb37a97c7d1efd9df94fd5f0600", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr?ref=ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(or_patterns_back_compat)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n@@ -18,7 +18,7 @@ error: the meaning of the `pat` fragment specifier is changing in Rust 2021, whi\n LL | macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} }\n    |                       ^^^^^^ help: use pat_param to preserve semantics: `$x:pat_param`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n@@ -27,7 +27,7 @@ error: the meaning of the `pat` fragment specifier is changing in Rust 2021, whi\n LL | macro_rules! ogg { ($x:pat | $y:pat_param) => {} }\n    |                     ^^^^^^ help: use pat_param to preserve semantics: `$x:pat_param`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n@@ -36,7 +36,7 @@ error: the meaning of the `pat` fragment specifier is changing in Rust 2021, whi\n LL |     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n    |                          ^^^^^^^^ help: use pat_param to preserve semantics: `$pat:pat_param`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n \n error: aborting due to 4 previous errors"}, {"sha": "725d5aa234eee982217c97c418a9030163c47e75", "filename": "src/test/ui/rust-2021/future-prelude-collision-imported.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.fixed?ref=ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "patch": "@@ -26,7 +26,7 @@ mod a {\n         // In this case, we can just use `TryIntoU32`\n         let _: u32 = TryIntoU32::try_into(3u8).unwrap();\n         //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-        //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+        //~^^ WARNING this is accepted in the current edition\n     }\n }\n \n@@ -39,7 +39,7 @@ mod b {\n         // the path `crate::m::TryIntoU32` (with which it was imported).\n         let _: u32 = crate::m::TryIntoU32::try_into(3u8).unwrap();\n         //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-        //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+        //~^^ WARNING this is accepted in the current edition\n     }\n }\n \n@@ -52,7 +52,7 @@ mod c {\n         // the path `super::m::TryIntoU32` (with which it was imported).\n         let _: u32 = super::m::TryIntoU32::try_into(3u8).unwrap();\n         //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-        //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+        //~^^ WARNING this is accepted in the current edition\n     }\n }\n "}, {"sha": "6ca9a919f3cd7fca56755c1bce712ed346d927d2", "filename": "src/test/ui/rust-2021/future-prelude-collision-imported.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.rs?ref=ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "patch": "@@ -26,7 +26,7 @@ mod a {\n         // In this case, we can just use `TryIntoU32`\n         let _: u32 = 3u8.try_into().unwrap();\n         //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-        //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+        //~^^ WARNING this is accepted in the current edition\n     }\n }\n \n@@ -39,7 +39,7 @@ mod b {\n         // the path `crate::m::TryIntoU32` (with which it was imported).\n         let _: u32 = 3u8.try_into().unwrap();\n         //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-        //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+        //~^^ WARNING this is accepted in the current edition\n     }\n }\n \n@@ -52,7 +52,7 @@ mod c {\n         // the path `super::m::TryIntoU32` (with which it was imported).\n         let _: u32 = 3u8.try_into().unwrap();\n         //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-        //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+        //~^^ WARNING this is accepted in the current edition\n     }\n }\n "}, {"sha": "8889485c9172996103abc316a3513654841a2112", "filename": "src/test/ui/rust-2021/future-prelude-collision-imported.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.stderr?ref=ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(future_prelude_collision)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n@@ -18,7 +18,7 @@ warning: trait method `try_into` will become ambiguous in Rust 2021\n LL |         let _: u32 = 3u8.try_into().unwrap();\n    |                      ^^^^^^^^^^^^^^ help: disambiguate the associated function: `crate::m::TryIntoU32::try_into(3u8)`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n@@ -27,7 +27,7 @@ warning: trait method `try_into` will become ambiguous in Rust 2021\n LL |         let _: u32 = 3u8.try_into().unwrap();\n    |                      ^^^^^^^^^^^^^^ help: disambiguate the associated function: `super::m::TryIntoU32::try_into(3u8)`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: 3 warnings emitted"}, {"sha": "4bcbe6b094afdb40244b5b4befd694ec5dbe4f38", "filename": "src/test/ui/rust-2021/future-prelude-collision.fixed", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.fixed?ref=ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "patch": "@@ -38,12 +38,14 @@ impl TryIntoU32 for *const u16 {\n \n trait FromByteIterator {\n     fn from_iter<T>(iter: T) -> Self\n-        where T: Iterator<Item = u8>;\n+    where\n+        T: Iterator<Item = u8>;\n }\n \n impl FromByteIterator for Vec<u8> {\n     fn from_iter<T>(iter: T) -> Self\n-        where T: Iterator<Item = u8>\n+    where\n+        T: Iterator<Item = u8>,\n     {\n         iter.collect()\n     }\n@@ -53,44 +55,44 @@ fn main() {\n     // test dot-call that will break in 2021 edition\n     let _: u32 = TryIntoU32::try_into(3u8).unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test associated function call that will break in 2021 edition\n     let _ = <u32 as TryFromU8>::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test reverse turbofish too\n     let _ = <Vec<u8> as FromByteIterator>::from_iter(vec![1u8, 2, 3, 4, 5, 6].into_iter());\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // negative testing lint (this line should *not* emit a warning)\n     let _: u32 = TryFromU8::try_from(3u8).unwrap();\n \n     // test type omission\n     let _: u32 = <_ as TryFromU8>::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test autoderef\n     let _: u32 = TryIntoU32::try_into(*(&3u8)).unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test autoref\n     let _: u32 = TryIntoU32::try_into(&3.0).unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     let mut data = 3u16;\n     let mut_ptr = std::ptr::addr_of_mut!(data);\n     let _: u32 = TryIntoU32::try_into(mut_ptr as *const _).unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     type U32Alias = u32;\n     let _ = <U32Alias as TryFromU8>::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n }"}, {"sha": "bc23a8a92a6b5f00229ca19ab7a50e55aa696b90", "filename": "src/test/ui/rust-2021/future-prelude-collision.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.rs?ref=ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "patch": "@@ -38,12 +38,14 @@ impl TryIntoU32 for *const u16 {\n \n trait FromByteIterator {\n     fn from_iter<T>(iter: T) -> Self\n-        where T: Iterator<Item = u8>;\n+    where\n+        T: Iterator<Item = u8>;\n }\n \n impl FromByteIterator for Vec<u8> {\n     fn from_iter<T>(iter: T) -> Self\n-        where T: Iterator<Item = u8>\n+    where\n+        T: Iterator<Item = u8>,\n     {\n         iter.collect()\n     }\n@@ -53,44 +55,44 @@ fn main() {\n     // test dot-call that will break in 2021 edition\n     let _: u32 = 3u8.try_into().unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test associated function call that will break in 2021 edition\n     let _ = u32::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test reverse turbofish too\n     let _ = <Vec<u8>>::from_iter(vec![1u8, 2, 3, 4, 5, 6].into_iter());\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // negative testing lint (this line should *not* emit a warning)\n     let _: u32 = TryFromU8::try_from(3u8).unwrap();\n \n     // test type omission\n     let _: u32 = <_>::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test autoderef\n     let _: u32 = (&3u8).try_into().unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     // test autoref\n     let _: u32 = 3.0.try_into().unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     let mut data = 3u16;\n     let mut_ptr = std::ptr::addr_of_mut!(data);\n     let _: u32 = mut_ptr.try_into().unwrap();\n     //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n \n     type U32Alias = u32;\n     let _ = U32Alias::try_from(3u8).unwrap();\n     //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n }"}, {"sha": "e167468ab19719e13158fcc6c3e129a7a4c0527e", "filename": "src/test/ui/rust-2021/future-prelude-collision.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.stderr?ref=ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "patch": "@@ -1,5 +1,5 @@\n warning: trait method `try_into` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:54:18\n+  --> $DIR/future-prelude-collision.rs:56:18\n    |\n LL |     let _: u32 = 3u8.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(3u8)`\n@@ -9,70 +9,70 @@ note: the lint level is defined here\n    |\n LL | #![warn(future_prelude_collision)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:59:13\n+  --> $DIR/future-prelude-collision.rs:61:13\n    |\n LL |     let _ = u32::try_from(3u8).unwrap();\n    |             ^^^^^^^^^^^^^ help: disambiguate the associated function: `<u32 as TryFromU8>::try_from`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:64:13\n+  --> $DIR/future-prelude-collision.rs:66:13\n    |\n LL |     let _ = <Vec<u8>>::from_iter(vec![1u8, 2, 3, 4, 5, 6].into_iter());\n    |             ^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Vec<u8> as FromByteIterator>::from_iter`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:72:18\n+  --> $DIR/future-prelude-collision.rs:74:18\n    |\n LL |     let _: u32 = <_>::try_from(3u8).unwrap();\n    |                  ^^^^^^^^^^^^^ help: disambiguate the associated function: `<_ as TryFromU8>::try_from`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:77:18\n+  --> $DIR/future-prelude-collision.rs:79:18\n    |\n LL |     let _: u32 = (&3u8).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(*(&3u8))`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:82:18\n+  --> $DIR/future-prelude-collision.rs:84:18\n    |\n LL |     let _: u32 = 3.0.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(&3.0)`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:88:18\n+  --> $DIR/future-prelude-collision.rs:90:18\n    |\n LL |     let _: u32 = mut_ptr.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(mut_ptr as *const _)`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n-  --> $DIR/future-prelude-collision.rs:93:13\n+  --> $DIR/future-prelude-collision.rs:95:13\n    |\n LL |     let _ = U32Alias::try_from(3u8).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<U32Alias as TryFromU8>::try_from`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: 8 warnings emitted"}, {"sha": "d1a085f23a01c9ede8629dae15366309c8e74cc4", "filename": "src/test/ui/rust-2021/generic-type-collision.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.fixed?ref=ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "patch": "@@ -14,5 +14,5 @@ impl<T> MyTrait<()> for Vec<T> {\n fn main() {\n     <Vec<i32> as MyTrait<_>>::from_iter(None);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n }"}, {"sha": "5069fba396ec6b4a638bb8d628eb43133a9e454f", "filename": "src/test/ui/rust-2021/generic-type-collision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.rs?ref=ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "patch": "@@ -14,5 +14,5 @@ impl<T> MyTrait<()> for Vec<T> {\n fn main() {\n     <Vec<i32>>::from_iter(None);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n-    //~^^ WARNING this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+    //~^^ WARNING this is accepted in the current edition\n }"}, {"sha": "05591c3d4487d86d00947f49408bb70e246e5eee", "filename": "src/test/ui/rust-2021/generic-type-collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr?ref=ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(future_prelude_collision)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: 1 warning emitted"}, {"sha": "cf6287a758f9134a86b17b1ca5f715369f1fe2d8", "filename": "src/test/ui/rust-2021/inherent-dyn-collision.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.fixed?ref=ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "patch": "@@ -40,7 +40,7 @@ mod inner {\n     pub fn test() -> u32 {\n         (&*get_dyn_trait()).try_into().unwrap()\n         //~^ WARNING trait method `try_into` will become ambiguous\n-        //~| WARNING this was previously accepted\n+        //~| WARNING this is accepted in the current edition\n     }\n }\n "}, {"sha": "0349ad5b6415af05c9e106a91ac492d543646514", "filename": "src/test/ui/rust-2021/inherent-dyn-collision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.rs?ref=ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "patch": "@@ -40,7 +40,7 @@ mod inner {\n     pub fn test() -> u32 {\n         get_dyn_trait().try_into().unwrap()\n         //~^ WARNING trait method `try_into` will become ambiguous\n-        //~| WARNING this was previously accepted\n+        //~| WARNING this is accepted in the current edition\n     }\n }\n "}, {"sha": "9e95419715e319843eda97f4b955ec74db73c95f", "filename": "src/test/ui/rust-2021/inherent-dyn-collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.stderr?ref=ef08c6bc4da2d1256fe49e3ea025bdf5b0535b21", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(future_prelude_collision)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n \n warning: 1 warning emitted"}]}