{"sha": "422d54bed212b4f0356fb56bbc31c8deef7a6b77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMmQ1NGJlZDIxMmI0ZjAzNTZmYjU2YmJjMzFjOGRlZWY3YTZiNzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-05T03:41:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-05T03:41:44Z"}, "message": "auto merge of #14610 : alexcrichton/rust/issue-14008, r=brson\n\nThis commit removes the <M: Any + Send> type parameter from Option::expect in\r\nfavor of just taking a hard-coded `&str` argument. This allows this function to\r\nmove into libcore.\r\n\r\nPrevious code using strings with `expect` will continue to work, but code using\r\nthis implicitly to transmit task failure will need to unwrap manually with a\r\n`match` statement.\r\n\r\n[breaking-change]\r\nCloses #14008", "tree": {"sha": "b343a08725e1e61bb02b3a0fa1427204e7a47587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b343a08725e1e61bb02b3a0fa1427204e7a47587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/422d54bed212b4f0356fb56bbc31c8deef7a6b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/422d54bed212b4f0356fb56bbc31c8deef7a6b77", "html_url": "https://github.com/rust-lang/rust/commit/422d54bed212b4f0356fb56bbc31c8deef7a6b77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/422d54bed212b4f0356fb56bbc31c8deef7a6b77/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "193574ae1e3881f95afb8b3e385a9e410ac6798a", "url": "https://api.github.com/repos/rust-lang/rust/commits/193574ae1e3881f95afb8b3e385a9e410ac6798a", "html_url": "https://github.com/rust-lang/rust/commit/193574ae1e3881f95afb8b3e385a9e410ac6798a"}, {"sha": "896cfcc67fb8d3e53a5dcf138f79909891bf940e", "url": "https://api.github.com/repos/rust-lang/rust/commits/896cfcc67fb8d3e53a5dcf138f79909891bf940e", "html_url": "https://github.com/rust-lang/rust/commit/896cfcc67fb8d3e53a5dcf138f79909891bf940e"}], "stats": {"total": 226, "additions": 31, "deletions": 195}, "files": [{"sha": "10428244b71157ff1669e45423d2f64e73a96ba2", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=422d54bed212b4f0356fb56bbc31c8deef7a6b77", "patch": "@@ -361,7 +361,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                          ],\n                          vec!((\"\".to_string(), \"\".to_string())),\n                          Some(\"\".to_string()))\n-                .expect(format!(\"failed to exec `{}`\", config.adb_path));\n+                .expect(format!(\"failed to exec `{}`\", config.adb_path).as_slice());\n \n             procsrv::run(\"\",\n                          config.adb_path.as_slice(),\n@@ -372,7 +372,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                          ],\n                          vec!((\"\".to_string(), \"\".to_string())),\n                          Some(\"\".to_string()))\n-                .expect(format!(\"failed to exec `{}`\", config.adb_path));\n+                .expect(format!(\"failed to exec `{}`\", config.adb_path).as_slice());\n \n             let adb_arg = format!(\"export LD_LIBRARY_PATH={}; \\\n                                    gdbserver :5039 {}/{}\",\n@@ -392,7 +392,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                                                       vec!((\"\".to_string(),\n                                                             \"\".to_string())),\n                                                       Some(\"\".to_string()))\n-                .expect(format!(\"failed to exec `{}`\", config.adb_path));\n+                .expect(format!(\"failed to exec `{}`\", config.adb_path).as_slice());\n             loop {\n                 //waiting 1 second for gdbserver start\n                 timer::sleep(1000);\n@@ -428,7 +428,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                              debugger_opts.as_slice(),\n                              vec!((\"\".to_string(), \"\".to_string())),\n                              None)\n-                .expect(format!(\"failed to exec `{}`\", gdb_path));\n+                .expect(format!(\"failed to exec `{}`\", gdb_path).as_slice());\n             let cmdline = {\n                 let cmdline = make_cmdline(\"\",\n                                            \"arm-linux-androideabi-gdb\",\n@@ -1207,7 +1207,7 @@ fn program_output(config: &Config, testfile: &Path, lib_path: &str, prog: String\n                      prog.as_slice(),\n                      args.as_slice(),\n                      env,\n-                     input).expect(format!(\"failed to exec `{}`\", prog));\n+                     input).expect(format!(\"failed to exec `{}`\", prog).as_slice());\n     dump_output(config, testfile, out.as_slice(), err.as_slice());\n     return ProcRes {\n         status: status,\n@@ -1333,7 +1333,7 @@ fn _arm_exec_compiled_test(config: &Config,\n                                    ],\n                                    vec!((\"\".to_string(), \"\".to_string())),\n                                    Some(\"\".to_string()))\n-        .expect(format!(\"failed to exec `{}`\", config.adb_path));\n+        .expect(format!(\"failed to exec `{}`\", config.adb_path).as_slice());\n \n     if config.verbose {\n         println!(\"push ({}) {} {} {}\",\n@@ -1363,7 +1363,7 @@ fn _arm_exec_compiled_test(config: &Config,\n                  config.adb_path.as_slice(),\n                  runargs.as_slice(),\n                  vec!((\"\".to_string(), \"\".to_string())), Some(\"\".to_string()))\n-        .expect(format!(\"failed to exec `{}`\", config.adb_path));\n+        .expect(format!(\"failed to exec `{}`\", config.adb_path).as_slice());\n \n     // get exitcode of result\n     runargs = Vec::new();\n@@ -1377,7 +1377,7 @@ fn _arm_exec_compiled_test(config: &Config,\n                      runargs.as_slice(),\n                      vec!((\"\".to_string(), \"\".to_string())),\n                      Some(\"\".to_string()))\n-        .expect(format!(\"failed to exec `{}`\", config.adb_path));\n+        .expect(format!(\"failed to exec `{}`\", config.adb_path).as_slice());\n \n     let mut exitcode: int = 0;\n     for c in exitcode_out.as_slice().chars() {\n@@ -1400,7 +1400,7 @@ fn _arm_exec_compiled_test(config: &Config,\n                      runargs.as_slice(),\n                      vec!((\"\".to_string(), \"\".to_string())),\n                      Some(\"\".to_string()))\n-        .expect(format!(\"failed to exec `{}`\", config.adb_path));\n+        .expect(format!(\"failed to exec `{}`\", config.adb_path).as_slice());\n \n     // get stderr of result\n     runargs = Vec::new();\n@@ -1414,7 +1414,7 @@ fn _arm_exec_compiled_test(config: &Config,\n                      runargs.as_slice(),\n                      vec!((\"\".to_string(), \"\".to_string())),\n                      Some(\"\".to_string()))\n-        .expect(format!(\"failed to exec `{}`\", config.adb_path));\n+        .expect(format!(\"failed to exec `{}`\", config.adb_path).as_slice());\n \n     dump_output(config,\n                 testfile,\n@@ -1448,7 +1448,7 @@ fn _arm_push_aux_shared_library(config: &Config, testfile: &Path) {\n                                            vec!((\"\".to_string(),\n                                                  \"\".to_string())),\n                                            Some(\"\".to_string()))\n-                .expect(format!(\"failed to exec `{}`\", config.adb_path));\n+                .expect(format!(\"failed to exec `{}`\", config.adb_path).as_slice());\n \n             if config.verbose {\n                 println!(\"push ({}) {} {} {}\","}, {"sha": "45ccf657dbdd1251050a5e322b8a41f0f9ad2c6a", "filename": "src/libcore/option.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=422d54bed212b4f0356fb56bbc31c8deef7a6b77", "patch": "@@ -233,6 +233,20 @@ impl<T> Option<T> {\n     // Getting to contained values\n     /////////////////////////////////////////////////////////////////////////\n \n+    /// Unwraps an option, yielding the content of a `Some`\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if the value is a `None` with a custom failure message provided by\n+    /// `msg`.\n+    #[inline]\n+    pub fn expect(self, msg: &str) -> T {\n+        match self {\n+            Some(val) => val,\n+            None => fail!(msg),\n+        }\n+    }\n+\n     /// Moves a value out of an option type and returns it, consuming the `Option`.\n     ///\n     /// # Failure"}, {"sha": "f8d041bc923af4d287110261f351283d983c64fc", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=422d54bed212b4f0356fb56bbc31c8deef7a6b77", "patch": "@@ -451,7 +451,7 @@ fn parse_fn_style(c: char) -> FnStyle {\n fn parse_abi_set(st: &mut PState) -> abi::Abi {\n     assert_eq!(next(st), '[');\n     scan(st, |c| c == ']', |bytes| {\n-        let abi_str = str::from_utf8(bytes).unwrap().to_string();\n+        let abi_str = str::from_utf8(bytes).unwrap();\n         abi::lookup(abi_str.as_slice()).expect(abi_str)\n     })\n }"}, {"sha": "a4f583cdb821987d432d2f7b5b99e9f9bc90a173", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=422d54bed212b4f0356fb56bbc31c8deef7a6b77", "patch": "@@ -90,7 +90,7 @@ impl<'a, 'b> Reflector<'a, 'b> {\n         let mth_idx = ty::method_idx(token::str_to_ident(format!(\n                         \"visit_{}\", ty_name).as_slice()),\n                                      self.visitor_methods.as_slice()).expect(\n-                format!(\"couldn't find visit method for {}\", ty_name));\n+                format!(\"couldn't find visit method for {}\", ty_name).as_slice());\n         let mth_ty =\n             ty::mk_bare_fn(tcx,\n                            self.visitor_methods[mth_idx].fty.clone());"}, {"sha": "d7476dd2de8746d9a3070024c55ab7cdd3cb2623", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=422d54bed212b4f0356fb56bbc31c8deef7a6b77", "patch": "@@ -21,7 +21,6 @@ use comm::Receiver;\n use io::IoResult;\n use kinds::Send;\n use owned::Box;\n-use option::Expect;\n use rt::rtio::{IoFactory, LocalIo, RtioTimer};\n \n /// A synchronous timer object"}, {"sha": "db84a724adb4ecdf655a275df710daec87dd4530", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=422d54bed212b4f0356fb56bbc31c8deef7a6b77", "patch": "@@ -155,6 +155,7 @@ pub use core::simd;\n pub use core::tuple;\n #[cfg(not(test))] pub use core::ty;\n pub use core::result;\n+pub use core::option;\n \n pub use alloc::owned;\n pub use alloc::rc;\n@@ -219,10 +220,6 @@ pub mod num;\n pub mod to_str;\n pub mod hash;\n \n-/* Common data structures */\n-\n-pub mod option;\n-\n /* Tasks and communication */\n \n pub mod task;"}, {"sha": "ad834f2b4d44bcac4723c0be951e147d316b6904", "filename": "src/libstd/option.rs", "status": "removed", "additions": 0, "deletions": 170, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/193574ae1e3881f95afb8b3e385a9e410ac6798a/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/193574ae1e3881f95afb8b3e385a9e410ac6798a/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=193574ae1e3881f95afb8b3e385a9e410ac6798a", "patch": "@@ -1,170 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Optional values\n-//!\n-//! Type `Option` represents an optional value: every `Option`\n-//! is either `Some` and contains a value, or `None`, and\n-//! does not. `Option` types are very common in Rust code, as\n-//! they have a number of uses:\n-//!\n-//! * Initial values\n-//! * Return values for functions that are not defined\n-//!   over their entire input range (partial functions)\n-//! * Return value for otherwise reporting simple errors, where `None` is\n-//!   returned on error\n-//! * Optional struct fields\n-//! * Struct fields that can be loaned or \"taken\"\n-//! * Optional function arguments\n-//! * Nullable pointers\n-//! * Swapping things out of difficult situations\n-//!\n-//! Options are commonly paired with pattern matching to query the presence\n-//! of a value and take action, always accounting for the `None` case.\n-//!\n-//! ```\n-//! fn divide(numerator: f64, denominator: f64) -> Option<f64> {\n-//!     if denominator == 0.0 {\n-//!         None\n-//!     } else {\n-//!         Some(numerator / denominator)\n-//!     }\n-//! }\n-//!\n-//! // The return value of the function is an option\n-//! let result = divide(2.0, 3.0);\n-//!\n-//! // Pattern match to retrieve the value\n-//! match result {\n-//!     // The division was valid\n-//!     Some(x) => println!(\"Result: {}\", x),\n-//!     // The division was invalid\n-//!     None    => println!(\"Cannot divide by 0\")\n-//! }\n-//! ```\n-//!\n-//\n-// FIXME: Show how `Option` is used in practice, with lots of methods\n-//\n-//! # Options and pointers (\"nullable\" pointers)\n-//!\n-//! Rust's pointer types must always point to a valid location; there are\n-//! no \"null\" pointers. Instead, Rust has *optional* pointers, like\n-//! the optional owned box, `Option<Box<T>>`.\n-//!\n-//! The following example uses `Option` to create an optional box of\n-//! `int`. Notice that in order to use the inner `int` value first the\n-//! `check_optional` function needs to use pattern matching to\n-//! determine whether the box has a value (i.e. it is `Some(...)`) or\n-//! not (`None`).\n-//!\n-//! ```\n-//! let optional: Option<Box<int>> = None;\n-//! check_optional(&optional);\n-//!\n-//! let optional: Option<Box<int>> = Some(box 9000);\n-//! check_optional(&optional);\n-//!\n-//! fn check_optional(optional: &Option<Box<int>>) {\n-//!     match *optional {\n-//!         Some(ref p) => println!(\"have value {}\", p),\n-//!         None => println!(\"have no value\")\n-//!     }\n-//! }\n-//! ```\n-//!\n-//! This usage of `Option` to create safe nullable pointers is so\n-//! common that Rust does special optimizations to make the\n-//! representation of `Option<Box<T>>` a single pointer. Optional pointers\n-//! in Rust are stored as efficiently as any other pointer type.\n-//!\n-//! # Examples\n-//!\n-//! Basic pattern matching on `Option`:\n-//!\n-//! ```\n-//! let msg = Some(\"howdy\");\n-//!\n-//! // Take a reference to the contained string\n-//! match msg {\n-//!     Some(ref m) => println!(\"{}\", *m),\n-//!     None => ()\n-//! }\n-//!\n-//! // Remove the contained string, destroying the Option\n-//! let unwrapped_msg = match msg {\n-//!     Some(m) => m,\n-//!     None => \"default message\"\n-//! };\n-//! ```\n-//!\n-//! Initialize a result to `None` before a loop:\n-//!\n-//! ```\n-//! enum Kingdom { Plant(uint, &'static str), Animal(uint, &'static str) }\n-//!\n-//! // A list of data to search through.\n-//! let all_the_big_things = [\n-//!     Plant(250, \"redwood\"),\n-//!     Plant(230, \"noble fir\"),\n-//!     Plant(229, \"sugar pine\"),\n-//!     Animal(25, \"blue whale\"),\n-//!     Animal(19, \"fin whale\"),\n-//!     Animal(15, \"north pacific right whale\"),\n-//! ];\n-//!\n-//! // We're going to search for the name of the biggest animal,\n-//! // but to start with we've just got `None`.\n-//! let mut name_of_biggest_animal = None;\n-//! let mut size_of_biggest_animal = 0;\n-//! for big_thing in all_the_big_things.iter() {\n-//!     match *big_thing {\n-//!         Animal(size, name) if size > size_of_biggest_animal => {\n-//!             // Now we've found the name of some big animal\n-//!             size_of_biggest_animal = size;\n-//!             name_of_biggest_animal = Some(name);\n-//!         }\n-//!         Animal(..) | Plant(..) => ()\n-//!     }\n-//! }\n-//!\n-//! match name_of_biggest_animal {\n-//!     Some(name) => println!(\"the biggest animal is {}\", name),\n-//!     None => println!(\"there are no animals :(\")\n-//! }\n-//! ```\n-\n-use any::Any;\n-use kinds::Send;\n-\n-pub use core::option::{Option, Some, None, Item, collect};\n-\n-/// Extension trait for the `Option` type to add an `expect` method\n-\n-// FIXME(#14008) should this trait even exist?\n-pub trait Expect<T> {\n-    /// Unwraps an option, yielding the content of a `Some`\n-    ///\n-    /// # Failure\n-    ///\n-    /// Fails if the value is a `None` with a custom failure message provided by\n-    /// `msg`.\n-    fn expect<M: Any + Send>(self, m: M) -> T;\n-}\n-\n-impl<T> Expect<T> for Option<T> {\n-    #[inline]\n-    fn expect<M: Any + Send>(self, msg: M) -> T {\n-        match self {\n-            Some(val) => val,\n-            None => fail!(msg),\n-        }\n-    }\n-}"}, {"sha": "486d98a5487cd40d18cd23e4bb38f23607eb2e57", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=422d54bed212b4f0356fb56bbc31c8deef7a6b77", "patch": "@@ -85,7 +85,6 @@ pub fn getcwd() -> Path {\n pub fn getcwd() -> Path {\n     use libc::DWORD;\n     use libc::GetCurrentDirectoryW;\n-    use option::Expect;\n \n     let mut buf = [0 as u16, ..BUF_BYTES];\n     unsafe {\n@@ -101,7 +100,7 @@ pub fn getcwd() -> Path {\n pub mod win32 {\n     use libc::types::os::arch::extra::DWORD;\n     use libc;\n-    use option::{None, Option, Expect};\n+    use option::{None, Option};\n     use option;\n     use os::TMPBUF_SZ;\n     use slice::{MutableVector, ImmutableVector};\n@@ -924,7 +923,6 @@ fn real_args() -> Vec<String> {\n #[cfg(windows)]\n fn real_args() -> Vec<String> {\n     use slice;\n-    use option::Expect;\n \n     let mut nArgs: c_int = 0;\n     let lpArgCount: *mut c_int = &mut nArgs;"}, {"sha": "54dcbd1812fccaad8feb7eb32ec90580e9d9a34f", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=422d54bed212b4f0356fb56bbc31c8deef7a6b77", "patch": "@@ -69,7 +69,6 @@\n #[doc(no_inline)] pub use num::{Num, NumCast, CheckedAdd, CheckedSub, CheckedMul};\n #[doc(no_inline)] pub use num::{Signed, Unsigned, Primitive, Int, Float};\n #[doc(no_inline)] pub use num::{FloatMath, ToPrimitive, FromPrimitive};\n-#[doc(no_inline)] pub use option::Expect;\n #[doc(no_inline)] pub use owned::Box;\n #[doc(no_inline)] pub use path::{GenericPath, Path, PosixPath, WindowsPath};\n #[doc(no_inline)] pub use ptr::RawPtr;"}, {"sha": "7271464d1e92f00e73e629b1607cf4445df90f8c", "filename": "src/libstd/rt/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibstd%2Frt%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibstd%2Frt%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fenv.rs?ref=422d54bed212b4f0356fb56bbc31c8deef7a6b77", "patch": "@@ -11,7 +11,7 @@\n //! Runtime environment settings\n \n use from_str::from_str;\n-use option::{Some, None, Expect};\n+use option::{Some, None};\n use os;\n use str::Str;\n "}, {"sha": "d6f63da09f210f78ac5c40437410538c115b81e1", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=422d54bed212b4f0356fb56bbc31c8deef7a6b77", "patch": "@@ -296,7 +296,6 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n     fn to_owned(&self) -> ~[T] {\n         use RawVec = core::raw::Vec;\n         use num::{CheckedAdd, CheckedMul};\n-        use option::Expect;\n \n         let len = self.len();\n         let data_size = len.checked_mul(&mem::size_of::<T>());"}, {"sha": "cdcee9464de0a479024c69c6919673e29de60eda", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422d54bed212b4f0356fb56bbc31c8deef7a6b77/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=422d54bed212b4f0356fb56bbc31c8deef7a6b77", "patch": "@@ -21,7 +21,7 @@ use mem;\n use num::{CheckedMul, CheckedAdd};\n use num;\n use ops::{Add, Drop};\n-use option::{None, Option, Some, Expect};\n+use option::{None, Option, Some};\n use ptr::RawPtr;\n use ptr;\n use raw::Slice;"}]}