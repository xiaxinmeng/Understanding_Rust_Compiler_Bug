{"sha": "6399bb425b3a82111cd554737f194c95b8f6bad5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzOTliYjQyNWIzYTgyMTExY2Q1NTQ3MzdmMTk0Yzk1YjhmNmJhZDU=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-04-13T19:08:20Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-04-13T19:15:28Z"}, "message": "De-stabilize `thread::scoped` and friends\n\nIssue #24292 demonstrates that the `scoped` API as currently offered can\nbe memory-unsafe: the `JoinGuard` can be moved into a context that will\nfail to execute destructors prior to the stack frame being popped (for\nexample, by creating an `Rc` cycle).\n\nThis commit reverts the APIs to `unstable` status while a long-term\nsolution is worked out.\n\n(There are several possible ways to address this issue; it's not a\nfundamental problem with the `scoped` idea, but rather an indication\nthat Rust doesn't currently provide a good way to ensure that\ndestructors are run within a particular stack frame.)\n\n[breaking-change]", "tree": {"sha": "f1799d53b1c70ba745ac6c0d82da3fe6d2b26b23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1799d53b1c70ba745ac6c0d82da3fe6d2b26b23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6399bb425b3a82111cd554737f194c95b8f6bad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6399bb425b3a82111cd554737f194c95b8f6bad5", "html_url": "https://github.com/rust-lang/rust/commit/6399bb425b3a82111cd554737f194c95b8f6bad5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6399bb425b3a82111cd554737f194c95b8f6bad5/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "588d37c653ddac491c2c1cb8974f56781533b173", "url": "https://api.github.com/repos/rust-lang/rust/commits/588d37c653ddac491c2c1cb8974f56781533b173", "html_url": "https://github.com/rust-lang/rust/commit/588d37c653ddac491c2c1cb8974f56781533b173"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "239911026500dd1c414976ebf2af8d23ea8d8fd8", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6399bb425b3a82111cd554737f194c95b8f6bad5/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6399bb425b3a82111cd554737f194c95b8f6bad5/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=6399bb425b3a82111cd554737f194c95b8f6bad5", "patch": "@@ -274,7 +274,8 @@ impl Builder {\n     /// Unlike the `scoped` free function, this method yields an\n     /// `io::Result` to capture any failure to create the thread at\n     /// the OS level.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[unstable(feature = \"scoped\",\n+               reason = \"memory unsafe if destructor is avoided, see #24292\")]\n     pub fn scoped<'a, T, F>(self, f: F) -> io::Result<JoinGuard<'a, T>> where\n         T: Send + 'a, F: FnOnce() -> T, F: Send + 'a\n     {\n@@ -387,7 +388,8 @@ pub fn spawn<F>(f: F) -> JoinHandle where F: FnOnce(), F: Send + 'static {\n ///\n /// Panics if the OS fails to create a thread; use `Builder::scoped`\n /// to recover from such errors.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"scoped\",\n+           reason = \"memory unsafe if destructor is avoided, see #24292\")]\n pub fn scoped<'a, T, F>(f: F) -> JoinGuard<'a, T> where\n     T: Send + 'a, F: FnOnce() -> T, F: Send + 'a\n {\n@@ -674,7 +676,8 @@ impl Drop for JoinHandle {\n /// handle: the ability to join a child thread is a uniquely-owned\n /// permission.\n #[must_use = \"thread will be immediately joined if `JoinGuard` is not used\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"scoped\",\n+           reason = \"memory unsafe if destructor is avoided, see #24292\")]\n pub struct JoinGuard<'a, T: Send + 'a> {\n     inner: JoinInner<T>,\n     _marker: PhantomData<&'a T>,\n@@ -706,7 +709,8 @@ impl<'a, T: Send + 'a> JoinGuard<'a, T> {\n }\n \n #[unsafe_destructor]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"scoped\",\n+           reason = \"memory unsafe if destructor is avoided, see #24292\")]\n impl<'a, T: Send + 'a> Drop for JoinGuard<'a, T> {\n     fn drop(&mut self) {\n         if !self.inner.joined {"}]}