{"sha": "714f2a8921b1e686ae2ba02965fcd3b3e733e4c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNGYyYTg5MjFiMWU2ODZhZTJiYTAyOTY1ZmNkM2IzZTczM2U0YzM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-18T21:56:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-09-06T11:27:22Z"}, "message": "move fnv hashing support into librustc_data_structures", "tree": {"sha": "939dec652aa3eadf2721108843ded790d854b539", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/939dec652aa3eadf2721108843ded790d854b539"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/714f2a8921b1e686ae2ba02965fcd3b3e733e4c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/714f2a8921b1e686ae2ba02965fcd3b3e733e4c3", "html_url": "https://github.com/rust-lang/rust/commit/714f2a8921b1e686ae2ba02965fcd3b3e733e4c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/714f2a8921b1e686ae2ba02965fcd3b3e733e4c3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f5267dba31fdc49e436c50009fe33a80f21d477", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f5267dba31fdc49e436c50009fe33a80f21d477", "html_url": "https://github.com/rust-lang/rust/commit/4f5267dba31fdc49e436c50009fe33a80f21d477"}], "stats": {"total": 94, "additions": 57, "deletions": 37}, "files": [{"sha": "4a45797602d811f270571b29794150c9b4c579ef", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/714f2a8921b1e686ae2ba02965fcd3b3e733e4c3/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714f2a8921b1e686ae2ba02965fcd3b3e733e4c3/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=714f2a8921b1e686ae2ba02965fcd3b3e733e4c3", "patch": "@@ -13,54 +13,19 @@\n #![allow(non_snake_case)]\n \n use middle::def_id::DefId;\n-use std::collections::hash_state::DefaultState;\n-use std::collections::{HashMap, HashSet};\n-use std::default::Default;\n-use std::hash::{Hasher, Hash};\n use syntax::ast;\n \n-pub type FnvHashMap<K, V> = HashMap<K, V, DefaultState<FnvHasher>>;\n-pub type FnvHashSet<V> = HashSet<V, DefaultState<FnvHasher>>;\n+pub use rustc_data_structures::fnv::FnvHashMap;\n+pub use rustc_data_structures::fnv::FnvHashSet;\n \n pub type NodeMap<T> = FnvHashMap<ast::NodeId, T>;\n pub type DefIdMap<T> = FnvHashMap<DefId, T>;\n \n pub type NodeSet = FnvHashSet<ast::NodeId>;\n pub type DefIdSet = FnvHashSet<DefId>;\n \n-pub fn FnvHashMap<K: Hash + Eq, V>() -> FnvHashMap<K, V> {\n-    Default::default()\n-}\n-pub fn FnvHashSet<V: Hash + Eq>() -> FnvHashSet<V> {\n-    Default::default()\n-}\n-\n pub fn NodeMap<T>() -> NodeMap<T> { FnvHashMap() }\n pub fn DefIdMap<T>() -> DefIdMap<T> { FnvHashMap() }\n pub fn NodeSet() -> NodeSet { FnvHashSet() }\n pub fn DefIdSet() -> DefIdSet { FnvHashSet() }\n \n-/// A speedy hash algorithm for node ids and def ids. The hashmap in\n-/// libcollections by default uses SipHash which isn't quite as speedy as we\n-/// want. In the compiler we're not really worried about DOS attempts, so we\n-/// just default to a non-cryptographic hash.\n-///\n-/// This uses FNV hashing, as described here:\n-/// http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\n-pub struct FnvHasher(u64);\n-\n-impl Default for FnvHasher {\n-    fn default() -> FnvHasher { FnvHasher(0xcbf29ce484222325) }\n-}\n-\n-impl Hasher for FnvHasher {\n-    fn write(&mut self, bytes: &[u8]) {\n-        let FnvHasher(mut hash) = *self;\n-        for byte in bytes {\n-            hash = hash ^ (*byte as u64);\n-            hash = hash.wrapping_mul(0x100000001b3);\n-        }\n-        *self = FnvHasher(hash);\n-    }\n-    fn finish(&self) -> u64 { self.0 }\n-}"}, {"sha": "77baa84c0236d020e2d7ab133575d68b2f9cded7", "filename": "src/librustc_data_structures/fnv.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/714f2a8921b1e686ae2ba02965fcd3b3e733e4c3/src%2Flibrustc_data_structures%2Ffnv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714f2a8921b1e686ae2ba02965fcd3b3e733e4c3/src%2Flibrustc_data_structures%2Ffnv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffnv.rs?ref=714f2a8921b1e686ae2ba02965fcd3b3e733e4c3", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::collections::{HashMap, HashSet};\n+use std::collections::hash_state::DefaultState;\n+use std::default::Default;\n+use std::hash::{Hasher, Hash};\n+\n+pub type FnvHashMap<K, V> = HashMap<K, V, DefaultState<FnvHasher>>;\n+pub type FnvHashSet<V> = HashSet<V, DefaultState<FnvHasher>>;\n+\n+#[allow(non_snake_case)]\n+pub fn FnvHashMap<K: Hash + Eq, V>() -> FnvHashMap<K, V> {\n+    Default::default()\n+}\n+\n+#[allow(non_snake_case)]\n+pub fn FnvHashSet<V: Hash + Eq>() -> FnvHashSet<V> {\n+    Default::default()\n+}\n+\n+/// A speedy hash algorithm for node ids and def ids. The hashmap in\n+/// libcollections by default uses SipHash which isn't quite as speedy as we\n+/// want. In the compiler we're not really worried about DOS attempts, so we\n+/// just default to a non-cryptographic hash.\n+///\n+/// This uses FNV hashing, as described here:\n+/// http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\n+pub struct FnvHasher(u64);\n+\n+impl Default for FnvHasher {\n+    fn default() -> FnvHasher { FnvHasher(0xcbf29ce484222325) }\n+}\n+\n+impl Hasher for FnvHasher {\n+    fn write(&mut self, bytes: &[u8]) {\n+        let FnvHasher(mut hash) = *self;\n+        for byte in bytes {\n+            hash = hash ^ (*byte as u64);\n+            hash = hash.wrapping_mul(0x100000001b3);\n+        }\n+        *self = FnvHasher(hash);\n+    }\n+    fn finish(&self) -> u64 { self.0 }\n+}"}, {"sha": "4688742a4ab7583665e7db549b354e0daf06bbf9", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/714f2a8921b1e686ae2ba02965fcd3b3e733e4c3/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714f2a8921b1e686ae2ba02965fcd3b3e733e4c3/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=714f2a8921b1e686ae2ba02965fcd3b3e733e4c3", "patch": "@@ -28,6 +28,8 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(rustc_private, staged_api)]\n+#![feature(hashmap_hasher)]\n+\n #![cfg_attr(test, feature(test))]\n \n #[macro_use] extern crate log;\n@@ -39,6 +41,7 @@ pub mod ivar;\n pub mod snapshot_vec;\n pub mod transitive_relation;\n pub mod unify;\n+pub mod fnv;\n \n // See comments in src/librustc/lib.rs\n #[doc(hidden)]"}]}