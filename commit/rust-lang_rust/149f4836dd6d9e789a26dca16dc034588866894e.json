{"sha": "149f4836dd6d9e789a26dca16dc034588866894e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0OWY0ODM2ZGQ2ZDllNzg5YTI2ZGNhMTZkYzAzNDU4ODg2Njg5NGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-17T20:47:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-17T20:47:32Z"}, "message": "Auto merge of #86392 - JohnTitor:use-partition-point, r=petrochenkov\n\nPrefer `partition_point` to look up assoc items\n\nSince we now have `partition_point` (instead of `equal_range`), I think it's worth trying to use it instead of manually finding it.\n`partition_point` uses `binary_search_by` internally (#85406) and its performance has been improved (#74024), so I guess this will make a performance difference.", "tree": {"sha": "adbc01ec2300e4861f3459a7795ff6c60a6cb760", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adbc01ec2300e4861f3459a7795ff6c60a6cb760"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/149f4836dd6d9e789a26dca16dc034588866894e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/149f4836dd6d9e789a26dca16dc034588866894e", "html_url": "https://github.com/rust-lang/rust/commit/149f4836dd6d9e789a26dca16dc034588866894e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/149f4836dd6d9e789a26dca16dc034588866894e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e062e5d34ee80e0d5da403e8c5609f29e6a7dbcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e062e5d34ee80e0d5da403e8c5609f29e6a7dbcb", "html_url": "https://github.com/rust-lang/rust/commit/e062e5d34ee80e0d5da403e8c5609f29e6a7dbcb"}, {"sha": "c0efd2a15bde43a96280d6e4480f33a5f80b7a53", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0efd2a15bde43a96280d6e4480f33a5f80b7a53", "html_url": "https://github.com/rust-lang/rust/commit/c0efd2a15bde43a96280d6e4480f33a5f80b7a53"}], "stats": {"total": 52, "additions": 5, "deletions": 47}, "files": [{"sha": "65689ab769c1a1a55701d4aa5eba64f12833136f", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 5, "deletions": 47, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/149f4836dd6d9e789a26dca16dc034588866894e/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f4836dd6d9e789a26dca16dc034588866894e/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=149f4836dd6d9e789a26dca16dc034588866894e", "patch": "@@ -94,13 +94,15 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n         Q: Ord + ?Sized,\n         K: Borrow<Q>,\n     {\n-        // FIXME: This should be in the standard library as `equal_range`. See rust-lang/rfcs#2184.\n         match self.binary_search_idx(key) {\n             Err(_) => self.idxs_to_items_enumerated(&[]),\n \n             Ok(idx) => {\n-                let start = self.find_lower_bound(key, idx);\n-                let end = self.find_upper_bound(key, idx);\n+                let start = self.idx_sorted_by_item_key[..idx]\n+                    .partition_point(|&i| self.items[i].0.borrow() != key);\n+                let end = idx\n+                    + self.idx_sorted_by_item_key[idx..]\n+                        .partition_point(|&i| self.items[i].0.borrow() == key);\n                 self.idxs_to_items_enumerated(&self.idx_sorted_by_item_key[start..end])\n             }\n         }\n@@ -114,50 +116,6 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n         self.idx_sorted_by_item_key.binary_search_by(|&idx| self.items[idx].0.borrow().cmp(key))\n     }\n \n-    /// Returns the index into the `idx_sorted_by_item_key` array of the first item equal to\n-    /// `key`.\n-    ///\n-    /// `initial` must be an index into that same array for an item that is equal to `key`.\n-    fn find_lower_bound<Q>(&self, key: &Q, initial: usize) -> usize\n-    where\n-        Q: Ord + ?Sized,\n-        K: Borrow<Q>,\n-    {\n-        debug_assert!(self.items[self.idx_sorted_by_item_key[initial]].0.borrow() == key);\n-\n-        // FIXME: At present, this uses linear search, meaning lookup is only `O(log n)` if duplicate\n-        // entries are rare. It would be better to start with a linear search for the common case but\n-        // fall back to an exponential search if many duplicates are found. This applies to\n-        // `upper_bound` as well.\n-        let mut start = initial;\n-        while start != 0 && self.items[self.idx_sorted_by_item_key[start - 1]].0.borrow() == key {\n-            start -= 1;\n-        }\n-\n-        start\n-    }\n-\n-    /// Returns the index into the `idx_sorted_by_item_key` array of the first item greater than\n-    /// `key`, or `self.len()` if no such item exists.\n-    ///\n-    /// `initial` must be an index into that same array for an item that is equal to `key`.\n-    fn find_upper_bound<Q>(&self, key: &Q, initial: usize) -> usize\n-    where\n-        Q: Ord + ?Sized,\n-        K: Borrow<Q>,\n-    {\n-        debug_assert!(self.items[self.idx_sorted_by_item_key[initial]].0.borrow() == key);\n-\n-        // See the FIXME for `find_lower_bound`.\n-        let mut end = initial + 1;\n-        let len = self.items.len();\n-        while end < len && self.items[self.idx_sorted_by_item_key[end]].0.borrow() == key {\n-            end += 1;\n-        }\n-\n-        end\n-    }\n-\n     fn idxs_to_items_enumerated(&'a self, idxs: &'a [I]) -> impl 'a + Iterator<Item = (I, &'a V)> {\n         idxs.iter().map(move |&idx| (idx, &self.items[idx].1))\n     }"}]}