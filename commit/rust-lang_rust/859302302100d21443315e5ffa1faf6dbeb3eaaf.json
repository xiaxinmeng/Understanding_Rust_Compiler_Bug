{"sha": "859302302100d21443315e5ffa1faf6dbeb3eaaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1OTMwMjMwMjEwMGQyMTQ0MzMxNWU1ZmZhMWZhZjZkYmViM2VhYWY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-15T16:42:30Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-13T19:37:50Z"}, "message": "Don't instantiate so many copies of `drop_in_place`", "tree": {"sha": "fedb4daff0d678867d3ca9d7ce5f87291a064f79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fedb4daff0d678867d3ca9d7ce5f87291a064f79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/859302302100d21443315e5ffa1faf6dbeb3eaaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/859302302100d21443315e5ffa1faf6dbeb3eaaf", "html_url": "https://github.com/rust-lang/rust/commit/859302302100d21443315e5ffa1faf6dbeb3eaaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/859302302100d21443315e5ffa1faf6dbeb3eaaf/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1912f2e89b77cfe2a0e64b96f444848fe4e2d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1912f2e89b77cfe2a0e64b96f444848fe4e2d49", "html_url": "https://github.com/rust-lang/rust/commit/a1912f2e89b77cfe2a0e64b96f444848fe4e2d49"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "fd4fa71e1631283fd60a503fcf58412f177df879", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/859302302100d21443315e5ffa1faf6dbeb3eaaf/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859302302100d21443315e5ffa1faf6dbeb3eaaf/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=859302302100d21443315e5ffa1faf6dbeb3eaaf", "patch": "@@ -54,7 +54,10 @@ pub enum InstanceDef<'tcx> {\n         call_once: DefId,\n     },\n \n-    /// `drop_in_place::<T>; None` for empty drop glue.\n+    /// `core::ptr::drop_in_place::<T>`.\n+    /// The `DefId` is for `core::ptr::drop_in_place`.\n+    /// The `Option<Ty<'tcx>>` is either `Some(T)`, or `None` for empty drop\n+    /// glue.\n     DropGlue(DefId, Option<Ty<'tcx>>),\n \n     ///`<T as Clone>::clone` shim.\n@@ -177,11 +180,25 @@ impl<'tcx> InstanceDef<'tcx> {\n         if self.requires_inline(tcx) {\n             return true;\n         }\n-        if let ty::InstanceDef::DropGlue(..) = *self {\n-            // Drop glue wants to be instantiated at every codegen\n+        if let ty::InstanceDef::DropGlue(.., Some(ty)) = *self {\n+            // Drop glue generally wants to be instantiated at every codegen\n             // unit, but without an #[inline] hint. We should make this\n             // available to normal end-users.\n-            return true;\n+            if tcx.sess.opts.incremental.is_none() {\n+                return true;\n+            }\n+            // When compiling with incremental, we can generate a *lot* of\n+            // codegen units. Including drop glue into all of them has a\n+            // considerable compile time cost.\n+            //\n+            // We include enums without destructors to allow, say, optimizing\n+            // drops of `Option::None` before LTO. We also respect the intent of\n+            // `#[inline]` on `Drop::drop` implementations.\n+            return ty.ty_adt_def().map_or(true, |adt_def| {\n+                adt_def.destructor(tcx).map_or(adt_def.is_enum(), |dtor| {\n+                    tcx.codegen_fn_attrs(dtor.did).requests_inline()\n+                })\n+            });\n         }\n         tcx.codegen_fn_attrs(self.def_id()).requests_inline()\n     }"}, {"sha": "9b81d69ce694c9120559c3976f6194a44062fe37", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/859302302100d21443315e5ffa1faf6dbeb3eaaf/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859302302100d21443315e5ffa1faf6dbeb3eaaf/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=859302302100d21443315e5ffa1faf6dbeb3eaaf", "patch": "@@ -680,13 +680,20 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n \n             if tcx.trait_of_item(def_id).is_some() {\n                 let self_ty = instance.substs.type_at(0);\n-                // This is an implementation of a trait method.\n+                // This is a default implementation of a trait method.\n                 return characteristic_def_id_of_type(self_ty).or(Some(def_id));\n             }\n \n             if let Some(impl_def_id) = tcx.impl_of_method(def_id) {\n-                // This is a method within an inherent impl, find out what the\n-                // self-type is:\n+                if tcx.sess.opts.incremental.is_some()\n+                    && tcx.trait_id_of_impl(impl_def_id) == tcx.lang_items().drop_trait()\n+                {\n+                    // Put `Drop::drop` into the same cgu as `drop_in_place`\n+                    // since `drop_in_place` is the only thing that can\n+                    // call it.\n+                    return None;\n+                }\n+                // This is a method within an impl, find out what the self-type is:\n                 let impl_self_ty = tcx.subst_and_normalize_erasing_regions(\n                     instance.substs,\n                     ty::ParamEnv::reveal_all(),"}]}