{"sha": "d247d9c6907a9d9e0a427b3815704f8a845266e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNDdkOWM2OTA3YTlkOWUwYTQyN2IzODE1NzA0ZjhhODQ1MjY2ZTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-04-08T06:58:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-08T06:58:38Z"}, "message": "Merge pull request #2645 from TimNN/regex-bytes-utf8\n\nAllow invalid UTF-8 in bytes Regexes", "tree": {"sha": "4f716ba0379cef8ed298585bfa9f682580064ecd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f716ba0379cef8ed298585bfa9f682580064ecd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d247d9c6907a9d9e0a427b3815704f8a845266e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJayb2eCRBK7hj4Ov3rIwAAdHIIAD778L73iQvCtDW/PrjmKoPC\ndHelVFgrA4FUZGVMWGr4Iqcr7o2wWq9takL7SiNtNTfioe1cd0GgPBBUGDVBQ8ua\nS5XsphYrMRtvQPPs7B/eIt0ucbbIkKr7I7dSGXbLmhsHAxL1Tt+FNJT3gu6wkpuA\nyBGoQop/y9tuYH1RUK+CaRY8u3UNNE6leQDR8OpsDuzujyE9rTP6VQ8KB+bzXiH8\nt620jUTySLZuGtH16z7OWB59BQe7zlpD/307DF1q3UQ0WYN2LnpDOOJy8PQMmsa+\n2A50O8WRzAiIzVgf+mRndS7Jb2jST20qwAVd99zld5+Rnfr7wHNJMNIPJBmd3uA=\n=+4RC\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f716ba0379cef8ed298585bfa9f682580064ecd\nparent a1486af7c124deb3fe70f5d591218495c53d230c\nparent fad826f9661e321f74ce2d837103114271b132d1\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1523170718 +0200\ncommitter GitHub <noreply@github.com> 1523170718 +0200\n\nMerge pull request #2645 from TimNN/regex-bytes-utf8\n\nAllow invalid UTF-8 in bytes Regexes"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d247d9c6907a9d9e0a427b3815704f8a845266e9", "html_url": "https://github.com/rust-lang/rust/commit/d247d9c6907a9d9e0a427b3815704f8a845266e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d247d9c6907a9d9e0a427b3815704f8a845266e9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1486af7c124deb3fe70f5d591218495c53d230c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1486af7c124deb3fe70f5d591218495c53d230c", "html_url": "https://github.com/rust-lang/rust/commit/a1486af7c124deb3fe70f5d591218495c53d230c"}, {"sha": "fad826f9661e321f74ce2d837103114271b132d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fad826f9661e321f74ce2d837103114271b132d1", "html_url": "https://github.com/rust-lang/rust/commit/fad826f9661e321f74ce2d837103114271b132d1"}], "stats": {"total": 66, "additions": 35, "deletions": 31}, "files": [{"sha": "26c1e2b244e3de3eb34b6a47ba99227610696c89", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d247d9c6907a9d9e0a427b3815704f8a845266e9/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d247d9c6907a9d9e0a427b3815704f8a845266e9/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=d247d9c6907a9d9e0a427b3815704f8a845266e9", "patch": "@@ -187,7 +187,10 @@ fn check_set<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, utf8: bool)\n }\n \n fn check_regex<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, utf8: bool) {\n-    let mut parser = regex_syntax::ParserBuilder::new().unicode(utf8).build();\n+    let mut parser = regex_syntax::ParserBuilder::new()\n+        .unicode(utf8)\n+        .allow_invalid_utf8(!utf8)\n+        .build();\n \n     if let ExprLit(ref lit) = expr.node {\n         if let LitKind::Str(ref r, style) = lit.node {"}, {"sha": "b80aaa2df320d8700fc3b5079e7b7c6d5b751eaa", "filename": "tests/ui/regex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d247d9c6907a9d9e0a427b3815704f8a845266e9/tests%2Fui%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d247d9c6907a9d9e0a427b3815704f8a845266e9/tests%2Fui%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.rs?ref=d247d9c6907a9d9e0a427b3815704f8a845266e9", "patch": "@@ -34,6 +34,7 @@ fn syntax_error() {\n     let bset = BRegexSet::new(&[\n         r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n         r\"[a-z]+\\.(com|org|net)\",\n+        r\".\", // regression test\n     ]);\n \n     let set_error = RegexSet::new(&["}, {"sha": "39c360583e7d33a2c46e68415a4d46261e8006bf", "filename": "tests/ui/regex.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d247d9c6907a9d9e0a427b3815704f8a845266e9/tests%2Fui%2Fregex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d247d9c6907a9d9e0a427b3815704f8a845266e9/tests%2Fui%2Fregex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.stderr?ref=d247d9c6907a9d9e0a427b3815704f8a845266e9", "patch": "@@ -56,113 +56,113 @@ error: regex syntax error on position 0: unclosed group\n    |                                                        ^^^^^^^^^^^^^\n \n error: regex syntax error on position 0: unclosed group\n-  --> $DIR/regex.rs:40:9\n+  --> $DIR/regex.rs:41:9\n    |\n-40 |         OPENING_PAREN,\n+41 |         OPENING_PAREN,\n    |         ^^^^^^^^^^^^^\n \n error: regex syntax error on position 0: unclosed group\n-  --> $DIR/regex.rs:44:9\n+  --> $DIR/regex.rs:45:9\n    |\n-44 |         OPENING_PAREN,\n+45 |         OPENING_PAREN,\n    |         ^^^^^^^^^^^^^\n \n error: regex syntax error: unrecognized escape sequence\n-  --> $DIR/regex.rs:48:45\n+  --> $DIR/regex.rs:49:45\n    |\n-48 |     let raw_string_error = Regex::new(r\"[...//...]\");\n+49 |     let raw_string_error = Regex::new(r\"[...//...]\");\n    |                                             ^^\n \n error: regex syntax error: unrecognized escape sequence\n-  --> $DIR/regex.rs:49:46\n+  --> $DIR/regex.rs:50:46\n    |\n-49 |     let raw_string_error = Regex::new(r#\"[...//...]\"#);\n+50 |     let raw_string_error = Regex::new(r#\"[...//...]\"#);\n    |                                              ^^\n \n error: trivial regex\n-  --> $DIR/regex.rs:53:33\n+  --> $DIR/regex.rs:54:33\n    |\n-53 |     let trivial_eq = Regex::new(\"^foobar$\");\n+54 |     let trivial_eq = Regex::new(\"^foobar$\");\n    |                                 ^^^^^^^^^^\n    |\n    = help: consider using `==` on `str`s\n \n error: trivial regex\n-  --> $DIR/regex.rs:55:48\n+  --> $DIR/regex.rs:56:48\n    |\n-55 |     let trivial_eq_builder = RegexBuilder::new(\"^foobar$\");\n+56 |     let trivial_eq_builder = RegexBuilder::new(\"^foobar$\");\n    |                                                ^^^^^^^^^^\n    |\n    = help: consider using `==` on `str`s\n \n error: trivial regex\n-  --> $DIR/regex.rs:57:42\n+  --> $DIR/regex.rs:58:42\n    |\n-57 |     let trivial_starts_with = Regex::new(\"^foobar\");\n+58 |     let trivial_starts_with = Regex::new(\"^foobar\");\n    |                                          ^^^^^^^^^\n    |\n    = help: consider using `str::starts_with`\n \n error: trivial regex\n-  --> $DIR/regex.rs:59:40\n+  --> $DIR/regex.rs:60:40\n    |\n-59 |     let trivial_ends_with = Regex::new(\"foobar$\");\n+60 |     let trivial_ends_with = Regex::new(\"foobar$\");\n    |                                        ^^^^^^^^^\n    |\n    = help: consider using `str::ends_with`\n \n error: trivial regex\n-  --> $DIR/regex.rs:61:39\n+  --> $DIR/regex.rs:62:39\n    |\n-61 |     let trivial_contains = Regex::new(\"foobar\");\n+62 |     let trivial_contains = Regex::new(\"foobar\");\n    |                                       ^^^^^^^^\n    |\n    = help: consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:63:39\n+  --> $DIR/regex.rs:64:39\n    |\n-63 |     let trivial_contains = Regex::new(NOT_A_REAL_REGEX);\n+64 |     let trivial_contains = Regex::new(NOT_A_REAL_REGEX);\n    |                                       ^^^^^^^^^^^^^^^^\n    |\n    = help: consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:65:40\n+  --> $DIR/regex.rs:66:40\n    |\n-65 |     let trivial_backslash = Regex::new(\"a/.b\");\n+66 |     let trivial_backslash = Regex::new(\"a/.b\");\n    |                                        ^^^^^^^\n    |\n    = help: consider using `str::contains`\n \n error: trivial regex\n-  --> $DIR/regex.rs:68:36\n+  --> $DIR/regex.rs:69:36\n    |\n-68 |     let trivial_empty = Regex::new(\"\");\n+69 |     let trivial_empty = Regex::new(\"\");\n    |                                    ^^\n    |\n    = help: the regex is unlikely to be useful as it is\n \n error: trivial regex\n-  --> $DIR/regex.rs:70:36\n+  --> $DIR/regex.rs:71:36\n    |\n-70 |     let trivial_empty = Regex::new(\"^\");\n+71 |     let trivial_empty = Regex::new(\"^\");\n    |                                    ^^^\n    |\n    = help: the regex is unlikely to be useful as it is\n \n error: trivial regex\n-  --> $DIR/regex.rs:72:36\n+  --> $DIR/regex.rs:73:36\n    |\n-72 |     let trivial_empty = Regex::new(\"^$\");\n+73 |     let trivial_empty = Regex::new(\"^$\");\n    |                                    ^^^^\n    |\n    = help: consider using `str::is_empty`\n \n error: trivial regex\n-  --> $DIR/regex.rs:74:44\n+  --> $DIR/regex.rs:75:44\n    |\n-74 |     let binary_trivial_empty = BRegex::new(\"^$\");\n+75 |     let binary_trivial_empty = BRegex::new(\"^$\");\n    |                                            ^^^^\n    |\n    = help: consider using `str::is_empty`"}]}