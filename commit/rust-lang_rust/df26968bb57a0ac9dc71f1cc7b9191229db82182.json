{"sha": "df26968bb57a0ac9dc71f1cc7b9191229db82182", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMjY5NjhiYjU3YTBhYzlkYzcxZjFjYzdiOTE5MTIyOWRiODIxODI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-08T00:55:14Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-08T00:55:14Z"}, "message": "Ensure that we get a hard error on generic ZST constants if their body causes an error during evaluation", "tree": {"sha": "742e1b6f52f16482afcdcf15cf9f6ea3f804ebfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/742e1b6f52f16482afcdcf15cf9f6ea3f804ebfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df26968bb57a0ac9dc71f1cc7b9191229db82182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df26968bb57a0ac9dc71f1cc7b9191229db82182", "html_url": "https://github.com/rust-lang/rust/commit/df26968bb57a0ac9dc71f1cc7b9191229db82182", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df26968bb57a0ac9dc71f1cc7b9191229db82182/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c5c8eb864e56ce905742b8e97df5506bba6aeef", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c5c8eb864e56ce905742b8e97df5506bba6aeef", "html_url": "https://github.com/rust-lang/rust/commit/5c5c8eb864e56ce905742b8e97df5506bba6aeef"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "fb8f504d04b10e118e8c1e7153e06aa6db4c824c", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df26968bb57a0ac9dc71f1cc7b9191229db82182/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df26968bb57a0ac9dc71f1cc7b9191229db82182/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=df26968bb57a0ac9dc71f1cc7b9191229db82182", "patch": "@@ -16,6 +16,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<OperandRef<'tcx, Bx::Value>, ErrorHandled> {\n         match constant.literal.val {\n+            // Special case unevaluated statics, because statics have an identity and thus should\n+            // use `get_static` to get at their id.\n+            // FIXME(oli-obk): can we unify this somehow, maybe by making const eval of statics\n+            // always produce `&STATIC`. This may also simplify how const eval works with statics.\n             ty::ConstKind::Unevaluated(def_id, substs)\n                 if self.cx.tcx().is_static(def_id) => {\n                     assert!(substs.is_empty(), \"we don't support generic statics yet\");\n@@ -46,7 +50,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     instance,\n                     promoted: None,\n                 };\n-                self.cx.tcx().const_eval(ty::ParamEnv::reveal_all().and(cid))\n+                self.cx.tcx().const_eval(ty::ParamEnv::reveal_all().and(cid)).map_err(|err| {\n+                    self.cx.tcx().sess.span_err(constant.span, \"erroneous constant encountered\");\n+                    err\n+                })\n             },\n             _ => Ok(self.monomorphize(&constant.literal)),\n         }"}, {"sha": "6ce77a3057a0a2e56cf7a4bef2ed41bdfc1a3b4d", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/df26968bb57a0ac9dc71f1cc7b9191229db82182/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df26968bb57a0ac9dc71f1cc7b9191229db82182/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=df26968bb57a0ac9dc71f1cc7b9191229db82182", "patch": "@@ -29,7 +29,7 @@\n \n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc::ty::TyCtxt;\n+use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n use rustc::mir::visit::{MutVisitor, Visitor, PlaceContext, MutatingUseContext};\n use std::borrow::Cow;\n@@ -367,9 +367,14 @@ impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n                 if let StatementKind::Assign(\n                     box (p, Rvalue::Use(Operand::Constant(c)))\n                 ) = &stmt.kind {\n-                    if !p.is_indirect() {\n-                        trace!(\"skipping store of const value {:?} to {:?}\", c, p);\n-                        return;\n+                    match c.literal.val {\n+                        // Keep assignments from unevaluated constants around, since the evaluation\n+                        // may report errors, even if the use of the constant is dead code.\n+                        ty::ConstKind::Unevaluated(..) => {}\n+                        _ => if !p.is_indirect() {\n+                            trace!(\"skipping store of const value {:?} to {:?}\", c, p);\n+                            return;\n+                        },\n                     }\n                 }\n             }"}, {"sha": "cce0cdbf8c5594e58146de9a19b4042f67b251bf", "filename": "src/test/ui/consts/assoc_const_generic_impl.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/df26968bb57a0ac9dc71f1cc7b9191229db82182/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df26968bb57a0ac9dc71f1cc7b9191229db82182/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs?ref=df26968bb57a0ac9dc71f1cc7b9191229db82182", "patch": "@@ -0,0 +1,19 @@\n+#![allow(const_err)]\n+\n+trait ZeroSized: Sized {\n+    const I_AM_ZERO_SIZED: ();\n+    fn requires_zero_size(self);\n+}\n+\n+impl<T: Sized> ZeroSized for T {\n+    const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()];\n+    fn requires_zero_size(self) {\n+        let () = Self::I_AM_ZERO_SIZED; //~ ERROR erroneous constant encountered\n+        println!(\"requires_zero_size called\");\n+    }\n+}\n+\n+fn main() {\n+    ().requires_zero_size();\n+    42_u32.requires_zero_size();\n+}"}, {"sha": "3765a3703c7fc1b66c7d8e716cc4ab04a7a5e24b", "filename": "src/test/ui/consts/assoc_const_generic_impl.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df26968bb57a0ac9dc71f1cc7b9191229db82182/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df26968bb57a0ac9dc71f1cc7b9191229db82182/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr?ref=df26968bb57a0ac9dc71f1cc7b9191229db82182", "patch": "@@ -0,0 +1,8 @@\n+error: erroneous constant encountered\n+  --> $DIR/assoc_const_generic_impl.rs:11:18\n+   |\n+LL |         let () = Self::I_AM_ZERO_SIZED;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}