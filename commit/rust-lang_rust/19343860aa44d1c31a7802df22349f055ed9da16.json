{"sha": "19343860aa44d1c31a7802df22349f055ed9da16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MzQzODYwYWE0NGQxYzMxYTc4MDJkZjIyMzQ5ZjA1NWVkOWRhMTY=", "commit": {"author": {"name": "Christopher Chambers", "email": "chris.chambers@peanutcode.com", "date": "2015-04-07T13:21:18Z"}, "committer": {"name": "Christopher Chambers", "email": "chris.chambers@peanutcode.com", "date": "2015-04-07T14:29:05Z"}, "message": "Improves handling of statement macros.\n\nStatement macros are now treated somewhat like item macros, in that a\nstatement macro can now expand into a series of statements, rather than\njust a single statement.\n\nThis allows statement macros to be nested inside other kinds of macros and\nexpand properly, where previously the expansion would only work when no\nnesting was present.\n\nSee: src/test/run-pass/macro-stmt_macro_in_expr_macro.rs\n     src/test/run-pass/macro-nested_stmt_macro.rs\n\nThis changes the interface of the MacResult trait.  make_stmt has become\nmake_stmts and now returns a vector, rather than a single item.  Plugin\nwriters who were implementing MacResult will have breakage, as well as\nanyone using MacEager::stmt.\n\nSee: src/libsyntax/ext/base.rs\n\nThis also causes a minor difference in behavior to the diagnostics\nproduced by certain malformed macros.\n\nSee: src/test/compile-fail/macro-incomplete-parse.rs", "tree": {"sha": "e58fadb9f8b266a54df0676ec41f3f6392b00bed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e58fadb9f8b266a54df0676ec41f3f6392b00bed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19343860aa44d1c31a7802df22349f055ed9da16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19343860aa44d1c31a7802df22349f055ed9da16", "html_url": "https://github.com/rust-lang/rust/commit/19343860aa44d1c31a7802df22349f055ed9da16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19343860aa44d1c31a7802df22349f055ed9da16/comments", "author": {"login": "chris-chambers", "id": 6810256, "node_id": "MDQ6VXNlcjY4MTAyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/6810256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-chambers", "html_url": "https://github.com/chris-chambers", "followers_url": "https://api.github.com/users/chris-chambers/followers", "following_url": "https://api.github.com/users/chris-chambers/following{/other_user}", "gists_url": "https://api.github.com/users/chris-chambers/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-chambers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-chambers/subscriptions", "organizations_url": "https://api.github.com/users/chris-chambers/orgs", "repos_url": "https://api.github.com/users/chris-chambers/repos", "events_url": "https://api.github.com/users/chris-chambers/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-chambers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chris-chambers", "id": 6810256, "node_id": "MDQ6VXNlcjY4MTAyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/6810256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-chambers", "html_url": "https://github.com/chris-chambers", "followers_url": "https://api.github.com/users/chris-chambers/followers", "following_url": "https://api.github.com/users/chris-chambers/following{/other_user}", "gists_url": "https://api.github.com/users/chris-chambers/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-chambers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-chambers/subscriptions", "organizations_url": "https://api.github.com/users/chris-chambers/orgs", "repos_url": "https://api.github.com/users/chris-chambers/repos", "events_url": "https://api.github.com/users/chris-chambers/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-chambers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de51bbec15bd689b9c56e8596d1a1e973b707bbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/de51bbec15bd689b9c56e8596d1a1e973b707bbd", "html_url": "https://github.com/rust-lang/rust/commit/de51bbec15bd689b9c56e8596d1a1e973b707bbd"}], "stats": {"total": 183, "additions": 138, "deletions": 45}, "files": [{"sha": "346fb3580e134811f699baf7dfbd50a11c97871d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/19343860aa44d1c31a7802df22349f055ed9da16/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19343860aa44d1c31a7802df22349f055ed9da16/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=19343860aa44d1c31a7802df22349f055ed9da16", "patch": "@@ -208,10 +208,11 @@ impl<F> IdentMacroExpander for F\n }\n \n // Use a macro because forwarding to a simple function has type system issues\n-macro_rules! make_stmt_default {\n+macro_rules! make_stmts_default {\n     ($me:expr) => {\n         $me.make_expr().map(|e| {\n-            P(codemap::respan(e.span, ast::StmtExpr(e, ast::DUMMY_NODE_ID)))\n+            SmallVector::one(P(codemap::respan(\n+                e.span, ast::StmtExpr(e, ast::DUMMY_NODE_ID))))\n         })\n     }\n }\n@@ -238,12 +239,12 @@ pub trait MacResult {\n         None\n     }\n \n-    /// Create a statement.\n+    /// Create zero or more statements.\n     ///\n     /// By default this attempts to create an expression statement,\n     /// returning None if that fails.\n-    fn make_stmt(self: Box<Self>) -> Option<P<ast::Stmt>> {\n-        make_stmt_default!(self)\n+    fn make_stmts(self: Box<Self>) -> Option<SmallVector<P<ast::Stmt>>> {\n+        make_stmts_default!(self)\n     }\n }\n \n@@ -276,7 +277,7 @@ make_MacEager! {\n     pat: P<ast::Pat>,\n     items: SmallVector<P<ast::Item>>,\n     impl_items: SmallVector<P<ast::ImplItem>>,\n-    stmt: P<ast::Stmt>,\n+    stmts: SmallVector<P<ast::Stmt>>,\n }\n \n impl MacResult for MacEager {\n@@ -292,10 +293,10 @@ impl MacResult for MacEager {\n         self.impl_items\n     }\n \n-    fn make_stmt(self: Box<Self>) -> Option<P<ast::Stmt>> {\n-        match self.stmt {\n-            None => make_stmt_default!(self),\n-            s => s,\n+    fn make_stmts(self: Box<Self>) -> Option<SmallVector<P<ast::Stmt>>> {\n+        match self.stmts.as_ref().map_or(0, |s| s.len()) {\n+            0 => make_stmts_default!(self),\n+            _ => self.stmts,\n         }\n     }\n \n@@ -384,10 +385,11 @@ impl MacResult for DummyResult {\n             Some(SmallVector::zero())\n         }\n     }\n-    fn make_stmt(self: Box<DummyResult>) -> Option<P<ast::Stmt>> {\n-        Some(P(codemap::respan(self.span,\n-                               ast::StmtExpr(DummyResult::raw_expr(self.span),\n-                                             ast::DUMMY_NODE_ID))))\n+    fn make_stmts(self: Box<DummyResult>) -> Option<SmallVector<P<ast::Stmt>>> {\n+        Some(SmallVector::one(P(\n+            codemap::respan(self.span,\n+                            ast::StmtExpr(DummyResult::raw_expr(self.span),\n+                                          ast::DUMMY_NODE_ID)))))\n     }\n }\n "}, {"sha": "b6d1810a3f7c771ab6f71f85607da933e9951b4c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 41, "deletions": 26, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/19343860aa44d1c31a7802df22349f055ed9da16/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19343860aa44d1c31a7802df22349f055ed9da16/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=19343860aa44d1c31a7802df22349f055ed9da16", "patch": "@@ -745,34 +745,49 @@ pub fn expand_item_mac(it: P<ast::Item>,\n }\n \n /// Expand a stmt\n-fn expand_stmt(s: Stmt, fld: &mut MacroExpander) -> SmallVector<P<Stmt>> {\n-    let (mac, style) = match s.node {\n+fn expand_stmt(stmt: P<Stmt>, fld: &mut MacroExpander) -> SmallVector<P<Stmt>> {\n+    let stmt = stmt.and_then(|stmt| stmt);\n+    let (mac, style) = match stmt.node {\n         StmtMac(mac, style) => (mac, style),\n-        _ => return expand_non_macro_stmt(s, fld)\n+        _ => return expand_non_macro_stmt(stmt, fld)\n     };\n-    let expanded_stmt = match expand_mac_invoc(mac.and_then(|m| m), s.span,\n-                                                |r| r.make_stmt(),\n-                                                mark_stmt, fld) {\n-        Some(stmt) => stmt,\n-        None => {\n-            return SmallVector::zero();\n+\n+    let maybe_new_items =\n+        expand_mac_invoc(mac.and_then(|m| m), stmt.span,\n+                         |r| r.make_stmts(),\n+                         |stmts, mark| stmts.move_map(|m| mark_stmt(m, mark)),\n+                         fld);\n+\n+    let fully_expanded = match maybe_new_items {\n+        Some(stmts) => {\n+            // Keep going, outside-in.\n+            let new_items = stmts.into_iter().flat_map(|s| {\n+                fld.fold_stmt(s).into_iter()\n+            }).collect();\n+            fld.cx.bt_pop();\n+            new_items\n         }\n+        None => SmallVector::zero()\n     };\n \n-    // Keep going, outside-in.\n-    let fully_expanded = fld.fold_stmt(expanded_stmt);\n-    fld.cx.bt_pop();\n-\n-    if style == MacStmtWithSemicolon {\n-        fully_expanded.into_iter().map(|s| s.map(|Spanned {node, span}| {\n-            Spanned {\n-                node: match node {\n-                    StmtExpr(e, stmt_id) => StmtSemi(e, stmt_id),\n-                    _ => node /* might already have a semi */\n-                },\n-                span: span\n-            }\n-        })).collect()\n+    // If this is a macro invocation with a semicolon, then apply that\n+    // semicolon to the final statement produced by expansion.\n+    if style == MacStmtWithSemicolon && fully_expanded.len() > 0 {\n+        let last_index = fully_expanded.len() - 1;\n+        fully_expanded.into_iter().enumerate().map(|(i, stmt)|\n+            if i == last_index {\n+                stmt.map(|Spanned {node, span}| {\n+                    Spanned {\n+                        node: match node {\n+                            StmtExpr(e, stmt_id) => StmtSemi(e, stmt_id),\n+                            _ => node /* might already have a semi */\n+                        },\n+                        span: span\n+                    }\n+                })\n+            } else {\n+                stmt\n+            }).collect()\n     } else {\n         fully_expanded\n     }\n@@ -1389,7 +1404,7 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n     }\n \n     fn fold_stmt(&mut self, stmt: P<ast::Stmt>) -> SmallVector<P<ast::Stmt>> {\n-        stmt.and_then(|stmt| expand_stmt(stmt, self))\n+        expand_stmt(stmt, self)\n     }\n \n     fn fold_block(&mut self, block: P<Block>) -> P<Block> {\n@@ -1541,8 +1556,8 @@ fn mark_pat(pat: P<ast::Pat>, m: Mrk) -> P<ast::Pat> {\n }\n \n // apply a given mark to the given stmt. Used following the expansion of a macro.\n-fn mark_stmt(expr: P<ast::Stmt>, m: Mrk) -> P<ast::Stmt> {\n-    Marker{mark:m}.fold_stmt(expr)\n+fn mark_stmt(stmt: P<ast::Stmt>, m: Mrk) -> P<ast::Stmt> {\n+    Marker{mark:m}.fold_stmt(stmt)\n         .expect_one(\"marking a stmt didn't return exactly one stmt\")\n }\n "}, {"sha": "8a331bfac0bb14193987703bcd61d68685a5b2fc", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/19343860aa44d1c31a7802df22349f055ed9da16/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19343860aa44d1c31a7802df22349f055ed9da16/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=19343860aa44d1c31a7802df22349f055ed9da16", "patch": "@@ -88,10 +88,24 @@ impl<'a> MacResult for ParserAnyMacro<'a> {\n         Some(ret)\n     }\n \n-    fn make_stmt(self: Box<ParserAnyMacro<'a>>) -> Option<P<ast::Stmt>> {\n-        let ret = self.parser.borrow_mut().parse_stmt();\n-        self.ensure_complete_parse(true);\n-        ret\n+    fn make_stmts(self: Box<ParserAnyMacro<'a>>)\n+                 -> Option<SmallVector<P<ast::Stmt>>> {\n+        let mut ret = SmallVector::zero();\n+        loop {\n+            let mut parser = self.parser.borrow_mut();\n+            match parser.token {\n+                token::Eof => break,\n+                _ => match parser.parse_stmt_nopanic() {\n+                    Ok(maybe_stmt) => match maybe_stmt {\n+                        Some(stmt) => ret.push(stmt),\n+                        None => (),\n+                    },\n+                    Err(_) => break,\n+                }\n+            }\n+        }\n+        self.ensure_complete_parse(false);\n+        Some(ret)\n     }\n }\n "}, {"sha": "137a3ab42bd18b9c79ad0da780ddaf001672d712", "filename": "src/test/compile-fail/macro-incomplete-parse.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19343860aa44d1c31a7802df22349f055ed9da16/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19343860aa44d1c31a7802df22349f055ed9da16/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs?ref=19343860aa44d1c31a7802df22349f055ed9da16", "patch": "@@ -17,7 +17,8 @@ macro_rules! ignored_item {\n }\n \n macro_rules! ignored_expr {\n-    () => ( 1, 2 ) //~ ERROR macro expansion ignores token `,`\n+    () => ( 1,  //~ ERROR unexpected token: `,`\n+            2 ) //~ ERROR macro expansion ignores token `2`\n }\n \n macro_rules! ignored_pat {"}, {"sha": "5997a4f18e760c9253c7eaa8332812899a8ecb48", "filename": "src/test/run-pass/macro-nested_stmt_macros.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/19343860aa44d1c31a7802df22349f055ed9da16/src%2Ftest%2Frun-pass%2Fmacro-nested_stmt_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19343860aa44d1c31a7802df22349f055ed9da16/src%2Ftest%2Frun-pass%2Fmacro-nested_stmt_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-nested_stmt_macros.rs?ref=19343860aa44d1c31a7802df22349f055ed9da16", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! foo {\n+    () => {\n+        struct Bar;\n+        struct Baz;\n+    }\n+}\n+\n+macro_rules! grault {\n+    () => {\n+        foo!();\n+        struct Xyzzy;\n+    }\n+}\n+\n+fn static_assert_exists<T>() { }\n+\n+fn main() {\n+    grault!();\n+    static_assert_exists::<Bar>();\n+    static_assert_exists::<Baz>();\n+    static_assert_exists::<Xyzzy>();\n+}"}, {"sha": "c5badd78a6371ca9a3b6644c71d4be8a07e6408e", "filename": "src/test/run-pass/macro-stmt_macro_in_expr_macro.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/19343860aa44d1c31a7802df22349f055ed9da16/src%2Ftest%2Frun-pass%2Fmacro-stmt_macro_in_expr_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19343860aa44d1c31a7802df22349f055ed9da16/src%2Ftest%2Frun-pass%2Fmacro-stmt_macro_in_expr_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-stmt_macro_in_expr_macro.rs?ref=19343860aa44d1c31a7802df22349f055ed9da16", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! foo {\n+    () => {\n+        struct Bar;\n+        struct Baz;\n+    }\n+}\n+\n+macro_rules! grault {\n+    () => {{\n+        foo!();\n+        struct Xyzzy;\n+        0\n+    }}\n+}\n+\n+fn main() {\n+    let x = grault!();\n+    assert_eq!(x, 0);\n+}"}]}