{"sha": "7a782537b17a0cf8f46e9eb67d818275941cc0bc", "node_id": "C_kwDOAAsO6NoAKDdhNzgyNTM3YjE3YTBjZjhmNDZlOWViNjdkODE4Mjc1OTQxY2MwYmM", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-07-28T17:08:22Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-07-28T17:08:22Z"}, "message": "Merge commit '3c7e7dbc1583a0b06df5bd7623dd354a4debd23d' into clippyup", "tree": {"sha": "4853713d728359a1679f0354bf2132ab3d4bed27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4853713d728359a1679f0354bf2132ab3d4bed27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a782537b17a0cf8f46e9eb67d818275941cc0bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmLiwokACgkQHKDfKvWd\naKXVQhAAyGdYJkDVClKi3svPaDwxQKnXVHVTo5r9Gz3zAATUv/CcHYxzvUNoWzzz\nx+ZMhuEU4z0UrtZqUYojRADekLZ0Xy7Lc6xVpEWfalrNeNwV3rG5e8vQxqBzFLRh\nkgXb0s7UDxZF77tEh7Nm14bvMhCVfmveiJ+0yT8wKoDvm8UAPPjbUXcFtiDxDDXg\nF4kRh7jev/s6WghPyUkvNGqqxF55rdG40rDcde1EIQm4n5DJUkvyfmwBqK1e+AWp\ncRKxrBd3sZyLZctvfvtuefELtjQFJnV6vWkKj0twFiNzbrzowjQPm+TcSAMkvYC8\nWHxtDzRKPlxol9zMbOqydAXARYa1QoE2oLt9v+Z4WucT396p/LBgyDGRdSpW1bgp\nbUj74Guq6TYLQvZpDgSeQKdJh6Wz/rIxzPweYD3FP+s50OXnw+mycdcB1GlA8+6z\ni79JIRVp6s2HEBIBMl1CGAbow4lVmQp69buN0nrNp5oLw3BBEa6v/ZL2UU7OLrtf\nIOw3/mikejtzJv1R3/XxFl0jrs6ENjJxnXoveq9e4gCYA9nTuBwdZel+Oh53AsoI\nXynmQghPXyprF25G8eJXw6NndfI2rRtlXN9B1hRQ47r8Dpux1vuZJ7XxwHX71TsL\nLbB9RBoDiof6vaC1lztd/cQYF3V9rbFL/fFVuxvzPkoYK6F80Cs=\n=c8wo\n-----END PGP SIGNATURE-----", "payload": "tree 4853713d728359a1679f0354bf2132ab3d4bed27\nparent 05e678ccca974a8d0c26991083fb4cf8fff84e74\nparent 3c7e7dbc1583a0b06df5bd7623dd354a4debd23d\nauthor Philipp Krones <hello@philkrones.com> 1659028102 +0200\ncommitter Philipp Krones <hello@philkrones.com> 1659028102 +0200\n\nMerge commit '3c7e7dbc1583a0b06df5bd7623dd354a4debd23d' into clippyup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a782537b17a0cf8f46e9eb67d818275941cc0bc", "html_url": "https://github.com/rust-lang/rust/commit/7a782537b17a0cf8f46e9eb67d818275941cc0bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a782537b17a0cf8f46e9eb67d818275941cc0bc/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05e678ccca974a8d0c26991083fb4cf8fff84e74", "url": "https://api.github.com/repos/rust-lang/rust/commits/05e678ccca974a8d0c26991083fb4cf8fff84e74", "html_url": "https://github.com/rust-lang/rust/commit/05e678ccca974a8d0c26991083fb4cf8fff84e74"}, {"sha": "3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "html_url": "https://github.com/rust-lang/rust/commit/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d"}], "stats": {"total": 1823, "additions": 1526, "deletions": 297}, "files": [{"sha": "2278a8dc16ba04183535e156d4e4e3d7f4710482", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -3437,9 +3437,11 @@ Released 2018-09-13\n [`almost_complete_letter_range`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_letter_range\n [`almost_swapped`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_swapped\n [`approx_constant`]: https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n+[`arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic\n [`as_conversions`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions\n [`as_underscore`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_underscore\n [`assertions_on_constants`]: https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n+[`assertions_on_result_states`]: https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_result_states\n [`assign_op_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern\n [`assign_ops`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_ops\n [`async_yields_async`]: https://rust-lang.github.io/rust-clippy/master/index.html#async_yields_async\n@@ -3793,6 +3795,7 @@ Released 2018-09-13\n [`nonsensical_open_options`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonsensical_open_options\n [`nonstandard_macro_braces`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonstandard_macro_braces\n [`not_unsafe_ptr_arg_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref\n+[`obfuscated_if_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#obfuscated_if_else\n [`octal_escapes`]: https://rust-lang.github.io/rust-clippy/master/index.html#octal_escapes\n [`ok_expect`]: https://rust-lang.github.io/rust-clippy/master/index.html#ok_expect\n [`only_used_in_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion"}, {"sha": "1c875c3adcf55f3acacc07d9f05c28e5618ff5b9", "filename": "src/tools/clippy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -32,6 +32,7 @@ compiletest_rs = { version = \"0.8\", features = [\"tmp\"] }\n tester = \"0.9\"\n regex = \"1.5\"\n toml = \"0.5\"\n+walkdir = \"2.3\"\n # This is used by the `collect-metadata` alias.\n filetime = \"0.2\"\n "}, {"sha": "339287a7dd95f15203fe50e096d1aed826576e92", "filename": "src/tools/clippy/book/src/continuous_integration/github_actions.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fcontinuous_integration%2Fgithub_actions.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fcontinuous_integration%2Fgithub_actions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fcontinuous_integration%2Fgithub_actions.md?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,7 +1,7 @@\n # GitHub Actions\n \n-On the GitHub hosted runners, Clippy from the latest stable Rust version comes\n-pre-installed. So all you have to do is to run `cargo clippy`.\n+GitHub hosted runners using the latest stable version of Rust have Clippy pre-installed.\n+It is as simple as running `cargo clippy` to run lints against the codebase.\n \n ```yml\n on: push\n@@ -15,7 +15,7 @@ jobs:\n   clippy_check:\n     runs-on: ubuntu-latest\n     steps:\n-      - uses: actions/checkout@v1\n+      - uses: actions/checkout@v3\n       - name: Run Clippy\n         run: cargo clippy --all-targets --all-features\n ```"}, {"sha": "da781eb970df7be3ea597eb44a296da1c51813b0", "filename": "src/tools/clippy/book/src/development/adding_lints.md", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fadding_lints.md?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -10,6 +10,10 @@ because that's clearly a non-descriptive name.\n - [Adding a new lint](#adding-a-new-lint)\n   - [Setup](#setup)\n   - [Getting Started](#getting-started)\n+    - [Defining Our Lint](#defining-our-lint)\n+      - [Standalone](#standalone)\n+      - [Specific Type](#specific-type)\n+      - [Tests Location](#tests-location)\n   - [Testing](#testing)\n     - [Cargo lints](#cargo-lints)\n   - [Rustfix tests](#rustfix-tests)\n@@ -36,17 +40,38 @@ See the [Basics](basics.md#get-the-code) documentation.\n ## Getting Started\n \n There is a bit of boilerplate code that needs to be set up when creating a new\n-lint. Fortunately, you can use the clippy dev tools to handle this for you. We\n+lint. Fortunately, you can use the Clippy dev tools to handle this for you. We\n are naming our new lint `foo_functions` (lints are generally written in snake\n-case), and we don't need type information so it will have an early pass type\n-(more on this later on). If you're not sure if the name you chose fits the lint,\n-take a look at our [lint naming guidelines][lint_naming]. To get started on this\n-lint you can run `cargo dev new_lint --name=foo_functions --pass=early\n---category=pedantic` (category will default to nursery if not provided). This\n-command will create two files: `tests/ui/foo_functions.rs` and\n-`clippy_lints/src/foo_functions.rs`, as well as [registering the\n-lint](#lint-registration). For cargo lints, two project hierarchies (fail/pass)\n-will be created by default under `tests/ui-cargo`.\n+case), and we don't need type information, so it will have an early pass type\n+(more on this later). If you're unsure if the name you chose fits the lint,\n+take a look at our [lint naming guidelines][lint_naming].\n+\n+## Defining Our Lint\n+To get started, there are two ways to define our lint.\n+\n+### Standalone\n+Command: `cargo dev new_lint --name=foo_functions --pass=early --category=pedantic`\n+(category will default to nursery if not provided)\n+\n+This command will create a new file: `clippy_lints/src/foo_functions.rs`, as well\n+as [register the lint](#lint-registration).\n+\n+### Specific Type\n+Command: `cargo dev new_lint --name=foo_functions --type=functions --category=pedantic`\n+\n+This command will create a new file: `clippy_lints/src/{type}/foo_functions.rs`.\n+\n+Notice how this command has a `--type` flag instead of `--pass`. Unlike a standalone\n+definition, this lint won't be registered in the traditional sense. Instead, you will\n+call your lint from within the type's lint pass, found in `clippy_lints/src/{type}/mod.rs`.\n+\n+A \"type\" is just the name of a directory in `clippy_lints/src`, like `functions` in\n+the example command. These are groupings of lints with common behaviors, so if your\n+lint falls into one, it would be best to add it to that type.\n+\n+### Tests Location\n+Both commands will create a file: `tests/ui/foo_functions.rs`. For cargo lints,\n+two project hierarchies (fail/pass) will be created by default under `tests/ui-cargo`.\n \n Next, we'll open up these files and add our lint!\n "}, {"sha": "a48742191850b6be852d8a5401369c03dd10884d", "filename": "src/tools/clippy/book/src/development/infrastructure/book.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbook.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbook.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbook.md?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -25,7 +25,7 @@ instructions for other options.\n ## Make changes\n \n The book's\n-[src](https://github.com/joshrotenberg/rust-clippy/tree/clippy_guide/book/src)\n+[src](https://github.com/rust-lang/rust-clippy/tree/master/book/src)\n directory contains all of the markdown files used to generate the book. If you\n want to see your changes in real time, you can use the mdbook `serve` command to\n run a web server locally that will automatically update changes as they are"}, {"sha": "3b27f061eb0b4f3fc57964044297bc26e8c3a413", "filename": "src/tools/clippy/clippy_dev/src/fmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Ffmt.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -13,7 +13,7 @@ pub enum CliError {\n     IoError(io::Error),\n     RustfmtNotInstalled,\n     WalkDirError(walkdir::Error),\n-    RaSetupActive,\n+    IntellijSetupActive,\n }\n \n impl From<io::Error> for CliError {\n@@ -48,7 +48,7 @@ pub fn run(check: bool, verbose: bool) {\n             .expect(\"Failed to read clippy Cargo.toml\")\n             .contains(&\"[target.'cfg(NOT_A_PLATFORM)'.dependencies]\")\n         {\n-            return Err(CliError::RaSetupActive);\n+            return Err(CliError::IntellijSetupActive);\n         }\n \n         rustfmt_test(context)?;\n@@ -93,11 +93,11 @@ pub fn run(check: bool, verbose: bool) {\n             CliError::WalkDirError(err) => {\n                 eprintln!(\"error: {}\", err);\n             },\n-            CliError::RaSetupActive => {\n+            CliError::IntellijSetupActive => {\n                 eprintln!(\n                     \"error: a local rustc repo is enabled as path dependency via `cargo dev setup intellij`.\n Not formatting because that would format the local repo as well!\n-Please revert the changes to Cargo.tomls first.\"\n+Please revert the changes to Cargo.tomls with `cargo dev remove intellij`.\"\n                 );\n             },\n         }"}, {"sha": "a417d3dd8a4e7b404d9eceb70fe3934b1ec0e8e3", "filename": "src/tools/clippy/clippy_dev/src/main.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -36,7 +36,8 @@ fn main() {\n             match new_lint::create(\n                 matches.get_one::<String>(\"pass\"),\n                 matches.get_one::<String>(\"name\"),\n-                matches.get_one::<String>(\"category\"),\n+                matches.get_one::<String>(\"category\").map(String::as_str),\n+                matches.get_one::<String>(\"type\").map(String::as_str),\n                 matches.contains_id(\"msrv\"),\n             ) {\n                 Ok(_) => update_lints::update(update_lints::UpdateMode::Change),\n@@ -157,7 +158,8 @@ fn get_clap_config() -> ArgMatches {\n                         .help(\"Specify whether the lint runs during the early or late pass\")\n                         .takes_value(true)\n                         .value_parser([PossibleValue::new(\"early\"), PossibleValue::new(\"late\")])\n-                        .required(true),\n+                        .conflicts_with(\"type\")\n+                        .required_unless_present(\"type\"),\n                     Arg::new(\"name\")\n                         .short('n')\n                         .long(\"name\")\n@@ -183,6 +185,11 @@ fn get_clap_config() -> ArgMatches {\n                             PossibleValue::new(\"internal_warn\"),\n                         ])\n                         .takes_value(true),\n+                    Arg::new(\"type\")\n+                        .long(\"type\")\n+                        .help(\"What directory the lint belongs in\")\n+                        .takes_value(true)\n+                        .required(false),\n                     Arg::new(\"msrv\").long(\"msrv\").help(\"Add MSRV config code to the lint\"),\n                 ]),\n             Command::new(\"setup\")"}, {"sha": "03d2ef3d19edd4406c4c0d86eb62ceff71f23d72", "filename": "src/tools/clippy/clippy_dev/src/new_lint.rs", "status": "modified", "additions": 284, "deletions": 37, "changes": 321, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fnew_lint.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,5 +1,5 @@\n use crate::clippy_project_root;\n-use indoc::indoc;\n+use indoc::{indoc, writedoc};\n use std::fmt::Write as _;\n use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n@@ -10,6 +10,7 @@ struct LintData<'a> {\n     pass: &'a str,\n     name: &'a str,\n     category: &'a str,\n+    ty: Option<&'a str>,\n     project_root: PathBuf,\n }\n \n@@ -37,26 +38,44 @@ impl<T> Context for io::Result<T> {\n pub fn create(\n     pass: Option<&String>,\n     lint_name: Option<&String>,\n-    category: Option<&String>,\n+    category: Option<&str>,\n+    mut ty: Option<&str>,\n     msrv: bool,\n ) -> io::Result<()> {\n+    if category == Some(\"cargo\") && ty.is_none() {\n+        // `cargo` is a special category, these lints should always be in `clippy_lints/src/cargo`\n+        ty = Some(\"cargo\");\n+    }\n+\n     let lint = LintData {\n-        pass: pass.expect(\"`pass` argument is validated by clap\"),\n+        pass: pass.map_or(\"\", String::as_str),\n         name: lint_name.expect(\"`name` argument is validated by clap\"),\n         category: category.expect(\"`category` argument is validated by clap\"),\n+        ty,\n         project_root: clippy_project_root(),\n     };\n \n     create_lint(&lint, msrv).context(\"Unable to create lint implementation\")?;\n     create_test(&lint).context(\"Unable to create a test for the new lint\")?;\n-    add_lint(&lint, msrv).context(\"Unable to add lint to clippy_lints/src/lib.rs\")\n+\n+    if lint.ty.is_none() {\n+        add_lint(&lint, msrv).context(\"Unable to add lint to clippy_lints/src/lib.rs\")?;\n+    }\n+\n+    Ok(())\n }\n \n fn create_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n-    let lint_contents = get_lint_file_contents(lint, enable_msrv);\n+    if let Some(ty) = lint.ty {\n+        create_lint_for_ty(lint, enable_msrv, ty)\n+    } else {\n+        let lint_contents = get_lint_file_contents(lint, enable_msrv);\n+        let lint_path = format!(\"clippy_lints/src/{}.rs\", lint.name);\n+        write_file(lint.project_root.join(&lint_path), lint_contents.as_bytes())?;\n+        println!(\"Generated lint file: `{}`\", lint_path);\n \n-    let lint_path = format!(\"clippy_lints/src/{}.rs\", lint.name);\n-    write_file(lint.project_root.join(&lint_path), lint_contents.as_bytes())\n+        Ok(())\n+    }\n }\n \n fn create_test(lint: &LintData<'_>) -> io::Result<()> {\n@@ -75,16 +94,22 @@ fn create_test(lint: &LintData<'_>) -> io::Result<()> {\n \n     if lint.category == \"cargo\" {\n         let relative_test_dir = format!(\"tests/ui-cargo/{}\", lint.name);\n-        let test_dir = lint.project_root.join(relative_test_dir);\n+        let test_dir = lint.project_root.join(&relative_test_dir);\n         fs::create_dir(&test_dir)?;\n \n         create_project_layout(lint.name, &test_dir, \"fail\", \"Content that triggers the lint goes here\")?;\n-        create_project_layout(lint.name, &test_dir, \"pass\", \"This file should not trigger the lint\")\n+        create_project_layout(lint.name, &test_dir, \"pass\", \"This file should not trigger the lint\")?;\n+\n+        println!(\"Generated test directories: `{relative_test_dir}/pass`, `{relative_test_dir}/fail`\");\n     } else {\n         let test_path = format!(\"tests/ui/{}.rs\", lint.name);\n         let test_contents = get_test_file_contents(lint.name, None);\n-        write_file(lint.project_root.join(test_path), test_contents)\n+        write_file(lint.project_root.join(&test_path), test_contents)?;\n+\n+        println!(\"Generated test file: `{}`\", test_path);\n     }\n+\n+    Ok(())\n }\n \n fn add_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n@@ -204,7 +229,6 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n         },\n     };\n \n-    let version = get_stabilization_version();\n     let lint_name = lint.name;\n     let category = lint.category;\n     let name_camel = to_camel_case(lint.name);\n@@ -238,32 +262,7 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n         )\n     });\n \n-    let _ = write!(\n-        result,\n-        indoc! {r#\"\n-            declare_clippy_lint! {{\n-                /// ### What it does\n-                ///\n-                /// ### Why is this bad?\n-                ///\n-                /// ### Example\n-                /// ```rust\n-                /// // example code where clippy issues a warning\n-                /// ```\n-                /// Use instead:\n-                /// ```rust\n-                /// // example code which does not raise clippy warning\n-                /// ```\n-                #[clippy::version = \"{version}\"]\n-                pub {name_upper},\n-                {category},\n-                \"default lint description\"\n-            }}\n-        \"#},\n-        version = version,\n-        name_upper = name_upper,\n-        category = category,\n-    );\n+    let _ = write!(result, \"{}\", get_lint_declaration(&name_upper, category));\n \n     result.push_str(&if enable_msrv {\n         format!(\n@@ -312,6 +311,254 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n     result\n }\n \n+fn get_lint_declaration(name_upper: &str, category: &str) -> String {\n+    format!(\n+        indoc! {r#\"\n+            declare_clippy_lint! {{\n+                /// ### What it does\n+                ///\n+                /// ### Why is this bad?\n+                ///\n+                /// ### Example\n+                /// ```rust\n+                /// // example code where clippy issues a warning\n+                /// ```\n+                /// Use instead:\n+                /// ```rust\n+                /// // example code which does not raise clippy warning\n+                /// ```\n+                #[clippy::version = \"{version}\"]\n+                pub {name_upper},\n+                {category},\n+                \"default lint description\"\n+            }}\n+        \"#},\n+        version = get_stabilization_version(),\n+        name_upper = name_upper,\n+        category = category,\n+    )\n+}\n+\n+fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::Result<()> {\n+    match ty {\n+        \"cargo\" => assert_eq!(\n+            lint.category, \"cargo\",\n+            \"Lints of type `cargo` must have the `cargo` category\"\n+        ),\n+        _ if lint.category == \"cargo\" => panic!(\"Lints of category `cargo` must have the `cargo` type\"),\n+        _ => {},\n+    }\n+\n+    let ty_dir = lint.project_root.join(format!(\"clippy_lints/src/{}\", ty));\n+    assert!(\n+        ty_dir.exists() && ty_dir.is_dir(),\n+        \"Directory `{}` does not exist!\",\n+        ty_dir.display()\n+    );\n+\n+    let lint_file_path = ty_dir.join(format!(\"{}.rs\", lint.name));\n+    assert!(\n+        !lint_file_path.exists(),\n+        \"File `{}` already exists\",\n+        lint_file_path.display()\n+    );\n+\n+    let mod_file_path = ty_dir.join(\"mod.rs\");\n+    let context_import = setup_mod_file(&mod_file_path, lint)?;\n+\n+    let name_upper = lint.name.to_uppercase();\n+    let mut lint_file_contents = String::new();\n+\n+    if enable_msrv {\n+        let _ = writedoc!(\n+            lint_file_contents,\n+            r#\"\n+                use clippy_utils::{{meets_msrv, msrvs}};\n+                use rustc_lint::{{{context_import}, LintContext}};\n+                use rustc_semver::RustcVersion;\n+\n+                use super::{name_upper};\n+\n+                // TODO: Adjust the parameters as necessary\n+                pub(super) fn check(cx: &{context_import}, msrv: Option<RustcVersion>) {{\n+                    if !meets_msrv(msrv, todo!(\"Add a new entry in `clippy_utils/src/msrvs`\")) {{\n+                        return;\n+                    }}\n+                    todo!();\n+                }}\n+           \"#,\n+            context_import = context_import,\n+            name_upper = name_upper,\n+        );\n+    } else {\n+        let _ = writedoc!(\n+            lint_file_contents,\n+            r#\"\n+                use rustc_lint::{{{context_import}, LintContext}};\n+\n+                use super::{name_upper};\n+\n+                // TODO: Adjust the parameters as necessary\n+                pub(super) fn check(cx: &{context_import}) {{\n+                    todo!();\n+                }}\n+           \"#,\n+            context_import = context_import,\n+            name_upper = name_upper,\n+        );\n+    }\n+\n+    write_file(lint_file_path.as_path(), lint_file_contents)?;\n+    println!(\"Generated lint file: `clippy_lints/src/{}/{}.rs`\", ty, lint.name);\n+    println!(\n+        \"Be sure to add a call to `{}::check` in `clippy_lints/src/{}/mod.rs`!\",\n+        lint.name, ty\n+    );\n+\n+    Ok(())\n+}\n+\n+#[allow(clippy::too_many_lines)]\n+fn setup_mod_file(path: &Path, lint: &LintData<'_>) -> io::Result<&'static str> {\n+    use super::update_lints::{match_tokens, LintDeclSearchResult};\n+    use rustc_lexer::TokenKind;\n+\n+    let lint_name_upper = lint.name.to_uppercase();\n+\n+    let mut file_contents = fs::read_to_string(path)?;\n+    assert!(\n+        !file_contents.contains(&lint_name_upper),\n+        \"Lint `{}` already defined in `{}`\",\n+        lint.name,\n+        path.display()\n+    );\n+\n+    let mut offset = 0usize;\n+    let mut last_decl_curly_offset = None;\n+    let mut lint_context = None;\n+\n+    let mut iter = rustc_lexer::tokenize(&file_contents).map(|t| {\n+        let range = offset..offset + t.len;\n+        offset = range.end;\n+\n+        LintDeclSearchResult {\n+            token_kind: t.kind,\n+            content: &file_contents[range.clone()],\n+            range,\n+        }\n+    });\n+\n+    // Find both the last lint declaration (declare_clippy_lint!) and the lint pass impl\n+    while let Some(LintDeclSearchResult { content, .. }) = iter.find(|result| result.token_kind == TokenKind::Ident) {\n+        let mut iter = iter\n+            .by_ref()\n+            .filter(|t| !matches!(t.token_kind, TokenKind::Whitespace | TokenKind::LineComment { .. }));\n+\n+        match content {\n+            \"declare_clippy_lint\" => {\n+                // matches `!{`\n+                match_tokens!(iter, Bang OpenBrace);\n+                if let Some(LintDeclSearchResult { range, .. }) =\n+                    iter.find(|result| result.token_kind == TokenKind::CloseBrace)\n+                {\n+                    last_decl_curly_offset = Some(range.end);\n+                }\n+            },\n+            \"impl\" => {\n+                let mut token = iter.next();\n+                match token {\n+                    // matches <'foo>\n+                    Some(LintDeclSearchResult {\n+                        token_kind: TokenKind::Lt,\n+                        ..\n+                    }) => {\n+                        match_tokens!(iter, Lifetime { .. } Gt);\n+                        token = iter.next();\n+                    },\n+                    None => break,\n+                    _ => {},\n+                }\n+\n+                if let Some(LintDeclSearchResult {\n+                    token_kind: TokenKind::Ident,\n+                    content,\n+                    ..\n+                }) = token\n+                {\n+                    // Get the appropriate lint context struct\n+                    lint_context = match content {\n+                        \"LateLintPass\" => Some(\"LateContext\"),\n+                        \"EarlyLintPass\" => Some(\"EarlyContext\"),\n+                        _ => continue,\n+                    };\n+                }\n+            },\n+            _ => {},\n+        }\n+    }\n+\n+    drop(iter);\n+\n+    let last_decl_curly_offset =\n+        last_decl_curly_offset.unwrap_or_else(|| panic!(\"No lint declarations found in `{}`\", path.display()));\n+    let lint_context =\n+        lint_context.unwrap_or_else(|| panic!(\"No lint pass implementation found in `{}`\", path.display()));\n+\n+    // Add the lint declaration to `mod.rs`\n+    file_contents.replace_range(\n+        // Remove the trailing newline, which should always be present\n+        last_decl_curly_offset..=last_decl_curly_offset,\n+        &format!(\"\\n\\n{}\", get_lint_declaration(&lint_name_upper, lint.category)),\n+    );\n+\n+    // Add the lint to `impl_lint_pass`/`declare_lint_pass`\n+    let impl_lint_pass_start = file_contents.find(\"impl_lint_pass!\").unwrap_or_else(|| {\n+        file_contents\n+            .find(\"declare_lint_pass!\")\n+            .unwrap_or_else(|| panic!(\"failed to find `impl_lint_pass`/`declare_lint_pass`\"))\n+    });\n+\n+    let mut arr_start = file_contents[impl_lint_pass_start..].find('[').unwrap_or_else(|| {\n+        panic!(\"malformed `impl_lint_pass`/`declare_lint_pass`\");\n+    });\n+\n+    arr_start += impl_lint_pass_start;\n+\n+    let mut arr_end = file_contents[arr_start..]\n+        .find(']')\n+        .expect(\"failed to find `impl_lint_pass` terminator\");\n+\n+    arr_end += arr_start;\n+\n+    let mut arr_content = file_contents[arr_start + 1..arr_end].to_string();\n+    arr_content.retain(|c| !c.is_whitespace());\n+\n+    let mut new_arr_content = String::new();\n+    for ident in arr_content\n+        .split(',')\n+        .chain(std::iter::once(&*lint_name_upper))\n+        .filter(|s| !s.is_empty())\n+    {\n+        let _ = write!(new_arr_content, \"\\n    {},\", ident);\n+    }\n+    new_arr_content.push('\\n');\n+\n+    file_contents.replace_range(arr_start + 1..arr_end, &new_arr_content);\n+\n+    // Just add the mod declaration at the top, it'll be fixed by rustfmt\n+    file_contents.insert_str(0, &format!(\"mod {};\\n\", &lint.name));\n+\n+    let mut file = OpenOptions::new()\n+        .write(true)\n+        .truncate(true)\n+        .open(path)\n+        .context(format!(\"trying to open: `{}`\", path.display()))?;\n+    file.write_all(file_contents.as_bytes())\n+        .context(format!(\"writing to file: `{}`\", path.display()))?;\n+\n+    Ok(lint_context)\n+}\n+\n #[test]\n fn test_camel_case() {\n     let s = \"a_lint\";"}, {"sha": "aed38bc2817607266ed65679a74afed63a427069", "filename": "src/tools/clippy/clippy_dev/src/update_lints.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fupdate_lints.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -824,10 +824,12 @@ macro_rules! match_tokens {\n     }\n }\n \n-struct LintDeclSearchResult<'a> {\n-    token_kind: TokenKind,\n-    content: &'a str,\n-    range: Range<usize>,\n+pub(crate) use match_tokens;\n+\n+pub(crate) struct LintDeclSearchResult<'a> {\n+    pub token_kind: TokenKind,\n+    pub content: &'a str,\n+    pub range: Range<usize>,\n }\n \n /// Parse a source file looking for `declare_clippy_lint` macro invocations."}, {"sha": "c7a76e5f9077cf3ac998e106f5d286c6276c9300", "filename": "src/tools/clippy/clippy_lints/src/as_conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fas_conversions.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -11,7 +11,7 @@ declare_clippy_lint! {\n     /// Note that this lint is specialized in linting *every single* use of `as`\n     /// regardless of whether good alternatives exist or not.\n     /// If you want more precise lints for `as`, please consider using these separate lints:\n-    /// `unnecessary_cast`, `cast_lossless/possible_truncation/possible_wrap/precision_loss/sign_loss`,\n+    /// `unnecessary_cast`, `cast_lossless/cast_possible_truncation/cast_possible_wrap/cast_precision_loss/cast_sign_loss`,\n     /// `fn_to_numeric_cast(_with_truncation)`, `char_lit_as_u8`, `ref_to_mut` and `ptr_as_ptr`.\n     /// There is a good explanation the reason why this lint should work in this way and how it is useful\n     /// [in this issue](https://github.com/rust-lang/rust-clippy/issues/5122)."}, {"sha": "b6affdee5236418d65a4f5a5d45e493ae54ce414", "filename": "src/tools/clippy/clippy_lints/src/assertions_on_result_states.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassertions_on_result_states.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -0,0 +1,98 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::macros::{find_assert_args, root_macro_call_first_node, PanicExpn};\n+use clippy_utils::path_res;\n+use clippy_utils::source::snippet_with_context;\n+use clippy_utils::ty::{implements_trait, is_copy, is_type_diagnostic_item};\n+use clippy_utils::usage::local_used_after_expr;\n+use rustc_errors::Applicability;\n+use rustc_hir::def::Res;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, Ty};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `assert!(r.is_ok())` or `assert!(r.is_err())` calls.\n+    ///\n+    /// ### Why is this bad?\n+    /// An assertion failure cannot output an useful message of the error.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// # let r = Ok::<_, ()>(());\n+    /// assert!(r.is_ok());\n+    /// # let r = Err::<_, ()>(());\n+    /// assert!(r.is_err());\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub ASSERTIONS_ON_RESULT_STATES,\n+    style,\n+    \"`assert!(r.is_ok())`/`assert!(r.is_err())` gives worse error message than directly calling `r.unwrap()`/`r.unwrap_err()`\"\n+}\n+\n+declare_lint_pass!(AssertionsOnResultStates => [ASSERTIONS_ON_RESULT_STATES]);\n+\n+impl<'tcx> LateLintPass<'tcx> for AssertionsOnResultStates {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n+        if let Some(macro_call) = root_macro_call_first_node(cx, e)\n+            && matches!(cx.tcx.get_diagnostic_name(macro_call.def_id), Some(sym::assert_macro))\n+            && let Some((condition, panic_expn)) = find_assert_args(cx, e, macro_call.expn)\n+            && matches!(panic_expn, PanicExpn::Empty)\n+            && let ExprKind::MethodCall(method_segment, [recv], _) = condition.kind\n+            && let result_type_with_refs = cx.typeck_results().expr_ty(recv)\n+            && let result_type = result_type_with_refs.peel_refs()\n+            && is_type_diagnostic_item(cx, result_type, sym::Result)\n+            && let ty::Adt(_, substs) = result_type.kind()\n+        {\n+            if !is_copy(cx, result_type) {\n+                if result_type_with_refs != result_type {\n+                    return;\n+                } else if let Res::Local(binding_id) = path_res(cx, recv)\n+                    && local_used_after_expr(cx, binding_id, recv) {\n+                    return;\n+                }\n+            }\n+            let mut app = Applicability::MachineApplicable;\n+            match method_segment.ident.as_str() {\n+                \"is_ok\" if has_debug_impl(cx, substs.type_at(1)) => {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        ASSERTIONS_ON_RESULT_STATES,\n+                        macro_call.span,\n+                        \"called `assert!` with `Result::is_ok`\",\n+                        \"replace with\",\n+                        format!(\n+                            \"{}.unwrap()\",\n+                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0\n+                        ),\n+                        app,\n+                    );\n+                }\n+                \"is_err\" if has_debug_impl(cx, substs.type_at(0)) => {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        ASSERTIONS_ON_RESULT_STATES,\n+                        macro_call.span,\n+                        \"called `assert!` with `Result::is_err`\",\n+                        \"replace with\",\n+                        format!(\n+                            \"{}.unwrap_err()\",\n+                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0\n+                        ),\n+                        app,\n+                    );\n+                }\n+                _ => (),\n+            };\n+        }\n+    }\n+}\n+\n+/// This checks whether a given type is known to implement Debug.\n+fn has_debug_impl<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    cx.tcx\n+        .get_diagnostic_item(sym::Debug)\n+        .map_or(false, |debug| implements_trait(cx, ty, debug, &[]))\n+}"}, {"sha": "9f45db86a0913a236a425a7876e5979ac66a45c5", "filename": "src/tools/clippy/clippy_lints/src/cargo/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcargo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcargo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcargo%2Fmod.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,3 +1,8 @@\n+mod common_metadata;\n+mod feature_name;\n+mod multiple_crate_versions;\n+mod wildcard_dependencies;\n+\n use cargo_metadata::MetadataCommand;\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::is_lint_allowed;\n@@ -6,11 +11,6 @@ use rustc_lint::{LateContext, LateLintPass, Lint};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::DUMMY_SP;\n \n-mod common_metadata;\n-mod feature_name;\n-mod multiple_crate_versions;\n-mod wildcard_dependencies;\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks to see if all common metadata is defined in"}, {"sha": "7eff71d5007432772486ee84553434ae641eecd4", "filename": "src/tools/clippy/clippy_lints/src/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -24,7 +24,10 @@ declare_clippy_lint! {\n     /// Use instead:\n     /// ```rust\n     /// fn is_rust_file(filename: &str) -> bool {\n-    ///     filename.rsplit('.').next().map(|ext| ext.eq_ignore_ascii_case(\"rs\")) == Some(true)\n+    ///     let filename = std::path::Path::new(filename);\n+    ///     filename.extension()\n+    ///         .map(|ext| ext.eq_ignore_ascii_case(\"rs\"))\n+    ///         .unwrap_or(false)\n     /// }\n     /// ```\n     #[clippy::version = \"1.51.0\"]"}, {"sha": "a90f894a7b19cdbcdc422fbe2c1bca66a9cb70a6", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1028,9 +1028,10 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n             let mut app = Applicability::MachineApplicable;\n             let (snip, snip_is_macro) = snippet_with_context(cx, expr.span, data.span.ctxt(), \"..\", &mut app);\n             span_lint_hir_and_then(cx, NEEDLESS_BORROW, data.hir_id, data.span, state.msg, |diag| {\n+                let calls_field = matches!(expr.kind, ExprKind::Field(..)) && matches!(data.position, Position::Callee);\n                 let sugg = if !snip_is_macro\n-                    && expr.precedence().order() < data.position.precedence()\n                     && !has_enclosing_paren(&snip)\n+                    && (expr.precedence().order() < data.position.precedence() || calls_field)\n                 {\n                     format!(\"({})\", snip)\n                 } else {"}, {"sha": "925a8cb8deed94ff792f3f4a7ce144ec5b2486c5", "filename": "src/tools/clippy/clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -9,7 +9,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::kw;\n-use rustc_span::{sym, BytePos, Span};\n+use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -85,22 +85,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n                         ExprKind::MethodCall(path, ..) => path.ident.name == sym::to_string,\n                         _ => false,\n                     };\n-                    let sugg = if format_args.format_string_span.contains(value.span) {\n-                        // Implicit argument. e.g. `format!(\"{x}\")` span points to `{x}`\n-                        let spdata = value.span.data();\n-                        let span = Span::new(\n-                            spdata.lo + BytePos(1),\n-                            spdata.hi - BytePos(1),\n-                            spdata.ctxt,\n-                            spdata.parent\n-                        );\n-                        let snip = snippet_with_applicability(cx, span, \"..\", &mut applicability);\n-                        if is_new_string {\n-                            snip.into()\n-                        } else {\n-                            format!(\"{snip}.to_string()\")\n-                        }\n-                    } else if is_new_string {\n+                    let sugg = if is_new_string {\n                         snippet_with_applicability(cx, value.span, \"..\", &mut applicability).into_owned()\n                     } else {\n                         let sugg = Sugg::hir_with_applicability(cx, value, \"<arg>\", &mut applicability);"}, {"sha": "04b5be6c80ec6acf2727dfeaec769f0f71f43de0", "filename": "src/tools/clippy/clippy_lints/src/format_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat_impl.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -141,7 +141,7 @@ fn check_to_string_in_display(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         // Get the hir_id of the object we are calling the method on\n         if let ExprKind::MethodCall(path, [ref self_arg, ..], _) = expr.kind;\n         // Is the method to_string() ?\n-        if path.ident.name == sym!(to_string);\n+        if path.ident.name == sym::to_string;\n         // Is the method a part of the ToString trait? (i.e. not to_string() implemented\n         // separately)\n         if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);"}, {"sha": "5be1c417bf8f665701e92f588782508680079ff7", "filename": "src/tools/clippy/clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -6,6 +6,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE),\n     LintId::of(approx_const::APPROX_CONSTANT),\n     LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n+    LintId::of(assertions_on_result_states::ASSERTIONS_ON_RESULT_STATES),\n     LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n     LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n     LintId::of(attrs::DEPRECATED_CFG_ATTR),\n@@ -187,6 +188,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::NEEDLESS_SPLITN),\n     LintId::of(methods::NEW_RET_NO_SELF),\n     LintId::of(methods::NO_EFFECT_REPLACE),\n+    LintId::of(methods::OBFUSCATED_IF_ELSE),\n     LintId::of(methods::OK_EXPECT),\n     LintId::of(methods::OPTION_AS_REF_DEREF),\n     LintId::of(methods::OPTION_FILTER_MAP),"}, {"sha": "99bde35cf152b96bebf97fc279ed91aed7534a10", "filename": "src/tools/clippy/clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -42,6 +42,7 @@ store.register_lints(&[\n     asm_syntax::INLINE_ASM_X86_ATT_SYNTAX,\n     asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX,\n     assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n+    assertions_on_result_states::ASSERTIONS_ON_RESULT_STATES,\n     async_yields_async::ASYNC_YIELDS_ASYNC,\n     attrs::ALLOW_ATTRIBUTES_WITHOUT_REASON,\n     attrs::BLANKET_CLIPPY_RESTRICTION_LINTS,\n@@ -330,6 +331,7 @@ store.register_lints(&[\n     methods::NEEDLESS_SPLITN,\n     methods::NEW_RET_NO_SELF,\n     methods::NO_EFFECT_REPLACE,\n+    methods::OBFUSCATED_IF_ELSE,\n     methods::OK_EXPECT,\n     methods::OPTION_AS_REF_DEREF,\n     methods::OPTION_FILTER_MAP,\n@@ -417,6 +419,7 @@ store.register_lints(&[\n     only_used_in_recursion::ONLY_USED_IN_RECURSION,\n     open_options::NONSENSICAL_OPEN_OPTIONS,\n     operators::ABSURD_EXTREME_COMPARISONS,\n+    operators::ARITHMETIC,\n     operators::ASSIGN_OP_PATTERN,\n     operators::BAD_BIT_MASK,\n     operators::CMP_NAN,"}, {"sha": "495abd8387e85e0bd8ce1c073e02b6ec4e4564b6", "filename": "src/tools/clippy/clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -48,6 +48,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(mixed_read_write_in_expression::MIXED_READ_WRITE_IN_EXPRESSION),\n     LintId::of(module_style::MOD_MODULE_FILES),\n     LintId::of(module_style::SELF_NAMED_MODULE_FILES),\n+    LintId::of(operators::ARITHMETIC),\n     LintId::of(operators::FLOAT_ARITHMETIC),\n     LintId::of(operators::FLOAT_CMP_CONST),\n     LintId::of(operators::INTEGER_ARITHMETIC),"}, {"sha": "e029a5235e720995a26ddac5fd07301917a31a64", "filename": "src/tools/clippy/clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -4,6 +4,7 @@\n \n store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n+    LintId::of(assertions_on_result_states::ASSERTIONS_ON_RESULT_STATES),\n     LintId::of(blacklisted_name::BLACKLISTED_NAME),\n     LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n     LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n@@ -70,6 +71,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),\n     LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n     LintId::of(methods::NEW_RET_NO_SELF),\n+    LintId::of(methods::OBFUSCATED_IF_ELSE),\n     LintId::of(methods::OK_EXPECT),\n     LintId::of(methods::OPTION_MAP_OR_NONE),\n     LintId::of(methods::RESULT_MAP_OR_INTO_OPTION),"}, {"sha": "eb3841272b17f4709c76697ff8f68f2266b9caa7", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -174,6 +174,7 @@ mod as_conversions;\n mod as_underscore;\n mod asm_syntax;\n mod assertions_on_constants;\n+mod assertions_on_result_states;\n mod async_yields_async;\n mod attrs;\n mod await_holding_invalid;\n@@ -548,6 +549,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         store.register_late_pass(|| Box::new(utils::internal_lints::MsrvAttrImpl));\n     }\n \n+    let arithmetic_allowed = conf.arithmetic_allowed.clone();\n+    store.register_late_pass(move || Box::new(operators::arithmetic::Arithmetic::new(arithmetic_allowed.clone())));\n     store.register_late_pass(|| Box::new(utils::dump_hir::DumpHir));\n     store.register_late_pass(|| Box::new(utils::author::Author));\n     let await_holding_invalid_types = conf.await_holding_invalid_types.clone();\n@@ -727,6 +730,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(unnecessary_sort_by::UnnecessarySortBy));\n     store.register_late_pass(move || Box::new(unnecessary_wraps::UnnecessaryWraps::new(avoid_breaking_exported_api)));\n     store.register_late_pass(|| Box::new(assertions_on_constants::AssertionsOnConstants));\n+    store.register_late_pass(|| Box::new(assertions_on_result_states::AssertionsOnResultStates));\n     store.register_late_pass(|| Box::new(transmuting_null::TransmutingNull));\n     store.register_late_pass(|| Box::new(path_buf_push_overwrite::PathBufPushOverwrite));\n     store.register_late_pass(|| Box::new(inherent_to_string::InherentToString));\n@@ -782,7 +786,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     store.register_late_pass(|| Box::new(default::Default::default()));\n-    store.register_late_pass(|| Box::new(unused_self::UnusedSelf));\n+    store.register_late_pass(move || Box::new(unused_self::UnusedSelf::new(avoid_breaking_exported_api)));\n     store.register_late_pass(|| Box::new(mutable_debug_assertion::DebugAssertWithMutCall));\n     store.register_late_pass(|| Box::new(exit::Exit));\n     store.register_late_pass(|| Box::new(to_digit_is_some::ToDigitIsSome));\n@@ -916,7 +920,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n     store.register_late_pass(move || Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n     store.register_late_pass(|| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n-    store.register_late_pass(|| Box::new(std_instead_of_core::StdReexports));\n+    store.register_late_pass(|| Box::new(std_instead_of_core::StdReexports::default()));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "573a7c016b8e8c8c6d708fccb3ccd42c0f6f2792", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -460,7 +460,6 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 let mut sub_visitor = RefVisitor::new(self.cx);\n                 sub_visitor.visit_fn_decl(decl);\n                 self.nested_elision_site_lts.append(&mut sub_visitor.all_lts());\n-                return;\n             },\n             TyKind::TraitObject(bounds, ref lt, _) => {\n                 if !lt.is_elided() {\n@@ -469,7 +468,6 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 for bound in bounds {\n                     self.visit_poly_trait_ref(bound, TraitBoundModifier::None);\n                 }\n-                return;\n             },\n             _ => walk_ty(self, ty),\n         }"}, {"sha": "b638f2716028284ef20874c53cf1d6187f79ef5e", "filename": "src/tools/clippy/clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,13 +1,3 @@\n-use clippy_utils::source::{snippet_opt, span_starts_with, walk_span_to_context};\n-use clippy_utils::{higher, in_constant, meets_msrv, msrvs};\n-use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat};\n-use rustc_lexer::{tokenize, TokenKind};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{Span, SpanData, SyntaxContext};\n-\n mod collapsible_match;\n mod infallible_destructuring_match;\n mod manual_map;\n@@ -31,6 +21,16 @@ mod single_match;\n mod try_err;\n mod wild_in_or_pats;\n \n+use clippy_utils::source::{snippet_opt, span_starts_with, walk_span_to_context};\n+use clippy_utils::{higher, in_constant, meets_msrv, msrvs};\n+use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat};\n+use rustc_lexer::{tokenize, TokenKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{Span, SpanData, SyntaxContext};\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for matches with a single arm where an `if let`\n@@ -793,18 +793,13 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust,ignore\n     /// # use std::sync::Mutex;\n-    ///\n     /// # struct State {}\n-    ///\n     /// # impl State {\n     /// #     fn foo(&self) -> bool {\n     /// #         true\n     /// #     }\n-    ///\n     /// #     fn bar(&self) {}\n     /// # }\n-    ///\n-    ///\n     /// let mutex = Mutex::new(State {});\n     ///\n     /// match mutex.lock().unwrap().foo() {\n@@ -815,22 +810,17 @@ declare_clippy_lint! {\n     /// };\n     ///\n     /// println!(\"All done!\");\n-    ///\n     /// ```\n     /// Use instead:\n     /// ```rust\n     /// # use std::sync::Mutex;\n-    ///\n     /// # struct State {}\n-    ///\n     /// # impl State {\n     /// #     fn foo(&self) -> bool {\n     /// #         true\n     /// #     }\n-    ///\n     /// #     fn bar(&self) {}\n     /// # }\n-    ///\n     /// let mutex = Mutex::new(State {});\n     ///\n     /// let is_foo = mutex.lock().unwrap().foo();"}, {"sha": "f52170df662ca666bbaf7eee1bcbadb2d4f2f05b", "filename": "src/tools/clippy/clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -14,7 +14,7 @@ use super::INEFFICIENT_TO_STRING;\n /// Checks for the `INEFFICIENT_TO_STRING` lint\n pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Symbol, args: &[hir::Expr<'_>]) {\n     if_chain! {\n-        if args.len() == 1 && method_name == sym!(to_string);\n+        if args.len() == 1 && method_name == sym::to_string;\n         if let Some(to_string_meth_did) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if match_def_path(cx, to_string_meth_did, &paths::TO_STRING_METHOD);\n         if let Some(substs) = cx.typeck_results().node_substs_opt(expr.hir_id);"}, {"sha": "202fbc1f7f668039e998a43c8b60c195b35d78c2", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -46,6 +46,7 @@ mod map_unwrap_or;\n mod needless_option_as_deref;\n mod needless_option_take;\n mod no_effect_replace;\n+mod obfuscated_if_else;\n mod ok_expect;\n mod option_as_ref_deref;\n mod option_map_or_none;\n@@ -2263,6 +2264,35 @@ declare_clippy_lint! {\n     \"replace with no effect\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for usages of `.then_some(..).unwrap_or(..)`\n+    ///\n+    /// ### Why is this bad?\n+    /// This can be written more clearly with `if .. else ..`\n+    ///\n+    /// ### Limitations\n+    /// This lint currently only looks for usages of\n+    /// `.then_some(..).unwrap_or(..)`, but will be expanded\n+    /// to account for similar patterns.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let x = true;\n+    /// x.then_some(\"a\").unwrap_or(\"b\");\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let x = true;\n+    /// if x { \"a\" } else { \"b\" };\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub OBFUSCATED_IF_ELSE,\n+    style,\n+    \"use of `.then_some(..).unwrap_or(..)` can be written \\\n+    more clearly with `if .. else ..`\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2364,6 +2394,7 @@ impl_lint_pass!(Methods => [\n     IS_DIGIT_ASCII_RADIX,\n     NEEDLESS_OPTION_TAKE,\n     NO_EFFECT_REPLACE,\n+    OBFUSCATED_IF_ELSE,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -2772,6 +2803,9 @@ impl Methods {\n                     Some((\"map\", [m_recv, m_arg], span)) => {\n                         option_map_unwrap_or::check(cx, expr, m_recv, m_arg, recv, u_arg, span);\n                     },\n+                    Some((\"then_some\", [t_recv, t_arg], _)) => {\n+                        obfuscated_if_else::check(cx, expr, t_recv, t_arg, u_arg);\n+                    },\n                     _ => {},\n                 },\n                 (\"unwrap_or_else\", [u_arg]) => match method_call(recv) {"}, {"sha": "4d7427b26621398af65280b7147796ab1d4d1ac7", "filename": "src/tools/clippy/clippy_lints/src/methods/obfuscated_if_else.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fobfuscated_if_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fobfuscated_if_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fobfuscated_if_else.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -0,0 +1,42 @@\n+// run-rustfix\n+\n+use super::OBFUSCATED_IF_ELSE;\n+use clippy_utils::{diagnostics::span_lint_and_sugg, source::snippet_with_applicability};\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'_>,\n+    then_recv: &'tcx hir::Expr<'_>,\n+    then_arg: &'tcx hir::Expr<'_>,\n+    unwrap_arg: &'tcx hir::Expr<'_>,\n+) {\n+    // something.then_some(blah).unwrap_or(blah)\n+    // ^^^^^^^^^-then_recv ^^^^-then_arg   ^^^^- unwrap_arg\n+    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- expr\n+\n+    let recv_ty = cx.typeck_results().expr_ty(then_recv);\n+\n+    if recv_ty.is_bool() {\n+        let mut applicability = Applicability::MachineApplicable;\n+        let sugg = format!(\n+            \"if {} {{ {} }} else {{ {} }}\",\n+            snippet_with_applicability(cx, then_recv.span, \"..\", &mut applicability),\n+            snippet_with_applicability(cx, then_arg.span, \"..\", &mut applicability),\n+            snippet_with_applicability(cx, unwrap_arg.span, \"..\", &mut applicability)\n+        );\n+\n+        span_lint_and_sugg(\n+            cx,\n+            OBFUSCATED_IF_ELSE,\n+            expr.span,\n+            \"use of `.then_some(..).unwrap_or(..)` can be written \\\n+            more clearly with `if .. else ..`\",\n+            \"try\",\n+            sugg,\n+            applicability,\n+        );\n+    }\n+}"}, {"sha": "f763e0d24c9444206a8d14b599a411f3067d610e", "filename": "src/tools/clippy/clippy_lints/src/mismatching_type_param_order.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmismatching_type_param_order.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -18,6 +18,11 @@ declare_clippy_lint! {\n     /// Naming type parameters inconsistently may cause you to refer to the\n     /// wrong type parameter.\n     ///\n+    /// ### Limitations\n+    /// This lint only applies to impl blocks with simple generic params, e.g.\n+    /// `A`. If there is anything more complicated, such as a tuple, it will be\n+    /// ignored.\n+    ///\n     /// ### Example\n     /// ```rust\n     /// struct Foo<A, B> {\n@@ -53,14 +58,15 @@ impl<'tcx> LateLintPass<'tcx> for TypeParamMismatch {\n             if !generic_args.args.is_empty();\n             then {\n                 // get the name and span of the generic parameters in the Impl\n-                let impl_params = generic_args.args.iter()\n-                .filter_map(|p|\n+                let mut impl_params = Vec::new();\n+                for p in generic_args.args.iter() {\n                     match p {\n                         GenericArg::Type(Ty {kind: TyKind::Path(QPath::Resolved(_, path)), ..}) =>\n-                            Some((path.segments[0].ident.to_string(), path.span)),\n-                        _ => None,\n-                    }\n-                );\n+                            impl_params.push((path.segments[0].ident.to_string(), path.span)),\n+                        GenericArg::Type(_) => return,\n+                        _ => (),\n+                    };\n+                }\n \n                 // find the type that the Impl is for\n                 // only lint on struct/enum/union for now\n@@ -83,16 +89,16 @@ impl<'tcx> LateLintPass<'tcx> for TypeParamMismatch {\n                     type_param_names.iter().enumerate().map(|(i, param)| (param, i)).collect();\n \n                 let type_name = segment.ident;\n-                for (i, (impl_param_name, impl_param_span)) in impl_params.enumerate() {\n-                    if mismatch_param_name(i, &impl_param_name, &type_param_names_hashmap) {\n+                for (i, (impl_param_name, impl_param_span)) in impl_params.iter().enumerate() {\n+                    if mismatch_param_name(i, impl_param_name, &type_param_names_hashmap) {\n                         let msg = format!(\"`{}` has a similarly named generic type parameter `{}` in its declaration, but in a different order\",\n                                           type_name, impl_param_name);\n                         let help = format!(\"try `{}`, or a name that does not conflict with `{}`'s generic params\",\n                                            type_param_names[i], type_name);\n                         span_lint_and_help(\n                             cx,\n                             MISMATCHING_TYPE_PARAM_ORDER,\n-                            impl_param_span,\n+                            *impl_param_span,\n                             &msg,\n                             None,\n                             &help"}, {"sha": "72c86f28bbc6c4e4193894a6cbf4dedf09f2ea54", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -251,14 +251,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, it: &'tcx Item<'_>) {\n         if let ItemKind::Const(hir_ty, body_id) = it.kind {\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n-            if !macro_backtrace(it.span).last().map_or(false, |macro_call| {\n-                matches!(\n-                    cx.tcx.get_diagnostic_name(macro_call.def_id),\n-                    Some(sym::thread_local_macro)\n-                )\n-            }) && is_unfrozen(cx, ty)\n-                && is_value_unfrozen_poly(cx, body_id, ty)\n-            {\n+            if !ignored_macro(cx, it) && is_unfrozen(cx, ty) && is_value_unfrozen_poly(cx, body_id, ty) {\n                 lint(cx, Source::Item { item: it.span });\n             }\n         }\n@@ -445,3 +438,12 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n         }\n     }\n }\n+\n+fn ignored_macro(cx: &LateContext<'_>, it: &rustc_hir::Item<'_>) -> bool {\n+    macro_backtrace(it.span).any(|macro_call| {\n+        matches!(\n+            cx.tcx.get_diagnostic_name(macro_call.def_id),\n+            Some(sym::thread_local_macro)\n+        )\n+    })\n+}"}, {"sha": "800cf249f5c78433a7b64bc1f686a40bd4123704", "filename": "src/tools/clippy/clippy_lints/src/operators/arithmetic.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Farithmetic.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -0,0 +1,119 @@\n+#![allow(\n+    // False positive\n+    clippy::match_same_arms\n+)]\n+\n+use super::ARITHMETIC;\n+use clippy_utils::{consts::constant_simple, diagnostics::span_lint};\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::impl_lint_pass;\n+use rustc_span::source_map::Span;\n+\n+const HARD_CODED_ALLOWED: &[&str] = &[\"std::num::Saturating\", \"std::string::String\", \"std::num::Wrapping\"];\n+\n+#[derive(Debug)]\n+pub struct Arithmetic {\n+    allowed: FxHashSet<String>,\n+    // Used to check whether expressions are constants, such as in enum discriminants and consts\n+    const_span: Option<Span>,\n+    expr_span: Option<Span>,\n+}\n+\n+impl_lint_pass!(Arithmetic => [ARITHMETIC]);\n+\n+impl Arithmetic {\n+    #[must_use]\n+    pub fn new(mut allowed: FxHashSet<String>) -> Self {\n+        allowed.extend(HARD_CODED_ALLOWED.iter().copied().map(String::from));\n+        Self {\n+            allowed,\n+            const_span: None,\n+            expr_span: None,\n+        }\n+    }\n+\n+    /// Checks if the given `expr` has any of the inner `allowed` elements.\n+    fn is_allowed_ty(&self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n+        self.allowed.contains(\n+            cx.typeck_results()\n+                .expr_ty(expr)\n+                .to_string()\n+                .split('<')\n+                .next()\n+                .unwrap_or_default(),\n+        )\n+    }\n+\n+    fn issue_lint(&mut self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n+        span_lint(cx, ARITHMETIC, expr.span, \"arithmetic detected\");\n+        self.expr_span = Some(expr.span);\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for Arithmetic {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if self.expr_span.is_some() {\n+            return;\n+        }\n+        if let Some(span) = self.const_span && span.contains(expr.span) {\n+            return;\n+        }\n+        match &expr.kind {\n+            hir::ExprKind::Binary(op, lhs, rhs) | hir::ExprKind::AssignOp(op, lhs, rhs) => {\n+                let (\n+                    hir::BinOpKind::Add\n+                    | hir::BinOpKind::Sub\n+                    | hir::BinOpKind::Mul\n+                    | hir::BinOpKind::Div\n+                    | hir::BinOpKind::Rem\n+                    | hir::BinOpKind::Shl\n+                    | hir::BinOpKind::Shr\n+                ) = op.node else {\n+                    return;\n+                };\n+                if self.is_allowed_ty(cx, lhs) || self.is_allowed_ty(cx, rhs) {\n+                    return;\n+                }\n+                self.issue_lint(cx, expr);\n+            },\n+            hir::ExprKind::Unary(hir::UnOp::Neg, _) => {\n+                // CTFE already takes care of things like `-1` that do not overflow.\n+                if constant_simple(cx, cx.typeck_results(), expr).is_none() {\n+                    self.issue_lint(cx, expr);\n+                }\n+            },\n+            _ => {},\n+        }\n+    }\n+\n+    fn check_body(&mut self, cx: &LateContext<'_>, body: &hir::Body<'_>) {\n+        let body_owner = cx.tcx.hir().body_owner_def_id(body.id());\n+        match cx.tcx.hir().body_owner_kind(body_owner) {\n+            hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => {\n+                let body_span = cx.tcx.def_span(body_owner);\n+                if let Some(span) = self.const_span && span.contains(body_span) {\n+                    return;\n+                }\n+                self.const_span = Some(body_span);\n+            },\n+            hir::BodyOwnerKind::Closure | hir::BodyOwnerKind::Fn => {},\n+        }\n+    }\n+\n+    fn check_body_post(&mut self, cx: &LateContext<'_>, body: &hir::Body<'_>) {\n+        let body_owner = cx.tcx.hir().body_owner(body.id());\n+        let body_span = cx.tcx.hir().span(body_owner);\n+        if let Some(span) = self.const_span && span.contains(body_span) {\n+            return;\n+        }\n+        self.const_span = None;\n+    }\n+\n+    fn check_expr_post(&mut self, _: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if Some(expr.span) == self.expr_span {\n+            self.expr_span = None;\n+        }\n+    }\n+}"}, {"sha": "945a09a647c415fc2cd2902cd053fc6a42e8fc5d", "filename": "src/tools/clippy/clippy_lints/src/operators/assign_op_pattern.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -8,6 +8,10 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_lint::LateContext;\n+use rustc_middle::mir::FakeReadCause;\n+use rustc_middle::ty::BorrowKind;\n+use rustc_trait_selection::infer::TyCtxtInferExt;\n+use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n use super::ASSIGN_OP_PATTERN;\n \n@@ -29,6 +33,16 @@ pub(super) fn check<'tcx>(\n                     .map_or(true, |t| t.path.res.def_id() != trait_id);\n                 if implements_trait(cx, ty, trait_id, &[rty.into()]);\n                 then {\n+                    // Primitive types execute assign-ops right-to-left. Every other type is left-to-right.\n+                    if !(ty.is_primitive() && rty.is_primitive()) {\n+                        // TODO: This will have false negatives as it doesn't check if the borrows are\n+                        // actually live at the end of their respective expressions.\n+                        let mut_borrows = mut_borrows_in_expr(cx, assignee);\n+                        let imm_borrows = imm_borrows_in_expr(cx, rhs);\n+                        if mut_borrows.iter().any(|id| imm_borrows.contains(id)) {\n+                            return;\n+                        }\n+                    }\n                     span_lint_and_then(\n                         cx,\n                         ASSIGN_OP_PATTERN,\n@@ -99,3 +113,69 @@ impl<'a, 'tcx> Visitor<'tcx> for ExprVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n }\n+\n+fn imm_borrows_in_expr(cx: &LateContext<'_>, e: &hir::Expr<'_>) -> hir::HirIdSet {\n+    struct S(hir::HirIdSet);\n+    impl Delegate<'_> for S {\n+        fn borrow(&mut self, place: &PlaceWithHirId<'_>, _: hir::HirId, kind: BorrowKind) {\n+            if matches!(kind, BorrowKind::ImmBorrow | BorrowKind::UniqueImmBorrow) {\n+                self.0.insert(match place.place.base {\n+                    PlaceBase::Local(id) => id,\n+                    PlaceBase::Upvar(id) => id.var_path.hir_id,\n+                    _ => return,\n+                });\n+            }\n+        }\n+\n+        fn consume(&mut self, _: &PlaceWithHirId<'_>, _: hir::HirId) {}\n+        fn mutate(&mut self, _: &PlaceWithHirId<'_>, _: hir::HirId) {}\n+        fn fake_read(&mut self, _: &PlaceWithHirId<'_>, _: FakeReadCause, _: hir::HirId) {}\n+        fn copy(&mut self, _: &PlaceWithHirId<'_>, _: hir::HirId) {}\n+    }\n+\n+    let mut s = S(hir::HirIdSet::default());\n+    cx.tcx.infer_ctxt().enter(|infcx| {\n+        let mut v = ExprUseVisitor::new(\n+            &mut s,\n+            &infcx,\n+            cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap()),\n+            cx.param_env,\n+            cx.typeck_results(),\n+        );\n+        v.consume_expr(e);\n+    });\n+    s.0\n+}\n+\n+fn mut_borrows_in_expr(cx: &LateContext<'_>, e: &hir::Expr<'_>) -> hir::HirIdSet {\n+    struct S(hir::HirIdSet);\n+    impl Delegate<'_> for S {\n+        fn borrow(&mut self, place: &PlaceWithHirId<'_>, _: hir::HirId, kind: BorrowKind) {\n+            if matches!(kind, BorrowKind::MutBorrow) {\n+                self.0.insert(match place.place.base {\n+                    PlaceBase::Local(id) => id,\n+                    PlaceBase::Upvar(id) => id.var_path.hir_id,\n+                    _ => return,\n+                });\n+            }\n+        }\n+\n+        fn consume(&mut self, _: &PlaceWithHirId<'_>, _: hir::HirId) {}\n+        fn mutate(&mut self, _: &PlaceWithHirId<'_>, _: hir::HirId) {}\n+        fn fake_read(&mut self, _: &PlaceWithHirId<'_>, _: FakeReadCause, _: hir::HirId) {}\n+        fn copy(&mut self, _: &PlaceWithHirId<'_>, _: hir::HirId) {}\n+    }\n+\n+    let mut s = S(hir::HirIdSet::default());\n+    cx.tcx.infer_ctxt().enter(|infcx| {\n+        let mut v = ExprUseVisitor::new(\n+            &mut s,\n+            &infcx,\n+            cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap()),\n+            cx.param_env,\n+            cx.typeck_results(),\n+        );\n+        v.consume_expr(e);\n+    });\n+    s.0\n+}"}, {"sha": "bb6d99406b49376309e8e40d2f938686bbd0421f", "filename": "src/tools/clippy/clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,7 +1,3 @@\n-use rustc_hir::{Body, Expr, ExprKind, UnOp};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n-\n mod absurd_extreme_comparisons;\n mod assign_op_pattern;\n mod bit_mask;\n@@ -25,6 +21,12 @@ mod ptr_eq;\n mod self_assignment;\n mod verbose_bit_mask;\n \n+pub(crate) mod arithmetic;\n+\n+use rustc_hir::{Body, Expr, ExprKind, UnOp};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for comparisons where one side of the relation is\n@@ -57,6 +59,42 @@ declare_clippy_lint! {\n     \"a comparison with a maximum or minimum value that is always true or false\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for any kind of arithmetic operation of any type.\n+    ///\n+    /// Operators like `+`, `-`, `*` or `<<` are usually capable of overflowing according to the [Rust\n+    /// Reference](https://doc.rust-lang.org/reference/expressions/operator-expr.html#overflow),\n+    /// or can panic (`/`, `%`). Known safe built-in types like `Wrapping` or `Saturing` are filtered\n+    /// away.\n+    ///\n+    /// ### Why is this bad?\n+    /// Integer overflow will trigger a panic in debug builds or will wrap in\n+    /// release mode. Division by zero will cause a panic in either mode. In some applications one\n+    /// wants explicitly checked, wrapping or saturating arithmetic.\n+    ///\n+    /// #### Example\n+    /// ```rust\n+    /// # let a = 0;\n+    /// a + 1;\n+    /// ```\n+    ///\n+    /// Third-party types also tend to overflow.\n+    ///\n+    /// #### Example\n+    /// ```ignore,rust\n+    /// use rust_decimal::Decimal;\n+    /// let _n = Decimal::MAX + Decimal::MAX;\n+    /// ```\n+    ///\n+    /// ### Allowed types\n+    /// Custom allowed types can be specified through the \"arithmetic-allowed\" filter.\n+    #[clippy::version = \"1.64.0\"]\n+    pub ARITHMETIC,\n+    restriction,\n+    \"any arithmetic expression that could overflow or panic\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for integer arithmetic operations which could overflow or panic.\n@@ -747,6 +785,7 @@ pub struct Operators {\n }\n impl_lint_pass!(Operators => [\n     ABSURD_EXTREME_COMPARISONS,\n+    ARITHMETIC,\n     INTEGER_ARITHMETIC,\n     FLOAT_ARITHMETIC,\n     ASSIGN_OP_PATTERN,"}, {"sha": "fd0a53839e6eaa2f7e6c3f9955711bfeb94834bc", "filename": "src/tools/clippy/clippy_lints/src/question_mark.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -123,8 +123,8 @@ fn check_if_let_some_or_err_and_early_return<'tcx>(cx: &LateContext<'tcx>, expr:\n     if_chain! {\n         if let Some(higher::IfLet { let_pat, let_expr, if_then, if_else }) = higher::IfLet::hir(cx, expr);\n         if !is_else_clause(cx.tcx, expr);\n-        if let PatKind::TupleStruct(ref path1, fields, None) = let_pat.kind;\n-        if let PatKind::Binding(annot, bind_id, ident, _) = fields[0].kind;\n+        if let PatKind::TupleStruct(ref path1, [field], None) = let_pat.kind;\n+        if let PatKind::Binding(annot, bind_id, ident, _) = field.kind;\n         let caller_ty = cx.typeck_results().expr_ty(let_expr);\n         let if_block = IfBlockType::IfLet(path1, caller_ty, ident.name, let_expr, if_then, if_else);\n         if (is_early_return(sym::Option, cx, &if_block) && path_to_local_id(peel_blocks(if_then), bind_id))"}, {"sha": "ffd63cc687a11e660e15ee35d6223f9c5d322303", "filename": "src/tools/clippy/clippy_lints/src/std_instead_of_core.rs", "status": "modified", "additions": 55, "deletions": 41, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstd_instead_of_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstd_instead_of_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstd_instead_of_core.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::{def::Res, HirId, Path, PathSegment};\n-use rustc_lint::{LateContext, LateLintPass, Lint};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{sym, symbol::kw, Symbol};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{sym, symbol::kw, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -63,7 +63,7 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     ///\n     /// Crates which have `no_std` compatibility and may optionally require alloc may wish to ensure types are\n-    /// imported from alloc to ensure disabling `alloc` does not cause the crate to fail to compile. This lint\n+    /// imported from core to ensure disabling `alloc` does not cause the crate to fail to compile. This lint\n     /// is also useful for crates migrating to become `no_std` compatible.\n     ///\n     /// ### Example\n@@ -81,39 +81,55 @@ declare_clippy_lint! {\n     \"type is imported from alloc when available in core\"\n }\n \n-declare_lint_pass!(StdReexports => [STD_INSTEAD_OF_CORE, STD_INSTEAD_OF_ALLOC, ALLOC_INSTEAD_OF_CORE]);\n+#[derive(Default)]\n+pub struct StdReexports {\n+    // Paths which can be either a module or a macro (e.g. `std::env`) will cause this check to happen\n+    // twice. First for the mod, second for the macro. This is used to avoid the lint reporting for the macro\n+    // when the path could be also be used to access the module.\n+    prev_span: Span,\n+}\n+impl_lint_pass!(StdReexports => [STD_INSTEAD_OF_CORE, STD_INSTEAD_OF_ALLOC, ALLOC_INSTEAD_OF_CORE]);\n \n impl<'tcx> LateLintPass<'tcx> for StdReexports {\n     fn check_path(&mut self, cx: &LateContext<'tcx>, path: &Path<'tcx>, _: HirId) {\n-        // std_instead_of_core\n-        check_path(cx, path, sym::std, sym::core, STD_INSTEAD_OF_CORE);\n-        // std_instead_of_alloc\n-        check_path(cx, path, sym::std, sym::alloc, STD_INSTEAD_OF_ALLOC);\n-        // alloc_instead_of_core\n-        check_path(cx, path, sym::alloc, sym::core, ALLOC_INSTEAD_OF_CORE);\n-    }\n-}\n-\n-fn check_path(cx: &LateContext<'_>, path: &Path<'_>, krate: Symbol, suggested_crate: Symbol, lint: &'static Lint) {\n-    if_chain! {\n-        // check if path resolves to the suggested crate.\n-        if let Res::Def(_, def_id) = path.res;\n-        if suggested_crate == cx.tcx.crate_name(def_id.krate);\n-\n-        // check if the first segment of the path is the crate we want to identify\n-        if let Some(path_root_segment) = get_first_segment(path);\n-\n-        // check if the path matches the crate we want to suggest the other path for.\n-        if krate == path_root_segment.ident.name;\n-        then {\n-            span_lint_and_help(\n-                cx,\n-                lint,\n-                path.span,\n-                &format!(\"used import from `{}` instead of `{}`\", krate, suggested_crate),\n-                None,\n-                &format!(\"consider importing the item from `{}`\", suggested_crate),\n-            );\n+        if let Res::Def(_, def_id) = path.res\n+            && let Some(first_segment) = get_first_segment(path)\n+        {\n+            let (lint, msg, help) = match first_segment.ident.name {\n+                sym::std => match cx.tcx.crate_name(def_id.krate) {\n+                    sym::core => (\n+                        STD_INSTEAD_OF_CORE,\n+                        \"used import from `std` instead of `core`\",\n+                        \"consider importing the item from `core`\",\n+                    ),\n+                    sym::alloc => (\n+                        STD_INSTEAD_OF_ALLOC,\n+                        \"used import from `std` instead of `alloc`\",\n+                        \"consider importing the item from `alloc`\",\n+                    ),\n+                    _ => {\n+                        self.prev_span = path.span;\n+                        return;\n+                    },\n+                },\n+                sym::alloc => {\n+                    if cx.tcx.crate_name(def_id.krate) == sym::core {\n+                        (\n+                            ALLOC_INSTEAD_OF_CORE,\n+                            \"used import from `alloc` instead of `core`\",\n+                            \"consider importing the item from `core`\",\n+                        )\n+                    } else {\n+                        self.prev_span = path.span;\n+                        return;\n+                    }\n+                },\n+                _ => return,\n+            };\n+            if path.span != self.prev_span {\n+                span_lint_and_help(cx, lint, path.span, msg, None, help);\n+                self.prev_span = path.span;\n+            }\n         }\n     }\n }\n@@ -123,12 +139,10 @@ fn check_path(cx: &LateContext<'_>, path: &Path<'_>, krate: Symbol, suggested_cr\n /// If this is a global path (such as `::std::fmt::Debug`), then the segment after [`kw::PathRoot`]\n /// is returned.\n fn get_first_segment<'tcx>(path: &Path<'tcx>) -> Option<&'tcx PathSegment<'tcx>> {\n-    let segment = path.segments.first()?;\n-\n-    // A global path will have PathRoot as the first segment. In this case, return the segment after.\n-    if segment.ident.name == kw::PathRoot {\n-        path.segments.get(1)\n-    } else {\n-        Some(segment)\n+    match path.segments {\n+        // A global path will have PathRoot as the first segment. In this case, return the segment after.\n+        [x, y, ..] if x.ident.name == kw::PathRoot => Some(y),\n+        [x, ..] => Some(x),\n+        _ => None,\n     }\n }"}, {"sha": "22eb06b364632f7a9f5a26b5ae95d4d053fb066c", "filename": "src/tools/clippy/clippy_lints/src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -394,7 +394,7 @@ impl<'tcx> LateLintPass<'tcx> for StrToString {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n         if_chain! {\n             if let ExprKind::MethodCall(path, [self_arg, ..], _) = &expr.kind;\n-            if path.ident.name == sym!(to_string);\n+            if path.ident.name == sym::to_string;\n             let ty = cx.typeck_results().expr_ty(self_arg);\n             if let ty::Ref(_, ty, ..) = ty.kind();\n             if *ty.kind() == ty::Str;\n@@ -444,7 +444,7 @@ impl<'tcx> LateLintPass<'tcx> for StringToString {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n         if_chain! {\n             if let ExprKind::MethodCall(path, [self_arg, ..], _) = &expr.kind;\n-            if path.ident.name == sym!(to_string);\n+            if path.ident.name == sym::to_string;\n             let ty = cx.typeck_results().expr_ty(self_arg);\n             if is_type_diagnostic_item(cx, ty, sym::String);\n             then {"}, {"sha": "51c65d898cf5ffe8dc44758ddda8633576b4bd39", "filename": "src/tools/clippy/clippy_lints/src/unused_self.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::visitors::is_local_used;\n use if_chain::if_chain;\n use rustc_hir::{Impl, ImplItem, ImplItemKind, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -35,7 +35,19 @@ declare_clippy_lint! {\n     \"methods that contain a `self` argument but don't use it\"\n }\n \n-declare_lint_pass!(UnusedSelf => [UNUSED_SELF]);\n+pub struct UnusedSelf {\n+    avoid_breaking_exported_api: bool,\n+}\n+\n+impl_lint_pass!(UnusedSelf => [UNUSED_SELF]);\n+\n+impl UnusedSelf {\n+    pub fn new(avoid_breaking_exported_api: bool) -> Self {\n+        Self {\n+            avoid_breaking_exported_api,\n+        }\n+    }\n+}\n \n impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &ImplItem<'_>) {\n@@ -49,6 +61,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n             if let ItemKind::Impl(Impl { of_trait: None, .. }) = parent_item.kind;\n             if assoc_item.fn_has_self_parameter;\n             if let ImplItemKind::Fn(.., body_id) = &impl_item.kind;\n+            if !cx.access_levels.is_exported(impl_item.def_id) || !self.avoid_breaking_exported_api;\n             let body = cx.tcx.hir().body(*body_id);\n             if let [self_param, ..] = body.params;\n             if !is_local_used(cx, body, self_param.pat.hir_id);"}, {"sha": "6e033b3be2d87a60e5d6e21f913e09ac79eef269", "filename": "src/tools/clippy/clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -191,7 +191,11 @@ macro_rules! define_Conf {\n }\n \n define_Conf! {\n-    /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION, BOX_COLLECTION, REDUNDANT_ALLOCATION, RC_BUFFER, VEC_BOX, OPTION_OPTION, LINKEDLIST, RC_MUTEX.\n+    /// Lint: Arithmetic.\n+    ///\n+    /// Suppress checking of the passed type names.\n+    (arithmetic_allowed: rustc_data_structures::fx::FxHashSet<String> = <_>::default()),\n+    /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UNUSED_SELF, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION, BOX_COLLECTION, REDUNDANT_ALLOCATION, RC_BUFFER, VEC_BOX, OPTION_OPTION, LINKEDLIST, RC_MUTEX.\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),"}, {"sha": "351a3f4aec8c841522015e6e1974c24e99bf87bf", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -619,32 +619,24 @@ pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -\n         },\n         mir::ConstantKind::Val(ConstValue::ByRef { alloc, offset: _ }, _) => match result.ty().kind() {\n             ty::Array(sub_type, len) => match sub_type.kind() {\n-                ty::Float(FloatTy::F32) => match len.to_valtree().try_to_machine_usize(tcx) {\n+                ty::Float(FloatTy::F32) => match len.kind().try_to_machine_usize(tcx) {\n                     Some(len) => alloc\n                         .inner()\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(4 * usize::try_from(len).unwrap()))\n                         .to_owned()\n-                        .chunks(4)\n-                        .map(|chunk| {\n-                            Some(Constant::F32(f32::from_le_bytes(\n-                                chunk.try_into().expect(\"this shouldn't happen\"),\n-                            )))\n-                        })\n+                        .array_chunks::<4>()\n+                        .map(|&chunk| Some(Constant::F32(f32::from_le_bytes(chunk))))\n                         .collect::<Option<Vec<Constant>>>()\n                         .map(Constant::Vec),\n                     _ => None,\n                 },\n-                ty::Float(FloatTy::F64) => match len.to_valtree().try_to_machine_usize(tcx) {\n+                ty::Float(FloatTy::F64) => match len.kind().try_to_machine_usize(tcx) {\n                     Some(len) => alloc\n                         .inner()\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(8 * usize::try_from(len).unwrap()))\n                         .to_owned()\n-                        .chunks(8)\n-                        .map(|chunk| {\n-                            Some(Constant::F64(f64::from_le_bytes(\n-                                chunk.try_into().expect(\"this shouldn't happen\"),\n-                            )))\n-                        })\n+                        .array_chunks::<8>()\n+                        .map(|&chunk| Some(Constant::F64(f64::from_le_bytes(chunk))))\n                         .collect::<Option<Vec<Constant>>>()\n                         .map(Constant::Vec),\n                     _ => None,"}, {"sha": "eaf260ddfb832d05d7d9cc7be5d87922ae14b2c8", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -127,9 +127,6 @@ impl HirEqInterExpr<'_, '_, '_> {\n \n     /// Checks whether two blocks are the same.\n     fn eq_block(&mut self, left: &Block<'_>, right: &Block<'_>) -> bool {\n-        if self.cannot_be_compared_block(left) || self.cannot_be_compared_block(right) {\n-            return false;\n-        }\n         match (left.stmts, left.expr, right.stmts, right.expr) {\n             ([], None, [], None) => {\n                 // For empty blocks, check to see if the tokens are equal. This will catch the case where a macro\n@@ -180,36 +177,13 @@ impl HirEqInterExpr<'_, '_, '_> {\n         }\n     }\n \n-    fn cannot_be_compared_block(&mut self, block: &Block<'_>) -> bool {\n-        if block.stmts.last().map_or(false, |stmt| {\n-            matches!(\n-                stmt.kind,\n-                StmtKind::Semi(semi_expr) if self.should_ignore(semi_expr)\n-            )\n-        }) {\n-            return true;\n-        }\n-\n-        if let Some(block_expr) = block.expr\n-            && self.should_ignore(block_expr)\n-        {\n-            return true\n-        }\n-\n-        false\n-    }\n-\n     fn should_ignore(&mut self, expr: &Expr<'_>) -> bool {\n-        if macro_backtrace(expr.span).last().map_or(false, |macro_call| {\n+        macro_backtrace(expr.span).last().map_or(false, |macro_call| {\n             matches!(\n                 &self.inner.cx.tcx.get_diagnostic_name(macro_call.def_id),\n                 Some(sym::todo_macro | sym::unimplemented_macro)\n             )\n-        }) {\n-            return true;\n-        }\n-\n-        false\n+        })\n     }\n \n     pub fn eq_array_length(&mut self, left: ArrayLen, right: ArrayLen) -> bool {\n@@ -327,7 +301,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&ExprKind::DropTemps(le), &ExprKind::DropTemps(re)) => self.eq_expr(le, re),\n             _ => false,\n         };\n-        is_eq || self.inner.expr_fallback.as_mut().map_or(false, |f| f(left, right))\n+        (is_eq && (!self.should_ignore(left) || !self.should_ignore(right)))\n+            || self.inner.expr_fallback.as_mut().map_or(false, |f| f(left, right))\n     }\n \n     fn eq_exprs(&mut self, left: &[Expr<'_>], right: &[Expr<'_>]) -> bool {"}, {"sha": "34a1cdaf1d52a52fd882a48609e257c6ad654fc7", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,3 +1,4 @@\n+#![feature(array_chunks)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(let_else)]\n@@ -2141,7 +2142,7 @@ pub fn is_hir_ty_cfg_dependant(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n \n static TEST_ITEM_NAMES_CACHE: OnceLock<Mutex<FxHashMap<LocalDefId, Vec<Symbol>>>> = OnceLock::new();\n \n-fn with_test_item_names<'tcx>(tcx: TyCtxt<'tcx>, module: LocalDefId, f: impl Fn(&[Symbol]) -> bool) -> bool {\n+fn with_test_item_names(tcx: TyCtxt<'_>, module: LocalDefId, f: impl Fn(&[Symbol]) -> bool) -> bool {\n     let cache = TEST_ITEM_NAMES_CACHE.get_or_init(|| Mutex::new(FxHashMap::default()));\n     let mut map: MutexGuard<'_, FxHashMap<LocalDefId, Vec<Symbol>>> = cache.lock().unwrap();\n     let value = map.entry(module);"}, {"sha": "23ba7c712779efb0b788652c35a02faedeec5c6e", "filename": "src/tools/clippy/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Frust-toolchain?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-07-15\"\n+channel = \"nightly-2022-07-28\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "92ac1a2be56142e896c4ea0a9226055bbda56ea3", "filename": "src/tools/clippy/tests/compile-test.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -433,7 +433,7 @@ fn rustfix_coverage_known_exceptions_accuracy() {\n         let rs_path = Path::new(\"tests/ui\").join(filename);\n         assert!(\n             rs_path.exists(),\n-            \"`{}` does not exists\",\n+            \"`{}` does not exist\",\n             rs_path.strip_prefix(env!(\"CARGO_MANIFEST_DIR\")).unwrap().display()\n         );\n         let fixed_path = rs_path.with_extension(\"fixed\");\n@@ -445,6 +445,45 @@ fn rustfix_coverage_known_exceptions_accuracy() {\n     }\n }\n \n+#[test]\n+fn ui_cargo_toml_metadata() {\n+    let ui_cargo_path = Path::new(\"tests/ui-cargo\");\n+    let cargo_common_metadata_path = ui_cargo_path.join(\"cargo_common_metadata\");\n+    let publish_exceptions =\n+        [\"fail_publish\", \"fail_publish_true\", \"pass_publish_empty\"].map(|path| cargo_common_metadata_path.join(path));\n+\n+    for entry in walkdir::WalkDir::new(ui_cargo_path) {\n+        let entry = entry.unwrap();\n+        let path = entry.path();\n+        if path.file_name() != Some(OsStr::new(\"Cargo.toml\")) {\n+            continue;\n+        }\n+\n+        let toml = fs::read_to_string(path).unwrap().parse::<toml::Value>().unwrap();\n+\n+        let package = toml.as_table().unwrap().get(\"package\").unwrap().as_table().unwrap();\n+\n+        let name = package.get(\"name\").unwrap().as_str().unwrap().replace('-', \"_\");\n+        assert!(\n+            path.parent()\n+                .unwrap()\n+                .components()\n+                .map(|component| component.as_os_str().to_string_lossy().replace('-', \"_\"))\n+                .any(|s| *s == name)\n+                || path.starts_with(&cargo_common_metadata_path),\n+            \"{:?} has incorrect package name\",\n+            path\n+        );\n+\n+        let publish = package.get(\"publish\").and_then(toml::Value::as_bool).unwrap_or(true);\n+        assert!(\n+            !publish || publish_exceptions.contains(&path.parent().unwrap().to_path_buf()),\n+            \"{:?} lacks `publish = false`\",\n+            path\n+        );\n+    }\n+}\n+\n /// Restores an env var on drop\n #[must_use]\n struct VarGuard {"}, {"sha": "bc8e428f8595b5b3e7c721681e803226f90308ef", "filename": "src/tools/clippy/tests/ui-cargo/cargo_common_metadata/fail/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,5 +1,5 @@\n [package]\n-name = \"cargo_common_metadata\"\n+name = \"cargo_common_metadata_fail\"\n version = \"0.1.0\"\n publish = false\n "}, {"sha": "86953142befadcfd65ee86c8a807fb0db0a1f4b7", "filename": "src/tools/clippy/tests/ui-cargo/cargo_common_metadata/fail/src/main.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2Fsrc%2Fmain.stderr?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,16 +1,16 @@\n-error: package `cargo_common_metadata` is missing `package.description` metadata\n+error: package `cargo_common_metadata_fail` is missing `package.description` metadata\n    |\n    = note: `-D clippy::cargo-common-metadata` implied by `-D warnings`\n \n-error: package `cargo_common_metadata` is missing `either package.license or package.license_file` metadata\n+error: package `cargo_common_metadata_fail` is missing `either package.license or package.license_file` metadata\n \n-error: package `cargo_common_metadata` is missing `package.repository` metadata\n+error: package `cargo_common_metadata_fail` is missing `package.repository` metadata\n \n-error: package `cargo_common_metadata` is missing `package.readme` metadata\n+error: package `cargo_common_metadata_fail` is missing `package.readme` metadata\n \n-error: package `cargo_common_metadata` is missing `package.keywords` metadata\n+error: package `cargo_common_metadata_fail` is missing `package.keywords` metadata\n \n-error: package `cargo_common_metadata` is missing `package.categories` metadata\n+error: package `cargo_common_metadata_fail` is missing `package.categories` metadata\n \n error: aborting due to 6 previous errors\n "}, {"sha": "5005b83f59d14e2370c37ee28c7cfc1fe9798702", "filename": "src/tools/clippy/tests/ui-cargo/cargo_common_metadata/fail_publish/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,5 +1,5 @@\n [package]\n-name = \"cargo_common_metadata\"\n+name = \"cargo_common_metadata_fail_publish\"\n version = \"0.1.0\"\n publish = [\"some-registry-name\"]\n "}, {"sha": "ac1b5e8e90347d742fc6346f220b34cb1178217e", "filename": "src/tools/clippy/tests/ui-cargo/cargo_common_metadata/fail_publish/src/main.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish%2Fsrc%2Fmain.stderr?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,16 +1,16 @@\n-error: package `cargo_common_metadata` is missing `package.description` metadata\n+error: package `cargo_common_metadata_fail_publish` is missing `package.description` metadata\n    |\n    = note: `-D clippy::cargo-common-metadata` implied by `-D warnings`\n \n-error: package `cargo_common_metadata` is missing `either package.license or package.license_file` metadata\n+error: package `cargo_common_metadata_fail_publish` is missing `either package.license or package.license_file` metadata\n \n-error: package `cargo_common_metadata` is missing `package.repository` metadata\n+error: package `cargo_common_metadata_fail_publish` is missing `package.repository` metadata\n \n-error: package `cargo_common_metadata` is missing `package.readme` metadata\n+error: package `cargo_common_metadata_fail_publish` is missing `package.readme` metadata\n \n-error: package `cargo_common_metadata` is missing `package.keywords` metadata\n+error: package `cargo_common_metadata_fail_publish` is missing `package.keywords` metadata\n \n-error: package `cargo_common_metadata` is missing `package.categories` metadata\n+error: package `cargo_common_metadata_fail_publish` is missing `package.categories` metadata\n \n error: aborting due to 6 previous errors\n "}, {"sha": "51858eecd0a6f87eac742028a8524ce099f677b1", "filename": "src/tools/clippy/tests/ui-cargo/cargo_common_metadata/fail_publish_true/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish_true%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish_true%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish_true%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,5 +1,5 @@\n [package]\n-name = \"cargo_common_metadata\"\n+name = \"cargo_common_metadata_fail_publish_true\"\n version = \"0.1.0\"\n publish = true\n "}, {"sha": "be32c0dc418fa5637056dc1918ead33092df0213", "filename": "src/tools/clippy/tests/ui-cargo/cargo_common_metadata/fail_publish_true/src/main.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish_true%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish_true%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish_true%2Fsrc%2Fmain.stderr?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,16 +1,16 @@\n-error: package `cargo_common_metadata` is missing `package.description` metadata\n+error: package `cargo_common_metadata_fail_publish_true` is missing `package.description` metadata\n    |\n    = note: `-D clippy::cargo-common-metadata` implied by `-D warnings`\n \n-error: package `cargo_common_metadata` is missing `either package.license or package.license_file` metadata\n+error: package `cargo_common_metadata_fail_publish_true` is missing `either package.license or package.license_file` metadata\n \n-error: package `cargo_common_metadata` is missing `package.repository` metadata\n+error: package `cargo_common_metadata_fail_publish_true` is missing `package.repository` metadata\n \n-error: package `cargo_common_metadata` is missing `package.readme` metadata\n+error: package `cargo_common_metadata_fail_publish_true` is missing `package.readme` metadata\n \n-error: package `cargo_common_metadata` is missing `package.keywords` metadata\n+error: package `cargo_common_metadata_fail_publish_true` is missing `package.keywords` metadata\n \n-error: package `cargo_common_metadata` is missing `package.categories` metadata\n+error: package `cargo_common_metadata_fail_publish_true` is missing `package.categories` metadata\n \n error: aborting due to 6 previous errors\n "}, {"sha": "9f6e51fb4d9f0e9627b691183b5bf69778f5459f", "filename": "src/tools/clippy/tests/ui-cargo/cargo_common_metadata/pass/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Fpass%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Fpass%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Fpass%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,5 +1,5 @@\n [package]\n-name = \"cargo_common_metadata\"\n+name = \"cargo_common_metadata_pass\"\n version = \"0.1.0\"\n publish = false\n description = \"A test package for the cargo_common_metadata lint\""}, {"sha": "828efee3a8f8b7a7bae04d4f7072c8dc92556fac", "filename": "src/tools/clippy/tests/ui-cargo/cargo_common_metadata/pass_publish_empty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_empty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_empty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_empty%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,5 +1,5 @@\n [package]\n-name = \"cargo_common_metadata\"\n+name = \"cargo_common_metadata_pass_publish_empty\"\n version = \"0.1.0\"\n publish = []\n "}, {"sha": "45a5bf7c57459b4f0dec0e6f0adcee5bd349d2e1", "filename": "src/tools/clippy/tests/ui-cargo/cargo_common_metadata/pass_publish_false/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_false%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_false%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_false%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,5 +1,5 @@\n [package]\n-name = \"cargo_common_metadata\"\n+name = \"cargo_common_metadata_pass_publish_false\"\n version = \"0.1.0\"\n publish = false\n "}, {"sha": "946d1b366f0995f97da653586ad5d65cec7c9a3b", "filename": "src/tools/clippy/tests/ui-cargo/cargo_rust_version/fail_both_diff/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Ffail_both_diff%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Ffail_both_diff%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Ffail_both_diff%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -2,6 +2,7 @@\n name = \"fail-both-diff\"\n version = \"0.1.0\"\n rust-version = \"1.56\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "46b92a1050e3136d6871e498532a3637fbd05d72", "filename": "src/tools/clippy/tests/ui-cargo/cargo_rust_version/fail_both_same/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Ffail_both_same%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Ffail_both_same%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Ffail_both_same%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -2,6 +2,7 @@\n name = \"fail-both-same\"\n version = \"0.1.0\"\n rust-version = \"1.57.0\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "189cc9f68dc4bcaf1ba0c132f57dd4ee707f2d30", "filename": "src/tools/clippy/tests/ui-cargo/cargo_rust_version/fail_cargo/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Ffail_cargo%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Ffail_cargo%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Ffail_cargo%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -2,6 +2,7 @@\n name = \"fail-cargo\"\n version = \"0.1.0\"\n rust-version = \"1.56.1\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "bdb7f261d9e4ff29204ee204bbc6846672b3d791", "filename": "src/tools/clippy/tests/ui-cargo/cargo_rust_version/fail_clippy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Ffail_clippy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Ffail_clippy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Ffail_clippy%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,6 +1,7 @@\n [package]\n name = \"fail-clippy\"\n version = \"0.1.0\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "84448ea41f647346543f89548205bfdd4fe7bfb9", "filename": "src/tools/clippy/tests/ui-cargo/cargo_rust_version/fail_file_attr/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Ffail_file_attr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Ffail_file_attr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Ffail_file_attr%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -2,6 +2,7 @@\n name = \"fail-file-attr\"\n version = \"0.1.0\"\n rust-version = \"1.13\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "809c0e74875b9ff01d7edb7a73f4a67191f5148e", "filename": "src/tools/clippy/tests/ui-cargo/cargo_rust_version/pass_both_same/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Fpass_both_same%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Fpass_both_same%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Fpass_both_same%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,7 +1,8 @@\n [package]\n-name = \"fail-both-same\"\n+name = \"pass-both-same\"\n version = \"0.1.0\"\n rust-version = \"1.13.0\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "32d404f842cf455edbf9a392e2e85dcbb3a5e2a0", "filename": "src/tools/clippy/tests/ui-cargo/cargo_rust_version/pass_cargo/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Fpass_cargo%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Fpass_cargo%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Fpass_cargo%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,7 +1,8 @@\n [package]\n-name = \"fail-cargo\"\n+name = \"pass-cargo\"\n version = \"0.1.0\"\n rust-version = \"1.13.0\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "cc937d6e625478dbb6726a584256a262c6a09134", "filename": "src/tools/clippy/tests/ui-cargo/cargo_rust_version/pass_clippy/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Fpass_clippy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Fpass_clippy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Fpass_clippy%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,6 +1,7 @@\n [package]\n-name = \"fail-clippy\"\n+name = \"pass-clippy\"\n version = \"0.1.0\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "8ef689880d4146298722d24c8677aecc95b6285a", "filename": "src/tools/clippy/tests/ui-cargo/cargo_rust_version/pass_file_attr/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Fpass_file_attr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Fpass_file_attr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Fpass_file_attr%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,7 +1,8 @@\n [package]\n-name = \"fail-file-attr\"\n+name = \"pass-file-attr\"\n version = \"0.1.0\"\n rust-version = \"1.59\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "e9f94594f702c1d247203bf0dab34b0032d4bc65", "filename": "src/tools/clippy/tests/ui-cargo/cargo_rust_version/warn_both_diff/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Fwarn_both_diff%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Fwarn_both_diff%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fcargo_rust_version%2Fwarn_both_diff%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -2,6 +2,7 @@\n name = \"warn-both-diff\"\n version = \"0.1.0\"\n rust-version = \"1.56.0\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "b3d36a9fb64574fe8b8e59d5ed42870c9a91dc19", "filename": "src/tools/clippy/tests/ui-cargo/module_style/fail_mod/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_mod%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,7 +1,8 @@\n [package]\n-name = \"fail\"\n+name = \"fail-mod\"\n version = \"0.1.0\"\n edition = \"2018\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "3610d13c1f30d24c09af7ce556b6770477d13098", "filename": "src/tools/clippy/tests/ui-cargo/module_style/fail_no_mod/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_no_mod%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_no_mod%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Ffail_no_mod%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,7 +1,8 @@\n [package]\n-name = \"fail\"\n+name = \"fail-no-mod\"\n version = \"0.1.0\"\n edition = \"2018\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "1c2991695bc0c66530356996a38a4bf23f0f0f6d", "filename": "src/tools/clippy/tests/ui-cargo/module_style/pass_mod/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Fpass_mod%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Fpass_mod%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Fpass_mod%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,7 +1,8 @@\n [package]\n-name = \"fail\"\n+name = \"pass-mod\"\n version = \"0.1.0\"\n edition = \"2018\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "4180aaf5185cf4fb77a2d399245cc877e0139c15", "filename": "src/tools/clippy/tests/ui-cargo/module_style/pass_no_mod/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Fpass_no_mod%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Fpass_no_mod%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmodule_style%2Fpass_no_mod%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,7 +1,8 @@\n [package]\n-name = \"pass\"\n+name = \"pass-no-mod\"\n version = \"0.1.0\"\n edition = \"2018\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "7eb56cc4e9d97aae3bc56e7d28ee9acc70f17648", "filename": "src/tools/clippy/tests/ui-cargo/multiple_config_files/no_warn/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_config_files%2Fno_warn%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_config_files%2Fno_warn%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_config_files%2Fno_warn%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -2,6 +2,7 @@\n name = \"no_warn\"\n version = \"0.1.0\"\n edition = \"2021\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "b4847d070aab83899029e01fb0fded2129966cae", "filename": "src/tools/clippy/tests/ui-cargo/multiple_config_files/warn/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_config_files%2Fwarn%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_config_files%2Fwarn%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_config_files%2Fwarn%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -2,6 +2,7 @@\n name = \"warn\"\n version = \"0.1.0\"\n edition = \"2021\"\n+publish = false\n \n # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n "}, {"sha": "e7a11a969c037e00a796aafeff6258501ec15e9a", "filename": "src/tools/clippy/tests/ui-cargo/multiple_config_files/warn/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_config_files%2Fwarn%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_config_files%2Fwarn%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_config_files%2Fwarn%2Fsrc%2Fmain.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,5 +1,3 @@\n-// ignore-windows\n-\n fn main() {\n     println!(\"Hello, world!\");\n }"}, {"sha": "6c46571c5bf6e21b556727caf43248ae16370aa9", "filename": "src/tools/clippy/tests/ui-cargo/multiple_crate_versions/pass/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_crate_versions%2Fpass%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_crate_versions%2Fpass%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fmultiple_crate_versions%2Fpass%2FCargo.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,5 +1,5 @@\n [package]\n-name = \"cargo_common_metadata\"\n+name = \"multiple_crate_versions\"\n version = \"0.1.0\"\n publish = false\n "}, {"sha": "5331075885c1d92b0bb961ca65ec63e8301596f3", "filename": "src/tools/clippy/tests/ui-internal/check_clippy_version_attribute.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcheck_clippy_version_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcheck_clippy_version_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fcheck_clippy_version_attribute.stderr?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -17,7 +17,7 @@ LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: `#[deny(clippy::invalid_clippy_version_attribute)]` implied by `#[deny(clippy::internal)]`\n    = help: please use a valid sematic version, see `doc/adding_lints.md`\n-   = note: this error originates in the macro `$crate::declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::declare_tool_lint` which comes from the expansion of the macro `declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this item has an invalid `clippy::version` attribute\n   --> $DIR/check_clippy_version_attribute.rs:48:1\n@@ -32,7 +32,7 @@ LL | | }\n    | |_^\n    |\n    = help: please use a valid sematic version, see `doc/adding_lints.md`\n-   = note: this error originates in the macro `$crate::declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::declare_tool_lint` which comes from the expansion of the macro `declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this lint is missing the `clippy::version` attribute or version value\n   --> $DIR/check_clippy_version_attribute.rs:59:1\n@@ -48,7 +48,7 @@ LL | | }\n    |\n    = note: `#[deny(clippy::missing_clippy_version_attribute)]` implied by `#[deny(clippy::internal)]`\n    = help: please use a `clippy::version` attribute, see `doc/adding_lints.md`\n-   = note: this error originates in the macro `$crate::declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::declare_tool_lint` which comes from the expansion of the macro `declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this lint is missing the `clippy::version` attribute or version value\n   --> $DIR/check_clippy_version_attribute.rs:67:1\n@@ -62,7 +62,7 @@ LL | | }\n    | |_^\n    |\n    = help: please use a `clippy::version` attribute, see `doc/adding_lints.md`\n-   = note: this error originates in the macro `$crate::declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::declare_tool_lint` which comes from the expansion of the macro `declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8961bd4624f45e32da1a4c49b83f737b242dbcf7", "filename": "src/tools/clippy/tests/ui-internal/default_lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fdefault_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fdefault_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fdefault_lint.stderr?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -15,7 +15,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: `#[deny(clippy::default_lint)]` implied by `#[deny(clippy::internal)]`\n-   = note: this error originates in the macro `$crate::declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::declare_tool_lint` which comes from the expansion of the macro `declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "24106510e73be2f344f5154db916807ee97a9d66", "filename": "src/tools/clippy/tests/ui-internal/if_chain_style.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fif_chain_style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fif_chain_style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Fif_chain_style.stderr?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -56,7 +56,7 @@ LL | |         }\n LL | |     }\n    | |_____^\n    |\n-   = note: this error originates in the macro `__if_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__if_chain` which comes from the expansion of the macro `if_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `let` expression should be above the `if_chain!`\n   --> $DIR/if_chain_style.rs:40:9"}, {"sha": "195fabdbf710b59e0b3aa503532013b7d5ebf2f2", "filename": "src/tools/clippy/tests/ui-toml/arithmetic_allowed/arithmetic_allowed.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farithmetic_allowed%2Farithmetic_allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farithmetic_allowed%2Farithmetic_allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farithmetic_allowed%2Farithmetic_allowed.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -0,0 +1,24 @@\n+#![warn(clippy::arithmetic)]\n+\n+use core::ops::Add;\n+\n+#[derive(Clone, Copy)]\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+impl Add for Point {\n+    type Output = Self;\n+\n+    fn add(self, other: Self) -> Self {\n+        todo!()\n+    }\n+}\n+\n+fn main() {\n+    let _ = Point { x: 1, y: 0 } + Point { x: 2, y: 3 };\n+\n+    let point: Point = Point { x: 1, y: 0 };\n+    let _ = point + point;\n+}"}, {"sha": "cc40570b12a0881369321dcc74295e38a20d7786", "filename": "src/tools/clippy/tests/ui-toml/arithmetic_allowed/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farithmetic_allowed%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farithmetic_allowed%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farithmetic_allowed%2Fclippy.toml?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -0,0 +1 @@\n+arithmetic-allowed = [\"Point\"]"}, {"sha": "fe5139c47680c2b449e5823a77af031a10530c8f", "filename": "src/tools/clippy/tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -3,6 +3,7 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            allow-expect-in-tests\n            allow-unwrap-in-tests\n            allowed-scripts\n+           arithmetic-allowed\n            array-size-threshold\n            avoid-breaking-exported-api\n            await-holding-invalid-types"}, {"sha": "a2a1c4394c21f73eeb1f01a182a419362cbf2b05", "filename": "src/tools/clippy/tests/ui/arithmetic.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic.fixed?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -0,0 +1,27 @@\n+// run-rustfix\n+\n+#![allow(clippy::unnecessary_owned_empty_strings)]\n+#![feature(saturating_int_impl)]\n+#![warn(clippy::arithmetic)]\n+\n+use core::num::{Saturating, Wrapping};\n+\n+pub fn hard_coded_allowed() {\n+    let _ = Saturating(0u32) + Saturating(0u32);\n+    let _ = String::new() + \"\";\n+    let _ = Wrapping(0u32) + Wrapping(0u32);\n+\n+    let saturating: Saturating<u32> = Saturating(0u32);\n+    let string: String = String::new();\n+    let wrapping: Wrapping<u32> = Wrapping(0u32);\n+\n+    let inferred_saturating = saturating + saturating;\n+    let inferred_string = string + \"\";\n+    let inferred_wrapping = wrapping + wrapping;\n+\n+    let _ = inferred_saturating + inferred_saturating;\n+    let _ = inferred_string + \"\";\n+    let _ = inferred_wrapping + inferred_wrapping;\n+}\n+\n+fn main() {}"}, {"sha": "a2a1c4394c21f73eeb1f01a182a419362cbf2b05", "filename": "src/tools/clippy/tests/ui/arithmetic.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -0,0 +1,27 @@\n+// run-rustfix\n+\n+#![allow(clippy::unnecessary_owned_empty_strings)]\n+#![feature(saturating_int_impl)]\n+#![warn(clippy::arithmetic)]\n+\n+use core::num::{Saturating, Wrapping};\n+\n+pub fn hard_coded_allowed() {\n+    let _ = Saturating(0u32) + Saturating(0u32);\n+    let _ = String::new() + \"\";\n+    let _ = Wrapping(0u32) + Wrapping(0u32);\n+\n+    let saturating: Saturating<u32> = Saturating(0u32);\n+    let string: String = String::new();\n+    let wrapping: Wrapping<u32> = Wrapping(0u32);\n+\n+    let inferred_saturating = saturating + saturating;\n+    let inferred_string = string + \"\";\n+    let inferred_wrapping = wrapping + wrapping;\n+\n+    let _ = inferred_saturating + inferred_saturating;\n+    let _ = inferred_string + \"\";\n+    let _ = inferred_wrapping + inferred_wrapping;\n+}\n+\n+fn main() {}"}, {"sha": "7bde72e4b6b57dfdf22f5b002b1f5455012319e0", "filename": "src/tools/clippy/tests/ui/assertions_on_result_states.fixed", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.fixed?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+#![warn(clippy::assertions_on_result_states)]\n+\n+use std::result::Result;\n+\n+struct Foo;\n+\n+#[derive(Debug)]\n+struct DebugFoo;\n+\n+#[derive(Copy, Clone, Debug)]\n+struct CopyFoo;\n+\n+macro_rules! get_ok_macro {\n+    () => {\n+        Ok::<_, DebugFoo>(Foo)\n+    };\n+}\n+\n+fn main() {\n+    // test ok\n+    let r: Result<Foo, DebugFoo> = Ok(Foo);\n+    debug_assert!(r.is_ok());\n+    r.unwrap();\n+\n+    // test ok with non-debug error type\n+    let r: Result<Foo, Foo> = Ok(Foo);\n+    assert!(r.is_ok());\n+\n+    // test temporary ok\n+    fn get_ok() -> Result<Foo, DebugFoo> {\n+        Ok(Foo)\n+    }\n+    get_ok().unwrap();\n+\n+    // test macro ok\n+    get_ok_macro!().unwrap();\n+\n+    // test ok that shouldn't be moved\n+    let r: Result<CopyFoo, DebugFoo> = Ok(CopyFoo);\n+    fn test_ref_unmoveable_ok(r: &Result<CopyFoo, DebugFoo>) {\n+        assert!(r.is_ok());\n+    }\n+    test_ref_unmoveable_ok(&r);\n+    assert!(r.is_ok());\n+    r.unwrap();\n+\n+    // test ok that is copied\n+    let r: Result<CopyFoo, CopyFoo> = Ok(CopyFoo);\n+    r.unwrap();\n+    r.unwrap();\n+\n+    // test reference to ok\n+    let r: Result<CopyFoo, CopyFoo> = Ok(CopyFoo);\n+    fn test_ref_copy_ok(r: &Result<CopyFoo, CopyFoo>) {\n+        r.unwrap();\n+    }\n+    test_ref_copy_ok(&r);\n+    r.unwrap();\n+\n+    // test err\n+    let r: Result<DebugFoo, Foo> = Err(Foo);\n+    debug_assert!(r.is_err());\n+    r.unwrap_err();\n+\n+    // test err with non-debug value type\n+    let r: Result<Foo, Foo> = Err(Foo);\n+    assert!(r.is_err());\n+}"}, {"sha": "4c5af81efc23fbac1ae73a27fda862eeb9f1ddd2", "filename": "src/tools/clippy/tests/ui/assertions_on_result_states.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+#![warn(clippy::assertions_on_result_states)]\n+\n+use std::result::Result;\n+\n+struct Foo;\n+\n+#[derive(Debug)]\n+struct DebugFoo;\n+\n+#[derive(Copy, Clone, Debug)]\n+struct CopyFoo;\n+\n+macro_rules! get_ok_macro {\n+    () => {\n+        Ok::<_, DebugFoo>(Foo)\n+    };\n+}\n+\n+fn main() {\n+    // test ok\n+    let r: Result<Foo, DebugFoo> = Ok(Foo);\n+    debug_assert!(r.is_ok());\n+    assert!(r.is_ok());\n+\n+    // test ok with non-debug error type\n+    let r: Result<Foo, Foo> = Ok(Foo);\n+    assert!(r.is_ok());\n+\n+    // test temporary ok\n+    fn get_ok() -> Result<Foo, DebugFoo> {\n+        Ok(Foo)\n+    }\n+    assert!(get_ok().is_ok());\n+\n+    // test macro ok\n+    assert!(get_ok_macro!().is_ok());\n+\n+    // test ok that shouldn't be moved\n+    let r: Result<CopyFoo, DebugFoo> = Ok(CopyFoo);\n+    fn test_ref_unmoveable_ok(r: &Result<CopyFoo, DebugFoo>) {\n+        assert!(r.is_ok());\n+    }\n+    test_ref_unmoveable_ok(&r);\n+    assert!(r.is_ok());\n+    r.unwrap();\n+\n+    // test ok that is copied\n+    let r: Result<CopyFoo, CopyFoo> = Ok(CopyFoo);\n+    assert!(r.is_ok());\n+    r.unwrap();\n+\n+    // test reference to ok\n+    let r: Result<CopyFoo, CopyFoo> = Ok(CopyFoo);\n+    fn test_ref_copy_ok(r: &Result<CopyFoo, CopyFoo>) {\n+        assert!(r.is_ok());\n+    }\n+    test_ref_copy_ok(&r);\n+    r.unwrap();\n+\n+    // test err\n+    let r: Result<DebugFoo, Foo> = Err(Foo);\n+    debug_assert!(r.is_err());\n+    assert!(r.is_err());\n+\n+    // test err with non-debug value type\n+    let r: Result<Foo, Foo> = Err(Foo);\n+    assert!(r.is_err());\n+}"}, {"sha": "13c2dd877a976c524e9db0c35df98cb314b6189c", "filename": "src/tools/clippy/tests/ui/assertions_on_result_states.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_result_states.stderr?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -0,0 +1,40 @@\n+error: called `assert!` with `Result::is_ok`\n+  --> $DIR/assertions_on_result_states.rs:24:5\n+   |\n+LL |     assert!(r.is_ok());\n+   |     ^^^^^^^^^^^^^^^^^^ help: replace with: `r.unwrap()`\n+   |\n+   = note: `-D clippy::assertions-on-result-states` implied by `-D warnings`\n+\n+error: called `assert!` with `Result::is_ok`\n+  --> $DIR/assertions_on_result_states.rs:34:5\n+   |\n+LL |     assert!(get_ok().is_ok());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `get_ok().unwrap()`\n+\n+error: called `assert!` with `Result::is_ok`\n+  --> $DIR/assertions_on_result_states.rs:37:5\n+   |\n+LL |     assert!(get_ok_macro!().is_ok());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `get_ok_macro!().unwrap()`\n+\n+error: called `assert!` with `Result::is_ok`\n+  --> $DIR/assertions_on_result_states.rs:50:5\n+   |\n+LL |     assert!(r.is_ok());\n+   |     ^^^^^^^^^^^^^^^^^^ help: replace with: `r.unwrap()`\n+\n+error: called `assert!` with `Result::is_ok`\n+  --> $DIR/assertions_on_result_states.rs:56:9\n+   |\n+LL |         assert!(r.is_ok());\n+   |         ^^^^^^^^^^^^^^^^^^ help: replace with: `r.unwrap()`\n+\n+error: called `assert!` with `Result::is_err`\n+  --> $DIR/assertions_on_result_states.rs:64:5\n+   |\n+LL |     assert!(r.is_err());\n+   |     ^^^^^^^^^^^^^^^^^^^ help: replace with: `r.unwrap_err()`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "da034b51cfdb905497b69e494101ed14c8be4a22", "filename": "src/tools/clippy/tests/ui/assign_ops.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassign_ops.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassign_ops.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassign_ops.fixed?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+use core::num::Wrapping;\n+\n #[allow(dead_code, unused_assignments)]\n #[warn(clippy::assign_op_pattern)]\n fn main() {\n@@ -18,4 +20,13 @@ fn main() {\n     a = 6 << a;\n     let mut s = String::new();\n     s += \"bla\";\n+\n+    // Issue #9180\n+    let mut a = Wrapping(0u32);\n+    a += Wrapping(1u32);\n+    let mut v = vec![0u32, 1u32];\n+    v[0] += v[1];\n+    let mut v = vec![Wrapping(0u32), Wrapping(1u32)];\n+    v[0] = v[0] + v[1];\n+    let _ = || v[0] = v[0] + v[1];\n }"}, {"sha": "337bb02c8a612860b520c9dcf0304721b9da258f", "filename": "src/tools/clippy/tests/ui/assign_ops.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassign_ops.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+use core::num::Wrapping;\n+\n #[allow(dead_code, unused_assignments)]\n #[warn(clippy::assign_op_pattern)]\n fn main() {\n@@ -18,4 +20,13 @@ fn main() {\n     a = 6 << a;\n     let mut s = String::new();\n     s = s + \"bla\";\n+\n+    // Issue #9180\n+    let mut a = Wrapping(0u32);\n+    a = a + Wrapping(1u32);\n+    let mut v = vec![0u32, 1u32];\n+    v[0] = v[0] + v[1];\n+    let mut v = vec![Wrapping(0u32), Wrapping(1u32)];\n+    v[0] = v[0] + v[1];\n+    let _ = || v[0] = v[0] + v[1];\n }"}, {"sha": "63a938ab4b43557f218acf7afb239b0f71e36879", "filename": "src/tools/clippy/tests/ui/assign_ops.stderr", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassign_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassign_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassign_ops.stderr?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,58 +1,70 @@\n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:7:5\n+  --> $DIR/assign_ops.rs:9:5\n    |\n LL |     a = a + 1;\n    |     ^^^^^^^^^ help: replace it with: `a += 1`\n    |\n    = note: `-D clippy::assign-op-pattern` implied by `-D warnings`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:8:5\n+  --> $DIR/assign_ops.rs:10:5\n    |\n LL |     a = 1 + a;\n    |     ^^^^^^^^^ help: replace it with: `a += 1`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:9:5\n+  --> $DIR/assign_ops.rs:11:5\n    |\n LL |     a = a - 1;\n    |     ^^^^^^^^^ help: replace it with: `a -= 1`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:10:5\n+  --> $DIR/assign_ops.rs:12:5\n    |\n LL |     a = a * 99;\n    |     ^^^^^^^^^^ help: replace it with: `a *= 99`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:11:5\n+  --> $DIR/assign_ops.rs:13:5\n    |\n LL |     a = 42 * a;\n    |     ^^^^^^^^^^ help: replace it with: `a *= 42`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:12:5\n+  --> $DIR/assign_ops.rs:14:5\n    |\n LL |     a = a / 2;\n    |     ^^^^^^^^^ help: replace it with: `a /= 2`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:13:5\n+  --> $DIR/assign_ops.rs:15:5\n    |\n LL |     a = a % 5;\n    |     ^^^^^^^^^ help: replace it with: `a %= 5`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:14:5\n+  --> $DIR/assign_ops.rs:16:5\n    |\n LL |     a = a & 1;\n    |     ^^^^^^^^^ help: replace it with: `a &= 1`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:20:5\n+  --> $DIR/assign_ops.rs:22:5\n    |\n LL |     s = s + \"bla\";\n    |     ^^^^^^^^^^^^^ help: replace it with: `s += \"bla\"`\n \n-error: aborting due to 9 previous errors\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:26:5\n+   |\n+LL |     a = a + Wrapping(1u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `a += Wrapping(1u32)`\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:28:5\n+   |\n+LL |     v[0] = v[0] + v[1];\n+   |     ^^^^^^^^^^^^^^^^^^ help: replace it with: `v[0] += v[1]`\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "ee6abd519f16e19f19fc14440345dd8129dea5de", "filename": "src/tools/clippy/tests/ui/crashes/ice-9238.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9238.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9238.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9238.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -0,0 +1,12 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+#![warn(clippy::branches_sharing_code)]\n+\n+const fn f() -> usize {\n+    2\n+}\n+const C: [f64; f()] = [0f64; f()];\n+\n+fn main() {\n+    let _ = if true { C[0] } else { C[1] };\n+}"}, {"sha": "0099e6e2f34b8dab1c20ff08743d2dc4577903c1", "filename": "src/tools/clippy/tests/ui/crashes/ice-9242.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9242.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9242.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-9242.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -0,0 +1,8 @@\n+enum E {\n+    X(),\n+    Y,\n+}\n+\n+fn main() {\n+    let _ = if let E::X() = E::X() { 1 } else { 2 };\n+}"}, {"sha": "1b3bcece6f1e7923de1d770ee27679c73ba7b85e", "filename": "src/tools/clippy/tests/ui/crate_level_checks/entrypoint_recursion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,5 +1,4 @@\n // ignore-macos\n-// ignore-windows\n \n #![feature(rustc_attrs)]\n "}, {"sha": "459cf12a1c209a31af4aa4d47f0a750ee16231bc", "filename": "src/tools/clippy/tests/ui/crate_level_checks/entrypoint_recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.stderr?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,5 +1,5 @@\n error: recursing into entrypoint `a`\n-  --> $DIR/entrypoint_recursion.rs:11:5\n+  --> $DIR/entrypoint_recursion.rs:10:5\n    |\n LL |     a();\n    |     ^"}, {"sha": "896596b567922183d11dd2f82708feffe214bebb", "filename": "src/tools/clippy/tests/ui/declare_interior_mutable_const/others.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -31,9 +31,25 @@ const NO_ANN: &dyn Display = &70;\n static STATIC_TUPLE: (AtomicUsize, String) = (ATOMIC, STRING);\n //^ there should be no lints on this line\n \n-// issue #8493\n-thread_local! {\n-    static THREAD_LOCAL: Cell<i32> = const { Cell::new(0) };\n+mod issue_8493 {\n+    use std::cell::Cell;\n+\n+    thread_local! {\n+        static _BAR: Cell<i32> = const { Cell::new(0) };\n+    }\n+\n+    macro_rules! issue_8493 {\n+        () => {\n+            const _BAZ: Cell<usize> = Cell::new(0); //~ ERROR interior mutable\n+            static _FOOBAR: () = {\n+                thread_local! {\n+                    static _VAR: Cell<i32> = const { Cell::new(0) };\n+                }\n+            };\n+        };\n+    }\n+\n+    issue_8493!();\n }\n \n fn main() {}"}, {"sha": "1fd6d7322a76cb6f38e4117d2e7a595f0ed5ac73", "filename": "src/tools/clippy/tests/ui/declare_interior_mutable_const/others.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -35,5 +35,16 @@ LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n    |\n    = note: this error originates in the macro `declare_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 4 previous errors\n+error: a `const` item should never be interior mutable\n+  --> $DIR/others.rs:43:13\n+   |\n+LL |             const _BAZ: Cell<usize> = Cell::new(0); //~ ERROR interior mutable\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     issue_8493!();\n+   |     ------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `issue_8493` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "f4db2d20c713c0b4dc1d83591e6b6eceb00fe7cc", "filename": "src/tools/clippy/tests/ui/format.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.fixed?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -84,4 +84,10 @@ fn main() {\n     let _ = x.to_string();\n     let _ = format!(\"{x:?}\"); // Don't lint on debug\n     let _ = x.to_string();\n+\n+    // Issue #9234\n+    let abc = \"abc\";\n+    let _ = abc.to_string();\n+    let xx = \"xx\";\n+    let _ = xx.to_string();\n }"}, {"sha": "bf687cb1e96c79cf864252d9ec156f80597345fd", "filename": "src/tools/clippy/tests/ui/format.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -86,4 +86,10 @@ fn main() {\n     let _ = format!(\"{x}\");\n     let _ = format!(\"{x:?}\"); // Don't lint on debug\n     let _ = format!(\"{y}\", y = x);\n+\n+    // Issue #9234\n+    let abc = \"abc\";\n+    let _ = format!(\"{abc}\");\n+    let xx = \"xx\";\n+    let _ = format!(\"{xx}\");\n }"}, {"sha": "a0f8e7d19379110b1ffef5a8f7a82389421c795a", "filename": "src/tools/clippy/tests/ui/format.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fformat.stderr?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -111,5 +111,17 @@ error: useless use of `format!`\n LL |     let _ = format!(\"{y}\", y = x);\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n-error: aborting due to 17 previous errors\n+error: useless use of `format!`\n+  --> $DIR/format.rs:92:13\n+   |\n+LL |     let _ = format!(\"{abc}\");\n+   |             ^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `abc.to_string()`\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:94:13\n+   |\n+LL |     let _ = format!(\"{xx}\");\n+   |             ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `xx.to_string()`\n+\n+error: aborting due to 19 previous errors\n "}, {"sha": "7aba5b447d5537f25fd0be12684a1986f5b2463b", "filename": "src/tools/clippy/tests/ui/match_same_arms2.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_same_arms2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_same_arms2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_same_arms2.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::match_same_arms)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(clippy::blacklisted_name, clippy::diverging_sub_expression)]\n \n fn bar<T>(_: T) {}\n fn foo() -> bool {\n@@ -227,4 +227,12 @@ fn main() {\n         Some(Bar { y: 0, x: 5, .. }) => 1,\n         _ => 200,\n     };\n+\n+    let _ = match 0 {\n+        0 => todo!(),\n+        1 => todo!(),\n+        2 => core::convert::identity::<u32>(todo!()),\n+        3 => core::convert::identity::<u32>(todo!()),\n+        _ => 5,\n+    };\n }"}, {"sha": "8c0da84d8e975a5e160608bf74714d79c7daca84", "filename": "src/tools/clippy/tests/ui/mismatching_type_param_order.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatching_type_param_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatching_type_param_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatching_type_param_order.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -57,4 +57,8 @@ fn main() {\n         B: Copy,\n     {\n     }\n+\n+    // if the types are complicated, do not lint\n+    impl<K, V, B> Foo<(K, V), B> {}\n+    impl<K, V, A> Foo<(K, V), A> {}\n }"}, {"sha": "bfd2725ecaaa874b9409502e5b72514663ad7cb8", "filename": "src/tools/clippy/tests/ui/needless_borrow.fixed", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.fixed?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -158,3 +158,28 @@ fn check_expect_suppression() {\n     #[expect(clippy::needless_borrow)]\n     let _ = x(&&a);\n }\n+\n+#[allow(dead_code)]\n+mod issue9160 {\n+    pub struct S<F> {\n+        f: F,\n+    }\n+\n+    impl<T, F> S<F>\n+    where\n+        F: Fn() -> T,\n+    {\n+        fn calls_field(&self) -> T {\n+            (self.f)()\n+        }\n+    }\n+\n+    impl<T, F> S<F>\n+    where\n+        F: FnMut() -> T,\n+    {\n+        fn calls_mut_field(&mut self) -> T {\n+            (self.f)()\n+        }\n+    }\n+}"}, {"sha": "c457d8c5471886f5491aba8bfc3c08f4a85d2621", "filename": "src/tools/clippy/tests/ui/needless_borrow.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -158,3 +158,28 @@ fn check_expect_suppression() {\n     #[expect(clippy::needless_borrow)]\n     let _ = x(&&a);\n }\n+\n+#[allow(dead_code)]\n+mod issue9160 {\n+    pub struct S<F> {\n+        f: F,\n+    }\n+\n+    impl<T, F> S<F>\n+    where\n+        F: Fn() -> T,\n+    {\n+        fn calls_field(&self) -> T {\n+            (&self.f)()\n+        }\n+    }\n+\n+    impl<T, F> S<F>\n+    where\n+        F: FnMut() -> T,\n+    {\n+        fn calls_mut_field(&mut self) -> T {\n+            (&mut self.f)()\n+        }\n+    }\n+}"}, {"sha": "66588689d81851a8f81862bac08e1bf08ce95d58", "filename": "src/tools/clippy/tests/ui/needless_borrow.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.stderr?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -120,5 +120,17 @@ error: this expression creates a reference which is immediately dereferenced by\n LL |     (&&5).foo();\n    |     ^^^^^ help: change this to: `(&5)`\n \n-error: aborting due to 20 previous errors\n+error: this expression borrows a value the compiler would automatically borrow\n+  --> $DIR/needless_borrow.rs:173:13\n+   |\n+LL |             (&self.f)()\n+   |             ^^^^^^^^^ help: change this to: `(self.f)`\n+\n+error: this expression borrows a value the compiler would automatically borrow\n+  --> $DIR/needless_borrow.rs:182:13\n+   |\n+LL |             (&mut self.f)()\n+   |             ^^^^^^^^^^^^^ help: change this to: `(self.f)`\n+\n+error: aborting due to 22 previous errors\n "}, {"sha": "62d932c2c6b79364a2139adcf5ce03b74214e6d5", "filename": "src/tools/clippy/tests/ui/obfuscated_if_else.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fobfuscated_if_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fobfuscated_if_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fobfuscated_if_else.fixed?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+\n+#![warn(clippy::obfuscated_if_else)]\n+\n+fn main() {\n+    if true { \"a\" } else { \"b\" };\n+}"}, {"sha": "273be9092a745175b57f41ec2482f5792d9bc8e7", "filename": "src/tools/clippy/tests/ui/obfuscated_if_else.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fobfuscated_if_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fobfuscated_if_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fobfuscated_if_else.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+\n+#![warn(clippy::obfuscated_if_else)]\n+\n+fn main() {\n+    true.then_some(\"a\").unwrap_or(\"b\");\n+}"}, {"sha": "e4180c288693f9e22e2cd442e2ee74dcf0aa3c4b", "filename": "src/tools/clippy/tests/ui/obfuscated_if_else.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fobfuscated_if_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fobfuscated_if_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fobfuscated_if_else.stderr?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -0,0 +1,10 @@\n+error: use of `.then_some(..).unwrap_or(..)` can be written more clearly with `if .. else ..`\n+  --> $DIR/obfuscated_if_else.rs:6:5\n+   |\n+LL |     true.then_some(\"a\").unwrap_or(\"b\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `if true { \"a\" } else { \"b\" }`\n+   |\n+   = note: `-D clippy::obfuscated-if-else` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "6b27475de4c87f84fecf66d74878eaa60348564c", "filename": "src/tools/clippy/tests/ui/std_instead_of_core.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstd_instead_of_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstd_instead_of_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstd_instead_of_core.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -9,6 +9,8 @@ fn std_instead_of_core() {\n     use std::hash::Hasher;\n     // Absolute path\n     use ::std::hash::Hash;\n+    // Don't lint on `env` macro\n+    use std::env;\n \n     // Multiple imports\n     use std::fmt::{Debug, Result};\n@@ -20,10 +22,14 @@ fn std_instead_of_core() {\n     // Types\n     let cell = std::cell::Cell::new(8u32);\n     let cell_absolute = ::std::cell::Cell::new(8u32);\n+\n+    let _ = std::env!(\"PATH\");\n }\n \n #[warn(clippy::std_instead_of_alloc)]\n fn std_instead_of_alloc() {\n+    // Only lint once.\n+    use std::vec;\n     use std::vec::Vec;\n }\n "}, {"sha": "bc49dabf5868ac44b0f9c26cab047c55d0e54427", "filename": "src/tools/clippy/tests/ui/std_instead_of_core.stderr", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstd_instead_of_core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstd_instead_of_core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fstd_instead_of_core.stderr?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -16,70 +16,78 @@ LL |     use ::std::hash::Hash;\n    = help: consider importing the item from `core`\n \n error: used import from `std` instead of `core`\n-  --> $DIR/std_instead_of_core.rs:14:20\n+  --> $DIR/std_instead_of_core.rs:16:20\n    |\n LL |     use std::fmt::{Debug, Result};\n    |                    ^^^^^\n    |\n    = help: consider importing the item from `core`\n \n error: used import from `std` instead of `core`\n-  --> $DIR/std_instead_of_core.rs:14:27\n+  --> $DIR/std_instead_of_core.rs:16:27\n    |\n LL |     use std::fmt::{Debug, Result};\n    |                           ^^^^^^\n    |\n    = help: consider importing the item from `core`\n \n error: used import from `std` instead of `core`\n-  --> $DIR/std_instead_of_core.rs:17:15\n+  --> $DIR/std_instead_of_core.rs:19:15\n    |\n LL |     let ptr = std::ptr::null::<u32>();\n    |               ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider importing the item from `core`\n \n error: used import from `std` instead of `core`\n-  --> $DIR/std_instead_of_core.rs:18:19\n+  --> $DIR/std_instead_of_core.rs:20:19\n    |\n LL |     let ptr_mut = ::std::ptr::null_mut::<usize>();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider importing the item from `core`\n \n error: used import from `std` instead of `core`\n-  --> $DIR/std_instead_of_core.rs:21:16\n+  --> $DIR/std_instead_of_core.rs:23:16\n    |\n LL |     let cell = std::cell::Cell::new(8u32);\n    |                ^^^^^^^^^^^^^^^\n    |\n    = help: consider importing the item from `core`\n \n error: used import from `std` instead of `core`\n-  --> $DIR/std_instead_of_core.rs:22:25\n+  --> $DIR/std_instead_of_core.rs:24:25\n    |\n LL |     let cell_absolute = ::std::cell::Cell::new(8u32);\n    |                         ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider importing the item from `core`\n \n error: used import from `std` instead of `alloc`\n-  --> $DIR/std_instead_of_core.rs:27:9\n+  --> $DIR/std_instead_of_core.rs:32:9\n+   |\n+LL |     use std::vec;\n+   |         ^^^^^^^^\n+   |\n+   = note: `-D clippy::std-instead-of-alloc` implied by `-D warnings`\n+   = help: consider importing the item from `alloc`\n+\n+error: used import from `std` instead of `alloc`\n+  --> $DIR/std_instead_of_core.rs:33:9\n    |\n LL |     use std::vec::Vec;\n    |         ^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::std-instead-of-alloc` implied by `-D warnings`\n    = help: consider importing the item from `alloc`\n \n error: used import from `alloc` instead of `core`\n-  --> $DIR/std_instead_of_core.rs:32:9\n+  --> $DIR/std_instead_of_core.rs:38:9\n    |\n LL |     use alloc::slice::from_ref;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::alloc-instead-of-core` implied by `-D warnings`\n    = help: consider importing the item from `core`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "92e8e1dba69dd0a963f33439d9f134ec5cd7b1bc", "filename": "src/tools/clippy/tests/ui/unused_self.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a782537b17a0cf8f46e9eb67d818275941cc0bc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_self.rs?ref=7a782537b17a0cf8f46e9eb67d818275941cc0bc", "patch": "@@ -53,8 +53,17 @@ mod unused_self_allow {\n         // shouldn't trigger\n         fn unused_self_move(self) {}\n     }\n+\n+    pub struct D;\n+\n+    impl D {\n+        // shouldn't trigger for public methods\n+        pub fn unused_self_move(self) {}\n+    }\n }\n \n+pub use unused_self_allow::D;\n+\n mod used_self {\n     use std::pin::Pin;\n "}]}