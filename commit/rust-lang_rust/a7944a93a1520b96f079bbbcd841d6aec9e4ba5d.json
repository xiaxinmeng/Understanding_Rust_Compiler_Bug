{"sha": "a7944a93a1520b96f079bbbcd841d6aec9e4ba5d", "node_id": "C_kwDOAAsO6NoAKGE3OTQ0YTkzYTE1MjBiOTZmMDc5YmJiY2Q4NDFkNmFlYzllNGJhNWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T10:01:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T10:01:03Z"}, "message": "Auto merge of #14735 - Veykril:forbid-relative-json, r=Veykril\n\ninternal: Forbid canonicalization of paths and normalize all rust-project.json paths\n\nCloses https://github.com/rust-lang/rust-analyzer/issues/14728\ncc https://github.com/rust-lang/rust-analyzer/pull/14430\n\n- Removes canonicalization (and forbids it from being used in a sense, clippy could help here again with its lint in the future)\n- Normalizes all paths in rust-project.json which we weren't doing in some cases", "tree": {"sha": "6be33cf6ca38e7b9feb5429552795831a43901e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6be33cf6ca38e7b9feb5429552795831a43901e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7944a93a1520b96f079bbbcd841d6aec9e4ba5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7944a93a1520b96f079bbbcd841d6aec9e4ba5d", "html_url": "https://github.com/rust-lang/rust/commit/a7944a93a1520b96f079bbbcd841d6aec9e4ba5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7944a93a1520b96f079bbbcd841d6aec9e4ba5d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9f9bc26e8e051fb481819224ddfd1375076865d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9f9bc26e8e051fb481819224ddfd1375076865d", "html_url": "https://github.com/rust-lang/rust/commit/e9f9bc26e8e051fb481819224ddfd1375076865d"}, {"sha": "f47caa666e0a2f7dd9ee9ac2535a2d26b301d4fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f47caa666e0a2f7dd9ee9ac2535a2d26b301d4fb", "html_url": "https://github.com/rust-lang/rust/commit/f47caa666e0a2f7dd9ee9ac2535a2d26b301d4fb"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "e0c20a4143bd686b2458bb66a1abb0f8c847ec6e", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7944a93a1520b96f079bbbcd841d6aec9e4ba5d/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7944a93a1520b96f079bbbcd841d6aec9e4ba5d/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=a7944a93a1520b96f079bbbcd841d6aec9e4ba5d", "patch": "@@ -140,6 +140,11 @@ impl AbsPath {\n         self.0.parent().map(AbsPath::assert)\n     }\n \n+    /// Equivalent of [`Path::join`] for `AbsPath` with an additional normalize step afterwards.\n+    pub fn absolutize(&self, path: impl AsRef<Path>) -> AbsPathBuf {\n+        self.join(path).normalize()\n+    }\n+\n     /// Equivalent of [`Path::join`] for `AbsPath`.\n     pub fn join(&self, path: impl AsRef<Path>) -> AbsPathBuf {\n         self.as_ref().join(path).try_into().unwrap()\n@@ -166,9 +171,8 @@ impl AbsPath {\n         AbsPathBuf::try_from(self.0.to_path_buf()).unwrap()\n     }\n \n-    /// Equivalent of [`Path::canonicalize`] for `AbsPath`.\n-    pub fn canonicalize(&self) -> Result<AbsPathBuf, std::io::Error> {\n-        Ok(self.as_ref().canonicalize()?.try_into().unwrap())\n+    pub fn canonicalize(&self) -> ! {\n+        panic!(\"We explicitly do not provide canonicalization API, as that is almost always a wrong solution, see #14430\")\n     }\n \n     /// Equivalent of [`Path::strip_prefix`] for `AbsPath`."}, {"sha": "3f60e4dd92f4325176764a6b473c5783ee409557", "filename": "crates/project-model/src/manifest_path.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7944a93a1520b96f079bbbcd841d6aec9e4ba5d/crates%2Fproject-model%2Fsrc%2Fmanifest_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7944a93a1520b96f079bbbcd841d6aec9e4ba5d/crates%2Fproject-model%2Fsrc%2Fmanifest_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fmanifest_path.rs?ref=a7944a93a1520b96f079bbbcd841d6aec9e4ba5d", "patch": "@@ -35,9 +35,8 @@ impl ManifestPath {\n         self.file.parent().unwrap()\n     }\n \n-    /// Equivalent of [`Path::canonicalize`] for `ManifestPath`.\n-    pub fn canonicalize(&self) -> Result<ManifestPath, std::io::Error> {\n-        Ok((&**self).canonicalize()?.try_into().unwrap())\n+    pub fn canonicalize(&self) -> ! {\n+        (&**self).canonicalize()\n     }\n }\n "}, {"sha": "80897f7478cf9489cd0b4d51b4f5e32f2656aaec", "filename": "crates/project-model/src/project_json.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a7944a93a1520b96f079bbbcd841d6aec9e4ba5d/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7944a93a1520b96f079bbbcd841d6aec9e4ba5d/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fproject_json.rs?ref=a7944a93a1520b96f079bbbcd841d6aec9e4ba5d", "patch": "@@ -49,13 +49,12 @@\n //! user explores them belongs to that extension (it's totally valid to change\n //! rust-project.json over time via configuration request!)\n \n-use std::path::PathBuf;\n-\n use base_db::{CrateDisplayName, CrateId, CrateName, Dependency, Edition};\n use la_arena::RawIdx;\n use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::FxHashMap;\n use serde::{de, Deserialize};\n+use std::path::PathBuf;\n \n use crate::cfg_flag::CfgFlag;\n \n@@ -99,26 +98,23 @@ impl ProjectJson {\n     /// * `data` - The parsed contents of `rust-project.json`, or project json that's passed via\n     ///            configuration.\n     pub fn new(base: &AbsPath, data: ProjectJsonData) -> ProjectJson {\n+        let absolutize_on_base = |p| base.absolutize(p);\n         ProjectJson {\n-            sysroot: data.sysroot.map(|it| base.join(it)),\n-            sysroot_src: data.sysroot_src.map(|it| base.join(it)),\n+            sysroot: data.sysroot.map(absolutize_on_base),\n+            sysroot_src: data.sysroot_src.map(absolutize_on_base),\n             project_root: base.to_path_buf(),\n             crates: data\n                 .crates\n                 .into_iter()\n                 .map(|crate_data| {\n-                    let is_workspace_member = crate_data.is_workspace_member.unwrap_or_else(|| {\n-                        crate_data.root_module.is_relative()\n-                            && !crate_data.root_module.starts_with(\"..\")\n-                            || crate_data.root_module.starts_with(base)\n-                    });\n-                    let root_module = base.join(crate_data.root_module).normalize();\n+                    let root_module = absolutize_on_base(crate_data.root_module);\n+                    let is_workspace_member = crate_data\n+                        .is_workspace_member\n+                        .unwrap_or_else(|| root_module.starts_with(base));\n                     let (include, exclude) = match crate_data.source {\n                         Some(src) => {\n                             let absolutize = |dirs: Vec<PathBuf>| {\n-                                dirs.into_iter()\n-                                    .map(|it| base.join(it).normalize())\n-                                    .collect::<Vec<_>>()\n+                                dirs.into_iter().map(absolutize_on_base).collect::<Vec<_>>()\n                             };\n                             (absolutize(src.include_dirs), absolutize(src.exclude_dirs))\n                         }\n@@ -147,15 +143,15 @@ impl ProjectJson {\n                         env: crate_data.env,\n                         proc_macro_dylib_path: crate_data\n                             .proc_macro_dylib_path\n-                            .map(|it| base.join(it)),\n+                            .map(absolutize_on_base),\n                         is_workspace_member,\n                         include,\n                         exclude,\n                         is_proc_macro: crate_data.is_proc_macro,\n                         repository: crate_data.repository,\n                     }\n                 })\n-                .collect::<Vec<_>>(),\n+                .collect(),\n         }\n     }\n \n@@ -243,7 +239,7 @@ struct CrateSource {\n     exclude_dirs: Vec<PathBuf>,\n }\n \n-fn deserialize_crate_name<'de, D>(de: D) -> Result<CrateName, D::Error>\n+fn deserialize_crate_name<'de, D>(de: D) -> std::result::Result<CrateName, D::Error>\n where\n     D: de::Deserializer<'de>,\n {"}, {"sha": "4adaa6d86ee34a27be53cec01673582b4d81f9b3", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7944a93a1520b96f079bbbcd841d6aec9e4ba5d/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7944a93a1520b96f079bbbcd841d6aec9e4ba5d/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=a7944a93a1520b96f079bbbcd841d6aec9e4ba5d", "patch": "@@ -179,7 +179,6 @@ impl ProjectWorkspace {\n         };\n         let res = match manifest {\n             ProjectManifest::ProjectJson(project_json) => {\n-                let project_json = project_json.canonicalize()?;\n                 let file = fs::read_to_string(&project_json).with_context(|| {\n                     format!(\"Failed to read json file {}\", project_json.display())\n                 })?;"}]}