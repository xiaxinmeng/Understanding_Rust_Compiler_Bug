{"sha": "fa27724a4bb213f896d4003ed129bf7caff7f3a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMjc3MjRhNGJiMjEzZjg5NmQ0MDAzZWQxMjliZjdjYWZmN2YzYTA=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-16T00:11:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-19T02:55:39Z"}, "message": "std: getopts now uses result::t (fixes #1289)", "tree": {"sha": "019c5300f4244fee7998b7baf165a665eaa9cb52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/019c5300f4244fee7998b7baf165a665eaa9cb52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa27724a4bb213f896d4003ed129bf7caff7f3a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa27724a4bb213f896d4003ed129bf7caff7f3a0", "html_url": "https://github.com/rust-lang/rust/commit/fa27724a4bb213f896d4003ed129bf7caff7f3a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa27724a4bb213f896d4003ed129bf7caff7f3a0/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd6b80c9720bb4b0143378a052b568697ce3abe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6b80c9720bb4b0143378a052b568697ce3abe6", "html_url": "https://github.com/rust-lang/rust/commit/bd6b80c9720bb4b0143378a052b568697ce3abe6"}], "stats": {"total": 135, "additions": 72, "deletions": 63}, "files": [{"sha": "5bb7e60a6849ce92b21b0f53db31bb213c63a435", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fa27724a4bb213f896d4003ed129bf7caff7f3a0/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa27724a4bb213f896d4003ed129bf7caff7f3a0/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=fa27724a4bb213f896d4003ed129bf7caff7f3a0", "patch": "@@ -11,6 +11,7 @@ import syntax::print::{pp, pprust};\n import util::{ppaux, filesearch};\n import back::link;\n import core::{option, str, vec, int, result};\n+import result::{ok, err};\n import std::{fs, io, getopts};\n import option::{some, none};\n import getopts::{optopt, optmulti, optflag, optflagopt, opt_present};\n@@ -621,8 +622,8 @@ fn main(args: [str]) {\n     let args = args, binary = vec::shift(args);\n     let match =\n         alt getopts::getopts(args, opts()) {\n-          getopts::success(m) { m }\n-          getopts::failure(f) {\n+          ok(m) { m }\n+          err(f) {\n             early_error(getopts::fail_str(f))\n           }\n         };\n@@ -670,7 +671,7 @@ mod test {\n     fn test_switch_implies_cfg_test() {\n         let match =\n             alt getopts::getopts([\"--test\"], opts()) {\n-              getopts::success(m) { m }\n+              ok(m) { m }\n             };\n         let sessopts = build_session_options(match);\n         let sess = build_session(sessopts);\n@@ -684,7 +685,7 @@ mod test {\n     fn test_switch_implies_cfg_test_unless_cfg_test() {\n         let match =\n             alt getopts::getopts([\"--test\", \"--cfg=test\"], opts()) {\n-              getopts::success(m) { m }\n+              ok(m) { m }\n             };\n         let sessopts = build_session_options(match);\n         let sess = build_session(sessopts);"}, {"sha": "3f7ae912e9fe738ff87873519db9cb7475cf06a5", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa27724a4bb213f896d4003ed129bf7caff7f3a0/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa27724a4bb213f896d4003ed129bf7caff7f3a0/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=fa27724a4bb213f896d4003ed129bf7caff7f3a0", "patch": "@@ -9,6 +9,9 @@ import str;\n import vec;\n import task;\n \n+import core::result;\n+import result::{ok, err};\n+\n import comm::port;\n import comm::chan;\n import comm::send;\n@@ -42,8 +45,8 @@ fn parse_config(args: [str]) -> config {\n     let args_ = vec::tail(args);\n     let match =\n         alt getopts::getopts(args_, opts) {\n-          getopts::success(m) { m }\n-          getopts::failure(f) { fail getopts::fail_str(f) }\n+          ok(m) { m }\n+          err(f) { fail getopts::fail_str(f) }\n         };\n \n     ret {compile_lib_path: getopts::opt_str(match, \"compile-lib-path\"),"}, {"sha": "2443f7664b4e6e61398473cc91c3fb95c05aee6a", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fa27724a4bb213f896d4003ed129bf7caff7f3a0/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa27724a4bb213f896d4003ed129bf7caff7f3a0/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=fa27724a4bb213f896d4003ed129bf7caff7f3a0", "patch": "@@ -26,8 +26,8 @@ name following -o, and accepts both -h and --help as optional flags.\n >     optflag(\"help\")\n >   ];\n >   let match = alt getopts(vec::shift(args), opts) {\n->     success(m) { m }\n->     failure(f) { fail fail_str(f) }\n+>     ok(m) { m }\n+>     err(f) { fail fail_str(f) }\n >   };\n >   if opt_present(match, \"h\") || opt_present(match, \"help\") {\n >     print_usage();\n@@ -45,18 +45,17 @@ name following -o, and accepts both -h and --help as optional flags.\n \n */\n \n+import core::result;\n+import core::result::{err, ok};\n import core::option;\n-import option::{some, none};\n+import core::option::{some, none};\n export opt;\n export reqopt;\n export optopt;\n export optflag;\n export optflagopt;\n export optmulti;\n export getopts;\n-export result;\n-export success;\n-export failure;\n export match;\n export fail_;\n export fail_str;\n@@ -193,13 +192,14 @@ fn fail_str(f: fail_) -> str {\n Type: result\n \n The result of parsing a command line with a set of options\n+(result::t<match, fail_>)\n \n Variants:\n \n-success(match) - Returned from getopts on success\n-failure(fail_) - Returned from getopts on failure\n+ok(match) - Returned from getopts on success\n+err(fail_) - Returned from getopts on failure\n */\n-tag result { success(match); failure(fail_); }\n+type result = result::t<match, fail_>;\n \n /*\n Function: getopts\n@@ -208,9 +208,9 @@ Parse command line arguments according to the provided options\n \n Returns:\n \n-success(match) - On success. Use functions such as <opt_present>\n-                 <opt_str>, etc. to interrogate results.\n-failure(fail_) - On failure. Use <fail_str> to get an error message.\n+ok(match) - On success. Use functions such as <opt_present>\n+            <opt_str>, etc. to interrogate results.\n+err(fail_) - On failure. Use <fail_str> to get an error message.\n */\n fn getopts(args: [str], opts: [opt]) -> result {\n     let n_opts = vec::len::<opt>(opts);\n@@ -258,12 +258,12 @@ fn getopts(args: [str], opts: [opt]) -> result {\n                 let optid;\n                 alt find_opt(opts, nm) {\n                   some(id) { optid = id; }\n-                  none. { ret failure(unrecognized_option(name_str(nm))); }\n+                  none. { ret err(unrecognized_option(name_str(nm))); }\n                 }\n                 alt opts[optid].hasarg {\n                   no. {\n                     if !option::is_none::<str>(i_arg) {\n-                        ret failure(unexpected_argument(name_str(nm)));\n+                        ret err(unexpected_argument(name_str(nm)));\n                     }\n                     vals[optid] += [given];\n                   }\n@@ -279,7 +279,7 @@ fn getopts(args: [str], opts: [opt]) -> result {\n                     if !option::is_none::<str>(i_arg) {\n                         vals[optid] += [val(option::get::<str>(i_arg))];\n                     } else if i + 1u == l {\n-                        ret failure(argument_missing(name_str(nm)));\n+                        ret err(argument_missing(name_str(nm)));\n                     } else { i += 1u; vals[optid] += [val(args[i])]; }\n                   }\n                 }\n@@ -293,17 +293,17 @@ fn getopts(args: [str], opts: [opt]) -> result {\n         let occ = opts[i].occur;\n         if occ == req {\n             if n == 0u {\n-                ret failure(option_missing(name_str(opts[i].name)));\n+                ret err(option_missing(name_str(opts[i].name)));\n             }\n         }\n         if occ != multi {\n             if n > 1u {\n-                ret failure(option_duplicated(name_str(opts[i].name)));\n+                ret err(option_duplicated(name_str(opts[i].name)));\n             }\n         }\n         i += 1u;\n     }\n-    ret success({opts: opts, vals: vals, free: free});\n+    ret ok({opts: opts, vals: vals, free: free});\n }\n \n fn opt_vals(m: match, nm: str) -> [optval] {"}, {"sha": "e04e5ec0b20a47272fd2f9421ee25f9f29ab2786", "filename": "src/libstd/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fa27724a4bb213f896d4003ed129bf7caff7f3a0/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa27724a4bb213f896d4003ed129bf7caff7f3a0/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=fa27724a4bb213f896d4003ed129bf7caff7f3a0", "patch": "@@ -9,6 +9,7 @@ import task::task;\n import core::option;\n import core::either;\n import core::vec;\n+import core::result::{ok, err};\n \n export test_name;\n export test_fn;\n@@ -82,8 +83,8 @@ fn parse_opts(args: [str]) : vec::is_not_empty(args) -> opt_res {\n     let opts = [getopts::optflag(\"ignored\")];\n     let match =\n         alt getopts::getopts(args_, opts) {\n-          getopts::success(m) { m }\n-          getopts::failure(f) { ret either::right(getopts::fail_str(f)) }\n+          ok(m) { m }\n+          err(f) { ret either::right(getopts::fail_str(f)) }\n         };\n \n     let filter ="}, {"sha": "76680d9cd50647ef348c3cebcd1754cc0696f5d4", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa27724a4bb213f896d4003ed129bf7caff7f3a0/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa27724a4bb213f896d4003ed129bf7caff7f3a0/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=fa27724a4bb213f896d4003ed129bf7caff7f3a0", "patch": "@@ -27,6 +27,9 @@ import comm::chan;\n import comm::send;\n import comm::recv;\n \n+import core::result;\n+import result::{ok, err};\n+\n fn fib(n: int) -> int {\n     fn pfib(args: (chan<int>, int)) {\n         let (c, n) = args;\n@@ -58,8 +61,8 @@ fn parse_opts(argv: [str]) -> config {\n \n \n     alt getopts::getopts(opt_args, opts) {\n-      getopts::success(m) { ret {stress: getopts::opt_present(m, \"stress\")} }\n-      getopts::failure(_) { fail; }\n+      ok(m) { ret {stress: getopts::opt_present(m, \"stress\")} }\n+      err(_) { fail; }\n     }\n }\n "}, {"sha": "0cccbb4cb6ec8ecd5307de2f70316a40c40daf03", "filename": "src/test/stdtest/getopts.rs", "status": "modified", "additions": 36, "deletions": 35, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/fa27724a4bb213f896d4003ed129bf7caff7f3a0/src%2Ftest%2Fstdtest%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa27724a4bb213f896d4003ed129bf7caff7f3a0/src%2Ftest%2Fstdtest%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fgetopts.rs?ref=fa27724a4bb213f896d4003ed129bf7caff7f3a0", "patch": "@@ -2,6 +2,7 @@ import core::*;\n \n use std;\n import opt = std::getopts;\n+import result::{err, ok};\n \n tag fail_type {\n     argument_missing;\n@@ -30,7 +31,7 @@ fn test_reqopt_long() {\n     let opts = [opt::reqopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) {\n+      ok(m) {\n         assert (opt::opt_present(m, \"test\"));\n         assert (opt::opt_str(m, \"test\") == \"20\");\n       }\n@@ -44,7 +45,7 @@ fn test_reqopt_long_missing() {\n     let opts = [opt::reqopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, option_missing); }\n+      err(f) { check_fail_type(f, option_missing); }\n       _ { fail; }\n     }\n }\n@@ -55,7 +56,7 @@ fn test_reqopt_long_no_arg() {\n     let opts = [opt::reqopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, argument_missing); }\n+      err(f) { check_fail_type(f, argument_missing); }\n       _ { fail; }\n     }\n }\n@@ -66,7 +67,7 @@ fn test_reqopt_long_multi() {\n     let opts = [opt::reqopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, option_duplicated); }\n+      err(f) { check_fail_type(f, option_duplicated); }\n       _ { fail; }\n     }\n }\n@@ -77,7 +78,7 @@ fn test_reqopt_short() {\n     let opts = [opt::reqopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) {\n+      ok(m) {\n         assert (opt::opt_present(m, \"t\"));\n         assert (opt::opt_str(m, \"t\") == \"20\");\n       }\n@@ -91,7 +92,7 @@ fn test_reqopt_short_missing() {\n     let opts = [opt::reqopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, option_missing); }\n+      err(f) { check_fail_type(f, option_missing); }\n       _ { fail; }\n     }\n }\n@@ -102,7 +103,7 @@ fn test_reqopt_short_no_arg() {\n     let opts = [opt::reqopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, argument_missing); }\n+      err(f) { check_fail_type(f, argument_missing); }\n       _ { fail; }\n     }\n }\n@@ -113,7 +114,7 @@ fn test_reqopt_short_multi() {\n     let opts = [opt::reqopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, option_duplicated); }\n+      err(f) { check_fail_type(f, option_duplicated); }\n       _ { fail; }\n     }\n }\n@@ -126,7 +127,7 @@ fn test_optopt_long() {\n     let opts = [opt::optopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) {\n+      ok(m) {\n         assert (opt::opt_present(m, \"test\"));\n         assert (opt::opt_str(m, \"test\") == \"20\");\n       }\n@@ -140,7 +141,7 @@ fn test_optopt_long_missing() {\n     let opts = [opt::optopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) { assert (!opt::opt_present(m, \"test\")); }\n+      ok(m) { assert (!opt::opt_present(m, \"test\")); }\n       _ { fail; }\n     }\n }\n@@ -151,7 +152,7 @@ fn test_optopt_long_no_arg() {\n     let opts = [opt::optopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, argument_missing); }\n+      err(f) { check_fail_type(f, argument_missing); }\n       _ { fail; }\n     }\n }\n@@ -162,7 +163,7 @@ fn test_optopt_long_multi() {\n     let opts = [opt::optopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, option_duplicated); }\n+      err(f) { check_fail_type(f, option_duplicated); }\n       _ { fail; }\n     }\n }\n@@ -173,7 +174,7 @@ fn test_optopt_short() {\n     let opts = [opt::optopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) {\n+      ok(m) {\n         assert (opt::opt_present(m, \"t\"));\n         assert (opt::opt_str(m, \"t\") == \"20\");\n       }\n@@ -187,7 +188,7 @@ fn test_optopt_short_missing() {\n     let opts = [opt::optopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) { assert (!opt::opt_present(m, \"t\")); }\n+      ok(m) { assert (!opt::opt_present(m, \"t\")); }\n       _ { fail; }\n     }\n }\n@@ -198,7 +199,7 @@ fn test_optopt_short_no_arg() {\n     let opts = [opt::optopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, argument_missing); }\n+      err(f) { check_fail_type(f, argument_missing); }\n       _ { fail; }\n     }\n }\n@@ -209,7 +210,7 @@ fn test_optopt_short_multi() {\n     let opts = [opt::optopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, option_duplicated); }\n+      err(f) { check_fail_type(f, option_duplicated); }\n       _ { fail; }\n     }\n }\n@@ -222,7 +223,7 @@ fn test_optflag_long() {\n     let opts = [opt::optflag(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) { assert (opt::opt_present(m, \"test\")); }\n+      ok(m) { assert (opt::opt_present(m, \"test\")); }\n       _ { fail; }\n     }\n }\n@@ -233,7 +234,7 @@ fn test_optflag_long_missing() {\n     let opts = [opt::optflag(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) { assert (!opt::opt_present(m, \"test\")); }\n+      ok(m) { assert (!opt::opt_present(m, \"test\")); }\n       _ { fail; }\n     }\n }\n@@ -244,7 +245,7 @@ fn test_optflag_long_arg() {\n     let opts = [opt::optflag(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) {\n+      err(f) {\n         log_err opt::fail_str(f);\n         check_fail_type(f, unexpected_argument);\n       }\n@@ -258,7 +259,7 @@ fn test_optflag_long_multi() {\n     let opts = [opt::optflag(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, option_duplicated); }\n+      err(f) { check_fail_type(f, option_duplicated); }\n       _ { fail; }\n     }\n }\n@@ -269,7 +270,7 @@ fn test_optflag_short() {\n     let opts = [opt::optflag(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) { assert (opt::opt_present(m, \"t\")); }\n+      ok(m) { assert (opt::opt_present(m, \"t\")); }\n       _ { fail; }\n     }\n }\n@@ -280,7 +281,7 @@ fn test_optflag_short_missing() {\n     let opts = [opt::optflag(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) { assert (!opt::opt_present(m, \"t\")); }\n+      ok(m) { assert (!opt::opt_present(m, \"t\")); }\n       _ { fail; }\n     }\n }\n@@ -291,7 +292,7 @@ fn test_optflag_short_arg() {\n     let opts = [opt::optflag(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) {\n+      ok(m) {\n         // The next variable after the flag is just a free argument\n \n         assert (m.free[0] == \"20\");\n@@ -306,7 +307,7 @@ fn test_optflag_short_multi() {\n     let opts = [opt::optflag(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, option_duplicated); }\n+      err(f) { check_fail_type(f, option_duplicated); }\n       _ { fail; }\n     }\n }\n@@ -319,7 +320,7 @@ fn test_optmulti_long() {\n     let opts = [opt::optmulti(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) {\n+      ok(m) {\n         assert (opt::opt_present(m, \"test\"));\n         assert (opt::opt_str(m, \"test\") == \"20\");\n       }\n@@ -333,7 +334,7 @@ fn test_optmulti_long_missing() {\n     let opts = [opt::optmulti(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) { assert (!opt::opt_present(m, \"test\")); }\n+      ok(m) { assert (!opt::opt_present(m, \"test\")); }\n       _ { fail; }\n     }\n }\n@@ -344,7 +345,7 @@ fn test_optmulti_long_no_arg() {\n     let opts = [opt::optmulti(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, argument_missing); }\n+      err(f) { check_fail_type(f, argument_missing); }\n       _ { fail; }\n     }\n }\n@@ -355,7 +356,7 @@ fn test_optmulti_long_multi() {\n     let opts = [opt::optmulti(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) {\n+      ok(m) {\n         assert (opt::opt_present(m, \"test\"));\n         assert (opt::opt_str(m, \"test\") == \"20\");\n         assert (opt::opt_strs(m, \"test\")[0] == \"20\");\n@@ -371,7 +372,7 @@ fn test_optmulti_short() {\n     let opts = [opt::optmulti(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) {\n+      ok(m) {\n         assert (opt::opt_present(m, \"t\"));\n         assert (opt::opt_str(m, \"t\") == \"20\");\n       }\n@@ -385,7 +386,7 @@ fn test_optmulti_short_missing() {\n     let opts = [opt::optmulti(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) { assert (!opt::opt_present(m, \"t\")); }\n+      ok(m) { assert (!opt::opt_present(m, \"t\")); }\n       _ { fail; }\n     }\n }\n@@ -396,7 +397,7 @@ fn test_optmulti_short_no_arg() {\n     let opts = [opt::optmulti(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, argument_missing); }\n+      err(f) { check_fail_type(f, argument_missing); }\n       _ { fail; }\n     }\n }\n@@ -407,7 +408,7 @@ fn test_optmulti_short_multi() {\n     let opts = [opt::optmulti(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) {\n+      ok(m) {\n         assert (opt::opt_present(m, \"t\"));\n         assert (opt::opt_str(m, \"t\") == \"20\");\n         assert (opt::opt_strs(m, \"t\")[0] == \"20\");\n@@ -423,7 +424,7 @@ fn test_unrecognized_option_long() {\n     let opts = [opt::optmulti(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, unrecognized_option); }\n+      err(f) { check_fail_type(f, unrecognized_option); }\n       _ { fail; }\n     }\n }\n@@ -434,7 +435,7 @@ fn test_unrecognized_option_short() {\n     let opts = [opt::optmulti(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::failure(f) { check_fail_type(f, unrecognized_option); }\n+      err(f) { check_fail_type(f, unrecognized_option); }\n       _ { fail; }\n     }\n }\n@@ -449,7 +450,7 @@ fn test_combined() {\n          opt::optflag(\"f\"), opt::optmulti(\"m\"), opt::optopt(\"notpresent\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n-      opt::success(m) {\n+      ok(m) {\n         assert (m.free[0] == \"prog\");\n         assert (m.free[1] == \"free1\");\n         assert (opt::opt_str(m, \"s\") == \"20\");"}]}