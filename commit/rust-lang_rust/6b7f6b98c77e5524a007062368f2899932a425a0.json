{"sha": "6b7f6b98c77e5524a007062368f2899932a425a0", "node_id": "C_kwDOAAsO6NoAKDZiN2Y2Yjk4Yzc3ZTU1MjRhMDA3MDYyMzY4ZjI4OTk5MzJhNDI1YTA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-06T13:20:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-06T13:20:09Z"}, "message": "remove no-longer-needed work-arounds from the standard library", "tree": {"sha": "5d5d64b4febd30e33f4171eb609ddbb9dd9a5da6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d5d64b4febd30e33f4171eb609ddbb9dd9a5da6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b7f6b98c77e5524a007062368f2899932a425a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b7f6b98c77e5524a007062368f2899932a425a0", "html_url": "https://github.com/rust-lang/rust/commit/6b7f6b98c77e5524a007062368f2899932a425a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b7f6b98c77e5524a007062368f2899932a425a0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb4bdb00a4e1d881eaadc6254824bb0631950c5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4bdb00a4e1d881eaadc6254824bb0631950c5b", "html_url": "https://github.com/rust-lang/rust/commit/eb4bdb00a4e1d881eaadc6254824bb0631950c5b"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "b5eea08092e1a5542957829ce1338913359a7c26", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b7f6b98c77e5524a007062368f2899932a425a0/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7f6b98c77e5524a007062368f2899932a425a0/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=6b7f6b98c77e5524a007062368f2899932a425a0", "patch": "@@ -730,10 +730,7 @@ pub const fn swap<T>(x: &mut T, y: &mut T) {\n     // understanding `mem::replace`, `Option::take`, etc. - a better overall\n     // solution might be to make `ptr::swap_nonoverlapping` into an intrinsic, which\n     // a backend can choose to implement using the block optimization, or not.\n-    // NOTE(scottmcm) MIRI is disabled here as reading in smaller units is a\n-    // pessimization for it.  Also, if the type contains any unaligned pointers,\n-    // copying those over multiple reads is difficult to support.\n-    #[cfg(not(any(target_arch = \"spirv\", miri)))]\n+    #[cfg(not(any(target_arch = \"spirv\")))]\n     {\n         // For types that are larger multiples of their alignment, the simple way\n         // tends to copy the whole thing to stack rather than doing it one part"}, {"sha": "5c4610472afc4429b544910a80f7330a28947bfd", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6b7f6b98c77e5524a007062368f2899932a425a0/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b7f6b98c77e5524a007062368f2899932a425a0/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=6b7f6b98c77e5524a007062368f2899932a425a0", "patch": "@@ -908,21 +908,15 @@ pub const unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n         );\n     }\n \n-    // NOTE(scottmcm) Miri is disabled here as reading in smaller units is a\n-    // pessimization for it.  Also, if the type contains any unaligned pointers,\n-    // copying those over multiple reads is difficult to support.\n-    #[cfg(not(miri))]\n+    // Split up the slice into small power-of-two-sized chunks that LLVM is able\n+    // to vectorize (unless it's a special type with more-than-pointer alignment,\n+    // because we don't want to pessimize things like slices of SIMD vectors.)\n+    if mem::align_of::<T>() <= mem::size_of::<usize>()\n+        && (!mem::size_of::<T>().is_power_of_two()\n+            || mem::size_of::<T>() > mem::size_of::<usize>() * 2)\n     {\n-        // Split up the slice into small power-of-two-sized chunks that LLVM is able\n-        // to vectorize (unless it's a special type with more-than-pointer alignment,\n-        // because we don't want to pessimize things like slices of SIMD vectors.)\n-        if mem::align_of::<T>() <= mem::size_of::<usize>()\n-            && (!mem::size_of::<T>().is_power_of_two()\n-                || mem::size_of::<T>() > mem::size_of::<usize>() * 2)\n-        {\n-            attempt_swap_as_chunks!(usize);\n-            attempt_swap_as_chunks!(u8);\n-        }\n+        attempt_swap_as_chunks!(usize);\n+        attempt_swap_as_chunks!(u8);\n     }\n \n     // SAFETY: Same preconditions as this function"}]}