{"sha": "872ce479550a3d805babb0ca409dfc3cf6f52309", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MmNlNDc5NTUwYTNkODA1YmFiYjBjYTQwOWRmYzNjZjZmNTIzMDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-12T15:29:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T15:25:28Z"}, "message": "Fallout: tests. As tests frequently elide things, lots of changes\nhere.  Some of this may have been poorly rebased, though I tried to be\ncareful and preserve the spirit of the test.", "tree": {"sha": "a1cf314833d1c99b297d59c30a2f1289f111e57e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1cf314833d1c99b297d59c30a2f1289f111e57e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/872ce479550a3d805babb0ca409dfc3cf6f52309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/872ce479550a3d805babb0ca409dfc3cf6f52309", "html_url": "https://github.com/rust-lang/rust/commit/872ce479550a3d805babb0ca409dfc3cf6f52309", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/872ce479550a3d805babb0ca409dfc3cf6f52309/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef42c2befd9451cd913de60539487a483ae9deac", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef42c2befd9451cd913de60539487a483ae9deac", "html_url": "https://github.com/rust-lang/rust/commit/ef42c2befd9451cd913de60539487a483ae9deac"}], "stats": {"total": 1495, "additions": 915, "deletions": 580}, "files": [{"sha": "5aeb330b78b54023ac388d83d22f5eeff636b319", "filename": "src/libcoretest/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Flibcoretest%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Flibcoretest%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fmem.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -92,7 +92,7 @@ fn test_transmute_copy() {\n \n #[test]\n fn test_transmute() {\n-    trait Foo {}\n+    trait Foo { fn dummy(&self) { } }\n     impl Foo for int {}\n \n     let a = box 100 as Box<Foo>;"}, {"sha": "cc42b288e6638a0f7c36e385dbf25012c8ac791c", "filename": "src/test/auxiliary/coherence-orphan-lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fcoherence-orphan-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fcoherence-orphan-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcoherence-orphan-lib.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub trait TheTrait<T> {\n+pub trait TheTrait<T> : ::std::marker::PhantomFn<T> {\n     fn the_fn(&self);\n }\n "}, {"sha": "0a65174911ec7149b473c4e9216bb35e2c173a27", "filename": "src/test/auxiliary/default_type_params_xc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fdefault_type_params_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fdefault_type_params_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fdefault_type_params_xc.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,4 +12,5 @@ pub struct Heap;\n \n pub struct FakeHeap;\n \n-pub struct FakeVec<T, A = FakeHeap>;\n+pub struct FakeVec<T, A = FakeHeap> { pub f: Option<(T,A)> }\n+"}, {"sha": "ca5c6072cb371b98bd9ea096807f65abbb570944", "filename": "src/test/auxiliary/inner_static.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Finner_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Finner_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finner_static.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub struct A<T>;\n-pub struct B<T>;\n+pub struct A<T> { pub v: T }\n+pub struct B<T> { pub v: T }\n \n pub mod test {\n-    pub struct A<T>;\n+    pub struct A<T> { pub v: T }\n \n     impl<T> A<T> {\n         pub fn foo(&self) -> int {\n@@ -52,9 +52,9 @@ impl<T> B<T> {\n }\n \n pub fn foo() -> int {\n-    let a = A::<()>;\n-    let b = B::<()>;\n-    let c = test::A::<()>;\n+    let a = A { v: () };\n+    let b = B { v: () };\n+    let c = test::A { v: () };\n     return a.foo() + a.bar() +\n            b.foo() + b.bar() +\n            c.foo() + c.bar();"}, {"sha": "a48088609f982ca7565fccde0828912430998f4c", "filename": "src/test/auxiliary/issue-14421.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue-14421.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue-14421.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-14421.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,6 +10,7 @@\n \n #![crate_type=\"lib\"]\n #![deny(warnings)]\n+#![allow(dead_code)]\n \n pub use src::aliases::B;\n pub use src::hidden_core::make;\n@@ -23,9 +24,9 @@ mod src {\n     pub mod hidden_core {\n         use super::aliases::B;\n \n-        pub struct A<T>;\n+        pub struct A<T> { t: T }\n \n-        pub fn make() -> B { A }\n+        pub fn make() -> B { A { t: 1.0 } }\n \n         impl<T> A<T> {\n             pub fn foo(&mut self) { println!(\"called foo\"); }"}, {"sha": "b590160a0c2ab5d8c1c467660a26dbc4818081a8", "filename": "src/test/auxiliary/issue-16643.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue-16643.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue-16643.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-16643.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,7 @@\n \n #![crate_type = \"lib\"]\n \n-pub struct TreeBuilder<H>;\n+pub struct TreeBuilder<H> { pub h: H }\n \n impl<H> TreeBuilder<H> {\n     pub fn process_token(&mut self) {"}, {"sha": "fb55a077005eb8d9662a02f4e24f1b2f67900784", "filename": "src/test/auxiliary/issue-17662.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue-17662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue-17662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-17662.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,7 @@\n #![crate_type = \"lib\"]\n \n pub trait Foo<'a, T> {\n-    fn foo(&self) -> T;\n+    fn foo(&'a self) -> T;\n }\n \n pub fn foo<'a, T>(x: &'a Foo<'a, T>) -> T {"}, {"sha": "96f33f97a696973c891a36bbe0e0a742f5598bf9", "filename": "src/test/auxiliary/issue-2380.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue-2380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2380.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -14,7 +14,10 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-pub trait i<T> { }\n+pub trait i<T>\n+{\n+    fn dummy(&self, t: T) -> T { panic!() }\n+}\n \n pub fn f<T>() -> Box<i<T>+'static> {\n     impl<T> i<T> for () { }"}, {"sha": "89b3b56121a1614961297566eb8088c21a5808ef", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,8 +13,11 @@\n \n #![feature(unsafe_destructor)]\n \n+use std::marker;\n+\n struct arc_destruct<T> {\n-  _data: int,\n+    _data: int,\n+    _marker: marker::PhantomData<T>\n }\n \n #[unsafe_destructor]\n@@ -24,7 +27,8 @@ impl<T: Sync> Drop for arc_destruct<T> {\n \n fn arc_destruct<T: Sync>(data: int) -> arc_destruct<T> {\n     arc_destruct {\n-        _data: data\n+        _data: data,\n+        _marker: marker::PhantomData\n     }\n }\n "}, {"sha": "4ce7e3079e330a0a82f8b445076d55bf51ff4c92", "filename": "src/test/auxiliary/issue_20389.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue_20389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue_20389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_20389.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,4 +10,5 @@\n \n pub trait T {\n     type C;\n+    fn dummy(&self) { }\n }"}, {"sha": "545e15fe1664d657ef941e983f72dd1b6c66b4d9", "filename": "src/test/auxiliary/issue_3907.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue_3907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue_3907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_3907.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub trait Foo {\n+use std::marker::MarkerTrait;\n+\n+pub trait Foo : MarkerTrait {\n     fn bar();\n }\n "}, {"sha": "9006a5d1775f764eb7f569fa7f491b09dd7b27da", "filename": "src/test/auxiliary/issue_8401.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue_8401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue_8401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_8401.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,7 +12,9 @@\n \n use std::mem;\n \n-trait A {}\n+trait A {\n+    fn dummy(&self) { }\n+}\n struct B;\n impl A for B {}\n "}, {"sha": "4f2792aebcd2408639256271ae4254015e744f07", "filename": "src/test/auxiliary/issue_9123.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue_9123.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fissue_9123.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_9123.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,5 +15,6 @@ pub trait X {\n         fn f() { }\n         f();\n     }\n+    fn dummy(&self) { }\n }\n "}, {"sha": "b9cc20b63cc5640258ac6bc70afde33440a6d24a", "filename": "src/test/auxiliary/lang-item-public.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flang-item-public.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,8 +12,12 @@\n #![no_std]\n #![feature(lang_items)]\n \n+#[lang=\"phantom_fn\"]\n+pub trait PhantomFn<A:?Sized,R:?Sized=()> { }\n+impl<A:?Sized, R:?Sized, U:?Sized> PhantomFn<A,R> for U { }\n+\n #[lang=\"sized\"]\n-pub trait Sized {}\n+pub trait Sized : PhantomFn<Self> {}\n \n #[lang=\"panic\"]\n fn panic(_: &(&'static str, &'static str, uint)) -> ! { loop {} }\n@@ -25,6 +29,8 @@ extern fn stack_exhausted() {}\n extern fn eh_personality() {}\n \n #[lang=\"copy\"]\n-pub trait Copy {}\n+pub trait Copy : PhantomFn<Self> {\n+    // Empty.\n+}\n \n "}, {"sha": "fb535eb8336f9b2df90d027c61cef3fb9f731097", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -96,7 +96,7 @@ pub trait Trait {\n impl Trait for MethodTester {}\n \n #[unstable(feature = \"test_feature\")]\n-pub trait UnstableTrait {}\n+pub trait UnstableTrait { fn dummy(&self) { } }\n \n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n #[deprecated(since = \"1.0.0\")]"}, {"sha": "fc1bea5a9fd41128c88b9a1b2506ed398cdb9477", "filename": "src/test/auxiliary/nested_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnested_item.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -25,7 +25,7 @@ impl Foo {\n }\n \n // issue 8134\n-pub struct Parser<T>;\n+pub struct Parser<T>(T);\n impl<T: std::iter::Iterator<Item=char>> Parser<T> {\n     fn in_doctype(&mut self) {\n         static DOCTYPEPattern: [char; 6] = ['O', 'C', 'T', 'Y', 'P', 'E'];"}, {"sha": "cf3e9903b5ad001e2bef688a792cfe8c5e630d07", "filename": "src/test/auxiliary/orphan_check_diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Forphan_check_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Forphan_check_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Forphan_check_diagnostics.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub trait RemoteTrait {}\n+pub trait RemoteTrait { fn dummy(&self) { } }"}, {"sha": "3c8cba13ae73d07296407009850cd94adca716ed", "filename": "src/test/auxiliary/overloaded_autoderef_xc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,8 @@\n use std::ops::Deref;\n \n struct DerefWithHelper<H, T> {\n-    pub helper: H\n+    pub helper: H,\n+    pub value: Option<T>\n }\n \n trait Helper<T> {\n@@ -34,6 +35,6 @@ impl<T, H: Helper<T>> Deref for DerefWithHelper<H, T> {\n \n // Test cross-crate autoderef + vtable.\n pub fn check<T: PartialEq>(x: T, y: T) -> bool {\n-    let d: DerefWithHelper<Option<T>, T> = DerefWithHelper { helper: Some(x) };\n+    let d: DerefWithHelper<Option<T>, T> = DerefWithHelper { helper: Some(x), value: None };\n     d.eq(&y)\n }"}, {"sha": "42691579491bbfb7e7abb069fd995bf62288e8f0", "filename": "src/test/auxiliary/private_trait_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fprivate_trait_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fprivate_trait_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivate_trait_xc.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo {}\n+trait Foo : ::std::marker::MarkerTrait {}"}, {"sha": "04f1062c16f02a572e8f97c9345b2f6b99469983", "filename": "src/test/auxiliary/svh-a-base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-base.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,12 +15,14 @@\n \n #![crate_name = \"a\"]\n \n+use std::marker::MarkerTrait;\n+\n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U {}\n-pub trait V {}\n+pub trait U : MarkerTrait {}\n+pub trait V : MarkerTrait {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "fabd2289e9a44ea61c62f41c56fb5c41a7b2be99", "filename": "src/test/auxiliary/svh-a-change-lit.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-change-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-change-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-lit.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,12 +15,14 @@\n \n #![crate_name = \"a\"]\n \n+use std::marker::MarkerTrait;\n+\n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U {}\n-pub trait V {}\n+pub trait U : MarkerTrait {}\n+pub trait V : MarkerTrait {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "3fdb861bd40c178d430e26c4b51059b55debb0d8", "filename": "src/test/auxiliary/svh-a-change-significant-cfg.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,12 +15,14 @@\n \n #![crate_name = \"a\"]\n \n+use std::marker::MarkerTrait;\n+\n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U {}\n-pub trait V {}\n+pub trait U : MarkerTrait {}\n+pub trait V : MarkerTrait {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "3116d24673d4847bef21ac198e648c5f098a4257", "filename": "src/test/auxiliary/svh-a-change-trait-bound.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-change-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-change-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-trait-bound.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,12 +15,14 @@\n \n #![crate_name = \"a\"]\n \n+use std::marker::MarkerTrait;\n+\n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U {}\n-pub trait V {}\n+pub trait U : MarkerTrait {}\n+pub trait V : MarkerTrait {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "b49a1533628f6f526225f062d21e06987dca295b", "filename": "src/test/auxiliary/svh-a-change-type-arg.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-arg.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,12 +15,14 @@\n \n #![crate_name = \"a\"]\n \n+use std::marker::MarkerTrait;\n+\n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U {}\n-pub trait V {}\n+pub trait U : MarkerTrait {}\n+pub trait V : MarkerTrait {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "6562a93135f39740c5210eaa7824ed37668ffdd5", "filename": "src/test/auxiliary/svh-a-change-type-ret.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-ret.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,12 +15,14 @@\n \n #![crate_name = \"a\"]\n \n+use std::marker::MarkerTrait;\n+\n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U {}\n-pub trait V {}\n+pub trait U : MarkerTrait {}\n+pub trait V : MarkerTrait {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "c7b392c6ee82b07b942cd7188a9fe316b8ad7579", "filename": "src/test/auxiliary/svh-a-change-type-static.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-static.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,12 +15,14 @@\n \n #![crate_name = \"a\"]\n \n+use std::marker::MarkerTrait;\n+\n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U {}\n-pub trait V {}\n+pub trait U : MarkerTrait {}\n+pub trait V : MarkerTrait {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "450f61020260dd49416c27ea402223efd0c20157", "filename": "src/test/auxiliary/svh-a-comment.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-comment.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,12 +15,14 @@\n \n #![crate_name = \"a\"]\n \n+use std::marker::MarkerTrait;\n+\n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U {}\n-pub trait V {}\n+pub trait U : MarkerTrait {}\n+pub trait V : MarkerTrait {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "c000737c854c6a85b1264f8a87c251ac718a9d40", "filename": "src/test/auxiliary/svh-a-doc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-doc.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,12 +15,14 @@\n \n #![crate_name = \"a\"]\n \n+use std::marker::MarkerTrait;\n+\n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U {}\n-pub trait V {}\n+pub trait U : MarkerTrait {}\n+pub trait V : MarkerTrait {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "1e12659dc4b92f15dff148558217b6eb28ba4446", "filename": "src/test/auxiliary/svh-a-macro.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-macro.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,12 +15,14 @@\n \n #![crate_name = \"a\"]\n \n+use std::marker::MarkerTrait;\n+\n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U {}\n-pub trait V {}\n+pub trait U : MarkerTrait {}\n+pub trait V : MarkerTrait {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "04f1062c16f02a572e8f97c9345b2f6b99469983", "filename": "src/test/auxiliary/svh-a-no-change.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-no-change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-no-change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-no-change.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,12 +15,14 @@\n \n #![crate_name = \"a\"]\n \n+use std::marker::MarkerTrait;\n+\n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U {}\n-pub trait V {}\n+pub trait U : MarkerTrait {}\n+pub trait V : MarkerTrait {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "1e82b74f1ef2e5cd6240b735add8776a5a0d025f", "filename": "src/test/auxiliary/svh-a-redundant-cfg.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-redundant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-redundant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-redundant-cfg.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,12 +15,14 @@\n \n #![crate_name = \"a\"]\n \n+use std::marker::MarkerTrait;\n+\n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U {}\n-pub trait V {}\n+pub trait U : MarkerTrait {}\n+pub trait V : MarkerTrait {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "3c3dac9cdab96209dc789d35c42546ffd90ec6ef", "filename": "src/test/auxiliary/svh-a-whitespace.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-whitespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fsvh-a-whitespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-whitespace.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,12 +15,14 @@\n \n #![crate_name = \"a\"]\n \n+use std::marker::MarkerTrait;\n+\n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U {}\n-pub trait V {}\n+pub trait U : MarkerTrait {}\n+pub trait V : MarkerTrait {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "a7c469fccaa5abbcba151be4cb6e579771fd3cae", "filename": "src/test/auxiliary/trait_bounds_on_structs_and_enums_xc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Ftrait_bounds_on_structs_and_enums_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Ftrait_bounds_on_structs_and_enums_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_bounds_on_structs_and_enums_xc.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub trait Trait {}\n+pub trait Trait {\n+    fn dummy(&self) { }\n+}\n \n pub struct Foo<T:Trait> {\n     pub x: T,"}, {"sha": "0982efbdbf47e4d8770a7adc1aa0aa4a78ac5071", "filename": "src/test/auxiliary/trait_impl_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Ftrait_impl_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Ftrait_impl_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_impl_conflict.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub trait Foo {\n+pub trait Foo : ::std::marker::MarkerTrait {\n }\n \n impl Foo for int {"}, {"sha": "56fb40bc0a469af3021f8e4a9346fb0a3161b197", "filename": "src/test/auxiliary/use_from_trait_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fuse_from_trait_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fauxiliary%2Fuse_from_trait_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fuse_from_trait_xc.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,7 @@\n pub use self::sub::{Bar, Baz};\n \n pub trait Trait {\n-    fn foo();\n+    fn foo(&self);\n }\n \n struct Foo;"}, {"sha": "edd1b8255ccdc38e6a4b1f7459443f0f0bda90e9", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -16,8 +16,12 @@\n #![feature(no_std)]\n #![no_std]\n \n+#[lang=\"phantom_fn\"]\n+pub trait PhantomFn<A:?Sized,R:?Sized=()> { }\n+impl<A:?Sized, R:?Sized, U:?Sized> PhantomFn<A,R> for U { }\n+\n #[lang=\"sized\"]\n-pub trait Sized {\n+pub trait Sized : PhantomFn<Self> {\n     // Empty.\n }\n "}, {"sha": "b7a16c68a34e1a43fdbb1548dc903a80a3e740b8", "filename": "src/test/compile-fail/associated-types-coherence-failure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-coherence-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-coherence-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-coherence-failure.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,9 +11,10 @@\n // Test that coherence detects overlap when some of the types in the\n // impls are projections of associated type. Issue #20624.\n \n+use std::marker::PhantomData;\n use std::ops::Deref;\n \n-pub struct Cow<'a, B: ?Sized>;\n+pub struct Cow<'a, B: ?Sized>(PhantomData<(&'a (),B)>);\n \n /// Trait for moving into a `Cow`\n pub trait IntoCow<'a, B: ?Sized> {"}, {"sha": "c48f9972ebc18765fca88e164449f57bb5a9ea11", "filename": "src/test/compile-fail/associated-types-eq-expr-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,7 @@\n \n // Check that an associated type cannot be bound in an expression path.\n \n-trait Foo {\n+trait Foo : ::std::marker::MarkerTrait {\n     type A;\n     fn bar() -> isize;\n }"}, {"sha": "625f4cdb8ef3dbc3af68abee2124f51eefb1a5b2", "filename": "src/test/compile-fail/associated-types-issue-17359.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-17359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-17359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-17359.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,7 @@\n // Test that we do not ICE when an impl is missing an associated type (and that we report\n // a useful error, of course).\n \n-trait Trait {\n+trait Trait : ::std::marker::MarkerTrait {\n     type Type;\n }\n "}, {"sha": "5632f148da67ce2e1d00f4f0738c07406c00f88d", "filename": "src/test/compile-fail/associated-types-multiple-types-one-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-multiple-types-one-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-multiple-types-one-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-multiple-types-one-trait.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo {\n+trait Foo : ::std::marker::MarkerTrait {\n     type X;\n     type Y;\n }"}, {"sha": "2b84c38f80b542b309443d17c13a2f122383de9d", "filename": "src/test/compile-fail/associated-types-no-suitable-supertrait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,7 @@\n // Check that we get an error when you use `<Self as Get>::Value` in\n // the trait definition but `Self` does not, in fact, implement `Get`.\n \n-trait Get {\n+trait Get : ::std::marker::MarkerTrait {\n     type Value;\n }\n "}, {"sha": "b9a62ff4e417afd9d3840bdc836bb69ff8c53cd7", "filename": "src/test/compile-fail/associated-types-path-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,6 +12,8 @@\n \n pub trait Foo {\n     type A;\n+\n+    fn dummy(&self) { }\n }\n \n impl Foo for i32 {"}, {"sha": "8832028f9aba1e87781545bb2426653882439b3c", "filename": "src/test/compile-fail/associated-types-unconstrained.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,7 @@\n \n // Check that an associated type cannot be bound in an expression path.\n \n-trait Foo {\n+trait Foo : ::std::marker::MarkerTrait {\n     type A;\n     fn bar() -> isize;\n }"}, {"sha": "3e02a11c378bd5a2292e8824c149cc4792479098", "filename": "src/test/compile-fail/bad-mid-path-type-params.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,13 +10,6 @@\n \n // ignore-tidy-linelength\n \n-#![feature(no_std)]\n-#![no_std]\n-#![feature(lang_items)]\n-\n-#[lang=\"sized\"]\n-pub trait Sized {}\n-\n struct S<T> {\n     contents: T,\n }"}, {"sha": "1944acbe1f34560115eb28ee004e6424d2e866de", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,7 +12,7 @@\n \n use std::cell::RefCell;\n \n-trait Trait {}\n+trait Trait : ::std::marker::MarkerTrait {}\n \n pub fn main() {\n     let x: Vec<Trait + Sized> = Vec::new();"}, {"sha": "d4decb713498df2e3e35eff101178d59b87af488", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-blanket-implemented.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,6 +10,7 @@\n \n use std::fmt::Show;\n use std::default::Default;\n+use std::marker::MarkerTrait;\n \n // Test that two blanket impls conflict (at least without negative\n // bounds).  After all, some other crate could implement Even or Odd\n@@ -19,9 +20,9 @@ trait MyTrait {\n     fn get(&self) -> usize;\n }\n \n-trait Even { }\n+trait Even : MarkerTrait { }\n \n-trait Odd { }\n+trait Odd : MarkerTrait { }\n \n impl Even for isize { }\n "}, {"sha": "b1ee1762b6e71ab2d9c722de3564acc3da722821", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-blanket-unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -19,9 +19,9 @@ trait MyTrait {\n     fn get(&self) -> usize;\n }\n \n-trait Even { }\n+trait Even : ::std::marker::MarkerTrait { }\n \n-trait Odd { }\n+trait Odd : ::std::marker::MarkerTrait { }\n \n impl<T:Even> MyTrait for T { //~ ERROR E0119\n     fn get(&self) -> usize { 0 }"}, {"sha": "a225f6cf473041387b09124fbe54803d4f65f645", "filename": "src/test/compile-fail/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,18 +10,18 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait MyTrait {}\n+trait MyTrait : ::std::marker::MarkerTrait {}\n \n-struct TestType<T>;\n+struct TestType<T>(::std::marker::PhantomData<T>);\n \n-unsafe impl<T: MyTrait> Send for TestType<T> {}\n+unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n //~^ ERROR conflicting implementations for trait `core::marker::Send`\n //~^^ ERROR conflicting implementations for trait `core::marker::Send`\n \n impl<T: MyTrait> !Send for TestType<T> {}\n //~^ ERROR conflicting implementations for trait `core::marker::Send`\n \n-unsafe impl<T> Send for TestType<T> {}\n+unsafe impl<T:'static> Send for TestType<T> {}\n //~^ ERROR error: conflicting implementations for trait `core::marker::Send`\n \n impl !Send for TestType<i32> {}"}, {"sha": "c97a9950d78d0ba6569dba1c89e4dc29dc7e445e", "filename": "src/test/compile-fail/cross-borrow-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -14,7 +14,7 @@\n #![feature(box_syntax)]\n \n struct Foo;\n-trait Trait {}\n+trait Trait : ::std::marker::MarkerTrait {}\n impl Trait for Foo {}\n \n pub fn main() {"}, {"sha": "d8b3f297a1123cb14372239888d2f75d03001cab", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -14,7 +14,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n \n-trait T {}\n+trait T : ::std::marker::MarkerTrait {}\n impl T for isize {}\n \n fn main() {"}, {"sha": "6d9ba8d44c089cead9ed0e1d687788448abd6994", "filename": "src/test/compile-fail/dst-bad-coerce1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,7 +15,7 @@ struct Fat<T: ?Sized> {\n }\n \n struct Foo;\n-trait Bar {}\n+trait Bar : ::std::marker::MarkerTrait {}\n \n pub fn main() {\n     // With a vec of isize."}, {"sha": "aa687266acb8f701c9bae3461bb8b71c1c63c3e8", "filename": "src/test/compile-fail/dst-bad-coerce2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,7 +15,7 @@ struct Fat<T: ?Sized> {\n }\n \n struct Foo;\n-trait Bar {}\n+trait Bar : ::std::marker::MarkerTrait {}\n impl Bar for Foo {}\n \n pub fn main() {"}, {"sha": "46b89e1122a2c0ddc7ada5caada90a2a87232d75", "filename": "src/test/compile-fail/dst-bad-coerce3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce3.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,7 +15,7 @@ struct Fat<T: ?Sized> {\n }\n \n struct Foo;\n-trait Bar {}\n+trait Bar : ::std::marker::MarkerTrait {}\n impl Bar for Foo {}\n \n fn baz<'a>() {"}, {"sha": "8ec1034bc4d28abda4abda17968fad6296a7f160", "filename": "src/test/compile-fail/dst-bad-coercions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fdst-bad-coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fdst-bad-coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coercions.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,8 +10,10 @@\n \n // Test implicit coercions involving DSTs and raw pointers.\n \n+use std::marker::MarkerTrait;\n+\n struct S;\n-trait T {}\n+trait T : MarkerTrait {}\n impl T for S {}\n \n struct Foo<T: ?Sized> {"}, {"sha": "a1f0dda671e7de9b8b1d9a586d4696a2867f84e7", "filename": "src/test/compile-fail/dst-object-from-unsized-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,7 @@\n \n // Test that we cannot create objects from unsized types.\n \n-trait Foo {}\n+trait Foo : ::std::marker::MarkerTrait {}\n impl Foo for str {}\n \n fn test1<T: ?Sized + Foo>(t: &T) {"}, {"sha": "f47f14d587992f83c2a95790130da77cf6651fdc", "filename": "src/test/compile-fail/exclusive-drop-and-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fexclusive-drop-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fexclusive-drop-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexclusive-drop-and-copy.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -20,7 +20,7 @@ impl Drop for Foo {\n }\n \n #[derive(Copy)] //~ ERROR the trait `Copy` may not be implemented\n-struct Bar<T>;\n+struct Bar<T>(::std::marker::PhantomData<T>);\n \n #[unsafe_destructor]\n impl<T> Drop for Bar<T> {"}, {"sha": "9fea5e609d1f4807812476ea8b2e53c5da09fcdf", "filename": "src/test/compile-fail/generic-impl-less-params-with-defaults.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,10 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Foo<A, B, C = (A, B)>;\n+use std::marker;\n+\n+struct Foo<A, B, C = (A, B)>(\n+    marker::PhantomData<(A,B,C)>);\n \n impl<A, B, C = (A, B)> Foo<A, B, C> {\n-    fn new() -> Foo<A, B, C> {Foo}\n+    fn new() -> Foo<A, B, C> {Foo(marker::PhantomData)}\n }\n \n fn main() {"}, {"sha": "73c19aa012dcf67dd0d39d97f8a748f9cb1a436c", "filename": "src/test/compile-fail/generic-impl-more-params-with-defaults.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,12 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::marker;\n+\n struct Heap;\n \n-struct Vec<T, A = Heap>;\n+struct Vec<T, A = Heap>(\n+    marker::PhantomData<(T,A)>);\n \n impl<T, A = Heap> Vec<T, A> {\n-    fn new() -> Vec<T, A> {Vec}\n+    fn new() -> Vec<T, A> {Vec(marker::PhantomData)}\n }\n \n fn main() {"}, {"sha": "9b9f09f47775741bc19a7cd3855678833983c8b6", "filename": "src/test/compile-fail/generic-lifetime-trait-impl.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fgeneric-lifetime-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fgeneric-lifetime-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-lifetime-trait-impl.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -16,9 +16,12 @@\n //\n // Regression test for issue #16218.\n \n-trait Bar<'a> {}\n+trait Bar<'a> {\n+    fn dummy(&'a self);\n+}\n \n trait Foo<'a> {\n+    fn dummy(&'a self) { }\n     fn bar<'b, T: Bar<'b>>(self) -> &'b str;\n }\n "}, {"sha": "37737fda4749e5004ce1e666560e0da343143158", "filename": "src/test/compile-fail/generic-type-less-params-with-defaults.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::marker;\n+\n struct Heap;\n \n-struct Vec<T, A = Heap>;\n+struct Vec<T, A = Heap>(\n+    marker::PhantomData<(T,A)>);\n \n fn main() {\n     let _: Vec; //~ ERROR wrong number of type arguments: expected at least 1, found 0"}, {"sha": "ad7e4f190c5b9df7fe358c88f9b51461e8024479", "filename": "src/test/compile-fail/generic-type-more-params-with-defaults.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::marker;\n+\n struct Heap;\n \n-struct Vec<T, A = Heap>;\n+struct Vec<T, A = Heap>(\n+    marker::PhantomData<(T,A)>);\n \n fn main() {\n     let _: Vec<isize, Heap, bool>;"}, {"sha": "a452cd35f943fc4484b588d121e2ca9cb5538f29", "filename": "src/test/compile-fail/generic-type-params-name-repr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::marker;\n+\n struct A;\n struct B;\n struct C;\n-struct Foo<T = A, U = B, V = C>;\n+struct Foo<T = A, U = B, V = C>(marker::PhantomData<(T,U,V)>);\n \n-struct Hash<T>;\n-struct HashMap<K, V, H = Hash<K>>;\n+struct Hash<T>(marker::PhantomData<T>);\n+struct HashMap<K, V, H = Hash<K>>(marker::PhantomData<(K,V,H)>);\n \n fn main() {\n     // Ensure that the printed type doesn't include the default type params..."}, {"sha": "4ff574e939df649794a2b31bdd4f49a374ed3c05", "filename": "src/test/compile-fail/issue-11515.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-struct Test<'s> {\n+struct Test {\n     func: Box<FnMut()+'static>\n }\n "}, {"sha": "dc697e4784f854e1cc113e75d91ae1d3362bb818", "filename": "src/test/compile-fail/issue-13853-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-13853-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-13853-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853-2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait FromStructReader<'a> { }\n+use std::marker::PhantomFn;\n+\n+trait FromStructReader<'a> : PhantomFn<(Self,&'a ())> { }\n trait ResponseHook {\n      fn get<'a, T: FromStructReader<'a>>(&'a self);\n }"}, {"sha": "7ca158c3e32045c31cbe5cb70ebaf94e1709845d", "filename": "src/test/compile-fail/issue-13853-3.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-13853-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-13853-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853-3.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,6 +10,8 @@\n \n #![crate_type = \"lib\"]\n \n+use std::marker::PhantomData;\n+\n enum NodeContents<'a> {\n     Children(Vec<Node<'a>>),\n }\n@@ -22,11 +24,12 @@ impl<'a> Drop for NodeContents<'a> {\n \n struct Node<'a> {\n     contents: NodeContents<'a>,\n+    marker: PhantomData<&'a ()>,\n }\n \n impl<'a> Node<'a> {\n     fn noName(contents: NodeContents<'a>) -> Node<'a> {\n-        Node{  contents: contents,}\n+        Node { contents: contents, marker: PhantomData }\n     }\n }\n "}, {"sha": "cd3f337c4ab658e2194dc2ab8686eaaac2105eb7", "filename": "src/test/compile-fail/issue-13853.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-13853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-13853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Node {\n+use std::marker::MarkerTrait;\n+\n+trait Node : MarkerTrait {\n     fn zomg();\n }\n "}, {"sha": "3a5df9e805bdb7e3c066ea9123f96fb55afca95f", "filename": "src/test/compile-fail/issue-14285.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-14285.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-14285.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14285.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo {}\n+trait Foo {\n+    fn dummy(&self) { }\n+}\n \n struct A;\n "}, {"sha": "0b846651acf46dbf0e51056e8d31742859ddeb4c", "filename": "src/test/compile-fail/issue-14853.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n use std::fmt::Debug;\n+use std::marker::MarkerTrait;\n \n-trait Str {}\n+trait Str : MarkerTrait {}\n \n trait Something {\n     fn yay<T: Debug>(_: Option<Self>, thing: &[T]);"}, {"sha": "a213234b89b0ff247c73f9ac27cf1fc0dfce01d3", "filename": "src/test/compile-fail/issue-16747.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait ListItem<'a> {\n+use std::marker::MarkerTrait;\n+\n+trait ListItem<'a> : MarkerTrait {\n     fn list_name() -> &'a str;\n }\n "}, {"sha": "22aaa796ad0f4a0d62186527181140e6d98c7f60", "filename": "src/test/compile-fail/issue-17431-4.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-17431-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-17431-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-4.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Foo<T> { foo: Option<Option<Foo<T>>> }\n+use std::marker;\n+\n+struct Foo<T> { foo: Option<Option<Foo<T>>>, marker: marker::PhantomData<T> }\n //~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n \n impl<T> Foo<T> { fn bar(&self) {} }"}, {"sha": "cc9cc2e3c035c7ae6e4adb14e7ad9be7bb08414d", "filename": "src/test/compile-fail/issue-17431-5.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-17431-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-17431-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-5.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::marker;\n+\n struct Foo { foo: Bar<Foo> }\n-struct Bar<T> { x: Bar<Foo> }\n+struct Bar<T> { x: Bar<Foo> , marker: marker::PhantomData<T> }\n //~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n \n impl Foo { fn foo(&self) {} }"}, {"sha": "5781cb74117438b628b074ca5a8a5a428733957b", "filename": "src/test/compile-fail/issue-17551.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,9 +10,11 @@\n \n #![feature(unboxed_closures)]\n \n-struct B<T>;\n+use std::marker;\n+\n+struct B<T>(marker::PhantomData<T>);\n \n fn main() {\n-    let foo = B; //~ ERROR: unable to infer enough type information\n+    let foo = B(marker::PhantomData); //~ ERROR unable to infer enough type information\n     let closure = || foo;\n }"}, {"sha": "bdb5af0b8248966a7a325a2078725277c2512abe", "filename": "src/test/compile-fail/issue-18107.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::marker::MarkerTrait;\n \n-\n-pub trait AbstractRenderer {}\n+pub trait AbstractRenderer : MarkerTrait {}\n \n fn _create_render(_: &()) ->\n     AbstractRenderer"}, {"sha": "e81a576fa63d50d9267acf4e1eb82d70ba183fd0", "filename": "src/test/compile-fail/issue-18611.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::marker::MarkerTrait;\n+\n fn add_state(op: <isize as HasState>::State) {\n //~^ ERROR the trait `HasState` is not implemented for the type `isize`\n }\n \n-trait HasState {\n+trait HasState : MarkerTrait {\n     type State;\n }\n "}, {"sha": "1bbbdf79d28b7ad3304174e52ca0b92c13afade0", "filename": "src/test/compile-fail/issue-18783.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -26,6 +26,7 @@ fn ufcs() {\n \n     Push::push(&c, box || y = 0);\n     Push::push(&c, box || y = 0);\n+//~^ ERROR cannot borrow `y` as mutable more than once at a time\n }\n \n trait Push<'c> {"}, {"sha": "951d78410b814602391a7e0376bc1c20e83388c4", "filename": "src/test/compile-fail/issue-18819.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo {\n+use std::marker::MarkerTrait;\n+\n+trait Foo : MarkerTrait {\n     type Item;\n }\n "}, {"sha": "77aba7335bdf996cc9165263e73c13d2073254cf", "filename": "src/test/compile-fail/issue-19660.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-19660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-19660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19660.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,8 +13,12 @@\n #![feature(lang_items, start, no_std)]\n #![no_std]\n \n+#[lang=\"phantom_fn\"]\n+trait PhantomFn<A:?Sized,R:?Sized=()> { }\n+impl<A:?Sized, R:?Sized, U:?Sized> PhantomFn<A,R> for U { }\n+\n #[lang = \"sized\"]\n-trait Sized {}\n+trait Sized : PhantomFn<Self> {}\n \n #[start]\n fn main(_: int, _: *const *const u8) -> int {"}, {"sha": "aed395d17ea9ce803da2803395b76ec21549c098", "filename": "src/test/compile-fail/issue-2063.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,10 +12,11 @@\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed.\n \n+use std::marker::MarkerTrait;\n \n struct t(Box<t>); //~ ERROR this type cannot be instantiated\n \n-trait to_str_2 {\n+trait to_str_2 : MarkerTrait {\n     fn my_to_string() -> String;\n }\n "}, {"sha": "5b623ac377b21260948f9ddbbb34a95dab1998f5", "filename": "src/test/compile-fail/issue-20831-debruijn.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,10 +13,11 @@\n // below. Note that changing to a named lifetime made the problem go\n // away.\n \n-use std::ops::{Shl, Shr};\n use std::cell::RefCell;\n+use std::marker::MarkerTrait;\n+use std::ops::{Shl, Shr};\n \n-pub trait Subscriber {\n+pub trait Subscriber : MarkerTrait {\n     type Input;\n }\n "}, {"sha": "24cc0099b89a522a1b7ae2441dabc6663ba3ce1d", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,15 +12,15 @@\n // than the trait method it's implementing\n \n trait A {\n-  fn b<C,D>(x: C) -> C;\n+  fn b<C,D>(&self, x: C) -> C;\n }\n \n struct E {\n  f: isize\n }\n \n impl A for E {\n-    fn b<F: Sync, G>(_x: F) -> F { panic!() }\n+    fn b<F: Sync, G>(&self, _x: F) -> F { panic!() }\n     //~^ ERROR `F : core::marker::Sync` appears on the impl method\n }\n "}, {"sha": "af6cee1f10749f4aeb366fdfb7f6f6a04fedaed4", "filename": "src/test/compile-fail/issue-3008-3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-3008-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-3008-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3008-3.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::marker;\n+\n enum E1 { V1(E2<E1>), }\n-enum E2<T> { V2(E2<E1>), }\n+enum E2<T> { V2(E2<E1>, marker::PhantomData<T>), }\n //~^ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n \n impl E1 { fn foo(&self) {} }"}, {"sha": "f384dba7c9e3d69d2738df91b8bd5809713edcf7", "filename": "src/test/compile-fail/issue-4972.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,9 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n \n-trait MyTrait { }\n+trait MyTrait {\n+    fn dummy(&self) {}\n+}\n \n pub enum TraitWrapper {\n     A(Box<MyTrait+'static>),"}, {"sha": "d316b44794ad6e38c1a6749aad984e84060b8ace", "filename": "src/test/compile-fail/issue-5035-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait I {}\n+use std::marker::MarkerTrait;\n+\n+trait I : MarkerTrait {}\n type K = I+'static;\n \n fn foo(_x: K) {} //~ ERROR: the trait `core::marker::Sized` is not implemented"}, {"sha": "eccbc7896605e13106a72aaa467c9539254dca5f", "filename": "src/test/compile-fail/issue-5543.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,9 @@\n \n #![feature(box_syntax)]\n \n-trait Foo {}\n+use std::marker::MarkerTrait;\n+\n+trait Foo : MarkerTrait {}\n impl Foo for u8 {}\n \n fn main() {"}, {"sha": "b0db990619535534dc4bf8b7c5baebef9bab6203", "filename": "src/test/compile-fail/issue-5883.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait A {}\n+use std::marker::MarkerTrait;\n+\n+trait A : MarkerTrait {}\n \n struct Struct {\n     r: A+'static\n@@ -20,6 +22,6 @@ fn new_struct(r: A+'static)\n     Struct { r: r }\n }\n \n-trait Curve {}\n+trait Curve : MarkerTrait {}\n enum E {X(Curve+'static)}\n fn main() {}"}, {"sha": "0bf9a3c2d4867e365bd57b9d560383f10c6d5406", "filename": "src/test/compile-fail/issue-6458.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub struct TypeWithState<State>;\n+use std::marker;\n+\n+pub struct TypeWithState<State>(marker::PhantomData<State>);\n pub struct MyState;\n \n pub fn foo<State>(_: TypeWithState<State>) {}\n \n pub fn bar() {\n-   foo(TypeWithState);  //~ ERROR type annotations required\n+   foo(TypeWithState(marker::PhantomData));  //~ ERROR type annotations required\n }\n \n fn main() {"}, {"sha": "7d65870e2dbcabc5a4bcce51457fc058faca64a6", "filename": "src/test/compile-fail/issue-7575.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,12 +10,14 @@\n \n // Test the mechanism for warning about possible missing `self` declarations.\n \n+use std::marker::MarkerTrait;\n+\n trait CtxtFn {\n     fn f8(self, usize) -> usize;\n     fn f9(usize) -> usize; //~ NOTE candidate\n }\n \n-trait OtherTrait {\n+trait OtherTrait : MarkerTrait {\n     fn f9(usize) -> usize; //~ NOTE candidate\n }\n \n@@ -24,7 +26,7 @@ trait OtherTrait {\n // declaration to match against, so we wind up prisizeing it as a\n // candidate. This seems not unreasonable -- perhaps the user meant to\n // implement it, after all.\n-trait UnusedTrait {\n+trait UnusedTrait : MarkerTrait {\n     fn f9(usize) -> usize; //~ NOTE candidate\n }\n \n@@ -52,7 +54,7 @@ impl Myisize {\n     }\n }\n \n-trait ManyImplTrait {\n+trait ManyImplTrait : MarkerTrait {\n     fn is_str() -> bool { //~ NOTE candidate\n         false\n     }"}, {"sha": "72da6dcaa6c45a22e76a62a97282c958d6273838", "filename": "src/test/compile-fail/issue-8727.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-8727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fissue-8727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8727.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,16 +13,12 @@\n // Verify the compiler fails with an error on infinite function\n // recursions.\n \n-struct Data(Box<Option<Data>>);\n-\n-fn generic<T>( _ : Vec<(Data,T)> ) {\n-    let rec : Vec<(Data,(bool,T))> = Vec::new();\n-    generic( rec );\n+fn generic<T>() {\n+    generic::<Option<T>>();\n }\n \n \n fn main () {\n     // Use generic<T> at least once to trigger instantiation.\n-    let input : Vec<(Data,())> = Vec::new();\n-    generic(input);\n+    generic::<i32>();\n }"}, {"sha": "74e372e41eb0a1100821ef7fcaa9667a66932971", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,12 +10,12 @@\n \n // Test which of the builtin types are considered POD.\n \n-\n+use std::marker::MarkerTrait;\n use std::rc::Rc;\n \n fn assert_copy<T:Copy>() { }\n \n-trait Dummy { }\n+trait Dummy : MarkerTrait { }\n \n #[derive(Copy)]\n struct MyStruct {"}, {"sha": "b575144f637f1e73629df653cb0ae1ea8a3974c2", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,9 @@\n \n #![feature(box_syntax)]\n \n-trait Foo {\n+use std::marker::MarkerTrait;\n+\n+trait Foo : MarkerTrait {\n }\n \n impl<T:Copy> Foo for T {"}, {"sha": "dffc8fa2abd70d95def12e4df2eb40fdf247cea3", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,40 +13,44 @@\n \n #![feature(box_syntax)]\n \n-struct S<T>;\n+use std::marker;\n \n-trait Gettable<T> {}\n+struct S<T>(marker::PhantomData<T>);\n+\n+trait Gettable<T> {\n+    fn get(&self) -> T { panic!() }\n+}\n \n impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n \n fn f<T>(val: T) {\n-    let t: S<T> = S;\n+    let t: S<T> = S(marker::PhantomData);\n     let a = &t as &Gettable<T>;\n     //~^ ERROR the trait `core::marker::Send` is not implemented\n     //~^^ ERROR the trait `core::marker::Copy` is not implemented\n }\n \n fn g<T>(val: T) {\n-    let t: S<T> = S;\n+    let t: S<T> = S(marker::PhantomData);\n     let a: &Gettable<T> = &t;\n     //~^ ERROR the trait `core::marker::Send` is not implemented\n     //~^^ ERROR the trait `core::marker::Copy` is not implemented\n }\n \n fn foo<'a>() {\n-    let t: S<&'a isize> = S;\n+    let t: S<&'a isize> = S(marker::PhantomData);\n     let a = &t as &Gettable<&'a isize>;\n-    //~^ ERROR the type `&'a isize` does not fulfill the required lifetime\n+    //~^ ERROR cannot infer\n }\n \n fn foo2<'a>() {\n-    let t: Box<S<String>> = box S;\n+    let t: Box<S<String>> = box S(marker::PhantomData);\n     let a = t as Box<Gettable<String>>;\n     //~^ ERROR the trait `core::marker::Copy` is not implemented\n }\n \n fn foo3<'a>() {\n-    let t: Box<S<String>> = box S;\n+    let t: Box<S<String>> = box S(marker::PhantomData);\n     let a: Box<Gettable<String>> = t;\n     //~^ ERROR the trait `core::marker::Copy` is not implemented\n }"}, {"sha": "0c68401bb2b955222bbd712a92ee02f8603ae50e", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,8 +12,10 @@\n // in this file all test the \"kind\" violates detected during kindck.\n // See all `regions-bounded-by-send.rs`\n \n+use std::marker::MarkerTrait;\n+\n fn assert_send<T:Send>() { }\n-trait Dummy { }\n+trait Dummy : MarkerTrait { }\n trait Message : Send { }\n \n // careful with object types, who knows what they close over..."}, {"sha": "f86eac8b16bd2bcfdb158fbb58315b6dd1d4c2d8", "filename": "src/test/compile-fail/kindck-send-object1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,8 +12,10 @@\n // is broken into two parts because some errors occur in distinct\n // phases in the compiler. See kindck-send-object2.rs as well!\n \n+use std::marker::MarkerTrait;\n+\n fn assert_send<T:Send+'static>() { }\n-trait Dummy { }\n+trait Dummy : MarkerTrait { }\n \n // careful with object types, who knows what they close over...\n fn test51<'a>() {"}, {"sha": "08516e67318ce2b5ff0e31efd4a9ef16a0eb8445", "filename": "src/test/compile-fail/kindck-send-object2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,8 +10,10 @@\n \n // Continue kindck-send-object1.rs.\n \n+use std::marker::MarkerTrait;\n+\n fn assert_send<T:Send>() { }\n-trait Dummy { }\n+trait Dummy : MarkerTrait { }\n \n fn test50() {\n     assert_send::<&'static Dummy>(); //~ ERROR the trait `core::marker::Sync` is not implemented"}, {"sha": "66d8927ee51b7096b6cfa3826d1b6202dfe6b723", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param-3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-3.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,9 @@\n \n // ignore-tidy-linelength\n \n-struct Bar<'x, 'y, 'z> { bar: &'y i32, baz: i32 }\n+use std::marker::PhantomData;\n+\n+struct Bar<'x, 'y, 'z> { bar: &'y i32, baz: i32, marker: PhantomData<(&'x(),&'y(),&'z())> }\n fn bar1<'a>(x: &Bar) -> (&'a i32, &'a i32, &'a i32) {\n //~^ HELP: consider using an explicit lifetime parameter as shown: fn bar1<'b, 'c, 'a>(x: &'a Bar<'b, 'a, 'c>) -> (&'a i32, &'a i32, &'a i32)\n     (x.bar, &x.baz, &x.baz)"}, {"sha": "a85776a938b44f189ab62db91ba6c9980175899d", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,9 @@\n \n // ignore-tidy-linelength\n \n-struct Foo<'x> { bar: isize }\n+use std::marker::PhantomData;\n+\n+struct Foo<'x> { bar: isize, marker: PhantomData<&'x ()> }\n fn foo1<'a>(x: &Foo) -> &'a isize {\n //~^ HELP: consider using an explicit lifetime parameter as shown: fn foo1<'a>(x: &'a Foo) -> &'a isize\n     &x.bar //~ ERROR: cannot infer"}, {"sha": "73a58741bbbbc42ddbcf7efa384d9d578f86fed4", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -47,20 +47,26 @@ fn foo3() {}\n /// dox\n pub trait A {\n     /// dox\n-    fn foo();\n+    fn foo(&self);\n     /// dox\n-    fn foo_with_impl() {}\n+    fn foo_with_impl(&self) {}\n }\n+\n #[allow(missing_docs)]\n trait B {\n-    fn foo();\n-    fn foo_with_impl() {}\n+    fn foo(&self);\n+    fn foo_with_impl(&self) {}\n }\n+\n pub trait C { //~ ERROR: missing documentation\n-    fn foo(); //~ ERROR: missing documentation\n-    fn foo_with_impl() {} //~ ERROR: missing documentation\n+    fn foo(&self); //~ ERROR: missing documentation\n+    fn foo_with_impl(&self) {} //~ ERROR: missing documentation\n+}\n+\n+#[allow(missing_docs)]\n+pub trait D {\n+    fn dummy(&self) { }\n }\n-#[allow(missing_docs)] pub trait D {}\n \n impl Foo {\n     pub fn foo() {}"}, {"sha": "9f58d5791cb0bcbb07e14ad3ad0a2c1c93cc87e8", "filename": "src/test/compile-fail/lint-non-camel-case-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -30,6 +30,7 @@ enum Foo5 {\n }\n \n trait foo6 { //~ ERROR trait `foo6` should have a camel case name such as `Foo6`\n+    fn dummy(&self) { }\n }\n \n fn f<ty>(_: ty) {} //~ ERROR type parameter `ty` should have a camel case name such as `Ty`"}, {"sha": "88f2cbdea6d7bf81332f15efb3caf5e1dc4e6d47", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -341,7 +341,9 @@ mod this_crate {\n \n     #[unstable(feature = \"test_feature\")]\n     #[deprecated(since = \"1.0.0\")]\n-    pub trait DeprecatedTrait {}\n+    pub trait DeprecatedTrait {\n+        fn dummy(&self) { }\n+    }\n \n     struct S;\n "}, {"sha": "918b4ee209ca7ac6106a3fcd18d3b7d17e7185ea", "filename": "src/test/compile-fail/lint-visible-private-types.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,8 +12,10 @@\n #![allow(dead_code)]\n #![crate_type=\"lib\"]\n \n-struct Private<T>;\n-pub struct Public<T>;\n+use std::marker;\n+\n+struct Private<T>(marker::PhantomData<T>);\n+pub struct Public<T>(marker::PhantomData<T>);\n \n impl Private<Public<isize>> {\n     pub fn a(&self) -> Private<isize> { panic!() }\n@@ -103,7 +105,7 @@ impl PrivTrait for (Private<isize>,) {\n     fn bar(&self) -> Private<isize> { panic!() }\n }\n \n-pub trait ParamTrait<T> {\n+pub trait ParamTrait<T> : marker::MarkerTrait {\n     fn foo() -> T;\n }\n "}, {"sha": "03d8d62e0b4d5c24aae817a0b9691dfb62b22de1", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,14 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::marker;\n+\n fn send<T:Send + std::fmt::Debug>(ch: _chan<T>, data: T) {\n     println!(\"{:?}\", ch);\n     println!(\"{:?}\", data);\n     panic!();\n }\n \n #[derive(Debug)]\n-struct _chan<T>(isize);\n+struct _chan<T>(isize, marker::PhantomData<T>);\n \n // Tests that \"log(debug, message);\" is flagged as using\n // message after the send deinitializes it"}, {"sha": "6e8719eeaceda58e6ffce825b5805468cdc8f542", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -14,7 +14,10 @@ extern crate collections;\n \n use std::collections::HashMap;\n \n-trait Map<K, V> {}\n+trait Map<K, V>\n+{\n+    fn get(&self, k: K) -> V { panic!() }\n+}\n \n impl<K, V> Map<K, V> for HashMap<K, V> {}\n "}, {"sha": "cb5da4bb547725789cf8b45a56bf5b3b1e63093e", "filename": "src/test/compile-fail/method-ambig-one-trait-coerce.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ef42c2befd9451cd913de60539487a483ae9deac/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef42c2befd9451cd913de60539487a483ae9deac/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-coerce.rs?ref=ef42c2befd9451cd913de60539487a483ae9deac", "patch": "@@ -1,50 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that when we pick a trait based on coercion, versus subtyping,\n-// we consider all possible coercions equivalent and don't try to pick\n-// a best one.\n-\n-trait Object { }\n-\n-trait foo {\n-    fn foo(self) -> isize;\n-}\n-\n-impl foo for Box<Object+'static> {\n-    fn foo(self) -> isize {1}\n-}\n-\n-impl foo for Box<Object+Send> {\n-    fn foo(self) -> isize {2}\n-}\n-\n-fn test1(x: Box<Object+Send+Sync>) {\n-    // FIXME(#18737) -- we ought to consider this to be ambiguous,\n-    // since we could coerce to either impl. However, what actually\n-    // happens is that we consider both impls applicable because of\n-    // incorrect subtyping relation. We then decide to call this a\n-    // call to the `foo` trait, leading to the following error\n-    // message.\n-\n-    x.foo(); //~ ERROR `foo` is not implemented\n-}\n-\n-fn test2(x: Box<Object+Send>) {\n-    // Not ambiguous because it is a precise match:\n-    x.foo();\n-}\n-\n-fn test3(x: Box<Object+'static>) {\n-    // Not ambiguous because it is a precise match:\n-    x.foo();\n-}\n-\n-fn main() { }"}, {"sha": "607ab13d122015d6f8ff42e92c56a5a3d5ed8062", "filename": "src/test/compile-fail/object-does-not-impl-trait.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,8 +11,9 @@\n // Test that an object type `Box<Foo>` is not considered to implement the\n // trait `Foo`. Issue #5087.\n \n+use std::marker::MarkerTrait;\n \n-trait Foo {}\n+trait Foo : MarkerTrait {}\n fn take_foo<F:Foo>(f: F) {}\n fn take_object(f: Box<Foo>) { take_foo(f); }\n //~^ ERROR the trait `Foo` is not implemented"}, {"sha": "23ddea4499a728c51b1fa08bb416cb6a0de71b2c", "filename": "src/test/compile-fail/object-lifetime-default-mybox.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-mybox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-mybox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-mybox.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -37,7 +37,6 @@ fn load1<'a,'b>(a: &'a MyBox<SomeTrait>,\n     a\n       //~^ ERROR cannot infer\n       //~| ERROR mismatched types\n-      //~| ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "aae829ec7b5636c124b55bd953b59f78cbcff1fe", "filename": "src/test/compile-fail/object-safety-no-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fobject-safety-no-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fobject-safety-no-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-no-static.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,7 @@\n // Check that we correctly prevent users from making trait objects\n // from traits with static methods.\n \n-trait Foo {\n+trait Foo : ::std::marker::MarkerTrait {\n     fn foo();\n }\n "}, {"sha": "7538b1c85e533fe610462dbf172433b8ef90442d", "filename": "src/test/compile-fail/on-unimplemented-bad-anno.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fon-unimplemented-bad-anno.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fon-unimplemented-bad-anno.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented-bad-anno.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,8 +13,12 @@\n \n #![allow(unused)]\n \n+use std::marker;\n+\n #[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}` `{Baz}` `{Quux}`\"]\n-trait Foo<Bar, Baz, Quux>{}\n+trait Foo<Bar, Baz, Quux>\n+    : marker::PhantomFn<(Self,Bar,Baz,Quux)>\n+{}\n \n #[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be built from an iterator over elements of type `{A}`\"]\n trait MyFromIterator<A> {\n@@ -23,15 +27,21 @@ trait MyFromIterator<A> {\n }\n \n #[rustc_on_unimplemented] //~ ERROR this attribute must have a value\n-trait BadAnnotation1 {}\n+trait BadAnnotation1\n+    : marker::MarkerTrait\n+{}\n \n #[rustc_on_unimplemented = \"Unimplemented trait error on `{Self}` with params `<{A},{B},{C}>`\"]\n //~^ ERROR there is no type parameter C on trait BadAnnotation2\n-trait BadAnnotation2<A,B> {}\n+trait BadAnnotation2<A,B>\n+    : marker::PhantomFn<(Self,A,B)>\n+{}\n \n #[rustc_on_unimplemented = \"Unimplemented trait error on `{Self}` with params `<{A},{B},{}>`\"]\n //~^ only named substitution parameters are allowed\n-trait BadAnnotation3<A,B> {}\n+trait BadAnnotation3<A,B>\n+    : marker::PhantomFn<(Self,A,B)>\n+{}\n \n pub fn main() {\n }"}, {"sha": "2447d0864226aee75dd0decae2bf692b5032104e", "filename": "src/test/compile-fail/on-unimplemented.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fon-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fon-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,8 +11,12 @@\n \n #![feature(on_unimplemented)]\n \n+use std::marker;\n+\n #[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}` `{Baz}` `{Quux}`\"]\n-trait Foo<Bar, Baz, Quux>{}\n+trait Foo<Bar, Baz, Quux>\n+    : marker::PhantomFn<(Self,Bar,Baz,Quux)>\n+{}\n \n fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {\n "}, {"sha": "8201565c3318dce282c41bbb57dcc458f34836b9", "filename": "src/test/compile-fail/orphan-check-diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Forphan-check-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Forphan-check-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Forphan-check-diagnostics.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,7 +15,7 @@ extern crate orphan_check_diagnostics;\n \n use orphan_check_diagnostics::RemoteTrait;\n \n-trait LocalTrait {}\n+trait LocalTrait { fn dummy(&self) { } }\n \n impl<T> RemoteTrait for T where T: LocalTrait {}\n //~^ ERROR type parameter `T` must be used as the type parameter for some local type"}, {"sha": "43d112b8aa0043aee7937ee05d0ecebc23d185e3", "filename": "src/test/compile-fail/priv-in-bad-locations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fpriv-in-bad-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fpriv-in-bad-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpriv-in-bad-locations.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -14,15 +14,15 @@ pub extern {\n }\n \n trait A {\n-    fn foo() {}\n+    fn foo(&self) {}\n }\n \n struct B;\n \n pub impl B {} //~ ERROR: unnecessary visibility\n \n pub impl A for B { //~ ERROR: unnecessary visibility\n-    pub fn foo() {} //~ ERROR: unnecessary visibility\n+    pub fn foo(&self) {} //~ ERROR: unnecessary visibility\n }\n \n pub fn main() {}"}, {"sha": "67bb566ea682c07b1568202a6c213156d3a92d46", "filename": "src/test/compile-fail/privacy-ns2.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -17,7 +17,9 @@\n \n // public type, private value\n pub mod foo1 {\n-    pub trait Bar {\n+    use std::marker::MarkerTrait;\n+\n+    pub trait Bar : MarkerTrait {\n     }\n     pub struct Baz;\n \n@@ -39,7 +41,7 @@ fn test_list1() {\n \n // private type, public value\n pub mod foo2 {\n-    trait Bar {\n+    trait Bar : ::std::marker::MarkerTrait {\n     }\n     pub struct Baz;\n \n@@ -60,7 +62,7 @@ fn test_list2() {\n \n // neither public\n pub mod foo3 {\n-    trait Bar {\n+    trait Bar : ::std::marker::MarkerTrait {\n     }\n     pub struct Baz;\n "}, {"sha": "1ae79adbad76ae953da4cf7aa0045da158c03de5", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,11 +11,15 @@\n #![feature(lang_items, start, no_std)]\n #![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n+#[lang=\"phantom_fn\"]\n+pub trait PhantomFn<A:?Sized,R:?Sized=()> { }\n+impl<A:?Sized, R:?Sized, U:?Sized> PhantomFn<A,R> for U { }\n+\n #[lang=\"sized\"]\n-pub trait Sized {}\n+pub trait Sized : PhantomFn<Self> {}\n \n #[lang=\"copy\"]\n-pub trait Copy {}\n+pub trait Copy : PhantomFn<Self> {}\n \n mod bar {\n     // shouldn't bring in too much"}, {"sha": "adce93af0794f9a0f5d8cf0eae6aa95f6ec5f467", "filename": "src/test/compile-fail/privacy4.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,8 +11,12 @@\n #![feature(lang_items, start, no_std)]\n #![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n-#[lang = \"sized\"] pub trait Sized {}\n-#[lang=\"copy\"] pub trait Copy {}\n+#[lang=\"phantom_fn\"]\n+pub trait PhantomFn<A:?Sized,R:?Sized=()> { }\n+impl<A:?Sized, R:?Sized, U:?Sized> PhantomFn<A,R> for U { }\n+\n+#[lang = \"sized\"] pub trait Sized : PhantomFn<Self> {}\n+#[lang=\"copy\"] pub trait Copy : PhantomFn<Self> {}\n \n // Test to make sure that private items imported through globs remain private\n // when  they're used."}, {"sha": "2da414befd8979312cc7b1c3e18466197d5f9f7a", "filename": "src/test/compile-fail/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,7 +13,7 @@\n \n #![feature(box_syntax)]\n \n-trait Foo {}\n+trait Foo : ::std::marker::MarkerTrait {}\n impl<'a> Foo for &'a [u8] {}\n \n fn a(v: &[u8]) -> Box<Foo + 'static> {"}, {"sha": "f921eccef1f8cdc713d340b54f15251f4dadb40f", "filename": "src/test/compile-fail/regions-assoc-type-region-bound-in-trait-not-met.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-region-bound-in-trait-not-met.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-region-bound-in-trait-not-met.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-region-bound-in-trait-not-met.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,10 @@\n // Test that the compiler checks that arbitrary region bounds declared\n // in the trait must be satisfied on the impl. Issue #20890.\n \n-trait Foo<'a> { type Value: 'a; }\n+trait Foo<'a> {\n+    type Value: 'a;\n+    fn dummy(&'a self) { }\n+}\n \n impl<'a> Foo<'a> for &'a i16 {\n     // OK."}, {"sha": "1cf83b8ac585f75f2833480bb0535eb975fa4d54", "filename": "src/test/compile-fail/regions-assoc-type-static-bound-in-trait-not-met.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-static-bound-in-trait-not-met.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-static-bound-in-trait-not-met.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-static-bound-in-trait-not-met.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,10 @@\n // Test that the compiler checks that the 'static bound declared in\n // the trait must be satisfied on the impl. Issue #20890.\n \n-trait Foo { type Value: 'static; }\n+trait Foo {\n+    type Value: 'static;\n+    fn dummy(&self) { }\n+}\n \n impl<'a> Foo for &'a i32 {\n     //~^ ERROR cannot infer"}, {"sha": "278ccd3c11936f3b931d0cd2ce64912ec55cc0c5", "filename": "src/test/compile-fail/regions-bound-missing-bound-in-impl.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-bound-missing-bound-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-bound-missing-bound-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bound-missing-bound-in-impl.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -21,10 +21,9 @@ pub trait Foo<'a, 't> {\n     fn has_bound<'b:'a>(self, b: Inv<'b>);\n     fn wrong_bound1<'b,'c,'d:'a+'b>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>);\n     fn okay_bound<'b,'c,'d:'a+'b+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>);\n-    fn another_bound<'x: 'a>(self, x: Inv<'x>);\n+    fn another_bound<'x: 'a>(self, x: Inv<'x>, y: Inv<'t>);\n }\n \n-\n impl<'a, 't> Foo<'a, 't> for &'a isize {\n     fn no_bound<'b:'a>(self, b: Inv<'b>) {\n         //~^ ERROR lifetime parameters or bounds on method `no_bound` do not match\n@@ -51,7 +50,7 @@ impl<'a, 't> Foo<'a, 't> for &'a isize {\n     fn okay_bound<'b,'c,'e:'b+'c>(self, b: Inv<'b>, c: Inv<'c>, e: Inv<'e>) {\n     }\n \n-    fn another_bound<'x: 't>(self, x: Inv<'x>) {}\n+    fn another_bound<'x: 't>(self, x: Inv<'x>, y: Inv<'t>) {}\n }\n \n fn main() { }"}, {"sha": "f13d8a60894cb6b7ae9e3f4162cd52b427e49167", "filename": "src/test/compile-fail/regions-bounded-method-type-parameters-trait-bound.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-trait-bound.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,16 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, no_std)]\n-#![no_std]\n-\n // Check that explicit region bounds are allowed on the various\n // nominal types (but not on other types) and that they are type\n // checked.\n \n-#[lang=\"sized\"]\n-trait Sized { }\n-\n struct Inv<'a> { // invariant w/r/t 'a\n     x: &'a mut &'a isize\n }"}, {"sha": "979c1e997d03c8b694c2bcb78605f5fcade1e610", "filename": "src/test/compile-fail/regions-close-associated-type-into-object.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,9 @@\n \n #![feature(box_syntax)]\n \n-trait X {}\n+use std::marker::MarkerTrait;\n+\n+trait X : MarkerTrait {}\n \n trait Iter {\n     type Item: X;"}, {"sha": "7bbce7dad530db4fc9a21ab9a947009c486d8b8a", "filename": "src/test/compile-fail/regions-close-object-into-object-1.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-1.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,13 +11,16 @@\n #![feature(box_syntax)]\n #![allow(warnings)]\n \n-trait A<T> {}\n+use std::marker::PhantomFn;\n+\n+trait A<T> : PhantomFn<(Self,T)> { }\n struct B<'a, T>(&'a (A<T>+'a));\n \n-trait X {}\n+trait X : ::std::marker::MarkerTrait {}\n+\n impl<'a, T> X for B<'a, T> {}\n \n-fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n+fn f<'a, T:'static, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n     box B(&*v) as Box<X> //~ ERROR `*v` does not live long enough\n }\n "}, {"sha": "6de49020a6fbbaff0d6b2b0d584d28deffcd5512", "filename": "src/test/compile-fail/regions-close-object-into-object-2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,10 +10,12 @@\n \n #![feature(box_syntax)]\n \n-trait A<T> {}\n+use std::marker::PhantomFn;\n+\n+trait A<T> : PhantomFn<(Self,T)> { }\n struct B<'a, T>(&'a (A<T>+'a));\n \n-trait X {}\n+trait X : PhantomFn<Self> {}\n impl<'a, T> X for B<'a, T> {}\n \n fn g<'a, T: 'static>(v: Box<A<T>+'a>) -> Box<X+'static> {"}, {"sha": "e22d0c7d0a4f51bc9b14f95c53c90d077c3609b2", "filename": "src/test/compile-fail/regions-close-object-into-object-3.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-3.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,10 +11,12 @@\n #![feature(box_syntax)]\n #![allow(warnings)]\n \n-trait A<T> {}\n+use std::marker::PhantomFn;\n+\n+trait A<T> : PhantomFn<(Self,T)> {}\n struct B<'a, T>(&'a (A<T>+'a));\n \n-trait X {}\n+trait X : PhantomFn<Self> {}\n impl<'a, T> X for B<'a, T> {}\n \n fn h<'a, T, U>(v: Box<A<U>+'static>) -> Box<X+'static> {"}, {"sha": "147a575d38caca1ce10c1e18d4925efa308b7236", "filename": "src/test/compile-fail/regions-close-object-into-object-4.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-4.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,10 +10,12 @@\n \n #![feature(box_syntax)]\n \n-trait A<T> {}\n+use std::marker::PhantomFn;\n+\n+trait A<T> : PhantomFn<(Self,T)> {}\n struct B<'a, T>(&'a (A<T>+'a));\n \n-trait X {}\n+trait X : PhantomFn<Self> {}\n impl<'a, T> X for B<'a, T> {}\n \n fn i<'a, T, U>(v: Box<A<U>+'a>) -> Box<X+'static> {"}, {"sha": "2341d2397c9b04d5f635fe6ade7e86c675ae5853", "filename": "src/test/compile-fail/regions-close-over-borrowed-ref-in-obj.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-close-over-borrowed-ref-in-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-close-over-borrowed-ref-in-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-over-borrowed-ref-in-obj.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,9 @@\n \n #![feature(box_syntax)]\n \n-trait Foo { }\n+use std::marker::MarkerTrait;\n+\n+trait Foo : MarkerTrait { }\n \n impl<'a> Foo for &'a isize { }\n "}, {"sha": "9ad49a6703ee3abc939afb4cabb84eba2b67d4c5", "filename": "src/test/compile-fail/regions-close-param-into-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-close-param-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-close-param-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-param-into-object.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-trait X {}\n+trait X : ::std::marker::MarkerTrait {}\n \n fn p1<T>(v: T) -> Box<X+'static>\n     where T : X"}, {"sha": "b7ef19d1e3bfc11be9c557cfc157ace2b5c160f8", "filename": "src/test/compile-fail/regions-infer-contravariance-due-to-decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-decl.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -20,7 +20,7 @@ use std::marker;\n // Contravariant<'foo> <: Contravariant<'static> because\n // 'foo <= 'static\n struct Contravariant<'a> {\n-    marker: marker::ContravariantLifetime<'a>\n+    marker: marker::PhantomData<&'a()>\n }\n \n fn use_<'short,'long>(c: Contravariant<'short>,"}, {"sha": "0d3d9dacbd6f6c0a3517aed2045a09155c1b1931", "filename": "src/test/compile-fail/regions-infer-covariance-due-to-decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-decl.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -17,7 +17,7 @@\n use std::marker;\n \n struct Covariant<'a> {\n-    marker: marker::CovariantLifetime<'a>\n+    marker: marker::PhantomData<fn(&'a ())>\n }\n \n fn use_<'short,'long>(c: Covariant<'long>,"}, {"sha": "65decb4da1b9934344bbfcfaa5af0d10a2a6c34f", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-decl.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,7 @@\n use std::marker;\n \n struct invariant<'a> {\n-    marker: marker::InvariantLifetime<'a>\n+    marker: marker::PhantomData<*mut &'a()>\n }\n \n fn to_same_lifetime<'r>(bi: invariant<'r>) {"}, {"sha": "1b749faf1b8b92a50b0f86af687899ddceb4f40f", "filename": "src/test/compile-fail/required-lang-item.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,11 @@\n #![feature(lang_items, no_std)]\n #![no_std]\n \n-#[lang=\"sized\"] pub trait Sized {}\n+#[lang=\"phantom_fn\"]\n+pub trait PhantomFn<T:?Sized> { }\n+impl<T:?Sized, U:?Sized> PhantomFn<T> for U { }\n+\n+#[lang=\"sized\"] pub trait Sized : PhantomFn<Self> {}\n \n // error-pattern:requires `start` lang_item\n "}, {"sha": "1f72db1e894faa3d081728bc7505f3d6f10e0070", "filename": "src/test/compile-fail/shadowed-type-parameter.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fshadowed-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fshadowed-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshadowed-type-parameter.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,19 +12,21 @@\n \n #![feature(box_syntax)]\n \n-struct Foo<T>;\n+struct Foo<T>(T);\n \n impl<T> Foo<T> {\n     fn shadow_in_method<T>(&self) {}\n     //~^ ERROR type parameter `T` shadows another type parameter\n \n     fn not_shadow_in_item<U>(&self) {\n-        struct Bar<T, U>; // not a shadow, separate item\n+        struct Bar<T, U>(T,U); // not a shadow, separate item\n         fn foo<T, U>() {} // same\n     }\n }\n \n trait Bar<T> {\n+    fn dummy(&self) -> T;\n+\n     fn shadow_in_required<T>(&self);\n     //~^ ERROR type parameter `T` shadows another type parameter\n "}, {"sha": "3c1c3796a246f172baef08c48c056dc541f0a923", "filename": "src/test/compile-fail/slightly-nice-generic-literal-messages.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Foo<T,U>(T);\n+use std::marker;\n+\n+struct Foo<T,U>(T, marker::PhantomData<U>);\n \n fn main() {\n-    match Foo(1.1) {\n+    match Foo(1.1, marker::PhantomData) {\n         1 => {}\n     //~^ ERROR mismatched types\n     //~| expected `Foo<_, _>`"}, {"sha": "2dfc9b79ee20aca1e9a01a7b7307ed1cbb94634c", "filename": "src/test/compile-fail/staticness-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n trait foo {\n+    fn dummy(&self) { }\n     fn bar();\n }\n "}, {"sha": "fff144140947a11307157513cc8d4900e26444a0", "filename": "src/test/compile-fail/trait-as-struct-constructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-as-struct-constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-as-struct-constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-as-struct-constructor.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait TraitNotAStruct { }\n+trait TraitNotAStruct : ::std::marker::MarkerTrait { }\n \n fn main() {\n     TraitNotAStruct{ value: 0 };"}, {"sha": "3129dceffbb664c3d2471ba61e3a38b7df2562b1", "filename": "src/test/compile-fail/trait-bounds-cant-coerce.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,6 +10,7 @@\n \n \n trait Foo {\n+    fn dummy(&self) { }\n }\n \n fn a(_x: Box<Foo+Send>) {"}, {"sha": "34e06cc93658aedd3b0d4e4f22bfa79158710ef5", "filename": "src/test/compile-fail/trait-bounds-impl-comparison-1.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-1.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,10 @@\n // Make sure rustc checks the type parameter bounds in implementations of traits,\n // see #2687\n \n-trait A {}\n+use std::marker;\n+\n+trait A : marker::PhantomFn<Self> {\n+}\n \n trait B: A {}\n \n@@ -62,15 +65,16 @@ impl Foo for isize {\n     //~^ ERROR the requirement `T : C` appears on the impl\n }\n \n-\n-trait Getter<T> { }\n+trait Getter<T> {\n+    fn get(&self) -> T { loop { } }\n+}\n \n trait Trait {\n-    fn method<G:Getter<isize>>();\n+    fn method<G:Getter<isize>>(&self);\n }\n \n impl Trait for usize {\n-    fn method<G: Getter<usize>>() {}\n+    fn method<G: Getter<usize>>(&self) {}\n     //~^ G : Getter<usize>` appears on the impl method but not on the corresponding trait method\n }\n "}, {"sha": "284c4fac953f2302b81fcc9b9efa6a0ba7d9ead5", "filename": "src/test/compile-fail/trait-bounds-impl-comparison-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -14,7 +14,9 @@ trait Iterator<A> {\n     fn next(&mut self) -> Option<A>;\n }\n \n-trait IteratorUtil<A> {\n+trait IteratorUtil<A>\n+    : ::std::marker::PhantomFn<(),A>\n+{\n     fn zip<B, U: Iterator<U>>(self, other: U) -> ZipIterator<Self, U>;\n }\n "}, {"sha": "448b186f6a5c6de1cff16451a9ff6db965d8cb7e", "filename": "src/test/compile-fail/trait-bounds-not-on-bare-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n trait Foo {\n+    fn dummy(&self) { }\n }\n \n // This should emit the less confusing error, not the more confusing one."}, {"sha": "df44e847c50fd5ffca5d96fbad2edc875444fd8c", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-locals.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Trait {}\n+trait Trait {\n+    fn dummy(&self) { }\n+}\n \n struct Foo<T:Trait> {\n     x: T,"}, {"sha": "18871d0d386d77ec178838299a0861bbb8e7e338", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-static.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-static.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Trait {}\n+trait Trait {\n+    fn dummy(&self) { }\n+}\n \n struct Foo<T:Trait> {\n     x: T,"}, {"sha": "8dfdb2f205d6f27d7e423e7ea2cb471485d812f7", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Trait {}\n+use std::marker::MarkerTrait;\n+\n+trait Trait : MarkerTrait {}\n \n struct Foo<T:Trait> {\n     x: T,\n@@ -51,15 +53,15 @@ enum MoreBadness<V> {\n     EvenMoreBadness(Bar<V>),\n }\n \n-trait PolyTrait<T> {\n-    fn whatever() {}\n+trait PolyTrait<T>\n+{\n+    fn whatever(&self, t: T) {}\n }\n \n struct Struct;\n \n impl PolyTrait<Foo<usize>> for Struct {\n //~^ ERROR not implemented\n-    fn whatever() {}\n }\n \n fn main() {"}, {"sha": "e4058a0943aadb770f92e4edfe031b2fd91c18f7", "filename": "src/test/compile-fail/trait-bounds-sugar.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,8 +10,9 @@\n \n // Tests for \"default\" bounds inferred for traits with no bounds list.\n \n+use std::marker::MarkerTrait;\n \n-trait Foo {}\n+trait Foo : MarkerTrait {}\n \n fn a(_x: Box<Foo+Send>) {\n }"}, {"sha": "2f4793b4d888f094ea5eaf8fa4594608d640def9", "filename": "src/test/compile-fail/trait-impl-1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-impl-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-impl-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-1.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,7 +12,9 @@\n // trait impl is only applied to a trait object, not concrete types which implement\n // the trait.\n \n-trait T {}\n+use std::marker::MarkerTrait;\n+\n+trait T : MarkerTrait {}\n \n impl<'a> T+'a {\n     fn foo(&self) {}"}, {"sha": "d45d13556e12188b91d70f2a21cca6aa1a057c5b", "filename": "src/test/compile-fail/trait-object-safety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-object-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-object-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-object-safety.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,6 +12,7 @@\n \n trait Tr {\n     fn foo();\n+    fn bar(&self) { }\n }\n \n struct St;"}, {"sha": "0e357d9d4d53147a0b3037fe8adc66cca0be36b8", "filename": "src/test/compile-fail/trait-static-method-generic-inference.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-static-method-generic-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftrait-static-method-generic-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-static-method-generic-inference.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -16,6 +16,7 @@\n mod base {\n     pub trait HasNew<T> {\n         fn new() -> T;\n+        fn dummy(&self) { }\n     }\n \n     pub struct Foo {"}, {"sha": "557fb2f4f8833ff18f775a5c654841ebf9760fcf", "filename": "src/test/compile-fail/typeck-negative-impls-builtin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftypeck-negative-impls-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftypeck-negative-impls-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-negative-impls-builtin.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,7 +12,9 @@\n \n struct TestType;\n \n-trait TestTrait {}\n+trait TestTrait {\n+    fn dummy(&self) { }\n+}\n \n impl !TestTrait for TestType {}\n //~^ ERROR  negative impls are currently allowed just for `Send` and `Sync`"}, {"sha": "1daea8f915b3f192000223342b02f915492c35f3", "filename": "src/test/compile-fail/typeck_type_placeholder_mismatch.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,14 +11,16 @@\n // This test checks that genuine type errors with partial\n // type hints are understandable.\n \n-struct Foo<T>;\n-struct Bar<U>;\n+use std::marker::PhantomData;\n+\n+struct Foo<T>(PhantomData<T>);\n+struct Bar<U>(PhantomData<U>);\n \n pub fn main() {\n }\n \n fn test1() {\n-    let x: Foo<_> = Bar::<usize>;\n+    let x: Foo<_> = Bar::<usize>(PhantomData);\n     //~^ ERROR mismatched types\n     //~| expected `Foo<_>`\n     //~| found `Bar<usize>`\n@@ -28,7 +30,7 @@ fn test1() {\n }\n \n fn test2() {\n-    let x: Foo<_> = Bar::<usize>;\n+    let x: Foo<_> = Bar::<usize>(PhantomData);\n     //~^ ERROR mismatched types\n     //~| expected `Foo<_>`\n     //~| found `Bar<usize>`"}, {"sha": "74a6f869f63fb78850c834566b6d9f3c26bd6e83", "filename": "src/test/compile-fail/unboxed-closure-feature-gate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funboxed-closure-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funboxed-closure-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-feature-gate.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,8 +11,12 @@\n // Check that parenthetical notation is feature-gated except with the\n // `Fn` traits.\n \n+use std::marker;\n+\n trait Foo<A> {\n     type Output;\n+\n+    fn dummy(&self, a: A) { }\n }\n \n fn main() {"}, {"sha": "831db98941c6dc2ac9165eab6e987b3168dfdcd1", "filename": "src/test/compile-fail/unboxed-closure-sugar-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -19,7 +19,7 @@ trait Foo<T,V=T> {\n     fn dummy(&self, t: T, v: V);\n }\n \n-trait Eq<X: ?Sized> { }\n+trait Eq<X: ?Sized> { fn same_types(&self, x: &X) -> bool { true } }\n impl<X: ?Sized> Eq<X> for X { }\n fn eq<A: ?Sized,B: ?Sized>() where A : Eq<B> { }\n "}, {"sha": "6d315c1b7a99617828fe1fe084202f00944fccef", "filename": "src/test/compile-fail/unboxed-closure-sugar-equiv.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -16,12 +16,14 @@\n #![feature(unboxed_closures)]\n #![allow(dead_code)]\n \n+use std::marker::PhantomFn;\n+\n trait Foo<T> {\n     type Output;\n     fn dummy(&self, t: T, u: Self::Output);\n }\n \n-trait Eq<X: ?Sized> { }\n+trait Eq<X: ?Sized> : PhantomFn<(Self,X)> { }\n impl<X: ?Sized> Eq<X> for X { }\n fn eq<A: ?Sized,B: ?Sized +Eq<A>>() { }\n "}, {"sha": "bd3530e6e3026414b6df8b46c3c4361a47e2f15b", "filename": "src/test/compile-fail/unboxed-closure-sugar-lifetime-elision.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-lifetime-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-lifetime-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-lifetime-elision.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -16,12 +16,14 @@\n #![feature(unboxed_closures)]\n #![allow(dead_code)]\n \n+use std::marker;\n+\n trait Foo<T> {\n     type Output;\n     fn dummy(&self, t: T);\n }\n \n-trait Eq<X: ?Sized> { }\n+trait Eq<X: ?Sized> : marker::PhantomFn<(Self, X)> { }\n impl<X: ?Sized> Eq<X> for X { }\n fn eq<A: ?Sized,B: ?Sized +Eq<A>>() { }\n "}, {"sha": "057b496bd43ebead9d4f321fd67692275a10cdd7", "filename": "src/test/compile-fail/unboxed-closure-sugar-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -22,7 +22,7 @@ trait Foo<'a,T> {\n     fn dummy(&'a self) -> &'a (T,Self::Output);\n }\n \n-trait Eq<X: ?Sized> { }\n+trait Eq<X: ?Sized> { fn is_of_eq_type(&self, x: &X) -> bool { true } }\n impl<X: ?Sized> Eq<X> for X { }\n fn eq<A: ?Sized,B: ?Sized +Eq<A>>() { }\n "}, {"sha": "713b64b1349fcc5893ac455a2755aa9449a203ef", "filename": "src/test/compile-fail/unboxed-closures-recursive-fn-using-fn-mut.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funboxed-closures-recursive-fn-using-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funboxed-closures-recursive-fn-using-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-recursive-fn-using-fn-mut.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,20 +10,20 @@\n \n #![feature(core,unboxed_closures)]\n \n-use std::marker::CovariantType;\n+use std::marker::PhantomData;\n \n // A erroneous variant of `run-pass/unboxed_closures-infer-recursive-fn.rs`\n // where we attempt to perform mutation in the recursive function. This fails to compile\n // because it winds up requiring `FnMut` which enforces linearity.\n \n struct YCombinator<F,A,R> {\n     func: F,\n-    marker: CovariantType<(A,R)>,\n+    marker: PhantomData<(A,R)>,\n }\n \n impl<F,A,R> YCombinator<F,A,R> {\n     fn new(f: F) -> YCombinator<F,A,R> {\n-        YCombinator { func: f, marker: CovariantType }\n+        YCombinator { func: f, marker: PhantomData }\n     }\n }\n "}, {"sha": "964db6e9a4546bfb8b8ad18cfd80dc5af26110eb", "filename": "src/test/compile-fail/unnecessary-private.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funnecessary-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funnecessary-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funnecessary-private.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,10 +13,10 @@ fn main() {\n     pub struct A; //~ ERROR: visibility has no effect\n     pub enum B {} //~ ERROR: visibility has no effect\n     pub trait C { //~ ERROR: visibility has no effect\n-        pub fn foo() {} //~ ERROR: visibility has no effect\n+        pub fn foo(&self) {} //~ ERROR: visibility has no effect\n     }\n     impl A {\n-        pub fn foo() {} //~ ERROR: visibility has no effect\n+        pub fn foo(&self) {} //~ ERROR: visibility has no effect\n     }\n \n     struct D {"}, {"sha": "a03c76b12dd8ea141dce5ddd1171b815590c3157", "filename": "src/test/compile-fail/unsized-inherent-impl-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,7 +12,7 @@\n \n // impl - struct\n \n-struct S5<Y>;\n+struct S5<Y>(Y);\n \n impl<X: ?Sized> S5<X> { //~ ERROR not implemented\n }"}, {"sha": "08df1d9b7b8fb8a384912f0258e7bcbdfadb2b53", "filename": "src/test/compile-fail/unsized-trait-impl-self-type.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,9 +12,10 @@\n \n // impl - struct\n trait T3<Z: ?Sized> {\n+    fn foo(&self, z: &Z);\n }\n \n-struct S5<Y>;\n+struct S5<Y>(Y);\n \n impl<X: ?Sized> T3<X> for S5<X> { //~ ERROR not implemented\n }"}, {"sha": "4723dfeaeb988393150e30af3cc515eef3806778", "filename": "src/test/compile-fail/unsized-trait-impl-trait-arg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,8 +12,9 @@\n \n // impl - unbounded\n trait T2<Z> {\n+    fn foo(&self, z: Z);\n }\n-struct S4<Y: ?Sized>;\n+struct S4<Y: ?Sized>(Box<Y>);\n impl<X: ?Sized> T2<X> for S4<X> {\n     //~^ ERROR `core::marker::Sized` is not implemented for the type `X`\n }"}, {"sha": "de1cbab82b281e373002a1b2d4177a1ab1cd6791", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,6 +10,7 @@\n \n // Test sized-ness checking in substitution within fn bodies..\n \n+use std::marker;\n \n // Unbounded.\n fn f1<X: ?Sized>(x: &X) {\n@@ -20,7 +21,9 @@ fn f2<X>(x: &X) {\n }\n \n // Bounded.\n-trait T {}\n+trait T {\n+    fn foo(&self) { }\n+}\n fn f3<X: ?Sized + T>(x: &X) {\n     f4::<X>(x);\n     //~^ ERROR the trait `core::marker::Sized` is not implemented"}, {"sha": "f31a6ffdc0d7caed0084f23af4f661bd4df45f64", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,8 +10,9 @@\n \n // Test `?Sized` local variables.\n \n+use std::marker;\n \n-trait T {}\n+trait T : marker::MarkerTrait { }\n \n fn f1<X: ?Sized>(x: &X) {\n     let _: X; // <-- this is OK, no bindings created, no initializer."}, {"sha": "6ea3d0720eeeb716e3ae07325963865ce5d70b0e", "filename": "src/test/compile-fail/unsized7.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized7.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,13 +10,17 @@\n \n // Test sized-ness checking in substitution in impls.\n \n-trait T {}\n+use std::marker::MarkerTrait;\n+\n+trait T : MarkerTrait {}\n \n // I would like these to fail eventually.\n // impl - bounded\n trait T1<Z: T> {\n+    fn dummy(&self) -> Z;\n }\n-struct S3<Y: ?Sized>;\n+\n+struct S3<Y: ?Sized>(Box<Y>);\n impl<X: ?Sized + T> T1<X> for S3<X> {\n     //~^ ERROR `core::marker::Sized` is not implemented for the type `X`\n }"}, {"sha": "af242b96a84a160d464c01a5176a3c4e6c2f0393", "filename": "src/test/compile-fail/unused-attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-attr.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -52,9 +52,9 @@ struct Foo {\n #[foo] //~ ERROR unused attribute\n trait Baz {\n     #[foo] //~ ERROR unused attribute\n-    fn blah();\n+    fn blah(&self);\n     #[foo] //~ ERROR unused attribute\n-    fn blah2() {}\n+    fn blah2(&self) {}\n }\n \n fn main() {}"}, {"sha": "b1120e54434eb1861c96d8459b449e7d49ddf708", "filename": "src/test/compile-fail/useless-priv.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fuseless-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fuseless-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless-priv.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,12 +12,14 @@ struct A { pub i: isize }\n pub enum C { pub Variant }      //~ ERROR: unnecessary `pub`\n \n pub trait E {\n-    pub fn foo() {}             //~ ERROR: unnecessary visibility\n+    pub fn foo(&self) {}         //~ ERROR: unnecessary visibility\n+}\n+trait F {\n+    pub fn foo(&self) {}     //~ ERROR: unnecessary visibility\n }\n-trait F { pub fn foo() {} }     //~ ERROR: unnecessary visibility\n \n impl E for A {\n-    pub fn foo() {}             //~ ERROR: unnecessary visibility\n+    pub fn foo(&self) {}             //~ ERROR: unnecessary visibility\n }\n \n fn main() {}"}, {"sha": "a404d09248f0192a8ed54268f3c960df4636b8e4", "filename": "src/test/compile-fail/useless-priv2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fuseless-priv2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fuseless-priv2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless-priv2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -9,8 +9,10 @@\n // except according to those terms.\n \n pub trait E {\n-    pub fn foo();               //~ ERROR: unnecessary visibility\n+    pub fn foo(&self);               //~ ERROR: unnecessary visibility\n+}\n+trait F {\n+    pub fn foo(&self);               //~ ERROR: unnecessary visibility\n }\n-trait F { pub fn foo(); }       //~ ERROR: unnecessary visibility\n \n fn main() {}"}, {"sha": "da4d6c75227fc609bba453dd222f52638b945fe2", "filename": "src/test/compile-fail/variance-regions-direct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -60,6 +60,7 @@ struct Test6<'a, 'b> { //~ ERROR regions=[[-, o];[];[]]\n \n #[rustc_variance]\n struct Test7<'a> { //~ ERROR regions=[[*];[];[]]\n+    //~^ ERROR parameter `'a` is never used\n     x: isize\n }\n "}, {"sha": "9beb90d0b24835777550fc03adbda379e34faf9f", "filename": "src/test/compile-fail/variance-regions-indirect.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -16,23 +16,27 @@\n \n #[rustc_variance]\n enum Base<'a, 'b, 'c:'b, 'd> { //~ ERROR regions=[[+, -, o, *];[];[]]\n+    //~^ ERROR parameter `'d` is never used\n     Test8A(extern \"Rust\" fn(&'a isize)),\n     Test8B(&'b [isize]),\n     Test8C(&'b mut &'c str),\n }\n \n #[rustc_variance]\n struct Derived1<'w, 'x:'y, 'y, 'z> { //~ ERROR regions=[[*, o, -, +];[];[]]\n+    //~^ ERROR parameter `'w` is never used\n     f: Base<'z, 'y, 'x, 'w>\n }\n \n #[rustc_variance] // Combine - and + to yield o\n struct Derived2<'a, 'b:'a, 'c> { //~ ERROR regions=[[o, o, *];[];[]]\n+    //~^ ERROR parameter `'c` is never used\n     f: Base<'a, 'a, 'b, 'c>\n }\n \n #[rustc_variance] // Combine + and o to yield o (just pay attention to 'a here)\n struct Derived3<'a:'b, 'b, 'c> { //~ ERROR regions=[[o, -, *];[];[]]\n+    //~^ ERROR parameter `'c` is never used\n     f: Base<'a, 'b, 'a, 'c>\n }\n "}, {"sha": "f0ca1edd5638718c50ace55b5dfb97571f520f39", "filename": "src/test/compile-fail/variance-trait-object-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -18,7 +18,7 @@\n \n use std::mem;\n \n-trait T { fn foo(); }\n+trait T { fn foo(&self); }\n \n #[rustc_variance]\n struct TOption<'a> { //~ ERROR regions=[[-];[];[]]"}, {"sha": "1f2205b5c71983ee67a847d32b053c8365d15779", "filename": "src/test/compile-fail/visible-private-types-generics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-generics.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo {}\n+trait Foo {\n+    fn dummy(&self) { }\n+}\n \n pub fn f<\n     T"}, {"sha": "9d9eae4a0759bb7bdbcaa311e85e6e2614c2378f", "filename": "src/test/compile-fail/visible-private-types-supertrait.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-supertrait.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo {}\n+trait Foo {\n+    fn dummy(&self) { }\n+}\n \n pub trait Bar : Foo {} //~ ERROR private trait in exported type\n "}, {"sha": "bf614e6eb512bab429c2c5530e833fdc1f464c35", "filename": "src/test/compile-fail/where-clause-method-substituion.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fwhere-clause-method-substituion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fwhere-clause-method-substituion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clause-method-substituion.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo<T> {}\n+trait Foo<T> {\n+    fn dummy(&self, t: T) { }\n+}\n \n trait Bar<A> {\n     fn method<B>(&self) where A: Foo<B>;"}, {"sha": "7968cc37090acffe1d09cc411bdd1c2fe813c5af", "filename": "src/test/compile-fail/where-clauses-not-parameter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-not-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-not-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-not-parameter.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -21,7 +21,7 @@ fn test2() -> bool where Option<isize> : Eq {}\n \n #[derive(PartialEq)]\n //~^ ERROR cannot bound type `isize`, where clause bounds\n-enum Foo<T> where isize : Eq { MkFoo }\n+enum Foo<T> where isize : Eq { MkFoo(T) }\n //~^ ERROR cannot bound type `isize`, where clause bounds\n \n fn test3<T: Eq>() -> bool where Option<Foo<T>> : Eq {}\n@@ -31,7 +31,7 @@ fn test4() -> bool where Option<Foo<isize>> : Eq {}\n \n trait Baz<T> where isize : Eq {\n     //~^ ERROR cannot bound type `isize`, where clause bounds may only\n-    fn baz() where String : Eq; //~ ERROR cannot bound type `collections::string::String`\n+    fn baz(&self, t: T) where String : Eq; //~ ERROR cannot bound type `collections::string::String`\n     //~^ ERROR cannot bound type `isize`, where clause\n }\n "}, {"sha": "cb1cf8c55579aacaa577cb63d90ff0d57188c4de", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -177,10 +177,11 @@\n #![omit_gdb_pretty_printer_section]\n \n use self::Enum1::{Variant1_1, Variant1_2};\n+use std::marker::PhantomData;\n use std::ptr;\n \n struct Struct1;\n-struct GenericStruct<T1, T2>;\n+struct GenericStruct<T1, T2>(PhantomData<(T1,T2)>);\n \n enum Enum1 {\n     Variant1_1,\n@@ -207,8 +208,8 @@ mod Mod1 {\n     }\n }\n \n-trait Trait1 { }\n-trait Trait2<T1, T2> { }\n+trait Trait1 { fn dummy(&self) { } }\n+trait Trait2<T1, T2> { fn dummy(&self, _: T1, _:T2) { } }\n \n impl Trait1 for isize {}\n impl<T1, T2> Trait2<T1, T2> for isize {}\n@@ -240,8 +241,10 @@ fn main() {\n \n     // Structs\n     let simple_struct = Struct1;\n-    let generic_struct1: GenericStruct<Mod1::Struct2, Mod1::Mod2::Struct3> = GenericStruct;\n-    let generic_struct2: GenericStruct<Struct1, extern \"fastcall\" fn(isize) -> usize> = GenericStruct;\n+    let generic_struct1: GenericStruct<Mod1::Struct2, Mod1::Mod2::Struct3> =\n+        GenericStruct(PhantomData);\n+    let generic_struct2: GenericStruct<Struct1, extern \"fastcall\" fn(isize) -> usize> =\n+        GenericStruct(PhantomData);\n     let mod_struct = Mod1::Struct2;\n \n     // Enums\n@@ -262,10 +265,10 @@ fn main() {\n \n     // References\n     let ref1 = (&Struct1, 0i32);\n-    let ref2 = (&GenericStruct::<char, Struct1>, 0i32);\n+    let ref2 = (&GenericStruct::<char, Struct1>(PhantomData), 0i32);\n \n     let mut mut_struct1 = Struct1;\n-    let mut mut_generic_struct = GenericStruct::<Mod1::Enum2, f64>;\n+    let mut mut_generic_struct = GenericStruct::<Mod1::Enum2, f64>(PhantomData);\n     let mut_ref1 = (&mut mut_struct1, 0i32);\n     let mut_ref2 = (&mut mut_generic_struct, 0i32);\n "}, {"sha": "f5205de5c1fcd3ee32661b60d821915bbd10efb7", "filename": "src/test/pretty/empty-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fpretty%2Fempty-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fpretty%2Fempty-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fempty-impl.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait X { }\n+trait X { fn dummy(&self) { } }\n impl X for uint { }\n \n-trait Y { }\n+trait Y { fn dummy(&self) { } }\n impl Y for uint { }"}, {"sha": "9e1f2aa8bfe01e7729e5e71c30f76908082b918b", "filename": "src/test/pretty/path-type-bounds.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,9 @@\n // pp-exact\n \n \n-trait Tr { }\n+trait Tr {\n+    fn dummy(&self) { }\n+}\n impl Tr for int { }\n \n fn foo<'a>(x: Box<Tr+ Sync + 'a>) -> Box<Tr+ Sync + 'a> { x }"}, {"sha": "4ad81197286bb992734e8d8f24ae04fa74ad50c7", "filename": "src/test/run-fail/bug-811.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-fail%2Fbug-811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-fail%2Fbug-811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-811.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n // error-pattern:quux\n+\n+use std::marker::PhantomData;\n+\n fn test00_start(ch: chan_t<int>, message: int) { send(ch, message); }\n \n type task_id = int;\n@@ -17,6 +20,7 @@ type port_id = int;\n struct chan_t<T> {\n     task: task_id,\n     port: port_id,\n+    marker: PhantomData<*mut T>,\n }\n \n fn send<T:Send>(_ch: chan_t<T>, _data: T) { panic!(); }"}, {"sha": "3bd56c14193a8524d7e4dc25cf2e474779e5181f", "filename": "src/test/run-make/rustdoc-json/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Frustdoc-json%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Frustdoc-json%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-json%2Ffoo.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -21,5 +21,5 @@ pub mod bar {\n     }\n \n     /// *wow*\n-    pub trait Doge { }\n+    pub trait Doge { fn dummy(&self) { } }\n }"}, {"sha": "6c56bcc9be67bc0a4817cd307e092facc44b48cd", "filename": "src/test/run-make/rustdoc-negative-impl/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Frustdoc-negative-impl%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Frustdoc-negative-impl%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-negative-impl%2Ffoo.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,7 +13,7 @@\n // @matches foo/struct.Alpha.html '//pre' \"pub struct Alpha\"\n pub struct Alpha;\n // @matches foo/struct.Bravo.html '//pre' \"pub struct Bravo<B>\"\n-pub struct Bravo<B>;\n+pub struct Bravo<B>(B);\n \n // @matches foo/struct.Alpha.html '//*[@class=\"impl\"]//code' \"impl !Send for Alpha\"\n impl !Send for Alpha {}"}, {"sha": "42469a21f22d0abbf25f3bfc31e5c76e396efde7", "filename": "src/test/run-make/rustdoc-search-index/index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Frustdoc-search-index%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Frustdoc-search-index%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-search-index%2Findex.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -21,6 +21,6 @@ mod private {\n     }\n \n     pub trait PrivateTrait {\n-        fn trait_method() {} // @!has - priv_method\n+        fn trait_method(&self) {} // @!has - priv_method\n     }\n }"}, {"sha": "f6b73021bebdfb0ffc70941642062208c65a8a9b", "filename": "src/test/run-make/rustdoc-smoke/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Frustdoc-smoke%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Frustdoc-smoke%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-smoke%2Ffoo.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -26,7 +26,7 @@ pub mod bar {\n \n     /// *wow*\n     // @has foo/bar/trait.Doge.html\n-    pub trait Doge { }\n+    pub trait Doge { fn dummy(&self) { } }\n \n     // @has foo/bar/struct.Foo.html\n     pub struct Foo { x: int, y: uint }"}, {"sha": "6fd47d84c30fee93646688ba1bc1732003c46213", "filename": "src/test/run-make/rustdoc-viewpath-self/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Frustdoc-viewpath-self%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Frustdoc-viewpath-self%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-viewpath-self%2Ffoo.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub mod io {\n-    pub trait Reader { }\n+    pub trait Reader { fn dummy(&self) { } }\n }\n \n pub enum Maybe<A> {"}, {"sha": "91a7e1c9fd4aeb4554cdef802909b12cb4df35bb", "filename": "src/test/run-make/rustdoc-where/foo.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Frustdoc-where%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Frustdoc-where%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-where%2Ffoo.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,30 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub trait MyTrait {}\n+pub trait MyTrait { fn dummy(&self) { } }\n \n // @has foo/struct.Alpha.html '//pre' \"pub struct Alpha<A> where A: MyTrait\"\n-pub struct Alpha<A> where A: MyTrait;\n+pub struct Alpha<A>(A) where A: MyTrait;\n // @has foo/trait.Bravo.html '//pre' \"pub trait Bravo<B> where B: MyTrait\"\n-pub trait Bravo<B> where B: MyTrait {}\n+pub trait Bravo<B> where B: MyTrait { fn get(&self, B: B); }\n // @has foo/fn.charlie.html '//pre' \"pub fn charlie<C>() where C: MyTrait\"\n pub fn charlie<C>() where C: MyTrait {}\n \n-pub struct Delta<D>;\n+pub struct Delta<D>(D);\n+\n // @has foo/struct.Delta.html '//*[@class=\"impl\"]//code' \\\n //          \"impl<D> Delta<D> where D: MyTrait\"\n impl<D> Delta<D> where D: MyTrait {\n     pub fn delta() {}\n }\n \n-pub struct Echo<E>;\n+pub struct Echo<E>(E);\n+\n // @has foo/struct.Echo.html '//*[@class=\"impl\"]//code' \\\n //          \"impl<E> MyTrait for Echo<E> where E: MyTrait\"\n // @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//code' \\\n //          \"impl<E> MyTrait for Echo<E> where E: MyTrait\"\n impl<E> MyTrait for Echo<E> where E: MyTrait {}\n \n-pub enum Foxtrot<F> {}\n+pub enum Foxtrot<F> { Foxtrot1(F) }\n+\n // @has foo/enum.Foxtrot.html '//*[@class=\"impl\"]//code' \\\n //          \"impl<F> MyTrait for Foxtrot<F> where F: MyTrait\"\n // @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//code' \\"}, {"sha": "ffadc57d1b08e4e3a51f293b2acdeb70e07a0ee0", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -99,6 +99,7 @@ struct some_fields {\n type SF = some_fields;\n \n trait SuperTrait {\n+    fn dummy(&self) { }\n }\n \n trait SomeTrait: SuperTrait {"}, {"sha": "f418d5d1fb74f1435110ea0378df3f9e48ffa8ca", "filename": "src/test/run-make/simd-ffi/simd.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -70,10 +70,14 @@ pub fn bar(a: i32x4, b: i32x4) -> i32x4 {\n }\n \n #[lang = \"sized\"]\n-trait Sized {}\n+pub trait Sized : PhantomFn<Self> {}\n \n #[lang = \"copy\"]\n-trait Copy {}\n+pub trait Copy : PhantomFn<Self> {}\n+\n+#[lang=\"phantom_fn\"]\n+pub trait PhantomFn<A:?Sized,R:?Sized=()> { }\n+impl<A:?Sized, R:?Sized, U:?Sized> PhantomFn<A,R> for U { }\n \n mod core {\n     pub mod marker {"}, {"sha": "474a6782b616b3af1ea845be56b948c662cda0b6", "filename": "src/test/run-make/symbols-are-reasonable/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,7 @@\n pub static X: &'static str = \"foobarbaz\";\n pub static Y: &'static [u8] = include_bytes!(\"lib.rs\");\n \n-trait Foo {}\n+trait Foo { fn dummy(&self) { } }\n impl Foo for uint {}\n \n pub fn dummy() {"}, {"sha": "acda8705b19e30e22ad6b2cb662f9e74bb59d34c", "filename": "src/test/run-make/target-specs/foo.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,11 +11,15 @@\n #![feature(lang_items, no_std)]\n #![no_std]\n \n+#[lang=\"phantom_fn\"]\n+trait PhantomFn<A:?Sized,R:?Sized=()> { }\n+impl<A:?Sized, R:?Sized, U:?Sized> PhantomFn<A,R> for U { }\n+\n #[lang=\"copy\"]\n-trait Copy { }\n+trait Copy : PhantomFn<Self> { }\n \n #[lang=\"sized\"]\n-trait Sized { }\n+trait Sized : PhantomFn<Self>  { }\n \n #[lang=\"start\"]\n fn start(_main: *const u8, _argc: int, _argv: *const *const u8) -> int { 0 }"}, {"sha": "aecec44f6fd3df0e4cd6cbdec45dbbd5dcff17b9", "filename": "src/test/run-pass-valgrind/cleanup-auto-borrow-obj.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-auto-borrow-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-auto-borrow-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-auto-borrow-obj.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -25,7 +25,7 @@ impl Drop for Foo {\n }\n \n \n-trait Trait {}\n+trait Trait { fn dummy(&self) { } }\n impl Trait for Foo {}\n \n pub fn main() {"}, {"sha": "c49a684de945df046b3015e2cd5b0a35488b865e", "filename": "src/test/run-pass-valgrind/dst-dtor-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -19,7 +19,7 @@ impl Drop for Foo {\n     }\n }\n \n-trait Trait {}\n+trait Trait { fn dummy(&self) { } }\n impl Trait for Foo {}\n \n struct Fat<T: ?Sized> {"}, {"sha": "f5521f7da853bd025b017cac1cf7a3a4d8c463fd", "filename": "src/test/run-pass/associated-types-basic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo {\n+use std::marker::MarkerTrait;\n+\n+trait Foo : MarkerTrait {\n     type T;\n }\n "}, {"sha": "aa65b0ed10bafe93e5521d26a074cbf801a9f25d", "filename": "src/test/run-pass/associated-types-conditional-dispatch.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -14,6 +14,7 @@\n // `Target=[A]`, then the impl marked with `(*)` is seen to conflict\n // with all the others.\n \n+use std::marker::PhantomData;\n use std::ops::Deref;\n \n pub trait MyEq<U: ?Sized=Self> {\n@@ -41,7 +42,8 @@ impl<'a, A, B, Lhs> MyEq<[B; 0]> for Lhs\n }\n \n struct DerefWithHelper<H, T> {\n-    pub helper: H\n+    pub helper: H,\n+    pub marker: PhantomData<T>,\n }\n \n trait Helper<T> {\n@@ -63,7 +65,8 @@ impl<T, H: Helper<T>> Deref for DerefWithHelper<H, T> {\n }\n \n pub fn check<T: MyEq>(x: T, y: T) -> bool {\n-    let d: DerefWithHelper<Option<T>, T> = DerefWithHelper { helper: Some(x) };\n+    let d: DerefWithHelper<Option<T>, T> = DerefWithHelper { helper: Some(x),\n+                                                             marker: PhantomData };\n     d.eq(&y)\n }\n "}, {"sha": "40ef7f3531cb5caf17247568f52fbc1ccd8a1de0", "filename": "src/test/run-pass/associated-types-issue-20371.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,6 +11,8 @@\n // Test that we are able to have an impl that defines an associated type\n // before the actual trait.\n \n+use std::marker::MarkerTrait;\n+\n impl X for f64 { type Y = int; }\n-trait X {type Y; }\n+trait X : MarkerTrait { type Y; }\n fn main() {}"}, {"sha": "3c91577362a7d4a27657ff5ebb20a72fa4990478", "filename": "src/test/run-pass/associated-types-issue-21212.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-issue-21212.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-issue-21212.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-21212.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -20,7 +20,8 @@ pub trait Parser {\n         panic!()\n     }\n }\n-impl <P> Parser for P  {\n+\n+impl <P> Parser for P {\n     type Input = ();\n }\n "}, {"sha": "2ee8ef0d3ddac5a51267efcc4226697cf639bb28", "filename": "src/test/run-pass/associated-types-nested-projections.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,11 +10,12 @@\n \n // Test that we can resolve nested projection types. Issue #20666.\n \n+use std::marker::MarkerTrait;\n use std::slice;\n \n-trait Bound {}\n+trait Bound : MarkerTrait {}\n \n-impl<'a> Bound for &'a int {}\n+impl<'a> Bound for &'a i32 {}\n \n trait IntoIterator {\n     type Iter: Iterator;"}, {"sha": "de96af83f59171e040223af451d43f71d59b8f0d", "filename": "src/test/run-pass/associated-types-normalize-in-bounds-binding.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-binding.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,7 +13,9 @@\n \n #![allow(dead_code)]\n \n-pub trait Integral {\n+use std::marker::MarkerTrait;\n+\n+pub trait Integral : MarkerTrait {\n     type Opposite;\n }\n \n@@ -27,6 +29,8 @@ impl Integral for u32 {\n \n pub trait FnLike<A> {\n     type R;\n+\n+    fn dummy(&self, a: A) -> Self::R { loop { } }\n }\n \n fn foo<T>()"}, {"sha": "8617750ca538ea02472b33bd0e77781960fba9df", "filename": "src/test/run-pass/associated-types-normalize-in-bounds-ufcs.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,15 +11,17 @@\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n \n-struct Splits<'a, T, P>;\n-struct SplitsN<I>;\n+use std::marker::PhantomData;\n+\n+struct Splits<'a, T:'a, P>(PhantomData<(&'a T, P)>);\n+struct SplitsN<I>(PhantomData<I>);\n \n trait SliceExt2 {\n     type Item;\n \n     fn split2<'a, P>(&'a self, pred: P) -> Splits<'a, Self::Item, P>\n         where P: FnMut(&Self::Item) -> bool;\n-    fn splitn2<'a, P>(&'a self, n: uint, pred: P) -> SplitsN<Splits<'a, Self::Item, P>>\n+    fn splitn2<'a, P>(&'a self, n: u32, pred: P) -> SplitsN<Splits<'a, Self::Item, P>>\n         where P: FnMut(&Self::Item) -> bool;\n }\n \n@@ -30,7 +32,7 @@ impl<T> SliceExt2 for [T] {\n         loop {}\n     }\n \n-    fn splitn2<P>(&self, n: uint, pred: P) -> SplitsN<Splits<T, P>> where P: FnMut(&T) -> bool {\n+    fn splitn2<P>(&self, n: u32, pred: P) -> SplitsN<Splits<T, P>> where P: FnMut(&T) -> bool {\n         SliceExt2::split2(self, pred);\n         loop {}\n     }"}, {"sha": "94cfcb83653812347657560b6d6654cf16b65116", "filename": "src/test/run-pass/associated-types-normalize-in-bounds.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,15 +11,17 @@\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n \n-struct Splits<'a, T, P>;\n-struct SplitsN<I>;\n+use std::marker::PhantomData;\n+\n+struct Splits<'a, T, P>(PhantomData<(&'a(),T,P)>);\n+struct SplitsN<I>(PhantomData<I>);\n \n trait SliceExt2 {\n     type Item;\n \n     fn split2<'a, P>(&'a self, pred: P) -> Splits<'a, Self::Item, P>\n         where P: FnMut(&Self::Item) -> bool;\n-    fn splitn2<'a, P>(&'a self, n: uint, pred: P) -> SplitsN<Splits<'a, Self::Item, P>>\n+    fn splitn2<'a, P>(&'a self, n: usize, pred: P) -> SplitsN<Splits<'a, Self::Item, P>>\n         where P: FnMut(&Self::Item) -> bool;\n }\n \n@@ -30,7 +32,7 @@ impl<T> SliceExt2 for [T] {\n         loop {}\n     }\n \n-    fn splitn2<P>(&self, n: uint, pred: P) -> SplitsN<Splits<T, P>> where P: FnMut(&T) -> bool {\n+    fn splitn2<P>(&self, n: usize, pred: P) -> SplitsN<Splits<T, P>> where P: FnMut(&T) -> bool {\n         self.split2(pred);\n         loop {}\n     }"}, {"sha": "2288e19aae0bceaaa59131547736cc9cc3653fc9", "filename": "src/test/run-pass/associated-types-normalize-unifield-struct.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,7 +13,10 @@\n \n \n pub trait OffsetState: Sized {}\n-pub trait Offset { type State: OffsetState; }\n+pub trait Offset {\n+    type State: OffsetState;\n+    fn dummy(&self) { }\n+}\n \n #[derive(Copy)] pub struct X;\n impl Offset for X { type State = Y; }"}, {"sha": "c65d2db9b0cf0f3125849028aae506a4680827af", "filename": "src/test/run-pass/associated-types-projection-from-known-type-in-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,6 +13,8 @@\n trait Int\n {\n     type T;\n+\n+    fn dummy(&self) { }\n }\n \n trait NonZero"}, {"sha": "a9c34a605ce163a5f2cfb842929ad6a3a7ce249d", "filename": "src/test/run-pass/associated-types-projection-in-object-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-object-type.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -18,6 +18,8 @@ use std::cell::RefCell;\n \n pub trait Subscriber {\n     type Input;\n+\n+    fn dummy(&self) { }\n }\n \n pub trait Publisher<'a> {"}, {"sha": "4d2358fae27b183f3440d83020b21563e4ee9139", "filename": "src/test/run-pass/associated-types-projection-in-supertrait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -14,6 +14,8 @@\n trait A\n {\n     type TA;\n+\n+    fn dummy(&self) { }\n }\n \n trait B<TB>"}, {"sha": "3f3f4fbd1d628f46489096157ad484eb17cc8642", "filename": "src/test/run-pass/associated-types-projection-in-where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-where-clause.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,6 +13,8 @@\n trait Int\n {\n     type T;\n+\n+    fn dummy(&self) { }\n }\n \n trait NonZero"}, {"sha": "67fe11d8feddec9cb3bd23833826746d2ce2b96b", "filename": "src/test/run-pass/associated-types-ref-in-struct-literal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,6 +12,8 @@\n \n pub trait Foo {\n     type Bar;\n+\n+    fn dummy(&self) { }\n }\n \n impl Foo for int {"}, {"sha": "a4b0b1a6e03af4281e88164f7b91e238250438e3", "filename": "src/test/run-pass/associated-types-resolve-lifetime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-resolve-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-resolve-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-resolve-lifetime.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,6 +15,8 @@ trait Get<T> {\n trait Trait<'a> {\n     type T: 'static;\n     type U: Get<&'a int>;\n+\n+    fn dummy(&'a self) { }\n }\n \n fn main() {}"}, {"sha": "8667f6c8430aba03c706a9ae8d61bf273e920a5e", "filename": "src/test/run-pass/associated-types-struct-field-named.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,6 +13,8 @@\n \n pub trait UnifyKey {\n     type Value;\n+\n+    fn dummy(&self) { }\n }\n \n pub struct Node<K:UnifyKey> {"}, {"sha": "9503f78a71b908ed469cfc109a4a11f89f9151b6", "filename": "src/test/run-pass/associated-types-struct-field-numbered.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,6 +13,8 @@\n \n pub trait UnifyKey {\n     type Value;\n+\n+    fn dummy(&self) { }\n }\n \n pub struct Node<K:UnifyKey>(K, K::Value);"}, {"sha": "b1878fa3558d639d1cf7ae1b6eead362e67ed4d2", "filename": "src/test/run-pass/associated-types-sugar-path.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -31,8 +31,9 @@ pub fn bar<T: Foo>(a: T, x: T::A) -> T::A {\n // Using a type via an impl.\n trait C {\n     fn f();\n+    fn g(&self) { }\n }\n-struct B<X>;\n+struct B<X>(X);\n impl<T: Foo> C for B<T> {\n     fn f() {\n         let x: T::A = panic!();"}, {"sha": "be0c88f557cc7e87bd01c3cc4efbbc9b1e4262d1", "filename": "src/test/run-pass/borrowck-trait-lifetime.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fborrowck-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fborrowck-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-trait-lifetime.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,8 +12,11 @@\n // to the same lifetime on a trait succeeds. See issue #10766.\n \n #![allow(dead_code)]\n+\n+use std::marker;\n+\n fn main() {\n-    trait T {}\n+    trait T : marker::MarkerTrait {}\n \n     fn f<'a, V: T>(v: &'a V) -> &'a T {\n         v as &'a T"}, {"sha": "143ebfdabfacefd6ce8cd1fdc05c430860e7f5a2", "filename": "src/test/run-pass/bug-7295.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fbug-7295.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fbug-7295.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7295.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n pub trait Foo<T> {\n-    fn func1<U>(&self, t: U);\n+    fn func1<U>(&self, t: U, w: T);\n \n-    fn func2<U>(&self, t: U) {\n-        self.func1(t);\n+    fn func2<U>(&self, t: U, w: T) {\n+        self.func1(t, w);\n     }\n }\n "}, {"sha": "7eaed910124d91ea2b31a1134f9ceb481e1d1994", "filename": "src/test/run-pass/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -16,6 +16,7 @@\n extern crate trait_superkinds_in_metadata;\n use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n use trait_superkinds_in_metadata::{RequiresCopy};\n+use std::marker;\n \n #[derive(Copy)]\n struct X<T>(T);"}, {"sha": "964c28dc94517a1d5da90bee404dcf02b0e4e236", "filename": "src/test/run-pass/builtin-superkinds-phantom-typaram.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,10 +12,12 @@\n // super-builtin-kind of a trait, if the type parameter is never used,\n // the type can implement the trait anyway.\n \n+use std::marker;\n+\n trait Foo : Send { }\n \n-struct X<T>(());\n+struct X<T> { marker: marker::PhantomData<T> }\n \n-impl <T> Foo for X<T> { }\n+impl<T:Send> Foo for X<T> { }\n \n pub fn main() { }"}, {"sha": "15e98519fbcd62c834ae4ff2d978c1b7d9fed39c", "filename": "src/test/run-pass/class-typarams.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-typarams.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::marker::PhantomData;\n+\n struct cat<U> {\n     meows : uint,\n-\n     how_hungry : int,\n+    m: PhantomData<U>\n }\n \n impl<U> cat<U> {\n@@ -22,7 +24,8 @@ impl<U> cat<U> {\n fn cat<U>(in_x : uint, in_y : int) -> cat<U> {\n     cat {\n         meows: in_x,\n-        how_hungry: in_y\n+        how_hungry: in_y,\n+        m: PhantomData\n     }\n }\n "}, {"sha": "30ed0b8e4024581b9f2c360208b4fb581bcd9cd2", "filename": "src/test/run-pass/dst-coercions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fdst-coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fdst-coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-coercions.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,7 @@\n // Test coercions involving DST and/or raw pointers\n \n struct S;\n-trait T {}\n+trait T { fn dummy(&self) { } }\n impl T for S {}\n \n pub fn main() {"}, {"sha": "023376ce4736ee6833e205314e4017e885cd023e", "filename": "src/test/run-pass/enum-null-pointer-opt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -16,7 +16,7 @@ use std::mem::size_of;\n use std::rc::Rc;\n use std::sync::Arc;\n \n-trait Trait {}\n+trait Trait { fn dummy(&self) { } }\n \n fn main() {\n     // Functions"}, {"sha": "382c5c58e92ee70adfde48df8f9c2c248706f94b", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,21 +15,19 @@\n struct LM { resize_at: uint, size: uint }\n \n enum HashMap<K,V> {\n-    HashMap_(LM)\n+    HashMap_(LM, Vec<(K,V)>)\n }\n \n-impl<K,V> Copy for HashMap<K,V> {}\n-\n fn linear_map<K,V>() -> HashMap<K,V> {\n     HashMap::HashMap_(LM{\n         resize_at: 32,\n-        size: 0})\n+        size: 0}, Vec::new())\n }\n \n impl<K,V> HashMap<K,V> {\n     pub fn len(&mut self) -> uint {\n         match *self {\n-            HashMap::HashMap_(l) => l.size\n+            HashMap::HashMap_(ref l, _) => l.size\n         }\n     }\n }"}, {"sha": "94652e30fe64f2ac86fd1419607c1bc114b35610", "filename": "src/test/run-pass/export-non-interference.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef42c2befd9451cd913de60539487a483ae9deac/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef42c2befd9451cd913de60539487a483ae9deac/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference.rs?ref=ef42c2befd9451cd913de60539487a483ae9deac", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-enum list_cell<T> { cons(Box<list_cell<T>>), nil }\n-\n-pub fn main() { }"}, {"sha": "bf02b82d1a0754d5fbc8678965a4652417296aea", "filename": "src/test/run-pass/generic-default-type-params-cross-crate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,13 +12,13 @@\n \n extern crate default_type_params_xc;\n \n-struct Vec<T, A = default_type_params_xc::Heap>;\n+struct Vec<T, A = default_type_params_xc::Heap>(Option<(T,A)>);\n \n struct Foo;\n \n fn main() {\n-    let _a = Vec::<int>;\n-    let _b = Vec::<int, default_type_params_xc::FakeHeap>;\n-    let _c = default_type_params_xc::FakeVec::<int>;\n-    let _d = default_type_params_xc::FakeVec::<int, Foo>;\n+    let _a = Vec::<int>(None);\n+    let _b = Vec::<int, default_type_params_xc::FakeHeap>(None);\n+    let _c = default_type_params_xc::FakeVec::<int> { f: None };\n+    let _d = default_type_params_xc::FakeVec::<int, Foo> { f: None };\n }"}, {"sha": "7b16bb867e79c30004a1ac777e9a0c8fc2efe591", "filename": "src/test/run-pass/hrtb-opt-in-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -18,15 +18,15 @@\n \n #![allow(dead_code)]\n \n-use std::marker;\n+use std::marker::PhantomData;\n \n #[derive(Copy)]\n struct Foo<T> { x: T }\n \n type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n enum TyS<'tcx> {\n-    Boop(marker::InvariantLifetime<'tcx>)\n+    Boop(PhantomData<*mut &'tcx ()>)\n }\n \n #[derive(Copy)]"}, {"sha": "e4026a8fd0118a7fd5ea44920cabf0072ddb4548", "filename": "src/test/run-pass/inner-static.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Finner-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Finner-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finner-static.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,9 +13,9 @@\n extern crate inner_static;\n \n pub fn main() {\n-    let a = inner_static::A::<()>;\n-    let b = inner_static::B::<()>;\n-    let c = inner_static::test::A::<()>;\n+    let a = inner_static::A::<()> { v: () };\n+    let b = inner_static::B::<()> { v: () };\n+    let c = inner_static::test::A::<()> { v: () };\n     assert_eq!(a.bar(), 2);\n     assert_eq!(b.bar(), 4);\n     assert_eq!(c.bar(), 6);"}, {"sha": "da73c4b27ac4420e8b2145fc0b0a49c0e0f108c4", "filename": "src/test/run-pass/issue-10456.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-10456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-10456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10456.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -14,7 +14,9 @@ pub trait Bar {\n     fn bar(&self);\n }\n \n-pub trait Baz {}\n+pub trait Baz {\n+    fn baz(&self) { }\n+}\n \n impl<T: Baz> Bar for T {\n     fn bar(&self) {}"}, {"sha": "174a69e1135cdf7a766ada2f71a70984dd537e7d", "filename": "src/test/run-pass/issue-10802.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-10802.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-10802.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10802.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -29,7 +29,7 @@ impl Drop for DroppableEnum {\n     }\n }\n \n-trait MyTrait { }\n+trait MyTrait { fn dummy(&self) { } }\n impl MyTrait for Box<DroppableStruct> {}\n impl MyTrait for Box<DroppableEnum> {}\n "}, {"sha": "7fab6662ee01c3d3ee02d3bca9b5e9cf55228654", "filename": "src/test/run-pass/issue-10902.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-10902.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-10902.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10902.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n pub mod two_tuple {\n-    pub trait T {}\n+    pub trait T { fn dummy(&self) { } }\n     pub struct P<'a>(&'a (T + 'a), &'a (T + 'a));\n     pub fn f<'a>(car: &'a T, cdr: &'a T) -> P<'a> {\n         P(car, cdr)\n     }\n }\n \n pub mod two_fields {\n-    pub trait T {}\n+    pub trait T { fn dummy(&self) { } }\n     pub struct P<'a> { car: &'a (T + 'a), cdr: &'a (T + 'a) }\n     pub fn f<'a>(car: &'a T, cdr: &'a T) -> P<'a> {\n         P{ car: car, cdr: cdr }"}, {"sha": "1325b51a54ff2b6a4380f38bb7d64f8d9420846f", "filename": "src/test/run-pass/issue-11205.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11205.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,7 +12,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-trait Foo {}\n+trait Foo { fn dummy(&self) { } }\n impl Foo for int {}\n fn foo(_: [&Foo; 2]) {}\n fn foos(_: &[&Foo]) {}"}, {"sha": "26634fabf5a1542f51726873c768f0689c67057b", "filename": "src/test/run-pass/issue-11384.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-11384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-11384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11384.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Common {}\n+trait Common { fn dummy(&self) { } }\n \n impl<'t, T> Common for (T, &'t T) {}\n "}, {"sha": "3c69377b375c6597cd865aa23f5af8cdb3ef1125", "filename": "src/test/run-pass/issue-11612.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-11612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-11612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11612.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,7 +12,7 @@\n // We weren't updating the auto adjustments with all the resolved\n // type information after type check.\n \n-trait A {}\n+trait A { fn dummy(&self) { } }\n \n struct B<'a, T:'a> {\n     f: &'a T"}, {"sha": "7cccac4483d49da1edfed2dd0c397493dc45c16d", "filename": "src/test/run-pass/issue-11677.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-11677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-11677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11677.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -14,13 +14,18 @@\n \n // this code used to cause an ICE\n \n-trait X<T> {}\n+use std::marker;\n+\n+trait X<T> {\n+    fn dummy(&self) -> T { panic!() }\n+}\n \n struct S<T> {f: Box<X<T>+'static>,\n              g: Box<X<T>+'static>}\n \n struct F;\n-impl X<int> for F {}\n+impl X<int> for F {\n+}\n \n fn main() {\n   S {f: box F, g: box F};"}, {"sha": "64807dc44e061002632daecc7ade4bcb8a94eb7c", "filename": "src/test/run-pass/issue-13105.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-13105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-13105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13105.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo {\n+use std::marker::MarkerTrait;\n+\n+trait Foo : MarkerTrait {\n     fn quux(u8) {}\n }\n "}, {"sha": "4f3db1352bbd234d66b6ab0380cc91fe50aaf991", "filename": "src/test/run-pass/issue-14399.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-14399.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-14399.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14399.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -19,7 +19,7 @@\n #[derive(Clone)]\n struct B1;\n \n-trait A {}\n+trait A : std::marker::MarkerTrait {}\n impl A for B1 {}\n \n fn main() {"}, {"sha": "71d88ee6215103a991f81a0a2ea904f45ad3cf16", "filename": "src/test/run-pass/issue-14589.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-14589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-14589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14589.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -17,17 +17,18 @@\n fn main() {\n     send::<Box<Foo>>(box Output(0));\n     Test::<Box<Foo>>::foo(box Output(0));\n-    Test::<Box<Foo>>.send(box Output(0));\n+    Test::<Box<Foo>>::new().send(box Output(0));\n }\n \n fn send<T>(_: T) {}\n \n-struct Test<T>;\n+struct Test<T> { marker: std::marker::PhantomData<T> }\n impl<T> Test<T> {\n+    fn new() -> Test<T> { Test { marker: ::std::marker::PhantomData } }\n     fn foo(_: T) {}\n     fn send(&self, _: T) {}\n }\n \n-trait Foo {}\n+trait Foo { fn dummy(&self) { }}\n struct Output(int);\n impl Foo for Output {}"}, {"sha": "6335f79be6c7aae7b547f67e33baa240f352fce9", "filename": "src/test/run-pass/issue-14958.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-14958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-14958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14958.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(unboxed_closures)]\n \n-trait Foo {}\n+trait Foo { fn dummy(&self) { }}\n \n struct Bar;\n "}, {"sha": "53d0f7dae05773bf0c3f630d61114779c89d3c52", "filename": "src/test/run-pass/issue-14959.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-14959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-14959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14959.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,16 +12,16 @@\n \n use std::ops::Fn;\n \n-trait Response {}\n-trait Request {}\n+trait Response { fn dummy(&self) { } }\n+trait Request { fn dummy(&self) { } }\n trait Ingot<R, S> {\n     fn enter(&mut self, _: &mut R, _: &mut S, a: &mut Alloy) -> Status;\n }\n \n #[allow(dead_code)]\n struct HelloWorld;\n \n-struct SendFile<'a>;\n+struct SendFile;\n struct Alloy;\n enum Status {\n     Continue\n@@ -33,7 +33,7 @@ impl Alloy {\n     }\n }\n \n-impl<'a, 'b> Fn<(&'b mut (Response+'b),)> for SendFile<'a> {\n+impl<'b> Fn<(&'b mut (Response+'b),)> for SendFile {\n     type Output = ();\n \n     extern \"rust-call\" fn call(&self, (_res,): (&'b mut (Response+'b),)) {}"}, {"sha": "6a4f78442d149943ded6817b5663f3580dbf339c", "filename": "src/test/run-pass/issue-15858.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-15858.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-15858.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15858.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,21 +12,21 @@\n \n static mut DROP_RAN: bool = false;\n \n-trait Bar<'b> {\n+trait Bar {\n     fn do_something(&mut self);\n }\n \n-struct BarImpl<'b>;\n+struct BarImpl;\n \n-impl<'b> Bar<'b> for BarImpl<'b> {\n+impl Bar for BarImpl {\n     fn do_something(&mut self) {}\n }\n \n \n-struct Foo<B>;\n+struct Foo<B>(B);\n \n #[unsafe_destructor]\n-impl<'b, B: Bar<'b>> Drop for Foo<B> {\n+impl<B: Bar> Drop for Foo<B> {\n     fn drop(&mut self) {\n         unsafe {\n             DROP_RAN = true;\n@@ -37,7 +37,7 @@ impl<'b, B: Bar<'b>> Drop for Foo<B> {\n \n fn main() {\n     {\n-       let _x: Foo<BarImpl> = Foo;\n+       let _x: Foo<BarImpl> = Foo(BarImpl);\n     }\n     unsafe {\n         assert_eq!(DROP_RAN, true);"}, {"sha": "1ba7b142e5e15c957f35d44fd3de35ebc9f36f70", "filename": "src/test/run-pass/issue-16596.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-16596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-16596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16596.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait MatrixRow {}\n+trait MatrixRow { fn dummy(&self) { }}\n \n struct Mat;\n "}, {"sha": "4e57c55c5f755fd994b1b416f79dd3c6263a8016", "filename": "src/test/run-pass/issue-16643.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-16643.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-16643.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16643.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,5 +13,5 @@\n extern crate \"issue-16643\" as i;\n \n pub fn main() {\n-    i::TreeBuilder::<uint>.process_token();\n+    i::TreeBuilder { h: 3u }.process_token();\n }"}, {"sha": "196c148f19331d4ed5d82f33b0dc0da565583936", "filename": "src/test/run-pass/issue-17662.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-17662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-17662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17662.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,12 +12,14 @@\n \n extern crate \"issue-17662\" as i;\n \n-struct Bar<'a>;\n+use std::marker;\n+\n+struct Bar<'a> { m: marker::PhantomData<&'a ()> }\n \n impl<'a> i::Foo<'a, uint> for Bar<'a> {\n     fn foo(&self) -> uint { 5u }\n }\n \n pub fn main() {\n-    assert_eq!(i::foo(&Bar), 5);\n+    assert_eq!(i::foo(&Bar { m: marker::PhantomData }), 5);\n }"}, {"sha": "de9611f259227caf28b801016b3fec51c246774c", "filename": "src/test/run-pass/issue-17732.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-17732.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-17732.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17732.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,8 +10,9 @@\n \n trait Person {\n     type string;\n+    fn dummy(&self) { }\n }\n \n-struct Someone<P: Person>;\n+struct Someone<P: Person>(std::marker::PhantomData<P>);\n \n fn main() {}"}, {"sha": "2f1b0342b8e04ad599d56f9ee164aa53b569a6f3", "filename": "src/test/run-pass/issue-17771.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-17771.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-17771.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17771.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Aaa {}\n+trait Aaa { fn dummy(&self) { } }\n \n impl<'a> Aaa for &'a mut (Aaa + 'a) {}\n "}, {"sha": "a976eccf89ec4c3166d9e366d66f1c4cc6635499", "filename": "src/test/run-pass/issue-17816.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-17816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-17816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17816.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,9 +10,11 @@\n \n #![feature(unboxed_closures)]\n \n+use std::marker::PhantomData;\n+\n fn main() {\n-    struct Symbol<'a, F: Fn(Vec<&'a str>) -> &'a str> { function: F }\n+    struct Symbol<'a, F: Fn(Vec<&'a str>) -> &'a str> { function: F, marker: PhantomData<&'a ()> }\n     let f = |x: Vec<&str>| -> &str \"foobar\";\n-    let sym = Symbol { function: f };\n+    let sym = Symbol { function: f, marker: PhantomData };\n     (sym.function)(vec![]);\n }"}, {"sha": "58a0872a5719b1ee2ef54d5ab7a338d3bf35ff95", "filename": "src/test/run-pass/issue-17904.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-17904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-17904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17904.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Foo<T> where T: Copy;\n+// Test that we can parse where clauses on various forms of tuple\n+// structs.\n+\n struct Bar<T>(T) where T: Copy;\n struct Bleh<T, U>(T, U) where T: Copy, U: Sized;\n struct Baz<T> where T: Copy {"}, {"sha": "67b3239d35197044725b5f79c1011e4b9ef40af5", "filename": "src/test/run-pass/issue-18232.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-18232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-18232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18232.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Cursor<'a>;\n+struct Cursor<'a>(::std::marker::PhantomData<&'a ()>);\n \n trait CursorNavigator {\n     fn init_cursor<'a, 'b:'a>(&'a self, cursor: &mut Cursor<'b>) -> bool;\n@@ -23,7 +23,7 @@ impl CursorNavigator for SimpleNavigator {\n }\n \n fn main() {\n-    let mut c = Cursor;\n+    let mut c = Cursor(::std::marker::PhantomData);\n     let n = SimpleNavigator;\n     n.init_cursor(&mut c);\n }"}, {"sha": "16dd84315ed2cdadfcd1a7300b7ef1572aca864b", "filename": "src/test/run-pass/issue-18906.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-18906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-18906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18906.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -24,7 +24,7 @@ fn bar<K, Q>(k: &K, q: &Q) where K: Borrow<Q>, Q: Foo {\n     q.foo(k.borrow())\n }\n \n-struct MyTree<K>;\n+struct MyTree<K>(K);\n \n impl<K> MyTree<K> {\n     // This caused a failure in #18906"}, {"sha": "222f67af437ef327ad3232e8a972e05ef3c67d0b", "filename": "src/test/run-pass/issue-19121.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19121.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,6 +13,8 @@\n \n trait Foo {\n     type A;\n+\n+    fn dummy(&self) { }\n }\n \n fn bar(x: &Foo) {}"}, {"sha": "cf0f48e025a0e037dd508ee1612c3a0555300f66", "filename": "src/test/run-pass/issue-19129-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19129-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19129-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19129-2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,7 @@\n trait Trait<Input> {\n     type Output;\n \n-    fn method() -> bool { false }\n+    fn method(&self, i: Input) -> bool { false }\n }\n \n fn main() {}"}, {"sha": "5e6dd567d63288ff4c2621fc30f5efc25d91b897", "filename": "src/test/run-pass/issue-19135.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19135.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19135.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19135.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,13 +10,15 @@\n \n #![feature(unboxed_closures)]\n \n+use std::marker::PhantomData;\n+\n #[derive(Debug)]\n-struct LifetimeStruct<'a>;\n+struct LifetimeStruct<'a>(PhantomData<&'a ()>);\n \n fn main() {\n     takes_hrtb_closure(|lts| println!(\"{:?}\", lts));\n }\n \n fn takes_hrtb_closure<F: for<'a>FnMut(LifetimeStruct<'a>)>(mut f: F) {\n-    f(LifetimeStruct);\n+    f(LifetimeStruct(PhantomData));\n }"}, {"sha": "8b5269ab92f03f89848ce94021d39671c56d70e6", "filename": "src/test/run-pass/issue-19358.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19358.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19358.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19358.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Trait {}\n+trait Trait { fn dummy(&self) { } }\n \n #[derive(Debug)]\n struct Foo<T: Trait> {"}, {"sha": "e603167b26be0a0c41b741d9d482e521fc4a128e", "filename": "src/test/run-pass/issue-19398.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19398.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n trait T {\n-    unsafe extern \"Rust\" fn foo();\n+    unsafe extern \"Rust\" fn foo(&self);\n }\n \n impl T for () {\n-    unsafe extern \"Rust\" fn foo() {}\n+    unsafe extern \"Rust\" fn foo(&self) {}\n }\n \n fn main() {}"}, {"sha": "38a7af3a69597b72b3b48412ccfc2a0e490d5358", "filename": "src/test/run-pass/issue-19479.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19479.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19479.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19479.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,12 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Base {}\n+trait Base {\n+    fn dummy(&self) { }\n+}\n trait AssocA {\n     type X: Base;\n+    fn dummy(&self) { }\n }\n trait AssocB {\n     type Y: Base;\n+    fn dummy(&self) { }\n }\n impl<T: AssocA> AssocB for T {\n     type Y = <T as AssocA>::X;"}, {"sha": "7bb0d055b844d9279925252e47810a88588aa10e", "filename": "src/test/run-pass/issue-19631.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19631.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19631.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19631.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,6 +10,7 @@\n \n trait PoolManager {\n     type C;\n+    fn dummy(&self) { }\n }\n \n struct InnerPool<M> {"}, {"sha": "4339339d74c88761f865def4492e3abf71e0cc01", "filename": "src/test/run-pass/issue-19632.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19632.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-19632.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19632.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,6 +10,7 @@\n \n trait PoolManager {\n     type C;\n+    fn dummy(&self) { }\n }\n \n struct InnerPool<M: PoolManager> {"}, {"sha": "572a0d825282e7c5425690b47ef056f02954ae8b", "filename": "src/test/run-pass/issue-20055-box-trait.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-20055-box-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-20055-box-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20055-box-trait.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -16,7 +16,9 @@\n // whichever arm is run, and subsequently dropped at the end of the\n // statement surrounding the `match`.\n \n-trait Boo { }\n+trait Boo {\n+    fn dummy(&self) { }\n+}\n \n impl Boo for [i8; 1] { }\n impl Boo for [i8; 2] { }"}, {"sha": "2f9e8feed248234be96d211da10bc540442f03f7", "filename": "src/test/run-pass/issue-20343.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-20343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-20343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20343.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -16,7 +16,7 @@ struct B { b: u32 }\n struct C;\n struct D;\n \n-trait T<A> {}\n+trait T<A> { fn dummy(&self, a: A) { } }\n impl<A> T<A> for () {}\n \n impl B {"}, {"sha": "97c06ac98265fd6a8bec89b6cf5b93eaead6c849", "filename": "src/test/run-pass/issue-20763-1.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-20763-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-20763-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20763-1.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait T0 { type O; }\n+trait T0 {\n+    type O;\n+    fn dummy(&self) { }\n+}\n \n struct S<A>(A);\n impl<A> T0 for S<A> { type O = A; }"}, {"sha": "d97017635718cfbcda8e502094d2b161c79ad09d", "filename": "src/test/run-pass/issue-20763-2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-20763-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-20763-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20763-2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait T0 { type O; }\n+trait T0 {\n+    type O;\n+    fn dummy(&self) { }\n+}\n \n struct S<A>(A);\n impl<A> T0 for S<A> { type O = A; }"}, {"sha": "71bb3d39fe1d6c01dd61832864ebea9030ad0bb7", "filename": "src/test/run-pass/issue-21363.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-21363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-21363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21363.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,6 +12,7 @@\n \n trait Iterator {\n     type Item;\n+    fn dummy(&self) { }\n }\n \n impl<'a, T> Iterator for &'a mut (Iterator<Item=T> + 'a) {"}, {"sha": "55b61dd1945566f88f5740d7de4503aaad6c3439", "filename": "src/test/run-pass/issue-21909.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-21909.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-21909.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21909.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,11 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait A<X> {}\n+trait A<X> {\n+    fn dummy(&self, arg: X);\n+}\n \n trait B {\n     type X;\n     type Y: A<Self::X>;\n+\n+    fn dummy(&self);\n }\n \n fn main () { }"}, {"sha": "5529d51b408c0782dde9c985ee71c364f211a5f3", "filename": "src/test/run-pass/issue-2311-2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait clam<A> { }\n+trait clam<A> {\n+    fn get(self) -> A;\n+}\n+\n struct foo<A> {\n     x: A,\n }"}, {"sha": "b6b3114e2a487c3a07963eb8a6a1e39bfb2b1219", "filename": "src/test/run-pass/issue-2311.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-2311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-2311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait clam<A> { }\n+trait clam<A> { fn get(self) -> A; }\n trait foo<A> {\n    fn bar<B,C:clam<A>>(&self, c: C) -> B;\n }"}, {"sha": "3f273b56efd6cc4ab90cfec83fa4f28d3979e2d1", "filename": "src/test/run-pass/issue-2312.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2312.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,7 @@\n \n // Testing that the B's are resolved\n \n-trait clam<A> { }\n+trait clam<A> { fn get(self) -> A; }\n \n struct foo(int);\n "}, {"sha": "c005699ce30b4f19911944ed5d64f60730a917f5", "filename": "src/test/run-pass/issue-2611-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,15 +12,15 @@\n // than the traits require.\n \n trait A {\n-  fn b<C:Sync,D>(x: C) -> C;\n+  fn b<C:Sync,D>(&self, x: C) -> C;\n }\n \n struct E {\n  f: int\n }\n \n impl A for E {\n-  fn b<F,G>(_x: F) -> F { panic!() }\n+  fn b<F,G>(&self, _x: F) -> F { panic!() }\n   //~^ ERROR in method `b`, type parameter 0 has 1 bound, but\n }\n "}, {"sha": "a7b53db6b0553f173988fa4b63e33ada1eac2fca", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,9 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-trait hax { }\n+trait hax {\n+    fn dummy(&self) { }\n+}\n impl<A> hax for A { }\n \n fn perform_hax<T: 'static>(x: Box<T>) -> Box<hax+'static> {"}, {"sha": "1594b94879cee099cdb31a22a7eb6bc9f1c2921d", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,9 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-trait hax { }\n+trait hax {\n+    fn dummy(&self) { }\n+}\n impl<A> hax for A { }\n \n fn perform_hax<T: 'static>(x: Box<T>) -> Box<hax+'static> {"}, {"sha": "d660f300ada99f4ac26cb4a86734966443c22d19", "filename": "src/test/run-pass/issue-4107.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-4107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-4107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4107.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -9,14 +9,14 @@\n // except according to those terms.\n \n pub fn main() {\n-    let _id: &Mat2<f64> = &Matrix::identity();\n+    let _id: &Mat2<f64> = &Matrix::identity(1.0);\n }\n \n-pub trait Index<Index,Result> { }\n+pub trait Index<Index,Result> { fn get(&self, Index) -> Result { panic!() } }\n pub trait Dimensional<T>: Index<uint, T> { }\n \n-pub struct Mat2<T> { x: () }\n-pub struct Vec2<T> { x: () }\n+pub struct Mat2<T> { x: T }\n+pub struct Vec2<T> { x: T }\n \n impl<T> Dimensional<Vec2<T>> for Mat2<T> { }\n impl<T> Index<uint, Vec2<T>> for Mat2<T> { }\n@@ -25,9 +25,9 @@ impl<T> Dimensional<T> for Vec2<T> { }\n impl<T> Index<uint, T> for Vec2<T> { }\n \n pub trait Matrix<T,V>: Dimensional<V> {\n-    fn identity() -> Self;\n+    fn identity(t:T) -> Self;\n }\n \n impl<T> Matrix<T, Vec2<T>> for Mat2<T> {\n-    fn identity() -> Mat2<T> { Mat2{ x: () } }\n+    fn identity(t:T) -> Mat2<T> { Mat2{ x: t } }\n }"}, {"sha": "a6f3771bf62b450aeb9c6ab0fbdca55dd98865d3", "filename": "src/test/run-pass/issue-5192.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-5192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-5192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5192.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,6 +12,7 @@\n #![feature(box_syntax)]\n \n pub trait EventLoop {\n+    fn dummy(&self) { }\n }\n \n pub struct UvEventLoop {"}, {"sha": "59bca87bed0b61a8432cf09be88ff86ebaf2ea17", "filename": "src/test/run-pass/issue-5708.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5708.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -48,7 +48,9 @@ pub fn main() {\n \n \n // minimal\n-pub trait MyTrait<T> { }\n+pub trait MyTrait<T> {\n+    fn dummy(&self, t: T) -> T { panic!() }\n+}\n \n pub struct MyContainer<'a, T> {\n     foos: Vec<&'a (MyTrait<T>+'a)> ,"}, {"sha": "1746a6281dc2694a33144dc917a69f8b32327af9", "filename": "src/test/run-pass/issue-6128.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6128.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -17,13 +17,17 @@ use std::collections::HashMap;\n \n trait Graph<Node, Edge> {\n     fn f(&self, Edge);\n+    fn g(&self, Node);\n \n }\n \n impl<E> Graph<int, E> for HashMap<int, int> {\n     fn f(&self, _e: E) {\n         panic!();\n     }\n+    fn g(&self, _e: int) {\n+        panic!();\n+    }\n }\n \n pub fn main() {"}, {"sha": "6e608d34bd5781d9a4777f27fb6b37d51d007ca9", "filename": "src/test/run-pass/issue-6318.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-6318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-6318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6318.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,7 +15,9 @@ pub enum Thing {\n     A(Box<Foo+'static>)\n }\n \n-pub trait Foo {}\n+pub trait Foo {\n+    fn dummy(&self) { }\n+}\n \n pub struct Struct;\n "}, {"sha": "77cfc7f0cf607dc2aa15b84089e2c1d9c11b170a", "filename": "src/test/run-pass/issue-7575.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-7575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-7575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7575.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,6 +10,7 @@\n \n trait Foo {\n     fn new() -> bool { false }\n+    fn dummy(&self) { }\n }\n \n trait Bar {"}, {"sha": "736860947f23cb0c149718be36ba0a940a6bfd2b", "filename": "src/test/run-pass/issue-7673-cast-generically-implemented-trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -19,7 +19,10 @@\n \n pub fn main() {}\n \n-trait A {}\n+trait A {\n+    fn dummy(&self) { }\n+}\n+\n impl<T: 'static> A for T {}\n \n fn owned2<T: 'static>(a: Box<T>) { a as Box<A>; }"}, {"sha": "3eb593708bee82e3651a74875f4ec1e418bb1e70", "filename": "src/test/run-pass/issue-7911.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-7911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-7911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7911.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -14,7 +14,9 @@\n // with different mutability in macro in two methods\n \n #![allow(unused_variable)] // unused foobar_immut + foobar_mut\n-trait FooBar {}\n+trait FooBar {\n+    fn dummy(&self) { }\n+}\n struct Bar(i32);\n struct Foo { bar: Bar }\n "}, {"sha": "7bc8dbe616ff31315a38f842227f17955ba6fdac", "filename": "src/test/run-pass/issue-8248.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-8248.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-8248.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8248.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait A {}\n+trait A {\n+    fn dummy(&self) { }\n+}\n struct B;\n impl A for B {}\n "}, {"sha": "83c9e9bf4505334dd990dc3e6f6c4a81bd00cd05", "filename": "src/test/run-pass/issue-8249.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-8249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-8249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8249.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait A {}\n+trait A {\n+    fn dummy(&self) { }\n+}\n struct B;\n impl A for B {}\n "}, {"sha": "aa1e65efaa41e49b87a8651caa213af1b2091278", "filename": "src/test/run-pass/issue-9719.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-9719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fissue-9719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9719.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,15 +13,19 @@ mod a {\n         A(T),\n     }\n \n-    pub trait X {}\n+    pub trait X {\n+        fn dummy(&self) { }\n+    }\n     impl X for int {}\n \n     pub struct Z<'a>(Enum<&'a (X+'a)>);\n     fn foo() { let x = 42; let z = Z(Enum::A(&x as &X)); let _ = z; }\n }\n \n mod b {\n-    trait X {}\n+    trait X {\n+        fn dummy(&self) { }\n+    }\n     impl X for int {}\n     struct Y<'a>{\n         x:Option<&'a (X+'a)>,"}, {"sha": "f180ffcd4e823763d6f601abb448b3d3ab640ba0", "filename": "src/test/run-pass/lint-cstack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Flint-cstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Flint-cstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-cstack.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -15,7 +15,7 @@ extern {\n }\n \n trait A {\n-    fn foo() {\n+    fn foo(&self) {\n         unsafe {\n             rust_get_test_int();\n         }"}, {"sha": "cec9753a2fecaed27bcb197162ed4f4fef01cde2", "filename": "src/test/run-pass/method-early-bound-lifetimes-on-self.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fmethod-early-bound-lifetimes-on-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fmethod-early-bound-lifetimes-on-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-early-bound-lifetimes-on-self.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,7 +13,11 @@\n \n #![allow(dead_code)]\n \n-struct Cursor<'a>;\n+use std::marker;\n+\n+struct Cursor<'a> {\n+    m: marker::PhantomData<&'a ()>\n+}\n \n trait CursorNavigator {\n     fn init_cursor<'a, 'b:'a>(&'a self, cursor: &mut Cursor<'b>) -> bool;\n@@ -28,7 +32,7 @@ impl CursorNavigator for SimpleNavigator {\n }\n \n fn main() {\n-    let mut c = Cursor;\n+    let mut c = Cursor { m: marker::PhantomData };\n     let n = SimpleNavigator;\n     n.init_cursor(&mut c);\n }"}, {"sha": "15eb2ae2e4b49dbfa97f5258e67d03a9c7b1d448", "filename": "src/test/run-pass/method-recursive-blanket-impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fmethod-recursive-blanket-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fmethod-recursive-blanket-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-recursive-blanket-impl.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -17,16 +17,16 @@ use std::marker::Sized;\n \n // Note: this must be generic for the problem to show up\n trait Foo<A> {\n-    fn foo(&self);\n+    fn foo(&self, a: A);\n }\n \n impl Foo<u8> for [u8] {\n-    fn foo(&self) {}\n+    fn foo(&self, a: u8) {}\n }\n \n impl<'a, A, T> Foo<A> for &'a T where T: Foo<A> {\n-    fn foo(&self) {\n-        Foo::foo(*self)\n+    fn foo(&self, a: A) {\n+        Foo::foo(*self, a)\n     }\n }\n "}, {"sha": "1164ef1a3c98e2406e83e7c0992cd2b0440c383a", "filename": "src/test/run-pass/monomorphized-callees-with-ty-params-3314.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::marker::MarkerTrait;\n \n-trait Serializer {\n+trait Serializer : MarkerTrait {\n }\n \n trait Serializable {"}, {"sha": "d50f2efe0e7b4cab54f64e42ffb2c990619cfa43", "filename": "src/test/run-pass/overloaded-autoderef-vtable.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,8 @@\n use std::ops::Deref;\n \n struct DerefWithHelper<H, T> {\n-    helper: H\n+    helper: H,\n+    value: T\n }\n \n trait Helper<T> {\n@@ -39,6 +40,7 @@ impl Foo {\n }\n \n pub fn main() {\n-    let x: DerefWithHelper<Option<Foo>, Foo> = DerefWithHelper { helper: Some(Foo {x: 5}) };\n+    let x: DerefWithHelper<Option<Foo>, Foo> =\n+        DerefWithHelper { helper: Some(Foo {x: 5}), value: Foo { x: 2 } };\n     assert!(x.foo() == 5);\n }"}, {"sha": "2ef9e08134cf7259fcf5dde6a4f99a59ac889bdb", "filename": "src/test/run-pass/overloaded-calls-param-vtables.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,10 +12,11 @@\n \n #![feature(unboxed_closures)]\n \n+use std::marker::PhantomData;\n use std::ops::Fn;\n use std::ops::Add;\n \n-struct G<A>;\n+struct G<A>(PhantomData<A>);\n \n impl<'a, A: Add<i32, Output=i32>> Fn<(A,)> for G<A> {\n     type Output = i32;\n@@ -27,5 +28,5 @@ impl<'a, A: Add<i32, Output=i32>> Fn<(A,)> for G<A> {\n \n fn main() {\n     // ICE trigger\n-    G(1_i32);\n+    (G(PhantomData))(1_i32);\n }"}, {"sha": "061c9168955a49c73db68dc7ba3700ed72b20a3d", "filename": "src/test/run-pass/parameterized-trait-with-bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fparameterized-trait-with-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fparameterized-trait-with-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparameterized-trait-with-bounds.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,12 +11,12 @@\n #![allow(dead_code)]\n \n \n-trait A<T> {}\n-trait B<T, U> {}\n-trait C<'a, U> {}\n+trait A<T> { fn get(self) -> T; }\n+trait B<T, U> { fn get(self) -> (T,U); }\n+trait C<'a, U> { fn get(self) -> &'a U; }\n \n mod foo {\n-    pub trait D<'a, T> {}\n+    pub trait D<'a, T> { fn get(self) -> &'a T; }\n }\n \n fn foo1<T>(_: &(A<T> + Send)) {}"}, {"sha": "e9b8e694d60605c3e445102a97571429b1eaada5", "filename": "src/test/run-pass/privacy-ns.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fprivacy-ns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fprivacy-ns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivacy-ns.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -19,6 +19,7 @@\n // public type, private value\n pub mod foo1 {\n     pub trait Bar {\n+        fn dummy(&self) { }\n     }\n     pub struct Baz;\n \n@@ -50,6 +51,7 @@ fn test_glob1() {\n // private type, public value\n pub mod foo2 {\n     trait Bar {\n+        fn dummy(&self) { }\n     }\n     pub struct Baz;\n \n@@ -81,6 +83,7 @@ fn test_glob2() {\n // public type, public value\n pub mod foo3 {\n     pub trait Bar {\n+        fn dummy(&self) { }\n     }\n     pub struct Baz;\n "}, {"sha": "80ae371e5091e76638e104697a0ff63799b7a450", "filename": "src/test/run-pass/regions-assoc-type-static-bound.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fregions-assoc-type-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fregions-assoc-type-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-assoc-type-static-bound.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,7 +11,10 @@\n // Test that the compiler considers the 'static bound declared in the\n // trait. Issue #20890.\n \n-trait Foo { type Value: 'static; }\n+trait Foo {\n+    type Value: 'static;\n+    fn dummy(&self) { }\n+}\n \n fn require_static<T: 'static>() {}\n "}, {"sha": "a06e0f6da785a1c7a4dc5079bb89b605627e2b84", "filename": "src/test/run-pass/regions-bound-lists-feature-gate-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fregions-bound-lists-feature-gate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fregions-bound-lists-feature-gate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-bound-lists-feature-gate-2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,7 +12,9 @@\n \n #![feature(issue_5723_bootstrap)]\n \n-trait Foo { }\n+trait Foo {\n+    fn dummy(&self) { }\n+}\n \n fn foo<'a, 'b, 'c:'a+'b, 'd>() {\n }"}, {"sha": "996583dc6de93eb49b1b9cfe67d7865f58636b28", "filename": "src/test/run-pass/regions-bound-lists-feature-gate.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fregions-bound-lists-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fregions-bound-lists-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-bound-lists-feature-gate.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,8 +12,9 @@\n \n #![feature(issue_5723_bootstrap)]\n \n-\n-trait Foo { }\n+trait Foo {\n+    fn dummy(&self) { }\n+}\n \n fn foo<'a>(x: Box<Foo + 'a>) {\n }"}, {"sha": "bdc0d41c94e823cdaa9777b1589aa5fb278c3f86", "filename": "src/test/run-pass/regions-early-bound-lifetime-in-assoc-fn.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fregions-early-bound-lifetime-in-assoc-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fregions-early-bound-lifetime-in-assoc-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-lifetime-in-assoc-fn.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -14,6 +14,8 @@\n // lifetime parameters must be early bound in the type of the\n // associated item.\n \n+use std::marker;\n+\n pub enum Value<'v> {\n     A(&'v str),\n     B,\n@@ -23,7 +25,9 @@ pub trait Decoder<'v> {\n     fn read(&mut self) -> Value<'v>;\n }\n \n-pub trait Decodable<'v, D: Decoder<'v>> {\n+pub trait Decodable<'v, D: Decoder<'v>>\n+    : marker::PhantomFn<(), &'v int>\n+{\n     fn decode(d: &mut D) -> Self;\n }\n "}, {"sha": "3f434a4838d42bb10f720f278e4be48660b5ea11", "filename": "src/test/run-pass/regions-early-bound-trait-param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -53,11 +53,11 @@ fn field_invoke2<'l, 'm, 'n>(x: &'n Struct2<'l,'m>) -> int {\n     x.f.short()\n }\n \n-trait MakerTrait<'o> {\n+trait MakerTrait {\n     fn mk() -> Self;\n }\n \n-fn make_val<'p, T:MakerTrait<'p>>() -> T {\n+fn make_val<T:MakerTrait>() -> T {\n     MakerTrait::mk()\n }\n \n@@ -80,7 +80,7 @@ impl<'s> Trait<'s> for (int,int) {\n     }\n }\n \n-impl<'t> MakerTrait<'t> for Box<Trait<'t>+'static> {\n+impl<'t> MakerTrait for Box<Trait<'t>+'static> {\n     fn mk() -> Box<Trait<'t>+'static> { box() (4,5) as Box<Trait> }\n }\n "}, {"sha": "a3288e2e1b90b1a80b2633cfa686095634720caf", "filename": "src/test/run-pass/regions-infer-bivariance.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ef42c2befd9451cd913de60539487a483ae9deac/src%2Ftest%2Frun-pass%2Fregions-infer-bivariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef42c2befd9451cd913de60539487a483ae9deac/src%2Ftest%2Frun-pass%2Fregions-infer-bivariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-bivariance.rs?ref=ef42c2befd9451cd913de60539487a483ae9deac", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that a type whose lifetime parameters is never used is\n-// inferred to be bivariant.\n-\n-use std::marker;\n-\n-struct Bivariant<'a>;\n-\n-fn use1<'short,'long>(c: Bivariant<'short>,\n-                      _where:Option<&'short &'long ()>) {\n-    let _: Bivariant<'long> = c;\n-}\n-\n-fn use2<'short,'long>(c: Bivariant<'long>,\n-                      _where:Option<&'short &'long ()>) {\n-    let _: Bivariant<'short> = c;\n-}\n-\n-pub fn main() {}"}, {"sha": "5964ac65d5f6e977dc24b1bc0c7226ab93ed3146", "filename": "src/test/run-pass/regions-no-bound-in-argument-cleanup.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,9 @@\n \n #![feature(unsafe_destructor)]\n \n-pub struct Foo<T>;\n+use std::marker;\n+\n+pub struct Foo<T>(marker::PhantomData<T>);\n \n impl<T> Iterator for Foo<T> {\n     type Item = T;"}, {"sha": "80c478afa644f2b2b1be49301bb3fd75fef35f18", "filename": "src/test/run-pass/regions-no-variance-from-fn-generics.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fregions-no-variance-from-fn-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fregions-no-variance-from-fn-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-no-variance-from-fn-generics.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,7 +12,9 @@\n // should not upset the variance inference for actual occurrences of\n // that lifetime in type expressions.\n \n-pub trait HasLife<'a> { }\n+pub trait HasLife<'a> {\n+    fn dummy(&'a self) { } // just to induce a variance on 'a\n+}\n \n trait UseLife01 {\n     fn refs<'a, H: HasLife<'a>>(&'a self) -> H;\n@@ -23,7 +25,11 @@ trait UseLife02 {\n }\n \n \n-pub trait HasType<T> { }\n+pub trait HasType<T>\n+{\n+    fn dummy(&self, t: T) -> T { panic!() }\n+}\n+\n \n trait UseLife03<T> {\n     fn refs<'a, H: HasType<&'a T>>(&'a self) -> H;"}, {"sha": "af2b2de8ab8ba19473b9108dc5601be028ea88e9", "filename": "src/test/run-pass/self-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fself-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fself-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-impl.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -29,6 +29,7 @@ pub struct Baz<X> {\n \n trait Bar<X> {\n     fn bar(x: Self, y: &Self, z: Box<Self>) -> Self;\n+    fn dummy(&self, x: X) { }\n }\n \n impl Bar<int> for Box<Baz<int>> {"}, {"sha": "2217dddbd21f0884a2efa04a48e7a97fb0a8ade6", "filename": "src/test/run-pass/simple-match-generic-tag.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fsimple-match-generic-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fsimple-match-generic-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-match-generic-tag.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-enum opt<T> { none, }\n+enum opt<T> { none, some(T) }\n \n pub fn main() {\n     let x = opt::none::<int>;\n-    match x { opt::none::<int> => { println!(\"hello world\"); } }\n+    match x {\n+        opt::none::<int> => { println!(\"hello world\"); }\n+        opt::some(_) => { }\n+    }\n }"}, {"sha": "340ad2a531a738188d19b7596dd5e99f859c81da", "filename": "src/test/run-pass/syntax-trait-polarity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fsyntax-trait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Fsyntax-trait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-trait-polarity.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,17 +10,17 @@\n \n #![feature(optin_builtin_traits)]\n \n-use std::marker::Send;\n+use std::marker::{MarkerTrait, Send};\n \n struct TestType;\n \n impl TestType {}\n \n-trait TestTrait {}\n+trait TestTrait : MarkerTrait {}\n \n impl !Send for TestType {}\n \n-struct TestType2<T>;\n+struct TestType2<T>(T);\n \n impl<T> TestType2<T> {}\n "}, {"sha": "76c62a83e758c4cdeea93c688da99ac12992f01f", "filename": "src/test/run-pass/trailing-comma.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrailing-comma.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,7 +12,7 @@\n \n fn f<T,>(_: T,) {}\n \n-struct Foo<T,>;\n+struct Foo<T,>(T);\n \n struct Bar;\n \n@@ -34,7 +34,7 @@ pub fn main() {\n     let [_, _, .., _,] = [1, 1, 1, 1,];\n     let [_, _, _.., _,] = [1, 1, 1, 1,];\n \n-    let x: Foo<int,> = Foo::<int,>;\n+    let x: Foo<int,> = Foo::<int,>(1);\n \n     Bar::f(0,);\n     Bar.g(0,);"}, {"sha": "ed25bf8b02e88fd6852338287eab01bc53640638", "filename": "src/test/run-pass/trait-bounds-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-trait Foo {\n+trait Foo : ::std::marker::MarkerTrait {\n }\n \n fn b(_x: Box<Foo+Send>) {"}, {"sha": "976120908b27ab376ebbee497f13573a3b07bca0", "filename": "src/test/run-pass/trait-bounds-on-structs-and-enums.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-bounds-on-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-bounds-on-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-on-structs-and-enums.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait U {}\n-trait T<X: U> {}\n+trait U : ::std::marker::MarkerTrait {}\n+trait T<X: U> { fn get(self) -> X; }\n \n-trait S2<Y: U> {\n+trait S2<Y: U> : ::std::marker::MarkerTrait {\n     fn m(x: Box<T<Y>+'static>) {}\n }\n "}, {"sha": "7135dad7d190c9d96950581753986c946157c04b", "filename": "src/test/run-pass/trait-bounds-recursion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-bounds-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-bounds-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-recursion.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,17 +10,17 @@\n \n trait I { fn i(&self) -> Self; }\n \n-trait A<T:I> {\n+trait A<T:I> : ::std::marker::MarkerTrait {\n     fn id(x:T) -> T { x.i() }\n }\n \n-trait J<T> { fn j(&self) -> Self; }\n+trait J<T> { fn j(&self) -> T; }\n \n-trait B<T:J<T>> {\n+trait B<T:J<T>> : ::std::marker::MarkerTrait {\n     fn id(x:T) -> T { x.j() }\n }\n \n-trait C {\n+trait C : ::std::marker::MarkerTrait {\n     fn id<T:J<T>>(x:T) -> T { x.j() }\n }\n "}, {"sha": "c9165050b9326ae1696496620cba76dcf44f77b2", "filename": "src/test/run-pass/trait-default-method-bound-subst4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -11,6 +11,7 @@\n \n trait A<T> {\n     fn g(&self, x: uint) -> uint { x }\n+    fn h(&self, x: T) { }\n }\n \n impl<T> A<T> for int { }"}, {"sha": "bd2bf430a686cd9f74b349e0f78a83f78fb0a5cb", "filename": "src/test/run-pass/trait-impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-impl.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -16,7 +16,8 @@ use traitimpl::Bar;\n \n static mut COUNT: uint = 1;\n \n-trait T {}\n+trait T : ::std::marker::MarkerTrait {\n+}\n \n impl<'a> T+'a {\n     fn foo(&self) {"}, {"sha": "f89eea46090d07884eb8d8795a54fb2a49d2c087", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -14,8 +14,7 @@\n use std::cmp::{PartialEq, PartialOrd};\n use std::num::NumCast;\n \n-pub trait TypeExt {}\n-\n+pub trait TypeExt : ::std::marker::MarkerTrait { }\n \n impl TypeExt for u8 {}\n impl TypeExt for u16 {}"}, {"sha": "8f3b325a513fe2f739a0d28f9c7ffd433d6de06e", "filename": "src/test/run-pass/trait-inheritance-static2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub trait MyEq { }\n+pub trait MyEq : ::std::marker::MarkerTrait { }\n \n-pub trait MyNum {\n+pub trait MyNum : ::std::marker::MarkerTrait {\n     fn from_int(int) -> Self;\n }\n "}, {"sha": "6f89490716f081d123628285840d0404d4c17222", "filename": "src/test/run-pass/trait-object-generics.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,11 +13,14 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n+use std::marker;\n+\n pub trait Trait2<A> {\n-    fn doit(&self);\n+    fn doit(&self) -> A;\n }\n \n pub struct Impl<A1, A2, A3> {\n+    m1: marker::PhantomData<(A1,A2,A3)>,\n     /*\n      * With A2 we get the ICE:\n      * task <unnamed> failed at 'index out of bounds: the len is 1 but the index is 1',\n@@ -28,13 +31,13 @@ pub struct Impl<A1, A2, A3> {\n \n impl<A1, A2, A3> Impl<A1, A2, A3> {\n     pub fn step(&self) {\n-        self.t.doit()\n+        self.t.doit();\n     }\n }\n \n // test for #8601\n \n-enum Type<T> { Constant }\n+enum Type<T> { Constant(T) }\n \n trait Trait<K,V> {\n     fn method(&self,Type<(K,V)>) -> int;\n@@ -46,5 +49,5 @@ impl<V> Trait<u8,V> for () {\n \n pub fn main() {\n     let a = box() () as Box<Trait<u8, u8>>;\n-    assert_eq!(a.method(Type::Constant), 0);\n+    assert_eq!(a.method(Type::Constant((1u8, 2u8))), 0);\n }"}, {"sha": "10439d5c86aa35721e6bb5e8ea4b8fd3a1717d4f", "filename": "src/test/run-pass/trait-static-method-overwriting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,15 +10,15 @@\n // except according to those terms.\n \n mod base {\n-    pub trait HasNew<T> {\n+    pub trait HasNew {\n         fn new() -> Self;\n     }\n \n     pub struct Foo {\n         dummy: (),\n     }\n \n-    impl ::base::HasNew<Foo> for Foo {\n+    impl ::base::HasNew for Foo {\n         fn new() -> Foo {\n             println!(\"Foo\");\n             Foo { dummy: () }\n@@ -29,7 +29,7 @@ mod base {\n         dummy: (),\n     }\n \n-    impl ::base::HasNew<Bar> for Bar {\n+    impl ::base::HasNew for Bar {\n         fn new() -> Bar {\n             println!(\"Bar\");\n             Bar { dummy: () }\n@@ -38,6 +38,6 @@ mod base {\n }\n \n pub fn main() {\n-    let _f: base::Foo = base::HasNew::<base::Foo>::new();\n-    let _b: base::Bar = base::HasNew::<base::Bar>::new();\n+    let _f: base::Foo = base::HasNew::new();\n+    let _b: base::Bar = base::HasNew::new();\n }"}, {"sha": "2d1ba7f39b27bbd8115525bf99c077c64d635279", "filename": "src/test/run-pass/unboxed-closures-infer-recursive-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-recursive-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-recursive-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-recursive-fn.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(core,unboxed_closures)]\n \n-use std::marker::CovariantType;\n+use std::marker::PhantomData;\n \n // Test that we are able to infer a suitable kind for a \"recursive\"\n // closure.  As far as I can tell, coding up a recursive closure\n@@ -20,12 +20,12 @@ use std::marker::CovariantType;\n \n struct YCombinator<F,A,R> {\n     func: F,\n-    marker: CovariantType<(A,R)>,\n+    marker: PhantomData<(A,R)>,\n }\n \n impl<F,A,R> YCombinator<F,A,R> {\n     fn new(f: F) -> YCombinator<F,A,R> {\n-        YCombinator { func: f, marker: CovariantType }\n+        YCombinator { func: f, marker: PhantomData }\n     }\n }\n "}, {"sha": "1d4eb0a75232d9b8f61f69cfa11dcfb8f8d119fc", "filename": "src/test/run-pass/unique-object-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Funique-object-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Funique-object-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-object-move.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -13,7 +13,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-pub trait EventLoop { }\n+pub trait EventLoop : ::std::marker::MarkerTrait { }\n \n pub struct UvEventLoop {\n     uvio: int"}, {"sha": "ae175d27b0a4ea09b08f9ae0bdbd75e7de00032a", "filename": "src/test/run-pass/unsized.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872ce479550a3d805babb0ca409dfc3cf6f52309/src%2Ftest%2Frun-pass%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized.rs?ref=872ce479550a3d805babb0ca409dfc3cf6f52309", "patch": "@@ -12,17 +12,19 @@\n \n // Test syntax checks for `?Sized` syntax.\n \n-trait T1 {}\n-pub trait T2 {}\n-trait T3<X: T1> : T2 {}\n-trait T4<X: ?Sized> {}\n-trait T5<X: ?Sized, Y> {}\n-trait T6<Y, X: ?Sized> {}\n-trait T7<X: ?Sized, Y: ?Sized> {}\n-trait T8<X: ?Sized+T2> {}\n-trait T9<X: T2 + ?Sized> {}\n-struct S1<X: ?Sized>;\n-enum E<X: ?Sized> {}\n+use std::marker::{PhantomData, PhantomFn};\n+\n+trait T1 : PhantomFn<Self> { }\n+pub trait T2 : PhantomFn<Self> { }\n+trait T3<X: T1> : T2 + PhantomFn<X> { }\n+trait T4<X: ?Sized> : PhantomFn<(Self,X)> {}\n+trait T5<X: ?Sized, Y> : PhantomFn<(Self,X,Y)> {}\n+trait T6<Y, X: ?Sized> : PhantomFn<(Self,X,Y)> {}\n+trait T7<X: ?Sized, Y: ?Sized> : PhantomFn<(Self,X,Y)> {}\n+trait T8<X: ?Sized+T2> : PhantomFn<(Self,X)> {}\n+trait T9<X: T2 + ?Sized> : PhantomFn<(Self,X)> {}\n+struct S1<X: ?Sized>(PhantomData<X>);\n+enum E<X: ?Sized> { E1(PhantomData<X>) }\n impl <X: ?Sized> T1 for S1<X> {}\n fn f<X: ?Sized>() {}\n type TT<T: ?Sized> = T;"}]}