{"sha": "6fe23719feb20c25a8b2693d1f196e72d8da9af5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZTIzNzE5ZmViMjBjMjVhOGIyNjkzZDFmMTk2ZTcyZDhkYTlhZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-14T06:43:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-14T06:43:03Z"}, "message": "Auto merge of #38914 - est31:tidy-gate-tests, r=nikomatsakis\n\nMake tidy check for lang gate tests\n\nAdd gate tests to the checks that tidy performs. Excerpt from the commit message of the main commit:\n\n    Require compile-fail tests for new lang features\n\n    Its non trivial to test lang feature gates, and people\n    forget to add such tests. So we extend the features lint\n    of the tidy tool to ensure that all new lang features\n    contain a new compile-fail test.\n\n    Of course, one could drop this requirement and just\n    grep all tests in run-pass for #![feature(abc)] and\n    then run this test again, removing the mention,\n    requiring that it fails.\n\n    But this only tests for the existence of a compilation\n    failure. Manual tests ensure that also the correct lines\n    spawn the error, and also test the actual error message.\n\n    For library features, it makes no sense to require such\n    a test, as here code is used that is generic for all\n    library features.\n\nThe tidy lint extension now checks the compile-fail test suite for occurences of \"gate-test-X\" where X is a feature. Alternatively, it also accepts file names with the form \"feature-gate-X.rs\". If a lang feature is found that has no such check, we emit a tidy error.\n\nI've applied the markings to all tests I could find in the test suite. I left a small (20 elements) whitelist of features that right now have no gate test, or where I couldn't find one. Once this PR gets merged, I'd like to close issue #22820 and open a new one on suggestion of @nikomatsakis to track the removal of all elements from that whitelist (already have a draft). Writing such a small test can be a good opportunity for a first contribution, so I won't touch it (let others have the fun xD).\n\ncc @brson , @pnkfelix (they both discussed about this in the issue linked above).", "tree": {"sha": "66579ca7f9dc5899b154077fe0c860a7d4158f8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66579ca7f9dc5899b154077fe0c860a7d4158f8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fe23719feb20c25a8b2693d1f196e72d8da9af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe23719feb20c25a8b2693d1f196e72d8da9af5", "html_url": "https://github.com/rust-lang/rust/commit/6fe23719feb20c25a8b2693d1f196e72d8da9af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fe23719feb20c25a8b2693d1f196e72d8da9af5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b13cc05c48ca82f410273eb4d65c439d7582f2b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b13cc05c48ca82f410273eb4d65c439d7582f2b1", "html_url": "https://github.com/rust-lang/rust/commit/b13cc05c48ca82f410273eb4d65c439d7582f2b1"}, {"sha": "c6f99b4aeab135bf0cc53bd871108ffc948950ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f99b4aeab135bf0cc53bd871108ffc948950ef", "html_url": "https://github.com/rust-lang/rust/commit/c6f99b4aeab135bf0cc53bd871108ffc948950ef"}], "stats": {"total": 245, "additions": 225, "deletions": 20}, "files": [{"sha": "58df1aae6d3f099815f5751b009e15745440d656", "filename": "COMPILER_TESTS.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/COMPILER_TESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/COMPILER_TESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/COMPILER_TESTS.md?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -45,6 +45,10 @@ whole, instead of just a few lines inside the test.\n * `should-fail` indicates that the test should fail; used for \"meta testing\",\n   where we test the compiletest program itself to check that it will generate\n   errors in appropriate scenarios. This header is ignored for pretty-printer tests.\n+* `gate-test-X` where `X` is a feature marks the test as \"gate test\" for feature X.\n+  Such tests are supposed to ensure that the compiler errors when usage of a gated\n+  feature is attempted without the proper `#![feature(X)]` tag.\n+  Each unstable lang feature is required to have a gate test.\n \n ## Revisions\n "}, {"sha": "cd9cc2237014913ef947b4ebeceab872c46aa810", "filename": "src/test/compile-fail/asm-gated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fasm-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fasm-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-gated.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-asm\n+\n fn main() {\n     unsafe {\n         asm!(\"\"); //~ ERROR inline assembly is not stable enough"}, {"sha": "222190de9fe9c4a25651f78858bc413f5f8bc245", "filename": "src/test/compile-fail/asm-gated2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fasm-gated2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fasm-gated2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-gated2.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-asm\n+\n fn main() {\n     unsafe {\n         println!(\"{}\", asm!(\"\")); //~ ERROR inline assembly is not stable"}, {"sha": "b341f7c78257a33bcc2e8ffd3e93f81cef0e3350", "filename": "src/test/compile-fail/attr-on-generic-formals-wo-feature-gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-wo-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-wo-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-wo-feature-gate.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -16,6 +16,8 @@\n // using `rustc_attrs` feature. There is a separate compile-fail/ test\n // ensuring that the attribute feature-gating works in this context.)\n \n+// gate-test-generic_param_attrs\n+\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n "}, {"sha": "f65968e0e1192cfb1841f2f492671abf7f5a0aac", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -10,6 +10,8 @@\n \n // Verifies all possible restrictions for statics values.\n \n+// gate-test-drop_types_in_const\n+\n #![feature(box_syntax)]\n \n use std::marker;"}, {"sha": "5b125d0e51c084878d441b8da936156737c7e3e8", "filename": "src/test/compile-fail/concat_idents-gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-concat_idents\n+\n const XY_1: i32 = 10;\n \n fn main() {"}, {"sha": "5a9ffe98c93cae0b8834dce062fd09cf3b0f8a45", "filename": "src/test/compile-fail/concat_idents-gate2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconcat_idents-gate2.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-concat_idents\n+\n const XY_1: i32 = 10;\n \n fn main() {"}, {"sha": "436244525e1c26c74be2169c27b224d45df5c4b8", "filename": "src/test/compile-fail/const-fn-stability.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-const_fn\n+\n // Test use of const fn without feature gate.\n \n const fn foo() -> usize { 0 } //~ ERROR const fn is unstable"}, {"sha": "c0fb94e8c42c94202be3abc4298455973f486443", "filename": "src/test/compile-fail/feature-gate-abi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-intrinsics\n+// gate-test-platform_intrinsics\n+// gate-test-abi_vectorcall\n+\n // Functions\n extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n extern \"platform-intrinsic\" fn f2() {} //~ ERROR platform intrinsics are experimental"}, {"sha": "dc9b4e634ab723952797879d048cdca3ff91656c", "filename": "src/test/compile-fail/feature-gate-advanced-slice-features.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-advanced_slice_patterns\n+\n #![feature(slice_patterns)]\n \n fn main() {"}, {"sha": "1aabe6b87dff58107870358f47adb266823c8f66", "filename": "src/test/compile-fail/feature-gate-allow-internal-unstable-nested-macro.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unstable-nested-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unstable-nested-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unstable-nested-macro.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-allow_internal_unstable\n+\n macro_rules! bar {\n     () => {\n         // more layers don't help:"}, {"sha": "de3521eb0f20bc8d54616b922542fb90b0b5cdf6", "filename": "src/test/compile-fail/feature-gate-assoc-type-defaults.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-assoc-type-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-assoc-type-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-assoc-type-defaults.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-associated_type_defaults\n+\n trait Foo {\n     type Bar = u8; //~ ERROR associated type defaults are unstable\n }"}, {"sha": "65d437d0c0d31861834129994b39ca5c14639f62", "filename": "src/test/compile-fail/feature-gate-box-expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-expr.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-box_syntax\n+\n // Check that `box EXPR` is feature-gated.\n //\n // See also feature-gate-placement-expr.rs"}, {"sha": "c30f3952dbfbe246fe6efd0d597eecebdc09a02f", "filename": "src/test/compile-fail/feature-gate-box-pat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-pat.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-box_patterns\n+\n fn main() {\n     let box x = Box::new('c'); //~ ERROR box pattern syntax is experimental\n     println!(\"x: {}\", x);"}, {"sha": "7c290b3c9c2620d871faa0744a99aee03b1b8b8c", "filename": "src/test/compile-fail/feature-gate-dropck-ugeh.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dropck-ugeh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dropck-ugeh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-dropck-ugeh.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-dropck_parametricity\n+\n // Ensure that attempts to use the unsafe attribute are feature-gated.\n \n // Example adapted from RFC 1238 text (just left out the feature gate)."}, {"sha": "0bf1e93d9aace4b40420d9c10b042f84ea7cf393", "filename": "src/test/compile-fail/feature-gate-may-dangle.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-may-dangle.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-dropck_eyepatch\n+\n // Check that `may_dangle` is rejected if `dropck_eyepatch` feature gate is absent.\n \n #![feature(generic_param_attrs)]"}, {"sha": "e3478876763b4dcffc4eea579be871794ce181ba", "filename": "src/test/compile-fail/feature-gate-placement-expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-placement-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-placement-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-placement-expr.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-placement_in_syntax\n+\n // Check that `in PLACE { EXPR }` is feature-gated.\n //\n // See also feature-gate-box-expr.rs"}, {"sha": "ee4422faf3a24f3e0176488567a30e760c75e7db", "filename": "src/test/compile-fail/gated-associated_consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-associated_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-associated_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-associated_consts.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-associated_consts\n+\n trait MyTrait {\n     const C: bool;\n     //~^ associated constants are experimental"}, {"sha": "04abc44caecd7e8324bd636c3d69f7dfcc17d0c7", "filename": "src/test/compile-fail/gated-attr-literals.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-attr-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-attr-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-attr-literals.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -10,6 +10,8 @@\n \n // Check that literals in attributes don't parse without the feature gate.\n \n+// gate-test-attr_literals\n+\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n #![allow(unused_variables)]"}, {"sha": "9a68ddb305960f959b11762128c0f61155464eb1", "filename": "src/test/compile-fail/gated-box-syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-box-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-box-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-box-syntax.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -10,6 +10,8 @@\n \n // Test that the use of the box syntax is gated by `box_syntax` feature gate.\n \n+// gate-test-box_syntax\n+\n fn main() {\n     let x = box 3;\n     //~^ ERROR box expression syntax is experimental; you can call `Box::new` instead."}, {"sha": "af288a97904400eecdda6f45010f0c43fe003aa0", "filename": "src/test/compile-fail/gated-concat_idents.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-concat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-concat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-concat_idents.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-concat_idents\n+\n fn main() {\n     concat_idents!(a, b); //~ ERROR `concat_idents` is not stable enough\n }"}, {"sha": "d34057e290eba384f25fc95ebcbd38e28c08e5f5", "filename": "src/test/compile-fail/gated-link-args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-link-args.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -11,6 +11,8 @@\n // Test that `#[link_args]` attribute is gated by `link_args`\n // feature gate.\n \n+// gate-test-link_args\n+\n #[link_args = \"aFdEfSeVEEE\"]\n extern {}\n //~^ ERROR the `link_args` attribute is not portable across platforms"}, {"sha": "681824ae71dd066f425716d8e03ca138a3329186", "filename": "src/test/compile-fail/gated-link-llvm-intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-link-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-link-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-link-llvm-intrinsics.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-link_llvm_intrinsics\n+\n extern {\n     #[link_name = \"llvm.sqrt.f32\"]\n     fn sqrt(x: f32) -> f32;"}, {"sha": "5eb4118102768b52881fb184da0d8636be089883", "filename": "src/test/compile-fail/gated-naked_functions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-naked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-naked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-naked_functions.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-naked_functions\n+\n #[naked]\n //~^ the `#[naked]` attribute is an experimental feature\n fn naked() {}"}, {"sha": "66b9c2e56705f47c51e891ec47319259e7bfe1ef", "filename": "src/test/compile-fail/gated-no-core.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-no-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-no-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-no-core.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-no_core\n+\n #![no_core] //~ ERROR no_core is experimental\n \n fn main() {}"}, {"sha": "1dff22839ad87a24bd259eeeefb30f0ad0e67dd6", "filename": "src/test/compile-fail/gated-non-ascii-idents.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-non_ascii_idents\n+\n extern crate core as b\u00e4z; //~ ERROR non-ascii idents\n \n use f\u00f6\u00f6::bar; //~ ERROR non-ascii idents"}, {"sha": "8d185d183b419228369ea46b8baff849c7260bf2", "filename": "src/test/compile-fail/gated-plugin_registrar.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-plugin_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-plugin_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-plugin_registrar.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-plugin_registrar\n+\n // Test that `#[plugin_registrar]` attribute is gated by `plugin_registrar`\n // feature gate.\n "}, {"sha": "02db8a71d5340469a856b71e3d3f8398577b9fdf", "filename": "src/test/compile-fail/gated-target_feature.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-target_feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-target_feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-target_feature.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-target_feature\n+\n #[target_feature = \"+sse2\"]\n //~^ the `#[target_feature]` attribute is an experimental feature\n fn foo() {}"}, {"sha": "b02ce9b7ecb81d581492b46b7503648e64bee3a3", "filename": "src/test/compile-fail/gated-thread-local.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-thread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-thread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-thread-local.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-thread_local\n+\n // Test that `#[thread_local]` attribute is gated by `thread_local`\n // feature gate.\n //"}, {"sha": "0b85b19f176d75cb7bb7d9e946012ff239399c78", "filename": "src/test/compile-fail/gated-trace_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-trace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fgated-trace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-trace_macros.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-trace_macros\n \n fn main() {\n     trace_macros!(true); //~ ERROR: `trace_macros` is not stable"}, {"sha": "d3bd810ceb2b439100018e9ab621cf1c3e6d4e7f", "filename": "src/test/compile-fail/i128-feature-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fi128-feature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fi128-feature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fi128-feature-2.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -7,6 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+// gate-test-i128_type\n+\n fn test1() -> i128 { //~ ERROR 128-bit type is unstable\n     0\n }"}, {"sha": "e94fd14a4216322664ba3188f2e251853f3e47de", "filename": "src/test/compile-fail/i128-feature.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fi128-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fi128-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fi128-feature.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -7,6 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+// gate-test-i128_type\n+\n fn test2() {\n     0i128; //~ ERROR 128-bit integers are not stable\n }"}, {"sha": "f171b6becc4b754270b333522c1dff8f11453676", "filename": "src/test/compile-fail/impl-trait/feature-gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Ffeature-gate.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-conservative_impl_trait\n+\n fn foo() -> impl Fn() { || {} }\n //~^ ERROR `impl Trait` is experimental\n "}, {"sha": "bb6fb9e356352d042dfd3be4aac660afaedbe63e", "filename": "src/test/compile-fail/link-cfg-gated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Flink-cfg-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Flink-cfg-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flink-cfg-gated.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-link_cfg\n+\n #[link(name = \"foo\", cfg(foo))]\n //~^ ERROR: is feature gated\n extern {}"}, {"sha": "1cf208f0215889666cad021f792b0a328ee545a6", "filename": "src/test/compile-fail/linkage1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Flinkage1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Flinkage1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flinkage1.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-linkage\n+\n extern {\n     #[linkage = \"extern_weak\"] static foo: isize;\n     //~^ ERROR: the `linkage` attribute is experimental and not portable"}, {"sha": "b9688af35dc901c2b8da92412b72c913990f9d60", "filename": "src/test/compile-fail/log-syntax-gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Flog-syntax-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Flog-syntax-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flog-syntax-gate.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-log_syntax\n+\n fn main() {\n     log_syntax!() //~ ERROR `log_syntax!` is not stable enough\n }"}, {"sha": "dcbe7eefee52c7004aea875cd588e4f7e9e06902", "filename": "src/test/compile-fail/log-syntax-gate2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Flog-syntax-gate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Flog-syntax-gate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flog-syntax-gate2.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-log_syntax\n+\n fn main() {\n     println!(\"{}\", log_syntax!()); //~ ERROR `log_syntax!` is not stable\n }"}, {"sha": "fb6b34fcbb6769b86f9d2256180f8d849ec87736", "filename": "src/test/compile-fail/never-disabled.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fnever-disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fnever-disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever-disabled.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -10,6 +10,8 @@\n \n // Test that ! errors when used in illegal positions with feature(never_type) disabled\n \n+// gate-test-never_type\n+\n trait Foo {\n     type Wub;\n }"}, {"sha": "27f8fda98ab3430bce3e1c61e08a83b9de816b01", "filename": "src/test/compile-fail/no-core-gated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fno-core-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fno-core-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-core-gated.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-no_core\n+\n #![no_core] //~ ERROR no_core is experimental\n \n fn main() {}"}, {"sha": "bd8ec16ef882678ed8da5c526ed9b9f577fc6e81", "filename": "src/test/compile-fail/numeric-fields-feature-gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fnumeric-fields-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fnumeric-fields-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnumeric-fields-feature-gate.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-relaxed_adts\n+\n struct S(u8);\n \n fn main() {"}, {"sha": "1b3b978c4081118eead90465e56f2ebabe59a8d2", "filename": "src/test/compile-fail/panic-runtime/needs-gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fneeds-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fneeds-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fneeds-gate.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-needs_panic_runtime\n+// gate-test-panic_runtime\n+\n #![panic_runtime] //~ ERROR: is an experimental feature\n #![needs_panic_runtime] //~ ERROR: is an experimental feature\n "}, {"sha": "e81e1e30d175011c91f06d7055263e8aa8bd1a72", "filename": "src/test/compile-fail/privacy/restricted/feature-gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ffeature-gate.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-pub_restricted\n+\n pub(crate) //~ ERROR experimental\n mod foo {}\n "}, {"sha": "b51ee3d8b5ed8a7136d3b594ed094b2c87249a82", "filename": "src/test/compile-fail/rfc1445/feature-gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Frfc1445%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Frfc1445%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1445%2Ffeature-gate.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -14,6 +14,8 @@\n \n // revisions: with_gate no_gate\n \n+// gate-test-structural_match\n+\n #![allow(dead_code)]\n #![deny(future_incompatible)]\n #![feature(rustc_attrs)]"}, {"sha": "cd37611aceda9c6bd39b32ce0d76b5aed88d6810", "filename": "src/test/compile-fail/single-derive-attr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fsingle-derive-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fsingle-derive-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsingle-derive-attr.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-custom_derive\n+\n #[derive_Clone]\n //~^ ERROR attributes of the form `#[derive_*]` are reserved\n struct Test;"}, {"sha": "3a01ecdf9db6f71502f3776fa55b3df79de4d969", "filename": "src/test/compile-fail/specialization/specialization-feature-gate-default.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-feature-gate-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-feature-gate-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-feature-gate-default.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -10,6 +10,8 @@\n \n // Check that specialization must be ungated to use the `default` keyword\n \n+// gate-test-specialization\n+\n trait Foo {\n     fn foo(&self);\n }"}, {"sha": "5eb48eab15e52468a38da694093aef6f72fa6d34", "filename": "src/test/compile-fail/specialization/specialization-feature-gate-overlap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-feature-gate-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-feature-gate-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-feature-gate-overlap.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -10,6 +10,8 @@\n \n // Check that writing an overlapping impl is not allow unless specialization is ungated.\n \n+// gate-test-specialization\n+\n trait Foo {\n     fn foo(&self);\n }"}, {"sha": "7c37abf765769c25725f16cb9169f907418d1ad6", "filename": "src/test/compile-fail/static-mut-not-constant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-drop_types_in_const\n+\n #![feature(box_syntax)]\n \n static mut a: Box<isize> = box 3;"}, {"sha": "47495be4ad2c9c67b7aa60cf86b317d22ec59d9b", "filename": "src/test/compile-fail/struct-field-attr-feature-gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fstruct-field-attr-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fstruct-field-attr-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-attr-feature-gate.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-struct_field_attributes\n+\n struct Foo {\n     present: (),\n }"}, {"sha": "bf4ca03069c5737ab4175a589c01d5c73b2925ae", "filename": "src/test/compile-fail/type-ascription-feature-gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ftype-ascription-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Ftype-ascription-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-ascription-feature-gate.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-type_ascription\n+\n // Type ascription is feature gated\n \n fn main() {"}, {"sha": "2c23050085d88a635ed9380da35d9ce839f5665a", "filename": "src/test/compile-fail/unadjusted-unstable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Funadjusted-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Funadjusted-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funadjusted-unstable.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-abi_unadjusted\n+\n extern \"unadjusted\" fn foo() {\n //~^ ERROR: unadjusted ABI is an implementation detail and perma-unstable\n }"}, {"sha": "0c2165871f6dbfcf8e45829ff0e82cada3e43640", "filename": "src/test/compile-fail/union/union-feature-gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Funion%2Funion-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Funion%2Funion-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-feature-gate.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-untagged_unions\n+\n union U { //~ ERROR unions are unstable and possibly buggy\n     a: u8,\n }"}, {"sha": "63f891a2af7bf9b6491c9661a5d44b1df82c74cd", "filename": "src/test/compile-fail/windows-subsystem-gated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fwindows-subsystem-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftest%2Fcompile-fail%2Fwindows-subsystem-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwindows-subsystem-gated.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-windows_subsystem\n+\n #![windows_subsystem = \"console\"]\n //~^ ERROR: the windows subsystem attribute is currently unstable\n "}, {"sha": "b0da6647eb9002039ae4bcc913ba8a8c7dd1d8e4", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 115, "deletions": 20, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe23719feb20c25a8b2693d1f196e72d8da9af5/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=6fe23719feb20c25a8b2693d1f196e72d8da9af5", "patch": "@@ -16,6 +16,7 @@\n //! * The set of library features is disjoint from the set of language features\n //! * Library features have at most one stability level\n //! * Library features have at most one `since` value\n+//! * All unstable lang features have tests to ensure they are actually unstable\n \n use std::collections::HashMap;\n use std::fmt;\n@@ -26,6 +27,7 @@ use std::path::Path;\n #[derive(PartialEq)]\n enum Status {\n     Stable,\n+    Removed,\n     Unstable,\n }\n \n@@ -34,27 +36,22 @@ impl fmt::Display for Status {\n         let as_str = match *self {\n             Status::Stable => \"stable\",\n             Status::Unstable => \"unstable\",\n+            Status::Removed => \"removed\",\n         };\n         fmt::Display::fmt(as_str, f)\n     }\n }\n \n-\n struct Feature {\n-    name: String,\n-    level: Status,\n-    since: String,\n-}\n-\n-struct LibFeature {\n     level: Status,\n     since: String,\n+    has_gate_test: bool,\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    let features = collect_lang_features(&path.join(\"libsyntax/feature_gate.rs\"));\n+    let mut features = collect_lang_features(&path.join(\"libsyntax/feature_gate.rs\"));\n     assert!(!features.is_empty());\n-    let mut lib_features = HashMap::<String, LibFeature>::new();\n+    let mut lib_features = HashMap::<String, Feature>::new();\n \n     let mut contents = String::new();\n     super::walk(path,\n@@ -97,7 +94,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 None => \"None\",\n             };\n \n-            if features.iter().any(|f| f.name == feature_name) {\n+            if features.contains_key(feature_name) {\n                 err(\"duplicating a lang feature\");\n             }\n             if let Some(ref s) = lib_features.get(feature_name) {\n@@ -110,21 +107,105 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 continue;\n             }\n             lib_features.insert(feature_name.to_owned(),\n-                                LibFeature {\n+                                Feature {\n                                     level: level,\n                                     since: since.to_owned(),\n+                                    has_gate_test: false,\n                                 });\n         }\n     });\n \n+    super::walk(&path.join(\"test/compile-fail\"),\n+                &mut |path| super::filter_dirs(path),\n+                &mut |file| {\n+        let filename = file.file_name().unwrap().to_string_lossy();\n+        if !filename.ends_with(\".rs\") || filename == \"features.rs\" ||\n+           filename == \"diagnostic_list.rs\" {\n+            return;\n+        }\n+\n+        let filen_underscore = filename.replace(\"-\",\"_\").replace(\".rs\",\"\");\n+        test_filen_gate(&filen_underscore, &mut features);\n+\n+        contents.truncate(0);\n+        t!(t!(File::open(&file), &file).read_to_string(&mut contents));\n+\n+        for (i, line) in contents.lines().enumerate() {\n+            let mut err = |msg: &str| {\n+                println!(\"{}:{}: {}\", file.display(), i + 1, msg);\n+                *bad = true;\n+            };\n+\n+            let gate_test_str = \"gate-test-\";\n+\n+            if !line.contains(gate_test_str) {\n+                continue;\n+            }\n+\n+            let feature_name = match line.find(gate_test_str) {\n+                Some(i) => {\n+                    &line[i+gate_test_str.len()..line[i+1..].find(' ').unwrap_or(line.len())]\n+                },\n+                None => continue,\n+            };\n+            let found_feature = features.get_mut(feature_name)\n+                                        .map(|v| { v.has_gate_test = true; () })\n+                                        .is_some();\n+\n+            let found_lib_feature = features.get_mut(feature_name)\n+                                            .map(|v| { v.has_gate_test = true; () })\n+                                            .is_some();\n+\n+            if !(found_feature || found_lib_feature) {\n+                err(&format!(\"gate-test test found referencing a nonexistent feature '{}'\",\n+                             feature_name));\n+            }\n+        }\n+    });\n+\n+    // FIXME get this whitelist empty.\n+    let whitelist = vec![\n+        \"abi_ptx\", \"simd\", \"safe_suggestion\", \"macro_reexport\",\n+        \"more_struct_aliases\", \"static_recursion\", \"reflect\",\n+        \"quote\", \"cfg_target_has_atomic\", \"custom_attribute\",\n+        \"default_type_parameter_fallback\", \"pushpop_unsafe\",\n+        \"use_extern_macros\", \"staged_api\", \"const_indexing\",\n+        \"unboxed_closures\", \"stmt_expr_attributes\",\n+        \"cfg_target_thread_local\", \"unwind_attributes\",\n+        \"inclusive_range_syntax\"\n+    ];\n+\n+    // Only check the number of lang features.\n+    // Obligatory testing for library features is dumb.\n+    let gate_untested = features.iter()\n+                                .filter(|&(_, f)| f.level == Status::Unstable)\n+                                .filter(|&(_, f)| !f.has_gate_test)\n+                                .filter(|&(n, _)| !whitelist.contains(&n.as_str()))\n+                                .collect::<Vec<_>>();\n+\n+    for &(name, _) in gate_untested.iter() {\n+        println!(\"Expected a gate test for the feature '{}'.\", name);\n+        println!(\"Hint: create a file named 'feature-gate-{}.rs' in the compile-fail\\\n+                \\n      test suite, with its failures due to missing usage of\\\n+                \\n      #![feature({})].\", name, name);\n+        println!(\"Hint: If you already have such a test and don't want to rename it,\\\n+                \\n      you can also add a // gate-test-{} line to the test file.\",\n+                 name);\n+    }\n+\n+    if gate_untested.len() > 0 {\n+        println!(\"Found {} features without a gate test.\", gate_untested.len());\n+        *bad = true;\n+    }\n+\n     if *bad {\n         return;\n     }\n \n     let mut lines = Vec::new();\n-    for feature in features {\n+    for (name, feature) in features.iter() {\n         lines.push(format!(\"{:<32} {:<8} {:<12} {:<8}\",\n-                           feature.name,\n+                           name,\n                            \"lang\",\n                            feature.level,\n                            feature.since));\n@@ -150,7 +231,20 @@ fn find_attr_val<'a>(line: &'a str, attr: &str) -> Option<&'a str> {\n         .map(|(i, j)| &line[i..j])\n }\n \n-fn collect_lang_features(path: &Path) -> Vec<Feature> {\n+fn test_filen_gate(filen_underscore: &str,\n+                   features: &mut HashMap<String, Feature>) -> bool {\n+    if filen_underscore.starts_with(\"feature_gate\") {\n+        for (n, f) in features.iter_mut() {\n+            if filen_underscore == format!(\"feature_gate_{}\", n) {\n+                f.has_gate_test = true;\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+fn collect_lang_features(path: &Path) -> HashMap<String, Feature> {\n     let mut contents = String::new();\n     t!(t!(File::open(path)).read_to_string(&mut contents));\n \n@@ -159,17 +253,18 @@ fn collect_lang_features(path: &Path) -> Vec<Feature> {\n             let mut parts = line.trim().split(\",\");\n             let level = match parts.next().map(|l| l.trim().trim_left_matches('(')) {\n                 Some(\"active\") => Status::Unstable,\n-                Some(\"removed\") => Status::Unstable,\n+                Some(\"removed\") => Status::Removed,\n                 Some(\"accepted\") => Status::Stable,\n                 _ => return None,\n             };\n             let name = parts.next().unwrap().trim();\n             let since = parts.next().unwrap().trim().trim_matches('\"');\n-            Some(Feature {\n-                name: name.to_owned(),\n-                level: level,\n-                since: since.to_owned(),\n-            })\n+            Some((name.to_owned(),\n+                Feature {\n+                    level: level,\n+                    since: since.to_owned(),\n+                    has_gate_test: false,\n+                }))\n         })\n         .collect()\n }"}]}