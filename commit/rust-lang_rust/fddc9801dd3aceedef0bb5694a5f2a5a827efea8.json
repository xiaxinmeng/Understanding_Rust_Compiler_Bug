{"sha": "fddc9801dd3aceedef0bb5694a5f2a5a827efea8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZGM5ODAxZGQzYWNlZWRlZjBiYjU2OTRhNWYyYTVhODI3ZWZlYTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-03T17:04:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-03T17:04:52Z"}, "message": "Auto merge of #4989 - rust-lang:no-unmangled-must-use, r=flip1995\n\nNo #[no_mangle] must_use_candidate functions\n\nThis fixes #4984.\n\nchangelog: none", "tree": {"sha": "80e9716da192bc88bebe70f4f72ec53c9cf3bbb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80e9716da192bc88bebe70f4f72ec53c9cf3bbb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fddc9801dd3aceedef0bb5694a5f2a5a827efea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fddc9801dd3aceedef0bb5694a5f2a5a827efea8", "html_url": "https://github.com/rust-lang/rust/commit/fddc9801dd3aceedef0bb5694a5f2a5a827efea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fddc9801dd3aceedef0bb5694a5f2a5a827efea8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e8c3c3e9eb81bc2be047b1d4b2f9f31b869b6f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8c3c3e9eb81bc2be047b1d4b2f9f31b869b6f5", "html_url": "https://github.com/rust-lang/rust/commit/2e8c3c3e9eb81bc2be047b1d4b2f9f31b869b6f5"}, {"sha": "47972cdf120f978aacefecc7bde2e68045f59af6", "url": "https://api.github.com/repos/rust-lang/rust/commits/47972cdf120f978aacefecc7bde2e68045f59af6", "html_url": "https://github.com/rust-lang/rust/commit/47972cdf120f978aacefecc7bde2e68045f59af6"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "81f199de5f9227b732561922d9fc9fb54b32ef8f", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fddc9801dd3aceedef0bb5694a5f2a5a827efea8/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fddc9801dd3aceedef0bb5694a5f2a5a827efea8/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=fddc9801dd3aceedef0bb5694a5f2a5a827efea8", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n-    attrs::is_proc_macro, is_must_use_ty, iter_input_pats, match_def_path, must_use_attr, qpath_res, return_ty,\n-    snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_then, trait_ref_of_method,\n+    attr_by_name, attrs::is_proc_macro, is_must_use_ty, iter_input_pats, match_def_path, must_use_attr, qpath_res,\n+    return_ty, snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_then, trait_ref_of_method,\n     type_is_unsafe_function,\n };\n use matches::matches;\n@@ -236,7 +236,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n                 check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n                 return;\n             }\n-            if cx.access_levels.is_exported(item.hir_id) && !is_proc_macro(&item.attrs) {\n+            if cx.access_levels.is_exported(item.hir_id)\n+                && !is_proc_macro(&item.attrs)\n+                && attr_by_name(&item.attrs, \"no_mangle\").is_none()\n+            {\n                 check_must_use_candidate(\n                     cx,\n                     &sig.decl,"}, {"sha": "98ab844aeee6c486fba0142ebcf8580ca19a70c5", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fddc9801dd3aceedef0bb5694a5f2a5a827efea8/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fddc9801dd3aceedef0bb5694a5f2a5a827efea8/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=fddc9801dd3aceedef0bb5694a5f2a5a827efea8", "patch": "@@ -1253,13 +1253,16 @@ pub fn parent_node_is_if_expr<'a, 'b>(expr: &Expr<'_>, cx: &LateContext<'a, 'b>)\n     }\n }\n \n+// Finds the attribute with the given name, if any\n+pub fn attr_by_name<'a>(attrs: &'a [Attribute], name: &'_ str) -> Option<&'a Attribute> {\n+    attrs\n+        .iter()\n+        .find(|attr| attr.ident().map_or(false, |ident| ident.as_str() == name))\n+}\n+\n+// Finds the `#[must_use]` attribute, if any\n pub fn must_use_attr(attrs: &[Attribute]) -> Option<&Attribute> {\n-    attrs.iter().find(|attr| {\n-        attr.ident().map_or(false, |ident| {\n-            let ident: &str = &ident.as_str();\n-            \"must_use\" == ident\n-        })\n-    })\n+    attr_by_name(attrs, \"must_use\")\n }\n \n // Returns whether the type has #[must_use] attribute"}, {"sha": "e2ceb8baded21c591284d10024bd0783ed992caf", "filename": "tests/ui/must_use_candidates.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fddc9801dd3aceedef0bb5694a5f2a5a827efea8/tests%2Fui%2Fmust_use_candidates.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fddc9801dd3aceedef0bb5694a5f2a5a827efea8/tests%2Fui%2Fmust_use_candidates.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.fixed?ref=fddc9801dd3aceedef0bb5694a5f2a5a827efea8", "patch": "@@ -83,6 +83,11 @@ pub unsafe fn mutates_static() -> usize {\n     COUNTER\n }\n \n+#[no_mangle]\n+pub fn unmangled(i: bool) -> bool {\n+    !i\n+}\n+\n fn main() {\n     assert_eq!(1, pure(1));\n }"}, {"sha": "29ef8d1ed9c29662443b1bcc075dd945e20cc794", "filename": "tests/ui/must_use_candidates.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fddc9801dd3aceedef0bb5694a5f2a5a827efea8/tests%2Fui%2Fmust_use_candidates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fddc9801dd3aceedef0bb5694a5f2a5a827efea8/tests%2Fui%2Fmust_use_candidates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.rs?ref=fddc9801dd3aceedef0bb5694a5f2a5a827efea8", "patch": "@@ -83,6 +83,11 @@ pub unsafe fn mutates_static() -> usize {\n     COUNTER\n }\n \n+#[no_mangle]\n+pub fn unmangled(i: bool) -> bool {\n+    !i\n+}\n+\n fn main() {\n     assert_eq!(1, pure(1));\n }"}]}