{"sha": "8284df9e7c3b26897d65935eaa7acee1a956a450", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyODRkZjllN2MzYjI2ODk3ZDY1OTM1ZWFhN2FjZWUxYTk1NmE0NTA=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-02T04:43:15Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-02T04:43:15Z"}, "message": "syntax: indicate an error when a macro ignores trailing tokens.\n\nThat is, only a single expression or item gets parsed, so if there are\nany extra tokens (e.g. the start of another item/expression) the user\nshould be told, rather than silently dropping them.\n\nAn example:\n\n    macro_rules! foo {\n        () => {\n            println(\"hi\");\n            println(\"bye);\n        }\n    }\n\nwould expand to just `println(\"hi\")`, which is almost certainly not\nwhat the programmer wanted.\n\nFixes #8012.", "tree": {"sha": "394c978dc2b603cf2b28879b67ce405f528c1e17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/394c978dc2b603cf2b28879b67ce405f528c1e17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8284df9e7c3b26897d65935eaa7acee1a956a450", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8284df9e7c3b26897d65935eaa7acee1a956a450", "html_url": "https://github.com/rust-lang/rust/commit/8284df9e7c3b26897d65935eaa7acee1a956a450", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8284df9e7c3b26897d65935eaa7acee1a956a450/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbbafc4e466e8026d30b9c47d1f104fd44815bef", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbbafc4e466e8026d30b9c47d1f104fd44815bef", "html_url": "https://github.com/rust-lang/rust/commit/bbbafc4e466e8026d30b9c47d1f104fd44815bef"}], "stats": {"total": 61, "additions": 56, "deletions": 5}, "files": [{"sha": "468e3e5e7f2bf0646ae76bed5e538c0559f4c21c", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8284df9e7c3b26897d65935eaa7acee1a956a450/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8284df9e7c3b26897d65935eaa7acee1a956a450/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=8284df9e7c3b26897d65935eaa7acee1a956a450", "patch": "@@ -39,7 +39,7 @@ pub fn expand_deriving_eq(cx: @ExtCtxt,\n                 ret_ty: Literal(Path::new(~[\"bool\"])),\n                 const_nonmatching: true,\n                 combine_substructure: $f\n-            },\n+            }\n         }\n     );\n "}, {"sha": "de0afe23668c1fbb54595fbe2957da678e2fff52", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8284df9e7c3b26897d65935eaa7acee1a956a450/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8284df9e7c3b26897d65935eaa7acee1a956a450/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=8284df9e7c3b26897d65935eaa7acee1a956a450", "patch": "@@ -21,22 +21,47 @@ use ext::tt::macro_parser::{parse, parse_or_else, success, failure};\n use parse::lexer::{new_tt_reader, reader};\n use parse::parser::Parser;\n use parse::token::{get_ident_interner, special_idents, gensym_ident, ident_to_str};\n-use parse::token::{FAT_ARROW, SEMI, nt_matchers, nt_tt};\n+use parse::token::{FAT_ARROW, SEMI, nt_matchers, nt_tt, EOF};\n use print;\n \n struct ParserAnyMacro {\n     parser: @Parser,\n }\n \n+impl ParserAnyMacro {\n+    /// Make sure we don't have any tokens left to parse, so we don't\n+    /// silently drop anything. `allow_semi` is so that \"optional\"\n+    /// semilons at the end of normal expressions aren't complained\n+    /// about e.g. the semicolon in `macro_rules! kapow( () => {\n+    /// fail!(); } )` doesn't get picked up by .parse_expr(), but it's\n+    /// allowed to be there.\n+    fn ensure_complete_parse(&self, allow_semi: bool) {\n+        if allow_semi && *self.parser.token == SEMI {\n+            self.parser.bump()\n+        }\n+        if *self.parser.token != EOF {\n+            let msg = format!(\"macro expansion ignores token `{}` and any following\",\n+                              self.parser.this_token_to_str());\n+            self.parser.span_err(*self.parser.span, msg);\n+        }\n+    }\n+}\n+\n impl AnyMacro for ParserAnyMacro {\n     fn make_expr(&self) -> @ast::Expr {\n-        self.parser.parse_expr()\n+        let ret = self.parser.parse_expr();\n+        self.ensure_complete_parse(true);\n+        ret\n     }\n     fn make_item(&self) -> Option<@ast::item> {\n-        self.parser.parse_item(~[])     // no attrs\n+        let ret = self.parser.parse_item(~[]);     // no attrs\n+        self.ensure_complete_parse(false);\n+        ret\n     }\n     fn make_stmt(&self) -> @ast::Stmt {\n-        self.parser.parse_stmt(~[])     // no attrs\n+        let ret = self.parser.parse_stmt(~[]);     // no attrs\n+        self.ensure_complete_parse(true);\n+        ret\n     }\n }\n "}, {"sha": "615a85c2e7e7170653c2d89e5ce9dc9d486b14ab", "filename": "src/test/compile-fail/macro-incomplete-parse.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8284df9e7c3b26897d65935eaa7acee1a956a450/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8284df9e7c3b26897d65935eaa7acee1a956a450/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs?ref=8284df9e7c3b26897d65935eaa7acee1a956a450", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! ignored_item {\n+    () => {\n+        fn foo() {}\n+        fn bar() {} //~ ERROR macro expansion ignores token `fn`\n+    }\n+}\n+\n+macro_rules! ignored_expr {\n+    () => ( 1, 2 ) //~ ERROR macro expansion ignores token `,`\n+}\n+\n+ignored_item!()\n+\n+fn main() {\n+    ignored_expr!()\n+}"}]}