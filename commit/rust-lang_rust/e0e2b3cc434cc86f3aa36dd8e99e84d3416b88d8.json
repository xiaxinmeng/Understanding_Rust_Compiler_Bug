{"sha": "e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "node_id": "C_kwDOAAsO6NoAKGUwZTJiM2NjNDM0Y2M4NmYzYWEzNmRkOGU5OWU4NGQzNDE2Yjg4ZDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-17T16:18:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-17T16:18:59Z"}, "message": "Rollup merge of #89963 - r00ster91:parenthesisparentheses, r=nagisa\n\nSome \"parenthesis\" and \"parentheses\" fixes\n\n\"Parenthesis\" is the singular (e.g. one `(` or one `)`) and \"parentheses\" is the plural (multiple `(` or `)`s) and this is not hard to mix up so here are some fixes for that.\n\nInspired by #89958", "tree": {"sha": "d5da247b03326144c5c3e22a8f6bc43c35bf0aec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5da247b03326144c5c3e22a8f6bc43c35bf0aec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhbEzzCRBK7hj4Ov3rIwAASp0IAI+SJa0o18nBUcYVeOCWBFSY\n3wz5vYZqzib6a5wdUlnhItBqHHzojBfOkDdh1IeQZCo+GG4ok+vq4s/YrenOFpVj\ngWATxAJ0lxUQ4rmQrLe2NUqZzrkjKN4b0RaRS5y3zs4Tfe/RzJPl2h/ar0cBhH85\n3rUWbgSUwU8So55iMd4ZhWHRbjCxukhnO9hVVyOED9yUUoEFm8dhMs7NmhyrFW6Y\nncXMUtZ5mPC/SCQF7hO2XIVofcwlc9I5qjwTH3CFpHu56r79UeWRnue611YF+wvO\nN3eVQ1Mp6/RLW5LZrHq9QKwaQYGAXed0jDKkIp2WFBfTf7tKvmw8NIXz8JrW+Bg=\n=xIe4\n-----END PGP SIGNATURE-----\n", "payload": "tree d5da247b03326144c5c3e22a8f6bc43c35bf0aec\nparent 0f1ba8d8c786f625934908d7681f9779e21668b5\nparent 3c1d55422a695204b70cbd23da582e3ab770a53c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1634487539 +0200\ncommitter GitHub <noreply@github.com> 1634487539 +0200\n\nRollup merge of #89963 - r00ster91:parenthesisparentheses, r=nagisa\n\nSome \"parenthesis\" and \"parentheses\" fixes\n\n\"Parenthesis\" is the singular (e.g. one `(` or one `)`) and \"parentheses\" is the plural (multiple `(` or `)`s) and this is not hard to mix up so here are some fixes for that.\n\nInspired by #89958\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "html_url": "https://github.com/rust-lang/rust/commit/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f1ba8d8c786f625934908d7681f9779e21668b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f1ba8d8c786f625934908d7681f9779e21668b5", "html_url": "https://github.com/rust-lang/rust/commit/0f1ba8d8c786f625934908d7681f9779e21668b5"}, {"sha": "3c1d55422a695204b70cbd23da582e3ab770a53c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1d55422a695204b70cbd23da582e3ab770a53c", "html_url": "https://github.com/rust-lang/rust/commit/3c1d55422a695204b70cbd23da582e3ab770a53c"}], "stats": {"total": 200, "additions": 100, "deletions": 100}, "files": [{"sha": "500c97e65ef9cc868611037369912944f783430a", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -357,13 +357,13 @@ impl ExprPrecedence {\n     }\n }\n \n-/// In `let p = e`, operators with precedence `<=` this one requires parenthesis in `e`.\n+/// In `let p = e`, operators with precedence `<=` this one requires parentheses in `e`.\n pub fn prec_let_scrutinee_needs_par() -> usize {\n     AssocOp::LAnd.precedence()\n }\n \n /// Suppose we have `let _ = e` and the `order` of `e`.\n-/// Is the `order` such that `e` in `let _ = e` needs parenthesis when it is on the RHS?\n+/// Is the `order` such that `e` in `let _ = e` needs parentheses when it is on the RHS?\n ///\n /// Conversely, suppose that we have `(let _ = a) OP b` and `order` is that of `OP`.\n /// Can we print this as `let _ = a OP b`?"}, {"sha": "793f6504be6f79f030ea168db247a9a4793f1d80", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -113,7 +113,7 @@ impl<'a> AstValidator<'a> {\n         if sess.opts.unstable_features.is_nightly_build() {\n             sess.struct_span_err(expr.span, \"`let` expressions are not supported here\")\n                 .note(\"only supported directly in conditions of `if`- and `while`-expressions\")\n-                .note(\"as well as when nested within `&&` and parenthesis in those conditions\")\n+                .note(\"as well as when nested within `&&` and parentheses in those conditions\")\n                 .emit();\n         } else {\n             sess.struct_span_err(expr.span, \"expected expression, found statement (`let`)\")"}, {"sha": "6d0589b7ba1af7a5ae205dc8a45df5f09ae9257e", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -1675,7 +1675,7 @@ impl<'a> State<'a> {\n         self.print_expr_cond_paren(expr, Self::cond_needs_par(expr))\n     }\n \n-    // Does `expr` need parenthesis when printed in a condition position?\n+    // Does `expr` need parentheses when printed in a condition position?\n     //\n     // These cases need parens due to the parse error observed in #26461: `if return {}`\n     // parses as the erroneous construct `if (return {})`, not `if (return) {}`."}, {"sha": "532f158297000b4d7eda2872c48e853508ad5ba1", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -1168,7 +1168,7 @@ impl<'a> State<'a> {\n         self.print_expr_cond_paren(expr, Self::cond_needs_par(expr) || npals())\n     }\n \n-    // Does `expr` need parenthesis when printed in a condition position?\n+    // Does `expr` need parentheses when printed in a condition position?\n     //\n     // These cases need parens due to the parse error observed in #26461: `if return {}`\n     // parses as the erroneous construct `if (return {})`, not `if (return) {}`."}, {"sha": "da1edcf6fe3b47a590f2c81daea00f1ce1bf1571", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -670,7 +670,7 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// The parenthesis are not needed, and should be removed. This is the\n+    /// The parentheses are not needed, and should be removed. This is the\n     /// preferred style for writing these expressions.\n     pub(super) UNUSED_PARENS,\n     Warn,"}, {"sha": "81328e09156a18c4399c9f85300c0e86ebf47e9f", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -1342,10 +1342,10 @@ impl<'a> Parser<'a> {\n \n                 self.struct_span_err(\n                     MultiSpan::from_spans(vec![begin_par_sp, self.prev_token.span]),\n-                    \"unexpected parenthesis surrounding `for` loop head\",\n+                    \"unexpected parentheses surrounding `for` loop head\",\n                 )\n                 .multipart_suggestion(\n-                    \"remove parenthesis in `for` loop\",\n+                    \"remove parentheses in `for` loop\",\n                     vec![(begin_par_sp, String::new()), (self.prev_token.span, String::new())],\n                     // With e.g. `for (x) in y)` this would replace `(x) in y)`\n                     // with `x) in y)` which is syntactically invalid."}, {"sha": "e50b983ec621680f962c302772932cd74ff0a06a", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -1258,7 +1258,7 @@ impl<'a> Parser<'a> {\n     /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,\n     /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.\n     /// If the following element can't be a tuple (i.e., it's a function definition), then\n-    /// it's not a tuple struct field), and the contents within the parentheses isn't valid,\n+    /// it's not a tuple struct field), and the contents within the parentheses aren't valid,\n     /// so emit a proper diagnostic.\n     // Public for rustfmt usage.\n     pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {"}, {"sha": "c4569c07db4766e4f38079f8411a8d26067459ae", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -328,7 +328,7 @@ impl<'a> Parser<'a> {\n                     ),\n                 )\n                 .multipart_suggestion(\n-                    \"wrap the expression in parenthesis\",\n+                    \"wrap the expression in parentheses\",\n                     suggs,\n                     Applicability::MachineApplicable,\n                 )\n@@ -349,7 +349,7 @@ impl<'a> Parser<'a> {\n                 \"right curly brace `}` before `else` in a `let...else` statement not allowed\",\n             )\n             .multipart_suggestion(\n-                \"try wrapping the expression in parenthesis\",\n+                \"try wrapping the expression in parentheses\",\n                 suggs,\n                 Applicability::MachineApplicable,\n             )"}, {"sha": "c4c0c17addf107959d8ed95dd909fb3c1f656330", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -430,7 +430,7 @@ impl<'a> Parser<'a> {\n     }\n \n     // Parses the `typeof(EXPR)`.\n-    // To avoid ambiguity, the type is surrounded by parenthesis.\n+    // To avoid ambiguity, the type is surrounded by parentheses.\n     fn parse_typeof_ty(&mut self) -> PResult<'a, TyKind> {\n         self.expect(&token::OpenDelim(token::Paren))?;\n         let expr = self.parse_anon_const_expr()?;"}, {"sha": "1748a9be8e13e80cd0194e76ceafc14e2cb405b5", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -1552,7 +1552,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             matches!(source, PathSource::TupleStruct(..)) || source.is_call();\n         if suggest_only_tuple_variants {\n             // Suggest only tuple variants regardless of whether they have fields and do not\n-            // suggest path with added parenthesis.\n+            // suggest path with added parentheses.\n             let mut suggestable_variants = variants\n                 .iter()\n                 .filter(|(.., kind)| *kind == CtorKind::Fn)"}, {"sha": "5d22e300774d3b624d31a6029ddf99751280705c", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -300,7 +300,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let end = callee_span.shrink_to_hi();\n             err.multipart_suggestion(\n                 \"if you meant to create this closure and immediately call it, surround the \\\n-                closure with parenthesis\",\n+                closure with parentheses\",\n                 vec![(start, \"(\".to_string()), (end, \")\".to_string())],\n                 Applicability::MaybeIncorrect,\n             );\n@@ -383,7 +383,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         call_expr.span,\n                         &format!(\n                             \"`{}` is a unit variant, you need to write it \\\n-                                 without the parenthesis\",\n+                                 without the parentheses\",\n                             path\n                         ),\n                         path.to_string(),"}, {"sha": "1bbdf910e420a55cf318c488851e60e4cf272c0e", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -492,7 +492,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         other_ty: Ty<'tcx>,\n         op: hir::BinOp,\n         is_assign: IsAssign,\n-    ) -> bool /* did we suggest to call a function because of missing parenthesis? */ {\n+    ) -> bool /* did we suggest to call a function because of missing parentheses? */ {\n         err.span_label(span, ty.to_string());\n         if let FnDef(def_id, _) = *ty.kind() {\n             let source_map = self.tcx.sess.source_map();"}, {"sha": "05817e1b1d99e7a45bb9c2d581bc7a3dd8273721", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -576,7 +576,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                         rhs,\n                                     });\n                                     continue; // If something other than a Fn ends up\n-                                    // with parenthesis, leave it alone\n+                                    // with parentheses, leave it alone\n                                 }\n                             }\n "}, {"sha": "26bfc4355fa114d4398ee2dc639aa1c9d8ae506f", "filename": "src/test/ui/empty/empty-struct-unit-expr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -20,7 +20,7 @@ LL |     let e4 = E::Empty4();\n    |              |\n    |              call expression requires function\n    |\n-help: `E::Empty4` is a unit variant, you need to write it without the parenthesis\n+help: `E::Empty4` is a unit variant, you need to write it without the parentheses\n    |\n LL |     let e4 = E::Empty4;\n    |              ~~~~~~~~~\n@@ -41,7 +41,7 @@ LL |     let xe4 = XE::XEmpty4();\n    |               |\n    |               call expression requires function\n    |\n-help: `XE::XEmpty4` is a unit variant, you need to write it without the parenthesis\n+help: `XE::XEmpty4` is a unit variant, you need to write it without the parentheses\n    |\n LL |     let xe4 = XE::XEmpty4;\n    |               ~~~~~~~~~~~"}, {"sha": "db1b3f098374e5bf51a92faf3ca88d60a990a13e", "filename": "src/test/ui/error-codes/E0618.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -9,7 +9,7 @@ LL |     X::Entry();\n    |     |\n    |     call expression requires function\n    |\n-help: `X::Entry` is a unit variant, you need to write it without the parenthesis\n+help: `X::Entry` is a unit variant, you need to write it without the parentheses\n    |\n LL |     X::Entry;\n    |     ~~~~~~~~"}, {"sha": "edee6576244722e0d093a3cf49350c4579285c72", "filename": "src/test/ui/let-else/let-else-bool-binop-init.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.stderr?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -4,7 +4,7 @@ error: a `&&` expression cannot be directly assigned in `let...else`\n LL |     let true = true && false else { return };\n    |                ^^^^^^^^^^^^^\n    |\n-help: wrap the expression in parenthesis\n+help: wrap the expression in parentheses\n    |\n LL |     let true = (true && false) else { return };\n    |                +             +\n@@ -15,7 +15,7 @@ error: a `||` expression cannot be directly assigned in `let...else`\n LL |     let true = true || false else { return };\n    |                ^^^^^^^^^^^^^\n    |\n-help: wrap the expression in parenthesis\n+help: wrap the expression in parentheses\n    |\n LL |     let true = (true || false) else { return };\n    |                +             +"}, {"sha": "51051bbd4d8d6c9fb0af145b22572ab11ab46626", "filename": "src/test/ui/let-else/let-else-brace-before-else.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.stderr?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -4,7 +4,7 @@ error: right curly brace `}` before `else` in a `let...else` statement not allow\n LL |     let Some(1) = { Some(1) } else {\n    |                             ^\n    |\n-help: try wrapping the expression in parenthesis\n+help: try wrapping the expression in parentheses\n    |\n LL |     let Some(1) = ({ Some(1) }) else {\n    |                   +           +\n@@ -15,7 +15,7 @@ error: right curly brace `}` before `else` in a `let...else` statement not allow\n LL |     let Some(1) = loop { break Some(1) } else {\n    |                                        ^\n    |\n-help: try wrapping the expression in parenthesis\n+help: try wrapping the expression in parentheses\n    |\n LL |     let Some(1) = (loop { break Some(1) }) else {\n    |                   +                      +\n@@ -26,7 +26,7 @@ error: right curly brace `}` before `else` in a `let...else` statement not allow\n LL |     let 2 = 1 + match 1 { n => n } else {\n    |                                  ^\n    |\n-help: try wrapping the expression in parenthesis\n+help: try wrapping the expression in parentheses\n    |\n LL |     let 2 = 1 + (match 1 { n => n }) else {\n    |                 +                  +\n@@ -37,7 +37,7 @@ error: right curly brace `}` before `else` in a `let...else` statement not allow\n LL |     let Some(1) = unsafe { unsafe_fn() } else {\n    |                                        ^\n    |\n-help: try wrapping the expression in parenthesis\n+help: try wrapping the expression in parentheses\n    |\n LL |     let Some(1) = (unsafe { unsafe_fn() }) else {\n    |                   +                      +"}, {"sha": "053b428bd12cc60131c00550f275c3a20d22681b", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -9,7 +9,7 @@ fn main() {\n \n     for ( elem in vec ) {\n         //~^ ERROR expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n-        //~| ERROR unexpected parenthesis surrounding `for` loop head\n+        //~| ERROR unexpected parentheses surrounding `for` loop head\n         const RECOVERY_WITNESS: () = 0; //~ ERROR mismatched types\n     }\n }"}, {"sha": "fa55970dbd129096fff13178bce7d1225027e42f", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -4,13 +4,13 @@ error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n LL |     for ( elem in vec ) {\n    |                ^^ expected one of `)`, `,`, `@`, or `|`\n \n-error: unexpected parenthesis surrounding `for` loop head\n+error: unexpected parentheses surrounding `for` loop head\n   --> $DIR/recover-for-loop-parens-around-head.rs:10:9\n    |\n LL |     for ( elem in vec ) {\n    |         ^             ^\n    |\n-help: remove parenthesis in `for` loop\n+help: remove parentheses in `for` loop\n    |\n LL -     for ( elem in vec ) {\n LL +     for  elem in vec  {"}, {"sha": "ae28c1403753a05e6f0edc1fbbe358042350becc", "filename": "src/test/ui/pattern/issue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Fpattern%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Fpattern%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -5,7 +5,7 @@\n // the tuple struct pattern, has 0 fields, but requires 1 field.\n //\n // In emitting E0023, we try to see if this is a case of e.g., `Some(a, b, c)` but where\n-// the scrutinee was of type `Some((a, b, c))`, and suggest that parenthesis be added.\n+// the scrutinee was of type `Some((a, b, c))`, and suggest that parentheses be added.\n //\n // However, we did not account for the expected type being different than the tuple pattern type.\n // This caused an issue when the tuple pattern type (`P<T>`) was generic."}, {"sha": "06c52befd52b2daa8694f9c2d12af234bae2e67f", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -338,7 +338,7 @@ LL |         let _ = Z::Unit();\n    |                 |\n    |                 call expression requires function\n    |\n-help: `Z::Unit` is a unit variant, you need to write it without the parenthesis\n+help: `Z::Unit` is a unit variant, you need to write it without the parentheses\n    |\n LL |         let _ = Z::Unit;\n    |                 ~~~~~~~\n@@ -372,7 +372,7 @@ LL |     let _: E = m::E::Unit();\n    |                |\n    |                call expression requires function\n    |\n-help: `m::E::Unit` is a unit variant, you need to write it without the parenthesis\n+help: `m::E::Unit` is a unit variant, you need to write it without the parentheses\n    |\n LL |     let _: E = m::E::Unit;\n    |                ~~~~~~~~~~\n@@ -406,7 +406,7 @@ LL |     let _: E = E::Unit();\n    |                |\n    |                call expression requires function\n    |\n-help: `E::Unit` is a unit variant, you need to write it without the parenthesis\n+help: `E::Unit` is a unit variant, you need to write it without the parentheses\n    |\n LL |     let _: E = E::Unit;\n    |                ~~~~~~~"}, {"sha": "513b473c4de436f5b96e79b75a2f064d01c58acf", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -16,7 +16,7 @@ LL |     if &let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:33:9\n@@ -25,7 +25,7 @@ LL |     if !let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:34:9\n@@ -34,7 +34,7 @@ LL |     if *let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:36:9\n@@ -43,7 +43,7 @@ LL |     if -let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:44:9\n@@ -52,7 +52,7 @@ LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:48:16\n@@ -61,7 +61,7 @@ LL |     if true || let 0 = 0 {}\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:49:17\n@@ -70,7 +70,7 @@ LL |     if (true || let 0 = 0) {}\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:50:25\n@@ -79,7 +79,7 @@ LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:51:25\n@@ -88,7 +88,7 @@ LL |     if true || (true && let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:54:12\n@@ -97,7 +97,7 @@ LL |     if x = let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:57:15\n@@ -106,7 +106,7 @@ LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:59:11\n@@ -115,7 +115,7 @@ LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:61:9\n@@ -124,7 +124,7 @@ LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:65:8\n@@ -133,7 +133,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:69:8\n@@ -142,7 +142,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:76:8\n@@ -151,7 +151,7 @@ LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:84:8\n@@ -160,7 +160,7 @@ LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:90:19\n@@ -169,7 +169,7 @@ LL |     if let true = let true = true {}\n    |                   ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:94:12\n@@ -178,7 +178,7 @@ LL |     while &let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:97:12\n@@ -187,7 +187,7 @@ LL |     while !let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:98:12\n@@ -196,7 +196,7 @@ LL |     while *let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:100:12\n@@ -205,7 +205,7 @@ LL |     while -let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:108:12\n@@ -214,7 +214,7 @@ LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:112:19\n@@ -223,7 +223,7 @@ LL |     while true || let 0 = 0 {}\n    |                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:113:20\n@@ -232,7 +232,7 @@ LL |     while (true || let 0 = 0) {}\n    |                    ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:114:28\n@@ -241,7 +241,7 @@ LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:115:28\n@@ -250,7 +250,7 @@ LL |     while true || (true && let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:118:15\n@@ -259,7 +259,7 @@ LL |     while x = let 0 = 0 {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:121:18\n@@ -268,7 +268,7 @@ LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:123:14\n@@ -277,7 +277,7 @@ LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:125:12\n@@ -286,7 +286,7 @@ LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:129:11\n@@ -295,7 +295,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:133:11\n@@ -304,7 +304,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:140:11\n@@ -313,7 +313,7 @@ LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:148:11\n@@ -322,7 +322,7 @@ LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:154:22\n@@ -331,7 +331,7 @@ LL |     while let true = let true = true {}\n    |                      ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:168:6\n@@ -340,7 +340,7 @@ LL |     &let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:170:6\n@@ -349,7 +349,7 @@ LL |     !let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:171:6\n@@ -358,7 +358,7 @@ LL |     *let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:173:6\n@@ -367,7 +367,7 @@ LL |     -let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:181:6\n@@ -376,7 +376,7 @@ LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:185:13\n@@ -385,7 +385,7 @@ LL |     true || let 0 = 0;\n    |             ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:186:14\n@@ -394,7 +394,7 @@ LL |     (true || let 0 = 0);\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:187:22\n@@ -403,7 +403,7 @@ LL |     true && (true || let 0 = 0);\n    |                      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:190:9\n@@ -412,7 +412,7 @@ LL |     x = let 0 = 0;\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:192:12\n@@ -421,7 +421,7 @@ LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:193:8\n@@ -430,7 +430,7 @@ LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:194:6\n@@ -439,7 +439,7 @@ LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:196:6\n@@ -448,7 +448,7 @@ LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:200:6\n@@ -457,7 +457,7 @@ LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:204:6\n@@ -466,7 +466,7 @@ LL |     &let 0 = 0\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:215:17\n@@ -475,7 +475,7 @@ LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:219:17\n@@ -484,7 +484,7 @@ LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:223:17\n@@ -493,7 +493,7 @@ LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:233:17\n@@ -502,7 +502,7 @@ LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n \n warning: the feature `let_chains` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/disallowed-positions.rs:20:12"}, {"sha": "81f2e498fe5de86e415669c1876aef889155322b", "filename": "src/test/ui/suggestions/suggest-on-bare-closure-call.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-on-bare-closure-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-on-bare-closure-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-on-bare-closure-call.stderr?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -6,7 +6,7 @@ LL |     let _ = ||{}();\n    |               |\n    |               call expression requires function\n    |\n-help: if you meant to create this closure and immediately call it, surround the closure with parenthesis\n+help: if you meant to create this closure and immediately call it, surround the closure with parentheses\n    |\n LL |     let _ = (||{})();\n    |             +    +"}, {"sha": "e918551020c313ea09702b8f6abd877311c9cdb0", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -27,7 +27,7 @@ LL |     Alias::Unit();\n    |     |\n    |     call expression requires function\n    |\n-help: `Alias::Unit` is a unit variant, you need to write it without the parenthesis\n+help: `Alias::Unit` is a unit variant, you need to write it without the parentheses\n    |\n LL |     Alias::Unit;\n    |     ~~~~~~~~~~~"}, {"sha": "42478e3416ece7a2549529503c03943b25fbaadf", "filename": "src/tools/clippy/clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -98,7 +98,7 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n                 reindent_multiline(or_body_snippet.into(), true, Some(indent));\n \n             let suggestion = if scrutinee.span.from_expansion() {\n-                    // we don't want parenthesis around macro, e.g. `(some_macro!()).unwrap_or(0)`\n+                    // we don't want parentheses around macro, e.g. `(some_macro!()).unwrap_or(0)`\n                     sugg::Sugg::hir_with_macro_callsite(cx, scrutinee, \"..\")\n                 }\n                 else {"}, {"sha": "01fb944cc36f64dcfd266726ce70bf4aa6ba5418", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -16,10 +16,10 @@ use std::convert::TryInto;\n use std::fmt::Display;\n use std::ops::{Add, Neg, Not, Sub};\n \n-/// A helper type to build suggestion correctly handling parenthesis.\n+/// A helper type to build suggestion correctly handling parentheses.\n #[derive(Clone, PartialEq)]\n pub enum Sugg<'a> {\n-    /// An expression that never needs parenthesis such as `1337` or `[0; 42]`.\n+    /// An expression that never needs parentheses such as `1337` or `[0; 42]`.\n     NonParen(Cow<'a, str>),\n     /// An expression that does not fit in other variants.\n     MaybeParen(Cow<'a, str>),\n@@ -283,7 +283,7 @@ impl<'a> Sugg<'a> {\n         }\n     }\n \n-    /// Adds parenthesis to any expression that might need them. Suitable to the\n+    /// Adds parentheses to any expression that might need them. Suitable to the\n     /// `self` argument of a method call\n     /// (e.g., to build `bar.foo()` or `(1 + 2).foo()`).\n     pub fn maybe_par(self) -> Self {"}, {"sha": "05d6c56f2aca0a5dd63a3d635468800d0431a5e3", "filename": "src/tools/clippy/tests/ui/manual_unwrap_or.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.fixed?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -74,10 +74,10 @@ fn result_unwrap_or() {\n     let a = Ok::<i32, &str>(1);\n     a.unwrap_or(42);\n \n-    // int case, suggestion must surround Result expr with parenthesis\n+    // int case, suggestion must surround Result expr with parentheses\n     (Ok(1) as Result<i32, &str>).unwrap_or(42);\n \n-    // method call case, suggestion must not surround Result expr `s.method()` with parenthesis\n+    // method call case, suggestion must not surround Result expr `s.method()` with parentheses\n     struct S {}\n     impl S {\n         fn method(self) -> Option<i32> {"}, {"sha": "09f62c69b71de15b832c836a03c21829a78d501f", "filename": "src/tools/clippy/tests/ui/manual_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_unwrap_or.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -95,13 +95,13 @@ fn result_unwrap_or() {\n         Err(_) => 42,\n     };\n \n-    // int case, suggestion must surround Result expr with parenthesis\n+    // int case, suggestion must surround Result expr with parentheses\n     match Ok(1) as Result<i32, &str> {\n         Ok(i) => i,\n         Err(_) => 42,\n     };\n \n-    // method call case, suggestion must not surround Result expr `s.method()` with parenthesis\n+    // method call case, suggestion must not surround Result expr `s.method()` with parentheses\n     struct S {}\n     impl S {\n         fn method(self) -> Option<i32> {"}, {"sha": "70ff08f36551838743b29d059c5d207a6f1593cd", "filename": "src/tools/clippy/tests/ui/useless_conversion.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.fixed?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -66,7 +66,7 @@ fn main() {\n     let _ = vec![1, 2, 3].into_iter();\n     let _: String = format!(\"Hello {}\", \"world\");\n \n-    // keep parenthesis around `a + b` for suggestion (see #4750)\n+    // keep parentheses around `a + b` for suggestion (see #4750)\n     let a: i32 = 1;\n     let b: i32 = 1;\n     let _ = (a + b) * 3;"}, {"sha": "f2444a8f436bf1a699e45cdee099846a261f9568", "filename": "src/tools/clippy/tests/ui/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion.rs?ref=e0e2b3cc434cc86f3aa36dd8e99e84d3416b88d8", "patch": "@@ -66,7 +66,7 @@ fn main() {\n     let _ = vec![1, 2, 3].into_iter().into_iter();\n     let _: String = format!(\"Hello {}\", \"world\").into();\n \n-    // keep parenthesis around `a + b` for suggestion (see #4750)\n+    // keep parentheses around `a + b` for suggestion (see #4750)\n     let a: i32 = 1;\n     let b: i32 = 1;\n     let _ = i32::from(a + b) * 3;"}]}