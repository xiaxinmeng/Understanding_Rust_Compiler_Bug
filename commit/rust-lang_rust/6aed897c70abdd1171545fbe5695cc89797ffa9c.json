{"sha": "6aed897c70abdd1171545fbe5695cc89797ffa9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZWQ4OTdjNzBhYmRkMTE3MTU0NWZiZTU2OTVjYzg5Nzk3ZmZhOWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-09T08:40:23Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-09T08:43:45Z"}, "message": "1 > -1", "tree": {"sha": "871d370952a7c740d78f5c33e8fbdbf69a2893a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/871d370952a7c740d78f5c33e8fbdbf69a2893a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6aed897c70abdd1171545fbe5695cc89797ffa9c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlicK8EACgkQpp+NIls6\n19k0YA/9FhAjMn35AdFBZO345eio2RYbJKZxT7A/1wzQ17dkxztEa5nRxbAsxrID\ncxolkx8lfhLGlLnqxb5S+n7JCHs7mZRiTTXIKeRIyOCXoVu4gCcyi438yuYcgbOh\nrypoGJpf/Z2TJ/xbjUSq4ucWs+WXpLesqm6MF6GfwBl13yr+D5ru3DImNKrbrSwO\n8TXLL2OD42UnuYPbLexuRs8JJakCrD8iifPvmrqQLksrZS95ILKh+fwF4ALGJfnA\n0PmhcJwqgmjlYKXR0dtgIOQFnCz9L/zBhW4f+RHP64ZE8qScaH5BbBuk+PWULnvT\nhoaS5iS27FCsq2lehunXwbuM2liMf0ShxrW9qydW9ipToBNZHGZauak5knUsM+Je\n+8u+Urfa4NhxCwSpZdCu8mFDxDeW/w1SChuQVQcGozfMjRxaoh3erX3IVZuMRYyD\nitbfBjmizLGMIiars3+zji5QIDPojFrTRF+HYk+/QR7sUfpNfprUFJfdOvKl7jWB\n+oiqWqvfNWi1Nn9+xBQC8IIywoA/zoRF4wf+j5nanRh8VkT8CqKjbuHiC2pZjEAD\nRpkN3/X0brPt4AYUo7acX4M/Kw+LQI6CI5hTgoOB0tBAo5lCFLcWTUmBdcrdu2aA\npmWn6hU+I7pZEu//cB/RrtQ4TEdnVJOul2DbZeuELOtNkKJnLA4=\n=IAWk\n-----END PGP SIGNATURE-----", "payload": "tree 871d370952a7c740d78f5c33e8fbdbf69a2893a7\nparent 4f3fc85525731af4c8e8f80ed938864fc2d08a82\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1486629623 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1486629825 +0100\n\n1 > -1"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6aed897c70abdd1171545fbe5695cc89797ffa9c", "html_url": "https://github.com/rust-lang/rust/commit/6aed897c70abdd1171545fbe5695cc89797ffa9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6aed897c70abdd1171545fbe5695cc89797ffa9c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f3fc85525731af4c8e8f80ed938864fc2d08a82", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3fc85525731af4c8e8f80ed938864fc2d08a82", "html_url": "https://github.com/rust-lang/rust/commit/4f3fc85525731af4c8e8f80ed938864fc2d08a82"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "2823e3edbea9ed7341bc99300acf42423f0d2e50", "filename": "src/operator.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6aed897c70abdd1171545fbe5695cc89797ffa9c/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aed897c70abdd1171545fbe5695cc89797ffa9c/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=6aed897c70abdd1171545fbe5695cc89797ffa9c", "patch": "@@ -235,9 +235,13 @@ pub fn binary_op<'tcx>(\n \n         (Eq, _) => PrimVal::from_bool(l == r),\n         (Ne, _) => PrimVal::from_bool(l != r),\n+        (Lt, k) if k.is_signed_int() => PrimVal::from_bool((l as i128) < (r as i128)),\n         (Lt, _) => PrimVal::from_bool(l <  r),\n+        (Le, k) if k.is_signed_int() => PrimVal::from_bool((l as i128) <= (r as i128)),\n         (Le, _) => PrimVal::from_bool(l <= r),\n+        (Gt, k) if k.is_signed_int() => PrimVal::from_bool((l as i128) > (r as i128)),\n         (Gt, _) => PrimVal::from_bool(l >  r),\n+        (Ge, k) if k.is_signed_int() => PrimVal::from_bool((l as i128) >= (r as i128)),\n         (Ge, _) => PrimVal::from_bool(l >= r),\n \n         (BitOr,  _) => PrimVal::Bytes(l | r),"}, {"sha": "e812d116286ace8fe90b9284cfecf53ede0b11bb", "filename": "src/value.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6aed897c70abdd1171545fbe5695cc89797ffa9c/src%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aed897c70abdd1171545fbe5695cc89797ffa9c/src%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue.rs?ref=6aed897c70abdd1171545fbe5695cc89797ffa9c", "patch": "@@ -214,6 +214,14 @@ impl PrimValKind {\n         }\n     }\n \n+    pub fn is_signed_int(self) -> bool {\n+        use self::PrimValKind::*;\n+        match self {\n+            I8 | I16 | I32 | I64 | I128 => true,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn from_uint_size(size: u64) -> Self {\n         match size {\n             1 => PrimValKind::U8,"}, {"sha": "33c81cab3817bb6ba26c1260d27dbf1b4a514dba", "filename": "tests/run-pass/issue-15523-big.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6aed897c70abdd1171545fbe5695cc89797ffa9c/tests%2Frun-pass%2Fissue-15523-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aed897c70abdd1171545fbe5695cc89797ffa9c/tests%2Frun-pass%2Fissue-15523-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-15523-big.rs?ref=6aed897c70abdd1171545fbe5695cc89797ffa9c", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 15523: derive(PartialOrd) should use the provided\n+// discriminant values for the derived ordering.\n+//\n+// This test is checking corner cases that arise when you have\n+// 64-bit values in the variants.\n+\n+#[derive(PartialEq, PartialOrd)]\n+#[repr(u64)]\n+enum Eu64 {\n+    Pos2 = 2,\n+    PosMax = !0,\n+    Pos1 = 1,\n+}\n+\n+#[derive(PartialEq, PartialOrd)]\n+#[repr(i64)]\n+enum Ei64 {\n+    Pos2 = 2,\n+    Neg1 = -1,\n+    NegMin = 1 << 63,\n+    PosMax = !(1 << 63),\n+    Pos1 = 1,\n+}\n+\n+fn main() {\n+    assert!(Eu64::Pos2 > Eu64::Pos1);\n+    assert!(Eu64::Pos2 < Eu64::PosMax);\n+    assert!(Eu64::Pos1 < Eu64::PosMax);\n+\n+\n+    assert!(Ei64::Pos2 > Ei64::Pos1);\n+    assert!(Ei64::Pos2 > Ei64::Neg1);\n+    assert!(Ei64::Pos1 > Ei64::Neg1);\n+    assert!(Ei64::Pos2 > Ei64::NegMin);\n+    assert!(Ei64::Pos1 > Ei64::NegMin);\n+    assert!(Ei64::Pos2 < Ei64::PosMax);\n+    assert!(Ei64::Pos1 < Ei64::PosMax);\n+}"}]}