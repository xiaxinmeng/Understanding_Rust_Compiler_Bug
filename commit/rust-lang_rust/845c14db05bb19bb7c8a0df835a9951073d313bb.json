{"sha": "845c14db05bb19bb7c8a0df835a9951073d313bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NWMxNGRiMDViYjE5YmI3YzhhMGRmODM1YTk5NTEwNzNkMzEzYmI=", "commit": {"author": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2021-02-14T11:34:22Z"}, "committer": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2021-02-14T17:06:16Z"}, "message": "Simpler way to convert to digit", "tree": {"sha": "de9c2ac8e50a6f078d3b8e52854c52f444fc7520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de9c2ac8e50a6f078d3b8e52854c52f444fc7520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/845c14db05bb19bb7c8a0df835a9951073d313bb", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEElfpt1fswGixBWxap34UWHa4P82sFAmApWIgACgkQ34UWHa4P\n82snEBAAspl+6asz3qpUMPowI84E/uzFvZ7D7xGHWnBTxm2n/jEc+q7h9x5W1N8N\ngBuCfQdn3cpIEB/ylRhy+ncN2whkTOlGlHA9t/27eYRwi/UdXKEA+c+a4RJNeGYu\nUoFtvzLhXN1x2jjFufgBqP3FDBaUR5q01Zg7dhrgCUOZu5B4Ji0KnoY+Tn/kmeK7\n70oYLxdPpQCPjZsBZ++q/KxXQhpjNel/A3GQbhsjFucP3DY8ujb/PUi2CYP8y/yY\nI69O8msWdHy1EIHiQYg302C5sE1EbjOC5Gxj1qwQcbwUDGDiyUbMyxwuU2V6rSoW\ngPkmyETYExD34lQKaK4mkzkaJWXjAjIZ1E/ohkkXpEzKCagLxm9lei83urjQvHYT\nSMBqN6vHHKvSvefiGNK2EWunWavK8IyhhaZWdFIHGtiL+AzXbQ6odlnvcApUwryR\nVeNL9aEdqXV8X8ZnKayqChJKlz5Y8Gk77vnLfs5Wd1x6XrSE/+FrvW6f5dt15+8f\nt72LeaR/qy2f82qgd4BvFMhhjgXRivBZ4/AGIfIjgG7QrODWCnIdJFNy5dSTNwmw\nK8bD9xqtWXX7eBszF2MM+j1hBvopZx34mkzVVM0e0yQh+DBGt3zi28D8/PrwGwO2\nreLQ6FZd/H/TcHysRAinTwSApFzkHMdr/NHCwgwM3Fm4UVvEJ0I=\n=hmSk\n-----END PGP SIGNATURE-----", "payload": "tree de9c2ac8e50a6f078d3b8e52854c52f444fc7520\nparent b70428b9fb08ce79ebc28c3f2c07819bba1a467d\nauthor Giles Cope <gilescope@gmail.com> 1613302462 +0000\ncommitter Giles Cope <gilescope@gmail.com> 1613322376 +0000\n\nSimpler way to convert to digit\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/845c14db05bb19bb7c8a0df835a9951073d313bb", "html_url": "https://github.com/rust-lang/rust/commit/845c14db05bb19bb7c8a0df835a9951073d313bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/845c14db05bb19bb7c8a0df835a9951073d313bb/comments", "author": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b70428b9fb08ce79ebc28c3f2c07819bba1a467d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b70428b9fb08ce79ebc28c3f2c07819bba1a467d", "html_url": "https://github.com/rust-lang/rust/commit/b70428b9fb08ce79ebc28c3f2c07819bba1a467d"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "d92df5532e589b027732c4b77b4462e9ed9a3c58", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/845c14db05bb19bb7c8a0df835a9951073d313bb/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/845c14db05bb19bb7c8a0df835a9951073d313bb/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=845c14db05bb19bb7c8a0df835a9951073d313bb", "patch": "@@ -1,5 +1,6 @@\n //! impl char {}\n \n+use crate::intrinsics::likely;\n use crate::slice;\n use crate::str::from_utf8_unchecked_mut;\n use crate::unicode::printable::is_printable;\n@@ -330,16 +331,14 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_digit(self, radix: u32) -> Option<u32> {\n+        assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");\n+        const ASCII_DIGIT_MASK: u32 = 0b11_0000;\n         // the code is split up here to improve execution speed for cases where\n         // the `radix` is constant and 10 or smaller\n-        let val = if radix <= 10 {\n-            match self {\n-                '0'..='9' => self as u32 - '0' as u32,\n-                _ => return None,\n-            }\n+        let val = if likely(radix <= 10) {\n+            // If not a digit, a number greater than radix will be created.\n+            self as u32 ^ ASCII_DIGIT_MASK\n         } else {\n-            assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");\n-\n             match self {\n                 '0'..='9' => self as u32 - '0' as u32,\n                 'a'..='z' => self as u32 - 'a' as u32 + 10,"}]}