{"sha": "d164ab65f706540f0132268c8ad2237d2e53e08a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNjRhYjY1ZjcwNjU0MGYwMTMyMjY4YzhhZDIyMzdkMmU1M2UwOGE=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-07-26T19:07:07Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-07-26T19:07:07Z"}, "message": "Merge commit 'da5a6fb1b65ec6581a67e942a3850f6bc15a552c' into clippyup", "tree": {"sha": "7568209d335d3f85c1e42c94923dfbae0c7282ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7568209d335d3f85c1e42c94923dfbae0c7282ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d164ab65f706540f0132268c8ad2237d2e53e08a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d164ab65f706540f0132268c8ad2237d2e53e08a", "html_url": "https://github.com/rust-lang/rust/commit/d164ab65f706540f0132268c8ad2237d2e53e08a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d164ab65f706540f0132268c8ad2237d2e53e08a/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7c8b96e668a1e3c84cf559de1426c6eebd7d1c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c8b96e668a1e3c84cf559de1426c6eebd7d1c1", "html_url": "https://github.com/rust-lang/rust/commit/b7c8b96e668a1e3c84cf559de1426c6eebd7d1c1"}], "stats": {"total": 1099, "additions": 840, "deletions": 259}, "files": [{"sha": "e85e8874ba60039e3ba12819d198603bb95211b4", "filename": ".github/deploy.sh", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/.github%2Fdeploy.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/.github%2Fdeploy.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdeploy.sh?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -19,7 +19,7 @@ fi\n \n if [[ $BETA = \"true\" ]]; then\n   echo \"Update documentation for the beta release\"\n-  cp -r out/master out/beta\n+  cp -r out/master/* out/beta\n fi\n \n # Generate version index that is shown as root index page\n@@ -33,12 +33,13 @@ cd out\n git config user.name \"GHA CI\"\n git config user.email \"gha@ci.invalid\"\n \n-if git diff --exit-code --quiet; then\n-  echo \"No changes to the output on this push; exiting.\"\n-  exit 0\n-fi\n-\n if [[ -n $TAG_NAME ]]; then\n+  # track files, so that the following check works\n+  git add --intent-to-add \"$TAG_NAME\"\n+  if git diff --exit-code --quiet -- $TAG_NAME/; then\n+    echo \"No changes to the output on this push; exiting.\"\n+    exit 0\n+  fi\n   # Add the new dir\n   git add \"$TAG_NAME\"\n   # Update the symlink\n@@ -47,9 +48,17 @@ if [[ -n $TAG_NAME ]]; then\n   git add versions.json\n   git commit -m \"Add documentation for ${TAG_NAME} release: ${SHA}\"\n elif [[ $BETA = \"true\" ]]; then\n+  if git diff --exit-code --quiet -- beta/; then\n+    echo \"No changes to the output on this push; exiting.\"\n+    exit 0\n+  fi\n   git add beta\n   git commit -m \"Automatic deploy to GitHub Pages (beta): ${SHA}\"\n else\n+  if git diff --exit-code --quiet; then\n+    echo \"No changes to the output on this push; exiting.\"\n+    exit 0\n+  fi\n   git add .\n   git commit -m \"Automatic deploy to GitHub Pages: ${SHA}\"\n fi"}, {"sha": "776b04295f949c0e46b46fd8a2186fd91604cbd1", "filename": "CHANGELOG.md", "status": "modified", "additions": 67, "deletions": 4, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -1,16 +1,78 @@\n-# Change Log\n+# Changelog\n \n All notable changes to this project will be documented in this file.\n See [Changelog Update](doc/changelog_update.md) if you want to update this\n document.\n \n ## Unreleased / In Rust Nightly\n \n-[7ea7cd1...master](https://github.com/rust-lang/rust-clippy/compare/7ea7cd1...master)\n+[c2c07fa...master](https://github.com/rust-lang/rust-clippy/compare/7ea7cd1...master)\n+\n+## Rust 1.46\n+\n+Current beta, release 2020-08-27\n+\n+[7ea7cd1...c2c07fa](https://github.com/rust-lang/rust-clippy/compare/7ea7cd1...master)\n+\n+### New lints\n+\n+* [`unnested_or_patterns`] [#5378](https://github.com/rust-lang/rust-clippy/pull/5378)\n+* [`iter_next_slice`] [#5597](https://github.com/rust-lang/rust-clippy/pull/5597)\n+* [`unnecessary_sort_by`] [#5623](https://github.com/rust-lang/rust-clippy/pull/5623)\n+* [`vec_resize_to_zero`] [#5637](https://github.com/rust-lang/rust-clippy/pull/5637)\n+\n+### Moves and Deprecations\n+\n+* Move [`cast_ptr_alignment`] to pedantic [#5667](https://github.com/rust-lang/rust-clippy/pull/5667)\n+\n+### Enhancements\n+\n+* Improve [`mem_replace_with_uninit`] lint [#5695](https://github.com/rust-lang/rust-clippy/pull/5695)\n+\n+### False Positive Fixes\n+\n+* [`len_zero`]: Avoid linting ranges when the `range_is_empty` feature is not enabled\n+  [#5656](https://github.com/rust-lang/rust-clippy/pull/5656)\n+* [`let_and_return`]: Don't lint if a temporary borrow is involved\n+  [#5680](https://github.com/rust-lang/rust-clippy/pull/5680)\n+* [`reversed_empty_ranges`]: Avoid linting `N..N` in for loop arguments in\n+  [#5692](https://github.com/rust-lang/rust-clippy/pull/5692)\n+* [`if_same_then_else`]: Don't assume multiplication is always commutative\n+  [#5702](https://github.com/rust-lang/rust-clippy/pull/5702)\n+* [`blacklisted_name`]: Remove `bar` from the default configuration\n+  [#5712](https://github.com/rust-lang/rust-clippy/pull/5712)\n+* [`redundant_pattern_matching`]: Avoid suggesting non-`const fn` calls in const contexts\n+  [#5724](https://github.com/rust-lang/rust-clippy/pull/5724)\n+\n+### Suggestion Fixes/Improvements\n+\n+* Fix suggestion of [`unit_arg`] lint, so that it suggest semantic equivalent code\n+  [#4455](https://github.com/rust-lang/rust-clippy/pull/4455)\n+* Add auto applicable suggestion to [`macro_use_imports`]\n+  [#5279](https://github.com/rust-lang/rust-clippy/pull/5279)\n+\n+### ICE Fixes\n+\n+* Fix ICE in the `consts` module of Clippy [#5709](https://github.com/rust-lang/rust-clippy/pull/5709)\n+\n+### Documentation Improvements\n+\n+* Improve code examples across multiple lints [#5664](https://github.com/rust-lang/rust-clippy/pull/5664)\n+\n+### Others\n+\n+* Introduce a `--rustc` flag to `clippy-driver`, which turns `clippy-driver`\n+  into `rustc` and passes all the given arguments to `rustc`. This is especially\n+  useful for tools that need the `rustc` version Clippy was compiled with,\n+  instead of the Clippy version. E.g. `clippy-driver --rustc --version` will\n+  print the output of `rustc --version`.\n+  [#5178](https://github.com/rust-lang/rust-clippy/pull/5178)\n+* New issue templates now make it easier to complain if Clippy is too annoying\n+  or not annoying enough! [#5735](https://github.com/rust-lang/rust-clippy/pull/5735)\n \n ## Rust 1.45\n \n-Current beta, release 2020-07-16\n+Current stable, released 2020-07-16\n \n [891e1a8...7ea7cd1](https://github.com/rust-lang/rust-clippy/compare/891e1a8...7ea7cd1)\n \n@@ -87,7 +149,7 @@ and [`similar_names`]. [#5651](https://github.com/rust-lang/rust-clippy/pull/565\n \n ## Rust 1.44\n \n-Current stable, released 2020-06-04\n+Released 2020-06-04\n \n [204bb9b...891e1a8](https://github.com/rust-lang/rust-clippy/compare/204bb9b...891e1a8)\n \n@@ -1679,6 +1741,7 @@ Released 2018-09-13\n [`uninit_assumed_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninit_assumed_init\n [`unit_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_arg\n [`unit_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_cmp\n+[`unit_return_expecting_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_return_expecting_ord\n [`unknown_clippy_lints`]: https://rust-lang.github.io/rust-clippy/master/index.html#unknown_clippy_lints\n [`unnecessary_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n [`unnecessary_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_filter_map"}, {"sha": "a2984d73641694b500415990e41c25b9b57fbeda", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -42,10 +42,8 @@ Table of contents:\n \n ## Usage\n \n-Since this is a tool for helping the developer of a library or application\n-write better code, it is recommended not to include Clippy as a hard dependency.\n-Options include using it as an optional dependency, as a cargo subcommand, or\n-as an included feature during build. These options are detailed below.\n+Below are instructions on how to use Clippy as a subcommand, compiled from source\n+or in Travis CI.\n \n ### As a cargo subcommand (`cargo clippy`)\n "}, {"sha": "c17a0e8333058fe91497dc9d67f3c0434481fe38", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -153,7 +153,7 @@ declare_deprecated_lint! {\n     ///\n     /// **Deprecation reason:** Associated-constants are now preferred.\n     pub REPLACE_CONSTS,\n-    \"associated-constants `MIN`/`MAX` of integers are prefered to `{min,max}_value()` and module constants\"\n+    \"associated-constants `MIN`/`MAX` of integers are preferred to `{min,max}_value()` and module constants\"\n }\n \n declare_deprecated_lint! {"}, {"sha": "b5fb51af1c7f31f6192ac279d107f274cf5156bc", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -10,7 +10,7 @@ use rustc_span::source_map::Span;\n declare_clippy_lint! {\n     /// **What it does:** Checks for explicit `deref()` or `deref_mut()` method calls.\n     ///\n-    /// **Why is this bad?** Derefencing by `&*x` or `&mut *x` is clearer and more concise,\n+    /// **Why is this bad?** Dereferencing by `&*x` or `&mut *x` is clearer and more concise,\n     /// when not part of a method chain.\n     ///\n     /// **Example:**"}, {"sha": "9fb10c7f62768583ec311d0748f68796cf0a5b32", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -55,7 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n             ..\n         } = item.kind\n         {\n-            // Remember for each inherent implementation encoutered its span and generics\n+            // Remember for each inherent implementation encountered its span and generics\n             // but filter out implementations that have generic params (type or lifetime)\n             // or are derived from a macro\n             if !in_macro(item.span) && generics.params.is_empty() {"}, {"sha": "f371942dbeec57056ca35176bbda2f005d9d8084", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -276,6 +276,7 @@ mod ptr_offset_with_cast;\n mod question_mark;\n mod ranges;\n mod redundant_clone;\n+mod redundant_closure_call;\n mod redundant_field_names;\n mod redundant_pub_crate;\n mod redundant_static_lifetimes;\n@@ -300,6 +301,7 @@ mod trivially_copy_pass_by_ref;\n mod try_err;\n mod types;\n mod unicode;\n+mod unit_return_expecting_ord;\n mod unnamed_address;\n mod unnecessary_sort_by;\n mod unnested_or_patterns;\n@@ -462,7 +464,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     );\n     store.register_removed(\n         \"clippy::replace_consts\",\n-        \"associated-constants `MIN`/`MAX` of integers are prefered to `{min,max}_value()` and module constants\",\n+        \"associated-constants `MIN`/`MAX` of integers are preferred to `{min,max}_value()` and module constants\",\n     );\n     store.register_removed(\n         \"clippy::regex_macro\",\n@@ -701,7 +703,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &misc_early::DOUBLE_NEG,\n         &misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n         &misc_early::MIXED_CASE_HEX_LITERALS,\n-        &misc_early::REDUNDANT_CLOSURE_CALL,\n         &misc_early::REDUNDANT_PATTERN,\n         &misc_early::UNNEEDED_FIELD_PATTERN,\n         &misc_early::UNNEEDED_WILDCARD_PATTERN,\n@@ -758,6 +759,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &ranges::RANGE_ZIP_WITH_LEN,\n         &ranges::REVERSED_EMPTY_RANGES,\n         &redundant_clone::REDUNDANT_CLONE,\n+        &redundant_closure_call::REDUNDANT_CLOSURE_CALL,\n         &redundant_field_names::REDUNDANT_FIELD_NAMES,\n         &redundant_pub_crate::REDUNDANT_PUB_CRATE,\n         &redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n@@ -826,6 +828,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unicode::NON_ASCII_LITERAL,\n         &unicode::UNICODE_NOT_NFC,\n         &unicode::ZERO_WIDTH_SPACE,\n+        &unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD,\n         &unnamed_address::FN_ADDRESS_COMPARISONS,\n         &unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n         &unnecessary_sort_by::UNNECESSARY_SORT_BY,\n@@ -891,6 +894,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box attrs::Attributes);\n     store.register_late_pass(|| box blocks_in_if_conditions::BlocksInIfConditions);\n     store.register_late_pass(|| box unicode::Unicode);\n+    store.register_late_pass(|| box unit_return_expecting_ord::UnitReturnExpectingOrd);\n     store.register_late_pass(|| box strings::StringAdd);\n     store.register_late_pass(|| box implicit_return::ImplicitReturn);\n     store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n@@ -1015,6 +1019,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box int_plus_one::IntPlusOne);\n     store.register_early_pass(|| box formatting::Formatting);\n     store.register_early_pass(|| box misc_early::MiscEarlyLints);\n+    store.register_early_pass(|| box redundant_closure_call::RedundantClosureCall);\n+    store.register_late_pass(|| box redundant_closure_call::RedundantClosureCall);\n     store.register_early_pass(|| box returns::Return);\n     store.register_late_pass(|| box let_and_return::LetReturn);\n     store.register_early_pass(|| box collapsible_if::CollapsibleIf);\n@@ -1356,7 +1362,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&misc_early::DOUBLE_NEG),\n         LintId::of(&misc_early::DUPLICATE_UNDERSCORE_ARGUMENT),\n         LintId::of(&misc_early::MIXED_CASE_HEX_LITERALS),\n-        LintId::of(&misc_early::REDUNDANT_CLOSURE_CALL),\n         LintId::of(&misc_early::REDUNDANT_PATTERN),\n         LintId::of(&misc_early::UNNEEDED_WILDCARD_PATTERN),\n         LintId::of(&misc_early::ZERO_PREFIXED_LITERAL),\n@@ -1390,6 +1395,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n         LintId::of(&ranges::REVERSED_EMPTY_RANGES),\n         LintId::of(&redundant_clone::REDUNDANT_CLONE),\n+        LintId::of(&redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n         LintId::of(&redundant_field_names::REDUNDANT_FIELD_NAMES),\n         LintId::of(&redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n         LintId::of(&reference::DEREF_ADDROF),\n@@ -1436,6 +1442,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::UNNECESSARY_CAST),\n         LintId::of(&types::VEC_BOX),\n         LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n@@ -1589,7 +1596,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::UNNECESSARY_FILTER_MAP),\n         LintId::of(&methods::USELESS_ASREF),\n         LintId::of(&misc::SHORT_CIRCUIT_STATEMENT),\n-        LintId::of(&misc_early::REDUNDANT_CLOSURE_CALL),\n         LintId::of(&misc_early::UNNEEDED_WILDCARD_PATTERN),\n         LintId::of(&misc_early::ZERO_PREFIXED_LITERAL),\n         LintId::of(&needless_bool::BOOL_COMPARISON),\n@@ -1604,6 +1610,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&precedence::PRECEDENCE),\n         LintId::of(&ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n         LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n+        LintId::of(&redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n         LintId::of(&reference::DEREF_ADDROF),\n         LintId::of(&reference::REF_IN_DEREF),\n         LintId::of(&repeat_once::REPEAT_ONCE),\n@@ -1692,6 +1699,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::CAST_REF_TO_MUT),\n         LintId::of(&types::UNIT_CMP),\n         LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),"}, {"sha": "be879dfe28d7038999be8b2be4f0314eb0457d02", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -1512,6 +1512,10 @@ mod redundant_pattern_match {\n             }\n         }\n \n+        let result_expr = match &op.kind {\n+            ExprKind::AddrOf(_, _, borrowed) => borrowed,\n+            _ => op,\n+        };\n         span_lint_and_then(\n             cx,\n             REDUNDANT_PATTERN_MATCHING,\n@@ -1524,7 +1528,7 @@ mod redundant_pattern_match {\n \n                 // while let ... = ... { ... }\n                 //                 ^^^\n-                let op_span = op.span.source_callsite();\n+                let op_span = result_expr.span.source_callsite();\n \n                 // while let ... = ... { ... }\n                 // ^^^^^^^^^^^^^^^^^^^\n@@ -1589,17 +1593,21 @@ mod redundant_pattern_match {\n             };\n \n             if let Some(good_method) = found_good_method {\n+                let span = expr.span.to(op.span);\n+                let result_expr = match &op.kind {\n+                    ExprKind::AddrOf(_, _, borrowed) => borrowed,\n+                    _ => op,\n+                };\n                 span_lint_and_then(\n                     cx,\n                     REDUNDANT_PATTERN_MATCHING,\n                     expr.span,\n                     &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n                     |diag| {\n-                        let span = expr.span.to(op.span);\n                         diag.span_suggestion(\n                             span,\n                             \"try this\",\n-                            format!(\"{}.{}\", snippet(cx, op.span, \"_\"), good_method),\n+                            format!(\"{}.{}\", snippet(cx, result_expr.span, \"_\"), good_method),\n                             Applicability::MaybeIncorrect, // snippet\n                         );\n                     },"}, {"sha": "97cc58023f55e61d62d01d4685e139d909e55c28", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -2354,8 +2354,8 @@ fn lint_iter_nth_zero<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, nth_ar\n                 cx,\n                 ITER_NTH_ZERO,\n                 expr.span,\n-                \"called `.nth(0)` on a `std::iter::Iterator`\",\n-                \"try calling\",\n+                \"called `.nth(0)` on a `std::iter::Iterator`, when `.next()` is equivalent\",\n+                \"try calling `.next()` instead of `.nth(0)`\",\n                 format!(\"{}.next()\", snippet_with_applicability(cx, nth_args[0].span, \"..\", &mut applicability)),\n                 applicability,\n             );\n@@ -3290,7 +3290,12 @@ fn lint_option_as_ref_deref<'tcx>(\n                         if let hir::ExprKind::Path(qpath) = &args[0].kind;\n                         if let hir::def::Res::Local(local_id) = cx.qpath_res(qpath, args[0].hir_id);\n                         if closure_body.params[0].pat.hir_id == local_id;\n-                        let adj = cx.typeck_results().expr_adjustments(&args[0]).iter().map(|x| &x.kind).collect::<Box<[_]>>();\n+                        let adj = cx\n+                            .typeck_results()\n+                            .expr_adjustments(&args[0])\n+                            .iter()\n+                            .map(|x| &x.kind)\n+                            .collect::<Box<[_]>>();\n                         if let [ty::adjustment::Adjust::Deref(None), ty::adjustment::Adjust::Borrow(_)] = *adj;\n                         then {\n                             let method_did = cx.typeck_results().type_dependent_def_id(closure_expr.hir_id).unwrap();"}, {"sha": "26a1c32b6b3ac229f43aa7e4dff4604a96fd361e", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -99,7 +99,9 @@ declare_clippy_lint! {\n     /// if y != x {} // where both are floats\n     ///\n     /// // Good\n-    /// let error = 0.01f64; // Use an epsilon for comparison\n+    /// let error = f64::EPSILON; // Use an epsilon for comparison\n+    /// // Or, if Rust <= 1.42, use `std::f64::EPSILON` constant instead.\n+    /// // let error = std::f64::EPSILON;\n     /// if (y - 1.23f64).abs() < error { }\n     /// if (y - x).abs() > error { }\n     /// ```\n@@ -237,10 +239,12 @@ declare_clippy_lint! {\n     /// const ONE: f64 = 1.00;\n     ///\n     /// // Bad\n-    /// if x == ONE { }  // where both are floats\n+    /// if x == ONE { } // where both are floats\n     ///\n     /// // Good\n-    /// let error = 0.1f64; // Use an epsilon for comparison\n+    /// let error = f64::EPSILON; // Use an epsilon for comparison\n+    /// // Or, if Rust <= 1.42, use `std::f64::EPSILON` constant instead.\n+    /// // let error = std::f64::EPSILON;\n     /// if (x - ONE).abs() < error { }\n     /// ```\n     pub FLOAT_CMP_CONST,"}, {"sha": "29aba7c121873bbd6c57aa3d24d2758942040ba3", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 4, "deletions": 104, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -1,13 +1,9 @@\n-use crate::utils::{\n-    constants, snippet_opt, snippet_with_applicability, span_lint, span_lint_and_help, span_lint_and_sugg,\n-    span_lint_and_then,\n-};\n-use if_chain::if_chain;\n+use crate::utils::{constants, snippet_opt, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use rustc_ast::ast::{\n-    BindingMode, Block, Expr, ExprKind, GenericParamKind, Generics, Lit, LitFloatType, LitIntType, LitKind, Mutability,\n-    NodeId, Pat, PatKind, StmtKind, UnOp,\n+    BindingMode, Expr, ExprKind, GenericParamKind, Generics, Lit, LitFloatType, LitIntType, LitKind, Mutability,\n+    NodeId, Pat, PatKind, UnOp,\n };\n-use rustc_ast::visit::{walk_expr, FnKind, Visitor};\n+use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n@@ -70,28 +66,6 @@ declare_clippy_lint! {\n     \"function arguments having names which only differ by an underscore\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Detects closures called in the same expression where they\n-    /// are defined.\n-    ///\n-    /// **Why is this bad?** It is unnecessarily adding to the expression's\n-    /// complexity.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust,ignore\n-    /// // Bad\n-    /// let a = (|| 42)()\n-    ///\n-    /// // Good\n-    /// let a = 42\n-    /// ```\n-    pub REDUNDANT_CLOSURE_CALL,\n-    complexity,\n-    \"throwaway closures called in the expression they are defined\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Detects expressions of the form `--x`.\n     ///\n@@ -278,7 +252,6 @@ declare_clippy_lint! {\n declare_lint_pass!(MiscEarlyLints => [\n     UNNEEDED_FIELD_PATTERN,\n     DUPLICATE_UNDERSCORE_ARGUMENT,\n-    REDUNDANT_CLOSURE_CALL,\n     DOUBLE_NEG,\n     MIXED_CASE_HEX_LITERALS,\n     UNSEPARATED_LITERAL_SUFFIX,\n@@ -288,30 +261,6 @@ declare_lint_pass!(MiscEarlyLints => [\n     UNNEEDED_WILDCARD_PATTERN,\n ]);\n \n-// Used to find `return` statements or equivalents e.g., `?`\n-struct ReturnVisitor {\n-    found_return: bool,\n-}\n-\n-impl ReturnVisitor {\n-    #[must_use]\n-    fn new() -> Self {\n-        Self { found_return: false }\n-    }\n-}\n-\n-impl<'ast> Visitor<'ast> for ReturnVisitor {\n-    fn visit_expr(&mut self, ex: &'ast Expr) {\n-        if let ExprKind::Ret(_) = ex.kind {\n-            self.found_return = true;\n-        } else if let ExprKind::Try(_) = ex.kind {\n-            self.found_return = true;\n-        }\n-\n-        walk_expr(self, ex)\n-    }\n-}\n-\n impl EarlyLintPass for MiscEarlyLints {\n     fn check_generics(&mut self, cx: &EarlyContext<'_>, gen: &Generics) {\n         for param in &gen.params {\n@@ -453,30 +402,6 @@ impl EarlyLintPass for MiscEarlyLints {\n             return;\n         }\n         match expr.kind {\n-            ExprKind::Call(ref paren, _) => {\n-                if let ExprKind::Paren(ref closure) = paren.kind {\n-                    if let ExprKind::Closure(_, _, _, ref decl, ref block, _) = closure.kind {\n-                        let mut visitor = ReturnVisitor::new();\n-                        visitor.visit_expr(block);\n-                        if !visitor.found_return {\n-                            span_lint_and_then(\n-                                cx,\n-                                REDUNDANT_CLOSURE_CALL,\n-                                expr.span,\n-                                \"Try not to call a closure in the expression where it is declared.\",\n-                                |diag| {\n-                                    if decl.inputs.is_empty() {\n-                                        let mut app = Applicability::MachineApplicable;\n-                                        let hint =\n-                                            snippet_with_applicability(cx, block.span, \"..\", &mut app).into_owned();\n-                                        diag.span_suggestion(expr.span, \"Try doing something like: \", hint, app);\n-                                    }\n-                                },\n-                            );\n-                        }\n-                    }\n-                }\n-            },\n             ExprKind::Unary(UnOp::Neg, ref inner) => {\n                 if let ExprKind::Unary(UnOp::Neg, _) = inner.kind {\n                     span_lint(\n@@ -491,31 +416,6 @@ impl EarlyLintPass for MiscEarlyLints {\n             _ => (),\n         }\n     }\n-\n-    fn check_block(&mut self, cx: &EarlyContext<'_>, block: &Block) {\n-        for w in block.stmts.windows(2) {\n-            if_chain! {\n-                if let StmtKind::Local(ref local) = w[0].kind;\n-                if let Option::Some(ref t) = local.init;\n-                if let ExprKind::Closure(..) = t.kind;\n-                if let PatKind::Ident(_, ident, _) = local.pat.kind;\n-                if let StmtKind::Semi(ref second) = w[1].kind;\n-                if let ExprKind::Assign(_, ref call, _) = second.kind;\n-                if let ExprKind::Call(ref closure, _) = call.kind;\n-                if let ExprKind::Path(_, ref path) = closure.kind;\n-                then {\n-                    if ident == path.segments[0].ident {\n-                        span_lint(\n-                            cx,\n-                            REDUNDANT_CLOSURE_CALL,\n-                            second.span,\n-                            \"Closure called just once immediately after it was declared\",\n-                        );\n-                    }\n-                }\n-            }\n-        }\n-    }\n }\n \n impl MiscEarlyLints {"}, {"sha": "1ad184dfc460b8358069739807854485096311b1", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n /// Returns true if any of the method parameters is a type that implements `Drop`. The method\n /// can't be made const then, because `drop` can't be const-evaluated.\n fn method_accepts_dropable(cx: &LateContext<'_>, param_tys: &[hir::Ty<'_>]) -> bool {\n-    // If any of the params are dropable, return true\n+    // If any of the params are droppable, return true\n     param_tys.iter().any(|hir_ty| {\n         let ty_ty = hir_ty_to_ty(cx.tcx, hir_ty);\n         has_drop(cx, ty_ty)"}, {"sha": "b1d788b5c683f4587cebc071623e2326e001160a", "filename": "clippy_lints/src/modulo_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -8,7 +8,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::fmt::Display;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for modulo arithemtic.\n+    /// **What it does:** Checks for modulo arithmetic.\n     ///\n     /// **Why is this bad?** The results of modulo (%) operation might differ\n     /// depending on the language, when negative numbers are involved."}, {"sha": "48ab98418e4fafe62381a541d80296af1fb9b8bc", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -218,12 +218,16 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             let mut split_at = None;\n             match existing_name.len.cmp(&count) {\n                 Ordering::Greater => {\n-                    if existing_name.len - count != 1 || levenstein_not_1(&interned_name, &existing_name.interned.as_str()) {\n+                    if existing_name.len - count != 1\n+                        || levenstein_not_1(&interned_name, &existing_name.interned.as_str())\n+                    {\n                         continue;\n                     }\n                 },\n                 Ordering::Less => {\n-                    if count - existing_name.len != 1 || levenstein_not_1(&existing_name.interned.as_str(), &interned_name) {\n+                    if count - existing_name.len != 1\n+                        || levenstein_not_1(&existing_name.interned.as_str(), &interned_name)\n+                    {\n                         continue;\n                     }\n                 },"}, {"sha": "9494efe736cce2a37f7efafdf211b62a6e075214", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -79,7 +79,7 @@ fn is_result_ok(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n     }\n }\n \n-/// A struct containing information about occurences of the\n+/// A struct containing information about occurrences of the\n /// `if let Some(..) = .. else` construct that this lint detects.\n struct OptionIfLetElseOccurence {\n     option: String,"}, {"sha": "6379dffd22e372ac8305f8fce41fe8a50ad2e555", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -96,23 +96,20 @@ impl<'tcx> LateLintPass<'tcx> for PanicUnimplemented {\n         if_chain! {\n             if let ExprKind::Block(ref block, _) = expr.kind;\n             if let Some(ref ex) = block.expr;\n-            if let Some(params) = match_function_call(cx, ex, &paths::BEGIN_PANIC);\n-            if params.len() == 1;\n+            if let Some(params) = match_function_call(cx, ex, &paths::BEGIN_PANIC)\n+                .or_else(|| match_function_call(cx, ex, &paths::BEGIN_PANIC_FMT));\n             then {\n+                let span = get_outer_span(expr);\n                 if is_expn_of(expr.span, \"unimplemented\").is_some() {\n-                    let span = get_outer_span(expr);\n                     span_lint(cx, UNIMPLEMENTED, span,\n                               \"`unimplemented` should not be present in production code\");\n                 } else if is_expn_of(expr.span, \"todo\").is_some() {\n-                    let span = get_outer_span(expr);\n                     span_lint(cx, TODO, span,\n                               \"`todo` should not be present in production code\");\n                 } else if is_expn_of(expr.span, \"unreachable\").is_some() {\n-                    let span = get_outer_span(expr);\n                     span_lint(cx, UNREACHABLE, span,\n                               \"`unreachable` should not be present in production code\");\n                 } else if is_expn_of(expr.span, \"panic\").is_some() {\n-                    let span = get_outer_span(expr);\n                     span_lint(cx, PANIC, span,\n                               \"`panic` should not be present in production code\");\n                     match_panic(params, expr, cx);"}, {"sha": "7932be0d4b1f260a59b3d839002d3747bb1a9ad1", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -124,6 +124,12 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                 continue;\n             }\n \n+            if let ty::Adt(ref def, _) = arg_ty.kind {\n+                if match_def_path(cx, def.did, &paths::MEM_MANUALLY_DROP) {\n+                    continue;\n+                }\n+            }\n+\n             // `{ cloned = &arg; clone(move cloned); }` or `{ cloned = &arg; to_path_buf(cloned); }`\n             let (cloned, cannot_move_out) = unwrap_or_continue!(find_stmt_assigns_to(cx, mir, arg, from_borrow, bb));\n "}, {"sha": "8aa478ea2d69f41aa77253cc4696827820fa2a7e", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -0,0 +1,151 @@\n+use crate::utils::{snippet_with_applicability, span_lint, span_lint_and_then};\n+use if_chain::if_chain;\n+use rustc_ast::ast;\n+use rustc_ast::visit as ast_visit;\n+use rustc_ast::visit::Visitor as AstVisitor;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_hir::intravisit as hir_visit;\n+use rustc_hir::intravisit::Visitor as HirVisitor;\n+use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n+use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Detects closures called in the same expression where they\n+    /// are defined.\n+    ///\n+    /// **Why is this bad?** It is unnecessarily adding to the expression's\n+    /// complexity.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// // Bad\n+    /// let a = (|| 42)()\n+    ///\n+    /// // Good\n+    /// let a = 42\n+    /// ```\n+    pub REDUNDANT_CLOSURE_CALL,\n+    complexity,\n+    \"throwaway closures called in the expression they are defined\"\n+}\n+\n+declare_lint_pass!(RedundantClosureCall => [REDUNDANT_CLOSURE_CALL]);\n+\n+// Used to find `return` statements or equivalents e.g., `?`\n+struct ReturnVisitor {\n+    found_return: bool,\n+}\n+\n+impl ReturnVisitor {\n+    #[must_use]\n+    fn new() -> Self {\n+        Self { found_return: false }\n+    }\n+}\n+\n+impl<'ast> ast_visit::Visitor<'ast> for ReturnVisitor {\n+    fn visit_expr(&mut self, ex: &'ast ast::Expr) {\n+        if let ast::ExprKind::Ret(_) = ex.kind {\n+            self.found_return = true;\n+        } else if let ast::ExprKind::Try(_) = ex.kind {\n+            self.found_return = true;\n+        }\n+\n+        ast_visit::walk_expr(self, ex)\n+    }\n+}\n+\n+impl EarlyLintPass for RedundantClosureCall {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n+        if in_external_macro(cx.sess(), expr.span) {\n+            return;\n+        }\n+        if_chain! {\n+            if let ast::ExprKind::Call(ref paren, _) = expr.kind;\n+            if let ast::ExprKind::Paren(ref closure) = paren.kind;\n+            if let ast::ExprKind::Closure(_, _, _, ref decl, ref block, _) = closure.kind;\n+            then {\n+                let mut visitor = ReturnVisitor::new();\n+                visitor.visit_expr(block);\n+                if !visitor.found_return {\n+                    span_lint_and_then(\n+                        cx,\n+                        REDUNDANT_CLOSURE_CALL,\n+                        expr.span,\n+                        \"try not to call a closure in the expression where it is declared.\",\n+                        |diag| {\n+                            if decl.inputs.is_empty() {\n+                                let mut app = Applicability::MachineApplicable;\n+                                let hint =\n+                                    snippet_with_applicability(cx, block.span, \"..\", &mut app).into_owned();\n+                                diag.span_suggestion(expr.span, \"try doing something like\", hint, app);\n+                            }\n+                        },\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n+    fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx hir::Block<'_>) {\n+        fn count_closure_usage<'tcx>(block: &'tcx hir::Block<'_>, path: &'tcx hir::Path<'tcx>) -> usize {\n+            struct ClosureUsageCount<'tcx> {\n+                path: &'tcx hir::Path<'tcx>,\n+                count: usize,\n+            };\n+            impl<'tcx> hir_visit::Visitor<'tcx> for ClosureUsageCount<'tcx> {\n+                type Map = Map<'tcx>;\n+\n+                fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n+                    if_chain! {\n+                        if let hir::ExprKind::Call(ref closure, _) = expr.kind;\n+                        if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = closure.kind;\n+                        if self.path.segments[0].ident == path.segments[0].ident\n+                            && self.path.res == path.res;\n+                        then {\n+                            self.count += 1;\n+                        }\n+                    }\n+                    hir_visit::walk_expr(self, expr);\n+                }\n+\n+                fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<Self::Map> {\n+                    hir_visit::NestedVisitorMap::None\n+                }\n+            };\n+            let mut closure_usage_count = ClosureUsageCount { path, count: 0 };\n+            closure_usage_count.visit_block(block);\n+            closure_usage_count.count\n+        }\n+\n+        for w in block.stmts.windows(2) {\n+            if_chain! {\n+                if let hir::StmtKind::Local(ref local) = w[0].kind;\n+                if let Option::Some(ref t) = local.init;\n+                if let hir::ExprKind::Closure(..) = t.kind;\n+                if let hir::PatKind::Binding(_, _, ident, _) = local.pat.kind;\n+                if let hir::StmtKind::Semi(ref second) = w[1].kind;\n+                if let hir::ExprKind::Assign(_, ref call, _) = second.kind;\n+                if let hir::ExprKind::Call(ref closure, _) = call.kind;\n+                if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = closure.kind;\n+                if ident == path.segments[0].ident;\n+                if count_closure_usage(block, path) == 1;\n+                then {\n+                    span_lint(\n+                        cx,\n+                        REDUNDANT_CLOSURE_CALL,\n+                        second.span,\n+                        \"closure called just once immediately after it was declared\",\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "6f03e92bde36fcb64a353e23ab731379f14c2ca7", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -295,11 +295,7 @@ fn lint_shadow<'tcx>(\n                 cx,\n                 SHADOW_UNRELATED,\n                 pattern_span,\n-                &format!(\n-                    \"`{}` is shadowed by `{}`\",\n-                    snippet(cx, pattern_span, \"_\"),\n-                    snippet(cx, expr.span, \"..\")\n-                ),\n+                &format!(\"`{}` is being shadowed\", snippet(cx, pattern_span, \"_\")),\n                 |diag| {\n                     diag.span_note(expr.span, \"initialization happens here\");\n                     diag.span_note(prev_span, \"previous binding is here\");"}, {"sha": "ac6f3d125bb422a2734be9b31d21e39d4c04fed9", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -0,0 +1,177 @@\n+use crate::utils::{get_trait_def_id, paths, span_lint, span_lint_and_help};\n+use if_chain::if_chain;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{Expr, ExprKind, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_middle::ty::{GenericPredicates, PredicateKind, ProjectionPredicate, TraitPredicate};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{BytePos, Span};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for functions that expect closures of type\n+    /// Fn(...) -> Ord where the implemented closure returns the unit type.\n+    /// The lint also suggests to remove the semi-colon at the end of the statement if present.\n+    ///\n+    /// **Why is this bad?** Likely, returning the unit type is unintentional, and\n+    /// could simply be caused by an extra semi-colon. Since () implements Ord\n+    /// it doesn't cause a compilation error.\n+    /// This is the same reasoning behind the unit_cmp lint.\n+    ///\n+    /// **Known problems:** If returning unit is intentional, then there is no\n+    /// way of specifying this without triggering needless_return lint\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let mut twins = vec!((1,1), (2,2));\n+    /// twins.sort_by_key(|x| { x.1; });\n+    /// ```\n+    pub UNIT_RETURN_EXPECTING_ORD,\n+    correctness,\n+    \"fn arguments of type Fn(...) -> Ord returning the unit type ().\"\n+}\n+\n+declare_lint_pass!(UnitReturnExpectingOrd => [UNIT_RETURN_EXPECTING_ORD]);\n+\n+fn get_trait_predicates_for_trait_id<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    generics: GenericPredicates<'tcx>,\n+    trait_id: Option<DefId>,\n+) -> Vec<TraitPredicate<'tcx>> {\n+    let mut preds = Vec::new();\n+    for (pred, _) in generics.predicates {\n+        if_chain! {\n+            if let PredicateKind::Trait(poly_trait_pred, _) = pred.kind();\n+            let trait_pred = cx.tcx.erase_late_bound_regions(&poly_trait_pred);\n+            if let Some(trait_def_id) = trait_id;\n+            if trait_def_id == trait_pred.trait_ref.def_id;\n+            then {\n+                preds.push(trait_pred);\n+            }\n+        }\n+    }\n+    preds\n+}\n+\n+fn get_projection_pred<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    generics: GenericPredicates<'tcx>,\n+    pred: TraitPredicate<'tcx>,\n+) -> Option<ProjectionPredicate<'tcx>> {\n+    generics.predicates.iter().find_map(|(proj_pred, _)| {\n+        if let PredicateKind::Projection(proj_pred) = proj_pred.kind() {\n+            let projection_pred = cx.tcx.erase_late_bound_regions(proj_pred);\n+            if projection_pred.projection_ty.substs == pred.trait_ref.substs {\n+                return Some(projection_pred);\n+            }\n+        }\n+        None\n+    })\n+}\n+\n+fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Vec<(usize, String)> {\n+    let mut args_to_check = Vec::new();\n+    if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n+        let fn_sig = cx.tcx.fn_sig(def_id);\n+        let generics = cx.tcx.predicates_of(def_id);\n+        let fn_mut_preds = get_trait_predicates_for_trait_id(cx, generics, cx.tcx.lang_items().fn_mut_trait());\n+        let ord_preds = get_trait_predicates_for_trait_id(cx, generics, get_trait_def_id(cx, &paths::ORD));\n+        let partial_ord_preds =\n+            get_trait_predicates_for_trait_id(cx, generics, cx.tcx.lang_items().partial_ord_trait());\n+        // Trying to call erase_late_bound_regions on fn_sig.inputs() gives the following error\n+        // The trait `rustc::ty::TypeFoldable<'_>` is not implemented for `&[&rustc::ty::TyS<'_>]`\n+        let inputs_output = cx.tcx.erase_late_bound_regions(&fn_sig.inputs_and_output());\n+        inputs_output\n+            .iter()\n+            .rev()\n+            .skip(1)\n+            .rev()\n+            .enumerate()\n+            .for_each(|(i, inp)| {\n+                for trait_pred in &fn_mut_preds {\n+                    if_chain! {\n+                        if trait_pred.self_ty() == inp;\n+                        if let Some(return_ty_pred) = get_projection_pred(cx, generics, *trait_pred);\n+                        then {\n+                            if ord_preds.iter().any(|ord| ord.self_ty() == return_ty_pred.ty) {\n+                                args_to_check.push((i, \"Ord\".to_string()));\n+                            } else if partial_ord_preds.iter().any(|pord| pord.self_ty() == return_ty_pred.ty) {\n+                                args_to_check.push((i, \"PartialOrd\".to_string()));\n+                            }\n+                        }\n+                    }\n+                }\n+            });\n+    }\n+    args_to_check\n+}\n+\n+fn check_arg<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'tcx>) -> Option<(Span, Option<Span>)> {\n+    if_chain! {\n+        if let ExprKind::Closure(_, _fn_decl, body_id, span, _) = arg.kind;\n+        if let ty::Closure(_def_id, substs) = &cx.typeck_results().node_type(arg.hir_id).kind;\n+        let ret_ty = substs.as_closure().sig().output();\n+        let ty = cx.tcx.erase_late_bound_regions(&ret_ty);\n+        if ty.is_unit();\n+        then {\n+            if_chain! {\n+                let body = cx.tcx.hir().body(body_id);\n+                if let ExprKind::Block(block, _) = body.value.kind;\n+                if block.expr.is_none();\n+                if let Some(stmt) = block.stmts.last();\n+                if let StmtKind::Semi(_) = stmt.kind;\n+                then {\n+                    let data = stmt.span.data();\n+                    // Make a span out of the semicolon for the help message\n+                    Some((span, Some(Span::new(data.hi-BytePos(1), data.hi, data.ctxt))))\n+                } else {\n+                    Some((span, None))\n+                }\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for UnitReturnExpectingOrd {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if let ExprKind::MethodCall(_, _, ref args, _) = expr.kind {\n+            let arg_indices = get_args_to_check(cx, expr);\n+            for (i, trait_name) in arg_indices {\n+                if i < args.len() {\n+                    match check_arg(cx, &args[i]) {\n+                        Some((span, None)) => {\n+                            span_lint(\n+                                cx,\n+                                UNIT_RETURN_EXPECTING_ORD,\n+                                span,\n+                                &format!(\n+                                    \"this closure returns \\\n+                                   the unit type which also implements {}\",\n+                                    trait_name\n+                                ),\n+                            );\n+                        },\n+                        Some((span, Some(last_semi))) => {\n+                            span_lint_and_help(\n+                                cx,\n+                                UNIT_RETURN_EXPECTING_ORD,\n+                                span,\n+                                &format!(\n+                                    \"this closure returns \\\n+                                   the unit type which also implements {}\",\n+                                    trait_name\n+                                ),\n+                                Some(last_semi),\n+                                &\"probably caused by this trailing semicolon\".to_string(),\n+                            );\n+                        },\n+                        None => {},\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "1bf37632e326cfa2d7a76be9361983a49fecd731", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n-    is_type_diagnostic_item, match_def_path, match_trait_method, paths, snippet, snippet_with_macro_callsite,\n-    span_lint_and_help, span_lint_and_sugg,\n+    get_parent_expr, is_type_diagnostic_item, match_def_path, match_trait_method, paths, snippet,\n+    snippet_with_macro_callsite, span_lint_and_help, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -79,6 +79,13 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                     }\n                 }\n                 if match_trait_method(cx, e, &paths::INTO_ITERATOR) && &*name.ident.as_str() == \"into_iter\" {\n+                    if let Some(parent_expr) = get_parent_expr(cx, e) {\n+                        if let ExprKind::MethodCall(ref parent_name, ..) = parent_expr.kind {\n+                            if &*parent_name.ident.as_str() != \"into_iter\" {\n+                                return;\n+                            }\n+                        }\n+                    }\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(&args[0]);\n                     if TyS::same_type(a, b) {"}, {"sha": "5e8800d38eb52e9ee82387d5a7071755800bea4e", "filename": "clippy_lints/src/utils/numeric_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -36,7 +36,7 @@ pub struct NumericLiteral<'a> {\n     pub integer: &'a str,\n     /// The fraction part of the number.\n     pub fraction: Option<&'a str>,\n-    /// The character used as exponent seperator (b'e' or b'E') and the exponent part.\n+    /// The character used as exponent separator (b'e' or b'E') and the exponent part.\n     pub exponent: Option<(char, &'a str)>,\n \n     /// The type suffix, including preceding underscore if present."}, {"sha": "a515ee29c82adc64e2678302137a26ac40254157", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -59,6 +59,7 @@ pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"Link\n pub const LINT: [&str; 3] = [\"rustc_session\", \"lint\", \"Lint\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n+pub const MEM_MANUALLY_DROP: [&str; 4] = [\"core\", \"mem\", \"manually_drop\", \"ManuallyDrop\"];\n pub const MEM_MAYBEUNINIT: [&str; 4] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\"];\n pub const MEM_MAYBEUNINIT_UNINIT: [&str; 5] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\", \"uninit\"];\n pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];"}, {"sha": "58e7c354b27da1e2ab90ec3d74f3028fe891008c", "filename": "clippy_lints/src/vec_resize_to_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -11,7 +11,7 @@ use rustc_ast::ast::LitKind;\n use rustc_hir as hir;\n \n declare_clippy_lint! {\n-    /// **What it does:** Finds occurences of `Vec::resize(0, an_int)`\n+    /// **What it does:** Finds occurrences of `Vec::resize(0, an_int)`\n     ///\n     /// **Why is this bad?** This is probably an argument inversion mistake.\n     ///"}, {"sha": "1879aae77fb650783301cd1bc8500cca8551bdb7", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -1835,7 +1835,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         group: \"complexity\",\n         desc: \"throwaway closures called in the expression they are defined\",\n         deprecation: None,\n-        module: \"misc_early\",\n+        module: \"redundant_closure_call\",\n     },\n     Lint {\n         name: \"redundant_closure_for_method_calls\",\n@@ -2292,6 +2292,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"types\",\n     },\n+    Lint {\n+        name: \"unit_return_expecting_ord\",\n+        group: \"correctness\",\n+        desc: \"fn arguments of type Fn(...) -> Ord returning the unit type ().\",\n+        deprecation: None,\n+        module: \"unit_return_expecting_ord\",\n+    },\n     Lint {\n         name: \"unknown_clippy_lints\",\n         group: \"style\","}, {"sha": "29c56f3a94f5f6bc8a13bce3934e46251377b167", "filename": "tests/ui/iter_nth_zero.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fiter_nth_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fiter_nth_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth_zero.stderr?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -1,22 +1,22 @@\n-error: called `.nth(0)` on a `std::iter::Iterator`\n+error: called `.nth(0)` on a `std::iter::Iterator`, when `.next()` is equivalent\n   --> $DIR/iter_nth_zero.rs:20:14\n    |\n LL |     let _x = s.iter().nth(0);\n-   |              ^^^^^^^^^^^^^^^ help: try calling: `s.iter().next()`\n+   |              ^^^^^^^^^^^^^^^ help: try calling `.next()` instead of `.nth(0)`: `s.iter().next()`\n    |\n    = note: `-D clippy::iter-nth-zero` implied by `-D warnings`\n \n-error: called `.nth(0)` on a `std::iter::Iterator`\n+error: called `.nth(0)` on a `std::iter::Iterator`, when `.next()` is equivalent\n   --> $DIR/iter_nth_zero.rs:25:14\n    |\n LL |     let _y = iter.nth(0);\n-   |              ^^^^^^^^^^^ help: try calling: `iter.next()`\n+   |              ^^^^^^^^^^^ help: try calling `.next()` instead of `.nth(0)`: `iter.next()`\n \n-error: called `.nth(0)` on a `std::iter::Iterator`\n+error: called `.nth(0)` on a `std::iter::Iterator`, when `.next()` is equivalent\n   --> $DIR/iter_nth_zero.rs:30:22\n    |\n LL |     let _unwrapped = iter2.nth(0).unwrap();\n-   |                      ^^^^^^^^^^^^ help: try calling: `iter2.next()`\n+   |                      ^^^^^^^^^^^^ help: try calling `.next()` instead of `.nth(0)`: `iter2.next()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "27222cc0869c83cf50a37d5c66fb63ee2ff92f62", "filename": "tests/ui/manual_async_fn.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fmanual_async_fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fmanual_async_fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.fixed?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -30,7 +30,7 @@ async fn already_async() -> impl Future<Output = i32> {\n struct S {}\n impl S {\n     async fn inh_fut() -> i32 {\n-        // NOTE: this code is here just to check that the identation is correct in the suggested fix\n+        // NOTE: this code is here just to check that the indentation is correct in the suggested fix\n         let a = 42;\n         let b = 21;\n         if a < b {"}, {"sha": "6a0f1b26c88388e18dfe49375799e928b578b049", "filename": "tests/ui/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -37,7 +37,7 @@ struct S {}\n impl S {\n     fn inh_fut() -> impl Future<Output = i32> {\n         async {\n-            // NOTE: this code is here just to check that the identation is correct in the suggested fix\n+            // NOTE: this code is here just to check that the indentation is correct in the suggested fix\n             let a = 42;\n             let b = 21;\n             if a < b {"}, {"sha": "a1904c904d0f4930672ec80fc40887a33769cf2f", "filename": "tests/ui/manual_async_fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fmanual_async_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fmanual_async_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.stderr?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -57,7 +57,7 @@ LL |     async fn inh_fut() -> i32 {\n help: move the body of the async block to the enclosing function\n    |\n LL |     fn inh_fut() -> impl Future<Output = i32> {\n-LL |         // NOTE: this code is here just to check that the identation is correct in the suggested fix\n+LL |         // NOTE: this code is here just to check that the indentation is correct in the suggested fix\n LL |         let a = 42;\n LL |         let b = 21;\n LL |         if a < b {"}, {"sha": "a82b1159161903d5ba36e427cc2265f2ed5e3c14", "filename": "tests/ui/needless_range_loop2.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fneedless_range_loop2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fneedless_range_loop2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop2.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -83,3 +83,13 @@ fn main() {\n         println!(\"{}\", arr[i]);\n     }\n }\n+\n+mod issue2277 {\n+    pub fn example(list: &[[f64; 3]]) {\n+        let mut x: [f64; 3] = [10.; 3];\n+\n+        for i in 0..3 {\n+            x[i] = list.iter().map(|item| item[i]).sum::<f64>();\n+        }\n+    }\n+}"}, {"sha": "2770eb2b2ab4389e635fd779134d5bfce061a4cd", "filename": "tests/ui/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -166,7 +166,7 @@ pub fn test14() {\n     }\n }\n \n-// Issue #1991: the outter loop should not warn.\n+// Issue #1991: the outer loop should not warn.\n pub fn test15() {\n     'label: loop {\n         while false {"}, {"sha": "f91ccfaed743d4ac9ceb35e5a7651a9f176aa2e2", "filename": "tests/ui/panicking_macros.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fpanicking_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fpanicking_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -4,24 +4,32 @@\n fn panic() {\n     let a = 2;\n     panic!();\n+    panic!(\"message\");\n+    panic!(\"{} {}\", \"panic with\", \"multiple arguments\");\n     let b = a + 2;\n }\n \n fn todo() {\n     let a = 2;\n     todo!();\n+    todo!(\"message\");\n+    todo!(\"{} {}\", \"panic with\", \"multiple arguments\");\n     let b = a + 2;\n }\n \n fn unimplemented() {\n     let a = 2;\n     unimplemented!();\n+    unimplemented!(\"message\");\n+    unimplemented!(\"{} {}\", \"panic with\", \"multiple arguments\");\n     let b = a + 2;\n }\n \n fn unreachable() {\n     let a = 2;\n     unreachable!();\n+    unreachable!(\"message\");\n+    unreachable!(\"{} {}\", \"panic with\", \"multiple arguments\");\n     let b = a + 2;\n }\n "}, {"sha": "37c11d72a574a8fdcb0b4d1dbb0e6498c26faa50", "filename": "tests/ui/panicking_macros.stderr", "status": "modified", "additions": 58, "deletions": 4, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fpanicking_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fpanicking_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.stderr?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -6,29 +6,83 @@ LL |     panic!();\n    |\n    = note: `-D clippy::panic` implied by `-D warnings`\n \n+error: `panic` should not be present in production code\n+  --> $DIR/panicking_macros.rs:7:5\n+   |\n+LL |     panic!(\"message\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: `panic` should not be present in production code\n+  --> $DIR/panicking_macros.rs:8:5\n+   |\n+LL |     panic!(\"{} {}\", \"panic with\", \"multiple arguments\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: `todo` should not be present in production code\n-  --> $DIR/panicking_macros.rs:12:5\n+  --> $DIR/panicking_macros.rs:14:5\n    |\n LL |     todo!();\n    |     ^^^^^^^^\n    |\n    = note: `-D clippy::todo` implied by `-D warnings`\n \n+error: `todo` should not be present in production code\n+  --> $DIR/panicking_macros.rs:15:5\n+   |\n+LL |     todo!(\"message\");\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: `todo` should not be present in production code\n+  --> $DIR/panicking_macros.rs:16:5\n+   |\n+LL |     todo!(\"{} {}\", \"panic with\", \"multiple arguments\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: `unimplemented` should not be present in production code\n-  --> $DIR/panicking_macros.rs:18:5\n+  --> $DIR/panicking_macros.rs:22:5\n    |\n LL |     unimplemented!();\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unimplemented` implied by `-D warnings`\n \n-error: `unreachable` should not be present in production code\n+error: `unimplemented` should not be present in production code\n+  --> $DIR/panicking_macros.rs:23:5\n+   |\n+LL |     unimplemented!(\"message\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:24:5\n    |\n+LL |     unimplemented!(\"{} {}\", \"panic with\", \"multiple arguments\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `unreachable` should not be present in production code\n+  --> $DIR/panicking_macros.rs:30:5\n+   |\n LL |     unreachable!();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unreachable` implied by `-D warnings`\n \n-error: aborting due to 4 previous errors\n+error: `unreachable` should not be present in production code\n+  --> $DIR/panicking_macros.rs:31:5\n+   |\n+LL |     unreachable!(\"message\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: `unreachable` should not be present in production code\n+  --> $DIR/panicking_macros.rs:32:5\n+   |\n+LL |     unreachable!(\"{} {}\", \"panic with\", \"multiple arguments\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n "}, {"sha": "4d284ae1319d321a4d867e91f10e71ae317bacd9", "filename": "tests/ui/precedence.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fprecedence.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fprecedence.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.fixed?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -32,7 +32,7 @@ fn main() {\n     let _ = -(1i32.abs());\n     let _ = -(1f32.abs());\n \n-    // Odd functions shoud not trigger an error\n+    // Odd functions should not trigger an error\n     let _ = -1f64.asin();\n     let _ = -1f64.asinh();\n     let _ = -1f64.atan();"}, {"sha": "2d08e82f349ade91eb20d8fa8adb3f040a6d2908", "filename": "tests/ui/precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -32,7 +32,7 @@ fn main() {\n     let _ = -(1i32.abs());\n     let _ = -(1f32.abs());\n \n-    // Odd functions shoud not trigger an error\n+    // Odd functions should not trigger an error\n     let _ = -1f64.asin();\n     let _ = -1f64.asinh();\n     let _ = -1f64.atan();"}, {"sha": "cdeefda4c234c071e573445af3e10e1f0e404702", "filename": "tests/ui/redundant_clone.fixed", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.fixed?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -52,6 +52,7 @@ fn main() {\n     borrower_propagation();\n     not_consumed();\n     issue_5405();\n+    manually_drop();\n }\n \n #[derive(Clone)]\n@@ -170,3 +171,17 @@ fn issue_5405() {\n     let c: [usize; 2] = [2, 3];\n     let _d: usize = c[1].clone();\n }\n+\n+fn manually_drop() {\n+    use std::mem::ManuallyDrop;\n+    use std::sync::Arc;\n+\n+    let a = ManuallyDrop::new(Arc::new(\"Hello!\".to_owned()));\n+    let _ = a.clone(); // OK\n+\n+    let p: *const String = Arc::into_raw(ManuallyDrop::into_inner(a));\n+    unsafe {\n+        Arc::from_raw(p);\n+        Arc::from_raw(p);\n+    }\n+}"}, {"sha": "acb7ffb305f2a8890b981bfed1c4f5303d8da232", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -52,6 +52,7 @@ fn main() {\n     borrower_propagation();\n     not_consumed();\n     issue_5405();\n+    manually_drop();\n }\n \n #[derive(Clone)]\n@@ -170,3 +171,17 @@ fn issue_5405() {\n     let c: [usize; 2] = [2, 3];\n     let _d: usize = c[1].clone();\n }\n+\n+fn manually_drop() {\n+    use std::mem::ManuallyDrop;\n+    use std::sync::Arc;\n+\n+    let a = ManuallyDrop::new(Arc::new(\"Hello!\".to_owned()));\n+    let _ = a.clone(); // OK\n+\n+    let p: *const String = Arc::into_raw(ManuallyDrop::into_inner(a));\n+    unsafe {\n+        Arc::from_raw(p);\n+        Arc::from_raw(p);\n+    }\n+}"}, {"sha": "89b39254299107df27cc468f9b761d3f07d269f0", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -108,61 +108,61 @@ LL |     let _t = tup.0.clone();\n    |              ^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:61:22\n+  --> $DIR/redundant_clone.rs:62:22\n    |\n LL |         (a.clone(), a.clone())\n    |                      ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:61:21\n+  --> $DIR/redundant_clone.rs:62:21\n    |\n LL |         (a.clone(), a.clone())\n    |                     ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:121:15\n+  --> $DIR/redundant_clone.rs:122:15\n    |\n LL |     let _s = s.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:121:14\n+  --> $DIR/redundant_clone.rs:122:14\n    |\n LL |     let _s = s.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:122:15\n+  --> $DIR/redundant_clone.rs:123:15\n    |\n LL |     let _t = t.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:122:14\n+  --> $DIR/redundant_clone.rs:123:14\n    |\n LL |     let _t = t.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:132:19\n+  --> $DIR/redundant_clone.rs:133:19\n    |\n LL |         let _f = f.clone();\n    |                   ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:132:18\n+  --> $DIR/redundant_clone.rs:133:18\n    |\n LL |         let _f = f.clone();\n    |                  ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:144:14\n+  --> $DIR/redundant_clone.rs:145:14\n    |\n LL |     let y = x.clone().join(\"matthias\");\n    |              ^^^^^^^^ help: remove this\n    |\n note: cloned value is neither consumed nor mutated\n-  --> $DIR/redundant_clone.rs:144:13\n+  --> $DIR/redundant_clone.rs:145:13\n    |\n LL |     let y = x.clone().join(\"matthias\");\n    |             ^^^^^^^^^"}, {"sha": "68c1416bb6b1a33ff731f9fa9895116248011966", "filename": "tests/ui/redundant_closure_call.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b7c8b96e668a1e3c84cf559de1426c6eebd7d1c1/tests%2Fui%2Fredundant_closure_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7c8b96e668a1e3c84cf559de1426c6eebd7d1c1/tests%2Fui%2Fredundant_closure_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.stderr?ref=b7c8b96e668a1e3c84cf559de1426c6eebd7d1c1", "patch": "@@ -1,28 +0,0 @@\n-error: Closure called just once immediately after it was declared\n-  --> $DIR/redundant_closure_call.rs:12:5\n-   |\n-LL |     i = closure();\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n-\n-error: Closure called just once immediately after it was declared\n-  --> $DIR/redundant_closure_call.rs:15:5\n-   |\n-LL |     i = closure(3);\n-   |     ^^^^^^^^^^^^^^\n-\n-error: Try not to call a closure in the expression where it is declared.\n-  --> $DIR/redundant_closure_call.rs:7:17\n-   |\n-LL |     let mut k = (|m| m + 1)(i);\n-   |                 ^^^^^^^^^^^^^^\n-\n-error: Try not to call a closure in the expression where it is declared.\n-  --> $DIR/redundant_closure_call.rs:9:9\n-   |\n-LL |     k = (|a, b| a * b)(1, 5);\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "3dd365620ccbf1b4f4eef131819ce9da695f84dd", "filename": "tests/ui/redundant_closure_call_early.rs", "status": "renamed", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_closure_call_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_closure_call_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_early.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -4,18 +4,14 @@\n \n fn main() {\n     let mut i = 1;\n+\n+    // lint here\n     let mut k = (|m| m + 1)(i);\n \n+    // lint here\n     k = (|a, b| a * b)(1, 5);\n \n-    let closure = || 32;\n-    i = closure();\n-\n-    let closure = |i| i + 1;\n-    i = closure(3);\n-\n-    i = closure(4);\n-\n+    // don't lint these\n     #[allow(clippy::needless_return)]\n     (|| return 2)();\n     (|| -> Option<i32> { None? })();", "previous_filename": "tests/ui/redundant_closure_call.rs"}, {"sha": "79f276634619e277c24cef3069afe85953948210", "filename": "tests/ui/redundant_closure_call_early.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_closure_call_early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_closure_call_early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_early.stderr?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -0,0 +1,16 @@\n+error: try not to call a closure in the expression where it is declared.\n+  --> $DIR/redundant_closure_call_early.rs:9:17\n+   |\n+LL |     let mut k = (|m| m + 1)(i);\n+   |                 ^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n+\n+error: try not to call a closure in the expression where it is declared.\n+  --> $DIR/redundant_closure_call_early.rs:12:9\n+   |\n+LL |     k = (|a, b| a * b)(1, 5);\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "644161d9f5d885eb24da0c187bfcd5e63ffa1352", "filename": "tests/ui/redundant_closure_call_fixable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.stderr?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -1,8 +1,8 @@\n-error: Try not to call a closure in the expression where it is declared.\n+error: try not to call a closure in the expression where it is declared.\n   --> $DIR/redundant_closure_call_fixable.rs:7:13\n    |\n LL |     let a = (|| 42)();\n-   |             ^^^^^^^^^ help: Try doing something like: : `42`\n+   |             ^^^^^^^^^ help: try doing something like: `42`\n    |\n    = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n "}, {"sha": "e29a1dce0c7e8f040f7dd3f262e505fbf4d21d9a", "filename": "tests/ui/redundant_closure_call_late.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_closure_call_late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_closure_call_late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_late.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -0,0 +1,27 @@\n+// non rustfixable, see redundant_closure_call_fixable.rs\n+\n+#![warn(clippy::redundant_closure_call)]\n+\n+fn main() {\n+    let mut i = 1;\n+\n+    // don't lint here, the closure is used more than once\n+    let closure = |i| i + 1;\n+    i = closure(3);\n+    i = closure(4);\n+\n+    // lint here\n+    let redun_closure = || 1;\n+    i = redun_closure();\n+\n+    // shadowed closures are supported, lint here\n+    let shadowed_closure = || 1;\n+    i = shadowed_closure();\n+    let shadowed_closure = || 2;\n+    i = shadowed_closure();\n+\n+    // don't lint here\n+    let shadowed_closure = || 2;\n+    i = shadowed_closure();\n+    i = shadowed_closure();\n+}"}, {"sha": "7c8865f1bd375e02a14c5ab99fadd78c88c0f83e", "filename": "tests/ui/redundant_closure_call_late.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_closure_call_late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_closure_call_late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_late.stderr?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -0,0 +1,22 @@\n+error: closure called just once immediately after it was declared\n+  --> $DIR/redundant_closure_call_late.rs:15:5\n+   |\n+LL |     i = redun_closure();\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n+\n+error: closure called just once immediately after it was declared\n+  --> $DIR/redundant_closure_call_late.rs:19:5\n+   |\n+LL |     i = shadowed_closure();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: closure called just once immediately after it was declared\n+  --> $DIR/redundant_closure_call_late.rs:21:5\n+   |\n+LL |     i = shadowed_closure();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "adbff8af8d9ca087d2039df3d8b9855b2018ceaa", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -11,6 +11,9 @@\n )]\n \n fn main() {\n+    let result: Result<usize, usize> = Err(5);\n+    if result.is_ok() {}\n+\n     if Ok::<i32, i32>(42).is_ok() {}\n \n     if Err::<i32, i32>(42).is_err() {}"}, {"sha": "4c2870e7803cb965d108e09ee3adbf3869e2e401", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -11,6 +11,9 @@\n )]\n \n fn main() {\n+    let result: Result<usize, usize> = Err(5);\n+    if let Ok(_) = &result {}\n+\n     if let Ok(_) = Ok::<i32, i32>(42) {}\n \n     if let Err(_) = Err::<i32, i32>(42) {}"}, {"sha": "d3c9ceaa3d7c18b0bee5a9cd15e1e451c2f1885d", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 37, "deletions": 31, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -1,73 +1,79 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:14:12\n+  --> $DIR/redundant_pattern_matching.rs:15:12\n    |\n-LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n-   |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n+LL |     if let Ok(_) = &result {}\n+   |     -------^^^^^---------- help: try this: `if result.is_ok()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching.rs:17:12\n+   |\n+LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n+   |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n+\n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:16:12\n+  --> $DIR/redundant_pattern_matching.rs:19:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:18:12\n+  --> $DIR/redundant_pattern_matching.rs:21:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:20:12\n+  --> $DIR/redundant_pattern_matching.rs:23:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:22:12\n+  --> $DIR/redundant_pattern_matching.rs:25:12\n    |\n LL |     if let Some(_) = Some(42) {\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:28:15\n+  --> $DIR/redundant_pattern_matching.rs:31:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:30:15\n+  --> $DIR/redundant_pattern_matching.rs:33:15\n    |\n LL |     while let None = Some(42) {}\n    |     ----------^^^^----------- help: try this: `while Some(42).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:32:15\n+  --> $DIR/redundant_pattern_matching.rs:35:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:34:15\n+  --> $DIR/redundant_pattern_matching.rs:37:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:36:15\n+  --> $DIR/redundant_pattern_matching.rs:39:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:39:15\n+  --> $DIR/redundant_pattern_matching.rs:42:15\n    |\n LL |     while let Some(_) = v.pop() {\n    |     ----------^^^^^^^---------- help: try this: `while v.pop().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:55:5\n+  --> $DIR/redundant_pattern_matching.rs:58:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -76,7 +82,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:60:5\n+  --> $DIR/redundant_pattern_matching.rs:63:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -85,7 +91,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:65:5\n+  --> $DIR/redundant_pattern_matching.rs:68:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -94,7 +100,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:70:5\n+  --> $DIR/redundant_pattern_matching.rs:73:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -103,7 +109,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:75:5\n+  --> $DIR/redundant_pattern_matching.rs:78:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -112,7 +118,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:80:5\n+  --> $DIR/redundant_pattern_matching.rs:83:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -121,7 +127,7 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:85:13\n+  --> $DIR/redundant_pattern_matching.rs:88:13\n    |\n LL |       let _ = match None::<()> {\n    |  _____________^\n@@ -131,64 +137,64 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:90:20\n+  --> $DIR/redundant_pattern_matching.rs:93:20\n    |\n LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:93:20\n+  --> $DIR/redundant_pattern_matching.rs:96:20\n    |\n LL |     let x = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:99:20\n+  --> $DIR/redundant_pattern_matching.rs:102:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:101:19\n+  --> $DIR/redundant_pattern_matching.rs:104:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:103:19\n+  --> $DIR/redundant_pattern_matching.rs:106:19\n    |\n LL |     } else if let Ok(_) = gen_res() {\n    |            -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:105:19\n+  --> $DIR/redundant_pattern_matching.rs:108:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:138:19\n+  --> $DIR/redundant_pattern_matching.rs:141:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:139:16\n+  --> $DIR/redundant_pattern_matching.rs:142:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:145:12\n+  --> $DIR/redundant_pattern_matching.rs:148:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:146:15\n+  --> $DIR/redundant_pattern_matching.rs:149:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 29 previous errors\n "}, {"sha": "8a831375b412dacdd4f705df37df47b507ca5823", "filename": "tests/ui/shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.stderr?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -104,7 +104,7 @@ note: previous binding is here\n LL |     let x = (1, x);\n    |         ^\n \n-error: `x` is shadowed by `y`\n+error: `x` is being shadowed\n   --> $DIR/shadow.rs:34:9\n    |\n LL |     let x = y;"}, {"sha": "bdb4710cc69723ca836eef19c18d2f4b06151167", "filename": "tests/ui/unit_return_expecting_ord.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_return_expecting_ord.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -0,0 +1,36 @@\n+#![warn(clippy::unit_return_expecting_ord)]\n+#![allow(clippy::needless_return)]\n+#![allow(clippy::unused_unit)]\n+#![feature(is_sorted)]\n+\n+struct Struct {\n+    field: isize,\n+}\n+\n+fn double(i: isize) -> isize {\n+    i * 2\n+}\n+\n+fn unit(_i: isize) {}\n+\n+fn main() {\n+    let mut structs = vec![Struct { field: 2 }, Struct { field: 1 }];\n+    structs.sort_by_key(|s| {\n+        double(s.field);\n+    });\n+    structs.sort_by_key(|s| double(s.field));\n+    structs.is_sorted_by_key(|s| {\n+        double(s.field);\n+    });\n+    structs.is_sorted_by_key(|s| {\n+        if s.field > 0 {\n+            ()\n+        } else {\n+            return ();\n+        }\n+    });\n+    structs.sort_by_key(|s| {\n+        return double(s.field);\n+    });\n+    structs.sort_by_key(|s| unit(s.field));\n+}"}, {"sha": "e63d58746090b73d36947e98efb4de0963b88dc7", "filename": "tests/ui/unit_return_expecting_ord.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Funit_return_expecting_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Funit_return_expecting_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_return_expecting_ord.stderr?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -0,0 +1,39 @@\n+error: this closure returns the unit type which also implements Ord\n+  --> $DIR/unit_return_expecting_ord.rs:18:25\n+   |\n+LL |     structs.sort_by_key(|s| {\n+   |                         ^^^\n+   |\n+   = note: `-D clippy::unit-return-expecting-ord` implied by `-D warnings`\n+help: probably caused by this trailing semicolon\n+  --> $DIR/unit_return_expecting_ord.rs:19:24\n+   |\n+LL |         double(s.field);\n+   |                        ^\n+\n+error: this closure returns the unit type which also implements PartialOrd\n+  --> $DIR/unit_return_expecting_ord.rs:22:30\n+   |\n+LL |     structs.is_sorted_by_key(|s| {\n+   |                              ^^^\n+   |\n+help: probably caused by this trailing semicolon\n+  --> $DIR/unit_return_expecting_ord.rs:23:24\n+   |\n+LL |         double(s.field);\n+   |                        ^\n+\n+error: this closure returns the unit type which also implements PartialOrd\n+  --> $DIR/unit_return_expecting_ord.rs:25:30\n+   |\n+LL |     structs.is_sorted_by_key(|s| {\n+   |                              ^^^\n+\n+error: this closure returns the unit type which also implements Ord\n+  --> $DIR/unit_return_expecting_ord.rs:35:25\n+   |\n+LL |     structs.sort_by_key(|s| unit(s.field));\n+   |                         ^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "813cdaecaa91a8864f8f285a8f3c3130c0cb5bc4", "filename": "tests/ui/useless_conversion.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fuseless_conversion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fuseless_conversion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.fixed?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -32,11 +32,20 @@ fn test_issue_3913() -> Result<(), std::io::Error> {\n     Ok(())\n }\n \n+fn test_issue_5833() -> Result<(), ()> {\n+    let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n+    let lines = text.lines();\n+    if Some(\"ok\") == lines.into_iter().next() {}\n+\n+    Ok(())\n+}\n+\n fn main() {\n     test_generic(10i32);\n     test_generic2::<i32, i32>(10i32);\n     test_questionmark().unwrap();\n     test_issue_3913().unwrap();\n+    test_issue_5833().unwrap();\n \n     let _: String = \"foo\".into();\n     let _: String = From::from(\"foo\");"}, {"sha": "540fea23b36b98e0061e4a7566b0666e04254516", "filename": "tests/ui/useless_conversion.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -32,11 +32,20 @@ fn test_issue_3913() -> Result<(), std::io::Error> {\n     Ok(())\n }\n \n+fn test_issue_5833() -> Result<(), ()> {\n+    let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n+    let lines = text.lines();\n+    if Some(\"ok\") == lines.into_iter().next() {}\n+\n+    Ok(())\n+}\n+\n fn main() {\n     test_generic(10i32);\n     test_generic2::<i32, i32>(10i32);\n     test_questionmark().unwrap();\n     test_issue_3913().unwrap();\n+    test_issue_5833().unwrap();\n \n     let _: String = \"foo\".into();\n     let _: String = From::from(\"foo\");"}, {"sha": "b958b0354520326577fdfcf17d56e932a6b813df", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -23,43 +23,43 @@ LL |         let _: i32 = 0i32.into();\n    |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n \n error: useless conversion to the same type\n-  --> $DIR/useless_conversion.rs:51:21\n+  --> $DIR/useless_conversion.rs:60:21\n    |\n LL |     let _: String = \"foo\".to_string().into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type\n-  --> $DIR/useless_conversion.rs:52:21\n+  --> $DIR/useless_conversion.rs:61:21\n    |\n LL |     let _: String = From::from(\"foo\".to_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type\n-  --> $DIR/useless_conversion.rs:53:13\n+  --> $DIR/useless_conversion.rs:62:13\n    |\n LL |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type\n-  --> $DIR/useless_conversion.rs:54:13\n+  --> $DIR/useless_conversion.rs:63:13\n    |\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n error: useless conversion to the same type\n-  --> $DIR/useless_conversion.rs:55:13\n+  --> $DIR/useless_conversion.rs:64:13\n    |\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n error: useless conversion to the same type\n-  --> $DIR/useless_conversion.rs:56:13\n+  --> $DIR/useless_conversion.rs:65:13\n    |\n LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n error: useless conversion to the same type\n-  --> $DIR/useless_conversion.rs:57:21\n+  --> $DIR/useless_conversion.rs:66:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `format!(\"Hello {}\", \"world\")`"}, {"sha": "7ed27439ec6e4432372224dd696d485024918b96", "filename": "tests/ui/vec_resize_to_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d164ab65f706540f0132268c8ad2237d2e53e08a/tests%2Fui%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_resize_to_zero.rs?ref=d164ab65f706540f0132268c8ad2237d2e53e08a", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     // not applicable\n     vec![1, 2, 3, 4, 5].resize(2, 5);\n \n-    // applicable here, but only implemented for integer litterals for now\n+    // applicable here, but only implemented for integer literals for now\n     vec![\"foo\", \"bar\", \"baz\"].resize(0, \"bar\");\n \n     // not applicable"}]}